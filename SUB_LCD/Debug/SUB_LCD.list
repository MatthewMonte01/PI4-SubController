
SUB_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ee0  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000700  080060a8  080060a8  000070a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067a8  080067a8  00008018  2**0
                  CONTENTS
  4 .ARM          00000008  080067a8  080067a8  000077a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067b0  080067b0  00008018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067b0  080067b0  000077b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080067b4  080067b4  000077b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080067b8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000414c  20000018  080067d0  00008018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004164  080067d0  00008164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c514  00000000  00000000  00008048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020b8  00000000  00000000  0001455c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  00016618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000817  00000000  00000000  00017098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021aa4  00000000  00000000  000178af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d823  00000000  00000000  00039353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb3dd  00000000  00000000  00046b76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00111f53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e3c  00000000  00000000  00111f98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00114dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000018 	.word	0x20000018
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006090 	.word	0x08006090

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000001c 	.word	0x2000001c
 8000204:	08006090 	.word	0x08006090

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295
 8000b18:	f000 b96a 	b.w	8000df0 <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9d08      	ldr	r5, [sp, #32]
 8000b3a:	460c      	mov	r4, r1
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d14e      	bne.n	8000bde <__udivmoddi4+0xaa>
 8000b40:	4694      	mov	ip, r2
 8000b42:	458c      	cmp	ip, r1
 8000b44:	4686      	mov	lr, r0
 8000b46:	fab2 f282 	clz	r2, r2
 8000b4a:	d962      	bls.n	8000c12 <__udivmoddi4+0xde>
 8000b4c:	b14a      	cbz	r2, 8000b62 <__udivmoddi4+0x2e>
 8000b4e:	f1c2 0320 	rsb	r3, r2, #32
 8000b52:	4091      	lsls	r1, r2
 8000b54:	fa20 f303 	lsr.w	r3, r0, r3
 8000b58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b5c:	4319      	orrs	r1, r3
 8000b5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b66:	fa1f f68c 	uxth.w	r6, ip
 8000b6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b72:	fb07 1114 	mls	r1, r7, r4, r1
 8000b76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b7a:	fb04 f106 	mul.w	r1, r4, r6
 8000b7e:	4299      	cmp	r1, r3
 8000b80:	d90a      	bls.n	8000b98 <__udivmoddi4+0x64>
 8000b82:	eb1c 0303 	adds.w	r3, ip, r3
 8000b86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b8a:	f080 8112 	bcs.w	8000db2 <__udivmoddi4+0x27e>
 8000b8e:	4299      	cmp	r1, r3
 8000b90:	f240 810f 	bls.w	8000db2 <__udivmoddi4+0x27e>
 8000b94:	3c02      	subs	r4, #2
 8000b96:	4463      	add	r3, ip
 8000b98:	1a59      	subs	r1, r3, r1
 8000b9a:	fa1f f38e 	uxth.w	r3, lr
 8000b9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ba2:	fb07 1110 	mls	r1, r7, r0, r1
 8000ba6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000baa:	fb00 f606 	mul.w	r6, r0, r6
 8000bae:	429e      	cmp	r6, r3
 8000bb0:	d90a      	bls.n	8000bc8 <__udivmoddi4+0x94>
 8000bb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bb6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bba:	f080 80fc 	bcs.w	8000db6 <__udivmoddi4+0x282>
 8000bbe:	429e      	cmp	r6, r3
 8000bc0:	f240 80f9 	bls.w	8000db6 <__udivmoddi4+0x282>
 8000bc4:	4463      	add	r3, ip
 8000bc6:	3802      	subs	r0, #2
 8000bc8:	1b9b      	subs	r3, r3, r6
 8000bca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bce:	2100      	movs	r1, #0
 8000bd0:	b11d      	cbz	r5, 8000bda <__udivmoddi4+0xa6>
 8000bd2:	40d3      	lsrs	r3, r2
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d905      	bls.n	8000bee <__udivmoddi4+0xba>
 8000be2:	b10d      	cbz	r5, 8000be8 <__udivmoddi4+0xb4>
 8000be4:	e9c5 0100 	strd	r0, r1, [r5]
 8000be8:	2100      	movs	r1, #0
 8000bea:	4608      	mov	r0, r1
 8000bec:	e7f5      	b.n	8000bda <__udivmoddi4+0xa6>
 8000bee:	fab3 f183 	clz	r1, r3
 8000bf2:	2900      	cmp	r1, #0
 8000bf4:	d146      	bne.n	8000c84 <__udivmoddi4+0x150>
 8000bf6:	42a3      	cmp	r3, r4
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xcc>
 8000bfa:	4290      	cmp	r0, r2
 8000bfc:	f0c0 80f0 	bcc.w	8000de0 <__udivmoddi4+0x2ac>
 8000c00:	1a86      	subs	r6, r0, r2
 8000c02:	eb64 0303 	sbc.w	r3, r4, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	2d00      	cmp	r5, #0
 8000c0a:	d0e6      	beq.n	8000bda <__udivmoddi4+0xa6>
 8000c0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c10:	e7e3      	b.n	8000bda <__udivmoddi4+0xa6>
 8000c12:	2a00      	cmp	r2, #0
 8000c14:	f040 8090 	bne.w	8000d38 <__udivmoddi4+0x204>
 8000c18:	eba1 040c 	sub.w	r4, r1, ip
 8000c1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c20:	fa1f f78c 	uxth.w	r7, ip
 8000c24:	2101      	movs	r1, #1
 8000c26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c36:	fb07 f006 	mul.w	r0, r7, r6
 8000c3a:	4298      	cmp	r0, r3
 8000c3c:	d908      	bls.n	8000c50 <__udivmoddi4+0x11c>
 8000c3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x11a>
 8000c48:	4298      	cmp	r0, r3
 8000c4a:	f200 80cd 	bhi.w	8000de8 <__udivmoddi4+0x2b4>
 8000c4e:	4626      	mov	r6, r4
 8000c50:	1a1c      	subs	r4, r3, r0
 8000c52:	fa1f f38e 	uxth.w	r3, lr
 8000c56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000c5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c62:	fb00 f707 	mul.w	r7, r0, r7
 8000c66:	429f      	cmp	r7, r3
 8000c68:	d908      	bls.n	8000c7c <__udivmoddi4+0x148>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x146>
 8000c74:	429f      	cmp	r7, r3
 8000c76:	f200 80b0 	bhi.w	8000dda <__udivmoddi4+0x2a6>
 8000c7a:	4620      	mov	r0, r4
 8000c7c:	1bdb      	subs	r3, r3, r7
 8000c7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c82:	e7a5      	b.n	8000bd0 <__udivmoddi4+0x9c>
 8000c84:	f1c1 0620 	rsb	r6, r1, #32
 8000c88:	408b      	lsls	r3, r1
 8000c8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c8e:	431f      	orrs	r7, r3
 8000c90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c94:	fa04 f301 	lsl.w	r3, r4, r1
 8000c98:	ea43 030c 	orr.w	r3, r3, ip
 8000c9c:	40f4      	lsrs	r4, r6
 8000c9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ca2:	0c38      	lsrs	r0, r7, #16
 8000ca4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ca8:	fbb4 fef0 	udiv	lr, r4, r0
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000cb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000cbc:	45a1      	cmp	r9, r4
 8000cbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x1a6>
 8000cc4:	193c      	adds	r4, r7, r4
 8000cc6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cca:	f080 8084 	bcs.w	8000dd6 <__udivmoddi4+0x2a2>
 8000cce:	45a1      	cmp	r9, r4
 8000cd0:	f240 8081 	bls.w	8000dd6 <__udivmoddi4+0x2a2>
 8000cd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cd8:	443c      	add	r4, r7
 8000cda:	eba4 0409 	sub.w	r4, r4, r9
 8000cde:	fa1f f983 	uxth.w	r9, r3
 8000ce2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ce6:	fb00 4413 	mls	r4, r0, r3, r4
 8000cea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cf2:	45a4      	cmp	ip, r4
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x1d2>
 8000cf6:	193c      	adds	r4, r7, r4
 8000cf8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cfc:	d267      	bcs.n	8000dce <__udivmoddi4+0x29a>
 8000cfe:	45a4      	cmp	ip, r4
 8000d00:	d965      	bls.n	8000dce <__udivmoddi4+0x29a>
 8000d02:	3b02      	subs	r3, #2
 8000d04:	443c      	add	r4, r7
 8000d06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d0e:	eba4 040c 	sub.w	r4, r4, ip
 8000d12:	429c      	cmp	r4, r3
 8000d14:	46ce      	mov	lr, r9
 8000d16:	469c      	mov	ip, r3
 8000d18:	d351      	bcc.n	8000dbe <__udivmoddi4+0x28a>
 8000d1a:	d04e      	beq.n	8000dba <__udivmoddi4+0x286>
 8000d1c:	b155      	cbz	r5, 8000d34 <__udivmoddi4+0x200>
 8000d1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d22:	eb64 040c 	sbc.w	r4, r4, ip
 8000d26:	fa04 f606 	lsl.w	r6, r4, r6
 8000d2a:	40cb      	lsrs	r3, r1
 8000d2c:	431e      	orrs	r6, r3
 8000d2e:	40cc      	lsrs	r4, r1
 8000d30:	e9c5 6400 	strd	r6, r4, [r5]
 8000d34:	2100      	movs	r1, #0
 8000d36:	e750      	b.n	8000bda <__udivmoddi4+0xa6>
 8000d38:	f1c2 0320 	rsb	r3, r2, #32
 8000d3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000d40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d44:	fa24 f303 	lsr.w	r3, r4, r3
 8000d48:	4094      	lsls	r4, r2
 8000d4a:	430c      	orrs	r4, r1
 8000d4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d54:	fa1f f78c 	uxth.w	r7, ip
 8000d58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d66:	fb00 f107 	mul.w	r1, r0, r7
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x24c>
 8000d6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d76:	d22c      	bcs.n	8000dd2 <__udivmoddi4+0x29e>
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d92a      	bls.n	8000dd2 <__udivmoddi4+0x29e>
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	4463      	add	r3, ip
 8000d80:	1a5b      	subs	r3, r3, r1
 8000d82:	b2a4      	uxth	r4, r4
 8000d84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d88:	fb08 3311 	mls	r3, r8, r1, r3
 8000d8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d90:	fb01 f307 	mul.w	r3, r1, r7
 8000d94:	42a3      	cmp	r3, r4
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x276>
 8000d98:	eb1c 0404 	adds.w	r4, ip, r4
 8000d9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000da0:	d213      	bcs.n	8000dca <__udivmoddi4+0x296>
 8000da2:	42a3      	cmp	r3, r4
 8000da4:	d911      	bls.n	8000dca <__udivmoddi4+0x296>
 8000da6:	3902      	subs	r1, #2
 8000da8:	4464      	add	r4, ip
 8000daa:	1ae4      	subs	r4, r4, r3
 8000dac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000db0:	e739      	b.n	8000c26 <__udivmoddi4+0xf2>
 8000db2:	4604      	mov	r4, r0
 8000db4:	e6f0      	b.n	8000b98 <__udivmoddi4+0x64>
 8000db6:	4608      	mov	r0, r1
 8000db8:	e706      	b.n	8000bc8 <__udivmoddi4+0x94>
 8000dba:	45c8      	cmp	r8, r9
 8000dbc:	d2ae      	bcs.n	8000d1c <__udivmoddi4+0x1e8>
 8000dbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	e7a8      	b.n	8000d1c <__udivmoddi4+0x1e8>
 8000dca:	4631      	mov	r1, r6
 8000dcc:	e7ed      	b.n	8000daa <__udivmoddi4+0x276>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	e799      	b.n	8000d06 <__udivmoddi4+0x1d2>
 8000dd2:	4630      	mov	r0, r6
 8000dd4:	e7d4      	b.n	8000d80 <__udivmoddi4+0x24c>
 8000dd6:	46d6      	mov	lr, sl
 8000dd8:	e77f      	b.n	8000cda <__udivmoddi4+0x1a6>
 8000dda:	4463      	add	r3, ip
 8000ddc:	3802      	subs	r0, #2
 8000dde:	e74d      	b.n	8000c7c <__udivmoddi4+0x148>
 8000de0:	4606      	mov	r6, r0
 8000de2:	4623      	mov	r3, r4
 8000de4:	4608      	mov	r0, r1
 8000de6:	e70f      	b.n	8000c08 <__udivmoddi4+0xd4>
 8000de8:	3e02      	subs	r6, #2
 8000dea:	4463      	add	r3, ip
 8000dec:	e730      	b.n	8000c50 <__udivmoddi4+0x11c>
 8000dee:	bf00      	nop

08000df0 <__aeabi_idiv0>:
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <spi_write>:
/*
 * Writes a byte to SPI without changing chip select (CS) state.
 * Called by the write_command() and write_data() functions which
 * control these pins as required.
 */
void spi_write(unsigned char data) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &data, 1, 10);
 8000dfe:	1df9      	adds	r1, r7, #7
 8000e00:	230a      	movs	r3, #10
 8000e02:	2201      	movs	r2, #1
 8000e04:	4807      	ldr	r0, [pc, #28]	@ (8000e24 <spi_write+0x30>)
 8000e06:	f003 f8e2 	bl	8003fce <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000e0a:	bf00      	nop
 8000e0c:	4805      	ldr	r0, [pc, #20]	@ (8000e24 <spi_write+0x30>)
 8000e0e:	f003 fa21 	bl	8004254 <HAL_SPI_GetState>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d1f9      	bne.n	8000e0c <spi_write+0x18>
}
 8000e18:	bf00      	nop
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20004038 	.word	0x20004038

08000e28 <write_buffer>:

/*
 * Writes the V-RAM buffer to the display.
 * TODO: currently only uses SPI.
 */
void write_buffer() {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	HAL_SPI_Transmit(&hspi1, &v_buffer, buffer_counter, 10);
 8000e2c:	4b05      	ldr	r3, [pc, #20]	@ (8000e44 <write_buffer+0x1c>)
 8000e2e:	881a      	ldrh	r2, [r3, #0]
 8000e30:	230a      	movs	r3, #10
 8000e32:	4905      	ldr	r1, [pc, #20]	@ (8000e48 <write_buffer+0x20>)
 8000e34:	4805      	ldr	r0, [pc, #20]	@ (8000e4c <write_buffer+0x24>)
 8000e36:	f003 f8ca 	bl	8003fce <HAL_SPI_Transmit>
	buffer_counter = 0;
 8000e3a:	4b02      	ldr	r3, [pc, #8]	@ (8000e44 <write_buffer+0x1c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	801a      	strh	r2, [r3, #0]
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20004034 	.word	0x20004034
 8000e48:	20000034 	.word	0x20000034
 8000e4c:	20004038 	.word	0x20004038

08000e50 <lcd_write_data>:
}

/*
 * Writes a data byte to the display. Pulls CS low as required.
 */
void lcd_write_data(unsigned char data) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	2104      	movs	r1, #4
 8000e5e:	480a      	ldr	r0, [pc, #40]	@ (8000e88 <lcd_write_data+0x38>)
 8000e60:	f002 f9da 	bl	8003218 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2101      	movs	r1, #1
 8000e68:	4807      	ldr	r0, [pc, #28]	@ (8000e88 <lcd_write_data+0x38>)
 8000e6a:	f002 f9d5 	bl	8003218 <HAL_GPIO_WritePin>
    if(SPI_MODE)
    	spi_write(data);
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff ffbf 	bl	8000df4 <spi_write>
	else
		parallel_write(data);
    //HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000e76:	2201      	movs	r2, #1
 8000e78:	2101      	movs	r1, #1
 8000e7a:	4803      	ldr	r0, [pc, #12]	@ (8000e88 <lcd_write_data+0x38>)
 8000e7c:	f002 f9cc 	bl	8003218 <HAL_GPIO_WritePin>
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40020400 	.word	0x40020400

08000e8c <lcd_write_command>:

/*
 * Writes a command byte to the display
 */
void lcd_write_command(unsigned char data) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2104      	movs	r1, #4
 8000e9a:	480a      	ldr	r0, [pc, #40]	@ (8000ec4 <lcd_write_command+0x38>)
 8000e9c:	f002 f9bc 	bl	8003218 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	4807      	ldr	r0, [pc, #28]	@ (8000ec4 <lcd_write_command+0x38>)
 8000ea6:	f002 f9b7 	bl	8003218 <HAL_GPIO_WritePin>
    if(SPI_MODE)
    	spi_write(data);
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ffa1 	bl	8000df4 <spi_write>
	else
		parallel_write(data);
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	4803      	ldr	r0, [pc, #12]	@ (8000ec4 <lcd_write_command+0x38>)
 8000eb8:	f002 f9ae 	bl	8003218 <HAL_GPIO_WritePin>
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40020400 	.word	0x40020400

08000ec8 <swap_int>:
}

/*
 * Swaps two 16-bit integers
 */
void swap_int(unsigned int *num1, unsigned int *num2) {
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
    int temp = *num2;
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	60fb      	str	r3, [r7, #12]
    *num2 = *num1;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	601a      	str	r2, [r3, #0]
    *num1 = temp;
 8000ee0:	68fa      	ldr	r2, [r7, #12]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	601a      	str	r2, [r3, #0]
}
 8000ee6:	bf00      	nop
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
	...

08000ef4 <lcd_init_spi>:

}
/*
 * Same as above, but initialises with an SPI port instead.
 */
void lcd_init_spi() {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
    //SET control pins for the LCD HIGH (they are active LOW)
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_SET); //RESET pin HIGH (Active LOW)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	2102      	movs	r1, #2
 8000efc:	4812      	ldr	r0, [pc, #72]	@ (8000f48 <lcd_init_spi+0x54>)
 8000efe:	f002 f98b 	bl	8003218 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET); //Chip Select Active LOW
 8000f02:	2201      	movs	r2, #1
 8000f04:	2101      	movs	r1, #1
 8000f06:	4810      	ldr	r0, [pc, #64]	@ (8000f48 <lcd_init_spi+0x54>)
 8000f08:	f002 f986 	bl	8003218 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET); //Data / Command select Active LOW
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	2104      	movs	r1, #4
 8000f10:	480d      	ldr	r0, [pc, #52]	@ (8000f48 <lcd_init_spi+0x54>)
 8000f12:	f002 f981 	bl	8003218 <HAL_GPIO_WritePin>
    //Cycle reset pin
    HAL_Delay(100);
 8000f16:	2064      	movs	r0, #100	@ 0x64
 8000f18:	f001 fb44 	bl	80025a4 <HAL_Delay>
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2102      	movs	r1, #2
 8000f20:	4809      	ldr	r0, [pc, #36]	@ (8000f48 <lcd_init_spi+0x54>)
 8000f22:	f002 f979 	bl	8003218 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000f26:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f2a:	f001 fb3b 	bl	80025a4 <HAL_Delay>
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_SET);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	2102      	movs	r1, #2
 8000f32:	4805      	ldr	r0, [pc, #20]	@ (8000f48 <lcd_init_spi+0x54>)
 8000f34:	f002 f970 	bl	8003218 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000f38:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f3c:	f001 fb32 	bl	80025a4 <HAL_Delay>

    lcd_init_command_list();
 8000f40:	f000 f804 	bl	8000f4c <lcd_init_command_list>

}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40020400 	.word	0x40020400

08000f4c <lcd_init_command_list>:

/**
 * This is the magic initialisation routine.
 */
void lcd_init_command_list(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0

	//********Start Initial Sequence*******//
	lcd_write_command(0xE0); //P-Gamma
 8000f50:	20e0      	movs	r0, #224	@ 0xe0
 8000f52:	f7ff ff9b 	bl	8000e8c <lcd_write_command>
	lcd_write_data(0x00);
 8000f56:	2000      	movs	r0, #0
 8000f58:	f7ff ff7a 	bl	8000e50 <lcd_write_data>
	lcd_write_data(0x13);
 8000f5c:	2013      	movs	r0, #19
 8000f5e:	f7ff ff77 	bl	8000e50 <lcd_write_data>
	lcd_write_data(0x18);
 8000f62:	2018      	movs	r0, #24
 8000f64:	f7ff ff74 	bl	8000e50 <lcd_write_data>
	lcd_write_data(0x04);
 8000f68:	2004      	movs	r0, #4
 8000f6a:	f7ff ff71 	bl	8000e50 <lcd_write_data>
	lcd_write_data(0x0F);
 8000f6e:	200f      	movs	r0, #15
 8000f70:	f7ff ff6e 	bl	8000e50 <lcd_write_data>
	lcd_write_data(0x06);
 8000f74:	2006      	movs	r0, #6
 8000f76:	f7ff ff6b 	bl	8000e50 <lcd_write_data>
	lcd_write_data(0x3A);
 8000f7a:	203a      	movs	r0, #58	@ 0x3a
 8000f7c:	f7ff ff68 	bl	8000e50 <lcd_write_data>
	lcd_write_data(0x56);
 8000f80:	2056      	movs	r0, #86	@ 0x56
 8000f82:	f7ff ff65 	bl	8000e50 <lcd_write_data>
	lcd_write_data(0x4D);
 8000f86:	204d      	movs	r0, #77	@ 0x4d
 8000f88:	f7ff ff62 	bl	8000e50 <lcd_write_data>
	lcd_write_data(0x03);
 8000f8c:	2003      	movs	r0, #3
 8000f8e:	f7ff ff5f 	bl	8000e50 <lcd_write_data>
	lcd_write_data(0x0A);
 8000f92:	200a      	movs	r0, #10
 8000f94:	f7ff ff5c 	bl	8000e50 <lcd_write_data>
	lcd_write_data(0x06);
 8000f98:	2006      	movs	r0, #6
 8000f9a:	f7ff ff59 	bl	8000e50 <lcd_write_data>
	lcd_write_data(0x30);
 8000f9e:	2030      	movs	r0, #48	@ 0x30
 8000fa0:	f7ff ff56 	bl	8000e50 <lcd_write_data>
	lcd_write_data(0x3E);
 8000fa4:	203e      	movs	r0, #62	@ 0x3e
 8000fa6:	f7ff ff53 	bl	8000e50 <lcd_write_data>
	lcd_write_data(0x0F);
 8000faa:	200f      	movs	r0, #15
 8000fac:	f7ff ff50 	bl	8000e50 <lcd_write_data>
	lcd_write_command(0XE1); //N-Gamma
 8000fb0:	20e1      	movs	r0, #225	@ 0xe1
 8000fb2:	f7ff ff6b 	bl	8000e8c <lcd_write_command>
	lcd_write_data(0x00);
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f7ff ff4a 	bl	8000e50 <lcd_write_data>
	lcd_write_data(0x13);
 8000fbc:	2013      	movs	r0, #19
 8000fbe:	f7ff ff47 	bl	8000e50 <lcd_write_data>
	lcd_write_data(0x18);
 8000fc2:	2018      	movs	r0, #24
 8000fc4:	f7ff ff44 	bl	8000e50 <lcd_write_data>
	lcd_write_data(0x01);
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f7ff ff41 	bl	8000e50 <lcd_write_data>
	lcd_write_data(0x11);
 8000fce:	2011      	movs	r0, #17
 8000fd0:	f7ff ff3e 	bl	8000e50 <lcd_write_data>
	lcd_write_data(0x06);
 8000fd4:	2006      	movs	r0, #6
 8000fd6:	f7ff ff3b 	bl	8000e50 <lcd_write_data>
	lcd_write_data(0x38);
 8000fda:	2038      	movs	r0, #56	@ 0x38
 8000fdc:	f7ff ff38 	bl	8000e50 <lcd_write_data>
	lcd_write_data(0x34);
 8000fe0:	2034      	movs	r0, #52	@ 0x34
 8000fe2:	f7ff ff35 	bl	8000e50 <lcd_write_data>
	lcd_write_data(0x4D);
 8000fe6:	204d      	movs	r0, #77	@ 0x4d
 8000fe8:	f7ff ff32 	bl	8000e50 <lcd_write_data>
	lcd_write_data(0x06);
 8000fec:	2006      	movs	r0, #6
 8000fee:	f7ff ff2f 	bl	8000e50 <lcd_write_data>
	lcd_write_data(0x0D);
 8000ff2:	200d      	movs	r0, #13
 8000ff4:	f7ff ff2c 	bl	8000e50 <lcd_write_data>
	lcd_write_data(0x0B);
 8000ff8:	200b      	movs	r0, #11
 8000ffa:	f7ff ff29 	bl	8000e50 <lcd_write_data>
	lcd_write_data(0x31);
 8000ffe:	2031      	movs	r0, #49	@ 0x31
 8001000:	f7ff ff26 	bl	8000e50 <lcd_write_data>
	lcd_write_data(0x37);
 8001004:	2037      	movs	r0, #55	@ 0x37
 8001006:	f7ff ff23 	bl	8000e50 <lcd_write_data>
	lcd_write_data(0x0F);
 800100a:	200f      	movs	r0, #15
 800100c:	f7ff ff20 	bl	8000e50 <lcd_write_data>
	lcd_write_command(0xC0);
 8001010:	20c0      	movs	r0, #192	@ 0xc0
 8001012:	f7ff ff3b 	bl	8000e8c <lcd_write_command>
	lcd_write_data(0x18);
 8001016:	2018      	movs	r0, #24
 8001018:	f7ff ff1a 	bl	8000e50 <lcd_write_data>
	lcd_write_data(0x16);
 800101c:	2016      	movs	r0, #22
 800101e:	f7ff ff17 	bl	8000e50 <lcd_write_data>
	lcd_write_command(0xC1);
 8001022:	20c1      	movs	r0, #193	@ 0xc1
 8001024:	f7ff ff32 	bl	8000e8c <lcd_write_command>
	lcd_write_data(0x45);
 8001028:	2045      	movs	r0, #69	@ 0x45
 800102a:	f7ff ff11 	bl	8000e50 <lcd_write_data>
	lcd_write_command(0xC5); //VCOM
 800102e:	20c5      	movs	r0, #197	@ 0xc5
 8001030:	f7ff ff2c 	bl	8000e8c <lcd_write_command>
	lcd_write_data(0x00);
 8001034:	2000      	movs	r0, #0
 8001036:	f7ff ff0b 	bl	8000e50 <lcd_write_data>
	lcd_write_data(0x63);
 800103a:	2063      	movs	r0, #99	@ 0x63
 800103c:	f7ff ff08 	bl	8000e50 <lcd_write_data>
	lcd_write_data(0x01);
 8001040:	2001      	movs	r0, #1
 8001042:	f7ff ff05 	bl	8000e50 <lcd_write_data>

	lcd_write_command(0x36); //RAM address mode
 8001046:	2036      	movs	r0, #54	@ 0x36
 8001048:	f7ff ff20 	bl	8000e8c <lcd_write_command>
	//0xF8 and 0x3C are landscape mode. 0x5C and 0x9C for portrait mode.
	if(LANDSCAPE)
		lcd_write_data(0xF8);
 800104c:	20f8      	movs	r0, #248	@ 0xf8
 800104e:	f7ff feff 	bl	8000e50 <lcd_write_data>
	else
		lcd_write_data(0x5C);

	lcd_write_command(0x3A); //Interface Mode Control
 8001052:	203a      	movs	r0, #58	@ 0x3a
 8001054:	f7ff ff1a 	bl	8000e8c <lcd_write_command>
	lcd_write_data(0x66); //16-bit serial mode
 8001058:	2066      	movs	r0, #102	@ 0x66
 800105a:	f7ff fef9 	bl	8000e50 <lcd_write_data>
	lcd_write_command(0xB0); //Interface Mode Control
 800105e:	20b0      	movs	r0, #176	@ 0xb0
 8001060:	f7ff ff14 	bl	8000e8c <lcd_write_command>
	lcd_write_data(0x80); //SDO not in use
 8001064:	2080      	movs	r0, #128	@ 0x80
 8001066:	f7ff fef3 	bl	8000e50 <lcd_write_data>
	lcd_write_command(0xB1); //Frame rate 70HZ
 800106a:	20b1      	movs	r0, #177	@ 0xb1
 800106c:	f7ff ff0e 	bl	8000e8c <lcd_write_command>
	lcd_write_data(0x00); //
 8001070:	2000      	movs	r0, #0
 8001072:	f7ff feed 	bl	8000e50 <lcd_write_data>
	lcd_write_data(0x10);
 8001076:	2010      	movs	r0, #16
 8001078:	f7ff feea 	bl	8000e50 <lcd_write_data>
	lcd_write_command(0xB4);
 800107c:	20b4      	movs	r0, #180	@ 0xb4
 800107e:	f7ff ff05 	bl	8000e8c <lcd_write_command>
	lcd_write_data(0x02);
 8001082:	2002      	movs	r0, #2
 8001084:	f7ff fee4 	bl	8000e50 <lcd_write_data>

	lcd_write_command(0xB6); //RGB/MCU Interface Control
 8001088:	20b6      	movs	r0, #182	@ 0xb6
 800108a:	f7ff feff 	bl	8000e8c <lcd_write_command>
	lcd_write_data(0x02);
 800108e:	2002      	movs	r0, #2
 8001090:	f7ff fede 	bl	8000e50 <lcd_write_data>
	//lcd_write_data(0x22);

	lcd_write_command(0xE9);
 8001094:	20e9      	movs	r0, #233	@ 0xe9
 8001096:	f7ff fef9 	bl	8000e8c <lcd_write_command>
	lcd_write_data(0x00);
 800109a:	2000      	movs	r0, #0
 800109c:	f7ff fed8 	bl	8000e50 <lcd_write_data>
	lcd_write_command(0xF7);
 80010a0:	20f7      	movs	r0, #247	@ 0xf7
 80010a2:	f7ff fef3 	bl	8000e8c <lcd_write_command>
	lcd_write_data(0xA9);
 80010a6:	20a9      	movs	r0, #169	@ 0xa9
 80010a8:	f7ff fed2 	bl	8000e50 <lcd_write_data>
	lcd_write_data(0x51);
 80010ac:	2051      	movs	r0, #81	@ 0x51
 80010ae:	f7ff fecf 	bl	8000e50 <lcd_write_data>
	lcd_write_data(0x2C);
 80010b2:	202c      	movs	r0, #44	@ 0x2c
 80010b4:	f7ff fecc 	bl	8000e50 <lcd_write_data>
	lcd_write_data(0x82);
 80010b8:	2082      	movs	r0, #130	@ 0x82
 80010ba:	f7ff fec9 	bl	8000e50 <lcd_write_data>
	lcd_write_command(0x11);
 80010be:	2011      	movs	r0, #17
 80010c0:	f7ff fee4 	bl	8000e8c <lcd_write_command>
	HAL_Delay(120);
 80010c4:	2078      	movs	r0, #120	@ 0x78
 80010c6:	f001 fa6d 	bl	80025a4 <HAL_Delay>
	lcd_write_command(0x21);
 80010ca:	2021      	movs	r0, #33	@ 0x21
 80010cc:	f7ff fede 	bl	8000e8c <lcd_write_command>


	HAL_Delay(120);
 80010d0:	2078      	movs	r0, #120	@ 0x78
 80010d2:	f001 fa67 	bl	80025a4 <HAL_Delay>
	lcd_write_command(0x29);
 80010d6:	2029      	movs	r0, #41	@ 0x29
 80010d8:	f7ff fed8 	bl	8000e8c <lcd_write_command>
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}

080010e0 <set_draw_window>:
/*
 * Sets the X,Y position for following commands on the display.
 * Should only be called within a function that draws something
 * to the display.
 */
void set_draw_window(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
 80010ec:	603b      	str	r3, [r7, #0]

    //Check that the values are in order
    if(x2 < x1)
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d206      	bcs.n	8001104 <set_draw_window+0x24>
        swap_int(&x2, &x1);
 80010f6:	f107 020c 	add.w	r2, r7, #12
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	4611      	mov	r1, r2
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fee2 	bl	8000ec8 <swap_int>
    if(y2 < y1)
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	429a      	cmp	r2, r3
 800110a:	d206      	bcs.n	800111a <set_draw_window+0x3a>
        swap_int(&y2, &y1);
 800110c:	f107 0208 	add.w	r2, r7, #8
 8001110:	463b      	mov	r3, r7
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fed7 	bl	8000ec8 <swap_int>

    lcd_write_command(ILI9488_CASET);
 800111a:	202a      	movs	r0, #42	@ 0x2a
 800111c:	f7ff feb6 	bl	8000e8c <lcd_write_command>
    lcd_write_data(x1 >> 8);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	0a1b      	lsrs	r3, r3, #8
 8001124:	b2db      	uxtb	r3, r3
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff fe92 	bl	8000e50 <lcd_write_data>
    lcd_write_data(x1 & 0xFF);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	b2db      	uxtb	r3, r3
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fe8d 	bl	8000e50 <lcd_write_data>

    lcd_write_data(x2 >> 8);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	0a1b      	lsrs	r3, r3, #8
 800113a:	b2db      	uxtb	r3, r3
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fe87 	bl	8000e50 <lcd_write_data>
    lcd_write_data(x2 & 0xFF);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fe82 	bl	8000e50 <lcd_write_data>

    lcd_write_command(ILI9488_PASET);
 800114c:	202b      	movs	r0, #43	@ 0x2b
 800114e:	f7ff fe9d 	bl	8000e8c <lcd_write_command>
    lcd_write_data(y1 >> 8);
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	0a1b      	lsrs	r3, r3, #8
 8001156:	b2db      	uxtb	r3, r3
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fe79 	bl	8000e50 <lcd_write_data>
    lcd_write_data(y1 & 0xFF);
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fe74 	bl	8000e50 <lcd_write_data>

    lcd_write_data(y2 >> 8);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	0a1b      	lsrs	r3, r3, #8
 800116c:	b2db      	uxtb	r3, r3
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff fe6e 	bl	8000e50 <lcd_write_data>
    lcd_write_data(y2 & 0xFF);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	b2db      	uxtb	r3, r3
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff fe69 	bl	8000e50 <lcd_write_data>

    lcd_write_command(ILI9488_RAMWR);
 800117e:	202c      	movs	r0, #44	@ 0x2c
 8001180:	f7ff fe84 	bl	8000e8c <lcd_write_command>
}
 8001184:	bf00      	nop
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <draw_pixel>:
 * Draws a single pixel to the LCD at position X, Y, with
 * Colour.
 *
 * 28 bytes per pixel. Use it wisely.
 */
void draw_pixel(unsigned int x, unsigned int y, unsigned int colour) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]

    //All my colours are in 16-bit RGB 5-6-5 so they have to be converted to 18-bit RGB
    unsigned char r = (colour >> 8) & 0xF8;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	0a1b      	lsrs	r3, r3, #8
 800119c:	b2db      	uxtb	r3, r3
 800119e:	f023 0307 	bic.w	r3, r3, #7
 80011a2:	75fb      	strb	r3, [r7, #23]
    unsigned char g = (colour >> 3) & 0xFC;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	08db      	lsrs	r3, r3, #3
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	f023 0303 	bic.w	r3, r3, #3
 80011ae:	75bb      	strb	r3, [r7, #22]
    unsigned char b = (colour << 3);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	757b      	strb	r3, [r7, #21]

    //Set the x, y position that we want to write to
    set_draw_window(x, y, x+1, y+1);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	1c5a      	adds	r2, r3, #1
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	3301      	adds	r3, #1
 80011c0:	68b9      	ldr	r1, [r7, #8]
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f7ff ff8c 	bl	80010e0 <set_draw_window>
    lcd_write_data(r);
 80011c8:	7dfb      	ldrb	r3, [r7, #23]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff fe40 	bl	8000e50 <lcd_write_data>
    lcd_write_data(g);
 80011d0:	7dbb      	ldrb	r3, [r7, #22]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fe3c 	bl	8000e50 <lcd_write_data>
    lcd_write_data(b);
 80011d8:	7d7b      	ldrb	r3, [r7, #21]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fe38 	bl	8000e50 <lcd_write_data>
}
 80011e0:	bf00      	nop
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <fill_rectangle>:

/*
 * Fills a rectangle with a given colour
 */
void fill_rectangle(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2, unsigned int colour) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
 80011f4:	603b      	str	r3, [r7, #0]
    //All my colours are in 16-bit RGB 5-6-5 so they have to be converted to 18-bit RGB
    unsigned char r = (colour >> 8) & 0xF8;
 80011f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011f8:	0a1b      	lsrs	r3, r3, #8
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	f023 0307 	bic.w	r3, r3, #7
 8001200:	75fb      	strb	r3, [r7, #23]
    unsigned char g = (colour >> 3) & 0xFC;
 8001202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001204:	08db      	lsrs	r3, r3, #3
 8001206:	b2db      	uxtb	r3, r3
 8001208:	f023 0303 	bic.w	r3, r3, #3
 800120c:	75bb      	strb	r3, [r7, #22]
    unsigned char b = (colour << 3);
 800120e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001210:	b2db      	uxtb	r3, r3
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	757b      	strb	r3, [r7, #21]


    //Set the drawing region
    set_draw_window(x1, y1, x2, y2);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	68b9      	ldr	r1, [r7, #8]
 800121c:	68f8      	ldr	r0, [r7, #12]
 800121e:	f7ff ff5f 	bl	80010e0 <set_draw_window>

    //We will do the SPI write manually here for speed
    //( the data sheet says it doesn't matter if CS changes between
    // data sections but I don't trust it.)
    //CS low to begin data
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8001222:	2201      	movs	r2, #1
 8001224:	2104      	movs	r1, #4
 8001226:	482c      	ldr	r0, [pc, #176]	@ (80012d8 <fill_rectangle+0xf0>)
 8001228:	f001 fff6 	bl	8003218 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 800122c:	2200      	movs	r2, #0
 800122e:	2101      	movs	r1, #1
 8001230:	4829      	ldr	r0, [pc, #164]	@ (80012d8 <fill_rectangle+0xf0>)
 8001232:	f001 fff1 	bl	8003218 <HAL_GPIO_WritePin>


    //Write colour to each pixel
    for(int y = 0; y < y2-y1+1 ; y++) {
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
 800123a:	e03b      	b.n	80012b4 <fill_rectangle+0xcc>
        for(int x = 0; x < x2-x1+1; x++) {
 800123c:	2300      	movs	r3, #0
 800123e:	61bb      	str	r3, [r7, #24]
 8001240:	e02e      	b.n	80012a0 <fill_rectangle+0xb8>
		    v_buffer[buffer_counter] = r;
 8001242:	4b26      	ldr	r3, [pc, #152]	@ (80012dc <fill_rectangle+0xf4>)
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	4619      	mov	r1, r3
 8001248:	4a25      	ldr	r2, [pc, #148]	@ (80012e0 <fill_rectangle+0xf8>)
 800124a:	7dfb      	ldrb	r3, [r7, #23]
 800124c:	5453      	strb	r3, [r2, r1]
		    buffer_counter++;
 800124e:	4b23      	ldr	r3, [pc, #140]	@ (80012dc <fill_rectangle+0xf4>)
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	3301      	adds	r3, #1
 8001254:	b29a      	uxth	r2, r3
 8001256:	4b21      	ldr	r3, [pc, #132]	@ (80012dc <fill_rectangle+0xf4>)
 8001258:	801a      	strh	r2, [r3, #0]
		    v_buffer[buffer_counter] = g;
 800125a:	4b20      	ldr	r3, [pc, #128]	@ (80012dc <fill_rectangle+0xf4>)
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	4619      	mov	r1, r3
 8001260:	4a1f      	ldr	r2, [pc, #124]	@ (80012e0 <fill_rectangle+0xf8>)
 8001262:	7dbb      	ldrb	r3, [r7, #22]
 8001264:	5453      	strb	r3, [r2, r1]
		    buffer_counter++;
 8001266:	4b1d      	ldr	r3, [pc, #116]	@ (80012dc <fill_rectangle+0xf4>)
 8001268:	881b      	ldrh	r3, [r3, #0]
 800126a:	3301      	adds	r3, #1
 800126c:	b29a      	uxth	r2, r3
 800126e:	4b1b      	ldr	r3, [pc, #108]	@ (80012dc <fill_rectangle+0xf4>)
 8001270:	801a      	strh	r2, [r3, #0]
		    v_buffer[buffer_counter] = b;
 8001272:	4b1a      	ldr	r3, [pc, #104]	@ (80012dc <fill_rectangle+0xf4>)
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	4619      	mov	r1, r3
 8001278:	4a19      	ldr	r2, [pc, #100]	@ (80012e0 <fill_rectangle+0xf8>)
 800127a:	7d7b      	ldrb	r3, [r7, #21]
 800127c:	5453      	strb	r3, [r2, r1]
		    buffer_counter++;
 800127e:	4b17      	ldr	r3, [pc, #92]	@ (80012dc <fill_rectangle+0xf4>)
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	3301      	adds	r3, #1
 8001284:	b29a      	uxth	r2, r3
 8001286:	4b15      	ldr	r3, [pc, #84]	@ (80012dc <fill_rectangle+0xf4>)
 8001288:	801a      	strh	r2, [r3, #0]

			//If the buffer is full then send it to the dispaly
			if(buffer_counter > V_BUFFER_SIZE - 3) {
 800128a:	4b14      	ldr	r3, [pc, #80]	@ (80012dc <fill_rectangle+0xf4>)
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	f643 72fc 	movw	r2, #16380	@ 0x3ffc
 8001292:	4293      	cmp	r3, r2
 8001294:	d901      	bls.n	800129a <fill_rectangle+0xb2>
				write_buffer();
 8001296:	f7ff fdc7 	bl	8000e28 <write_buffer>
        for(int x = 0; x < x2-x1+1; x++) {
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	3301      	adds	r3, #1
 800129e:	61bb      	str	r3, [r7, #24]
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	1c5a      	adds	r2, r3, #1
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d8c9      	bhi.n	8001242 <fill_rectangle+0x5a>
    for(int y = 0; y < y2-y1+1 ; y++) {
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3301      	adds	r3, #1
 80012b2:	61fb      	str	r3, [r7, #28]
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	1c5a      	adds	r2, r3, #1
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d8bc      	bhi.n	800123c <fill_rectangle+0x54>
			}
        }
    }
    //Send the remaining bytes
	write_buffer();
 80012c2:	f7ff fdb1 	bl	8000e28 <write_buffer>
    //Return CS to high
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80012c6:	2201      	movs	r2, #1
 80012c8:	2101      	movs	r1, #1
 80012ca:	4803      	ldr	r0, [pc, #12]	@ (80012d8 <fill_rectangle+0xf0>)
 80012cc:	f001 ffa4 	bl	8003218 <HAL_GPIO_WritePin>
}
 80012d0:	bf00      	nop
 80012d2:	3720      	adds	r7, #32
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40020400 	.word	0x40020400
 80012dc:	20004034 	.word	0x20004034
 80012e0:	20000034 	.word	0x20000034

080012e4 <draw_char>:
 *
 * NOTE:
 * This sends approx. 800 bytes per char to the LCD, but it does preserver
 * the background image. Use the draw_fast_char() function where possible.
 */
void draw_char(unsigned int x, unsigned int y, char c, unsigned int colour, char size) {
 80012e4:	b590      	push	{r4, r7, lr}
 80012e6:	b08b      	sub	sp, #44	@ 0x2c
 80012e8:	af02      	add	r7, sp, #8
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	603b      	str	r3, [r7, #0]
 80012f0:	4613      	mov	r3, r2
 80012f2:	71fb      	strb	r3, [r7, #7]
    int i, j;
    char line;
    unsigned int font_index = (c - 32);
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	3b20      	subs	r3, #32
 80012f8:	617b      	str	r3, [r7, #20]

    //Get the line of pixels from the font file
    for(i=0; i<13; i++ ) {
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
 80012fe:	e062      	b.n	80013c6 <draw_char+0xe2>

        line = FontLarge[font_index][12 - i];
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f1c3 010c 	rsb	r1, r3, #12
 8001306:	4834      	ldr	r0, [pc, #208]	@ (80013d8 <draw_char+0xf4>)
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	4613      	mov	r3, r2
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	4413      	add	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	4403      	add	r3, r0
 8001316:	440b      	add	r3, r1
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	74fb      	strb	r3, [r7, #19]

        //Draw the pixels to screen
        for(j=0; j<8; j++) {
 800131c:	2300      	movs	r3, #0
 800131e:	61bb      	str	r3, [r7, #24]
 8001320:	e04b      	b.n	80013ba <draw_char+0xd6>
            if(line & (0x01 << j)) {
 8001322:	7cfa      	ldrb	r2, [r7, #19]
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	fa42 f303 	asr.w	r3, r2, r3
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	2b00      	cmp	r3, #0
 8001330:	d040      	beq.n	80013b4 <draw_char+0xd0>
                if(size == 1) {
 8001332:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001336:	2b01      	cmp	r3, #1
 8001338:	d10c      	bne.n	8001354 <draw_char+0x70>
                    //If we are just doing the smallest size font then do a single pixel each
                    draw_pixel(x+(8-j), y+i, colour);
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	f103 0008 	add.w	r0, r3, #8
 8001344:	69fa      	ldr	r2, [r7, #28]
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	4413      	add	r3, r2
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	4619      	mov	r1, r3
 800134e:	f7ff ff1d 	bl	800118c <draw_pixel>
 8001352:	e02f      	b.n	80013b4 <draw_char+0xd0>
                }
                else {
                    // do a small box to represent each pixel
                    fill_rectangle(x+((8-j)*size), y+((i)*size), x+((8-j)*size)+size, y+((i)*size)+size, colour);
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	f1c3 0308 	rsb	r3, r3, #8
 800135a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800135e:	fb02 f303 	mul.w	r3, r2, r3
 8001362:	461a      	mov	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	18d0      	adds	r0, r2, r3
 8001368:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800136c:	69fa      	ldr	r2, [r7, #28]
 800136e:	fb02 f303 	mul.w	r3, r2, r3
 8001372:	461a      	mov	r2, r3
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	18d1      	adds	r1, r2, r3
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	f1c3 0308 	rsb	r3, r3, #8
 800137e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001382:	fb02 f303 	mul.w	r3, r2, r3
 8001386:	461a      	mov	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	441a      	add	r2, r3
 800138c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001390:	18d4      	adds	r4, r2, r3
 8001392:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001396:	69fa      	ldr	r2, [r7, #28]
 8001398:	fb02 f303 	mul.w	r3, r2, r3
 800139c:	461a      	mov	r2, r3
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	441a      	add	r2, r3
 80013a2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80013a6:	441a      	add	r2, r3
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	4613      	mov	r3, r2
 80013ae:	4622      	mov	r2, r4
 80013b0:	f7ff ff1a 	bl	80011e8 <fill_rectangle>
        for(j=0; j<8; j++) {
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	3301      	adds	r3, #1
 80013b8:	61bb      	str	r3, [r7, #24]
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	2b07      	cmp	r3, #7
 80013be:	ddb0      	ble.n	8001322 <draw_char+0x3e>
    for(i=0; i<13; i++ ) {
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	3301      	adds	r3, #1
 80013c4:	61fb      	str	r3, [r7, #28]
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	2b0c      	cmp	r3, #12
 80013ca:	dd99      	ble.n	8001300 <draw_char+0x1c>
                }
            }
        }
    }
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	3724      	adds	r7, #36	@ 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd90      	pop	{r4, r7, pc}
 80013d6:	bf00      	nop
 80013d8:	080060d8 	.word	0x080060d8

080013dc <draw_string>:

/*
 * Writes a string to the display as an array of chars at position x, y with
 * a given colour and size.
 */
void draw_string(unsigned int x, unsigned int y, unsigned int colour, char size, char *str) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	@ 0x28
 80013e0:	af02      	add	r7, sp, #8
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
 80013e8:	70fb      	strb	r3, [r7, #3]

    //Work out the size of each character
    int char_width = size * 9;
 80013ea:	78fa      	ldrb	r2, [r7, #3]
 80013ec:	4613      	mov	r3, r2
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	4413      	add	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
    //Iterate through each character in the string
    int counter = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61fb      	str	r3, [r7, #28]
    while(str[counter] != '\0') {
 80013f8:	e015      	b.n	8001426 <draw_string+0x4a>
        //Calculate character position
        int char_pos = x + (counter * char_width);
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	fb02 f303 	mul.w	r3, r2, r3
 8001402:	461a      	mov	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4413      	add	r3, r2
 8001408:	617b      	str	r3, [r7, #20]
        //Write char to the display
        draw_char(char_pos, y, str[counter], colour, size);
 800140a:	6978      	ldr	r0, [r7, #20]
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001410:	4413      	add	r3, r2
 8001412:	781a      	ldrb	r2, [r3, #0]
 8001414:	78fb      	ldrb	r3, [r7, #3]
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68b9      	ldr	r1, [r7, #8]
 800141c:	f7ff ff62 	bl	80012e4 <draw_char>
        //Next character
        counter++;
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	3301      	adds	r3, #1
 8001424:	61fb      	str	r3, [r7, #28]
    while(str[counter] != '\0') {
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800142a:	4413      	add	r3, r2
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1e3      	bne.n	80013fa <draw_string+0x1e>
    }
}
 8001432:	bf00      	nop
 8001434:	bf00      	nop
 8001436:	3720      	adds	r7, #32
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <drawLine>:
}



void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 800143c:	b590      	push	{r4, r7, lr}
 800143e:	b089      	sub	sp, #36	@ 0x24
 8001440:	af00      	add	r7, sp, #0
 8001442:	4604      	mov	r4, r0
 8001444:	4608      	mov	r0, r1
 8001446:	4611      	mov	r1, r2
 8001448:	461a      	mov	r2, r3
 800144a:	4623      	mov	r3, r4
 800144c:	80fb      	strh	r3, [r7, #6]
 800144e:	4603      	mov	r3, r0
 8001450:	80bb      	strh	r3, [r7, #4]
 8001452:	460b      	mov	r3, r1
 8001454:	807b      	strh	r3, [r7, #2]
 8001456:	4613      	mov	r3, r2
 8001458:	803b      	strh	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 800145a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800145e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001468:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800146c:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001470:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001474:	1acb      	subs	r3, r1, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	bfb8      	it	lt
 800147a:	425b      	neglt	r3, r3
 800147c:	429a      	cmp	r2, r3
 800147e:	bfcc      	ite	gt
 8001480:	2301      	movgt	r3, #1
 8001482:	2300      	movle	r3, #0
 8001484:	b2db      	uxtb	r3, r3
 8001486:	837b      	strh	r3, [r7, #26]
  if (steep) {
 8001488:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d00b      	beq.n	80014a8 <drawLine+0x6c>
    swap(x0, y0);
 8001490:	88fb      	ldrh	r3, [r7, #6]
 8001492:	833b      	strh	r3, [r7, #24]
 8001494:	88bb      	ldrh	r3, [r7, #4]
 8001496:	80fb      	strh	r3, [r7, #6]
 8001498:	8b3b      	ldrh	r3, [r7, #24]
 800149a:	80bb      	strh	r3, [r7, #4]
    swap(x1, y1);
 800149c:	887b      	ldrh	r3, [r7, #2]
 800149e:	82fb      	strh	r3, [r7, #22]
 80014a0:	883b      	ldrh	r3, [r7, #0]
 80014a2:	807b      	strh	r3, [r7, #2]
 80014a4:	8afb      	ldrh	r3, [r7, #22]
 80014a6:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1) {
 80014a8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	dd0b      	ble.n	80014cc <drawLine+0x90>
    swap(x0, x1);
 80014b4:	88fb      	ldrh	r3, [r7, #6]
 80014b6:	82bb      	strh	r3, [r7, #20]
 80014b8:	887b      	ldrh	r3, [r7, #2]
 80014ba:	80fb      	strh	r3, [r7, #6]
 80014bc:	8abb      	ldrh	r3, [r7, #20]
 80014be:	807b      	strh	r3, [r7, #2]
    swap(y0, y1);
 80014c0:	88bb      	ldrh	r3, [r7, #4]
 80014c2:	827b      	strh	r3, [r7, #18]
 80014c4:	883b      	ldrh	r3, [r7, #0]
 80014c6:	80bb      	strh	r3, [r7, #4]
 80014c8:	8a7b      	ldrh	r3, [r7, #18]
 80014ca:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 80014cc:	887a      	ldrh	r2, [r7, #2]
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 80014d6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80014da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	bfb8      	it	lt
 80014e4:	425b      	neglt	r3, r3
 80014e6:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 80014e8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80014ec:	0fda      	lsrs	r2, r3, #31
 80014ee:	4413      	add	r3, r2
 80014f0:	105b      	asrs	r3, r3, #1
 80014f2:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1) {
 80014f4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80014f8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	da02      	bge.n	8001506 <drawLine+0xca>
    ystep = 1;
 8001500:	2301      	movs	r3, #1
 8001502:	83bb      	strh	r3, [r7, #28]
 8001504:	e031      	b.n	800156a <drawLine+0x12e>
  } else {
    ystep = -1;
 8001506:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800150a:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0<=x1; x0++) {
 800150c:	e02d      	b.n	800156a <drawLine+0x12e>
    if (steep) {
 800150e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d008      	beq.n	8001528 <drawLine+0xec>
      draw_pixel(y0, x0, color);
 8001516:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800151a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800151e:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fe33 	bl	800118c <draw_pixel>
 8001526:	e007      	b.n	8001538 <drawLine+0xfc>
    } else {
      draw_pixel(x0, y0, color);
 8001528:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800152c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001530:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff fe2a 	bl	800118c <draw_pixel>
    }
    err -= dy;
 8001538:	8bfa      	ldrh	r2, [r7, #30]
 800153a:	89fb      	ldrh	r3, [r7, #14]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	b29b      	uxth	r3, r3
 8001540:	83fb      	strh	r3, [r7, #30]
    if (err < 0) {
 8001542:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001546:	2b00      	cmp	r3, #0
 8001548:	da09      	bge.n	800155e <drawLine+0x122>
      y0 += ystep;
 800154a:	88ba      	ldrh	r2, [r7, #4]
 800154c:	8bbb      	ldrh	r3, [r7, #28]
 800154e:	4413      	add	r3, r2
 8001550:	b29b      	uxth	r3, r3
 8001552:	80bb      	strh	r3, [r7, #4]
      err += dx;
 8001554:	8bfa      	ldrh	r2, [r7, #30]
 8001556:	8a3b      	ldrh	r3, [r7, #16]
 8001558:	4413      	add	r3, r2
 800155a:	b29b      	uxth	r3, r3
 800155c:	83fb      	strh	r3, [r7, #30]
  for (; x0<=x1; x0++) {
 800155e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001562:	b29b      	uxth	r3, r3
 8001564:	3301      	adds	r3, #1
 8001566:	b29b      	uxth	r3, r3
 8001568:	80fb      	strh	r3, [r7, #6]
 800156a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800156e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001572:	429a      	cmp	r2, r3
 8001574:	ddcb      	ble.n	800150e <drawLine+0xd2>
    }
  }
}
 8001576:	bf00      	nop
 8001578:	bf00      	nop
 800157a:	3724      	adds	r7, #36	@ 0x24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd90      	pop	{r4, r7, pc}

08001580 <fillTriangle>:
  drawLine(x0, y0, x1, y1, color);
  drawLine(x1, y1, x2, y2, color);
  drawLine(x2, y2, x0, y0, color);
}
void fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	b08d      	sub	sp, #52	@ 0x34
 8001584:	af00      	add	r7, sp, #0
 8001586:	4604      	mov	r4, r0
 8001588:	4608      	mov	r0, r1
 800158a:	4611      	mov	r1, r2
 800158c:	461a      	mov	r2, r3
 800158e:	4623      	mov	r3, r4
 8001590:	80fb      	strh	r3, [r7, #6]
 8001592:	4603      	mov	r3, r0
 8001594:	80bb      	strh	r3, [r7, #4]
 8001596:	460b      	mov	r3, r1
 8001598:	807b      	strh	r3, [r7, #2]
 800159a:	4613      	mov	r3, r2
 800159c:	803b      	strh	r3, [r7, #0]
	int16_t a, b, y, last;

  // Sort coordinates by Y order (y2 >= y1 >= y0)
  if (y0 > y1) {
 800159e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80015a2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	dd0b      	ble.n	80015c2 <fillTriangle+0x42>
    swap(y0, y1); swap(x0, x1);
 80015aa:	88bb      	ldrh	r3, [r7, #4]
 80015ac:	847b      	strh	r3, [r7, #34]	@ 0x22
 80015ae:	883b      	ldrh	r3, [r7, #0]
 80015b0:	80bb      	strh	r3, [r7, #4]
 80015b2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80015b4:	803b      	strh	r3, [r7, #0]
 80015b6:	88fb      	ldrh	r3, [r7, #6]
 80015b8:	843b      	strh	r3, [r7, #32]
 80015ba:	887b      	ldrh	r3, [r7, #2]
 80015bc:	80fb      	strh	r3, [r7, #6]
 80015be:	8c3b      	ldrh	r3, [r7, #32]
 80015c0:	807b      	strh	r3, [r7, #2]
  }
  if (y1 > y2) {
 80015c2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80015c6:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 80015ca:	429a      	cmp	r2, r3
 80015cc:	dd0f      	ble.n	80015ee <fillTriangle+0x6e>
    swap(y2, y1); swap(x2, x1);
 80015ce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80015d2:	83fb      	strh	r3, [r7, #30]
 80015d4:	883b      	ldrh	r3, [r7, #0]
 80015d6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80015da:	8bfb      	ldrh	r3, [r7, #30]
 80015dc:	803b      	strh	r3, [r7, #0]
 80015de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80015e2:	83bb      	strh	r3, [r7, #28]
 80015e4:	887b      	ldrh	r3, [r7, #2]
 80015e6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80015ea:	8bbb      	ldrh	r3, [r7, #28]
 80015ec:	807b      	strh	r3, [r7, #2]
  }
  if (y0 > y1) {
 80015ee:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80015f2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	dd0b      	ble.n	8001612 <fillTriangle+0x92>
    swap(y0, y1); swap(x0, x1);
 80015fa:	88bb      	ldrh	r3, [r7, #4]
 80015fc:	837b      	strh	r3, [r7, #26]
 80015fe:	883b      	ldrh	r3, [r7, #0]
 8001600:	80bb      	strh	r3, [r7, #4]
 8001602:	8b7b      	ldrh	r3, [r7, #26]
 8001604:	803b      	strh	r3, [r7, #0]
 8001606:	88fb      	ldrh	r3, [r7, #6]
 8001608:	833b      	strh	r3, [r7, #24]
 800160a:	887b      	ldrh	r3, [r7, #2]
 800160c:	80fb      	strh	r3, [r7, #6]
 800160e:	8b3b      	ldrh	r3, [r7, #24]
 8001610:	807b      	strh	r3, [r7, #2]
  }

  if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 8001612:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001616:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 800161a:	429a      	cmp	r2, r3
 800161c:	d136      	bne.n	800168c <fillTriangle+0x10c>
    a = b = x0;
 800161e:	88fb      	ldrh	r3, [r7, #6]
 8001620:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8001622:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001624:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    if(x1 < a)      a = x1;
 8001626:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800162a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800162e:	429a      	cmp	r2, r3
 8001630:	da02      	bge.n	8001638 <fillTriangle+0xb8>
 8001632:	887b      	ldrh	r3, [r7, #2]
 8001634:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001636:	e007      	b.n	8001648 <fillTriangle+0xc8>
    else if(x1 > b) b = x1;
 8001638:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800163c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001640:	429a      	cmp	r2, r3
 8001642:	dd01      	ble.n	8001648 <fillTriangle+0xc8>
 8001644:	887b      	ldrh	r3, [r7, #2]
 8001646:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    if(x2 < a)      a = x2;
 8001648:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	@ 0x40
 800164c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001650:	429a      	cmp	r2, r3
 8001652:	da03      	bge.n	800165c <fillTriangle+0xdc>
 8001654:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001658:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800165a:	e008      	b.n	800166e <fillTriangle+0xee>
    else if(x2 > b) b = x2;
 800165c:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	@ 0x40
 8001660:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001664:	429a      	cmp	r2, r3
 8001666:	dd02      	ble.n	800166e <fillTriangle+0xee>
 8001668:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800166c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    drawFastHLine(a, y0, b-a+1, color);
 800166e:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8001672:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001676:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 800167a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	1c5a      	adds	r2, r3, #1
 8001682:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001686:	f000 f8dd 	bl	8001844 <drawFastHLine>
    return;
 800168a:	e0d8      	b.n	800183e <fillTriangle+0x2be>
  }

  int16_t
    dx01 = x1 - x0,
 800168c:	887a      	ldrh	r2, [r7, #2]
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	b29b      	uxth	r3, r3
 8001694:	82fb      	strh	r3, [r7, #22]
    dy01 = y1 - y0,
 8001696:	883a      	ldrh	r2, [r7, #0]
 8001698:	88bb      	ldrh	r3, [r7, #4]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	b29b      	uxth	r3, r3
 800169e:	82bb      	strh	r3, [r7, #20]
    dx02 = x2 - x0,
 80016a0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	827b      	strh	r3, [r7, #18]
    dy02 = y2 - y0,
 80016ac:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80016b0:	88bb      	ldrh	r3, [r7, #4]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	823b      	strh	r3, [r7, #16]
    dx12 = x2 - x1,
 80016b8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80016bc:	887b      	ldrh	r3, [r7, #2]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	81fb      	strh	r3, [r7, #14]
    dy12 = y2 - y1,
 80016c4:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80016c8:	883b      	ldrh	r3, [r7, #0]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	81bb      	strh	r3, [r7, #12]
    sa   = 0,
 80016d0:	2300      	movs	r3, #0
 80016d2:	84fb      	strh	r3, [r7, #38]	@ 0x26
    sb   = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	84bb      	strh	r3, [r7, #36]	@ 0x24
  // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
  // is included here (and second loop will be skipped, avoiding a /0
  // error there), otherwise scanline y1 is skipped here and handled
  // in the second loop...which also avoids a /0 error here if y0=y1
  // (flat-topped triangle).
  if(y1 == y2) last = y1;   // Include y1 scanline
 80016d8:	f9b7 2000 	ldrsh.w	r2, [r7]
 80016dc:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d102      	bne.n	80016ea <fillTriangle+0x16a>
 80016e4:	883b      	ldrh	r3, [r7, #0]
 80016e6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80016e8:	e003      	b.n	80016f2 <fillTriangle+0x172>
  else         last = y1-1; // Skip it
 80016ea:	883b      	ldrh	r3, [r7, #0]
 80016ec:	3b01      	subs	r3, #1
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	853b      	strh	r3, [r7, #40]	@ 0x28

  for(y=y0; y<=last; y++) {
 80016f2:	88bb      	ldrh	r3, [r7, #4]
 80016f4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80016f6:	e03f      	b.n	8001778 <fillTriangle+0x1f8>
    a   = x0 + sa / dy01;
 80016f8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80016fc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001700:	fb92 f3f3 	sdiv	r3, r2, r3
 8001704:	b29a      	uxth	r2, r3
 8001706:	88fb      	ldrh	r3, [r7, #6]
 8001708:	4413      	add	r3, r2
 800170a:	b29b      	uxth	r3, r3
 800170c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    b   = x0 + sb / dy02;
 800170e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001712:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001716:	fb92 f3f3 	sdiv	r3, r2, r3
 800171a:	b29a      	uxth	r2, r3
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	4413      	add	r3, r2
 8001720:	b29b      	uxth	r3, r3
 8001722:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    sa += dx01;
 8001724:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001726:	8afb      	ldrh	r3, [r7, #22]
 8001728:	4413      	add	r3, r2
 800172a:	b29b      	uxth	r3, r3
 800172c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    sb += dx02;
 800172e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001730:	8a7b      	ldrh	r3, [r7, #18]
 8001732:	4413      	add	r3, r2
 8001734:	b29b      	uxth	r3, r3
 8001736:	84bb      	strh	r3, [r7, #36]	@ 0x24

    if(a > b) swap(a,b);
 8001738:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	@ 0x2e
 800173c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001740:	429a      	cmp	r2, r3
 8001742:	dd05      	ble.n	8001750 <fillTriangle+0x1d0>
 8001744:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001746:	813b      	strh	r3, [r7, #8]
 8001748:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800174a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800174c:	893b      	ldrh	r3, [r7, #8]
 800174e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    drawFastHLine(a, y, b-a+1, color);
 8001750:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8001754:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	@ 0x2a
 8001758:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 800175c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	1c5a      	adds	r2, r3, #1
 8001764:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001768:	f000 f86c 	bl	8001844 <drawFastHLine>
  for(y=y0; y<=last; y++) {
 800176c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001770:	b29b      	uxth	r3, r3
 8001772:	3301      	adds	r3, #1
 8001774:	b29b      	uxth	r3, r3
 8001776:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8001778:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 800177c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8001780:	429a      	cmp	r2, r3
 8001782:	ddb9      	ble.n	80016f8 <fillTriangle+0x178>
  }

  // For lower part of triangle, find scanline crossings for segments
  // 0-2 and 1-2.  This loop is skipped if y1=y2.
  sa = dx12 * (y - y1);
 8001784:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8001788:	f9b7 3000 	ldrsh.w	r3, [r7]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	b29a      	uxth	r2, r3
 8001790:	89fb      	ldrh	r3, [r7, #14]
 8001792:	fb12 f303 	smulbb	r3, r2, r3
 8001796:	b29b      	uxth	r3, r3
 8001798:	84fb      	strh	r3, [r7, #38]	@ 0x26
  sb = dx02 * (y - y0);
 800179a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 800179e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	8a7b      	ldrh	r3, [r7, #18]
 80017a8:	fb12 f303 	smulbb	r3, r2, r3
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	84bb      	strh	r3, [r7, #36]	@ 0x24
  for(; y<=y2; y++) {
 80017b0:	e03f      	b.n	8001832 <fillTriangle+0x2b2>
    a   = x1 + sa / dy12;
 80017b2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80017b6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80017ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80017be:	b29a      	uxth	r2, r3
 80017c0:	887b      	ldrh	r3, [r7, #2]
 80017c2:	4413      	add	r3, r2
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    b   = x0 + sb / dy02;
 80017c8:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80017cc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80017d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	88fb      	ldrh	r3, [r7, #6]
 80017d8:	4413      	add	r3, r2
 80017da:	b29b      	uxth	r3, r3
 80017dc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    sa += dx12;
 80017de:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80017e0:	89fb      	ldrh	r3, [r7, #14]
 80017e2:	4413      	add	r3, r2
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	84fb      	strh	r3, [r7, #38]	@ 0x26
    sb += dx02;
 80017e8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80017ea:	8a7b      	ldrh	r3, [r7, #18]
 80017ec:	4413      	add	r3, r2
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	84bb      	strh	r3, [r7, #36]	@ 0x24

    if(a > b) swap(a,b);
 80017f2:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	@ 0x2e
 80017f6:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80017fa:	429a      	cmp	r2, r3
 80017fc:	dd05      	ble.n	800180a <fillTriangle+0x28a>
 80017fe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001800:	817b      	strh	r3, [r7, #10]
 8001802:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001804:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001806:	897b      	ldrh	r3, [r7, #10]
 8001808:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    drawFastHLine(a, y, b-a+1, color);
 800180a:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 800180e:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	@ 0x2a
 8001812:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 8001816:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	1c5a      	adds	r2, r3, #1
 800181e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001822:	f000 f80f 	bl	8001844 <drawFastHLine>
  for(; y<=y2; y++) {
 8001826:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800182a:	b29b      	uxth	r3, r3
 800182c:	3301      	adds	r3, #1
 800182e:	b29b      	uxth	r3, r3
 8001830:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8001832:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8001836:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 800183a:	429a      	cmp	r2, r3
 800183c:	ddb9      	ble.n	80017b2 <fillTriangle+0x232>
	}
}
 800183e:	3734      	adds	r7, #52	@ 0x34
 8001840:	46bd      	mov	sp, r7
 8001842:	bd90      	pop	{r4, r7, pc}

08001844 <drawFastHLine>:
void drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b085      	sub	sp, #20
 8001848:	af02      	add	r7, sp, #8
 800184a:	4604      	mov	r4, r0
 800184c:	4608      	mov	r0, r1
 800184e:	4611      	mov	r1, r2
 8001850:	461a      	mov	r2, r3
 8001852:	4623      	mov	r3, r4
 8001854:	80fb      	strh	r3, [r7, #6]
 8001856:	4603      	mov	r3, r0
 8001858:	80bb      	strh	r3, [r7, #4]
 800185a:	460b      	mov	r3, r1
 800185c:	807b      	strh	r3, [r7, #2]
 800185e:	4613      	mov	r3, r2
 8001860:	803b      	strh	r3, [r7, #0]
	drawLine(x, y, x+w-1, y, color);
 8001862:	88fa      	ldrh	r2, [r7, #6]
 8001864:	887b      	ldrh	r3, [r7, #2]
 8001866:	4413      	add	r3, r2
 8001868:	b29b      	uxth	r3, r3
 800186a:	3b01      	subs	r3, #1
 800186c:	b29b      	uxth	r3, r3
 800186e:	b21a      	sxth	r2, r3
 8001870:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001874:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001878:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800187c:	883b      	ldrh	r3, [r7, #0]
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	4623      	mov	r3, r4
 8001882:	f7ff fddb 	bl	800143c <drawLine>
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	bd90      	pop	{r4, r7, pc}
	...

08001890 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	rxComplete=1;
 8001898:	4b05      	ldr	r3, [pc, #20]	@ (80018b0 <HAL_UART_RxCpltCallback+0x20>)
 800189a:	2201      	movs	r2, #1
 800189c:	701a      	strb	r2, [r3, #0]
	firstReception=0;
 800189e:	4b05      	ldr	r3, [pc, #20]	@ (80018b4 <HAL_UART_RxCpltCallback+0x24>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	20004151 	.word	0x20004151
 80018b4:	20000000 	.word	0x20000000

080018b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018b8:	b5b0      	push	{r4, r5, r7, lr}
 80018ba:	b096      	sub	sp, #88	@ 0x58
 80018bc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018be:	f000 fdff 	bl	80024c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018c2:	f000 fb51 	bl	8001f68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018c6:	f000 fc43 	bl	8002150 <MX_GPIO_Init>
  MX_DMA_Init();
 80018ca:	f000 fc21 	bl	8002110 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80018ce:	f000 fbf5 	bl	80020bc <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80018d2:	f000 fbbb 	bl	800204c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1,RxBuffer,25);
 80018d6:	2219      	movs	r2, #25
 80018d8:	49d6      	ldr	r1, [pc, #856]	@ (8001c34 <main+0x37c>)
 80018da:	48d7      	ldr	r0, [pc, #860]	@ (8001c38 <main+0x380>)
 80018dc:	f002 fdf4 	bl	80044c8 <HAL_UART_Receive_DMA>
  lcd_init_spi();
 80018e0:	f7ff fb08 	bl	8000ef4 <lcd_init_spi>

  	  // Sky and ground
     fill_rectangle(0, 0, WIDTH, HEIGHT/2, COLOR_BLUE);//
 80018e4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	23a0      	movs	r3, #160	@ 0xa0
 80018ec:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80018f0:	2100      	movs	r1, #0
 80018f2:	2000      	movs	r0, #0
 80018f4:	f7ff fc78 	bl	80011e8 <fill_rectangle>
     fill_rectangle(0, HEIGHT/2, WIDTH, HEIGHT, COLOR_BROWN); //
 80018f8:	f248 637d 	movw	r3, #34429	@ 0x867d
 80018fc:	9300      	str	r3, [sp, #0]
 80018fe:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001902:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001906:	21a0      	movs	r1, #160	@ 0xa0
 8001908:	2000      	movs	r0, #0
 800190a:	f7ff fc6d 	bl	80011e8 <fill_rectangle>

     // Pitch indicators lower screen
     fill_rectangle(WIDTH/2-15, HEIGHT/2+15, WIDTH/2+15, HEIGHT/2+16, COLOR_WHITE);
 800190e:	2300      	movs	r3, #0
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	23b0      	movs	r3, #176	@ 0xb0
 8001914:	22ff      	movs	r2, #255	@ 0xff
 8001916:	21af      	movs	r1, #175	@ 0xaf
 8001918:	20e1      	movs	r0, #225	@ 0xe1
 800191a:	f7ff fc65 	bl	80011e8 <fill_rectangle>
     fill_rectangle(WIDTH/2-30, HEIGHT/2+30, WIDTH/2+30, HEIGHT/2+31, COLOR_WHITE);
 800191e:	2300      	movs	r3, #0
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	23bf      	movs	r3, #191	@ 0xbf
 8001924:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8001928:	21be      	movs	r1, #190	@ 0xbe
 800192a:	20d2      	movs	r0, #210	@ 0xd2
 800192c:	f7ff fc5c 	bl	80011e8 <fill_rectangle>
     fill_rectangle(WIDTH/2-15, HEIGHT/2+45, WIDTH/2+15, HEIGHT/2+46, COLOR_WHITE);
 8001930:	2300      	movs	r3, #0
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	23ce      	movs	r3, #206	@ 0xce
 8001936:	22ff      	movs	r2, #255	@ 0xff
 8001938:	21cd      	movs	r1, #205	@ 0xcd
 800193a:	20e1      	movs	r0, #225	@ 0xe1
 800193c:	f7ff fc54 	bl	80011e8 <fill_rectangle>
     fill_rectangle(WIDTH/2-30, HEIGHT/2+60, WIDTH/2+30, HEIGHT/2+61, COLOR_WHITE);
 8001940:	2300      	movs	r3, #0
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	23dd      	movs	r3, #221	@ 0xdd
 8001946:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 800194a:	21dc      	movs	r1, #220	@ 0xdc
 800194c:	20d2      	movs	r0, #210	@ 0xd2
 800194e:	f7ff fc4b 	bl	80011e8 <fill_rectangle>
     draw_string(WIDTH/2-53,HEIGHT/2+27, COLOR_WHITE, 1, "10");
 8001952:	4bba      	ldr	r3, [pc, #744]	@ (8001c3c <main+0x384>)
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	2301      	movs	r3, #1
 8001958:	2200      	movs	r2, #0
 800195a:	21bb      	movs	r1, #187	@ 0xbb
 800195c:	20bb      	movs	r0, #187	@ 0xbb
 800195e:	f7ff fd3d 	bl	80013dc <draw_string>
     draw_string(WIDTH/2+33,HEIGHT/2+27, COLOR_WHITE, 1, "10");
 8001962:	4bb6      	ldr	r3, [pc, #728]	@ (8001c3c <main+0x384>)
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	2301      	movs	r3, #1
 8001968:	2200      	movs	r2, #0
 800196a:	21bb      	movs	r1, #187	@ 0xbb
 800196c:	f240 1011 	movw	r0, #273	@ 0x111
 8001970:	f7ff fd34 	bl	80013dc <draw_string>
     draw_string(WIDTH/2-53,HEIGHT/2+57, COLOR_WHITE, 1, "20");
 8001974:	4bb2      	ldr	r3, [pc, #712]	@ (8001c40 <main+0x388>)
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	2301      	movs	r3, #1
 800197a:	2200      	movs	r2, #0
 800197c:	21d9      	movs	r1, #217	@ 0xd9
 800197e:	20bb      	movs	r0, #187	@ 0xbb
 8001980:	f7ff fd2c 	bl	80013dc <draw_string>
     draw_string(WIDTH/2+33,HEIGHT/2+57, COLOR_WHITE, 1, "20");
 8001984:	4bae      	ldr	r3, [pc, #696]	@ (8001c40 <main+0x388>)
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	2301      	movs	r3, #1
 800198a:	2200      	movs	r2, #0
 800198c:	21d9      	movs	r1, #217	@ 0xd9
 800198e:	f240 1011 	movw	r0, #273	@ 0x111
 8001992:	f7ff fd23 	bl	80013dc <draw_string>

     // Pitch indicators upper screen
     fill_rectangle(WIDTH/2-15, HEIGHT/2-16, WIDTH/2+15,HEIGHT/2-15, COLOR_WHITE);
 8001996:	2300      	movs	r3, #0
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	2391      	movs	r3, #145	@ 0x91
 800199c:	22ff      	movs	r2, #255	@ 0xff
 800199e:	2190      	movs	r1, #144	@ 0x90
 80019a0:	20e1      	movs	r0, #225	@ 0xe1
 80019a2:	f7ff fc21 	bl	80011e8 <fill_rectangle>
     fill_rectangle(WIDTH/2-30, HEIGHT/2-31, WIDTH/2+30, HEIGHT/2-30, COLOR_WHITE);
 80019a6:	2300      	movs	r3, #0
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	2382      	movs	r3, #130	@ 0x82
 80019ac:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80019b0:	2181      	movs	r1, #129	@ 0x81
 80019b2:	20d2      	movs	r0, #210	@ 0xd2
 80019b4:	f7ff fc18 	bl	80011e8 <fill_rectangle>
     fill_rectangle(WIDTH/2-15, HEIGHT/2-46, WIDTH/2+15, HEIGHT/2-45, COLOR_WHITE);
 80019b8:	2300      	movs	r3, #0
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	2373      	movs	r3, #115	@ 0x73
 80019be:	22ff      	movs	r2, #255	@ 0xff
 80019c0:	2172      	movs	r1, #114	@ 0x72
 80019c2:	20e1      	movs	r0, #225	@ 0xe1
 80019c4:	f7ff fc10 	bl	80011e8 <fill_rectangle>
     fill_rectangle(WIDTH/2-30, HEIGHT/2-61, WIDTH/2+30, HEIGHT/2-60, COLOR_WHITE);
 80019c8:	2300      	movs	r3, #0
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	2364      	movs	r3, #100	@ 0x64
 80019ce:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80019d2:	2163      	movs	r1, #99	@ 0x63
 80019d4:	20d2      	movs	r0, #210	@ 0xd2
 80019d6:	f7ff fc07 	bl	80011e8 <fill_rectangle>
     draw_string(WIDTH/2-53,HEIGHT/2-27, COLOR_WHITE, 1, "10");
 80019da:	4b98      	ldr	r3, [pc, #608]	@ (8001c3c <main+0x384>)
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	2301      	movs	r3, #1
 80019e0:	2200      	movs	r2, #0
 80019e2:	2185      	movs	r1, #133	@ 0x85
 80019e4:	20bb      	movs	r0, #187	@ 0xbb
 80019e6:	f7ff fcf9 	bl	80013dc <draw_string>
     draw_string(WIDTH/2+33,HEIGHT/2-27, COLOR_WHITE, 1, "10");
 80019ea:	4b94      	ldr	r3, [pc, #592]	@ (8001c3c <main+0x384>)
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	2301      	movs	r3, #1
 80019f0:	2200      	movs	r2, #0
 80019f2:	2185      	movs	r1, #133	@ 0x85
 80019f4:	f240 1011 	movw	r0, #273	@ 0x111
 80019f8:	f7ff fcf0 	bl	80013dc <draw_string>
     draw_string(WIDTH/2-53,HEIGHT/2-65, COLOR_WHITE, 1, "20");
 80019fc:	4b90      	ldr	r3, [pc, #576]	@ (8001c40 <main+0x388>)
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	2301      	movs	r3, #1
 8001a02:	2200      	movs	r2, #0
 8001a04:	215f      	movs	r1, #95	@ 0x5f
 8001a06:	20bb      	movs	r0, #187	@ 0xbb
 8001a08:	f7ff fce8 	bl	80013dc <draw_string>
     draw_string(WIDTH/2+33,HEIGHT/2-65, COLOR_WHITE, 1, "20");
 8001a0c:	4b8c      	ldr	r3, [pc, #560]	@ (8001c40 <main+0x388>)
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	2301      	movs	r3, #1
 8001a12:	2200      	movs	r2, #0
 8001a14:	215f      	movs	r1, #95	@ 0x5f
 8001a16:	f240 1011 	movw	r0, #273	@ 0x111
 8001a1a:	f7ff fcdf 	bl	80013dc <draw_string>

     // cross heirs
     fill_rectangle(WIDTH/2-60, HEIGHT/2-2, WIDTH/2-15,HEIGHT/2+2, COLOR_MAGENTA);
 8001a1e:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	23a2      	movs	r3, #162	@ 0xa2
 8001a26:	22e1      	movs	r2, #225	@ 0xe1
 8001a28:	219e      	movs	r1, #158	@ 0x9e
 8001a2a:	20b4      	movs	r0, #180	@ 0xb4
 8001a2c:	f7ff fbdc 	bl	80011e8 <fill_rectangle>
     fill_rectangle(WIDTH/2+15, HEIGHT/2-2, WIDTH/2+60,HEIGHT/2+2, COLOR_MAGENTA);
 8001a30:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	23a2      	movs	r3, #162	@ 0xa2
 8001a38:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001a3c:	219e      	movs	r1, #158	@ 0x9e
 8001a3e:	20ff      	movs	r0, #255	@ 0xff
 8001a40:	f7ff fbd2 	bl	80011e8 <fill_rectangle>
     fill_rectangle(WIDTH/2-5, HEIGHT/2-2, WIDTH/2+5,HEIGHT/2+2, COLOR_MAGENTA);
 8001a44:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	23a2      	movs	r3, #162	@ 0xa2
 8001a4c:	22f5      	movs	r2, #245	@ 0xf5
 8001a4e:	219e      	movs	r1, #158	@ 0x9e
 8001a50:	20eb      	movs	r0, #235	@ 0xeb
 8001a52:	f7ff fbc9 	bl	80011e8 <fill_rectangle>
     fill_rectangle(WIDTH/2+15, HEIGHT/2, WIDTH/2+16,HEIGHT/2+6, COLOR_MAGENTA);
 8001a56:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	23a6      	movs	r3, #166	@ 0xa6
 8001a5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a62:	21a0      	movs	r1, #160	@ 0xa0
 8001a64:	20ff      	movs	r0, #255	@ 0xff
 8001a66:	f7ff fbbf 	bl	80011e8 <fill_rectangle>
     fill_rectangle(WIDTH/2-15, HEIGHT/2, WIDTH/2-14,HEIGHT/2+6, COLOR_MAGENTA);
 8001a6a:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	23a6      	movs	r3, #166	@ 0xa6
 8001a72:	22e2      	movs	r2, #226	@ 0xe2
 8001a74:	21a0      	movs	r1, #160	@ 0xa0
 8001a76:	20e1      	movs	r0, #225	@ 0xe1
 8001a78:	f7ff fbb6 	bl	80011e8 <fill_rectangle>

     //Speed Depth Roll Time and pitch values
     draw_string(WIDTH/2-80, HEIGHT/2+100, COLOR_WHITE, 1, "ROLL:");
 8001a7c:	4b71      	ldr	r3, [pc, #452]	@ (8001c44 <main+0x38c>)
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	2301      	movs	r3, #1
 8001a82:	2200      	movs	r2, #0
 8001a84:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8001a88:	20a0      	movs	r0, #160	@ 0xa0
 8001a8a:	f7ff fca7 	bl	80013dc <draw_string>
     draw_string(WIDTH/2-80,  HEIGHT/2+130, COLOR_WHITE, 1, "PITCH:");
 8001a8e:	4b6e      	ldr	r3, [pc, #440]	@ (8001c48 <main+0x390>)
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	2301      	movs	r3, #1
 8001a94:	2200      	movs	r2, #0
 8001a96:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8001a9a:	20a0      	movs	r0, #160	@ 0xa0
 8001a9c:	f7ff fc9e 	bl	80013dc <draw_string>
     draw_string(WIDTH/2+30,  HEIGHT/2+100, COLOR_WHITE, 1, "DEPTH:");
 8001aa0:	4b6a      	ldr	r3, [pc, #424]	@ (8001c4c <main+0x394>)
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8001aac:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 8001ab0:	f7ff fc94 	bl	80013dc <draw_string>
     draw_string(WIDTH/2+30,  HEIGHT/2+130, COLOR_WHITE, 1, "TIME:");
 8001ab4:	4b66      	ldr	r3, [pc, #408]	@ (8001c50 <main+0x398>)
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	2301      	movs	r3, #1
 8001aba:	2200      	movs	r2, #0
 8001abc:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8001ac0:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 8001ac4:	f7ff fc8a 	bl	80013dc <draw_string>
     draw_string(WIDTH/2+30,  HEIGHT/2+130, COLOR_WHITE, 1, "TIME:");
 8001ac8:	4b61      	ldr	r3, [pc, #388]	@ (8001c50 <main+0x398>)
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	2301      	movs	r3, #1
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8001ad4:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 8001ad8:	f7ff fc80 	bl	80013dc <draw_string>
     draw_string(WIDTH/2-20,  HEIGHT/2-115, COLOR_WHITE, 1, "SPEED:");
 8001adc:	4b5d      	ldr	r3, [pc, #372]	@ (8001c54 <main+0x39c>)
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	212d      	movs	r1, #45	@ 0x2d
 8001ae6:	20dc      	movs	r0, #220	@ 0xdc
 8001ae8:	f7ff fc78 	bl	80013dc <draw_string>


     // Turning indicator
     if(yaw<-0.05f)
 8001aec:	4b5a      	ldr	r3, [pc, #360]	@ (8001c58 <main+0x3a0>)
 8001aee:	edd3 7a00 	vldr	s15, [r3]
 8001af2:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8001c5c <main+0x3a4>
 8001af6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afe:	d50f      	bpl.n	8001b20 <main+0x268>
    	fillTriangle(WIDTH/2+150, HEIGHT/2-100, WIDTH/2+70, HEIGHT/2-70, WIDTH/2+70, HEIGHT/2-130, COLOR_MAGENTA);
 8001b00:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001b04:	9302      	str	r3, [sp, #8]
 8001b06:	231e      	movs	r3, #30
 8001b08:	9301      	str	r3, [sp, #4]
 8001b0a:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	235a      	movs	r3, #90	@ 0x5a
 8001b12:	f44f 729b 	mov.w	r2, #310	@ 0x136
 8001b16:	213c      	movs	r1, #60	@ 0x3c
 8001b18:	f44f 70c3 	mov.w	r0, #390	@ 0x186
 8001b1c:	f7ff fd30 	bl	8001580 <fillTriangle>
     if(yaw>0.05f);
     	 fillTriangle(WIDTH/2-150, HEIGHT/2-100, WIDTH/2-70, HEIGHT/2-70, WIDTH/2-70, HEIGHT/2-130, COLOR_MAGENTA);
 8001b20:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001b24:	9302      	str	r3, [sp, #8]
 8001b26:	231e      	movs	r3, #30
 8001b28:	9301      	str	r3, [sp, #4]
 8001b2a:	23aa      	movs	r3, #170	@ 0xaa
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	235a      	movs	r3, #90	@ 0x5a
 8001b30:	22aa      	movs	r2, #170	@ 0xaa
 8001b32:	213c      	movs	r1, #60	@ 0x3c
 8001b34:	205a      	movs	r0, #90	@ 0x5a
 8001b36:	f7ff fd23 	bl	8001580 <fillTriangle>
        // Calculate two points for the horizon line

        // Draw the horizon line


     int y1= HEIGHT/2-pitch*3-WIDTH/2*tan(roll);
 8001b3a:	4b49      	ldr	r3, [pc, #292]	@ (8001c60 <main+0x3a8>)
 8001b3c:	edd3 7a00 	vldr	s15, [r3]
 8001b40:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001b44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b48:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8001c64 <main+0x3ac>
 8001b4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b50:	ee17 0a90 	vmov	r0, s15
 8001b54:	f7fe fcbc 	bl	80004d0 <__aeabi_f2d>
 8001b58:	4604      	mov	r4, r0
 8001b5a:	460d      	mov	r5, r1
 8001b5c:	4b42      	ldr	r3, [pc, #264]	@ (8001c68 <main+0x3b0>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fcb5 	bl	80004d0 <__aeabi_f2d>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	ec43 2b10 	vmov	d0, r2, r3
 8001b6e:	f003 f9b7 	bl	8004ee0 <tan>
 8001b72:	ec51 0b10 	vmov	r0, r1, d0
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	4b3c      	ldr	r3, [pc, #240]	@ (8001c6c <main+0x3b4>)
 8001b7c:	f7fe fd00 	bl	8000580 <__aeabi_dmul>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4620      	mov	r0, r4
 8001b86:	4629      	mov	r1, r5
 8001b88:	f7fe fb42 	bl	8000210 <__aeabi_dsub>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4610      	mov	r0, r2
 8001b92:	4619      	mov	r1, r3
 8001b94:	f7fe ff8e 	bl	8000ab4 <__aeabi_d2iz>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	643b      	str	r3, [r7, #64]	@ 0x40
     int y2=HEIGHT/2-pitch*3+WIDTH/2*tan(roll);
 8001b9c:	4b30      	ldr	r3, [pc, #192]	@ (8001c60 <main+0x3a8>)
 8001b9e:	edd3 7a00 	vldr	s15, [r3]
 8001ba2:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001ba6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001baa:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001c64 <main+0x3ac>
 8001bae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bb2:	ee17 0a90 	vmov	r0, s15
 8001bb6:	f7fe fc8b 	bl	80004d0 <__aeabi_f2d>
 8001bba:	4604      	mov	r4, r0
 8001bbc:	460d      	mov	r5, r1
 8001bbe:	4b2a      	ldr	r3, [pc, #168]	@ (8001c68 <main+0x3b0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7fe fc84 	bl	80004d0 <__aeabi_f2d>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	ec43 2b10 	vmov	d0, r2, r3
 8001bd0:	f003 f986 	bl	8004ee0 <tan>
 8001bd4:	ec51 0b10 	vmov	r0, r1, d0
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	4b23      	ldr	r3, [pc, #140]	@ (8001c6c <main+0x3b4>)
 8001bde:	f7fe fccf 	bl	8000580 <__aeabi_dmul>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4620      	mov	r0, r4
 8001be8:	4629      	mov	r1, r5
 8001bea:	f7fe fb13 	bl	8000214 <__adddf3>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f7fe ff5d 	bl	8000ab4 <__aeabi_d2iz>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
     int xtr1,ytr1,xtr2,ytr2,xtr3,ytr3;
	 drawLine(0, y1,WIDTH,y2,COLOR_WHITE);
 8001bfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c00:	b219      	sxth	r1, r3
 8001c02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c04:	b21b      	sxth	r3, r3
 8001c06:	2200      	movs	r2, #0
 8001c08:	9200      	str	r2, [sp, #0]
 8001c0a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f7ff fc14 	bl	800143c <drawLine>
	 // get the 3 points that form a triangle
	 xtr1=0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	63bb      	str	r3, [r7, #56]	@ 0x38
	 ytr1=HEIGHT/2;
 8001c18:	23a0      	movs	r3, #160	@ 0xa0
 8001c1a:	637b      	str	r3, [r7, #52]	@ 0x34
	 xtr2=0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	633b      	str	r3, [r7, #48]	@ 0x30
	 ytr2=y1;
 8001c20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float m=(float)(y2-y1)/WIDTH;
 8001c24:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	ee07 3a90 	vmov	s15, r3
 8001c2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c32:	e01f      	b.n	8001c74 <main+0x3bc>
 8001c34:	20004138 	.word	0x20004138
 8001c38:	20004090 	.word	0x20004090
 8001c3c:	080060a8 	.word	0x080060a8
 8001c40:	080060ac 	.word	0x080060ac
 8001c44:	080060b0 	.word	0x080060b0
 8001c48:	080060b8 	.word	0x080060b8
 8001c4c:	080060c0 	.word	0x080060c0
 8001c50:	080060c8 	.word	0x080060c8
 8001c54:	080060d0 	.word	0x080060d0
 8001c58:	2000415c 	.word	0x2000415c
 8001c5c:	bd4ccccd 	.word	0xbd4ccccd
 8001c60:	20000004 	.word	0x20000004
 8001c64:	43200000 	.word	0x43200000
 8001c68:	20000008 	.word	0x20000008
 8001c6c:	406e0000 	.word	0x406e0000
 8001c70:	43f00000 	.word	0x43f00000
 8001c74:	ed5f 6a02 	vldr	s13, [pc, #-8]	@ 8001c70 <main+0x3b8>
 8001c78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c7c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	xtr3=round((HEIGHT/2-y1)/m);
 8001c80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c82:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8001c86:	ee07 3a90 	vmov	s15, r3
 8001c8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c8e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001c92:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c96:	ee16 0a90 	vmov	r0, s13
 8001c9a:	f7fe fc19 	bl	80004d0 <__aeabi_f2d>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	ec43 2b10 	vmov	d0, r2, r3
 8001ca6:	f003 f94f 	bl	8004f48 <round>
 8001caa:	ec53 2b10 	vmov	r2, r3, d0
 8001cae:	4610      	mov	r0, r2
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f7fe feff 	bl	8000ab4 <__aeabi_d2iz>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	627b      	str	r3, [r7, #36]	@ 0x24
	ytr3=HEIGHT/2;
 8001cba:	23a0      	movs	r3, #160	@ 0xa0
 8001cbc:	623b      	str	r3, [r7, #32]
	 if (roll<=0)
 8001cbe:	4b94      	ldr	r3, [pc, #592]	@ (8001f10 <main+0x658>)
 8001cc0:	edd3 7a00 	vldr	s15, [r3]
 8001cc4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ccc:	d826      	bhi.n	8001d1c <main+0x464>
	{
		fillTriangle( xtr1,ytr1,xtr2,ytr2,xtr3,ytr3, COLOR_BLUE);
 8001cce:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001cd2:	9302      	str	r3, [sp, #8]
 8001cd4:	6a3b      	ldr	r3, [r7, #32]
 8001cd6:	9301      	str	r3, [sp, #4]
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ce0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001ce2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001ce4:	f7ff fc4c 	bl	8001580 <fillTriangle>
		fillTriangle( xtr3,HEIGHT/2,WIDTH,y2,WIDTH,HEIGHT/2, COLOR_BROWN);
 8001ce8:	f248 637d 	movw	r3, #34429	@ 0x867d
 8001cec:	9302      	str	r3, [sp, #8]
 8001cee:	23a0      	movs	r3, #160	@ 0xa0
 8001cf0:	9301      	str	r3, [sp, #4]
 8001cf2:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cfa:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001cfe:	21a0      	movs	r1, #160	@ 0xa0
 8001d00:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001d02:	f7ff fc3d 	bl	8001580 <fillTriangle>
		drawLine(0, y1,WIDTH,y2,COLOR_WHITE);
 8001d06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d08:	b219      	sxth	r1, r3
 8001d0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d0c:	b21b      	sxth	r3, r3
 8001d0e:	2200      	movs	r2, #0
 8001d10:	9200      	str	r2, [sp, #0]
 8001d12:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001d16:	2000      	movs	r0, #0
 8001d18:	f7ff fb90 	bl	800143c <drawLine>
	 }

	 if (roll>0)
 8001d1c:	4b7c      	ldr	r3, [pc, #496]	@ (8001f10 <main+0x658>)
 8001d1e:	edd3 7a00 	vldr	s15, [r3]
 8001d22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2a:	dd26      	ble.n	8001d7a <main+0x4c2>
	 {
		fillTriangle( xtr1,ytr1,xtr2,ytr2,xtr3,ytr3, COLOR_BROWN);
 8001d2c:	f248 637d 	movw	r3, #34429	@ 0x867d
 8001d30:	9302      	str	r3, [sp, #8]
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	9301      	str	r3, [sp, #4]
 8001d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d3e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001d40:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001d42:	f7ff fc1d 	bl	8001580 <fillTriangle>
		fillTriangle( xtr3,HEIGHT/2,WIDTH,y2,WIDTH,HEIGHT/2, COLOR_BLUE);
 8001d46:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001d4a:	9302      	str	r3, [sp, #8]
 8001d4c:	23a0      	movs	r3, #160	@ 0xa0
 8001d4e:	9301      	str	r3, [sp, #4]
 8001d50:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d58:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001d5c:	21a0      	movs	r1, #160	@ 0xa0
 8001d5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001d60:	f7ff fc0e 	bl	8001580 <fillTriangle>
		drawLine(0, y1,WIDTH,y2,COLOR_WHITE);
 8001d64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d66:	b219      	sxth	r1, r3
 8001d68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d6a:	b21b      	sxth	r3, r3
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	9200      	str	r2, [sp, #0]
 8001d70:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001d74:	2000      	movs	r0, #0
 8001d76:	f7ff fb61 	bl	800143c <drawLine>

	 }

	 int prev_y1=y1;
 8001d7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d7c:	61fb      	str	r3, [r7, #28]
	 int prev_y2=y2;
 8001d7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d80:	61bb      	str	r3, [r7, #24]
	 int prev_xtr1=xtr1;
 8001d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d84:	617b      	str	r3, [r7, #20]
	 int prev_xtr2=xtr2;
 8001d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d88:	613b      	str	r3, [r7, #16]
	 int prev_xtr3=xtr3;
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8c:	60fb      	str	r3, [r7, #12]
	 int prev_ytr1=ytr1;
 8001d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d90:	60bb      	str	r3, [r7, #8]
	 int prev_ytr2=ytr2;
 8001d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d94:	607b      	str	r3, [r7, #4]
	 int prev_ytr3=ytr3;
 8001d96:	6a3b      	ldr	r3, [r7, #32]
 8001d98:	603b      	str	r3, [r7, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
    	 if(rxComplete==1)
 8001d9a:	4b5e      	ldr	r3, [pc, #376]	@ (8001f14 <main+0x65c>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d1fb      	bne.n	8001d9a <main+0x4e2>
    		  {
    			  int i;
    			      for (i = 0; i < 25; i++) {
 8001da2:	2300      	movs	r3, #0
 8001da4:	647b      	str	r3, [r7, #68]	@ 0x44
 8001da6:	e0ab      	b.n	8001f00 <main+0x648>
    			          if (RxBuffer[i] == 'D' && i + 4 < 25) {
 8001da8:	4a5b      	ldr	r2, [pc, #364]	@ (8001f18 <main+0x660>)
 8001daa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dac:	4413      	add	r3, r2
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b44      	cmp	r3, #68	@ 0x44
 8001db2:	d11b      	bne.n	8001dec <main+0x534>
 8001db4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001db6:	2b14      	cmp	r3, #20
 8001db8:	dc18      	bgt.n	8001dec <main+0x534>

    			              *((uint8_t*)&depth + 0) = RxBuffer[i + 1];
 8001dba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	4a57      	ldr	r2, [pc, #348]	@ (8001f1c <main+0x664>)
 8001dc0:	4955      	ldr	r1, [pc, #340]	@ (8001f18 <main+0x660>)
 8001dc2:	5ccb      	ldrb	r3, [r1, r3]
 8001dc4:	7013      	strb	r3, [r2, #0]
    			              *((uint8_t*)&depth + 1) = RxBuffer[i + 2];
 8001dc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dc8:	3302      	adds	r3, #2
 8001dca:	4a55      	ldr	r2, [pc, #340]	@ (8001f20 <main+0x668>)
 8001dcc:	4952      	ldr	r1, [pc, #328]	@ (8001f18 <main+0x660>)
 8001dce:	5ccb      	ldrb	r3, [r1, r3]
 8001dd0:	7013      	strb	r3, [r2, #0]
    			              *((uint8_t*)&depth + 2) = RxBuffer[i + 3];
 8001dd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dd4:	3303      	adds	r3, #3
 8001dd6:	4a53      	ldr	r2, [pc, #332]	@ (8001f24 <main+0x66c>)
 8001dd8:	494f      	ldr	r1, [pc, #316]	@ (8001f18 <main+0x660>)
 8001dda:	5ccb      	ldrb	r3, [r1, r3]
 8001ddc:	7013      	strb	r3, [r2, #0]
    			              *((uint8_t*)&depth + 3) = RxBuffer[i + 4];
 8001dde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001de0:	3304      	adds	r3, #4
 8001de2:	4a51      	ldr	r2, [pc, #324]	@ (8001f28 <main+0x670>)
 8001de4:	494c      	ldr	r1, [pc, #304]	@ (8001f18 <main+0x660>)
 8001de6:	5ccb      	ldrb	r3, [r1, r3]
 8001de8:	7013      	strb	r3, [r2, #0]
 8001dea:	e086      	b.n	8001efa <main+0x642>

    			          }
    			          else if (RxBuffer[i] == 'R' && i + 4 < 25) {
 8001dec:	4a4a      	ldr	r2, [pc, #296]	@ (8001f18 <main+0x660>)
 8001dee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001df0:	4413      	add	r3, r2
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b52      	cmp	r3, #82	@ 0x52
 8001df6:	d11b      	bne.n	8001e30 <main+0x578>
 8001df8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dfa:	2b14      	cmp	r3, #20
 8001dfc:	dc18      	bgt.n	8001e30 <main+0x578>

    			              *((uint8_t*)&roll + 0) = RxBuffer[i + 1];
 8001dfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e00:	3301      	adds	r3, #1
 8001e02:	4a43      	ldr	r2, [pc, #268]	@ (8001f10 <main+0x658>)
 8001e04:	4944      	ldr	r1, [pc, #272]	@ (8001f18 <main+0x660>)
 8001e06:	5ccb      	ldrb	r3, [r1, r3]
 8001e08:	7013      	strb	r3, [r2, #0]
    			              *((uint8_t*)&roll + 1) = RxBuffer[i + 2];
 8001e0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e0c:	3302      	adds	r3, #2
 8001e0e:	4a47      	ldr	r2, [pc, #284]	@ (8001f2c <main+0x674>)
 8001e10:	4941      	ldr	r1, [pc, #260]	@ (8001f18 <main+0x660>)
 8001e12:	5ccb      	ldrb	r3, [r1, r3]
 8001e14:	7013      	strb	r3, [r2, #0]
    			              *((uint8_t*)&roll + 2) = RxBuffer[i + 3];
 8001e16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e18:	3303      	adds	r3, #3
 8001e1a:	4a45      	ldr	r2, [pc, #276]	@ (8001f30 <main+0x678>)
 8001e1c:	493e      	ldr	r1, [pc, #248]	@ (8001f18 <main+0x660>)
 8001e1e:	5ccb      	ldrb	r3, [r1, r3]
 8001e20:	7013      	strb	r3, [r2, #0]
    			              *((uint8_t*)&roll + 3) = RxBuffer[i + 4];
 8001e22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e24:	3304      	adds	r3, #4
 8001e26:	4a43      	ldr	r2, [pc, #268]	@ (8001f34 <main+0x67c>)
 8001e28:	493b      	ldr	r1, [pc, #236]	@ (8001f18 <main+0x660>)
 8001e2a:	5ccb      	ldrb	r3, [r1, r3]
 8001e2c:	7013      	strb	r3, [r2, #0]
 8001e2e:	e064      	b.n	8001efa <main+0x642>

    			          }
    			          else if (RxBuffer[i] == 'P' && i + 4 < 25) {
 8001e30:	4a39      	ldr	r2, [pc, #228]	@ (8001f18 <main+0x660>)
 8001e32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e34:	4413      	add	r3, r2
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b50      	cmp	r3, #80	@ 0x50
 8001e3a:	d11b      	bne.n	8001e74 <main+0x5bc>
 8001e3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e3e:	2b14      	cmp	r3, #20
 8001e40:	dc18      	bgt.n	8001e74 <main+0x5bc>

    			              *((uint8_t*)&pitch + 0) = RxBuffer[i + 1];
 8001e42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e44:	3301      	adds	r3, #1
 8001e46:	4a3c      	ldr	r2, [pc, #240]	@ (8001f38 <main+0x680>)
 8001e48:	4933      	ldr	r1, [pc, #204]	@ (8001f18 <main+0x660>)
 8001e4a:	5ccb      	ldrb	r3, [r1, r3]
 8001e4c:	7013      	strb	r3, [r2, #0]
    			              *((uint8_t*)&pitch + 1) = RxBuffer[i + 2];
 8001e4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e50:	3302      	adds	r3, #2
 8001e52:	4a3a      	ldr	r2, [pc, #232]	@ (8001f3c <main+0x684>)
 8001e54:	4930      	ldr	r1, [pc, #192]	@ (8001f18 <main+0x660>)
 8001e56:	5ccb      	ldrb	r3, [r1, r3]
 8001e58:	7013      	strb	r3, [r2, #0]
    			              *((uint8_t*)&pitch + 2) = RxBuffer[i + 3];
 8001e5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e5c:	3303      	adds	r3, #3
 8001e5e:	4a38      	ldr	r2, [pc, #224]	@ (8001f40 <main+0x688>)
 8001e60:	492d      	ldr	r1, [pc, #180]	@ (8001f18 <main+0x660>)
 8001e62:	5ccb      	ldrb	r3, [r1, r3]
 8001e64:	7013      	strb	r3, [r2, #0]
    			              *((uint8_t*)&pitch + 3) = RxBuffer[i + 4];
 8001e66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e68:	3304      	adds	r3, #4
 8001e6a:	4a36      	ldr	r2, [pc, #216]	@ (8001f44 <main+0x68c>)
 8001e6c:	492a      	ldr	r1, [pc, #168]	@ (8001f18 <main+0x660>)
 8001e6e:	5ccb      	ldrb	r3, [r1, r3]
 8001e70:	7013      	strb	r3, [r2, #0]
 8001e72:	e042      	b.n	8001efa <main+0x642>

    			          }

    			          else if (RxBuffer[i] == 'V' && i + 4 < 25) {
 8001e74:	4a28      	ldr	r2, [pc, #160]	@ (8001f18 <main+0x660>)
 8001e76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e78:	4413      	add	r3, r2
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b56      	cmp	r3, #86	@ 0x56
 8001e7e:	d11b      	bne.n	8001eb8 <main+0x600>
 8001e80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e82:	2b14      	cmp	r3, #20
 8001e84:	dc18      	bgt.n	8001eb8 <main+0x600>

    						  *((uint8_t*)&velocity + 0) = RxBuffer[i + 1];
 8001e86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e88:	3301      	adds	r3, #1
 8001e8a:	4a2f      	ldr	r2, [pc, #188]	@ (8001f48 <main+0x690>)
 8001e8c:	4922      	ldr	r1, [pc, #136]	@ (8001f18 <main+0x660>)
 8001e8e:	5ccb      	ldrb	r3, [r1, r3]
 8001e90:	7013      	strb	r3, [r2, #0]
    						  *((uint8_t*)&velocity + 1) = RxBuffer[i + 2];
 8001e92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e94:	3302      	adds	r3, #2
 8001e96:	4a2d      	ldr	r2, [pc, #180]	@ (8001f4c <main+0x694>)
 8001e98:	491f      	ldr	r1, [pc, #124]	@ (8001f18 <main+0x660>)
 8001e9a:	5ccb      	ldrb	r3, [r1, r3]
 8001e9c:	7013      	strb	r3, [r2, #0]
    						  *((uint8_t*)&velocity + 2) = RxBuffer[i + 3];
 8001e9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ea0:	3303      	adds	r3, #3
 8001ea2:	4a2b      	ldr	r2, [pc, #172]	@ (8001f50 <main+0x698>)
 8001ea4:	491c      	ldr	r1, [pc, #112]	@ (8001f18 <main+0x660>)
 8001ea6:	5ccb      	ldrb	r3, [r1, r3]
 8001ea8:	7013      	strb	r3, [r2, #0]
    						  *((uint8_t*)&velocity + 3) = RxBuffer[i + 4];
 8001eaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001eac:	3304      	adds	r3, #4
 8001eae:	4a29      	ldr	r2, [pc, #164]	@ (8001f54 <main+0x69c>)
 8001eb0:	4919      	ldr	r1, [pc, #100]	@ (8001f18 <main+0x660>)
 8001eb2:	5ccb      	ldrb	r3, [r1, r3]
 8001eb4:	7013      	strb	r3, [r2, #0]
 8001eb6:	e020      	b.n	8001efa <main+0x642>

    			         		          }
    			          else if (RxBuffer[i] == 'Y' && i + 4 < 25) {
 8001eb8:	4a17      	ldr	r2, [pc, #92]	@ (8001f18 <main+0x660>)
 8001eba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ebc:	4413      	add	r3, r2
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b59      	cmp	r3, #89	@ 0x59
 8001ec2:	d11a      	bne.n	8001efa <main+0x642>
 8001ec4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ec6:	2b14      	cmp	r3, #20
 8001ec8:	dc17      	bgt.n	8001efa <main+0x642>

    			              *((uint8_t*)&yaw + 0) = RxBuffer[i + 1];
 8001eca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ecc:	3301      	adds	r3, #1
 8001ece:	4a22      	ldr	r2, [pc, #136]	@ (8001f58 <main+0x6a0>)
 8001ed0:	4911      	ldr	r1, [pc, #68]	@ (8001f18 <main+0x660>)
 8001ed2:	5ccb      	ldrb	r3, [r1, r3]
 8001ed4:	7013      	strb	r3, [r2, #0]
    			              *((uint8_t*)&yaw + 1) = RxBuffer[i + 2];
 8001ed6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ed8:	3302      	adds	r3, #2
 8001eda:	4a20      	ldr	r2, [pc, #128]	@ (8001f5c <main+0x6a4>)
 8001edc:	490e      	ldr	r1, [pc, #56]	@ (8001f18 <main+0x660>)
 8001ede:	5ccb      	ldrb	r3, [r1, r3]
 8001ee0:	7013      	strb	r3, [r2, #0]
    			              *((uint8_t*)&yaw + 2) = RxBuffer[i + 3];
 8001ee2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ee4:	3303      	adds	r3, #3
 8001ee6:	4a1e      	ldr	r2, [pc, #120]	@ (8001f60 <main+0x6a8>)
 8001ee8:	490b      	ldr	r1, [pc, #44]	@ (8001f18 <main+0x660>)
 8001eea:	5ccb      	ldrb	r3, [r1, r3]
 8001eec:	7013      	strb	r3, [r2, #0]
    			              *((uint8_t*)&yaw + 3) = RxBuffer[i + 4];
 8001eee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	4a1c      	ldr	r2, [pc, #112]	@ (8001f64 <main+0x6ac>)
 8001ef4:	4908      	ldr	r1, [pc, #32]	@ (8001f18 <main+0x660>)
 8001ef6:	5ccb      	ldrb	r3, [r1, r3]
 8001ef8:	7013      	strb	r3, [r2, #0]
    			      for (i = 0; i < 25; i++) {
 8001efa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001efc:	3301      	adds	r3, #1
 8001efe:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f02:	2b18      	cmp	r3, #24
 8001f04:	f77f af50 	ble.w	8001da8 <main+0x4f0>



    			          }
    			      }
    			      rxComplete=0;
 8001f08:	4b02      	ldr	r3, [pc, #8]	@ (8001f14 <main+0x65c>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
    	 if(rxComplete==1)
 8001f0e:	e744      	b.n	8001d9a <main+0x4e2>
 8001f10:	20000008 	.word	0x20000008
 8001f14:	20004151 	.word	0x20004151
 8001f18:	20004138 	.word	0x20004138
 8001f1c:	20004154 	.word	0x20004154
 8001f20:	20004155 	.word	0x20004155
 8001f24:	20004156 	.word	0x20004156
 8001f28:	20004157 	.word	0x20004157
 8001f2c:	20000009 	.word	0x20000009
 8001f30:	2000000a 	.word	0x2000000a
 8001f34:	2000000b 	.word	0x2000000b
 8001f38:	20000004 	.word	0x20000004
 8001f3c:	20000005 	.word	0x20000005
 8001f40:	20000006 	.word	0x20000006
 8001f44:	20000007 	.word	0x20000007
 8001f48:	20004158 	.word	0x20004158
 8001f4c:	20004159 	.word	0x20004159
 8001f50:	2000415a 	.word	0x2000415a
 8001f54:	2000415b 	.word	0x2000415b
 8001f58:	2000415c 	.word	0x2000415c
 8001f5c:	2000415d 	.word	0x2000415d
 8001f60:	2000415e 	.word	0x2000415e
 8001f64:	2000415f 	.word	0x2000415f

08001f68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b094      	sub	sp, #80	@ 0x50
 8001f6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f6e:	f107 031c 	add.w	r3, r7, #28
 8001f72:	2234      	movs	r2, #52	@ 0x34
 8001f74:	2100      	movs	r1, #0
 8001f76:	4618      	mov	r0, r3
 8001f78:	f002 ff84 	bl	8004e84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f7c:	f107 0308 	add.w	r3, r7, #8
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	607b      	str	r3, [r7, #4]
 8001f90:	4b2c      	ldr	r3, [pc, #176]	@ (8002044 <SystemClock_Config+0xdc>)
 8001f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f94:	4a2b      	ldr	r2, [pc, #172]	@ (8002044 <SystemClock_Config+0xdc>)
 8001f96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f9c:	4b29      	ldr	r3, [pc, #164]	@ (8002044 <SystemClock_Config+0xdc>)
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fa4:	607b      	str	r3, [r7, #4]
 8001fa6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fa8:	2300      	movs	r3, #0
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	4b26      	ldr	r3, [pc, #152]	@ (8002048 <SystemClock_Config+0xe0>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a25      	ldr	r2, [pc, #148]	@ (8002048 <SystemClock_Config+0xe0>)
 8001fb2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001fb6:	6013      	str	r3, [r2, #0]
 8001fb8:	4b23      	ldr	r3, [pc, #140]	@ (8002048 <SystemClock_Config+0xe0>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001fc0:	603b      	str	r3, [r7, #0]
 8001fc2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fcc:	2310      	movs	r3, #16
 8001fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001fd8:	2308      	movs	r3, #8
 8001fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001fdc:	23b4      	movs	r3, #180	@ 0xb4
 8001fde:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fec:	f107 031c 	add.w	r3, r7, #28
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f001 fcc5 	bl	8003980 <HAL_RCC_OscConfig>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001ffc:	f000 f8f8 	bl	80021f0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002000:	f001 f924 	bl	800324c <HAL_PWREx_EnableOverDrive>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800200a:	f000 f8f1 	bl	80021f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800200e:	230f      	movs	r3, #15
 8002010:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002012:	2302      	movs	r3, #2
 8002014:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800201a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800201e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002020:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002024:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002026:	f107 0308 	add.w	r3, r7, #8
 800202a:	2105      	movs	r1, #5
 800202c:	4618      	mov	r0, r3
 800202e:	f001 f95d 	bl	80032ec <HAL_RCC_ClockConfig>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002038:	f000 f8da 	bl	80021f0 <Error_Handler>
  }
}
 800203c:	bf00      	nop
 800203e:	3750      	adds	r7, #80	@ 0x50
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40023800 	.word	0x40023800
 8002048:	40007000 	.word	0x40007000

0800204c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002050:	4b18      	ldr	r3, [pc, #96]	@ (80020b4 <MX_SPI1_Init+0x68>)
 8002052:	4a19      	ldr	r2, [pc, #100]	@ (80020b8 <MX_SPI1_Init+0x6c>)
 8002054:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002056:	4b17      	ldr	r3, [pc, #92]	@ (80020b4 <MX_SPI1_Init+0x68>)
 8002058:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800205c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800205e:	4b15      	ldr	r3, [pc, #84]	@ (80020b4 <MX_SPI1_Init+0x68>)
 8002060:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002064:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002066:	4b13      	ldr	r3, [pc, #76]	@ (80020b4 <MX_SPI1_Init+0x68>)
 8002068:	2200      	movs	r2, #0
 800206a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800206c:	4b11      	ldr	r3, [pc, #68]	@ (80020b4 <MX_SPI1_Init+0x68>)
 800206e:	2200      	movs	r2, #0
 8002070:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002072:	4b10      	ldr	r3, [pc, #64]	@ (80020b4 <MX_SPI1_Init+0x68>)
 8002074:	2200      	movs	r2, #0
 8002076:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002078:	4b0e      	ldr	r3, [pc, #56]	@ (80020b4 <MX_SPI1_Init+0x68>)
 800207a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800207e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002080:	4b0c      	ldr	r3, [pc, #48]	@ (80020b4 <MX_SPI1_Init+0x68>)
 8002082:	2200      	movs	r2, #0
 8002084:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002086:	4b0b      	ldr	r3, [pc, #44]	@ (80020b4 <MX_SPI1_Init+0x68>)
 8002088:	2200      	movs	r2, #0
 800208a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800208c:	4b09      	ldr	r3, [pc, #36]	@ (80020b4 <MX_SPI1_Init+0x68>)
 800208e:	2200      	movs	r2, #0
 8002090:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002092:	4b08      	ldr	r3, [pc, #32]	@ (80020b4 <MX_SPI1_Init+0x68>)
 8002094:	2200      	movs	r2, #0
 8002096:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002098:	4b06      	ldr	r3, [pc, #24]	@ (80020b4 <MX_SPI1_Init+0x68>)
 800209a:	220a      	movs	r2, #10
 800209c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800209e:	4805      	ldr	r0, [pc, #20]	@ (80020b4 <MX_SPI1_Init+0x68>)
 80020a0:	f001 ff0c 	bl	8003ebc <HAL_SPI_Init>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80020aa:	f000 f8a1 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20004038 	.word	0x20004038
 80020b8:	40013000 	.word	0x40013000

080020bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020c0:	4b11      	ldr	r3, [pc, #68]	@ (8002108 <MX_USART1_UART_Init+0x4c>)
 80020c2:	4a12      	ldr	r2, [pc, #72]	@ (800210c <MX_USART1_UART_Init+0x50>)
 80020c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020c6:	4b10      	ldr	r3, [pc, #64]	@ (8002108 <MX_USART1_UART_Init+0x4c>)
 80020c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002108 <MX_USART1_UART_Init+0x4c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002108 <MX_USART1_UART_Init+0x4c>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020da:	4b0b      	ldr	r3, [pc, #44]	@ (8002108 <MX_USART1_UART_Init+0x4c>)
 80020dc:	2200      	movs	r2, #0
 80020de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020e0:	4b09      	ldr	r3, [pc, #36]	@ (8002108 <MX_USART1_UART_Init+0x4c>)
 80020e2:	220c      	movs	r2, #12
 80020e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020e6:	4b08      	ldr	r3, [pc, #32]	@ (8002108 <MX_USART1_UART_Init+0x4c>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020ec:	4b06      	ldr	r3, [pc, #24]	@ (8002108 <MX_USART1_UART_Init+0x4c>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020f2:	4805      	ldr	r0, [pc, #20]	@ (8002108 <MX_USART1_UART_Init+0x4c>)
 80020f4:	f002 f998 	bl	8004428 <HAL_UART_Init>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80020fe:	f000 f877 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20004090 	.word	0x20004090
 800210c:	40011000 	.word	0x40011000

08002110 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	607b      	str	r3, [r7, #4]
 800211a:	4b0c      	ldr	r3, [pc, #48]	@ (800214c <MX_DMA_Init+0x3c>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211e:	4a0b      	ldr	r2, [pc, #44]	@ (800214c <MX_DMA_Init+0x3c>)
 8002120:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002124:	6313      	str	r3, [r2, #48]	@ 0x30
 8002126:	4b09      	ldr	r3, [pc, #36]	@ (800214c <MX_DMA_Init+0x3c>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800212e:	607b      	str	r3, [r7, #4]
 8002130:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002132:	2200      	movs	r2, #0
 8002134:	2100      	movs	r1, #0
 8002136:	203a      	movs	r0, #58	@ 0x3a
 8002138:	f000 fb33 	bl	80027a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800213c:	203a      	movs	r0, #58	@ 0x3a
 800213e:	f000 fb4c 	bl	80027da <HAL_NVIC_EnableIRQ>

}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40023800 	.word	0x40023800

08002150 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002156:	f107 030c 	add.w	r3, r7, #12
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	605a      	str	r2, [r3, #4]
 8002160:	609a      	str	r2, [r3, #8]
 8002162:	60da      	str	r2, [r3, #12]
 8002164:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	60bb      	str	r3, [r7, #8]
 800216a:	4b1f      	ldr	r3, [pc, #124]	@ (80021e8 <MX_GPIO_Init+0x98>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216e:	4a1e      	ldr	r2, [pc, #120]	@ (80021e8 <MX_GPIO_Init+0x98>)
 8002170:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002174:	6313      	str	r3, [r2, #48]	@ 0x30
 8002176:	4b1c      	ldr	r3, [pc, #112]	@ (80021e8 <MX_GPIO_Init+0x98>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800217e:	60bb      	str	r3, [r7, #8]
 8002180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]
 8002186:	4b18      	ldr	r3, [pc, #96]	@ (80021e8 <MX_GPIO_Init+0x98>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218a:	4a17      	ldr	r2, [pc, #92]	@ (80021e8 <MX_GPIO_Init+0x98>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	6313      	str	r3, [r2, #48]	@ 0x30
 8002192:	4b15      	ldr	r3, [pc, #84]	@ (80021e8 <MX_GPIO_Init+0x98>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	607b      	str	r3, [r7, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	603b      	str	r3, [r7, #0]
 80021a2:	4b11      	ldr	r3, [pc, #68]	@ (80021e8 <MX_GPIO_Init+0x98>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a6:	4a10      	ldr	r2, [pc, #64]	@ (80021e8 <MX_GPIO_Init+0x98>)
 80021a8:	f043 0302 	orr.w	r3, r3, #2
 80021ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ae:	4b0e      	ldr	r3, [pc, #56]	@ (80021e8 <MX_GPIO_Init+0x98>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	603b      	str	r3, [r7, #0]
 80021b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin, GPIO_PIN_RESET);
 80021ba:	2200      	movs	r2, #0
 80021bc:	2107      	movs	r1, #7
 80021be:	480b      	ldr	r0, [pc, #44]	@ (80021ec <MX_GPIO_Init+0x9c>)
 80021c0:	f001 f82a 	bl	8003218 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TFT_CS_Pin TFT_RST_Pin TFT_DC_Pin */
  GPIO_InitStruct.Pin = TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin;
 80021c4:	2307      	movs	r3, #7
 80021c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c8:	2301      	movs	r3, #1
 80021ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d4:	f107 030c 	add.w	r3, r7, #12
 80021d8:	4619      	mov	r1, r3
 80021da:	4804      	ldr	r0, [pc, #16]	@ (80021ec <MX_GPIO_Init+0x9c>)
 80021dc:	f000 fe88 	bl	8002ef0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021e0:	bf00      	nop
 80021e2:	3720      	adds	r7, #32
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40020400 	.word	0x40020400

080021f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021f4:	b672      	cpsid	i
}
 80021f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021f8:	bf00      	nop
 80021fa:	e7fd      	b.n	80021f8 <Error_Handler+0x8>

080021fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	607b      	str	r3, [r7, #4]
 8002206:	4b10      	ldr	r3, [pc, #64]	@ (8002248 <HAL_MspInit+0x4c>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220a:	4a0f      	ldr	r2, [pc, #60]	@ (8002248 <HAL_MspInit+0x4c>)
 800220c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002210:	6453      	str	r3, [r2, #68]	@ 0x44
 8002212:	4b0d      	ldr	r3, [pc, #52]	@ (8002248 <HAL_MspInit+0x4c>)
 8002214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002216:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800221a:	607b      	str	r3, [r7, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	603b      	str	r3, [r7, #0]
 8002222:	4b09      	ldr	r3, [pc, #36]	@ (8002248 <HAL_MspInit+0x4c>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002226:	4a08      	ldr	r2, [pc, #32]	@ (8002248 <HAL_MspInit+0x4c>)
 8002228:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800222c:	6413      	str	r3, [r2, #64]	@ 0x40
 800222e:	4b06      	ldr	r3, [pc, #24]	@ (8002248 <HAL_MspInit+0x4c>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002232:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002236:	603b      	str	r3, [r7, #0]
 8002238:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800223a:	2007      	movs	r0, #7
 800223c:	f000 faa6 	bl	800278c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40023800 	.word	0x40023800

0800224c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08a      	sub	sp, #40	@ 0x28
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002254:	f107 0314 	add.w	r3, r7, #20
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a19      	ldr	r2, [pc, #100]	@ (80022d0 <HAL_SPI_MspInit+0x84>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d12b      	bne.n	80022c6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	4b18      	ldr	r3, [pc, #96]	@ (80022d4 <HAL_SPI_MspInit+0x88>)
 8002274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002276:	4a17      	ldr	r2, [pc, #92]	@ (80022d4 <HAL_SPI_MspInit+0x88>)
 8002278:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800227c:	6453      	str	r3, [r2, #68]	@ 0x44
 800227e:	4b15      	ldr	r3, [pc, #84]	@ (80022d4 <HAL_SPI_MspInit+0x88>)
 8002280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002282:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002286:	613b      	str	r3, [r7, #16]
 8002288:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	4b11      	ldr	r3, [pc, #68]	@ (80022d4 <HAL_SPI_MspInit+0x88>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002292:	4a10      	ldr	r2, [pc, #64]	@ (80022d4 <HAL_SPI_MspInit+0x88>)
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	6313      	str	r3, [r2, #48]	@ 0x30
 800229a:	4b0e      	ldr	r3, [pc, #56]	@ (80022d4 <HAL_SPI_MspInit+0x88>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80022a6:	23a0      	movs	r3, #160	@ 0xa0
 80022a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022aa:	2302      	movs	r3, #2
 80022ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b2:	2303      	movs	r3, #3
 80022b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022b6:	2305      	movs	r3, #5
 80022b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ba:	f107 0314 	add.w	r3, r7, #20
 80022be:	4619      	mov	r1, r3
 80022c0:	4805      	ldr	r0, [pc, #20]	@ (80022d8 <HAL_SPI_MspInit+0x8c>)
 80022c2:	f000 fe15 	bl	8002ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80022c6:	bf00      	nop
 80022c8:	3728      	adds	r7, #40	@ 0x28
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40013000 	.word	0x40013000
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40020000 	.word	0x40020000

080022dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08a      	sub	sp, #40	@ 0x28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e4:	f107 0314 	add.w	r3, r7, #20
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	60da      	str	r2, [r3, #12]
 80022f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a31      	ldr	r2, [pc, #196]	@ (80023c0 <HAL_UART_MspInit+0xe4>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d15c      	bne.n	80023b8 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	613b      	str	r3, [r7, #16]
 8002302:	4b30      	ldr	r3, [pc, #192]	@ (80023c4 <HAL_UART_MspInit+0xe8>)
 8002304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002306:	4a2f      	ldr	r2, [pc, #188]	@ (80023c4 <HAL_UART_MspInit+0xe8>)
 8002308:	f043 0310 	orr.w	r3, r3, #16
 800230c:	6453      	str	r3, [r2, #68]	@ 0x44
 800230e:	4b2d      	ldr	r3, [pc, #180]	@ (80023c4 <HAL_UART_MspInit+0xe8>)
 8002310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002312:	f003 0310 	and.w	r3, r3, #16
 8002316:	613b      	str	r3, [r7, #16]
 8002318:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	4b29      	ldr	r3, [pc, #164]	@ (80023c4 <HAL_UART_MspInit+0xe8>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002322:	4a28      	ldr	r2, [pc, #160]	@ (80023c4 <HAL_UART_MspInit+0xe8>)
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	6313      	str	r3, [r2, #48]	@ 0x30
 800232a:	4b26      	ldr	r3, [pc, #152]	@ (80023c4 <HAL_UART_MspInit+0xe8>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002336:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800233a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233c:	2302      	movs	r3, #2
 800233e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002344:	2303      	movs	r3, #3
 8002346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002348:	2307      	movs	r3, #7
 800234a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234c:	f107 0314 	add.w	r3, r7, #20
 8002350:	4619      	mov	r1, r3
 8002352:	481d      	ldr	r0, [pc, #116]	@ (80023c8 <HAL_UART_MspInit+0xec>)
 8002354:	f000 fdcc 	bl	8002ef0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002358:	4b1c      	ldr	r3, [pc, #112]	@ (80023cc <HAL_UART_MspInit+0xf0>)
 800235a:	4a1d      	ldr	r2, [pc, #116]	@ (80023d0 <HAL_UART_MspInit+0xf4>)
 800235c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800235e:	4b1b      	ldr	r3, [pc, #108]	@ (80023cc <HAL_UART_MspInit+0xf0>)
 8002360:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002364:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002366:	4b19      	ldr	r3, [pc, #100]	@ (80023cc <HAL_UART_MspInit+0xf0>)
 8002368:	2200      	movs	r2, #0
 800236a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800236c:	4b17      	ldr	r3, [pc, #92]	@ (80023cc <HAL_UART_MspInit+0xf0>)
 800236e:	2200      	movs	r2, #0
 8002370:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002372:	4b16      	ldr	r3, [pc, #88]	@ (80023cc <HAL_UART_MspInit+0xf0>)
 8002374:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002378:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800237a:	4b14      	ldr	r3, [pc, #80]	@ (80023cc <HAL_UART_MspInit+0xf0>)
 800237c:	2200      	movs	r2, #0
 800237e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002380:	4b12      	ldr	r3, [pc, #72]	@ (80023cc <HAL_UART_MspInit+0xf0>)
 8002382:	2200      	movs	r2, #0
 8002384:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002386:	4b11      	ldr	r3, [pc, #68]	@ (80023cc <HAL_UART_MspInit+0xf0>)
 8002388:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800238c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800238e:	4b0f      	ldr	r3, [pc, #60]	@ (80023cc <HAL_UART_MspInit+0xf0>)
 8002390:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002394:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002396:	4b0d      	ldr	r3, [pc, #52]	@ (80023cc <HAL_UART_MspInit+0xf0>)
 8002398:	2200      	movs	r2, #0
 800239a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800239c:	480b      	ldr	r0, [pc, #44]	@ (80023cc <HAL_UART_MspInit+0xf0>)
 800239e:	f000 fa37 	bl	8002810 <HAL_DMA_Init>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80023a8:	f7ff ff22 	bl	80021f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a07      	ldr	r2, [pc, #28]	@ (80023cc <HAL_UART_MspInit+0xf0>)
 80023b0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80023b2:	4a06      	ldr	r2, [pc, #24]	@ (80023cc <HAL_UART_MspInit+0xf0>)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80023b8:	bf00      	nop
 80023ba:	3728      	adds	r7, #40	@ 0x28
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40011000 	.word	0x40011000
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40020000 	.word	0x40020000
 80023cc:	200040d8 	.word	0x200040d8
 80023d0:	40026440 	.word	0x40026440

080023d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023d8:	bf00      	nop
 80023da:	e7fd      	b.n	80023d8 <NMI_Handler+0x4>

080023dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023e0:	bf00      	nop
 80023e2:	e7fd      	b.n	80023e0 <HardFault_Handler+0x4>

080023e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023e8:	bf00      	nop
 80023ea:	e7fd      	b.n	80023e8 <MemManage_Handler+0x4>

080023ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023f0:	bf00      	nop
 80023f2:	e7fd      	b.n	80023f0 <BusFault_Handler+0x4>

080023f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023f8:	bf00      	nop
 80023fa:	e7fd      	b.n	80023f8 <UsageFault_Handler+0x4>

080023fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800240a:	b480      	push	{r7}
 800240c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800242a:	f000 f89b 	bl	8002564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002438:	4802      	ldr	r0, [pc, #8]	@ (8002444 <DMA2_Stream2_IRQHandler+0x10>)
 800243a:	f000 faef 	bl	8002a1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	200040d8 	.word	0x200040d8

08002448 <SystemInit>:
  *         Initialize the FPU setting, vector table location and External memory 
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void){
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800244c:	4b06      	ldr	r3, [pc, #24]	@ (8002468 <SystemInit+0x20>)
 800244e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002452:	4a05      	ldr	r2, [pc, #20]	@ (8002468 <SystemInit+0x20>)
 8002454:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002458:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800246c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024a4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002470:	f7ff ffea 	bl	8002448 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002474:	480c      	ldr	r0, [pc, #48]	@ (80024a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002476:	490d      	ldr	r1, [pc, #52]	@ (80024ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002478:	4a0d      	ldr	r2, [pc, #52]	@ (80024b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800247a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800247c:	e002      	b.n	8002484 <LoopCopyDataInit>

0800247e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800247e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002482:	3304      	adds	r3, #4

08002484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002488:	d3f9      	bcc.n	800247e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800248a:	4a0a      	ldr	r2, [pc, #40]	@ (80024b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800248c:	4c0a      	ldr	r4, [pc, #40]	@ (80024b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800248e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002490:	e001      	b.n	8002496 <LoopFillZerobss>

08002492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002494:	3204      	adds	r2, #4

08002496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002498:	d3fb      	bcc.n	8002492 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800249a:	f002 fcfb 	bl	8004e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800249e:	f7ff fa0b 	bl	80018b8 <main>
  bx  lr    
 80024a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024ac:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80024b0:	080067b8 	.word	0x080067b8
  ldr r2, =_sbss
 80024b4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80024b8:	20004164 	.word	0x20004164

080024bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024bc:	e7fe      	b.n	80024bc <ADC_IRQHandler>
	...

080024c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002500 <HAL_Init+0x40>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002500 <HAL_Init+0x40>)
 80024ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002500 <HAL_Init+0x40>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002500 <HAL_Init+0x40>)
 80024d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024dc:	4b08      	ldr	r3, [pc, #32]	@ (8002500 <HAL_Init+0x40>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a07      	ldr	r2, [pc, #28]	@ (8002500 <HAL_Init+0x40>)
 80024e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024e8:	2003      	movs	r0, #3
 80024ea:	f000 f94f 	bl	800278c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024ee:	2000      	movs	r0, #0
 80024f0:	f000 f808 	bl	8002504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024f4:	f7ff fe82 	bl	80021fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40023c00 	.word	0x40023c00

08002504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800250c:	4b12      	ldr	r3, [pc, #72]	@ (8002558 <HAL_InitTick+0x54>)
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	4b12      	ldr	r3, [pc, #72]	@ (800255c <HAL_InitTick+0x58>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	4619      	mov	r1, r3
 8002516:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800251a:	fbb3 f3f1 	udiv	r3, r3, r1
 800251e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002522:	4618      	mov	r0, r3
 8002524:	f000 f967 	bl	80027f6 <HAL_SYSTICK_Config>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e00e      	b.n	8002550 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b0f      	cmp	r3, #15
 8002536:	d80a      	bhi.n	800254e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002538:	2200      	movs	r2, #0
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	f04f 30ff 	mov.w	r0, #4294967295
 8002540:	f000 f92f 	bl	80027a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002544:	4a06      	ldr	r2, [pc, #24]	@ (8002560 <HAL_InitTick+0x5c>)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800254a:	2300      	movs	r3, #0
 800254c:	e000      	b.n	8002550 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
}
 8002550:	4618      	mov	r0, r3
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	2000000c 	.word	0x2000000c
 800255c:	20000014 	.word	0x20000014
 8002560:	20000010 	.word	0x20000010

08002564 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002568:	4b06      	ldr	r3, [pc, #24]	@ (8002584 <HAL_IncTick+0x20>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	461a      	mov	r2, r3
 800256e:	4b06      	ldr	r3, [pc, #24]	@ (8002588 <HAL_IncTick+0x24>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4413      	add	r3, r2
 8002574:	4a04      	ldr	r2, [pc, #16]	@ (8002588 <HAL_IncTick+0x24>)
 8002576:	6013      	str	r3, [r2, #0]
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	20000014 	.word	0x20000014
 8002588:	20004160 	.word	0x20004160

0800258c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  return uwTick;
 8002590:	4b03      	ldr	r3, [pc, #12]	@ (80025a0 <HAL_GetTick+0x14>)
 8002592:	681b      	ldr	r3, [r3, #0]
}
 8002594:	4618      	mov	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	20004160 	.word	0x20004160

080025a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025ac:	f7ff ffee 	bl	800258c <HAL_GetTick>
 80025b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025bc:	d005      	beq.n	80025ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025be:	4b0a      	ldr	r3, [pc, #40]	@ (80025e8 <HAL_Delay+0x44>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	461a      	mov	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4413      	add	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025ca:	bf00      	nop
 80025cc:	f7ff ffde 	bl	800258c <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d8f7      	bhi.n	80025cc <HAL_Delay+0x28>
  {
  }
}
 80025dc:	bf00      	nop
 80025de:	bf00      	nop
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000014 	.word	0x20000014

080025ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002630 <__NVIC_SetPriorityGrouping+0x44>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002608:	4013      	ands	r3, r2
 800260a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002614:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002618:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800261c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800261e:	4a04      	ldr	r2, [pc, #16]	@ (8002630 <__NVIC_SetPriorityGrouping+0x44>)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	60d3      	str	r3, [r2, #12]
}
 8002624:	bf00      	nop
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002638:	4b04      	ldr	r3, [pc, #16]	@ (800264c <__NVIC_GetPriorityGrouping+0x18>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	0a1b      	lsrs	r3, r3, #8
 800263e:	f003 0307 	and.w	r3, r3, #7
}
 8002642:	4618      	mov	r0, r3
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800265a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265e:	2b00      	cmp	r3, #0
 8002660:	db0b      	blt.n	800267a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002662:	79fb      	ldrb	r3, [r7, #7]
 8002664:	f003 021f 	and.w	r2, r3, #31
 8002668:	4907      	ldr	r1, [pc, #28]	@ (8002688 <__NVIC_EnableIRQ+0x38>)
 800266a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	2001      	movs	r0, #1
 8002672:	fa00 f202 	lsl.w	r2, r0, r2
 8002676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	e000e100 	.word	0xe000e100

0800268c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	6039      	str	r1, [r7, #0]
 8002696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269c:	2b00      	cmp	r3, #0
 800269e:	db0a      	blt.n	80026b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	490c      	ldr	r1, [pc, #48]	@ (80026d8 <__NVIC_SetPriority+0x4c>)
 80026a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026aa:	0112      	lsls	r2, r2, #4
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	440b      	add	r3, r1
 80026b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026b4:	e00a      	b.n	80026cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	4908      	ldr	r1, [pc, #32]	@ (80026dc <__NVIC_SetPriority+0x50>)
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	3b04      	subs	r3, #4
 80026c4:	0112      	lsls	r2, r2, #4
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	440b      	add	r3, r1
 80026ca:	761a      	strb	r2, [r3, #24]
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	e000e100 	.word	0xe000e100
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b089      	sub	sp, #36	@ 0x24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f1c3 0307 	rsb	r3, r3, #7
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	bf28      	it	cs
 80026fe:	2304      	movcs	r3, #4
 8002700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	3304      	adds	r3, #4
 8002706:	2b06      	cmp	r3, #6
 8002708:	d902      	bls.n	8002710 <NVIC_EncodePriority+0x30>
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	3b03      	subs	r3, #3
 800270e:	e000      	b.n	8002712 <NVIC_EncodePriority+0x32>
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002714:	f04f 32ff 	mov.w	r2, #4294967295
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43da      	mvns	r2, r3
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	401a      	ands	r2, r3
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002728:	f04f 31ff 	mov.w	r1, #4294967295
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	fa01 f303 	lsl.w	r3, r1, r3
 8002732:	43d9      	mvns	r1, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002738:	4313      	orrs	r3, r2
         );
}
 800273a:	4618      	mov	r0, r3
 800273c:	3724      	adds	r7, #36	@ 0x24
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
	...

08002748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3b01      	subs	r3, #1
 8002754:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002758:	d301      	bcc.n	800275e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800275a:	2301      	movs	r3, #1
 800275c:	e00f      	b.n	800277e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800275e:	4a0a      	ldr	r2, [pc, #40]	@ (8002788 <SysTick_Config+0x40>)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3b01      	subs	r3, #1
 8002764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002766:	210f      	movs	r1, #15
 8002768:	f04f 30ff 	mov.w	r0, #4294967295
 800276c:	f7ff ff8e 	bl	800268c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002770:	4b05      	ldr	r3, [pc, #20]	@ (8002788 <SysTick_Config+0x40>)
 8002772:	2200      	movs	r2, #0
 8002774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002776:	4b04      	ldr	r3, [pc, #16]	@ (8002788 <SysTick_Config+0x40>)
 8002778:	2207      	movs	r2, #7
 800277a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	e000e010 	.word	0xe000e010

0800278c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f7ff ff29 	bl	80025ec <__NVIC_SetPriorityGrouping>
}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b086      	sub	sp, #24
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	4603      	mov	r3, r0
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
 80027ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027b4:	f7ff ff3e 	bl	8002634 <__NVIC_GetPriorityGrouping>
 80027b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	68b9      	ldr	r1, [r7, #8]
 80027be:	6978      	ldr	r0, [r7, #20]
 80027c0:	f7ff ff8e 	bl	80026e0 <NVIC_EncodePriority>
 80027c4:	4602      	mov	r2, r0
 80027c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ca:	4611      	mov	r1, r2
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ff5d 	bl	800268c <__NVIC_SetPriority>
}
 80027d2:	bf00      	nop
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	4603      	mov	r3, r0
 80027e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff ff31 	bl	8002650 <__NVIC_EnableIRQ>
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff ffa2 	bl	8002748 <SysTick_Config>
 8002804:	4603      	mov	r3, r0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800281c:	f7ff feb6 	bl	800258c <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e099      	b.n	8002960 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2202      	movs	r2, #2
 8002830:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 0201 	bic.w	r2, r2, #1
 800284a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800284c:	e00f      	b.n	800286e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800284e:	f7ff fe9d 	bl	800258c <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b05      	cmp	r3, #5
 800285a:	d908      	bls.n	800286e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2220      	movs	r2, #32
 8002860:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2203      	movs	r2, #3
 8002866:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e078      	b.n	8002960 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1e8      	bne.n	800284e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	4b38      	ldr	r3, [pc, #224]	@ (8002968 <HAL_DMA_Init+0x158>)
 8002888:	4013      	ands	r3, r2
 800288a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800289a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	4313      	orrs	r3, r2
 80028be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d107      	bne.n	80028d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d0:	4313      	orrs	r3, r2
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	f023 0307 	bic.w	r3, r3, #7
 80028ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d117      	bne.n	8002932 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	4313      	orrs	r3, r2
 800290a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00e      	beq.n	8002932 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 fa6f 	bl	8002df8 <DMA_CheckFifoParam>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d008      	beq.n	8002932 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2240      	movs	r2, #64	@ 0x40
 8002924:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800292e:	2301      	movs	r3, #1
 8002930:	e016      	b.n	8002960 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 fa26 	bl	8002d8c <DMA_CalcBaseAndBitshift>
 8002940:	4603      	mov	r3, r0
 8002942:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002948:	223f      	movs	r2, #63	@ 0x3f
 800294a:	409a      	lsls	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	f010803f 	.word	0xf010803f

0800296c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
 8002978:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002982:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800298a:	2b01      	cmp	r3, #1
 800298c:	d101      	bne.n	8002992 <HAL_DMA_Start_IT+0x26>
 800298e:	2302      	movs	r3, #2
 8002990:	e040      	b.n	8002a14 <HAL_DMA_Start_IT+0xa8>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d12f      	bne.n	8002a06 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2202      	movs	r2, #2
 80029aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	68b9      	ldr	r1, [r7, #8]
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 f9b8 	bl	8002d30 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c4:	223f      	movs	r2, #63	@ 0x3f
 80029c6:	409a      	lsls	r2, r3
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0216 	orr.w	r2, r2, #22
 80029da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d007      	beq.n	80029f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0208 	orr.w	r2, r2, #8
 80029f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	e005      	b.n	8002a12 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3718      	adds	r7, #24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a28:	4b8e      	ldr	r3, [pc, #568]	@ (8002c64 <HAL_DMA_IRQHandler+0x248>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a8e      	ldr	r2, [pc, #568]	@ (8002c68 <HAL_DMA_IRQHandler+0x24c>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	0a9b      	lsrs	r3, r3, #10
 8002a34:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a46:	2208      	movs	r2, #8
 8002a48:	409a      	lsls	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d01a      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d013      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0204 	bic.w	r2, r2, #4
 8002a6e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a74:	2208      	movs	r2, #8
 8002a76:	409a      	lsls	r2, r3
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a80:	f043 0201 	orr.w	r2, r3, #1
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	409a      	lsls	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d012      	beq.n	8002abe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00b      	beq.n	8002abe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aaa:	2201      	movs	r2, #1
 8002aac:	409a      	lsls	r2, r3
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab6:	f043 0202 	orr.w	r2, r3, #2
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac2:	2204      	movs	r2, #4
 8002ac4:	409a      	lsls	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d012      	beq.n	8002af4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00b      	beq.n	8002af4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae0:	2204      	movs	r2, #4
 8002ae2:	409a      	lsls	r2, r3
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aec:	f043 0204 	orr.w	r2, r3, #4
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af8:	2210      	movs	r2, #16
 8002afa:	409a      	lsls	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4013      	ands	r3, r2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d043      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d03c      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b16:	2210      	movs	r2, #16
 8002b18:	409a      	lsls	r2, r3
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d018      	beq.n	8002b5e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d108      	bne.n	8002b4c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d024      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	4798      	blx	r3
 8002b4a:	e01f      	b.n	8002b8c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d01b      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	4798      	blx	r3
 8002b5c:	e016      	b.n	8002b8c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d107      	bne.n	8002b7c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0208 	bic.w	r2, r2, #8
 8002b7a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b90:	2220      	movs	r2, #32
 8002b92:	409a      	lsls	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 808f 	beq.w	8002cbc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0310 	and.w	r3, r3, #16
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 8087 	beq.w	8002cbc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b05      	cmp	r3, #5
 8002bc4:	d136      	bne.n	8002c34 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0216 	bic.w	r2, r2, #22
 8002bd4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	695a      	ldr	r2, [r3, #20]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002be4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d103      	bne.n	8002bf6 <HAL_DMA_IRQHandler+0x1da>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d007      	beq.n	8002c06 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0208 	bic.w	r2, r2, #8
 8002c04:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c0a:	223f      	movs	r2, #63	@ 0x3f
 8002c0c:	409a      	lsls	r2, r3
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d07e      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	4798      	blx	r3
        }
        return;
 8002c32:	e079      	b.n	8002d28 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d01d      	beq.n	8002c7e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10d      	bne.n	8002c6c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d031      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	4798      	blx	r3
 8002c60:	e02c      	b.n	8002cbc <HAL_DMA_IRQHandler+0x2a0>
 8002c62:	bf00      	nop
 8002c64:	2000000c 	.word	0x2000000c
 8002c68:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d023      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	4798      	blx	r3
 8002c7c:	e01e      	b.n	8002cbc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10f      	bne.n	8002cac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0210 	bic.w	r2, r2, #16
 8002c9a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d032      	beq.n	8002d2a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d022      	beq.n	8002d16 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2205      	movs	r2, #5
 8002cd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0201 	bic.w	r2, r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	3301      	adds	r3, #1
 8002cec:	60bb      	str	r3, [r7, #8]
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d307      	bcc.n	8002d04 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1f2      	bne.n	8002ce8 <HAL_DMA_IRQHandler+0x2cc>
 8002d02:	e000      	b.n	8002d06 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d04:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d005      	beq.n	8002d2a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	4798      	blx	r3
 8002d26:	e000      	b.n	8002d2a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d28:	bf00      	nop
    }
  }
}
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
 8002d3c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002d4c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	2b40      	cmp	r3, #64	@ 0x40
 8002d5c:	d108      	bne.n	8002d70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d6e:	e007      	b.n	8002d80 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	60da      	str	r2, [r3, #12]
}
 8002d80:	bf00      	nop
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	3b10      	subs	r3, #16
 8002d9c:	4a14      	ldr	r2, [pc, #80]	@ (8002df0 <DMA_CalcBaseAndBitshift+0x64>)
 8002d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002da2:	091b      	lsrs	r3, r3, #4
 8002da4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002da6:	4a13      	ldr	r2, [pc, #76]	@ (8002df4 <DMA_CalcBaseAndBitshift+0x68>)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4413      	add	r3, r2
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d909      	bls.n	8002dce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002dc2:	f023 0303 	bic.w	r3, r3, #3
 8002dc6:	1d1a      	adds	r2, r3, #4
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	659a      	str	r2, [r3, #88]	@ 0x58
 8002dcc:	e007      	b.n	8002dde <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002dd6:	f023 0303 	bic.w	r3, r3, #3
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	aaaaaaab 	.word	0xaaaaaaab
 8002df4:	080065c4 	.word	0x080065c4

08002df8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d11f      	bne.n	8002e52 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	d856      	bhi.n	8002ec6 <DMA_CheckFifoParam+0xce>
 8002e18:	a201      	add	r2, pc, #4	@ (adr r2, 8002e20 <DMA_CheckFifoParam+0x28>)
 8002e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1e:	bf00      	nop
 8002e20:	08002e31 	.word	0x08002e31
 8002e24:	08002e43 	.word	0x08002e43
 8002e28:	08002e31 	.word	0x08002e31
 8002e2c:	08002ec7 	.word	0x08002ec7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d046      	beq.n	8002eca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e40:	e043      	b.n	8002eca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e46:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e4a:	d140      	bne.n	8002ece <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e50:	e03d      	b.n	8002ece <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e5a:	d121      	bne.n	8002ea0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b03      	cmp	r3, #3
 8002e60:	d837      	bhi.n	8002ed2 <DMA_CheckFifoParam+0xda>
 8002e62:	a201      	add	r2, pc, #4	@ (adr r2, 8002e68 <DMA_CheckFifoParam+0x70>)
 8002e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e68:	08002e79 	.word	0x08002e79
 8002e6c:	08002e7f 	.word	0x08002e7f
 8002e70:	08002e79 	.word	0x08002e79
 8002e74:	08002e91 	.word	0x08002e91
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e7c:	e030      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e82:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d025      	beq.n	8002ed6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e8e:	e022      	b.n	8002ed6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e94:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e98:	d11f      	bne.n	8002eda <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e9e:	e01c      	b.n	8002eda <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d903      	bls.n	8002eae <DMA_CheckFifoParam+0xb6>
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d003      	beq.n	8002eb4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002eac:	e018      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	73fb      	strb	r3, [r7, #15]
      break;
 8002eb2:	e015      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00e      	beq.n	8002ede <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ec4:	e00b      	b.n	8002ede <DMA_CheckFifoParam+0xe6>
      break;
 8002ec6:	bf00      	nop
 8002ec8:	e00a      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8002eca:	bf00      	nop
 8002ecc:	e008      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ece:	bf00      	nop
 8002ed0:	e006      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ed2:	bf00      	nop
 8002ed4:	e004      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ed6:	bf00      	nop
 8002ed8:	e002      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002eda:	bf00      	nop
 8002edc:	e000      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ede:	bf00      	nop
    }
  } 
  
  return status; 
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop

08002ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b089      	sub	sp, #36	@ 0x24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f06:	2300      	movs	r3, #0
 8002f08:	61fb      	str	r3, [r7, #28]
 8002f0a:	e165      	b.n	80031d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	f040 8154 	bne.w	80031d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d005      	beq.n	8002f42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d130      	bne.n	8002fa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	2203      	movs	r2, #3
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43db      	mvns	r3, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4013      	ands	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f78:	2201      	movs	r2, #1
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4013      	ands	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	091b      	lsrs	r3, r3, #4
 8002f8e:	f003 0201 	and.w	r2, r3, #1
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 0303 	and.w	r3, r3, #3
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d017      	beq.n	8002fe0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	2203      	movs	r2, #3
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d123      	bne.n	8003034 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	08da      	lsrs	r2, r3, #3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3208      	adds	r2, #8
 8002ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	220f      	movs	r2, #15
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4013      	ands	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4313      	orrs	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	08da      	lsrs	r2, r3, #3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	3208      	adds	r2, #8
 800302e:	69b9      	ldr	r1, [r7, #24]
 8003030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	2203      	movs	r2, #3
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 0203 	and.w	r2, r3, #3
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4313      	orrs	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 80ae 	beq.w	80031d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	4b5d      	ldr	r3, [pc, #372]	@ (80031f0 <HAL_GPIO_Init+0x300>)
 800307c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800307e:	4a5c      	ldr	r2, [pc, #368]	@ (80031f0 <HAL_GPIO_Init+0x300>)
 8003080:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003084:	6453      	str	r3, [r2, #68]	@ 0x44
 8003086:	4b5a      	ldr	r3, [pc, #360]	@ (80031f0 <HAL_GPIO_Init+0x300>)
 8003088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800308a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003092:	4a58      	ldr	r2, [pc, #352]	@ (80031f4 <HAL_GPIO_Init+0x304>)
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	089b      	lsrs	r3, r3, #2
 8003098:	3302      	adds	r3, #2
 800309a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800309e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	220f      	movs	r2, #15
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4013      	ands	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a4f      	ldr	r2, [pc, #316]	@ (80031f8 <HAL_GPIO_Init+0x308>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d025      	beq.n	800310a <HAL_GPIO_Init+0x21a>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a4e      	ldr	r2, [pc, #312]	@ (80031fc <HAL_GPIO_Init+0x30c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d01f      	beq.n	8003106 <HAL_GPIO_Init+0x216>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a4d      	ldr	r2, [pc, #308]	@ (8003200 <HAL_GPIO_Init+0x310>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d019      	beq.n	8003102 <HAL_GPIO_Init+0x212>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a4c      	ldr	r2, [pc, #304]	@ (8003204 <HAL_GPIO_Init+0x314>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d013      	beq.n	80030fe <HAL_GPIO_Init+0x20e>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a4b      	ldr	r2, [pc, #300]	@ (8003208 <HAL_GPIO_Init+0x318>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d00d      	beq.n	80030fa <HAL_GPIO_Init+0x20a>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a4a      	ldr	r2, [pc, #296]	@ (800320c <HAL_GPIO_Init+0x31c>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d007      	beq.n	80030f6 <HAL_GPIO_Init+0x206>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a49      	ldr	r2, [pc, #292]	@ (8003210 <HAL_GPIO_Init+0x320>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d101      	bne.n	80030f2 <HAL_GPIO_Init+0x202>
 80030ee:	2306      	movs	r3, #6
 80030f0:	e00c      	b.n	800310c <HAL_GPIO_Init+0x21c>
 80030f2:	2307      	movs	r3, #7
 80030f4:	e00a      	b.n	800310c <HAL_GPIO_Init+0x21c>
 80030f6:	2305      	movs	r3, #5
 80030f8:	e008      	b.n	800310c <HAL_GPIO_Init+0x21c>
 80030fa:	2304      	movs	r3, #4
 80030fc:	e006      	b.n	800310c <HAL_GPIO_Init+0x21c>
 80030fe:	2303      	movs	r3, #3
 8003100:	e004      	b.n	800310c <HAL_GPIO_Init+0x21c>
 8003102:	2302      	movs	r3, #2
 8003104:	e002      	b.n	800310c <HAL_GPIO_Init+0x21c>
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <HAL_GPIO_Init+0x21c>
 800310a:	2300      	movs	r3, #0
 800310c:	69fa      	ldr	r2, [r7, #28]
 800310e:	f002 0203 	and.w	r2, r2, #3
 8003112:	0092      	lsls	r2, r2, #2
 8003114:	4093      	lsls	r3, r2
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	4313      	orrs	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800311c:	4935      	ldr	r1, [pc, #212]	@ (80031f4 <HAL_GPIO_Init+0x304>)
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	089b      	lsrs	r3, r3, #2
 8003122:	3302      	adds	r3, #2
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800312a:	4b3a      	ldr	r3, [pc, #232]	@ (8003214 <HAL_GPIO_Init+0x324>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	43db      	mvns	r3, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4013      	ands	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	4313      	orrs	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800314e:	4a31      	ldr	r2, [pc, #196]	@ (8003214 <HAL_GPIO_Init+0x324>)
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003154:	4b2f      	ldr	r3, [pc, #188]	@ (8003214 <HAL_GPIO_Init+0x324>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	43db      	mvns	r3, r3
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4013      	ands	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	4313      	orrs	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003178:	4a26      	ldr	r2, [pc, #152]	@ (8003214 <HAL_GPIO_Init+0x324>)
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800317e:	4b25      	ldr	r3, [pc, #148]	@ (8003214 <HAL_GPIO_Init+0x324>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	43db      	mvns	r3, r3
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4013      	ands	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	4313      	orrs	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031a2:	4a1c      	ldr	r2, [pc, #112]	@ (8003214 <HAL_GPIO_Init+0x324>)
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003214 <HAL_GPIO_Init+0x324>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	43db      	mvns	r3, r3
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	4013      	ands	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d003      	beq.n	80031cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031cc:	4a11      	ldr	r2, [pc, #68]	@ (8003214 <HAL_GPIO_Init+0x324>)
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	3301      	adds	r3, #1
 80031d6:	61fb      	str	r3, [r7, #28]
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	2b0f      	cmp	r3, #15
 80031dc:	f67f ae96 	bls.w	8002f0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031e0:	bf00      	nop
 80031e2:	bf00      	nop
 80031e4:	3724      	adds	r7, #36	@ 0x24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	40023800 	.word	0x40023800
 80031f4:	40013800 	.word	0x40013800
 80031f8:	40020000 	.word	0x40020000
 80031fc:	40020400 	.word	0x40020400
 8003200:	40020800 	.word	0x40020800
 8003204:	40020c00 	.word	0x40020c00
 8003208:	40021000 	.word	0x40021000
 800320c:	40021400 	.word	0x40021400
 8003210:	40021800 	.word	0x40021800
 8003214:	40013c00 	.word	0x40013c00

08003218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	460b      	mov	r3, r1
 8003222:	807b      	strh	r3, [r7, #2]
 8003224:	4613      	mov	r3, r2
 8003226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003228:	787b      	ldrb	r3, [r7, #1]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800322e:	887a      	ldrh	r2, [r7, #2]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003234:	e003      	b.n	800323e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003236:	887b      	ldrh	r3, [r7, #2]
 8003238:	041a      	lsls	r2, r3, #16
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	619a      	str	r2, [r3, #24]
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
	...

0800324c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003252:	2300      	movs	r3, #0
 8003254:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003256:	2300      	movs	r3, #0
 8003258:	603b      	str	r3, [r7, #0]
 800325a:	4b20      	ldr	r3, [pc, #128]	@ (80032dc <HAL_PWREx_EnableOverDrive+0x90>)
 800325c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325e:	4a1f      	ldr	r2, [pc, #124]	@ (80032dc <HAL_PWREx_EnableOverDrive+0x90>)
 8003260:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003264:	6413      	str	r3, [r2, #64]	@ 0x40
 8003266:	4b1d      	ldr	r3, [pc, #116]	@ (80032dc <HAL_PWREx_EnableOverDrive+0x90>)
 8003268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800326e:	603b      	str	r3, [r7, #0]
 8003270:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003272:	4b1b      	ldr	r3, [pc, #108]	@ (80032e0 <HAL_PWREx_EnableOverDrive+0x94>)
 8003274:	2201      	movs	r2, #1
 8003276:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003278:	f7ff f988 	bl	800258c <HAL_GetTick>
 800327c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800327e:	e009      	b.n	8003294 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003280:	f7ff f984 	bl	800258c <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800328e:	d901      	bls.n	8003294 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e01f      	b.n	80032d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003294:	4b13      	ldr	r3, [pc, #76]	@ (80032e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800329c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032a0:	d1ee      	bne.n	8003280 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80032a2:	4b11      	ldr	r3, [pc, #68]	@ (80032e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032a4:	2201      	movs	r2, #1
 80032a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032a8:	f7ff f970 	bl	800258c <HAL_GetTick>
 80032ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032ae:	e009      	b.n	80032c4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032b0:	f7ff f96c 	bl	800258c <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80032be:	d901      	bls.n	80032c4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e007      	b.n	80032d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032c4:	4b07      	ldr	r3, [pc, #28]	@ (80032e4 <HAL_PWREx_EnableOverDrive+0x98>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80032d0:	d1ee      	bne.n	80032b0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40023800 	.word	0x40023800
 80032e0:	420e0040 	.word	0x420e0040
 80032e4:	40007000 	.word	0x40007000
 80032e8:	420e0044 	.word	0x420e0044

080032ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e0cc      	b.n	800349a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003300:	4b68      	ldr	r3, [pc, #416]	@ (80034a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 030f 	and.w	r3, r3, #15
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d90c      	bls.n	8003328 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330e:	4b65      	ldr	r3, [pc, #404]	@ (80034a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003316:	4b63      	ldr	r3, [pc, #396]	@ (80034a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d001      	beq.n	8003328 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e0b8      	b.n	800349a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d020      	beq.n	8003376 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b00      	cmp	r3, #0
 800333e:	d005      	beq.n	800334c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003340:	4b59      	ldr	r3, [pc, #356]	@ (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	4a58      	ldr	r2, [pc, #352]	@ (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003346:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800334a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0308 	and.w	r3, r3, #8
 8003354:	2b00      	cmp	r3, #0
 8003356:	d005      	beq.n	8003364 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003358:	4b53      	ldr	r3, [pc, #332]	@ (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	4a52      	ldr	r2, [pc, #328]	@ (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 800335e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003362:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003364:	4b50      	ldr	r3, [pc, #320]	@ (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	494d      	ldr	r1, [pc, #308]	@ (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003372:	4313      	orrs	r3, r2
 8003374:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d044      	beq.n	800340c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d107      	bne.n	800339a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800338a:	4b47      	ldr	r3, [pc, #284]	@ (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d119      	bne.n	80033ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e07f      	b.n	800349a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d003      	beq.n	80033aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033a6:	2b03      	cmp	r3, #3
 80033a8:	d107      	bne.n	80033ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033aa:	4b3f      	ldr	r3, [pc, #252]	@ (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d109      	bne.n	80033ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e06f      	b.n	800349a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ba:	4b3b      	ldr	r3, [pc, #236]	@ (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e067      	b.n	800349a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ca:	4b37      	ldr	r3, [pc, #220]	@ (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f023 0203 	bic.w	r2, r3, #3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	4934      	ldr	r1, [pc, #208]	@ (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033dc:	f7ff f8d6 	bl	800258c <HAL_GetTick>
 80033e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e2:	e00a      	b.n	80033fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e4:	f7ff f8d2 	bl	800258c <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e04f      	b.n	800349a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033fa:	4b2b      	ldr	r3, [pc, #172]	@ (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 020c 	and.w	r2, r3, #12
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	429a      	cmp	r2, r3
 800340a:	d1eb      	bne.n	80033e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800340c:	4b25      	ldr	r3, [pc, #148]	@ (80034a4 <HAL_RCC_ClockConfig+0x1b8>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 030f 	and.w	r3, r3, #15
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	429a      	cmp	r2, r3
 8003418:	d20c      	bcs.n	8003434 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341a:	4b22      	ldr	r3, [pc, #136]	@ (80034a4 <HAL_RCC_ClockConfig+0x1b8>)
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	b2d2      	uxtb	r2, r2
 8003420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003422:	4b20      	ldr	r3, [pc, #128]	@ (80034a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 030f 	and.w	r3, r3, #15
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	429a      	cmp	r2, r3
 800342e:	d001      	beq.n	8003434 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e032      	b.n	800349a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0304 	and.w	r3, r3, #4
 800343c:	2b00      	cmp	r3, #0
 800343e:	d008      	beq.n	8003452 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003440:	4b19      	ldr	r3, [pc, #100]	@ (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	4916      	ldr	r1, [pc, #88]	@ (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 800344e:	4313      	orrs	r3, r2
 8003450:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	2b00      	cmp	r3, #0
 800345c:	d009      	beq.n	8003472 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800345e:	4b12      	ldr	r3, [pc, #72]	@ (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	490e      	ldr	r1, [pc, #56]	@ (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 800346e:	4313      	orrs	r3, r2
 8003470:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003472:	f000 f855 	bl	8003520 <HAL_RCC_GetSysClockFreq>
 8003476:	4602      	mov	r2, r0
 8003478:	4b0b      	ldr	r3, [pc, #44]	@ (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	091b      	lsrs	r3, r3, #4
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	490a      	ldr	r1, [pc, #40]	@ (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003484:	5ccb      	ldrb	r3, [r1, r3]
 8003486:	fa22 f303 	lsr.w	r3, r2, r3
 800348a:	4a09      	ldr	r2, [pc, #36]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800348c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800348e:	4b09      	ldr	r3, [pc, #36]	@ (80034b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff f836 	bl	8002504 <HAL_InitTick>

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	40023c00 	.word	0x40023c00
 80034a8:	40023800 	.word	0x40023800
 80034ac:	080065ac 	.word	0x080065ac
 80034b0:	2000000c 	.word	0x2000000c
 80034b4:	20000010 	.word	0x20000010

080034b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034bc:	4b03      	ldr	r3, [pc, #12]	@ (80034cc <HAL_RCC_GetHCLKFreq+0x14>)
 80034be:	681b      	ldr	r3, [r3, #0]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	2000000c 	.word	0x2000000c

080034d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034d4:	f7ff fff0 	bl	80034b8 <HAL_RCC_GetHCLKFreq>
 80034d8:	4602      	mov	r2, r0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	0a9b      	lsrs	r3, r3, #10
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	4903      	ldr	r1, [pc, #12]	@ (80034f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034e6:	5ccb      	ldrb	r3, [r1, r3]
 80034e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40023800 	.word	0x40023800
 80034f4:	080065bc 	.word	0x080065bc

080034f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034fc:	f7ff ffdc 	bl	80034b8 <HAL_RCC_GetHCLKFreq>
 8003500:	4602      	mov	r2, r0
 8003502:	4b05      	ldr	r3, [pc, #20]	@ (8003518 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	0b5b      	lsrs	r3, r3, #13
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	4903      	ldr	r1, [pc, #12]	@ (800351c <HAL_RCC_GetPCLK2Freq+0x24>)
 800350e:	5ccb      	ldrb	r3, [r1, r3]
 8003510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003514:	4618      	mov	r0, r3
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40023800 	.word	0x40023800
 800351c:	080065bc 	.word	0x080065bc

08003520 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003524:	b0ae      	sub	sp, #184	@ 0xb8
 8003526:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800352e:	2300      	movs	r3, #0
 8003530:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003534:	2300      	movs	r3, #0
 8003536:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800353a:	2300      	movs	r3, #0
 800353c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003546:	4bcb      	ldr	r3, [pc, #812]	@ (8003874 <HAL_RCC_GetSysClockFreq+0x354>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 030c 	and.w	r3, r3, #12
 800354e:	2b0c      	cmp	r3, #12
 8003550:	f200 8206 	bhi.w	8003960 <HAL_RCC_GetSysClockFreq+0x440>
 8003554:	a201      	add	r2, pc, #4	@ (adr r2, 800355c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355a:	bf00      	nop
 800355c:	08003591 	.word	0x08003591
 8003560:	08003961 	.word	0x08003961
 8003564:	08003961 	.word	0x08003961
 8003568:	08003961 	.word	0x08003961
 800356c:	08003599 	.word	0x08003599
 8003570:	08003961 	.word	0x08003961
 8003574:	08003961 	.word	0x08003961
 8003578:	08003961 	.word	0x08003961
 800357c:	080035a1 	.word	0x080035a1
 8003580:	08003961 	.word	0x08003961
 8003584:	08003961 	.word	0x08003961
 8003588:	08003961 	.word	0x08003961
 800358c:	08003791 	.word	0x08003791
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003590:	4bb9      	ldr	r3, [pc, #740]	@ (8003878 <HAL_RCC_GetSysClockFreq+0x358>)
 8003592:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8003596:	e1e7      	b.n	8003968 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003598:	4bb8      	ldr	r3, [pc, #736]	@ (800387c <HAL_RCC_GetSysClockFreq+0x35c>)
 800359a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800359e:	e1e3      	b.n	8003968 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035a0:	4bb4      	ldr	r3, [pc, #720]	@ (8003874 <HAL_RCC_GetSysClockFreq+0x354>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035ac:	4bb1      	ldr	r3, [pc, #708]	@ (8003874 <HAL_RCC_GetSysClockFreq+0x354>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d071      	beq.n	800369c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035b8:	4bae      	ldr	r3, [pc, #696]	@ (8003874 <HAL_RCC_GetSysClockFreq+0x354>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	099b      	lsrs	r3, r3, #6
 80035be:	2200      	movs	r2, #0
 80035c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80035c4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80035c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80035d4:	2300      	movs	r3, #0
 80035d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80035da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80035de:	4622      	mov	r2, r4
 80035e0:	462b      	mov	r3, r5
 80035e2:	f04f 0000 	mov.w	r0, #0
 80035e6:	f04f 0100 	mov.w	r1, #0
 80035ea:	0159      	lsls	r1, r3, #5
 80035ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035f0:	0150      	lsls	r0, r2, #5
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	4621      	mov	r1, r4
 80035f8:	1a51      	subs	r1, r2, r1
 80035fa:	6439      	str	r1, [r7, #64]	@ 0x40
 80035fc:	4629      	mov	r1, r5
 80035fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003602:	647b      	str	r3, [r7, #68]	@ 0x44
 8003604:	f04f 0200 	mov.w	r2, #0
 8003608:	f04f 0300 	mov.w	r3, #0
 800360c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003610:	4649      	mov	r1, r9
 8003612:	018b      	lsls	r3, r1, #6
 8003614:	4641      	mov	r1, r8
 8003616:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800361a:	4641      	mov	r1, r8
 800361c:	018a      	lsls	r2, r1, #6
 800361e:	4641      	mov	r1, r8
 8003620:	1a51      	subs	r1, r2, r1
 8003622:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003624:	4649      	mov	r1, r9
 8003626:	eb63 0301 	sbc.w	r3, r3, r1
 800362a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800362c:	f04f 0200 	mov.w	r2, #0
 8003630:	f04f 0300 	mov.w	r3, #0
 8003634:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003638:	4649      	mov	r1, r9
 800363a:	00cb      	lsls	r3, r1, #3
 800363c:	4641      	mov	r1, r8
 800363e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003642:	4641      	mov	r1, r8
 8003644:	00ca      	lsls	r2, r1, #3
 8003646:	4610      	mov	r0, r2
 8003648:	4619      	mov	r1, r3
 800364a:	4603      	mov	r3, r0
 800364c:	4622      	mov	r2, r4
 800364e:	189b      	adds	r3, r3, r2
 8003650:	633b      	str	r3, [r7, #48]	@ 0x30
 8003652:	462b      	mov	r3, r5
 8003654:	460a      	mov	r2, r1
 8003656:	eb42 0303 	adc.w	r3, r2, r3
 800365a:	637b      	str	r3, [r7, #52]	@ 0x34
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	f04f 0300 	mov.w	r3, #0
 8003664:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003668:	4629      	mov	r1, r5
 800366a:	024b      	lsls	r3, r1, #9
 800366c:	4621      	mov	r1, r4
 800366e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003672:	4621      	mov	r1, r4
 8003674:	024a      	lsls	r2, r1, #9
 8003676:	4610      	mov	r0, r2
 8003678:	4619      	mov	r1, r3
 800367a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800367e:	2200      	movs	r2, #0
 8003680:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003684:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003688:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800368c:	f7fd fa3a 	bl	8000b04 <__aeabi_uldivmod>
 8003690:	4602      	mov	r2, r0
 8003692:	460b      	mov	r3, r1
 8003694:	4613      	mov	r3, r2
 8003696:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800369a:	e067      	b.n	800376c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800369c:	4b75      	ldr	r3, [pc, #468]	@ (8003874 <HAL_RCC_GetSysClockFreq+0x354>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	099b      	lsrs	r3, r3, #6
 80036a2:	2200      	movs	r2, #0
 80036a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80036a8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80036ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80036b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80036b6:	2300      	movs	r3, #0
 80036b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80036ba:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80036be:	4622      	mov	r2, r4
 80036c0:	462b      	mov	r3, r5
 80036c2:	f04f 0000 	mov.w	r0, #0
 80036c6:	f04f 0100 	mov.w	r1, #0
 80036ca:	0159      	lsls	r1, r3, #5
 80036cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036d0:	0150      	lsls	r0, r2, #5
 80036d2:	4602      	mov	r2, r0
 80036d4:	460b      	mov	r3, r1
 80036d6:	4621      	mov	r1, r4
 80036d8:	1a51      	subs	r1, r2, r1
 80036da:	62b9      	str	r1, [r7, #40]	@ 0x28
 80036dc:	4629      	mov	r1, r5
 80036de:	eb63 0301 	sbc.w	r3, r3, r1
 80036e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036e4:	f04f 0200 	mov.w	r2, #0
 80036e8:	f04f 0300 	mov.w	r3, #0
 80036ec:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80036f0:	4649      	mov	r1, r9
 80036f2:	018b      	lsls	r3, r1, #6
 80036f4:	4641      	mov	r1, r8
 80036f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036fa:	4641      	mov	r1, r8
 80036fc:	018a      	lsls	r2, r1, #6
 80036fe:	4641      	mov	r1, r8
 8003700:	ebb2 0a01 	subs.w	sl, r2, r1
 8003704:	4649      	mov	r1, r9
 8003706:	eb63 0b01 	sbc.w	fp, r3, r1
 800370a:	f04f 0200 	mov.w	r2, #0
 800370e:	f04f 0300 	mov.w	r3, #0
 8003712:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003716:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800371a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800371e:	4692      	mov	sl, r2
 8003720:	469b      	mov	fp, r3
 8003722:	4623      	mov	r3, r4
 8003724:	eb1a 0303 	adds.w	r3, sl, r3
 8003728:	623b      	str	r3, [r7, #32]
 800372a:	462b      	mov	r3, r5
 800372c:	eb4b 0303 	adc.w	r3, fp, r3
 8003730:	627b      	str	r3, [r7, #36]	@ 0x24
 8003732:	f04f 0200 	mov.w	r2, #0
 8003736:	f04f 0300 	mov.w	r3, #0
 800373a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800373e:	4629      	mov	r1, r5
 8003740:	028b      	lsls	r3, r1, #10
 8003742:	4621      	mov	r1, r4
 8003744:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003748:	4621      	mov	r1, r4
 800374a:	028a      	lsls	r2, r1, #10
 800374c:	4610      	mov	r0, r2
 800374e:	4619      	mov	r1, r3
 8003750:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003754:	2200      	movs	r2, #0
 8003756:	673b      	str	r3, [r7, #112]	@ 0x70
 8003758:	677a      	str	r2, [r7, #116]	@ 0x74
 800375a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800375e:	f7fd f9d1 	bl	8000b04 <__aeabi_uldivmod>
 8003762:	4602      	mov	r2, r0
 8003764:	460b      	mov	r3, r1
 8003766:	4613      	mov	r3, r2
 8003768:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800376c:	4b41      	ldr	r3, [pc, #260]	@ (8003874 <HAL_RCC_GetSysClockFreq+0x354>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	0c1b      	lsrs	r3, r3, #16
 8003772:	f003 0303 	and.w	r3, r3, #3
 8003776:	3301      	adds	r3, #1
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800377e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003782:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003786:	fbb2 f3f3 	udiv	r3, r2, r3
 800378a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800378e:	e0eb      	b.n	8003968 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003790:	4b38      	ldr	r3, [pc, #224]	@ (8003874 <HAL_RCC_GetSysClockFreq+0x354>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003798:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800379c:	4b35      	ldr	r3, [pc, #212]	@ (8003874 <HAL_RCC_GetSysClockFreq+0x354>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d06b      	beq.n	8003880 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a8:	4b32      	ldr	r3, [pc, #200]	@ (8003874 <HAL_RCC_GetSysClockFreq+0x354>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	099b      	lsrs	r3, r3, #6
 80037ae:	2200      	movs	r2, #0
 80037b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80037b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80037bc:	2300      	movs	r3, #0
 80037be:	667b      	str	r3, [r7, #100]	@ 0x64
 80037c0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80037c4:	4622      	mov	r2, r4
 80037c6:	462b      	mov	r3, r5
 80037c8:	f04f 0000 	mov.w	r0, #0
 80037cc:	f04f 0100 	mov.w	r1, #0
 80037d0:	0159      	lsls	r1, r3, #5
 80037d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037d6:	0150      	lsls	r0, r2, #5
 80037d8:	4602      	mov	r2, r0
 80037da:	460b      	mov	r3, r1
 80037dc:	4621      	mov	r1, r4
 80037de:	1a51      	subs	r1, r2, r1
 80037e0:	61b9      	str	r1, [r7, #24]
 80037e2:	4629      	mov	r1, r5
 80037e4:	eb63 0301 	sbc.w	r3, r3, r1
 80037e8:	61fb      	str	r3, [r7, #28]
 80037ea:	f04f 0200 	mov.w	r2, #0
 80037ee:	f04f 0300 	mov.w	r3, #0
 80037f2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80037f6:	4659      	mov	r1, fp
 80037f8:	018b      	lsls	r3, r1, #6
 80037fa:	4651      	mov	r1, sl
 80037fc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003800:	4651      	mov	r1, sl
 8003802:	018a      	lsls	r2, r1, #6
 8003804:	4651      	mov	r1, sl
 8003806:	ebb2 0801 	subs.w	r8, r2, r1
 800380a:	4659      	mov	r1, fp
 800380c:	eb63 0901 	sbc.w	r9, r3, r1
 8003810:	f04f 0200 	mov.w	r2, #0
 8003814:	f04f 0300 	mov.w	r3, #0
 8003818:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800381c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003820:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003824:	4690      	mov	r8, r2
 8003826:	4699      	mov	r9, r3
 8003828:	4623      	mov	r3, r4
 800382a:	eb18 0303 	adds.w	r3, r8, r3
 800382e:	613b      	str	r3, [r7, #16]
 8003830:	462b      	mov	r3, r5
 8003832:	eb49 0303 	adc.w	r3, r9, r3
 8003836:	617b      	str	r3, [r7, #20]
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	f04f 0300 	mov.w	r3, #0
 8003840:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003844:	4629      	mov	r1, r5
 8003846:	024b      	lsls	r3, r1, #9
 8003848:	4621      	mov	r1, r4
 800384a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800384e:	4621      	mov	r1, r4
 8003850:	024a      	lsls	r2, r1, #9
 8003852:	4610      	mov	r0, r2
 8003854:	4619      	mov	r1, r3
 8003856:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800385a:	2200      	movs	r2, #0
 800385c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800385e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003860:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003864:	f7fd f94e 	bl	8000b04 <__aeabi_uldivmod>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4613      	mov	r3, r2
 800386e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003872:	e065      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x420>
 8003874:	40023800 	.word	0x40023800
 8003878:	00f42400 	.word	0x00f42400
 800387c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003880:	4b3d      	ldr	r3, [pc, #244]	@ (8003978 <HAL_RCC_GetSysClockFreq+0x458>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	099b      	lsrs	r3, r3, #6
 8003886:	2200      	movs	r2, #0
 8003888:	4618      	mov	r0, r3
 800388a:	4611      	mov	r1, r2
 800388c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003890:	653b      	str	r3, [r7, #80]	@ 0x50
 8003892:	2300      	movs	r3, #0
 8003894:	657b      	str	r3, [r7, #84]	@ 0x54
 8003896:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800389a:	4642      	mov	r2, r8
 800389c:	464b      	mov	r3, r9
 800389e:	f04f 0000 	mov.w	r0, #0
 80038a2:	f04f 0100 	mov.w	r1, #0
 80038a6:	0159      	lsls	r1, r3, #5
 80038a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038ac:	0150      	lsls	r0, r2, #5
 80038ae:	4602      	mov	r2, r0
 80038b0:	460b      	mov	r3, r1
 80038b2:	4641      	mov	r1, r8
 80038b4:	1a51      	subs	r1, r2, r1
 80038b6:	60b9      	str	r1, [r7, #8]
 80038b8:	4649      	mov	r1, r9
 80038ba:	eb63 0301 	sbc.w	r3, r3, r1
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	f04f 0200 	mov.w	r2, #0
 80038c4:	f04f 0300 	mov.w	r3, #0
 80038c8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80038cc:	4659      	mov	r1, fp
 80038ce:	018b      	lsls	r3, r1, #6
 80038d0:	4651      	mov	r1, sl
 80038d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038d6:	4651      	mov	r1, sl
 80038d8:	018a      	lsls	r2, r1, #6
 80038da:	4651      	mov	r1, sl
 80038dc:	1a54      	subs	r4, r2, r1
 80038de:	4659      	mov	r1, fp
 80038e0:	eb63 0501 	sbc.w	r5, r3, r1
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	f04f 0300 	mov.w	r3, #0
 80038ec:	00eb      	lsls	r3, r5, #3
 80038ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038f2:	00e2      	lsls	r2, r4, #3
 80038f4:	4614      	mov	r4, r2
 80038f6:	461d      	mov	r5, r3
 80038f8:	4643      	mov	r3, r8
 80038fa:	18e3      	adds	r3, r4, r3
 80038fc:	603b      	str	r3, [r7, #0]
 80038fe:	464b      	mov	r3, r9
 8003900:	eb45 0303 	adc.w	r3, r5, r3
 8003904:	607b      	str	r3, [r7, #4]
 8003906:	f04f 0200 	mov.w	r2, #0
 800390a:	f04f 0300 	mov.w	r3, #0
 800390e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003912:	4629      	mov	r1, r5
 8003914:	028b      	lsls	r3, r1, #10
 8003916:	4621      	mov	r1, r4
 8003918:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800391c:	4621      	mov	r1, r4
 800391e:	028a      	lsls	r2, r1, #10
 8003920:	4610      	mov	r0, r2
 8003922:	4619      	mov	r1, r3
 8003924:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003928:	2200      	movs	r2, #0
 800392a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800392c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800392e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003932:	f7fd f8e7 	bl	8000b04 <__aeabi_uldivmod>
 8003936:	4602      	mov	r2, r0
 8003938:	460b      	mov	r3, r1
 800393a:	4613      	mov	r3, r2
 800393c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003940:	4b0d      	ldr	r3, [pc, #52]	@ (8003978 <HAL_RCC_GetSysClockFreq+0x458>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	0f1b      	lsrs	r3, r3, #28
 8003946:	f003 0307 	and.w	r3, r3, #7
 800394a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800394e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003952:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003956:	fbb2 f3f3 	udiv	r3, r2, r3
 800395a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800395e:	e003      	b.n	8003968 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003960:	4b06      	ldr	r3, [pc, #24]	@ (800397c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003962:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003966:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003968:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800396c:	4618      	mov	r0, r3
 800396e:	37b8      	adds	r7, #184	@ 0xb8
 8003970:	46bd      	mov	sp, r7
 8003972:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003976:	bf00      	nop
 8003978:	40023800 	.word	0x40023800
 800397c:	00f42400 	.word	0x00f42400

08003980 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e28d      	b.n	8003eae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 8083 	beq.w	8003aa6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80039a0:	4b94      	ldr	r3, [pc, #592]	@ (8003bf4 <HAL_RCC_OscConfig+0x274>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f003 030c 	and.w	r3, r3, #12
 80039a8:	2b04      	cmp	r3, #4
 80039aa:	d019      	beq.n	80039e0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80039ac:	4b91      	ldr	r3, [pc, #580]	@ (8003bf4 <HAL_RCC_OscConfig+0x274>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d106      	bne.n	80039c6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80039b8:	4b8e      	ldr	r3, [pc, #568]	@ (8003bf4 <HAL_RCC_OscConfig+0x274>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039c4:	d00c      	beq.n	80039e0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039c6:	4b8b      	ldr	r3, [pc, #556]	@ (8003bf4 <HAL_RCC_OscConfig+0x274>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80039ce:	2b0c      	cmp	r3, #12
 80039d0:	d112      	bne.n	80039f8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039d2:	4b88      	ldr	r3, [pc, #544]	@ (8003bf4 <HAL_RCC_OscConfig+0x274>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039de:	d10b      	bne.n	80039f8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e0:	4b84      	ldr	r3, [pc, #528]	@ (8003bf4 <HAL_RCC_OscConfig+0x274>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d05b      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x124>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d157      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e25a      	b.n	8003eae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a00:	d106      	bne.n	8003a10 <HAL_RCC_OscConfig+0x90>
 8003a02:	4b7c      	ldr	r3, [pc, #496]	@ (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a7b      	ldr	r2, [pc, #492]	@ (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003a08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	e01d      	b.n	8003a4c <HAL_RCC_OscConfig+0xcc>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a18:	d10c      	bne.n	8003a34 <HAL_RCC_OscConfig+0xb4>
 8003a1a:	4b76      	ldr	r3, [pc, #472]	@ (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a75      	ldr	r2, [pc, #468]	@ (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003a20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	4b73      	ldr	r3, [pc, #460]	@ (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a72      	ldr	r2, [pc, #456]	@ (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003a2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	e00b      	b.n	8003a4c <HAL_RCC_OscConfig+0xcc>
 8003a34:	4b6f      	ldr	r3, [pc, #444]	@ (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a6e      	ldr	r2, [pc, #440]	@ (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003a3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a3e:	6013      	str	r3, [r2, #0]
 8003a40:	4b6c      	ldr	r3, [pc, #432]	@ (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a6b      	ldr	r2, [pc, #428]	@ (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003a46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d013      	beq.n	8003a7c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a54:	f7fe fd9a 	bl	800258c <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a5c:	f7fe fd96 	bl	800258c <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b64      	cmp	r3, #100	@ 0x64
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e21f      	b.n	8003eae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6e:	4b61      	ldr	r3, [pc, #388]	@ (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0f0      	beq.n	8003a5c <HAL_RCC_OscConfig+0xdc>
 8003a7a:	e014      	b.n	8003aa6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7c:	f7fe fd86 	bl	800258c <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a84:	f7fe fd82 	bl	800258c <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b64      	cmp	r3, #100	@ 0x64
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e20b      	b.n	8003eae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a96:	4b57      	ldr	r3, [pc, #348]	@ (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1f0      	bne.n	8003a84 <HAL_RCC_OscConfig+0x104>
 8003aa2:	e000      	b.n	8003aa6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d06f      	beq.n	8003b92 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003ab2:	4b50      	ldr	r3, [pc, #320]	@ (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 030c 	and.w	r3, r3, #12
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d017      	beq.n	8003aee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003abe:	4b4d      	ldr	r3, [pc, #308]	@ (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003ac6:	2b08      	cmp	r3, #8
 8003ac8:	d105      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003aca:	4b4a      	ldr	r3, [pc, #296]	@ (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00b      	beq.n	8003aee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ad6:	4b47      	ldr	r3, [pc, #284]	@ (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ade:	2b0c      	cmp	r3, #12
 8003ae0:	d11c      	bne.n	8003b1c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ae2:	4b44      	ldr	r3, [pc, #272]	@ (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d116      	bne.n	8003b1c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aee:	4b41      	ldr	r3, [pc, #260]	@ (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d005      	beq.n	8003b06 <HAL_RCC_OscConfig+0x186>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d001      	beq.n	8003b06 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e1d3      	b.n	8003eae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b06:	4b3b      	ldr	r3, [pc, #236]	@ (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	4937      	ldr	r1, [pc, #220]	@ (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b1a:	e03a      	b.n	8003b92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d020      	beq.n	8003b66 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b24:	4b34      	ldr	r3, [pc, #208]	@ (8003bf8 <HAL_RCC_OscConfig+0x278>)
 8003b26:	2201      	movs	r2, #1
 8003b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2a:	f7fe fd2f 	bl	800258c <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b30:	e008      	b.n	8003b44 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b32:	f7fe fd2b 	bl	800258c <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e1b4      	b.n	8003eae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b44:	4b2b      	ldr	r3, [pc, #172]	@ (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0f0      	beq.n	8003b32 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b50:	4b28      	ldr	r3, [pc, #160]	@ (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	4925      	ldr	r1, [pc, #148]	@ (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	600b      	str	r3, [r1, #0]
 8003b64:	e015      	b.n	8003b92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b66:	4b24      	ldr	r3, [pc, #144]	@ (8003bf8 <HAL_RCC_OscConfig+0x278>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6c:	f7fe fd0e 	bl	800258c <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b74:	f7fe fd0a 	bl	800258c <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e193      	b.n	8003eae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b86:	4b1b      	ldr	r3, [pc, #108]	@ (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1f0      	bne.n	8003b74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0308 	and.w	r3, r3, #8
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d036      	beq.n	8003c0c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d016      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ba6:	4b15      	ldr	r3, [pc, #84]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003ba8:	2201      	movs	r2, #1
 8003baa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bac:	f7fe fcee 	bl	800258c <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bb4:	f7fe fcea 	bl	800258c <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e173      	b.n	8003eae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003bc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0f0      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x234>
 8003bd2:	e01b      	b.n	8003c0c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bd4:	4b09      	ldr	r3, [pc, #36]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bda:	f7fe fcd7 	bl	800258c <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be0:	e00e      	b.n	8003c00 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003be2:	f7fe fcd3 	bl	800258c <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d907      	bls.n	8003c00 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e15c      	b.n	8003eae <HAL_RCC_OscConfig+0x52e>
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	42470000 	.word	0x42470000
 8003bfc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c00:	4b8a      	ldr	r3, [pc, #552]	@ (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003c02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1ea      	bne.n	8003be2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 8097 	beq.w	8003d48 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c1e:	4b83      	ldr	r3, [pc, #524]	@ (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10f      	bne.n	8003c4a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60bb      	str	r3, [r7, #8]
 8003c2e:	4b7f      	ldr	r3, [pc, #508]	@ (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c32:	4a7e      	ldr	r2, [pc, #504]	@ (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003c34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c38:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c3a:	4b7c      	ldr	r3, [pc, #496]	@ (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c42:	60bb      	str	r3, [r7, #8]
 8003c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c46:	2301      	movs	r3, #1
 8003c48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c4a:	4b79      	ldr	r3, [pc, #484]	@ (8003e30 <HAL_RCC_OscConfig+0x4b0>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d118      	bne.n	8003c88 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c56:	4b76      	ldr	r3, [pc, #472]	@ (8003e30 <HAL_RCC_OscConfig+0x4b0>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a75      	ldr	r2, [pc, #468]	@ (8003e30 <HAL_RCC_OscConfig+0x4b0>)
 8003c5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c62:	f7fe fc93 	bl	800258c <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c68:	e008      	b.n	8003c7c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c6a:	f7fe fc8f 	bl	800258c <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e118      	b.n	8003eae <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c7c:	4b6c      	ldr	r3, [pc, #432]	@ (8003e30 <HAL_RCC_OscConfig+0x4b0>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0f0      	beq.n	8003c6a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d106      	bne.n	8003c9e <HAL_RCC_OscConfig+0x31e>
 8003c90:	4b66      	ldr	r3, [pc, #408]	@ (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c94:	4a65      	ldr	r2, [pc, #404]	@ (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003c96:	f043 0301 	orr.w	r3, r3, #1
 8003c9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c9c:	e01c      	b.n	8003cd8 <HAL_RCC_OscConfig+0x358>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	2b05      	cmp	r3, #5
 8003ca4:	d10c      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x340>
 8003ca6:	4b61      	ldr	r3, [pc, #388]	@ (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003caa:	4a60      	ldr	r2, [pc, #384]	@ (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003cac:	f043 0304 	orr.w	r3, r3, #4
 8003cb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cb2:	4b5e      	ldr	r3, [pc, #376]	@ (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb6:	4a5d      	ldr	r2, [pc, #372]	@ (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003cb8:	f043 0301 	orr.w	r3, r3, #1
 8003cbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cbe:	e00b      	b.n	8003cd8 <HAL_RCC_OscConfig+0x358>
 8003cc0:	4b5a      	ldr	r3, [pc, #360]	@ (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc4:	4a59      	ldr	r2, [pc, #356]	@ (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003cc6:	f023 0301 	bic.w	r3, r3, #1
 8003cca:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ccc:	4b57      	ldr	r3, [pc, #348]	@ (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003cce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cd0:	4a56      	ldr	r2, [pc, #344]	@ (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003cd2:	f023 0304 	bic.w	r3, r3, #4
 8003cd6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d015      	beq.n	8003d0c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce0:	f7fe fc54 	bl	800258c <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce6:	e00a      	b.n	8003cfe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ce8:	f7fe fc50 	bl	800258c <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e0d7      	b.n	8003eae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cfe:	4b4b      	ldr	r3, [pc, #300]	@ (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0ee      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x368>
 8003d0a:	e014      	b.n	8003d36 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0c:	f7fe fc3e 	bl	800258c <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d12:	e00a      	b.n	8003d2a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d14:	f7fe fc3a 	bl	800258c <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e0c1      	b.n	8003eae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d2a:	4b40      	ldr	r3, [pc, #256]	@ (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1ee      	bne.n	8003d14 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d36:	7dfb      	ldrb	r3, [r7, #23]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d105      	bne.n	8003d48 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d3c:	4b3b      	ldr	r3, [pc, #236]	@ (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d40:	4a3a      	ldr	r2, [pc, #232]	@ (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003d42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d46:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80ad 	beq.w	8003eac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d52:	4b36      	ldr	r3, [pc, #216]	@ (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f003 030c 	and.w	r3, r3, #12
 8003d5a:	2b08      	cmp	r3, #8
 8003d5c:	d060      	beq.n	8003e20 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d145      	bne.n	8003df2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d66:	4b33      	ldr	r3, [pc, #204]	@ (8003e34 <HAL_RCC_OscConfig+0x4b4>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6c:	f7fe fc0e 	bl	800258c <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d74:	f7fe fc0a 	bl	800258c <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e093      	b.n	8003eae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d86:	4b29      	ldr	r3, [pc, #164]	@ (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1f0      	bne.n	8003d74 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69da      	ldr	r2, [r3, #28]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da0:	019b      	lsls	r3, r3, #6
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da8:	085b      	lsrs	r3, r3, #1
 8003daa:	3b01      	subs	r3, #1
 8003dac:	041b      	lsls	r3, r3, #16
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db4:	061b      	lsls	r3, r3, #24
 8003db6:	431a      	orrs	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dbc:	071b      	lsls	r3, r3, #28
 8003dbe:	491b      	ldr	r1, [pc, #108]	@ (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dc4:	4b1b      	ldr	r3, [pc, #108]	@ (8003e34 <HAL_RCC_OscConfig+0x4b4>)
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dca:	f7fe fbdf 	bl	800258c <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dd2:	f7fe fbdb 	bl	800258c <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e064      	b.n	8003eae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de4:	4b11      	ldr	r3, [pc, #68]	@ (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0f0      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x452>
 8003df0:	e05c      	b.n	8003eac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003df2:	4b10      	ldr	r3, [pc, #64]	@ (8003e34 <HAL_RCC_OscConfig+0x4b4>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df8:	f7fe fbc8 	bl	800258c <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e00:	f7fe fbc4 	bl	800258c <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e04d      	b.n	8003eae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e12:	4b06      	ldr	r3, [pc, #24]	@ (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1f0      	bne.n	8003e00 <HAL_RCC_OscConfig+0x480>
 8003e1e:	e045      	b.n	8003eac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d107      	bne.n	8003e38 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e040      	b.n	8003eae <HAL_RCC_OscConfig+0x52e>
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	40007000 	.word	0x40007000
 8003e34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e38:	4b1f      	ldr	r3, [pc, #124]	@ (8003eb8 <HAL_RCC_OscConfig+0x538>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d030      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d129      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d122      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e68:	4013      	ands	r3, r2
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d119      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e7e:	085b      	lsrs	r3, r3, #1
 8003e80:	3b01      	subs	r3, #1
 8003e82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d10f      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d107      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d001      	beq.n	8003eac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e000      	b.n	8003eae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	40023800 	.word	0x40023800

08003ebc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e07b      	b.n	8003fc6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d108      	bne.n	8003ee8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ede:	d009      	beq.n	8003ef4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	61da      	str	r2, [r3, #28]
 8003ee6:	e005      	b.n	8003ef4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d106      	bne.n	8003f14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7fe f99c 	bl	800224c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2202      	movs	r2, #2
 8003f18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f46:	431a      	orrs	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	431a      	orrs	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f64:	431a      	orrs	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f78:	ea42 0103 	orr.w	r1, r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f80:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	0c1b      	lsrs	r3, r3, #16
 8003f92:	f003 0104 	and.w	r1, r3, #4
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9a:	f003 0210 	and.w	r2, r3, #16
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	69da      	ldr	r2, [r3, #28]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fb4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b088      	sub	sp, #32
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	60f8      	str	r0, [r7, #12]
 8003fd6:	60b9      	str	r1, [r7, #8]
 8003fd8:	603b      	str	r3, [r7, #0]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d101      	bne.n	8003ff0 <HAL_SPI_Transmit+0x22>
 8003fec:	2302      	movs	r3, #2
 8003fee:	e12d      	b.n	800424c <HAL_SPI_Transmit+0x27e>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ff8:	f7fe fac8 	bl	800258c <HAL_GetTick>
 8003ffc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003ffe:	88fb      	ldrh	r3, [r7, #6]
 8004000:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b01      	cmp	r3, #1
 800400c:	d002      	beq.n	8004014 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800400e:	2302      	movs	r3, #2
 8004010:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004012:	e116      	b.n	8004242 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d002      	beq.n	8004020 <HAL_SPI_Transmit+0x52>
 800401a:	88fb      	ldrh	r3, [r7, #6]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d102      	bne.n	8004026 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004024:	e10d      	b.n	8004242 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2203      	movs	r2, #3
 800402a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	88fa      	ldrh	r2, [r7, #6]
 800403e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	88fa      	ldrh	r2, [r7, #6]
 8004044:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800406c:	d10f      	bne.n	800408e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800407c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800408c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004098:	2b40      	cmp	r3, #64	@ 0x40
 800409a:	d007      	beq.n	80040ac <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040b4:	d14f      	bne.n	8004156 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d002      	beq.n	80040c4 <HAL_SPI_Transmit+0xf6>
 80040be:	8afb      	ldrh	r3, [r7, #22]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d142      	bne.n	800414a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c8:	881a      	ldrh	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d4:	1c9a      	adds	r2, r3, #2
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040de:	b29b      	uxth	r3, r3
 80040e0:	3b01      	subs	r3, #1
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80040e8:	e02f      	b.n	800414a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d112      	bne.n	800411e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040fc:	881a      	ldrh	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004108:	1c9a      	adds	r2, r3, #2
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004112:	b29b      	uxth	r3, r3
 8004114:	3b01      	subs	r3, #1
 8004116:	b29a      	uxth	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800411c:	e015      	b.n	800414a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800411e:	f7fe fa35 	bl	800258c <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	429a      	cmp	r2, r3
 800412c:	d803      	bhi.n	8004136 <HAL_SPI_Transmit+0x168>
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004134:	d102      	bne.n	800413c <HAL_SPI_Transmit+0x16e>
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d106      	bne.n	800414a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004148:	e07b      	b.n	8004242 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800414e:	b29b      	uxth	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1ca      	bne.n	80040ea <HAL_SPI_Transmit+0x11c>
 8004154:	e050      	b.n	80041f8 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d002      	beq.n	8004164 <HAL_SPI_Transmit+0x196>
 800415e:	8afb      	ldrh	r3, [r7, #22]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d144      	bne.n	80041ee <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	330c      	adds	r3, #12
 800416e:	7812      	ldrb	r2, [r2, #0]
 8004170:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004180:	b29b      	uxth	r3, r3
 8004182:	3b01      	subs	r3, #1
 8004184:	b29a      	uxth	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800418a:	e030      	b.n	80041ee <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b02      	cmp	r3, #2
 8004198:	d113      	bne.n	80041c2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	330c      	adds	r3, #12
 80041a4:	7812      	ldrb	r2, [r2, #0]
 80041a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	86da      	strh	r2, [r3, #54]	@ 0x36
 80041c0:	e015      	b.n	80041ee <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041c2:	f7fe f9e3 	bl	800258c <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d803      	bhi.n	80041da <HAL_SPI_Transmit+0x20c>
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d8:	d102      	bne.n	80041e0 <HAL_SPI_Transmit+0x212>
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d106      	bne.n	80041ee <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80041ec:	e029      	b.n	8004242 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1c9      	bne.n	800418c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	6839      	ldr	r1, [r7, #0]
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 f8bf 	bl	8004380 <SPI_EndRxTxTransaction>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d002      	beq.n	800420e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2220      	movs	r2, #32
 800420c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10a      	bne.n	800422c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004216:	2300      	movs	r3, #0
 8004218:	613b      	str	r3, [r7, #16]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	613b      	str	r3, [r7, #16]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	613b      	str	r3, [r7, #16]
 800422a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004230:	2b00      	cmp	r3, #0
 8004232:	d002      	beq.n	800423a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	77fb      	strb	r3, [r7, #31]
 8004238:	e003      	b.n	8004242 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800424a:	7ffb      	ldrb	r3, [r7, #31]
}
 800424c:	4618      	mov	r0, r3
 800424e:	3720      	adds	r7, #32
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004262:	b2db      	uxtb	r3, r3
}
 8004264:	4618      	mov	r0, r3
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b088      	sub	sp, #32
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	603b      	str	r3, [r7, #0]
 800427c:	4613      	mov	r3, r2
 800427e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004280:	f7fe f984 	bl	800258c <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004288:	1a9b      	subs	r3, r3, r2
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	4413      	add	r3, r2
 800428e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004290:	f7fe f97c 	bl	800258c <HAL_GetTick>
 8004294:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004296:	4b39      	ldr	r3, [pc, #228]	@ (800437c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	015b      	lsls	r3, r3, #5
 800429c:	0d1b      	lsrs	r3, r3, #20
 800429e:	69fa      	ldr	r2, [r7, #28]
 80042a0:	fb02 f303 	mul.w	r3, r2, r3
 80042a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042a6:	e054      	b.n	8004352 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ae:	d050      	beq.n	8004352 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042b0:	f7fe f96c 	bl	800258c <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	69fa      	ldr	r2, [r7, #28]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d902      	bls.n	80042c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d13d      	bne.n	8004342 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80042d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042de:	d111      	bne.n	8004304 <SPI_WaitFlagStateUntilTimeout+0x94>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042e8:	d004      	beq.n	80042f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042f2:	d107      	bne.n	8004304 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004302:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004308:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800430c:	d10f      	bne.n	800432e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800432c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e017      	b.n	8004372 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004348:	2300      	movs	r3, #0
 800434a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	3b01      	subs	r3, #1
 8004350:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	4013      	ands	r3, r2
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	429a      	cmp	r2, r3
 8004360:	bf0c      	ite	eq
 8004362:	2301      	moveq	r3, #1
 8004364:	2300      	movne	r3, #0
 8004366:	b2db      	uxtb	r3, r3
 8004368:	461a      	mov	r2, r3
 800436a:	79fb      	ldrb	r3, [r7, #7]
 800436c:	429a      	cmp	r2, r3
 800436e:	d19b      	bne.n	80042a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3720      	adds	r7, #32
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	2000000c 	.word	0x2000000c

08004380 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b088      	sub	sp, #32
 8004384:	af02      	add	r7, sp, #8
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	9300      	str	r3, [sp, #0]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2201      	movs	r2, #1
 8004394:	2102      	movs	r1, #2
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f7ff ff6a 	bl	8004270 <SPI_WaitFlagStateUntilTimeout>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d007      	beq.n	80043b2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043a6:	f043 0220 	orr.w	r2, r3, #32
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e032      	b.n	8004418 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80043b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004420 <SPI_EndRxTxTransaction+0xa0>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a1b      	ldr	r2, [pc, #108]	@ (8004424 <SPI_EndRxTxTransaction+0xa4>)
 80043b8:	fba2 2303 	umull	r2, r3, r2, r3
 80043bc:	0d5b      	lsrs	r3, r3, #21
 80043be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80043c2:	fb02 f303 	mul.w	r3, r2, r3
 80043c6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043d0:	d112      	bne.n	80043f8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	2200      	movs	r2, #0
 80043da:	2180      	movs	r1, #128	@ 0x80
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f7ff ff47 	bl	8004270 <SPI_WaitFlagStateUntilTimeout>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d016      	beq.n	8004416 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ec:	f043 0220 	orr.w	r2, r3, #32
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e00f      	b.n	8004418 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	3b01      	subs	r3, #1
 8004402:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800440e:	2b80      	cmp	r3, #128	@ 0x80
 8004410:	d0f2      	beq.n	80043f8 <SPI_EndRxTxTransaction+0x78>
 8004412:	e000      	b.n	8004416 <SPI_EndRxTxTransaction+0x96>
        break;
 8004414:	bf00      	nop
  }

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3718      	adds	r7, #24
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	2000000c 	.word	0x2000000c
 8004424:	165e9f81 	.word	0x165e9f81

08004428 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e042      	b.n	80044c0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d106      	bne.n	8004454 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7fd ff44 	bl	80022dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2224      	movs	r2, #36	@ 0x24
 8004458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800446a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 fa95 	bl	800499c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	691a      	ldr	r2, [r3, #16]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004480:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	695a      	ldr	r2, [r3, #20]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004490:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68da      	ldr	r2, [r3, #12]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2220      	movs	r2, #32
 80044b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	4613      	mov	r3, r2
 80044d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b20      	cmp	r3, #32
 80044e0:	d112      	bne.n	8004508 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d002      	beq.n	80044ee <HAL_UART_Receive_DMA+0x26>
 80044e8:	88fb      	ldrh	r3, [r7, #6]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e00b      	b.n	800450a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80044f8:	88fb      	ldrh	r3, [r7, #6]
 80044fa:	461a      	mov	r2, r3
 80044fc:	68b9      	ldr	r1, [r7, #8]
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 f926 	bl	8004750 <UART_Start_Receive_DMA>
 8004504:	4603      	mov	r3, r0
 8004506:	e000      	b.n	800450a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004508:	2302      	movs	r3, #2
  }
}
 800450a:	4618      	mov	r0, r3
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004512:	b480      	push	{r7}
 8004514:	b083      	sub	sp, #12
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr

08004526 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004526:	b480      	push	{r7}
 8004528:	b083      	sub	sp, #12
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800452e:	bf00      	nop
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800453a:	b480      	push	{r7}
 800453c:	b083      	sub	sp, #12
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
 8004542:	460b      	mov	r3, r1
 8004544:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004546:	bf00      	nop
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr

08004552 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b09c      	sub	sp, #112	@ 0x70
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800455e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800456a:	2b00      	cmp	r3, #0
 800456c:	d172      	bne.n	8004654 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800456e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004570:	2200      	movs	r2, #0
 8004572:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004574:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	330c      	adds	r3, #12
 800457a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800457e:	e853 3f00 	ldrex	r3, [r3]
 8004582:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004584:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004586:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800458a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800458c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	330c      	adds	r3, #12
 8004592:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004594:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004596:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004598:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800459a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800459c:	e841 2300 	strex	r3, r2, [r1]
 80045a0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80045a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1e5      	bne.n	8004574 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	3314      	adds	r3, #20
 80045ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b2:	e853 3f00 	ldrex	r3, [r3]
 80045b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045ba:	f023 0301 	bic.w	r3, r3, #1
 80045be:	667b      	str	r3, [r7, #100]	@ 0x64
 80045c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	3314      	adds	r3, #20
 80045c6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80045c8:	647a      	str	r2, [r7, #68]	@ 0x44
 80045ca:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045d0:	e841 2300 	strex	r3, r2, [r1]
 80045d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1e5      	bne.n	80045a8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	3314      	adds	r3, #20
 80045e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e6:	e853 3f00 	ldrex	r3, [r3]
 80045ea:	623b      	str	r3, [r7, #32]
   return(result);
 80045ec:	6a3b      	ldr	r3, [r7, #32]
 80045ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80045f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	3314      	adds	r3, #20
 80045fa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80045fc:	633a      	str	r2, [r7, #48]	@ 0x30
 80045fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004600:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004602:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004604:	e841 2300 	strex	r3, r2, [r1]
 8004608:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800460a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1e5      	bne.n	80045dc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004610:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004612:	2220      	movs	r2, #32
 8004614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004618:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800461a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800461c:	2b01      	cmp	r3, #1
 800461e:	d119      	bne.n	8004654 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004620:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	330c      	adds	r3, #12
 8004626:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	e853 3f00 	ldrex	r3, [r3]
 800462e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f023 0310 	bic.w	r3, r3, #16
 8004636:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004638:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	330c      	adds	r3, #12
 800463e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004640:	61fa      	str	r2, [r7, #28]
 8004642:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004644:	69b9      	ldr	r1, [r7, #24]
 8004646:	69fa      	ldr	r2, [r7, #28]
 8004648:	e841 2300 	strex	r3, r2, [r1]
 800464c:	617b      	str	r3, [r7, #20]
   return(result);
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1e5      	bne.n	8004620 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004654:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004656:	2200      	movs	r2, #0
 8004658:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800465a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800465c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465e:	2b01      	cmp	r3, #1
 8004660:	d106      	bne.n	8004670 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004662:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004664:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004666:	4619      	mov	r1, r3
 8004668:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800466a:	f7ff ff66 	bl	800453a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800466e:	e002      	b.n	8004676 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004670:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004672:	f7fd f90d 	bl	8001890 <HAL_UART_RxCpltCallback>
}
 8004676:	bf00      	nop
 8004678:	3770      	adds	r7, #112	@ 0x70
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b084      	sub	sp, #16
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800468a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2201      	movs	r2, #1
 8004690:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004696:	2b01      	cmp	r3, #1
 8004698:	d108      	bne.n	80046ac <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800469e:	085b      	lsrs	r3, r3, #1
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	4619      	mov	r1, r3
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f7ff ff48 	bl	800453a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80046aa:	e002      	b.n	80046b2 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f7ff ff30 	bl	8004512 <HAL_UART_RxHalfCpltCallback>
}
 80046b2:	bf00      	nop
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b084      	sub	sp, #16
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80046c2:	2300      	movs	r3, #0
 80046c4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ca:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046d6:	2b80      	cmp	r3, #128	@ 0x80
 80046d8:	bf0c      	ite	eq
 80046da:	2301      	moveq	r3, #1
 80046dc:	2300      	movne	r3, #0
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b21      	cmp	r3, #33	@ 0x21
 80046ec:	d108      	bne.n	8004700 <UART_DMAError+0x46>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d005      	beq.n	8004700 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	2200      	movs	r2, #0
 80046f8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80046fa:	68b8      	ldr	r0, [r7, #8]
 80046fc:	f000 f8c2 	bl	8004884 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800470a:	2b40      	cmp	r3, #64	@ 0x40
 800470c:	bf0c      	ite	eq
 800470e:	2301      	moveq	r3, #1
 8004710:	2300      	movne	r3, #0
 8004712:	b2db      	uxtb	r3, r3
 8004714:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b22      	cmp	r3, #34	@ 0x22
 8004720:	d108      	bne.n	8004734 <UART_DMAError+0x7a>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d005      	beq.n	8004734 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	2200      	movs	r2, #0
 800472c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800472e:	68b8      	ldr	r0, [r7, #8]
 8004730:	f000 f8d0 	bl	80048d4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004738:	f043 0210 	orr.w	r2, r3, #16
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004740:	68b8      	ldr	r0, [r7, #8]
 8004742:	f7ff fef0 	bl	8004526 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004746:	bf00      	nop
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
	...

08004750 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b098      	sub	sp, #96	@ 0x60
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	4613      	mov	r3, r2
 800475c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	88fa      	ldrh	r2, [r7, #6]
 8004768:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2222      	movs	r2, #34	@ 0x22
 8004774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800477c:	4a3e      	ldr	r2, [pc, #248]	@ (8004878 <UART_Start_Receive_DMA+0x128>)
 800477e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004784:	4a3d      	ldr	r2, [pc, #244]	@ (800487c <UART_Start_Receive_DMA+0x12c>)
 8004786:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800478c:	4a3c      	ldr	r2, [pc, #240]	@ (8004880 <UART_Start_Receive_DMA+0x130>)
 800478e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004794:	2200      	movs	r2, #0
 8004796:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004798:	f107 0308 	add.w	r3, r7, #8
 800479c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	3304      	adds	r3, #4
 80047a8:	4619      	mov	r1, r3
 80047aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	88fb      	ldrh	r3, [r7, #6]
 80047b0:	f7fe f8dc 	bl	800296c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80047b4:	2300      	movs	r3, #0
 80047b6:	613b      	str	r3, [r7, #16]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	613b      	str	r3, [r7, #16]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	613b      	str	r3, [r7, #16]
 80047c8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d019      	beq.n	8004806 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	330c      	adds	r3, #12
 80047d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047dc:	e853 3f00 	ldrex	r3, [r3]
 80047e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	330c      	adds	r3, #12
 80047f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80047f2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80047f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80047f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80047fa:	e841 2300 	strex	r3, r2, [r1]
 80047fe:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004800:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1e5      	bne.n	80047d2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	3314      	adds	r3, #20
 800480c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004810:	e853 3f00 	ldrex	r3, [r3]
 8004814:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004818:	f043 0301 	orr.w	r3, r3, #1
 800481c:	657b      	str	r3, [r7, #84]	@ 0x54
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	3314      	adds	r3, #20
 8004824:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004826:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004828:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800482c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800482e:	e841 2300 	strex	r3, r2, [r1]
 8004832:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1e5      	bne.n	8004806 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3314      	adds	r3, #20
 8004840:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	e853 3f00 	ldrex	r3, [r3]
 8004848:	617b      	str	r3, [r7, #20]
   return(result);
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004850:	653b      	str	r3, [r7, #80]	@ 0x50
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	3314      	adds	r3, #20
 8004858:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800485a:	627a      	str	r2, [r7, #36]	@ 0x24
 800485c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485e:	6a39      	ldr	r1, [r7, #32]
 8004860:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004862:	e841 2300 	strex	r3, r2, [r1]
 8004866:	61fb      	str	r3, [r7, #28]
   return(result);
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1e5      	bne.n	800483a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3760      	adds	r7, #96	@ 0x60
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	08004553 	.word	0x08004553
 800487c:	0800467f 	.word	0x0800467f
 8004880:	080046bb 	.word	0x080046bb

08004884 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004884:	b480      	push	{r7}
 8004886:	b089      	sub	sp, #36	@ 0x24
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	330c      	adds	r3, #12
 8004892:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	e853 3f00 	ldrex	r3, [r3]
 800489a:	60bb      	str	r3, [r7, #8]
   return(result);
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80048a2:	61fb      	str	r3, [r7, #28]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	330c      	adds	r3, #12
 80048aa:	69fa      	ldr	r2, [r7, #28]
 80048ac:	61ba      	str	r2, [r7, #24]
 80048ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b0:	6979      	ldr	r1, [r7, #20]
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	e841 2300 	strex	r3, r2, [r1]
 80048b8:	613b      	str	r3, [r7, #16]
   return(result);
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1e5      	bne.n	800488c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2220      	movs	r2, #32
 80048c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80048c8:	bf00      	nop
 80048ca:	3724      	adds	r7, #36	@ 0x24
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b095      	sub	sp, #84	@ 0x54
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	330c      	adds	r3, #12
 80048e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048e6:	e853 3f00 	ldrex	r3, [r3]
 80048ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80048ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	330c      	adds	r3, #12
 80048fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048fc:	643a      	str	r2, [r7, #64]	@ 0x40
 80048fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004900:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004902:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004904:	e841 2300 	strex	r3, r2, [r1]
 8004908:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800490a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1e5      	bne.n	80048dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	3314      	adds	r3, #20
 8004916:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004918:	6a3b      	ldr	r3, [r7, #32]
 800491a:	e853 3f00 	ldrex	r3, [r3]
 800491e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	f023 0301 	bic.w	r3, r3, #1
 8004926:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3314      	adds	r3, #20
 800492e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004930:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004932:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004934:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004936:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004938:	e841 2300 	strex	r3, r2, [r1]
 800493c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800493e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1e5      	bne.n	8004910 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004948:	2b01      	cmp	r3, #1
 800494a:	d119      	bne.n	8004980 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	330c      	adds	r3, #12
 8004952:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	e853 3f00 	ldrex	r3, [r3]
 800495a:	60bb      	str	r3, [r7, #8]
   return(result);
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f023 0310 	bic.w	r3, r3, #16
 8004962:	647b      	str	r3, [r7, #68]	@ 0x44
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	330c      	adds	r3, #12
 800496a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800496c:	61ba      	str	r2, [r7, #24]
 800496e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004970:	6979      	ldr	r1, [r7, #20]
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	e841 2300 	strex	r3, r2, [r1]
 8004978:	613b      	str	r3, [r7, #16]
   return(result);
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1e5      	bne.n	800494c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2220      	movs	r2, #32
 8004984:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800498e:	bf00      	nop
 8004990:	3754      	adds	r7, #84	@ 0x54
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
	...

0800499c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800499c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049a0:	b0c0      	sub	sp, #256	@ 0x100
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80049b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b8:	68d9      	ldr	r1, [r3, #12]
 80049ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	ea40 0301 	orr.w	r3, r0, r1
 80049c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ca:	689a      	ldr	r2, [r3, #8]
 80049cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	431a      	orrs	r2, r3
 80049d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	431a      	orrs	r2, r3
 80049dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80049f4:	f021 010c 	bic.w	r1, r1, #12
 80049f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004a02:	430b      	orrs	r3, r1
 8004a04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a16:	6999      	ldr	r1, [r3, #24]
 8004a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	ea40 0301 	orr.w	r3, r0, r1
 8004a22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	4b8f      	ldr	r3, [pc, #572]	@ (8004c68 <UART_SetConfig+0x2cc>)
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d005      	beq.n	8004a3c <UART_SetConfig+0xa0>
 8004a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	4b8d      	ldr	r3, [pc, #564]	@ (8004c6c <UART_SetConfig+0x2d0>)
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d104      	bne.n	8004a46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a3c:	f7fe fd5c 	bl	80034f8 <HAL_RCC_GetPCLK2Freq>
 8004a40:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004a44:	e003      	b.n	8004a4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a46:	f7fe fd43 	bl	80034d0 <HAL_RCC_GetPCLK1Freq>
 8004a4a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a52:	69db      	ldr	r3, [r3, #28]
 8004a54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a58:	f040 810c 	bne.w	8004c74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a60:	2200      	movs	r2, #0
 8004a62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a66:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004a6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004a6e:	4622      	mov	r2, r4
 8004a70:	462b      	mov	r3, r5
 8004a72:	1891      	adds	r1, r2, r2
 8004a74:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004a76:	415b      	adcs	r3, r3
 8004a78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004a7e:	4621      	mov	r1, r4
 8004a80:	eb12 0801 	adds.w	r8, r2, r1
 8004a84:	4629      	mov	r1, r5
 8004a86:	eb43 0901 	adc.w	r9, r3, r1
 8004a8a:	f04f 0200 	mov.w	r2, #0
 8004a8e:	f04f 0300 	mov.w	r3, #0
 8004a92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a9e:	4690      	mov	r8, r2
 8004aa0:	4699      	mov	r9, r3
 8004aa2:	4623      	mov	r3, r4
 8004aa4:	eb18 0303 	adds.w	r3, r8, r3
 8004aa8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004aac:	462b      	mov	r3, r5
 8004aae:	eb49 0303 	adc.w	r3, r9, r3
 8004ab2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004ac2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004ac6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004aca:	460b      	mov	r3, r1
 8004acc:	18db      	adds	r3, r3, r3
 8004ace:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	eb42 0303 	adc.w	r3, r2, r3
 8004ad6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ad8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004adc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ae0:	f7fc f810 	bl	8000b04 <__aeabi_uldivmod>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	4b61      	ldr	r3, [pc, #388]	@ (8004c70 <UART_SetConfig+0x2d4>)
 8004aea:	fba3 2302 	umull	r2, r3, r3, r2
 8004aee:	095b      	lsrs	r3, r3, #5
 8004af0:	011c      	lsls	r4, r3, #4
 8004af2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004af6:	2200      	movs	r2, #0
 8004af8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004afc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004b00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004b04:	4642      	mov	r2, r8
 8004b06:	464b      	mov	r3, r9
 8004b08:	1891      	adds	r1, r2, r2
 8004b0a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004b0c:	415b      	adcs	r3, r3
 8004b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004b14:	4641      	mov	r1, r8
 8004b16:	eb12 0a01 	adds.w	sl, r2, r1
 8004b1a:	4649      	mov	r1, r9
 8004b1c:	eb43 0b01 	adc.w	fp, r3, r1
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b34:	4692      	mov	sl, r2
 8004b36:	469b      	mov	fp, r3
 8004b38:	4643      	mov	r3, r8
 8004b3a:	eb1a 0303 	adds.w	r3, sl, r3
 8004b3e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b42:	464b      	mov	r3, r9
 8004b44:	eb4b 0303 	adc.w	r3, fp, r3
 8004b48:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b58:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004b5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b60:	460b      	mov	r3, r1
 8004b62:	18db      	adds	r3, r3, r3
 8004b64:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b66:	4613      	mov	r3, r2
 8004b68:	eb42 0303 	adc.w	r3, r2, r3
 8004b6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004b72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004b76:	f7fb ffc5 	bl	8000b04 <__aeabi_uldivmod>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	4611      	mov	r1, r2
 8004b80:	4b3b      	ldr	r3, [pc, #236]	@ (8004c70 <UART_SetConfig+0x2d4>)
 8004b82:	fba3 2301 	umull	r2, r3, r3, r1
 8004b86:	095b      	lsrs	r3, r3, #5
 8004b88:	2264      	movs	r2, #100	@ 0x64
 8004b8a:	fb02 f303 	mul.w	r3, r2, r3
 8004b8e:	1acb      	subs	r3, r1, r3
 8004b90:	00db      	lsls	r3, r3, #3
 8004b92:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004b96:	4b36      	ldr	r3, [pc, #216]	@ (8004c70 <UART_SetConfig+0x2d4>)
 8004b98:	fba3 2302 	umull	r2, r3, r3, r2
 8004b9c:	095b      	lsrs	r3, r3, #5
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004ba4:	441c      	add	r4, r3
 8004ba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004baa:	2200      	movs	r2, #0
 8004bac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004bb0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004bb4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004bb8:	4642      	mov	r2, r8
 8004bba:	464b      	mov	r3, r9
 8004bbc:	1891      	adds	r1, r2, r2
 8004bbe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004bc0:	415b      	adcs	r3, r3
 8004bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004bc8:	4641      	mov	r1, r8
 8004bca:	1851      	adds	r1, r2, r1
 8004bcc:	6339      	str	r1, [r7, #48]	@ 0x30
 8004bce:	4649      	mov	r1, r9
 8004bd0:	414b      	adcs	r3, r1
 8004bd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bd4:	f04f 0200 	mov.w	r2, #0
 8004bd8:	f04f 0300 	mov.w	r3, #0
 8004bdc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004be0:	4659      	mov	r1, fp
 8004be2:	00cb      	lsls	r3, r1, #3
 8004be4:	4651      	mov	r1, sl
 8004be6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bea:	4651      	mov	r1, sl
 8004bec:	00ca      	lsls	r2, r1, #3
 8004bee:	4610      	mov	r0, r2
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	4642      	mov	r2, r8
 8004bf6:	189b      	adds	r3, r3, r2
 8004bf8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004bfc:	464b      	mov	r3, r9
 8004bfe:	460a      	mov	r2, r1
 8004c00:	eb42 0303 	adc.w	r3, r2, r3
 8004c04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004c14:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004c18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	18db      	adds	r3, r3, r3
 8004c20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c22:	4613      	mov	r3, r2
 8004c24:	eb42 0303 	adc.w	r3, r2, r3
 8004c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004c32:	f7fb ff67 	bl	8000b04 <__aeabi_uldivmod>
 8004c36:	4602      	mov	r2, r0
 8004c38:	460b      	mov	r3, r1
 8004c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c70 <UART_SetConfig+0x2d4>)
 8004c3c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c40:	095b      	lsrs	r3, r3, #5
 8004c42:	2164      	movs	r1, #100	@ 0x64
 8004c44:	fb01 f303 	mul.w	r3, r1, r3
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	00db      	lsls	r3, r3, #3
 8004c4c:	3332      	adds	r3, #50	@ 0x32
 8004c4e:	4a08      	ldr	r2, [pc, #32]	@ (8004c70 <UART_SetConfig+0x2d4>)
 8004c50:	fba2 2303 	umull	r2, r3, r2, r3
 8004c54:	095b      	lsrs	r3, r3, #5
 8004c56:	f003 0207 	and.w	r2, r3, #7
 8004c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4422      	add	r2, r4
 8004c62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c64:	e106      	b.n	8004e74 <UART_SetConfig+0x4d8>
 8004c66:	bf00      	nop
 8004c68:	40011000 	.word	0x40011000
 8004c6c:	40011400 	.word	0x40011400
 8004c70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004c7e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004c82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004c86:	4642      	mov	r2, r8
 8004c88:	464b      	mov	r3, r9
 8004c8a:	1891      	adds	r1, r2, r2
 8004c8c:	6239      	str	r1, [r7, #32]
 8004c8e:	415b      	adcs	r3, r3
 8004c90:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c96:	4641      	mov	r1, r8
 8004c98:	1854      	adds	r4, r2, r1
 8004c9a:	4649      	mov	r1, r9
 8004c9c:	eb43 0501 	adc.w	r5, r3, r1
 8004ca0:	f04f 0200 	mov.w	r2, #0
 8004ca4:	f04f 0300 	mov.w	r3, #0
 8004ca8:	00eb      	lsls	r3, r5, #3
 8004caa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cae:	00e2      	lsls	r2, r4, #3
 8004cb0:	4614      	mov	r4, r2
 8004cb2:	461d      	mov	r5, r3
 8004cb4:	4643      	mov	r3, r8
 8004cb6:	18e3      	adds	r3, r4, r3
 8004cb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004cbc:	464b      	mov	r3, r9
 8004cbe:	eb45 0303 	adc.w	r3, r5, r3
 8004cc2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004cd2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004cd6:	f04f 0200 	mov.w	r2, #0
 8004cda:	f04f 0300 	mov.w	r3, #0
 8004cde:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ce2:	4629      	mov	r1, r5
 8004ce4:	008b      	lsls	r3, r1, #2
 8004ce6:	4621      	mov	r1, r4
 8004ce8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cec:	4621      	mov	r1, r4
 8004cee:	008a      	lsls	r2, r1, #2
 8004cf0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004cf4:	f7fb ff06 	bl	8000b04 <__aeabi_uldivmod>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4b60      	ldr	r3, [pc, #384]	@ (8004e80 <UART_SetConfig+0x4e4>)
 8004cfe:	fba3 2302 	umull	r2, r3, r3, r2
 8004d02:	095b      	lsrs	r3, r3, #5
 8004d04:	011c      	lsls	r4, r3, #4
 8004d06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004d10:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004d14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004d18:	4642      	mov	r2, r8
 8004d1a:	464b      	mov	r3, r9
 8004d1c:	1891      	adds	r1, r2, r2
 8004d1e:	61b9      	str	r1, [r7, #24]
 8004d20:	415b      	adcs	r3, r3
 8004d22:	61fb      	str	r3, [r7, #28]
 8004d24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d28:	4641      	mov	r1, r8
 8004d2a:	1851      	adds	r1, r2, r1
 8004d2c:	6139      	str	r1, [r7, #16]
 8004d2e:	4649      	mov	r1, r9
 8004d30:	414b      	adcs	r3, r1
 8004d32:	617b      	str	r3, [r7, #20]
 8004d34:	f04f 0200 	mov.w	r2, #0
 8004d38:	f04f 0300 	mov.w	r3, #0
 8004d3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d40:	4659      	mov	r1, fp
 8004d42:	00cb      	lsls	r3, r1, #3
 8004d44:	4651      	mov	r1, sl
 8004d46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d4a:	4651      	mov	r1, sl
 8004d4c:	00ca      	lsls	r2, r1, #3
 8004d4e:	4610      	mov	r0, r2
 8004d50:	4619      	mov	r1, r3
 8004d52:	4603      	mov	r3, r0
 8004d54:	4642      	mov	r2, r8
 8004d56:	189b      	adds	r3, r3, r2
 8004d58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d5c:	464b      	mov	r3, r9
 8004d5e:	460a      	mov	r2, r1
 8004d60:	eb42 0303 	adc.w	r3, r2, r3
 8004d64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d72:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004d74:	f04f 0200 	mov.w	r2, #0
 8004d78:	f04f 0300 	mov.w	r3, #0
 8004d7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004d80:	4649      	mov	r1, r9
 8004d82:	008b      	lsls	r3, r1, #2
 8004d84:	4641      	mov	r1, r8
 8004d86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d8a:	4641      	mov	r1, r8
 8004d8c:	008a      	lsls	r2, r1, #2
 8004d8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004d92:	f7fb feb7 	bl	8000b04 <__aeabi_uldivmod>
 8004d96:	4602      	mov	r2, r0
 8004d98:	460b      	mov	r3, r1
 8004d9a:	4611      	mov	r1, r2
 8004d9c:	4b38      	ldr	r3, [pc, #224]	@ (8004e80 <UART_SetConfig+0x4e4>)
 8004d9e:	fba3 2301 	umull	r2, r3, r3, r1
 8004da2:	095b      	lsrs	r3, r3, #5
 8004da4:	2264      	movs	r2, #100	@ 0x64
 8004da6:	fb02 f303 	mul.w	r3, r2, r3
 8004daa:	1acb      	subs	r3, r1, r3
 8004dac:	011b      	lsls	r3, r3, #4
 8004dae:	3332      	adds	r3, #50	@ 0x32
 8004db0:	4a33      	ldr	r2, [pc, #204]	@ (8004e80 <UART_SetConfig+0x4e4>)
 8004db2:	fba2 2303 	umull	r2, r3, r2, r3
 8004db6:	095b      	lsrs	r3, r3, #5
 8004db8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004dbc:	441c      	add	r4, r3
 8004dbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	673b      	str	r3, [r7, #112]	@ 0x70
 8004dc6:	677a      	str	r2, [r7, #116]	@ 0x74
 8004dc8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004dcc:	4642      	mov	r2, r8
 8004dce:	464b      	mov	r3, r9
 8004dd0:	1891      	adds	r1, r2, r2
 8004dd2:	60b9      	str	r1, [r7, #8]
 8004dd4:	415b      	adcs	r3, r3
 8004dd6:	60fb      	str	r3, [r7, #12]
 8004dd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ddc:	4641      	mov	r1, r8
 8004dde:	1851      	adds	r1, r2, r1
 8004de0:	6039      	str	r1, [r7, #0]
 8004de2:	4649      	mov	r1, r9
 8004de4:	414b      	adcs	r3, r1
 8004de6:	607b      	str	r3, [r7, #4]
 8004de8:	f04f 0200 	mov.w	r2, #0
 8004dec:	f04f 0300 	mov.w	r3, #0
 8004df0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004df4:	4659      	mov	r1, fp
 8004df6:	00cb      	lsls	r3, r1, #3
 8004df8:	4651      	mov	r1, sl
 8004dfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dfe:	4651      	mov	r1, sl
 8004e00:	00ca      	lsls	r2, r1, #3
 8004e02:	4610      	mov	r0, r2
 8004e04:	4619      	mov	r1, r3
 8004e06:	4603      	mov	r3, r0
 8004e08:	4642      	mov	r2, r8
 8004e0a:	189b      	adds	r3, r3, r2
 8004e0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e0e:	464b      	mov	r3, r9
 8004e10:	460a      	mov	r2, r1
 8004e12:	eb42 0303 	adc.w	r3, r2, r3
 8004e16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e22:	667a      	str	r2, [r7, #100]	@ 0x64
 8004e24:	f04f 0200 	mov.w	r2, #0
 8004e28:	f04f 0300 	mov.w	r3, #0
 8004e2c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004e30:	4649      	mov	r1, r9
 8004e32:	008b      	lsls	r3, r1, #2
 8004e34:	4641      	mov	r1, r8
 8004e36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e3a:	4641      	mov	r1, r8
 8004e3c:	008a      	lsls	r2, r1, #2
 8004e3e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004e42:	f7fb fe5f 	bl	8000b04 <__aeabi_uldivmod>
 8004e46:	4602      	mov	r2, r0
 8004e48:	460b      	mov	r3, r1
 8004e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e80 <UART_SetConfig+0x4e4>)
 8004e4c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e50:	095b      	lsrs	r3, r3, #5
 8004e52:	2164      	movs	r1, #100	@ 0x64
 8004e54:	fb01 f303 	mul.w	r3, r1, r3
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	011b      	lsls	r3, r3, #4
 8004e5c:	3332      	adds	r3, #50	@ 0x32
 8004e5e:	4a08      	ldr	r2, [pc, #32]	@ (8004e80 <UART_SetConfig+0x4e4>)
 8004e60:	fba2 2303 	umull	r2, r3, r2, r3
 8004e64:	095b      	lsrs	r3, r3, #5
 8004e66:	f003 020f 	and.w	r2, r3, #15
 8004e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4422      	add	r2, r4
 8004e72:	609a      	str	r2, [r3, #8]
}
 8004e74:	bf00      	nop
 8004e76:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e80:	51eb851f 	.word	0x51eb851f

08004e84 <memset>:
 8004e84:	4402      	add	r2, r0
 8004e86:	4603      	mov	r3, r0
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d100      	bne.n	8004e8e <memset+0xa>
 8004e8c:	4770      	bx	lr
 8004e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e92:	e7f9      	b.n	8004e88 <memset+0x4>

08004e94 <__libc_init_array>:
 8004e94:	b570      	push	{r4, r5, r6, lr}
 8004e96:	4d0d      	ldr	r5, [pc, #52]	@ (8004ecc <__libc_init_array+0x38>)
 8004e98:	4c0d      	ldr	r4, [pc, #52]	@ (8004ed0 <__libc_init_array+0x3c>)
 8004e9a:	1b64      	subs	r4, r4, r5
 8004e9c:	10a4      	asrs	r4, r4, #2
 8004e9e:	2600      	movs	r6, #0
 8004ea0:	42a6      	cmp	r6, r4
 8004ea2:	d109      	bne.n	8004eb8 <__libc_init_array+0x24>
 8004ea4:	4d0b      	ldr	r5, [pc, #44]	@ (8004ed4 <__libc_init_array+0x40>)
 8004ea6:	4c0c      	ldr	r4, [pc, #48]	@ (8004ed8 <__libc_init_array+0x44>)
 8004ea8:	f001 f8f2 	bl	8006090 <_init>
 8004eac:	1b64      	subs	r4, r4, r5
 8004eae:	10a4      	asrs	r4, r4, #2
 8004eb0:	2600      	movs	r6, #0
 8004eb2:	42a6      	cmp	r6, r4
 8004eb4:	d105      	bne.n	8004ec2 <__libc_init_array+0x2e>
 8004eb6:	bd70      	pop	{r4, r5, r6, pc}
 8004eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ebc:	4798      	blx	r3
 8004ebe:	3601      	adds	r6, #1
 8004ec0:	e7ee      	b.n	8004ea0 <__libc_init_array+0xc>
 8004ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ec6:	4798      	blx	r3
 8004ec8:	3601      	adds	r6, #1
 8004eca:	e7f2      	b.n	8004eb2 <__libc_init_array+0x1e>
 8004ecc:	080067b0 	.word	0x080067b0
 8004ed0:	080067b0 	.word	0x080067b0
 8004ed4:	080067b0 	.word	0x080067b0
 8004ed8:	080067b4 	.word	0x080067b4
 8004edc:	00000000 	.word	0x00000000

08004ee0 <tan>:
 8004ee0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004ee2:	ec53 2b10 	vmov	r2, r3, d0
 8004ee6:	4816      	ldr	r0, [pc, #88]	@ (8004f40 <tan+0x60>)
 8004ee8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004eec:	4281      	cmp	r1, r0
 8004eee:	d807      	bhi.n	8004f00 <tan+0x20>
 8004ef0:	ed9f 1b11 	vldr	d1, [pc, #68]	@ 8004f38 <tan+0x58>
 8004ef4:	2001      	movs	r0, #1
 8004ef6:	b005      	add	sp, #20
 8004ef8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004efc:	f000 b86c 	b.w	8004fd8 <__kernel_tan>
 8004f00:	4810      	ldr	r0, [pc, #64]	@ (8004f44 <tan+0x64>)
 8004f02:	4281      	cmp	r1, r0
 8004f04:	d908      	bls.n	8004f18 <tan+0x38>
 8004f06:	4610      	mov	r0, r2
 8004f08:	4619      	mov	r1, r3
 8004f0a:	f7fb f981 	bl	8000210 <__aeabi_dsub>
 8004f0e:	ec41 0b10 	vmov	d0, r0, r1
 8004f12:	b005      	add	sp, #20
 8004f14:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f18:	4668      	mov	r0, sp
 8004f1a:	f000 fa61 	bl	80053e0 <__ieee754_rem_pio2>
 8004f1e:	0040      	lsls	r0, r0, #1
 8004f20:	f000 0002 	and.w	r0, r0, #2
 8004f24:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004f28:	ed9d 0b00 	vldr	d0, [sp]
 8004f2c:	f1c0 0001 	rsb	r0, r0, #1
 8004f30:	f000 f852 	bl	8004fd8 <__kernel_tan>
 8004f34:	e7ed      	b.n	8004f12 <tan+0x32>
 8004f36:	bf00      	nop
	...
 8004f40:	3fe921fb 	.word	0x3fe921fb
 8004f44:	7fefffff 	.word	0x7fefffff

08004f48 <round>:
 8004f48:	ec51 0b10 	vmov	r0, r1, d0
 8004f4c:	b570      	push	{r4, r5, r6, lr}
 8004f4e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8004f52:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 8004f56:	2a13      	cmp	r2, #19
 8004f58:	460b      	mov	r3, r1
 8004f5a:	4605      	mov	r5, r0
 8004f5c:	dc1b      	bgt.n	8004f96 <round+0x4e>
 8004f5e:	2a00      	cmp	r2, #0
 8004f60:	da0b      	bge.n	8004f7a <round+0x32>
 8004f62:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8004f66:	3201      	adds	r2, #1
 8004f68:	bf04      	itt	eq
 8004f6a:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8004f6e:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8004f72:	2200      	movs	r2, #0
 8004f74:	4619      	mov	r1, r3
 8004f76:	4610      	mov	r0, r2
 8004f78:	e015      	b.n	8004fa6 <round+0x5e>
 8004f7a:	4c15      	ldr	r4, [pc, #84]	@ (8004fd0 <round+0x88>)
 8004f7c:	4114      	asrs	r4, r2
 8004f7e:	ea04 0601 	and.w	r6, r4, r1
 8004f82:	4306      	orrs	r6, r0
 8004f84:	d00f      	beq.n	8004fa6 <round+0x5e>
 8004f86:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8004f8a:	fa41 f202 	asr.w	r2, r1, r2
 8004f8e:	4413      	add	r3, r2
 8004f90:	ea23 0304 	bic.w	r3, r3, r4
 8004f94:	e7ed      	b.n	8004f72 <round+0x2a>
 8004f96:	2a33      	cmp	r2, #51	@ 0x33
 8004f98:	dd08      	ble.n	8004fac <round+0x64>
 8004f9a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8004f9e:	d102      	bne.n	8004fa6 <round+0x5e>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	f7fb f937 	bl	8000214 <__adddf3>
 8004fa6:	ec41 0b10 	vmov	d0, r0, r1
 8004faa:	bd70      	pop	{r4, r5, r6, pc}
 8004fac:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 8004fb0:	f04f 34ff 	mov.w	r4, #4294967295
 8004fb4:	40f4      	lsrs	r4, r6
 8004fb6:	4204      	tst	r4, r0
 8004fb8:	d0f5      	beq.n	8004fa6 <round+0x5e>
 8004fba:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	408a      	lsls	r2, r1
 8004fc2:	1952      	adds	r2, r2, r5
 8004fc4:	bf28      	it	cs
 8004fc6:	3301      	addcs	r3, #1
 8004fc8:	ea22 0204 	bic.w	r2, r2, r4
 8004fcc:	e7d2      	b.n	8004f74 <round+0x2c>
 8004fce:	bf00      	nop
 8004fd0:	000fffff 	.word	0x000fffff
 8004fd4:	00000000 	.word	0x00000000

08004fd8 <__kernel_tan>:
 8004fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fdc:	ec5b ab10 	vmov	sl, fp, d0
 8004fe0:	4bdb      	ldr	r3, [pc, #876]	@ (8005350 <__kernel_tan+0x378>)
 8004fe2:	b089      	sub	sp, #36	@ 0x24
 8004fe4:	f02b 4700 	bic.w	r7, fp, #2147483648	@ 0x80000000
 8004fe8:	429f      	cmp	r7, r3
 8004fea:	ec59 8b11 	vmov	r8, r9, d1
 8004fee:	4606      	mov	r6, r0
 8004ff0:	f8cd b008 	str.w	fp, [sp, #8]
 8004ff4:	d85d      	bhi.n	80050b2 <__kernel_tan+0xda>
 8004ff6:	4650      	mov	r0, sl
 8004ff8:	4659      	mov	r1, fp
 8004ffa:	f7fb fd5b 	bl	8000ab4 <__aeabi_d2iz>
 8004ffe:	4605      	mov	r5, r0
 8005000:	2800      	cmp	r0, #0
 8005002:	d17c      	bne.n	80050fe <__kernel_tan+0x126>
 8005004:	1c73      	adds	r3, r6, #1
 8005006:	4652      	mov	r2, sl
 8005008:	4313      	orrs	r3, r2
 800500a:	433b      	orrs	r3, r7
 800500c:	d110      	bne.n	8005030 <__kernel_tan+0x58>
 800500e:	ec4b ab10 	vmov	d0, sl, fp
 8005012:	f000 fbe1 	bl	80057d8 <fabs>
 8005016:	49cf      	ldr	r1, [pc, #828]	@ (8005354 <__kernel_tan+0x37c>)
 8005018:	ec53 2b10 	vmov	r2, r3, d0
 800501c:	2000      	movs	r0, #0
 800501e:	f7fb fbd9 	bl	80007d4 <__aeabi_ddiv>
 8005022:	4682      	mov	sl, r0
 8005024:	468b      	mov	fp, r1
 8005026:	ec4b ab10 	vmov	d0, sl, fp
 800502a:	b009      	add	sp, #36	@ 0x24
 800502c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005030:	2e01      	cmp	r6, #1
 8005032:	d0f8      	beq.n	8005026 <__kernel_tan+0x4e>
 8005034:	4642      	mov	r2, r8
 8005036:	464b      	mov	r3, r9
 8005038:	4650      	mov	r0, sl
 800503a:	4659      	mov	r1, fp
 800503c:	f7fb f8ea 	bl	8000214 <__adddf3>
 8005040:	4602      	mov	r2, r0
 8005042:	460b      	mov	r3, r1
 8005044:	460f      	mov	r7, r1
 8005046:	2000      	movs	r0, #0
 8005048:	49c3      	ldr	r1, [pc, #780]	@ (8005358 <__kernel_tan+0x380>)
 800504a:	f7fb fbc3 	bl	80007d4 <__aeabi_ddiv>
 800504e:	e9cd 0100 	strd	r0, r1, [sp]
 8005052:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005056:	462e      	mov	r6, r5
 8005058:	4652      	mov	r2, sl
 800505a:	462c      	mov	r4, r5
 800505c:	4630      	mov	r0, r6
 800505e:	461d      	mov	r5, r3
 8005060:	4639      	mov	r1, r7
 8005062:	465b      	mov	r3, fp
 8005064:	f7fb f8d4 	bl	8000210 <__aeabi_dsub>
 8005068:	4602      	mov	r2, r0
 800506a:	460b      	mov	r3, r1
 800506c:	4640      	mov	r0, r8
 800506e:	4649      	mov	r1, r9
 8005070:	f7fb f8ce 	bl	8000210 <__aeabi_dsub>
 8005074:	4632      	mov	r2, r6
 8005076:	462b      	mov	r3, r5
 8005078:	f7fb fa82 	bl	8000580 <__aeabi_dmul>
 800507c:	4632      	mov	r2, r6
 800507e:	4682      	mov	sl, r0
 8005080:	468b      	mov	fp, r1
 8005082:	462b      	mov	r3, r5
 8005084:	4630      	mov	r0, r6
 8005086:	4639      	mov	r1, r7
 8005088:	f7fb fa7a 	bl	8000580 <__aeabi_dmul>
 800508c:	4bb1      	ldr	r3, [pc, #708]	@ (8005354 <__kernel_tan+0x37c>)
 800508e:	2200      	movs	r2, #0
 8005090:	f7fb f8c0 	bl	8000214 <__adddf3>
 8005094:	4602      	mov	r2, r0
 8005096:	460b      	mov	r3, r1
 8005098:	4650      	mov	r0, sl
 800509a:	4659      	mov	r1, fp
 800509c:	f7fb f8ba 	bl	8000214 <__adddf3>
 80050a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050a4:	f7fb fa6c 	bl	8000580 <__aeabi_dmul>
 80050a8:	4622      	mov	r2, r4
 80050aa:	462b      	mov	r3, r5
 80050ac:	f7fb f8b2 	bl	8000214 <__adddf3>
 80050b0:	e7b7      	b.n	8005022 <__kernel_tan+0x4a>
 80050b2:	4baa      	ldr	r3, [pc, #680]	@ (800535c <__kernel_tan+0x384>)
 80050b4:	429f      	cmp	r7, r3
 80050b6:	d922      	bls.n	80050fe <__kernel_tan+0x126>
 80050b8:	9b02      	ldr	r3, [sp, #8]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	da05      	bge.n	80050ca <__kernel_tan+0xf2>
 80050be:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80050c2:	469b      	mov	fp, r3
 80050c4:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80050c8:	4699      	mov	r9, r3
 80050ca:	4652      	mov	r2, sl
 80050cc:	465b      	mov	r3, fp
 80050ce:	a182      	add	r1, pc, #520	@ (adr r1, 80052d8 <__kernel_tan+0x300>)
 80050d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050d4:	f7fb f89c 	bl	8000210 <__aeabi_dsub>
 80050d8:	4642      	mov	r2, r8
 80050da:	464b      	mov	r3, r9
 80050dc:	4604      	mov	r4, r0
 80050de:	460d      	mov	r5, r1
 80050e0:	a17f      	add	r1, pc, #508	@ (adr r1, 80052e0 <__kernel_tan+0x308>)
 80050e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050e6:	f7fb f893 	bl	8000210 <__aeabi_dsub>
 80050ea:	4622      	mov	r2, r4
 80050ec:	462b      	mov	r3, r5
 80050ee:	f7fb f891 	bl	8000214 <__adddf3>
 80050f2:	f04f 0800 	mov.w	r8, #0
 80050f6:	4682      	mov	sl, r0
 80050f8:	468b      	mov	fp, r1
 80050fa:	f04f 0900 	mov.w	r9, #0
 80050fe:	4652      	mov	r2, sl
 8005100:	465b      	mov	r3, fp
 8005102:	4650      	mov	r0, sl
 8005104:	4659      	mov	r1, fp
 8005106:	f7fb fa3b 	bl	8000580 <__aeabi_dmul>
 800510a:	4602      	mov	r2, r0
 800510c:	460b      	mov	r3, r1
 800510e:	e9cd 2300 	strd	r2, r3, [sp]
 8005112:	f7fb fa35 	bl	8000580 <__aeabi_dmul>
 8005116:	e9dd 2300 	ldrd	r2, r3, [sp]
 800511a:	4604      	mov	r4, r0
 800511c:	460d      	mov	r5, r1
 800511e:	4650      	mov	r0, sl
 8005120:	4659      	mov	r1, fp
 8005122:	f7fb fa2d 	bl	8000580 <__aeabi_dmul>
 8005126:	a370      	add	r3, pc, #448	@ (adr r3, 80052e8 <__kernel_tan+0x310>)
 8005128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005130:	4620      	mov	r0, r4
 8005132:	4629      	mov	r1, r5
 8005134:	f7fb fa24 	bl	8000580 <__aeabi_dmul>
 8005138:	a36d      	add	r3, pc, #436	@ (adr r3, 80052f0 <__kernel_tan+0x318>)
 800513a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513e:	f7fb f869 	bl	8000214 <__adddf3>
 8005142:	4622      	mov	r2, r4
 8005144:	462b      	mov	r3, r5
 8005146:	f7fb fa1b 	bl	8000580 <__aeabi_dmul>
 800514a:	a36b      	add	r3, pc, #428	@ (adr r3, 80052f8 <__kernel_tan+0x320>)
 800514c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005150:	f7fb f860 	bl	8000214 <__adddf3>
 8005154:	4622      	mov	r2, r4
 8005156:	462b      	mov	r3, r5
 8005158:	f7fb fa12 	bl	8000580 <__aeabi_dmul>
 800515c:	a368      	add	r3, pc, #416	@ (adr r3, 8005300 <__kernel_tan+0x328>)
 800515e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005162:	f7fb f857 	bl	8000214 <__adddf3>
 8005166:	4622      	mov	r2, r4
 8005168:	462b      	mov	r3, r5
 800516a:	f7fb fa09 	bl	8000580 <__aeabi_dmul>
 800516e:	a366      	add	r3, pc, #408	@ (adr r3, 8005308 <__kernel_tan+0x330>)
 8005170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005174:	f7fb f84e 	bl	8000214 <__adddf3>
 8005178:	4622      	mov	r2, r4
 800517a:	462b      	mov	r3, r5
 800517c:	f7fb fa00 	bl	8000580 <__aeabi_dmul>
 8005180:	a363      	add	r3, pc, #396	@ (adr r3, 8005310 <__kernel_tan+0x338>)
 8005182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005186:	f7fb f845 	bl	8000214 <__adddf3>
 800518a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800518e:	f7fb f9f7 	bl	8000580 <__aeabi_dmul>
 8005192:	a361      	add	r3, pc, #388	@ (adr r3, 8005318 <__kernel_tan+0x340>)
 8005194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005198:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800519c:	4620      	mov	r0, r4
 800519e:	4629      	mov	r1, r5
 80051a0:	f7fb f9ee 	bl	8000580 <__aeabi_dmul>
 80051a4:	a35e      	add	r3, pc, #376	@ (adr r3, 8005320 <__kernel_tan+0x348>)
 80051a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051aa:	f7fb f833 	bl	8000214 <__adddf3>
 80051ae:	4622      	mov	r2, r4
 80051b0:	462b      	mov	r3, r5
 80051b2:	f7fb f9e5 	bl	8000580 <__aeabi_dmul>
 80051b6:	a35c      	add	r3, pc, #368	@ (adr r3, 8005328 <__kernel_tan+0x350>)
 80051b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051bc:	f7fb f82a 	bl	8000214 <__adddf3>
 80051c0:	4622      	mov	r2, r4
 80051c2:	462b      	mov	r3, r5
 80051c4:	f7fb f9dc 	bl	8000580 <__aeabi_dmul>
 80051c8:	a359      	add	r3, pc, #356	@ (adr r3, 8005330 <__kernel_tan+0x358>)
 80051ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ce:	f7fb f821 	bl	8000214 <__adddf3>
 80051d2:	4622      	mov	r2, r4
 80051d4:	462b      	mov	r3, r5
 80051d6:	f7fb f9d3 	bl	8000580 <__aeabi_dmul>
 80051da:	a357      	add	r3, pc, #348	@ (adr r3, 8005338 <__kernel_tan+0x360>)
 80051dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e0:	f7fb f818 	bl	8000214 <__adddf3>
 80051e4:	4622      	mov	r2, r4
 80051e6:	462b      	mov	r3, r5
 80051e8:	f7fb f9ca 	bl	8000580 <__aeabi_dmul>
 80051ec:	a354      	add	r3, pc, #336	@ (adr r3, 8005340 <__kernel_tan+0x368>)
 80051ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f2:	f7fb f80f 	bl	8000214 <__adddf3>
 80051f6:	4602      	mov	r2, r0
 80051f8:	460b      	mov	r3, r1
 80051fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051fe:	f7fb f809 	bl	8000214 <__adddf3>
 8005202:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005206:	f7fb f9bb 	bl	8000580 <__aeabi_dmul>
 800520a:	4642      	mov	r2, r8
 800520c:	464b      	mov	r3, r9
 800520e:	f7fb f801 	bl	8000214 <__adddf3>
 8005212:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005216:	f7fb f9b3 	bl	8000580 <__aeabi_dmul>
 800521a:	4642      	mov	r2, r8
 800521c:	464b      	mov	r3, r9
 800521e:	f7fa fff9 	bl	8000214 <__adddf3>
 8005222:	a349      	add	r3, pc, #292	@ (adr r3, 8005348 <__kernel_tan+0x370>)
 8005224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005228:	4604      	mov	r4, r0
 800522a:	460d      	mov	r5, r1
 800522c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005230:	f7fb f9a6 	bl	8000580 <__aeabi_dmul>
 8005234:	4622      	mov	r2, r4
 8005236:	462b      	mov	r3, r5
 8005238:	f7fa ffec 	bl	8000214 <__adddf3>
 800523c:	e9cd 0100 	strd	r0, r1, [sp]
 8005240:	460b      	mov	r3, r1
 8005242:	4602      	mov	r2, r0
 8005244:	4659      	mov	r1, fp
 8005246:	4650      	mov	r0, sl
 8005248:	f7fa ffe4 	bl	8000214 <__adddf3>
 800524c:	4b43      	ldr	r3, [pc, #268]	@ (800535c <__kernel_tan+0x384>)
 800524e:	429f      	cmp	r7, r3
 8005250:	4604      	mov	r4, r0
 8005252:	460d      	mov	r5, r1
 8005254:	f240 8084 	bls.w	8005360 <__kernel_tan+0x388>
 8005258:	4630      	mov	r0, r6
 800525a:	f7fb f927 	bl	80004ac <__aeabi_i2d>
 800525e:	4622      	mov	r2, r4
 8005260:	4680      	mov	r8, r0
 8005262:	4689      	mov	r9, r1
 8005264:	462b      	mov	r3, r5
 8005266:	4620      	mov	r0, r4
 8005268:	4629      	mov	r1, r5
 800526a:	f7fb f989 	bl	8000580 <__aeabi_dmul>
 800526e:	4642      	mov	r2, r8
 8005270:	4606      	mov	r6, r0
 8005272:	460f      	mov	r7, r1
 8005274:	464b      	mov	r3, r9
 8005276:	4620      	mov	r0, r4
 8005278:	4629      	mov	r1, r5
 800527a:	f7fa ffcb 	bl	8000214 <__adddf3>
 800527e:	4602      	mov	r2, r0
 8005280:	460b      	mov	r3, r1
 8005282:	4630      	mov	r0, r6
 8005284:	4639      	mov	r1, r7
 8005286:	f7fb faa5 	bl	80007d4 <__aeabi_ddiv>
 800528a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800528e:	f7fa ffbf 	bl	8000210 <__aeabi_dsub>
 8005292:	4602      	mov	r2, r0
 8005294:	460b      	mov	r3, r1
 8005296:	4650      	mov	r0, sl
 8005298:	4659      	mov	r1, fp
 800529a:	f7fa ffb9 	bl	8000210 <__aeabi_dsub>
 800529e:	4602      	mov	r2, r0
 80052a0:	460b      	mov	r3, r1
 80052a2:	f7fa ffb7 	bl	8000214 <__adddf3>
 80052a6:	4602      	mov	r2, r0
 80052a8:	460b      	mov	r3, r1
 80052aa:	4640      	mov	r0, r8
 80052ac:	4649      	mov	r1, r9
 80052ae:	f7fa ffaf 	bl	8000210 <__aeabi_dsub>
 80052b2:	9b02      	ldr	r3, [sp, #8]
 80052b4:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 80052b8:	f00a 0a02 	and.w	sl, sl, #2
 80052bc:	4604      	mov	r4, r0
 80052be:	f1ca 0001 	rsb	r0, sl, #1
 80052c2:	460d      	mov	r5, r1
 80052c4:	f7fb f8f2 	bl	80004ac <__aeabi_i2d>
 80052c8:	4602      	mov	r2, r0
 80052ca:	460b      	mov	r3, r1
 80052cc:	4620      	mov	r0, r4
 80052ce:	4629      	mov	r1, r5
 80052d0:	f7fb f956 	bl	8000580 <__aeabi_dmul>
 80052d4:	e6a5      	b.n	8005022 <__kernel_tan+0x4a>
 80052d6:	bf00      	nop
 80052d8:	54442d18 	.word	0x54442d18
 80052dc:	3fe921fb 	.word	0x3fe921fb
 80052e0:	33145c07 	.word	0x33145c07
 80052e4:	3c81a626 	.word	0x3c81a626
 80052e8:	74bf7ad4 	.word	0x74bf7ad4
 80052ec:	3efb2a70 	.word	0x3efb2a70
 80052f0:	32f0a7e9 	.word	0x32f0a7e9
 80052f4:	3f12b80f 	.word	0x3f12b80f
 80052f8:	1a8d1068 	.word	0x1a8d1068
 80052fc:	3f3026f7 	.word	0x3f3026f7
 8005300:	fee08315 	.word	0xfee08315
 8005304:	3f57dbc8 	.word	0x3f57dbc8
 8005308:	e96e8493 	.word	0xe96e8493
 800530c:	3f8226e3 	.word	0x3f8226e3
 8005310:	1bb341fe 	.word	0x1bb341fe
 8005314:	3faba1ba 	.word	0x3faba1ba
 8005318:	db605373 	.word	0xdb605373
 800531c:	bef375cb 	.word	0xbef375cb
 8005320:	a03792a6 	.word	0xa03792a6
 8005324:	3f147e88 	.word	0x3f147e88
 8005328:	f2f26501 	.word	0xf2f26501
 800532c:	3f4344d8 	.word	0x3f4344d8
 8005330:	c9560328 	.word	0xc9560328
 8005334:	3f6d6d22 	.word	0x3f6d6d22
 8005338:	8406d637 	.word	0x8406d637
 800533c:	3f9664f4 	.word	0x3f9664f4
 8005340:	1110fe7a 	.word	0x1110fe7a
 8005344:	3fc11111 	.word	0x3fc11111
 8005348:	55555563 	.word	0x55555563
 800534c:	3fd55555 	.word	0x3fd55555
 8005350:	3e2fffff 	.word	0x3e2fffff
 8005354:	3ff00000 	.word	0x3ff00000
 8005358:	bff00000 	.word	0xbff00000
 800535c:	3fe59427 	.word	0x3fe59427
 8005360:	2e01      	cmp	r6, #1
 8005362:	d033      	beq.n	80053cc <__kernel_tan+0x3f4>
 8005364:	f04f 0800 	mov.w	r8, #0
 8005368:	4689      	mov	r9, r1
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	2000      	movs	r0, #0
 8005370:	4918      	ldr	r1, [pc, #96]	@ (80053d4 <__kernel_tan+0x3fc>)
 8005372:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8005376:	f7fb fa2d 	bl	80007d4 <__aeabi_ddiv>
 800537a:	4652      	mov	r2, sl
 800537c:	460f      	mov	r7, r1
 800537e:	465b      	mov	r3, fp
 8005380:	4606      	mov	r6, r0
 8005382:	460d      	mov	r5, r1
 8005384:	4640      	mov	r0, r8
 8005386:	4649      	mov	r1, r9
 8005388:	f7fa ff42 	bl	8000210 <__aeabi_dsub>
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005394:	f7fa ff3c 	bl	8000210 <__aeabi_dsub>
 8005398:	4642      	mov	r2, r8
 800539a:	463b      	mov	r3, r7
 800539c:	f7fb f8f0 	bl	8000580 <__aeabi_dmul>
 80053a0:	4642      	mov	r2, r8
 80053a2:	4682      	mov	sl, r0
 80053a4:	468b      	mov	fp, r1
 80053a6:	463b      	mov	r3, r7
 80053a8:	4640      	mov	r0, r8
 80053aa:	4649      	mov	r1, r9
 80053ac:	f7fb f8e8 	bl	8000580 <__aeabi_dmul>
 80053b0:	4b09      	ldr	r3, [pc, #36]	@ (80053d8 <__kernel_tan+0x400>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	f7fa ff2e 	bl	8000214 <__adddf3>
 80053b8:	4602      	mov	r2, r0
 80053ba:	460b      	mov	r3, r1
 80053bc:	4650      	mov	r0, sl
 80053be:	4659      	mov	r1, fp
 80053c0:	f7fa ff28 	bl	8000214 <__adddf3>
 80053c4:	4644      	mov	r4, r8
 80053c6:	4632      	mov	r2, r6
 80053c8:	463b      	mov	r3, r7
 80053ca:	e66b      	b.n	80050a4 <__kernel_tan+0xcc>
 80053cc:	4682      	mov	sl, r0
 80053ce:	468b      	mov	fp, r1
 80053d0:	e629      	b.n	8005026 <__kernel_tan+0x4e>
 80053d2:	bf00      	nop
 80053d4:	bff00000 	.word	0xbff00000
 80053d8:	3ff00000 	.word	0x3ff00000
 80053dc:	00000000 	.word	0x00000000

080053e0 <__ieee754_rem_pio2>:
 80053e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e4:	ec57 6b10 	vmov	r6, r7, d0
 80053e8:	4bc5      	ldr	r3, [pc, #788]	@ (8005700 <__ieee754_rem_pio2+0x320>)
 80053ea:	b08d      	sub	sp, #52	@ 0x34
 80053ec:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80053f0:	4598      	cmp	r8, r3
 80053f2:	4604      	mov	r4, r0
 80053f4:	9704      	str	r7, [sp, #16]
 80053f6:	d807      	bhi.n	8005408 <__ieee754_rem_pio2+0x28>
 80053f8:	2200      	movs	r2, #0
 80053fa:	2300      	movs	r3, #0
 80053fc:	ed80 0b00 	vstr	d0, [r0]
 8005400:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005404:	2500      	movs	r5, #0
 8005406:	e028      	b.n	800545a <__ieee754_rem_pio2+0x7a>
 8005408:	4bbe      	ldr	r3, [pc, #760]	@ (8005704 <__ieee754_rem_pio2+0x324>)
 800540a:	4598      	cmp	r8, r3
 800540c:	d878      	bhi.n	8005500 <__ieee754_rem_pio2+0x120>
 800540e:	9b04      	ldr	r3, [sp, #16]
 8005410:	4dbd      	ldr	r5, [pc, #756]	@ (8005708 <__ieee754_rem_pio2+0x328>)
 8005412:	2b00      	cmp	r3, #0
 8005414:	4630      	mov	r0, r6
 8005416:	a3ac      	add	r3, pc, #688	@ (adr r3, 80056c8 <__ieee754_rem_pio2+0x2e8>)
 8005418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541c:	4639      	mov	r1, r7
 800541e:	dd38      	ble.n	8005492 <__ieee754_rem_pio2+0xb2>
 8005420:	f7fa fef6 	bl	8000210 <__aeabi_dsub>
 8005424:	45a8      	cmp	r8, r5
 8005426:	4606      	mov	r6, r0
 8005428:	460f      	mov	r7, r1
 800542a:	d01a      	beq.n	8005462 <__ieee754_rem_pio2+0x82>
 800542c:	a3a8      	add	r3, pc, #672	@ (adr r3, 80056d0 <__ieee754_rem_pio2+0x2f0>)
 800542e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005432:	f7fa feed 	bl	8000210 <__aeabi_dsub>
 8005436:	4602      	mov	r2, r0
 8005438:	460b      	mov	r3, r1
 800543a:	4680      	mov	r8, r0
 800543c:	4689      	mov	r9, r1
 800543e:	4630      	mov	r0, r6
 8005440:	4639      	mov	r1, r7
 8005442:	f7fa fee5 	bl	8000210 <__aeabi_dsub>
 8005446:	a3a2      	add	r3, pc, #648	@ (adr r3, 80056d0 <__ieee754_rem_pio2+0x2f0>)
 8005448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544c:	f7fa fee0 	bl	8000210 <__aeabi_dsub>
 8005450:	e9c4 8900 	strd	r8, r9, [r4]
 8005454:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005458:	2501      	movs	r5, #1
 800545a:	4628      	mov	r0, r5
 800545c:	b00d      	add	sp, #52	@ 0x34
 800545e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005462:	a39d      	add	r3, pc, #628	@ (adr r3, 80056d8 <__ieee754_rem_pio2+0x2f8>)
 8005464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005468:	f7fa fed2 	bl	8000210 <__aeabi_dsub>
 800546c:	a39c      	add	r3, pc, #624	@ (adr r3, 80056e0 <__ieee754_rem_pio2+0x300>)
 800546e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005472:	4606      	mov	r6, r0
 8005474:	460f      	mov	r7, r1
 8005476:	f7fa fecb 	bl	8000210 <__aeabi_dsub>
 800547a:	4602      	mov	r2, r0
 800547c:	460b      	mov	r3, r1
 800547e:	4680      	mov	r8, r0
 8005480:	4689      	mov	r9, r1
 8005482:	4630      	mov	r0, r6
 8005484:	4639      	mov	r1, r7
 8005486:	f7fa fec3 	bl	8000210 <__aeabi_dsub>
 800548a:	a395      	add	r3, pc, #596	@ (adr r3, 80056e0 <__ieee754_rem_pio2+0x300>)
 800548c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005490:	e7dc      	b.n	800544c <__ieee754_rem_pio2+0x6c>
 8005492:	f7fa febf 	bl	8000214 <__adddf3>
 8005496:	45a8      	cmp	r8, r5
 8005498:	4606      	mov	r6, r0
 800549a:	460f      	mov	r7, r1
 800549c:	d018      	beq.n	80054d0 <__ieee754_rem_pio2+0xf0>
 800549e:	a38c      	add	r3, pc, #560	@ (adr r3, 80056d0 <__ieee754_rem_pio2+0x2f0>)
 80054a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a4:	f7fa feb6 	bl	8000214 <__adddf3>
 80054a8:	4602      	mov	r2, r0
 80054aa:	460b      	mov	r3, r1
 80054ac:	4680      	mov	r8, r0
 80054ae:	4689      	mov	r9, r1
 80054b0:	4630      	mov	r0, r6
 80054b2:	4639      	mov	r1, r7
 80054b4:	f7fa feac 	bl	8000210 <__aeabi_dsub>
 80054b8:	a385      	add	r3, pc, #532	@ (adr r3, 80056d0 <__ieee754_rem_pio2+0x2f0>)
 80054ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054be:	f7fa fea9 	bl	8000214 <__adddf3>
 80054c2:	f04f 35ff 	mov.w	r5, #4294967295
 80054c6:	e9c4 8900 	strd	r8, r9, [r4]
 80054ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80054ce:	e7c4      	b.n	800545a <__ieee754_rem_pio2+0x7a>
 80054d0:	a381      	add	r3, pc, #516	@ (adr r3, 80056d8 <__ieee754_rem_pio2+0x2f8>)
 80054d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d6:	f7fa fe9d 	bl	8000214 <__adddf3>
 80054da:	a381      	add	r3, pc, #516	@ (adr r3, 80056e0 <__ieee754_rem_pio2+0x300>)
 80054dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e0:	4606      	mov	r6, r0
 80054e2:	460f      	mov	r7, r1
 80054e4:	f7fa fe96 	bl	8000214 <__adddf3>
 80054e8:	4602      	mov	r2, r0
 80054ea:	460b      	mov	r3, r1
 80054ec:	4680      	mov	r8, r0
 80054ee:	4689      	mov	r9, r1
 80054f0:	4630      	mov	r0, r6
 80054f2:	4639      	mov	r1, r7
 80054f4:	f7fa fe8c 	bl	8000210 <__aeabi_dsub>
 80054f8:	a379      	add	r3, pc, #484	@ (adr r3, 80056e0 <__ieee754_rem_pio2+0x300>)
 80054fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fe:	e7de      	b.n	80054be <__ieee754_rem_pio2+0xde>
 8005500:	4b82      	ldr	r3, [pc, #520]	@ (800570c <__ieee754_rem_pio2+0x32c>)
 8005502:	4598      	cmp	r8, r3
 8005504:	f200 80d1 	bhi.w	80056aa <__ieee754_rem_pio2+0x2ca>
 8005508:	f000 f966 	bl	80057d8 <fabs>
 800550c:	ec57 6b10 	vmov	r6, r7, d0
 8005510:	a375      	add	r3, pc, #468	@ (adr r3, 80056e8 <__ieee754_rem_pio2+0x308>)
 8005512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005516:	4630      	mov	r0, r6
 8005518:	4639      	mov	r1, r7
 800551a:	f7fb f831 	bl	8000580 <__aeabi_dmul>
 800551e:	4b7c      	ldr	r3, [pc, #496]	@ (8005710 <__ieee754_rem_pio2+0x330>)
 8005520:	2200      	movs	r2, #0
 8005522:	f7fa fe77 	bl	8000214 <__adddf3>
 8005526:	f7fb fac5 	bl	8000ab4 <__aeabi_d2iz>
 800552a:	4605      	mov	r5, r0
 800552c:	f7fa ffbe 	bl	80004ac <__aeabi_i2d>
 8005530:	4602      	mov	r2, r0
 8005532:	460b      	mov	r3, r1
 8005534:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005538:	a363      	add	r3, pc, #396	@ (adr r3, 80056c8 <__ieee754_rem_pio2+0x2e8>)
 800553a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553e:	f7fb f81f 	bl	8000580 <__aeabi_dmul>
 8005542:	4602      	mov	r2, r0
 8005544:	460b      	mov	r3, r1
 8005546:	4630      	mov	r0, r6
 8005548:	4639      	mov	r1, r7
 800554a:	f7fa fe61 	bl	8000210 <__aeabi_dsub>
 800554e:	a360      	add	r3, pc, #384	@ (adr r3, 80056d0 <__ieee754_rem_pio2+0x2f0>)
 8005550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005554:	4682      	mov	sl, r0
 8005556:	468b      	mov	fp, r1
 8005558:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800555c:	f7fb f810 	bl	8000580 <__aeabi_dmul>
 8005560:	2d1f      	cmp	r5, #31
 8005562:	4606      	mov	r6, r0
 8005564:	460f      	mov	r7, r1
 8005566:	dc0c      	bgt.n	8005582 <__ieee754_rem_pio2+0x1a2>
 8005568:	4b6a      	ldr	r3, [pc, #424]	@ (8005714 <__ieee754_rem_pio2+0x334>)
 800556a:	1e6a      	subs	r2, r5, #1
 800556c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005570:	4543      	cmp	r3, r8
 8005572:	d006      	beq.n	8005582 <__ieee754_rem_pio2+0x1a2>
 8005574:	4632      	mov	r2, r6
 8005576:	463b      	mov	r3, r7
 8005578:	4650      	mov	r0, sl
 800557a:	4659      	mov	r1, fp
 800557c:	f7fa fe48 	bl	8000210 <__aeabi_dsub>
 8005580:	e00e      	b.n	80055a0 <__ieee754_rem_pio2+0x1c0>
 8005582:	463b      	mov	r3, r7
 8005584:	4632      	mov	r2, r6
 8005586:	4650      	mov	r0, sl
 8005588:	4659      	mov	r1, fp
 800558a:	f7fa fe41 	bl	8000210 <__aeabi_dsub>
 800558e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005592:	9305      	str	r3, [sp, #20]
 8005594:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005598:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800559c:	2b10      	cmp	r3, #16
 800559e:	dc02      	bgt.n	80055a6 <__ieee754_rem_pio2+0x1c6>
 80055a0:	e9c4 0100 	strd	r0, r1, [r4]
 80055a4:	e039      	b.n	800561a <__ieee754_rem_pio2+0x23a>
 80055a6:	a34c      	add	r3, pc, #304	@ (adr r3, 80056d8 <__ieee754_rem_pio2+0x2f8>)
 80055a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055b0:	f7fa ffe6 	bl	8000580 <__aeabi_dmul>
 80055b4:	4606      	mov	r6, r0
 80055b6:	460f      	mov	r7, r1
 80055b8:	4602      	mov	r2, r0
 80055ba:	460b      	mov	r3, r1
 80055bc:	4650      	mov	r0, sl
 80055be:	4659      	mov	r1, fp
 80055c0:	f7fa fe26 	bl	8000210 <__aeabi_dsub>
 80055c4:	4602      	mov	r2, r0
 80055c6:	460b      	mov	r3, r1
 80055c8:	4680      	mov	r8, r0
 80055ca:	4689      	mov	r9, r1
 80055cc:	4650      	mov	r0, sl
 80055ce:	4659      	mov	r1, fp
 80055d0:	f7fa fe1e 	bl	8000210 <__aeabi_dsub>
 80055d4:	4632      	mov	r2, r6
 80055d6:	463b      	mov	r3, r7
 80055d8:	f7fa fe1a 	bl	8000210 <__aeabi_dsub>
 80055dc:	a340      	add	r3, pc, #256	@ (adr r3, 80056e0 <__ieee754_rem_pio2+0x300>)
 80055de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e2:	4606      	mov	r6, r0
 80055e4:	460f      	mov	r7, r1
 80055e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055ea:	f7fa ffc9 	bl	8000580 <__aeabi_dmul>
 80055ee:	4632      	mov	r2, r6
 80055f0:	463b      	mov	r3, r7
 80055f2:	f7fa fe0d 	bl	8000210 <__aeabi_dsub>
 80055f6:	4602      	mov	r2, r0
 80055f8:	460b      	mov	r3, r1
 80055fa:	4606      	mov	r6, r0
 80055fc:	460f      	mov	r7, r1
 80055fe:	4640      	mov	r0, r8
 8005600:	4649      	mov	r1, r9
 8005602:	f7fa fe05 	bl	8000210 <__aeabi_dsub>
 8005606:	9a05      	ldr	r2, [sp, #20]
 8005608:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b31      	cmp	r3, #49	@ 0x31
 8005610:	dc20      	bgt.n	8005654 <__ieee754_rem_pio2+0x274>
 8005612:	e9c4 0100 	strd	r0, r1, [r4]
 8005616:	46c2      	mov	sl, r8
 8005618:	46cb      	mov	fp, r9
 800561a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800561e:	4650      	mov	r0, sl
 8005620:	4642      	mov	r2, r8
 8005622:	464b      	mov	r3, r9
 8005624:	4659      	mov	r1, fp
 8005626:	f7fa fdf3 	bl	8000210 <__aeabi_dsub>
 800562a:	463b      	mov	r3, r7
 800562c:	4632      	mov	r2, r6
 800562e:	f7fa fdef 	bl	8000210 <__aeabi_dsub>
 8005632:	9b04      	ldr	r3, [sp, #16]
 8005634:	2b00      	cmp	r3, #0
 8005636:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800563a:	f6bf af0e 	bge.w	800545a <__ieee754_rem_pio2+0x7a>
 800563e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8005642:	6063      	str	r3, [r4, #4]
 8005644:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005648:	f8c4 8000 	str.w	r8, [r4]
 800564c:	60a0      	str	r0, [r4, #8]
 800564e:	60e3      	str	r3, [r4, #12]
 8005650:	426d      	negs	r5, r5
 8005652:	e702      	b.n	800545a <__ieee754_rem_pio2+0x7a>
 8005654:	a326      	add	r3, pc, #152	@ (adr r3, 80056f0 <__ieee754_rem_pio2+0x310>)
 8005656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800565e:	f7fa ff8f 	bl	8000580 <__aeabi_dmul>
 8005662:	4606      	mov	r6, r0
 8005664:	460f      	mov	r7, r1
 8005666:	4602      	mov	r2, r0
 8005668:	460b      	mov	r3, r1
 800566a:	4640      	mov	r0, r8
 800566c:	4649      	mov	r1, r9
 800566e:	f7fa fdcf 	bl	8000210 <__aeabi_dsub>
 8005672:	4602      	mov	r2, r0
 8005674:	460b      	mov	r3, r1
 8005676:	4682      	mov	sl, r0
 8005678:	468b      	mov	fp, r1
 800567a:	4640      	mov	r0, r8
 800567c:	4649      	mov	r1, r9
 800567e:	f7fa fdc7 	bl	8000210 <__aeabi_dsub>
 8005682:	4632      	mov	r2, r6
 8005684:	463b      	mov	r3, r7
 8005686:	f7fa fdc3 	bl	8000210 <__aeabi_dsub>
 800568a:	a31b      	add	r3, pc, #108	@ (adr r3, 80056f8 <__ieee754_rem_pio2+0x318>)
 800568c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005690:	4606      	mov	r6, r0
 8005692:	460f      	mov	r7, r1
 8005694:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005698:	f7fa ff72 	bl	8000580 <__aeabi_dmul>
 800569c:	4632      	mov	r2, r6
 800569e:	463b      	mov	r3, r7
 80056a0:	f7fa fdb6 	bl	8000210 <__aeabi_dsub>
 80056a4:	4606      	mov	r6, r0
 80056a6:	460f      	mov	r7, r1
 80056a8:	e764      	b.n	8005574 <__ieee754_rem_pio2+0x194>
 80056aa:	4b1b      	ldr	r3, [pc, #108]	@ (8005718 <__ieee754_rem_pio2+0x338>)
 80056ac:	4598      	cmp	r8, r3
 80056ae:	d935      	bls.n	800571c <__ieee754_rem_pio2+0x33c>
 80056b0:	4632      	mov	r2, r6
 80056b2:	463b      	mov	r3, r7
 80056b4:	4630      	mov	r0, r6
 80056b6:	4639      	mov	r1, r7
 80056b8:	f7fa fdaa 	bl	8000210 <__aeabi_dsub>
 80056bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80056c0:	e9c4 0100 	strd	r0, r1, [r4]
 80056c4:	e69e      	b.n	8005404 <__ieee754_rem_pio2+0x24>
 80056c6:	bf00      	nop
 80056c8:	54400000 	.word	0x54400000
 80056cc:	3ff921fb 	.word	0x3ff921fb
 80056d0:	1a626331 	.word	0x1a626331
 80056d4:	3dd0b461 	.word	0x3dd0b461
 80056d8:	1a600000 	.word	0x1a600000
 80056dc:	3dd0b461 	.word	0x3dd0b461
 80056e0:	2e037073 	.word	0x2e037073
 80056e4:	3ba3198a 	.word	0x3ba3198a
 80056e8:	6dc9c883 	.word	0x6dc9c883
 80056ec:	3fe45f30 	.word	0x3fe45f30
 80056f0:	2e000000 	.word	0x2e000000
 80056f4:	3ba3198a 	.word	0x3ba3198a
 80056f8:	252049c1 	.word	0x252049c1
 80056fc:	397b839a 	.word	0x397b839a
 8005700:	3fe921fb 	.word	0x3fe921fb
 8005704:	4002d97b 	.word	0x4002d97b
 8005708:	3ff921fb 	.word	0x3ff921fb
 800570c:	413921fb 	.word	0x413921fb
 8005710:	3fe00000 	.word	0x3fe00000
 8005714:	080065cc 	.word	0x080065cc
 8005718:	7fefffff 	.word	0x7fefffff
 800571c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005720:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8005724:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005728:	4630      	mov	r0, r6
 800572a:	460f      	mov	r7, r1
 800572c:	f7fb f9c2 	bl	8000ab4 <__aeabi_d2iz>
 8005730:	f7fa febc 	bl	80004ac <__aeabi_i2d>
 8005734:	4602      	mov	r2, r0
 8005736:	460b      	mov	r3, r1
 8005738:	4630      	mov	r0, r6
 800573a:	4639      	mov	r1, r7
 800573c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005740:	f7fa fd66 	bl	8000210 <__aeabi_dsub>
 8005744:	4b22      	ldr	r3, [pc, #136]	@ (80057d0 <__ieee754_rem_pio2+0x3f0>)
 8005746:	2200      	movs	r2, #0
 8005748:	f7fa ff1a 	bl	8000580 <__aeabi_dmul>
 800574c:	460f      	mov	r7, r1
 800574e:	4606      	mov	r6, r0
 8005750:	f7fb f9b0 	bl	8000ab4 <__aeabi_d2iz>
 8005754:	f7fa feaa 	bl	80004ac <__aeabi_i2d>
 8005758:	4602      	mov	r2, r0
 800575a:	460b      	mov	r3, r1
 800575c:	4630      	mov	r0, r6
 800575e:	4639      	mov	r1, r7
 8005760:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005764:	f7fa fd54 	bl	8000210 <__aeabi_dsub>
 8005768:	4b19      	ldr	r3, [pc, #100]	@ (80057d0 <__ieee754_rem_pio2+0x3f0>)
 800576a:	2200      	movs	r2, #0
 800576c:	f7fa ff08 	bl	8000580 <__aeabi_dmul>
 8005770:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8005774:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8005778:	f04f 0803 	mov.w	r8, #3
 800577c:	2600      	movs	r6, #0
 800577e:	2700      	movs	r7, #0
 8005780:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005784:	4632      	mov	r2, r6
 8005786:	463b      	mov	r3, r7
 8005788:	46c2      	mov	sl, r8
 800578a:	f108 38ff 	add.w	r8, r8, #4294967295
 800578e:	f7fb f95f 	bl	8000a50 <__aeabi_dcmpeq>
 8005792:	2800      	cmp	r0, #0
 8005794:	d1f4      	bne.n	8005780 <__ieee754_rem_pio2+0x3a0>
 8005796:	4b0f      	ldr	r3, [pc, #60]	@ (80057d4 <__ieee754_rem_pio2+0x3f4>)
 8005798:	9301      	str	r3, [sp, #4]
 800579a:	2302      	movs	r3, #2
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	462a      	mov	r2, r5
 80057a0:	4653      	mov	r3, sl
 80057a2:	4621      	mov	r1, r4
 80057a4:	a806      	add	r0, sp, #24
 80057a6:	f000 f89f 	bl	80058e8 <__kernel_rem_pio2>
 80057aa:	9b04      	ldr	r3, [sp, #16]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	4605      	mov	r5, r0
 80057b0:	f6bf ae53 	bge.w	800545a <__ieee754_rem_pio2+0x7a>
 80057b4:	e9d4 2100 	ldrd	r2, r1, [r4]
 80057b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80057bc:	e9c4 2300 	strd	r2, r3, [r4]
 80057c0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80057c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80057c8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80057cc:	e740      	b.n	8005650 <__ieee754_rem_pio2+0x270>
 80057ce:	bf00      	nop
 80057d0:	41700000 	.word	0x41700000
 80057d4:	0800664c 	.word	0x0800664c

080057d8 <fabs>:
 80057d8:	ec51 0b10 	vmov	r0, r1, d0
 80057dc:	4602      	mov	r2, r0
 80057de:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80057e2:	ec43 2b10 	vmov	d0, r2, r3
 80057e6:	4770      	bx	lr

080057e8 <scalbn>:
 80057e8:	b570      	push	{r4, r5, r6, lr}
 80057ea:	ec55 4b10 	vmov	r4, r5, d0
 80057ee:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80057f2:	4606      	mov	r6, r0
 80057f4:	462b      	mov	r3, r5
 80057f6:	b991      	cbnz	r1, 800581e <scalbn+0x36>
 80057f8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80057fc:	4323      	orrs	r3, r4
 80057fe:	d03d      	beq.n	800587c <scalbn+0x94>
 8005800:	4b35      	ldr	r3, [pc, #212]	@ (80058d8 <scalbn+0xf0>)
 8005802:	4620      	mov	r0, r4
 8005804:	4629      	mov	r1, r5
 8005806:	2200      	movs	r2, #0
 8005808:	f7fa feba 	bl	8000580 <__aeabi_dmul>
 800580c:	4b33      	ldr	r3, [pc, #204]	@ (80058dc <scalbn+0xf4>)
 800580e:	429e      	cmp	r6, r3
 8005810:	4604      	mov	r4, r0
 8005812:	460d      	mov	r5, r1
 8005814:	da0f      	bge.n	8005836 <scalbn+0x4e>
 8005816:	a328      	add	r3, pc, #160	@ (adr r3, 80058b8 <scalbn+0xd0>)
 8005818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581c:	e01e      	b.n	800585c <scalbn+0x74>
 800581e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8005822:	4291      	cmp	r1, r2
 8005824:	d10b      	bne.n	800583e <scalbn+0x56>
 8005826:	4622      	mov	r2, r4
 8005828:	4620      	mov	r0, r4
 800582a:	4629      	mov	r1, r5
 800582c:	f7fa fcf2 	bl	8000214 <__adddf3>
 8005830:	4604      	mov	r4, r0
 8005832:	460d      	mov	r5, r1
 8005834:	e022      	b.n	800587c <scalbn+0x94>
 8005836:	460b      	mov	r3, r1
 8005838:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800583c:	3936      	subs	r1, #54	@ 0x36
 800583e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8005842:	4296      	cmp	r6, r2
 8005844:	dd0d      	ble.n	8005862 <scalbn+0x7a>
 8005846:	2d00      	cmp	r5, #0
 8005848:	a11d      	add	r1, pc, #116	@ (adr r1, 80058c0 <scalbn+0xd8>)
 800584a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800584e:	da02      	bge.n	8005856 <scalbn+0x6e>
 8005850:	a11d      	add	r1, pc, #116	@ (adr r1, 80058c8 <scalbn+0xe0>)
 8005852:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005856:	a31a      	add	r3, pc, #104	@ (adr r3, 80058c0 <scalbn+0xd8>)
 8005858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585c:	f7fa fe90 	bl	8000580 <__aeabi_dmul>
 8005860:	e7e6      	b.n	8005830 <scalbn+0x48>
 8005862:	1872      	adds	r2, r6, r1
 8005864:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8005868:	428a      	cmp	r2, r1
 800586a:	dcec      	bgt.n	8005846 <scalbn+0x5e>
 800586c:	2a00      	cmp	r2, #0
 800586e:	dd08      	ble.n	8005882 <scalbn+0x9a>
 8005870:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005874:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005878:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800587c:	ec45 4b10 	vmov	d0, r4, r5
 8005880:	bd70      	pop	{r4, r5, r6, pc}
 8005882:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8005886:	da08      	bge.n	800589a <scalbn+0xb2>
 8005888:	2d00      	cmp	r5, #0
 800588a:	a10b      	add	r1, pc, #44	@ (adr r1, 80058b8 <scalbn+0xd0>)
 800588c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005890:	dac1      	bge.n	8005816 <scalbn+0x2e>
 8005892:	a10f      	add	r1, pc, #60	@ (adr r1, 80058d0 <scalbn+0xe8>)
 8005894:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005898:	e7bd      	b.n	8005816 <scalbn+0x2e>
 800589a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800589e:	3236      	adds	r2, #54	@ 0x36
 80058a0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80058a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80058a8:	4620      	mov	r0, r4
 80058aa:	4b0d      	ldr	r3, [pc, #52]	@ (80058e0 <scalbn+0xf8>)
 80058ac:	4629      	mov	r1, r5
 80058ae:	2200      	movs	r2, #0
 80058b0:	e7d4      	b.n	800585c <scalbn+0x74>
 80058b2:	bf00      	nop
 80058b4:	f3af 8000 	nop.w
 80058b8:	c2f8f359 	.word	0xc2f8f359
 80058bc:	01a56e1f 	.word	0x01a56e1f
 80058c0:	8800759c 	.word	0x8800759c
 80058c4:	7e37e43c 	.word	0x7e37e43c
 80058c8:	8800759c 	.word	0x8800759c
 80058cc:	fe37e43c 	.word	0xfe37e43c
 80058d0:	c2f8f359 	.word	0xc2f8f359
 80058d4:	81a56e1f 	.word	0x81a56e1f
 80058d8:	43500000 	.word	0x43500000
 80058dc:	ffff3cb0 	.word	0xffff3cb0
 80058e0:	3c900000 	.word	0x3c900000
 80058e4:	00000000 	.word	0x00000000

080058e8 <__kernel_rem_pio2>:
 80058e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ec:	ed2d 8b02 	vpush	{d8}
 80058f0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80058f4:	f112 0f14 	cmn.w	r2, #20
 80058f8:	9306      	str	r3, [sp, #24]
 80058fa:	9104      	str	r1, [sp, #16]
 80058fc:	4bbe      	ldr	r3, [pc, #760]	@ (8005bf8 <__kernel_rem_pio2+0x310>)
 80058fe:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8005900:	9008      	str	r0, [sp, #32]
 8005902:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005906:	9300      	str	r3, [sp, #0]
 8005908:	9b06      	ldr	r3, [sp, #24]
 800590a:	f103 33ff 	add.w	r3, r3, #4294967295
 800590e:	bfa8      	it	ge
 8005910:	1ed4      	subge	r4, r2, #3
 8005912:	9305      	str	r3, [sp, #20]
 8005914:	bfb2      	itee	lt
 8005916:	2400      	movlt	r4, #0
 8005918:	2318      	movge	r3, #24
 800591a:	fb94 f4f3 	sdivge	r4, r4, r3
 800591e:	f06f 0317 	mvn.w	r3, #23
 8005922:	fb04 3303 	mla	r3, r4, r3, r3
 8005926:	eb03 0b02 	add.w	fp, r3, r2
 800592a:	9b00      	ldr	r3, [sp, #0]
 800592c:	9a05      	ldr	r2, [sp, #20]
 800592e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8005be8 <__kernel_rem_pio2+0x300>
 8005932:	eb03 0802 	add.w	r8, r3, r2
 8005936:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8005938:	1aa7      	subs	r7, r4, r2
 800593a:	ae20      	add	r6, sp, #128	@ 0x80
 800593c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005940:	2500      	movs	r5, #0
 8005942:	4545      	cmp	r5, r8
 8005944:	dd13      	ble.n	800596e <__kernel_rem_pio2+0x86>
 8005946:	9b06      	ldr	r3, [sp, #24]
 8005948:	aa20      	add	r2, sp, #128	@ 0x80
 800594a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800594e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8005952:	f04f 0800 	mov.w	r8, #0
 8005956:	9b00      	ldr	r3, [sp, #0]
 8005958:	4598      	cmp	r8, r3
 800595a:	dc31      	bgt.n	80059c0 <__kernel_rem_pio2+0xd8>
 800595c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8005be8 <__kernel_rem_pio2+0x300>
 8005960:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005964:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005968:	462f      	mov	r7, r5
 800596a:	2600      	movs	r6, #0
 800596c:	e01b      	b.n	80059a6 <__kernel_rem_pio2+0xbe>
 800596e:	42ef      	cmn	r7, r5
 8005970:	d407      	bmi.n	8005982 <__kernel_rem_pio2+0x9a>
 8005972:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005976:	f7fa fd99 	bl	80004ac <__aeabi_i2d>
 800597a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800597e:	3501      	adds	r5, #1
 8005980:	e7df      	b.n	8005942 <__kernel_rem_pio2+0x5a>
 8005982:	ec51 0b18 	vmov	r0, r1, d8
 8005986:	e7f8      	b.n	800597a <__kernel_rem_pio2+0x92>
 8005988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800598c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005990:	f7fa fdf6 	bl	8000580 <__aeabi_dmul>
 8005994:	4602      	mov	r2, r0
 8005996:	460b      	mov	r3, r1
 8005998:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800599c:	f7fa fc3a 	bl	8000214 <__adddf3>
 80059a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059a4:	3601      	adds	r6, #1
 80059a6:	9b05      	ldr	r3, [sp, #20]
 80059a8:	429e      	cmp	r6, r3
 80059aa:	f1a7 0708 	sub.w	r7, r7, #8
 80059ae:	ddeb      	ble.n	8005988 <__kernel_rem_pio2+0xa0>
 80059b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80059b4:	f108 0801 	add.w	r8, r8, #1
 80059b8:	ecaa 7b02 	vstmia	sl!, {d7}
 80059bc:	3508      	adds	r5, #8
 80059be:	e7ca      	b.n	8005956 <__kernel_rem_pio2+0x6e>
 80059c0:	9b00      	ldr	r3, [sp, #0]
 80059c2:	f8dd 8000 	ldr.w	r8, [sp]
 80059c6:	aa0c      	add	r2, sp, #48	@ 0x30
 80059c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80059cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80059ce:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80059d0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80059d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80059d6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80059da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80059dc:	ab98      	add	r3, sp, #608	@ 0x260
 80059de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80059e2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80059e6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80059ea:	ac0c      	add	r4, sp, #48	@ 0x30
 80059ec:	ab70      	add	r3, sp, #448	@ 0x1c0
 80059ee:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80059f2:	46a1      	mov	r9, r4
 80059f4:	46c2      	mov	sl, r8
 80059f6:	f1ba 0f00 	cmp.w	sl, #0
 80059fa:	f1a5 0508 	sub.w	r5, r5, #8
 80059fe:	dc77      	bgt.n	8005af0 <__kernel_rem_pio2+0x208>
 8005a00:	4658      	mov	r0, fp
 8005a02:	ed9d 0b02 	vldr	d0, [sp, #8]
 8005a06:	f7ff feef 	bl	80057e8 <scalbn>
 8005a0a:	ec57 6b10 	vmov	r6, r7, d0
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8005a14:	4630      	mov	r0, r6
 8005a16:	4639      	mov	r1, r7
 8005a18:	f7fa fdb2 	bl	8000580 <__aeabi_dmul>
 8005a1c:	ec41 0b10 	vmov	d0, r0, r1
 8005a20:	f000 faba 	bl	8005f98 <floor>
 8005a24:	4b75      	ldr	r3, [pc, #468]	@ (8005bfc <__kernel_rem_pio2+0x314>)
 8005a26:	ec51 0b10 	vmov	r0, r1, d0
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f7fa fda8 	bl	8000580 <__aeabi_dmul>
 8005a30:	4602      	mov	r2, r0
 8005a32:	460b      	mov	r3, r1
 8005a34:	4630      	mov	r0, r6
 8005a36:	4639      	mov	r1, r7
 8005a38:	f7fa fbea 	bl	8000210 <__aeabi_dsub>
 8005a3c:	460f      	mov	r7, r1
 8005a3e:	4606      	mov	r6, r0
 8005a40:	f7fb f838 	bl	8000ab4 <__aeabi_d2iz>
 8005a44:	9002      	str	r0, [sp, #8]
 8005a46:	f7fa fd31 	bl	80004ac <__aeabi_i2d>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	4630      	mov	r0, r6
 8005a50:	4639      	mov	r1, r7
 8005a52:	f7fa fbdd 	bl	8000210 <__aeabi_dsub>
 8005a56:	f1bb 0f00 	cmp.w	fp, #0
 8005a5a:	4606      	mov	r6, r0
 8005a5c:	460f      	mov	r7, r1
 8005a5e:	dd6c      	ble.n	8005b3a <__kernel_rem_pio2+0x252>
 8005a60:	f108 31ff 	add.w	r1, r8, #4294967295
 8005a64:	ab0c      	add	r3, sp, #48	@ 0x30
 8005a66:	9d02      	ldr	r5, [sp, #8]
 8005a68:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005a6c:	f1cb 0018 	rsb	r0, fp, #24
 8005a70:	fa43 f200 	asr.w	r2, r3, r0
 8005a74:	4415      	add	r5, r2
 8005a76:	4082      	lsls	r2, r0
 8005a78:	1a9b      	subs	r3, r3, r2
 8005a7a:	aa0c      	add	r2, sp, #48	@ 0x30
 8005a7c:	9502      	str	r5, [sp, #8]
 8005a7e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8005a82:	f1cb 0217 	rsb	r2, fp, #23
 8005a86:	fa43 f902 	asr.w	r9, r3, r2
 8005a8a:	f1b9 0f00 	cmp.w	r9, #0
 8005a8e:	dd64      	ble.n	8005b5a <__kernel_rem_pio2+0x272>
 8005a90:	9b02      	ldr	r3, [sp, #8]
 8005a92:	2200      	movs	r2, #0
 8005a94:	3301      	adds	r3, #1
 8005a96:	9302      	str	r3, [sp, #8]
 8005a98:	4615      	mov	r5, r2
 8005a9a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8005a9e:	4590      	cmp	r8, r2
 8005aa0:	f300 80b8 	bgt.w	8005c14 <__kernel_rem_pio2+0x32c>
 8005aa4:	f1bb 0f00 	cmp.w	fp, #0
 8005aa8:	dd07      	ble.n	8005aba <__kernel_rem_pio2+0x1d2>
 8005aaa:	f1bb 0f01 	cmp.w	fp, #1
 8005aae:	f000 80bf 	beq.w	8005c30 <__kernel_rem_pio2+0x348>
 8005ab2:	f1bb 0f02 	cmp.w	fp, #2
 8005ab6:	f000 80c6 	beq.w	8005c46 <__kernel_rem_pio2+0x35e>
 8005aba:	f1b9 0f02 	cmp.w	r9, #2
 8005abe:	d14c      	bne.n	8005b5a <__kernel_rem_pio2+0x272>
 8005ac0:	4632      	mov	r2, r6
 8005ac2:	463b      	mov	r3, r7
 8005ac4:	494e      	ldr	r1, [pc, #312]	@ (8005c00 <__kernel_rem_pio2+0x318>)
 8005ac6:	2000      	movs	r0, #0
 8005ac8:	f7fa fba2 	bl	8000210 <__aeabi_dsub>
 8005acc:	4606      	mov	r6, r0
 8005ace:	460f      	mov	r7, r1
 8005ad0:	2d00      	cmp	r5, #0
 8005ad2:	d042      	beq.n	8005b5a <__kernel_rem_pio2+0x272>
 8005ad4:	4658      	mov	r0, fp
 8005ad6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8005bf0 <__kernel_rem_pio2+0x308>
 8005ada:	f7ff fe85 	bl	80057e8 <scalbn>
 8005ade:	4630      	mov	r0, r6
 8005ae0:	4639      	mov	r1, r7
 8005ae2:	ec53 2b10 	vmov	r2, r3, d0
 8005ae6:	f7fa fb93 	bl	8000210 <__aeabi_dsub>
 8005aea:	4606      	mov	r6, r0
 8005aec:	460f      	mov	r7, r1
 8005aee:	e034      	b.n	8005b5a <__kernel_rem_pio2+0x272>
 8005af0:	4b44      	ldr	r3, [pc, #272]	@ (8005c04 <__kernel_rem_pio2+0x31c>)
 8005af2:	2200      	movs	r2, #0
 8005af4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005af8:	f7fa fd42 	bl	8000580 <__aeabi_dmul>
 8005afc:	f7fa ffda 	bl	8000ab4 <__aeabi_d2iz>
 8005b00:	f7fa fcd4 	bl	80004ac <__aeabi_i2d>
 8005b04:	4b40      	ldr	r3, [pc, #256]	@ (8005c08 <__kernel_rem_pio2+0x320>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	4606      	mov	r6, r0
 8005b0a:	460f      	mov	r7, r1
 8005b0c:	f7fa fd38 	bl	8000580 <__aeabi_dmul>
 8005b10:	4602      	mov	r2, r0
 8005b12:	460b      	mov	r3, r1
 8005b14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b18:	f7fa fb7a 	bl	8000210 <__aeabi_dsub>
 8005b1c:	f7fa ffca 	bl	8000ab4 <__aeabi_d2iz>
 8005b20:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005b24:	f849 0b04 	str.w	r0, [r9], #4
 8005b28:	4639      	mov	r1, r7
 8005b2a:	4630      	mov	r0, r6
 8005b2c:	f7fa fb72 	bl	8000214 <__adddf3>
 8005b30:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b38:	e75d      	b.n	80059f6 <__kernel_rem_pio2+0x10e>
 8005b3a:	d107      	bne.n	8005b4c <__kernel_rem_pio2+0x264>
 8005b3c:	f108 33ff 	add.w	r3, r8, #4294967295
 8005b40:	aa0c      	add	r2, sp, #48	@ 0x30
 8005b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b46:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8005b4a:	e79e      	b.n	8005a8a <__kernel_rem_pio2+0x1a2>
 8005b4c:	4b2f      	ldr	r3, [pc, #188]	@ (8005c0c <__kernel_rem_pio2+0x324>)
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f7fa ff9c 	bl	8000a8c <__aeabi_dcmpge>
 8005b54:	2800      	cmp	r0, #0
 8005b56:	d143      	bne.n	8005be0 <__kernel_rem_pio2+0x2f8>
 8005b58:	4681      	mov	r9, r0
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	4630      	mov	r0, r6
 8005b60:	4639      	mov	r1, r7
 8005b62:	f7fa ff75 	bl	8000a50 <__aeabi_dcmpeq>
 8005b66:	2800      	cmp	r0, #0
 8005b68:	f000 80bf 	beq.w	8005cea <__kernel_rem_pio2+0x402>
 8005b6c:	f108 33ff 	add.w	r3, r8, #4294967295
 8005b70:	2200      	movs	r2, #0
 8005b72:	9900      	ldr	r1, [sp, #0]
 8005b74:	428b      	cmp	r3, r1
 8005b76:	da6e      	bge.n	8005c56 <__kernel_rem_pio2+0x36e>
 8005b78:	2a00      	cmp	r2, #0
 8005b7a:	f000 8089 	beq.w	8005c90 <__kernel_rem_pio2+0x3a8>
 8005b7e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005b82:	ab0c      	add	r3, sp, #48	@ 0x30
 8005b84:	f1ab 0b18 	sub.w	fp, fp, #24
 8005b88:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d0f6      	beq.n	8005b7e <__kernel_rem_pio2+0x296>
 8005b90:	4658      	mov	r0, fp
 8005b92:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8005bf0 <__kernel_rem_pio2+0x308>
 8005b96:	f7ff fe27 	bl	80057e8 <scalbn>
 8005b9a:	f108 0301 	add.w	r3, r8, #1
 8005b9e:	00da      	lsls	r2, r3, #3
 8005ba0:	9205      	str	r2, [sp, #20]
 8005ba2:	ec55 4b10 	vmov	r4, r5, d0
 8005ba6:	aa70      	add	r2, sp, #448	@ 0x1c0
 8005ba8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8005c04 <__kernel_rem_pio2+0x31c>
 8005bac:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8005bb0:	4646      	mov	r6, r8
 8005bb2:	f04f 0a00 	mov.w	sl, #0
 8005bb6:	2e00      	cmp	r6, #0
 8005bb8:	f280 80cf 	bge.w	8005d5a <__kernel_rem_pio2+0x472>
 8005bbc:	4644      	mov	r4, r8
 8005bbe:	2c00      	cmp	r4, #0
 8005bc0:	f2c0 80fd 	blt.w	8005dbe <__kernel_rem_pio2+0x4d6>
 8005bc4:	4b12      	ldr	r3, [pc, #72]	@ (8005c10 <__kernel_rem_pio2+0x328>)
 8005bc6:	461f      	mov	r7, r3
 8005bc8:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005bca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005bce:	9306      	str	r3, [sp, #24]
 8005bd0:	f04f 0a00 	mov.w	sl, #0
 8005bd4:	f04f 0b00 	mov.w	fp, #0
 8005bd8:	2600      	movs	r6, #0
 8005bda:	eba8 0504 	sub.w	r5, r8, r4
 8005bde:	e0e2      	b.n	8005da6 <__kernel_rem_pio2+0x4be>
 8005be0:	f04f 0902 	mov.w	r9, #2
 8005be4:	e754      	b.n	8005a90 <__kernel_rem_pio2+0x1a8>
 8005be6:	bf00      	nop
	...
 8005bf4:	3ff00000 	.word	0x3ff00000
 8005bf8:	08006798 	.word	0x08006798
 8005bfc:	40200000 	.word	0x40200000
 8005c00:	3ff00000 	.word	0x3ff00000
 8005c04:	3e700000 	.word	0x3e700000
 8005c08:	41700000 	.word	0x41700000
 8005c0c:	3fe00000 	.word	0x3fe00000
 8005c10:	08006758 	.word	0x08006758
 8005c14:	f854 3b04 	ldr.w	r3, [r4], #4
 8005c18:	b945      	cbnz	r5, 8005c2c <__kernel_rem_pio2+0x344>
 8005c1a:	b123      	cbz	r3, 8005c26 <__kernel_rem_pio2+0x33e>
 8005c1c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8005c20:	f844 3c04 	str.w	r3, [r4, #-4]
 8005c24:	2301      	movs	r3, #1
 8005c26:	3201      	adds	r2, #1
 8005c28:	461d      	mov	r5, r3
 8005c2a:	e738      	b.n	8005a9e <__kernel_rem_pio2+0x1b6>
 8005c2c:	1acb      	subs	r3, r1, r3
 8005c2e:	e7f7      	b.n	8005c20 <__kernel_rem_pio2+0x338>
 8005c30:	f108 32ff 	add.w	r2, r8, #4294967295
 8005c34:	ab0c      	add	r3, sp, #48	@ 0x30
 8005c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c3a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005c3e:	a90c      	add	r1, sp, #48	@ 0x30
 8005c40:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005c44:	e739      	b.n	8005aba <__kernel_rem_pio2+0x1d2>
 8005c46:	f108 32ff 	add.w	r2, r8, #4294967295
 8005c4a:	ab0c      	add	r3, sp, #48	@ 0x30
 8005c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c50:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005c54:	e7f3      	b.n	8005c3e <__kernel_rem_pio2+0x356>
 8005c56:	a90c      	add	r1, sp, #48	@ 0x30
 8005c58:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	e787      	b.n	8005b72 <__kernel_rem_pio2+0x28a>
 8005c62:	3401      	adds	r4, #1
 8005c64:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005c68:	2a00      	cmp	r2, #0
 8005c6a:	d0fa      	beq.n	8005c62 <__kernel_rem_pio2+0x37a>
 8005c6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c6e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005c72:	eb0d 0503 	add.w	r5, sp, r3
 8005c76:	9b06      	ldr	r3, [sp, #24]
 8005c78:	aa20      	add	r2, sp, #128	@ 0x80
 8005c7a:	4443      	add	r3, r8
 8005c7c:	f108 0701 	add.w	r7, r8, #1
 8005c80:	3d98      	subs	r5, #152	@ 0x98
 8005c82:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8005c86:	4444      	add	r4, r8
 8005c88:	42bc      	cmp	r4, r7
 8005c8a:	da04      	bge.n	8005c96 <__kernel_rem_pio2+0x3ae>
 8005c8c:	46a0      	mov	r8, r4
 8005c8e:	e6a2      	b.n	80059d6 <__kernel_rem_pio2+0xee>
 8005c90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c92:	2401      	movs	r4, #1
 8005c94:	e7e6      	b.n	8005c64 <__kernel_rem_pio2+0x37c>
 8005c96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c98:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8005c9c:	f7fa fc06 	bl	80004ac <__aeabi_i2d>
 8005ca0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8005f68 <__kernel_rem_pio2+0x680>
 8005ca4:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005ca8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005cac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005cb0:	46b2      	mov	sl, r6
 8005cb2:	f04f 0800 	mov.w	r8, #0
 8005cb6:	9b05      	ldr	r3, [sp, #20]
 8005cb8:	4598      	cmp	r8, r3
 8005cba:	dd05      	ble.n	8005cc8 <__kernel_rem_pio2+0x3e0>
 8005cbc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005cc0:	3701      	adds	r7, #1
 8005cc2:	eca5 7b02 	vstmia	r5!, {d7}
 8005cc6:	e7df      	b.n	8005c88 <__kernel_rem_pio2+0x3a0>
 8005cc8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8005ccc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005cd0:	f7fa fc56 	bl	8000580 <__aeabi_dmul>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cdc:	f7fa fa9a 	bl	8000214 <__adddf3>
 8005ce0:	f108 0801 	add.w	r8, r8, #1
 8005ce4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ce8:	e7e5      	b.n	8005cb6 <__kernel_rem_pio2+0x3ce>
 8005cea:	f1cb 0000 	rsb	r0, fp, #0
 8005cee:	ec47 6b10 	vmov	d0, r6, r7
 8005cf2:	f7ff fd79 	bl	80057e8 <scalbn>
 8005cf6:	ec55 4b10 	vmov	r4, r5, d0
 8005cfa:	4b9d      	ldr	r3, [pc, #628]	@ (8005f70 <__kernel_rem_pio2+0x688>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	4620      	mov	r0, r4
 8005d00:	4629      	mov	r1, r5
 8005d02:	f7fa fec3 	bl	8000a8c <__aeabi_dcmpge>
 8005d06:	b300      	cbz	r0, 8005d4a <__kernel_rem_pio2+0x462>
 8005d08:	4b9a      	ldr	r3, [pc, #616]	@ (8005f74 <__kernel_rem_pio2+0x68c>)
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	4629      	mov	r1, r5
 8005d10:	f7fa fc36 	bl	8000580 <__aeabi_dmul>
 8005d14:	f7fa fece 	bl	8000ab4 <__aeabi_d2iz>
 8005d18:	4606      	mov	r6, r0
 8005d1a:	f7fa fbc7 	bl	80004ac <__aeabi_i2d>
 8005d1e:	4b94      	ldr	r3, [pc, #592]	@ (8005f70 <__kernel_rem_pio2+0x688>)
 8005d20:	2200      	movs	r2, #0
 8005d22:	f7fa fc2d 	bl	8000580 <__aeabi_dmul>
 8005d26:	460b      	mov	r3, r1
 8005d28:	4602      	mov	r2, r0
 8005d2a:	4629      	mov	r1, r5
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	f7fa fa6f 	bl	8000210 <__aeabi_dsub>
 8005d32:	f7fa febf 	bl	8000ab4 <__aeabi_d2iz>
 8005d36:	ab0c      	add	r3, sp, #48	@ 0x30
 8005d38:	f10b 0b18 	add.w	fp, fp, #24
 8005d3c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005d40:	f108 0801 	add.w	r8, r8, #1
 8005d44:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8005d48:	e722      	b.n	8005b90 <__kernel_rem_pio2+0x2a8>
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	4629      	mov	r1, r5
 8005d4e:	f7fa feb1 	bl	8000ab4 <__aeabi_d2iz>
 8005d52:	ab0c      	add	r3, sp, #48	@ 0x30
 8005d54:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005d58:	e71a      	b.n	8005b90 <__kernel_rem_pio2+0x2a8>
 8005d5a:	ab0c      	add	r3, sp, #48	@ 0x30
 8005d5c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005d60:	f7fa fba4 	bl	80004ac <__aeabi_i2d>
 8005d64:	4622      	mov	r2, r4
 8005d66:	462b      	mov	r3, r5
 8005d68:	f7fa fc0a 	bl	8000580 <__aeabi_dmul>
 8005d6c:	4652      	mov	r2, sl
 8005d6e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8005d72:	465b      	mov	r3, fp
 8005d74:	4620      	mov	r0, r4
 8005d76:	4629      	mov	r1, r5
 8005d78:	f7fa fc02 	bl	8000580 <__aeabi_dmul>
 8005d7c:	3e01      	subs	r6, #1
 8005d7e:	4604      	mov	r4, r0
 8005d80:	460d      	mov	r5, r1
 8005d82:	e718      	b.n	8005bb6 <__kernel_rem_pio2+0x2ce>
 8005d84:	9906      	ldr	r1, [sp, #24]
 8005d86:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8005d8a:	9106      	str	r1, [sp, #24]
 8005d8c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8005d90:	f7fa fbf6 	bl	8000580 <__aeabi_dmul>
 8005d94:	4602      	mov	r2, r0
 8005d96:	460b      	mov	r3, r1
 8005d98:	4650      	mov	r0, sl
 8005d9a:	4659      	mov	r1, fp
 8005d9c:	f7fa fa3a 	bl	8000214 <__adddf3>
 8005da0:	3601      	adds	r6, #1
 8005da2:	4682      	mov	sl, r0
 8005da4:	468b      	mov	fp, r1
 8005da6:	9b00      	ldr	r3, [sp, #0]
 8005da8:	429e      	cmp	r6, r3
 8005daa:	dc01      	bgt.n	8005db0 <__kernel_rem_pio2+0x4c8>
 8005dac:	42b5      	cmp	r5, r6
 8005dae:	dae9      	bge.n	8005d84 <__kernel_rem_pio2+0x49c>
 8005db0:	ab48      	add	r3, sp, #288	@ 0x120
 8005db2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005db6:	e9c5 ab00 	strd	sl, fp, [r5]
 8005dba:	3c01      	subs	r4, #1
 8005dbc:	e6ff      	b.n	8005bbe <__kernel_rem_pio2+0x2d6>
 8005dbe:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	dc0b      	bgt.n	8005ddc <__kernel_rem_pio2+0x4f4>
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	dc39      	bgt.n	8005e3c <__kernel_rem_pio2+0x554>
 8005dc8:	d05d      	beq.n	8005e86 <__kernel_rem_pio2+0x59e>
 8005dca:	9b02      	ldr	r3, [sp, #8]
 8005dcc:	f003 0007 	and.w	r0, r3, #7
 8005dd0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8005dd4:	ecbd 8b02 	vpop	{d8}
 8005dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ddc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8005dde:	2b03      	cmp	r3, #3
 8005de0:	d1f3      	bne.n	8005dca <__kernel_rem_pio2+0x4e2>
 8005de2:	9b05      	ldr	r3, [sp, #20]
 8005de4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005de8:	eb0d 0403 	add.w	r4, sp, r3
 8005dec:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8005df0:	4625      	mov	r5, r4
 8005df2:	46c2      	mov	sl, r8
 8005df4:	f1ba 0f00 	cmp.w	sl, #0
 8005df8:	f1a5 0508 	sub.w	r5, r5, #8
 8005dfc:	dc6b      	bgt.n	8005ed6 <__kernel_rem_pio2+0x5ee>
 8005dfe:	4645      	mov	r5, r8
 8005e00:	2d01      	cmp	r5, #1
 8005e02:	f1a4 0408 	sub.w	r4, r4, #8
 8005e06:	f300 8087 	bgt.w	8005f18 <__kernel_rem_pio2+0x630>
 8005e0a:	9c05      	ldr	r4, [sp, #20]
 8005e0c:	ab48      	add	r3, sp, #288	@ 0x120
 8005e0e:	441c      	add	r4, r3
 8005e10:	2000      	movs	r0, #0
 8005e12:	2100      	movs	r1, #0
 8005e14:	f1b8 0f01 	cmp.w	r8, #1
 8005e18:	f300 809c 	bgt.w	8005f54 <__kernel_rem_pio2+0x66c>
 8005e1c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8005e20:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8005e24:	f1b9 0f00 	cmp.w	r9, #0
 8005e28:	f040 80a6 	bne.w	8005f78 <__kernel_rem_pio2+0x690>
 8005e2c:	9b04      	ldr	r3, [sp, #16]
 8005e2e:	e9c3 7800 	strd	r7, r8, [r3]
 8005e32:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005e36:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005e3a:	e7c6      	b.n	8005dca <__kernel_rem_pio2+0x4e2>
 8005e3c:	9d05      	ldr	r5, [sp, #20]
 8005e3e:	ab48      	add	r3, sp, #288	@ 0x120
 8005e40:	441d      	add	r5, r3
 8005e42:	4644      	mov	r4, r8
 8005e44:	2000      	movs	r0, #0
 8005e46:	2100      	movs	r1, #0
 8005e48:	2c00      	cmp	r4, #0
 8005e4a:	da35      	bge.n	8005eb8 <__kernel_rem_pio2+0x5d0>
 8005e4c:	f1b9 0f00 	cmp.w	r9, #0
 8005e50:	d038      	beq.n	8005ec4 <__kernel_rem_pio2+0x5dc>
 8005e52:	4602      	mov	r2, r0
 8005e54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005e58:	9c04      	ldr	r4, [sp, #16]
 8005e5a:	e9c4 2300 	strd	r2, r3, [r4]
 8005e5e:	4602      	mov	r2, r0
 8005e60:	460b      	mov	r3, r1
 8005e62:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8005e66:	f7fa f9d3 	bl	8000210 <__aeabi_dsub>
 8005e6a:	ad4a      	add	r5, sp, #296	@ 0x128
 8005e6c:	2401      	movs	r4, #1
 8005e6e:	45a0      	cmp	r8, r4
 8005e70:	da2b      	bge.n	8005eca <__kernel_rem_pio2+0x5e2>
 8005e72:	f1b9 0f00 	cmp.w	r9, #0
 8005e76:	d002      	beq.n	8005e7e <__kernel_rem_pio2+0x596>
 8005e78:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	9b04      	ldr	r3, [sp, #16]
 8005e80:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005e84:	e7a1      	b.n	8005dca <__kernel_rem_pio2+0x4e2>
 8005e86:	9c05      	ldr	r4, [sp, #20]
 8005e88:	ab48      	add	r3, sp, #288	@ 0x120
 8005e8a:	441c      	add	r4, r3
 8005e8c:	2000      	movs	r0, #0
 8005e8e:	2100      	movs	r1, #0
 8005e90:	f1b8 0f00 	cmp.w	r8, #0
 8005e94:	da09      	bge.n	8005eaa <__kernel_rem_pio2+0x5c2>
 8005e96:	f1b9 0f00 	cmp.w	r9, #0
 8005e9a:	d002      	beq.n	8005ea2 <__kernel_rem_pio2+0x5ba>
 8005e9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	9b04      	ldr	r3, [sp, #16]
 8005ea4:	e9c3 0100 	strd	r0, r1, [r3]
 8005ea8:	e78f      	b.n	8005dca <__kernel_rem_pio2+0x4e2>
 8005eaa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005eae:	f7fa f9b1 	bl	8000214 <__adddf3>
 8005eb2:	f108 38ff 	add.w	r8, r8, #4294967295
 8005eb6:	e7eb      	b.n	8005e90 <__kernel_rem_pio2+0x5a8>
 8005eb8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8005ebc:	f7fa f9aa 	bl	8000214 <__adddf3>
 8005ec0:	3c01      	subs	r4, #1
 8005ec2:	e7c1      	b.n	8005e48 <__kernel_rem_pio2+0x560>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	e7c6      	b.n	8005e58 <__kernel_rem_pio2+0x570>
 8005eca:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8005ece:	f7fa f9a1 	bl	8000214 <__adddf3>
 8005ed2:	3401      	adds	r4, #1
 8005ed4:	e7cb      	b.n	8005e6e <__kernel_rem_pio2+0x586>
 8005ed6:	ed95 7b00 	vldr	d7, [r5]
 8005eda:	ed8d 7b00 	vstr	d7, [sp]
 8005ede:	ed95 7b02 	vldr	d7, [r5, #8]
 8005ee2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ee6:	ec53 2b17 	vmov	r2, r3, d7
 8005eea:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005eee:	f7fa f991 	bl	8000214 <__adddf3>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	4606      	mov	r6, r0
 8005ef8:	460f      	mov	r7, r1
 8005efa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005efe:	f7fa f987 	bl	8000210 <__aeabi_dsub>
 8005f02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f06:	f7fa f985 	bl	8000214 <__adddf3>
 8005f0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f0e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8005f12:	e9c5 6700 	strd	r6, r7, [r5]
 8005f16:	e76d      	b.n	8005df4 <__kernel_rem_pio2+0x50c>
 8005f18:	ed94 7b00 	vldr	d7, [r4]
 8005f1c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8005f20:	ec51 0b17 	vmov	r0, r1, d7
 8005f24:	4652      	mov	r2, sl
 8005f26:	465b      	mov	r3, fp
 8005f28:	ed8d 7b00 	vstr	d7, [sp]
 8005f2c:	f7fa f972 	bl	8000214 <__adddf3>
 8005f30:	4602      	mov	r2, r0
 8005f32:	460b      	mov	r3, r1
 8005f34:	4606      	mov	r6, r0
 8005f36:	460f      	mov	r7, r1
 8005f38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f3c:	f7fa f968 	bl	8000210 <__aeabi_dsub>
 8005f40:	4652      	mov	r2, sl
 8005f42:	465b      	mov	r3, fp
 8005f44:	f7fa f966 	bl	8000214 <__adddf3>
 8005f48:	3d01      	subs	r5, #1
 8005f4a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005f4e:	e9c4 6700 	strd	r6, r7, [r4]
 8005f52:	e755      	b.n	8005e00 <__kernel_rem_pio2+0x518>
 8005f54:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005f58:	f7fa f95c 	bl	8000214 <__adddf3>
 8005f5c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005f60:	e758      	b.n	8005e14 <__kernel_rem_pio2+0x52c>
 8005f62:	bf00      	nop
 8005f64:	f3af 8000 	nop.w
	...
 8005f70:	41700000 	.word	0x41700000
 8005f74:	3e700000 	.word	0x3e700000
 8005f78:	9b04      	ldr	r3, [sp, #16]
 8005f7a:	9a04      	ldr	r2, [sp, #16]
 8005f7c:	601f      	str	r7, [r3, #0]
 8005f7e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8005f82:	605c      	str	r4, [r3, #4]
 8005f84:	609d      	str	r5, [r3, #8]
 8005f86:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005f8a:	60d3      	str	r3, [r2, #12]
 8005f8c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005f90:	6110      	str	r0, [r2, #16]
 8005f92:	6153      	str	r3, [r2, #20]
 8005f94:	e719      	b.n	8005dca <__kernel_rem_pio2+0x4e2>
 8005f96:	bf00      	nop

08005f98 <floor>:
 8005f98:	ec51 0b10 	vmov	r0, r1, d0
 8005f9c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fa4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8005fa8:	2e13      	cmp	r6, #19
 8005faa:	460c      	mov	r4, r1
 8005fac:	4605      	mov	r5, r0
 8005fae:	4680      	mov	r8, r0
 8005fb0:	dc34      	bgt.n	800601c <floor+0x84>
 8005fb2:	2e00      	cmp	r6, #0
 8005fb4:	da17      	bge.n	8005fe6 <floor+0x4e>
 8005fb6:	a332      	add	r3, pc, #200	@ (adr r3, 8006080 <floor+0xe8>)
 8005fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fbc:	f7fa f92a 	bl	8000214 <__adddf3>
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	f7fa fd6c 	bl	8000aa0 <__aeabi_dcmpgt>
 8005fc8:	b150      	cbz	r0, 8005fe0 <floor+0x48>
 8005fca:	2c00      	cmp	r4, #0
 8005fcc:	da55      	bge.n	800607a <floor+0xe2>
 8005fce:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8005fd2:	432c      	orrs	r4, r5
 8005fd4:	2500      	movs	r5, #0
 8005fd6:	42ac      	cmp	r4, r5
 8005fd8:	4c2b      	ldr	r4, [pc, #172]	@ (8006088 <floor+0xf0>)
 8005fda:	bf08      	it	eq
 8005fdc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8005fe0:	4621      	mov	r1, r4
 8005fe2:	4628      	mov	r0, r5
 8005fe4:	e023      	b.n	800602e <floor+0x96>
 8005fe6:	4f29      	ldr	r7, [pc, #164]	@ (800608c <floor+0xf4>)
 8005fe8:	4137      	asrs	r7, r6
 8005fea:	ea01 0307 	and.w	r3, r1, r7
 8005fee:	4303      	orrs	r3, r0
 8005ff0:	d01d      	beq.n	800602e <floor+0x96>
 8005ff2:	a323      	add	r3, pc, #140	@ (adr r3, 8006080 <floor+0xe8>)
 8005ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff8:	f7fa f90c 	bl	8000214 <__adddf3>
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	2300      	movs	r3, #0
 8006000:	f7fa fd4e 	bl	8000aa0 <__aeabi_dcmpgt>
 8006004:	2800      	cmp	r0, #0
 8006006:	d0eb      	beq.n	8005fe0 <floor+0x48>
 8006008:	2c00      	cmp	r4, #0
 800600a:	bfbe      	ittt	lt
 800600c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8006010:	4133      	asrlt	r3, r6
 8006012:	18e4      	addlt	r4, r4, r3
 8006014:	ea24 0407 	bic.w	r4, r4, r7
 8006018:	2500      	movs	r5, #0
 800601a:	e7e1      	b.n	8005fe0 <floor+0x48>
 800601c:	2e33      	cmp	r6, #51	@ 0x33
 800601e:	dd0a      	ble.n	8006036 <floor+0x9e>
 8006020:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8006024:	d103      	bne.n	800602e <floor+0x96>
 8006026:	4602      	mov	r2, r0
 8006028:	460b      	mov	r3, r1
 800602a:	f7fa f8f3 	bl	8000214 <__adddf3>
 800602e:	ec41 0b10 	vmov	d0, r0, r1
 8006032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006036:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800603a:	f04f 37ff 	mov.w	r7, #4294967295
 800603e:	40df      	lsrs	r7, r3
 8006040:	4207      	tst	r7, r0
 8006042:	d0f4      	beq.n	800602e <floor+0x96>
 8006044:	a30e      	add	r3, pc, #56	@ (adr r3, 8006080 <floor+0xe8>)
 8006046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604a:	f7fa f8e3 	bl	8000214 <__adddf3>
 800604e:	2200      	movs	r2, #0
 8006050:	2300      	movs	r3, #0
 8006052:	f7fa fd25 	bl	8000aa0 <__aeabi_dcmpgt>
 8006056:	2800      	cmp	r0, #0
 8006058:	d0c2      	beq.n	8005fe0 <floor+0x48>
 800605a:	2c00      	cmp	r4, #0
 800605c:	da0a      	bge.n	8006074 <floor+0xdc>
 800605e:	2e14      	cmp	r6, #20
 8006060:	d101      	bne.n	8006066 <floor+0xce>
 8006062:	3401      	adds	r4, #1
 8006064:	e006      	b.n	8006074 <floor+0xdc>
 8006066:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800606a:	2301      	movs	r3, #1
 800606c:	40b3      	lsls	r3, r6
 800606e:	441d      	add	r5, r3
 8006070:	4545      	cmp	r5, r8
 8006072:	d3f6      	bcc.n	8006062 <floor+0xca>
 8006074:	ea25 0507 	bic.w	r5, r5, r7
 8006078:	e7b2      	b.n	8005fe0 <floor+0x48>
 800607a:	2500      	movs	r5, #0
 800607c:	462c      	mov	r4, r5
 800607e:	e7af      	b.n	8005fe0 <floor+0x48>
 8006080:	8800759c 	.word	0x8800759c
 8006084:	7e37e43c 	.word	0x7e37e43c
 8006088:	bff00000 	.word	0xbff00000
 800608c:	000fffff 	.word	0x000fffff

08006090 <_init>:
 8006090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006092:	bf00      	nop
 8006094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006096:	bc08      	pop	{r3}
 8006098:	469e      	mov	lr, r3
 800609a:	4770      	bx	lr

0800609c <_fini>:
 800609c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800609e:	bf00      	nop
 80060a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060a2:	bc08      	pop	{r3}
 80060a4:	469e      	mov	lr, r3
 80060a6:	4770      	bx	lr
