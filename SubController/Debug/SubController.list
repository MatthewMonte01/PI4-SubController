
SubController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015840  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d8  08015a10  08015a10  00016a10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080163e8  080163e8  000181f0  2**0
                  CONTENTS
  4 .ARM          00000008  080163e8  080163e8  000173e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080163f0  080163f0  000181f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080163f0  080163f0  000173f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080163f4  080163f4  000173f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  080163f8  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000068c4  200001f0  080165e8  000181f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  20006ab4  080165e8  00018ab4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000181f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000254bc  00000000  00000000  00018220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055f5  00000000  00000000  0003d6dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fd8  00000000  00000000  00042cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018d0  00000000  00000000  00044cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029fb7  00000000  00000000  00046580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c294  00000000  00000000  00070537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efd7e  00000000  00000000  0009c7cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018c549  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000096f4  00000000  00000000  0018c58c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  00195c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080159f8 	.word	0x080159f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	080159f8 	.word	0x080159f8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b96a 	b.w	8000fb4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	460c      	mov	r4, r1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d14e      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d04:	4694      	mov	ip, r2
 8000d06:	458c      	cmp	ip, r1
 8000d08:	4686      	mov	lr, r0
 8000d0a:	fab2 f282 	clz	r2, r2
 8000d0e:	d962      	bls.n	8000dd6 <__udivmoddi4+0xde>
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0320 	rsb	r3, r2, #32
 8000d16:	4091      	lsls	r1, r2
 8000d18:	fa20 f303 	lsr.w	r3, r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	4319      	orrs	r1, r3
 8000d22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2a:	fa1f f68c 	uxth.w	r6, ip
 8000d2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb07 1114 	mls	r1, r7, r4, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb04 f106 	mul.w	r1, r4, r6
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d4e:	f080 8112 	bcs.w	8000f76 <__udivmoddi4+0x27e>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 810f 	bls.w	8000f76 <__udivmoddi4+0x27e>
 8000d58:	3c02      	subs	r4, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a59      	subs	r1, r3, r1
 8000d5e:	fa1f f38e 	uxth.w	r3, lr
 8000d62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d66:	fb07 1110 	mls	r1, r7, r0, r1
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb00 f606 	mul.w	r6, r0, r6
 8000d72:	429e      	cmp	r6, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x94>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d7e:	f080 80fc 	bcs.w	8000f7a <__udivmoddi4+0x282>
 8000d82:	429e      	cmp	r6, r3
 8000d84:	f240 80f9 	bls.w	8000f7a <__udivmoddi4+0x282>
 8000d88:	4463      	add	r3, ip
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d92:	2100      	movs	r1, #0
 8000d94:	b11d      	cbz	r5, 8000d9e <__udivmoddi4+0xa6>
 8000d96:	40d3      	lsrs	r3, r2
 8000d98:	2200      	movs	r2, #0
 8000d9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d905      	bls.n	8000db2 <__udivmoddi4+0xba>
 8000da6:	b10d      	cbz	r5, 8000dac <__udivmoddi4+0xb4>
 8000da8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dac:	2100      	movs	r1, #0
 8000dae:	4608      	mov	r0, r1
 8000db0:	e7f5      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000db2:	fab3 f183 	clz	r1, r3
 8000db6:	2900      	cmp	r1, #0
 8000db8:	d146      	bne.n	8000e48 <__udivmoddi4+0x150>
 8000dba:	42a3      	cmp	r3, r4
 8000dbc:	d302      	bcc.n	8000dc4 <__udivmoddi4+0xcc>
 8000dbe:	4290      	cmp	r0, r2
 8000dc0:	f0c0 80f0 	bcc.w	8000fa4 <__udivmoddi4+0x2ac>
 8000dc4:	1a86      	subs	r6, r0, r2
 8000dc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dca:	2001      	movs	r0, #1
 8000dcc:	2d00      	cmp	r5, #0
 8000dce:	d0e6      	beq.n	8000d9e <__udivmoddi4+0xa6>
 8000dd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dd4:	e7e3      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	f040 8090 	bne.w	8000efc <__udivmoddi4+0x204>
 8000ddc:	eba1 040c 	sub.w	r4, r1, ip
 8000de0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000de4:	fa1f f78c 	uxth.w	r7, ip
 8000de8:	2101      	movs	r1, #1
 8000dea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000df2:	fb08 4416 	mls	r4, r8, r6, r4
 8000df6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dfa:	fb07 f006 	mul.w	r0, r7, r6
 8000dfe:	4298      	cmp	r0, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x11c>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x11a>
 8000e0c:	4298      	cmp	r0, r3
 8000e0e:	f200 80cd 	bhi.w	8000fac <__udivmoddi4+0x2b4>
 8000e12:	4626      	mov	r6, r4
 8000e14:	1a1c      	subs	r4, r3, r0
 8000e16:	fa1f f38e 	uxth.w	r3, lr
 8000e1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb00 f707 	mul.w	r7, r0, r7
 8000e2a:	429f      	cmp	r7, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x148>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x146>
 8000e38:	429f      	cmp	r7, r3
 8000e3a:	f200 80b0 	bhi.w	8000f9e <__udivmoddi4+0x2a6>
 8000e3e:	4620      	mov	r0, r4
 8000e40:	1bdb      	subs	r3, r3, r7
 8000e42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e46:	e7a5      	b.n	8000d94 <__udivmoddi4+0x9c>
 8000e48:	f1c1 0620 	rsb	r6, r1, #32
 8000e4c:	408b      	lsls	r3, r1
 8000e4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e52:	431f      	orrs	r7, r3
 8000e54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e58:	fa04 f301 	lsl.w	r3, r4, r1
 8000e5c:	ea43 030c 	orr.w	r3, r3, ip
 8000e60:	40f4      	lsrs	r4, r6
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	0c38      	lsrs	r0, r7, #16
 8000e68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e70:	fa1f fc87 	uxth.w	ip, r7
 8000e74:	fb00 441e 	mls	r4, r0, lr, r4
 8000e78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e80:	45a1      	cmp	r9, r4
 8000e82:	fa02 f201 	lsl.w	r2, r2, r1
 8000e86:	d90a      	bls.n	8000e9e <__udivmoddi4+0x1a6>
 8000e88:	193c      	adds	r4, r7, r4
 8000e8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e8e:	f080 8084 	bcs.w	8000f9a <__udivmoddi4+0x2a2>
 8000e92:	45a1      	cmp	r9, r4
 8000e94:	f240 8081 	bls.w	8000f9a <__udivmoddi4+0x2a2>
 8000e98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	eba4 0409 	sub.w	r4, r4, r9
 8000ea2:	fa1f f983 	uxth.w	r9, r3
 8000ea6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eaa:	fb00 4413 	mls	r4, r0, r3, r4
 8000eae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb6:	45a4      	cmp	ip, r4
 8000eb8:	d907      	bls.n	8000eca <__udivmoddi4+0x1d2>
 8000eba:	193c      	adds	r4, r7, r4
 8000ebc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ec0:	d267      	bcs.n	8000f92 <__udivmoddi4+0x29a>
 8000ec2:	45a4      	cmp	ip, r4
 8000ec4:	d965      	bls.n	8000f92 <__udivmoddi4+0x29a>
 8000ec6:	3b02      	subs	r3, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ece:	fba0 9302 	umull	r9, r3, r0, r2
 8000ed2:	eba4 040c 	sub.w	r4, r4, ip
 8000ed6:	429c      	cmp	r4, r3
 8000ed8:	46ce      	mov	lr, r9
 8000eda:	469c      	mov	ip, r3
 8000edc:	d351      	bcc.n	8000f82 <__udivmoddi4+0x28a>
 8000ede:	d04e      	beq.n	8000f7e <__udivmoddi4+0x286>
 8000ee0:	b155      	cbz	r5, 8000ef8 <__udivmoddi4+0x200>
 8000ee2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ee6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eea:	fa04 f606 	lsl.w	r6, r4, r6
 8000eee:	40cb      	lsrs	r3, r1
 8000ef0:	431e      	orrs	r6, r3
 8000ef2:	40cc      	lsrs	r4, r1
 8000ef4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef8:	2100      	movs	r1, #0
 8000efa:	e750      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000efc:	f1c2 0320 	rsb	r3, r2, #32
 8000f00:	fa20 f103 	lsr.w	r1, r0, r3
 8000f04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f08:	fa24 f303 	lsr.w	r3, r4, r3
 8000f0c:	4094      	lsls	r4, r2
 8000f0e:	430c      	orrs	r4, r1
 8000f10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f18:	fa1f f78c 	uxth.w	r7, ip
 8000f1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f20:	fb08 3110 	mls	r1, r8, r0, r3
 8000f24:	0c23      	lsrs	r3, r4, #16
 8000f26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f2a:	fb00 f107 	mul.w	r1, r0, r7
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x24c>
 8000f32:	eb1c 0303 	adds.w	r3, ip, r3
 8000f36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f3a:	d22c      	bcs.n	8000f96 <__udivmoddi4+0x29e>
 8000f3c:	4299      	cmp	r1, r3
 8000f3e:	d92a      	bls.n	8000f96 <__udivmoddi4+0x29e>
 8000f40:	3802      	subs	r0, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	1a5b      	subs	r3, r3, r1
 8000f46:	b2a4      	uxth	r4, r4
 8000f48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f54:	fb01 f307 	mul.w	r3, r1, r7
 8000f58:	42a3      	cmp	r3, r4
 8000f5a:	d908      	bls.n	8000f6e <__udivmoddi4+0x276>
 8000f5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f64:	d213      	bcs.n	8000f8e <__udivmoddi4+0x296>
 8000f66:	42a3      	cmp	r3, r4
 8000f68:	d911      	bls.n	8000f8e <__udivmoddi4+0x296>
 8000f6a:	3902      	subs	r1, #2
 8000f6c:	4464      	add	r4, ip
 8000f6e:	1ae4      	subs	r4, r4, r3
 8000f70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f74:	e739      	b.n	8000dea <__udivmoddi4+0xf2>
 8000f76:	4604      	mov	r4, r0
 8000f78:	e6f0      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e706      	b.n	8000d8c <__udivmoddi4+0x94>
 8000f7e:	45c8      	cmp	r8, r9
 8000f80:	d2ae      	bcs.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f8a:	3801      	subs	r0, #1
 8000f8c:	e7a8      	b.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f8e:	4631      	mov	r1, r6
 8000f90:	e7ed      	b.n	8000f6e <__udivmoddi4+0x276>
 8000f92:	4603      	mov	r3, r0
 8000f94:	e799      	b.n	8000eca <__udivmoddi4+0x1d2>
 8000f96:	4630      	mov	r0, r6
 8000f98:	e7d4      	b.n	8000f44 <__udivmoddi4+0x24c>
 8000f9a:	46d6      	mov	lr, sl
 8000f9c:	e77f      	b.n	8000e9e <__udivmoddi4+0x1a6>
 8000f9e:	4463      	add	r3, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e74d      	b.n	8000e40 <__udivmoddi4+0x148>
 8000fa4:	4606      	mov	r6, r0
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e70f      	b.n	8000dcc <__udivmoddi4+0xd4>
 8000fac:	3e02      	subs	r6, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	e730      	b.n	8000e14 <__udivmoddi4+0x11c>
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <Bar30init>:
#include "Bar30.h"
#include "stm32f4xx.h"
extern I2C_HandleTypeDef hi2c2;
HAL_StatusTypeDef halStatus;
void Bar30init(Bar30* sensor, I2C_HandleTypeDef* i2cHandle)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
	sensor->i2cHandle=i2cHandle;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	683a      	ldr	r2, [r7, #0]
 8000fc6:	601a      	str	r2, [r3, #0]

	for(int i=0; i<7;i++)
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	e009      	b.n	8000fe2 <Bar30init+0x2a>
	{
		sensor->calibrationResult[i]=0;
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	3308      	adds	r3, #8
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	4413      	add	r3, r2
 8000fd8:	2200      	movs	r2, #0
 8000fda:	809a      	strh	r2, [r3, #4]
	for(int i=0; i<7;i++)
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2b06      	cmp	r3, #6
 8000fe6:	ddf2      	ble.n	8000fce <Bar30init+0x16>
	}
	sensor->rxFlag=0;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	sensor->conversionCompleteFlag=0;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	sensor->dT=0;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	625a      	str	r2, [r3, #36]	@ 0x24
	sensor->actualPressure=0;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	60da      	str	r2, [r3, #12]
	sensor->actualTemperature=0;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	611a      	str	r2, [r3, #16]
	sensor->rawPressure=0;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	605a      	str	r2, [r3, #4]
	sensor->rawTemperature=0;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
}
 8001016:	bf00      	nop
 8001018:	3714      	adds	r7, #20
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
	...

08001024 <Bar30reset>:



uint8_t Bar30reset(Bar30* sensor)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af02      	add	r7, sp, #8
 800102a:	6078      	str	r0, [r7, #4]
	uint8_t cmdByte=RESET_CMD;
 800102c:	231e      	movs	r3, #30
 800102e:	73bb      	strb	r3, [r7, #14]
	uint8_t numBytes=1;
 8001030:	2301      	movs	r3, #1
 8001032:	73fb      	strb	r3, [r7, #15]
	halStatus=(HAL_I2C_Master_Transmit(sensor->i2cHandle, BAR30_I2C_ADD, &cmdByte, numBytes, HAL_MAX_DELAY));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6818      	ldr	r0, [r3, #0]
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	b29b      	uxth	r3, r3
 800103c:	f107 020e 	add.w	r2, r7, #14
 8001040:	f04f 31ff 	mov.w	r1, #4294967295
 8001044:	9100      	str	r1, [sp, #0]
 8001046:	21ec      	movs	r1, #236	@ 0xec
 8001048:	f005 f820 	bl	800608c <HAL_I2C_Master_Transmit>
 800104c:	4603      	mov	r3, r0
 800104e:	461a      	mov	r2, r3
 8001050:	4b06      	ldr	r3, [pc, #24]	@ (800106c <Bar30reset+0x48>)
 8001052:	701a      	strb	r2, [r3, #0]
	return halStatus==HAL_OK;
 8001054:	4b05      	ldr	r3, [pc, #20]	@ (800106c <Bar30reset+0x48>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	bf0c      	ite	eq
 800105c:	2301      	moveq	r3, #1
 800105e:	2300      	movne	r3, #0
 8001060:	b2db      	uxtb	r3, r3
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	2000020c 	.word	0x2000020c

08001070 <Bar30getCalibration>:



uint8_t Bar30getCalibration(Bar30* sensor)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af02      	add	r7, sp, #8
 8001076:	6078      	str	r0, [r7, #4]
	uint8_t errorCount=0;
 8001078:	2300      	movs	r3, #0
 800107a:	75fb      	strb	r3, [r7, #23]
	uint8_t numTxBytes=1;
 800107c:	2301      	movs	r3, #1
 800107e:	73fb      	strb	r3, [r7, #15]
	uint8_t numRxBytes=2;
 8001080:	2302      	movs	r3, #2
 8001082:	73bb      	strb	r3, [r7, #14]
	uint8_t rxBuffer[2];
	uint8_t cmdByte;

	for (int i=0;i<7;i++)
 8001084:	2300      	movs	r3, #0
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	e041      	b.n	800110e <Bar30getCalibration+0x9e>
	{
		cmdByte=READ_PROM_CMD_1+2*i;
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	3350      	adds	r3, #80	@ 0x50
 800108e:	b2db      	uxtb	r3, r3
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	b2db      	uxtb	r3, r3
 8001094:	72fb      	strb	r3, [r7, #11]
		halStatus=HAL_I2C_Master_Transmit(sensor->i2cHandle, BAR30_I2C_ADD, &cmdByte, numTxBytes, HAL_MAX_DELAY);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6818      	ldr	r0, [r3, #0]
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	b29b      	uxth	r3, r3
 800109e:	f107 020b 	add.w	r2, r7, #11
 80010a2:	f04f 31ff 	mov.w	r1, #4294967295
 80010a6:	9100      	str	r1, [sp, #0]
 80010a8:	21ec      	movs	r1, #236	@ 0xec
 80010aa:	f004 ffef 	bl	800608c <HAL_I2C_Master_Transmit>
 80010ae:	4603      	mov	r3, r0
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001128 <Bar30getCalibration+0xb8>)
 80010b4:	701a      	strb	r2, [r3, #0]
		if(halStatus!=HAL_OK)
 80010b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001128 <Bar30getCalibration+0xb8>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d002      	beq.n	80010c4 <Bar30getCalibration+0x54>
		{
			errorCount+=1;
 80010be:	7dfb      	ldrb	r3, [r7, #23]
 80010c0:	3301      	adds	r3, #1
 80010c2:	75fb      	strb	r3, [r7, #23]
		}
		halStatus==HAL_I2C_Master_Receive(sensor->i2cHandle, BAR30_I2C_ADD, &rxBuffer[0], numRxBytes, HAL_MAX_DELAY);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6818      	ldr	r0, [r3, #0]
 80010c8:	7bbb      	ldrb	r3, [r7, #14]
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	f107 020c 	add.w	r2, r7, #12
 80010d0:	f04f 31ff 	mov.w	r1, #4294967295
 80010d4:	9100      	str	r1, [sp, #0]
 80010d6:	21ec      	movs	r1, #236	@ 0xec
 80010d8:	f005 f8d6 	bl	8006288 <HAL_I2C_Master_Receive>
		if(halStatus!=HAL_OK)
 80010dc:	4b12      	ldr	r3, [pc, #72]	@ (8001128 <Bar30getCalibration+0xb8>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d002      	beq.n	80010ea <Bar30getCalibration+0x7a>
		{
			errorCount+=1;
 80010e4:	7dfb      	ldrb	r3, [r7, #23]
 80010e6:	3301      	adds	r3, #1
 80010e8:	75fb      	strb	r3, [r7, #23]
		}
		sensor->calibrationResult[i]=(uint16_t)((rxBuffer[0] << 8) | rxBuffer[1]);
 80010ea:	7b3b      	ldrb	r3, [r7, #12]
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	b21a      	sxth	r2, r3
 80010f0:	7b7b      	ldrb	r3, [r7, #13]
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	4313      	orrs	r3, r2
 80010f6:	b21b      	sxth	r3, r3
 80010f8:	b299      	uxth	r1, r3
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	3308      	adds	r3, #8
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	4413      	add	r3, r2
 8001104:	460a      	mov	r2, r1
 8001106:	809a      	strh	r2, [r3, #4]
	for (int i=0;i<7;i++)
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	3301      	adds	r3, #1
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	2b06      	cmp	r3, #6
 8001112:	ddba      	ble.n	800108a <Bar30getCalibration+0x1a>
	}
	return errorCount==0;
 8001114:	7dfb      	ldrb	r3, [r7, #23]
 8001116:	2b00      	cmp	r3, #0
 8001118:	bf0c      	ite	eq
 800111a:	2301      	moveq	r3, #1
 800111c:	2300      	movne	r3, #0
 800111e:	b2db      	uxtb	r3, r3

}
 8001120:	4618      	mov	r0, r3
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	2000020c 	.word	0x2000020c

0800112c <Bar30getData>:



uint8_t Bar30getData(Bar30* sensor)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	uint8_t conversionGood=1;
 8001134:	2301      	movs	r3, #1
 8001136:	73fb      	strb	r3, [r7, #15]
	halStatus=initiatePressureConversion(sensor);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f000 f847 	bl	80011cc <initiatePressureConversion>
 800113e:	4603      	mov	r3, r0
 8001140:	461a      	mov	r2, r3
 8001142:	4b21      	ldr	r3, [pc, #132]	@ (80011c8 <Bar30getData+0x9c>)
 8001144:	701a      	strb	r2, [r3, #0]
	if(halStatus!=HAL_OK)
 8001146:	4b20      	ldr	r3, [pc, #128]	@ (80011c8 <Bar30getData+0x9c>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <Bar30getData+0x26>
		conversionGood=0;
 800114e:	2300      	movs	r3, #0
 8001150:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(3);
 8001152:	2003      	movs	r0, #3
 8001154:	f003 fa32 	bl	80045bc <HAL_Delay>
	halStatus=readPressureData(sensor);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f000 f873 	bl	8001244 <readPressureData>
 800115e:	4603      	mov	r3, r0
 8001160:	461a      	mov	r2, r3
 8001162:	4b19      	ldr	r3, [pc, #100]	@ (80011c8 <Bar30getData+0x9c>)
 8001164:	701a      	strb	r2, [r3, #0]
	if(halStatus!=HAL_OK)
 8001166:	4b18      	ldr	r3, [pc, #96]	@ (80011c8 <Bar30getData+0x9c>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <Bar30getData+0x46>
		conversionGood=0;
 800116e:	2300      	movs	r3, #0
 8001170:	73fb      	strb	r3, [r7, #15]

	halStatus=initiateTemperatureConversion(sensor);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f000 f848 	bl	8001208 <initiateTemperatureConversion>
 8001178:	4603      	mov	r3, r0
 800117a:	461a      	mov	r2, r3
 800117c:	4b12      	ldr	r3, [pc, #72]	@ (80011c8 <Bar30getData+0x9c>)
 800117e:	701a      	strb	r2, [r3, #0]
	if(halStatus!=HAL_OK)
 8001180:	4b11      	ldr	r3, [pc, #68]	@ (80011c8 <Bar30getData+0x9c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <Bar30getData+0x60>
		conversionGood=0;
 8001188:	2300      	movs	r3, #0
 800118a:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(3);
 800118c:	2003      	movs	r0, #3
 800118e:	f003 fa15 	bl	80045bc <HAL_Delay>
	halStatus=readTemperatureData(sensor);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f000 f896 	bl	80012c4 <readTemperatureData>
 8001198:	4603      	mov	r3, r0
 800119a:	461a      	mov	r2, r3
 800119c:	4b0a      	ldr	r3, [pc, #40]	@ (80011c8 <Bar30getData+0x9c>)
 800119e:	701a      	strb	r2, [r3, #0]
	if(halStatus!=HAL_OK)
 80011a0:	4b09      	ldr	r3, [pc, #36]	@ (80011c8 <Bar30getData+0x9c>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <Bar30getData+0x80>
		conversionGood=0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	73fb      	strb	r3, [r7, #15]
	calculateTemperature(sensor);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f000 f923 	bl	80013f8 <calculateTemperature>
	calculatePressure(sensor);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f000 f966 	bl	8001484 <calculatePressure>
	calculateDepth(sensor);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 fa2d 	bl	8001618 <calculateDepth>
	return conversionGood;
 80011be:	7bfb      	ldrb	r3, [r7, #15]

}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	2000020c 	.word	0x2000020c

080011cc <initiatePressureConversion>:

HAL_StatusTypeDef initiatePressureConversion(Bar30* sensor)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af02      	add	r7, sp, #8
 80011d2:	6078      	str	r0, [r7, #4]
	uint8_t cmdByte=PRESSURE_CONVERSION_CMD;
 80011d4:	2344      	movs	r3, #68	@ 0x44
 80011d6:	73fb      	strb	r3, [r7, #15]
	halStatus=HAL_I2C_Master_Transmit(sensor->i2cHandle,BAR30_I2C_ADD,&cmdByte,1,HAL_MAX_DELAY);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6818      	ldr	r0, [r3, #0]
 80011dc:	f107 020f 	add.w	r2, r7, #15
 80011e0:	f04f 33ff 	mov.w	r3, #4294967295
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2301      	movs	r3, #1
 80011e8:	21ec      	movs	r1, #236	@ 0xec
 80011ea:	f004 ff4f 	bl	800608c <HAL_I2C_Master_Transmit>
 80011ee:	4603      	mov	r3, r0
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b04      	ldr	r3, [pc, #16]	@ (8001204 <initiatePressureConversion+0x38>)
 80011f4:	701a      	strb	r2, [r3, #0]
	return halStatus;
 80011f6:	4b03      	ldr	r3, [pc, #12]	@ (8001204 <initiatePressureConversion+0x38>)
 80011f8:	781b      	ldrb	r3, [r3, #0]


}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	2000020c 	.word	0x2000020c

08001208 <initiateTemperatureConversion>:
HAL_StatusTypeDef initiateTemperatureConversion(Bar30* sensor)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af02      	add	r7, sp, #8
 800120e:	6078      	str	r0, [r7, #4]
	uint8_t cmdByte=TEMP_CONVERSION_CMD;
 8001210:	2354      	movs	r3, #84	@ 0x54
 8001212:	73fb      	strb	r3, [r7, #15]
	halStatus= HAL_I2C_Master_Transmit(sensor->i2cHandle,BAR30_I2C_ADD,&cmdByte,1,HAL_MAX_DELAY);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6818      	ldr	r0, [r3, #0]
 8001218:	f107 020f 	add.w	r2, r7, #15
 800121c:	f04f 33ff 	mov.w	r3, #4294967295
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	2301      	movs	r3, #1
 8001224:	21ec      	movs	r1, #236	@ 0xec
 8001226:	f004 ff31 	bl	800608c <HAL_I2C_Master_Transmit>
 800122a:	4603      	mov	r3, r0
 800122c:	461a      	mov	r2, r3
 800122e:	4b04      	ldr	r3, [pc, #16]	@ (8001240 <initiateTemperatureConversion+0x38>)
 8001230:	701a      	strb	r2, [r3, #0]
	return halStatus;
 8001232:	4b03      	ldr	r3, [pc, #12]	@ (8001240 <initiateTemperatureConversion+0x38>)
 8001234:	781b      	ldrb	r3, [r3, #0]

}
 8001236:	4618      	mov	r0, r3
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	2000020c 	.word	0x2000020c

08001244 <readPressureData>:
HAL_StatusTypeDef readPressureData(Bar30* sensor){
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af02      	add	r7, sp, #8
 800124a:	6078      	str	r0, [r7, #4]
	uint8_t cmdByte=READ_RESULT_CMD;
 800124c:	2300      	movs	r3, #0
 800124e:	73fb      	strb	r3, [r7, #15]
	uint8_t rxBuffer[3];
	halStatus= HAL_I2C_Master_Transmit(sensor->i2cHandle,BAR30_I2C_ADD,&cmdByte,1,HAL_MAX_DELAY);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6818      	ldr	r0, [r3, #0]
 8001254:	f107 020f 	add.w	r2, r7, #15
 8001258:	f04f 33ff 	mov.w	r3, #4294967295
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2301      	movs	r3, #1
 8001260:	21ec      	movs	r1, #236	@ 0xec
 8001262:	f004 ff13 	bl	800608c <HAL_I2C_Master_Transmit>
 8001266:	4603      	mov	r3, r0
 8001268:	461a      	mov	r2, r3
 800126a:	4b15      	ldr	r3, [pc, #84]	@ (80012c0 <readPressureData+0x7c>)
 800126c:	701a      	strb	r2, [r3, #0]
	halStatus=HAL_I2C_Master_Receive(sensor->i2cHandle, BAR30_I2C_ADD, rxBuffer, 3, HAL_MAX_DELAY);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6818      	ldr	r0, [r3, #0]
 8001272:	f107 020c 	add.w	r2, r7, #12
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	2303      	movs	r3, #3
 800127e:	21ec      	movs	r1, #236	@ 0xec
 8001280:	f005 f802 	bl	8006288 <HAL_I2C_Master_Receive>
 8001284:	4603      	mov	r3, r0
 8001286:	461a      	mov	r2, r3
 8001288:	4b0d      	ldr	r3, [pc, #52]	@ (80012c0 <readPressureData+0x7c>)
 800128a:	701a      	strb	r2, [r3, #0]
	sensor->rawPressure|=((uint32_t)rxBuffer[0]<<16);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	7b3b      	ldrb	r3, [r7, #12]
 8001292:	041b      	lsls	r3, r3, #16
 8001294:	431a      	orrs	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	605a      	str	r2, [r3, #4]
	sensor->rawPressure|=((uint32_t)rxBuffer[1]<<8);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685a      	ldr	r2, [r3, #4]
 800129e:	7b7b      	ldrb	r3, [r7, #13]
 80012a0:	021b      	lsls	r3, r3, #8
 80012a2:	431a      	orrs	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	605a      	str	r2, [r3, #4]
	sensor->rawPressure|=rxBuffer[2];
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	7bba      	ldrb	r2, [r7, #14]
 80012ae:	431a      	orrs	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	605a      	str	r2, [r3, #4]
	return halStatus;
 80012b4:	4b02      	ldr	r3, [pc, #8]	@ (80012c0 <readPressureData+0x7c>)
 80012b6:	781b      	ldrb	r3, [r3, #0]

}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	2000020c 	.word	0x2000020c

080012c4 <readTemperatureData>:

HAL_StatusTypeDef readTemperatureData(Bar30* sensor)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af02      	add	r7, sp, #8
 80012ca:	6078      	str	r0, [r7, #4]
	uint8_t cmdByte=READ_RESULT_CMD;
 80012cc:	2300      	movs	r3, #0
 80012ce:	73fb      	strb	r3, [r7, #15]
	uint8_t rxBuffer[3];
	halStatus= HAL_I2C_Master_Transmit(sensor->i2cHandle,BAR30_I2C_ADD,&cmdByte,1,HAL_MAX_DELAY);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6818      	ldr	r0, [r3, #0]
 80012d4:	f107 020f 	add.w	r2, r7, #15
 80012d8:	f04f 33ff 	mov.w	r3, #4294967295
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	2301      	movs	r3, #1
 80012e0:	21ec      	movs	r1, #236	@ 0xec
 80012e2:	f004 fed3 	bl	800608c <HAL_I2C_Master_Transmit>
 80012e6:	4603      	mov	r3, r0
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b15      	ldr	r3, [pc, #84]	@ (8001340 <readTemperatureData+0x7c>)
 80012ec:	701a      	strb	r2, [r3, #0]
	halStatus=HAL_I2C_Master_Receive(sensor->i2cHandle, BAR30_I2C_ADD, rxBuffer, 3, HAL_MAX_DELAY);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6818      	ldr	r0, [r3, #0]
 80012f2:	f107 020c 	add.w	r2, r7, #12
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	2303      	movs	r3, #3
 80012fe:	21ec      	movs	r1, #236	@ 0xec
 8001300:	f004 ffc2 	bl	8006288 <HAL_I2C_Master_Receive>
 8001304:	4603      	mov	r3, r0
 8001306:	461a      	mov	r2, r3
 8001308:	4b0d      	ldr	r3, [pc, #52]	@ (8001340 <readTemperatureData+0x7c>)
 800130a:	701a      	strb	r2, [r3, #0]
	sensor->rawTemperature|=((uint32_t)rxBuffer[0]<<16);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	7b3b      	ldrb	r3, [r7, #12]
 8001312:	041b      	lsls	r3, r3, #16
 8001314:	431a      	orrs	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	609a      	str	r2, [r3, #8]
	sensor->rawTemperature|=((uint32_t)rxBuffer[1]<<8);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	7b7b      	ldrb	r3, [r7, #13]
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	431a      	orrs	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	609a      	str	r2, [r3, #8]
	sensor->rawTemperature|=rxBuffer[2];
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	7bba      	ldrb	r2, [r7, #14]
 800132e:	431a      	orrs	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	609a      	str	r2, [r3, #8]


	return halStatus;
 8001334:	4b02      	ldr	r3, [pc, #8]	@ (8001340 <readTemperatureData+0x7c>)
 8001336:	781b      	ldrb	r3, [r3, #0]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	2000020c 	.word	0x2000020c

08001344 <Bar30CRCcheck>:


uint8_t Bar30CRCcheck(uint16_t* promData)
{
 8001344:	b480      	push	{r7}
 8001346:	b087      	sub	sp, #28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	uint8_t cnt;
	uint32_t remainder=0;
 800134c:	2300      	movs	r3, #0
 800134e:	613b      	str	r3, [r7, #16]
	uint8_t nbit;
	promData[0]=((promData[0])&0x0FFF);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001358:	b29a      	uxth	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	801a      	strh	r2, [r3, #0]
	for(cnt=0;cnt<16;cnt++)
 800135e:	2300      	movs	r3, #0
 8001360:	75fb      	strb	r3, [r7, #23]
 8001362:	e035      	b.n	80013d0 <Bar30CRCcheck+0x8c>
	{
		if(cnt%2==1)
 8001364:	7dfb      	ldrb	r3, [r7, #23]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	d00b      	beq.n	8001388 <Bar30CRCcheck+0x44>
			remainder^=(uint16_t)((promData[cnt>>1])& 0x00FF);
 8001370:	7dfb      	ldrb	r3, [r7, #23]
 8001372:	085b      	lsrs	r3, r3, #1
 8001374:	b2db      	uxtb	r3, r3
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	4413      	add	r3, r2
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	b2db      	uxtb	r3, r3
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	4053      	eors	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	e009      	b.n	800139c <Bar30CRCcheck+0x58>
		else
			remainder=(uint16_t)(promData[cnt>>1]>>8);
 8001388:	7dfb      	ldrb	r3, [r7, #23]
 800138a:	085b      	lsrs	r3, r3, #1
 800138c:	b2db      	uxtb	r3, r3
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	4413      	add	r3, r2
 8001394:	881b      	ldrh	r3, [r3, #0]
 8001396:	0a1b      	lsrs	r3, r3, #8
 8001398:	b29b      	uxth	r3, r3
 800139a:	613b      	str	r3, [r7, #16]
		for(nbit=8;nbit>0;nbit--)
 800139c:	2308      	movs	r3, #8
 800139e:	73fb      	strb	r3, [r7, #15]
 80013a0:	e010      	b.n	80013c4 <Bar30CRCcheck+0x80>
		{
			if(remainder&(0x8000))
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d005      	beq.n	80013b8 <Bar30CRCcheck+0x74>
				remainder=(remainder<<1)^0x3000;
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 80013b4:	613b      	str	r3, [r7, #16]
 80013b6:	e002      	b.n	80013be <Bar30CRCcheck+0x7a>
			else
				remainder=(remainder<<1);
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	613b      	str	r3, [r7, #16]
		for(nbit=8;nbit>0;nbit--)
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	3b01      	subs	r3, #1
 80013c2:	73fb      	strb	r3, [r7, #15]
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1eb      	bne.n	80013a2 <Bar30CRCcheck+0x5e>
	for(cnt=0;cnt<16;cnt++)
 80013ca:	7dfb      	ldrb	r3, [r7, #23]
 80013cc:	3301      	adds	r3, #1
 80013ce:	75fb      	strb	r3, [r7, #23]
 80013d0:	7dfb      	ldrb	r3, [r7, #23]
 80013d2:	2b0f      	cmp	r3, #15
 80013d4:	d9c6      	bls.n	8001364 <Bar30CRCcheck+0x20>
		}
	}
	remainder=((remainder>>12)&0x000F);
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	0b1b      	lsrs	r3, r3, #12
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	613b      	str	r3, [r7, #16]
	return ((remainder^0x00)==0);
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	bf0c      	ite	eq
 80013e6:	2301      	moveq	r3, #1
 80013e8:	2300      	movne	r3, #0
 80013ea:	b2db      	uxtb	r3, r3



}
 80013ec:	4618      	mov	r0, r3
 80013ee:	371c      	adds	r7, #28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <calculateTemperature>:

void calculateTemperature(Bar30* sensor)
{
 80013f8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80013fc:	b085      	sub	sp, #20
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
	int32_t temperature=0;
 8001402:	2100      	movs	r1, #0
 8001404:	60f9      	str	r1, [r7, #12]
	sensor->dT=sensor->rawTemperature-((uint32_t)(sensor->calibrationResult[5])*256l);
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	6888      	ldr	r0, [r1, #8]
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	8bc9      	ldrh	r1, [r1, #30]
 800140e:	0209      	lsls	r1, r1, #8
 8001410:	1a41      	subs	r1, r0, r1
 8001412:	4608      	mov	r0, r1
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	6248      	str	r0, [r1, #36]	@ 0x24
	temperature=2000l+(int64_t)(sensor->dT)*sensor->calibrationResult[6]/8388608LL;
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800141c:	17c8      	asrs	r0, r1, #31
 800141e:	4688      	mov	r8, r1
 8001420:	4681      	mov	r9, r0
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	8c09      	ldrh	r1, [r1, #32]
 8001426:	b289      	uxth	r1, r1
 8001428:	2000      	movs	r0, #0
 800142a:	460c      	mov	r4, r1
 800142c:	4605      	mov	r5, r0
 800142e:	fb04 f009 	mul.w	r0, r4, r9
 8001432:	fb08 f105 	mul.w	r1, r8, r5
 8001436:	4401      	add	r1, r0
 8001438:	fba8 2304 	umull	r2, r3, r8, r4
 800143c:	4419      	add	r1, r3
 800143e:	460b      	mov	r3, r1
 8001440:	2b00      	cmp	r3, #0
 8001442:	da06      	bge.n	8001452 <calculateTemperature+0x5a>
 8001444:	490e      	ldr	r1, [pc, #56]	@ (8001480 <calculateTemperature+0x88>)
 8001446:	eb12 0a01 	adds.w	sl, r2, r1
 800144a:	f143 0b00 	adc.w	fp, r3, #0
 800144e:	4652      	mov	r2, sl
 8001450:	465b      	mov	r3, fp
 8001452:	f04f 0000 	mov.w	r0, #0
 8001456:	f04f 0100 	mov.w	r1, #0
 800145a:	0dd0      	lsrs	r0, r2, #23
 800145c:	ea40 2043 	orr.w	r0, r0, r3, lsl #9
 8001460:	15d9      	asrs	r1, r3, #23
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4613      	mov	r3, r2
 8001468:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800146c:	60fb      	str	r3, [r7, #12]
	sensor->actualTemperature=temperature;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	611a      	str	r2, [r3, #16]


}
 8001474:	bf00      	nop
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800147e:	4770      	bx	lr
 8001480:	007fffff 	.word	0x007fffff

08001484 <calculatePressure>:

void calculatePressure(Bar30* sensor)
{
 8001484:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001488:	b099      	sub	sp, #100	@ 0x64
 800148a:	af00      	add	r7, sp, #0
 800148c:	6478      	str	r0, [r7, #68]	@ 0x44
	int32_t dT=sensor->dT;
 800148e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001492:	65fb      	str	r3, [r7, #92]	@ 0x5c
	int64_t offset=0;
 8001494:	f04f 0200 	mov.w	r2, #0
 8001498:	f04f 0300 	mov.w	r3, #0
 800149c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	int64_t sensitivity=0;
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	f04f 0300 	mov.w	r3, #0
 80014a8:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	offset=((int64_t)sensor->calibrationResult[2]*65536l) + ((int64_t)(sensor->calibrationResult[4] * dT)/128l);
 80014ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014ae:	8b1b      	ldrh	r3, [r3, #24]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	2200      	movs	r2, #0
 80014b4:	461c      	mov	r4, r3
 80014b6:	4615      	mov	r5, r2
 80014b8:	f04f 0000 	mov.w	r0, #0
 80014bc:	f04f 0100 	mov.w	r1, #0
 80014c0:	0429      	lsls	r1, r5, #16
 80014c2:	ea41 4114 	orr.w	r1, r1, r4, lsr #16
 80014c6:	0420      	lsls	r0, r4, #16
 80014c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014ca:	8b9b      	ldrh	r3, [r3, #28]
 80014cc:	461a      	mov	r2, r3
 80014ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014d0:	fb02 f303 	mul.w	r3, r2, r3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	da00      	bge.n	80014da <calculatePressure+0x56>
 80014d8:	337f      	adds	r3, #127	@ 0x7f
 80014da:	11db      	asrs	r3, r3, #7
 80014dc:	17da      	asrs	r2, r3, #31
 80014de:	469a      	mov	sl, r3
 80014e0:	4693      	mov	fp, r2
 80014e2:	eb10 030a 	adds.w	r3, r0, sl
 80014e6:	61bb      	str	r3, [r7, #24]
 80014e8:	eb41 030b 	adc.w	r3, r1, fp
 80014ec:	61fb      	str	r3, [r7, #28]
 80014ee:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80014f2:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
	sensitivity = (((int64_t)sensor->calibrationResult[1]*32768l)) + (((int64_t)(dT * sensor->calibrationResult[3]))/256l);
 80014f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014f8:	8adb      	ldrh	r3, [r3, #22]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	2200      	movs	r2, #0
 80014fe:	4698      	mov	r8, r3
 8001500:	4691      	mov	r9, r2
 8001502:	f04f 0000 	mov.w	r0, #0
 8001506:	f04f 0100 	mov.w	r1, #0
 800150a:	ea4f 31c9 	mov.w	r1, r9, lsl #15
 800150e:	ea41 4158 	orr.w	r1, r1, r8, lsr #17
 8001512:	ea4f 30c8 	mov.w	r0, r8, lsl #15
 8001516:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001518:	8b5b      	ldrh	r3, [r3, #26]
 800151a:	461a      	mov	r2, r3
 800151c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800151e:	fb02 f303 	mul.w	r3, r2, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	da00      	bge.n	8001528 <calculatePressure+0xa4>
 8001526:	33ff      	adds	r3, #255	@ 0xff
 8001528:	121b      	asrs	r3, r3, #8
 800152a:	17da      	asrs	r2, r3, #31
 800152c:	633b      	str	r3, [r7, #48]	@ 0x30
 800152e:	637a      	str	r2, [r7, #52]	@ 0x34
 8001530:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001534:	4623      	mov	r3, r4
 8001536:	18c3      	adds	r3, r0, r3
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	462b      	mov	r3, r5
 800153c:	eb41 0303 	adc.w	r3, r1, r3
 8001540:	617b      	str	r3, [r7, #20]
 8001542:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001546:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
	sensor->actualPressure=(sensor->rawPressure*sensitivity/(2097152l)-offset)/(8192l);
 800154a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001552:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001554:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001556:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800155a:	462a      	mov	r2, r5
 800155c:	fb02 f203 	mul.w	r2, r2, r3
 8001560:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001562:	4621      	mov	r1, r4
 8001564:	fb01 f303 	mul.w	r3, r1, r3
 8001568:	4413      	add	r3, r2
 800156a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800156c:	4621      	mov	r1, r4
 800156e:	fba2 1201 	umull	r1, r2, r2, r1
 8001572:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001574:	460a      	mov	r2, r1
 8001576:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001578:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800157a:	4413      	add	r3, r2
 800157c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800157e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001582:	2b00      	cmp	r3, #0
 8001584:	da07      	bge.n	8001596 <calculatePressure+0x112>
 8001586:	4923      	ldr	r1, [pc, #140]	@ (8001614 <calculatePressure+0x190>)
 8001588:	1851      	adds	r1, r2, r1
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	f143 0300 	adc.w	r3, r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001596:	f04f 0000 	mov.w	r0, #0
 800159a:	f04f 0100 	mov.w	r1, #0
 800159e:	0d50      	lsrs	r0, r2, #21
 80015a0:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 80015a4:	1559      	asrs	r1, r3, #21
 80015a6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80015aa:	1a84      	subs	r4, r0, r2
 80015ac:	623c      	str	r4, [r7, #32]
 80015ae:	eb61 0303 	sbc.w	r3, r1, r3
 80015b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80015b4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	da08      	bge.n	80015ce <calculatePressure+0x14a>
 80015bc:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 80015c0:	1851      	adds	r1, r2, r1
 80015c2:	6039      	str	r1, [r7, #0]
 80015c4:	f143 0300 	adc.w	r3, r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015ce:	f04f 0000 	mov.w	r0, #0
 80015d2:	f04f 0100 	mov.w	r1, #0
 80015d6:	0b50      	lsrs	r0, r2, #13
 80015d8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80015dc:	1359      	asrs	r1, r3, #13
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015e4:	60da      	str	r2, [r3, #12]
	sensor->actualPressure=sensor->actualPressure/10.0f; // result in millibar
 80015e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	ee07 3a90 	vmov	s15, r3
 80015ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015f2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80015f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015fe:	ee17 2a90 	vmov	r2, s15
 8001602:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001604:	60da      	str	r2, [r3, #12]


}
 8001606:	bf00      	nop
 8001608:	3764      	adds	r7, #100	@ 0x64
 800160a:	46bd      	mov	sp, r7
 800160c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	001fffff 	.word	0x001fffff

08001618 <calculateDepth>:
float calculateDepth(Bar30* sensor)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	return (sensor->actualPressure-1013.0f)/(FLUID_DENSITY*9.80665f);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	ee07 3a90 	vmov	s15, r3
 8001628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800162c:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001650 <calculateDepth+0x38>
 8001630:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001634:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001654 <calculateDepth+0x3c>
 8001638:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800163c:	eef0 7a66 	vmov.f32	s15, s13
}
 8001640:	eeb0 0a67 	vmov.f32	s0, s15
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	447d4000 	.word	0x447d4000
 8001654:	46181d08 	.word	0x46181d08

08001658 <EKF_Init>:
#include "KalmanRollPitch.h"


void EKF_Init(EKF *ekf, float P, float Q[2], float R[3]) {
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	ed87 0a02 	vstr	s0, [r7, #8]
 8001664:	6079      	str	r1, [r7, #4]
 8001666:	603a      	str	r2, [r7, #0]

	/* Reset state estimates */
	ekf->phi_r 		= 0.0f;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
	ekf->theta_r 	= 0.0f;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f04f 0200 	mov.w	r2, #0
 8001676:	605a      	str	r2, [r3, #4]

	/* Initialise state covariance matrix */
	ekf->P[0][0] = P; ekf->P[0][1] = 0.0f;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f04f 0200 	mov.w	r2, #0
 8001684:	60da      	str	r2, [r3, #12]
	ekf->P[1][0] = 0.0f; ekf->P[1][1] = P;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	68ba      	ldr	r2, [r7, #8]
 8001692:	615a      	str	r2, [r3, #20]

	/* Set process and measurement noise */
	ekf->Q[0] = Q[0];
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	619a      	str	r2, [r3, #24]
	ekf->Q[1] = Q[1];
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	61da      	str	r2, [r3, #28]

	ekf->R[0] = R[0];
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	621a      	str	r2, [r3, #32]
	ekf->R[1] = R[1];
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685a      	ldr	r2, [r3, #4]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	625a      	str	r2, [r3, #36]	@ 0x24
	ekf->R[2] = R[2];
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	629a      	str	r2, [r3, #40]	@ 0x28

}
 80016bc:	bf00      	nop
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <checkMPU6050Ready>:
#include "MPU6050.h"
extern I2C_HandleTypeDef hi2c1;

uint8_t checkMPU6050Ready()
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	if((HAL_I2C_IsDeviceReady(&hi2c1,MPU6050ADDR+0,1,100)==HAL_OK))
 80016cc:	2364      	movs	r3, #100	@ 0x64
 80016ce:	2201      	movs	r2, #1
 80016d0:	21d0      	movs	r1, #208	@ 0xd0
 80016d2:	4805      	ldr	r0, [pc, #20]	@ (80016e8 <checkMPU6050Ready+0x20>)
 80016d4:	f005 fcb2 	bl	800703c <HAL_I2C_IsDeviceReady>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <checkMPU6050Ready+0x1a>
	{
		return 1;
 80016de:	2301      	movs	r3, #1
 80016e0:	e000      	b.n	80016e4 <checkMPU6050Ready+0x1c>
	}
	return 0;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	200026dc 	.word	0x200026dc

080016ec <i2cWriteRegMPU6050>:
uint8_t i2cWriteRegMPU6050(uint16_t devAddr, uint16_t RegAddr, uint8_t* data){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af04      	add	r7, sp, #16
 80016f2:	4603      	mov	r3, r0
 80016f4:	603a      	str	r2, [r7, #0]
 80016f6:	80fb      	strh	r3, [r7, #6]
 80016f8:	460b      	mov	r3, r1
 80016fa:	80bb      	strh	r3, [r7, #4]

	return(HAL_I2C_Mem_Write(&hi2c1,devAddr,RegAddr, 1, data ,1,HAL_MAX_DELAY)==HAL_OK);
 80016fc:	88ba      	ldrh	r2, [r7, #4]
 80016fe:	88f9      	ldrh	r1, [r7, #6]
 8001700:	f04f 33ff 	mov.w	r3, #4294967295
 8001704:	9302      	str	r3, [sp, #8]
 8001706:	2301      	movs	r3, #1
 8001708:	9301      	str	r3, [sp, #4]
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	2301      	movs	r3, #1
 8001710:	4806      	ldr	r0, [pc, #24]	@ (800172c <i2cWriteRegMPU6050+0x40>)
 8001712:	f004 ffdf 	bl	80066d4 <HAL_I2C_Mem_Write>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	bf0c      	ite	eq
 800171c:	2301      	moveq	r3, #1
 800171e:	2300      	movne	r3, #0
 8001720:	b2db      	uxtb	r3, r3

}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200026dc 	.word	0x200026dc

08001730 <MPU6050init>:

uint8_t MPU6050init(MPU6050* imu, I2C_HandleTypeDef* i2cHandle)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
	imu->i2cHandle=i2cHandle;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	601a      	str	r2, [r3, #0]

	for(int i=0;i<3;i++)
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	e013      	b.n	800176e <MPU6050init+0x3e>
	{
		imu->acc_mps2[i]=0;
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	3304      	adds	r3, #4
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
		imu->accelOffsets[i]=0;
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	330e      	adds	r3, #14
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	3304      	adds	r3, #4
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
	for(int i=0;i<3;i++)
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	3301      	adds	r3, #1
 800176c:	617b      	str	r3, [r7, #20]
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	2b02      	cmp	r3, #2
 8001772:	dde8      	ble.n	8001746 <MPU6050init+0x16>
	}


	for(int i=0;i<3;i++)
 8001774:	2300      	movs	r3, #0
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	e012      	b.n	80017a0 <MPU6050init+0x70>
	{
		imu->gyr_rps[i]=0;
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	3304      	adds	r3, #4
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4413      	add	r3, r2
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
		imu->gyroOffsets[i]=0;
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	330c      	adds	r3, #12
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
	for(int i=0;i<3;i++)
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	3301      	adds	r3, #1
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	dde9      	ble.n	800177a <MPU6050init+0x4a>
	}

	for(int i=0; i<14;i++)
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	e008      	b.n	80017be <MPU6050init+0x8e>
		imu->rxData[i]=0;
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	4413      	add	r3, r2
 80017b2:	3320      	adds	r3, #32
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<14;i++)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	3301      	adds	r3, #1
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2b0d      	cmp	r3, #13
 80017c2:	ddf3      	ble.n	80017ac <MPU6050init+0x7c>

	imu->rxFlag=0;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	imu->dataReadyFlag=0;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	imu->temp_degC=0;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f04f 0200 	mov.w	r2, #0
 80017da:	61da      	str	r2, [r3, #28]
	imu->numCalibrationMeas=0;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48



	uint8_t numErrors=0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	72fb      	strb	r3, [r7, #11]
	//Disable FSYNC, enable digital LPF ( fs=1kHz, bandwidth: acc=94 Hz, gyr=98Hz )
	uint8_t data=0x02;
 80017e8:	2302      	movs	r3, #2
 80017ea:	72bb      	strb	r3, [r7, #10]
	if(i2cWriteRegMPU6050(MPU6050ADDR,MPU6050_CONFIG_REG,&data)==0)
 80017ec:	f107 030a 	add.w	r3, r7, #10
 80017f0:	461a      	mov	r2, r3
 80017f2:	211a      	movs	r1, #26
 80017f4:	20d0      	movs	r0, #208	@ 0xd0
 80017f6:	f7ff ff79 	bl	80016ec <i2cWriteRegMPU6050>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d102      	bne.n	8001806 <MPU6050init+0xd6>
		numErrors+=1;
 8001800:	7afb      	ldrb	r3, [r7, #11]
 8001802:	3301      	adds	r3, #1
 8001804:	72fb      	strb	r3, [r7, #11]

	// Enable Interrupt, clear status bits on any read operation
	data=0x10;
 8001806:	2310      	movs	r3, #16
 8001808:	72bb      	strb	r3, [r7, #10]
	if(i2cWriteRegMPU6050(MPU6050ADDR,MPU6050_INT_PIN_CFG_REG,&data)==0)
 800180a:	f107 030a 	add.w	r3, r7, #10
 800180e:	461a      	mov	r2, r3
 8001810:	2137      	movs	r1, #55	@ 0x37
 8001812:	20d0      	movs	r0, #208	@ 0xd0
 8001814:	f7ff ff6a 	bl	80016ec <i2cWriteRegMPU6050>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d102      	bne.n	8001824 <MPU6050init+0xf4>
		numErrors+=1;
 800181e:	7afb      	ldrb	r3, [r7, #11]
 8001820:	3301      	adds	r3, #1
 8001822:	72fb      	strb	r3, [r7, #11]

	data=0x01;
 8001824:	2301      	movs	r3, #1
 8001826:	72bb      	strb	r3, [r7, #10]
	if(i2cWriteRegMPU6050(MPU6050ADDR,MPU6050_INT_ENABLE_REG,&data)==0)
 8001828:	f107 030a 	add.w	r3, r7, #10
 800182c:	461a      	mov	r2, r3
 800182e:	2138      	movs	r1, #56	@ 0x38
 8001830:	20d0      	movs	r0, #208	@ 0xd0
 8001832:	f7ff ff5b 	bl	80016ec <i2cWriteRegMPU6050>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d102      	bne.n	8001842 <MPU6050init+0x112>
		numErrors+=1;
 800183c:	7afb      	ldrb	r3, [r7, #11]
 800183e:	3301      	adds	r3, #1
 8001840:	72fb      	strb	r3, [r7, #11]

	// Wake-up MPU6050
	data=0x00;
 8001842:	2300      	movs	r3, #0
 8001844:	72bb      	strb	r3, [r7, #10]
	if(i2cWriteRegMPU6050(MPU6050ADDR,MPU6050_PWR_MGMT_1_REG,&data)==0)
 8001846:	f107 030a 	add.w	r3, r7, #10
 800184a:	461a      	mov	r2, r3
 800184c:	216b      	movs	r1, #107	@ 0x6b
 800184e:	20d0      	movs	r0, #208	@ 0xd0
 8001850:	f7ff ff4c 	bl	80016ec <i2cWriteRegMPU6050>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d102      	bne.n	8001860 <MPU6050init+0x130>
		numErrors+=1;
 800185a:	7afb      	ldrb	r3, [r7, #11]
 800185c:	3301      	adds	r3, #1
 800185e:	72fb      	strb	r3, [r7, #11]

	return numErrors==0;
 8001860:	7afb      	ldrb	r3, [r7, #11]
 8001862:	2b00      	cmp	r3, #0
 8001864:	bf0c      	ite	eq
 8001866:	2301      	moveq	r3, #1
 8001868:	2300      	movne	r3, #0
 800186a:	b2db      	uxtb	r3, r3

}
 800186c:	4618      	mov	r0, r3
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <MPU6050readDataDMA>:

uint8_t MPU6050readDataDMA(MPU6050* imu)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af02      	add	r7, sp, #8
 800187a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef readStatus;
	readStatus=HAL_I2C_Mem_Read_DMA(imu->i2cHandle,MPU6050ADDR,MPU6050_DATA_START_ADD,1,imu->rxData,14);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6818      	ldr	r0, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3320      	adds	r3, #32
 8001884:	220e      	movs	r2, #14
 8001886:	9201      	str	r2, [sp, #4]
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	2301      	movs	r3, #1
 800188c:	223b      	movs	r2, #59	@ 0x3b
 800188e:	21d0      	movs	r1, #208	@ 0xd0
 8001890:	f005 fa40 	bl	8006d14 <HAL_I2C_Mem_Read_DMA>
 8001894:	4603      	mov	r3, r0
 8001896:	73fb      	strb	r3, [r7, #15]
	imu->dataReadyFlag=0;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	if(readStatus==HAL_OK)return 1;
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <MPU6050readDataDMA+0x36>
 80018a6:	2301      	movs	r3, #1
 80018a8:	e00a      	b.n	80018c0 <MPU6050readDataDMA+0x4c>
	else if(readStatus==HAL_ERROR)return 2;
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d101      	bne.n	80018b4 <MPU6050readDataDMA+0x40>
 80018b0:	2302      	movs	r3, #2
 80018b2:	e005      	b.n	80018c0 <MPU6050readDataDMA+0x4c>
	else if (readStatus==HAL_BUSY)return 3;
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d101      	bne.n	80018be <MPU6050readDataDMA+0x4a>
 80018ba:	2303      	movs	r3, #3
 80018bc:	e000      	b.n	80018c0 <MPU6050readDataDMA+0x4c>
	else return 0;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <MPU6050convertRawData>:

void MPU6050convertRawData(MPU6050* imu)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b087      	sub	sp, #28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	int16_t acc[3]={( (imu->rxData[0]<<8)|imu->rxData[1] ),( (imu->rxData[2]<<8)|imu->rxData[3] ),( (imu->rxData[4]<<8)|imu->rxData[5] )};
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018d6:	021b      	lsls	r3, r3, #8
 80018d8:	b21a      	sxth	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80018e0:	b21b      	sxth	r3, r3
 80018e2:	4313      	orrs	r3, r2
 80018e4:	b21b      	sxth	r3, r3
 80018e6:	823b      	strh	r3, [r7, #16]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80018ee:	021b      	lsls	r3, r3, #8
 80018f0:	b21a      	sxth	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80018f8:	b21b      	sxth	r3, r3
 80018fa:	4313      	orrs	r3, r2
 80018fc:	b21b      	sxth	r3, r3
 80018fe:	827b      	strh	r3, [r7, #18]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001906:	021b      	lsls	r3, r3, #8
 8001908:	b21a      	sxth	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001910:	b21b      	sxth	r3, r3
 8001912:	4313      	orrs	r3, r2
 8001914:	b21b      	sxth	r3, r3
 8001916:	82bb      	strh	r3, [r7, #20]
	//int16_t temperature=(imu->rxData[6]<<8)|imu->rxData[7];
	int16_t gyr[3]={( (imu->rxData[8]<<8)|imu->rxData[9] ),( (imu->rxData[10]<<8)|imu->rxData[11] ),( (imu->rxData[12]<<8)|imu->rxData[13] )};
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800191e:	021b      	lsls	r3, r3, #8
 8001920:	b21a      	sxth	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001928:	b21b      	sxth	r3, r3
 800192a:	4313      	orrs	r3, r2
 800192c:	b21b      	sxth	r3, r3
 800192e:	813b      	strh	r3, [r7, #8]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001936:	021b      	lsls	r3, r3, #8
 8001938:	b21a      	sxth	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001940:	b21b      	sxth	r3, r3
 8001942:	4313      	orrs	r3, r2
 8001944:	b21b      	sxth	r3, r3
 8001946:	817b      	strh	r3, [r7, #10]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800194e:	021b      	lsls	r3, r3, #8
 8001950:	b21a      	sxth	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001958:	b21b      	sxth	r3, r3
 800195a:	4313      	orrs	r3, r2
 800195c:	b21b      	sxth	r3, r3
 800195e:	81bb      	strh	r3, [r7, #12]

	// Before accel calibration
	imu->acc_mps2[0]=MPU6050_ACC_RAW_TO_MPS2*acc[0];
 8001960:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001964:	ee07 3a90 	vmov	s15, r3
 8001968:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800196c:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8001aa0 <MPU6050convertRawData+0x1d8>
 8001970:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	edc3 7a01 	vstr	s15, [r3, #4]
	imu->acc_mps2[1]=MPU6050_ACC_RAW_TO_MPS2*acc[1];
 800197a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800197e:	ee07 3a90 	vmov	s15, r3
 8001982:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001986:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8001aa0 <MPU6050convertRawData+0x1d8>
 800198a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	edc3 7a02 	vstr	s15, [r3, #8]
	imu->acc_mps2[2]=MPU6050_ACC_RAW_TO_MPS2*acc[2];
 8001994:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001998:	ee07 3a90 	vmov	s15, r3
 800199c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019a0:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8001aa0 <MPU6050convertRawData+0x1d8>
 80019a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	edc3 7a03 	vstr	s15, [r3, #12]

	// After accel calibration
	imu->accelOffsets[0]=ACCEL_CALI_SLOPE_X*imu->acc_mps2[0]+CALI_INTERCEPT_X; // offset calculated from linear regression
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80019b4:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001aa4 <MPU6050convertRawData+0x1dc>
 80019b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019bc:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001aa8 <MPU6050convertRawData+0x1e0>
 80019c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	imu->acc_mps2[0]=imu->acc_mps2[0]-imu->accelOffsets[0];
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80019d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	edc3 7a01 	vstr	s15, [r3, #4]

	imu->accelOffsets[1]=ACCEL_CALI_SLOPE_Y*imu->acc_mps2[1]+CALI_INTERCEPT_Y; // offset calculated from linear regression
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80019e6:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001aac <MPU6050convertRawData+0x1e4>
 80019ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ee:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001ab0 <MPU6050convertRawData+0x1e8>
 80019f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	imu->acc_mps2[1]=imu->acc_mps2[1]-imu->accelOffsets[1];
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001a08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	edc3 7a02 	vstr	s15, [r3, #8]

	imu->accelOffsets[2]=ACCEL_CALI_SLOPE_Z*imu->acc_mps2[2]+CALI_INTERCEPT_Z; // offset calculated from linear regression
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a18:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001ab4 <MPU6050convertRawData+0x1ec>
 8001a1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a20:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001ab8 <MPU6050convertRawData+0x1f0>
 8001a24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	imu->acc_mps2[2]=imu->acc_mps2[2]-imu->accelOffsets[2];
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001a3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	edc3 7a03 	vstr	s15, [r3, #12]


	imu->gyr_rps[0]=MPU6050_GYR_RAW_TO_RPS*gyr[0];
 8001a44:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001a48:	ee07 3a90 	vmov	s15, r3
 8001a4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a50:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001abc <MPU6050convertRawData+0x1f4>
 8001a54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	edc3 7a04 	vstr	s15, [r3, #16]
	imu->gyr_rps[1]=MPU6050_GYR_RAW_TO_RPS*gyr[1];
 8001a5e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001a62:	ee07 3a90 	vmov	s15, r3
 8001a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a6a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001abc <MPU6050convertRawData+0x1f4>
 8001a6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	edc3 7a05 	vstr	s15, [r3, #20]
	imu->gyr_rps[2]=MPU6050_GYR_RAW_TO_RPS*gyr[2];
 8001a78:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001a7c:	ee07 3a90 	vmov	s15, r3
 8001a80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a84:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001abc <MPU6050convertRawData+0x1f4>
 8001a88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	edc3 7a06 	vstr	s15, [r3, #24]

}
 8001a92:	bf00      	nop
 8001a94:	371c      	adds	r7, #28
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	3a1cf5c1 	.word	0x3a1cf5c1
 8001aa4:	3beb09e6 	.word	0x3beb09e6
 8001aa8:	3f09de24 	.word	0x3f09de24
 8001aac:	3bb0e4ed 	.word	0x3bb0e4ed
 8001ab0:	3dc39596 	.word	0x3dc39596
 8001ab4:	3b35da35 	.word	0x3b35da35
 8001ab8:	3ee24051 	.word	0x3ee24051
 8001abc:	390bb3fd 	.word	0x390bb3fd

08001ac0 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001aca:	4804      	ldr	r0, [pc, #16]	@ (8001adc <SELECT+0x1c>)
 8001acc:	f004 f968 	bl	8005da0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	f002 fd73 	bl	80045bc <HAL_Delay>
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40020400 	.word	0x40020400

08001ae0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001aea:	4804      	ldr	r0, [pc, #16]	@ (8001afc <DESELECT+0x1c>)
 8001aec:	f004 f958 	bl	8005da0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001af0:	2001      	movs	r0, #1
 8001af2:	f002 fd63 	bl	80045bc <HAL_Delay>
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40020400 	.word	0x40020400

08001b00 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001b0a:	bf00      	nop
 8001b0c:	4b08      	ldr	r3, [pc, #32]	@ (8001b30 <SPI_TxByte+0x30>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d1f8      	bne.n	8001b0c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001b1a:	1df9      	adds	r1, r7, #7
 8001b1c:	2364      	movs	r3, #100	@ 0x64
 8001b1e:	2201      	movs	r2, #1
 8001b20:	4803      	ldr	r0, [pc, #12]	@ (8001b30 <SPI_TxByte+0x30>)
 8001b22:	f008 fbb2 	bl	800a28a <HAL_SPI_Transmit>
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	200004b4 	.word	0x200004b4

08001b34 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001b40:	bf00      	nop
 8001b42:	4b08      	ldr	r3, [pc, #32]	@ (8001b64 <SPI_TxBuffer+0x30>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d1f8      	bne.n	8001b42 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001b50:	887a      	ldrh	r2, [r7, #2]
 8001b52:	2364      	movs	r3, #100	@ 0x64
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	4803      	ldr	r0, [pc, #12]	@ (8001b64 <SPI_TxBuffer+0x30>)
 8001b58:	f008 fb97 	bl	800a28a <HAL_SPI_Transmit>
}
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	200004b4 	.word	0x200004b4

08001b68 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8001b6e:	23ff      	movs	r3, #255	@ 0xff
 8001b70:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001b72:	bf00      	nop
 8001b74:	4b09      	ldr	r3, [pc, #36]	@ (8001b9c <SPI_RxByte+0x34>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d1f8      	bne.n	8001b74 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001b82:	1dba      	adds	r2, r7, #6
 8001b84:	1df9      	adds	r1, r7, #7
 8001b86:	2364      	movs	r3, #100	@ 0x64
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	4803      	ldr	r0, [pc, #12]	@ (8001b9c <SPI_RxByte+0x34>)
 8001b8e:	f008 fcb8 	bl	800a502 <HAL_SPI_TransmitReceive>

	return data;
 8001b92:	79bb      	ldrb	r3, [r7, #6]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	200004b4 	.word	0x200004b4

08001ba0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8001ba8:	f7ff ffde 	bl	8001b68 <SPI_RxByte>
 8001bac:	4603      	mov	r3, r0
 8001bae:	461a      	mov	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	701a      	strb	r2, [r3, #0]
}
 8001bb4:	bf00      	nop
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bec <SD_ReadyWait+0x30>)
 8001bc4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001bc8:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8001bca:	f7ff ffcd 	bl	8001b68 <SPI_RxByte>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	2bff      	cmp	r3, #255	@ 0xff
 8001bd6:	d003      	beq.n	8001be0 <SD_ReadyWait+0x24>
 8001bd8:	4b04      	ldr	r3, [pc, #16]	@ (8001bec <SD_ReadyWait+0x30>)
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1f4      	bne.n	8001bca <SD_ReadyWait+0xe>

	return res;
 8001be0:	79fb      	ldrb	r3, [r7, #7]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000210 	.word	0x20000210

08001bf0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001bf6:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8001bfa:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001bfc:	f7ff ff70 	bl	8001ae0 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001c00:	2300      	movs	r3, #0
 8001c02:	60bb      	str	r3, [r7, #8]
 8001c04:	e005      	b.n	8001c12 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001c06:	20ff      	movs	r0, #255	@ 0xff
 8001c08:	f7ff ff7a 	bl	8001b00 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	2b09      	cmp	r3, #9
 8001c16:	ddf6      	ble.n	8001c06 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001c18:	f7ff ff52 	bl	8001ac0 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001c1c:	2340      	movs	r3, #64	@ 0x40
 8001c1e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001c30:	2395      	movs	r3, #149	@ 0x95
 8001c32:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001c34:	463b      	mov	r3, r7
 8001c36:	2106      	movs	r1, #6
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ff7b 	bl	8001b34 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001c3e:	e002      	b.n	8001c46 <SD_PowerOn+0x56>
	{
		cnt--;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001c46:	f7ff ff8f 	bl	8001b68 <SPI_RxByte>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d002      	beq.n	8001c56 <SD_PowerOn+0x66>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f4      	bne.n	8001c40 <SD_PowerOn+0x50>
	}

	DESELECT();
 8001c56:	f7ff ff43 	bl	8001ae0 <DESELECT>
	SPI_TxByte(0XFF);
 8001c5a:	20ff      	movs	r0, #255	@ 0xff
 8001c5c:	f7ff ff50 	bl	8001b00 <SPI_TxByte>

	PowerFlag = 1;
 8001c60:	4b03      	ldr	r3, [pc, #12]	@ (8001c70 <SD_PowerOn+0x80>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	701a      	strb	r2, [r3, #0]
}
 8001c66:	bf00      	nop
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000213 	.word	0x20000213

08001c74 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001c78:	4b03      	ldr	r3, [pc, #12]	@ (8001c88 <SD_PowerOff+0x14>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
}
 8001c7e:	bf00      	nop
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	20000213 	.word	0x20000213

08001c8c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001c90:	4b03      	ldr	r3, [pc, #12]	@ (8001ca0 <SD_CheckPower+0x14>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	20000213 	.word	0x20000213

08001ca4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001cae:	4b13      	ldr	r3, [pc, #76]	@ (8001cfc <SD_RxDataBlock+0x58>)
 8001cb0:	22c8      	movs	r2, #200	@ 0xc8
 8001cb2:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001cb4:	f7ff ff58 	bl	8001b68 <SPI_RxByte>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
 8001cbe:	2bff      	cmp	r3, #255	@ 0xff
 8001cc0:	d103      	bne.n	8001cca <SD_RxDataBlock+0x26>
 8001cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cfc <SD_RxDataBlock+0x58>)
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f4      	bne.n	8001cb4 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
 8001ccc:	2bfe      	cmp	r3, #254	@ 0xfe
 8001cce:	d001      	beq.n	8001cd4 <SD_RxDataBlock+0x30>
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	e00f      	b.n	8001cf4 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	607a      	str	r2, [r7, #4]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff ff60 	bl	8001ba0 <SPI_RxBytePtr>
	} while(len--);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	1e5a      	subs	r2, r3, #1
 8001ce4:	603a      	str	r2, [r7, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f4      	bne.n	8001cd4 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8001cea:	f7ff ff3d 	bl	8001b68 <SPI_RxByte>
	SPI_RxByte();
 8001cee:	f7ff ff3b 	bl	8001b68 <SPI_RxByte>

	return TRUE;
 8001cf2:	2301      	movs	r3, #1
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	2000020e 	.word	0x2000020e

08001d00 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001d10:	f7ff ff54 	bl	8001bbc <SD_ReadyWait>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2bff      	cmp	r3, #255	@ 0xff
 8001d18:	d001      	beq.n	8001d1e <SD_TxDataBlock+0x1e>
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	e02f      	b.n	8001d7e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001d1e:	78fb      	ldrb	r3, [r7, #3]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff feed 	bl	8001b00 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001d26:	78fb      	ldrb	r3, [r7, #3]
 8001d28:	2bfd      	cmp	r3, #253	@ 0xfd
 8001d2a:	d020      	beq.n	8001d6e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001d2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff feff 	bl	8001b34 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001d36:	f7ff ff17 	bl	8001b68 <SPI_RxByte>
		SPI_RxByte();
 8001d3a:	f7ff ff15 	bl	8001b68 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8001d3e:	e00b      	b.n	8001d58 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001d40:	f7ff ff12 	bl	8001b68 <SPI_RxByte>
 8001d44:	4603      	mov	r3, r0
 8001d46:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
 8001d4a:	f003 031f 	and.w	r3, r3, #31
 8001d4e:	2b05      	cmp	r3, #5
 8001d50:	d006      	beq.n	8001d60 <SD_TxDataBlock+0x60>
			i++;
 8001d52:	7bbb      	ldrb	r3, [r7, #14]
 8001d54:	3301      	adds	r3, #1
 8001d56:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001d58:	7bbb      	ldrb	r3, [r7, #14]
 8001d5a:	2b40      	cmp	r3, #64	@ 0x40
 8001d5c:	d9f0      	bls.n	8001d40 <SD_TxDataBlock+0x40>
 8001d5e:	e000      	b.n	8001d62 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001d60:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001d62:	bf00      	nop
 8001d64:	f7ff ff00 	bl	8001b68 <SPI_RxByte>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0fa      	beq.n	8001d64 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001d6e:	7bfb      	ldrb	r3, [r7, #15]
 8001d70:	f003 031f 	and.w	r3, r3, #31
 8001d74:	2b05      	cmp	r3, #5
 8001d76:	d101      	bne.n	8001d7c <SD_TxDataBlock+0x7c>
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e000      	b.n	8001d7e <SD_TxDataBlock+0x7e>

	return FALSE;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b084      	sub	sp, #16
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	6039      	str	r1, [r7, #0]
 8001d90:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001d92:	f7ff ff13 	bl	8001bbc <SD_ReadyWait>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2bff      	cmp	r3, #255	@ 0xff
 8001d9a:	d001      	beq.n	8001da0 <SD_SendCmd+0x1a>
 8001d9c:	23ff      	movs	r3, #255	@ 0xff
 8001d9e:	e042      	b.n	8001e26 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff feac 	bl	8001b00 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	0e1b      	lsrs	r3, r3, #24
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fea6 	bl	8001b00 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	0c1b      	lsrs	r3, r3, #16
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fea0 	bl	8001b00 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	0a1b      	lsrs	r3, r3, #8
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff fe9a 	bl	8001b00 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff fe95 	bl	8001b00 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	2b40      	cmp	r3, #64	@ 0x40
 8001dda:	d102      	bne.n	8001de2 <SD_SendCmd+0x5c>
 8001ddc:	2395      	movs	r3, #149	@ 0x95
 8001dde:	73fb      	strb	r3, [r7, #15]
 8001de0:	e007      	b.n	8001df2 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	2b48      	cmp	r3, #72	@ 0x48
 8001de6:	d102      	bne.n	8001dee <SD_SendCmd+0x68>
 8001de8:	2387      	movs	r3, #135	@ 0x87
 8001dea:	73fb      	strb	r3, [r7, #15]
 8001dec:	e001      	b.n	8001df2 <SD_SendCmd+0x6c>
	else crc = 1;
 8001dee:	2301      	movs	r3, #1
 8001df0:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff fe83 	bl	8001b00 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	2b4c      	cmp	r3, #76	@ 0x4c
 8001dfe:	d101      	bne.n	8001e04 <SD_SendCmd+0x7e>
 8001e00:	f7ff feb2 	bl	8001b68 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001e04:	230a      	movs	r3, #10
 8001e06:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001e08:	f7ff feae 	bl	8001b68 <SPI_RxByte>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001e10:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	da05      	bge.n	8001e24 <SD_SendCmd+0x9e>
 8001e18:	7bbb      	ldrb	r3, [r7, #14]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	73bb      	strb	r3, [r7, #14]
 8001e1e:	7bbb      	ldrb	r3, [r7, #14]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1f1      	bne.n	8001e08 <SD_SendCmd+0x82>

	return res;
 8001e24:	7b7b      	ldrb	r3, [r7, #13]
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
	...

08001e30 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001e30:	b590      	push	{r4, r7, lr}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <SD_disk_initialize+0x14>
 8001e40:	2301      	movs	r3, #1
 8001e42:	e0d1      	b.n	8001fe8 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001e44:	4b6a      	ldr	r3, [pc, #424]	@ (8001ff0 <SD_disk_initialize+0x1c0>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <SD_disk_initialize+0x2a>
 8001e52:	4b67      	ldr	r3, [pc, #412]	@ (8001ff0 <SD_disk_initialize+0x1c0>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	e0c6      	b.n	8001fe8 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8001e5a:	f7ff fec9 	bl	8001bf0 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001e5e:	f7ff fe2f 	bl	8001ac0 <SELECT>

	/* check disk type */
	type = 0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001e66:	2100      	movs	r1, #0
 8001e68:	2040      	movs	r0, #64	@ 0x40
 8001e6a:	f7ff ff8c 	bl	8001d86 <SD_SendCmd>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	f040 80a1 	bne.w	8001fb8 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001e76:	4b5f      	ldr	r3, [pc, #380]	@ (8001ff4 <SD_disk_initialize+0x1c4>)
 8001e78:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e7c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001e7e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001e82:	2048      	movs	r0, #72	@ 0x48
 8001e84:	f7ff ff7f 	bl	8001d86 <SD_SendCmd>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d155      	bne.n	8001f3a <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001e8e:	2300      	movs	r3, #0
 8001e90:	73fb      	strb	r3, [r7, #15]
 8001e92:	e00c      	b.n	8001eae <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001e94:	7bfc      	ldrb	r4, [r7, #15]
 8001e96:	f7ff fe67 	bl	8001b68 <SPI_RxByte>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	f104 0310 	add.w	r3, r4, #16
 8001ea2:	443b      	add	r3, r7
 8001ea4:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	73fb      	strb	r3, [r7, #15]
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
 8001eb0:	2b03      	cmp	r3, #3
 8001eb2:	d9ef      	bls.n	8001e94 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001eb4:	7abb      	ldrb	r3, [r7, #10]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d17e      	bne.n	8001fb8 <SD_disk_initialize+0x188>
 8001eba:	7afb      	ldrb	r3, [r7, #11]
 8001ebc:	2baa      	cmp	r3, #170	@ 0xaa
 8001ebe:	d17b      	bne.n	8001fb8 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	2077      	movs	r0, #119	@ 0x77
 8001ec4:	f7ff ff5f 	bl	8001d86 <SD_SendCmd>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d807      	bhi.n	8001ede <SD_disk_initialize+0xae>
 8001ece:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001ed2:	2069      	movs	r0, #105	@ 0x69
 8001ed4:	f7ff ff57 	bl	8001d86 <SD_SendCmd>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d004      	beq.n	8001ee8 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8001ede:	4b45      	ldr	r3, [pc, #276]	@ (8001ff4 <SD_disk_initialize+0x1c4>)
 8001ee0:	881b      	ldrh	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1ec      	bne.n	8001ec0 <SD_disk_initialize+0x90>
 8001ee6:	e000      	b.n	8001eea <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001ee8:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001eea:	4b42      	ldr	r3, [pc, #264]	@ (8001ff4 <SD_disk_initialize+0x1c4>)
 8001eec:	881b      	ldrh	r3, [r3, #0]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d062      	beq.n	8001fb8 <SD_disk_initialize+0x188>
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	207a      	movs	r0, #122	@ 0x7a
 8001ef6:	f7ff ff46 	bl	8001d86 <SD_SendCmd>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d15b      	bne.n	8001fb8 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001f00:	2300      	movs	r3, #0
 8001f02:	73fb      	strb	r3, [r7, #15]
 8001f04:	e00c      	b.n	8001f20 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8001f06:	7bfc      	ldrb	r4, [r7, #15]
 8001f08:	f7ff fe2e 	bl	8001b68 <SPI_RxByte>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	461a      	mov	r2, r3
 8001f10:	f104 0310 	add.w	r3, r4, #16
 8001f14:	443b      	add	r3, r7
 8001f16:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	73fb      	strb	r3, [r7, #15]
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
 8001f22:	2b03      	cmp	r3, #3
 8001f24:	d9ef      	bls.n	8001f06 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001f26:	7a3b      	ldrb	r3, [r7, #8]
 8001f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <SD_disk_initialize+0x104>
 8001f30:	230c      	movs	r3, #12
 8001f32:	e000      	b.n	8001f36 <SD_disk_initialize+0x106>
 8001f34:	2304      	movs	r3, #4
 8001f36:	73bb      	strb	r3, [r7, #14]
 8001f38:	e03e      	b.n	8001fb8 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	2077      	movs	r0, #119	@ 0x77
 8001f3e:	f7ff ff22 	bl	8001d86 <SD_SendCmd>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d808      	bhi.n	8001f5a <SD_disk_initialize+0x12a>
 8001f48:	2100      	movs	r1, #0
 8001f4a:	2069      	movs	r0, #105	@ 0x69
 8001f4c:	f7ff ff1b 	bl	8001d86 <SD_SendCmd>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d801      	bhi.n	8001f5a <SD_disk_initialize+0x12a>
 8001f56:	2302      	movs	r3, #2
 8001f58:	e000      	b.n	8001f5c <SD_disk_initialize+0x12c>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001f5e:	7bbb      	ldrb	r3, [r7, #14]
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d10e      	bne.n	8001f82 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001f64:	2100      	movs	r1, #0
 8001f66:	2077      	movs	r0, #119	@ 0x77
 8001f68:	f7ff ff0d 	bl	8001d86 <SD_SendCmd>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d80e      	bhi.n	8001f90 <SD_disk_initialize+0x160>
 8001f72:	2100      	movs	r1, #0
 8001f74:	2069      	movs	r0, #105	@ 0x69
 8001f76:	f7ff ff06 	bl	8001d86 <SD_SendCmd>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d107      	bne.n	8001f90 <SD_disk_initialize+0x160>
 8001f80:	e00c      	b.n	8001f9c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001f82:	2100      	movs	r1, #0
 8001f84:	2041      	movs	r0, #65	@ 0x41
 8001f86:	f7ff fefe 	bl	8001d86 <SD_SendCmd>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d004      	beq.n	8001f9a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001f90:	4b18      	ldr	r3, [pc, #96]	@ (8001ff4 <SD_disk_initialize+0x1c4>)
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1e2      	bne.n	8001f5e <SD_disk_initialize+0x12e>
 8001f98:	e000      	b.n	8001f9c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001f9a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001f9c:	4b15      	ldr	r3, [pc, #84]	@ (8001ff4 <SD_disk_initialize+0x1c4>)
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d007      	beq.n	8001fb4 <SD_disk_initialize+0x184>
 8001fa4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001fa8:	2050      	movs	r0, #80	@ 0x50
 8001faa:	f7ff feec 	bl	8001d86 <SD_SendCmd>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <SD_disk_initialize+0x188>
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001fb8:	4a0f      	ldr	r2, [pc, #60]	@ (8001ff8 <SD_disk_initialize+0x1c8>)
 8001fba:	7bbb      	ldrb	r3, [r7, #14]
 8001fbc:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001fbe:	f7ff fd8f 	bl	8001ae0 <DESELECT>
	SPI_RxByte();
 8001fc2:	f7ff fdd1 	bl	8001b68 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001fc6:	7bbb      	ldrb	r3, [r7, #14]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d008      	beq.n	8001fde <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001fcc:	4b08      	ldr	r3, [pc, #32]	@ (8001ff0 <SD_disk_initialize+0x1c0>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	f023 0301 	bic.w	r3, r3, #1
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	4b05      	ldr	r3, [pc, #20]	@ (8001ff0 <SD_disk_initialize+0x1c0>)
 8001fda:	701a      	strb	r2, [r3, #0]
 8001fdc:	e001      	b.n	8001fe2 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001fde:	f7ff fe49 	bl	8001c74 <SD_PowerOff>
	}

	return Stat;
 8001fe2:	4b03      	ldr	r3, [pc, #12]	@ (8001ff0 <SD_disk_initialize+0x1c0>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	b2db      	uxtb	r3, r3
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd90      	pop	{r4, r7, pc}
 8001ff0:	20000000 	.word	0x20000000
 8001ff4:	2000020e 	.word	0x2000020e
 8001ff8:	20000212 	.word	0x20000212

08001ffc <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <SD_disk_status+0x14>
 800200c:	2301      	movs	r3, #1
 800200e:	e002      	b.n	8002016 <SD_disk_status+0x1a>
	return Stat;
 8002010:	4b04      	ldr	r3, [pc, #16]	@ (8002024 <SD_disk_status+0x28>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	b2db      	uxtb	r3, r3
}
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	20000000 	.word	0x20000000

08002028 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	607a      	str	r2, [r7, #4]
 8002032:	603b      	str	r3, [r7, #0]
 8002034:	4603      	mov	r3, r0
 8002036:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8002038:	7bfb      	ldrb	r3, [r7, #15]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d102      	bne.n	8002044 <SD_disk_read+0x1c>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <SD_disk_read+0x20>
 8002044:	2304      	movs	r3, #4
 8002046:	e051      	b.n	80020ec <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002048:	4b2a      	ldr	r3, [pc, #168]	@ (80020f4 <SD_disk_read+0xcc>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <SD_disk_read+0x32>
 8002056:	2303      	movs	r3, #3
 8002058:	e048      	b.n	80020ec <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800205a:	4b27      	ldr	r3, [pc, #156]	@ (80020f8 <SD_disk_read+0xd0>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	f003 0304 	and.w	r3, r3, #4
 8002062:	2b00      	cmp	r3, #0
 8002064:	d102      	bne.n	800206c <SD_disk_read+0x44>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	025b      	lsls	r3, r3, #9
 800206a:	607b      	str	r3, [r7, #4]

	SELECT();
 800206c:	f7ff fd28 	bl	8001ac0 <SELECT>

	if (count == 1)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d111      	bne.n	800209a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	2051      	movs	r0, #81	@ 0x51
 800207a:	f7ff fe84 	bl	8001d86 <SD_SendCmd>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d129      	bne.n	80020d8 <SD_disk_read+0xb0>
 8002084:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002088:	68b8      	ldr	r0, [r7, #8]
 800208a:	f7ff fe0b 	bl	8001ca4 <SD_RxDataBlock>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d021      	beq.n	80020d8 <SD_disk_read+0xb0>
 8002094:	2300      	movs	r3, #0
 8002096:	603b      	str	r3, [r7, #0]
 8002098:	e01e      	b.n	80020d8 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	2052      	movs	r0, #82	@ 0x52
 800209e:	f7ff fe72 	bl	8001d86 <SD_SendCmd>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d117      	bne.n	80020d8 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80020a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80020ac:	68b8      	ldr	r0, [r7, #8]
 80020ae:	f7ff fdf9 	bl	8001ca4 <SD_RxDataBlock>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00a      	beq.n	80020ce <SD_disk_read+0xa6>
				buff += 512;
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80020be:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	603b      	str	r3, [r7, #0]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1ed      	bne.n	80020a8 <SD_disk_read+0x80>
 80020cc:	e000      	b.n	80020d0 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80020ce:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80020d0:	2100      	movs	r1, #0
 80020d2:	204c      	movs	r0, #76	@ 0x4c
 80020d4:	f7ff fe57 	bl	8001d86 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80020d8:	f7ff fd02 	bl	8001ae0 <DESELECT>
	SPI_RxByte();
 80020dc:	f7ff fd44 	bl	8001b68 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	bf14      	ite	ne
 80020e6:	2301      	movne	r3, #1
 80020e8:	2300      	moveq	r3, #0
 80020ea:	b2db      	uxtb	r3, r3
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20000000 	.word	0x20000000
 80020f8:	20000212 	.word	0x20000212

080020fc <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
 8002106:	603b      	str	r3, [r7, #0]
 8002108:	4603      	mov	r3, r0
 800210a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800210c:	7bfb      	ldrb	r3, [r7, #15]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d102      	bne.n	8002118 <SD_disk_write+0x1c>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <SD_disk_write+0x20>
 8002118:	2304      	movs	r3, #4
 800211a:	e06b      	b.n	80021f4 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800211c:	4b37      	ldr	r3, [pc, #220]	@ (80021fc <SD_disk_write+0x100>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	b2db      	uxtb	r3, r3
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <SD_disk_write+0x32>
 800212a:	2303      	movs	r3, #3
 800212c:	e062      	b.n	80021f4 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800212e:	4b33      	ldr	r3, [pc, #204]	@ (80021fc <SD_disk_write+0x100>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	b2db      	uxtb	r3, r3
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <SD_disk_write+0x44>
 800213c:	2302      	movs	r3, #2
 800213e:	e059      	b.n	80021f4 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8002140:	4b2f      	ldr	r3, [pc, #188]	@ (8002200 <SD_disk_write+0x104>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b00      	cmp	r3, #0
 800214a:	d102      	bne.n	8002152 <SD_disk_write+0x56>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	025b      	lsls	r3, r3, #9
 8002150:	607b      	str	r3, [r7, #4]

	SELECT();
 8002152:	f7ff fcb5 	bl	8001ac0 <SELECT>

	if (count == 1)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d110      	bne.n	800217e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	2058      	movs	r0, #88	@ 0x58
 8002160:	f7ff fe11 	bl	8001d86 <SD_SendCmd>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d13a      	bne.n	80021e0 <SD_disk_write+0xe4>
 800216a:	21fe      	movs	r1, #254	@ 0xfe
 800216c:	68b8      	ldr	r0, [r7, #8]
 800216e:	f7ff fdc7 	bl	8001d00 <SD_TxDataBlock>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d033      	beq.n	80021e0 <SD_disk_write+0xe4>
			count = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	603b      	str	r3, [r7, #0]
 800217c:	e030      	b.n	80021e0 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800217e:	4b20      	ldr	r3, [pc, #128]	@ (8002200 <SD_disk_write+0x104>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d007      	beq.n	800219a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800218a:	2100      	movs	r1, #0
 800218c:	2077      	movs	r0, #119	@ 0x77
 800218e:	f7ff fdfa 	bl	8001d86 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8002192:	6839      	ldr	r1, [r7, #0]
 8002194:	2057      	movs	r0, #87	@ 0x57
 8002196:	f7ff fdf6 	bl	8001d86 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	2059      	movs	r0, #89	@ 0x59
 800219e:	f7ff fdf2 	bl	8001d86 <SD_SendCmd>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d11b      	bne.n	80021e0 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80021a8:	21fc      	movs	r1, #252	@ 0xfc
 80021aa:	68b8      	ldr	r0, [r7, #8]
 80021ac:	f7ff fda8 	bl	8001d00 <SD_TxDataBlock>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00a      	beq.n	80021cc <SD_disk_write+0xd0>
				buff += 512;
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80021bc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	3b01      	subs	r3, #1
 80021c2:	603b      	str	r3, [r7, #0]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1ee      	bne.n	80021a8 <SD_disk_write+0xac>
 80021ca:	e000      	b.n	80021ce <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80021cc:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80021ce:	21fd      	movs	r1, #253	@ 0xfd
 80021d0:	2000      	movs	r0, #0
 80021d2:	f7ff fd95 	bl	8001d00 <SD_TxDataBlock>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <SD_disk_write+0xe4>
			{
				count = 1;
 80021dc:	2301      	movs	r3, #1
 80021de:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80021e0:	f7ff fc7e 	bl	8001ae0 <DESELECT>
	SPI_RxByte();
 80021e4:	f7ff fcc0 	bl	8001b68 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	bf14      	ite	ne
 80021ee:	2301      	movne	r3, #1
 80021f0:	2300      	moveq	r3, #0
 80021f2:	b2db      	uxtb	r3, r3
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000000 	.word	0x20000000
 8002200:	20000212 	.word	0x20000212

08002204 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8002204:	b590      	push	{r4, r7, lr}
 8002206:	b08b      	sub	sp, #44	@ 0x2c
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	603a      	str	r2, [r7, #0]
 800220e:	71fb      	strb	r3, [r7, #7]
 8002210:	460b      	mov	r3, r1
 8002212:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <SD_disk_ioctl+0x1e>
 800221e:	2304      	movs	r3, #4
 8002220:	e113      	b.n	800244a <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8002228:	79bb      	ldrb	r3, [r7, #6]
 800222a:	2b05      	cmp	r3, #5
 800222c:	d124      	bne.n	8002278 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d012      	beq.n	800225c <SD_disk_ioctl+0x58>
 8002236:	2b02      	cmp	r3, #2
 8002238:	dc1a      	bgt.n	8002270 <SD_disk_ioctl+0x6c>
 800223a:	2b00      	cmp	r3, #0
 800223c:	d002      	beq.n	8002244 <SD_disk_ioctl+0x40>
 800223e:	2b01      	cmp	r3, #1
 8002240:	d006      	beq.n	8002250 <SD_disk_ioctl+0x4c>
 8002242:	e015      	b.n	8002270 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8002244:	f7ff fd16 	bl	8001c74 <SD_PowerOff>
			res = RES_OK;
 8002248:	2300      	movs	r3, #0
 800224a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800224e:	e0fa      	b.n	8002446 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8002250:	f7ff fcce 	bl	8001bf0 <SD_PowerOn>
			res = RES_OK;
 8002254:	2300      	movs	r3, #0
 8002256:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800225a:	e0f4      	b.n	8002446 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	1c5c      	adds	r4, r3, #1
 8002260:	f7ff fd14 	bl	8001c8c <SD_CheckPower>
 8002264:	4603      	mov	r3, r0
 8002266:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8002268:	2300      	movs	r3, #0
 800226a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800226e:	e0ea      	b.n	8002446 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8002270:	2304      	movs	r3, #4
 8002272:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002276:	e0e6      	b.n	8002446 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002278:	4b76      	ldr	r3, [pc, #472]	@ (8002454 <SD_disk_ioctl+0x250>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	b2db      	uxtb	r3, r3
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <SD_disk_ioctl+0x86>
 8002286:	2303      	movs	r3, #3
 8002288:	e0df      	b.n	800244a <SD_disk_ioctl+0x246>

		SELECT();
 800228a:	f7ff fc19 	bl	8001ac0 <SELECT>

		switch (ctrl)
 800228e:	79bb      	ldrb	r3, [r7, #6]
 8002290:	2b0d      	cmp	r3, #13
 8002292:	f200 80c9 	bhi.w	8002428 <SD_disk_ioctl+0x224>
 8002296:	a201      	add	r2, pc, #4	@ (adr r2, 800229c <SD_disk_ioctl+0x98>)
 8002298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800229c:	08002393 	.word	0x08002393
 80022a0:	080022d5 	.word	0x080022d5
 80022a4:	08002383 	.word	0x08002383
 80022a8:	08002429 	.word	0x08002429
 80022ac:	08002429 	.word	0x08002429
 80022b0:	08002429 	.word	0x08002429
 80022b4:	08002429 	.word	0x08002429
 80022b8:	08002429 	.word	0x08002429
 80022bc:	08002429 	.word	0x08002429
 80022c0:	08002429 	.word	0x08002429
 80022c4:	08002429 	.word	0x08002429
 80022c8:	080023a5 	.word	0x080023a5
 80022cc:	080023c9 	.word	0x080023c9
 80022d0:	080023ed 	.word	0x080023ed
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80022d4:	2100      	movs	r1, #0
 80022d6:	2049      	movs	r0, #73	@ 0x49
 80022d8:	f7ff fd55 	bl	8001d86 <SD_SendCmd>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f040 80a6 	bne.w	8002430 <SD_disk_ioctl+0x22c>
 80022e4:	f107 030c 	add.w	r3, r7, #12
 80022e8:	2110      	movs	r1, #16
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff fcda 	bl	8001ca4 <SD_RxDataBlock>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 809c 	beq.w	8002430 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 80022f8:	7b3b      	ldrb	r3, [r7, #12]
 80022fa:	099b      	lsrs	r3, r3, #6
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d10d      	bne.n	800231e <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002302:	7d7b      	ldrb	r3, [r7, #21]
 8002304:	461a      	mov	r2, r3
 8002306:	7d3b      	ldrb	r3, [r7, #20]
 8002308:	021b      	lsls	r3, r3, #8
 800230a:	b29b      	uxth	r3, r3
 800230c:	4413      	add	r3, r2
 800230e:	b29b      	uxth	r3, r3
 8002310:	3301      	adds	r3, #1
 8002312:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8002314:	8bfb      	ldrh	r3, [r7, #30]
 8002316:	029a      	lsls	r2, r3, #10
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	e02d      	b.n	800237a <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800231e:	7c7b      	ldrb	r3, [r7, #17]
 8002320:	f003 030f 	and.w	r3, r3, #15
 8002324:	b2da      	uxtb	r2, r3
 8002326:	7dbb      	ldrb	r3, [r7, #22]
 8002328:	09db      	lsrs	r3, r3, #7
 800232a:	b2db      	uxtb	r3, r3
 800232c:	4413      	add	r3, r2
 800232e:	b2da      	uxtb	r2, r3
 8002330:	7d7b      	ldrb	r3, [r7, #21]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	b2db      	uxtb	r3, r3
 8002336:	f003 0306 	and.w	r3, r3, #6
 800233a:	b2db      	uxtb	r3, r3
 800233c:	4413      	add	r3, r2
 800233e:	b2db      	uxtb	r3, r3
 8002340:	3302      	adds	r3, #2
 8002342:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002346:	7d3b      	ldrb	r3, [r7, #20]
 8002348:	099b      	lsrs	r3, r3, #6
 800234a:	b2db      	uxtb	r3, r3
 800234c:	461a      	mov	r2, r3
 800234e:	7cfb      	ldrb	r3, [r7, #19]
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	b29b      	uxth	r3, r3
 8002354:	4413      	add	r3, r2
 8002356:	b29a      	uxth	r2, r3
 8002358:	7cbb      	ldrb	r3, [r7, #18]
 800235a:	029b      	lsls	r3, r3, #10
 800235c:	b29b      	uxth	r3, r3
 800235e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002362:	b29b      	uxth	r3, r3
 8002364:	4413      	add	r3, r2
 8002366:	b29b      	uxth	r3, r3
 8002368:	3301      	adds	r3, #1
 800236a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800236c:	8bfa      	ldrh	r2, [r7, #30]
 800236e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002372:	3b09      	subs	r3, #9
 8002374:	409a      	lsls	r2, r3
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800237a:	2300      	movs	r3, #0
 800237c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8002380:	e056      	b.n	8002430 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002388:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002390:	e055      	b.n	800243e <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8002392:	f7ff fc13 	bl	8001bbc <SD_ReadyWait>
 8002396:	4603      	mov	r3, r0
 8002398:	2bff      	cmp	r3, #255	@ 0xff
 800239a:	d14b      	bne.n	8002434 <SD_disk_ioctl+0x230>
 800239c:	2300      	movs	r3, #0
 800239e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80023a2:	e047      	b.n	8002434 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80023a4:	2100      	movs	r1, #0
 80023a6:	2049      	movs	r0, #73	@ 0x49
 80023a8:	f7ff fced 	bl	8001d86 <SD_SendCmd>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d142      	bne.n	8002438 <SD_disk_ioctl+0x234>
 80023b2:	2110      	movs	r1, #16
 80023b4:	6a38      	ldr	r0, [r7, #32]
 80023b6:	f7ff fc75 	bl	8001ca4 <SD_RxDataBlock>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d03b      	beq.n	8002438 <SD_disk_ioctl+0x234>
 80023c0:	2300      	movs	r3, #0
 80023c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80023c6:	e037      	b.n	8002438 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80023c8:	2100      	movs	r1, #0
 80023ca:	204a      	movs	r0, #74	@ 0x4a
 80023cc:	f7ff fcdb 	bl	8001d86 <SD_SendCmd>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d132      	bne.n	800243c <SD_disk_ioctl+0x238>
 80023d6:	2110      	movs	r1, #16
 80023d8:	6a38      	ldr	r0, [r7, #32]
 80023da:	f7ff fc63 	bl	8001ca4 <SD_RxDataBlock>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d02b      	beq.n	800243c <SD_disk_ioctl+0x238>
 80023e4:	2300      	movs	r3, #0
 80023e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80023ea:	e027      	b.n	800243c <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80023ec:	2100      	movs	r1, #0
 80023ee:	207a      	movs	r0, #122	@ 0x7a
 80023f0:	f7ff fcc9 	bl	8001d86 <SD_SendCmd>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d116      	bne.n	8002428 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 80023fa:	2300      	movs	r3, #0
 80023fc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002400:	e00b      	b.n	800241a <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8002402:	6a3c      	ldr	r4, [r7, #32]
 8002404:	1c63      	adds	r3, r4, #1
 8002406:	623b      	str	r3, [r7, #32]
 8002408:	f7ff fbae 	bl	8001b68 <SPI_RxByte>
 800240c:	4603      	mov	r3, r0
 800240e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8002410:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002414:	3301      	adds	r3, #1
 8002416:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800241a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800241e:	2b03      	cmp	r3, #3
 8002420:	d9ef      	bls.n	8002402 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8002422:	2300      	movs	r3, #0
 8002424:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8002428:	2304      	movs	r3, #4
 800242a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800242e:	e006      	b.n	800243e <SD_disk_ioctl+0x23a>
			break;
 8002430:	bf00      	nop
 8002432:	e004      	b.n	800243e <SD_disk_ioctl+0x23a>
			break;
 8002434:	bf00      	nop
 8002436:	e002      	b.n	800243e <SD_disk_ioctl+0x23a>
			break;
 8002438:	bf00      	nop
 800243a:	e000      	b.n	800243e <SD_disk_ioctl+0x23a>
			break;
 800243c:	bf00      	nop
		}

		DESELECT();
 800243e:	f7ff fb4f 	bl	8001ae0 <DESELECT>
		SPI_RxByte();
 8002442:	f7ff fb91 	bl	8001b68 <SPI_RxByte>
	}

	return res;
 8002446:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800244a:	4618      	mov	r0, r3
 800244c:	372c      	adds	r7, #44	@ 0x2c
 800244e:	46bd      	mov	sp, r7
 8002450:	bd90      	pop	{r4, r7, pc}
 8002452:	bf00      	nop
 8002454:	20000000 	.word	0x20000000

08002458 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4a07      	ldr	r2, [pc, #28]	@ (8002484 <vApplicationGetIdleTaskMemory+0x2c>)
 8002468:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	4a06      	ldr	r2, [pc, #24]	@ (8002488 <vApplicationGetIdleTaskMemory+0x30>)
 800246e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2280      	movs	r2, #128	@ 0x80
 8002474:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002476:	bf00      	nop
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	20000214 	.word	0x20000214
 8002488:	200002b4 	.word	0x200002b4

0800248c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002494:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002498:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d013      	beq.n	80024cc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80024a4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80024a8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80024ac:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00b      	beq.n	80024cc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80024b4:	e000      	b.n	80024b8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80024b6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80024b8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0f9      	beq.n	80024b6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80024c2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80024cc:	687b      	ldr	r3, [r7, #4]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
	...

080024dc <HAL_GPIO_EXTI_Callback>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin==INT_MPU6050_Pin) //interrupt called at 1kHz
 80024e6:	88fb      	ldrh	r3, [r7, #6]
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d113      	bne.n	8002514 <HAL_GPIO_EXTI_Callback+0x38>
	{
		mpuIntCount=mpuIntCount+1;
 80024ec:	4b0b      	ldr	r3, [pc, #44]	@ (800251c <HAL_GPIO_EXTI_Callback+0x40>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	3301      	adds	r3, #1
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	4b09      	ldr	r3, [pc, #36]	@ (800251c <HAL_GPIO_EXTI_Callback+0x40>)
 80024f6:	701a      	strb	r2, [r3, #0]
		if(mpuIntCount==20){ // downsample MPU6050 data at 50 Hz
 80024f8:	4b08      	ldr	r3, [pc, #32]	@ (800251c <HAL_GPIO_EXTI_Callback+0x40>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b14      	cmp	r3, #20
 80024fe:	d109      	bne.n	8002514 <HAL_GPIO_EXTI_Callback+0x38>
			message=MPU6050readDataDMA(&mpu6050);
 8002500:	4807      	ldr	r0, [pc, #28]	@ (8002520 <HAL_GPIO_EXTI_Callback+0x44>)
 8002502:	f7ff f9b7 	bl	8001874 <MPU6050readDataDMA>
 8002506:	4603      	mov	r3, r0
 8002508:	461a      	mov	r2, r3
 800250a:	4b06      	ldr	r3, [pc, #24]	@ (8002524 <HAL_GPIO_EXTI_Callback+0x48>)
 800250c:	701a      	strb	r2, [r3, #0]
			//printf("error message: %i\r\n:",message);
			mpuIntCount=0;
 800250e:	4b03      	ldr	r3, [pc, #12]	@ (800251c <HAL_GPIO_EXTI_Callback+0x40>)
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
			//mpu6050.numCalibrationMeas=mpu6050.numCalibrationMeas+1;
		}
	}
}
 8002514:	bf00      	nop
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20002b39 	.word	0x20002b39
 8002520:	20002ac4 	.word	0x20002ac4
 8002524:	20002b38 	.word	0x20002b38

08002528 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef* hi2c)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance==mpu6050.i2cHandle->Instance)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	4b07      	ldr	r3, [pc, #28]	@ (8002554 <HAL_I2C_MemRxCpltCallback+0x2c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d106      	bne.n	800254c <HAL_I2C_MemRxCpltCallback+0x24>
	{
		mpu6050.rxFlag=0;
 800253e:	4b05      	ldr	r3, [pc, #20]	@ (8002554 <HAL_I2C_MemRxCpltCallback+0x2c>)
 8002540:	2200      	movs	r2, #0
 8002542:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		MPU6050convertRawData(&mpu6050);
 8002546:	4803      	ldr	r0, [pc, #12]	@ (8002554 <HAL_I2C_MemRxCpltCallback+0x2c>)
 8002548:	f7ff f9be 	bl	80018c8 <MPU6050convertRawData>
		//MPU6050filterRawData(&mpu6050);

	}

}
 800254c:	bf00      	nop
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	20002ac4 	.word	0x20002ac4

08002558 <HAL_ADC_ConvCpltCallback>:
	uint8_t len=strlen(string);
	HAL_UART_Transmit(&huart2,(uint8_t*)string,len,200);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
	if(hadc->Instance==ADC1){
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a2e      	ldr	r2, [pc, #184]	@ (8002620 <HAL_ADC_ConvCpltCallback+0xc8>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d124      	bne.n	80025b4 <HAL_ADC_ConvCpltCallback+0x5c>
		joystick.joystickData[0]=adc1Data;
 800256a:	4b2e      	ldr	r3, [pc, #184]	@ (8002624 <HAL_ADC_ConvCpltCallback+0xcc>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a2e      	ldr	r2, [pc, #184]	@ (8002628 <HAL_ADC_ConvCpltCallback+0xd0>)
 8002570:	6013      	str	r3, [r2, #0]
		joystick.joystickVoltage[0]=(float)joystick.joystickData[0]*3.3/4095.0f;
 8002572:	4b2d      	ldr	r3, [pc, #180]	@ (8002628 <HAL_ADC_ConvCpltCallback+0xd0>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	ee07 3a90 	vmov	s15, r3
 800257a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800257e:	ee17 0a90 	vmov	r0, s15
 8002582:	f7fe f801 	bl	8000588 <__aeabi_f2d>
 8002586:	a322      	add	r3, pc, #136	@ (adr r3, 8002610 <HAL_ADC_ConvCpltCallback+0xb8>)
 8002588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258c:	f7fe f854 	bl	8000638 <__aeabi_dmul>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	4610      	mov	r0, r2
 8002596:	4619      	mov	r1, r3
 8002598:	a31f      	add	r3, pc, #124	@ (adr r3, 8002618 <HAL_ADC_ConvCpltCallback+0xc0>)
 800259a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259e:	f7fe f975 	bl	800088c <__aeabi_ddiv>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4610      	mov	r0, r2
 80025a8:	4619      	mov	r1, r3
 80025aa:	f7fe fb3d 	bl	8000c28 <__aeabi_d2f>
 80025ae:	4603      	mov	r3, r0
 80025b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002628 <HAL_ADC_ConvCpltCallback+0xd0>)
 80025b2:	6093      	str	r3, [r2, #8]

	}
	if(hadc->Instance==ADC2){
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a1c      	ldr	r2, [pc, #112]	@ (800262c <HAL_ADC_ConvCpltCallback+0xd4>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d124      	bne.n	8002608 <HAL_ADC_ConvCpltCallback+0xb0>
		joystick.joystickData[1]=adc2Data;
 80025be:	4b1c      	ldr	r3, [pc, #112]	@ (8002630 <HAL_ADC_ConvCpltCallback+0xd8>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a19      	ldr	r2, [pc, #100]	@ (8002628 <HAL_ADC_ConvCpltCallback+0xd0>)
 80025c4:	6053      	str	r3, [r2, #4]
		joystick.joystickVoltage[1]=(float)joystick.joystickData[1]*3.3/4095.0f;
 80025c6:	4b18      	ldr	r3, [pc, #96]	@ (8002628 <HAL_ADC_ConvCpltCallback+0xd0>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	ee07 3a90 	vmov	s15, r3
 80025ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025d2:	ee17 0a90 	vmov	r0, s15
 80025d6:	f7fd ffd7 	bl	8000588 <__aeabi_f2d>
 80025da:	a30d      	add	r3, pc, #52	@ (adr r3, 8002610 <HAL_ADC_ConvCpltCallback+0xb8>)
 80025dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e0:	f7fe f82a 	bl	8000638 <__aeabi_dmul>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4610      	mov	r0, r2
 80025ea:	4619      	mov	r1, r3
 80025ec:	a30a      	add	r3, pc, #40	@ (adr r3, 8002618 <HAL_ADC_ConvCpltCallback+0xc0>)
 80025ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f2:	f7fe f94b 	bl	800088c <__aeabi_ddiv>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4610      	mov	r0, r2
 80025fc:	4619      	mov	r1, r3
 80025fe:	f7fe fb13 	bl	8000c28 <__aeabi_d2f>
 8002602:	4603      	mov	r3, r0
 8002604:	4a08      	ldr	r2, [pc, #32]	@ (8002628 <HAL_ADC_ConvCpltCallback+0xd0>)
 8002606:	60d3      	str	r3, [r2, #12]

	}
}
 8002608:	bf00      	nop
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	66666666 	.word	0x66666666
 8002614:	400a6666 	.word	0x400a6666
 8002618:	00000000 	.word	0x00000000
 800261c:	40affe00 	.word	0x40affe00
 8002620:	40012000 	.word	0x40012000
 8002624:	20002a90 	.word	0x20002a90
 8002628:	20002a80 	.word	0x20002a80
 800262c:	40012100 	.word	0x40012100
 8002630:	20002a94 	.word	0x20002a94

08002634 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
	if (huart->Instance==USART3)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a0e      	ldr	r2, [pc, #56]	@ (800267c <HAL_UART_RxCpltCallback+0x48>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d10f      	bne.n	8002666 <HAL_UART_RxCpltCallback+0x32>
	{
		if(currentState==IDLE_STATE)
 8002646:	4b0e      	ldr	r3, [pc, #56]	@ (8002680 <HAL_UART_RxCpltCallback+0x4c>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d107      	bne.n	800265e <HAL_UART_RxCpltCallback+0x2a>
		{
			if(transferControlByte==0xFF)
 800264e:	4b0d      	ldr	r3, [pc, #52]	@ (8002684 <HAL_UART_RxCpltCallback+0x50>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2bff      	cmp	r3, #255	@ 0xff
 8002654:	d107      	bne.n	8002666 <HAL_UART_RxCpltCallback+0x32>
				currentState=SEND_ACK_STATE;
 8002656:	4b0a      	ldr	r3, [pc, #40]	@ (8002680 <HAL_UART_RxCpltCallback+0x4c>)
 8002658:	2201      	movs	r2, #1
 800265a:	701a      	strb	r2, [r3, #0]
 800265c:	e003      	b.n	8002666 <HAL_UART_RxCpltCallback+0x32>
		}

		else if(currentState==SENDING_DATA_STATE)
 800265e:	4b08      	ldr	r3, [pc, #32]	@ (8002680 <HAL_UART_RxCpltCallback+0x4c>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b02      	cmp	r3, #2
 8002664:	d103      	bne.n	800266e <HAL_UART_RxCpltCallback+0x3a>
			currentState==IDLE_STATE;
		}
		else
			return;
	}
	transferControlByte=0x00;
 8002666:	4b07      	ldr	r3, [pc, #28]	@ (8002684 <HAL_UART_RxCpltCallback+0x50>)
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]
 800266c:	e000      	b.n	8002670 <HAL_UART_RxCpltCallback+0x3c>
			return;
 800266e:	bf00      	nop




}
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	40004800 	.word	0x40004800
 8002680:	20002b45 	.word	0x20002b45
 8002684:	20002b44 	.word	0x20002b44

08002688 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]


}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <_write>:

int _write(int file, char *ptr, int len)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	e009      	b.n	80026c2 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	1c5a      	adds	r2, r3, #1
 80026b2:	60ba      	str	r2, [r7, #8]
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff fee8 	bl	800248c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	3301      	adds	r3, #1
 80026c0:	617b      	str	r3, [r7, #20]
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	dbf1      	blt.n	80026ae <_write+0x12>
  }
  return len;
 80026ca:	687b      	ldr	r3, [r7, #4]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026d4:	b5b0      	push	{r4, r5, r7, lr}
 80026d6:	b0b8      	sub	sp, #224	@ 0xe0
 80026d8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026da:	f001 ff2d 	bl	8004538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026de:	f000 f97b 	bl	80029d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026e2:	f000 fd59 	bl	8003198 <MX_GPIO_Init>
  MX_DMA_Init();
 80026e6:	f000 fd01 	bl	80030ec <MX_DMA_Init>
  MX_ADC1_Init();
 80026ea:	f000 f9e1 	bl	8002ab0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80026ee:	f000 fa83 	bl	8002bf8 <MX_I2C1_Init>
  MX_TIM3_Init();
 80026f2:	f000 fb87 	bl	8002e04 <MX_TIM3_Init>
  MX_I2C2_Init();
 80026f6:	f000 faad 	bl	8002c54 <MX_I2C2_Init>
  MX_SPI2_Init();
 80026fa:	f000 fad9 	bl	8002cb0 <MX_SPI2_Init>
  MX_FATFS_Init();
 80026fe:	f00a fb51 	bl	800cda4 <MX_FATFS_Init>
  MX_TIM2_Init();
 8002702:	f000 fb0b 	bl	8002d1c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8002706:	f000 fc95 	bl	8003034 <MX_USART2_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 800270a:	f000 fce7 	bl	80030dc <MX_USB_OTG_FS_USB_Init>
  MX_USART3_UART_Init();
 800270e:	f000 fcbb 	bl	8003088 <MX_USART3_UART_Init>
  MX_ADC2_Init();
 8002712:	f000 fa1f 	bl	8002b54 <MX_ADC2_Init>
  MX_TIM8_Init();
 8002716:	f000 fbef 	bl	8002ef8 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  // Start servo PWM ( pulse duration from 0.9ms to 2.1ms with 1.5 as center ) duty cycle varies from 4.5% to 7.5%
  //( CCR can go from 425 to 1175 )
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 800271a:	2100      	movs	r1, #0
 800271c:	488b      	ldr	r0, [pc, #556]	@ (800294c <main+0x278>)
 800271e:	f008 fad5 	bl	800accc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8002722:	2104      	movs	r1, #4
 8002724:	4889      	ldr	r0, [pc, #548]	@ (800294c <main+0x278>)
 8002726:	f008 fad1 	bl	800accc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 800272a:	2108      	movs	r1, #8
 800272c:	4887      	ldr	r0, [pc, #540]	@ (800294c <main+0x278>)
 800272e:	f008 facd 	bl	800accc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 8002732:	210c      	movs	r1, #12
 8002734:	4885      	ldr	r0, [pc, #532]	@ (800294c <main+0x278>)
 8002736:	f008 fac9 	bl	800accc <HAL_TIM_PWM_Start>

  htim3.Instance->CCR1=SERVO_CENTER_PWM;
 800273a:	4b84      	ldr	r3, [pc, #528]	@ (800294c <main+0x278>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002742:	635a      	str	r2, [r3, #52]	@ 0x34
  htim3.Instance->CCR2=SERVO_CENTER_PWM;
 8002744:	4b81      	ldr	r3, [pc, #516]	@ (800294c <main+0x278>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800274c:	639a      	str	r2, [r3, #56]	@ 0x38
  htim3.Instance->CCR3=SERVO_CENTER_PWM;
 800274e:	4b7f      	ldr	r3, [pc, #508]	@ (800294c <main+0x278>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002756:	63da      	str	r2, [r3, #60]	@ 0x3c
  htim3.Instance->CCR4=SERVO_CENTER_PWM;
 8002758:	4b7c      	ldr	r3, [pc, #496]	@ (800294c <main+0x278>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002760:	641a      	str	r2, [r3, #64]	@ 0x40

  // EKF initialisation
  float KalmanQ[2]={KALMAN_Q,KALMAN_Q};
 8002762:	4a7b      	ldr	r2, [pc, #492]	@ (8002950 <main+0x27c>)
 8002764:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8002768:	e892 0003 	ldmia.w	r2, {r0, r1}
 800276c:	e883 0003 	stmia.w	r3, {r0, r1}
  float KalmanR[3]={KALMAN_R,KALMAN_R,KALMAN_R};
 8002770:	4a78      	ldr	r2, [pc, #480]	@ (8002954 <main+0x280>)
 8002772:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002776:	ca07      	ldmia	r2, {r0, r1, r2}
 8002778:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  float KalmanP=KALMAN_P_INIT;
 800277c:	4b76      	ldr	r3, [pc, #472]	@ (8002958 <main+0x284>)
 800277e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  EKF_Init(&ekf,KalmanP,KalmanQ,KalmanR);
 8002782:	f107 02b4 	add.w	r2, r7, #180	@ 0xb4
 8002786:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800278a:	4619      	mov	r1, r3
 800278c:	ed97 0a33 	vldr	s0, [r7, #204]	@ 0xcc
 8002790:	4872      	ldr	r0, [pc, #456]	@ (800295c <main+0x288>)
 8002792:	f7fe ff61 	bl	8001658 <EKF_Init>


  // Start DMA streams

  HAL_ADC_Start_DMA(&hadc1,&adc1Data,1);
 8002796:	2201      	movs	r2, #1
 8002798:	4971      	ldr	r1, [pc, #452]	@ (8002960 <main+0x28c>)
 800279a:	4872      	ldr	r0, [pc, #456]	@ (8002964 <main+0x290>)
 800279c:	f002 f886 	bl	80048ac <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2,&adc2Data,1);
 80027a0:	2201      	movs	r2, #1
 80027a2:	4971      	ldr	r1, [pc, #452]	@ (8002968 <main+0x294>)
 80027a4:	4871      	ldr	r0, [pc, #452]	@ (800296c <main+0x298>)
 80027a6:	f002 f881 	bl	80048ac <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim2);
 80027aa:	4871      	ldr	r0, [pc, #452]	@ (8002970 <main+0x29c>)
 80027ac:	f008 f966 	bl	800aa7c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim8);
 80027b0:	4870      	ldr	r0, [pc, #448]	@ (8002974 <main+0x2a0>)
 80027b2:	f008 f963 	bl	800aa7c <HAL_TIM_Base_Start>
  HAL_UART_Receive_DMA(&huart3,uartRxBuffer,8);
 80027b6:	2208      	movs	r2, #8
 80027b8:	496f      	ldr	r1, [pc, #444]	@ (8002978 <main+0x2a4>)
 80027ba:	4870      	ldr	r0, [pc, #448]	@ (800297c <main+0x2a8>)
 80027bc:	f009 fa47 	bl	800bc4e <HAL_UART_Receive_DMA>


  // sensor initialization
  uint8_t deviceReady;
  deviceReady=checkMPU6050Ready();
 80027c0:	f7fe ff82 	bl	80016c8 <checkMPU6050Ready>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
  uint8_t configGood=MPU6050init(&mpu6050,&hi2c1);
 80027ca:	496d      	ldr	r1, [pc, #436]	@ (8002980 <main+0x2ac>)
 80027cc:	486d      	ldr	r0, [pc, #436]	@ (8002984 <main+0x2b0>)
 80027ce:	f7fe ffaf 	bl	8001730 <MPU6050init>
 80027d2:	4603      	mov	r3, r0
 80027d4:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
  uint8_t rec;
  HAL_StatusTypeDef stat;
  stat=HAL_I2C_Mem_Read (&hi2c1,MPU6050ADDR,WHO_AM_I_REG,I2C_MEMADD_SIZE_8BIT,&rec,1,100);
 80027d8:	2364      	movs	r3, #100	@ 0x64
 80027da:	9302      	str	r3, [sp, #8]
 80027dc:	2301      	movs	r3, #1
 80027de:	9301      	str	r3, [sp, #4]
 80027e0:	f107 03b3 	add.w	r3, r7, #179	@ 0xb3
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	2301      	movs	r3, #1
 80027e8:	2275      	movs	r2, #117	@ 0x75
 80027ea:	21d0      	movs	r1, #208	@ 0xd0
 80027ec:	4864      	ldr	r0, [pc, #400]	@ (8002980 <main+0x2ac>)
 80027ee:	f004 f86b 	bl	80068c8 <HAL_I2C_Mem_Read>
 80027f2:	4603      	mov	r3, r0
 80027f4:	f887 30c9 	strb.w	r3, [r7, #201]	@ 0xc9

  Bar30init(&pressureSensor, &hi2c2);
 80027f8:	4963      	ldr	r1, [pc, #396]	@ (8002988 <main+0x2b4>)
 80027fa:	4864      	ldr	r0, [pc, #400]	@ (800298c <main+0x2b8>)
 80027fc:	f7fe fbdc 	bl	8000fb8 <Bar30init>
  uint8_t i2cGood=0;
 8002800:	2300      	movs	r3, #0
 8002802:	f887 30c8 	strb.w	r3, [r7, #200]	@ 0xc8
  i2cGood=Bar30reset(&pressureSensor);
 8002806:	4861      	ldr	r0, [pc, #388]	@ (800298c <main+0x2b8>)
 8002808:	f7fe fc0c 	bl	8001024 <Bar30reset>
 800280c:	4603      	mov	r3, r0
 800280e:	f887 30c8 	strb.w	r3, [r7, #200]	@ 0xc8
  printf("Reset Command Result : %i\r\n",i2cGood );
 8002812:	f897 30c8 	ldrb.w	r3, [r7, #200]	@ 0xc8
 8002816:	4619      	mov	r1, r3
 8002818:	485d      	ldr	r0, [pc, #372]	@ (8002990 <main+0x2bc>)
 800281a:	f010 ff57 	bl	80136cc <iprintf>
  i2cGood=Bar30getCalibration(&pressureSensor);
 800281e:	485b      	ldr	r0, [pc, #364]	@ (800298c <main+0x2b8>)
 8002820:	f7fe fc26 	bl	8001070 <Bar30getCalibration>
 8002824:	4603      	mov	r3, r0
 8002826:	f887 30c8 	strb.w	r3, [r7, #200]	@ 0xc8
  printf("Calibration phase result : %i\r\n",i2cGood );
 800282a:	f897 30c8 	ldrb.w	r3, [r7, #200]	@ 0xc8
 800282e:	4619      	mov	r1, r3
 8002830:	4858      	ldr	r0, [pc, #352]	@ (8002994 <main+0x2c0>)
 8002832:	f010 ff4b 	bl	80136cc <iprintf>
  i2cGood=Bar30CRCcheck(pressureSensor.calibrationResult);
 8002836:	4858      	ldr	r0, [pc, #352]	@ (8002998 <main+0x2c4>)
 8002838:	f7fe fd84 	bl	8001344 <Bar30CRCcheck>
 800283c:	4603      	mov	r3, r0
 800283e:	f887 30c8 	strb.w	r3, [r7, #200]	@ 0xc8

  HAL_UART_Receive_DMA(&huart3,&transferControlByte,1);
 8002842:	2201      	movs	r2, #1
 8002844:	4955      	ldr	r1, [pc, #340]	@ (800299c <main+0x2c8>)
 8002846:	484d      	ldr	r0, [pc, #308]	@ (800297c <main+0x2a8>)
 8002848:	f009 fa01 	bl	800bc4e <HAL_UART_Receive_DMA>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of sender */
  osMessageQDef(sender, 32, uint16_t);
 800284c:	4b54      	ldr	r3, [pc, #336]	@ (80029a0 <main+0x2cc>)
 800284e:	f107 04a0 	add.w	r4, r7, #160	@ 0xa0
 8002852:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002854:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  senderHandle = osMessageCreate(osMessageQ(sender), NULL);
 8002858:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800285c:	2100      	movs	r1, #0
 800285e:	4618      	mov	r0, r3
 8002860:	f00d fef7 	bl	8010652 <osMessageCreate>
 8002864:	4603      	mov	r3, r0
 8002866:	4a4f      	ldr	r2, [pc, #316]	@ (80029a4 <main+0x2d0>)
 8002868:	6013      	str	r3, [r2, #0]

  /* definition and creation of receiver */
  osMessageQDef(receiver, 16, uint16_t);
 800286a:	4b4f      	ldr	r3, [pc, #316]	@ (80029a8 <main+0x2d4>)
 800286c:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 8002870:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002872:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  receiverHandle = osMessageCreate(osMessageQ(receiver), NULL);
 8002876:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800287a:	2100      	movs	r1, #0
 800287c:	4618      	mov	r0, r3
 800287e:	f00d fee8 	bl	8010652 <osMessageCreate>
 8002882:	4603      	mov	r3, r0
 8002884:	4a49      	ldr	r2, [pc, #292]	@ (80029ac <main+0x2d8>)
 8002886:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of DefaultTask */
  osThreadDef(DefaultTask, defaultTask, osPriorityIdle, 0, 128);
 8002888:	4b49      	ldr	r3, [pc, #292]	@ (80029b0 <main+0x2dc>)
 800288a:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 800288e:	461d      	mov	r5, r3
 8002890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002894:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002898:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DefaultTaskHandle = osThreadCreate(osThread(DefaultTask), NULL);
 800289c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80028a0:	2100      	movs	r1, #0
 80028a2:	4618      	mov	r0, r3
 80028a4:	f00d fdab 	bl	80103fe <osThreadCreate>
 80028a8:	4603      	mov	r3, r0
 80028aa:	4a42      	ldr	r2, [pc, #264]	@ (80029b4 <main+0x2e0>)
 80028ac:	6013      	str	r3, [r2, #0]

  /* definition and creation of LEDscreenTask */
  osThreadDef(LEDscreenTask, sendDataToScreen, osPriorityLow, 0, 512);
 80028ae:	4b42      	ldr	r3, [pc, #264]	@ (80029b8 <main+0x2e4>)
 80028b0:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 80028b4:	461d      	mov	r5, r3
 80028b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LEDscreenTaskHandle = osThreadCreate(osThread(LEDscreenTask), NULL);
 80028c2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80028c6:	2100      	movs	r1, #0
 80028c8:	4618      	mov	r0, r3
 80028ca:	f00d fd98 	bl	80103fe <osThreadCreate>
 80028ce:	4603      	mov	r3, r0
 80028d0:	4a3a      	ldr	r2, [pc, #232]	@ (80029bc <main+0x2e8>)
 80028d2:	6013      	str	r3, [r2, #0]

  /* definition and creation of controlLoopTask */
  osThreadDef(controlLoopTask, updateControlLoop, osPriorityHigh, 0, 128);
 80028d4:	4b3a      	ldr	r3, [pc, #232]	@ (80029c0 <main+0x2ec>)
 80028d6:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80028da:	461d      	mov	r5, r3
 80028dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  controlLoopTaskHandle = osThreadCreate(osThread(controlLoopTask), NULL);
 80028e8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80028ec:	2100      	movs	r1, #0
 80028ee:	4618      	mov	r0, r3
 80028f0:	f00d fd85 	bl	80103fe <osThreadCreate>
 80028f4:	4603      	mov	r3, r0
 80028f6:	4a33      	ldr	r2, [pc, #204]	@ (80029c4 <main+0x2f0>)
 80028f8:	6013      	str	r3, [r2, #0]

  /* definition and creation of SDcardTask */
  osThreadDef(SDcardTask, recordSDdata, osPriorityNormal, 0, 2048);
 80028fa:	4b33      	ldr	r3, [pc, #204]	@ (80029c8 <main+0x2f4>)
 80028fc:	f107 0420 	add.w	r4, r7, #32
 8002900:	461d      	mov	r5, r3
 8002902:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002904:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002906:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800290a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SDcardTaskHandle = osThreadCreate(osThread(SDcardTask), NULL);
 800290e:	f107 0320 	add.w	r3, r7, #32
 8002912:	2100      	movs	r1, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f00d fd72 	bl	80103fe <osThreadCreate>
 800291a:	4603      	mov	r3, r0
 800291c:	4a2b      	ldr	r2, [pc, #172]	@ (80029cc <main+0x2f8>)
 800291e:	6013      	str	r3, [r2, #0]

  /* definition and creation of pressureSensorT */
  osThreadDef(pressureSensorT, getBar30Data, osPriorityNormal, 0, 128);
 8002920:	4b2b      	ldr	r3, [pc, #172]	@ (80029d0 <main+0x2fc>)
 8002922:	1d3c      	adds	r4, r7, #4
 8002924:	461d      	mov	r5, r3
 8002926:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002928:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800292a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800292e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pressureSensorTHandle = osThreadCreate(osThread(pressureSensorT), NULL);
 8002932:	1d3b      	adds	r3, r7, #4
 8002934:	2100      	movs	r1, #0
 8002936:	4618      	mov	r0, r3
 8002938:	f00d fd61 	bl	80103fe <osThreadCreate>
 800293c:	4603      	mov	r3, r0
 800293e:	4a25      	ldr	r2, [pc, #148]	@ (80029d4 <main+0x300>)
 8002940:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002942:	f00d fd55 	bl	80103f0 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  while (1)
 8002946:	bf00      	nop
 8002948:	e7fd      	b.n	8002946 <main+0x272>
 800294a:	bf00      	nop
 800294c:	2000288c 	.word	0x2000288c
 8002950:	08015a4c 	.word	0x08015a4c
 8002954:	08015a54 	.word	0x08015a54
 8002958:	3dcccccd 	.word	0x3dcccccd
 800295c:	20002a98 	.word	0x20002a98
 8002960:	20002a90 	.word	0x20002a90
 8002964:	2000258c 	.word	0x2000258c
 8002968:	20002a94 	.word	0x20002a94
 800296c:	200025d4 	.word	0x200025d4
 8002970:	20002844 	.word	0x20002844
 8002974:	200028d4 	.word	0x200028d4
 8002978:	20002b3c 	.word	0x20002b3c
 800297c:	20002960 	.word	0x20002960
 8002980:	200026dc 	.word	0x200026dc
 8002984:	20002ac4 	.word	0x20002ac4
 8002988:	20002730 	.word	0x20002730
 800298c:	20002b10 	.word	0x20002b10
 8002990:	08015a10 	.word	0x08015a10
 8002994:	08015a2c 	.word	0x08015a2c
 8002998:	20002b24 	.word	0x20002b24
 800299c:	20002b44 	.word	0x20002b44
 80029a0:	08015a60 	.word	0x08015a60
 80029a4:	20002a78 	.word	0x20002a78
 80029a8:	08015a70 	.word	0x08015a70
 80029ac:	20002a7c 	.word	0x20002a7c
 80029b0:	08015a8c 	.word	0x08015a8c
 80029b4:	20002a64 	.word	0x20002a64
 80029b8:	08015ab8 	.word	0x08015ab8
 80029bc:	20002a68 	.word	0x20002a68
 80029c0:	08015ae4 	.word	0x08015ae4
 80029c4:	20002a6c 	.word	0x20002a6c
 80029c8:	08015b0c 	.word	0x08015b0c
 80029cc:	20002a70 	.word	0x20002a70
 80029d0:	08015b38 	.word	0x08015b38
 80029d4:	20002a74 	.word	0x20002a74

080029d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b094      	sub	sp, #80	@ 0x50
 80029dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029de:	f107 031c 	add.w	r3, r7, #28
 80029e2:	2234      	movs	r2, #52	@ 0x34
 80029e4:	2100      	movs	r1, #0
 80029e6:	4618      	mov	r0, r3
 80029e8:	f010 fee5 	bl	80137b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029ec:	f107 0308 	add.w	r3, r7, #8
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	60da      	str	r2, [r3, #12]
 80029fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80029fc:	2300      	movs	r3, #0
 80029fe:	607b      	str	r3, [r7, #4]
 8002a00:	4b29      	ldr	r3, [pc, #164]	@ (8002aa8 <SystemClock_Config+0xd0>)
 8002a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a04:	4a28      	ldr	r2, [pc, #160]	@ (8002aa8 <SystemClock_Config+0xd0>)
 8002a06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a0c:	4b26      	ldr	r3, [pc, #152]	@ (8002aa8 <SystemClock_Config+0xd0>)
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a14:	607b      	str	r3, [r7, #4]
 8002a16:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a18:	2300      	movs	r3, #0
 8002a1a:	603b      	str	r3, [r7, #0]
 8002a1c:	4b23      	ldr	r3, [pc, #140]	@ (8002aac <SystemClock_Config+0xd4>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a22      	ldr	r2, [pc, #136]	@ (8002aac <SystemClock_Config+0xd4>)
 8002a22:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a26:	6013      	str	r3, [r2, #0]
 8002a28:	4b20      	ldr	r3, [pc, #128]	@ (8002aac <SystemClock_Config+0xd4>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002a30:	603b      	str	r3, [r7, #0]
 8002a32:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a34:	2301      	movs	r3, #1
 8002a36:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a3c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a42:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002a46:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002a48:	2308      	movs	r3, #8
 8002a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002a4c:	23a8      	movs	r3, #168	@ 0xa8
 8002a4e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a50:	2302      	movs	r3, #2
 8002a52:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002a54:	2307      	movs	r3, #7
 8002a56:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a5c:	f107 031c 	add.w	r3, r7, #28
 8002a60:	4618      	mov	r0, r3
 8002a62:	f007 f8eb 	bl	8009c3c <HAL_RCC_OscConfig>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002a6c:	f000 fe40 	bl	80036f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a70:	230f      	movs	r3, #15
 8002a72:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a74:	2302      	movs	r3, #2
 8002a76:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002a7c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002a80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002a82:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002a86:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002a88:	f107 0308 	add.w	r3, r7, #8
 8002a8c:	2105      	movs	r1, #5
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f006 fd5a 	bl	8009548 <HAL_RCC_ClockConfig>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002a9a:	f000 fe29 	bl	80036f0 <Error_Handler>
  }
}
 8002a9e:	bf00      	nop
 8002aa0:	3750      	adds	r7, #80	@ 0x50
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	40007000 	.word	0x40007000

08002ab0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002ab6:	463b      	mov	r3, r7
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	605a      	str	r2, [r3, #4]
 8002abe:	609a      	str	r2, [r3, #8]
 8002ac0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002ac2:	4b22      	ldr	r3, [pc, #136]	@ (8002b4c <MX_ADC1_Init+0x9c>)
 8002ac4:	4a22      	ldr	r2, [pc, #136]	@ (8002b50 <MX_ADC1_Init+0xa0>)
 8002ac6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002ac8:	4b20      	ldr	r3, [pc, #128]	@ (8002b4c <MX_ADC1_Init+0x9c>)
 8002aca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002ace:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002ad0:	4b1e      	ldr	r3, [pc, #120]	@ (8002b4c <MX_ADC1_Init+0x9c>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002ad6:	4b1d      	ldr	r3, [pc, #116]	@ (8002b4c <MX_ADC1_Init+0x9c>)
 8002ad8:	2201      	movs	r2, #1
 8002ada:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002adc:	4b1b      	ldr	r3, [pc, #108]	@ (8002b4c <MX_ADC1_Init+0x9c>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8002b4c <MX_ADC1_Init+0x9c>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002aea:	4b18      	ldr	r3, [pc, #96]	@ (8002b4c <MX_ADC1_Init+0x9c>)
 8002aec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002af0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8002af2:	4b16      	ldr	r3, [pc, #88]	@ (8002b4c <MX_ADC1_Init+0x9c>)
 8002af4:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002af8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002afa:	4b14      	ldr	r3, [pc, #80]	@ (8002b4c <MX_ADC1_Init+0x9c>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002b00:	4b12      	ldr	r3, [pc, #72]	@ (8002b4c <MX_ADC1_Init+0x9c>)
 8002b02:	2201      	movs	r2, #1
 8002b04:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002b06:	4b11      	ldr	r3, [pc, #68]	@ (8002b4c <MX_ADC1_Init+0x9c>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8002b4c <MX_ADC1_Init+0x9c>)
 8002b10:	2201      	movs	r2, #1
 8002b12:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b14:	480d      	ldr	r0, [pc, #52]	@ (8002b4c <MX_ADC1_Init+0x9c>)
 8002b16:	f001 fd75 	bl	8004604 <HAL_ADC_Init>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8002b20:	f000 fde6 	bl	80036f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8002b2c:	2306      	movs	r3, #6
 8002b2e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b30:	463b      	mov	r3, r7
 8002b32:	4619      	mov	r1, r3
 8002b34:	4805      	ldr	r0, [pc, #20]	@ (8002b4c <MX_ADC1_Init+0x9c>)
 8002b36:	f001 ffe7 	bl	8004b08 <HAL_ADC_ConfigChannel>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002b40:	f000 fdd6 	bl	80036f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002b44:	bf00      	nop
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	2000258c 	.word	0x2000258c
 8002b50:	40012000 	.word	0x40012000

08002b54 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002b5a:	463b      	mov	r3, r7
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	605a      	str	r2, [r3, #4]
 8002b62:	609a      	str	r2, [r3, #8]
 8002b64:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002b66:	4b22      	ldr	r3, [pc, #136]	@ (8002bf0 <MX_ADC2_Init+0x9c>)
 8002b68:	4a22      	ldr	r2, [pc, #136]	@ (8002bf4 <MX_ADC2_Init+0xa0>)
 8002b6a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002b6c:	4b20      	ldr	r3, [pc, #128]	@ (8002bf0 <MX_ADC2_Init+0x9c>)
 8002b6e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002b72:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002b74:	4b1e      	ldr	r3, [pc, #120]	@ (8002bf0 <MX_ADC2_Init+0x9c>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8002b7a:	4b1d      	ldr	r3, [pc, #116]	@ (8002bf0 <MX_ADC2_Init+0x9c>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002b80:	4b1b      	ldr	r3, [pc, #108]	@ (8002bf0 <MX_ADC2_Init+0x9c>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002b86:	4b1a      	ldr	r3, [pc, #104]	@ (8002bf0 <MX_ADC2_Init+0x9c>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 8002b8e:	4b18      	ldr	r3, [pc, #96]	@ (8002bf0 <MX_ADC2_Init+0x9c>)
 8002b90:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002b94:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8002b96:	4b16      	ldr	r3, [pc, #88]	@ (8002bf0 <MX_ADC2_Init+0x9c>)
 8002b98:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002b9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b9e:	4b14      	ldr	r3, [pc, #80]	@ (8002bf0 <MX_ADC2_Init+0x9c>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002ba4:	4b12      	ldr	r3, [pc, #72]	@ (8002bf0 <MX_ADC2_Init+0x9c>)
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8002baa:	4b11      	ldr	r3, [pc, #68]	@ (8002bf0 <MX_ADC2_Init+0x9c>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8002bf0 <MX_ADC2_Init+0x9c>)
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002bb8:	480d      	ldr	r0, [pc, #52]	@ (8002bf0 <MX_ADC2_Init+0x9c>)
 8002bba:	f001 fd23 	bl	8004604 <HAL_ADC_Init>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8002bc4:	f000 fd94 	bl	80036f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002bd4:	463b      	mov	r3, r7
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4805      	ldr	r0, [pc, #20]	@ (8002bf0 <MX_ADC2_Init+0x9c>)
 8002bda:	f001 ff95 	bl	8004b08 <HAL_ADC_ConfigChannel>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8002be4:	f000 fd84 	bl	80036f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002be8:	bf00      	nop
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	200025d4 	.word	0x200025d4
 8002bf4:	40012100 	.word	0x40012100

08002bf8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002bfc:	4b12      	ldr	r3, [pc, #72]	@ (8002c48 <MX_I2C1_Init+0x50>)
 8002bfe:	4a13      	ldr	r2, [pc, #76]	@ (8002c4c <MX_I2C1_Init+0x54>)
 8002c00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002c02:	4b11      	ldr	r3, [pc, #68]	@ (8002c48 <MX_I2C1_Init+0x50>)
 8002c04:	4a12      	ldr	r2, [pc, #72]	@ (8002c50 <MX_I2C1_Init+0x58>)
 8002c06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c08:	4b0f      	ldr	r3, [pc, #60]	@ (8002c48 <MX_I2C1_Init+0x50>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c48 <MX_I2C1_Init+0x50>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c14:	4b0c      	ldr	r3, [pc, #48]	@ (8002c48 <MX_I2C1_Init+0x50>)
 8002c16:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c48 <MX_I2C1_Init+0x50>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002c22:	4b09      	ldr	r3, [pc, #36]	@ (8002c48 <MX_I2C1_Init+0x50>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c28:	4b07      	ldr	r3, [pc, #28]	@ (8002c48 <MX_I2C1_Init+0x50>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c2e:	4b06      	ldr	r3, [pc, #24]	@ (8002c48 <MX_I2C1_Init+0x50>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c34:	4804      	ldr	r0, [pc, #16]	@ (8002c48 <MX_I2C1_Init+0x50>)
 8002c36:	f003 f8e5 	bl	8005e04 <HAL_I2C_Init>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002c40:	f000 fd56 	bl	80036f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c44:	bf00      	nop
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	200026dc 	.word	0x200026dc
 8002c4c:	40005400 	.word	0x40005400
 8002c50:	00061a80 	.word	0x00061a80

08002c54 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002c58:	4b12      	ldr	r3, [pc, #72]	@ (8002ca4 <MX_I2C2_Init+0x50>)
 8002c5a:	4a13      	ldr	r2, [pc, #76]	@ (8002ca8 <MX_I2C2_Init+0x54>)
 8002c5c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002c5e:	4b11      	ldr	r3, [pc, #68]	@ (8002ca4 <MX_I2C2_Init+0x50>)
 8002c60:	4a12      	ldr	r2, [pc, #72]	@ (8002cac <MX_I2C2_Init+0x58>)
 8002c62:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c64:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca4 <MX_I2C2_Init+0x50>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca4 <MX_I2C2_Init+0x50>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c70:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca4 <MX_I2C2_Init+0x50>)
 8002c72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c76:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c78:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca4 <MX_I2C2_Init+0x50>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002c7e:	4b09      	ldr	r3, [pc, #36]	@ (8002ca4 <MX_I2C2_Init+0x50>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c84:	4b07      	ldr	r3, [pc, #28]	@ (8002ca4 <MX_I2C2_Init+0x50>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c8a:	4b06      	ldr	r3, [pc, #24]	@ (8002ca4 <MX_I2C2_Init+0x50>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002c90:	4804      	ldr	r0, [pc, #16]	@ (8002ca4 <MX_I2C2_Init+0x50>)
 8002c92:	f003 f8b7 	bl	8005e04 <HAL_I2C_Init>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002c9c:	f000 fd28 	bl	80036f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002ca0:	bf00      	nop
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20002730 	.word	0x20002730
 8002ca8:	40005800 	.word	0x40005800
 8002cac:	000186a0 	.word	0x000186a0

08002cb0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002cb4:	4b17      	ldr	r3, [pc, #92]	@ (8002d14 <MX_SPI2_Init+0x64>)
 8002cb6:	4a18      	ldr	r2, [pc, #96]	@ (8002d18 <MX_SPI2_Init+0x68>)
 8002cb8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002cba:	4b16      	ldr	r3, [pc, #88]	@ (8002d14 <MX_SPI2_Init+0x64>)
 8002cbc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002cc0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002cc2:	4b14      	ldr	r3, [pc, #80]	@ (8002d14 <MX_SPI2_Init+0x64>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002cc8:	4b12      	ldr	r3, [pc, #72]	@ (8002d14 <MX_SPI2_Init+0x64>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cce:	4b11      	ldr	r3, [pc, #68]	@ (8002d14 <MX_SPI2_Init+0x64>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8002d14 <MX_SPI2_Init+0x64>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002cda:	4b0e      	ldr	r3, [pc, #56]	@ (8002d14 <MX_SPI2_Init+0x64>)
 8002cdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ce0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8002d14 <MX_SPI2_Init+0x64>)
 8002ce4:	2208      	movs	r2, #8
 8002ce6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8002d14 <MX_SPI2_Init+0x64>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cee:	4b09      	ldr	r3, [pc, #36]	@ (8002d14 <MX_SPI2_Init+0x64>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cf4:	4b07      	ldr	r3, [pc, #28]	@ (8002d14 <MX_SPI2_Init+0x64>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002cfa:	4b06      	ldr	r3, [pc, #24]	@ (8002d14 <MX_SPI2_Init+0x64>)
 8002cfc:	220a      	movs	r2, #10
 8002cfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002d00:	4804      	ldr	r0, [pc, #16]	@ (8002d14 <MX_SPI2_Init+0x64>)
 8002d02:	f007 fa39 	bl	800a178 <HAL_SPI_Init>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002d0c:	f000 fcf0 	bl	80036f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002d10:	bf00      	nop
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	200004b4 	.word	0x200004b4
 8002d18:	40003800 	.word	0x40003800

08002d1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b08e      	sub	sp, #56	@ 0x38
 8002d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d26:	2200      	movs	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	605a      	str	r2, [r3, #4]
 8002d2c:	609a      	str	r2, [r3, #8]
 8002d2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d30:	f107 0320 	add.w	r3, r7, #32
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d3a:	1d3b      	adds	r3, r7, #4
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	605a      	str	r2, [r3, #4]
 8002d42:	609a      	str	r2, [r3, #8]
 8002d44:	60da      	str	r2, [r3, #12]
 8002d46:	611a      	str	r2, [r3, #16]
 8002d48:	615a      	str	r2, [r3, #20]
 8002d4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d4c:	4b2c      	ldr	r3, [pc, #176]	@ (8002e00 <MX_TIM2_Init+0xe4>)
 8002d4e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8002d54:	4b2a      	ldr	r3, [pc, #168]	@ (8002e00 <MX_TIM2_Init+0xe4>)
 8002d56:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8002d5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d5c:	4b28      	ldr	r3, [pc, #160]	@ (8002e00 <MX_TIM2_Init+0xe4>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8002d62:	4b27      	ldr	r3, [pc, #156]	@ (8002e00 <MX_TIM2_Init+0xe4>)
 8002d64:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002d68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d6a:	4b25      	ldr	r3, [pc, #148]	@ (8002e00 <MX_TIM2_Init+0xe4>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d70:	4b23      	ldr	r3, [pc, #140]	@ (8002e00 <MX_TIM2_Init+0xe4>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d76:	4822      	ldr	r0, [pc, #136]	@ (8002e00 <MX_TIM2_Init+0xe4>)
 8002d78:	f007 fe30 	bl	800a9dc <HAL_TIM_Base_Init>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002d82:	f000 fcb5 	bl	80036f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d90:	4619      	mov	r1, r3
 8002d92:	481b      	ldr	r0, [pc, #108]	@ (8002e00 <MX_TIM2_Init+0xe4>)
 8002d94:	f008 fa2c 	bl	800b1f0 <HAL_TIM_ConfigClockSource>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002d9e:	f000 fca7 	bl	80036f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002da2:	4817      	ldr	r0, [pc, #92]	@ (8002e00 <MX_TIM2_Init+0xe4>)
 8002da4:	f007 ff42 	bl	800ac2c <HAL_TIM_PWM_Init>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002dae:	f000 fc9f 	bl	80036f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002db2:	2320      	movs	r3, #32
 8002db4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002db6:	2300      	movs	r3, #0
 8002db8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002dba:	f107 0320 	add.w	r3, r7, #32
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	480f      	ldr	r0, [pc, #60]	@ (8002e00 <MX_TIM2_Init+0xe4>)
 8002dc2:	f008 fe15 	bl	800b9f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002dcc:	f000 fc90 	bl	80036f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dd0:	2360      	movs	r3, #96	@ 0x60
 8002dd2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002de0:	1d3b      	adds	r3, r7, #4
 8002de2:	2200      	movs	r2, #0
 8002de4:	4619      	mov	r1, r3
 8002de6:	4806      	ldr	r0, [pc, #24]	@ (8002e00 <MX_TIM2_Init+0xe4>)
 8002de8:	f008 f940 	bl	800b06c <HAL_TIM_PWM_ConfigChannel>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002df2:	f000 fc7d 	bl	80036f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002df6:	bf00      	nop
 8002df8:	3738      	adds	r7, #56	@ 0x38
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	20002844 	.word	0x20002844

08002e04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08a      	sub	sp, #40	@ 0x28
 8002e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e0a:	f107 0320 	add.w	r3, r7, #32
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e14:	1d3b      	adds	r3, r7, #4
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	605a      	str	r2, [r3, #4]
 8002e1c:	609a      	str	r2, [r3, #8]
 8002e1e:	60da      	str	r2, [r3, #12]
 8002e20:	611a      	str	r2, [r3, #16]
 8002e22:	615a      	str	r2, [r3, #20]
 8002e24:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e26:	4b32      	ldr	r3, [pc, #200]	@ (8002ef0 <MX_TIM3_Init+0xec>)
 8002e28:	4a32      	ldr	r2, [pc, #200]	@ (8002ef4 <MX_TIM3_Init+0xf0>)
 8002e2a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 168;
 8002e2c:	4b30      	ldr	r3, [pc, #192]	@ (8002ef0 <MX_TIM3_Init+0xec>)
 8002e2e:	22a8      	movs	r2, #168	@ 0xa8
 8002e30:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e32:	4b2f      	ldr	r3, [pc, #188]	@ (8002ef0 <MX_TIM3_Init+0xec>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8002e38:	4b2d      	ldr	r3, [pc, #180]	@ (8002ef0 <MX_TIM3_Init+0xec>)
 8002e3a:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002e3e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e40:	4b2b      	ldr	r3, [pc, #172]	@ (8002ef0 <MX_TIM3_Init+0xec>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e46:	4b2a      	ldr	r3, [pc, #168]	@ (8002ef0 <MX_TIM3_Init+0xec>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002e4c:	4828      	ldr	r0, [pc, #160]	@ (8002ef0 <MX_TIM3_Init+0xec>)
 8002e4e:	f007 feed 	bl	800ac2c <HAL_TIM_PWM_Init>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002e58:	f000 fc4a 	bl	80036f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e60:	2300      	movs	r3, #0
 8002e62:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e64:	f107 0320 	add.w	r3, r7, #32
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4821      	ldr	r0, [pc, #132]	@ (8002ef0 <MX_TIM3_Init+0xec>)
 8002e6c:	f008 fdc0 	bl	800b9f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002e76:	f000 fc3b 	bl	80036f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e7a:	2360      	movs	r3, #96	@ 0x60
 8002e7c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e82:	2300      	movs	r3, #0
 8002e84:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e86:	2300      	movs	r3, #0
 8002e88:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e8a:	1d3b      	adds	r3, r7, #4
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4817      	ldr	r0, [pc, #92]	@ (8002ef0 <MX_TIM3_Init+0xec>)
 8002e92:	f008 f8eb 	bl	800b06c <HAL_TIM_PWM_ConfigChannel>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002e9c:	f000 fc28 	bl	80036f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ea0:	1d3b      	adds	r3, r7, #4
 8002ea2:	2204      	movs	r2, #4
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4812      	ldr	r0, [pc, #72]	@ (8002ef0 <MX_TIM3_Init+0xec>)
 8002ea8:	f008 f8e0 	bl	800b06c <HAL_TIM_PWM_ConfigChannel>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002eb2:	f000 fc1d 	bl	80036f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002eb6:	1d3b      	adds	r3, r7, #4
 8002eb8:	2208      	movs	r2, #8
 8002eba:	4619      	mov	r1, r3
 8002ebc:	480c      	ldr	r0, [pc, #48]	@ (8002ef0 <MX_TIM3_Init+0xec>)
 8002ebe:	f008 f8d5 	bl	800b06c <HAL_TIM_PWM_ConfigChannel>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8002ec8:	f000 fc12 	bl	80036f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ecc:	1d3b      	adds	r3, r7, #4
 8002ece:	220c      	movs	r2, #12
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4807      	ldr	r0, [pc, #28]	@ (8002ef0 <MX_TIM3_Init+0xec>)
 8002ed4:	f008 f8ca 	bl	800b06c <HAL_TIM_PWM_ConfigChannel>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8002ede:	f000 fc07 	bl	80036f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002ee2:	4803      	ldr	r0, [pc, #12]	@ (8002ef0 <MX_TIM3_Init+0xec>)
 8002ee4:	f001 f806 	bl	8003ef4 <HAL_TIM_MspPostInit>

}
 8002ee8:	bf00      	nop
 8002eea:	3728      	adds	r7, #40	@ 0x28
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	2000288c 	.word	0x2000288c
 8002ef4:	40000400 	.word	0x40000400

08002ef8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b096      	sub	sp, #88	@ 0x58
 8002efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002efe:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	605a      	str	r2, [r3, #4]
 8002f08:	609a      	str	r2, [r3, #8]
 8002f0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f0c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	605a      	str	r2, [r3, #4]
 8002f20:	609a      	str	r2, [r3, #8]
 8002f22:	60da      	str	r2, [r3, #12]
 8002f24:	611a      	str	r2, [r3, #16]
 8002f26:	615a      	str	r2, [r3, #20]
 8002f28:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002f2a:	1d3b      	adds	r3, r7, #4
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	2100      	movs	r1, #0
 8002f30:	4618      	mov	r0, r3
 8002f32:	f010 fc40 	bl	80137b6 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002f36:	4b3d      	ldr	r3, [pc, #244]	@ (800302c <MX_TIM8_Init+0x134>)
 8002f38:	4a3d      	ldr	r2, [pc, #244]	@ (8003030 <MX_TIM8_Init+0x138>)
 8002f3a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 8400-1;
 8002f3c:	4b3b      	ldr	r3, [pc, #236]	@ (800302c <MX_TIM8_Init+0x134>)
 8002f3e:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8002f42:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f44:	4b39      	ldr	r3, [pc, #228]	@ (800302c <MX_TIM8_Init+0x134>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2000-1;
 8002f4a:	4b38      	ldr	r3, [pc, #224]	@ (800302c <MX_TIM8_Init+0x134>)
 8002f4c:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002f50:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f52:	4b36      	ldr	r3, [pc, #216]	@ (800302c <MX_TIM8_Init+0x134>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002f58:	4b34      	ldr	r3, [pc, #208]	@ (800302c <MX_TIM8_Init+0x134>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f5e:	4b33      	ldr	r3, [pc, #204]	@ (800302c <MX_TIM8_Init+0x134>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002f64:	4831      	ldr	r0, [pc, #196]	@ (800302c <MX_TIM8_Init+0x134>)
 8002f66:	f007 fd39 	bl	800a9dc <HAL_TIM_Base_Init>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8002f70:	f000 fbbe 	bl	80036f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f78:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002f7a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002f7e:	4619      	mov	r1, r3
 8002f80:	482a      	ldr	r0, [pc, #168]	@ (800302c <MX_TIM8_Init+0x134>)
 8002f82:	f008 f935 	bl	800b1f0 <HAL_TIM_ConfigClockSource>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8002f8c:	f000 fbb0 	bl	80036f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002f90:	4826      	ldr	r0, [pc, #152]	@ (800302c <MX_TIM8_Init+0x134>)
 8002f92:	f007 fe4b 	bl	800ac2c <HAL_TIM_PWM_Init>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8002f9c:	f000 fba8 	bl	80036f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002fa0:	2320      	movs	r3, #32
 8002fa2:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002fa8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002fac:	4619      	mov	r1, r3
 8002fae:	481f      	ldr	r0, [pc, #124]	@ (800302c <MX_TIM8_Init+0x134>)
 8002fb0:	f008 fd1e 	bl	800b9f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8002fba:	f000 fb99 	bl	80036f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fbe:	2360      	movs	r3, #96	@ 0x60
 8002fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fde:	2200      	movs	r2, #0
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4812      	ldr	r0, [pc, #72]	@ (800302c <MX_TIM8_Init+0x134>)
 8002fe4:	f008 f842 	bl	800b06c <HAL_TIM_PWM_ConfigChannel>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8002fee:	f000 fb7f 	bl	80036f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003002:	2300      	movs	r3, #0
 8003004:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003006:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800300a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800300c:	2300      	movs	r3, #0
 800300e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003010:	1d3b      	adds	r3, r7, #4
 8003012:	4619      	mov	r1, r3
 8003014:	4805      	ldr	r0, [pc, #20]	@ (800302c <MX_TIM8_Init+0x134>)
 8003016:	f008 fd67 	bl	800bae8 <HAL_TIMEx_ConfigBreakDeadTime>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 8003020:	f000 fb66 	bl	80036f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003024:	bf00      	nop
 8003026:	3758      	adds	r7, #88	@ 0x58
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	200028d4 	.word	0x200028d4
 8003030:	40010400 	.word	0x40010400

08003034 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003038:	4b11      	ldr	r3, [pc, #68]	@ (8003080 <MX_USART2_UART_Init+0x4c>)
 800303a:	4a12      	ldr	r2, [pc, #72]	@ (8003084 <MX_USART2_UART_Init+0x50>)
 800303c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800303e:	4b10      	ldr	r3, [pc, #64]	@ (8003080 <MX_USART2_UART_Init+0x4c>)
 8003040:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003044:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003046:	4b0e      	ldr	r3, [pc, #56]	@ (8003080 <MX_USART2_UART_Init+0x4c>)
 8003048:	2200      	movs	r2, #0
 800304a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800304c:	4b0c      	ldr	r3, [pc, #48]	@ (8003080 <MX_USART2_UART_Init+0x4c>)
 800304e:	2200      	movs	r2, #0
 8003050:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003052:	4b0b      	ldr	r3, [pc, #44]	@ (8003080 <MX_USART2_UART_Init+0x4c>)
 8003054:	2200      	movs	r2, #0
 8003056:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003058:	4b09      	ldr	r3, [pc, #36]	@ (8003080 <MX_USART2_UART_Init+0x4c>)
 800305a:	220c      	movs	r2, #12
 800305c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800305e:	4b08      	ldr	r3, [pc, #32]	@ (8003080 <MX_USART2_UART_Init+0x4c>)
 8003060:	2200      	movs	r2, #0
 8003062:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003064:	4b06      	ldr	r3, [pc, #24]	@ (8003080 <MX_USART2_UART_Init+0x4c>)
 8003066:	2200      	movs	r2, #0
 8003068:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800306a:	4805      	ldr	r0, [pc, #20]	@ (8003080 <MX_USART2_UART_Init+0x4c>)
 800306c:	f008 fda2 	bl	800bbb4 <HAL_UART_Init>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003076:	f000 fb3b 	bl	80036f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800307a:	bf00      	nop
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	2000291c 	.word	0x2000291c
 8003084:	40004400 	.word	0x40004400

08003088 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800308c:	4b11      	ldr	r3, [pc, #68]	@ (80030d4 <MX_USART3_UART_Init+0x4c>)
 800308e:	4a12      	ldr	r2, [pc, #72]	@ (80030d8 <MX_USART3_UART_Init+0x50>)
 8003090:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003092:	4b10      	ldr	r3, [pc, #64]	@ (80030d4 <MX_USART3_UART_Init+0x4c>)
 8003094:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003098:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800309a:	4b0e      	ldr	r3, [pc, #56]	@ (80030d4 <MX_USART3_UART_Init+0x4c>)
 800309c:	2200      	movs	r2, #0
 800309e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80030a0:	4b0c      	ldr	r3, [pc, #48]	@ (80030d4 <MX_USART3_UART_Init+0x4c>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80030a6:	4b0b      	ldr	r3, [pc, #44]	@ (80030d4 <MX_USART3_UART_Init+0x4c>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80030ac:	4b09      	ldr	r3, [pc, #36]	@ (80030d4 <MX_USART3_UART_Init+0x4c>)
 80030ae:	220c      	movs	r2, #12
 80030b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030b2:	4b08      	ldr	r3, [pc, #32]	@ (80030d4 <MX_USART3_UART_Init+0x4c>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80030b8:	4b06      	ldr	r3, [pc, #24]	@ (80030d4 <MX_USART3_UART_Init+0x4c>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80030be:	4805      	ldr	r0, [pc, #20]	@ (80030d4 <MX_USART3_UART_Init+0x4c>)
 80030c0:	f008 fd78 	bl	800bbb4 <HAL_UART_Init>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80030ca:	f000 fb11 	bl	80036f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80030ce:	bf00      	nop
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	20002960 	.word	0x20002960
 80030d8:	40004800 	.word	0x40004800

080030dc <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80030e0:	bf00      	nop
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
	...

080030ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	607b      	str	r3, [r7, #4]
 80030f6:	4b27      	ldr	r3, [pc, #156]	@ (8003194 <MX_DMA_Init+0xa8>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fa:	4a26      	ldr	r2, [pc, #152]	@ (8003194 <MX_DMA_Init+0xa8>)
 80030fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003100:	6313      	str	r3, [r2, #48]	@ 0x30
 8003102:	4b24      	ldr	r3, [pc, #144]	@ (8003194 <MX_DMA_Init+0xa8>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003106:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800310a:	607b      	str	r3, [r7, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800310e:	2300      	movs	r3, #0
 8003110:	603b      	str	r3, [r7, #0]
 8003112:	4b20      	ldr	r3, [pc, #128]	@ (8003194 <MX_DMA_Init+0xa8>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003116:	4a1f      	ldr	r2, [pc, #124]	@ (8003194 <MX_DMA_Init+0xa8>)
 8003118:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800311c:	6313      	str	r3, [r2, #48]	@ 0x30
 800311e:	4b1d      	ldr	r3, [pc, #116]	@ (8003194 <MX_DMA_Init+0xa8>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003122:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003126:	603b      	str	r3, [r7, #0]
 8003128:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800312a:	2200      	movs	r2, #0
 800312c:	2105      	movs	r1, #5
 800312e:	200b      	movs	r0, #11
 8003130:	f002 f85c 	bl	80051ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003134:	200b      	movs	r0, #11
 8003136:	f002 f875 	bl	8005224 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800313a:	2200      	movs	r2, #0
 800313c:	2105      	movs	r1, #5
 800313e:	200c      	movs	r0, #12
 8003140:	f002 f854 	bl	80051ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003144:	200c      	movs	r0, #12
 8003146:	f002 f86d 	bl	8005224 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800314a:	2200      	movs	r2, #0
 800314c:	2105      	movs	r1, #5
 800314e:	200e      	movs	r0, #14
 8003150:	f002 f84c 	bl	80051ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003154:	200e      	movs	r0, #14
 8003156:	f002 f865 	bl	8005224 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800315a:	2200      	movs	r2, #0
 800315c:	2105      	movs	r1, #5
 800315e:	202f      	movs	r0, #47	@ 0x2f
 8003160:	f002 f844 	bl	80051ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8003164:	202f      	movs	r0, #47	@ 0x2f
 8003166:	f002 f85d 	bl	8005224 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800316a:	2200      	movs	r2, #0
 800316c:	2105      	movs	r1, #5
 800316e:	2038      	movs	r0, #56	@ 0x38
 8003170:	f002 f83c 	bl	80051ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003174:	2038      	movs	r0, #56	@ 0x38
 8003176:	f002 f855 	bl	8005224 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800317a:	2200      	movs	r2, #0
 800317c:	2105      	movs	r1, #5
 800317e:	203a      	movs	r0, #58	@ 0x3a
 8003180:	f002 f834 	bl	80051ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003184:	203a      	movs	r0, #58	@ 0x3a
 8003186:	f002 f84d 	bl	8005224 <HAL_NVIC_EnableIRQ>

}
 800318a:	bf00      	nop
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40023800 	.word	0x40023800

08003198 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b08a      	sub	sp, #40	@ 0x28
 800319c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800319e:	f107 0314 	add.w	r3, r7, #20
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	605a      	str	r2, [r3, #4]
 80031a8:	609a      	str	r2, [r3, #8]
 80031aa:	60da      	str	r2, [r3, #12]
 80031ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	4b5c      	ldr	r3, [pc, #368]	@ (8003324 <MX_GPIO_Init+0x18c>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b6:	4a5b      	ldr	r2, [pc, #364]	@ (8003324 <MX_GPIO_Init+0x18c>)
 80031b8:	f043 0304 	orr.w	r3, r3, #4
 80031bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80031be:	4b59      	ldr	r3, [pc, #356]	@ (8003324 <MX_GPIO_Init+0x18c>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c2:	f003 0304 	and.w	r3, r3, #4
 80031c6:	613b      	str	r3, [r7, #16]
 80031c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	4b55      	ldr	r3, [pc, #340]	@ (8003324 <MX_GPIO_Init+0x18c>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d2:	4a54      	ldr	r2, [pc, #336]	@ (8003324 <MX_GPIO_Init+0x18c>)
 80031d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80031da:	4b52      	ldr	r3, [pc, #328]	@ (8003324 <MX_GPIO_Init+0x18c>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e6:	2300      	movs	r3, #0
 80031e8:	60bb      	str	r3, [r7, #8]
 80031ea:	4b4e      	ldr	r3, [pc, #312]	@ (8003324 <MX_GPIO_Init+0x18c>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ee:	4a4d      	ldr	r2, [pc, #308]	@ (8003324 <MX_GPIO_Init+0x18c>)
 80031f0:	f043 0301 	orr.w	r3, r3, #1
 80031f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80031f6:	4b4b      	ldr	r3, [pc, #300]	@ (8003324 <MX_GPIO_Init+0x18c>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	60bb      	str	r3, [r7, #8]
 8003200:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003202:	2300      	movs	r3, #0
 8003204:	607b      	str	r3, [r7, #4]
 8003206:	4b47      	ldr	r3, [pc, #284]	@ (8003324 <MX_GPIO_Init+0x18c>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320a:	4a46      	ldr	r2, [pc, #280]	@ (8003324 <MX_GPIO_Init+0x18c>)
 800320c:	f043 0302 	orr.w	r3, r3, #2
 8003210:	6313      	str	r3, [r2, #48]	@ 0x30
 8003212:	4b44      	ldr	r3, [pc, #272]	@ (8003324 <MX_GPIO_Init+0x18c>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	607b      	str	r3, [r7, #4]
 800321c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);
 800321e:	2200      	movs	r2, #0
 8003220:	f248 1160 	movw	r1, #33120	@ 0x8160
 8003224:	4840      	ldr	r0, [pc, #256]	@ (8003328 <MX_GPIO_Init+0x190>)
 8003226:	f002 fdbb 	bl	8005da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800322a:	2200      	movs	r2, #0
 800322c:	2101      	movs	r1, #1
 800322e:	483f      	ldr	r0, [pc, #252]	@ (800332c <MX_GPIO_Init+0x194>)
 8003230:	f002 fdb6 	bl	8005da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8003234:	2201      	movs	r2, #1
 8003236:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800323a:	483c      	ldr	r0, [pc, #240]	@ (800332c <MX_GPIO_Init+0x194>)
 800323c:	f002 fdb0 	bl	8005da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003240:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003244:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003246:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800324a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324c:	2300      	movs	r3, #0
 800324e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003250:	f107 0314 	add.w	r3, r7, #20
 8003254:	4619      	mov	r1, r3
 8003256:	4836      	ldr	r0, [pc, #216]	@ (8003330 <MX_GPIO_Init+0x198>)
 8003258:	f002 fc0e 	bl	8005a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_MPU6050_Pin */
  GPIO_InitStruct.Pin = INT_MPU6050_Pin;
 800325c:	2302      	movs	r3, #2
 800325e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003260:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003264:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003266:	2300      	movs	r3, #0
 8003268:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_MPU6050_GPIO_Port, &GPIO_InitStruct);
 800326a:	f107 0314 	add.w	r3, r7, #20
 800326e:	4619      	mov	r1, r3
 8003270:	482f      	ldr	r0, [pc, #188]	@ (8003330 <MX_GPIO_Init+0x198>)
 8003272:	f002 fc01 	bl	8005a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_15;
 8003276:	f248 1360 	movw	r3, #33120	@ 0x8160
 800327a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800327c:	2301      	movs	r3, #1
 800327e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003280:	2300      	movs	r3, #0
 8003282:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003284:	2300      	movs	r3, #0
 8003286:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003288:	f107 0314 	add.w	r3, r7, #20
 800328c:	4619      	mov	r1, r3
 800328e:	4826      	ldr	r0, [pc, #152]	@ (8003328 <MX_GPIO_Init+0x190>)
 8003290:	f002 fbf2 	bl	8005a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003294:	2301      	movs	r3, #1
 8003296:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003298:	2301      	movs	r3, #1
 800329a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329c:	2300      	movs	r3, #0
 800329e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a0:	2300      	movs	r3, #0
 80032a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032a4:	f107 0314 	add.w	r3, r7, #20
 80032a8:	4619      	mov	r1, r3
 80032aa:	4820      	ldr	r0, [pc, #128]	@ (800332c <MX_GPIO_Init+0x194>)
 80032ac:	f002 fbe4 	bl	8005a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 80032b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032b6:	2301      	movs	r3, #1
 80032b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ba:	2300      	movs	r3, #0
 80032bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80032be:	2301      	movs	r3, #1
 80032c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 80032c2:	f107 0314 	add.w	r3, r7, #20
 80032c6:	4619      	mov	r1, r3
 80032c8:	4818      	ldr	r0, [pc, #96]	@ (800332c <MX_GPIO_Init+0x194>)
 80032ca:	f002 fbd5 	bl	8005a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80032ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032d4:	2300      	movs	r3, #0
 80032d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d8:	2300      	movs	r3, #0
 80032da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032dc:	f107 0314 	add.w	r3, r7, #20
 80032e0:	4619      	mov	r1, r3
 80032e2:	4811      	ldr	r0, [pc, #68]	@ (8003328 <MX_GPIO_Init+0x190>)
 80032e4:	f002 fbc8 	bl	8005a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80032e8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80032ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ee:	2302      	movs	r3, #2
 80032f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f2:	2300      	movs	r3, #0
 80032f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032f6:	2303      	movs	r3, #3
 80032f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80032fa:	230a      	movs	r3, #10
 80032fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032fe:	f107 0314 	add.w	r3, r7, #20
 8003302:	4619      	mov	r1, r3
 8003304:	4808      	ldr	r0, [pc, #32]	@ (8003328 <MX_GPIO_Init+0x190>)
 8003306:	f002 fbb7 	bl	8005a78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800330a:	2200      	movs	r2, #0
 800330c:	2105      	movs	r1, #5
 800330e:	2007      	movs	r0, #7
 8003310:	f001 ff6c 	bl	80051ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003314:	2007      	movs	r0, #7
 8003316:	f001 ff85 	bl	8005224 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800331a:	bf00      	nop
 800331c:	3728      	adds	r7, #40	@ 0x28
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	40023800 	.word	0x40023800
 8003328:	40020000 	.word	0x40020000
 800332c:	40020400 	.word	0x40020400
 8003330:	40020800 	.word	0x40020800

08003334 <defaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_defaultTask */
void defaultTask(void const * argument)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800333c:	2001      	movs	r0, #1
 800333e:	f00d f8aa 	bl	8010496 <osDelay>
 8003342:	e7fb      	b.n	800333c <defaultTask+0x8>

08003344 <sendDataToScreen>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sendDataToScreen */
void sendDataToScreen(void const * argument)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
//			  break;
//
//	  }


	  osDelay(50000); //
 800334c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003350:	f00d f8a1 	bl	8010496 <osDelay>
 8003354:	e7fa      	b.n	800334c <sendDataToScreen+0x8>
	...

08003358 <updateControlLoop>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_updateControlLoop */
void updateControlLoop(void const * argument)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]

	  /* Infinite loop */
	  for(;;)
	  {

		if(joystick.joystickVoltage[0]<JOYSTICK_MIN_THRESHOLD ) // go Right
 8003360:	4b34      	ldr	r3, [pc, #208]	@ (8003434 <updateControlLoop+0xdc>)
 8003362:	edd3 7a02 	vldr	s15, [r3, #8]
 8003366:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8003438 <updateControlLoop+0xe0>
 800336a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800336e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003372:	d50e      	bpl.n	8003392 <updateControlLoop+0x3a>
		{
			if(verticalCommand==1)
 8003374:	4b31      	ldr	r3, [pc, #196]	@ (800343c <updateControlLoop+0xe4>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <updateControlLoop+0x28>
				neutralRudders();
 800337c:	f000 fac6 	bl	800390c <neutralRudders>
			turnRight();
 8003380:	f000 f9fe 	bl	8003780 <turnRight>
			horizontalCommand=1;
 8003384:	4b2e      	ldr	r3, [pc, #184]	@ (8003440 <updateControlLoop+0xe8>)
 8003386:	2201      	movs	r2, #1
 8003388:	701a      	strb	r2, [r3, #0]
			verticalCommand=0;
 800338a:	4b2c      	ldr	r3, [pc, #176]	@ (800343c <updateControlLoop+0xe4>)
 800338c:	2200      	movs	r2, #0
 800338e:	701a      	strb	r2, [r3, #0]
 8003390:	e04c      	b.n	800342c <updateControlLoop+0xd4>

		}
		else if(joystick.joystickVoltage[0]>JOYSTICK_MAX_THRESHOLD)//go Left
 8003392:	4b28      	ldr	r3, [pc, #160]	@ (8003434 <updateControlLoop+0xdc>)
 8003394:	edd3 7a02 	vldr	s15, [r3, #8]
 8003398:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 800339c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a4:	dd0e      	ble.n	80033c4 <updateControlLoop+0x6c>
		{
			if(verticalCommand==1)
 80033a6:	4b25      	ldr	r3, [pc, #148]	@ (800343c <updateControlLoop+0xe4>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d101      	bne.n	80033b2 <updateControlLoop+0x5a>
				neutralRudders();
 80033ae:	f000 faad 	bl	800390c <neutralRudders>
			turnLeft();
 80033b2:	f000 f9a3 	bl	80036fc <turnLeft>
			horizontalCommand=1;
 80033b6:	4b22      	ldr	r3, [pc, #136]	@ (8003440 <updateControlLoop+0xe8>)
 80033b8:	2201      	movs	r2, #1
 80033ba:	701a      	strb	r2, [r3, #0]
			verticalCommand=0;
 80033bc:	4b1f      	ldr	r3, [pc, #124]	@ (800343c <updateControlLoop+0xe4>)
 80033be:	2200      	movs	r2, #0
 80033c0:	701a      	strb	r2, [r3, #0]
 80033c2:	e033      	b.n	800342c <updateControlLoop+0xd4>
		}

		else if (joystick.joystickVoltage[1]<JOYSTICK_MIN_THRESHOLD)//dive
 80033c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003434 <updateControlLoop+0xdc>)
 80033c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80033ca:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8003438 <updateControlLoop+0xe0>
 80033ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d6:	d50e      	bpl.n	80033f6 <updateControlLoop+0x9e>
		{
			if(horizontalCommand==1)
 80033d8:	4b19      	ldr	r3, [pc, #100]	@ (8003440 <updateControlLoop+0xe8>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d101      	bne.n	80033e4 <updateControlLoop+0x8c>
				neutralRudders();
 80033e0:	f000 fa94 	bl	800390c <neutralRudders>
			dive();
 80033e4:	f000 fa50 	bl	8003888 <dive>
			verticalCommand=1;
 80033e8:	4b14      	ldr	r3, [pc, #80]	@ (800343c <updateControlLoop+0xe4>)
 80033ea:	2201      	movs	r2, #1
 80033ec:	701a      	strb	r2, [r3, #0]
			horizontalCommand=0;
 80033ee:	4b14      	ldr	r3, [pc, #80]	@ (8003440 <updateControlLoop+0xe8>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	701a      	strb	r2, [r3, #0]
 80033f4:	e01a      	b.n	800342c <updateControlLoop+0xd4>
		}
		else if(joystick.joystickVoltage[1]>JOYSTICK_MAX_THRESHOLD)//surface
 80033f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003434 <updateControlLoop+0xdc>)
 80033f8:	edd3 7a03 	vldr	s15, [r3, #12]
 80033fc:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 8003400:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003408:	dd0e      	ble.n	8003428 <updateControlLoop+0xd0>
		{
			if(horizontalCommand==1)
 800340a:	4b0d      	ldr	r3, [pc, #52]	@ (8003440 <updateControlLoop+0xe8>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d101      	bne.n	8003416 <updateControlLoop+0xbe>
				neutralRudders();
 8003412:	f000 fa7b 	bl	800390c <neutralRudders>
			surface();
 8003416:	f000 f9f5 	bl	8003804 <surface>
			verticalCommand=1;
 800341a:	4b08      	ldr	r3, [pc, #32]	@ (800343c <updateControlLoop+0xe4>)
 800341c:	2201      	movs	r2, #1
 800341e:	701a      	strb	r2, [r3, #0]
			horizontalCommand=0;
 8003420:	4b07      	ldr	r3, [pc, #28]	@ (8003440 <updateControlLoop+0xe8>)
 8003422:	2200      	movs	r2, #0
 8003424:	701a      	strb	r2, [r3, #0]
 8003426:	e001      	b.n	800342c <updateControlLoop+0xd4>
		}
		else
			neutralRudders();
 8003428:	f000 fa70 	bl	800390c <neutralRudders>



	    osDelay(100); // update control loop every 100 ms
 800342c:	2064      	movs	r0, #100	@ 0x64
 800342e:	f00d f832 	bl	8010496 <osDelay>
		if(joystick.joystickVoltage[0]<JOYSTICK_MIN_THRESHOLD ) // go Right
 8003432:	e795      	b.n	8003360 <updateControlLoop+0x8>
 8003434:	20002a80 	.word	0x20002a80
 8003438:	3f19999a 	.word	0x3f19999a
 800343c:	20002b46 	.word	0x20002b46
 8003440:	20002b47 	.word	0x20002b47

08003444 <recordSDdata>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_recordSDdata */
void recordSDdata(void const * argument)
{
 8003444:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003448:	b0a4      	sub	sp, #144	@ 0x90
 800344a:	af04      	add	r7, sp, #16
 800344c:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {

//	    // Waiting for the Micro SD module to initialize
	  	printf("SD card thread is called!");
 800344e:	4885      	ldr	r0, [pc, #532]	@ (8003664 <recordSDdata+0x220>)
 8003450:	f010 f93c 	bl	80136cc <iprintf>

	  	// Write accelerometer Data
	  	fres = f_mount(&fs, "", 0);
 8003454:	2200      	movs	r2, #0
 8003456:	4984      	ldr	r1, [pc, #528]	@ (8003668 <recordSDdata+0x224>)
 8003458:	4884      	ldr	r0, [pc, #528]	@ (800366c <recordSDdata+0x228>)
 800345a:	f00b ff2f 	bl	800f2bc <f_mount>
 800345e:	4603      	mov	r3, r0
 8003460:	461a      	mov	r2, r3
 8003462:	4b83      	ldr	r3, [pc, #524]	@ (8003670 <recordSDdata+0x22c>)
 8003464:	701a      	strb	r2, [r3, #0]
	  	fres = f_open(&fil, "accelYcali3.csv", FA_OPEN_APPEND | FA_WRITE | FA_READ);
 8003466:	2233      	movs	r2, #51	@ 0x33
 8003468:	4982      	ldr	r1, [pc, #520]	@ (8003674 <recordSDdata+0x230>)
 800346a:	4883      	ldr	r0, [pc, #524]	@ (8003678 <recordSDdata+0x234>)
 800346c:	f00b ff8a 	bl	800f384 <f_open>
 8003470:	4603      	mov	r3, r0
 8003472:	461a      	mov	r2, r3
 8003474:	4b7e      	ldr	r3, [pc, #504]	@ (8003670 <recordSDdata+0x22c>)
 8003476:	701a      	strb	r2, [r3, #0]
	  	fres = f_getfree("", &fre_clust, &pfs);
 8003478:	4a80      	ldr	r2, [pc, #512]	@ (800367c <recordSDdata+0x238>)
 800347a:	4981      	ldr	r1, [pc, #516]	@ (8003680 <recordSDdata+0x23c>)
 800347c:	487a      	ldr	r0, [pc, #488]	@ (8003668 <recordSDdata+0x224>)
 800347e:	f00c fcc8 	bl	800fe12 <f_getfree>
 8003482:	4603      	mov	r3, r0
 8003484:	461a      	mov	r2, r3
 8003486:	4b7a      	ldr	r3, [pc, #488]	@ (8003670 <recordSDdata+0x22c>)
 8003488:	701a      	strb	r2, [r3, #0]
	  	totalSpace = (uint32_t) ((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800348a:	4b7c      	ldr	r3, [pc, #496]	@ (800367c <recordSDdata+0x238>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	3b02      	subs	r3, #2
 8003492:	4a7a      	ldr	r2, [pc, #488]	@ (800367c <recordSDdata+0x238>)
 8003494:	6812      	ldr	r2, [r2, #0]
 8003496:	8952      	ldrh	r2, [r2, #10]
 8003498:	fb02 f303 	mul.w	r3, r2, r3
 800349c:	4618      	mov	r0, r3
 800349e:	f7fd f851 	bl	8000544 <__aeabi_ui2d>
 80034a2:	f04f 0200 	mov.w	r2, #0
 80034a6:	4b77      	ldr	r3, [pc, #476]	@ (8003684 <recordSDdata+0x240>)
 80034a8:	f7fd f8c6 	bl	8000638 <__aeabi_dmul>
 80034ac:	4602      	mov	r2, r0
 80034ae:	460b      	mov	r3, r1
 80034b0:	4610      	mov	r0, r2
 80034b2:	4619      	mov	r1, r3
 80034b4:	f7fd fb98 	bl	8000be8 <__aeabi_d2uiz>
 80034b8:	4603      	mov	r3, r0
 80034ba:	4a73      	ldr	r2, [pc, #460]	@ (8003688 <recordSDdata+0x244>)
 80034bc:	6013      	str	r3, [r2, #0]
	  	freeSpace = (uint32_t) (fre_clust * pfs->csize * 0.5);
 80034be:	4b6f      	ldr	r3, [pc, #444]	@ (800367c <recordSDdata+0x238>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	895b      	ldrh	r3, [r3, #10]
 80034c4:	461a      	mov	r2, r3
 80034c6:	4b6e      	ldr	r3, [pc, #440]	@ (8003680 <recordSDdata+0x23c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	fb02 f303 	mul.w	r3, r2, r3
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fd f838 	bl	8000544 <__aeabi_ui2d>
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	4b6a      	ldr	r3, [pc, #424]	@ (8003684 <recordSDdata+0x240>)
 80034da:	f7fd f8ad 	bl	8000638 <__aeabi_dmul>
 80034de:	4602      	mov	r2, r0
 80034e0:	460b      	mov	r3, r1
 80034e2:	4610      	mov	r0, r2
 80034e4:	4619      	mov	r1, r3
 80034e6:	f7fd fb7f 	bl	8000be8 <__aeabi_d2uiz>
 80034ea:	4603      	mov	r3, r0
 80034ec:	4a67      	ldr	r2, [pc, #412]	@ (800368c <recordSDdata+0x248>)
 80034ee:	6013      	str	r3, [r2, #0]
	  	char mSz[12];
	  	sprintf(mSz, "%lu", freeSpace);
 80034f0:	4b66      	ldr	r3, [pc, #408]	@ (800368c <recordSDdata+0x248>)
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80034f8:	4965      	ldr	r1, [pc, #404]	@ (8003690 <recordSDdata+0x24c>)
 80034fa:	4618      	mov	r0, r3
 80034fc:	f010 f8f8 	bl	80136f0 <siprintf>
	  	char accDataString[50];
	  	sprintf(accDataString, "ax=%3f, ay=%3f, az=%3f\n", mpu6050.acc_mps2[0],  mpu6050.acc_mps2[1],  mpu6050.acc_mps2[2]);
 8003500:	4b64      	ldr	r3, [pc, #400]	@ (8003694 <recordSDdata+0x250>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	4618      	mov	r0, r3
 8003506:	f7fd f83f 	bl	8000588 <__aeabi_f2d>
 800350a:	4680      	mov	r8, r0
 800350c:	4689      	mov	r9, r1
 800350e:	4b61      	ldr	r3, [pc, #388]	@ (8003694 <recordSDdata+0x250>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	4618      	mov	r0, r3
 8003514:	f7fd f838 	bl	8000588 <__aeabi_f2d>
 8003518:	4604      	mov	r4, r0
 800351a:	460d      	mov	r5, r1
 800351c:	4b5d      	ldr	r3, [pc, #372]	@ (8003694 <recordSDdata+0x250>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	4618      	mov	r0, r3
 8003522:	f7fd f831 	bl	8000588 <__aeabi_f2d>
 8003526:	4602      	mov	r2, r0
 8003528:	460b      	mov	r3, r1
 800352a:	f107 000c 	add.w	r0, r7, #12
 800352e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003532:	e9cd 4500 	strd	r4, r5, [sp]
 8003536:	4642      	mov	r2, r8
 8003538:	464b      	mov	r3, r9
 800353a:	4957      	ldr	r1, [pc, #348]	@ (8003698 <recordSDdata+0x254>)
 800353c:	f010 f8d8 	bl	80136f0 <siprintf>
	  	f_puts(accDataString, &fil);
 8003540:	f107 030c 	add.w	r3, r7, #12
 8003544:	494c      	ldr	r1, [pc, #304]	@ (8003678 <recordSDdata+0x234>)
 8003546:	4618      	mov	r0, r3
 8003548:	f00c fd96 	bl	8010078 <f_puts>
	  	fres = f_close(&fil);
 800354c:	484a      	ldr	r0, [pc, #296]	@ (8003678 <recordSDdata+0x234>)
 800354e:	f00c fc31 	bl	800fdb4 <f_close>
 8003552:	4603      	mov	r3, r0
 8003554:	461a      	mov	r2, r3
 8003556:	4b46      	ldr	r3, [pc, #280]	@ (8003670 <recordSDdata+0x22c>)
 8003558:	701a      	strb	r2, [r3, #0]

	  	// Write Gyro Data
	  	fres = f_open(&fil, "gyro.csv", FA_OPEN_APPEND | FA_WRITE | FA_READ);
 800355a:	2233      	movs	r2, #51	@ 0x33
 800355c:	494f      	ldr	r1, [pc, #316]	@ (800369c <recordSDdata+0x258>)
 800355e:	4846      	ldr	r0, [pc, #280]	@ (8003678 <recordSDdata+0x234>)
 8003560:	f00b ff10 	bl	800f384 <f_open>
 8003564:	4603      	mov	r3, r0
 8003566:	461a      	mov	r2, r3
 8003568:	4b41      	ldr	r3, [pc, #260]	@ (8003670 <recordSDdata+0x22c>)
 800356a:	701a      	strb	r2, [r3, #0]
	  	fres = f_getfree("", &fre_clust, &pfs);
 800356c:	4a43      	ldr	r2, [pc, #268]	@ (800367c <recordSDdata+0x238>)
 800356e:	4944      	ldr	r1, [pc, #272]	@ (8003680 <recordSDdata+0x23c>)
 8003570:	483d      	ldr	r0, [pc, #244]	@ (8003668 <recordSDdata+0x224>)
 8003572:	f00c fc4e 	bl	800fe12 <f_getfree>
 8003576:	4603      	mov	r3, r0
 8003578:	461a      	mov	r2, r3
 800357a:	4b3d      	ldr	r3, [pc, #244]	@ (8003670 <recordSDdata+0x22c>)
 800357c:	701a      	strb	r2, [r3, #0]
		totalSpace = (uint32_t) ((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800357e:	4b3f      	ldr	r3, [pc, #252]	@ (800367c <recordSDdata+0x238>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	3b02      	subs	r3, #2
 8003586:	4a3d      	ldr	r2, [pc, #244]	@ (800367c <recordSDdata+0x238>)
 8003588:	6812      	ldr	r2, [r2, #0]
 800358a:	8952      	ldrh	r2, [r2, #10]
 800358c:	fb02 f303 	mul.w	r3, r2, r3
 8003590:	4618      	mov	r0, r3
 8003592:	f7fc ffd7 	bl	8000544 <__aeabi_ui2d>
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	4b3a      	ldr	r3, [pc, #232]	@ (8003684 <recordSDdata+0x240>)
 800359c:	f7fd f84c 	bl	8000638 <__aeabi_dmul>
 80035a0:	4602      	mov	r2, r0
 80035a2:	460b      	mov	r3, r1
 80035a4:	4610      	mov	r0, r2
 80035a6:	4619      	mov	r1, r3
 80035a8:	f7fd fb1e 	bl	8000be8 <__aeabi_d2uiz>
 80035ac:	4603      	mov	r3, r0
 80035ae:	4a36      	ldr	r2, [pc, #216]	@ (8003688 <recordSDdata+0x244>)
 80035b0:	6013      	str	r3, [r2, #0]
		freeSpace = (uint32_t) (fre_clust * pfs->csize * 0.5);
 80035b2:	4b32      	ldr	r3, [pc, #200]	@ (800367c <recordSDdata+0x238>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	895b      	ldrh	r3, [r3, #10]
 80035b8:	461a      	mov	r2, r3
 80035ba:	4b31      	ldr	r3, [pc, #196]	@ (8003680 <recordSDdata+0x23c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	fb02 f303 	mul.w	r3, r2, r3
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fc ffbe 	bl	8000544 <__aeabi_ui2d>
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	4b2d      	ldr	r3, [pc, #180]	@ (8003684 <recordSDdata+0x240>)
 80035ce:	f7fd f833 	bl	8000638 <__aeabi_dmul>
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	4610      	mov	r0, r2
 80035d8:	4619      	mov	r1, r3
 80035da:	f7fd fb05 	bl	8000be8 <__aeabi_d2uiz>
 80035de:	4603      	mov	r3, r0
 80035e0:	4a2a      	ldr	r2, [pc, #168]	@ (800368c <recordSDdata+0x248>)
 80035e2:	6013      	str	r3, [r2, #0]
		sprintf(mSz, "%lu", freeSpace);
 80035e4:	4b29      	ldr	r3, [pc, #164]	@ (800368c <recordSDdata+0x248>)
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80035ec:	4928      	ldr	r1, [pc, #160]	@ (8003690 <recordSDdata+0x24c>)
 80035ee:	4618      	mov	r0, r3
 80035f0:	f010 f87e 	bl	80136f0 <siprintf>
		char gyroDataString[50];
		sprintf(gyroDataString, "gx=%3f, gy=%3f, gz=%3f\n", mpu6050.gyr_rps[0],  mpu6050.gyr_rps[1],  mpu6050.gyr_rps[2]);
 80035f4:	4b27      	ldr	r3, [pc, #156]	@ (8003694 <recordSDdata+0x250>)
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fc ffc5 	bl	8000588 <__aeabi_f2d>
 80035fe:	4680      	mov	r8, r0
 8003600:	4689      	mov	r9, r1
 8003602:	4b24      	ldr	r3, [pc, #144]	@ (8003694 <recordSDdata+0x250>)
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	4618      	mov	r0, r3
 8003608:	f7fc ffbe 	bl	8000588 <__aeabi_f2d>
 800360c:	4604      	mov	r4, r0
 800360e:	460d      	mov	r5, r1
 8003610:	4b20      	ldr	r3, [pc, #128]	@ (8003694 <recordSDdata+0x250>)
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	4618      	mov	r0, r3
 8003616:	f7fc ffb7 	bl	8000588 <__aeabi_f2d>
 800361a:	4602      	mov	r2, r0
 800361c:	460b      	mov	r3, r1
 800361e:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8003622:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003626:	e9cd 4500 	strd	r4, r5, [sp]
 800362a:	4642      	mov	r2, r8
 800362c:	464b      	mov	r3, r9
 800362e:	491c      	ldr	r1, [pc, #112]	@ (80036a0 <recordSDdata+0x25c>)
 8003630:	f010 f85e 	bl	80136f0 <siprintf>
		f_puts(gyroDataString, &fil);
 8003634:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003638:	490f      	ldr	r1, [pc, #60]	@ (8003678 <recordSDdata+0x234>)
 800363a:	4618      	mov	r0, r3
 800363c:	f00c fd1c 	bl	8010078 <f_puts>
		fres = f_close(&fil);
 8003640:	480d      	ldr	r0, [pc, #52]	@ (8003678 <recordSDdata+0x234>)
 8003642:	f00c fbb7 	bl	800fdb4 <f_close>
 8003646:	4603      	mov	r3, r0
 8003648:	461a      	mov	r2, r3
 800364a:	4b09      	ldr	r3, [pc, #36]	@ (8003670 <recordSDdata+0x22c>)
 800364c:	701a      	strb	r2, [r3, #0]

//
	  	f_mount(NULL, "", 1);
 800364e:	2201      	movs	r2, #1
 8003650:	4905      	ldr	r1, [pc, #20]	@ (8003668 <recordSDdata+0x224>)
 8003652:	2000      	movs	r0, #0
 8003654:	f00b fe32 	bl	800f2bc <f_mount>

    osDelay(2000); // write SD card data every 5 seconds
 8003658:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800365c:	f00c ff1b 	bl	8010496 <osDelay>
  {
 8003660:	bf00      	nop
 8003662:	e6f4      	b.n	800344e <recordSDdata+0xa>
 8003664:	08015b54 	.word	0x08015b54
 8003668:	08015b70 	.word	0x08015b70
 800366c:	2000050c 	.word	0x2000050c
 8003670:	2000257c 	.word	0x2000257c
 8003674:	08015b74 	.word	0x08015b74
 8003678:	2000154c 	.word	0x2000154c
 800367c:	20001548 	.word	0x20001548
 8003680:	20002580 	.word	0x20002580
 8003684:	3fe00000 	.word	0x3fe00000
 8003688:	20002584 	.word	0x20002584
 800368c:	20002588 	.word	0x20002588
 8003690:	08015b84 	.word	0x08015b84
 8003694:	20002ac4 	.word	0x20002ac4
 8003698:	08015b88 	.word	0x08015b88
 800369c:	08015ba0 	.word	0x08015ba0
 80036a0:	08015bac 	.word	0x08015bac

080036a4 <getBar30Data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_getBar30Data */
void getBar30Data(void const * argument)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN getBar30Data */
  /* Infinite loop */
	static uint8_t i2cGood=1;
  for(;;)
  {
	i2cGood=Bar30getData(&pressureSensor);
 80036ac:	4805      	ldr	r0, [pc, #20]	@ (80036c4 <getBar30Data+0x20>)
 80036ae:	f7fd fd3d 	bl	800112c <Bar30getData>
 80036b2:	4603      	mov	r3, r0
 80036b4:	461a      	mov	r2, r3
 80036b6:	4b04      	ldr	r3, [pc, #16]	@ (80036c8 <getBar30Data+0x24>)
 80036b8:	701a      	strb	r2, [r3, #0]
    osDelay(250);
 80036ba:	20fa      	movs	r0, #250	@ 0xfa
 80036bc:	f00c feeb 	bl	8010496 <osDelay>
	i2cGood=Bar30getData(&pressureSensor);
 80036c0:	bf00      	nop
 80036c2:	e7f3      	b.n	80036ac <getBar30Data+0x8>
 80036c4:	20002b10 	.word	0x20002b10
 80036c8:	20000001 	.word	0x20000001

080036cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a04      	ldr	r2, [pc, #16]	@ (80036ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d101      	bne.n	80036e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80036de:	f000 ff4d 	bl	800457c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80036e2:	bf00      	nop
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	40010000 	.word	0x40010000

080036f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036f4:	b672      	cpsid	i
}
 80036f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80036f8:	bf00      	nop
 80036fa:	e7fd      	b.n	80036f8 <Error_Handler+0x8>

080036fc <turnLeft>:
typedef enum {LEFT,RIGHT,SURFACE,DIVE} COMMAND;



void turnLeft()
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
	if(htim3.Instance->CCR1>=SERVO_MIN_PWM+SERVO_ANGLE_VARIATION)
 8003700:	4b1e      	ldr	r3, [pc, #120]	@ (800377c <turnLeft+0x80>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003706:	f240 2225 	movw	r2, #549	@ 0x225
 800370a:	4293      	cmp	r3, r2
 800370c:	d906      	bls.n	800371c <turnLeft+0x20>
		htim3.Instance->CCR1-=SERVO_ANGLE_VARIATION;
 800370e:	4b1b      	ldr	r3, [pc, #108]	@ (800377c <turnLeft+0x80>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003714:	4b19      	ldr	r3, [pc, #100]	@ (800377c <turnLeft+0x80>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	3a7d      	subs	r2, #125	@ 0x7d
 800371a:	635a      	str	r2, [r3, #52]	@ 0x34

	if(htim3.Instance->CCR2>=SERVO_MIN_PWM+SERVO_ANGLE_VARIATION)
 800371c:	4b17      	ldr	r3, [pc, #92]	@ (800377c <turnLeft+0x80>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003722:	f240 2225 	movw	r2, #549	@ 0x225
 8003726:	4293      	cmp	r3, r2
 8003728:	d906      	bls.n	8003738 <turnLeft+0x3c>
		htim3.Instance->CCR2-=SERVO_ANGLE_VARIATION;
 800372a:	4b14      	ldr	r3, [pc, #80]	@ (800377c <turnLeft+0x80>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003730:	4b12      	ldr	r3, [pc, #72]	@ (800377c <turnLeft+0x80>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	3a7d      	subs	r2, #125	@ 0x7d
 8003736:	639a      	str	r2, [r3, #56]	@ 0x38

	if(htim3.Instance->CCR3<=SERVO_MAX_PWM-SERVO_ANGLE_VARIATION)
 8003738:	4b10      	ldr	r3, [pc, #64]	@ (800377c <turnLeft+0x80>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800373e:	f240 421a 	movw	r2, #1050	@ 0x41a
 8003742:	4293      	cmp	r3, r2
 8003744:	d806      	bhi.n	8003754 <turnLeft+0x58>
		htim3.Instance->CCR3+=SERVO_ANGLE_VARIATION;
 8003746:	4b0d      	ldr	r3, [pc, #52]	@ (800377c <turnLeft+0x80>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800374c:	4b0b      	ldr	r3, [pc, #44]	@ (800377c <turnLeft+0x80>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	327d      	adds	r2, #125	@ 0x7d
 8003752:	63da      	str	r2, [r3, #60]	@ 0x3c

	if(htim3.Instance->CCR4<=SERVO_MAX_PWM-SERVO_ANGLE_VARIATION)
 8003754:	4b09      	ldr	r3, [pc, #36]	@ (800377c <turnLeft+0x80>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375a:	f240 421a 	movw	r2, #1050	@ 0x41a
 800375e:	4293      	cmp	r3, r2
 8003760:	d806      	bhi.n	8003770 <turnLeft+0x74>
		htim3.Instance->CCR4+=SERVO_ANGLE_VARIATION;
 8003762:	4b06      	ldr	r3, [pc, #24]	@ (800377c <turnLeft+0x80>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003768:	4b04      	ldr	r3, [pc, #16]	@ (800377c <turnLeft+0x80>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	327d      	adds	r2, #125	@ 0x7d
 800376e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003770:	bf00      	nop
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	2000288c 	.word	0x2000288c

08003780 <turnRight>:

void turnRight()
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
	if(htim3.Instance->CCR1<=SERVO_MAX_PWM-SERVO_ANGLE_VARIATION)
 8003784:	4b1e      	ldr	r3, [pc, #120]	@ (8003800 <turnRight+0x80>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800378a:	f240 421a 	movw	r2, #1050	@ 0x41a
 800378e:	4293      	cmp	r3, r2
 8003790:	d806      	bhi.n	80037a0 <turnRight+0x20>
		htim3.Instance->CCR1+=SERVO_ANGLE_VARIATION;
 8003792:	4b1b      	ldr	r3, [pc, #108]	@ (8003800 <turnRight+0x80>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003798:	4b19      	ldr	r3, [pc, #100]	@ (8003800 <turnRight+0x80>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	327d      	adds	r2, #125	@ 0x7d
 800379e:	635a      	str	r2, [r3, #52]	@ 0x34

	if(htim3.Instance->CCR2<=SERVO_MAX_PWM-SERVO_ANGLE_VARIATION)
 80037a0:	4b17      	ldr	r3, [pc, #92]	@ (8003800 <turnRight+0x80>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a6:	f240 421a 	movw	r2, #1050	@ 0x41a
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d806      	bhi.n	80037bc <turnRight+0x3c>
		htim3.Instance->CCR2+=SERVO_ANGLE_VARIATION;
 80037ae:	4b14      	ldr	r3, [pc, #80]	@ (8003800 <turnRight+0x80>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037b4:	4b12      	ldr	r3, [pc, #72]	@ (8003800 <turnRight+0x80>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	327d      	adds	r2, #125	@ 0x7d
 80037ba:	639a      	str	r2, [r3, #56]	@ 0x38

	if(htim3.Instance->CCR3>=SERVO_MIN_PWM+SERVO_ANGLE_VARIATION)
 80037bc:	4b10      	ldr	r3, [pc, #64]	@ (8003800 <turnRight+0x80>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037c2:	f240 2225 	movw	r2, #549	@ 0x225
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d906      	bls.n	80037d8 <turnRight+0x58>
		htim3.Instance->CCR3-=SERVO_ANGLE_VARIATION;
 80037ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003800 <turnRight+0x80>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003800 <turnRight+0x80>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3a7d      	subs	r2, #125	@ 0x7d
 80037d6:	63da      	str	r2, [r3, #60]	@ 0x3c

	if(htim3.Instance->CCR4>=SERVO_MIN_PWM+SERVO_ANGLE_VARIATION)
 80037d8:	4b09      	ldr	r3, [pc, #36]	@ (8003800 <turnRight+0x80>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037de:	f240 2225 	movw	r2, #549	@ 0x225
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d906      	bls.n	80037f4 <turnRight+0x74>
		htim3.Instance->CCR4-=SERVO_ANGLE_VARIATION;
 80037e6:	4b06      	ldr	r3, [pc, #24]	@ (8003800 <turnRight+0x80>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037ec:	4b04      	ldr	r3, [pc, #16]	@ (8003800 <turnRight+0x80>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	3a7d      	subs	r2, #125	@ 0x7d
 80037f2:	641a      	str	r2, [r3, #64]	@ 0x40

}
 80037f4:	bf00      	nop
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	2000288c 	.word	0x2000288c

08003804 <surface>:
void surface()
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
	if(htim3.Instance->CCR1>=SERVO_MIN_PWM+SERVO_ANGLE_VARIATION)
 8003808:	4b1e      	ldr	r3, [pc, #120]	@ (8003884 <surface+0x80>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800380e:	f240 2225 	movw	r2, #549	@ 0x225
 8003812:	4293      	cmp	r3, r2
 8003814:	d906      	bls.n	8003824 <surface+0x20>
		htim3.Instance->CCR1-=SERVO_ANGLE_VARIATION;
 8003816:	4b1b      	ldr	r3, [pc, #108]	@ (8003884 <surface+0x80>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800381c:	4b19      	ldr	r3, [pc, #100]	@ (8003884 <surface+0x80>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	3a7d      	subs	r2, #125	@ 0x7d
 8003822:	635a      	str	r2, [r3, #52]	@ 0x34
	if(htim3.Instance->CCR2<=SERVO_MAX_PWM-SERVO_ANGLE_VARIATION)
 8003824:	4b17      	ldr	r3, [pc, #92]	@ (8003884 <surface+0x80>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800382a:	f240 421a 	movw	r2, #1050	@ 0x41a
 800382e:	4293      	cmp	r3, r2
 8003830:	d806      	bhi.n	8003840 <surface+0x3c>
		htim3.Instance->CCR2+=SERVO_ANGLE_VARIATION;
 8003832:	4b14      	ldr	r3, [pc, #80]	@ (8003884 <surface+0x80>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003838:	4b12      	ldr	r3, [pc, #72]	@ (8003884 <surface+0x80>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	327d      	adds	r2, #125	@ 0x7d
 800383e:	639a      	str	r2, [r3, #56]	@ 0x38
	if(htim3.Instance->CCR3>=SERVO_MIN_PWM+SERVO_ANGLE_VARIATION)
 8003840:	4b10      	ldr	r3, [pc, #64]	@ (8003884 <surface+0x80>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003846:	f240 2225 	movw	r2, #549	@ 0x225
 800384a:	4293      	cmp	r3, r2
 800384c:	d906      	bls.n	800385c <surface+0x58>
		htim3.Instance->CCR3-=SERVO_ANGLE_VARIATION;
 800384e:	4b0d      	ldr	r3, [pc, #52]	@ (8003884 <surface+0x80>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003854:	4b0b      	ldr	r3, [pc, #44]	@ (8003884 <surface+0x80>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	3a7d      	subs	r2, #125	@ 0x7d
 800385a:	63da      	str	r2, [r3, #60]	@ 0x3c
	if(htim3.Instance->CCR4<=SERVO_MAX_PWM-SERVO_ANGLE_VARIATION)
 800385c:	4b09      	ldr	r3, [pc, #36]	@ (8003884 <surface+0x80>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003862:	f240 421a 	movw	r2, #1050	@ 0x41a
 8003866:	4293      	cmp	r3, r2
 8003868:	d806      	bhi.n	8003878 <surface+0x74>
		htim3.Instance->CCR4+=SERVO_ANGLE_VARIATION;
 800386a:	4b06      	ldr	r3, [pc, #24]	@ (8003884 <surface+0x80>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003870:	4b04      	ldr	r3, [pc, #16]	@ (8003884 <surface+0x80>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	327d      	adds	r2, #125	@ 0x7d
 8003876:	641a      	str	r2, [r3, #64]	@ 0x40

}
 8003878:	bf00      	nop
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	2000288c 	.word	0x2000288c

08003888 <dive>:
void dive()
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
	if(htim3.Instance->CCR1<=SERVO_MAX_PWM-SERVO_ANGLE_VARIATION)
 800388c:	4b1e      	ldr	r3, [pc, #120]	@ (8003908 <dive+0x80>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003892:	f240 421a 	movw	r2, #1050	@ 0x41a
 8003896:	4293      	cmp	r3, r2
 8003898:	d806      	bhi.n	80038a8 <dive+0x20>
		htim3.Instance->CCR1+=SERVO_ANGLE_VARIATION;
 800389a:	4b1b      	ldr	r3, [pc, #108]	@ (8003908 <dive+0x80>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038a0:	4b19      	ldr	r3, [pc, #100]	@ (8003908 <dive+0x80>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	327d      	adds	r2, #125	@ 0x7d
 80038a6:	635a      	str	r2, [r3, #52]	@ 0x34
	if(htim3.Instance->CCR2>=SERVO_MIN_PWM+SERVO_ANGLE_VARIATION)
 80038a8:	4b17      	ldr	r3, [pc, #92]	@ (8003908 <dive+0x80>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ae:	f240 2225 	movw	r2, #549	@ 0x225
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d906      	bls.n	80038c4 <dive+0x3c>
		htim3.Instance->CCR2-=SERVO_ANGLE_VARIATION;
 80038b6:	4b14      	ldr	r3, [pc, #80]	@ (8003908 <dive+0x80>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038bc:	4b12      	ldr	r3, [pc, #72]	@ (8003908 <dive+0x80>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	3a7d      	subs	r2, #125	@ 0x7d
 80038c2:	639a      	str	r2, [r3, #56]	@ 0x38
	if(htim3.Instance->CCR3<=SERVO_MAX_PWM-SERVO_ANGLE_VARIATION)
 80038c4:	4b10      	ldr	r3, [pc, #64]	@ (8003908 <dive+0x80>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ca:	f240 421a 	movw	r2, #1050	@ 0x41a
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d806      	bhi.n	80038e0 <dive+0x58>
		htim3.Instance->CCR3+=SERVO_ANGLE_VARIATION;
 80038d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003908 <dive+0x80>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003908 <dive+0x80>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	327d      	adds	r2, #125	@ 0x7d
 80038de:	63da      	str	r2, [r3, #60]	@ 0x3c
	if(htim3.Instance->CCR4>=SERVO_MIN_PWM+SERVO_ANGLE_VARIATION)
 80038e0:	4b09      	ldr	r3, [pc, #36]	@ (8003908 <dive+0x80>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e6:	f240 2225 	movw	r2, #549	@ 0x225
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d906      	bls.n	80038fc <dive+0x74>
		htim3.Instance->CCR4-=SERVO_ANGLE_VARIATION;
 80038ee:	4b06      	ldr	r3, [pc, #24]	@ (8003908 <dive+0x80>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038f4:	4b04      	ldr	r3, [pc, #16]	@ (8003908 <dive+0x80>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	3a7d      	subs	r2, #125	@ 0x7d
 80038fa:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80038fc:	bf00      	nop
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	2000288c 	.word	0x2000288c

0800390c <neutralRudders>:
void neutralRudders()
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
	htim3.Instance->CCR1=SERVO_CENTER_PWM;
 8003910:	4b0c      	ldr	r3, [pc, #48]	@ (8003944 <neutralRudders+0x38>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003918:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3.Instance->CCR2=SERVO_CENTER_PWM;
 800391a:	4b0a      	ldr	r3, [pc, #40]	@ (8003944 <neutralRudders+0x38>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003922:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3.Instance->CCR3=SERVO_CENTER_PWM;
 8003924:	4b07      	ldr	r3, [pc, #28]	@ (8003944 <neutralRudders+0x38>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800392c:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim3.Instance->CCR4=SERVO_CENTER_PWM;
 800392e:	4b05      	ldr	r3, [pc, #20]	@ (8003944 <neutralRudders+0x38>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003936:	641a      	str	r2, [r3, #64]	@ 0x40

}
 8003938:	bf00      	nop
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	2000288c 	.word	0x2000288c

08003948 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800394e:	2300      	movs	r3, #0
 8003950:	607b      	str	r3, [r7, #4]
 8003952:	4b12      	ldr	r3, [pc, #72]	@ (800399c <HAL_MspInit+0x54>)
 8003954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003956:	4a11      	ldr	r2, [pc, #68]	@ (800399c <HAL_MspInit+0x54>)
 8003958:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800395c:	6453      	str	r3, [r2, #68]	@ 0x44
 800395e:	4b0f      	ldr	r3, [pc, #60]	@ (800399c <HAL_MspInit+0x54>)
 8003960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003962:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003966:	607b      	str	r3, [r7, #4]
 8003968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800396a:	2300      	movs	r3, #0
 800396c:	603b      	str	r3, [r7, #0]
 800396e:	4b0b      	ldr	r3, [pc, #44]	@ (800399c <HAL_MspInit+0x54>)
 8003970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003972:	4a0a      	ldr	r2, [pc, #40]	@ (800399c <HAL_MspInit+0x54>)
 8003974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003978:	6413      	str	r3, [r2, #64]	@ 0x40
 800397a:	4b08      	ldr	r3, [pc, #32]	@ (800399c <HAL_MspInit+0x54>)
 800397c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003982:	603b      	str	r3, [r7, #0]
 8003984:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003986:	2200      	movs	r2, #0
 8003988:	210f      	movs	r1, #15
 800398a:	f06f 0001 	mvn.w	r0, #1
 800398e:	f001 fc2d 	bl	80051ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003992:	bf00      	nop
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	40023800 	.word	0x40023800

080039a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b08c      	sub	sp, #48	@ 0x30
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039a8:	f107 031c 	add.w	r3, r7, #28
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	605a      	str	r2, [r3, #4]
 80039b2:	609a      	str	r2, [r3, #8]
 80039b4:	60da      	str	r2, [r3, #12]
 80039b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a67      	ldr	r2, [pc, #412]	@ (8003b5c <HAL_ADC_MspInit+0x1bc>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d161      	bne.n	8003a86 <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80039c2:	2300      	movs	r3, #0
 80039c4:	61bb      	str	r3, [r7, #24]
 80039c6:	4b66      	ldr	r3, [pc, #408]	@ (8003b60 <HAL_ADC_MspInit+0x1c0>)
 80039c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ca:	4a65      	ldr	r2, [pc, #404]	@ (8003b60 <HAL_ADC_MspInit+0x1c0>)
 80039cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80039d2:	4b63      	ldr	r3, [pc, #396]	@ (8003b60 <HAL_ADC_MspInit+0x1c0>)
 80039d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039da:	61bb      	str	r3, [r7, #24]
 80039dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039de:	2300      	movs	r3, #0
 80039e0:	617b      	str	r3, [r7, #20]
 80039e2:	4b5f      	ldr	r3, [pc, #380]	@ (8003b60 <HAL_ADC_MspInit+0x1c0>)
 80039e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e6:	4a5e      	ldr	r2, [pc, #376]	@ (8003b60 <HAL_ADC_MspInit+0x1c0>)
 80039e8:	f043 0301 	orr.w	r3, r3, #1
 80039ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80039ee:	4b5c      	ldr	r3, [pc, #368]	@ (8003b60 <HAL_ADC_MspInit+0x1c0>)
 80039f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80039fa:	2301      	movs	r3, #1
 80039fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039fe:	2303      	movs	r3, #3
 8003a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a02:	2300      	movs	r3, #0
 8003a04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a06:	f107 031c 	add.w	r3, r7, #28
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	4855      	ldr	r0, [pc, #340]	@ (8003b64 <HAL_ADC_MspInit+0x1c4>)
 8003a0e:	f002 f833 	bl	8005a78 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003a12:	4b55      	ldr	r3, [pc, #340]	@ (8003b68 <HAL_ADC_MspInit+0x1c8>)
 8003a14:	4a55      	ldr	r2, [pc, #340]	@ (8003b6c <HAL_ADC_MspInit+0x1cc>)
 8003a16:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003a18:	4b53      	ldr	r3, [pc, #332]	@ (8003b68 <HAL_ADC_MspInit+0x1c8>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a1e:	4b52      	ldr	r3, [pc, #328]	@ (8003b68 <HAL_ADC_MspInit+0x1c8>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a24:	4b50      	ldr	r3, [pc, #320]	@ (8003b68 <HAL_ADC_MspInit+0x1c8>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003a2a:	4b4f      	ldr	r3, [pc, #316]	@ (8003b68 <HAL_ADC_MspInit+0x1c8>)
 8003a2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a30:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003a32:	4b4d      	ldr	r3, [pc, #308]	@ (8003b68 <HAL_ADC_MspInit+0x1c8>)
 8003a34:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a38:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003a3a:	4b4b      	ldr	r3, [pc, #300]	@ (8003b68 <HAL_ADC_MspInit+0x1c8>)
 8003a3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003a40:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003a42:	4b49      	ldr	r3, [pc, #292]	@ (8003b68 <HAL_ADC_MspInit+0x1c8>)
 8003a44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a48:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8003a4a:	4b47      	ldr	r3, [pc, #284]	@ (8003b68 <HAL_ADC_MspInit+0x1c8>)
 8003a4c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003a50:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a52:	4b45      	ldr	r3, [pc, #276]	@ (8003b68 <HAL_ADC_MspInit+0x1c8>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003a58:	4843      	ldr	r0, [pc, #268]	@ (8003b68 <HAL_ADC_MspInit+0x1c8>)
 8003a5a:	f001 fbf1 	bl	8005240 <HAL_DMA_Init>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8003a64:	f7ff fe44 	bl	80036f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a3f      	ldr	r2, [pc, #252]	@ (8003b68 <HAL_ADC_MspInit+0x1c8>)
 8003a6c:	639a      	str	r2, [r3, #56]	@ 0x38
 8003a6e:	4a3e      	ldr	r2, [pc, #248]	@ (8003b68 <HAL_ADC_MspInit+0x1c8>)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8003a74:	2200      	movs	r2, #0
 8003a76:	2105      	movs	r1, #5
 8003a78:	2012      	movs	r0, #18
 8003a7a:	f001 fbb7 	bl	80051ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003a7e:	2012      	movs	r0, #18
 8003a80:	f001 fbd0 	bl	8005224 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003a84:	e066      	b.n	8003b54 <HAL_ADC_MspInit+0x1b4>
  else if(hadc->Instance==ADC2)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a39      	ldr	r2, [pc, #228]	@ (8003b70 <HAL_ADC_MspInit+0x1d0>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d161      	bne.n	8003b54 <HAL_ADC_MspInit+0x1b4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003a90:	2300      	movs	r3, #0
 8003a92:	613b      	str	r3, [r7, #16]
 8003a94:	4b32      	ldr	r3, [pc, #200]	@ (8003b60 <HAL_ADC_MspInit+0x1c0>)
 8003a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a98:	4a31      	ldr	r2, [pc, #196]	@ (8003b60 <HAL_ADC_MspInit+0x1c0>)
 8003a9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a9e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003aa0:	4b2f      	ldr	r3, [pc, #188]	@ (8003b60 <HAL_ADC_MspInit+0x1c0>)
 8003aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003aa8:	613b      	str	r3, [r7, #16]
 8003aaa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aac:	2300      	movs	r3, #0
 8003aae:	60fb      	str	r3, [r7, #12]
 8003ab0:	4b2b      	ldr	r3, [pc, #172]	@ (8003b60 <HAL_ADC_MspInit+0x1c0>)
 8003ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab4:	4a2a      	ldr	r2, [pc, #168]	@ (8003b60 <HAL_ADC_MspInit+0x1c0>)
 8003ab6:	f043 0301 	orr.w	r3, r3, #1
 8003aba:	6313      	str	r3, [r2, #48]	@ 0x30
 8003abc:	4b28      	ldr	r3, [pc, #160]	@ (8003b60 <HAL_ADC_MspInit+0x1c0>)
 8003abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	60fb      	str	r3, [r7, #12]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003ac8:	2302      	movs	r3, #2
 8003aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003acc:	2303      	movs	r3, #3
 8003ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad4:	f107 031c 	add.w	r3, r7, #28
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4822      	ldr	r0, [pc, #136]	@ (8003b64 <HAL_ADC_MspInit+0x1c4>)
 8003adc:	f001 ffcc 	bl	8005a78 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8003ae0:	4b24      	ldr	r3, [pc, #144]	@ (8003b74 <HAL_ADC_MspInit+0x1d4>)
 8003ae2:	4a25      	ldr	r2, [pc, #148]	@ (8003b78 <HAL_ADC_MspInit+0x1d8>)
 8003ae4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8003ae6:	4b23      	ldr	r3, [pc, #140]	@ (8003b74 <HAL_ADC_MspInit+0x1d4>)
 8003ae8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003aec:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003aee:	4b21      	ldr	r3, [pc, #132]	@ (8003b74 <HAL_ADC_MspInit+0x1d4>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003af4:	4b1f      	ldr	r3, [pc, #124]	@ (8003b74 <HAL_ADC_MspInit+0x1d4>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003afa:	4b1e      	ldr	r3, [pc, #120]	@ (8003b74 <HAL_ADC_MspInit+0x1d4>)
 8003afc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b00:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b02:	4b1c      	ldr	r3, [pc, #112]	@ (8003b74 <HAL_ADC_MspInit+0x1d4>)
 8003b04:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b08:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8003b74 <HAL_ADC_MspInit+0x1d4>)
 8003b0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003b10:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003b12:	4b18      	ldr	r3, [pc, #96]	@ (8003b74 <HAL_ADC_MspInit+0x1d4>)
 8003b14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b18:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8003b1a:	4b16      	ldr	r3, [pc, #88]	@ (8003b74 <HAL_ADC_MspInit+0x1d4>)
 8003b1c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003b20:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b22:	4b14      	ldr	r3, [pc, #80]	@ (8003b74 <HAL_ADC_MspInit+0x1d4>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003b28:	4812      	ldr	r0, [pc, #72]	@ (8003b74 <HAL_ADC_MspInit+0x1d4>)
 8003b2a:	f001 fb89 	bl	8005240 <HAL_DMA_Init>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <HAL_ADC_MspInit+0x198>
      Error_Handler();
 8003b34:	f7ff fddc 	bl	80036f0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a0e      	ldr	r2, [pc, #56]	@ (8003b74 <HAL_ADC_MspInit+0x1d4>)
 8003b3c:	639a      	str	r2, [r3, #56]	@ 0x38
 8003b3e:	4a0d      	ldr	r2, [pc, #52]	@ (8003b74 <HAL_ADC_MspInit+0x1d4>)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8003b44:	2200      	movs	r2, #0
 8003b46:	2105      	movs	r1, #5
 8003b48:	2012      	movs	r0, #18
 8003b4a:	f001 fb4f 	bl	80051ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003b4e:	2012      	movs	r0, #18
 8003b50:	f001 fb68 	bl	8005224 <HAL_NVIC_EnableIRQ>
}
 8003b54:	bf00      	nop
 8003b56:	3730      	adds	r7, #48	@ 0x30
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40012000 	.word	0x40012000
 8003b60:	40023800 	.word	0x40023800
 8003b64:	40020000 	.word	0x40020000
 8003b68:	2000261c 	.word	0x2000261c
 8003b6c:	40026410 	.word	0x40026410
 8003b70:	40012100 	.word	0x40012100
 8003b74:	2000267c 	.word	0x2000267c
 8003b78:	40026440 	.word	0x40026440

08003b7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b08c      	sub	sp, #48	@ 0x30
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b84:	f107 031c 	add.w	r3, r7, #28
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	605a      	str	r2, [r3, #4]
 8003b8e:	609a      	str	r2, [r3, #8]
 8003b90:	60da      	str	r2, [r3, #12]
 8003b92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a7a      	ldr	r2, [pc, #488]	@ (8003d84 <HAL_I2C_MspInit+0x208>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	f040 8094 	bne.w	8003cc8 <HAL_I2C_MspInit+0x14c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61bb      	str	r3, [r7, #24]
 8003ba4:	4b78      	ldr	r3, [pc, #480]	@ (8003d88 <HAL_I2C_MspInit+0x20c>)
 8003ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba8:	4a77      	ldr	r2, [pc, #476]	@ (8003d88 <HAL_I2C_MspInit+0x20c>)
 8003baa:	f043 0302 	orr.w	r3, r3, #2
 8003bae:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bb0:	4b75      	ldr	r3, [pc, #468]	@ (8003d88 <HAL_I2C_MspInit+0x20c>)
 8003bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	61bb      	str	r3, [r7, #24]
 8003bba:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003bbc:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003bc2:	2312      	movs	r3, #18
 8003bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003bce:	2304      	movs	r3, #4
 8003bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bd2:	f107 031c 	add.w	r3, r7, #28
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	486c      	ldr	r0, [pc, #432]	@ (8003d8c <HAL_I2C_MspInit+0x210>)
 8003bda:	f001 ff4d 	bl	8005a78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003bde:	2300      	movs	r3, #0
 8003be0:	617b      	str	r3, [r7, #20]
 8003be2:	4b69      	ldr	r3, [pc, #420]	@ (8003d88 <HAL_I2C_MspInit+0x20c>)
 8003be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be6:	4a68      	ldr	r2, [pc, #416]	@ (8003d88 <HAL_I2C_MspInit+0x20c>)
 8003be8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003bec:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bee:	4b66      	ldr	r3, [pc, #408]	@ (8003d88 <HAL_I2C_MspInit+0x20c>)
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8003bfa:	4b65      	ldr	r3, [pc, #404]	@ (8003d90 <HAL_I2C_MspInit+0x214>)
 8003bfc:	4a65      	ldr	r2, [pc, #404]	@ (8003d94 <HAL_I2C_MspInit+0x218>)
 8003bfe:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8003c00:	4b63      	ldr	r3, [pc, #396]	@ (8003d90 <HAL_I2C_MspInit+0x214>)
 8003c02:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c06:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c08:	4b61      	ldr	r3, [pc, #388]	@ (8003d90 <HAL_I2C_MspInit+0x214>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c0e:	4b60      	ldr	r3, [pc, #384]	@ (8003d90 <HAL_I2C_MspInit+0x214>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c14:	4b5e      	ldr	r3, [pc, #376]	@ (8003d90 <HAL_I2C_MspInit+0x214>)
 8003c16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c1a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c1c:	4b5c      	ldr	r3, [pc, #368]	@ (8003d90 <HAL_I2C_MspInit+0x214>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c22:	4b5b      	ldr	r3, [pc, #364]	@ (8003d90 <HAL_I2C_MspInit+0x214>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003c28:	4b59      	ldr	r3, [pc, #356]	@ (8003d90 <HAL_I2C_MspInit+0x214>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003c2e:	4b58      	ldr	r3, [pc, #352]	@ (8003d90 <HAL_I2C_MspInit+0x214>)
 8003c30:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003c34:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c36:	4b56      	ldr	r3, [pc, #344]	@ (8003d90 <HAL_I2C_MspInit+0x214>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003c3c:	4854      	ldr	r0, [pc, #336]	@ (8003d90 <HAL_I2C_MspInit+0x214>)
 8003c3e:	f001 faff 	bl	8005240 <HAL_DMA_Init>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 8003c48:	f7ff fd52 	bl	80036f0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a50      	ldr	r2, [pc, #320]	@ (8003d90 <HAL_I2C_MspInit+0x214>)
 8003c50:	639a      	str	r2, [r3, #56]	@ 0x38
 8003c52:	4a4f      	ldr	r2, [pc, #316]	@ (8003d90 <HAL_I2C_MspInit+0x214>)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8003c58:	4b4f      	ldr	r3, [pc, #316]	@ (8003d98 <HAL_I2C_MspInit+0x21c>)
 8003c5a:	4a50      	ldr	r2, [pc, #320]	@ (8003d9c <HAL_I2C_MspInit+0x220>)
 8003c5c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8003c5e:	4b4e      	ldr	r3, [pc, #312]	@ (8003d98 <HAL_I2C_MspInit+0x21c>)
 8003c60:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c64:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c66:	4b4c      	ldr	r3, [pc, #304]	@ (8003d98 <HAL_I2C_MspInit+0x21c>)
 8003c68:	2240      	movs	r2, #64	@ 0x40
 8003c6a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c6c:	4b4a      	ldr	r3, [pc, #296]	@ (8003d98 <HAL_I2C_MspInit+0x21c>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c72:	4b49      	ldr	r3, [pc, #292]	@ (8003d98 <HAL_I2C_MspInit+0x21c>)
 8003c74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c78:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c7a:	4b47      	ldr	r3, [pc, #284]	@ (8003d98 <HAL_I2C_MspInit+0x21c>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c80:	4b45      	ldr	r3, [pc, #276]	@ (8003d98 <HAL_I2C_MspInit+0x21c>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003c86:	4b44      	ldr	r3, [pc, #272]	@ (8003d98 <HAL_I2C_MspInit+0x21c>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003c8c:	4b42      	ldr	r3, [pc, #264]	@ (8003d98 <HAL_I2C_MspInit+0x21c>)
 8003c8e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003c92:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c94:	4b40      	ldr	r3, [pc, #256]	@ (8003d98 <HAL_I2C_MspInit+0x21c>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003c9a:	483f      	ldr	r0, [pc, #252]	@ (8003d98 <HAL_I2C_MspInit+0x21c>)
 8003c9c:	f001 fad0 	bl	8005240 <HAL_DMA_Init>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <HAL_I2C_MspInit+0x12e>
    {
      Error_Handler();
 8003ca6:	f7ff fd23 	bl	80036f0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a3a      	ldr	r2, [pc, #232]	@ (8003d98 <HAL_I2C_MspInit+0x21c>)
 8003cae:	635a      	str	r2, [r3, #52]	@ 0x34
 8003cb0:	4a39      	ldr	r2, [pc, #228]	@ (8003d98 <HAL_I2C_MspInit+0x21c>)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	2105      	movs	r1, #5
 8003cba:	201f      	movs	r0, #31
 8003cbc:	f001 fa96 	bl	80051ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003cc0:	201f      	movs	r0, #31
 8003cc2:	f001 faaf 	bl	8005224 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003cc6:	e058      	b.n	8003d7a <HAL_I2C_MspInit+0x1fe>
  else if(hi2c->Instance==I2C2)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a34      	ldr	r2, [pc, #208]	@ (8003da0 <HAL_I2C_MspInit+0x224>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d153      	bne.n	8003d7a <HAL_I2C_MspInit+0x1fe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	613b      	str	r3, [r7, #16]
 8003cd6:	4b2c      	ldr	r3, [pc, #176]	@ (8003d88 <HAL_I2C_MspInit+0x20c>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cda:	4a2b      	ldr	r2, [pc, #172]	@ (8003d88 <HAL_I2C_MspInit+0x20c>)
 8003cdc:	f043 0302 	orr.w	r3, r3, #2
 8003ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ce2:	4b29      	ldr	r3, [pc, #164]	@ (8003d88 <HAL_I2C_MspInit+0x20c>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	613b      	str	r3, [r7, #16]
 8003cec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	4b25      	ldr	r3, [pc, #148]	@ (8003d88 <HAL_I2C_MspInit+0x20c>)
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf6:	4a24      	ldr	r2, [pc, #144]	@ (8003d88 <HAL_I2C_MspInit+0x20c>)
 8003cf8:	f043 0304 	orr.w	r3, r3, #4
 8003cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cfe:	4b22      	ldr	r3, [pc, #136]	@ (8003d88 <HAL_I2C_MspInit+0x20c>)
 8003d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d02:	f003 0304 	and.w	r3, r3, #4
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003d0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d10:	2312      	movs	r3, #18
 8003d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d14:	2300      	movs	r3, #0
 8003d16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003d1c:	2304      	movs	r3, #4
 8003d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d20:	f107 031c 	add.w	r3, r7, #28
 8003d24:	4619      	mov	r1, r3
 8003d26:	4819      	ldr	r0, [pc, #100]	@ (8003d8c <HAL_I2C_MspInit+0x210>)
 8003d28:	f001 fea6 	bl	8005a78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003d2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d32:	2312      	movs	r3, #18
 8003d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d36:	2300      	movs	r3, #0
 8003d38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003d3e:	2304      	movs	r3, #4
 8003d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d42:	f107 031c 	add.w	r3, r7, #28
 8003d46:	4619      	mov	r1, r3
 8003d48:	4816      	ldr	r0, [pc, #88]	@ (8003da4 <HAL_I2C_MspInit+0x228>)
 8003d4a:	f001 fe95 	bl	8005a78 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003d4e:	2300      	movs	r3, #0
 8003d50:	60bb      	str	r3, [r7, #8]
 8003d52:	4b0d      	ldr	r3, [pc, #52]	@ (8003d88 <HAL_I2C_MspInit+0x20c>)
 8003d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d56:	4a0c      	ldr	r2, [pc, #48]	@ (8003d88 <HAL_I2C_MspInit+0x20c>)
 8003d58:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003d5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8003d88 <HAL_I2C_MspInit+0x20c>)
 8003d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d66:	60bb      	str	r3, [r7, #8]
 8003d68:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	2105      	movs	r1, #5
 8003d6e:	2021      	movs	r0, #33	@ 0x21
 8003d70:	f001 fa3c 	bl	80051ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003d74:	2021      	movs	r0, #33	@ 0x21
 8003d76:	f001 fa55 	bl	8005224 <HAL_NVIC_EnableIRQ>
}
 8003d7a:	bf00      	nop
 8003d7c:	3730      	adds	r7, #48	@ 0x30
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	40005400 	.word	0x40005400
 8003d88:	40023800 	.word	0x40023800
 8003d8c:	40020400 	.word	0x40020400
 8003d90:	20002784 	.word	0x20002784
 8003d94:	40026010 	.word	0x40026010
 8003d98:	200027e4 	.word	0x200027e4
 8003d9c:	400260b8 	.word	0x400260b8
 8003da0:	40005800 	.word	0x40005800
 8003da4:	40020800 	.word	0x40020800

08003da8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08a      	sub	sp, #40	@ 0x28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003db0:	f107 0314 	add.w	r3, r7, #20
 8003db4:	2200      	movs	r2, #0
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	605a      	str	r2, [r3, #4]
 8003dba:	609a      	str	r2, [r3, #8]
 8003dbc:	60da      	str	r2, [r3, #12]
 8003dbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a19      	ldr	r2, [pc, #100]	@ (8003e2c <HAL_SPI_MspInit+0x84>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d12c      	bne.n	8003e24 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003dca:	2300      	movs	r3, #0
 8003dcc:	613b      	str	r3, [r7, #16]
 8003dce:	4b18      	ldr	r3, [pc, #96]	@ (8003e30 <HAL_SPI_MspInit+0x88>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd2:	4a17      	ldr	r2, [pc, #92]	@ (8003e30 <HAL_SPI_MspInit+0x88>)
 8003dd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003dd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dda:	4b15      	ldr	r3, [pc, #84]	@ (8003e30 <HAL_SPI_MspInit+0x88>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003de2:	613b      	str	r3, [r7, #16]
 8003de4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003de6:	2300      	movs	r3, #0
 8003de8:	60fb      	str	r3, [r7, #12]
 8003dea:	4b11      	ldr	r3, [pc, #68]	@ (8003e30 <HAL_SPI_MspInit+0x88>)
 8003dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dee:	4a10      	ldr	r2, [pc, #64]	@ (8003e30 <HAL_SPI_MspInit+0x88>)
 8003df0:	f043 0302 	orr.w	r3, r3, #2
 8003df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003df6:	4b0e      	ldr	r3, [pc, #56]	@ (8003e30 <HAL_SPI_MspInit+0x88>)
 8003df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003e02:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e08:	2302      	movs	r3, #2
 8003e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e10:	2303      	movs	r3, #3
 8003e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e14:	2305      	movs	r3, #5
 8003e16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e18:	f107 0314 	add.w	r3, r7, #20
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4805      	ldr	r0, [pc, #20]	@ (8003e34 <HAL_SPI_MspInit+0x8c>)
 8003e20:	f001 fe2a 	bl	8005a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003e24:	bf00      	nop
 8003e26:	3728      	adds	r7, #40	@ 0x28
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	40003800 	.word	0x40003800
 8003e30:	40023800 	.word	0x40023800
 8003e34:	40020400 	.word	0x40020400

08003e38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e48:	d10e      	bne.n	8003e68 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	4b13      	ldr	r3, [pc, #76]	@ (8003e9c <HAL_TIM_Base_MspInit+0x64>)
 8003e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e52:	4a12      	ldr	r2, [pc, #72]	@ (8003e9c <HAL_TIM_Base_MspInit+0x64>)
 8003e54:	f043 0301 	orr.w	r3, r3, #1
 8003e58:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e5a:	4b10      	ldr	r3, [pc, #64]	@ (8003e9c <HAL_TIM_Base_MspInit+0x64>)
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003e66:	e012      	b.n	8003e8e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM8)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a0c      	ldr	r2, [pc, #48]	@ (8003ea0 <HAL_TIM_Base_MspInit+0x68>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d10d      	bne.n	8003e8e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003e72:	2300      	movs	r3, #0
 8003e74:	60bb      	str	r3, [r7, #8]
 8003e76:	4b09      	ldr	r3, [pc, #36]	@ (8003e9c <HAL_TIM_Base_MspInit+0x64>)
 8003e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e7a:	4a08      	ldr	r2, [pc, #32]	@ (8003e9c <HAL_TIM_Base_MspInit+0x64>)
 8003e7c:	f043 0302 	orr.w	r3, r3, #2
 8003e80:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e82:	4b06      	ldr	r3, [pc, #24]	@ (8003e9c <HAL_TIM_Base_MspInit+0x64>)
 8003e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	60bb      	str	r3, [r7, #8]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
}
 8003e8e:	bf00      	nop
 8003e90:	3714      	adds	r7, #20
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	40010400 	.word	0x40010400

08003ea4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a0e      	ldr	r2, [pc, #56]	@ (8003eec <HAL_TIM_PWM_MspInit+0x48>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d115      	bne.n	8003ee2 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	60fb      	str	r3, [r7, #12]
 8003eba:	4b0d      	ldr	r3, [pc, #52]	@ (8003ef0 <HAL_TIM_PWM_MspInit+0x4c>)
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ebe:	4a0c      	ldr	r2, [pc, #48]	@ (8003ef0 <HAL_TIM_PWM_MspInit+0x4c>)
 8003ec0:	f043 0302 	orr.w	r3, r3, #2
 8003ec4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8003ef0 <HAL_TIM_PWM_MspInit+0x4c>)
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	2105      	movs	r1, #5
 8003ed6:	201d      	movs	r0, #29
 8003ed8:	f001 f988 	bl	80051ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003edc:	201d      	movs	r0, #29
 8003ede:	f001 f9a1 	bl	8005224 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003ee2:	bf00      	nop
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	40000400 	.word	0x40000400
 8003ef0:	40023800 	.word	0x40023800

08003ef4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003efc:	f107 030c 	add.w	r3, r7, #12
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	605a      	str	r2, [r3, #4]
 8003f06:	609a      	str	r2, [r3, #8]
 8003f08:	60da      	str	r2, [r3, #12]
 8003f0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a12      	ldr	r2, [pc, #72]	@ (8003f5c <HAL_TIM_MspPostInit+0x68>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d11e      	bne.n	8003f54 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f16:	2300      	movs	r3, #0
 8003f18:	60bb      	str	r3, [r7, #8]
 8003f1a:	4b11      	ldr	r3, [pc, #68]	@ (8003f60 <HAL_TIM_MspPostInit+0x6c>)
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f1e:	4a10      	ldr	r2, [pc, #64]	@ (8003f60 <HAL_TIM_MspPostInit+0x6c>)
 8003f20:	f043 0304 	orr.w	r3, r3, #4
 8003f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f26:	4b0e      	ldr	r3, [pc, #56]	@ (8003f60 <HAL_TIM_MspPostInit+0x6c>)
 8003f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2a:	f003 0304 	and.w	r3, r3, #4
 8003f2e:	60bb      	str	r3, [r7, #8]
 8003f30:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003f32:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8003f36:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f38:	2302      	movs	r3, #2
 8003f3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f40:	2300      	movs	r3, #0
 8003f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003f44:	2302      	movs	r3, #2
 8003f46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f48:	f107 030c 	add.w	r3, r7, #12
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	4805      	ldr	r0, [pc, #20]	@ (8003f64 <HAL_TIM_MspPostInit+0x70>)
 8003f50:	f001 fd92 	bl	8005a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003f54:	bf00      	nop
 8003f56:	3720      	adds	r7, #32
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40000400 	.word	0x40000400
 8003f60:	40023800 	.word	0x40023800
 8003f64:	40020800 	.word	0x40020800

08003f68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b08c      	sub	sp, #48	@ 0x30
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f70:	f107 031c 	add.w	r3, r7, #28
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	605a      	str	r2, [r3, #4]
 8003f7a:	609a      	str	r2, [r3, #8]
 8003f7c:	60da      	str	r2, [r3, #12]
 8003f7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a67      	ldr	r2, [pc, #412]	@ (8004124 <HAL_UART_MspInit+0x1bc>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d12c      	bne.n	8003fe4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	61bb      	str	r3, [r7, #24]
 8003f8e:	4b66      	ldr	r3, [pc, #408]	@ (8004128 <HAL_UART_MspInit+0x1c0>)
 8003f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f92:	4a65      	ldr	r2, [pc, #404]	@ (8004128 <HAL_UART_MspInit+0x1c0>)
 8003f94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f98:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f9a:	4b63      	ldr	r3, [pc, #396]	@ (8004128 <HAL_UART_MspInit+0x1c0>)
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fa2:	61bb      	str	r3, [r7, #24]
 8003fa4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	617b      	str	r3, [r7, #20]
 8003faa:	4b5f      	ldr	r3, [pc, #380]	@ (8004128 <HAL_UART_MspInit+0x1c0>)
 8003fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fae:	4a5e      	ldr	r2, [pc, #376]	@ (8004128 <HAL_UART_MspInit+0x1c0>)
 8003fb0:	f043 0301 	orr.w	r3, r3, #1
 8003fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fb6:	4b5c      	ldr	r3, [pc, #368]	@ (8004128 <HAL_UART_MspInit+0x1c0>)
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003fc2:	230c      	movs	r3, #12
 8003fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003fd2:	2307      	movs	r3, #7
 8003fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fd6:	f107 031c 	add.w	r3, r7, #28
 8003fda:	4619      	mov	r1, r3
 8003fdc:	4853      	ldr	r0, [pc, #332]	@ (800412c <HAL_UART_MspInit+0x1c4>)
 8003fde:	f001 fd4b 	bl	8005a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003fe2:	e09a      	b.n	800411a <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a51      	ldr	r2, [pc, #324]	@ (8004130 <HAL_UART_MspInit+0x1c8>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	f040 8095 	bne.w	800411a <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	613b      	str	r3, [r7, #16]
 8003ff4:	4b4c      	ldr	r3, [pc, #304]	@ (8004128 <HAL_UART_MspInit+0x1c0>)
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff8:	4a4b      	ldr	r2, [pc, #300]	@ (8004128 <HAL_UART_MspInit+0x1c0>)
 8003ffa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ffe:	6413      	str	r3, [r2, #64]	@ 0x40
 8004000:	4b49      	ldr	r3, [pc, #292]	@ (8004128 <HAL_UART_MspInit+0x1c0>)
 8004002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004004:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004008:	613b      	str	r3, [r7, #16]
 800400a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800400c:	2300      	movs	r3, #0
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	4b45      	ldr	r3, [pc, #276]	@ (8004128 <HAL_UART_MspInit+0x1c0>)
 8004012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004014:	4a44      	ldr	r2, [pc, #272]	@ (8004128 <HAL_UART_MspInit+0x1c0>)
 8004016:	f043 0304 	orr.w	r3, r3, #4
 800401a:	6313      	str	r3, [r2, #48]	@ 0x30
 800401c:	4b42      	ldr	r3, [pc, #264]	@ (8004128 <HAL_UART_MspInit+0x1c0>)
 800401e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004028:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800402c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800402e:	2302      	movs	r3, #2
 8004030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004032:	2300      	movs	r3, #0
 8004034:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004036:	2303      	movs	r3, #3
 8004038:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800403a:	2307      	movs	r3, #7
 800403c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800403e:	f107 031c 	add.w	r3, r7, #28
 8004042:	4619      	mov	r1, r3
 8004044:	483b      	ldr	r0, [pc, #236]	@ (8004134 <HAL_UART_MspInit+0x1cc>)
 8004046:	f001 fd17 	bl	8005a78 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800404a:	4b3b      	ldr	r3, [pc, #236]	@ (8004138 <HAL_UART_MspInit+0x1d0>)
 800404c:	4a3b      	ldr	r2, [pc, #236]	@ (800413c <HAL_UART_MspInit+0x1d4>)
 800404e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004050:	4b39      	ldr	r3, [pc, #228]	@ (8004138 <HAL_UART_MspInit+0x1d0>)
 8004052:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004056:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004058:	4b37      	ldr	r3, [pc, #220]	@ (8004138 <HAL_UART_MspInit+0x1d0>)
 800405a:	2200      	movs	r2, #0
 800405c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800405e:	4b36      	ldr	r3, [pc, #216]	@ (8004138 <HAL_UART_MspInit+0x1d0>)
 8004060:	2200      	movs	r2, #0
 8004062:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004064:	4b34      	ldr	r3, [pc, #208]	@ (8004138 <HAL_UART_MspInit+0x1d0>)
 8004066:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800406a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800406c:	4b32      	ldr	r3, [pc, #200]	@ (8004138 <HAL_UART_MspInit+0x1d0>)
 800406e:	2200      	movs	r2, #0
 8004070:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004072:	4b31      	ldr	r3, [pc, #196]	@ (8004138 <HAL_UART_MspInit+0x1d0>)
 8004074:	2200      	movs	r2, #0
 8004076:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004078:	4b2f      	ldr	r3, [pc, #188]	@ (8004138 <HAL_UART_MspInit+0x1d0>)
 800407a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800407e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004080:	4b2d      	ldr	r3, [pc, #180]	@ (8004138 <HAL_UART_MspInit+0x1d0>)
 8004082:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004086:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004088:	4b2b      	ldr	r3, [pc, #172]	@ (8004138 <HAL_UART_MspInit+0x1d0>)
 800408a:	2200      	movs	r2, #0
 800408c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800408e:	482a      	ldr	r0, [pc, #168]	@ (8004138 <HAL_UART_MspInit+0x1d0>)
 8004090:	f001 f8d6 	bl	8005240 <HAL_DMA_Init>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <HAL_UART_MspInit+0x136>
      Error_Handler();
 800409a:	f7ff fb29 	bl	80036f0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a25      	ldr	r2, [pc, #148]	@ (8004138 <HAL_UART_MspInit+0x1d0>)
 80040a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80040a4:	4a24      	ldr	r2, [pc, #144]	@ (8004138 <HAL_UART_MspInit+0x1d0>)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80040aa:	4b25      	ldr	r3, [pc, #148]	@ (8004140 <HAL_UART_MspInit+0x1d8>)
 80040ac:	4a25      	ldr	r2, [pc, #148]	@ (8004144 <HAL_UART_MspInit+0x1dc>)
 80040ae:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80040b0:	4b23      	ldr	r3, [pc, #140]	@ (8004140 <HAL_UART_MspInit+0x1d8>)
 80040b2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80040b6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80040b8:	4b21      	ldr	r3, [pc, #132]	@ (8004140 <HAL_UART_MspInit+0x1d8>)
 80040ba:	2240      	movs	r2, #64	@ 0x40
 80040bc:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040be:	4b20      	ldr	r3, [pc, #128]	@ (8004140 <HAL_UART_MspInit+0x1d8>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80040c4:	4b1e      	ldr	r3, [pc, #120]	@ (8004140 <HAL_UART_MspInit+0x1d8>)
 80040c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80040ca:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040cc:	4b1c      	ldr	r3, [pc, #112]	@ (8004140 <HAL_UART_MspInit+0x1d8>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004140 <HAL_UART_MspInit+0x1d8>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
 80040d8:	4b19      	ldr	r3, [pc, #100]	@ (8004140 <HAL_UART_MspInit+0x1d8>)
 80040da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80040de:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80040e0:	4b17      	ldr	r3, [pc, #92]	@ (8004140 <HAL_UART_MspInit+0x1d8>)
 80040e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80040e6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80040e8:	4b15      	ldr	r3, [pc, #84]	@ (8004140 <HAL_UART_MspInit+0x1d8>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80040ee:	4814      	ldr	r0, [pc, #80]	@ (8004140 <HAL_UART_MspInit+0x1d8>)
 80040f0:	f001 f8a6 	bl	8005240 <HAL_DMA_Init>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <HAL_UART_MspInit+0x196>
      Error_Handler();
 80040fa:	f7ff faf9 	bl	80036f0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a0f      	ldr	r2, [pc, #60]	@ (8004140 <HAL_UART_MspInit+0x1d8>)
 8004102:	635a      	str	r2, [r3, #52]	@ 0x34
 8004104:	4a0e      	ldr	r2, [pc, #56]	@ (8004140 <HAL_UART_MspInit+0x1d8>)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800410a:	2200      	movs	r2, #0
 800410c:	2105      	movs	r1, #5
 800410e:	2027      	movs	r0, #39	@ 0x27
 8004110:	f001 f86c 	bl	80051ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004114:	2027      	movs	r0, #39	@ 0x27
 8004116:	f001 f885 	bl	8005224 <HAL_NVIC_EnableIRQ>
}
 800411a:	bf00      	nop
 800411c:	3730      	adds	r7, #48	@ 0x30
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	40004400 	.word	0x40004400
 8004128:	40023800 	.word	0x40023800
 800412c:	40020000 	.word	0x40020000
 8004130:	40004800 	.word	0x40004800
 8004134:	40020800 	.word	0x40020800
 8004138:	200029a4 	.word	0x200029a4
 800413c:	40026028 	.word	0x40026028
 8004140:	20002a04 	.word	0x20002a04
 8004144:	40026058 	.word	0x40026058

08004148 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b08c      	sub	sp, #48	@ 0x30
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8004154:	2300      	movs	r3, #0
 8004156:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004158:	2300      	movs	r3, #0
 800415a:	60bb      	str	r3, [r7, #8]
 800415c:	4b2f      	ldr	r3, [pc, #188]	@ (800421c <HAL_InitTick+0xd4>)
 800415e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004160:	4a2e      	ldr	r2, [pc, #184]	@ (800421c <HAL_InitTick+0xd4>)
 8004162:	f043 0301 	orr.w	r3, r3, #1
 8004166:	6453      	str	r3, [r2, #68]	@ 0x44
 8004168:	4b2c      	ldr	r3, [pc, #176]	@ (800421c <HAL_InitTick+0xd4>)
 800416a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	60bb      	str	r3, [r7, #8]
 8004172:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004174:	f107 020c 	add.w	r2, r7, #12
 8004178:	f107 0310 	add.w	r3, r7, #16
 800417c:	4611      	mov	r1, r2
 800417e:	4618      	mov	r0, r3
 8004180:	f005 fafc 	bl	800977c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8004184:	f005 fae6 	bl	8009754 <HAL_RCC_GetPCLK2Freq>
 8004188:	4603      	mov	r3, r0
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800418e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004190:	4a23      	ldr	r2, [pc, #140]	@ (8004220 <HAL_InitTick+0xd8>)
 8004192:	fba2 2303 	umull	r2, r3, r2, r3
 8004196:	0c9b      	lsrs	r3, r3, #18
 8004198:	3b01      	subs	r3, #1
 800419a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800419c:	4b21      	ldr	r3, [pc, #132]	@ (8004224 <HAL_InitTick+0xdc>)
 800419e:	4a22      	ldr	r2, [pc, #136]	@ (8004228 <HAL_InitTick+0xe0>)
 80041a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80041a2:	4b20      	ldr	r3, [pc, #128]	@ (8004224 <HAL_InitTick+0xdc>)
 80041a4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80041a8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80041aa:	4a1e      	ldr	r2, [pc, #120]	@ (8004224 <HAL_InitTick+0xdc>)
 80041ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ae:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80041b0:	4b1c      	ldr	r3, [pc, #112]	@ (8004224 <HAL_InitTick+0xdc>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004224 <HAL_InitTick+0xdc>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041bc:	4b19      	ldr	r3, [pc, #100]	@ (8004224 <HAL_InitTick+0xdc>)
 80041be:	2200      	movs	r2, #0
 80041c0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80041c2:	4818      	ldr	r0, [pc, #96]	@ (8004224 <HAL_InitTick+0xdc>)
 80041c4:	f006 fc0a 	bl	800a9dc <HAL_TIM_Base_Init>
 80041c8:	4603      	mov	r3, r0
 80041ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80041ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d11b      	bne.n	800420e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80041d6:	4813      	ldr	r0, [pc, #76]	@ (8004224 <HAL_InitTick+0xdc>)
 80041d8:	f006 fcb8 	bl	800ab4c <HAL_TIM_Base_Start_IT>
 80041dc:	4603      	mov	r3, r0
 80041de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80041e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d111      	bne.n	800420e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80041ea:	2019      	movs	r0, #25
 80041ec:	f001 f81a 	bl	8005224 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b0f      	cmp	r3, #15
 80041f4:	d808      	bhi.n	8004208 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80041f6:	2200      	movs	r2, #0
 80041f8:	6879      	ldr	r1, [r7, #4]
 80041fa:	2019      	movs	r0, #25
 80041fc:	f000 fff6 	bl	80051ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004200:	4a0a      	ldr	r2, [pc, #40]	@ (800422c <HAL_InitTick+0xe4>)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6013      	str	r3, [r2, #0]
 8004206:	e002      	b.n	800420e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800420e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8004212:	4618      	mov	r0, r3
 8004214:	3730      	adds	r7, #48	@ 0x30
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	40023800 	.word	0x40023800
 8004220:	431bde83 	.word	0x431bde83
 8004224:	20002b48 	.word	0x20002b48
 8004228:	40010000 	.word	0x40010000
 800422c:	20000008 	.word	0x20000008

08004230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004234:	bf00      	nop
 8004236:	e7fd      	b.n	8004234 <NMI_Handler+0x4>

08004238 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800423c:	bf00      	nop
 800423e:	e7fd      	b.n	800423c <HardFault_Handler+0x4>

08004240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004244:	bf00      	nop
 8004246:	e7fd      	b.n	8004244 <MemManage_Handler+0x4>

08004248 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800424c:	bf00      	nop
 800424e:	e7fd      	b.n	800424c <BusFault_Handler+0x4>

08004250 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004254:	bf00      	nop
 8004256:	e7fd      	b.n	8004254 <UsageFault_Handler+0x4>

08004258 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800425c:	bf00      	nop
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_MPU6050_Pin);
 800426a:	2002      	movs	r0, #2
 800426c:	f001 fdb2 	bl	8005dd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004270:	bf00      	nop
 8004272:	bd80      	pop	{r7, pc}

08004274 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004278:	4802      	ldr	r0, [pc, #8]	@ (8004284 <DMA1_Stream0_IRQHandler+0x10>)
 800427a:	f001 f979 	bl	8005570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800427e:	bf00      	nop
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	20002784 	.word	0x20002784

08004288 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800428c:	4802      	ldr	r0, [pc, #8]	@ (8004298 <DMA1_Stream1_IRQHandler+0x10>)
 800428e:	f001 f96f 	bl	8005570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004292:	bf00      	nop
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	200029a4 	.word	0x200029a4

0800429c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80042a0:	4802      	ldr	r0, [pc, #8]	@ (80042ac <DMA1_Stream3_IRQHandler+0x10>)
 80042a2:	f001 f965 	bl	8005570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80042a6:	bf00      	nop
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	20002a04 	.word	0x20002a04

080042b0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80042b4:	4803      	ldr	r0, [pc, #12]	@ (80042c4 <ADC_IRQHandler+0x14>)
 80042b6:	f000 f9e8 	bl	800468a <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80042ba:	4803      	ldr	r0, [pc, #12]	@ (80042c8 <ADC_IRQHandler+0x18>)
 80042bc:	f000 f9e5 	bl	800468a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80042c0:	bf00      	nop
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	2000258c 	.word	0x2000258c
 80042c8:	200025d4 	.word	0x200025d4

080042cc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80042d0:	4802      	ldr	r0, [pc, #8]	@ (80042dc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80042d2:	f006 fdc3 	bl	800ae5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80042d6:	bf00      	nop
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	20002b48 	.word	0x20002b48

080042e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80042e4:	4802      	ldr	r0, [pc, #8]	@ (80042f0 <TIM3_IRQHandler+0x10>)
 80042e6:	f006 fdb9 	bl	800ae5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80042ea:	bf00      	nop
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	2000288c 	.word	0x2000288c

080042f4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80042f8:	4802      	ldr	r0, [pc, #8]	@ (8004304 <I2C1_EV_IRQHandler+0x10>)
 80042fa:	f002 ffcd 	bl	8007298 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80042fe:	bf00      	nop
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	200026dc 	.word	0x200026dc

08004308 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800430c:	4802      	ldr	r0, [pc, #8]	@ (8004318 <I2C2_EV_IRQHandler+0x10>)
 800430e:	f002 ffc3 	bl	8007298 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8004312:	bf00      	nop
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	20002730 	.word	0x20002730

0800431c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004320:	4802      	ldr	r0, [pc, #8]	@ (800432c <USART3_IRQHandler+0x10>)
 8004322:	f007 fcc5 	bl	800bcb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004326:	bf00      	nop
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	20002960 	.word	0x20002960

08004330 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004334:	4802      	ldr	r0, [pc, #8]	@ (8004340 <DMA1_Stream7_IRQHandler+0x10>)
 8004336:	f001 f91b 	bl	8005570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800433a:	bf00      	nop
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	200027e4 	.word	0x200027e4

08004344 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004348:	4802      	ldr	r0, [pc, #8]	@ (8004354 <DMA2_Stream0_IRQHandler+0x10>)
 800434a:	f001 f911 	bl	8005570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800434e:	bf00      	nop
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	2000261c 	.word	0x2000261c

08004358 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800435c:	4802      	ldr	r0, [pc, #8]	@ (8004368 <DMA2_Stream2_IRQHandler+0x10>)
 800435e:	f001 f907 	bl	8005570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004362:	bf00      	nop
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	2000267c 	.word	0x2000267c

0800436c <_getpid>:
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
 8004370:	2301      	movs	r3, #1
 8004372:	4618      	mov	r0, r3
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <_kill>:
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
 8004386:	f00f fabf 	bl	8013908 <__errno>
 800438a:	4603      	mov	r3, r0
 800438c:	2216      	movs	r2, #22
 800438e:	601a      	str	r2, [r3, #0]
 8004390:	f04f 33ff 	mov.w	r3, #4294967295
 8004394:	4618      	mov	r0, r3
 8004396:	3708      	adds	r7, #8
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <_exit>:
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	f04f 31ff 	mov.w	r1, #4294967295
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f7ff ffe7 	bl	800437c <_kill>
 80043ae:	bf00      	nop
 80043b0:	e7fd      	b.n	80043ae <_exit+0x12>

080043b2 <_read>:
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b086      	sub	sp, #24
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	60f8      	str	r0, [r7, #12]
 80043ba:	60b9      	str	r1, [r7, #8]
 80043bc:	607a      	str	r2, [r7, #4]
 80043be:	2300      	movs	r3, #0
 80043c0:	617b      	str	r3, [r7, #20]
 80043c2:	e00a      	b.n	80043da <_read+0x28>
 80043c4:	f3af 8000 	nop.w
 80043c8:	4601      	mov	r1, r0
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	1c5a      	adds	r2, r3, #1
 80043ce:	60ba      	str	r2, [r7, #8]
 80043d0:	b2ca      	uxtb	r2, r1
 80043d2:	701a      	strb	r2, [r3, #0]
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	3301      	adds	r3, #1
 80043d8:	617b      	str	r3, [r7, #20]
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	429a      	cmp	r2, r3
 80043e0:	dbf0      	blt.n	80043c4 <_read+0x12>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4618      	mov	r0, r3
 80043e6:	3718      	adds	r7, #24
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <_close>:
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	f04f 33ff 	mov.w	r3, #4294967295
 80043f8:	4618      	mov	r0, r3
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <_fstat>:
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004414:	605a      	str	r2, [r3, #4]
 8004416:	2300      	movs	r3, #0
 8004418:	4618      	mov	r0, r3
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <_isatty>:
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	2301      	movs	r3, #1
 800442e:	4618      	mov	r0, r3
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <_lseek>:
 800443a:	b480      	push	{r7}
 800443c:	b085      	sub	sp, #20
 800443e:	af00      	add	r7, sp, #0
 8004440:	60f8      	str	r0, [r7, #12]
 8004442:	60b9      	str	r1, [r7, #8]
 8004444:	607a      	str	r2, [r7, #4]
 8004446:	2300      	movs	r3, #0
 8004448:	4618      	mov	r0, r3
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <_sbrk>:
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	4a14      	ldr	r2, [pc, #80]	@ (80044b0 <_sbrk+0x5c>)
 800445e:	4b15      	ldr	r3, [pc, #84]	@ (80044b4 <_sbrk+0x60>)
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	617b      	str	r3, [r7, #20]
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	613b      	str	r3, [r7, #16]
 8004468:	4b13      	ldr	r3, [pc, #76]	@ (80044b8 <_sbrk+0x64>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d102      	bne.n	8004476 <_sbrk+0x22>
 8004470:	4b11      	ldr	r3, [pc, #68]	@ (80044b8 <_sbrk+0x64>)
 8004472:	4a12      	ldr	r2, [pc, #72]	@ (80044bc <_sbrk+0x68>)
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	4b10      	ldr	r3, [pc, #64]	@ (80044b8 <_sbrk+0x64>)
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4413      	add	r3, r2
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	429a      	cmp	r2, r3
 8004482:	d207      	bcs.n	8004494 <_sbrk+0x40>
 8004484:	f00f fa40 	bl	8013908 <__errno>
 8004488:	4603      	mov	r3, r0
 800448a:	220c      	movs	r2, #12
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	f04f 33ff 	mov.w	r3, #4294967295
 8004492:	e009      	b.n	80044a8 <_sbrk+0x54>
 8004494:	4b08      	ldr	r3, [pc, #32]	@ (80044b8 <_sbrk+0x64>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	60fb      	str	r3, [r7, #12]
 800449a:	4b07      	ldr	r3, [pc, #28]	@ (80044b8 <_sbrk+0x64>)
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4413      	add	r3, r2
 80044a2:	4a05      	ldr	r2, [pc, #20]	@ (80044b8 <_sbrk+0x64>)
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	4618      	mov	r0, r3
 80044aa:	3718      	adds	r7, #24
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	20020000 	.word	0x20020000
 80044b4:	00000400 	.word	0x00000400
 80044b8:	20002b90 	.word	0x20002b90
 80044bc:	20006ab8 	.word	0x20006ab8

080044c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80044c4:	4b06      	ldr	r3, [pc, #24]	@ (80044e0 <SystemInit+0x20>)
 80044c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ca:	4a05      	ldr	r2, [pc, #20]	@ (80044e0 <SystemInit+0x20>)
 80044cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80044d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80044d4:	bf00      	nop
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	e000ed00 	.word	0xe000ed00

080044e4 <Reset_Handler>:
 80044e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800451c <LoopFillZerobss+0x12>
 80044e8:	480d      	ldr	r0, [pc, #52]	@ (8004520 <LoopFillZerobss+0x16>)
 80044ea:	490e      	ldr	r1, [pc, #56]	@ (8004524 <LoopFillZerobss+0x1a>)
 80044ec:	4a0e      	ldr	r2, [pc, #56]	@ (8004528 <LoopFillZerobss+0x1e>)
 80044ee:	2300      	movs	r3, #0
 80044f0:	e002      	b.n	80044f8 <LoopCopyDataInit>

080044f2 <CopyDataInit>:
 80044f2:	58d4      	ldr	r4, [r2, r3]
 80044f4:	50c4      	str	r4, [r0, r3]
 80044f6:	3304      	adds	r3, #4

080044f8 <LoopCopyDataInit>:
 80044f8:	18c4      	adds	r4, r0, r3
 80044fa:	428c      	cmp	r4, r1
 80044fc:	d3f9      	bcc.n	80044f2 <CopyDataInit>
 80044fe:	4a0b      	ldr	r2, [pc, #44]	@ (800452c <LoopFillZerobss+0x22>)
 8004500:	4c0b      	ldr	r4, [pc, #44]	@ (8004530 <LoopFillZerobss+0x26>)
 8004502:	2300      	movs	r3, #0
 8004504:	e001      	b.n	800450a <LoopFillZerobss>

08004506 <FillZerobss>:
 8004506:	6013      	str	r3, [r2, #0]
 8004508:	3204      	adds	r2, #4

0800450a <LoopFillZerobss>:
 800450a:	42a2      	cmp	r2, r4
 800450c:	d3fb      	bcc.n	8004506 <FillZerobss>
 800450e:	f7ff ffd7 	bl	80044c0 <SystemInit>
 8004512:	f00f f9ff 	bl	8013914 <__libc_init_array>
 8004516:	f7fe f8dd 	bl	80026d4 <main>
 800451a:	4770      	bx	lr
 800451c:	20020000 	.word	0x20020000
 8004520:	20000000 	.word	0x20000000
 8004524:	200001f0 	.word	0x200001f0
 8004528:	080163f8 	.word	0x080163f8
 800452c:	200001f0 	.word	0x200001f0
 8004530:	20006ab4 	.word	0x20006ab4

08004534 <CAN1_RX0_IRQHandler>:
 8004534:	e7fe      	b.n	8004534 <CAN1_RX0_IRQHandler>
	...

08004538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800453c:	4b0e      	ldr	r3, [pc, #56]	@ (8004578 <HAL_Init+0x40>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a0d      	ldr	r2, [pc, #52]	@ (8004578 <HAL_Init+0x40>)
 8004542:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004546:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004548:	4b0b      	ldr	r3, [pc, #44]	@ (8004578 <HAL_Init+0x40>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a0a      	ldr	r2, [pc, #40]	@ (8004578 <HAL_Init+0x40>)
 800454e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004552:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004554:	4b08      	ldr	r3, [pc, #32]	@ (8004578 <HAL_Init+0x40>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a07      	ldr	r2, [pc, #28]	@ (8004578 <HAL_Init+0x40>)
 800455a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800455e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004560:	2003      	movs	r0, #3
 8004562:	f000 fe38 	bl	80051d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004566:	200f      	movs	r0, #15
 8004568:	f7ff fdee 	bl	8004148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800456c:	f7ff f9ec 	bl	8003948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	40023c00 	.word	0x40023c00

0800457c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004580:	4b06      	ldr	r3, [pc, #24]	@ (800459c <HAL_IncTick+0x20>)
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	461a      	mov	r2, r3
 8004586:	4b06      	ldr	r3, [pc, #24]	@ (80045a0 <HAL_IncTick+0x24>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4413      	add	r3, r2
 800458c:	4a04      	ldr	r2, [pc, #16]	@ (80045a0 <HAL_IncTick+0x24>)
 800458e:	6013      	str	r3, [r2, #0]
}
 8004590:	bf00      	nop
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	2000000c 	.word	0x2000000c
 80045a0:	20002b94 	.word	0x20002b94

080045a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  return uwTick;
 80045a8:	4b03      	ldr	r3, [pc, #12]	@ (80045b8 <HAL_GetTick+0x14>)
 80045aa:	681b      	ldr	r3, [r3, #0]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	20002b94 	.word	0x20002b94

080045bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045c4:	f7ff ffee 	bl	80045a4 <HAL_GetTick>
 80045c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d4:	d005      	beq.n	80045e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004600 <HAL_Delay+0x44>)
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	461a      	mov	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4413      	add	r3, r2
 80045e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80045e2:	bf00      	nop
 80045e4:	f7ff ffde 	bl	80045a4 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d8f7      	bhi.n	80045e4 <HAL_Delay+0x28>
  {
  }
}
 80045f4:	bf00      	nop
 80045f6:	bf00      	nop
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	2000000c 	.word	0x2000000c

08004604 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800460c:	2300      	movs	r3, #0
 800460e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e033      	b.n	8004682 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461e:	2b00      	cmp	r3, #0
 8004620:	d109      	bne.n	8004636 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7ff f9bc 	bl	80039a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463a:	f003 0310 	and.w	r3, r3, #16
 800463e:	2b00      	cmp	r3, #0
 8004640:	d118      	bne.n	8004674 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004646:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800464a:	f023 0302 	bic.w	r3, r3, #2
 800464e:	f043 0202 	orr.w	r2, r3, #2
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 fb88 	bl	8004d6c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004666:	f023 0303 	bic.w	r3, r3, #3
 800466a:	f043 0201 	orr.w	r2, r3, #1
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	641a      	str	r2, [r3, #64]	@ 0x40
 8004672:	e001      	b.n	8004678 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004680:	7bfb      	ldrb	r3, [r7, #15]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b086      	sub	sp, #24
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004692:	2300      	movs	r3, #0
 8004694:	617b      	str	r3, [r7, #20]
 8004696:	2300      	movs	r3, #0
 8004698:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f003 0320 	and.w	r3, r3, #32
 80046b8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d049      	beq.n	8004754 <HAL_ADC_IRQHandler+0xca>
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d046      	beq.n	8004754 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ca:	f003 0310 	and.w	r3, r3, #16
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d105      	bne.n	80046de <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d12b      	bne.n	8004744 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d127      	bne.n	8004744 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046fa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d006      	beq.n	8004710 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800470c:	2b00      	cmp	r3, #0
 800470e:	d119      	bne.n	8004744 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0220 	bic.w	r2, r2, #32
 800471e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004724:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004730:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d105      	bne.n	8004744 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473c:	f043 0201 	orr.w	r2, r3, #1
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f7fd ff07 	bl	8002558 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f06f 0212 	mvn.w	r2, #18
 8004752:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f003 0304 	and.w	r3, r3, #4
 800475a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004762:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d057      	beq.n	800481a <HAL_ADC_IRQHandler+0x190>
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d054      	beq.n	800481a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004774:	f003 0310 	and.w	r3, r3, #16
 8004778:	2b00      	cmp	r3, #0
 800477a:	d105      	bne.n	8004788 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004780:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d139      	bne.n	800480a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800479c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d006      	beq.n	80047b2 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d12b      	bne.n	800480a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d124      	bne.n	800480a <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d11d      	bne.n	800480a <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d119      	bne.n	800480a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047e4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d105      	bne.n	800480a <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004802:	f043 0201 	orr.w	r2, r3, #1
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 fc2c 	bl	8005068 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f06f 020c 	mvn.w	r2, #12
 8004818:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004828:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d017      	beq.n	8004860 <HAL_ADC_IRQHandler+0x1d6>
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d014      	beq.n	8004860 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b01      	cmp	r3, #1
 8004842:	d10d      	bne.n	8004860 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004848:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f945 	bl	8004ae0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f06f 0201 	mvn.w	r2, #1
 800485e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f003 0320 	and.w	r3, r3, #32
 8004866:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800486e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d015      	beq.n	80048a2 <HAL_ADC_IRQHandler+0x218>
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d012      	beq.n	80048a2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004880:	f043 0202 	orr.w	r2, r3, #2
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f06f 0220 	mvn.w	r2, #32
 8004890:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f92e 	bl	8004af4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f06f 0220 	mvn.w	r2, #32
 80048a0:	601a      	str	r2, [r3, #0]
  }
}
 80048a2:	bf00      	nop
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
	...

080048ac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d101      	bne.n	80048ca <HAL_ADC_Start_DMA+0x1e>
 80048c6:	2302      	movs	r3, #2
 80048c8:	e0e9      	b.n	8004a9e <HAL_ADC_Start_DMA+0x1f2>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d018      	beq.n	8004912 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0201 	orr.w	r2, r2, #1
 80048ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80048f0:	4b6d      	ldr	r3, [pc, #436]	@ (8004aa8 <HAL_ADC_Start_DMA+0x1fc>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a6d      	ldr	r2, [pc, #436]	@ (8004aac <HAL_ADC_Start_DMA+0x200>)
 80048f6:	fba2 2303 	umull	r2, r3, r2, r3
 80048fa:	0c9a      	lsrs	r2, r3, #18
 80048fc:	4613      	mov	r3, r2
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	4413      	add	r3, r2
 8004902:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004904:	e002      	b.n	800490c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	3b01      	subs	r3, #1
 800490a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1f9      	bne.n	8004906 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800491c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004920:	d107      	bne.n	8004932 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004930:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b01      	cmp	r3, #1
 800493e:	f040 80a1 	bne.w	8004a84 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004946:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800494a:	f023 0301 	bic.w	r3, r3, #1
 800494e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004960:	2b00      	cmp	r3, #0
 8004962:	d007      	beq.n	8004974 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004968:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800496c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004978:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800497c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004980:	d106      	bne.n	8004990 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004986:	f023 0206 	bic.w	r2, r3, #6
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	645a      	str	r2, [r3, #68]	@ 0x44
 800498e:	e002      	b.n	8004996 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800499e:	4b44      	ldr	r3, [pc, #272]	@ (8004ab0 <HAL_ADC_Start_DMA+0x204>)
 80049a0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049a6:	4a43      	ldr	r2, [pc, #268]	@ (8004ab4 <HAL_ADC_Start_DMA+0x208>)
 80049a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ae:	4a42      	ldr	r2, [pc, #264]	@ (8004ab8 <HAL_ADC_Start_DMA+0x20c>)
 80049b0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b6:	4a41      	ldr	r2, [pc, #260]	@ (8004abc <HAL_ADC_Start_DMA+0x210>)
 80049b8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80049c2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80049d2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689a      	ldr	r2, [r3, #8]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049e2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	334c      	adds	r3, #76	@ 0x4c
 80049ee:	4619      	mov	r1, r3
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f000 fcd2 	bl	800539c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f003 031f 	and.w	r3, r3, #31
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d12a      	bne.n	8004a5a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a2d      	ldr	r2, [pc, #180]	@ (8004ac0 <HAL_ADC_Start_DMA+0x214>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d015      	beq.n	8004a3a <HAL_ADC_Start_DMA+0x18e>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a2c      	ldr	r2, [pc, #176]	@ (8004ac4 <HAL_ADC_Start_DMA+0x218>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d105      	bne.n	8004a24 <HAL_ADC_Start_DMA+0x178>
 8004a18:	4b25      	ldr	r3, [pc, #148]	@ (8004ab0 <HAL_ADC_Start_DMA+0x204>)
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f003 031f 	and.w	r3, r3, #31
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00a      	beq.n	8004a3a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a27      	ldr	r2, [pc, #156]	@ (8004ac8 <HAL_ADC_Start_DMA+0x21c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d136      	bne.n	8004a9c <HAL_ADC_Start_DMA+0x1f0>
 8004a2e:	4b20      	ldr	r3, [pc, #128]	@ (8004ab0 <HAL_ADC_Start_DMA+0x204>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f003 0310 	and.w	r3, r3, #16
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d130      	bne.n	8004a9c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d129      	bne.n	8004a9c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689a      	ldr	r2, [r3, #8]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004a56:	609a      	str	r2, [r3, #8]
 8004a58:	e020      	b.n	8004a9c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a18      	ldr	r2, [pc, #96]	@ (8004ac0 <HAL_ADC_Start_DMA+0x214>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d11b      	bne.n	8004a9c <HAL_ADC_Start_DMA+0x1f0>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d114      	bne.n	8004a9c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004a80:	609a      	str	r2, [r3, #8]
 8004a82:	e00b      	b.n	8004a9c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a88:	f043 0210 	orr.w	r2, r3, #16
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a94:	f043 0201 	orr.w	r2, r3, #1
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	20000004 	.word	0x20000004
 8004aac:	431bde83 	.word	0x431bde83
 8004ab0:	40012300 	.word	0x40012300
 8004ab4:	08004f65 	.word	0x08004f65
 8004ab8:	0800501f 	.word	0x0800501f
 8004abc:	0800503b 	.word	0x0800503b
 8004ac0:	40012000 	.word	0x40012000
 8004ac4:	40012100 	.word	0x40012100
 8004ac8:	40012200 	.word	0x40012200

08004acc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004b12:	2300      	movs	r3, #0
 8004b14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d101      	bne.n	8004b24 <HAL_ADC_ConfigChannel+0x1c>
 8004b20:	2302      	movs	r3, #2
 8004b22:	e113      	b.n	8004d4c <HAL_ADC_ConfigChannel+0x244>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b09      	cmp	r3, #9
 8004b32:	d925      	bls.n	8004b80 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68d9      	ldr	r1, [r3, #12]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	461a      	mov	r2, r3
 8004b42:	4613      	mov	r3, r2
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	4413      	add	r3, r2
 8004b48:	3b1e      	subs	r3, #30
 8004b4a:	2207      	movs	r2, #7
 8004b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b50:	43da      	mvns	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	400a      	ands	r2, r1
 8004b58:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68d9      	ldr	r1, [r3, #12]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	689a      	ldr	r2, [r3, #8]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	005b      	lsls	r3, r3, #1
 8004b70:	4403      	add	r3, r0
 8004b72:	3b1e      	subs	r3, #30
 8004b74:	409a      	lsls	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	60da      	str	r2, [r3, #12]
 8004b7e:	e022      	b.n	8004bc6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6919      	ldr	r1, [r3, #16]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	4613      	mov	r3, r2
 8004b90:	005b      	lsls	r3, r3, #1
 8004b92:	4413      	add	r3, r2
 8004b94:	2207      	movs	r2, #7
 8004b96:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9a:	43da      	mvns	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	400a      	ands	r2, r1
 8004ba2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6919      	ldr	r1, [r3, #16]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	689a      	ldr	r2, [r3, #8]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	4403      	add	r3, r0
 8004bbc:	409a      	lsls	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2b06      	cmp	r3, #6
 8004bcc:	d824      	bhi.n	8004c18 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	3b05      	subs	r3, #5
 8004be0:	221f      	movs	r2, #31
 8004be2:	fa02 f303 	lsl.w	r3, r2, r3
 8004be6:	43da      	mvns	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	400a      	ands	r2, r1
 8004bee:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	4613      	mov	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	3b05      	subs	r3, #5
 8004c0a:	fa00 f203 	lsl.w	r2, r0, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	635a      	str	r2, [r3, #52]	@ 0x34
 8004c16:	e04c      	b.n	8004cb2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	2b0c      	cmp	r3, #12
 8004c1e:	d824      	bhi.n	8004c6a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	685a      	ldr	r2, [r3, #4]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4413      	add	r3, r2
 8004c30:	3b23      	subs	r3, #35	@ 0x23
 8004c32:	221f      	movs	r2, #31
 8004c34:	fa02 f303 	lsl.w	r3, r2, r3
 8004c38:	43da      	mvns	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	400a      	ands	r2, r1
 8004c40:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	4618      	mov	r0, r3
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	4613      	mov	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4413      	add	r3, r2
 8004c5a:	3b23      	subs	r3, #35	@ 0x23
 8004c5c:	fa00 f203 	lsl.w	r2, r0, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c68:	e023      	b.n	8004cb2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	4613      	mov	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4413      	add	r3, r2
 8004c7a:	3b41      	subs	r3, #65	@ 0x41
 8004c7c:	221f      	movs	r2, #31
 8004c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c82:	43da      	mvns	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	400a      	ands	r2, r1
 8004c8a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	4618      	mov	r0, r3
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4413      	add	r3, r2
 8004ca4:	3b41      	subs	r3, #65	@ 0x41
 8004ca6:	fa00 f203 	lsl.w	r2, r0, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004cb2:	4b29      	ldr	r3, [pc, #164]	@ (8004d58 <HAL_ADC_ConfigChannel+0x250>)
 8004cb4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a28      	ldr	r2, [pc, #160]	@ (8004d5c <HAL_ADC_ConfigChannel+0x254>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d10f      	bne.n	8004ce0 <HAL_ADC_ConfigChannel+0x1d8>
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2b12      	cmp	r3, #18
 8004cc6:	d10b      	bne.n	8004ce0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a1d      	ldr	r2, [pc, #116]	@ (8004d5c <HAL_ADC_ConfigChannel+0x254>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d12b      	bne.n	8004d42 <HAL_ADC_ConfigChannel+0x23a>
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a1c      	ldr	r2, [pc, #112]	@ (8004d60 <HAL_ADC_ConfigChannel+0x258>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d003      	beq.n	8004cfc <HAL_ADC_ConfigChannel+0x1f4>
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2b11      	cmp	r3, #17
 8004cfa:	d122      	bne.n	8004d42 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a11      	ldr	r2, [pc, #68]	@ (8004d60 <HAL_ADC_ConfigChannel+0x258>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d111      	bne.n	8004d42 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004d1e:	4b11      	ldr	r3, [pc, #68]	@ (8004d64 <HAL_ADC_ConfigChannel+0x25c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a11      	ldr	r2, [pc, #68]	@ (8004d68 <HAL_ADC_ConfigChannel+0x260>)
 8004d24:	fba2 2303 	umull	r2, r3, r2, r3
 8004d28:	0c9a      	lsrs	r2, r3, #18
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	005b      	lsls	r3, r3, #1
 8004d32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004d34:	e002      	b.n	8004d3c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1f9      	bne.n	8004d36 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	40012300 	.word	0x40012300
 8004d5c:	40012000 	.word	0x40012000
 8004d60:	10000012 	.word	0x10000012
 8004d64:	20000004 	.word	0x20000004
 8004d68:	431bde83 	.word	0x431bde83

08004d6c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d74:	4b79      	ldr	r3, [pc, #484]	@ (8004f5c <ADC_Init+0x1f0>)
 8004d76:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	431a      	orrs	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004da0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6859      	ldr	r1, [r3, #4]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	021a      	lsls	r2, r3, #8
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004dc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6859      	ldr	r1, [r3, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689a      	ldr	r2, [r3, #8]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004de6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6899      	ldr	r1, [r3, #8]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68da      	ldr	r2, [r3, #12]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dfe:	4a58      	ldr	r2, [pc, #352]	@ (8004f60 <ADC_Init+0x1f4>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d022      	beq.n	8004e4a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689a      	ldr	r2, [r3, #8]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004e12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6899      	ldr	r1, [r3, #8]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004e34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	6899      	ldr	r1, [r3, #8]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	430a      	orrs	r2, r1
 8004e46:	609a      	str	r2, [r3, #8]
 8004e48:	e00f      	b.n	8004e6a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689a      	ldr	r2, [r3, #8]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004e58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004e68:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 0202 	bic.w	r2, r2, #2
 8004e78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6899      	ldr	r1, [r3, #8]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	7e1b      	ldrb	r3, [r3, #24]
 8004e84:	005a      	lsls	r2, r3, #1
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d01b      	beq.n	8004ed0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ea6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004eb6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6859      	ldr	r1, [r3, #4]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	035a      	lsls	r2, r3, #13
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	605a      	str	r2, [r3, #4]
 8004ece:	e007      	b.n	8004ee0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ede:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004eee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	3b01      	subs	r3, #1
 8004efc:	051a      	lsls	r2, r3, #20
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689a      	ldr	r2, [r3, #8]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004f14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	6899      	ldr	r1, [r3, #8]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004f22:	025a      	lsls	r2, r3, #9
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	689a      	ldr	r2, [r3, #8]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6899      	ldr	r1, [r3, #8]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	029a      	lsls	r2, r3, #10
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	609a      	str	r2, [r3, #8]
}
 8004f50:	bf00      	nop
 8004f52:	3714      	adds	r7, #20
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	40012300 	.word	0x40012300
 8004f60:	0f000001 	.word	0x0f000001

08004f64 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f70:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f76:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d13c      	bne.n	8004ff8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f82:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d12b      	bne.n	8004ff0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d127      	bne.n	8004ff0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d006      	beq.n	8004fbc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d119      	bne.n	8004ff0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685a      	ldr	r2, [r3, #4]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f022 0220 	bic.w	r2, r2, #32
 8004fca:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fdc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d105      	bne.n	8004ff0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe8:	f043 0201 	orr.w	r2, r3, #1
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f7fd fab1 	bl	8002558 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004ff6:	e00e      	b.n	8005016 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ffc:	f003 0310 	and.w	r3, r3, #16
 8005000:	2b00      	cmp	r3, #0
 8005002:	d003      	beq.n	800500c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f7ff fd75 	bl	8004af4 <HAL_ADC_ErrorCallback>
}
 800500a:	e004      	b.n	8005016 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	4798      	blx	r3
}
 8005016:	bf00      	nop
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b084      	sub	sp, #16
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800502a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f7ff fd4d 	bl	8004acc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005032:	bf00      	nop
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b084      	sub	sp, #16
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005046:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2240      	movs	r2, #64	@ 0x40
 800504c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005052:	f043 0204 	orr.w	r2, r3, #4
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f7ff fd4a 	bl	8004af4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005060:	bf00      	nop
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <__NVIC_SetPriorityGrouping>:
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f003 0307 	and.w	r3, r3, #7
 800508a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800508c:	4b0c      	ldr	r3, [pc, #48]	@ (80050c0 <__NVIC_SetPriorityGrouping+0x44>)
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005098:	4013      	ands	r3, r2
 800509a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80050a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050ae:	4a04      	ldr	r2, [pc, #16]	@ (80050c0 <__NVIC_SetPriorityGrouping+0x44>)
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	60d3      	str	r3, [r2, #12]
}
 80050b4:	bf00      	nop
 80050b6:	3714      	adds	r7, #20
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	e000ed00 	.word	0xe000ed00

080050c4 <__NVIC_GetPriorityGrouping>:
{
 80050c4:	b480      	push	{r7}
 80050c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050c8:	4b04      	ldr	r3, [pc, #16]	@ (80050dc <__NVIC_GetPriorityGrouping+0x18>)
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	0a1b      	lsrs	r3, r3, #8
 80050ce:	f003 0307 	and.w	r3, r3, #7
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	e000ed00 	.word	0xe000ed00

080050e0 <__NVIC_EnableIRQ>:
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	4603      	mov	r3, r0
 80050e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	db0b      	blt.n	800510a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050f2:	79fb      	ldrb	r3, [r7, #7]
 80050f4:	f003 021f 	and.w	r2, r3, #31
 80050f8:	4907      	ldr	r1, [pc, #28]	@ (8005118 <__NVIC_EnableIRQ+0x38>)
 80050fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050fe:	095b      	lsrs	r3, r3, #5
 8005100:	2001      	movs	r0, #1
 8005102:	fa00 f202 	lsl.w	r2, r0, r2
 8005106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800510a:	bf00      	nop
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	e000e100 	.word	0xe000e100

0800511c <__NVIC_SetPriority>:
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	4603      	mov	r3, r0
 8005124:	6039      	str	r1, [r7, #0]
 8005126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800512c:	2b00      	cmp	r3, #0
 800512e:	db0a      	blt.n	8005146 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	b2da      	uxtb	r2, r3
 8005134:	490c      	ldr	r1, [pc, #48]	@ (8005168 <__NVIC_SetPriority+0x4c>)
 8005136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800513a:	0112      	lsls	r2, r2, #4
 800513c:	b2d2      	uxtb	r2, r2
 800513e:	440b      	add	r3, r1
 8005140:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005144:	e00a      	b.n	800515c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	b2da      	uxtb	r2, r3
 800514a:	4908      	ldr	r1, [pc, #32]	@ (800516c <__NVIC_SetPriority+0x50>)
 800514c:	79fb      	ldrb	r3, [r7, #7]
 800514e:	f003 030f 	and.w	r3, r3, #15
 8005152:	3b04      	subs	r3, #4
 8005154:	0112      	lsls	r2, r2, #4
 8005156:	b2d2      	uxtb	r2, r2
 8005158:	440b      	add	r3, r1
 800515a:	761a      	strb	r2, [r3, #24]
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr
 8005168:	e000e100 	.word	0xe000e100
 800516c:	e000ed00 	.word	0xe000ed00

08005170 <NVIC_EncodePriority>:
{
 8005170:	b480      	push	{r7}
 8005172:	b089      	sub	sp, #36	@ 0x24
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f003 0307 	and.w	r3, r3, #7
 8005182:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	f1c3 0307 	rsb	r3, r3, #7
 800518a:	2b04      	cmp	r3, #4
 800518c:	bf28      	it	cs
 800518e:	2304      	movcs	r3, #4
 8005190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	3304      	adds	r3, #4
 8005196:	2b06      	cmp	r3, #6
 8005198:	d902      	bls.n	80051a0 <NVIC_EncodePriority+0x30>
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	3b03      	subs	r3, #3
 800519e:	e000      	b.n	80051a2 <NVIC_EncodePriority+0x32>
 80051a0:	2300      	movs	r3, #0
 80051a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051a4:	f04f 32ff 	mov.w	r2, #4294967295
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	fa02 f303 	lsl.w	r3, r2, r3
 80051ae:	43da      	mvns	r2, r3
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	401a      	ands	r2, r3
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051b8:	f04f 31ff 	mov.w	r1, #4294967295
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	fa01 f303 	lsl.w	r3, r1, r3
 80051c2:	43d9      	mvns	r1, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051c8:	4313      	orrs	r3, r2
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3724      	adds	r7, #36	@ 0x24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b082      	sub	sp, #8
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7ff ff4c 	bl	800507c <__NVIC_SetPriorityGrouping>
}
 80051e4:	bf00      	nop
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b086      	sub	sp, #24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	4603      	mov	r3, r0
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
 80051f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80051fa:	2300      	movs	r3, #0
 80051fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80051fe:	f7ff ff61 	bl	80050c4 <__NVIC_GetPriorityGrouping>
 8005202:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	68b9      	ldr	r1, [r7, #8]
 8005208:	6978      	ldr	r0, [r7, #20]
 800520a:	f7ff ffb1 	bl	8005170 <NVIC_EncodePriority>
 800520e:	4602      	mov	r2, r0
 8005210:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005214:	4611      	mov	r1, r2
 8005216:	4618      	mov	r0, r3
 8005218:	f7ff ff80 	bl	800511c <__NVIC_SetPriority>
}
 800521c:	bf00      	nop
 800521e:	3718      	adds	r7, #24
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	4603      	mov	r3, r0
 800522c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800522e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005232:	4618      	mov	r0, r3
 8005234:	f7ff ff54 	bl	80050e0 <__NVIC_EnableIRQ>
}
 8005238:	bf00      	nop
 800523a:	3708      	adds	r7, #8
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800524c:	f7ff f9aa 	bl	80045a4 <HAL_GetTick>
 8005250:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d101      	bne.n	800525c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e099      	b.n	8005390 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2202      	movs	r2, #2
 8005260:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f022 0201 	bic.w	r2, r2, #1
 800527a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800527c:	e00f      	b.n	800529e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800527e:	f7ff f991 	bl	80045a4 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	2b05      	cmp	r3, #5
 800528a:	d908      	bls.n	800529e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2220      	movs	r2, #32
 8005290:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2203      	movs	r2, #3
 8005296:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e078      	b.n	8005390 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1e8      	bne.n	800527e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	4b38      	ldr	r3, [pc, #224]	@ (8005398 <HAL_DMA_Init+0x158>)
 80052b8:	4013      	ands	r3, r2
 80052ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685a      	ldr	r2, [r3, #4]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80052ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a1b      	ldr	r3, [r3, #32]
 80052e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f4:	2b04      	cmp	r3, #4
 80052f6:	d107      	bne.n	8005308 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005300:	4313      	orrs	r3, r2
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	4313      	orrs	r3, r2
 8005306:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f023 0307 	bic.w	r3, r3, #7
 800531e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	4313      	orrs	r3, r2
 8005328:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800532e:	2b04      	cmp	r3, #4
 8005330:	d117      	bne.n	8005362 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	4313      	orrs	r3, r2
 800533a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00e      	beq.n	8005362 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 fb1b 	bl	8005980 <DMA_CheckFifoParam>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d008      	beq.n	8005362 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2240      	movs	r2, #64	@ 0x40
 8005354:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800535e:	2301      	movs	r3, #1
 8005360:	e016      	b.n	8005390 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fad2 	bl	8005914 <DMA_CalcBaseAndBitshift>
 8005370:	4603      	mov	r3, r0
 8005372:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005378:	223f      	movs	r2, #63	@ 0x3f
 800537a:	409a      	lsls	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3718      	adds	r7, #24
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	f010803f 	.word	0xf010803f

0800539c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
 80053a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053aa:	2300      	movs	r3, #0
 80053ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d101      	bne.n	80053c2 <HAL_DMA_Start_IT+0x26>
 80053be:	2302      	movs	r3, #2
 80053c0:	e040      	b.n	8005444 <HAL_DMA_Start_IT+0xa8>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d12f      	bne.n	8005436 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2202      	movs	r2, #2
 80053da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	68b9      	ldr	r1, [r7, #8]
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f000 fa64 	bl	80058b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053f4:	223f      	movs	r2, #63	@ 0x3f
 80053f6:	409a      	lsls	r2, r3
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f042 0216 	orr.w	r2, r2, #22
 800540a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005410:	2b00      	cmp	r3, #0
 8005412:	d007      	beq.n	8005424 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f042 0208 	orr.w	r2, r2, #8
 8005422:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f042 0201 	orr.w	r2, r2, #1
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	e005      	b.n	8005442 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800543e:	2302      	movs	r3, #2
 8005440:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005442:	7dfb      	ldrb	r3, [r7, #23]
}
 8005444:	4618      	mov	r0, r3
 8005446:	3718      	adds	r7, #24
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005458:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800545a:	f7ff f8a3 	bl	80045a4 <HAL_GetTick>
 800545e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b02      	cmp	r3, #2
 800546a:	d008      	beq.n	800547e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2280      	movs	r2, #128	@ 0x80
 8005470:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e052      	b.n	8005524 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f022 0216 	bic.w	r2, r2, #22
 800548c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	695a      	ldr	r2, [r3, #20]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800549c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d103      	bne.n	80054ae <HAL_DMA_Abort+0x62>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d007      	beq.n	80054be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 0208 	bic.w	r2, r2, #8
 80054bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 0201 	bic.w	r2, r2, #1
 80054cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054ce:	e013      	b.n	80054f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054d0:	f7ff f868 	bl	80045a4 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b05      	cmp	r3, #5
 80054dc:	d90c      	bls.n	80054f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2220      	movs	r2, #32
 80054e2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2203      	movs	r2, #3
 80054e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e015      	b.n	8005524 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1e4      	bne.n	80054d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800550a:	223f      	movs	r2, #63	@ 0x3f
 800550c:	409a      	lsls	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3710      	adds	r7, #16
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b02      	cmp	r3, #2
 800553e:	d004      	beq.n	800554a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2280      	movs	r2, #128	@ 0x80
 8005544:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e00c      	b.n	8005564 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2205      	movs	r2, #5
 800554e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f022 0201 	bic.w	r2, r2, #1
 8005560:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005578:	2300      	movs	r3, #0
 800557a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800557c:	4b8e      	ldr	r3, [pc, #568]	@ (80057b8 <HAL_DMA_IRQHandler+0x248>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a8e      	ldr	r2, [pc, #568]	@ (80057bc <HAL_DMA_IRQHandler+0x24c>)
 8005582:	fba2 2303 	umull	r2, r3, r2, r3
 8005586:	0a9b      	lsrs	r3, r3, #10
 8005588:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800558e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800559a:	2208      	movs	r2, #8
 800559c:	409a      	lsls	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	4013      	ands	r3, r2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d01a      	beq.n	80055dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0304 	and.w	r3, r3, #4
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d013      	beq.n	80055dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 0204 	bic.w	r2, r2, #4
 80055c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055c8:	2208      	movs	r2, #8
 80055ca:	409a      	lsls	r2, r3
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055d4:	f043 0201 	orr.w	r2, r3, #1
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055e0:	2201      	movs	r2, #1
 80055e2:	409a      	lsls	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4013      	ands	r3, r2
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d012      	beq.n	8005612 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00b      	beq.n	8005612 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055fe:	2201      	movs	r2, #1
 8005600:	409a      	lsls	r2, r3
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800560a:	f043 0202 	orr.w	r2, r3, #2
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005616:	2204      	movs	r2, #4
 8005618:	409a      	lsls	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	4013      	ands	r3, r2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d012      	beq.n	8005648 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00b      	beq.n	8005648 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005634:	2204      	movs	r2, #4
 8005636:	409a      	lsls	r2, r3
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005640:	f043 0204 	orr.w	r2, r3, #4
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800564c:	2210      	movs	r2, #16
 800564e:	409a      	lsls	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4013      	ands	r3, r2
 8005654:	2b00      	cmp	r3, #0
 8005656:	d043      	beq.n	80056e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0308 	and.w	r3, r3, #8
 8005662:	2b00      	cmp	r3, #0
 8005664:	d03c      	beq.n	80056e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800566a:	2210      	movs	r2, #16
 800566c:	409a      	lsls	r2, r3
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d018      	beq.n	80056b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d108      	bne.n	80056a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005692:	2b00      	cmp	r3, #0
 8005694:	d024      	beq.n	80056e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	4798      	blx	r3
 800569e:	e01f      	b.n	80056e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d01b      	beq.n	80056e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	4798      	blx	r3
 80056b0:	e016      	b.n	80056e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d107      	bne.n	80056d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 0208 	bic.w	r2, r2, #8
 80056ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d003      	beq.n	80056e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056e4:	2220      	movs	r2, #32
 80056e6:	409a      	lsls	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	4013      	ands	r3, r2
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 808f 	beq.w	8005810 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0310 	and.w	r3, r3, #16
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 8087 	beq.w	8005810 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005706:	2220      	movs	r2, #32
 8005708:	409a      	lsls	r2, r3
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b05      	cmp	r3, #5
 8005718:	d136      	bne.n	8005788 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f022 0216 	bic.w	r2, r2, #22
 8005728:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	695a      	ldr	r2, [r3, #20]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005738:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800573e:	2b00      	cmp	r3, #0
 8005740:	d103      	bne.n	800574a <HAL_DMA_IRQHandler+0x1da>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005746:	2b00      	cmp	r3, #0
 8005748:	d007      	beq.n	800575a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 0208 	bic.w	r2, r2, #8
 8005758:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800575e:	223f      	movs	r2, #63	@ 0x3f
 8005760:	409a      	lsls	r2, r3
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800577a:	2b00      	cmp	r3, #0
 800577c:	d07e      	beq.n	800587c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	4798      	blx	r3
        }
        return;
 8005786:	e079      	b.n	800587c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d01d      	beq.n	80057d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10d      	bne.n	80057c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d031      	beq.n	8005810 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	4798      	blx	r3
 80057b4:	e02c      	b.n	8005810 <HAL_DMA_IRQHandler+0x2a0>
 80057b6:	bf00      	nop
 80057b8:	20000004 	.word	0x20000004
 80057bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d023      	beq.n	8005810 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	4798      	blx	r3
 80057d0:	e01e      	b.n	8005810 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d10f      	bne.n	8005800 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 0210 	bic.w	r2, r2, #16
 80057ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005804:	2b00      	cmp	r3, #0
 8005806:	d003      	beq.n	8005810 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005814:	2b00      	cmp	r3, #0
 8005816:	d032      	beq.n	800587e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b00      	cmp	r3, #0
 8005822:	d022      	beq.n	800586a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2205      	movs	r2, #5
 8005828:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 0201 	bic.w	r2, r2, #1
 800583a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	3301      	adds	r3, #1
 8005840:	60bb      	str	r3, [r7, #8]
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	429a      	cmp	r2, r3
 8005846:	d307      	bcc.n	8005858 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1f2      	bne.n	800583c <HAL_DMA_IRQHandler+0x2cc>
 8005856:	e000      	b.n	800585a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005858:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800586e:	2b00      	cmp	r3, #0
 8005870:	d005      	beq.n	800587e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	4798      	blx	r3
 800587a:	e000      	b.n	800587e <HAL_DMA_IRQHandler+0x30e>
        return;
 800587c:	bf00      	nop
    }
  }
}
 800587e:	3718      	adds	r7, #24
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005892:	b2db      	uxtb	r3, r3
}
 8005894:	4618      	mov	r0, r3
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
 80058c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80058d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	2b40      	cmp	r3, #64	@ 0x40
 80058e4:	d108      	bne.n	80058f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80058f6:	e007      	b.n	8005908 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	60da      	str	r2, [r3, #12]
}
 8005908:	bf00      	nop
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	b2db      	uxtb	r3, r3
 8005922:	3b10      	subs	r3, #16
 8005924:	4a14      	ldr	r2, [pc, #80]	@ (8005978 <DMA_CalcBaseAndBitshift+0x64>)
 8005926:	fba2 2303 	umull	r2, r3, r2, r3
 800592a:	091b      	lsrs	r3, r3, #4
 800592c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800592e:	4a13      	ldr	r2, [pc, #76]	@ (800597c <DMA_CalcBaseAndBitshift+0x68>)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4413      	add	r3, r2
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	461a      	mov	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2b03      	cmp	r3, #3
 8005940:	d909      	bls.n	8005956 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800594a:	f023 0303 	bic.w	r3, r3, #3
 800594e:	1d1a      	adds	r2, r3, #4
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	659a      	str	r2, [r3, #88]	@ 0x58
 8005954:	e007      	b.n	8005966 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800595e:	f023 0303 	bic.w	r3, r3, #3
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800596a:	4618      	mov	r0, r3
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	aaaaaaab 	.word	0xaaaaaaab
 800597c:	08015c2c 	.word	0x08015c2c

08005980 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005980:	b480      	push	{r7}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005988:	2300      	movs	r3, #0
 800598a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005990:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d11f      	bne.n	80059da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	2b03      	cmp	r3, #3
 800599e:	d856      	bhi.n	8005a4e <DMA_CheckFifoParam+0xce>
 80059a0:	a201      	add	r2, pc, #4	@ (adr r2, 80059a8 <DMA_CheckFifoParam+0x28>)
 80059a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a6:	bf00      	nop
 80059a8:	080059b9 	.word	0x080059b9
 80059ac:	080059cb 	.word	0x080059cb
 80059b0:	080059b9 	.word	0x080059b9
 80059b4:	08005a4f 	.word	0x08005a4f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d046      	beq.n	8005a52 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059c8:	e043      	b.n	8005a52 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ce:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80059d2:	d140      	bne.n	8005a56 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059d8:	e03d      	b.n	8005a56 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059e2:	d121      	bne.n	8005a28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2b03      	cmp	r3, #3
 80059e8:	d837      	bhi.n	8005a5a <DMA_CheckFifoParam+0xda>
 80059ea:	a201      	add	r2, pc, #4	@ (adr r2, 80059f0 <DMA_CheckFifoParam+0x70>)
 80059ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f0:	08005a01 	.word	0x08005a01
 80059f4:	08005a07 	.word	0x08005a07
 80059f8:	08005a01 	.word	0x08005a01
 80059fc:	08005a19 	.word	0x08005a19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	73fb      	strb	r3, [r7, #15]
      break;
 8005a04:	e030      	b.n	8005a68 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d025      	beq.n	8005a5e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a16:	e022      	b.n	8005a5e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a1c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005a20:	d11f      	bne.n	8005a62 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005a26:	e01c      	b.n	8005a62 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d903      	bls.n	8005a36 <DMA_CheckFifoParam+0xb6>
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	2b03      	cmp	r3, #3
 8005a32:	d003      	beq.n	8005a3c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005a34:	e018      	b.n	8005a68 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	73fb      	strb	r3, [r7, #15]
      break;
 8005a3a:	e015      	b.n	8005a68 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00e      	beq.n	8005a66 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a4c:	e00b      	b.n	8005a66 <DMA_CheckFifoParam+0xe6>
      break;
 8005a4e:	bf00      	nop
 8005a50:	e00a      	b.n	8005a68 <DMA_CheckFifoParam+0xe8>
      break;
 8005a52:	bf00      	nop
 8005a54:	e008      	b.n	8005a68 <DMA_CheckFifoParam+0xe8>
      break;
 8005a56:	bf00      	nop
 8005a58:	e006      	b.n	8005a68 <DMA_CheckFifoParam+0xe8>
      break;
 8005a5a:	bf00      	nop
 8005a5c:	e004      	b.n	8005a68 <DMA_CheckFifoParam+0xe8>
      break;
 8005a5e:	bf00      	nop
 8005a60:	e002      	b.n	8005a68 <DMA_CheckFifoParam+0xe8>
      break;   
 8005a62:	bf00      	nop
 8005a64:	e000      	b.n	8005a68 <DMA_CheckFifoParam+0xe8>
      break;
 8005a66:	bf00      	nop
    }
  } 
  
  return status; 
 8005a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3714      	adds	r7, #20
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop

08005a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b089      	sub	sp, #36	@ 0x24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005a82:	2300      	movs	r3, #0
 8005a84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005a86:	2300      	movs	r3, #0
 8005a88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a8e:	2300      	movs	r3, #0
 8005a90:	61fb      	str	r3, [r7, #28]
 8005a92:	e165      	b.n	8005d60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005a94:	2201      	movs	r2, #1
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	f040 8154 	bne.w	8005d5a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f003 0303 	and.w	r3, r3, #3
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d005      	beq.n	8005aca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d130      	bne.n	8005b2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	005b      	lsls	r3, r3, #1
 8005ad4:	2203      	movs	r2, #3
 8005ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8005ada:	43db      	mvns	r3, r3
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	4013      	ands	r3, r2
 8005ae0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	68da      	ldr	r2, [r3, #12]
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	005b      	lsls	r3, r3, #1
 8005aea:	fa02 f303 	lsl.w	r3, r2, r3
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b00:	2201      	movs	r2, #1
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	fa02 f303 	lsl.w	r3, r2, r3
 8005b08:	43db      	mvns	r3, r3
 8005b0a:	69ba      	ldr	r2, [r7, #24]
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	091b      	lsrs	r3, r3, #4
 8005b16:	f003 0201 	and.w	r2, r3, #1
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b20:	69ba      	ldr	r2, [r7, #24]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f003 0303 	and.w	r3, r3, #3
 8005b34:	2b03      	cmp	r3, #3
 8005b36:	d017      	beq.n	8005b68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	005b      	lsls	r3, r3, #1
 8005b42:	2203      	movs	r2, #3
 8005b44:	fa02 f303 	lsl.w	r3, r2, r3
 8005b48:	43db      	mvns	r3, r3
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	689a      	ldr	r2, [r3, #8]
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	005b      	lsls	r3, r3, #1
 8005b58:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5c:	69ba      	ldr	r2, [r7, #24]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f003 0303 	and.w	r3, r3, #3
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d123      	bne.n	8005bbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	08da      	lsrs	r2, r3, #3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	3208      	adds	r2, #8
 8005b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	f003 0307 	and.w	r3, r3, #7
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	220f      	movs	r2, #15
 8005b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b90:	43db      	mvns	r3, r3
 8005b92:	69ba      	ldr	r2, [r7, #24]
 8005b94:	4013      	ands	r3, r2
 8005b96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	691a      	ldr	r2, [r3, #16]
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	f003 0307 	and.w	r3, r3, #7
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	08da      	lsrs	r2, r3, #3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	3208      	adds	r2, #8
 8005bb6:	69b9      	ldr	r1, [r7, #24]
 8005bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	005b      	lsls	r3, r3, #1
 8005bc6:	2203      	movs	r2, #3
 8005bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bcc:	43db      	mvns	r3, r3
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f003 0203 	and.w	r2, r3, #3
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	005b      	lsls	r3, r3, #1
 8005be0:	fa02 f303 	lsl.w	r3, r2, r3
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	69ba      	ldr	r2, [r7, #24]
 8005bee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f000 80ae 	beq.w	8005d5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bfe:	2300      	movs	r3, #0
 8005c00:	60fb      	str	r3, [r7, #12]
 8005c02:	4b5d      	ldr	r3, [pc, #372]	@ (8005d78 <HAL_GPIO_Init+0x300>)
 8005c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c06:	4a5c      	ldr	r2, [pc, #368]	@ (8005d78 <HAL_GPIO_Init+0x300>)
 8005c08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005c0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8005c0e:	4b5a      	ldr	r3, [pc, #360]	@ (8005d78 <HAL_GPIO_Init+0x300>)
 8005c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c16:	60fb      	str	r3, [r7, #12]
 8005c18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c1a:	4a58      	ldr	r2, [pc, #352]	@ (8005d7c <HAL_GPIO_Init+0x304>)
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	089b      	lsrs	r3, r3, #2
 8005c20:	3302      	adds	r3, #2
 8005c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	f003 0303 	and.w	r3, r3, #3
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	220f      	movs	r2, #15
 8005c32:	fa02 f303 	lsl.w	r3, r2, r3
 8005c36:	43db      	mvns	r3, r3
 8005c38:	69ba      	ldr	r2, [r7, #24]
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a4f      	ldr	r2, [pc, #316]	@ (8005d80 <HAL_GPIO_Init+0x308>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d025      	beq.n	8005c92 <HAL_GPIO_Init+0x21a>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a4e      	ldr	r2, [pc, #312]	@ (8005d84 <HAL_GPIO_Init+0x30c>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d01f      	beq.n	8005c8e <HAL_GPIO_Init+0x216>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a4d      	ldr	r2, [pc, #308]	@ (8005d88 <HAL_GPIO_Init+0x310>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d019      	beq.n	8005c8a <HAL_GPIO_Init+0x212>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a4c      	ldr	r2, [pc, #304]	@ (8005d8c <HAL_GPIO_Init+0x314>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d013      	beq.n	8005c86 <HAL_GPIO_Init+0x20e>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a4b      	ldr	r2, [pc, #300]	@ (8005d90 <HAL_GPIO_Init+0x318>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d00d      	beq.n	8005c82 <HAL_GPIO_Init+0x20a>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a4a      	ldr	r2, [pc, #296]	@ (8005d94 <HAL_GPIO_Init+0x31c>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d007      	beq.n	8005c7e <HAL_GPIO_Init+0x206>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a49      	ldr	r2, [pc, #292]	@ (8005d98 <HAL_GPIO_Init+0x320>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d101      	bne.n	8005c7a <HAL_GPIO_Init+0x202>
 8005c76:	2306      	movs	r3, #6
 8005c78:	e00c      	b.n	8005c94 <HAL_GPIO_Init+0x21c>
 8005c7a:	2307      	movs	r3, #7
 8005c7c:	e00a      	b.n	8005c94 <HAL_GPIO_Init+0x21c>
 8005c7e:	2305      	movs	r3, #5
 8005c80:	e008      	b.n	8005c94 <HAL_GPIO_Init+0x21c>
 8005c82:	2304      	movs	r3, #4
 8005c84:	e006      	b.n	8005c94 <HAL_GPIO_Init+0x21c>
 8005c86:	2303      	movs	r3, #3
 8005c88:	e004      	b.n	8005c94 <HAL_GPIO_Init+0x21c>
 8005c8a:	2302      	movs	r3, #2
 8005c8c:	e002      	b.n	8005c94 <HAL_GPIO_Init+0x21c>
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e000      	b.n	8005c94 <HAL_GPIO_Init+0x21c>
 8005c92:	2300      	movs	r3, #0
 8005c94:	69fa      	ldr	r2, [r7, #28]
 8005c96:	f002 0203 	and.w	r2, r2, #3
 8005c9a:	0092      	lsls	r2, r2, #2
 8005c9c:	4093      	lsls	r3, r2
 8005c9e:	69ba      	ldr	r2, [r7, #24]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ca4:	4935      	ldr	r1, [pc, #212]	@ (8005d7c <HAL_GPIO_Init+0x304>)
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	089b      	lsrs	r3, r3, #2
 8005caa:	3302      	adds	r3, #2
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005cb2:	4b3a      	ldr	r3, [pc, #232]	@ (8005d9c <HAL_GPIO_Init+0x324>)
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	43db      	mvns	r3, r3
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d003      	beq.n	8005cd6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005cce:	69ba      	ldr	r2, [r7, #24]
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005cd6:	4a31      	ldr	r2, [pc, #196]	@ (8005d9c <HAL_GPIO_Init+0x324>)
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005cdc:	4b2f      	ldr	r3, [pc, #188]	@ (8005d9c <HAL_GPIO_Init+0x324>)
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	43db      	mvns	r3, r3
 8005ce6:	69ba      	ldr	r2, [r7, #24]
 8005ce8:	4013      	ands	r3, r2
 8005cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d003      	beq.n	8005d00 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005cf8:	69ba      	ldr	r2, [r7, #24]
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005d00:	4a26      	ldr	r2, [pc, #152]	@ (8005d9c <HAL_GPIO_Init+0x324>)
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005d06:	4b25      	ldr	r3, [pc, #148]	@ (8005d9c <HAL_GPIO_Init+0x324>)
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	43db      	mvns	r3, r3
 8005d10:	69ba      	ldr	r2, [r7, #24]
 8005d12:	4013      	ands	r3, r2
 8005d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005d22:	69ba      	ldr	r2, [r7, #24]
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005d2a:	4a1c      	ldr	r2, [pc, #112]	@ (8005d9c <HAL_GPIO_Init+0x324>)
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d30:	4b1a      	ldr	r3, [pc, #104]	@ (8005d9c <HAL_GPIO_Init+0x324>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	43db      	mvns	r3, r3
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d003      	beq.n	8005d54 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005d54:	4a11      	ldr	r2, [pc, #68]	@ (8005d9c <HAL_GPIO_Init+0x324>)
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	61fb      	str	r3, [r7, #28]
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	2b0f      	cmp	r3, #15
 8005d64:	f67f ae96 	bls.w	8005a94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005d68:	bf00      	nop
 8005d6a:	bf00      	nop
 8005d6c:	3724      	adds	r7, #36	@ 0x24
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	40023800 	.word	0x40023800
 8005d7c:	40013800 	.word	0x40013800
 8005d80:	40020000 	.word	0x40020000
 8005d84:	40020400 	.word	0x40020400
 8005d88:	40020800 	.word	0x40020800
 8005d8c:	40020c00 	.word	0x40020c00
 8005d90:	40021000 	.word	0x40021000
 8005d94:	40021400 	.word	0x40021400
 8005d98:	40021800 	.word	0x40021800
 8005d9c:	40013c00 	.word	0x40013c00

08005da0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	460b      	mov	r3, r1
 8005daa:	807b      	strh	r3, [r7, #2]
 8005dac:	4613      	mov	r3, r2
 8005dae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005db0:	787b      	ldrb	r3, [r7, #1]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d003      	beq.n	8005dbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005db6:	887a      	ldrh	r2, [r7, #2]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005dbc:	e003      	b.n	8005dc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005dbe:	887b      	ldrh	r3, [r7, #2]
 8005dc0:	041a      	lsls	r2, r3, #16
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	619a      	str	r2, [r3, #24]
}
 8005dc6:	bf00      	nop
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
	...

08005dd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	4603      	mov	r3, r0
 8005ddc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005dde:	4b08      	ldr	r3, [pc, #32]	@ (8005e00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005de0:	695a      	ldr	r2, [r3, #20]
 8005de2:	88fb      	ldrh	r3, [r7, #6]
 8005de4:	4013      	ands	r3, r2
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d006      	beq.n	8005df8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005dea:	4a05      	ldr	r2, [pc, #20]	@ (8005e00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005dec:	88fb      	ldrh	r3, [r7, #6]
 8005dee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005df0:	88fb      	ldrh	r3, [r7, #6]
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7fc fb72 	bl	80024dc <HAL_GPIO_EXTI_Callback>
  }
}
 8005df8:	bf00      	nop
 8005dfa:	3708      	adds	r7, #8
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	40013c00 	.word	0x40013c00

08005e04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d101      	bne.n	8005e16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e12b      	b.n	800606e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d106      	bne.n	8005e30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f7fd fea6 	bl	8003b7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2224      	movs	r2, #36	@ 0x24
 8005e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f022 0201 	bic.w	r2, r2, #1
 8005e46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005e66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005e68:	f003 fc60 	bl	800972c <HAL_RCC_GetPCLK1Freq>
 8005e6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	4a81      	ldr	r2, [pc, #516]	@ (8006078 <HAL_I2C_Init+0x274>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d807      	bhi.n	8005e88 <HAL_I2C_Init+0x84>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	4a80      	ldr	r2, [pc, #512]	@ (800607c <HAL_I2C_Init+0x278>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	bf94      	ite	ls
 8005e80:	2301      	movls	r3, #1
 8005e82:	2300      	movhi	r3, #0
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	e006      	b.n	8005e96 <HAL_I2C_Init+0x92>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	4a7d      	ldr	r2, [pc, #500]	@ (8006080 <HAL_I2C_Init+0x27c>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	bf94      	ite	ls
 8005e90:	2301      	movls	r3, #1
 8005e92:	2300      	movhi	r3, #0
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d001      	beq.n	8005e9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e0e7      	b.n	800606e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	4a78      	ldr	r2, [pc, #480]	@ (8006084 <HAL_I2C_Init+0x280>)
 8005ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea6:	0c9b      	lsrs	r3, r3, #18
 8005ea8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	430a      	orrs	r2, r1
 8005ebc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6a1b      	ldr	r3, [r3, #32]
 8005ec4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	4a6a      	ldr	r2, [pc, #424]	@ (8006078 <HAL_I2C_Init+0x274>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d802      	bhi.n	8005ed8 <HAL_I2C_Init+0xd4>
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	e009      	b.n	8005eec <HAL_I2C_Init+0xe8>
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005ede:	fb02 f303 	mul.w	r3, r2, r3
 8005ee2:	4a69      	ldr	r2, [pc, #420]	@ (8006088 <HAL_I2C_Init+0x284>)
 8005ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee8:	099b      	lsrs	r3, r3, #6
 8005eea:	3301      	adds	r3, #1
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	6812      	ldr	r2, [r2, #0]
 8005ef0:	430b      	orrs	r3, r1
 8005ef2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005efe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	495c      	ldr	r1, [pc, #368]	@ (8006078 <HAL_I2C_Init+0x274>)
 8005f08:	428b      	cmp	r3, r1
 8005f0a:	d819      	bhi.n	8005f40 <HAL_I2C_Init+0x13c>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	1e59      	subs	r1, r3, #1
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	005b      	lsls	r3, r3, #1
 8005f16:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f1a:	1c59      	adds	r1, r3, #1
 8005f1c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005f20:	400b      	ands	r3, r1
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00a      	beq.n	8005f3c <HAL_I2C_Init+0x138>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	1e59      	subs	r1, r3, #1
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	005b      	lsls	r3, r3, #1
 8005f30:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f34:	3301      	adds	r3, #1
 8005f36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f3a:	e051      	b.n	8005fe0 <HAL_I2C_Init+0x1dc>
 8005f3c:	2304      	movs	r3, #4
 8005f3e:	e04f      	b.n	8005fe0 <HAL_I2C_Init+0x1dc>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d111      	bne.n	8005f6c <HAL_I2C_Init+0x168>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	1e58      	subs	r0, r3, #1
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6859      	ldr	r1, [r3, #4]
 8005f50:	460b      	mov	r3, r1
 8005f52:	005b      	lsls	r3, r3, #1
 8005f54:	440b      	add	r3, r1
 8005f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	bf0c      	ite	eq
 8005f64:	2301      	moveq	r3, #1
 8005f66:	2300      	movne	r3, #0
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	e012      	b.n	8005f92 <HAL_I2C_Init+0x18e>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	1e58      	subs	r0, r3, #1
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6859      	ldr	r1, [r3, #4]
 8005f74:	460b      	mov	r3, r1
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	440b      	add	r3, r1
 8005f7a:	0099      	lsls	r1, r3, #2
 8005f7c:	440b      	add	r3, r1
 8005f7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f82:	3301      	adds	r3, #1
 8005f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	bf0c      	ite	eq
 8005f8c:	2301      	moveq	r3, #1
 8005f8e:	2300      	movne	r3, #0
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d001      	beq.n	8005f9a <HAL_I2C_Init+0x196>
 8005f96:	2301      	movs	r3, #1
 8005f98:	e022      	b.n	8005fe0 <HAL_I2C_Init+0x1dc>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10e      	bne.n	8005fc0 <HAL_I2C_Init+0x1bc>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	1e58      	subs	r0, r3, #1
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6859      	ldr	r1, [r3, #4]
 8005faa:	460b      	mov	r3, r1
 8005fac:	005b      	lsls	r3, r3, #1
 8005fae:	440b      	add	r3, r1
 8005fb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fbe:	e00f      	b.n	8005fe0 <HAL_I2C_Init+0x1dc>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	1e58      	subs	r0, r3, #1
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6859      	ldr	r1, [r3, #4]
 8005fc8:	460b      	mov	r3, r1
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	440b      	add	r3, r1
 8005fce:	0099      	lsls	r1, r3, #2
 8005fd0:	440b      	add	r3, r1
 8005fd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fdc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005fe0:	6879      	ldr	r1, [r7, #4]
 8005fe2:	6809      	ldr	r1, [r1, #0]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	69da      	ldr	r2, [r3, #28]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	430a      	orrs	r2, r1
 8006002:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800600e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	6911      	ldr	r1, [r2, #16]
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	68d2      	ldr	r2, [r2, #12]
 800601a:	4311      	orrs	r1, r2
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	6812      	ldr	r2, [r2, #0]
 8006020:	430b      	orrs	r3, r1
 8006022:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	695a      	ldr	r2, [r3, #20]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	431a      	orrs	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	430a      	orrs	r2, r1
 800603e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f042 0201 	orr.w	r2, r2, #1
 800604e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2220      	movs	r2, #32
 800605a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	000186a0 	.word	0x000186a0
 800607c:	001e847f 	.word	0x001e847f
 8006080:	003d08ff 	.word	0x003d08ff
 8006084:	431bde83 	.word	0x431bde83
 8006088:	10624dd3 	.word	0x10624dd3

0800608c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b088      	sub	sp, #32
 8006090:	af02      	add	r7, sp, #8
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	607a      	str	r2, [r7, #4]
 8006096:	461a      	mov	r2, r3
 8006098:	460b      	mov	r3, r1
 800609a:	817b      	strh	r3, [r7, #10]
 800609c:	4613      	mov	r3, r2
 800609e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80060a0:	f7fe fa80 	bl	80045a4 <HAL_GetTick>
 80060a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b20      	cmp	r3, #32
 80060b0:	f040 80e0 	bne.w	8006274 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	9300      	str	r3, [sp, #0]
 80060b8:	2319      	movs	r3, #25
 80060ba:	2201      	movs	r2, #1
 80060bc:	4970      	ldr	r1, [pc, #448]	@ (8006280 <HAL_I2C_Master_Transmit+0x1f4>)
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f003 f818 	bl	80090f4 <I2C_WaitOnFlagUntilTimeout>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d001      	beq.n	80060ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80060ca:	2302      	movs	r3, #2
 80060cc:	e0d3      	b.n	8006276 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d101      	bne.n	80060dc <HAL_I2C_Master_Transmit+0x50>
 80060d8:	2302      	movs	r3, #2
 80060da:	e0cc      	b.n	8006276 <HAL_I2C_Master_Transmit+0x1ea>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0301 	and.w	r3, r3, #1
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d007      	beq.n	8006102 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f042 0201 	orr.w	r2, r2, #1
 8006100:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006110:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2221      	movs	r2, #33	@ 0x21
 8006116:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2210      	movs	r2, #16
 800611e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	893a      	ldrh	r2, [r7, #8]
 8006132:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006138:	b29a      	uxth	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	4a50      	ldr	r2, [pc, #320]	@ (8006284 <HAL_I2C_Master_Transmit+0x1f8>)
 8006142:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006144:	8979      	ldrh	r1, [r7, #10]
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	6a3a      	ldr	r2, [r7, #32]
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f002 fb4a 	bl	80087e4 <I2C_MasterRequestWrite>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d001      	beq.n	800615a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e08d      	b.n	8006276 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800615a:	2300      	movs	r3, #0
 800615c:	613b      	str	r3, [r7, #16]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	613b      	str	r3, [r7, #16]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	613b      	str	r3, [r7, #16]
 800616e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006170:	e066      	b.n	8006240 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	6a39      	ldr	r1, [r7, #32]
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f003 f892 	bl	80092a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00d      	beq.n	800619e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006186:	2b04      	cmp	r3, #4
 8006188:	d107      	bne.n	800619a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006198:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e06b      	b.n	8006276 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a2:	781a      	ldrb	r2, [r3, #0]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ae:	1c5a      	adds	r2, r3, #1
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	3b01      	subs	r3, #1
 80061bc:	b29a      	uxth	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061c6:	3b01      	subs	r3, #1
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	f003 0304 	and.w	r3, r3, #4
 80061d8:	2b04      	cmp	r3, #4
 80061da:	d11b      	bne.n	8006214 <HAL_I2C_Master_Transmit+0x188>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d017      	beq.n	8006214 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e8:	781a      	ldrb	r2, [r3, #0]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f4:	1c5a      	adds	r2, r3, #1
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061fe:	b29b      	uxth	r3, r3
 8006200:	3b01      	subs	r3, #1
 8006202:	b29a      	uxth	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800620c:	3b01      	subs	r3, #1
 800620e:	b29a      	uxth	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006214:	697a      	ldr	r2, [r7, #20]
 8006216:	6a39      	ldr	r1, [r7, #32]
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f003 f882 	bl	8009322 <I2C_WaitOnBTFFlagUntilTimeout>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00d      	beq.n	8006240 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006228:	2b04      	cmp	r3, #4
 800622a:	d107      	bne.n	800623c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800623a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e01a      	b.n	8006276 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006244:	2b00      	cmp	r3, #0
 8006246:	d194      	bne.n	8006172 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006256:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2220      	movs	r2, #32
 800625c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006270:	2300      	movs	r3, #0
 8006272:	e000      	b.n	8006276 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006274:	2302      	movs	r3, #2
  }
}
 8006276:	4618      	mov	r0, r3
 8006278:	3718      	adds	r7, #24
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	00100002 	.word	0x00100002
 8006284:	ffff0000 	.word	0xffff0000

08006288 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b08c      	sub	sp, #48	@ 0x30
 800628c:	af02      	add	r7, sp, #8
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	607a      	str	r2, [r7, #4]
 8006292:	461a      	mov	r2, r3
 8006294:	460b      	mov	r3, r1
 8006296:	817b      	strh	r3, [r7, #10]
 8006298:	4613      	mov	r3, r2
 800629a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800629c:	f7fe f982 	bl	80045a4 <HAL_GetTick>
 80062a0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b20      	cmp	r3, #32
 80062ac:	f040 820b 	bne.w	80066c6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b2:	9300      	str	r3, [sp, #0]
 80062b4:	2319      	movs	r3, #25
 80062b6:	2201      	movs	r2, #1
 80062b8:	497c      	ldr	r1, [pc, #496]	@ (80064ac <HAL_I2C_Master_Receive+0x224>)
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f002 ff1a 	bl	80090f4 <I2C_WaitOnFlagUntilTimeout>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d001      	beq.n	80062ca <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80062c6:	2302      	movs	r3, #2
 80062c8:	e1fe      	b.n	80066c8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d101      	bne.n	80062d8 <HAL_I2C_Master_Receive+0x50>
 80062d4:	2302      	movs	r3, #2
 80062d6:	e1f7      	b.n	80066c8 <HAL_I2C_Master_Receive+0x440>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d007      	beq.n	80062fe <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f042 0201 	orr.w	r2, r2, #1
 80062fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800630c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2222      	movs	r2, #34	@ 0x22
 8006312:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2210      	movs	r2, #16
 800631a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	893a      	ldrh	r2, [r7, #8]
 800632e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006334:	b29a      	uxth	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	4a5c      	ldr	r2, [pc, #368]	@ (80064b0 <HAL_I2C_Master_Receive+0x228>)
 800633e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006340:	8979      	ldrh	r1, [r7, #10]
 8006342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006344:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f002 face 	bl	80088e8 <I2C_MasterRequestRead>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d001      	beq.n	8006356 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e1b8      	b.n	80066c8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800635a:	2b00      	cmp	r3, #0
 800635c:	d113      	bne.n	8006386 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800635e:	2300      	movs	r3, #0
 8006360:	623b      	str	r3, [r7, #32]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	695b      	ldr	r3, [r3, #20]
 8006368:	623b      	str	r3, [r7, #32]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	623b      	str	r3, [r7, #32]
 8006372:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006382:	601a      	str	r2, [r3, #0]
 8006384:	e18c      	b.n	80066a0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800638a:	2b01      	cmp	r3, #1
 800638c:	d11b      	bne.n	80063c6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800639c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800639e:	2300      	movs	r3, #0
 80063a0:	61fb      	str	r3, [r7, #28]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	61fb      	str	r3, [r7, #28]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	61fb      	str	r3, [r7, #28]
 80063b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063c2:	601a      	str	r2, [r3, #0]
 80063c4:	e16c      	b.n	80066a0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d11b      	bne.n	8006406 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063ee:	2300      	movs	r3, #0
 80063f0:	61bb      	str	r3, [r7, #24]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	61bb      	str	r3, [r7, #24]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	61bb      	str	r3, [r7, #24]
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	e14c      	b.n	80066a0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006414:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006416:	2300      	movs	r3, #0
 8006418:	617b      	str	r3, [r7, #20]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	695b      	ldr	r3, [r3, #20]
 8006420:	617b      	str	r3, [r7, #20]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	617b      	str	r3, [r7, #20]
 800642a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800642c:	e138      	b.n	80066a0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006432:	2b03      	cmp	r3, #3
 8006434:	f200 80f1 	bhi.w	800661a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800643c:	2b01      	cmp	r3, #1
 800643e:	d123      	bne.n	8006488 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006440:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006442:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f002 ffdf 	bl	8009408 <I2C_WaitOnRXNEFlagUntilTimeout>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d001      	beq.n	8006454 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e139      	b.n	80066c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	691a      	ldr	r2, [r3, #16]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800645e:	b2d2      	uxtb	r2, r2
 8006460:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006466:	1c5a      	adds	r2, r3, #1
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006470:	3b01      	subs	r3, #1
 8006472:	b29a      	uxth	r2, r3
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800647c:	b29b      	uxth	r3, r3
 800647e:	3b01      	subs	r3, #1
 8006480:	b29a      	uxth	r2, r3
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006486:	e10b      	b.n	80066a0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800648c:	2b02      	cmp	r3, #2
 800648e:	d14e      	bne.n	800652e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006492:	9300      	str	r3, [sp, #0]
 8006494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006496:	2200      	movs	r2, #0
 8006498:	4906      	ldr	r1, [pc, #24]	@ (80064b4 <HAL_I2C_Master_Receive+0x22c>)
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f002 fe2a 	bl	80090f4 <I2C_WaitOnFlagUntilTimeout>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d008      	beq.n	80064b8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e10e      	b.n	80066c8 <HAL_I2C_Master_Receive+0x440>
 80064aa:	bf00      	nop
 80064ac:	00100002 	.word	0x00100002
 80064b0:	ffff0000 	.word	0xffff0000
 80064b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	691a      	ldr	r2, [r3, #16]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d2:	b2d2      	uxtb	r2, r2
 80064d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064da:	1c5a      	adds	r2, r3, #1
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064e4:	3b01      	subs	r3, #1
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	3b01      	subs	r3, #1
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	691a      	ldr	r2, [r3, #16]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006504:	b2d2      	uxtb	r2, r2
 8006506:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800650c:	1c5a      	adds	r2, r3, #1
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006516:	3b01      	subs	r3, #1
 8006518:	b29a      	uxth	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006522:	b29b      	uxth	r3, r3
 8006524:	3b01      	subs	r3, #1
 8006526:	b29a      	uxth	r2, r3
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800652c:	e0b8      	b.n	80066a0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800652e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006534:	2200      	movs	r2, #0
 8006536:	4966      	ldr	r1, [pc, #408]	@ (80066d0 <HAL_I2C_Master_Receive+0x448>)
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f002 fddb 	bl	80090f4 <I2C_WaitOnFlagUntilTimeout>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d001      	beq.n	8006548 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e0bf      	b.n	80066c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006556:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	691a      	ldr	r2, [r3, #16]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006562:	b2d2      	uxtb	r2, r2
 8006564:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800656a:	1c5a      	adds	r2, r3, #1
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006574:	3b01      	subs	r3, #1
 8006576:	b29a      	uxth	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006580:	b29b      	uxth	r3, r3
 8006582:	3b01      	subs	r3, #1
 8006584:	b29a      	uxth	r2, r3
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800658a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800658c:	9300      	str	r3, [sp, #0]
 800658e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006590:	2200      	movs	r2, #0
 8006592:	494f      	ldr	r1, [pc, #316]	@ (80066d0 <HAL_I2C_Master_Receive+0x448>)
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f002 fdad 	bl	80090f4 <I2C_WaitOnFlagUntilTimeout>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d001      	beq.n	80065a4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e091      	b.n	80066c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	691a      	ldr	r2, [r3, #16]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065be:	b2d2      	uxtb	r2, r2
 80065c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c6:	1c5a      	adds	r2, r3, #1
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065d0:	3b01      	subs	r3, #1
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065dc:	b29b      	uxth	r3, r3
 80065de:	3b01      	subs	r3, #1
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	691a      	ldr	r2, [r3, #16]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f0:	b2d2      	uxtb	r2, r2
 80065f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f8:	1c5a      	adds	r2, r3, #1
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006602:	3b01      	subs	r3, #1
 8006604:	b29a      	uxth	r2, r3
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800660e:	b29b      	uxth	r3, r3
 8006610:	3b01      	subs	r3, #1
 8006612:	b29a      	uxth	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006618:	e042      	b.n	80066a0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800661a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800661c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f002 fef2 	bl	8009408 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d001      	beq.n	800662e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e04c      	b.n	80066c8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	691a      	ldr	r2, [r3, #16]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006638:	b2d2      	uxtb	r2, r2
 800663a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006640:	1c5a      	adds	r2, r3, #1
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800664a:	3b01      	subs	r3, #1
 800664c:	b29a      	uxth	r2, r3
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006656:	b29b      	uxth	r3, r3
 8006658:	3b01      	subs	r3, #1
 800665a:	b29a      	uxth	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	695b      	ldr	r3, [r3, #20]
 8006666:	f003 0304 	and.w	r3, r3, #4
 800666a:	2b04      	cmp	r3, #4
 800666c:	d118      	bne.n	80066a0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	691a      	ldr	r2, [r3, #16]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006678:	b2d2      	uxtb	r2, r2
 800667a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006680:	1c5a      	adds	r2, r3, #1
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800668a:	3b01      	subs	r3, #1
 800668c:	b29a      	uxth	r2, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006696:	b29b      	uxth	r3, r3
 8006698:	3b01      	subs	r3, #1
 800669a:	b29a      	uxth	r2, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f47f aec2 	bne.w	800642e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2220      	movs	r2, #32
 80066ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80066c2:	2300      	movs	r3, #0
 80066c4:	e000      	b.n	80066c8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80066c6:	2302      	movs	r3, #2
  }
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3728      	adds	r7, #40	@ 0x28
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	00010004 	.word	0x00010004

080066d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b088      	sub	sp, #32
 80066d8:	af02      	add	r7, sp, #8
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	4608      	mov	r0, r1
 80066de:	4611      	mov	r1, r2
 80066e0:	461a      	mov	r2, r3
 80066e2:	4603      	mov	r3, r0
 80066e4:	817b      	strh	r3, [r7, #10]
 80066e6:	460b      	mov	r3, r1
 80066e8:	813b      	strh	r3, [r7, #8]
 80066ea:	4613      	mov	r3, r2
 80066ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80066ee:	f7fd ff59 	bl	80045a4 <HAL_GetTick>
 80066f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	2b20      	cmp	r3, #32
 80066fe:	f040 80d9 	bne.w	80068b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	2319      	movs	r3, #25
 8006708:	2201      	movs	r2, #1
 800670a:	496d      	ldr	r1, [pc, #436]	@ (80068c0 <HAL_I2C_Mem_Write+0x1ec>)
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f002 fcf1 	bl	80090f4 <I2C_WaitOnFlagUntilTimeout>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d001      	beq.n	800671c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006718:	2302      	movs	r3, #2
 800671a:	e0cc      	b.n	80068b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006722:	2b01      	cmp	r3, #1
 8006724:	d101      	bne.n	800672a <HAL_I2C_Mem_Write+0x56>
 8006726:	2302      	movs	r3, #2
 8006728:	e0c5      	b.n	80068b6 <HAL_I2C_Mem_Write+0x1e2>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0301 	and.w	r3, r3, #1
 800673c:	2b01      	cmp	r3, #1
 800673e:	d007      	beq.n	8006750 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f042 0201 	orr.w	r2, r2, #1
 800674e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800675e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2221      	movs	r2, #33	@ 0x21
 8006764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2240      	movs	r2, #64	@ 0x40
 800676c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6a3a      	ldr	r2, [r7, #32]
 800677a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006780:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006786:	b29a      	uxth	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4a4d      	ldr	r2, [pc, #308]	@ (80068c4 <HAL_I2C_Mem_Write+0x1f0>)
 8006790:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006792:	88f8      	ldrh	r0, [r7, #6]
 8006794:	893a      	ldrh	r2, [r7, #8]
 8006796:	8979      	ldrh	r1, [r7, #10]
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	9301      	str	r3, [sp, #4]
 800679c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	4603      	mov	r3, r0
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f002 f96e 	bl	8008a84 <I2C_RequestMemoryWrite>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d052      	beq.n	8006854 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e081      	b.n	80068b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f002 fd72 	bl	80092a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00d      	beq.n	80067de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067c6:	2b04      	cmp	r3, #4
 80067c8:	d107      	bne.n	80067da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e06b      	b.n	80068b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e2:	781a      	ldrb	r2, [r3, #0]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ee:	1c5a      	adds	r2, r3, #1
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067f8:	3b01      	subs	r3, #1
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006804:	b29b      	uxth	r3, r3
 8006806:	3b01      	subs	r3, #1
 8006808:	b29a      	uxth	r2, r3
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	f003 0304 	and.w	r3, r3, #4
 8006818:	2b04      	cmp	r3, #4
 800681a:	d11b      	bne.n	8006854 <HAL_I2C_Mem_Write+0x180>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006820:	2b00      	cmp	r3, #0
 8006822:	d017      	beq.n	8006854 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006828:	781a      	ldrb	r2, [r3, #0]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006834:	1c5a      	adds	r2, r3, #1
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800683e:	3b01      	subs	r3, #1
 8006840:	b29a      	uxth	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800684a:	b29b      	uxth	r3, r3
 800684c:	3b01      	subs	r3, #1
 800684e:	b29a      	uxth	r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1aa      	bne.n	80067b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800685c:	697a      	ldr	r2, [r7, #20]
 800685e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f002 fd5e 	bl	8009322 <I2C_WaitOnBTFFlagUntilTimeout>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00d      	beq.n	8006888 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006870:	2b04      	cmp	r3, #4
 8006872:	d107      	bne.n	8006884 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006882:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e016      	b.n	80068b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006896:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2220      	movs	r2, #32
 800689c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80068b0:	2300      	movs	r3, #0
 80068b2:	e000      	b.n	80068b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80068b4:	2302      	movs	r3, #2
  }
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3718      	adds	r7, #24
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	00100002 	.word	0x00100002
 80068c4:	ffff0000 	.word	0xffff0000

080068c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b08c      	sub	sp, #48	@ 0x30
 80068cc:	af02      	add	r7, sp, #8
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	4608      	mov	r0, r1
 80068d2:	4611      	mov	r1, r2
 80068d4:	461a      	mov	r2, r3
 80068d6:	4603      	mov	r3, r0
 80068d8:	817b      	strh	r3, [r7, #10]
 80068da:	460b      	mov	r3, r1
 80068dc:	813b      	strh	r3, [r7, #8]
 80068de:	4613      	mov	r3, r2
 80068e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80068e2:	f7fd fe5f 	bl	80045a4 <HAL_GetTick>
 80068e6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	2b20      	cmp	r3, #32
 80068f2:	f040 8208 	bne.w	8006d06 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80068f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	2319      	movs	r3, #25
 80068fc:	2201      	movs	r2, #1
 80068fe:	497b      	ldr	r1, [pc, #492]	@ (8006aec <HAL_I2C_Mem_Read+0x224>)
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f002 fbf7 	bl	80090f4 <I2C_WaitOnFlagUntilTimeout>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d001      	beq.n	8006910 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800690c:	2302      	movs	r3, #2
 800690e:	e1fb      	b.n	8006d08 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006916:	2b01      	cmp	r3, #1
 8006918:	d101      	bne.n	800691e <HAL_I2C_Mem_Read+0x56>
 800691a:	2302      	movs	r3, #2
 800691c:	e1f4      	b.n	8006d08 <HAL_I2C_Mem_Read+0x440>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0301 	and.w	r3, r3, #1
 8006930:	2b01      	cmp	r3, #1
 8006932:	d007      	beq.n	8006944 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f042 0201 	orr.w	r2, r2, #1
 8006942:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006952:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2222      	movs	r2, #34	@ 0x22
 8006958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2240      	movs	r2, #64	@ 0x40
 8006960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800696e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006974:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800697a:	b29a      	uxth	r2, r3
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	4a5b      	ldr	r2, [pc, #364]	@ (8006af0 <HAL_I2C_Mem_Read+0x228>)
 8006984:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006986:	88f8      	ldrh	r0, [r7, #6]
 8006988:	893a      	ldrh	r2, [r7, #8]
 800698a:	8979      	ldrh	r1, [r7, #10]
 800698c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800698e:	9301      	str	r3, [sp, #4]
 8006990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006992:	9300      	str	r3, [sp, #0]
 8006994:	4603      	mov	r3, r0
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	f002 f90a 	bl	8008bb0 <I2C_RequestMemoryRead>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d001      	beq.n	80069a6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e1b0      	b.n	8006d08 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d113      	bne.n	80069d6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069ae:	2300      	movs	r3, #0
 80069b0:	623b      	str	r3, [r7, #32]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	695b      	ldr	r3, [r3, #20]
 80069b8:	623b      	str	r3, [r7, #32]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	623b      	str	r3, [r7, #32]
 80069c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069d2:	601a      	str	r2, [r3, #0]
 80069d4:	e184      	b.n	8006ce0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d11b      	bne.n	8006a16 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069ee:	2300      	movs	r3, #0
 80069f0:	61fb      	str	r3, [r7, #28]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	695b      	ldr	r3, [r3, #20]
 80069f8:	61fb      	str	r3, [r7, #28]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	61fb      	str	r3, [r7, #28]
 8006a02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a12:	601a      	str	r2, [r3, #0]
 8006a14:	e164      	b.n	8006ce0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d11b      	bne.n	8006a56 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a2c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a3e:	2300      	movs	r3, #0
 8006a40:	61bb      	str	r3, [r7, #24]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	61bb      	str	r3, [r7, #24]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	61bb      	str	r3, [r7, #24]
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	e144      	b.n	8006ce0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a56:	2300      	movs	r3, #0
 8006a58:	617b      	str	r3, [r7, #20]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	695b      	ldr	r3, [r3, #20]
 8006a60:	617b      	str	r3, [r7, #20]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	617b      	str	r3, [r7, #20]
 8006a6a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006a6c:	e138      	b.n	8006ce0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a72:	2b03      	cmp	r3, #3
 8006a74:	f200 80f1 	bhi.w	8006c5a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d123      	bne.n	8006ac8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a82:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f002 fcbf 	bl	8009408 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d001      	beq.n	8006a94 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e139      	b.n	8006d08 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	691a      	ldr	r2, [r3, #16]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a9e:	b2d2      	uxtb	r2, r2
 8006aa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa6:	1c5a      	adds	r2, r3, #1
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006ac6:	e10b      	b.n	8006ce0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d14e      	bne.n	8006b6e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	4906      	ldr	r1, [pc, #24]	@ (8006af4 <HAL_I2C_Mem_Read+0x22c>)
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f002 fb0a 	bl	80090f4 <I2C_WaitOnFlagUntilTimeout>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d008      	beq.n	8006af8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e10e      	b.n	8006d08 <HAL_I2C_Mem_Read+0x440>
 8006aea:	bf00      	nop
 8006aec:	00100002 	.word	0x00100002
 8006af0:	ffff0000 	.word	0xffff0000
 8006af4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	691a      	ldr	r2, [r3, #16]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b12:	b2d2      	uxtb	r2, r2
 8006b14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b1a:	1c5a      	adds	r2, r3, #1
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b24:	3b01      	subs	r3, #1
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	3b01      	subs	r3, #1
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	691a      	ldr	r2, [r3, #16]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b44:	b2d2      	uxtb	r2, r2
 8006b46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b4c:	1c5a      	adds	r2, r3, #1
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b56:	3b01      	subs	r3, #1
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	3b01      	subs	r3, #1
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006b6c:	e0b8      	b.n	8006ce0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b74:	2200      	movs	r2, #0
 8006b76:	4966      	ldr	r1, [pc, #408]	@ (8006d10 <HAL_I2C_Mem_Read+0x448>)
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f002 fabb 	bl	80090f4 <I2C_WaitOnFlagUntilTimeout>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d001      	beq.n	8006b88 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e0bf      	b.n	8006d08 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	691a      	ldr	r2, [r3, #16]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ba2:	b2d2      	uxtb	r2, r2
 8006ba4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006baa:	1c5a      	adds	r2, r3, #1
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bcc:	9300      	str	r3, [sp, #0]
 8006bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	494f      	ldr	r1, [pc, #316]	@ (8006d10 <HAL_I2C_Mem_Read+0x448>)
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	f002 fa8d 	bl	80090f4 <I2C_WaitOnFlagUntilTimeout>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d001      	beq.n	8006be4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e091      	b.n	8006d08 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	691a      	ldr	r2, [r3, #16]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bfe:	b2d2      	uxtb	r2, r2
 8006c00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c06:	1c5a      	adds	r2, r3, #1
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c10:	3b01      	subs	r3, #1
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	691a      	ldr	r2, [r3, #16]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c30:	b2d2      	uxtb	r2, r2
 8006c32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c38:	1c5a      	adds	r2, r3, #1
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c42:	3b01      	subs	r3, #1
 8006c44:	b29a      	uxth	r2, r3
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	3b01      	subs	r3, #1
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006c58:	e042      	b.n	8006ce0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c5c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f002 fbd2 	bl	8009408 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d001      	beq.n	8006c6e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e04c      	b.n	8006d08 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	691a      	ldr	r2, [r3, #16]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c78:	b2d2      	uxtb	r2, r2
 8006c7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c80:	1c5a      	adds	r2, r3, #1
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	f003 0304 	and.w	r3, r3, #4
 8006caa:	2b04      	cmp	r3, #4
 8006cac:	d118      	bne.n	8006ce0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	691a      	ldr	r2, [r3, #16]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cb8:	b2d2      	uxtb	r2, r2
 8006cba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc0:	1c5a      	adds	r2, r3, #1
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	b29a      	uxth	r2, r3
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f47f aec2 	bne.w	8006a6e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2220      	movs	r2, #32
 8006cee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006d02:	2300      	movs	r3, #0
 8006d04:	e000      	b.n	8006d08 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006d06:	2302      	movs	r3, #2
  }
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3728      	adds	r7, #40	@ 0x28
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	00010004 	.word	0x00010004

08006d14 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b08c      	sub	sp, #48	@ 0x30
 8006d18:	af02      	add	r7, sp, #8
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	4608      	mov	r0, r1
 8006d1e:	4611      	mov	r1, r2
 8006d20:	461a      	mov	r2, r3
 8006d22:	4603      	mov	r3, r0
 8006d24:	817b      	strh	r3, [r7, #10]
 8006d26:	460b      	mov	r3, r1
 8006d28:	813b      	strh	r3, [r7, #8]
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006d2e:	f7fd fc39 	bl	80045a4 <HAL_GetTick>
 8006d32:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8006d34:	2300      	movs	r3, #0
 8006d36:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	2b20      	cmp	r3, #32
 8006d42:	f040 8176 	bne.w	8007032 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006d46:	4b95      	ldr	r3, [pc, #596]	@ (8006f9c <HAL_I2C_Mem_Read_DMA+0x288>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	08db      	lsrs	r3, r3, #3
 8006d4c:	4a94      	ldr	r2, [pc, #592]	@ (8006fa0 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8006d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d52:	0a1a      	lsrs	r2, r3, #8
 8006d54:	4613      	mov	r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	4413      	add	r3, r2
 8006d5a:	009a      	lsls	r2, r3, #2
 8006d5c:	4413      	add	r3, r2
 8006d5e:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	3b01      	subs	r3, #1
 8006d64:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d116      	bne.n	8006d9a <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2220      	movs	r2, #32
 8006d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d86:	f043 0220 	orr.w	r2, r3, #32
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e14c      	b.n	8007034 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	f003 0302 	and.w	r3, r3, #2
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	d0db      	beq.n	8006d60 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d101      	bne.n	8006db6 <HAL_I2C_Mem_Read_DMA+0xa2>
 8006db2:	2302      	movs	r3, #2
 8006db4:	e13e      	b.n	8007034 <HAL_I2C_Mem_Read_DMA+0x320>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0301 	and.w	r3, r3, #1
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d007      	beq.n	8006ddc <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f042 0201 	orr.w	r2, r2, #1
 8006dda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006dea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2222      	movs	r2, #34	@ 0x22
 8006df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2240      	movs	r2, #64	@ 0x40
 8006df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e06:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006e0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	4a62      	ldr	r2, [pc, #392]	@ (8006fa4 <HAL_I2C_Mem_Read_DMA+0x290>)
 8006e1c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8006e1e:	897a      	ldrh	r2, [r7, #10]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8006e24:	893a      	ldrh	r2, [r7, #8]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8006e2a:	88fa      	ldrh	r2, [r7, #6]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f000 80cc 	beq.w	8006fd8 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d02d      	beq.n	8006ea4 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e4c:	4a56      	ldr	r2, [pc, #344]	@ (8006fa8 <HAL_I2C_Mem_Read_DMA+0x294>)
 8006e4e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e54:	4a55      	ldr	r2, [pc, #340]	@ (8006fac <HAL_I2C_Mem_Read_DMA+0x298>)
 8006e56:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e64:	2200      	movs	r2, #0
 8006e66:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e74:	2200      	movs	r2, #0
 8006e76:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	3310      	adds	r3, #16
 8006e82:	4619      	mov	r1, r3
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e88:	461a      	mov	r2, r3
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e8e:	f7fe fa85 	bl	800539c <HAL_DMA_Start_IT>
 8006e92:	4603      	mov	r3, r0
 8006e94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8006e98:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f040 8087 	bne.w	8006fb0 <HAL_I2C_Mem_Read_DMA+0x29c>
 8006ea2:	e013      	b.n	8006ecc <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2220      	movs	r2, #32
 8006ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eb8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e0b3      	b.n	8007034 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006ecc:	88f8      	ldrh	r0, [r7, #6]
 8006ece:	893a      	ldrh	r2, [r7, #8]
 8006ed0:	8979      	ldrh	r1, [r7, #10]
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed4:	9301      	str	r3, [sp, #4]
 8006ed6:	2323      	movs	r3, #35	@ 0x23
 8006ed8:	9300      	str	r3, [sp, #0]
 8006eda:	4603      	mov	r3, r0
 8006edc:	68f8      	ldr	r0, [r7, #12]
 8006ede:	f001 fe67 	bl	8008bb0 <I2C_RequestMemoryRead>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d023      	beq.n	8006f30 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7fe fb1d 	bl	800552c <HAL_DMA_Abort_IT>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006efc:	2200      	movs	r2, #0
 8006efe:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f0e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2200      	movs	r2, #0
 8006f14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f022 0201 	bic.w	r2, r2, #1
 8006f2a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e081      	b.n	8007034 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d108      	bne.n	8006f4a <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f46:	601a      	str	r2, [r3, #0]
 8006f48:	e007      	b.n	8006f5a <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	685a      	ldr	r2, [r3, #4]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006f58:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	61bb      	str	r3, [r7, #24]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	695b      	ldr	r3, [r3, #20]
 8006f64:	61bb      	str	r3, [r7, #24]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	699b      	ldr	r3, [r3, #24]
 8006f6c:	61bb      	str	r3, [r7, #24]
 8006f6e:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	685a      	ldr	r2, [r3, #4]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f86:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	685a      	ldr	r2, [r3, #4]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f96:	605a      	str	r2, [r3, #4]
 8006f98:	e049      	b.n	800702e <HAL_I2C_Mem_Read_DMA+0x31a>
 8006f9a:	bf00      	nop
 8006f9c:	20000004 	.word	0x20000004
 8006fa0:	14f8b589 	.word	0x14f8b589
 8006fa4:	ffff0000 	.word	0xffff0000
 8006fa8:	08008d81 	.word	0x08008d81
 8006fac:	08008f2b 	.word	0x08008f2b
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2220      	movs	r2, #32
 8006fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fc4:	f043 0210 	orr.w	r2, r3, #16
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e02d      	b.n	8007034 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006fd8:	88f8      	ldrh	r0, [r7, #6]
 8006fda:	893a      	ldrh	r2, [r7, #8]
 8006fdc:	8979      	ldrh	r1, [r7, #10]
 8006fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe0:	9301      	str	r3, [sp, #4]
 8006fe2:	2323      	movs	r3, #35	@ 0x23
 8006fe4:	9300      	str	r3, [sp, #0]
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f001 fde1 	bl	8008bb0 <I2C_RequestMemoryRead>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e01d      	b.n	8007034 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	617b      	str	r3, [r7, #20]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	617b      	str	r3, [r7, #20]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	699b      	ldr	r3, [r3, #24]
 800700a:	617b      	str	r3, [r7, #20]
 800700c:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800701c:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2220      	movs	r2, #32
 8007022:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 800702e:	2300      	movs	r3, #0
 8007030:	e000      	b.n	8007034 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 8007032:	2302      	movs	r3, #2
  }
}
 8007034:	4618      	mov	r0, r3
 8007036:	3728      	adds	r7, #40	@ 0x28
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b08a      	sub	sp, #40	@ 0x28
 8007040:	af02      	add	r7, sp, #8
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	607a      	str	r2, [r7, #4]
 8007046:	603b      	str	r3, [r7, #0]
 8007048:	460b      	mov	r3, r1
 800704a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800704c:	f7fd faaa 	bl	80045a4 <HAL_GetTick>
 8007050:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8007052:	2300      	movs	r3, #0
 8007054:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800705c:	b2db      	uxtb	r3, r3
 800705e:	2b20      	cmp	r3, #32
 8007060:	f040 8111 	bne.w	8007286 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	9300      	str	r3, [sp, #0]
 8007068:	2319      	movs	r3, #25
 800706a:	2201      	movs	r2, #1
 800706c:	4988      	ldr	r1, [pc, #544]	@ (8007290 <HAL_I2C_IsDeviceReady+0x254>)
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f002 f840 	bl	80090f4 <I2C_WaitOnFlagUntilTimeout>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d001      	beq.n	800707e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800707a:	2302      	movs	r3, #2
 800707c:	e104      	b.n	8007288 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007084:	2b01      	cmp	r3, #1
 8007086:	d101      	bne.n	800708c <HAL_I2C_IsDeviceReady+0x50>
 8007088:	2302      	movs	r3, #2
 800708a:	e0fd      	b.n	8007288 <HAL_I2C_IsDeviceReady+0x24c>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d007      	beq.n	80070b2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f042 0201 	orr.w	r2, r2, #1
 80070b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80070c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2224      	movs	r2, #36	@ 0x24
 80070c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	4a70      	ldr	r2, [pc, #448]	@ (8007294 <HAL_I2C_IsDeviceReady+0x258>)
 80070d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80070e4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	9300      	str	r3, [sp, #0]
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	f001 fffe 	bl	80090f4 <I2C_WaitOnFlagUntilTimeout>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00d      	beq.n	800711a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007108:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800710c:	d103      	bne.n	8007116 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007114:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e0b6      	b.n	8007288 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800711a:	897b      	ldrh	r3, [r7, #10]
 800711c:	b2db      	uxtb	r3, r3
 800711e:	461a      	mov	r2, r3
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007128:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800712a:	f7fd fa3b 	bl	80045a4 <HAL_GetTick>
 800712e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	f003 0302 	and.w	r3, r3, #2
 800713a:	2b02      	cmp	r3, #2
 800713c:	bf0c      	ite	eq
 800713e:	2301      	moveq	r3, #1
 8007140:	2300      	movne	r3, #0
 8007142:	b2db      	uxtb	r3, r3
 8007144:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	695b      	ldr	r3, [r3, #20]
 800714c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007150:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007154:	bf0c      	ite	eq
 8007156:	2301      	moveq	r3, #1
 8007158:	2300      	movne	r3, #0
 800715a:	b2db      	uxtb	r3, r3
 800715c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800715e:	e025      	b.n	80071ac <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007160:	f7fd fa20 	bl	80045a4 <HAL_GetTick>
 8007164:	4602      	mov	r2, r0
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	683a      	ldr	r2, [r7, #0]
 800716c:	429a      	cmp	r2, r3
 800716e:	d302      	bcc.n	8007176 <HAL_I2C_IsDeviceReady+0x13a>
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d103      	bne.n	800717e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	22a0      	movs	r2, #160	@ 0xa0
 800717a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	695b      	ldr	r3, [r3, #20]
 8007184:	f003 0302 	and.w	r3, r3, #2
 8007188:	2b02      	cmp	r3, #2
 800718a:	bf0c      	ite	eq
 800718c:	2301      	moveq	r3, #1
 800718e:	2300      	movne	r3, #0
 8007190:	b2db      	uxtb	r3, r3
 8007192:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	695b      	ldr	r3, [r3, #20]
 800719a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800719e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071a2:	bf0c      	ite	eq
 80071a4:	2301      	moveq	r3, #1
 80071a6:	2300      	movne	r3, #0
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2ba0      	cmp	r3, #160	@ 0xa0
 80071b6:	d005      	beq.n	80071c4 <HAL_I2C_IsDeviceReady+0x188>
 80071b8:	7dfb      	ldrb	r3, [r7, #23]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d102      	bne.n	80071c4 <HAL_I2C_IsDeviceReady+0x188>
 80071be:	7dbb      	ldrb	r3, [r7, #22]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d0cd      	beq.n	8007160 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2220      	movs	r2, #32
 80071c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	f003 0302 	and.w	r3, r3, #2
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	d129      	bne.n	800722e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071e8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071ea:	2300      	movs	r3, #0
 80071ec:	613b      	str	r3, [r7, #16]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	695b      	ldr	r3, [r3, #20]
 80071f4:	613b      	str	r3, [r7, #16]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	613b      	str	r3, [r7, #16]
 80071fe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	9300      	str	r3, [sp, #0]
 8007204:	2319      	movs	r3, #25
 8007206:	2201      	movs	r2, #1
 8007208:	4921      	ldr	r1, [pc, #132]	@ (8007290 <HAL_I2C_IsDeviceReady+0x254>)
 800720a:	68f8      	ldr	r0, [r7, #12]
 800720c:	f001 ff72 	bl	80090f4 <I2C_WaitOnFlagUntilTimeout>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d001      	beq.n	800721a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e036      	b.n	8007288 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2220      	movs	r2, #32
 800721e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800722a:	2300      	movs	r3, #0
 800722c:	e02c      	b.n	8007288 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800723c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007246:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	9300      	str	r3, [sp, #0]
 800724c:	2319      	movs	r3, #25
 800724e:	2201      	movs	r2, #1
 8007250:	490f      	ldr	r1, [pc, #60]	@ (8007290 <HAL_I2C_IsDeviceReady+0x254>)
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f001 ff4e 	bl	80090f4 <I2C_WaitOnFlagUntilTimeout>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d001      	beq.n	8007262 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e012      	b.n	8007288 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	3301      	adds	r3, #1
 8007266:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8007268:	69ba      	ldr	r2, [r7, #24]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	429a      	cmp	r2, r3
 800726e:	f4ff af32 	bcc.w	80070d6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2220      	movs	r2, #32
 8007276:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2200      	movs	r2, #0
 800727e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e000      	b.n	8007288 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8007286:	2302      	movs	r3, #2
  }
}
 8007288:	4618      	mov	r0, r3
 800728a:	3720      	adds	r7, #32
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	00100002 	.word	0x00100002
 8007294:	ffff0000 	.word	0xffff0000

08007298 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b088      	sub	sp, #32
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80072a0:	2300      	movs	r3, #0
 80072a2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80072b8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072c0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80072c2:	7bfb      	ldrb	r3, [r7, #15]
 80072c4:	2b10      	cmp	r3, #16
 80072c6:	d003      	beq.n	80072d0 <HAL_I2C_EV_IRQHandler+0x38>
 80072c8:	7bfb      	ldrb	r3, [r7, #15]
 80072ca:	2b40      	cmp	r3, #64	@ 0x40
 80072cc:	f040 80b1 	bne.w	8007432 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	695b      	ldr	r3, [r3, #20]
 80072de:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	f003 0301 	and.w	r3, r3, #1
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d10d      	bne.n	8007306 <HAL_I2C_EV_IRQHandler+0x6e>
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80072f0:	d003      	beq.n	80072fa <HAL_I2C_EV_IRQHandler+0x62>
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80072f8:	d101      	bne.n	80072fe <HAL_I2C_EV_IRQHandler+0x66>
 80072fa:	2301      	movs	r3, #1
 80072fc:	e000      	b.n	8007300 <HAL_I2C_EV_IRQHandler+0x68>
 80072fe:	2300      	movs	r3, #0
 8007300:	2b01      	cmp	r3, #1
 8007302:	f000 8114 	beq.w	800752e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	f003 0301 	and.w	r3, r3, #1
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00b      	beq.n	8007328 <HAL_I2C_EV_IRQHandler+0x90>
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007316:	2b00      	cmp	r3, #0
 8007318:	d006      	beq.n	8007328 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f002 f8f9 	bl	8009512 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 fcb5 	bl	8007c90 <I2C_Master_SB>
 8007326:	e083      	b.n	8007430 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	f003 0308 	and.w	r3, r3, #8
 800732e:	2b00      	cmp	r3, #0
 8007330:	d008      	beq.n	8007344 <HAL_I2C_EV_IRQHandler+0xac>
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007338:	2b00      	cmp	r3, #0
 800733a:	d003      	beq.n	8007344 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 fd2d 	bl	8007d9c <I2C_Master_ADD10>
 8007342:	e075      	b.n	8007430 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	f003 0302 	and.w	r3, r3, #2
 800734a:	2b00      	cmp	r3, #0
 800734c:	d008      	beq.n	8007360 <HAL_I2C_EV_IRQHandler+0xc8>
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007354:	2b00      	cmp	r3, #0
 8007356:	d003      	beq.n	8007360 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 fd49 	bl	8007df0 <I2C_Master_ADDR>
 800735e:	e067      	b.n	8007430 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	f003 0304 	and.w	r3, r3, #4
 8007366:	2b00      	cmp	r3, #0
 8007368:	d036      	beq.n	80073d8 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007374:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007378:	f000 80db 	beq.w	8007532 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00d      	beq.n	80073a2 <HAL_I2C_EV_IRQHandler+0x10a>
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800738c:	2b00      	cmp	r3, #0
 800738e:	d008      	beq.n	80073a2 <HAL_I2C_EV_IRQHandler+0x10a>
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	f003 0304 	and.w	r3, r3, #4
 8007396:	2b00      	cmp	r3, #0
 8007398:	d103      	bne.n	80073a2 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f92d 	bl	80075fa <I2C_MasterTransmit_TXE>
 80073a0:	e046      	b.n	8007430 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	f003 0304 	and.w	r3, r3, #4
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	f000 80c2 	beq.w	8007532 <HAL_I2C_EV_IRQHandler+0x29a>
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f000 80bc 	beq.w	8007532 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80073ba:	7bbb      	ldrb	r3, [r7, #14]
 80073bc:	2b21      	cmp	r3, #33	@ 0x21
 80073be:	d103      	bne.n	80073c8 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 f9b6 	bl	8007732 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80073c6:	e0b4      	b.n	8007532 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80073c8:	7bfb      	ldrb	r3, [r7, #15]
 80073ca:	2b40      	cmp	r3, #64	@ 0x40
 80073cc:	f040 80b1 	bne.w	8007532 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 fa24 	bl	800781e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80073d6:	e0ac      	b.n	8007532 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073e6:	f000 80a4 	beq.w	8007532 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00d      	beq.n	8007410 <HAL_I2C_EV_IRQHandler+0x178>
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d008      	beq.n	8007410 <HAL_I2C_EV_IRQHandler+0x178>
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	f003 0304 	and.w	r3, r3, #4
 8007404:	2b00      	cmp	r3, #0
 8007406:	d103      	bne.n	8007410 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 fa9c 	bl	8007946 <I2C_MasterReceive_RXNE>
 800740e:	e00f      	b.n	8007430 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	f003 0304 	and.w	r3, r3, #4
 8007416:	2b00      	cmp	r3, #0
 8007418:	f000 808b 	beq.w	8007532 <HAL_I2C_EV_IRQHandler+0x29a>
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007422:	2b00      	cmp	r3, #0
 8007424:	f000 8085 	beq.w	8007532 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 fb47 	bl	8007abc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800742e:	e080      	b.n	8007532 <HAL_I2C_EV_IRQHandler+0x29a>
 8007430:	e07f      	b.n	8007532 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007436:	2b00      	cmp	r3, #0
 8007438:	d004      	beq.n	8007444 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	695b      	ldr	r3, [r3, #20]
 8007440:	61fb      	str	r3, [r7, #28]
 8007442:	e007      	b.n	8007454 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	f003 0302 	and.w	r3, r3, #2
 800745a:	2b00      	cmp	r3, #0
 800745c:	d011      	beq.n	8007482 <HAL_I2C_EV_IRQHandler+0x1ea>
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00c      	beq.n	8007482 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800746c:	2b00      	cmp	r3, #0
 800746e:	d003      	beq.n	8007478 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007478:	69b9      	ldr	r1, [r7, #24]
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 ff07 	bl	800828e <I2C_Slave_ADDR>
 8007480:	e05a      	b.n	8007538 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	f003 0310 	and.w	r3, r3, #16
 8007488:	2b00      	cmp	r3, #0
 800748a:	d008      	beq.n	800749e <HAL_I2C_EV_IRQHandler+0x206>
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007492:	2b00      	cmp	r3, #0
 8007494:	d003      	beq.n	800749e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 ff42 	bl	8008320 <I2C_Slave_STOPF>
 800749c:	e04c      	b.n	8007538 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800749e:	7bbb      	ldrb	r3, [r7, #14]
 80074a0:	2b21      	cmp	r3, #33	@ 0x21
 80074a2:	d002      	beq.n	80074aa <HAL_I2C_EV_IRQHandler+0x212>
 80074a4:	7bbb      	ldrb	r3, [r7, #14]
 80074a6:	2b29      	cmp	r3, #41	@ 0x29
 80074a8:	d120      	bne.n	80074ec <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00d      	beq.n	80074d0 <HAL_I2C_EV_IRQHandler+0x238>
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d008      	beq.n	80074d0 <HAL_I2C_EV_IRQHandler+0x238>
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	f003 0304 	and.w	r3, r3, #4
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d103      	bne.n	80074d0 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 fe22 	bl	8008112 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80074ce:	e032      	b.n	8007536 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	f003 0304 	and.w	r3, r3, #4
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d02d      	beq.n	8007536 <HAL_I2C_EV_IRQHandler+0x29e>
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d028      	beq.n	8007536 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fe51 	bl	800818c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80074ea:	e024      	b.n	8007536 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00d      	beq.n	8007512 <HAL_I2C_EV_IRQHandler+0x27a>
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d008      	beq.n	8007512 <HAL_I2C_EV_IRQHandler+0x27a>
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	f003 0304 	and.w	r3, r3, #4
 8007506:	2b00      	cmp	r3, #0
 8007508:	d103      	bne.n	8007512 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fe5f 	bl	80081ce <I2C_SlaveReceive_RXNE>
 8007510:	e012      	b.n	8007538 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	f003 0304 	and.w	r3, r3, #4
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00d      	beq.n	8007538 <HAL_I2C_EV_IRQHandler+0x2a0>
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007522:	2b00      	cmp	r3, #0
 8007524:	d008      	beq.n	8007538 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fe8f 	bl	800824a <I2C_SlaveReceive_BTF>
 800752c:	e004      	b.n	8007538 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800752e:	bf00      	nop
 8007530:	e002      	b.n	8007538 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007532:	bf00      	nop
 8007534:	e000      	b.n	8007538 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007536:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007538:	3720      	adds	r7, #32
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800753e:	b480      	push	{r7}
 8007540:	b083      	sub	sp, #12
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007546:	bf00      	nop
 8007548:	370c      	adds	r7, #12
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr

08007552 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007552:	b480      	push	{r7}
 8007554:	b083      	sub	sp, #12
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800755a:	bf00      	nop
 800755c:	370c      	adds	r7, #12
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr

08007566 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007566:	b480      	push	{r7}
 8007568:	b083      	sub	sp, #12
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800756e:	bf00      	nop
 8007570:	370c      	adds	r7, #12
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr

0800757a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800757a:	b480      	push	{r7}
 800757c:	b083      	sub	sp, #12
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007582:	bf00      	nop
 8007584:	370c      	adds	r7, #12
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr

0800758e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800758e:	b480      	push	{r7}
 8007590:	b083      	sub	sp, #12
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
 8007596:	460b      	mov	r3, r1
 8007598:	70fb      	strb	r3, [r7, #3]
 800759a:	4613      	mov	r3, r2
 800759c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800759e:	bf00      	nop
 80075a0:	370c      	adds	r7, #12
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr

080075aa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80075aa:	b480      	push	{r7}
 80075ac:	b083      	sub	sp, #12
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80075b2:	bf00      	nop
 80075b4:	370c      	adds	r7, #12
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr

080075be <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80075be:	b480      	push	{r7}
 80075c0:	b083      	sub	sp, #12
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80075c6:	bf00      	nop
 80075c8:	370c      	adds	r7, #12
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr

080075d2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80075d2:	b480      	push	{r7}
 80075d4:	b083      	sub	sp, #12
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80075da:	bf00      	nop
 80075dc:	370c      	adds	r7, #12
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr

080075e6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80075e6:	b480      	push	{r7}
 80075e8:	b083      	sub	sp, #12
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80075ee:	bf00      	nop
 80075f0:	370c      	adds	r7, #12
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b084      	sub	sp, #16
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007608:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007610:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007616:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800761c:	2b00      	cmp	r3, #0
 800761e:	d150      	bne.n	80076c2 <I2C_MasterTransmit_TXE+0xc8>
 8007620:	7bfb      	ldrb	r3, [r7, #15]
 8007622:	2b21      	cmp	r3, #33	@ 0x21
 8007624:	d14d      	bne.n	80076c2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	2b08      	cmp	r3, #8
 800762a:	d01d      	beq.n	8007668 <I2C_MasterTransmit_TXE+0x6e>
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	2b20      	cmp	r3, #32
 8007630:	d01a      	beq.n	8007668 <I2C_MasterTransmit_TXE+0x6e>
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007638:	d016      	beq.n	8007668 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	685a      	ldr	r2, [r3, #4]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007648:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2211      	movs	r2, #17
 800764e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2220      	movs	r2, #32
 800765c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f7ff ff6c 	bl	800753e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007666:	e060      	b.n	800772a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	685a      	ldr	r2, [r3, #4]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007676:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007686:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2220      	movs	r2, #32
 8007692:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800769c:	b2db      	uxtb	r3, r3
 800769e:	2b40      	cmp	r3, #64	@ 0x40
 80076a0:	d107      	bne.n	80076b2 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f7ff ff87 	bl	80075be <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80076b0:	e03b      	b.n	800772a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f7ff ff3f 	bl	800753e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80076c0:	e033      	b.n	800772a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80076c2:	7bfb      	ldrb	r3, [r7, #15]
 80076c4:	2b21      	cmp	r3, #33	@ 0x21
 80076c6:	d005      	beq.n	80076d4 <I2C_MasterTransmit_TXE+0xda>
 80076c8:	7bbb      	ldrb	r3, [r7, #14]
 80076ca:	2b40      	cmp	r3, #64	@ 0x40
 80076cc:	d12d      	bne.n	800772a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80076ce:	7bfb      	ldrb	r3, [r7, #15]
 80076d0:	2b22      	cmp	r3, #34	@ 0x22
 80076d2:	d12a      	bne.n	800772a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076d8:	b29b      	uxth	r3, r3
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d108      	bne.n	80076f0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	685a      	ldr	r2, [r3, #4]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076ec:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80076ee:	e01c      	b.n	800772a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	2b40      	cmp	r3, #64	@ 0x40
 80076fa:	d103      	bne.n	8007704 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 f88e 	bl	800781e <I2C_MemoryTransmit_TXE_BTF>
}
 8007702:	e012      	b.n	800772a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007708:	781a      	ldrb	r2, [r3, #0]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007714:	1c5a      	adds	r2, r3, #1
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800771e:	b29b      	uxth	r3, r3
 8007720:	3b01      	subs	r3, #1
 8007722:	b29a      	uxth	r2, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007728:	e7ff      	b.n	800772a <I2C_MasterTransmit_TXE+0x130>
 800772a:	bf00      	nop
 800772c:	3710      	adds	r7, #16
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b084      	sub	sp, #16
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800773e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007746:	b2db      	uxtb	r3, r3
 8007748:	2b21      	cmp	r3, #33	@ 0x21
 800774a:	d164      	bne.n	8007816 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007750:	b29b      	uxth	r3, r3
 8007752:	2b00      	cmp	r3, #0
 8007754:	d012      	beq.n	800777c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800775a:	781a      	ldrb	r2, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007766:	1c5a      	adds	r2, r3, #1
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007770:	b29b      	uxth	r3, r3
 8007772:	3b01      	subs	r3, #1
 8007774:	b29a      	uxth	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800777a:	e04c      	b.n	8007816 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2b08      	cmp	r3, #8
 8007780:	d01d      	beq.n	80077be <I2C_MasterTransmit_BTF+0x8c>
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2b20      	cmp	r3, #32
 8007786:	d01a      	beq.n	80077be <I2C_MasterTransmit_BTF+0x8c>
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800778e:	d016      	beq.n	80077be <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	685a      	ldr	r2, [r3, #4]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800779e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2211      	movs	r2, #17
 80077a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2220      	movs	r2, #32
 80077b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f7ff fec1 	bl	800753e <HAL_I2C_MasterTxCpltCallback>
}
 80077bc:	e02b      	b.n	8007816 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80077cc:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80077dc:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2220      	movs	r2, #32
 80077e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	2b40      	cmp	r3, #64	@ 0x40
 80077f6:	d107      	bne.n	8007808 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f7ff fedc 	bl	80075be <HAL_I2C_MemTxCpltCallback>
}
 8007806:	e006      	b.n	8007816 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f7ff fe94 	bl	800753e <HAL_I2C_MasterTxCpltCallback>
}
 8007816:	bf00      	nop
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800781e:	b580      	push	{r7, lr}
 8007820:	b084      	sub	sp, #16
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800782c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007832:	2b00      	cmp	r3, #0
 8007834:	d11d      	bne.n	8007872 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800783a:	2b01      	cmp	r3, #1
 800783c:	d10b      	bne.n	8007856 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007842:	b2da      	uxtb	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800784e:	1c9a      	adds	r2, r3, #2
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007854:	e073      	b.n	800793e <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800785a:	b29b      	uxth	r3, r3
 800785c:	121b      	asrs	r3, r3, #8
 800785e:	b2da      	uxtb	r2, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800786a:	1c5a      	adds	r2, r3, #1
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007870:	e065      	b.n	800793e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007876:	2b01      	cmp	r3, #1
 8007878:	d10b      	bne.n	8007892 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800787e:	b2da      	uxtb	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800788a:	1c5a      	adds	r2, r3, #1
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007890:	e055      	b.n	800793e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007896:	2b02      	cmp	r3, #2
 8007898:	d151      	bne.n	800793e <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800789a:	7bfb      	ldrb	r3, [r7, #15]
 800789c:	2b22      	cmp	r3, #34	@ 0x22
 800789e:	d10d      	bne.n	80078bc <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80078ae:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078b4:	1c5a      	adds	r2, r3, #1
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80078ba:	e040      	b.n	800793e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d015      	beq.n	80078f2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80078c6:	7bfb      	ldrb	r3, [r7, #15]
 80078c8:	2b21      	cmp	r3, #33	@ 0x21
 80078ca:	d112      	bne.n	80078f2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078d0:	781a      	ldrb	r2, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078dc:	1c5a      	adds	r2, r3, #1
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	3b01      	subs	r3, #1
 80078ea:	b29a      	uxth	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80078f0:	e025      	b.n	800793e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d120      	bne.n	800793e <I2C_MemoryTransmit_TXE_BTF+0x120>
 80078fc:	7bfb      	ldrb	r3, [r7, #15]
 80078fe:	2b21      	cmp	r3, #33	@ 0x21
 8007900:	d11d      	bne.n	800793e <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	685a      	ldr	r2, [r3, #4]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007910:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007920:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2220      	movs	r2, #32
 800792c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f7ff fe40 	bl	80075be <HAL_I2C_MemTxCpltCallback>
}
 800793e:	bf00      	nop
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b084      	sub	sp, #16
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007954:	b2db      	uxtb	r3, r3
 8007956:	2b22      	cmp	r3, #34	@ 0x22
 8007958:	f040 80ac 	bne.w	8007ab4 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007960:	b29b      	uxth	r3, r3
 8007962:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2b03      	cmp	r3, #3
 8007968:	d921      	bls.n	80079ae <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	691a      	ldr	r2, [r3, #16]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007974:	b2d2      	uxtb	r2, r2
 8007976:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800797c:	1c5a      	adds	r2, r3, #1
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007986:	b29b      	uxth	r3, r3
 8007988:	3b01      	subs	r3, #1
 800798a:	b29a      	uxth	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007994:	b29b      	uxth	r3, r3
 8007996:	2b03      	cmp	r3, #3
 8007998:	f040 808c 	bne.w	8007ab4 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	685a      	ldr	r2, [r3, #4]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079aa:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80079ac:	e082      	b.n	8007ab4 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b2:	2b02      	cmp	r3, #2
 80079b4:	d075      	beq.n	8007aa2 <I2C_MasterReceive_RXNE+0x15c>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d002      	beq.n	80079c2 <I2C_MasterReceive_RXNE+0x7c>
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d16f      	bne.n	8007aa2 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f001 fcee 	bl	80093a4 <I2C_WaitOnSTOPRequestThroughIT>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d142      	bne.n	8007a54 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079dc:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	685a      	ldr	r2, [r3, #4]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80079ec:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	691a      	ldr	r2, [r3, #16]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079f8:	b2d2      	uxtb	r2, r2
 80079fa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a00:	1c5a      	adds	r2, r3, #1
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	b29a      	uxth	r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2220      	movs	r2, #32
 8007a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	2b40      	cmp	r3, #64	@ 0x40
 8007a26:	d10a      	bne.n	8007a3e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f7fa fd76 	bl	8002528 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007a3c:	e03a      	b.n	8007ab4 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2212      	movs	r2, #18
 8007a4a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f7ff fd80 	bl	8007552 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007a52:	e02f      	b.n	8007ab4 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	685a      	ldr	r2, [r3, #4]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007a62:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	691a      	ldr	r2, [r3, #16]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a6e:	b2d2      	uxtb	r2, r2
 8007a70:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a76:	1c5a      	adds	r2, r3, #1
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	3b01      	subs	r3, #1
 8007a84:	b29a      	uxth	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2220      	movs	r2, #32
 8007a8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f7ff fd99 	bl	80075d2 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007aa0:	e008      	b.n	8007ab4 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	685a      	ldr	r2, [r3, #4]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ab0:	605a      	str	r2, [r3, #4]
}
 8007ab2:	e7ff      	b.n	8007ab4 <I2C_MasterReceive_RXNE+0x16e>
 8007ab4:	bf00      	nop
 8007ab6:	3710      	adds	r7, #16
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	2b04      	cmp	r3, #4
 8007ad2:	d11b      	bne.n	8007b0c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	685a      	ldr	r2, [r3, #4]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ae2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	691a      	ldr	r2, [r3, #16]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aee:	b2d2      	uxtb	r2, r2
 8007af0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007af6:	1c5a      	adds	r2, r3, #1
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	3b01      	subs	r3, #1
 8007b04:	b29a      	uxth	r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007b0a:	e0bd      	b.n	8007c88 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	2b03      	cmp	r3, #3
 8007b14:	d129      	bne.n	8007b6a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	685a      	ldr	r2, [r3, #4]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b24:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2b04      	cmp	r3, #4
 8007b2a:	d00a      	beq.n	8007b42 <I2C_MasterReceive_BTF+0x86>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	d007      	beq.n	8007b42 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b40:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	691a      	ldr	r2, [r3, #16]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b4c:	b2d2      	uxtb	r2, r2
 8007b4e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b54:	1c5a      	adds	r2, r3, #1
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	3b01      	subs	r3, #1
 8007b62:	b29a      	uxth	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007b68:	e08e      	b.n	8007c88 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	d176      	bne.n	8007c62 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d002      	beq.n	8007b80 <I2C_MasterReceive_BTF+0xc4>
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2b10      	cmp	r3, #16
 8007b7e:	d108      	bne.n	8007b92 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b8e:	601a      	str	r2, [r3, #0]
 8007b90:	e019      	b.n	8007bc6 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2b04      	cmp	r3, #4
 8007b96:	d002      	beq.n	8007b9e <I2C_MasterReceive_BTF+0xe2>
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d108      	bne.n	8007bb0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007bac:	601a      	str	r2, [r3, #0]
 8007bae:	e00a      	b.n	8007bc6 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2b10      	cmp	r3, #16
 8007bb4:	d007      	beq.n	8007bc6 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007bc4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	691a      	ldr	r2, [r3, #16]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bd0:	b2d2      	uxtb	r2, r2
 8007bd2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bd8:	1c5a      	adds	r2, r3, #1
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	3b01      	subs	r3, #1
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	691a      	ldr	r2, [r3, #16]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf6:	b2d2      	uxtb	r2, r2
 8007bf8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bfe:	1c5a      	adds	r2, r3, #1
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	b29a      	uxth	r2, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	685a      	ldr	r2, [r3, #4]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007c20:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2220      	movs	r2, #32
 8007c26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	2b40      	cmp	r3, #64	@ 0x40
 8007c34:	d10a      	bne.n	8007c4c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f7fa fc6f 	bl	8002528 <HAL_I2C_MemRxCpltCallback>
}
 8007c4a:	e01d      	b.n	8007c88 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2212      	movs	r2, #18
 8007c58:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f7ff fc79 	bl	8007552 <HAL_I2C_MasterRxCpltCallback>
}
 8007c60:	e012      	b.n	8007c88 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	691a      	ldr	r2, [r3, #16]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c6c:	b2d2      	uxtb	r2, r2
 8007c6e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c74:	1c5a      	adds	r2, r3, #1
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	3b01      	subs	r3, #1
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007c88:	bf00      	nop
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	2b40      	cmp	r3, #64	@ 0x40
 8007ca2:	d117      	bne.n	8007cd4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d109      	bne.n	8007cc0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007cbc:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007cbe:	e067      	b.n	8007d90 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	f043 0301 	orr.w	r3, r3, #1
 8007cca:	b2da      	uxtb	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	611a      	str	r2, [r3, #16]
}
 8007cd2:	e05d      	b.n	8007d90 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007cdc:	d133      	bne.n	8007d46 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b21      	cmp	r3, #33	@ 0x21
 8007ce8:	d109      	bne.n	8007cfe <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007cfa:	611a      	str	r2, [r3, #16]
 8007cfc:	e008      	b.n	8007d10 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	f043 0301 	orr.w	r3, r3, #1
 8007d08:	b2da      	uxtb	r2, r3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d004      	beq.n	8007d22 <I2C_Master_SB+0x92>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d108      	bne.n	8007d34 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d032      	beq.n	8007d90 <I2C_Master_SB+0x100>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d02d      	beq.n	8007d90 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	685a      	ldr	r2, [r3, #4]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d42:	605a      	str	r2, [r3, #4]
}
 8007d44:	e024      	b.n	8007d90 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d10e      	bne.n	8007d6c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	11db      	asrs	r3, r3, #7
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	f003 0306 	and.w	r3, r3, #6
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	f063 030f 	orn	r3, r3, #15
 8007d62:	b2da      	uxtb	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	611a      	str	r2, [r3, #16]
}
 8007d6a:	e011      	b.n	8007d90 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d10d      	bne.n	8007d90 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	11db      	asrs	r3, r3, #7
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	f003 0306 	and.w	r3, r3, #6
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	f063 030e 	orn	r3, r3, #14
 8007d88:	b2da      	uxtb	r2, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	611a      	str	r2, [r3, #16]
}
 8007d90:	bf00      	nop
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007da8:	b2da      	uxtb	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d004      	beq.n	8007dc2 <I2C_Master_ADD10+0x26>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d108      	bne.n	8007dd4 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00c      	beq.n	8007de4 <I2C_Master_ADD10+0x48>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d007      	beq.n	8007de4 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	685a      	ldr	r2, [r3, #4]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007de2:	605a      	str	r2, [r3, #4]
  }
}
 8007de4:	bf00      	nop
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b091      	sub	sp, #68	@ 0x44
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007dfe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e06:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e0c:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	2b22      	cmp	r3, #34	@ 0x22
 8007e18:	f040 8169 	bne.w	80080ee <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d10f      	bne.n	8007e44 <I2C_Master_ADDR+0x54>
 8007e24:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007e28:	2b40      	cmp	r3, #64	@ 0x40
 8007e2a:	d10b      	bne.n	8007e44 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	695b      	ldr	r3, [r3, #20]
 8007e36:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	699b      	ldr	r3, [r3, #24]
 8007e3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e42:	e160      	b.n	8008106 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d11d      	bne.n	8007e88 <I2C_Master_ADDR+0x98>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007e54:	d118      	bne.n	8007e88 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e56:	2300      	movs	r3, #0
 8007e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	695b      	ldr	r3, [r3, #20]
 8007e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	699b      	ldr	r3, [r3, #24]
 8007e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007e7a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e80:	1c5a      	adds	r2, r3, #1
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	651a      	str	r2, [r3, #80]	@ 0x50
 8007e86:	e13e      	b.n	8008106 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d113      	bne.n	8007eba <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e92:	2300      	movs	r3, #0
 8007e94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	695b      	ldr	r3, [r3, #20]
 8007e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	699b      	ldr	r3, [r3, #24]
 8007ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007eb6:	601a      	str	r2, [r3, #0]
 8007eb8:	e115      	b.n	80080e6 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	f040 808a 	bne.w	8007fda <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ec8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007ecc:	d137      	bne.n	8007f3e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007edc:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ee8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007eec:	d113      	bne.n	8007f16 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007efc:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007efe:	2300      	movs	r3, #0
 8007f00:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	695b      	ldr	r3, [r3, #20]
 8007f08:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	699b      	ldr	r3, [r3, #24]
 8007f10:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f14:	e0e7      	b.n	80080e6 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f16:	2300      	movs	r3, #0
 8007f18:	623b      	str	r3, [r7, #32]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	695b      	ldr	r3, [r3, #20]
 8007f20:	623b      	str	r3, [r7, #32]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	699b      	ldr	r3, [r3, #24]
 8007f28:	623b      	str	r3, [r7, #32]
 8007f2a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f3a:	601a      	str	r2, [r3, #0]
 8007f3c:	e0d3      	b.n	80080e6 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f40:	2b08      	cmp	r3, #8
 8007f42:	d02e      	beq.n	8007fa2 <I2C_Master_ADDR+0x1b2>
 8007f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f46:	2b20      	cmp	r3, #32
 8007f48:	d02b      	beq.n	8007fa2 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f4c:	2b12      	cmp	r3, #18
 8007f4e:	d102      	bne.n	8007f56 <I2C_Master_ADDR+0x166>
 8007f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d125      	bne.n	8007fa2 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f58:	2b04      	cmp	r3, #4
 8007f5a:	d00e      	beq.n	8007f7a <I2C_Master_ADDR+0x18a>
 8007f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f5e:	2b02      	cmp	r3, #2
 8007f60:	d00b      	beq.n	8007f7a <I2C_Master_ADDR+0x18a>
 8007f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f64:	2b10      	cmp	r3, #16
 8007f66:	d008      	beq.n	8007f7a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f76:	601a      	str	r2, [r3, #0]
 8007f78:	e007      	b.n	8007f8a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007f88:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	61fb      	str	r3, [r7, #28]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	695b      	ldr	r3, [r3, #20]
 8007f94:	61fb      	str	r3, [r7, #28]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	699b      	ldr	r3, [r3, #24]
 8007f9c:	61fb      	str	r3, [r7, #28]
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	e0a1      	b.n	80080e6 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007fb0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	61bb      	str	r3, [r7, #24]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	695b      	ldr	r3, [r3, #20]
 8007fbc:	61bb      	str	r3, [r7, #24]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	699b      	ldr	r3, [r3, #24]
 8007fc4:	61bb      	str	r3, [r7, #24]
 8007fc6:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007fd6:	601a      	str	r2, [r3, #0]
 8007fd8:	e085      	b.n	80080e6 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	2b02      	cmp	r3, #2
 8007fe2:	d14d      	bne.n	8008080 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fe6:	2b04      	cmp	r3, #4
 8007fe8:	d016      	beq.n	8008018 <I2C_Master_ADDR+0x228>
 8007fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fec:	2b02      	cmp	r3, #2
 8007fee:	d013      	beq.n	8008018 <I2C_Master_ADDR+0x228>
 8007ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff2:	2b10      	cmp	r3, #16
 8007ff4:	d010      	beq.n	8008018 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008004:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008014:	601a      	str	r2, [r3, #0]
 8008016:	e007      	b.n	8008028 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008026:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008032:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008036:	d117      	bne.n	8008068 <I2C_Master_ADDR+0x278>
 8008038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800803a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800803e:	d00b      	beq.n	8008058 <I2C_Master_ADDR+0x268>
 8008040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008042:	2b01      	cmp	r3, #1
 8008044:	d008      	beq.n	8008058 <I2C_Master_ADDR+0x268>
 8008046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008048:	2b08      	cmp	r3, #8
 800804a:	d005      	beq.n	8008058 <I2C_Master_ADDR+0x268>
 800804c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800804e:	2b10      	cmp	r3, #16
 8008050:	d002      	beq.n	8008058 <I2C_Master_ADDR+0x268>
 8008052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008054:	2b20      	cmp	r3, #32
 8008056:	d107      	bne.n	8008068 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	685a      	ldr	r2, [r3, #4]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008066:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008068:	2300      	movs	r3, #0
 800806a:	617b      	str	r3, [r7, #20]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	695b      	ldr	r3, [r3, #20]
 8008072:	617b      	str	r3, [r7, #20]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	699b      	ldr	r3, [r3, #24]
 800807a:	617b      	str	r3, [r7, #20]
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	e032      	b.n	80080e6 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800808e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800809a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800809e:	d117      	bne.n	80080d0 <I2C_Master_ADDR+0x2e0>
 80080a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080a2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80080a6:	d00b      	beq.n	80080c0 <I2C_Master_ADDR+0x2d0>
 80080a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d008      	beq.n	80080c0 <I2C_Master_ADDR+0x2d0>
 80080ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080b0:	2b08      	cmp	r3, #8
 80080b2:	d005      	beq.n	80080c0 <I2C_Master_ADDR+0x2d0>
 80080b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080b6:	2b10      	cmp	r3, #16
 80080b8:	d002      	beq.n	80080c0 <I2C_Master_ADDR+0x2d0>
 80080ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080bc:	2b20      	cmp	r3, #32
 80080be:	d107      	bne.n	80080d0 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	685a      	ldr	r2, [r3, #4]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80080ce:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080d0:	2300      	movs	r3, #0
 80080d2:	613b      	str	r3, [r7, #16]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	695b      	ldr	r3, [r3, #20]
 80080da:	613b      	str	r3, [r7, #16]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	699b      	ldr	r3, [r3, #24]
 80080e2:	613b      	str	r3, [r7, #16]
 80080e4:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80080ec:	e00b      	b.n	8008106 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080ee:	2300      	movs	r3, #0
 80080f0:	60fb      	str	r3, [r7, #12]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	695b      	ldr	r3, [r3, #20]
 80080f8:	60fb      	str	r3, [r7, #12]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	699b      	ldr	r3, [r3, #24]
 8008100:	60fb      	str	r3, [r7, #12]
 8008102:	68fb      	ldr	r3, [r7, #12]
}
 8008104:	e7ff      	b.n	8008106 <I2C_Master_ADDR+0x316>
 8008106:	bf00      	nop
 8008108:	3744      	adds	r7, #68	@ 0x44
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008112:	b580      	push	{r7, lr}
 8008114:	b084      	sub	sp, #16
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008120:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008126:	b29b      	uxth	r3, r3
 8008128:	2b00      	cmp	r3, #0
 800812a:	d02b      	beq.n	8008184 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008130:	781a      	ldrb	r2, [r3, #0]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800813c:	1c5a      	adds	r2, r3, #1
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008146:	b29b      	uxth	r3, r3
 8008148:	3b01      	subs	r3, #1
 800814a:	b29a      	uxth	r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008154:	b29b      	uxth	r3, r3
 8008156:	2b00      	cmp	r3, #0
 8008158:	d114      	bne.n	8008184 <I2C_SlaveTransmit_TXE+0x72>
 800815a:	7bfb      	ldrb	r3, [r7, #15]
 800815c:	2b29      	cmp	r3, #41	@ 0x29
 800815e:	d111      	bne.n	8008184 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	685a      	ldr	r2, [r3, #4]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800816e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2221      	movs	r2, #33	@ 0x21
 8008174:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2228      	movs	r2, #40	@ 0x28
 800817a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f7ff f9f1 	bl	8007566 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008184:	bf00      	nop
 8008186:	3710      	adds	r7, #16
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008198:	b29b      	uxth	r3, r3
 800819a:	2b00      	cmp	r3, #0
 800819c:	d011      	beq.n	80081c2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081a2:	781a      	ldrb	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081ae:	1c5a      	adds	r2, r3, #1
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	3b01      	subs	r3, #1
 80081bc:	b29a      	uxth	r2, r3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80081c2:	bf00      	nop
 80081c4:	370c      	adds	r7, #12
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr

080081ce <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b084      	sub	sp, #16
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081dc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d02c      	beq.n	8008242 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	691a      	ldr	r2, [r3, #16]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081f2:	b2d2      	uxtb	r2, r2
 80081f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081fa:	1c5a      	adds	r2, r3, #1
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008204:	b29b      	uxth	r3, r3
 8008206:	3b01      	subs	r3, #1
 8008208:	b29a      	uxth	r2, r3
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008212:	b29b      	uxth	r3, r3
 8008214:	2b00      	cmp	r3, #0
 8008216:	d114      	bne.n	8008242 <I2C_SlaveReceive_RXNE+0x74>
 8008218:	7bfb      	ldrb	r3, [r7, #15]
 800821a:	2b2a      	cmp	r3, #42	@ 0x2a
 800821c:	d111      	bne.n	8008242 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	685a      	ldr	r2, [r3, #4]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800822c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2222      	movs	r2, #34	@ 0x22
 8008232:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2228      	movs	r2, #40	@ 0x28
 8008238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f7ff f99c 	bl	800757a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008242:	bf00      	nop
 8008244:	3710      	adds	r7, #16
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800824a:	b480      	push	{r7}
 800824c:	b083      	sub	sp, #12
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008256:	b29b      	uxth	r3, r3
 8008258:	2b00      	cmp	r3, #0
 800825a:	d012      	beq.n	8008282 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	691a      	ldr	r2, [r3, #16]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008266:	b2d2      	uxtb	r2, r2
 8008268:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800826e:	1c5a      	adds	r2, r3, #1
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008278:	b29b      	uxth	r3, r3
 800827a:	3b01      	subs	r3, #1
 800827c:	b29a      	uxth	r2, r3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8008282:	bf00      	nop
 8008284:	370c      	adds	r7, #12
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr

0800828e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b084      	sub	sp, #16
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
 8008296:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8008298:	2300      	movs	r3, #0
 800829a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80082a8:	2b28      	cmp	r3, #40	@ 0x28
 80082aa:	d125      	bne.n	80082f8 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	685a      	ldr	r2, [r3, #4]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082ba:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	f003 0304 	and.w	r3, r3, #4
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d101      	bne.n	80082ca <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80082c6:	2301      	movs	r3, #1
 80082c8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d103      	bne.n	80082dc <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	81bb      	strh	r3, [r7, #12]
 80082da:	e002      	b.n	80082e2 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	699b      	ldr	r3, [r3, #24]
 80082e0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80082ea:	89ba      	ldrh	r2, [r7, #12]
 80082ec:	7bfb      	ldrb	r3, [r7, #15]
 80082ee:	4619      	mov	r1, r3
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f7ff f94c 	bl	800758e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80082f6:	e00e      	b.n	8008316 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082f8:	2300      	movs	r3, #0
 80082fa:	60bb      	str	r3, [r7, #8]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	695b      	ldr	r3, [r3, #20]
 8008302:	60bb      	str	r3, [r7, #8]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	699b      	ldr	r3, [r3, #24]
 800830a:	60bb      	str	r3, [r7, #8]
 800830c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8008316:	bf00      	nop
 8008318:	3710      	adds	r7, #16
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
	...

08008320 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800832e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	685a      	ldr	r2, [r3, #4]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800833e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008340:	2300      	movs	r3, #0
 8008342:	60bb      	str	r3, [r7, #8]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	695b      	ldr	r3, [r3, #20]
 800834a:	60bb      	str	r3, [r7, #8]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f042 0201 	orr.w	r2, r2, #1
 800835a:	601a      	str	r2, [r3, #0]
 800835c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800836c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008378:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800837c:	d172      	bne.n	8008464 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800837e:	7bfb      	ldrb	r3, [r7, #15]
 8008380:	2b22      	cmp	r3, #34	@ 0x22
 8008382:	d002      	beq.n	800838a <I2C_Slave_STOPF+0x6a>
 8008384:	7bfb      	ldrb	r3, [r7, #15]
 8008386:	2b2a      	cmp	r3, #42	@ 0x2a
 8008388:	d135      	bne.n	80083f6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	b29a      	uxth	r2, r3
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800839c:	b29b      	uxth	r3, r3
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d005      	beq.n	80083ae <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083a6:	f043 0204 	orr.w	r2, r3, #4
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	685a      	ldr	r2, [r3, #4]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80083bc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7fd fa5e 	bl	8005884 <HAL_DMA_GetState>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d049      	beq.n	8008462 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d2:	4a69      	ldr	r2, [pc, #420]	@ (8008578 <I2C_Slave_STOPF+0x258>)
 80083d4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fd f8a6 	bl	800552c <HAL_DMA_Abort_IT>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d03d      	beq.n	8008462 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80083f0:	4610      	mov	r0, r2
 80083f2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80083f4:	e035      	b.n	8008462 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	b29a      	uxth	r2, r3
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008408:	b29b      	uxth	r3, r3
 800840a:	2b00      	cmp	r3, #0
 800840c:	d005      	beq.n	800841a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008412:	f043 0204 	orr.w	r2, r3, #4
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	685a      	ldr	r2, [r3, #4]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008428:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800842e:	4618      	mov	r0, r3
 8008430:	f7fd fa28 	bl	8005884 <HAL_DMA_GetState>
 8008434:	4603      	mov	r3, r0
 8008436:	2b01      	cmp	r3, #1
 8008438:	d014      	beq.n	8008464 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800843e:	4a4e      	ldr	r2, [pc, #312]	@ (8008578 <I2C_Slave_STOPF+0x258>)
 8008440:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008446:	4618      	mov	r0, r3
 8008448:	f7fd f870 	bl	800552c <HAL_DMA_Abort_IT>
 800844c:	4603      	mov	r3, r0
 800844e:	2b00      	cmp	r3, #0
 8008450:	d008      	beq.n	8008464 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800845c:	4610      	mov	r0, r2
 800845e:	4798      	blx	r3
 8008460:	e000      	b.n	8008464 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008462:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008468:	b29b      	uxth	r3, r3
 800846a:	2b00      	cmp	r3, #0
 800846c:	d03e      	beq.n	80084ec <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	695b      	ldr	r3, [r3, #20]
 8008474:	f003 0304 	and.w	r3, r3, #4
 8008478:	2b04      	cmp	r3, #4
 800847a:	d112      	bne.n	80084a2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	691a      	ldr	r2, [r3, #16]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008486:	b2d2      	uxtb	r2, r2
 8008488:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800848e:	1c5a      	adds	r2, r3, #1
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008498:	b29b      	uxth	r3, r3
 800849a:	3b01      	subs	r3, #1
 800849c:	b29a      	uxth	r2, r3
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	695b      	ldr	r3, [r3, #20]
 80084a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084ac:	2b40      	cmp	r3, #64	@ 0x40
 80084ae:	d112      	bne.n	80084d6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	691a      	ldr	r2, [r3, #16]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ba:	b2d2      	uxtb	r2, r2
 80084bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084c2:	1c5a      	adds	r2, r3, #1
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	3b01      	subs	r3, #1
 80084d0:	b29a      	uxth	r2, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084da:	b29b      	uxth	r3, r3
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d005      	beq.n	80084ec <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084e4:	f043 0204 	orr.w	r2, r3, #4
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d003      	beq.n	80084fc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 f843 	bl	8008580 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80084fa:	e039      	b.n	8008570 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80084fc:	7bfb      	ldrb	r3, [r7, #15]
 80084fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8008500:	d109      	bne.n	8008516 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2228      	movs	r2, #40	@ 0x28
 800850c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f7ff f832 	bl	800757a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800851c:	b2db      	uxtb	r3, r3
 800851e:	2b28      	cmp	r3, #40	@ 0x28
 8008520:	d111      	bne.n	8008546 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4a15      	ldr	r2, [pc, #84]	@ (800857c <I2C_Slave_STOPF+0x25c>)
 8008526:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2220      	movs	r2, #32
 8008532:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f7ff f833 	bl	80075aa <HAL_I2C_ListenCpltCallback>
}
 8008544:	e014      	b.n	8008570 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800854a:	2b22      	cmp	r3, #34	@ 0x22
 800854c:	d002      	beq.n	8008554 <I2C_Slave_STOPF+0x234>
 800854e:	7bfb      	ldrb	r3, [r7, #15]
 8008550:	2b22      	cmp	r3, #34	@ 0x22
 8008552:	d10d      	bne.n	8008570 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2220      	movs	r2, #32
 800855e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f7ff f805 	bl	800757a <HAL_I2C_SlaveRxCpltCallback>
}
 8008570:	bf00      	nop
 8008572:	3710      	adds	r7, #16
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}
 8008578:	08008fa5 	.word	0x08008fa5
 800857c:	ffff0000 	.word	0xffff0000

08008580 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800858e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008596:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008598:	7bbb      	ldrb	r3, [r7, #14]
 800859a:	2b10      	cmp	r3, #16
 800859c:	d002      	beq.n	80085a4 <I2C_ITError+0x24>
 800859e:	7bbb      	ldrb	r3, [r7, #14]
 80085a0:	2b40      	cmp	r3, #64	@ 0x40
 80085a2:	d10a      	bne.n	80085ba <I2C_ITError+0x3a>
 80085a4:	7bfb      	ldrb	r3, [r7, #15]
 80085a6:	2b22      	cmp	r3, #34	@ 0x22
 80085a8:	d107      	bne.n	80085ba <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80085b8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80085ba:	7bfb      	ldrb	r3, [r7, #15]
 80085bc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80085c0:	2b28      	cmp	r3, #40	@ 0x28
 80085c2:	d107      	bne.n	80085d4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2228      	movs	r2, #40	@ 0x28
 80085ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80085d2:	e015      	b.n	8008600 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80085de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80085e2:	d00a      	beq.n	80085fa <I2C_ITError+0x7a>
 80085e4:	7bfb      	ldrb	r3, [r7, #15]
 80085e6:	2b60      	cmp	r3, #96	@ 0x60
 80085e8:	d007      	beq.n	80085fa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2220      	movs	r2, #32
 80085ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2200      	movs	r2, #0
 80085f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800860a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800860e:	d162      	bne.n	80086d6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	685a      	ldr	r2, [r3, #4]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800861e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008624:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008628:	b2db      	uxtb	r3, r3
 800862a:	2b01      	cmp	r3, #1
 800862c:	d020      	beq.n	8008670 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008632:	4a6a      	ldr	r2, [pc, #424]	@ (80087dc <I2C_ITError+0x25c>)
 8008634:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800863a:	4618      	mov	r0, r3
 800863c:	f7fc ff76 	bl	800552c <HAL_DMA_Abort_IT>
 8008640:	4603      	mov	r3, r0
 8008642:	2b00      	cmp	r3, #0
 8008644:	f000 8089 	beq.w	800875a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f022 0201 	bic.w	r2, r2, #1
 8008656:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2220      	movs	r2, #32
 800865c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008664:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800866a:	4610      	mov	r0, r2
 800866c:	4798      	blx	r3
 800866e:	e074      	b.n	800875a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008674:	4a59      	ldr	r2, [pc, #356]	@ (80087dc <I2C_ITError+0x25c>)
 8008676:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800867c:	4618      	mov	r0, r3
 800867e:	f7fc ff55 	bl	800552c <HAL_DMA_Abort_IT>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d068      	beq.n	800875a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	695b      	ldr	r3, [r3, #20]
 800868e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008692:	2b40      	cmp	r3, #64	@ 0x40
 8008694:	d10b      	bne.n	80086ae <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	691a      	ldr	r2, [r3, #16]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086a0:	b2d2      	uxtb	r2, r2
 80086a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086a8:	1c5a      	adds	r2, r3, #1
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f022 0201 	bic.w	r2, r2, #1
 80086bc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2220      	movs	r2, #32
 80086c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80086d0:	4610      	mov	r0, r2
 80086d2:	4798      	blx	r3
 80086d4:	e041      	b.n	800875a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	2b60      	cmp	r3, #96	@ 0x60
 80086e0:	d125      	bne.n	800872e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2220      	movs	r2, #32
 80086e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	695b      	ldr	r3, [r3, #20]
 80086f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086fa:	2b40      	cmp	r3, #64	@ 0x40
 80086fc:	d10b      	bne.n	8008716 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	691a      	ldr	r2, [r3, #16]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008708:	b2d2      	uxtb	r2, r2
 800870a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008710:	1c5a      	adds	r2, r3, #1
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f022 0201 	bic.w	r2, r2, #1
 8008724:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f7fe ff5d 	bl	80075e6 <HAL_I2C_AbortCpltCallback>
 800872c:	e015      	b.n	800875a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	695b      	ldr	r3, [r3, #20]
 8008734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008738:	2b40      	cmp	r3, #64	@ 0x40
 800873a:	d10b      	bne.n	8008754 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	691a      	ldr	r2, [r3, #16]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008746:	b2d2      	uxtb	r2, r2
 8008748:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800874e:	1c5a      	adds	r2, r3, #1
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f7fe ff3c 	bl	80075d2 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800875e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	f003 0301 	and.w	r3, r3, #1
 8008766:	2b00      	cmp	r3, #0
 8008768:	d10e      	bne.n	8008788 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008770:	2b00      	cmp	r3, #0
 8008772:	d109      	bne.n	8008788 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800877a:	2b00      	cmp	r3, #0
 800877c:	d104      	bne.n	8008788 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008784:	2b00      	cmp	r3, #0
 8008786:	d007      	beq.n	8008798 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	685a      	ldr	r2, [r3, #4]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008796:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800879e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087a4:	f003 0304 	and.w	r3, r3, #4
 80087a8:	2b04      	cmp	r3, #4
 80087aa:	d113      	bne.n	80087d4 <I2C_ITError+0x254>
 80087ac:	7bfb      	ldrb	r3, [r7, #15]
 80087ae:	2b28      	cmp	r3, #40	@ 0x28
 80087b0:	d110      	bne.n	80087d4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a0a      	ldr	r2, [pc, #40]	@ (80087e0 <I2C_ITError+0x260>)
 80087b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2220      	movs	r2, #32
 80087c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f7fe feeb 	bl	80075aa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80087d4:	bf00      	nop
 80087d6:	3710      	adds	r7, #16
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	08008fa5 	.word	0x08008fa5
 80087e0:	ffff0000 	.word	0xffff0000

080087e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b088      	sub	sp, #32
 80087e8:	af02      	add	r7, sp, #8
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	607a      	str	r2, [r7, #4]
 80087ee:	603b      	str	r3, [r7, #0]
 80087f0:	460b      	mov	r3, r1
 80087f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	2b08      	cmp	r3, #8
 80087fe:	d006      	beq.n	800880e <I2C_MasterRequestWrite+0x2a>
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	2b01      	cmp	r3, #1
 8008804:	d003      	beq.n	800880e <I2C_MasterRequestWrite+0x2a>
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800880c:	d108      	bne.n	8008820 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800881c:	601a      	str	r2, [r3, #0]
 800881e:	e00b      	b.n	8008838 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008824:	2b12      	cmp	r3, #18
 8008826:	d107      	bne.n	8008838 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008836:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	9300      	str	r3, [sp, #0]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008844:	68f8      	ldr	r0, [r7, #12]
 8008846:	f000 fc55 	bl	80090f4 <I2C_WaitOnFlagUntilTimeout>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00d      	beq.n	800886c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800885a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800885e:	d103      	bne.n	8008868 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008866:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008868:	2303      	movs	r3, #3
 800886a:	e035      	b.n	80088d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	691b      	ldr	r3, [r3, #16]
 8008870:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008874:	d108      	bne.n	8008888 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008876:	897b      	ldrh	r3, [r7, #10]
 8008878:	b2db      	uxtb	r3, r3
 800887a:	461a      	mov	r2, r3
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008884:	611a      	str	r2, [r3, #16]
 8008886:	e01b      	b.n	80088c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008888:	897b      	ldrh	r3, [r7, #10]
 800888a:	11db      	asrs	r3, r3, #7
 800888c:	b2db      	uxtb	r3, r3
 800888e:	f003 0306 	and.w	r3, r3, #6
 8008892:	b2db      	uxtb	r3, r3
 8008894:	f063 030f 	orn	r3, r3, #15
 8008898:	b2da      	uxtb	r2, r3
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	490e      	ldr	r1, [pc, #56]	@ (80088e0 <I2C_MasterRequestWrite+0xfc>)
 80088a6:	68f8      	ldr	r0, [r7, #12]
 80088a8:	f000 fc7b 	bl	80091a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80088ac:	4603      	mov	r3, r0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d001      	beq.n	80088b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	e010      	b.n	80088d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80088b6:	897b      	ldrh	r3, [r7, #10]
 80088b8:	b2da      	uxtb	r2, r3
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	4907      	ldr	r1, [pc, #28]	@ (80088e4 <I2C_MasterRequestWrite+0x100>)
 80088c6:	68f8      	ldr	r0, [r7, #12]
 80088c8:	f000 fc6b 	bl	80091a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d001      	beq.n	80088d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	e000      	b.n	80088d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80088d6:	2300      	movs	r3, #0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3718      	adds	r7, #24
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	00010008 	.word	0x00010008
 80088e4:	00010002 	.word	0x00010002

080088e8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b088      	sub	sp, #32
 80088ec:	af02      	add	r7, sp, #8
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	607a      	str	r2, [r7, #4]
 80088f2:	603b      	str	r3, [r7, #0]
 80088f4:	460b      	mov	r3, r1
 80088f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088fc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800890c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	2b08      	cmp	r3, #8
 8008912:	d006      	beq.n	8008922 <I2C_MasterRequestRead+0x3a>
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	2b01      	cmp	r3, #1
 8008918:	d003      	beq.n	8008922 <I2C_MasterRequestRead+0x3a>
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008920:	d108      	bne.n	8008934 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008930:	601a      	str	r2, [r3, #0]
 8008932:	e00b      	b.n	800894c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008938:	2b11      	cmp	r3, #17
 800893a:	d107      	bne.n	800894c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800894a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	9300      	str	r3, [sp, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008958:	68f8      	ldr	r0, [r7, #12]
 800895a:	f000 fbcb 	bl	80090f4 <I2C_WaitOnFlagUntilTimeout>
 800895e:	4603      	mov	r3, r0
 8008960:	2b00      	cmp	r3, #0
 8008962:	d00d      	beq.n	8008980 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800896e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008972:	d103      	bne.n	800897c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800897a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800897c:	2303      	movs	r3, #3
 800897e:	e079      	b.n	8008a74 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	691b      	ldr	r3, [r3, #16]
 8008984:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008988:	d108      	bne.n	800899c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800898a:	897b      	ldrh	r3, [r7, #10]
 800898c:	b2db      	uxtb	r3, r3
 800898e:	f043 0301 	orr.w	r3, r3, #1
 8008992:	b2da      	uxtb	r2, r3
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	611a      	str	r2, [r3, #16]
 800899a:	e05f      	b.n	8008a5c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800899c:	897b      	ldrh	r3, [r7, #10]
 800899e:	11db      	asrs	r3, r3, #7
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	f003 0306 	and.w	r3, r3, #6
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	f063 030f 	orn	r3, r3, #15
 80089ac:	b2da      	uxtb	r2, r3
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	4930      	ldr	r1, [pc, #192]	@ (8008a7c <I2C_MasterRequestRead+0x194>)
 80089ba:	68f8      	ldr	r0, [r7, #12]
 80089bc:	f000 fbf1 	bl	80091a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80089c0:	4603      	mov	r3, r0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d001      	beq.n	80089ca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80089c6:	2301      	movs	r3, #1
 80089c8:	e054      	b.n	8008a74 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80089ca:	897b      	ldrh	r3, [r7, #10]
 80089cc:	b2da      	uxtb	r2, r3
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	4929      	ldr	r1, [pc, #164]	@ (8008a80 <I2C_MasterRequestRead+0x198>)
 80089da:	68f8      	ldr	r0, [r7, #12]
 80089dc:	f000 fbe1 	bl	80091a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80089e0:	4603      	mov	r3, r0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d001      	beq.n	80089ea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e044      	b.n	8008a74 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089ea:	2300      	movs	r3, #0
 80089ec:	613b      	str	r3, [r7, #16]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	695b      	ldr	r3, [r3, #20]
 80089f4:	613b      	str	r3, [r7, #16]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	699b      	ldr	r3, [r3, #24]
 80089fc:	613b      	str	r3, [r7, #16]
 80089fe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008a0e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	9300      	str	r3, [sp, #0]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	f000 fb69 	bl	80090f4 <I2C_WaitOnFlagUntilTimeout>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d00d      	beq.n	8008a44 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a36:	d103      	bne.n	8008a40 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008a3e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8008a40:	2303      	movs	r3, #3
 8008a42:	e017      	b.n	8008a74 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008a44:	897b      	ldrh	r3, [r7, #10]
 8008a46:	11db      	asrs	r3, r3, #7
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	f003 0306 	and.w	r3, r3, #6
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	f063 030e 	orn	r3, r3, #14
 8008a54:	b2da      	uxtb	r2, r3
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	4907      	ldr	r1, [pc, #28]	@ (8008a80 <I2C_MasterRequestRead+0x198>)
 8008a62:	68f8      	ldr	r0, [r7, #12]
 8008a64:	f000 fb9d 	bl	80091a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d001      	beq.n	8008a72 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e000      	b.n	8008a74 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8008a72:	2300      	movs	r3, #0
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3718      	adds	r7, #24
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}
 8008a7c:	00010008 	.word	0x00010008
 8008a80:	00010002 	.word	0x00010002

08008a84 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b088      	sub	sp, #32
 8008a88:	af02      	add	r7, sp, #8
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	4608      	mov	r0, r1
 8008a8e:	4611      	mov	r1, r2
 8008a90:	461a      	mov	r2, r3
 8008a92:	4603      	mov	r3, r0
 8008a94:	817b      	strh	r3, [r7, #10]
 8008a96:	460b      	mov	r3, r1
 8008a98:	813b      	strh	r3, [r7, #8]
 8008a9a:	4613      	mov	r3, r2
 8008a9c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008aac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab0:	9300      	str	r3, [sp, #0]
 8008ab2:	6a3b      	ldr	r3, [r7, #32]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008aba:	68f8      	ldr	r0, [r7, #12]
 8008abc:	f000 fb1a 	bl	80090f4 <I2C_WaitOnFlagUntilTimeout>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d00d      	beq.n	8008ae2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ad0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ad4:	d103      	bne.n	8008ade <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008adc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008ade:	2303      	movs	r3, #3
 8008ae0:	e05f      	b.n	8008ba2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008ae2:	897b      	ldrh	r3, [r7, #10]
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008af0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af4:	6a3a      	ldr	r2, [r7, #32]
 8008af6:	492d      	ldr	r1, [pc, #180]	@ (8008bac <I2C_RequestMemoryWrite+0x128>)
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	f000 fb52 	bl	80091a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d001      	beq.n	8008b08 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	e04c      	b.n	8008ba2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b08:	2300      	movs	r3, #0
 8008b0a:	617b      	str	r3, [r7, #20]
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	695b      	ldr	r3, [r3, #20]
 8008b12:	617b      	str	r3, [r7, #20]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	699b      	ldr	r3, [r3, #24]
 8008b1a:	617b      	str	r3, [r7, #20]
 8008b1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b20:	6a39      	ldr	r1, [r7, #32]
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f000 fbbc 	bl	80092a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00d      	beq.n	8008b4a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b32:	2b04      	cmp	r3, #4
 8008b34:	d107      	bne.n	8008b46 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e02b      	b.n	8008ba2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008b4a:	88fb      	ldrh	r3, [r7, #6]
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d105      	bne.n	8008b5c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008b50:	893b      	ldrh	r3, [r7, #8]
 8008b52:	b2da      	uxtb	r2, r3
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	611a      	str	r2, [r3, #16]
 8008b5a:	e021      	b.n	8008ba0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008b5c:	893b      	ldrh	r3, [r7, #8]
 8008b5e:	0a1b      	lsrs	r3, r3, #8
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	b2da      	uxtb	r2, r3
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b6c:	6a39      	ldr	r1, [r7, #32]
 8008b6e:	68f8      	ldr	r0, [r7, #12]
 8008b70:	f000 fb96 	bl	80092a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b74:	4603      	mov	r3, r0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00d      	beq.n	8008b96 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b7e:	2b04      	cmp	r3, #4
 8008b80:	d107      	bne.n	8008b92 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	e005      	b.n	8008ba2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008b96:	893b      	ldrh	r3, [r7, #8]
 8008b98:	b2da      	uxtb	r2, r3
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008ba0:	2300      	movs	r3, #0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3718      	adds	r7, #24
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	00010002 	.word	0x00010002

08008bb0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b088      	sub	sp, #32
 8008bb4:	af02      	add	r7, sp, #8
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	4608      	mov	r0, r1
 8008bba:	4611      	mov	r1, r2
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	817b      	strh	r3, [r7, #10]
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	813b      	strh	r3, [r7, #8]
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008bd8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008be8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bec:	9300      	str	r3, [sp, #0]
 8008bee:	6a3b      	ldr	r3, [r7, #32]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008bf6:	68f8      	ldr	r0, [r7, #12]
 8008bf8:	f000 fa7c 	bl	80090f4 <I2C_WaitOnFlagUntilTimeout>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00d      	beq.n	8008c1e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c10:	d103      	bne.n	8008c1a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c18:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008c1a:	2303      	movs	r3, #3
 8008c1c:	e0aa      	b.n	8008d74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008c1e:	897b      	ldrh	r3, [r7, #10]
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	461a      	mov	r2, r3
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008c2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c30:	6a3a      	ldr	r2, [r7, #32]
 8008c32:	4952      	ldr	r1, [pc, #328]	@ (8008d7c <I2C_RequestMemoryRead+0x1cc>)
 8008c34:	68f8      	ldr	r0, [r7, #12]
 8008c36:	f000 fab4 	bl	80091a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d001      	beq.n	8008c44 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008c40:	2301      	movs	r3, #1
 8008c42:	e097      	b.n	8008d74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c44:	2300      	movs	r3, #0
 8008c46:	617b      	str	r3, [r7, #20]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	695b      	ldr	r3, [r3, #20]
 8008c4e:	617b      	str	r3, [r7, #20]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	699b      	ldr	r3, [r3, #24]
 8008c56:	617b      	str	r3, [r7, #20]
 8008c58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c5c:	6a39      	ldr	r1, [r7, #32]
 8008c5e:	68f8      	ldr	r0, [r7, #12]
 8008c60:	f000 fb1e 	bl	80092a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d00d      	beq.n	8008c86 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c6e:	2b04      	cmp	r3, #4
 8008c70:	d107      	bne.n	8008c82 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008c80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	e076      	b.n	8008d74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008c86:	88fb      	ldrh	r3, [r7, #6]
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d105      	bne.n	8008c98 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008c8c:	893b      	ldrh	r3, [r7, #8]
 8008c8e:	b2da      	uxtb	r2, r3
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	611a      	str	r2, [r3, #16]
 8008c96:	e021      	b.n	8008cdc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008c98:	893b      	ldrh	r3, [r7, #8]
 8008c9a:	0a1b      	lsrs	r3, r3, #8
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	b2da      	uxtb	r2, r3
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ca8:	6a39      	ldr	r1, [r7, #32]
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	f000 faf8 	bl	80092a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00d      	beq.n	8008cd2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cba:	2b04      	cmp	r3, #4
 8008cbc:	d107      	bne.n	8008cce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ccc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e050      	b.n	8008d74 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008cd2:	893b      	ldrh	r3, [r7, #8]
 8008cd4:	b2da      	uxtb	r2, r3
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cde:	6a39      	ldr	r1, [r7, #32]
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	f000 fadd 	bl	80092a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d00d      	beq.n	8008d08 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cf0:	2b04      	cmp	r3, #4
 8008cf2:	d107      	bne.n	8008d04 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d02:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008d04:	2301      	movs	r3, #1
 8008d06:	e035      	b.n	8008d74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008d16:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d1a:	9300      	str	r3, [sp, #0]
 8008d1c:	6a3b      	ldr	r3, [r7, #32]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	f000 f9e5 	bl	80090f4 <I2C_WaitOnFlagUntilTimeout>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d00d      	beq.n	8008d4c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d3e:	d103      	bne.n	8008d48 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008d46:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008d48:	2303      	movs	r3, #3
 8008d4a:	e013      	b.n	8008d74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008d4c:	897b      	ldrh	r3, [r7, #10]
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	f043 0301 	orr.w	r3, r3, #1
 8008d54:	b2da      	uxtb	r2, r3
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d5e:	6a3a      	ldr	r2, [r7, #32]
 8008d60:	4906      	ldr	r1, [pc, #24]	@ (8008d7c <I2C_RequestMemoryRead+0x1cc>)
 8008d62:	68f8      	ldr	r0, [r7, #12]
 8008d64:	f000 fa1d 	bl	80091a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d001      	beq.n	8008d72 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e000      	b.n	8008d74 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008d72:	2300      	movs	r3, #0
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3718      	adds	r7, #24
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	00010002 	.word	0x00010002

08008d80 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b086      	sub	sp, #24
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d8c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d94:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008d9c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008da2:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	685a      	ldr	r2, [r3, #4]
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8008db2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d003      	beq.n	8008dc4 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d003      	beq.n	8008dd4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8008dd4:	7cfb      	ldrb	r3, [r7, #19]
 8008dd6:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8008dda:	2b21      	cmp	r3, #33	@ 0x21
 8008ddc:	d007      	beq.n	8008dee <I2C_DMAXferCplt+0x6e>
 8008dde:	7cfb      	ldrb	r3, [r7, #19]
 8008de0:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8008de4:	2b22      	cmp	r3, #34	@ 0x22
 8008de6:	d131      	bne.n	8008e4c <I2C_DMAXferCplt+0xcc>
 8008de8:	7cbb      	ldrb	r3, [r7, #18]
 8008dea:	2b20      	cmp	r3, #32
 8008dec:	d12e      	bne.n	8008e4c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	685a      	ldr	r2, [r3, #4]
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008dfc:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	2200      	movs	r2, #0
 8008e02:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008e04:	7cfb      	ldrb	r3, [r7, #19]
 8008e06:	2b29      	cmp	r3, #41	@ 0x29
 8008e08:	d10a      	bne.n	8008e20 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	2221      	movs	r2, #33	@ 0x21
 8008e0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	2228      	movs	r2, #40	@ 0x28
 8008e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008e18:	6978      	ldr	r0, [r7, #20]
 8008e1a:	f7fe fba4 	bl	8007566 <HAL_I2C_SlaveTxCpltCallback>
 8008e1e:	e00c      	b.n	8008e3a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008e20:	7cfb      	ldrb	r3, [r7, #19]
 8008e22:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e24:	d109      	bne.n	8008e3a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	2222      	movs	r2, #34	@ 0x22
 8008e2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	2228      	movs	r2, #40	@ 0x28
 8008e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008e34:	6978      	ldr	r0, [r7, #20]
 8008e36:	f7fe fba0 	bl	800757a <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	685a      	ldr	r2, [r3, #4]
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8008e48:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8008e4a:	e06a      	b.n	8008f22 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d064      	beq.n	8008f22 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d107      	bne.n	8008e72 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e70:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	685a      	ldr	r2, [r3, #4]
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8008e80:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008e88:	d009      	beq.n	8008e9e <I2C_DMAXferCplt+0x11e>
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2b08      	cmp	r3, #8
 8008e8e:	d006      	beq.n	8008e9e <I2C_DMAXferCplt+0x11e>
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8008e96:	d002      	beq.n	8008e9e <I2C_DMAXferCplt+0x11e>
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2b20      	cmp	r3, #32
 8008e9c:	d107      	bne.n	8008eae <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008eac:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	685a      	ldr	r2, [r3, #4]
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008ebc:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	685a      	ldr	r2, [r3, #4]
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008ecc:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d003      	beq.n	8008ee4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8008edc:	6978      	ldr	r0, [r7, #20]
 8008ede:	f7fe fb78 	bl	80075d2 <HAL_I2C_ErrorCallback>
}
 8008ee2:	e01e      	b.n	8008f22 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	2220      	movs	r2, #32
 8008ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	2b40      	cmp	r3, #64	@ 0x40
 8008ef6:	d10a      	bne.n	8008f0e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	2200      	movs	r2, #0
 8008efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	2200      	movs	r2, #0
 8008f04:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8008f06:	6978      	ldr	r0, [r7, #20]
 8008f08:	f7f9 fb0e 	bl	8002528 <HAL_I2C_MemRxCpltCallback>
}
 8008f0c:	e009      	b.n	8008f22 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	2200      	movs	r2, #0
 8008f12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	2212      	movs	r2, #18
 8008f1a:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8008f1c:	6978      	ldr	r0, [r7, #20]
 8008f1e:	f7fe fb18 	bl	8007552 <HAL_I2C_MasterRxCpltCallback>
}
 8008f22:	bf00      	nop
 8008f24:	3718      	adds	r7, #24
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b084      	sub	sp, #16
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f36:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d003      	beq.n	8008f48 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f44:	2200      	movs	r2, #0
 8008f46:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d003      	beq.n	8008f58 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f54:	2200      	movs	r2, #0
 8008f56:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f7fc fca1 	bl	80058a0 <HAL_DMA_GetError>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	2b02      	cmp	r3, #2
 8008f62:	d01b      	beq.n	8008f9c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f72:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2200      	movs	r2, #0
 8008f78:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2220      	movs	r2, #32
 8008f7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2200      	movs	r2, #0
 8008f86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f8e:	f043 0210 	orr.w	r2, r3, #16
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f7fe fb1b 	bl	80075d2 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008f9c:	bf00      	nop
 8008f9e:	3710      	adds	r7, #16
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b086      	sub	sp, #24
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008fac:	2300      	movs	r3, #0
 8008fae:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fb4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008fbc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008fbe:	4b4b      	ldr	r3, [pc, #300]	@ (80090ec <I2C_DMAAbort+0x148>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	08db      	lsrs	r3, r3, #3
 8008fc4:	4a4a      	ldr	r2, [pc, #296]	@ (80090f0 <I2C_DMAAbort+0x14c>)
 8008fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8008fca:	0a1a      	lsrs	r2, r3, #8
 8008fcc:	4613      	mov	r3, r2
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	4413      	add	r3, r2
 8008fd2:	00da      	lsls	r2, r3, #3
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d106      	bne.n	8008fec <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fe2:	f043 0220 	orr.w	r2, r3, #32
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8008fea:	e00a      	b.n	8009002 <I2C_DMAAbort+0x5e>
    }
    count--;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	3b01      	subs	r3, #1
 8008ff0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ffc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009000:	d0ea      	beq.n	8008fd8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009006:	2b00      	cmp	r3, #0
 8009008:	d003      	beq.n	8009012 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800900e:	2200      	movs	r2, #0
 8009010:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009016:	2b00      	cmp	r3, #0
 8009018:	d003      	beq.n	8009022 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800901e:	2200      	movs	r2, #0
 8009020:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009030:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	2200      	movs	r2, #0
 8009036:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800903c:	2b00      	cmp	r3, #0
 800903e:	d003      	beq.n	8009048 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009044:	2200      	movs	r2, #0
 8009046:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800904c:	2b00      	cmp	r3, #0
 800904e:	d003      	beq.n	8009058 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009054:	2200      	movs	r2, #0
 8009056:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f022 0201 	bic.w	r2, r2, #1
 8009066:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800906e:	b2db      	uxtb	r3, r3
 8009070:	2b60      	cmp	r3, #96	@ 0x60
 8009072:	d10e      	bne.n	8009092 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	2220      	movs	r2, #32
 8009078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	2200      	movs	r2, #0
 8009080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	2200      	movs	r2, #0
 8009088:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800908a:	6978      	ldr	r0, [r7, #20]
 800908c:	f7fe faab 	bl	80075e6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009090:	e027      	b.n	80090e2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009092:	7cfb      	ldrb	r3, [r7, #19]
 8009094:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009098:	2b28      	cmp	r3, #40	@ 0x28
 800909a:	d117      	bne.n	80090cc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f042 0201 	orr.w	r2, r2, #1
 80090aa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80090ba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	2200      	movs	r2, #0
 80090c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	2228      	movs	r2, #40	@ 0x28
 80090c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80090ca:	e007      	b.n	80090dc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	2220      	movs	r2, #32
 80090d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	2200      	movs	r2, #0
 80090d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80090dc:	6978      	ldr	r0, [r7, #20]
 80090de:	f7fe fa78 	bl	80075d2 <HAL_I2C_ErrorCallback>
}
 80090e2:	bf00      	nop
 80090e4:	3718      	adds	r7, #24
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	20000004 	.word	0x20000004
 80090f0:	14f8b589 	.word	0x14f8b589

080090f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	60b9      	str	r1, [r7, #8]
 80090fe:	603b      	str	r3, [r7, #0]
 8009100:	4613      	mov	r3, r2
 8009102:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009104:	e025      	b.n	8009152 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800910c:	d021      	beq.n	8009152 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800910e:	f7fb fa49 	bl	80045a4 <HAL_GetTick>
 8009112:	4602      	mov	r2, r0
 8009114:	69bb      	ldr	r3, [r7, #24]
 8009116:	1ad3      	subs	r3, r2, r3
 8009118:	683a      	ldr	r2, [r7, #0]
 800911a:	429a      	cmp	r2, r3
 800911c:	d302      	bcc.n	8009124 <I2C_WaitOnFlagUntilTimeout+0x30>
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d116      	bne.n	8009152 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2220      	movs	r2, #32
 800912e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2200      	movs	r2, #0
 8009136:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800913e:	f043 0220 	orr.w	r2, r3, #32
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2200      	movs	r2, #0
 800914a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	e023      	b.n	800919a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	0c1b      	lsrs	r3, r3, #16
 8009156:	b2db      	uxtb	r3, r3
 8009158:	2b01      	cmp	r3, #1
 800915a:	d10d      	bne.n	8009178 <I2C_WaitOnFlagUntilTimeout+0x84>
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	695b      	ldr	r3, [r3, #20]
 8009162:	43da      	mvns	r2, r3
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	4013      	ands	r3, r2
 8009168:	b29b      	uxth	r3, r3
 800916a:	2b00      	cmp	r3, #0
 800916c:	bf0c      	ite	eq
 800916e:	2301      	moveq	r3, #1
 8009170:	2300      	movne	r3, #0
 8009172:	b2db      	uxtb	r3, r3
 8009174:	461a      	mov	r2, r3
 8009176:	e00c      	b.n	8009192 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	699b      	ldr	r3, [r3, #24]
 800917e:	43da      	mvns	r2, r3
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	4013      	ands	r3, r2
 8009184:	b29b      	uxth	r3, r3
 8009186:	2b00      	cmp	r3, #0
 8009188:	bf0c      	ite	eq
 800918a:	2301      	moveq	r3, #1
 800918c:	2300      	movne	r3, #0
 800918e:	b2db      	uxtb	r3, r3
 8009190:	461a      	mov	r2, r3
 8009192:	79fb      	ldrb	r3, [r7, #7]
 8009194:	429a      	cmp	r2, r3
 8009196:	d0b6      	beq.n	8009106 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009198:	2300      	movs	r3, #0
}
 800919a:	4618      	mov	r0, r3
 800919c:	3710      	adds	r7, #16
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}

080091a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b084      	sub	sp, #16
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	60f8      	str	r0, [r7, #12]
 80091aa:	60b9      	str	r1, [r7, #8]
 80091ac:	607a      	str	r2, [r7, #4]
 80091ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80091b0:	e051      	b.n	8009256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	695b      	ldr	r3, [r3, #20]
 80091b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80091bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091c0:	d123      	bne.n	800920a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80091d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80091da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2200      	movs	r2, #0
 80091e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2220      	movs	r2, #32
 80091e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2200      	movs	r2, #0
 80091ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091f6:	f043 0204 	orr.w	r2, r3, #4
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2200      	movs	r2, #0
 8009202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009206:	2301      	movs	r3, #1
 8009208:	e046      	b.n	8009298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009210:	d021      	beq.n	8009256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009212:	f7fb f9c7 	bl	80045a4 <HAL_GetTick>
 8009216:	4602      	mov	r2, r0
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	1ad3      	subs	r3, r2, r3
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	429a      	cmp	r2, r3
 8009220:	d302      	bcc.n	8009228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d116      	bne.n	8009256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2200      	movs	r2, #0
 800922c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2220      	movs	r2, #32
 8009232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2200      	movs	r2, #0
 800923a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009242:	f043 0220 	orr.w	r2, r3, #32
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2200      	movs	r2, #0
 800924e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	e020      	b.n	8009298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	0c1b      	lsrs	r3, r3, #16
 800925a:	b2db      	uxtb	r3, r3
 800925c:	2b01      	cmp	r3, #1
 800925e:	d10c      	bne.n	800927a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	695b      	ldr	r3, [r3, #20]
 8009266:	43da      	mvns	r2, r3
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	4013      	ands	r3, r2
 800926c:	b29b      	uxth	r3, r3
 800926e:	2b00      	cmp	r3, #0
 8009270:	bf14      	ite	ne
 8009272:	2301      	movne	r3, #1
 8009274:	2300      	moveq	r3, #0
 8009276:	b2db      	uxtb	r3, r3
 8009278:	e00b      	b.n	8009292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	699b      	ldr	r3, [r3, #24]
 8009280:	43da      	mvns	r2, r3
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	4013      	ands	r3, r2
 8009286:	b29b      	uxth	r3, r3
 8009288:	2b00      	cmp	r3, #0
 800928a:	bf14      	ite	ne
 800928c:	2301      	movne	r3, #1
 800928e:	2300      	moveq	r3, #0
 8009290:	b2db      	uxtb	r3, r3
 8009292:	2b00      	cmp	r3, #0
 8009294:	d18d      	bne.n	80091b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	3710      	adds	r7, #16
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	60b9      	str	r1, [r7, #8]
 80092aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80092ac:	e02d      	b.n	800930a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80092ae:	68f8      	ldr	r0, [r7, #12]
 80092b0:	f000 f900 	bl	80094b4 <I2C_IsAcknowledgeFailed>
 80092b4:	4603      	mov	r3, r0
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d001      	beq.n	80092be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80092ba:	2301      	movs	r3, #1
 80092bc:	e02d      	b.n	800931a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092c4:	d021      	beq.n	800930a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092c6:	f7fb f96d 	bl	80045a4 <HAL_GetTick>
 80092ca:	4602      	mov	r2, r0
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	1ad3      	subs	r3, r2, r3
 80092d0:	68ba      	ldr	r2, [r7, #8]
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d302      	bcc.n	80092dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d116      	bne.n	800930a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2200      	movs	r2, #0
 80092e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2220      	movs	r2, #32
 80092e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2200      	movs	r2, #0
 80092ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092f6:	f043 0220 	orr.w	r2, r3, #32
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2200      	movs	r2, #0
 8009302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009306:	2301      	movs	r3, #1
 8009308:	e007      	b.n	800931a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	695b      	ldr	r3, [r3, #20]
 8009310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009314:	2b80      	cmp	r3, #128	@ 0x80
 8009316:	d1ca      	bne.n	80092ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009318:	2300      	movs	r3, #0
}
 800931a:	4618      	mov	r0, r3
 800931c:	3710      	adds	r7, #16
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}

08009322 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009322:	b580      	push	{r7, lr}
 8009324:	b084      	sub	sp, #16
 8009326:	af00      	add	r7, sp, #0
 8009328:	60f8      	str	r0, [r7, #12]
 800932a:	60b9      	str	r1, [r7, #8]
 800932c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800932e:	e02d      	b.n	800938c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009330:	68f8      	ldr	r0, [r7, #12]
 8009332:	f000 f8bf 	bl	80094b4 <I2C_IsAcknowledgeFailed>
 8009336:	4603      	mov	r3, r0
 8009338:	2b00      	cmp	r3, #0
 800933a:	d001      	beq.n	8009340 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800933c:	2301      	movs	r3, #1
 800933e:	e02d      	b.n	800939c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009346:	d021      	beq.n	800938c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009348:	f7fb f92c 	bl	80045a4 <HAL_GetTick>
 800934c:	4602      	mov	r2, r0
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	1ad3      	subs	r3, r2, r3
 8009352:	68ba      	ldr	r2, [r7, #8]
 8009354:	429a      	cmp	r2, r3
 8009356:	d302      	bcc.n	800935e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d116      	bne.n	800938c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2200      	movs	r2, #0
 8009362:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2220      	movs	r2, #32
 8009368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2200      	movs	r2, #0
 8009370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009378:	f043 0220 	orr.w	r2, r3, #32
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2200      	movs	r2, #0
 8009384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009388:	2301      	movs	r3, #1
 800938a:	e007      	b.n	800939c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	695b      	ldr	r3, [r3, #20]
 8009392:	f003 0304 	and.w	r3, r3, #4
 8009396:	2b04      	cmp	r3, #4
 8009398:	d1ca      	bne.n	8009330 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800939a:	2300      	movs	r3, #0
}
 800939c:	4618      	mov	r0, r3
 800939e:	3710      	adds	r7, #16
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b085      	sub	sp, #20
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80093ac:	2300      	movs	r3, #0
 80093ae:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80093b0:	4b13      	ldr	r3, [pc, #76]	@ (8009400 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	08db      	lsrs	r3, r3, #3
 80093b6:	4a13      	ldr	r2, [pc, #76]	@ (8009404 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80093b8:	fba2 2303 	umull	r2, r3, r2, r3
 80093bc:	0a1a      	lsrs	r2, r3, #8
 80093be:	4613      	mov	r3, r2
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	4413      	add	r3, r2
 80093c4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	3b01      	subs	r3, #1
 80093ca:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d107      	bne.n	80093e2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093d6:	f043 0220 	orr.w	r2, r3, #32
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80093de:	2301      	movs	r3, #1
 80093e0:	e008      	b.n	80093f4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80093ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093f0:	d0e9      	beq.n	80093c6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80093f2:	2300      	movs	r3, #0
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3714      	adds	r7, #20
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr
 8009400:	20000004 	.word	0x20000004
 8009404:	14f8b589 	.word	0x14f8b589

08009408 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009414:	e042      	b.n	800949c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	695b      	ldr	r3, [r3, #20]
 800941c:	f003 0310 	and.w	r3, r3, #16
 8009420:	2b10      	cmp	r3, #16
 8009422:	d119      	bne.n	8009458 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f06f 0210 	mvn.w	r2, #16
 800942c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2200      	movs	r2, #0
 8009432:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2220      	movs	r2, #32
 8009438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2200      	movs	r2, #0
 8009440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2200      	movs	r2, #0
 8009450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009454:	2301      	movs	r3, #1
 8009456:	e029      	b.n	80094ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009458:	f7fb f8a4 	bl	80045a4 <HAL_GetTick>
 800945c:	4602      	mov	r2, r0
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	1ad3      	subs	r3, r2, r3
 8009462:	68ba      	ldr	r2, [r7, #8]
 8009464:	429a      	cmp	r2, r3
 8009466:	d302      	bcc.n	800946e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d116      	bne.n	800949c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2200      	movs	r2, #0
 8009472:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2220      	movs	r2, #32
 8009478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2200      	movs	r2, #0
 8009480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009488:	f043 0220 	orr.w	r2, r3, #32
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2200      	movs	r2, #0
 8009494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009498:	2301      	movs	r3, #1
 800949a:	e007      	b.n	80094ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	695b      	ldr	r3, [r3, #20]
 80094a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094a6:	2b40      	cmp	r3, #64	@ 0x40
 80094a8:	d1b5      	bne.n	8009416 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80094aa:	2300      	movs	r3, #0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3710      	adds	r7, #16
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	695b      	ldr	r3, [r3, #20]
 80094c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80094c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094ca:	d11b      	bne.n	8009504 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80094d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2220      	movs	r2, #32
 80094e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094f0:	f043 0204 	orr.w	r2, r3, #4
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009500:	2301      	movs	r3, #1
 8009502:	e000      	b.n	8009506 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009504:	2300      	movs	r3, #0
}
 8009506:	4618      	mov	r0, r3
 8009508:	370c      	adds	r7, #12
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr

08009512 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8009512:	b480      	push	{r7}
 8009514:	b083      	sub	sp, #12
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800951e:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8009522:	d103      	bne.n	800952c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2201      	movs	r2, #1
 8009528:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800952a:	e007      	b.n	800953c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009530:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8009534:	d102      	bne.n	800953c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2208      	movs	r2, #8
 800953a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800953c:	bf00      	nop
 800953e:	370c      	adds	r7, #12
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr

08009548 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d101      	bne.n	800955c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009558:	2301      	movs	r3, #1
 800955a:	e0cc      	b.n	80096f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800955c:	4b68      	ldr	r3, [pc, #416]	@ (8009700 <HAL_RCC_ClockConfig+0x1b8>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f003 030f 	and.w	r3, r3, #15
 8009564:	683a      	ldr	r2, [r7, #0]
 8009566:	429a      	cmp	r2, r3
 8009568:	d90c      	bls.n	8009584 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800956a:	4b65      	ldr	r3, [pc, #404]	@ (8009700 <HAL_RCC_ClockConfig+0x1b8>)
 800956c:	683a      	ldr	r2, [r7, #0]
 800956e:	b2d2      	uxtb	r2, r2
 8009570:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009572:	4b63      	ldr	r3, [pc, #396]	@ (8009700 <HAL_RCC_ClockConfig+0x1b8>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f003 030f 	and.w	r3, r3, #15
 800957a:	683a      	ldr	r2, [r7, #0]
 800957c:	429a      	cmp	r2, r3
 800957e:	d001      	beq.n	8009584 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	e0b8      	b.n	80096f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f003 0302 	and.w	r3, r3, #2
 800958c:	2b00      	cmp	r3, #0
 800958e:	d020      	beq.n	80095d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f003 0304 	and.w	r3, r3, #4
 8009598:	2b00      	cmp	r3, #0
 800959a:	d005      	beq.n	80095a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800959c:	4b59      	ldr	r3, [pc, #356]	@ (8009704 <HAL_RCC_ClockConfig+0x1bc>)
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	4a58      	ldr	r2, [pc, #352]	@ (8009704 <HAL_RCC_ClockConfig+0x1bc>)
 80095a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80095a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f003 0308 	and.w	r3, r3, #8
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d005      	beq.n	80095c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80095b4:	4b53      	ldr	r3, [pc, #332]	@ (8009704 <HAL_RCC_ClockConfig+0x1bc>)
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	4a52      	ldr	r2, [pc, #328]	@ (8009704 <HAL_RCC_ClockConfig+0x1bc>)
 80095ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80095be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80095c0:	4b50      	ldr	r3, [pc, #320]	@ (8009704 <HAL_RCC_ClockConfig+0x1bc>)
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	494d      	ldr	r1, [pc, #308]	@ (8009704 <HAL_RCC_ClockConfig+0x1bc>)
 80095ce:	4313      	orrs	r3, r2
 80095d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f003 0301 	and.w	r3, r3, #1
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d044      	beq.n	8009668 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d107      	bne.n	80095f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80095e6:	4b47      	ldr	r3, [pc, #284]	@ (8009704 <HAL_RCC_ClockConfig+0x1bc>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d119      	bne.n	8009626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80095f2:	2301      	movs	r3, #1
 80095f4:	e07f      	b.n	80096f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	d003      	beq.n	8009606 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009602:	2b03      	cmp	r3, #3
 8009604:	d107      	bne.n	8009616 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009606:	4b3f      	ldr	r3, [pc, #252]	@ (8009704 <HAL_RCC_ClockConfig+0x1bc>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800960e:	2b00      	cmp	r3, #0
 8009610:	d109      	bne.n	8009626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009612:	2301      	movs	r3, #1
 8009614:	e06f      	b.n	80096f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009616:	4b3b      	ldr	r3, [pc, #236]	@ (8009704 <HAL_RCC_ClockConfig+0x1bc>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f003 0302 	and.w	r3, r3, #2
 800961e:	2b00      	cmp	r3, #0
 8009620:	d101      	bne.n	8009626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009622:	2301      	movs	r3, #1
 8009624:	e067      	b.n	80096f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009626:	4b37      	ldr	r3, [pc, #220]	@ (8009704 <HAL_RCC_ClockConfig+0x1bc>)
 8009628:	689b      	ldr	r3, [r3, #8]
 800962a:	f023 0203 	bic.w	r2, r3, #3
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	4934      	ldr	r1, [pc, #208]	@ (8009704 <HAL_RCC_ClockConfig+0x1bc>)
 8009634:	4313      	orrs	r3, r2
 8009636:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009638:	f7fa ffb4 	bl	80045a4 <HAL_GetTick>
 800963c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800963e:	e00a      	b.n	8009656 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009640:	f7fa ffb0 	bl	80045a4 <HAL_GetTick>
 8009644:	4602      	mov	r2, r0
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	1ad3      	subs	r3, r2, r3
 800964a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800964e:	4293      	cmp	r3, r2
 8009650:	d901      	bls.n	8009656 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009652:	2303      	movs	r3, #3
 8009654:	e04f      	b.n	80096f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009656:	4b2b      	ldr	r3, [pc, #172]	@ (8009704 <HAL_RCC_ClockConfig+0x1bc>)
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	f003 020c 	and.w	r2, r3, #12
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	429a      	cmp	r2, r3
 8009666:	d1eb      	bne.n	8009640 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009668:	4b25      	ldr	r3, [pc, #148]	@ (8009700 <HAL_RCC_ClockConfig+0x1b8>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f003 030f 	and.w	r3, r3, #15
 8009670:	683a      	ldr	r2, [r7, #0]
 8009672:	429a      	cmp	r2, r3
 8009674:	d20c      	bcs.n	8009690 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009676:	4b22      	ldr	r3, [pc, #136]	@ (8009700 <HAL_RCC_ClockConfig+0x1b8>)
 8009678:	683a      	ldr	r2, [r7, #0]
 800967a:	b2d2      	uxtb	r2, r2
 800967c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800967e:	4b20      	ldr	r3, [pc, #128]	@ (8009700 <HAL_RCC_ClockConfig+0x1b8>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f003 030f 	and.w	r3, r3, #15
 8009686:	683a      	ldr	r2, [r7, #0]
 8009688:	429a      	cmp	r2, r3
 800968a:	d001      	beq.n	8009690 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	e032      	b.n	80096f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f003 0304 	and.w	r3, r3, #4
 8009698:	2b00      	cmp	r3, #0
 800969a:	d008      	beq.n	80096ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800969c:	4b19      	ldr	r3, [pc, #100]	@ (8009704 <HAL_RCC_ClockConfig+0x1bc>)
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	4916      	ldr	r1, [pc, #88]	@ (8009704 <HAL_RCC_ClockConfig+0x1bc>)
 80096aa:	4313      	orrs	r3, r2
 80096ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f003 0308 	and.w	r3, r3, #8
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d009      	beq.n	80096ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80096ba:	4b12      	ldr	r3, [pc, #72]	@ (8009704 <HAL_RCC_ClockConfig+0x1bc>)
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	00db      	lsls	r3, r3, #3
 80096c8:	490e      	ldr	r1, [pc, #56]	@ (8009704 <HAL_RCC_ClockConfig+0x1bc>)
 80096ca:	4313      	orrs	r3, r2
 80096cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80096ce:	f000 f887 	bl	80097e0 <HAL_RCC_GetSysClockFreq>
 80096d2:	4602      	mov	r2, r0
 80096d4:	4b0b      	ldr	r3, [pc, #44]	@ (8009704 <HAL_RCC_ClockConfig+0x1bc>)
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	091b      	lsrs	r3, r3, #4
 80096da:	f003 030f 	and.w	r3, r3, #15
 80096de:	490a      	ldr	r1, [pc, #40]	@ (8009708 <HAL_RCC_ClockConfig+0x1c0>)
 80096e0:	5ccb      	ldrb	r3, [r1, r3]
 80096e2:	fa22 f303 	lsr.w	r3, r2, r3
 80096e6:	4a09      	ldr	r2, [pc, #36]	@ (800970c <HAL_RCC_ClockConfig+0x1c4>)
 80096e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80096ea:	4b09      	ldr	r3, [pc, #36]	@ (8009710 <HAL_RCC_ClockConfig+0x1c8>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7fa fd2a 	bl	8004148 <HAL_InitTick>

  return HAL_OK;
 80096f4:	2300      	movs	r3, #0
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3710      	adds	r7, #16
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	40023c00 	.word	0x40023c00
 8009704:	40023800 	.word	0x40023800
 8009708:	08015c14 	.word	0x08015c14
 800970c:	20000004 	.word	0x20000004
 8009710:	20000008 	.word	0x20000008

08009714 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009714:	b480      	push	{r7}
 8009716:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009718:	4b03      	ldr	r3, [pc, #12]	@ (8009728 <HAL_RCC_GetHCLKFreq+0x14>)
 800971a:	681b      	ldr	r3, [r3, #0]
}
 800971c:	4618      	mov	r0, r3
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr
 8009726:	bf00      	nop
 8009728:	20000004 	.word	0x20000004

0800972c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009730:	f7ff fff0 	bl	8009714 <HAL_RCC_GetHCLKFreq>
 8009734:	4602      	mov	r2, r0
 8009736:	4b05      	ldr	r3, [pc, #20]	@ (800974c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009738:	689b      	ldr	r3, [r3, #8]
 800973a:	0a9b      	lsrs	r3, r3, #10
 800973c:	f003 0307 	and.w	r3, r3, #7
 8009740:	4903      	ldr	r1, [pc, #12]	@ (8009750 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009742:	5ccb      	ldrb	r3, [r1, r3]
 8009744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009748:	4618      	mov	r0, r3
 800974a:	bd80      	pop	{r7, pc}
 800974c:	40023800 	.word	0x40023800
 8009750:	08015c24 	.word	0x08015c24

08009754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009758:	f7ff ffdc 	bl	8009714 <HAL_RCC_GetHCLKFreq>
 800975c:	4602      	mov	r2, r0
 800975e:	4b05      	ldr	r3, [pc, #20]	@ (8009774 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	0b5b      	lsrs	r3, r3, #13
 8009764:	f003 0307 	and.w	r3, r3, #7
 8009768:	4903      	ldr	r1, [pc, #12]	@ (8009778 <HAL_RCC_GetPCLK2Freq+0x24>)
 800976a:	5ccb      	ldrb	r3, [r1, r3]
 800976c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009770:	4618      	mov	r0, r3
 8009772:	bd80      	pop	{r7, pc}
 8009774:	40023800 	.word	0x40023800
 8009778:	08015c24 	.word	0x08015c24

0800977c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	220f      	movs	r2, #15
 800978a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800978c:	4b12      	ldr	r3, [pc, #72]	@ (80097d8 <HAL_RCC_GetClockConfig+0x5c>)
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	f003 0203 	and.w	r2, r3, #3
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009798:	4b0f      	ldr	r3, [pc, #60]	@ (80097d8 <HAL_RCC_GetClockConfig+0x5c>)
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80097a4:	4b0c      	ldr	r3, [pc, #48]	@ (80097d8 <HAL_RCC_GetClockConfig+0x5c>)
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80097b0:	4b09      	ldr	r3, [pc, #36]	@ (80097d8 <HAL_RCC_GetClockConfig+0x5c>)
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	08db      	lsrs	r3, r3, #3
 80097b6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80097be:	4b07      	ldr	r3, [pc, #28]	@ (80097dc <HAL_RCC_GetClockConfig+0x60>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f003 020f 	and.w	r2, r3, #15
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	601a      	str	r2, [r3, #0]
}
 80097ca:	bf00      	nop
 80097cc:	370c      	adds	r7, #12
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr
 80097d6:	bf00      	nop
 80097d8:	40023800 	.word	0x40023800
 80097dc:	40023c00 	.word	0x40023c00

080097e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80097e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80097e4:	b0ae      	sub	sp, #184	@ 0xb8
 80097e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80097e8:	2300      	movs	r3, #0
 80097ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80097ee:	2300      	movs	r3, #0
 80097f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80097f4:	2300      	movs	r3, #0
 80097f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80097fa:	2300      	movs	r3, #0
 80097fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8009800:	2300      	movs	r3, #0
 8009802:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009806:	4bcb      	ldr	r3, [pc, #812]	@ (8009b34 <HAL_RCC_GetSysClockFreq+0x354>)
 8009808:	689b      	ldr	r3, [r3, #8]
 800980a:	f003 030c 	and.w	r3, r3, #12
 800980e:	2b0c      	cmp	r3, #12
 8009810:	f200 8204 	bhi.w	8009c1c <HAL_RCC_GetSysClockFreq+0x43c>
 8009814:	a201      	add	r2, pc, #4	@ (adr r2, 800981c <HAL_RCC_GetSysClockFreq+0x3c>)
 8009816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800981a:	bf00      	nop
 800981c:	08009851 	.word	0x08009851
 8009820:	08009c1d 	.word	0x08009c1d
 8009824:	08009c1d 	.word	0x08009c1d
 8009828:	08009c1d 	.word	0x08009c1d
 800982c:	08009859 	.word	0x08009859
 8009830:	08009c1d 	.word	0x08009c1d
 8009834:	08009c1d 	.word	0x08009c1d
 8009838:	08009c1d 	.word	0x08009c1d
 800983c:	08009861 	.word	0x08009861
 8009840:	08009c1d 	.word	0x08009c1d
 8009844:	08009c1d 	.word	0x08009c1d
 8009848:	08009c1d 	.word	0x08009c1d
 800984c:	08009a51 	.word	0x08009a51
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009850:	4bb9      	ldr	r3, [pc, #740]	@ (8009b38 <HAL_RCC_GetSysClockFreq+0x358>)
 8009852:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8009856:	e1e5      	b.n	8009c24 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009858:	4bb7      	ldr	r3, [pc, #732]	@ (8009b38 <HAL_RCC_GetSysClockFreq+0x358>)
 800985a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800985e:	e1e1      	b.n	8009c24 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009860:	4bb4      	ldr	r3, [pc, #720]	@ (8009b34 <HAL_RCC_GetSysClockFreq+0x354>)
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009868:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800986c:	4bb1      	ldr	r3, [pc, #708]	@ (8009b34 <HAL_RCC_GetSysClockFreq+0x354>)
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009874:	2b00      	cmp	r3, #0
 8009876:	d071      	beq.n	800995c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009878:	4bae      	ldr	r3, [pc, #696]	@ (8009b34 <HAL_RCC_GetSysClockFreq+0x354>)
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	099b      	lsrs	r3, r3, #6
 800987e:	2200      	movs	r2, #0
 8009880:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009884:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8009888:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800988c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009890:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009894:	2300      	movs	r3, #0
 8009896:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800989a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800989e:	4622      	mov	r2, r4
 80098a0:	462b      	mov	r3, r5
 80098a2:	f04f 0000 	mov.w	r0, #0
 80098a6:	f04f 0100 	mov.w	r1, #0
 80098aa:	0159      	lsls	r1, r3, #5
 80098ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80098b0:	0150      	lsls	r0, r2, #5
 80098b2:	4602      	mov	r2, r0
 80098b4:	460b      	mov	r3, r1
 80098b6:	4621      	mov	r1, r4
 80098b8:	1a51      	subs	r1, r2, r1
 80098ba:	6439      	str	r1, [r7, #64]	@ 0x40
 80098bc:	4629      	mov	r1, r5
 80098be:	eb63 0301 	sbc.w	r3, r3, r1
 80098c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80098c4:	f04f 0200 	mov.w	r2, #0
 80098c8:	f04f 0300 	mov.w	r3, #0
 80098cc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80098d0:	4649      	mov	r1, r9
 80098d2:	018b      	lsls	r3, r1, #6
 80098d4:	4641      	mov	r1, r8
 80098d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80098da:	4641      	mov	r1, r8
 80098dc:	018a      	lsls	r2, r1, #6
 80098de:	4641      	mov	r1, r8
 80098e0:	1a51      	subs	r1, r2, r1
 80098e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80098e4:	4649      	mov	r1, r9
 80098e6:	eb63 0301 	sbc.w	r3, r3, r1
 80098ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098ec:	f04f 0200 	mov.w	r2, #0
 80098f0:	f04f 0300 	mov.w	r3, #0
 80098f4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80098f8:	4649      	mov	r1, r9
 80098fa:	00cb      	lsls	r3, r1, #3
 80098fc:	4641      	mov	r1, r8
 80098fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009902:	4641      	mov	r1, r8
 8009904:	00ca      	lsls	r2, r1, #3
 8009906:	4610      	mov	r0, r2
 8009908:	4619      	mov	r1, r3
 800990a:	4603      	mov	r3, r0
 800990c:	4622      	mov	r2, r4
 800990e:	189b      	adds	r3, r3, r2
 8009910:	633b      	str	r3, [r7, #48]	@ 0x30
 8009912:	462b      	mov	r3, r5
 8009914:	460a      	mov	r2, r1
 8009916:	eb42 0303 	adc.w	r3, r2, r3
 800991a:	637b      	str	r3, [r7, #52]	@ 0x34
 800991c:	f04f 0200 	mov.w	r2, #0
 8009920:	f04f 0300 	mov.w	r3, #0
 8009924:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009928:	4629      	mov	r1, r5
 800992a:	028b      	lsls	r3, r1, #10
 800992c:	4621      	mov	r1, r4
 800992e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009932:	4621      	mov	r1, r4
 8009934:	028a      	lsls	r2, r1, #10
 8009936:	4610      	mov	r0, r2
 8009938:	4619      	mov	r1, r3
 800993a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800993e:	2200      	movs	r2, #0
 8009940:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009944:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009948:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800994c:	f7f7 f9bc 	bl	8000cc8 <__aeabi_uldivmod>
 8009950:	4602      	mov	r2, r0
 8009952:	460b      	mov	r3, r1
 8009954:	4613      	mov	r3, r2
 8009956:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800995a:	e067      	b.n	8009a2c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800995c:	4b75      	ldr	r3, [pc, #468]	@ (8009b34 <HAL_RCC_GetSysClockFreq+0x354>)
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	099b      	lsrs	r3, r3, #6
 8009962:	2200      	movs	r2, #0
 8009964:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009968:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800996c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009974:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009976:	2300      	movs	r3, #0
 8009978:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800997a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800997e:	4622      	mov	r2, r4
 8009980:	462b      	mov	r3, r5
 8009982:	f04f 0000 	mov.w	r0, #0
 8009986:	f04f 0100 	mov.w	r1, #0
 800998a:	0159      	lsls	r1, r3, #5
 800998c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009990:	0150      	lsls	r0, r2, #5
 8009992:	4602      	mov	r2, r0
 8009994:	460b      	mov	r3, r1
 8009996:	4621      	mov	r1, r4
 8009998:	1a51      	subs	r1, r2, r1
 800999a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800999c:	4629      	mov	r1, r5
 800999e:	eb63 0301 	sbc.w	r3, r3, r1
 80099a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099a4:	f04f 0200 	mov.w	r2, #0
 80099a8:	f04f 0300 	mov.w	r3, #0
 80099ac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80099b0:	4649      	mov	r1, r9
 80099b2:	018b      	lsls	r3, r1, #6
 80099b4:	4641      	mov	r1, r8
 80099b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80099ba:	4641      	mov	r1, r8
 80099bc:	018a      	lsls	r2, r1, #6
 80099be:	4641      	mov	r1, r8
 80099c0:	ebb2 0a01 	subs.w	sl, r2, r1
 80099c4:	4649      	mov	r1, r9
 80099c6:	eb63 0b01 	sbc.w	fp, r3, r1
 80099ca:	f04f 0200 	mov.w	r2, #0
 80099ce:	f04f 0300 	mov.w	r3, #0
 80099d2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80099d6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80099da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80099de:	4692      	mov	sl, r2
 80099e0:	469b      	mov	fp, r3
 80099e2:	4623      	mov	r3, r4
 80099e4:	eb1a 0303 	adds.w	r3, sl, r3
 80099e8:	623b      	str	r3, [r7, #32]
 80099ea:	462b      	mov	r3, r5
 80099ec:	eb4b 0303 	adc.w	r3, fp, r3
 80099f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80099f2:	f04f 0200 	mov.w	r2, #0
 80099f6:	f04f 0300 	mov.w	r3, #0
 80099fa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80099fe:	4629      	mov	r1, r5
 8009a00:	028b      	lsls	r3, r1, #10
 8009a02:	4621      	mov	r1, r4
 8009a04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009a08:	4621      	mov	r1, r4
 8009a0a:	028a      	lsls	r2, r1, #10
 8009a0c:	4610      	mov	r0, r2
 8009a0e:	4619      	mov	r1, r3
 8009a10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a14:	2200      	movs	r2, #0
 8009a16:	673b      	str	r3, [r7, #112]	@ 0x70
 8009a18:	677a      	str	r2, [r7, #116]	@ 0x74
 8009a1a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8009a1e:	f7f7 f953 	bl	8000cc8 <__aeabi_uldivmod>
 8009a22:	4602      	mov	r2, r0
 8009a24:	460b      	mov	r3, r1
 8009a26:	4613      	mov	r3, r2
 8009a28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009a2c:	4b41      	ldr	r3, [pc, #260]	@ (8009b34 <HAL_RCC_GetSysClockFreq+0x354>)
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	0c1b      	lsrs	r3, r3, #16
 8009a32:	f003 0303 	and.w	r3, r3, #3
 8009a36:	3301      	adds	r3, #1
 8009a38:	005b      	lsls	r3, r3, #1
 8009a3a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8009a3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009a42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009a4e:	e0e9      	b.n	8009c24 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009a50:	4b38      	ldr	r3, [pc, #224]	@ (8009b34 <HAL_RCC_GetSysClockFreq+0x354>)
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009a5c:	4b35      	ldr	r3, [pc, #212]	@ (8009b34 <HAL_RCC_GetSysClockFreq+0x354>)
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d069      	beq.n	8009b3c <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009a68:	4b32      	ldr	r3, [pc, #200]	@ (8009b34 <HAL_RCC_GetSysClockFreq+0x354>)
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	099b      	lsrs	r3, r3, #6
 8009a6e:	2200      	movs	r2, #0
 8009a70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009a72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009a74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a7a:	663b      	str	r3, [r7, #96]	@ 0x60
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	667b      	str	r3, [r7, #100]	@ 0x64
 8009a80:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8009a84:	4622      	mov	r2, r4
 8009a86:	462b      	mov	r3, r5
 8009a88:	f04f 0000 	mov.w	r0, #0
 8009a8c:	f04f 0100 	mov.w	r1, #0
 8009a90:	0159      	lsls	r1, r3, #5
 8009a92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009a96:	0150      	lsls	r0, r2, #5
 8009a98:	4602      	mov	r2, r0
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	4621      	mov	r1, r4
 8009a9e:	1a51      	subs	r1, r2, r1
 8009aa0:	61b9      	str	r1, [r7, #24]
 8009aa2:	4629      	mov	r1, r5
 8009aa4:	eb63 0301 	sbc.w	r3, r3, r1
 8009aa8:	61fb      	str	r3, [r7, #28]
 8009aaa:	f04f 0200 	mov.w	r2, #0
 8009aae:	f04f 0300 	mov.w	r3, #0
 8009ab2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8009ab6:	4659      	mov	r1, fp
 8009ab8:	018b      	lsls	r3, r1, #6
 8009aba:	4651      	mov	r1, sl
 8009abc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009ac0:	4651      	mov	r1, sl
 8009ac2:	018a      	lsls	r2, r1, #6
 8009ac4:	4651      	mov	r1, sl
 8009ac6:	ebb2 0801 	subs.w	r8, r2, r1
 8009aca:	4659      	mov	r1, fp
 8009acc:	eb63 0901 	sbc.w	r9, r3, r1
 8009ad0:	f04f 0200 	mov.w	r2, #0
 8009ad4:	f04f 0300 	mov.w	r3, #0
 8009ad8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009adc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009ae0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009ae4:	4690      	mov	r8, r2
 8009ae6:	4699      	mov	r9, r3
 8009ae8:	4623      	mov	r3, r4
 8009aea:	eb18 0303 	adds.w	r3, r8, r3
 8009aee:	613b      	str	r3, [r7, #16]
 8009af0:	462b      	mov	r3, r5
 8009af2:	eb49 0303 	adc.w	r3, r9, r3
 8009af6:	617b      	str	r3, [r7, #20]
 8009af8:	f04f 0200 	mov.w	r2, #0
 8009afc:	f04f 0300 	mov.w	r3, #0
 8009b00:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8009b04:	4629      	mov	r1, r5
 8009b06:	028b      	lsls	r3, r1, #10
 8009b08:	4621      	mov	r1, r4
 8009b0a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009b0e:	4621      	mov	r1, r4
 8009b10:	028a      	lsls	r2, r1, #10
 8009b12:	4610      	mov	r0, r2
 8009b14:	4619      	mov	r1, r3
 8009b16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009b1e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8009b20:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009b24:	f7f7 f8d0 	bl	8000cc8 <__aeabi_uldivmod>
 8009b28:	4602      	mov	r2, r0
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	4613      	mov	r3, r2
 8009b2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009b32:	e063      	b.n	8009bfc <HAL_RCC_GetSysClockFreq+0x41c>
 8009b34:	40023800 	.word	0x40023800
 8009b38:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009b3c:	4b3d      	ldr	r3, [pc, #244]	@ (8009c34 <HAL_RCC_GetSysClockFreq+0x454>)
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	099b      	lsrs	r3, r3, #6
 8009b42:	2200      	movs	r2, #0
 8009b44:	4618      	mov	r0, r3
 8009b46:	4611      	mov	r1, r2
 8009b48:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009b4c:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b4e:	2300      	movs	r3, #0
 8009b50:	657b      	str	r3, [r7, #84]	@ 0x54
 8009b52:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8009b56:	4642      	mov	r2, r8
 8009b58:	464b      	mov	r3, r9
 8009b5a:	f04f 0000 	mov.w	r0, #0
 8009b5e:	f04f 0100 	mov.w	r1, #0
 8009b62:	0159      	lsls	r1, r3, #5
 8009b64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009b68:	0150      	lsls	r0, r2, #5
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	4641      	mov	r1, r8
 8009b70:	1a51      	subs	r1, r2, r1
 8009b72:	60b9      	str	r1, [r7, #8]
 8009b74:	4649      	mov	r1, r9
 8009b76:	eb63 0301 	sbc.w	r3, r3, r1
 8009b7a:	60fb      	str	r3, [r7, #12]
 8009b7c:	f04f 0200 	mov.w	r2, #0
 8009b80:	f04f 0300 	mov.w	r3, #0
 8009b84:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8009b88:	4659      	mov	r1, fp
 8009b8a:	018b      	lsls	r3, r1, #6
 8009b8c:	4651      	mov	r1, sl
 8009b8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009b92:	4651      	mov	r1, sl
 8009b94:	018a      	lsls	r2, r1, #6
 8009b96:	4651      	mov	r1, sl
 8009b98:	1a54      	subs	r4, r2, r1
 8009b9a:	4659      	mov	r1, fp
 8009b9c:	eb63 0501 	sbc.w	r5, r3, r1
 8009ba0:	f04f 0200 	mov.w	r2, #0
 8009ba4:	f04f 0300 	mov.w	r3, #0
 8009ba8:	00eb      	lsls	r3, r5, #3
 8009baa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009bae:	00e2      	lsls	r2, r4, #3
 8009bb0:	4614      	mov	r4, r2
 8009bb2:	461d      	mov	r5, r3
 8009bb4:	4643      	mov	r3, r8
 8009bb6:	18e3      	adds	r3, r4, r3
 8009bb8:	603b      	str	r3, [r7, #0]
 8009bba:	464b      	mov	r3, r9
 8009bbc:	eb45 0303 	adc.w	r3, r5, r3
 8009bc0:	607b      	str	r3, [r7, #4]
 8009bc2:	f04f 0200 	mov.w	r2, #0
 8009bc6:	f04f 0300 	mov.w	r3, #0
 8009bca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009bce:	4629      	mov	r1, r5
 8009bd0:	028b      	lsls	r3, r1, #10
 8009bd2:	4621      	mov	r1, r4
 8009bd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009bd8:	4621      	mov	r1, r4
 8009bda:	028a      	lsls	r2, r1, #10
 8009bdc:	4610      	mov	r0, r2
 8009bde:	4619      	mov	r1, r3
 8009be0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009be4:	2200      	movs	r2, #0
 8009be6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009be8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009bea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009bee:	f7f7 f86b 	bl	8000cc8 <__aeabi_uldivmod>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	4613      	mov	r3, r2
 8009bf8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8009bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8009c34 <HAL_RCC_GetSysClockFreq+0x454>)
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	0f1b      	lsrs	r3, r3, #28
 8009c02:	f003 0307 	and.w	r3, r3, #7
 8009c06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8009c0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009c0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009c1a:	e003      	b.n	8009c24 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009c1c:	4b06      	ldr	r3, [pc, #24]	@ (8009c38 <HAL_RCC_GetSysClockFreq+0x458>)
 8009c1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009c22:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009c24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	37b8      	adds	r7, #184	@ 0xb8
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c32:	bf00      	nop
 8009c34:	40023800 	.word	0x40023800
 8009c38:	00f42400 	.word	0x00f42400

08009c3c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b086      	sub	sp, #24
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d101      	bne.n	8009c4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	e28d      	b.n	800a16a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f003 0301 	and.w	r3, r3, #1
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	f000 8083 	beq.w	8009d62 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009c5c:	4b94      	ldr	r3, [pc, #592]	@ (8009eb0 <HAL_RCC_OscConfig+0x274>)
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	f003 030c 	and.w	r3, r3, #12
 8009c64:	2b04      	cmp	r3, #4
 8009c66:	d019      	beq.n	8009c9c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009c68:	4b91      	ldr	r3, [pc, #580]	@ (8009eb0 <HAL_RCC_OscConfig+0x274>)
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009c70:	2b08      	cmp	r3, #8
 8009c72:	d106      	bne.n	8009c82 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009c74:	4b8e      	ldr	r3, [pc, #568]	@ (8009eb0 <HAL_RCC_OscConfig+0x274>)
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009c80:	d00c      	beq.n	8009c9c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009c82:	4b8b      	ldr	r3, [pc, #556]	@ (8009eb0 <HAL_RCC_OscConfig+0x274>)
 8009c84:	689b      	ldr	r3, [r3, #8]
 8009c86:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009c8a:	2b0c      	cmp	r3, #12
 8009c8c:	d112      	bne.n	8009cb4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009c8e:	4b88      	ldr	r3, [pc, #544]	@ (8009eb0 <HAL_RCC_OscConfig+0x274>)
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009c9a:	d10b      	bne.n	8009cb4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c9c:	4b84      	ldr	r3, [pc, #528]	@ (8009eb0 <HAL_RCC_OscConfig+0x274>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d05b      	beq.n	8009d60 <HAL_RCC_OscConfig+0x124>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d157      	bne.n	8009d60 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	e25a      	b.n	800a16a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009cbc:	d106      	bne.n	8009ccc <HAL_RCC_OscConfig+0x90>
 8009cbe:	4b7c      	ldr	r3, [pc, #496]	@ (8009eb0 <HAL_RCC_OscConfig+0x274>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4a7b      	ldr	r2, [pc, #492]	@ (8009eb0 <HAL_RCC_OscConfig+0x274>)
 8009cc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009cc8:	6013      	str	r3, [r2, #0]
 8009cca:	e01d      	b.n	8009d08 <HAL_RCC_OscConfig+0xcc>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009cd4:	d10c      	bne.n	8009cf0 <HAL_RCC_OscConfig+0xb4>
 8009cd6:	4b76      	ldr	r3, [pc, #472]	@ (8009eb0 <HAL_RCC_OscConfig+0x274>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a75      	ldr	r2, [pc, #468]	@ (8009eb0 <HAL_RCC_OscConfig+0x274>)
 8009cdc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009ce0:	6013      	str	r3, [r2, #0]
 8009ce2:	4b73      	ldr	r3, [pc, #460]	@ (8009eb0 <HAL_RCC_OscConfig+0x274>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a72      	ldr	r2, [pc, #456]	@ (8009eb0 <HAL_RCC_OscConfig+0x274>)
 8009ce8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009cec:	6013      	str	r3, [r2, #0]
 8009cee:	e00b      	b.n	8009d08 <HAL_RCC_OscConfig+0xcc>
 8009cf0:	4b6f      	ldr	r3, [pc, #444]	@ (8009eb0 <HAL_RCC_OscConfig+0x274>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a6e      	ldr	r2, [pc, #440]	@ (8009eb0 <HAL_RCC_OscConfig+0x274>)
 8009cf6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009cfa:	6013      	str	r3, [r2, #0]
 8009cfc:	4b6c      	ldr	r3, [pc, #432]	@ (8009eb0 <HAL_RCC_OscConfig+0x274>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a6b      	ldr	r2, [pc, #428]	@ (8009eb0 <HAL_RCC_OscConfig+0x274>)
 8009d02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009d06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d013      	beq.n	8009d38 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d10:	f7fa fc48 	bl	80045a4 <HAL_GetTick>
 8009d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d16:	e008      	b.n	8009d2a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009d18:	f7fa fc44 	bl	80045a4 <HAL_GetTick>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	1ad3      	subs	r3, r2, r3
 8009d22:	2b64      	cmp	r3, #100	@ 0x64
 8009d24:	d901      	bls.n	8009d2a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8009d26:	2303      	movs	r3, #3
 8009d28:	e21f      	b.n	800a16a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d2a:	4b61      	ldr	r3, [pc, #388]	@ (8009eb0 <HAL_RCC_OscConfig+0x274>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d0f0      	beq.n	8009d18 <HAL_RCC_OscConfig+0xdc>
 8009d36:	e014      	b.n	8009d62 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d38:	f7fa fc34 	bl	80045a4 <HAL_GetTick>
 8009d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009d3e:	e008      	b.n	8009d52 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009d40:	f7fa fc30 	bl	80045a4 <HAL_GetTick>
 8009d44:	4602      	mov	r2, r0
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	1ad3      	subs	r3, r2, r3
 8009d4a:	2b64      	cmp	r3, #100	@ 0x64
 8009d4c:	d901      	bls.n	8009d52 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8009d4e:	2303      	movs	r3, #3
 8009d50:	e20b      	b.n	800a16a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009d52:	4b57      	ldr	r3, [pc, #348]	@ (8009eb0 <HAL_RCC_OscConfig+0x274>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d1f0      	bne.n	8009d40 <HAL_RCC_OscConfig+0x104>
 8009d5e:	e000      	b.n	8009d62 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f003 0302 	and.w	r3, r3, #2
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d06f      	beq.n	8009e4e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009d6e:	4b50      	ldr	r3, [pc, #320]	@ (8009eb0 <HAL_RCC_OscConfig+0x274>)
 8009d70:	689b      	ldr	r3, [r3, #8]
 8009d72:	f003 030c 	and.w	r3, r3, #12
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d017      	beq.n	8009daa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009d7a:	4b4d      	ldr	r3, [pc, #308]	@ (8009eb0 <HAL_RCC_OscConfig+0x274>)
 8009d7c:	689b      	ldr	r3, [r3, #8]
 8009d7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009d82:	2b08      	cmp	r3, #8
 8009d84:	d105      	bne.n	8009d92 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009d86:	4b4a      	ldr	r3, [pc, #296]	@ (8009eb0 <HAL_RCC_OscConfig+0x274>)
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d00b      	beq.n	8009daa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009d92:	4b47      	ldr	r3, [pc, #284]	@ (8009eb0 <HAL_RCC_OscConfig+0x274>)
 8009d94:	689b      	ldr	r3, [r3, #8]
 8009d96:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009d9a:	2b0c      	cmp	r3, #12
 8009d9c:	d11c      	bne.n	8009dd8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009d9e:	4b44      	ldr	r3, [pc, #272]	@ (8009eb0 <HAL_RCC_OscConfig+0x274>)
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d116      	bne.n	8009dd8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009daa:	4b41      	ldr	r3, [pc, #260]	@ (8009eb0 <HAL_RCC_OscConfig+0x274>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f003 0302 	and.w	r3, r3, #2
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d005      	beq.n	8009dc2 <HAL_RCC_OscConfig+0x186>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	68db      	ldr	r3, [r3, #12]
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d001      	beq.n	8009dc2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	e1d3      	b.n	800a16a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009dc2:	4b3b      	ldr	r3, [pc, #236]	@ (8009eb0 <HAL_RCC_OscConfig+0x274>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	691b      	ldr	r3, [r3, #16]
 8009dce:	00db      	lsls	r3, r3, #3
 8009dd0:	4937      	ldr	r1, [pc, #220]	@ (8009eb0 <HAL_RCC_OscConfig+0x274>)
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009dd6:	e03a      	b.n	8009e4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	68db      	ldr	r3, [r3, #12]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d020      	beq.n	8009e22 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009de0:	4b34      	ldr	r3, [pc, #208]	@ (8009eb4 <HAL_RCC_OscConfig+0x278>)
 8009de2:	2201      	movs	r2, #1
 8009de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009de6:	f7fa fbdd 	bl	80045a4 <HAL_GetTick>
 8009dea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009dec:	e008      	b.n	8009e00 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009dee:	f7fa fbd9 	bl	80045a4 <HAL_GetTick>
 8009df2:	4602      	mov	r2, r0
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	1ad3      	subs	r3, r2, r3
 8009df8:	2b02      	cmp	r3, #2
 8009dfa:	d901      	bls.n	8009e00 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8009dfc:	2303      	movs	r3, #3
 8009dfe:	e1b4      	b.n	800a16a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009e00:	4b2b      	ldr	r3, [pc, #172]	@ (8009eb0 <HAL_RCC_OscConfig+0x274>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f003 0302 	and.w	r3, r3, #2
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d0f0      	beq.n	8009dee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e0c:	4b28      	ldr	r3, [pc, #160]	@ (8009eb0 <HAL_RCC_OscConfig+0x274>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	691b      	ldr	r3, [r3, #16]
 8009e18:	00db      	lsls	r3, r3, #3
 8009e1a:	4925      	ldr	r1, [pc, #148]	@ (8009eb0 <HAL_RCC_OscConfig+0x274>)
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	600b      	str	r3, [r1, #0]
 8009e20:	e015      	b.n	8009e4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009e22:	4b24      	ldr	r3, [pc, #144]	@ (8009eb4 <HAL_RCC_OscConfig+0x278>)
 8009e24:	2200      	movs	r2, #0
 8009e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e28:	f7fa fbbc 	bl	80045a4 <HAL_GetTick>
 8009e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009e2e:	e008      	b.n	8009e42 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009e30:	f7fa fbb8 	bl	80045a4 <HAL_GetTick>
 8009e34:	4602      	mov	r2, r0
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	1ad3      	subs	r3, r2, r3
 8009e3a:	2b02      	cmp	r3, #2
 8009e3c:	d901      	bls.n	8009e42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009e3e:	2303      	movs	r3, #3
 8009e40:	e193      	b.n	800a16a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009e42:	4b1b      	ldr	r3, [pc, #108]	@ (8009eb0 <HAL_RCC_OscConfig+0x274>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f003 0302 	and.w	r3, r3, #2
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d1f0      	bne.n	8009e30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f003 0308 	and.w	r3, r3, #8
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d036      	beq.n	8009ec8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	695b      	ldr	r3, [r3, #20]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d016      	beq.n	8009e90 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009e62:	4b15      	ldr	r3, [pc, #84]	@ (8009eb8 <HAL_RCC_OscConfig+0x27c>)
 8009e64:	2201      	movs	r2, #1
 8009e66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e68:	f7fa fb9c 	bl	80045a4 <HAL_GetTick>
 8009e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009e6e:	e008      	b.n	8009e82 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009e70:	f7fa fb98 	bl	80045a4 <HAL_GetTick>
 8009e74:	4602      	mov	r2, r0
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	1ad3      	subs	r3, r2, r3
 8009e7a:	2b02      	cmp	r3, #2
 8009e7c:	d901      	bls.n	8009e82 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8009e7e:	2303      	movs	r3, #3
 8009e80:	e173      	b.n	800a16a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009e82:	4b0b      	ldr	r3, [pc, #44]	@ (8009eb0 <HAL_RCC_OscConfig+0x274>)
 8009e84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e86:	f003 0302 	and.w	r3, r3, #2
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d0f0      	beq.n	8009e70 <HAL_RCC_OscConfig+0x234>
 8009e8e:	e01b      	b.n	8009ec8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009e90:	4b09      	ldr	r3, [pc, #36]	@ (8009eb8 <HAL_RCC_OscConfig+0x27c>)
 8009e92:	2200      	movs	r2, #0
 8009e94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e96:	f7fa fb85 	bl	80045a4 <HAL_GetTick>
 8009e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009e9c:	e00e      	b.n	8009ebc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009e9e:	f7fa fb81 	bl	80045a4 <HAL_GetTick>
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	1ad3      	subs	r3, r2, r3
 8009ea8:	2b02      	cmp	r3, #2
 8009eaa:	d907      	bls.n	8009ebc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8009eac:	2303      	movs	r3, #3
 8009eae:	e15c      	b.n	800a16a <HAL_RCC_OscConfig+0x52e>
 8009eb0:	40023800 	.word	0x40023800
 8009eb4:	42470000 	.word	0x42470000
 8009eb8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009ebc:	4b8a      	ldr	r3, [pc, #552]	@ (800a0e8 <HAL_RCC_OscConfig+0x4ac>)
 8009ebe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ec0:	f003 0302 	and.w	r3, r3, #2
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d1ea      	bne.n	8009e9e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f003 0304 	and.w	r3, r3, #4
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	f000 8097 	beq.w	800a004 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009eda:	4b83      	ldr	r3, [pc, #524]	@ (800a0e8 <HAL_RCC_OscConfig+0x4ac>)
 8009edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d10f      	bne.n	8009f06 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	60bb      	str	r3, [r7, #8]
 8009eea:	4b7f      	ldr	r3, [pc, #508]	@ (800a0e8 <HAL_RCC_OscConfig+0x4ac>)
 8009eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eee:	4a7e      	ldr	r2, [pc, #504]	@ (800a0e8 <HAL_RCC_OscConfig+0x4ac>)
 8009ef0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009ef4:	6413      	str	r3, [r2, #64]	@ 0x40
 8009ef6:	4b7c      	ldr	r3, [pc, #496]	@ (800a0e8 <HAL_RCC_OscConfig+0x4ac>)
 8009ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009efe:	60bb      	str	r3, [r7, #8]
 8009f00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009f02:	2301      	movs	r3, #1
 8009f04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f06:	4b79      	ldr	r3, [pc, #484]	@ (800a0ec <HAL_RCC_OscConfig+0x4b0>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d118      	bne.n	8009f44 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009f12:	4b76      	ldr	r3, [pc, #472]	@ (800a0ec <HAL_RCC_OscConfig+0x4b0>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4a75      	ldr	r2, [pc, #468]	@ (800a0ec <HAL_RCC_OscConfig+0x4b0>)
 8009f18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009f1e:	f7fa fb41 	bl	80045a4 <HAL_GetTick>
 8009f22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f24:	e008      	b.n	8009f38 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f26:	f7fa fb3d 	bl	80045a4 <HAL_GetTick>
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	1ad3      	subs	r3, r2, r3
 8009f30:	2b02      	cmp	r3, #2
 8009f32:	d901      	bls.n	8009f38 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8009f34:	2303      	movs	r3, #3
 8009f36:	e118      	b.n	800a16a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f38:	4b6c      	ldr	r3, [pc, #432]	@ (800a0ec <HAL_RCC_OscConfig+0x4b0>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d0f0      	beq.n	8009f26 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d106      	bne.n	8009f5a <HAL_RCC_OscConfig+0x31e>
 8009f4c:	4b66      	ldr	r3, [pc, #408]	@ (800a0e8 <HAL_RCC_OscConfig+0x4ac>)
 8009f4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f50:	4a65      	ldr	r2, [pc, #404]	@ (800a0e8 <HAL_RCC_OscConfig+0x4ac>)
 8009f52:	f043 0301 	orr.w	r3, r3, #1
 8009f56:	6713      	str	r3, [r2, #112]	@ 0x70
 8009f58:	e01c      	b.n	8009f94 <HAL_RCC_OscConfig+0x358>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	689b      	ldr	r3, [r3, #8]
 8009f5e:	2b05      	cmp	r3, #5
 8009f60:	d10c      	bne.n	8009f7c <HAL_RCC_OscConfig+0x340>
 8009f62:	4b61      	ldr	r3, [pc, #388]	@ (800a0e8 <HAL_RCC_OscConfig+0x4ac>)
 8009f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f66:	4a60      	ldr	r2, [pc, #384]	@ (800a0e8 <HAL_RCC_OscConfig+0x4ac>)
 8009f68:	f043 0304 	orr.w	r3, r3, #4
 8009f6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8009f6e:	4b5e      	ldr	r3, [pc, #376]	@ (800a0e8 <HAL_RCC_OscConfig+0x4ac>)
 8009f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f72:	4a5d      	ldr	r2, [pc, #372]	@ (800a0e8 <HAL_RCC_OscConfig+0x4ac>)
 8009f74:	f043 0301 	orr.w	r3, r3, #1
 8009f78:	6713      	str	r3, [r2, #112]	@ 0x70
 8009f7a:	e00b      	b.n	8009f94 <HAL_RCC_OscConfig+0x358>
 8009f7c:	4b5a      	ldr	r3, [pc, #360]	@ (800a0e8 <HAL_RCC_OscConfig+0x4ac>)
 8009f7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f80:	4a59      	ldr	r2, [pc, #356]	@ (800a0e8 <HAL_RCC_OscConfig+0x4ac>)
 8009f82:	f023 0301 	bic.w	r3, r3, #1
 8009f86:	6713      	str	r3, [r2, #112]	@ 0x70
 8009f88:	4b57      	ldr	r3, [pc, #348]	@ (800a0e8 <HAL_RCC_OscConfig+0x4ac>)
 8009f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f8c:	4a56      	ldr	r2, [pc, #344]	@ (800a0e8 <HAL_RCC_OscConfig+0x4ac>)
 8009f8e:	f023 0304 	bic.w	r3, r3, #4
 8009f92:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d015      	beq.n	8009fc8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f9c:	f7fa fb02 	bl	80045a4 <HAL_GetTick>
 8009fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009fa2:	e00a      	b.n	8009fba <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009fa4:	f7fa fafe 	bl	80045a4 <HAL_GetTick>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	1ad3      	subs	r3, r2, r3
 8009fae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d901      	bls.n	8009fba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8009fb6:	2303      	movs	r3, #3
 8009fb8:	e0d7      	b.n	800a16a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009fba:	4b4b      	ldr	r3, [pc, #300]	@ (800a0e8 <HAL_RCC_OscConfig+0x4ac>)
 8009fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fbe:	f003 0302 	and.w	r3, r3, #2
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d0ee      	beq.n	8009fa4 <HAL_RCC_OscConfig+0x368>
 8009fc6:	e014      	b.n	8009ff2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009fc8:	f7fa faec 	bl	80045a4 <HAL_GetTick>
 8009fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009fce:	e00a      	b.n	8009fe6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009fd0:	f7fa fae8 	bl	80045a4 <HAL_GetTick>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	1ad3      	subs	r3, r2, r3
 8009fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d901      	bls.n	8009fe6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8009fe2:	2303      	movs	r3, #3
 8009fe4:	e0c1      	b.n	800a16a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009fe6:	4b40      	ldr	r3, [pc, #256]	@ (800a0e8 <HAL_RCC_OscConfig+0x4ac>)
 8009fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fea:	f003 0302 	and.w	r3, r3, #2
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d1ee      	bne.n	8009fd0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009ff2:	7dfb      	ldrb	r3, [r7, #23]
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d105      	bne.n	800a004 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009ff8:	4b3b      	ldr	r3, [pc, #236]	@ (800a0e8 <HAL_RCC_OscConfig+0x4ac>)
 8009ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ffc:	4a3a      	ldr	r2, [pc, #232]	@ (800a0e8 <HAL_RCC_OscConfig+0x4ac>)
 8009ffe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a002:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	699b      	ldr	r3, [r3, #24]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	f000 80ad 	beq.w	800a168 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a00e:	4b36      	ldr	r3, [pc, #216]	@ (800a0e8 <HAL_RCC_OscConfig+0x4ac>)
 800a010:	689b      	ldr	r3, [r3, #8]
 800a012:	f003 030c 	and.w	r3, r3, #12
 800a016:	2b08      	cmp	r3, #8
 800a018:	d060      	beq.n	800a0dc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	699b      	ldr	r3, [r3, #24]
 800a01e:	2b02      	cmp	r3, #2
 800a020:	d145      	bne.n	800a0ae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a022:	4b33      	ldr	r3, [pc, #204]	@ (800a0f0 <HAL_RCC_OscConfig+0x4b4>)
 800a024:	2200      	movs	r2, #0
 800a026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a028:	f7fa fabc 	bl	80045a4 <HAL_GetTick>
 800a02c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a02e:	e008      	b.n	800a042 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a030:	f7fa fab8 	bl	80045a4 <HAL_GetTick>
 800a034:	4602      	mov	r2, r0
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	1ad3      	subs	r3, r2, r3
 800a03a:	2b02      	cmp	r3, #2
 800a03c:	d901      	bls.n	800a042 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800a03e:	2303      	movs	r3, #3
 800a040:	e093      	b.n	800a16a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a042:	4b29      	ldr	r3, [pc, #164]	@ (800a0e8 <HAL_RCC_OscConfig+0x4ac>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d1f0      	bne.n	800a030 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	69da      	ldr	r2, [r3, #28]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6a1b      	ldr	r3, [r3, #32]
 800a056:	431a      	orrs	r2, r3
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a05c:	019b      	lsls	r3, r3, #6
 800a05e:	431a      	orrs	r2, r3
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a064:	085b      	lsrs	r3, r3, #1
 800a066:	3b01      	subs	r3, #1
 800a068:	041b      	lsls	r3, r3, #16
 800a06a:	431a      	orrs	r2, r3
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a070:	061b      	lsls	r3, r3, #24
 800a072:	431a      	orrs	r2, r3
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a078:	071b      	lsls	r3, r3, #28
 800a07a:	491b      	ldr	r1, [pc, #108]	@ (800a0e8 <HAL_RCC_OscConfig+0x4ac>)
 800a07c:	4313      	orrs	r3, r2
 800a07e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a080:	4b1b      	ldr	r3, [pc, #108]	@ (800a0f0 <HAL_RCC_OscConfig+0x4b4>)
 800a082:	2201      	movs	r2, #1
 800a084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a086:	f7fa fa8d 	bl	80045a4 <HAL_GetTick>
 800a08a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a08c:	e008      	b.n	800a0a0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a08e:	f7fa fa89 	bl	80045a4 <HAL_GetTick>
 800a092:	4602      	mov	r2, r0
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	1ad3      	subs	r3, r2, r3
 800a098:	2b02      	cmp	r3, #2
 800a09a:	d901      	bls.n	800a0a0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800a09c:	2303      	movs	r3, #3
 800a09e:	e064      	b.n	800a16a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a0a0:	4b11      	ldr	r3, [pc, #68]	@ (800a0e8 <HAL_RCC_OscConfig+0x4ac>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d0f0      	beq.n	800a08e <HAL_RCC_OscConfig+0x452>
 800a0ac:	e05c      	b.n	800a168 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a0ae:	4b10      	ldr	r3, [pc, #64]	@ (800a0f0 <HAL_RCC_OscConfig+0x4b4>)
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0b4:	f7fa fa76 	bl	80045a4 <HAL_GetTick>
 800a0b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a0ba:	e008      	b.n	800a0ce <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a0bc:	f7fa fa72 	bl	80045a4 <HAL_GetTick>
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	1ad3      	subs	r3, r2, r3
 800a0c6:	2b02      	cmp	r3, #2
 800a0c8:	d901      	bls.n	800a0ce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800a0ca:	2303      	movs	r3, #3
 800a0cc:	e04d      	b.n	800a16a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a0ce:	4b06      	ldr	r3, [pc, #24]	@ (800a0e8 <HAL_RCC_OscConfig+0x4ac>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d1f0      	bne.n	800a0bc <HAL_RCC_OscConfig+0x480>
 800a0da:	e045      	b.n	800a168 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	699b      	ldr	r3, [r3, #24]
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d107      	bne.n	800a0f4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	e040      	b.n	800a16a <HAL_RCC_OscConfig+0x52e>
 800a0e8:	40023800 	.word	0x40023800
 800a0ec:	40007000 	.word	0x40007000
 800a0f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a0f4:	4b1f      	ldr	r3, [pc, #124]	@ (800a174 <HAL_RCC_OscConfig+0x538>)
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	699b      	ldr	r3, [r3, #24]
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	d030      	beq.n	800a164 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d129      	bne.n	800a164 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d122      	bne.n	800a164 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a11e:	68fa      	ldr	r2, [r7, #12]
 800a120:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a124:	4013      	ands	r3, r2
 800a126:	687a      	ldr	r2, [r7, #4]
 800a128:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a12a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d119      	bne.n	800a164 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a13a:	085b      	lsrs	r3, r3, #1
 800a13c:	3b01      	subs	r3, #1
 800a13e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a140:	429a      	cmp	r2, r3
 800a142:	d10f      	bne.n	800a164 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a14e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a150:	429a      	cmp	r2, r3
 800a152:	d107      	bne.n	800a164 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a15e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a160:	429a      	cmp	r2, r3
 800a162:	d001      	beq.n	800a168 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800a164:	2301      	movs	r3, #1
 800a166:	e000      	b.n	800a16a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3718      	adds	r7, #24
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop
 800a174:	40023800 	.word	0x40023800

0800a178 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b082      	sub	sp, #8
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d101      	bne.n	800a18a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a186:	2301      	movs	r3, #1
 800a188:	e07b      	b.n	800a282 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d108      	bne.n	800a1a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a19a:	d009      	beq.n	800a1b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	61da      	str	r2, [r3, #28]
 800a1a2:	e005      	b.n	800a1b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a1bc:	b2db      	uxtb	r3, r3
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d106      	bne.n	800a1d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f7f9 fdec 	bl	8003da8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2202      	movs	r2, #2
 800a1d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a1e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	689b      	ldr	r3, [r3, #8]
 800a1f4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a1f8:	431a      	orrs	r2, r3
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	68db      	ldr	r3, [r3, #12]
 800a1fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a202:	431a      	orrs	r2, r3
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	691b      	ldr	r3, [r3, #16]
 800a208:	f003 0302 	and.w	r3, r3, #2
 800a20c:	431a      	orrs	r2, r3
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	695b      	ldr	r3, [r3, #20]
 800a212:	f003 0301 	and.w	r3, r3, #1
 800a216:	431a      	orrs	r2, r3
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	699b      	ldr	r3, [r3, #24]
 800a21c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a220:	431a      	orrs	r2, r3
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	69db      	ldr	r3, [r3, #28]
 800a226:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a22a:	431a      	orrs	r2, r3
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6a1b      	ldr	r3, [r3, #32]
 800a230:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a234:	ea42 0103 	orr.w	r1, r2, r3
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a23c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	430a      	orrs	r2, r1
 800a246:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	699b      	ldr	r3, [r3, #24]
 800a24c:	0c1b      	lsrs	r3, r3, #16
 800a24e:	f003 0104 	and.w	r1, r3, #4
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a256:	f003 0210 	and.w	r2, r3, #16
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	430a      	orrs	r2, r1
 800a260:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	69da      	ldr	r2, [r3, #28]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a270:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2201      	movs	r2, #1
 800a27c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800a280:	2300      	movs	r3, #0
}
 800a282:	4618      	mov	r0, r3
 800a284:	3708      	adds	r7, #8
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}

0800a28a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b088      	sub	sp, #32
 800a28e:	af00      	add	r7, sp, #0
 800a290:	60f8      	str	r0, [r7, #12]
 800a292:	60b9      	str	r1, [r7, #8]
 800a294:	603b      	str	r3, [r7, #0]
 800a296:	4613      	mov	r3, r2
 800a298:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a29a:	2300      	movs	r3, #0
 800a29c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d101      	bne.n	800a2ac <HAL_SPI_Transmit+0x22>
 800a2a8:	2302      	movs	r3, #2
 800a2aa:	e126      	b.n	800a4fa <HAL_SPI_Transmit+0x270>
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a2b4:	f7fa f976 	bl	80045a4 <HAL_GetTick>
 800a2b8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a2ba:	88fb      	ldrh	r3, [r7, #6]
 800a2bc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d002      	beq.n	800a2d0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a2ca:	2302      	movs	r3, #2
 800a2cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a2ce:	e10b      	b.n	800a4e8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d002      	beq.n	800a2dc <HAL_SPI_Transmit+0x52>
 800a2d6:	88fb      	ldrh	r3, [r7, #6]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d102      	bne.n	800a2e2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a2dc:	2301      	movs	r3, #1
 800a2de:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a2e0:	e102      	b.n	800a4e8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2203      	movs	r2, #3
 800a2e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	68ba      	ldr	r2, [r7, #8]
 800a2f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	88fa      	ldrh	r2, [r7, #6]
 800a2fa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	88fa      	ldrh	r2, [r7, #6]
 800a300:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	2200      	movs	r2, #0
 800a306:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2200      	movs	r2, #0
 800a30c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2200      	movs	r2, #0
 800a312:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2200      	movs	r2, #0
 800a318:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	2200      	movs	r2, #0
 800a31e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	689b      	ldr	r3, [r3, #8]
 800a324:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a328:	d10f      	bne.n	800a34a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a338:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	681a      	ldr	r2, [r3, #0]
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a348:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a354:	2b40      	cmp	r3, #64	@ 0x40
 800a356:	d007      	beq.n	800a368 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	681a      	ldr	r2, [r3, #0]
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a366:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	68db      	ldr	r3, [r3, #12]
 800a36c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a370:	d14b      	bne.n	800a40a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d002      	beq.n	800a380 <HAL_SPI_Transmit+0xf6>
 800a37a:	8afb      	ldrh	r3, [r7, #22]
 800a37c:	2b01      	cmp	r3, #1
 800a37e:	d13e      	bne.n	800a3fe <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a384:	881a      	ldrh	r2, [r3, #0]
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a390:	1c9a      	adds	r2, r3, #2
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	3b01      	subs	r3, #1
 800a39e:	b29a      	uxth	r2, r3
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a3a4:	e02b      	b.n	800a3fe <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	f003 0302 	and.w	r3, r3, #2
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	d112      	bne.n	800a3da <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3b8:	881a      	ldrh	r2, [r3, #0]
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3c4:	1c9a      	adds	r2, r3, #2
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	3b01      	subs	r3, #1
 800a3d2:	b29a      	uxth	r2, r3
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	86da      	strh	r2, [r3, #54]	@ 0x36
 800a3d8:	e011      	b.n	800a3fe <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a3da:	f7fa f8e3 	bl	80045a4 <HAL_GetTick>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	69bb      	ldr	r3, [r7, #24]
 800a3e2:	1ad3      	subs	r3, r2, r3
 800a3e4:	683a      	ldr	r2, [r7, #0]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d803      	bhi.n	800a3f2 <HAL_SPI_Transmit+0x168>
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3f0:	d102      	bne.n	800a3f8 <HAL_SPI_Transmit+0x16e>
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d102      	bne.n	800a3fe <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800a3f8:	2303      	movs	r3, #3
 800a3fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a3fc:	e074      	b.n	800a4e8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a402:	b29b      	uxth	r3, r3
 800a404:	2b00      	cmp	r3, #0
 800a406:	d1ce      	bne.n	800a3a6 <HAL_SPI_Transmit+0x11c>
 800a408:	e04c      	b.n	800a4a4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d002      	beq.n	800a418 <HAL_SPI_Transmit+0x18e>
 800a412:	8afb      	ldrh	r3, [r7, #22]
 800a414:	2b01      	cmp	r3, #1
 800a416:	d140      	bne.n	800a49a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	330c      	adds	r3, #12
 800a422:	7812      	ldrb	r2, [r2, #0]
 800a424:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a42a:	1c5a      	adds	r2, r3, #1
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a434:	b29b      	uxth	r3, r3
 800a436:	3b01      	subs	r3, #1
 800a438:	b29a      	uxth	r2, r3
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a43e:	e02c      	b.n	800a49a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	689b      	ldr	r3, [r3, #8]
 800a446:	f003 0302 	and.w	r3, r3, #2
 800a44a:	2b02      	cmp	r3, #2
 800a44c:	d113      	bne.n	800a476 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	330c      	adds	r3, #12
 800a458:	7812      	ldrb	r2, [r2, #0]
 800a45a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a460:	1c5a      	adds	r2, r3, #1
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	3b01      	subs	r3, #1
 800a46e:	b29a      	uxth	r2, r3
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	86da      	strh	r2, [r3, #54]	@ 0x36
 800a474:	e011      	b.n	800a49a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a476:	f7fa f895 	bl	80045a4 <HAL_GetTick>
 800a47a:	4602      	mov	r2, r0
 800a47c:	69bb      	ldr	r3, [r7, #24]
 800a47e:	1ad3      	subs	r3, r2, r3
 800a480:	683a      	ldr	r2, [r7, #0]
 800a482:	429a      	cmp	r2, r3
 800a484:	d803      	bhi.n	800a48e <HAL_SPI_Transmit+0x204>
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a48c:	d102      	bne.n	800a494 <HAL_SPI_Transmit+0x20a>
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d102      	bne.n	800a49a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800a494:	2303      	movs	r3, #3
 800a496:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a498:	e026      	b.n	800a4e8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a49e:	b29b      	uxth	r3, r3
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d1cd      	bne.n	800a440 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a4a4:	69ba      	ldr	r2, [r7, #24]
 800a4a6:	6839      	ldr	r1, [r7, #0]
 800a4a8:	68f8      	ldr	r0, [r7, #12]
 800a4aa:	f000 fa55 	bl	800a958 <SPI_EndRxTxTransaction>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d002      	beq.n	800a4ba <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2220      	movs	r2, #32
 800a4b8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	689b      	ldr	r3, [r3, #8]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d10a      	bne.n	800a4d8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	613b      	str	r3, [r7, #16]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	68db      	ldr	r3, [r3, #12]
 800a4cc:	613b      	str	r3, [r7, #16]
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	613b      	str	r3, [r7, #16]
 800a4d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d002      	beq.n	800a4e6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	77fb      	strb	r3, [r7, #31]
 800a4e4:	e000      	b.n	800a4e8 <HAL_SPI_Transmit+0x25e>
  }

error:
 800a4e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800a4f8:	7ffb      	ldrb	r3, [r7, #31]
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3720      	adds	r7, #32
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}

0800a502 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a502:	b580      	push	{r7, lr}
 800a504:	b08c      	sub	sp, #48	@ 0x30
 800a506:	af00      	add	r7, sp, #0
 800a508:	60f8      	str	r0, [r7, #12]
 800a50a:	60b9      	str	r1, [r7, #8]
 800a50c:	607a      	str	r2, [r7, #4]
 800a50e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a510:	2301      	movs	r3, #1
 800a512:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a514:	2300      	movs	r3, #0
 800a516:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a520:	2b01      	cmp	r3, #1
 800a522:	d101      	bne.n	800a528 <HAL_SPI_TransmitReceive+0x26>
 800a524:	2302      	movs	r3, #2
 800a526:	e18a      	b.n	800a83e <HAL_SPI_TransmitReceive+0x33c>
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2201      	movs	r2, #1
 800a52c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a530:	f7fa f838 	bl	80045a4 <HAL_GetTick>
 800a534:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a53c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a546:	887b      	ldrh	r3, [r7, #2]
 800a548:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a54a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a54e:	2b01      	cmp	r3, #1
 800a550:	d00f      	beq.n	800a572 <HAL_SPI_TransmitReceive+0x70>
 800a552:	69fb      	ldr	r3, [r7, #28]
 800a554:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a558:	d107      	bne.n	800a56a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d103      	bne.n	800a56a <HAL_SPI_TransmitReceive+0x68>
 800a562:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a566:	2b04      	cmp	r3, #4
 800a568:	d003      	beq.n	800a572 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a56a:	2302      	movs	r3, #2
 800a56c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800a570:	e15b      	b.n	800a82a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d005      	beq.n	800a584 <HAL_SPI_TransmitReceive+0x82>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d002      	beq.n	800a584 <HAL_SPI_TransmitReceive+0x82>
 800a57e:	887b      	ldrh	r3, [r7, #2]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d103      	bne.n	800a58c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a584:	2301      	movs	r3, #1
 800a586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800a58a:	e14e      	b.n	800a82a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a592:	b2db      	uxtb	r3, r3
 800a594:	2b04      	cmp	r3, #4
 800a596:	d003      	beq.n	800a5a0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	2205      	movs	r2, #5
 800a59c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	687a      	ldr	r2, [r7, #4]
 800a5aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	887a      	ldrh	r2, [r7, #2]
 800a5b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	887a      	ldrh	r2, [r7, #2]
 800a5b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	68ba      	ldr	r2, [r7, #8]
 800a5bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	887a      	ldrh	r2, [r7, #2]
 800a5c2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	887a      	ldrh	r2, [r7, #2]
 800a5c8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5e0:	2b40      	cmp	r3, #64	@ 0x40
 800a5e2:	d007      	beq.n	800a5f4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	681a      	ldr	r2, [r3, #0]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a5f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	68db      	ldr	r3, [r3, #12]
 800a5f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a5fc:	d178      	bne.n	800a6f0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d002      	beq.n	800a60c <HAL_SPI_TransmitReceive+0x10a>
 800a606:	8b7b      	ldrh	r3, [r7, #26]
 800a608:	2b01      	cmp	r3, #1
 800a60a:	d166      	bne.n	800a6da <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a610:	881a      	ldrh	r2, [r3, #0]
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a61c:	1c9a      	adds	r2, r3, #2
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a626:	b29b      	uxth	r3, r3
 800a628:	3b01      	subs	r3, #1
 800a62a:	b29a      	uxth	r2, r3
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a630:	e053      	b.n	800a6da <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	689b      	ldr	r3, [r3, #8]
 800a638:	f003 0302 	and.w	r3, r3, #2
 800a63c:	2b02      	cmp	r3, #2
 800a63e:	d11b      	bne.n	800a678 <HAL_SPI_TransmitReceive+0x176>
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a644:	b29b      	uxth	r3, r3
 800a646:	2b00      	cmp	r3, #0
 800a648:	d016      	beq.n	800a678 <HAL_SPI_TransmitReceive+0x176>
 800a64a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d113      	bne.n	800a678 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a654:	881a      	ldrh	r2, [r3, #0]
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a660:	1c9a      	adds	r2, r3, #2
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	3b01      	subs	r3, #1
 800a66e:	b29a      	uxth	r2, r3
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a674:	2300      	movs	r3, #0
 800a676:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	f003 0301 	and.w	r3, r3, #1
 800a682:	2b01      	cmp	r3, #1
 800a684:	d119      	bne.n	800a6ba <HAL_SPI_TransmitReceive+0x1b8>
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a68a:	b29b      	uxth	r3, r3
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d014      	beq.n	800a6ba <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	68da      	ldr	r2, [r3, #12]
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a69a:	b292      	uxth	r2, r2
 800a69c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6a2:	1c9a      	adds	r2, r3, #2
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	3b01      	subs	r3, #1
 800a6b0:	b29a      	uxth	r2, r3
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a6ba:	f7f9 ff73 	bl	80045a4 <HAL_GetTick>
 800a6be:	4602      	mov	r2, r0
 800a6c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c2:	1ad3      	subs	r3, r2, r3
 800a6c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a6c6:	429a      	cmp	r2, r3
 800a6c8:	d807      	bhi.n	800a6da <HAL_SPI_TransmitReceive+0x1d8>
 800a6ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6d0:	d003      	beq.n	800a6da <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a6d2:	2303      	movs	r3, #3
 800a6d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800a6d8:	e0a7      	b.n	800a82a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d1a6      	bne.n	800a632 <HAL_SPI_TransmitReceive+0x130>
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a6e8:	b29b      	uxth	r3, r3
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d1a1      	bne.n	800a632 <HAL_SPI_TransmitReceive+0x130>
 800a6ee:	e07c      	b.n	800a7ea <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d002      	beq.n	800a6fe <HAL_SPI_TransmitReceive+0x1fc>
 800a6f8:	8b7b      	ldrh	r3, [r7, #26]
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d16b      	bne.n	800a7d6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	330c      	adds	r3, #12
 800a708:	7812      	ldrb	r2, [r2, #0]
 800a70a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a710:	1c5a      	adds	r2, r3, #1
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a71a:	b29b      	uxth	r3, r3
 800a71c:	3b01      	subs	r3, #1
 800a71e:	b29a      	uxth	r2, r3
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a724:	e057      	b.n	800a7d6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	689b      	ldr	r3, [r3, #8]
 800a72c:	f003 0302 	and.w	r3, r3, #2
 800a730:	2b02      	cmp	r3, #2
 800a732:	d11c      	bne.n	800a76e <HAL_SPI_TransmitReceive+0x26c>
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a738:	b29b      	uxth	r3, r3
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d017      	beq.n	800a76e <HAL_SPI_TransmitReceive+0x26c>
 800a73e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a740:	2b01      	cmp	r3, #1
 800a742:	d114      	bne.n	800a76e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	330c      	adds	r3, #12
 800a74e:	7812      	ldrb	r2, [r2, #0]
 800a750:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a756:	1c5a      	adds	r2, r3, #1
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a760:	b29b      	uxth	r3, r3
 800a762:	3b01      	subs	r3, #1
 800a764:	b29a      	uxth	r2, r3
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a76a:	2300      	movs	r3, #0
 800a76c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	689b      	ldr	r3, [r3, #8]
 800a774:	f003 0301 	and.w	r3, r3, #1
 800a778:	2b01      	cmp	r3, #1
 800a77a:	d119      	bne.n	800a7b0 <HAL_SPI_TransmitReceive+0x2ae>
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a780:	b29b      	uxth	r3, r3
 800a782:	2b00      	cmp	r3, #0
 800a784:	d014      	beq.n	800a7b0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	68da      	ldr	r2, [r3, #12]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a790:	b2d2      	uxtb	r2, r2
 800a792:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a798:	1c5a      	adds	r2, r3, #1
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a7a2:	b29b      	uxth	r3, r3
 800a7a4:	3b01      	subs	r3, #1
 800a7a6:	b29a      	uxth	r2, r3
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a7b0:	f7f9 fef8 	bl	80045a4 <HAL_GetTick>
 800a7b4:	4602      	mov	r2, r0
 800a7b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7b8:	1ad3      	subs	r3, r2, r3
 800a7ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d803      	bhi.n	800a7c8 <HAL_SPI_TransmitReceive+0x2c6>
 800a7c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7c6:	d102      	bne.n	800a7ce <HAL_SPI_TransmitReceive+0x2cc>
 800a7c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d103      	bne.n	800a7d6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a7ce:	2303      	movs	r3, #3
 800a7d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800a7d4:	e029      	b.n	800a82a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d1a2      	bne.n	800a726 <HAL_SPI_TransmitReceive+0x224>
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a7e4:	b29b      	uxth	r3, r3
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d19d      	bne.n	800a726 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a7ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7ec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a7ee:	68f8      	ldr	r0, [r7, #12]
 800a7f0:	f000 f8b2 	bl	800a958 <SPI_EndRxTxTransaction>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d006      	beq.n	800a808 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2220      	movs	r2, #32
 800a804:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800a806:	e010      	b.n	800a82a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	689b      	ldr	r3, [r3, #8]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d10b      	bne.n	800a828 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a810:	2300      	movs	r3, #0
 800a812:	617b      	str	r3, [r7, #20]
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	68db      	ldr	r3, [r3, #12]
 800a81a:	617b      	str	r3, [r7, #20]
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	689b      	ldr	r3, [r3, #8]
 800a822:	617b      	str	r3, [r7, #20]
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	e000      	b.n	800a82a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a828:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2201      	movs	r2, #1
 800a82e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2200      	movs	r2, #0
 800a836:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800a83a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3730      	adds	r7, #48	@ 0x30
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
	...

0800a848 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b088      	sub	sp, #32
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	60b9      	str	r1, [r7, #8]
 800a852:	603b      	str	r3, [r7, #0]
 800a854:	4613      	mov	r3, r2
 800a856:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a858:	f7f9 fea4 	bl	80045a4 <HAL_GetTick>
 800a85c:	4602      	mov	r2, r0
 800a85e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a860:	1a9b      	subs	r3, r3, r2
 800a862:	683a      	ldr	r2, [r7, #0]
 800a864:	4413      	add	r3, r2
 800a866:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a868:	f7f9 fe9c 	bl	80045a4 <HAL_GetTick>
 800a86c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a86e:	4b39      	ldr	r3, [pc, #228]	@ (800a954 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	015b      	lsls	r3, r3, #5
 800a874:	0d1b      	lsrs	r3, r3, #20
 800a876:	69fa      	ldr	r2, [r7, #28]
 800a878:	fb02 f303 	mul.w	r3, r2, r3
 800a87c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a87e:	e054      	b.n	800a92a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a886:	d050      	beq.n	800a92a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a888:	f7f9 fe8c 	bl	80045a4 <HAL_GetTick>
 800a88c:	4602      	mov	r2, r0
 800a88e:	69bb      	ldr	r3, [r7, #24]
 800a890:	1ad3      	subs	r3, r2, r3
 800a892:	69fa      	ldr	r2, [r7, #28]
 800a894:	429a      	cmp	r2, r3
 800a896:	d902      	bls.n	800a89e <SPI_WaitFlagStateUntilTimeout+0x56>
 800a898:	69fb      	ldr	r3, [r7, #28]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d13d      	bne.n	800a91a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	685a      	ldr	r2, [r3, #4]
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a8ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a8b6:	d111      	bne.n	800a8dc <SPI_WaitFlagStateUntilTimeout+0x94>
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	689b      	ldr	r3, [r3, #8]
 800a8bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a8c0:	d004      	beq.n	800a8cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	689b      	ldr	r3, [r3, #8]
 800a8c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a8ca:	d107      	bne.n	800a8dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	681a      	ldr	r2, [r3, #0]
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a8da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a8e4:	d10f      	bne.n	800a906 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a8f4:	601a      	str	r2, [r3, #0]
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a904:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2201      	movs	r2, #1
 800a90a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2200      	movs	r2, #0
 800a912:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800a916:	2303      	movs	r3, #3
 800a918:	e017      	b.n	800a94a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d101      	bne.n	800a924 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a920:	2300      	movs	r3, #0
 800a922:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	3b01      	subs	r3, #1
 800a928:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	689a      	ldr	r2, [r3, #8]
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	4013      	ands	r3, r2
 800a934:	68ba      	ldr	r2, [r7, #8]
 800a936:	429a      	cmp	r2, r3
 800a938:	bf0c      	ite	eq
 800a93a:	2301      	moveq	r3, #1
 800a93c:	2300      	movne	r3, #0
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	461a      	mov	r2, r3
 800a942:	79fb      	ldrb	r3, [r7, #7]
 800a944:	429a      	cmp	r2, r3
 800a946:	d19b      	bne.n	800a880 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a948:	2300      	movs	r3, #0
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3720      	adds	r7, #32
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}
 800a952:	bf00      	nop
 800a954:	20000004 	.word	0x20000004

0800a958 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b088      	sub	sp, #32
 800a95c:	af02      	add	r7, sp, #8
 800a95e:	60f8      	str	r0, [r7, #12]
 800a960:	60b9      	str	r1, [r7, #8]
 800a962:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a964:	4b1b      	ldr	r3, [pc, #108]	@ (800a9d4 <SPI_EndRxTxTransaction+0x7c>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4a1b      	ldr	r2, [pc, #108]	@ (800a9d8 <SPI_EndRxTxTransaction+0x80>)
 800a96a:	fba2 2303 	umull	r2, r3, r2, r3
 800a96e:	0d5b      	lsrs	r3, r3, #21
 800a970:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a974:	fb02 f303 	mul.w	r3, r2, r3
 800a978:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a982:	d112      	bne.n	800a9aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	9300      	str	r3, [sp, #0]
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	2200      	movs	r2, #0
 800a98c:	2180      	movs	r1, #128	@ 0x80
 800a98e:	68f8      	ldr	r0, [r7, #12]
 800a990:	f7ff ff5a 	bl	800a848 <SPI_WaitFlagStateUntilTimeout>
 800a994:	4603      	mov	r3, r0
 800a996:	2b00      	cmp	r3, #0
 800a998:	d016      	beq.n	800a9c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a99e:	f043 0220 	orr.w	r2, r3, #32
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800a9a6:	2303      	movs	r3, #3
 800a9a8:	e00f      	b.n	800a9ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d00a      	beq.n	800a9c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	3b01      	subs	r3, #1
 800a9b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9c0:	2b80      	cmp	r3, #128	@ 0x80
 800a9c2:	d0f2      	beq.n	800a9aa <SPI_EndRxTxTransaction+0x52>
 800a9c4:	e000      	b.n	800a9c8 <SPI_EndRxTxTransaction+0x70>
        break;
 800a9c6:	bf00      	nop
  }

  return HAL_OK;
 800a9c8:	2300      	movs	r3, #0
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3718      	adds	r7, #24
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	bf00      	nop
 800a9d4:	20000004 	.word	0x20000004
 800a9d8:	165e9f81 	.word	0x165e9f81

0800a9dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b082      	sub	sp, #8
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d101      	bne.n	800a9ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	e041      	b.n	800aa72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d106      	bne.n	800aa08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f7f9 fa18 	bl	8003e38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2202      	movs	r2, #2
 800aa0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	3304      	adds	r3, #4
 800aa18:	4619      	mov	r1, r3
 800aa1a:	4610      	mov	r0, r2
 800aa1c:	f000 fcd8 	bl	800b3d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2201      	movs	r2, #1
 800aa24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2201      	movs	r2, #1
 800aa34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2201      	movs	r2, #1
 800aa44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2201      	movs	r2, #1
 800aa64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aa70:	2300      	movs	r3, #0
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3708      	adds	r7, #8
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}
	...

0800aa7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b085      	sub	sp, #20
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa8a:	b2db      	uxtb	r3, r3
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d001      	beq.n	800aa94 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800aa90:	2301      	movs	r3, #1
 800aa92:	e046      	b.n	800ab22 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2202      	movs	r2, #2
 800aa98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a23      	ldr	r2, [pc, #140]	@ (800ab30 <HAL_TIM_Base_Start+0xb4>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d022      	beq.n	800aaec <HAL_TIM_Base_Start+0x70>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aaae:	d01d      	beq.n	800aaec <HAL_TIM_Base_Start+0x70>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a1f      	ldr	r2, [pc, #124]	@ (800ab34 <HAL_TIM_Base_Start+0xb8>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d018      	beq.n	800aaec <HAL_TIM_Base_Start+0x70>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	4a1e      	ldr	r2, [pc, #120]	@ (800ab38 <HAL_TIM_Base_Start+0xbc>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d013      	beq.n	800aaec <HAL_TIM_Base_Start+0x70>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a1c      	ldr	r2, [pc, #112]	@ (800ab3c <HAL_TIM_Base_Start+0xc0>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d00e      	beq.n	800aaec <HAL_TIM_Base_Start+0x70>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4a1b      	ldr	r2, [pc, #108]	@ (800ab40 <HAL_TIM_Base_Start+0xc4>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d009      	beq.n	800aaec <HAL_TIM_Base_Start+0x70>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4a19      	ldr	r2, [pc, #100]	@ (800ab44 <HAL_TIM_Base_Start+0xc8>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d004      	beq.n	800aaec <HAL_TIM_Base_Start+0x70>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4a18      	ldr	r2, [pc, #96]	@ (800ab48 <HAL_TIM_Base_Start+0xcc>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d111      	bne.n	800ab10 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	689b      	ldr	r3, [r3, #8]
 800aaf2:	f003 0307 	and.w	r3, r3, #7
 800aaf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2b06      	cmp	r3, #6
 800aafc:	d010      	beq.n	800ab20 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	681a      	ldr	r2, [r3, #0]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f042 0201 	orr.w	r2, r2, #1
 800ab0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab0e:	e007      	b.n	800ab20 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	681a      	ldr	r2, [r3, #0]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f042 0201 	orr.w	r2, r2, #1
 800ab1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ab20:	2300      	movs	r3, #0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3714      	adds	r7, #20
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr
 800ab2e:	bf00      	nop
 800ab30:	40010000 	.word	0x40010000
 800ab34:	40000400 	.word	0x40000400
 800ab38:	40000800 	.word	0x40000800
 800ab3c:	40000c00 	.word	0x40000c00
 800ab40:	40010400 	.word	0x40010400
 800ab44:	40014000 	.word	0x40014000
 800ab48:	40001800 	.word	0x40001800

0800ab4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b085      	sub	sp, #20
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d001      	beq.n	800ab64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ab60:	2301      	movs	r3, #1
 800ab62:	e04e      	b.n	800ac02 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2202      	movs	r2, #2
 800ab68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	68da      	ldr	r2, [r3, #12]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f042 0201 	orr.w	r2, r2, #1
 800ab7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4a23      	ldr	r2, [pc, #140]	@ (800ac10 <HAL_TIM_Base_Start_IT+0xc4>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d022      	beq.n	800abcc <HAL_TIM_Base_Start_IT+0x80>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab8e:	d01d      	beq.n	800abcc <HAL_TIM_Base_Start_IT+0x80>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a1f      	ldr	r2, [pc, #124]	@ (800ac14 <HAL_TIM_Base_Start_IT+0xc8>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d018      	beq.n	800abcc <HAL_TIM_Base_Start_IT+0x80>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	4a1e      	ldr	r2, [pc, #120]	@ (800ac18 <HAL_TIM_Base_Start_IT+0xcc>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d013      	beq.n	800abcc <HAL_TIM_Base_Start_IT+0x80>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4a1c      	ldr	r2, [pc, #112]	@ (800ac1c <HAL_TIM_Base_Start_IT+0xd0>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d00e      	beq.n	800abcc <HAL_TIM_Base_Start_IT+0x80>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	4a1b      	ldr	r2, [pc, #108]	@ (800ac20 <HAL_TIM_Base_Start_IT+0xd4>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d009      	beq.n	800abcc <HAL_TIM_Base_Start_IT+0x80>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a19      	ldr	r2, [pc, #100]	@ (800ac24 <HAL_TIM_Base_Start_IT+0xd8>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d004      	beq.n	800abcc <HAL_TIM_Base_Start_IT+0x80>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4a18      	ldr	r2, [pc, #96]	@ (800ac28 <HAL_TIM_Base_Start_IT+0xdc>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d111      	bne.n	800abf0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	689b      	ldr	r3, [r3, #8]
 800abd2:	f003 0307 	and.w	r3, r3, #7
 800abd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2b06      	cmp	r3, #6
 800abdc:	d010      	beq.n	800ac00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	681a      	ldr	r2, [r3, #0]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f042 0201 	orr.w	r2, r2, #1
 800abec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abee:	e007      	b.n	800ac00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	681a      	ldr	r2, [r3, #0]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f042 0201 	orr.w	r2, r2, #1
 800abfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ac00:	2300      	movs	r3, #0
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3714      	adds	r7, #20
 800ac06:	46bd      	mov	sp, r7
 800ac08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0c:	4770      	bx	lr
 800ac0e:	bf00      	nop
 800ac10:	40010000 	.word	0x40010000
 800ac14:	40000400 	.word	0x40000400
 800ac18:	40000800 	.word	0x40000800
 800ac1c:	40000c00 	.word	0x40000c00
 800ac20:	40010400 	.word	0x40010400
 800ac24:	40014000 	.word	0x40014000
 800ac28:	40001800 	.word	0x40001800

0800ac2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b082      	sub	sp, #8
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d101      	bne.n	800ac3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	e041      	b.n	800acc2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d106      	bne.n	800ac58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f7f9 f926 	bl	8003ea4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2202      	movs	r2, #2
 800ac5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681a      	ldr	r2, [r3, #0]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	3304      	adds	r3, #4
 800ac68:	4619      	mov	r1, r3
 800ac6a:	4610      	mov	r0, r2
 800ac6c:	f000 fbb0 	bl	800b3d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2201      	movs	r2, #1
 800ac74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2201      	movs	r2, #1
 800ac84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2201      	movs	r2, #1
 800ac94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2201      	movs	r2, #1
 800aca4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2201      	movs	r2, #1
 800acac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2201      	movs	r2, #1
 800acb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2201      	movs	r2, #1
 800acbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800acc0:	2300      	movs	r3, #0
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3708      	adds	r7, #8
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
	...

0800accc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b084      	sub	sp, #16
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d109      	bne.n	800acf0 <HAL_TIM_PWM_Start+0x24>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ace2:	b2db      	uxtb	r3, r3
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	bf14      	ite	ne
 800ace8:	2301      	movne	r3, #1
 800acea:	2300      	moveq	r3, #0
 800acec:	b2db      	uxtb	r3, r3
 800acee:	e022      	b.n	800ad36 <HAL_TIM_PWM_Start+0x6a>
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	2b04      	cmp	r3, #4
 800acf4:	d109      	bne.n	800ad0a <HAL_TIM_PWM_Start+0x3e>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800acfc:	b2db      	uxtb	r3, r3
 800acfe:	2b01      	cmp	r3, #1
 800ad00:	bf14      	ite	ne
 800ad02:	2301      	movne	r3, #1
 800ad04:	2300      	moveq	r3, #0
 800ad06:	b2db      	uxtb	r3, r3
 800ad08:	e015      	b.n	800ad36 <HAL_TIM_PWM_Start+0x6a>
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	2b08      	cmp	r3, #8
 800ad0e:	d109      	bne.n	800ad24 <HAL_TIM_PWM_Start+0x58>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ad16:	b2db      	uxtb	r3, r3
 800ad18:	2b01      	cmp	r3, #1
 800ad1a:	bf14      	ite	ne
 800ad1c:	2301      	movne	r3, #1
 800ad1e:	2300      	moveq	r3, #0
 800ad20:	b2db      	uxtb	r3, r3
 800ad22:	e008      	b.n	800ad36 <HAL_TIM_PWM_Start+0x6a>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ad2a:	b2db      	uxtb	r3, r3
 800ad2c:	2b01      	cmp	r3, #1
 800ad2e:	bf14      	ite	ne
 800ad30:	2301      	movne	r3, #1
 800ad32:	2300      	moveq	r3, #0
 800ad34:	b2db      	uxtb	r3, r3
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d001      	beq.n	800ad3e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	e07c      	b.n	800ae38 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d104      	bne.n	800ad4e <HAL_TIM_PWM_Start+0x82>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2202      	movs	r2, #2
 800ad48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ad4c:	e013      	b.n	800ad76 <HAL_TIM_PWM_Start+0xaa>
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	2b04      	cmp	r3, #4
 800ad52:	d104      	bne.n	800ad5e <HAL_TIM_PWM_Start+0x92>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2202      	movs	r2, #2
 800ad58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ad5c:	e00b      	b.n	800ad76 <HAL_TIM_PWM_Start+0xaa>
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	2b08      	cmp	r3, #8
 800ad62:	d104      	bne.n	800ad6e <HAL_TIM_PWM_Start+0xa2>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2202      	movs	r2, #2
 800ad68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ad6c:	e003      	b.n	800ad76 <HAL_TIM_PWM_Start+0xaa>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2202      	movs	r2, #2
 800ad72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	6839      	ldr	r1, [r7, #0]
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f000 fe10 	bl	800b9a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	4a2d      	ldr	r2, [pc, #180]	@ (800ae40 <HAL_TIM_PWM_Start+0x174>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d004      	beq.n	800ad98 <HAL_TIM_PWM_Start+0xcc>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4a2c      	ldr	r2, [pc, #176]	@ (800ae44 <HAL_TIM_PWM_Start+0x178>)
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d101      	bne.n	800ad9c <HAL_TIM_PWM_Start+0xd0>
 800ad98:	2301      	movs	r3, #1
 800ad9a:	e000      	b.n	800ad9e <HAL_TIM_PWM_Start+0xd2>
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d007      	beq.n	800adb2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800adb0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4a22      	ldr	r2, [pc, #136]	@ (800ae40 <HAL_TIM_PWM_Start+0x174>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d022      	beq.n	800ae02 <HAL_TIM_PWM_Start+0x136>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800adc4:	d01d      	beq.n	800ae02 <HAL_TIM_PWM_Start+0x136>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4a1f      	ldr	r2, [pc, #124]	@ (800ae48 <HAL_TIM_PWM_Start+0x17c>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	d018      	beq.n	800ae02 <HAL_TIM_PWM_Start+0x136>
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4a1d      	ldr	r2, [pc, #116]	@ (800ae4c <HAL_TIM_PWM_Start+0x180>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d013      	beq.n	800ae02 <HAL_TIM_PWM_Start+0x136>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4a1c      	ldr	r2, [pc, #112]	@ (800ae50 <HAL_TIM_PWM_Start+0x184>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d00e      	beq.n	800ae02 <HAL_TIM_PWM_Start+0x136>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4a16      	ldr	r2, [pc, #88]	@ (800ae44 <HAL_TIM_PWM_Start+0x178>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d009      	beq.n	800ae02 <HAL_TIM_PWM_Start+0x136>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	4a18      	ldr	r2, [pc, #96]	@ (800ae54 <HAL_TIM_PWM_Start+0x188>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d004      	beq.n	800ae02 <HAL_TIM_PWM_Start+0x136>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4a16      	ldr	r2, [pc, #88]	@ (800ae58 <HAL_TIM_PWM_Start+0x18c>)
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d111      	bne.n	800ae26 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	689b      	ldr	r3, [r3, #8]
 800ae08:	f003 0307 	and.w	r3, r3, #7
 800ae0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2b06      	cmp	r3, #6
 800ae12:	d010      	beq.n	800ae36 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	681a      	ldr	r2, [r3, #0]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f042 0201 	orr.w	r2, r2, #1
 800ae22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae24:	e007      	b.n	800ae36 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	681a      	ldr	r2, [r3, #0]
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f042 0201 	orr.w	r2, r2, #1
 800ae34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ae36:	2300      	movs	r3, #0
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3710      	adds	r7, #16
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}
 800ae40:	40010000 	.word	0x40010000
 800ae44:	40010400 	.word	0x40010400
 800ae48:	40000400 	.word	0x40000400
 800ae4c:	40000800 	.word	0x40000800
 800ae50:	40000c00 	.word	0x40000c00
 800ae54:	40014000 	.word	0x40014000
 800ae58:	40001800 	.word	0x40001800

0800ae5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b082      	sub	sp, #8
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	691b      	ldr	r3, [r3, #16]
 800ae6a:	f003 0302 	and.w	r3, r3, #2
 800ae6e:	2b02      	cmp	r3, #2
 800ae70:	d122      	bne.n	800aeb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	68db      	ldr	r3, [r3, #12]
 800ae78:	f003 0302 	and.w	r3, r3, #2
 800ae7c:	2b02      	cmp	r3, #2
 800ae7e:	d11b      	bne.n	800aeb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f06f 0202 	mvn.w	r2, #2
 800ae88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	699b      	ldr	r3, [r3, #24]
 800ae96:	f003 0303 	and.w	r3, r3, #3
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d003      	beq.n	800aea6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 fa77 	bl	800b392 <HAL_TIM_IC_CaptureCallback>
 800aea4:	e005      	b.n	800aeb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f000 fa69 	bl	800b37e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 fa7a 	bl	800b3a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	691b      	ldr	r3, [r3, #16]
 800aebe:	f003 0304 	and.w	r3, r3, #4
 800aec2:	2b04      	cmp	r3, #4
 800aec4:	d122      	bne.n	800af0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	68db      	ldr	r3, [r3, #12]
 800aecc:	f003 0304 	and.w	r3, r3, #4
 800aed0:	2b04      	cmp	r3, #4
 800aed2:	d11b      	bne.n	800af0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f06f 0204 	mvn.w	r2, #4
 800aedc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2202      	movs	r2, #2
 800aee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	699b      	ldr	r3, [r3, #24]
 800aeea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d003      	beq.n	800aefa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f000 fa4d 	bl	800b392 <HAL_TIM_IC_CaptureCallback>
 800aef8:	e005      	b.n	800af06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f000 fa3f 	bl	800b37e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 fa50 	bl	800b3a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2200      	movs	r2, #0
 800af0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	691b      	ldr	r3, [r3, #16]
 800af12:	f003 0308 	and.w	r3, r3, #8
 800af16:	2b08      	cmp	r3, #8
 800af18:	d122      	bne.n	800af60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	68db      	ldr	r3, [r3, #12]
 800af20:	f003 0308 	and.w	r3, r3, #8
 800af24:	2b08      	cmp	r3, #8
 800af26:	d11b      	bne.n	800af60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f06f 0208 	mvn.w	r2, #8
 800af30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2204      	movs	r2, #4
 800af36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	69db      	ldr	r3, [r3, #28]
 800af3e:	f003 0303 	and.w	r3, r3, #3
 800af42:	2b00      	cmp	r3, #0
 800af44:	d003      	beq.n	800af4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 fa23 	bl	800b392 <HAL_TIM_IC_CaptureCallback>
 800af4c:	e005      	b.n	800af5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 fa15 	bl	800b37e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f000 fa26 	bl	800b3a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2200      	movs	r2, #0
 800af5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	691b      	ldr	r3, [r3, #16]
 800af66:	f003 0310 	and.w	r3, r3, #16
 800af6a:	2b10      	cmp	r3, #16
 800af6c:	d122      	bne.n	800afb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	68db      	ldr	r3, [r3, #12]
 800af74:	f003 0310 	and.w	r3, r3, #16
 800af78:	2b10      	cmp	r3, #16
 800af7a:	d11b      	bne.n	800afb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f06f 0210 	mvn.w	r2, #16
 800af84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2208      	movs	r2, #8
 800af8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	69db      	ldr	r3, [r3, #28]
 800af92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800af96:	2b00      	cmp	r3, #0
 800af98:	d003      	beq.n	800afa2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 f9f9 	bl	800b392 <HAL_TIM_IC_CaptureCallback>
 800afa0:	e005      	b.n	800afae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f000 f9eb 	bl	800b37e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 f9fc 	bl	800b3a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2200      	movs	r2, #0
 800afb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	691b      	ldr	r3, [r3, #16]
 800afba:	f003 0301 	and.w	r3, r3, #1
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d10e      	bne.n	800afe0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	f003 0301 	and.w	r3, r3, #1
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d107      	bne.n	800afe0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f06f 0201 	mvn.w	r2, #1
 800afd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f7f8 fb76 	bl	80036cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	691b      	ldr	r3, [r3, #16]
 800afe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afea:	2b80      	cmp	r3, #128	@ 0x80
 800afec:	d10e      	bne.n	800b00c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	68db      	ldr	r3, [r3, #12]
 800aff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aff8:	2b80      	cmp	r3, #128	@ 0x80
 800affa:	d107      	bne.n	800b00c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800b004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f000 fdca 	bl	800bba0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	691b      	ldr	r3, [r3, #16]
 800b012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b016:	2b40      	cmp	r3, #64	@ 0x40
 800b018:	d10e      	bne.n	800b038 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	68db      	ldr	r3, [r3, #12]
 800b020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b024:	2b40      	cmp	r3, #64	@ 0x40
 800b026:	d107      	bne.n	800b038 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 f9c1 	bl	800b3ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	691b      	ldr	r3, [r3, #16]
 800b03e:	f003 0320 	and.w	r3, r3, #32
 800b042:	2b20      	cmp	r3, #32
 800b044:	d10e      	bne.n	800b064 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	f003 0320 	and.w	r3, r3, #32
 800b050:	2b20      	cmp	r3, #32
 800b052:	d107      	bne.n	800b064 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f06f 0220 	mvn.w	r2, #32
 800b05c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f000 fd94 	bl	800bb8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b064:	bf00      	nop
 800b066:	3708      	adds	r7, #8
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b086      	sub	sp, #24
 800b070:	af00      	add	r7, sp, #0
 800b072:	60f8      	str	r0, [r7, #12]
 800b074:	60b9      	str	r1, [r7, #8]
 800b076:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b078:	2300      	movs	r3, #0
 800b07a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b082:	2b01      	cmp	r3, #1
 800b084:	d101      	bne.n	800b08a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b086:	2302      	movs	r3, #2
 800b088:	e0ae      	b.n	800b1e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2201      	movs	r2, #1
 800b08e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2b0c      	cmp	r3, #12
 800b096:	f200 809f 	bhi.w	800b1d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b09a:	a201      	add	r2, pc, #4	@ (adr r2, 800b0a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0a0:	0800b0d5 	.word	0x0800b0d5
 800b0a4:	0800b1d9 	.word	0x0800b1d9
 800b0a8:	0800b1d9 	.word	0x0800b1d9
 800b0ac:	0800b1d9 	.word	0x0800b1d9
 800b0b0:	0800b115 	.word	0x0800b115
 800b0b4:	0800b1d9 	.word	0x0800b1d9
 800b0b8:	0800b1d9 	.word	0x0800b1d9
 800b0bc:	0800b1d9 	.word	0x0800b1d9
 800b0c0:	0800b157 	.word	0x0800b157
 800b0c4:	0800b1d9 	.word	0x0800b1d9
 800b0c8:	0800b1d9 	.word	0x0800b1d9
 800b0cc:	0800b1d9 	.word	0x0800b1d9
 800b0d0:	0800b197 	.word	0x0800b197
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	68b9      	ldr	r1, [r7, #8]
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f000 fa18 	bl	800b510 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	699a      	ldr	r2, [r3, #24]
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f042 0208 	orr.w	r2, r2, #8
 800b0ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	699a      	ldr	r2, [r3, #24]
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f022 0204 	bic.w	r2, r2, #4
 800b0fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	6999      	ldr	r1, [r3, #24]
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	691a      	ldr	r2, [r3, #16]
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	430a      	orrs	r2, r1
 800b110:	619a      	str	r2, [r3, #24]
      break;
 800b112:	e064      	b.n	800b1de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	68b9      	ldr	r1, [r7, #8]
 800b11a:	4618      	mov	r0, r3
 800b11c:	f000 fa68 	bl	800b5f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	699a      	ldr	r2, [r3, #24]
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b12e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	699a      	ldr	r2, [r3, #24]
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b13e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	6999      	ldr	r1, [r3, #24]
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	691b      	ldr	r3, [r3, #16]
 800b14a:	021a      	lsls	r2, r3, #8
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	430a      	orrs	r2, r1
 800b152:	619a      	str	r2, [r3, #24]
      break;
 800b154:	e043      	b.n	800b1de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	68b9      	ldr	r1, [r7, #8]
 800b15c:	4618      	mov	r0, r3
 800b15e:	f000 fabd 	bl	800b6dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	69da      	ldr	r2, [r3, #28]
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f042 0208 	orr.w	r2, r2, #8
 800b170:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	69da      	ldr	r2, [r3, #28]
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f022 0204 	bic.w	r2, r2, #4
 800b180:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	69d9      	ldr	r1, [r3, #28]
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	691a      	ldr	r2, [r3, #16]
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	430a      	orrs	r2, r1
 800b192:	61da      	str	r2, [r3, #28]
      break;
 800b194:	e023      	b.n	800b1de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	68b9      	ldr	r1, [r7, #8]
 800b19c:	4618      	mov	r0, r3
 800b19e:	f000 fb11 	bl	800b7c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	69da      	ldr	r2, [r3, #28]
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b1b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	69da      	ldr	r2, [r3, #28]
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b1c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	69d9      	ldr	r1, [r3, #28]
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	691b      	ldr	r3, [r3, #16]
 800b1cc:	021a      	lsls	r2, r3, #8
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	430a      	orrs	r2, r1
 800b1d4:	61da      	str	r2, [r3, #28]
      break;
 800b1d6:	e002      	b.n	800b1de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b1d8:	2301      	movs	r3, #1
 800b1da:	75fb      	strb	r3, [r7, #23]
      break;
 800b1dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b1e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3718      	adds	r7, #24
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b204:	2b01      	cmp	r3, #1
 800b206:	d101      	bne.n	800b20c <HAL_TIM_ConfigClockSource+0x1c>
 800b208:	2302      	movs	r3, #2
 800b20a:	e0b4      	b.n	800b376 <HAL_TIM_ConfigClockSource+0x186>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2201      	movs	r2, #1
 800b210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2202      	movs	r2, #2
 800b218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	689b      	ldr	r3, [r3, #8]
 800b222:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b22a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b232:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	68ba      	ldr	r2, [r7, #8]
 800b23a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b244:	d03e      	beq.n	800b2c4 <HAL_TIM_ConfigClockSource+0xd4>
 800b246:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b24a:	f200 8087 	bhi.w	800b35c <HAL_TIM_ConfigClockSource+0x16c>
 800b24e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b252:	f000 8086 	beq.w	800b362 <HAL_TIM_ConfigClockSource+0x172>
 800b256:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b25a:	d87f      	bhi.n	800b35c <HAL_TIM_ConfigClockSource+0x16c>
 800b25c:	2b70      	cmp	r3, #112	@ 0x70
 800b25e:	d01a      	beq.n	800b296 <HAL_TIM_ConfigClockSource+0xa6>
 800b260:	2b70      	cmp	r3, #112	@ 0x70
 800b262:	d87b      	bhi.n	800b35c <HAL_TIM_ConfigClockSource+0x16c>
 800b264:	2b60      	cmp	r3, #96	@ 0x60
 800b266:	d050      	beq.n	800b30a <HAL_TIM_ConfigClockSource+0x11a>
 800b268:	2b60      	cmp	r3, #96	@ 0x60
 800b26a:	d877      	bhi.n	800b35c <HAL_TIM_ConfigClockSource+0x16c>
 800b26c:	2b50      	cmp	r3, #80	@ 0x50
 800b26e:	d03c      	beq.n	800b2ea <HAL_TIM_ConfigClockSource+0xfa>
 800b270:	2b50      	cmp	r3, #80	@ 0x50
 800b272:	d873      	bhi.n	800b35c <HAL_TIM_ConfigClockSource+0x16c>
 800b274:	2b40      	cmp	r3, #64	@ 0x40
 800b276:	d058      	beq.n	800b32a <HAL_TIM_ConfigClockSource+0x13a>
 800b278:	2b40      	cmp	r3, #64	@ 0x40
 800b27a:	d86f      	bhi.n	800b35c <HAL_TIM_ConfigClockSource+0x16c>
 800b27c:	2b30      	cmp	r3, #48	@ 0x30
 800b27e:	d064      	beq.n	800b34a <HAL_TIM_ConfigClockSource+0x15a>
 800b280:	2b30      	cmp	r3, #48	@ 0x30
 800b282:	d86b      	bhi.n	800b35c <HAL_TIM_ConfigClockSource+0x16c>
 800b284:	2b20      	cmp	r3, #32
 800b286:	d060      	beq.n	800b34a <HAL_TIM_ConfigClockSource+0x15a>
 800b288:	2b20      	cmp	r3, #32
 800b28a:	d867      	bhi.n	800b35c <HAL_TIM_ConfigClockSource+0x16c>
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d05c      	beq.n	800b34a <HAL_TIM_ConfigClockSource+0x15a>
 800b290:	2b10      	cmp	r3, #16
 800b292:	d05a      	beq.n	800b34a <HAL_TIM_ConfigClockSource+0x15a>
 800b294:	e062      	b.n	800b35c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6818      	ldr	r0, [r3, #0]
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	6899      	ldr	r1, [r3, #8]
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	685a      	ldr	r2, [r3, #4]
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	68db      	ldr	r3, [r3, #12]
 800b2a6:	f000 fb5d 	bl	800b964 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	689b      	ldr	r3, [r3, #8]
 800b2b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b2b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	68ba      	ldr	r2, [r7, #8]
 800b2c0:	609a      	str	r2, [r3, #8]
      break;
 800b2c2:	e04f      	b.n	800b364 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6818      	ldr	r0, [r3, #0]
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	6899      	ldr	r1, [r3, #8]
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	685a      	ldr	r2, [r3, #4]
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	68db      	ldr	r3, [r3, #12]
 800b2d4:	f000 fb46 	bl	800b964 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	689a      	ldr	r2, [r3, #8]
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b2e6:	609a      	str	r2, [r3, #8]
      break;
 800b2e8:	e03c      	b.n	800b364 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6818      	ldr	r0, [r3, #0]
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	6859      	ldr	r1, [r3, #4]
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	68db      	ldr	r3, [r3, #12]
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	f000 faba 	bl	800b870 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	2150      	movs	r1, #80	@ 0x50
 800b302:	4618      	mov	r0, r3
 800b304:	f000 fb13 	bl	800b92e <TIM_ITRx_SetConfig>
      break;
 800b308:	e02c      	b.n	800b364 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6818      	ldr	r0, [r3, #0]
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	6859      	ldr	r1, [r3, #4]
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	68db      	ldr	r3, [r3, #12]
 800b316:	461a      	mov	r2, r3
 800b318:	f000 fad9 	bl	800b8ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	2160      	movs	r1, #96	@ 0x60
 800b322:	4618      	mov	r0, r3
 800b324:	f000 fb03 	bl	800b92e <TIM_ITRx_SetConfig>
      break;
 800b328:	e01c      	b.n	800b364 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6818      	ldr	r0, [r3, #0]
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	6859      	ldr	r1, [r3, #4]
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	68db      	ldr	r3, [r3, #12]
 800b336:	461a      	mov	r2, r3
 800b338:	f000 fa9a 	bl	800b870 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	2140      	movs	r1, #64	@ 0x40
 800b342:	4618      	mov	r0, r3
 800b344:	f000 faf3 	bl	800b92e <TIM_ITRx_SetConfig>
      break;
 800b348:	e00c      	b.n	800b364 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681a      	ldr	r2, [r3, #0]
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	4619      	mov	r1, r3
 800b354:	4610      	mov	r0, r2
 800b356:	f000 faea 	bl	800b92e <TIM_ITRx_SetConfig>
      break;
 800b35a:	e003      	b.n	800b364 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b35c:	2301      	movs	r3, #1
 800b35e:	73fb      	strb	r3, [r7, #15]
      break;
 800b360:	e000      	b.n	800b364 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b362:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2201      	movs	r2, #1
 800b368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2200      	movs	r2, #0
 800b370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b374:	7bfb      	ldrb	r3, [r7, #15]
}
 800b376:	4618      	mov	r0, r3
 800b378:	3710      	adds	r7, #16
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}

0800b37e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b37e:	b480      	push	{r7}
 800b380:	b083      	sub	sp, #12
 800b382:	af00      	add	r7, sp, #0
 800b384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b386:	bf00      	nop
 800b388:	370c      	adds	r7, #12
 800b38a:	46bd      	mov	sp, r7
 800b38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b390:	4770      	bx	lr

0800b392 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b392:	b480      	push	{r7}
 800b394:	b083      	sub	sp, #12
 800b396:	af00      	add	r7, sp, #0
 800b398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b39a:	bf00      	nop
 800b39c:	370c      	adds	r7, #12
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a4:	4770      	bx	lr

0800b3a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b3a6:	b480      	push	{r7}
 800b3a8:	b083      	sub	sp, #12
 800b3aa:	af00      	add	r7, sp, #0
 800b3ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b3ae:	bf00      	nop
 800b3b0:	370c      	adds	r7, #12
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b8:	4770      	bx	lr

0800b3ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b3ba:	b480      	push	{r7}
 800b3bc:	b083      	sub	sp, #12
 800b3be:	af00      	add	r7, sp, #0
 800b3c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b3c2:	bf00      	nop
 800b3c4:	370c      	adds	r7, #12
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3cc:	4770      	bx	lr
	...

0800b3d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b085      	sub	sp, #20
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	4a40      	ldr	r2, [pc, #256]	@ (800b4e4 <TIM_Base_SetConfig+0x114>)
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d013      	beq.n	800b410 <TIM_Base_SetConfig+0x40>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3ee:	d00f      	beq.n	800b410 <TIM_Base_SetConfig+0x40>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	4a3d      	ldr	r2, [pc, #244]	@ (800b4e8 <TIM_Base_SetConfig+0x118>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d00b      	beq.n	800b410 <TIM_Base_SetConfig+0x40>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	4a3c      	ldr	r2, [pc, #240]	@ (800b4ec <TIM_Base_SetConfig+0x11c>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d007      	beq.n	800b410 <TIM_Base_SetConfig+0x40>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	4a3b      	ldr	r2, [pc, #236]	@ (800b4f0 <TIM_Base_SetConfig+0x120>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d003      	beq.n	800b410 <TIM_Base_SetConfig+0x40>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	4a3a      	ldr	r2, [pc, #232]	@ (800b4f4 <TIM_Base_SetConfig+0x124>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d108      	bne.n	800b422 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b416:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	68fa      	ldr	r2, [r7, #12]
 800b41e:	4313      	orrs	r3, r2
 800b420:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	4a2f      	ldr	r2, [pc, #188]	@ (800b4e4 <TIM_Base_SetConfig+0x114>)
 800b426:	4293      	cmp	r3, r2
 800b428:	d02b      	beq.n	800b482 <TIM_Base_SetConfig+0xb2>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b430:	d027      	beq.n	800b482 <TIM_Base_SetConfig+0xb2>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	4a2c      	ldr	r2, [pc, #176]	@ (800b4e8 <TIM_Base_SetConfig+0x118>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d023      	beq.n	800b482 <TIM_Base_SetConfig+0xb2>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	4a2b      	ldr	r2, [pc, #172]	@ (800b4ec <TIM_Base_SetConfig+0x11c>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d01f      	beq.n	800b482 <TIM_Base_SetConfig+0xb2>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	4a2a      	ldr	r2, [pc, #168]	@ (800b4f0 <TIM_Base_SetConfig+0x120>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d01b      	beq.n	800b482 <TIM_Base_SetConfig+0xb2>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	4a29      	ldr	r2, [pc, #164]	@ (800b4f4 <TIM_Base_SetConfig+0x124>)
 800b44e:	4293      	cmp	r3, r2
 800b450:	d017      	beq.n	800b482 <TIM_Base_SetConfig+0xb2>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	4a28      	ldr	r2, [pc, #160]	@ (800b4f8 <TIM_Base_SetConfig+0x128>)
 800b456:	4293      	cmp	r3, r2
 800b458:	d013      	beq.n	800b482 <TIM_Base_SetConfig+0xb2>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	4a27      	ldr	r2, [pc, #156]	@ (800b4fc <TIM_Base_SetConfig+0x12c>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	d00f      	beq.n	800b482 <TIM_Base_SetConfig+0xb2>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	4a26      	ldr	r2, [pc, #152]	@ (800b500 <TIM_Base_SetConfig+0x130>)
 800b466:	4293      	cmp	r3, r2
 800b468:	d00b      	beq.n	800b482 <TIM_Base_SetConfig+0xb2>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	4a25      	ldr	r2, [pc, #148]	@ (800b504 <TIM_Base_SetConfig+0x134>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d007      	beq.n	800b482 <TIM_Base_SetConfig+0xb2>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	4a24      	ldr	r2, [pc, #144]	@ (800b508 <TIM_Base_SetConfig+0x138>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d003      	beq.n	800b482 <TIM_Base_SetConfig+0xb2>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	4a23      	ldr	r2, [pc, #140]	@ (800b50c <TIM_Base_SetConfig+0x13c>)
 800b47e:	4293      	cmp	r3, r2
 800b480:	d108      	bne.n	800b494 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b488:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	68db      	ldr	r3, [r3, #12]
 800b48e:	68fa      	ldr	r2, [r7, #12]
 800b490:	4313      	orrs	r3, r2
 800b492:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	695b      	ldr	r3, [r3, #20]
 800b49e:	4313      	orrs	r3, r2
 800b4a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	68fa      	ldr	r2, [r7, #12]
 800b4a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	689a      	ldr	r2, [r3, #8]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	681a      	ldr	r2, [r3, #0]
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	4a0a      	ldr	r2, [pc, #40]	@ (800b4e4 <TIM_Base_SetConfig+0x114>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d003      	beq.n	800b4c8 <TIM_Base_SetConfig+0xf8>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	4a0c      	ldr	r2, [pc, #48]	@ (800b4f4 <TIM_Base_SetConfig+0x124>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d103      	bne.n	800b4d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	691a      	ldr	r2, [r3, #16]
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	615a      	str	r2, [r3, #20]
}
 800b4d6:	bf00      	nop
 800b4d8:	3714      	adds	r7, #20
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e0:	4770      	bx	lr
 800b4e2:	bf00      	nop
 800b4e4:	40010000 	.word	0x40010000
 800b4e8:	40000400 	.word	0x40000400
 800b4ec:	40000800 	.word	0x40000800
 800b4f0:	40000c00 	.word	0x40000c00
 800b4f4:	40010400 	.word	0x40010400
 800b4f8:	40014000 	.word	0x40014000
 800b4fc:	40014400 	.word	0x40014400
 800b500:	40014800 	.word	0x40014800
 800b504:	40001800 	.word	0x40001800
 800b508:	40001c00 	.word	0x40001c00
 800b50c:	40002000 	.word	0x40002000

0800b510 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b510:	b480      	push	{r7}
 800b512:	b087      	sub	sp, #28
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6a1b      	ldr	r3, [r3, #32]
 800b51e:	f023 0201 	bic.w	r2, r3, #1
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6a1b      	ldr	r3, [r3, #32]
 800b52a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	699b      	ldr	r3, [r3, #24]
 800b536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b53e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f023 0303 	bic.w	r3, r3, #3
 800b546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	68fa      	ldr	r2, [r7, #12]
 800b54e:	4313      	orrs	r3, r2
 800b550:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	f023 0302 	bic.w	r3, r3, #2
 800b558:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	689b      	ldr	r3, [r3, #8]
 800b55e:	697a      	ldr	r2, [r7, #20]
 800b560:	4313      	orrs	r3, r2
 800b562:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	4a20      	ldr	r2, [pc, #128]	@ (800b5e8 <TIM_OC1_SetConfig+0xd8>)
 800b568:	4293      	cmp	r3, r2
 800b56a:	d003      	beq.n	800b574 <TIM_OC1_SetConfig+0x64>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	4a1f      	ldr	r2, [pc, #124]	@ (800b5ec <TIM_OC1_SetConfig+0xdc>)
 800b570:	4293      	cmp	r3, r2
 800b572:	d10c      	bne.n	800b58e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	f023 0308 	bic.w	r3, r3, #8
 800b57a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	68db      	ldr	r3, [r3, #12]
 800b580:	697a      	ldr	r2, [r7, #20]
 800b582:	4313      	orrs	r3, r2
 800b584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	f023 0304 	bic.w	r3, r3, #4
 800b58c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	4a15      	ldr	r2, [pc, #84]	@ (800b5e8 <TIM_OC1_SetConfig+0xd8>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d003      	beq.n	800b59e <TIM_OC1_SetConfig+0x8e>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	4a14      	ldr	r2, [pc, #80]	@ (800b5ec <TIM_OC1_SetConfig+0xdc>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d111      	bne.n	800b5c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b5a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b5a6:	693b      	ldr	r3, [r7, #16]
 800b5a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b5ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	695b      	ldr	r3, [r3, #20]
 800b5b2:	693a      	ldr	r2, [r7, #16]
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	699b      	ldr	r3, [r3, #24]
 800b5bc:	693a      	ldr	r2, [r7, #16]
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	693a      	ldr	r2, [r7, #16]
 800b5c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	68fa      	ldr	r2, [r7, #12]
 800b5cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	685a      	ldr	r2, [r3, #4]
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	697a      	ldr	r2, [r7, #20]
 800b5da:	621a      	str	r2, [r3, #32]
}
 800b5dc:	bf00      	nop
 800b5de:	371c      	adds	r7, #28
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr
 800b5e8:	40010000 	.word	0x40010000
 800b5ec:	40010400 	.word	0x40010400

0800b5f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b087      	sub	sp, #28
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
 800b5f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6a1b      	ldr	r3, [r3, #32]
 800b5fe:	f023 0210 	bic.w	r2, r3, #16
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6a1b      	ldr	r3, [r3, #32]
 800b60a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	685b      	ldr	r3, [r3, #4]
 800b610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	699b      	ldr	r3, [r3, #24]
 800b616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b61e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b626:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	021b      	lsls	r3, r3, #8
 800b62e:	68fa      	ldr	r2, [r7, #12]
 800b630:	4313      	orrs	r3, r2
 800b632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	f023 0320 	bic.w	r3, r3, #32
 800b63a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	689b      	ldr	r3, [r3, #8]
 800b640:	011b      	lsls	r3, r3, #4
 800b642:	697a      	ldr	r2, [r7, #20]
 800b644:	4313      	orrs	r3, r2
 800b646:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	4a22      	ldr	r2, [pc, #136]	@ (800b6d4 <TIM_OC2_SetConfig+0xe4>)
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d003      	beq.n	800b658 <TIM_OC2_SetConfig+0x68>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	4a21      	ldr	r2, [pc, #132]	@ (800b6d8 <TIM_OC2_SetConfig+0xe8>)
 800b654:	4293      	cmp	r3, r2
 800b656:	d10d      	bne.n	800b674 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b65e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	68db      	ldr	r3, [r3, #12]
 800b664:	011b      	lsls	r3, r3, #4
 800b666:	697a      	ldr	r2, [r7, #20]
 800b668:	4313      	orrs	r3, r2
 800b66a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b672:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	4a17      	ldr	r2, [pc, #92]	@ (800b6d4 <TIM_OC2_SetConfig+0xe4>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d003      	beq.n	800b684 <TIM_OC2_SetConfig+0x94>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	4a16      	ldr	r2, [pc, #88]	@ (800b6d8 <TIM_OC2_SetConfig+0xe8>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d113      	bne.n	800b6ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b68a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b68c:	693b      	ldr	r3, [r7, #16]
 800b68e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b692:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	695b      	ldr	r3, [r3, #20]
 800b698:	009b      	lsls	r3, r3, #2
 800b69a:	693a      	ldr	r2, [r7, #16]
 800b69c:	4313      	orrs	r3, r2
 800b69e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	699b      	ldr	r3, [r3, #24]
 800b6a4:	009b      	lsls	r3, r3, #2
 800b6a6:	693a      	ldr	r2, [r7, #16]
 800b6a8:	4313      	orrs	r3, r2
 800b6aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	693a      	ldr	r2, [r7, #16]
 800b6b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	68fa      	ldr	r2, [r7, #12]
 800b6b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	685a      	ldr	r2, [r3, #4]
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	697a      	ldr	r2, [r7, #20]
 800b6c4:	621a      	str	r2, [r3, #32]
}
 800b6c6:	bf00      	nop
 800b6c8:	371c      	adds	r7, #28
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d0:	4770      	bx	lr
 800b6d2:	bf00      	nop
 800b6d4:	40010000 	.word	0x40010000
 800b6d8:	40010400 	.word	0x40010400

0800b6dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b087      	sub	sp, #28
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
 800b6e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6a1b      	ldr	r3, [r3, #32]
 800b6ea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6a1b      	ldr	r3, [r3, #32]
 800b6f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	69db      	ldr	r3, [r3, #28]
 800b702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b70a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f023 0303 	bic.w	r3, r3, #3
 800b712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	68fa      	ldr	r2, [r7, #12]
 800b71a:	4313      	orrs	r3, r2
 800b71c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b724:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	689b      	ldr	r3, [r3, #8]
 800b72a:	021b      	lsls	r3, r3, #8
 800b72c:	697a      	ldr	r2, [r7, #20]
 800b72e:	4313      	orrs	r3, r2
 800b730:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	4a21      	ldr	r2, [pc, #132]	@ (800b7bc <TIM_OC3_SetConfig+0xe0>)
 800b736:	4293      	cmp	r3, r2
 800b738:	d003      	beq.n	800b742 <TIM_OC3_SetConfig+0x66>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	4a20      	ldr	r2, [pc, #128]	@ (800b7c0 <TIM_OC3_SetConfig+0xe4>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d10d      	bne.n	800b75e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b748:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	68db      	ldr	r3, [r3, #12]
 800b74e:	021b      	lsls	r3, r3, #8
 800b750:	697a      	ldr	r2, [r7, #20]
 800b752:	4313      	orrs	r3, r2
 800b754:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b75c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	4a16      	ldr	r2, [pc, #88]	@ (800b7bc <TIM_OC3_SetConfig+0xe0>)
 800b762:	4293      	cmp	r3, r2
 800b764:	d003      	beq.n	800b76e <TIM_OC3_SetConfig+0x92>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	4a15      	ldr	r2, [pc, #84]	@ (800b7c0 <TIM_OC3_SetConfig+0xe4>)
 800b76a:	4293      	cmp	r3, r2
 800b76c:	d113      	bne.n	800b796 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b774:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b77c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	695b      	ldr	r3, [r3, #20]
 800b782:	011b      	lsls	r3, r3, #4
 800b784:	693a      	ldr	r2, [r7, #16]
 800b786:	4313      	orrs	r3, r2
 800b788:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	699b      	ldr	r3, [r3, #24]
 800b78e:	011b      	lsls	r3, r3, #4
 800b790:	693a      	ldr	r2, [r7, #16]
 800b792:	4313      	orrs	r3, r2
 800b794:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	693a      	ldr	r2, [r7, #16]
 800b79a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	68fa      	ldr	r2, [r7, #12]
 800b7a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	685a      	ldr	r2, [r3, #4]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	697a      	ldr	r2, [r7, #20]
 800b7ae:	621a      	str	r2, [r3, #32]
}
 800b7b0:	bf00      	nop
 800b7b2:	371c      	adds	r7, #28
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr
 800b7bc:	40010000 	.word	0x40010000
 800b7c0:	40010400 	.word	0x40010400

0800b7c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b087      	sub	sp, #28
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6a1b      	ldr	r3, [r3, #32]
 800b7d2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6a1b      	ldr	r3, [r3, #32]
 800b7de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	685b      	ldr	r3, [r3, #4]
 800b7e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	69db      	ldr	r3, [r3, #28]
 800b7ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b7f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b7fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	021b      	lsls	r3, r3, #8
 800b802:	68fa      	ldr	r2, [r7, #12]
 800b804:	4313      	orrs	r3, r2
 800b806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b80e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	689b      	ldr	r3, [r3, #8]
 800b814:	031b      	lsls	r3, r3, #12
 800b816:	693a      	ldr	r2, [r7, #16]
 800b818:	4313      	orrs	r3, r2
 800b81a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	4a12      	ldr	r2, [pc, #72]	@ (800b868 <TIM_OC4_SetConfig+0xa4>)
 800b820:	4293      	cmp	r3, r2
 800b822:	d003      	beq.n	800b82c <TIM_OC4_SetConfig+0x68>
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	4a11      	ldr	r2, [pc, #68]	@ (800b86c <TIM_OC4_SetConfig+0xa8>)
 800b828:	4293      	cmp	r3, r2
 800b82a:	d109      	bne.n	800b840 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b832:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	695b      	ldr	r3, [r3, #20]
 800b838:	019b      	lsls	r3, r3, #6
 800b83a:	697a      	ldr	r2, [r7, #20]
 800b83c:	4313      	orrs	r3, r2
 800b83e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	697a      	ldr	r2, [r7, #20]
 800b844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	68fa      	ldr	r2, [r7, #12]
 800b84a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	685a      	ldr	r2, [r3, #4]
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	693a      	ldr	r2, [r7, #16]
 800b858:	621a      	str	r2, [r3, #32]
}
 800b85a:	bf00      	nop
 800b85c:	371c      	adds	r7, #28
 800b85e:	46bd      	mov	sp, r7
 800b860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b864:	4770      	bx	lr
 800b866:	bf00      	nop
 800b868:	40010000 	.word	0x40010000
 800b86c:	40010400 	.word	0x40010400

0800b870 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b870:	b480      	push	{r7}
 800b872:	b087      	sub	sp, #28
 800b874:	af00      	add	r7, sp, #0
 800b876:	60f8      	str	r0, [r7, #12]
 800b878:	60b9      	str	r1, [r7, #8]
 800b87a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	6a1b      	ldr	r3, [r3, #32]
 800b880:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	6a1b      	ldr	r3, [r3, #32]
 800b886:	f023 0201 	bic.w	r2, r3, #1
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	699b      	ldr	r3, [r3, #24]
 800b892:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b89a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	011b      	lsls	r3, r3, #4
 800b8a0:	693a      	ldr	r2, [r7, #16]
 800b8a2:	4313      	orrs	r3, r2
 800b8a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	f023 030a 	bic.w	r3, r3, #10
 800b8ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b8ae:	697a      	ldr	r2, [r7, #20]
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	4313      	orrs	r3, r2
 800b8b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	693a      	ldr	r2, [r7, #16]
 800b8ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	697a      	ldr	r2, [r7, #20]
 800b8c0:	621a      	str	r2, [r3, #32]
}
 800b8c2:	bf00      	nop
 800b8c4:	371c      	adds	r7, #28
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8cc:	4770      	bx	lr

0800b8ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b8ce:	b480      	push	{r7}
 800b8d0:	b087      	sub	sp, #28
 800b8d2:	af00      	add	r7, sp, #0
 800b8d4:	60f8      	str	r0, [r7, #12]
 800b8d6:	60b9      	str	r1, [r7, #8]
 800b8d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	6a1b      	ldr	r3, [r3, #32]
 800b8de:	f023 0210 	bic.w	r2, r3, #16
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	699b      	ldr	r3, [r3, #24]
 800b8ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	6a1b      	ldr	r3, [r3, #32]
 800b8f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b8f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	031b      	lsls	r3, r3, #12
 800b8fe:	697a      	ldr	r2, [r7, #20]
 800b900:	4313      	orrs	r3, r2
 800b902:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b90a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	011b      	lsls	r3, r3, #4
 800b910:	693a      	ldr	r2, [r7, #16]
 800b912:	4313      	orrs	r3, r2
 800b914:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	697a      	ldr	r2, [r7, #20]
 800b91a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	693a      	ldr	r2, [r7, #16]
 800b920:	621a      	str	r2, [r3, #32]
}
 800b922:	bf00      	nop
 800b924:	371c      	adds	r7, #28
 800b926:	46bd      	mov	sp, r7
 800b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92c:	4770      	bx	lr

0800b92e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b92e:	b480      	push	{r7}
 800b930:	b085      	sub	sp, #20
 800b932:	af00      	add	r7, sp, #0
 800b934:	6078      	str	r0, [r7, #4]
 800b936:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	689b      	ldr	r3, [r3, #8]
 800b93c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b944:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b946:	683a      	ldr	r2, [r7, #0]
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	4313      	orrs	r3, r2
 800b94c:	f043 0307 	orr.w	r3, r3, #7
 800b950:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	68fa      	ldr	r2, [r7, #12]
 800b956:	609a      	str	r2, [r3, #8]
}
 800b958:	bf00      	nop
 800b95a:	3714      	adds	r7, #20
 800b95c:	46bd      	mov	sp, r7
 800b95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b962:	4770      	bx	lr

0800b964 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b964:	b480      	push	{r7}
 800b966:	b087      	sub	sp, #28
 800b968:	af00      	add	r7, sp, #0
 800b96a:	60f8      	str	r0, [r7, #12]
 800b96c:	60b9      	str	r1, [r7, #8]
 800b96e:	607a      	str	r2, [r7, #4]
 800b970:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	689b      	ldr	r3, [r3, #8]
 800b976:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b97e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	021a      	lsls	r2, r3, #8
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	431a      	orrs	r2, r3
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	4313      	orrs	r3, r2
 800b98c:	697a      	ldr	r2, [r7, #20]
 800b98e:	4313      	orrs	r3, r2
 800b990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	697a      	ldr	r2, [r7, #20]
 800b996:	609a      	str	r2, [r3, #8]
}
 800b998:	bf00      	nop
 800b99a:	371c      	adds	r7, #28
 800b99c:	46bd      	mov	sp, r7
 800b99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a2:	4770      	bx	lr

0800b9a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b087      	sub	sp, #28
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	60f8      	str	r0, [r7, #12]
 800b9ac:	60b9      	str	r1, [r7, #8]
 800b9ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	f003 031f 	and.w	r3, r3, #31
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	fa02 f303 	lsl.w	r3, r2, r3
 800b9bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	6a1a      	ldr	r2, [r3, #32]
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	43db      	mvns	r3, r3
 800b9c6:	401a      	ands	r2, r3
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	6a1a      	ldr	r2, [r3, #32]
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	f003 031f 	and.w	r3, r3, #31
 800b9d6:	6879      	ldr	r1, [r7, #4]
 800b9d8:	fa01 f303 	lsl.w	r3, r1, r3
 800b9dc:	431a      	orrs	r2, r3
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	621a      	str	r2, [r3, #32]
}
 800b9e2:	bf00      	nop
 800b9e4:	371c      	adds	r7, #28
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ec:	4770      	bx	lr
	...

0800b9f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b085      	sub	sp, #20
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ba00:	2b01      	cmp	r3, #1
 800ba02:	d101      	bne.n	800ba08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ba04:	2302      	movs	r3, #2
 800ba06:	e05a      	b.n	800babe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2202      	movs	r2, #2
 800ba14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	689b      	ldr	r3, [r3, #8]
 800ba26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	68fa      	ldr	r2, [r7, #12]
 800ba36:	4313      	orrs	r3, r2
 800ba38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	68fa      	ldr	r2, [r7, #12]
 800ba40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	4a21      	ldr	r2, [pc, #132]	@ (800bacc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ba48:	4293      	cmp	r3, r2
 800ba4a:	d022      	beq.n	800ba92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba54:	d01d      	beq.n	800ba92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4a1d      	ldr	r2, [pc, #116]	@ (800bad0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d018      	beq.n	800ba92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	4a1b      	ldr	r2, [pc, #108]	@ (800bad4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d013      	beq.n	800ba92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	4a1a      	ldr	r2, [pc, #104]	@ (800bad8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ba70:	4293      	cmp	r3, r2
 800ba72:	d00e      	beq.n	800ba92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	4a18      	ldr	r2, [pc, #96]	@ (800badc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	d009      	beq.n	800ba92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	4a17      	ldr	r2, [pc, #92]	@ (800bae0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ba84:	4293      	cmp	r3, r2
 800ba86:	d004      	beq.n	800ba92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	4a15      	ldr	r2, [pc, #84]	@ (800bae4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	d10c      	bne.n	800baac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	685b      	ldr	r3, [r3, #4]
 800ba9e:	68ba      	ldr	r2, [r7, #8]
 800baa0:	4313      	orrs	r3, r2
 800baa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	68ba      	ldr	r2, [r7, #8]
 800baaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2201      	movs	r2, #1
 800bab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2200      	movs	r2, #0
 800bab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800babc:	2300      	movs	r3, #0
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3714      	adds	r7, #20
 800bac2:	46bd      	mov	sp, r7
 800bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac8:	4770      	bx	lr
 800baca:	bf00      	nop
 800bacc:	40010000 	.word	0x40010000
 800bad0:	40000400 	.word	0x40000400
 800bad4:	40000800 	.word	0x40000800
 800bad8:	40000c00 	.word	0x40000c00
 800badc:	40010400 	.word	0x40010400
 800bae0:	40014000 	.word	0x40014000
 800bae4:	40001800 	.word	0x40001800

0800bae8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bae8:	b480      	push	{r7}
 800baea:	b085      	sub	sp, #20
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800baf2:	2300      	movs	r3, #0
 800baf4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bafc:	2b01      	cmp	r3, #1
 800bafe:	d101      	bne.n	800bb04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bb00:	2302      	movs	r3, #2
 800bb02:	e03d      	b.n	800bb80 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2201      	movs	r2, #1
 800bb08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	68db      	ldr	r3, [r3, #12]
 800bb16:	4313      	orrs	r3, r2
 800bb18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	689b      	ldr	r3, [r3, #8]
 800bb24:	4313      	orrs	r3, r2
 800bb26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	685b      	ldr	r3, [r3, #4]
 800bb32:	4313      	orrs	r3, r2
 800bb34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4313      	orrs	r3, r2
 800bb42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	691b      	ldr	r3, [r3, #16]
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	695b      	ldr	r3, [r3, #20]
 800bb5c:	4313      	orrs	r3, r2
 800bb5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	69db      	ldr	r3, [r3, #28]
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	68fa      	ldr	r2, [r7, #12]
 800bb74:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bb7e:	2300      	movs	r3, #0
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3714      	adds	r7, #20
 800bb84:	46bd      	mov	sp, r7
 800bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8a:	4770      	bx	lr

0800bb8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b083      	sub	sp, #12
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bb94:	bf00      	nop
 800bb96:	370c      	adds	r7, #12
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr

0800bba0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bba0:	b480      	push	{r7}
 800bba2:	b083      	sub	sp, #12
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bba8:	bf00      	nop
 800bbaa:	370c      	adds	r7, #12
 800bbac:	46bd      	mov	sp, r7
 800bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb2:	4770      	bx	lr

0800bbb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b082      	sub	sp, #8
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d101      	bne.n	800bbc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	e03f      	b.n	800bc46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bbcc:	b2db      	uxtb	r3, r3
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d106      	bne.n	800bbe0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f7f8 f9c4 	bl	8003f68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2224      	movs	r2, #36	@ 0x24
 800bbe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	68da      	ldr	r2, [r3, #12]
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bbf6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f000 fe5f 	bl	800c8bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	691a      	ldr	r2, [r3, #16]
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bc0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	695a      	ldr	r2, [r3, #20]
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bc1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	68da      	ldr	r2, [r3, #12]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800bc2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2200      	movs	r2, #0
 800bc32:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2220      	movs	r2, #32
 800bc38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2220      	movs	r2, #32
 800bc40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800bc44:	2300      	movs	r3, #0
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3708      	adds	r7, #8
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}

0800bc4e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc4e:	b580      	push	{r7, lr}
 800bc50:	b084      	sub	sp, #16
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	60f8      	str	r0, [r7, #12]
 800bc56:	60b9      	str	r1, [r7, #8]
 800bc58:	4613      	mov	r3, r2
 800bc5a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bc62:	b2db      	uxtb	r3, r3
 800bc64:	2b20      	cmp	r3, #32
 800bc66:	d11d      	bne.n	800bca4 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d002      	beq.n	800bc74 <HAL_UART_Receive_DMA+0x26>
 800bc6e:	88fb      	ldrh	r3, [r7, #6]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d101      	bne.n	800bc78 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800bc74:	2301      	movs	r3, #1
 800bc76:	e016      	b.n	800bca6 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bc7e:	2b01      	cmp	r3, #1
 800bc80:	d101      	bne.n	800bc86 <HAL_UART_Receive_DMA+0x38>
 800bc82:	2302      	movs	r3, #2
 800bc84:	e00f      	b.n	800bca6 <HAL_UART_Receive_DMA+0x58>
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	2201      	movs	r2, #1
 800bc8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	2200      	movs	r2, #0
 800bc92:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bc94:	88fb      	ldrh	r3, [r7, #6]
 800bc96:	461a      	mov	r2, r3
 800bc98:	68b9      	ldr	r1, [r7, #8]
 800bc9a:	68f8      	ldr	r0, [r7, #12]
 800bc9c:	f000 fbae 	bl	800c3fc <UART_Start_Receive_DMA>
 800bca0:	4603      	mov	r3, r0
 800bca2:	e000      	b.n	800bca6 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800bca4:	2302      	movs	r3, #2
  }
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	3710      	adds	r7, #16
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}
	...

0800bcb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b0ba      	sub	sp, #232	@ 0xe8
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	68db      	ldr	r3, [r3, #12]
 800bcc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	695b      	ldr	r3, [r3, #20]
 800bcd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bce6:	f003 030f 	and.w	r3, r3, #15
 800bcea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800bcee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d10f      	bne.n	800bd16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bcf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bcfa:	f003 0320 	and.w	r3, r3, #32
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d009      	beq.n	800bd16 <HAL_UART_IRQHandler+0x66>
 800bd02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bd06:	f003 0320 	and.w	r3, r3, #32
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d003      	beq.n	800bd16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f000 fd19 	bl	800c746 <UART_Receive_IT>
      return;
 800bd14:	e256      	b.n	800c1c4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bd16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	f000 80de 	beq.w	800bedc <HAL_UART_IRQHandler+0x22c>
 800bd20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bd24:	f003 0301 	and.w	r3, r3, #1
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d106      	bne.n	800bd3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bd2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bd30:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	f000 80d1 	beq.w	800bedc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bd3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd3e:	f003 0301 	and.w	r3, r3, #1
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d00b      	beq.n	800bd5e <HAL_UART_IRQHandler+0xae>
 800bd46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bd4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d005      	beq.n	800bd5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd56:	f043 0201 	orr.w	r2, r3, #1
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bd5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd62:	f003 0304 	and.w	r3, r3, #4
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d00b      	beq.n	800bd82 <HAL_UART_IRQHandler+0xd2>
 800bd6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bd6e:	f003 0301 	and.w	r3, r3, #1
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d005      	beq.n	800bd82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd7a:	f043 0202 	orr.w	r2, r3, #2
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bd82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd86:	f003 0302 	and.w	r3, r3, #2
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d00b      	beq.n	800bda6 <HAL_UART_IRQHandler+0xf6>
 800bd8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bd92:	f003 0301 	and.w	r3, r3, #1
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d005      	beq.n	800bda6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd9e:	f043 0204 	orr.w	r2, r3, #4
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bda6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bdaa:	f003 0308 	and.w	r3, r3, #8
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d011      	beq.n	800bdd6 <HAL_UART_IRQHandler+0x126>
 800bdb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bdb6:	f003 0320 	and.w	r3, r3, #32
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d105      	bne.n	800bdca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bdbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bdc2:	f003 0301 	and.w	r3, r3, #1
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d005      	beq.n	800bdd6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdce:	f043 0208 	orr.w	r2, r3, #8
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	f000 81ed 	beq.w	800c1ba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bde0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bde4:	f003 0320 	and.w	r3, r3, #32
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d008      	beq.n	800bdfe <HAL_UART_IRQHandler+0x14e>
 800bdec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bdf0:	f003 0320 	and.w	r3, r3, #32
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d002      	beq.n	800bdfe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f000 fca4 	bl	800c746 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	695b      	ldr	r3, [r3, #20]
 800be04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be08:	2b40      	cmp	r3, #64	@ 0x40
 800be0a:	bf0c      	ite	eq
 800be0c:	2301      	moveq	r3, #1
 800be0e:	2300      	movne	r3, #0
 800be10:	b2db      	uxtb	r3, r3
 800be12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be1a:	f003 0308 	and.w	r3, r3, #8
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d103      	bne.n	800be2a <HAL_UART_IRQHandler+0x17a>
 800be22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800be26:	2b00      	cmp	r3, #0
 800be28:	d04f      	beq.n	800beca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f000 fbac 	bl	800c588 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	695b      	ldr	r3, [r3, #20]
 800be36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be3a:	2b40      	cmp	r3, #64	@ 0x40
 800be3c:	d141      	bne.n	800bec2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	3314      	adds	r3, #20
 800be44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800be4c:	e853 3f00 	ldrex	r3, [r3]
 800be50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800be54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800be58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800be5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	3314      	adds	r3, #20
 800be66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800be6a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800be6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800be76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800be7a:	e841 2300 	strex	r3, r2, [r1]
 800be7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800be82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800be86:	2b00      	cmp	r3, #0
 800be88:	d1d9      	bne.n	800be3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d013      	beq.n	800beba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be96:	4a7d      	ldr	r2, [pc, #500]	@ (800c08c <HAL_UART_IRQHandler+0x3dc>)
 800be98:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be9e:	4618      	mov	r0, r3
 800bea0:	f7f9 fb44 	bl	800552c <HAL_DMA_Abort_IT>
 800bea4:	4603      	mov	r3, r0
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d016      	beq.n	800bed8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800beae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800beb4:	4610      	mov	r0, r2
 800beb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800beb8:	e00e      	b.n	800bed8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f000 f990 	bl	800c1e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bec0:	e00a      	b.n	800bed8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 f98c 	bl	800c1e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bec8:	e006      	b.n	800bed8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f000 f988 	bl	800c1e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2200      	movs	r2, #0
 800bed4:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800bed6:	e170      	b.n	800c1ba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bed8:	bf00      	nop
    return;
 800beda:	e16e      	b.n	800c1ba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bee0:	2b01      	cmp	r3, #1
 800bee2:	f040 814a 	bne.w	800c17a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800beea:	f003 0310 	and.w	r3, r3, #16
 800beee:	2b00      	cmp	r3, #0
 800bef0:	f000 8143 	beq.w	800c17a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bef8:	f003 0310 	and.w	r3, r3, #16
 800befc:	2b00      	cmp	r3, #0
 800befe:	f000 813c 	beq.w	800c17a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bf02:	2300      	movs	r3, #0
 800bf04:	60bb      	str	r3, [r7, #8]
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	60bb      	str	r3, [r7, #8]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	685b      	ldr	r3, [r3, #4]
 800bf14:	60bb      	str	r3, [r7, #8]
 800bf16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	695b      	ldr	r3, [r3, #20]
 800bf1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf22:	2b40      	cmp	r3, #64	@ 0x40
 800bf24:	f040 80b4 	bne.w	800c090 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	685b      	ldr	r3, [r3, #4]
 800bf30:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bf34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	f000 8140 	beq.w	800c1be <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bf42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bf46:	429a      	cmp	r2, r3
 800bf48:	f080 8139 	bcs.w	800c1be <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bf52:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf58:	69db      	ldr	r3, [r3, #28]
 800bf5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf5e:	f000 8088 	beq.w	800c072 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	330c      	adds	r3, #12
 800bf68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bf70:	e853 3f00 	ldrex	r3, [r3]
 800bf74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800bf78:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bf7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bf80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	330c      	adds	r3, #12
 800bf8a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800bf8e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800bf92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf96:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800bf9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bf9e:	e841 2300 	strex	r3, r2, [r1]
 800bfa2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800bfa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d1d9      	bne.n	800bf62 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	3314      	adds	r3, #20
 800bfb4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bfb8:	e853 3f00 	ldrex	r3, [r3]
 800bfbc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bfbe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bfc0:	f023 0301 	bic.w	r3, r3, #1
 800bfc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	3314      	adds	r3, #20
 800bfce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bfd2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800bfd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfd8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bfda:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bfde:	e841 2300 	strex	r3, r2, [r1]
 800bfe2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bfe4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d1e1      	bne.n	800bfae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	3314      	adds	r3, #20
 800bff0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bff2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bff4:	e853 3f00 	ldrex	r3, [r3]
 800bff8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bffa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bffc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c000:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	3314      	adds	r3, #20
 800c00a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c00e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c010:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c012:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c014:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c016:	e841 2300 	strex	r3, r2, [r1]
 800c01a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c01c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d1e3      	bne.n	800bfea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2220      	movs	r2, #32
 800c026:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2200      	movs	r2, #0
 800c02e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	330c      	adds	r3, #12
 800c036:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c038:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c03a:	e853 3f00 	ldrex	r3, [r3]
 800c03e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c040:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c042:	f023 0310 	bic.w	r3, r3, #16
 800c046:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	330c      	adds	r3, #12
 800c050:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c054:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c056:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c058:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c05a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c05c:	e841 2300 	strex	r3, r2, [r1]
 800c060:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c062:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c064:	2b00      	cmp	r3, #0
 800c066:	d1e3      	bne.n	800c030 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c06c:	4618      	mov	r0, r3
 800c06e:	f7f9 f9ed 	bl	800544c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c07a:	b29b      	uxth	r3, r3
 800c07c:	1ad3      	subs	r3, r2, r3
 800c07e:	b29b      	uxth	r3, r3
 800c080:	4619      	mov	r1, r3
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f000 f8b6 	bl	800c1f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c088:	e099      	b.n	800c1be <HAL_UART_IRQHandler+0x50e>
 800c08a:	bf00      	nop
 800c08c:	0800c64f 	.word	0x0800c64f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c098:	b29b      	uxth	r3, r3
 800c09a:	1ad3      	subs	r3, r2, r3
 800c09c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c0a4:	b29b      	uxth	r3, r3
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	f000 808b 	beq.w	800c1c2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c0ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	f000 8086 	beq.w	800c1c2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	330c      	adds	r3, #12
 800c0bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0c0:	e853 3f00 	ldrex	r3, [r3]
 800c0c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c0c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c0cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	330c      	adds	r3, #12
 800c0d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800c0da:	647a      	str	r2, [r7, #68]	@ 0x44
 800c0dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c0e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c0e2:	e841 2300 	strex	r3, r2, [r1]
 800c0e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c0e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d1e3      	bne.n	800c0b6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	3314      	adds	r3, #20
 800c0f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0f8:	e853 3f00 	ldrex	r3, [r3]
 800c0fc:	623b      	str	r3, [r7, #32]
   return(result);
 800c0fe:	6a3b      	ldr	r3, [r7, #32]
 800c100:	f023 0301 	bic.w	r3, r3, #1
 800c104:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	3314      	adds	r3, #20
 800c10e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c112:	633a      	str	r2, [r7, #48]	@ 0x30
 800c114:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c116:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c118:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c11a:	e841 2300 	strex	r3, r2, [r1]
 800c11e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c122:	2b00      	cmp	r3, #0
 800c124:	d1e3      	bne.n	800c0ee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2220      	movs	r2, #32
 800c12a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2200      	movs	r2, #0
 800c132:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	330c      	adds	r3, #12
 800c13a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c13c:	693b      	ldr	r3, [r7, #16]
 800c13e:	e853 3f00 	ldrex	r3, [r3]
 800c142:	60fb      	str	r3, [r7, #12]
   return(result);
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	f023 0310 	bic.w	r3, r3, #16
 800c14a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	330c      	adds	r3, #12
 800c154:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800c158:	61fa      	str	r2, [r7, #28]
 800c15a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c15c:	69b9      	ldr	r1, [r7, #24]
 800c15e:	69fa      	ldr	r2, [r7, #28]
 800c160:	e841 2300 	strex	r3, r2, [r1]
 800c164:	617b      	str	r3, [r7, #20]
   return(result);
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d1e3      	bne.n	800c134 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c16c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c170:	4619      	mov	r1, r3
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 f83e 	bl	800c1f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c178:	e023      	b.n	800c1c2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c17a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c17e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c182:	2b00      	cmp	r3, #0
 800c184:	d009      	beq.n	800c19a <HAL_UART_IRQHandler+0x4ea>
 800c186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c18a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d003      	beq.n	800c19a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f000 fa6f 	bl	800c676 <UART_Transmit_IT>
    return;
 800c198:	e014      	b.n	800c1c4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c19a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c19e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d00e      	beq.n	800c1c4 <HAL_UART_IRQHandler+0x514>
 800c1a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c1aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d008      	beq.n	800c1c4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f000 faaf 	bl	800c716 <UART_EndTransmit_IT>
    return;
 800c1b8:	e004      	b.n	800c1c4 <HAL_UART_IRQHandler+0x514>
    return;
 800c1ba:	bf00      	nop
 800c1bc:	e002      	b.n	800c1c4 <HAL_UART_IRQHandler+0x514>
      return;
 800c1be:	bf00      	nop
 800c1c0:	e000      	b.n	800c1c4 <HAL_UART_IRQHandler+0x514>
      return;
 800c1c2:	bf00      	nop
  }
}
 800c1c4:	37e8      	adds	r7, #232	@ 0xe8
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}
 800c1ca:	bf00      	nop

0800c1cc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b083      	sub	sp, #12
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c1d4:	bf00      	nop
 800c1d6:	370c      	adds	r7, #12
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1de:	4770      	bx	lr

0800c1e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	b083      	sub	sp, #12
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c1e8:	bf00      	nop
 800c1ea:	370c      	adds	r7, #12
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f2:	4770      	bx	lr

0800c1f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b083      	sub	sp, #12
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	460b      	mov	r3, r1
 800c1fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c200:	bf00      	nop
 800c202:	370c      	adds	r7, #12
 800c204:	46bd      	mov	sp, r7
 800c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20a:	4770      	bx	lr

0800c20c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b09c      	sub	sp, #112	@ 0x70
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c218:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c224:	2b00      	cmp	r3, #0
 800c226:	d172      	bne.n	800c30e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800c228:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c22a:	2200      	movs	r2, #0
 800c22c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c22e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	330c      	adds	r3, #12
 800c234:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c236:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c238:	e853 3f00 	ldrex	r3, [r3]
 800c23c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c23e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c240:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c244:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c246:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	330c      	adds	r3, #12
 800c24c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c24e:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c250:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c252:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c254:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c256:	e841 2300 	strex	r3, r2, [r1]
 800c25a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c25c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d1e5      	bne.n	800c22e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c262:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	3314      	adds	r3, #20
 800c268:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c26a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c26c:	e853 3f00 	ldrex	r3, [r3]
 800c270:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c274:	f023 0301 	bic.w	r3, r3, #1
 800c278:	667b      	str	r3, [r7, #100]	@ 0x64
 800c27a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	3314      	adds	r3, #20
 800c280:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c282:	647a      	str	r2, [r7, #68]	@ 0x44
 800c284:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c286:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c288:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c28a:	e841 2300 	strex	r3, r2, [r1]
 800c28e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c290:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c292:	2b00      	cmp	r3, #0
 800c294:	d1e5      	bne.n	800c262 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c296:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	3314      	adds	r3, #20
 800c29c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2a0:	e853 3f00 	ldrex	r3, [r3]
 800c2a4:	623b      	str	r3, [r7, #32]
   return(result);
 800c2a6:	6a3b      	ldr	r3, [r7, #32]
 800c2a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c2ac:	663b      	str	r3, [r7, #96]	@ 0x60
 800c2ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	3314      	adds	r3, #20
 800c2b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c2b6:	633a      	str	r2, [r7, #48]	@ 0x30
 800c2b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c2bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c2be:	e841 2300 	strex	r3, r2, [r1]
 800c2c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c2c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d1e5      	bne.n	800c296 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c2ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c2cc:	2220      	movs	r2, #32
 800c2ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c2d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2d6:	2b01      	cmp	r3, #1
 800c2d8:	d119      	bne.n	800c30e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	330c      	adds	r3, #12
 800c2e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	e853 3f00 	ldrex	r3, [r3]
 800c2e8:	60fb      	str	r3, [r7, #12]
   return(result);
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	f023 0310 	bic.w	r3, r3, #16
 800c2f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c2f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	330c      	adds	r3, #12
 800c2f8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c2fa:	61fa      	str	r2, [r7, #28]
 800c2fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2fe:	69b9      	ldr	r1, [r7, #24]
 800c300:	69fa      	ldr	r2, [r7, #28]
 800c302:	e841 2300 	strex	r3, r2, [r1]
 800c306:	617b      	str	r3, [r7, #20]
   return(result);
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d1e5      	bne.n	800c2da <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c30e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c312:	2b01      	cmp	r3, #1
 800c314:	d106      	bne.n	800c324 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c316:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c318:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c31a:	4619      	mov	r1, r3
 800c31c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c31e:	f7ff ff69 	bl	800c1f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c322:	e002      	b.n	800c32a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800c324:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c326:	f7f6 f985 	bl	8002634 <HAL_UART_RxCpltCallback>
}
 800c32a:	bf00      	nop
 800c32c:	3770      	adds	r7, #112	@ 0x70
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}

0800c332 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c332:	b580      	push	{r7, lr}
 800c334:	b084      	sub	sp, #16
 800c336:	af00      	add	r7, sp, #0
 800c338:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c33e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c344:	2b01      	cmp	r3, #1
 800c346:	d108      	bne.n	800c35a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c34c:	085b      	lsrs	r3, r3, #1
 800c34e:	b29b      	uxth	r3, r3
 800c350:	4619      	mov	r1, r3
 800c352:	68f8      	ldr	r0, [r7, #12]
 800c354:	f7ff ff4e 	bl	800c1f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c358:	e002      	b.n	800c360 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800c35a:	68f8      	ldr	r0, [r7, #12]
 800c35c:	f7ff ff36 	bl	800c1cc <HAL_UART_RxHalfCpltCallback>
}
 800c360:	bf00      	nop
 800c362:	3710      	adds	r7, #16
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}

0800c368 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b084      	sub	sp, #16
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c370:	2300      	movs	r3, #0
 800c372:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c378:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	695b      	ldr	r3, [r3, #20]
 800c380:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c384:	2b80      	cmp	r3, #128	@ 0x80
 800c386:	bf0c      	ite	eq
 800c388:	2301      	moveq	r3, #1
 800c38a:	2300      	movne	r3, #0
 800c38c:	b2db      	uxtb	r3, r3
 800c38e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c396:	b2db      	uxtb	r3, r3
 800c398:	2b21      	cmp	r3, #33	@ 0x21
 800c39a:	d108      	bne.n	800c3ae <UART_DMAError+0x46>
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d005      	beq.n	800c3ae <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800c3a8:	68b8      	ldr	r0, [r7, #8]
 800c3aa:	f000 f8c5 	bl	800c538 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	695b      	ldr	r3, [r3, #20]
 800c3b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3b8:	2b40      	cmp	r3, #64	@ 0x40
 800c3ba:	bf0c      	ite	eq
 800c3bc:	2301      	moveq	r3, #1
 800c3be:	2300      	movne	r3, #0
 800c3c0:	b2db      	uxtb	r3, r3
 800c3c2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c3ca:	b2db      	uxtb	r3, r3
 800c3cc:	2b22      	cmp	r3, #34	@ 0x22
 800c3ce:	d108      	bne.n	800c3e2 <UART_DMAError+0x7a>
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d005      	beq.n	800c3e2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	2200      	movs	r2, #0
 800c3da:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800c3dc:	68b8      	ldr	r0, [r7, #8]
 800c3de:	f000 f8d3 	bl	800c588 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3e6:	f043 0210 	orr.w	r2, r3, #16
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c3ee:	68b8      	ldr	r0, [r7, #8]
 800c3f0:	f7ff fef6 	bl	800c1e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c3f4:	bf00      	nop
 800c3f6:	3710      	adds	r7, #16
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}

0800c3fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b098      	sub	sp, #96	@ 0x60
 800c400:	af00      	add	r7, sp, #0
 800c402:	60f8      	str	r0, [r7, #12]
 800c404:	60b9      	str	r1, [r7, #8]
 800c406:	4613      	mov	r3, r2
 800c408:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800c40a:	68ba      	ldr	r2, [r7, #8]
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	88fa      	ldrh	r2, [r7, #6]
 800c414:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	2200      	movs	r2, #0
 800c41a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	2222      	movs	r2, #34	@ 0x22
 800c420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c428:	4a40      	ldr	r2, [pc, #256]	@ (800c52c <UART_Start_Receive_DMA+0x130>)
 800c42a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c430:	4a3f      	ldr	r2, [pc, #252]	@ (800c530 <UART_Start_Receive_DMA+0x134>)
 800c432:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c438:	4a3e      	ldr	r2, [pc, #248]	@ (800c534 <UART_Start_Receive_DMA+0x138>)
 800c43a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c440:	2200      	movs	r2, #0
 800c442:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800c444:	f107 0308 	add.w	r3, r7, #8
 800c448:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	3304      	adds	r3, #4
 800c454:	4619      	mov	r1, r3
 800c456:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c458:	681a      	ldr	r2, [r3, #0]
 800c45a:	88fb      	ldrh	r3, [r7, #6]
 800c45c:	f7f8 ff9e 	bl	800539c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800c460:	2300      	movs	r3, #0
 800c462:	613b      	str	r3, [r7, #16]
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	613b      	str	r3, [r7, #16]
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	685b      	ldr	r3, [r3, #4]
 800c472:	613b      	str	r3, [r7, #16]
 800c474:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	2200      	movs	r2, #0
 800c47a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	691b      	ldr	r3, [r3, #16]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d019      	beq.n	800c4ba <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	330c      	adds	r3, #12
 800c48c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c48e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c490:	e853 3f00 	ldrex	r3, [r3]
 800c494:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c49c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	330c      	adds	r3, #12
 800c4a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c4a6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800c4a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4aa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800c4ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c4ae:	e841 2300 	strex	r3, r2, [r1]
 800c4b2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c4b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d1e5      	bne.n	800c486 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	3314      	adds	r3, #20
 800c4c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4c4:	e853 3f00 	ldrex	r3, [r3]
 800c4c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c4ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4cc:	f043 0301 	orr.w	r3, r3, #1
 800c4d0:	657b      	str	r3, [r7, #84]	@ 0x54
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	3314      	adds	r3, #20
 800c4d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c4da:	63ba      	str	r2, [r7, #56]	@ 0x38
 800c4dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4de:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c4e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c4e2:	e841 2300 	strex	r3, r2, [r1]
 800c4e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c4e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d1e5      	bne.n	800c4ba <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	3314      	adds	r3, #20
 800c4f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4f6:	69bb      	ldr	r3, [r7, #24]
 800c4f8:	e853 3f00 	ldrex	r3, [r3]
 800c4fc:	617b      	str	r3, [r7, #20]
   return(result);
 800c4fe:	697b      	ldr	r3, [r7, #20]
 800c500:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c504:	653b      	str	r3, [r7, #80]	@ 0x50
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	3314      	adds	r3, #20
 800c50c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c50e:	627a      	str	r2, [r7, #36]	@ 0x24
 800c510:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c512:	6a39      	ldr	r1, [r7, #32]
 800c514:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c516:	e841 2300 	strex	r3, r2, [r1]
 800c51a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c51c:	69fb      	ldr	r3, [r7, #28]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d1e5      	bne.n	800c4ee <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800c522:	2300      	movs	r3, #0
}
 800c524:	4618      	mov	r0, r3
 800c526:	3760      	adds	r7, #96	@ 0x60
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}
 800c52c:	0800c20d 	.word	0x0800c20d
 800c530:	0800c333 	.word	0x0800c333
 800c534:	0800c369 	.word	0x0800c369

0800c538 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c538:	b480      	push	{r7}
 800c53a:	b089      	sub	sp, #36	@ 0x24
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	330c      	adds	r3, #12
 800c546:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	e853 3f00 	ldrex	r3, [r3]
 800c54e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c556:	61fb      	str	r3, [r7, #28]
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	330c      	adds	r3, #12
 800c55e:	69fa      	ldr	r2, [r7, #28]
 800c560:	61ba      	str	r2, [r7, #24]
 800c562:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c564:	6979      	ldr	r1, [r7, #20]
 800c566:	69ba      	ldr	r2, [r7, #24]
 800c568:	e841 2300 	strex	r3, r2, [r1]
 800c56c:	613b      	str	r3, [r7, #16]
   return(result);
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d1e5      	bne.n	800c540 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2220      	movs	r2, #32
 800c578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 800c57c:	bf00      	nop
 800c57e:	3724      	adds	r7, #36	@ 0x24
 800c580:	46bd      	mov	sp, r7
 800c582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c586:	4770      	bx	lr

0800c588 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c588:	b480      	push	{r7}
 800c58a:	b095      	sub	sp, #84	@ 0x54
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	330c      	adds	r3, #12
 800c596:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c59a:	e853 3f00 	ldrex	r3, [r3]
 800c59e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c5a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c5a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	330c      	adds	r3, #12
 800c5ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c5b0:	643a      	str	r2, [r7, #64]	@ 0x40
 800c5b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c5b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c5b8:	e841 2300 	strex	r3, r2, [r1]
 800c5bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c5be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d1e5      	bne.n	800c590 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	3314      	adds	r3, #20
 800c5ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5cc:	6a3b      	ldr	r3, [r7, #32]
 800c5ce:	e853 3f00 	ldrex	r3, [r3]
 800c5d2:	61fb      	str	r3, [r7, #28]
   return(result);
 800c5d4:	69fb      	ldr	r3, [r7, #28]
 800c5d6:	f023 0301 	bic.w	r3, r3, #1
 800c5da:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	3314      	adds	r3, #20
 800c5e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c5e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c5e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c5ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c5ec:	e841 2300 	strex	r3, r2, [r1]
 800c5f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c5f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d1e5      	bne.n	800c5c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	d119      	bne.n	800c634 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	330c      	adds	r3, #12
 800c606:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	e853 3f00 	ldrex	r3, [r3]
 800c60e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	f023 0310 	bic.w	r3, r3, #16
 800c616:	647b      	str	r3, [r7, #68]	@ 0x44
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	330c      	adds	r3, #12
 800c61e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c620:	61ba      	str	r2, [r7, #24]
 800c622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c624:	6979      	ldr	r1, [r7, #20]
 800c626:	69ba      	ldr	r2, [r7, #24]
 800c628:	e841 2300 	strex	r3, r2, [r1]
 800c62c:	613b      	str	r3, [r7, #16]
   return(result);
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d1e5      	bne.n	800c600 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2220      	movs	r2, #32
 800c638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2200      	movs	r2, #0
 800c640:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800c642:	bf00      	nop
 800c644:	3754      	adds	r7, #84	@ 0x54
 800c646:	46bd      	mov	sp, r7
 800c648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64c:	4770      	bx	lr

0800c64e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c64e:	b580      	push	{r7, lr}
 800c650:	b084      	sub	sp, #16
 800c652:	af00      	add	r7, sp, #0
 800c654:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c65a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2200      	movs	r2, #0
 800c660:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	2200      	movs	r2, #0
 800c666:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c668:	68f8      	ldr	r0, [r7, #12]
 800c66a:	f7ff fdb9 	bl	800c1e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c66e:	bf00      	nop
 800c670:	3710      	adds	r7, #16
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}

0800c676 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c676:	b480      	push	{r7}
 800c678:	b085      	sub	sp, #20
 800c67a:	af00      	add	r7, sp, #0
 800c67c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c684:	b2db      	uxtb	r3, r3
 800c686:	2b21      	cmp	r3, #33	@ 0x21
 800c688:	d13e      	bne.n	800c708 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	689b      	ldr	r3, [r3, #8]
 800c68e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c692:	d114      	bne.n	800c6be <UART_Transmit_IT+0x48>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	691b      	ldr	r3, [r3, #16]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d110      	bne.n	800c6be <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6a1b      	ldr	r3, [r3, #32]
 800c6a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	881b      	ldrh	r3, [r3, #0]
 800c6a6:	461a      	mov	r2, r3
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c6b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6a1b      	ldr	r3, [r3, #32]
 800c6b6:	1c9a      	adds	r2, r3, #2
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	621a      	str	r2, [r3, #32]
 800c6bc:	e008      	b.n	800c6d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6a1b      	ldr	r3, [r3, #32]
 800c6c2:	1c59      	adds	r1, r3, #1
 800c6c4:	687a      	ldr	r2, [r7, #4]
 800c6c6:	6211      	str	r1, [r2, #32]
 800c6c8:	781a      	ldrb	r2, [r3, #0]
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	3b01      	subs	r3, #1
 800c6d8:	b29b      	uxth	r3, r3
 800c6da:	687a      	ldr	r2, [r7, #4]
 800c6dc:	4619      	mov	r1, r3
 800c6de:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d10f      	bne.n	800c704 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	68da      	ldr	r2, [r3, #12]
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c6f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	68da      	ldr	r2, [r3, #12]
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c702:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c704:	2300      	movs	r3, #0
 800c706:	e000      	b.n	800c70a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c708:	2302      	movs	r3, #2
  }
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3714      	adds	r7, #20
 800c70e:	46bd      	mov	sp, r7
 800c710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c714:	4770      	bx	lr

0800c716 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c716:	b580      	push	{r7, lr}
 800c718:	b082      	sub	sp, #8
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	68da      	ldr	r2, [r3, #12]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c72c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2220      	movs	r2, #32
 800c732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f7f5 ffa6 	bl	8002688 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c73c:	2300      	movs	r3, #0
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3708      	adds	r7, #8
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}

0800c746 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c746:	b580      	push	{r7, lr}
 800c748:	b08c      	sub	sp, #48	@ 0x30
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c754:	b2db      	uxtb	r3, r3
 800c756:	2b22      	cmp	r3, #34	@ 0x22
 800c758:	f040 80ab 	bne.w	800c8b2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	689b      	ldr	r3, [r3, #8]
 800c760:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c764:	d117      	bne.n	800c796 <UART_Receive_IT+0x50>
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	691b      	ldr	r3, [r3, #16]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d113      	bne.n	800c796 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c76e:	2300      	movs	r3, #0
 800c770:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c776:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	685b      	ldr	r3, [r3, #4]
 800c77e:	b29b      	uxth	r3, r3
 800c780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c784:	b29a      	uxth	r2, r3
 800c786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c788:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c78e:	1c9a      	adds	r2, r3, #2
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	629a      	str	r2, [r3, #40]	@ 0x28
 800c794:	e026      	b.n	800c7e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c79a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800c79c:	2300      	movs	r3, #0
 800c79e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	689b      	ldr	r3, [r3, #8]
 800c7a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c7a8:	d007      	beq.n	800c7ba <UART_Receive_IT+0x74>
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	689b      	ldr	r3, [r3, #8]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d10a      	bne.n	800c7c8 <UART_Receive_IT+0x82>
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	691b      	ldr	r3, [r3, #16]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d106      	bne.n	800c7c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	685b      	ldr	r3, [r3, #4]
 800c7c0:	b2da      	uxtb	r2, r3
 800c7c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7c4:	701a      	strb	r2, [r3, #0]
 800c7c6:	e008      	b.n	800c7da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	685b      	ldr	r3, [r3, #4]
 800c7ce:	b2db      	uxtb	r3, r3
 800c7d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c7d4:	b2da      	uxtb	r2, r3
 800c7d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7de:	1c5a      	adds	r2, r3, #1
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c7e8:	b29b      	uxth	r3, r3
 800c7ea:	3b01      	subs	r3, #1
 800c7ec:	b29b      	uxth	r3, r3
 800c7ee:	687a      	ldr	r2, [r7, #4]
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d15a      	bne.n	800c8ae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	68da      	ldr	r2, [r3, #12]
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f022 0220 	bic.w	r2, r2, #32
 800c806:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	68da      	ldr	r2, [r3, #12]
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c816:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	695a      	ldr	r2, [r3, #20]
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	f022 0201 	bic.w	r2, r2, #1
 800c826:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2220      	movs	r2, #32
 800c82c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c834:	2b01      	cmp	r3, #1
 800c836:	d135      	bne.n	800c8a4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2200      	movs	r2, #0
 800c83c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	330c      	adds	r3, #12
 800c844:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	e853 3f00 	ldrex	r3, [r3]
 800c84c:	613b      	str	r3, [r7, #16]
   return(result);
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	f023 0310 	bic.w	r3, r3, #16
 800c854:	627b      	str	r3, [r7, #36]	@ 0x24
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	330c      	adds	r3, #12
 800c85c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c85e:	623a      	str	r2, [r7, #32]
 800c860:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c862:	69f9      	ldr	r1, [r7, #28]
 800c864:	6a3a      	ldr	r2, [r7, #32]
 800c866:	e841 2300 	strex	r3, r2, [r1]
 800c86a:	61bb      	str	r3, [r7, #24]
   return(result);
 800c86c:	69bb      	ldr	r3, [r7, #24]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d1e5      	bne.n	800c83e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f003 0310 	and.w	r3, r3, #16
 800c87c:	2b10      	cmp	r3, #16
 800c87e:	d10a      	bne.n	800c896 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c880:	2300      	movs	r3, #0
 800c882:	60fb      	str	r3, [r7, #12]
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	60fb      	str	r3, [r7, #12]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	685b      	ldr	r3, [r3, #4]
 800c892:	60fb      	str	r3, [r7, #12]
 800c894:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c89a:	4619      	mov	r1, r3
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f7ff fca9 	bl	800c1f4 <HAL_UARTEx_RxEventCallback>
 800c8a2:	e002      	b.n	800c8aa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f7f5 fec5 	bl	8002634 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	e002      	b.n	800c8b4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	e000      	b.n	800c8b4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c8b2:	2302      	movs	r3, #2
  }
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3730      	adds	r7, #48	@ 0x30
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}

0800c8bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c8bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c8c0:	b0c0      	sub	sp, #256	@ 0x100
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c8c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	691b      	ldr	r3, [r3, #16]
 800c8d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c8d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c8d8:	68d9      	ldr	r1, [r3, #12]
 800c8da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c8de:	681a      	ldr	r2, [r3, #0]
 800c8e0:	ea40 0301 	orr.w	r3, r0, r1
 800c8e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c8e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c8ea:	689a      	ldr	r2, [r3, #8]
 800c8ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c8f0:	691b      	ldr	r3, [r3, #16]
 800c8f2:	431a      	orrs	r2, r3
 800c8f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c8f8:	695b      	ldr	r3, [r3, #20]
 800c8fa:	431a      	orrs	r2, r3
 800c8fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c900:	69db      	ldr	r3, [r3, #28]
 800c902:	4313      	orrs	r3, r2
 800c904:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	68db      	ldr	r3, [r3, #12]
 800c910:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800c914:	f021 010c 	bic.w	r1, r1, #12
 800c918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c91c:	681a      	ldr	r2, [r3, #0]
 800c91e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c922:	430b      	orrs	r3, r1
 800c924:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	695b      	ldr	r3, [r3, #20]
 800c92e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800c932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c936:	6999      	ldr	r1, [r3, #24]
 800c938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c93c:	681a      	ldr	r2, [r3, #0]
 800c93e:	ea40 0301 	orr.w	r3, r0, r1
 800c942:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c948:	681a      	ldr	r2, [r3, #0]
 800c94a:	4b8f      	ldr	r3, [pc, #572]	@ (800cb88 <UART_SetConfig+0x2cc>)
 800c94c:	429a      	cmp	r2, r3
 800c94e:	d005      	beq.n	800c95c <UART_SetConfig+0xa0>
 800c950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c954:	681a      	ldr	r2, [r3, #0]
 800c956:	4b8d      	ldr	r3, [pc, #564]	@ (800cb8c <UART_SetConfig+0x2d0>)
 800c958:	429a      	cmp	r2, r3
 800c95a:	d104      	bne.n	800c966 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c95c:	f7fc fefa 	bl	8009754 <HAL_RCC_GetPCLK2Freq>
 800c960:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800c964:	e003      	b.n	800c96e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c966:	f7fc fee1 	bl	800972c <HAL_RCC_GetPCLK1Freq>
 800c96a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c96e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c972:	69db      	ldr	r3, [r3, #28]
 800c974:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c978:	f040 810c 	bne.w	800cb94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c97c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c980:	2200      	movs	r2, #0
 800c982:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c986:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800c98a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800c98e:	4622      	mov	r2, r4
 800c990:	462b      	mov	r3, r5
 800c992:	1891      	adds	r1, r2, r2
 800c994:	65b9      	str	r1, [r7, #88]	@ 0x58
 800c996:	415b      	adcs	r3, r3
 800c998:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c99a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c99e:	4621      	mov	r1, r4
 800c9a0:	eb12 0801 	adds.w	r8, r2, r1
 800c9a4:	4629      	mov	r1, r5
 800c9a6:	eb43 0901 	adc.w	r9, r3, r1
 800c9aa:	f04f 0200 	mov.w	r2, #0
 800c9ae:	f04f 0300 	mov.w	r3, #0
 800c9b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c9b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c9ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c9be:	4690      	mov	r8, r2
 800c9c0:	4699      	mov	r9, r3
 800c9c2:	4623      	mov	r3, r4
 800c9c4:	eb18 0303 	adds.w	r3, r8, r3
 800c9c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c9cc:	462b      	mov	r3, r5
 800c9ce:	eb49 0303 	adc.w	r3, r9, r3
 800c9d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c9d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c9da:	685b      	ldr	r3, [r3, #4]
 800c9dc:	2200      	movs	r2, #0
 800c9de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c9e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800c9e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c9ea:	460b      	mov	r3, r1
 800c9ec:	18db      	adds	r3, r3, r3
 800c9ee:	653b      	str	r3, [r7, #80]	@ 0x50
 800c9f0:	4613      	mov	r3, r2
 800c9f2:	eb42 0303 	adc.w	r3, r2, r3
 800c9f6:	657b      	str	r3, [r7, #84]	@ 0x54
 800c9f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c9fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800ca00:	f7f4 f962 	bl	8000cc8 <__aeabi_uldivmod>
 800ca04:	4602      	mov	r2, r0
 800ca06:	460b      	mov	r3, r1
 800ca08:	4b61      	ldr	r3, [pc, #388]	@ (800cb90 <UART_SetConfig+0x2d4>)
 800ca0a:	fba3 2302 	umull	r2, r3, r3, r2
 800ca0e:	095b      	lsrs	r3, r3, #5
 800ca10:	011c      	lsls	r4, r3, #4
 800ca12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ca16:	2200      	movs	r2, #0
 800ca18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ca1c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800ca20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800ca24:	4642      	mov	r2, r8
 800ca26:	464b      	mov	r3, r9
 800ca28:	1891      	adds	r1, r2, r2
 800ca2a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800ca2c:	415b      	adcs	r3, r3
 800ca2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ca30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800ca34:	4641      	mov	r1, r8
 800ca36:	eb12 0a01 	adds.w	sl, r2, r1
 800ca3a:	4649      	mov	r1, r9
 800ca3c:	eb43 0b01 	adc.w	fp, r3, r1
 800ca40:	f04f 0200 	mov.w	r2, #0
 800ca44:	f04f 0300 	mov.w	r3, #0
 800ca48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ca4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ca50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ca54:	4692      	mov	sl, r2
 800ca56:	469b      	mov	fp, r3
 800ca58:	4643      	mov	r3, r8
 800ca5a:	eb1a 0303 	adds.w	r3, sl, r3
 800ca5e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ca62:	464b      	mov	r3, r9
 800ca64:	eb4b 0303 	adc.w	r3, fp, r3
 800ca68:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ca6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ca70:	685b      	ldr	r3, [r3, #4]
 800ca72:	2200      	movs	r2, #0
 800ca74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ca78:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800ca7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ca80:	460b      	mov	r3, r1
 800ca82:	18db      	adds	r3, r3, r3
 800ca84:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca86:	4613      	mov	r3, r2
 800ca88:	eb42 0303 	adc.w	r3, r2, r3
 800ca8c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ca8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800ca92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800ca96:	f7f4 f917 	bl	8000cc8 <__aeabi_uldivmod>
 800ca9a:	4602      	mov	r2, r0
 800ca9c:	460b      	mov	r3, r1
 800ca9e:	4611      	mov	r1, r2
 800caa0:	4b3b      	ldr	r3, [pc, #236]	@ (800cb90 <UART_SetConfig+0x2d4>)
 800caa2:	fba3 2301 	umull	r2, r3, r3, r1
 800caa6:	095b      	lsrs	r3, r3, #5
 800caa8:	2264      	movs	r2, #100	@ 0x64
 800caaa:	fb02 f303 	mul.w	r3, r2, r3
 800caae:	1acb      	subs	r3, r1, r3
 800cab0:	00db      	lsls	r3, r3, #3
 800cab2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800cab6:	4b36      	ldr	r3, [pc, #216]	@ (800cb90 <UART_SetConfig+0x2d4>)
 800cab8:	fba3 2302 	umull	r2, r3, r3, r2
 800cabc:	095b      	lsrs	r3, r3, #5
 800cabe:	005b      	lsls	r3, r3, #1
 800cac0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800cac4:	441c      	add	r4, r3
 800cac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800caca:	2200      	movs	r2, #0
 800cacc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cad0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800cad4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800cad8:	4642      	mov	r2, r8
 800cada:	464b      	mov	r3, r9
 800cadc:	1891      	adds	r1, r2, r2
 800cade:	63b9      	str	r1, [r7, #56]	@ 0x38
 800cae0:	415b      	adcs	r3, r3
 800cae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cae4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800cae8:	4641      	mov	r1, r8
 800caea:	1851      	adds	r1, r2, r1
 800caec:	6339      	str	r1, [r7, #48]	@ 0x30
 800caee:	4649      	mov	r1, r9
 800caf0:	414b      	adcs	r3, r1
 800caf2:	637b      	str	r3, [r7, #52]	@ 0x34
 800caf4:	f04f 0200 	mov.w	r2, #0
 800caf8:	f04f 0300 	mov.w	r3, #0
 800cafc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800cb00:	4659      	mov	r1, fp
 800cb02:	00cb      	lsls	r3, r1, #3
 800cb04:	4651      	mov	r1, sl
 800cb06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cb0a:	4651      	mov	r1, sl
 800cb0c:	00ca      	lsls	r2, r1, #3
 800cb0e:	4610      	mov	r0, r2
 800cb10:	4619      	mov	r1, r3
 800cb12:	4603      	mov	r3, r0
 800cb14:	4642      	mov	r2, r8
 800cb16:	189b      	adds	r3, r3, r2
 800cb18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cb1c:	464b      	mov	r3, r9
 800cb1e:	460a      	mov	r2, r1
 800cb20:	eb42 0303 	adc.w	r3, r2, r3
 800cb24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cb28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cb2c:	685b      	ldr	r3, [r3, #4]
 800cb2e:	2200      	movs	r2, #0
 800cb30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cb34:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800cb38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800cb3c:	460b      	mov	r3, r1
 800cb3e:	18db      	adds	r3, r3, r3
 800cb40:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cb42:	4613      	mov	r3, r2
 800cb44:	eb42 0303 	adc.w	r3, r2, r3
 800cb48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cb4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800cb4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800cb52:	f7f4 f8b9 	bl	8000cc8 <__aeabi_uldivmod>
 800cb56:	4602      	mov	r2, r0
 800cb58:	460b      	mov	r3, r1
 800cb5a:	4b0d      	ldr	r3, [pc, #52]	@ (800cb90 <UART_SetConfig+0x2d4>)
 800cb5c:	fba3 1302 	umull	r1, r3, r3, r2
 800cb60:	095b      	lsrs	r3, r3, #5
 800cb62:	2164      	movs	r1, #100	@ 0x64
 800cb64:	fb01 f303 	mul.w	r3, r1, r3
 800cb68:	1ad3      	subs	r3, r2, r3
 800cb6a:	00db      	lsls	r3, r3, #3
 800cb6c:	3332      	adds	r3, #50	@ 0x32
 800cb6e:	4a08      	ldr	r2, [pc, #32]	@ (800cb90 <UART_SetConfig+0x2d4>)
 800cb70:	fba2 2303 	umull	r2, r3, r2, r3
 800cb74:	095b      	lsrs	r3, r3, #5
 800cb76:	f003 0207 	and.w	r2, r3, #7
 800cb7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	4422      	add	r2, r4
 800cb82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800cb84:	e106      	b.n	800cd94 <UART_SetConfig+0x4d8>
 800cb86:	bf00      	nop
 800cb88:	40011000 	.word	0x40011000
 800cb8c:	40011400 	.word	0x40011400
 800cb90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cb94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cb98:	2200      	movs	r2, #0
 800cb9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cb9e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800cba2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800cba6:	4642      	mov	r2, r8
 800cba8:	464b      	mov	r3, r9
 800cbaa:	1891      	adds	r1, r2, r2
 800cbac:	6239      	str	r1, [r7, #32]
 800cbae:	415b      	adcs	r3, r3
 800cbb0:	627b      	str	r3, [r7, #36]	@ 0x24
 800cbb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cbb6:	4641      	mov	r1, r8
 800cbb8:	1854      	adds	r4, r2, r1
 800cbba:	4649      	mov	r1, r9
 800cbbc:	eb43 0501 	adc.w	r5, r3, r1
 800cbc0:	f04f 0200 	mov.w	r2, #0
 800cbc4:	f04f 0300 	mov.w	r3, #0
 800cbc8:	00eb      	lsls	r3, r5, #3
 800cbca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cbce:	00e2      	lsls	r2, r4, #3
 800cbd0:	4614      	mov	r4, r2
 800cbd2:	461d      	mov	r5, r3
 800cbd4:	4643      	mov	r3, r8
 800cbd6:	18e3      	adds	r3, r4, r3
 800cbd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cbdc:	464b      	mov	r3, r9
 800cbde:	eb45 0303 	adc.w	r3, r5, r3
 800cbe2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cbe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cbea:	685b      	ldr	r3, [r3, #4]
 800cbec:	2200      	movs	r2, #0
 800cbee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cbf2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800cbf6:	f04f 0200 	mov.w	r2, #0
 800cbfa:	f04f 0300 	mov.w	r3, #0
 800cbfe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800cc02:	4629      	mov	r1, r5
 800cc04:	008b      	lsls	r3, r1, #2
 800cc06:	4621      	mov	r1, r4
 800cc08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cc0c:	4621      	mov	r1, r4
 800cc0e:	008a      	lsls	r2, r1, #2
 800cc10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800cc14:	f7f4 f858 	bl	8000cc8 <__aeabi_uldivmod>
 800cc18:	4602      	mov	r2, r0
 800cc1a:	460b      	mov	r3, r1
 800cc1c:	4b60      	ldr	r3, [pc, #384]	@ (800cda0 <UART_SetConfig+0x4e4>)
 800cc1e:	fba3 2302 	umull	r2, r3, r3, r2
 800cc22:	095b      	lsrs	r3, r3, #5
 800cc24:	011c      	lsls	r4, r3, #4
 800cc26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800cc30:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800cc34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800cc38:	4642      	mov	r2, r8
 800cc3a:	464b      	mov	r3, r9
 800cc3c:	1891      	adds	r1, r2, r2
 800cc3e:	61b9      	str	r1, [r7, #24]
 800cc40:	415b      	adcs	r3, r3
 800cc42:	61fb      	str	r3, [r7, #28]
 800cc44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cc48:	4641      	mov	r1, r8
 800cc4a:	1851      	adds	r1, r2, r1
 800cc4c:	6139      	str	r1, [r7, #16]
 800cc4e:	4649      	mov	r1, r9
 800cc50:	414b      	adcs	r3, r1
 800cc52:	617b      	str	r3, [r7, #20]
 800cc54:	f04f 0200 	mov.w	r2, #0
 800cc58:	f04f 0300 	mov.w	r3, #0
 800cc5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cc60:	4659      	mov	r1, fp
 800cc62:	00cb      	lsls	r3, r1, #3
 800cc64:	4651      	mov	r1, sl
 800cc66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cc6a:	4651      	mov	r1, sl
 800cc6c:	00ca      	lsls	r2, r1, #3
 800cc6e:	4610      	mov	r0, r2
 800cc70:	4619      	mov	r1, r3
 800cc72:	4603      	mov	r3, r0
 800cc74:	4642      	mov	r2, r8
 800cc76:	189b      	adds	r3, r3, r2
 800cc78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cc7c:	464b      	mov	r3, r9
 800cc7e:	460a      	mov	r2, r1
 800cc80:	eb42 0303 	adc.w	r3, r2, r3
 800cc84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cc88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cc8c:	685b      	ldr	r3, [r3, #4]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cc92:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800cc94:	f04f 0200 	mov.w	r2, #0
 800cc98:	f04f 0300 	mov.w	r3, #0
 800cc9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800cca0:	4649      	mov	r1, r9
 800cca2:	008b      	lsls	r3, r1, #2
 800cca4:	4641      	mov	r1, r8
 800cca6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ccaa:	4641      	mov	r1, r8
 800ccac:	008a      	lsls	r2, r1, #2
 800ccae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800ccb2:	f7f4 f809 	bl	8000cc8 <__aeabi_uldivmod>
 800ccb6:	4602      	mov	r2, r0
 800ccb8:	460b      	mov	r3, r1
 800ccba:	4611      	mov	r1, r2
 800ccbc:	4b38      	ldr	r3, [pc, #224]	@ (800cda0 <UART_SetConfig+0x4e4>)
 800ccbe:	fba3 2301 	umull	r2, r3, r3, r1
 800ccc2:	095b      	lsrs	r3, r3, #5
 800ccc4:	2264      	movs	r2, #100	@ 0x64
 800ccc6:	fb02 f303 	mul.w	r3, r2, r3
 800ccca:	1acb      	subs	r3, r1, r3
 800cccc:	011b      	lsls	r3, r3, #4
 800ccce:	3332      	adds	r3, #50	@ 0x32
 800ccd0:	4a33      	ldr	r2, [pc, #204]	@ (800cda0 <UART_SetConfig+0x4e4>)
 800ccd2:	fba2 2303 	umull	r2, r3, r2, r3
 800ccd6:	095b      	lsrs	r3, r3, #5
 800ccd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ccdc:	441c      	add	r4, r3
 800ccde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cce2:	2200      	movs	r2, #0
 800cce4:	673b      	str	r3, [r7, #112]	@ 0x70
 800cce6:	677a      	str	r2, [r7, #116]	@ 0x74
 800cce8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800ccec:	4642      	mov	r2, r8
 800ccee:	464b      	mov	r3, r9
 800ccf0:	1891      	adds	r1, r2, r2
 800ccf2:	60b9      	str	r1, [r7, #8]
 800ccf4:	415b      	adcs	r3, r3
 800ccf6:	60fb      	str	r3, [r7, #12]
 800ccf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ccfc:	4641      	mov	r1, r8
 800ccfe:	1851      	adds	r1, r2, r1
 800cd00:	6039      	str	r1, [r7, #0]
 800cd02:	4649      	mov	r1, r9
 800cd04:	414b      	adcs	r3, r1
 800cd06:	607b      	str	r3, [r7, #4]
 800cd08:	f04f 0200 	mov.w	r2, #0
 800cd0c:	f04f 0300 	mov.w	r3, #0
 800cd10:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cd14:	4659      	mov	r1, fp
 800cd16:	00cb      	lsls	r3, r1, #3
 800cd18:	4651      	mov	r1, sl
 800cd1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cd1e:	4651      	mov	r1, sl
 800cd20:	00ca      	lsls	r2, r1, #3
 800cd22:	4610      	mov	r0, r2
 800cd24:	4619      	mov	r1, r3
 800cd26:	4603      	mov	r3, r0
 800cd28:	4642      	mov	r2, r8
 800cd2a:	189b      	adds	r3, r3, r2
 800cd2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cd2e:	464b      	mov	r3, r9
 800cd30:	460a      	mov	r2, r1
 800cd32:	eb42 0303 	adc.w	r3, r2, r3
 800cd36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cd38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd3c:	685b      	ldr	r3, [r3, #4]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	663b      	str	r3, [r7, #96]	@ 0x60
 800cd42:	667a      	str	r2, [r7, #100]	@ 0x64
 800cd44:	f04f 0200 	mov.w	r2, #0
 800cd48:	f04f 0300 	mov.w	r3, #0
 800cd4c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800cd50:	4649      	mov	r1, r9
 800cd52:	008b      	lsls	r3, r1, #2
 800cd54:	4641      	mov	r1, r8
 800cd56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cd5a:	4641      	mov	r1, r8
 800cd5c:	008a      	lsls	r2, r1, #2
 800cd5e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800cd62:	f7f3 ffb1 	bl	8000cc8 <__aeabi_uldivmod>
 800cd66:	4602      	mov	r2, r0
 800cd68:	460b      	mov	r3, r1
 800cd6a:	4b0d      	ldr	r3, [pc, #52]	@ (800cda0 <UART_SetConfig+0x4e4>)
 800cd6c:	fba3 1302 	umull	r1, r3, r3, r2
 800cd70:	095b      	lsrs	r3, r3, #5
 800cd72:	2164      	movs	r1, #100	@ 0x64
 800cd74:	fb01 f303 	mul.w	r3, r1, r3
 800cd78:	1ad3      	subs	r3, r2, r3
 800cd7a:	011b      	lsls	r3, r3, #4
 800cd7c:	3332      	adds	r3, #50	@ 0x32
 800cd7e:	4a08      	ldr	r2, [pc, #32]	@ (800cda0 <UART_SetConfig+0x4e4>)
 800cd80:	fba2 2303 	umull	r2, r3, r2, r3
 800cd84:	095b      	lsrs	r3, r3, #5
 800cd86:	f003 020f 	and.w	r2, r3, #15
 800cd8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	4422      	add	r2, r4
 800cd92:	609a      	str	r2, [r3, #8]
}
 800cd94:	bf00      	nop
 800cd96:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cda0:	51eb851f 	.word	0x51eb851f

0800cda4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800cda8:	4904      	ldr	r1, [pc, #16]	@ (800cdbc <MX_FATFS_Init+0x18>)
 800cdaa:	4805      	ldr	r0, [pc, #20]	@ (800cdc0 <MX_FATFS_Init+0x1c>)
 800cdac:	f003 f9d4 	bl	8010158 <FATFS_LinkDriver>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	461a      	mov	r2, r3
 800cdb4:	4b03      	ldr	r3, [pc, #12]	@ (800cdc4 <MX_FATFS_Init+0x20>)
 800cdb6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800cdb8:	bf00      	nop
 800cdba:	bd80      	pop	{r7, pc}
 800cdbc:	20002b9c 	.word	0x20002b9c
 800cdc0:	20000010 	.word	0x20000010
 800cdc4:	20002b98 	.word	0x20002b98

0800cdc8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800cdc8:	b480      	push	{r7}
 800cdca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800cdcc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd6:	4770      	bx	lr

0800cdd8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b082      	sub	sp, #8
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	4603      	mov	r3, r0
 800cde0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	SD_disk_initialize (pdrv);
 800cde2:	79fb      	ldrb	r3, [r7, #7]
 800cde4:	4618      	mov	r0, r3
 800cde6:	f7f5 f823 	bl	8001e30 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 800cdea:	bf00      	nop
 800cdec:	4618      	mov	r0, r3
 800cdee:	3708      	adds	r7, #8
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b082      	sub	sp, #8
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
   // Stat = STA_NOINIT;
   // return Stat;
	SD_disk_status ( pdrv);
 800cdfe:	79fb      	ldrb	r3, [r7, #7]
 800ce00:	4618      	mov	r0, r3
 800ce02:	f7f5 f8fb 	bl	8001ffc <SD_disk_status>
  /* USER CODE END STATUS */
}
 800ce06:	bf00      	nop
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3708      	adds	r7, #8
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}

0800ce10 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b084      	sub	sp, #16
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	60b9      	str	r1, [r7, #8]
 800ce18:	607a      	str	r2, [r7, #4]
 800ce1a:	603b      	str	r3, [r7, #0]
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	SD_disk_read ( pdrv,  buff,  sector,  count);
 800ce20:	7bf8      	ldrb	r0, [r7, #15]
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	687a      	ldr	r2, [r7, #4]
 800ce26:	68b9      	ldr	r1, [r7, #8]
 800ce28:	f7f5 f8fe 	bl	8002028 <SD_disk_read>
  /* USER CODE END READ */
}
 800ce2c:	bf00      	nop
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3710      	adds	r7, #16
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}

0800ce36 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800ce36:	b580      	push	{r7, lr}
 800ce38:	b084      	sub	sp, #16
 800ce3a:	af00      	add	r7, sp, #0
 800ce3c:	60b9      	str	r1, [r7, #8]
 800ce3e:	607a      	str	r2, [r7, #4]
 800ce40:	603b      	str	r3, [r7, #0]
 800ce42:	4603      	mov	r3, r0
 800ce44:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
   // return RES_OK;
	SD_disk_write (pdrv,buff,sector,count);
 800ce46:	7bf8      	ldrb	r0, [r7, #15]
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	687a      	ldr	r2, [r7, #4]
 800ce4c:	68b9      	ldr	r1, [r7, #8]
 800ce4e:	f7f5 f955 	bl	80020fc <SD_disk_write>
  /* USER CODE END WRITE */
}
 800ce52:	bf00      	nop
 800ce54:	4618      	mov	r0, r3
 800ce56:	3710      	adds	r7, #16
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}

0800ce5c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b082      	sub	sp, #8
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	4603      	mov	r3, r0
 800ce64:	603a      	str	r2, [r7, #0]
 800ce66:	71fb      	strb	r3, [r7, #7]
 800ce68:	460b      	mov	r3, r1
 800ce6a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	SD_disk_ioctl ( pdrv,  cmd,  buff);
 800ce6c:	79fb      	ldrb	r3, [r7, #7]
 800ce6e:	79b9      	ldrb	r1, [r7, #6]
 800ce70:	683a      	ldr	r2, [r7, #0]
 800ce72:	4618      	mov	r0, r3
 800ce74:	f7f5 f9c6 	bl	8002204 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 800ce78:	bf00      	nop
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	3708      	adds	r7, #8
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}
	...

0800ce84 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b084      	sub	sp, #16
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ce8e:	79fb      	ldrb	r3, [r7, #7]
 800ce90:	4a08      	ldr	r2, [pc, #32]	@ (800ceb4 <disk_status+0x30>)
 800ce92:	009b      	lsls	r3, r3, #2
 800ce94:	4413      	add	r3, r2
 800ce96:	685b      	ldr	r3, [r3, #4]
 800ce98:	685b      	ldr	r3, [r3, #4]
 800ce9a:	79fa      	ldrb	r2, [r7, #7]
 800ce9c:	4905      	ldr	r1, [pc, #20]	@ (800ceb4 <disk_status+0x30>)
 800ce9e:	440a      	add	r2, r1
 800cea0:	7a12      	ldrb	r2, [r2, #8]
 800cea2:	4610      	mov	r0, r2
 800cea4:	4798      	blx	r3
 800cea6:	4603      	mov	r3, r0
 800cea8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ceaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	3710      	adds	r7, #16
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}
 800ceb4:	20002bc8 	.word	0x20002bc8

0800ceb8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b084      	sub	sp, #16
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	4603      	mov	r3, r0
 800cec0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cec2:	2300      	movs	r3, #0
 800cec4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cec6:	79fb      	ldrb	r3, [r7, #7]
 800cec8:	4a0d      	ldr	r2, [pc, #52]	@ (800cf00 <disk_initialize+0x48>)
 800ceca:	5cd3      	ldrb	r3, [r2, r3]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d111      	bne.n	800cef4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ced0:	79fb      	ldrb	r3, [r7, #7]
 800ced2:	4a0b      	ldr	r2, [pc, #44]	@ (800cf00 <disk_initialize+0x48>)
 800ced4:	2101      	movs	r1, #1
 800ced6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ced8:	79fb      	ldrb	r3, [r7, #7]
 800ceda:	4a09      	ldr	r2, [pc, #36]	@ (800cf00 <disk_initialize+0x48>)
 800cedc:	009b      	lsls	r3, r3, #2
 800cede:	4413      	add	r3, r2
 800cee0:	685b      	ldr	r3, [r3, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	79fa      	ldrb	r2, [r7, #7]
 800cee6:	4906      	ldr	r1, [pc, #24]	@ (800cf00 <disk_initialize+0x48>)
 800cee8:	440a      	add	r2, r1
 800ceea:	7a12      	ldrb	r2, [r2, #8]
 800ceec:	4610      	mov	r0, r2
 800ceee:	4798      	blx	r3
 800cef0:	4603      	mov	r3, r0
 800cef2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800cef4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3710      	adds	r7, #16
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}
 800cefe:	bf00      	nop
 800cf00:	20002bc8 	.word	0x20002bc8

0800cf04 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cf04:	b590      	push	{r4, r7, lr}
 800cf06:	b087      	sub	sp, #28
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	60b9      	str	r1, [r7, #8]
 800cf0c:	607a      	str	r2, [r7, #4]
 800cf0e:	603b      	str	r3, [r7, #0]
 800cf10:	4603      	mov	r3, r0
 800cf12:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cf14:	7bfb      	ldrb	r3, [r7, #15]
 800cf16:	4a0a      	ldr	r2, [pc, #40]	@ (800cf40 <disk_read+0x3c>)
 800cf18:	009b      	lsls	r3, r3, #2
 800cf1a:	4413      	add	r3, r2
 800cf1c:	685b      	ldr	r3, [r3, #4]
 800cf1e:	689c      	ldr	r4, [r3, #8]
 800cf20:	7bfb      	ldrb	r3, [r7, #15]
 800cf22:	4a07      	ldr	r2, [pc, #28]	@ (800cf40 <disk_read+0x3c>)
 800cf24:	4413      	add	r3, r2
 800cf26:	7a18      	ldrb	r0, [r3, #8]
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	687a      	ldr	r2, [r7, #4]
 800cf2c:	68b9      	ldr	r1, [r7, #8]
 800cf2e:	47a0      	blx	r4
 800cf30:	4603      	mov	r3, r0
 800cf32:	75fb      	strb	r3, [r7, #23]
  return res;
 800cf34:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	371c      	adds	r7, #28
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd90      	pop	{r4, r7, pc}
 800cf3e:	bf00      	nop
 800cf40:	20002bc8 	.word	0x20002bc8

0800cf44 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cf44:	b590      	push	{r4, r7, lr}
 800cf46:	b087      	sub	sp, #28
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	60b9      	str	r1, [r7, #8]
 800cf4c:	607a      	str	r2, [r7, #4]
 800cf4e:	603b      	str	r3, [r7, #0]
 800cf50:	4603      	mov	r3, r0
 800cf52:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cf54:	7bfb      	ldrb	r3, [r7, #15]
 800cf56:	4a0a      	ldr	r2, [pc, #40]	@ (800cf80 <disk_write+0x3c>)
 800cf58:	009b      	lsls	r3, r3, #2
 800cf5a:	4413      	add	r3, r2
 800cf5c:	685b      	ldr	r3, [r3, #4]
 800cf5e:	68dc      	ldr	r4, [r3, #12]
 800cf60:	7bfb      	ldrb	r3, [r7, #15]
 800cf62:	4a07      	ldr	r2, [pc, #28]	@ (800cf80 <disk_write+0x3c>)
 800cf64:	4413      	add	r3, r2
 800cf66:	7a18      	ldrb	r0, [r3, #8]
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	687a      	ldr	r2, [r7, #4]
 800cf6c:	68b9      	ldr	r1, [r7, #8]
 800cf6e:	47a0      	blx	r4
 800cf70:	4603      	mov	r3, r0
 800cf72:	75fb      	strb	r3, [r7, #23]
  return res;
 800cf74:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	371c      	adds	r7, #28
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd90      	pop	{r4, r7, pc}
 800cf7e:	bf00      	nop
 800cf80:	20002bc8 	.word	0x20002bc8

0800cf84 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b084      	sub	sp, #16
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	603a      	str	r2, [r7, #0]
 800cf8e:	71fb      	strb	r3, [r7, #7]
 800cf90:	460b      	mov	r3, r1
 800cf92:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cf94:	79fb      	ldrb	r3, [r7, #7]
 800cf96:	4a09      	ldr	r2, [pc, #36]	@ (800cfbc <disk_ioctl+0x38>)
 800cf98:	009b      	lsls	r3, r3, #2
 800cf9a:	4413      	add	r3, r2
 800cf9c:	685b      	ldr	r3, [r3, #4]
 800cf9e:	691b      	ldr	r3, [r3, #16]
 800cfa0:	79fa      	ldrb	r2, [r7, #7]
 800cfa2:	4906      	ldr	r1, [pc, #24]	@ (800cfbc <disk_ioctl+0x38>)
 800cfa4:	440a      	add	r2, r1
 800cfa6:	7a10      	ldrb	r0, [r2, #8]
 800cfa8:	79b9      	ldrb	r1, [r7, #6]
 800cfaa:	683a      	ldr	r2, [r7, #0]
 800cfac:	4798      	blx	r3
 800cfae:	4603      	mov	r3, r0
 800cfb0:	73fb      	strb	r3, [r7, #15]
  return res;
 800cfb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	3710      	adds	r7, #16
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}
 800cfbc:	20002bc8 	.word	0x20002bc8

0800cfc0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b085      	sub	sp, #20
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	3301      	adds	r3, #1
 800cfcc:	781b      	ldrb	r3, [r3, #0]
 800cfce:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800cfd0:	89fb      	ldrh	r3, [r7, #14]
 800cfd2:	021b      	lsls	r3, r3, #8
 800cfd4:	b21a      	sxth	r2, r3
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	781b      	ldrb	r3, [r3, #0]
 800cfda:	b21b      	sxth	r3, r3
 800cfdc:	4313      	orrs	r3, r2
 800cfde:	b21b      	sxth	r3, r3
 800cfe0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800cfe2:	89fb      	ldrh	r3, [r7, #14]
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	3714      	adds	r7, #20
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr

0800cff0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800cff0:	b480      	push	{r7}
 800cff2:	b085      	sub	sp, #20
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	3303      	adds	r3, #3
 800cffc:	781b      	ldrb	r3, [r3, #0]
 800cffe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	021b      	lsls	r3, r3, #8
 800d004:	687a      	ldr	r2, [r7, #4]
 800d006:	3202      	adds	r2, #2
 800d008:	7812      	ldrb	r2, [r2, #0]
 800d00a:	4313      	orrs	r3, r2
 800d00c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	021b      	lsls	r3, r3, #8
 800d012:	687a      	ldr	r2, [r7, #4]
 800d014:	3201      	adds	r2, #1
 800d016:	7812      	ldrb	r2, [r2, #0]
 800d018:	4313      	orrs	r3, r2
 800d01a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	021b      	lsls	r3, r3, #8
 800d020:	687a      	ldr	r2, [r7, #4]
 800d022:	7812      	ldrb	r2, [r2, #0]
 800d024:	4313      	orrs	r3, r2
 800d026:	60fb      	str	r3, [r7, #12]
	return rv;
 800d028:	68fb      	ldr	r3, [r7, #12]
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3714      	adds	r7, #20
 800d02e:	46bd      	mov	sp, r7
 800d030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d034:	4770      	bx	lr

0800d036 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d036:	b480      	push	{r7}
 800d038:	b083      	sub	sp, #12
 800d03a:	af00      	add	r7, sp, #0
 800d03c:	6078      	str	r0, [r7, #4]
 800d03e:	460b      	mov	r3, r1
 800d040:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	1c5a      	adds	r2, r3, #1
 800d046:	607a      	str	r2, [r7, #4]
 800d048:	887a      	ldrh	r2, [r7, #2]
 800d04a:	b2d2      	uxtb	r2, r2
 800d04c:	701a      	strb	r2, [r3, #0]
 800d04e:	887b      	ldrh	r3, [r7, #2]
 800d050:	0a1b      	lsrs	r3, r3, #8
 800d052:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	1c5a      	adds	r2, r3, #1
 800d058:	607a      	str	r2, [r7, #4]
 800d05a:	887a      	ldrh	r2, [r7, #2]
 800d05c:	b2d2      	uxtb	r2, r2
 800d05e:	701a      	strb	r2, [r3, #0]
}
 800d060:	bf00      	nop
 800d062:	370c      	adds	r7, #12
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr

0800d06c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d06c:	b480      	push	{r7}
 800d06e:	b083      	sub	sp, #12
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	1c5a      	adds	r2, r3, #1
 800d07a:	607a      	str	r2, [r7, #4]
 800d07c:	683a      	ldr	r2, [r7, #0]
 800d07e:	b2d2      	uxtb	r2, r2
 800d080:	701a      	strb	r2, [r3, #0]
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	0a1b      	lsrs	r3, r3, #8
 800d086:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	1c5a      	adds	r2, r3, #1
 800d08c:	607a      	str	r2, [r7, #4]
 800d08e:	683a      	ldr	r2, [r7, #0]
 800d090:	b2d2      	uxtb	r2, r2
 800d092:	701a      	strb	r2, [r3, #0]
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	0a1b      	lsrs	r3, r3, #8
 800d098:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	1c5a      	adds	r2, r3, #1
 800d09e:	607a      	str	r2, [r7, #4]
 800d0a0:	683a      	ldr	r2, [r7, #0]
 800d0a2:	b2d2      	uxtb	r2, r2
 800d0a4:	701a      	strb	r2, [r3, #0]
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	0a1b      	lsrs	r3, r3, #8
 800d0aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	1c5a      	adds	r2, r3, #1
 800d0b0:	607a      	str	r2, [r7, #4]
 800d0b2:	683a      	ldr	r2, [r7, #0]
 800d0b4:	b2d2      	uxtb	r2, r2
 800d0b6:	701a      	strb	r2, [r3, #0]
}
 800d0b8:	bf00      	nop
 800d0ba:	370c      	adds	r7, #12
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c2:	4770      	bx	lr

0800d0c4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d0c4:	b480      	push	{r7}
 800d0c6:	b087      	sub	sp, #28
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	60f8      	str	r0, [r7, #12]
 800d0cc:	60b9      	str	r1, [r7, #8]
 800d0ce:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d00d      	beq.n	800d0fa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d0de:	693a      	ldr	r2, [r7, #16]
 800d0e0:	1c53      	adds	r3, r2, #1
 800d0e2:	613b      	str	r3, [r7, #16]
 800d0e4:	697b      	ldr	r3, [r7, #20]
 800d0e6:	1c59      	adds	r1, r3, #1
 800d0e8:	6179      	str	r1, [r7, #20]
 800d0ea:	7812      	ldrb	r2, [r2, #0]
 800d0ec:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	3b01      	subs	r3, #1
 800d0f2:	607b      	str	r3, [r7, #4]
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d1f1      	bne.n	800d0de <mem_cpy+0x1a>
	}
}
 800d0fa:	bf00      	nop
 800d0fc:	371c      	adds	r7, #28
 800d0fe:	46bd      	mov	sp, r7
 800d100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d104:	4770      	bx	lr

0800d106 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d106:	b480      	push	{r7}
 800d108:	b087      	sub	sp, #28
 800d10a:	af00      	add	r7, sp, #0
 800d10c:	60f8      	str	r0, [r7, #12]
 800d10e:	60b9      	str	r1, [r7, #8]
 800d110:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	1c5a      	adds	r2, r3, #1
 800d11a:	617a      	str	r2, [r7, #20]
 800d11c:	68ba      	ldr	r2, [r7, #8]
 800d11e:	b2d2      	uxtb	r2, r2
 800d120:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	3b01      	subs	r3, #1
 800d126:	607b      	str	r3, [r7, #4]
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d1f3      	bne.n	800d116 <mem_set+0x10>
}
 800d12e:	bf00      	nop
 800d130:	bf00      	nop
 800d132:	371c      	adds	r7, #28
 800d134:	46bd      	mov	sp, r7
 800d136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13a:	4770      	bx	lr

0800d13c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d13c:	b480      	push	{r7}
 800d13e:	b089      	sub	sp, #36	@ 0x24
 800d140:	af00      	add	r7, sp, #0
 800d142:	60f8      	str	r0, [r7, #12]
 800d144:	60b9      	str	r1, [r7, #8]
 800d146:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	61fb      	str	r3, [r7, #28]
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d150:	2300      	movs	r3, #0
 800d152:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d154:	69fb      	ldr	r3, [r7, #28]
 800d156:	1c5a      	adds	r2, r3, #1
 800d158:	61fa      	str	r2, [r7, #28]
 800d15a:	781b      	ldrb	r3, [r3, #0]
 800d15c:	4619      	mov	r1, r3
 800d15e:	69bb      	ldr	r3, [r7, #24]
 800d160:	1c5a      	adds	r2, r3, #1
 800d162:	61ba      	str	r2, [r7, #24]
 800d164:	781b      	ldrb	r3, [r3, #0]
 800d166:	1acb      	subs	r3, r1, r3
 800d168:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	3b01      	subs	r3, #1
 800d16e:	607b      	str	r3, [r7, #4]
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d002      	beq.n	800d17c <mem_cmp+0x40>
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d0eb      	beq.n	800d154 <mem_cmp+0x18>

	return r;
 800d17c:	697b      	ldr	r3, [r7, #20]
}
 800d17e:	4618      	mov	r0, r3
 800d180:	3724      	adds	r7, #36	@ 0x24
 800d182:	46bd      	mov	sp, r7
 800d184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d188:	4770      	bx	lr

0800d18a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d18a:	b480      	push	{r7}
 800d18c:	b083      	sub	sp, #12
 800d18e:	af00      	add	r7, sp, #0
 800d190:	6078      	str	r0, [r7, #4]
 800d192:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d194:	e002      	b.n	800d19c <chk_chr+0x12>
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	3301      	adds	r3, #1
 800d19a:	607b      	str	r3, [r7, #4]
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	781b      	ldrb	r3, [r3, #0]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d005      	beq.n	800d1b0 <chk_chr+0x26>
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	781b      	ldrb	r3, [r3, #0]
 800d1a8:	461a      	mov	r2, r3
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	4293      	cmp	r3, r2
 800d1ae:	d1f2      	bne.n	800d196 <chk_chr+0xc>
	return *str;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	781b      	ldrb	r3, [r3, #0]
}
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	370c      	adds	r7, #12
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1be:	4770      	bx	lr

0800d1c0 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b082      	sub	sp, #8
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d009      	beq.n	800d1e2 <lock_fs+0x22>
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	695b      	ldr	r3, [r3, #20]
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f003 f8c2 	bl	801035c <ff_req_grant>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d001      	beq.n	800d1e2 <lock_fs+0x22>
 800d1de:	2301      	movs	r3, #1
 800d1e0:	e000      	b.n	800d1e4 <lock_fs+0x24>
 800d1e2:	2300      	movs	r3, #0
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	3708      	adds	r7, #8
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b082      	sub	sp, #8
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
 800d1f4:	460b      	mov	r3, r1
 800d1f6:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d00d      	beq.n	800d21a <unlock_fs+0x2e>
 800d1fe:	78fb      	ldrb	r3, [r7, #3]
 800d200:	2b0c      	cmp	r3, #12
 800d202:	d00a      	beq.n	800d21a <unlock_fs+0x2e>
 800d204:	78fb      	ldrb	r3, [r7, #3]
 800d206:	2b0b      	cmp	r3, #11
 800d208:	d007      	beq.n	800d21a <unlock_fs+0x2e>
 800d20a:	78fb      	ldrb	r3, [r7, #3]
 800d20c:	2b0f      	cmp	r3, #15
 800d20e:	d004      	beq.n	800d21a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	695b      	ldr	r3, [r3, #20]
 800d214:	4618      	mov	r0, r3
 800d216:	f003 f8b6 	bl	8010386 <ff_rel_grant>
	}
}
 800d21a:	bf00      	nop
 800d21c:	3708      	adds	r7, #8
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}
	...

0800d224 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d224:	b480      	push	{r7}
 800d226:	b085      	sub	sp, #20
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
 800d22c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d22e:	2300      	movs	r3, #0
 800d230:	60bb      	str	r3, [r7, #8]
 800d232:	68bb      	ldr	r3, [r7, #8]
 800d234:	60fb      	str	r3, [r7, #12]
 800d236:	e029      	b.n	800d28c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d238:	4a27      	ldr	r2, [pc, #156]	@ (800d2d8 <chk_lock+0xb4>)
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	011b      	lsls	r3, r3, #4
 800d23e:	4413      	add	r3, r2
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d01d      	beq.n	800d282 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d246:	4a24      	ldr	r2, [pc, #144]	@ (800d2d8 <chk_lock+0xb4>)
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	011b      	lsls	r3, r3, #4
 800d24c:	4413      	add	r3, r2
 800d24e:	681a      	ldr	r2, [r3, #0]
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	429a      	cmp	r2, r3
 800d256:	d116      	bne.n	800d286 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d258:	4a1f      	ldr	r2, [pc, #124]	@ (800d2d8 <chk_lock+0xb4>)
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	011b      	lsls	r3, r3, #4
 800d25e:	4413      	add	r3, r2
 800d260:	3304      	adds	r3, #4
 800d262:	681a      	ldr	r2, [r3, #0]
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d268:	429a      	cmp	r2, r3
 800d26a:	d10c      	bne.n	800d286 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d26c:	4a1a      	ldr	r2, [pc, #104]	@ (800d2d8 <chk_lock+0xb4>)
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	011b      	lsls	r3, r3, #4
 800d272:	4413      	add	r3, r2
 800d274:	3308      	adds	r3, #8
 800d276:	681a      	ldr	r2, [r3, #0]
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d27c:	429a      	cmp	r2, r3
 800d27e:	d102      	bne.n	800d286 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d280:	e007      	b.n	800d292 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d282:	2301      	movs	r3, #1
 800d284:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	3301      	adds	r3, #1
 800d28a:	60fb      	str	r3, [r7, #12]
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	2b01      	cmp	r3, #1
 800d290:	d9d2      	bls.n	800d238 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	2b02      	cmp	r3, #2
 800d296:	d109      	bne.n	800d2ac <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d102      	bne.n	800d2a4 <chk_lock+0x80>
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	2b02      	cmp	r3, #2
 800d2a2:	d101      	bne.n	800d2a8 <chk_lock+0x84>
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	e010      	b.n	800d2ca <chk_lock+0xa6>
 800d2a8:	2312      	movs	r3, #18
 800d2aa:	e00e      	b.n	800d2ca <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d108      	bne.n	800d2c4 <chk_lock+0xa0>
 800d2b2:	4a09      	ldr	r2, [pc, #36]	@ (800d2d8 <chk_lock+0xb4>)
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	011b      	lsls	r3, r3, #4
 800d2b8:	4413      	add	r3, r2
 800d2ba:	330c      	adds	r3, #12
 800d2bc:	881b      	ldrh	r3, [r3, #0]
 800d2be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d2c2:	d101      	bne.n	800d2c8 <chk_lock+0xa4>
 800d2c4:	2310      	movs	r3, #16
 800d2c6:	e000      	b.n	800d2ca <chk_lock+0xa6>
 800d2c8:	2300      	movs	r3, #0
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	3714      	adds	r7, #20
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d4:	4770      	bx	lr
 800d2d6:	bf00      	nop
 800d2d8:	20002ba8 	.word	0x20002ba8

0800d2dc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d2dc:	b480      	push	{r7}
 800d2de:	b083      	sub	sp, #12
 800d2e0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	607b      	str	r3, [r7, #4]
 800d2e6:	e002      	b.n	800d2ee <enq_lock+0x12>
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	3301      	adds	r3, #1
 800d2ec:	607b      	str	r3, [r7, #4]
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	2b01      	cmp	r3, #1
 800d2f2:	d806      	bhi.n	800d302 <enq_lock+0x26>
 800d2f4:	4a09      	ldr	r2, [pc, #36]	@ (800d31c <enq_lock+0x40>)
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	011b      	lsls	r3, r3, #4
 800d2fa:	4413      	add	r3, r2
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d1f2      	bne.n	800d2e8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2b02      	cmp	r3, #2
 800d306:	bf14      	ite	ne
 800d308:	2301      	movne	r3, #1
 800d30a:	2300      	moveq	r3, #0
 800d30c:	b2db      	uxtb	r3, r3
}
 800d30e:	4618      	mov	r0, r3
 800d310:	370c      	adds	r7, #12
 800d312:	46bd      	mov	sp, r7
 800d314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d318:	4770      	bx	lr
 800d31a:	bf00      	nop
 800d31c:	20002ba8 	.word	0x20002ba8

0800d320 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d320:	b480      	push	{r7}
 800d322:	b085      	sub	sp, #20
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
 800d328:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d32a:	2300      	movs	r3, #0
 800d32c:	60fb      	str	r3, [r7, #12]
 800d32e:	e01f      	b.n	800d370 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d330:	4a41      	ldr	r2, [pc, #260]	@ (800d438 <inc_lock+0x118>)
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	011b      	lsls	r3, r3, #4
 800d336:	4413      	add	r3, r2
 800d338:	681a      	ldr	r2, [r3, #0]
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	429a      	cmp	r2, r3
 800d340:	d113      	bne.n	800d36a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d342:	4a3d      	ldr	r2, [pc, #244]	@ (800d438 <inc_lock+0x118>)
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	011b      	lsls	r3, r3, #4
 800d348:	4413      	add	r3, r2
 800d34a:	3304      	adds	r3, #4
 800d34c:	681a      	ldr	r2, [r3, #0]
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d352:	429a      	cmp	r2, r3
 800d354:	d109      	bne.n	800d36a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d356:	4a38      	ldr	r2, [pc, #224]	@ (800d438 <inc_lock+0x118>)
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	011b      	lsls	r3, r3, #4
 800d35c:	4413      	add	r3, r2
 800d35e:	3308      	adds	r3, #8
 800d360:	681a      	ldr	r2, [r3, #0]
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d366:	429a      	cmp	r2, r3
 800d368:	d006      	beq.n	800d378 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	3301      	adds	r3, #1
 800d36e:	60fb      	str	r3, [r7, #12]
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	2b01      	cmp	r3, #1
 800d374:	d9dc      	bls.n	800d330 <inc_lock+0x10>
 800d376:	e000      	b.n	800d37a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d378:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	2b02      	cmp	r3, #2
 800d37e:	d132      	bne.n	800d3e6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d380:	2300      	movs	r3, #0
 800d382:	60fb      	str	r3, [r7, #12]
 800d384:	e002      	b.n	800d38c <inc_lock+0x6c>
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	3301      	adds	r3, #1
 800d38a:	60fb      	str	r3, [r7, #12]
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	2b01      	cmp	r3, #1
 800d390:	d806      	bhi.n	800d3a0 <inc_lock+0x80>
 800d392:	4a29      	ldr	r2, [pc, #164]	@ (800d438 <inc_lock+0x118>)
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	011b      	lsls	r3, r3, #4
 800d398:	4413      	add	r3, r2
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d1f2      	bne.n	800d386 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	2b02      	cmp	r3, #2
 800d3a4:	d101      	bne.n	800d3aa <inc_lock+0x8a>
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	e040      	b.n	800d42c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681a      	ldr	r2, [r3, #0]
 800d3ae:	4922      	ldr	r1, [pc, #136]	@ (800d438 <inc_lock+0x118>)
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	011b      	lsls	r3, r3, #4
 800d3b4:	440b      	add	r3, r1
 800d3b6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	689a      	ldr	r2, [r3, #8]
 800d3bc:	491e      	ldr	r1, [pc, #120]	@ (800d438 <inc_lock+0x118>)
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	011b      	lsls	r3, r3, #4
 800d3c2:	440b      	add	r3, r1
 800d3c4:	3304      	adds	r3, #4
 800d3c6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	695a      	ldr	r2, [r3, #20]
 800d3cc:	491a      	ldr	r1, [pc, #104]	@ (800d438 <inc_lock+0x118>)
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	011b      	lsls	r3, r3, #4
 800d3d2:	440b      	add	r3, r1
 800d3d4:	3308      	adds	r3, #8
 800d3d6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d3d8:	4a17      	ldr	r2, [pc, #92]	@ (800d438 <inc_lock+0x118>)
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	011b      	lsls	r3, r3, #4
 800d3de:	4413      	add	r3, r2
 800d3e0:	330c      	adds	r3, #12
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d009      	beq.n	800d400 <inc_lock+0xe0>
 800d3ec:	4a12      	ldr	r2, [pc, #72]	@ (800d438 <inc_lock+0x118>)
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	011b      	lsls	r3, r3, #4
 800d3f2:	4413      	add	r3, r2
 800d3f4:	330c      	adds	r3, #12
 800d3f6:	881b      	ldrh	r3, [r3, #0]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d001      	beq.n	800d400 <inc_lock+0xe0>
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	e015      	b.n	800d42c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d108      	bne.n	800d418 <inc_lock+0xf8>
 800d406:	4a0c      	ldr	r2, [pc, #48]	@ (800d438 <inc_lock+0x118>)
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	011b      	lsls	r3, r3, #4
 800d40c:	4413      	add	r3, r2
 800d40e:	330c      	adds	r3, #12
 800d410:	881b      	ldrh	r3, [r3, #0]
 800d412:	3301      	adds	r3, #1
 800d414:	b29a      	uxth	r2, r3
 800d416:	e001      	b.n	800d41c <inc_lock+0xfc>
 800d418:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d41c:	4906      	ldr	r1, [pc, #24]	@ (800d438 <inc_lock+0x118>)
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	011b      	lsls	r3, r3, #4
 800d422:	440b      	add	r3, r1
 800d424:	330c      	adds	r3, #12
 800d426:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	3301      	adds	r3, #1
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3714      	adds	r7, #20
 800d430:	46bd      	mov	sp, r7
 800d432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d436:	4770      	bx	lr
 800d438:	20002ba8 	.word	0x20002ba8

0800d43c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d43c:	b480      	push	{r7}
 800d43e:	b085      	sub	sp, #20
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	3b01      	subs	r3, #1
 800d448:	607b      	str	r3, [r7, #4]
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2b01      	cmp	r3, #1
 800d44e:	d825      	bhi.n	800d49c <dec_lock+0x60>
		n = Files[i].ctr;
 800d450:	4a17      	ldr	r2, [pc, #92]	@ (800d4b0 <dec_lock+0x74>)
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	011b      	lsls	r3, r3, #4
 800d456:	4413      	add	r3, r2
 800d458:	330c      	adds	r3, #12
 800d45a:	881b      	ldrh	r3, [r3, #0]
 800d45c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d45e:	89fb      	ldrh	r3, [r7, #14]
 800d460:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d464:	d101      	bne.n	800d46a <dec_lock+0x2e>
 800d466:	2300      	movs	r3, #0
 800d468:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d46a:	89fb      	ldrh	r3, [r7, #14]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d002      	beq.n	800d476 <dec_lock+0x3a>
 800d470:	89fb      	ldrh	r3, [r7, #14]
 800d472:	3b01      	subs	r3, #1
 800d474:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d476:	4a0e      	ldr	r2, [pc, #56]	@ (800d4b0 <dec_lock+0x74>)
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	011b      	lsls	r3, r3, #4
 800d47c:	4413      	add	r3, r2
 800d47e:	330c      	adds	r3, #12
 800d480:	89fa      	ldrh	r2, [r7, #14]
 800d482:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d484:	89fb      	ldrh	r3, [r7, #14]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d105      	bne.n	800d496 <dec_lock+0x5a>
 800d48a:	4a09      	ldr	r2, [pc, #36]	@ (800d4b0 <dec_lock+0x74>)
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	011b      	lsls	r3, r3, #4
 800d490:	4413      	add	r3, r2
 800d492:	2200      	movs	r2, #0
 800d494:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d496:	2300      	movs	r3, #0
 800d498:	737b      	strb	r3, [r7, #13]
 800d49a:	e001      	b.n	800d4a0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d49c:	2302      	movs	r3, #2
 800d49e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d4a0:	7b7b      	ldrb	r3, [r7, #13]
}
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	3714      	adds	r7, #20
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ac:	4770      	bx	lr
 800d4ae:	bf00      	nop
 800d4b0:	20002ba8 	.word	0x20002ba8

0800d4b4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b085      	sub	sp, #20
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d4bc:	2300      	movs	r3, #0
 800d4be:	60fb      	str	r3, [r7, #12]
 800d4c0:	e010      	b.n	800d4e4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d4c2:	4a0d      	ldr	r2, [pc, #52]	@ (800d4f8 <clear_lock+0x44>)
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	011b      	lsls	r3, r3, #4
 800d4c8:	4413      	add	r3, r2
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	687a      	ldr	r2, [r7, #4]
 800d4ce:	429a      	cmp	r2, r3
 800d4d0:	d105      	bne.n	800d4de <clear_lock+0x2a>
 800d4d2:	4a09      	ldr	r2, [pc, #36]	@ (800d4f8 <clear_lock+0x44>)
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	011b      	lsls	r3, r3, #4
 800d4d8:	4413      	add	r3, r2
 800d4da:	2200      	movs	r2, #0
 800d4dc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	3301      	adds	r3, #1
 800d4e2:	60fb      	str	r3, [r7, #12]
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	2b01      	cmp	r3, #1
 800d4e8:	d9eb      	bls.n	800d4c2 <clear_lock+0xe>
	}
}
 800d4ea:	bf00      	nop
 800d4ec:	bf00      	nop
 800d4ee:	3714      	adds	r7, #20
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f6:	4770      	bx	lr
 800d4f8:	20002ba8 	.word	0x20002ba8

0800d4fc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b086      	sub	sp, #24
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d504:	2300      	movs	r3, #0
 800d506:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	78db      	ldrb	r3, [r3, #3]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d034      	beq.n	800d57a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d514:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	7858      	ldrb	r0, [r3, #1]
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800d520:	2301      	movs	r3, #1
 800d522:	697a      	ldr	r2, [r7, #20]
 800d524:	f7ff fd0e 	bl	800cf44 <disk_write>
 800d528:	4603      	mov	r3, r0
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d002      	beq.n	800d534 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d52e:	2301      	movs	r3, #1
 800d530:	73fb      	strb	r3, [r7, #15]
 800d532:	e022      	b.n	800d57a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2200      	movs	r2, #0
 800d538:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d53e:	697a      	ldr	r2, [r7, #20]
 800d540:	1ad2      	subs	r2, r2, r3
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d546:	429a      	cmp	r2, r3
 800d548:	d217      	bcs.n	800d57a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	789b      	ldrb	r3, [r3, #2]
 800d54e:	613b      	str	r3, [r7, #16]
 800d550:	e010      	b.n	800d574 <sync_window+0x78>
					wsect += fs->fsize;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d556:	697a      	ldr	r2, [r7, #20]
 800d558:	4413      	add	r3, r2
 800d55a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	7858      	ldrb	r0, [r3, #1]
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800d566:	2301      	movs	r3, #1
 800d568:	697a      	ldr	r2, [r7, #20]
 800d56a:	f7ff fceb 	bl	800cf44 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d56e:	693b      	ldr	r3, [r7, #16]
 800d570:	3b01      	subs	r3, #1
 800d572:	613b      	str	r3, [r7, #16]
 800d574:	693b      	ldr	r3, [r7, #16]
 800d576:	2b01      	cmp	r3, #1
 800d578:	d8eb      	bhi.n	800d552 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d57a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d57c:	4618      	mov	r0, r3
 800d57e:	3718      	adds	r7, #24
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}

0800d584 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b084      	sub	sp, #16
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
 800d58c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d58e:	2300      	movs	r3, #0
 800d590:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d596:	683a      	ldr	r2, [r7, #0]
 800d598:	429a      	cmp	r2, r3
 800d59a:	d01b      	beq.n	800d5d4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d59c:	6878      	ldr	r0, [r7, #4]
 800d59e:	f7ff ffad 	bl	800d4fc <sync_window>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d5a6:	7bfb      	ldrb	r3, [r7, #15]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d113      	bne.n	800d5d4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	7858      	ldrb	r0, [r3, #1]
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800d5b6:	2301      	movs	r3, #1
 800d5b8:	683a      	ldr	r2, [r7, #0]
 800d5ba:	f7ff fca3 	bl	800cf04 <disk_read>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d004      	beq.n	800d5ce <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d5c4:	f04f 33ff 	mov.w	r3, #4294967295
 800d5c8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	683a      	ldr	r2, [r7, #0]
 800d5d2:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 800d5d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	3710      	adds	r7, #16
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}
	...

0800d5e0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b084      	sub	sp, #16
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f7ff ff87 	bl	800d4fc <sync_window>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d5f2:	7bfb      	ldrb	r3, [r7, #15]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d159      	bne.n	800d6ac <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	781b      	ldrb	r3, [r3, #0]
 800d5fc:	2b03      	cmp	r3, #3
 800d5fe:	d149      	bne.n	800d694 <sync_fs+0xb4>
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	791b      	ldrb	r3, [r3, #4]
 800d604:	2b01      	cmp	r3, #1
 800d606:	d145      	bne.n	800d694 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	899b      	ldrh	r3, [r3, #12]
 800d612:	461a      	mov	r2, r3
 800d614:	2100      	movs	r1, #0
 800d616:	f7ff fd76 	bl	800d106 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	333c      	adds	r3, #60	@ 0x3c
 800d61e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d622:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800d626:	4618      	mov	r0, r3
 800d628:	f7ff fd05 	bl	800d036 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	333c      	adds	r3, #60	@ 0x3c
 800d630:	4921      	ldr	r1, [pc, #132]	@ (800d6b8 <sync_fs+0xd8>)
 800d632:	4618      	mov	r0, r3
 800d634:	f7ff fd1a 	bl	800d06c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	333c      	adds	r3, #60	@ 0x3c
 800d63c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d640:	491e      	ldr	r1, [pc, #120]	@ (800d6bc <sync_fs+0xdc>)
 800d642:	4618      	mov	r0, r3
 800d644:	f7ff fd12 	bl	800d06c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	333c      	adds	r3, #60	@ 0x3c
 800d64c:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	69db      	ldr	r3, [r3, #28]
 800d654:	4619      	mov	r1, r3
 800d656:	4610      	mov	r0, r2
 800d658:	f7ff fd08 	bl	800d06c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	333c      	adds	r3, #60	@ 0x3c
 800d660:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	699b      	ldr	r3, [r3, #24]
 800d668:	4619      	mov	r1, r3
 800d66a:	4610      	mov	r0, r2
 800d66c:	f7ff fcfe 	bl	800d06c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d674:	1c5a      	adds	r2, r3, #1
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	7858      	ldrb	r0, [r3, #1]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d688:	2301      	movs	r3, #1
 800d68a:	f7ff fc5b 	bl	800cf44 <disk_write>
			fs->fsi_flag = 0;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2200      	movs	r2, #0
 800d692:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	785b      	ldrb	r3, [r3, #1]
 800d698:	2200      	movs	r2, #0
 800d69a:	2100      	movs	r1, #0
 800d69c:	4618      	mov	r0, r3
 800d69e:	f7ff fc71 	bl	800cf84 <disk_ioctl>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d001      	beq.n	800d6ac <sync_fs+0xcc>
 800d6a8:	2301      	movs	r3, #1
 800d6aa:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d6ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	3710      	adds	r7, #16
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}
 800d6b6:	bf00      	nop
 800d6b8:	41615252 	.word	0x41615252
 800d6bc:	61417272 	.word	0x61417272

0800d6c0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b083      	sub	sp, #12
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
 800d6c8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	3b02      	subs	r3, #2
 800d6ce:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	6a1b      	ldr	r3, [r3, #32]
 800d6d4:	3b02      	subs	r3, #2
 800d6d6:	683a      	ldr	r2, [r7, #0]
 800d6d8:	429a      	cmp	r2, r3
 800d6da:	d301      	bcc.n	800d6e0 <clust2sect+0x20>
 800d6dc:	2300      	movs	r3, #0
 800d6de:	e008      	b.n	800d6f2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	895b      	ldrh	r3, [r3, #10]
 800d6e4:	461a      	mov	r2, r3
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	fb03 f202 	mul.w	r2, r3, r2
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d6f0:	4413      	add	r3, r2
}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	370c      	adds	r7, #12
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fc:	4770      	bx	lr

0800d6fe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d6fe:	b580      	push	{r7, lr}
 800d700:	b086      	sub	sp, #24
 800d702:	af00      	add	r7, sp, #0
 800d704:	6078      	str	r0, [r7, #4]
 800d706:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	2b01      	cmp	r3, #1
 800d712:	d904      	bls.n	800d71e <get_fat+0x20>
 800d714:	693b      	ldr	r3, [r7, #16]
 800d716:	6a1b      	ldr	r3, [r3, #32]
 800d718:	683a      	ldr	r2, [r7, #0]
 800d71a:	429a      	cmp	r2, r3
 800d71c:	d302      	bcc.n	800d724 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d71e:	2301      	movs	r3, #1
 800d720:	617b      	str	r3, [r7, #20]
 800d722:	e0ba      	b.n	800d89a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d724:	f04f 33ff 	mov.w	r3, #4294967295
 800d728:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d72a:	693b      	ldr	r3, [r7, #16]
 800d72c:	781b      	ldrb	r3, [r3, #0]
 800d72e:	2b03      	cmp	r3, #3
 800d730:	f000 8082 	beq.w	800d838 <get_fat+0x13a>
 800d734:	2b03      	cmp	r3, #3
 800d736:	f300 80a6 	bgt.w	800d886 <get_fat+0x188>
 800d73a:	2b01      	cmp	r3, #1
 800d73c:	d002      	beq.n	800d744 <get_fat+0x46>
 800d73e:	2b02      	cmp	r3, #2
 800d740:	d055      	beq.n	800d7ee <get_fat+0xf0>
 800d742:	e0a0      	b.n	800d886 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	60fb      	str	r3, [r7, #12]
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	085b      	lsrs	r3, r3, #1
 800d74c:	68fa      	ldr	r2, [r7, #12]
 800d74e:	4413      	add	r3, r2
 800d750:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d752:	693b      	ldr	r3, [r7, #16]
 800d754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d756:	693b      	ldr	r3, [r7, #16]
 800d758:	899b      	ldrh	r3, [r3, #12]
 800d75a:	4619      	mov	r1, r3
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	fbb3 f3f1 	udiv	r3, r3, r1
 800d762:	4413      	add	r3, r2
 800d764:	4619      	mov	r1, r3
 800d766:	6938      	ldr	r0, [r7, #16]
 800d768:	f7ff ff0c 	bl	800d584 <move_window>
 800d76c:	4603      	mov	r3, r0
 800d76e:	2b00      	cmp	r3, #0
 800d770:	f040 808c 	bne.w	800d88c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	1c5a      	adds	r2, r3, #1
 800d778:	60fa      	str	r2, [r7, #12]
 800d77a:	693a      	ldr	r2, [r7, #16]
 800d77c:	8992      	ldrh	r2, [r2, #12]
 800d77e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d782:	fb01 f202 	mul.w	r2, r1, r2
 800d786:	1a9b      	subs	r3, r3, r2
 800d788:	693a      	ldr	r2, [r7, #16]
 800d78a:	4413      	add	r3, r2
 800d78c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d790:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d792:	693b      	ldr	r3, [r7, #16]
 800d794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d796:	693b      	ldr	r3, [r7, #16]
 800d798:	899b      	ldrh	r3, [r3, #12]
 800d79a:	4619      	mov	r1, r3
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	fbb3 f3f1 	udiv	r3, r3, r1
 800d7a2:	4413      	add	r3, r2
 800d7a4:	4619      	mov	r1, r3
 800d7a6:	6938      	ldr	r0, [r7, #16]
 800d7a8:	f7ff feec 	bl	800d584 <move_window>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d16e      	bne.n	800d890 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	899b      	ldrh	r3, [r3, #12]
 800d7b6:	461a      	mov	r2, r3
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	fbb3 f1f2 	udiv	r1, r3, r2
 800d7be:	fb01 f202 	mul.w	r2, r1, r2
 800d7c2:	1a9b      	subs	r3, r3, r2
 800d7c4:	693a      	ldr	r2, [r7, #16]
 800d7c6:	4413      	add	r3, r2
 800d7c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d7cc:	021b      	lsls	r3, r3, #8
 800d7ce:	68ba      	ldr	r2, [r7, #8]
 800d7d0:	4313      	orrs	r3, r2
 800d7d2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	f003 0301 	and.w	r3, r3, #1
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d002      	beq.n	800d7e4 <get_fat+0xe6>
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	091b      	lsrs	r3, r3, #4
 800d7e2:	e002      	b.n	800d7ea <get_fat+0xec>
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d7ea:	617b      	str	r3, [r7, #20]
			break;
 800d7ec:	e055      	b.n	800d89a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d7ee:	693b      	ldr	r3, [r7, #16]
 800d7f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7f2:	693b      	ldr	r3, [r7, #16]
 800d7f4:	899b      	ldrh	r3, [r3, #12]
 800d7f6:	085b      	lsrs	r3, r3, #1
 800d7f8:	b29b      	uxth	r3, r3
 800d7fa:	4619      	mov	r1, r3
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	fbb3 f3f1 	udiv	r3, r3, r1
 800d802:	4413      	add	r3, r2
 800d804:	4619      	mov	r1, r3
 800d806:	6938      	ldr	r0, [r7, #16]
 800d808:	f7ff febc 	bl	800d584 <move_window>
 800d80c:	4603      	mov	r3, r0
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d140      	bne.n	800d894 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d812:	693b      	ldr	r3, [r7, #16]
 800d814:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	005b      	lsls	r3, r3, #1
 800d81c:	693a      	ldr	r2, [r7, #16]
 800d81e:	8992      	ldrh	r2, [r2, #12]
 800d820:	fbb3 f0f2 	udiv	r0, r3, r2
 800d824:	fb00 f202 	mul.w	r2, r0, r2
 800d828:	1a9b      	subs	r3, r3, r2
 800d82a:	440b      	add	r3, r1
 800d82c:	4618      	mov	r0, r3
 800d82e:	f7ff fbc7 	bl	800cfc0 <ld_word>
 800d832:	4603      	mov	r3, r0
 800d834:	617b      	str	r3, [r7, #20]
			break;
 800d836:	e030      	b.n	800d89a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d838:	693b      	ldr	r3, [r7, #16]
 800d83a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d83c:	693b      	ldr	r3, [r7, #16]
 800d83e:	899b      	ldrh	r3, [r3, #12]
 800d840:	089b      	lsrs	r3, r3, #2
 800d842:	b29b      	uxth	r3, r3
 800d844:	4619      	mov	r1, r3
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	fbb3 f3f1 	udiv	r3, r3, r1
 800d84c:	4413      	add	r3, r2
 800d84e:	4619      	mov	r1, r3
 800d850:	6938      	ldr	r0, [r7, #16]
 800d852:	f7ff fe97 	bl	800d584 <move_window>
 800d856:	4603      	mov	r3, r0
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d11d      	bne.n	800d898 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d85c:	693b      	ldr	r3, [r7, #16]
 800d85e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	009b      	lsls	r3, r3, #2
 800d866:	693a      	ldr	r2, [r7, #16]
 800d868:	8992      	ldrh	r2, [r2, #12]
 800d86a:	fbb3 f0f2 	udiv	r0, r3, r2
 800d86e:	fb00 f202 	mul.w	r2, r0, r2
 800d872:	1a9b      	subs	r3, r3, r2
 800d874:	440b      	add	r3, r1
 800d876:	4618      	mov	r0, r3
 800d878:	f7ff fbba 	bl	800cff0 <ld_dword>
 800d87c:	4603      	mov	r3, r0
 800d87e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800d882:	617b      	str	r3, [r7, #20]
			break;
 800d884:	e009      	b.n	800d89a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d886:	2301      	movs	r3, #1
 800d888:	617b      	str	r3, [r7, #20]
 800d88a:	e006      	b.n	800d89a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d88c:	bf00      	nop
 800d88e:	e004      	b.n	800d89a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d890:	bf00      	nop
 800d892:	e002      	b.n	800d89a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d894:	bf00      	nop
 800d896:	e000      	b.n	800d89a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d898:	bf00      	nop
		}
	}

	return val;
 800d89a:	697b      	ldr	r3, [r7, #20]
}
 800d89c:	4618      	mov	r0, r3
 800d89e:	3718      	adds	r7, #24
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}

0800d8a4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d8a4:	b590      	push	{r4, r7, lr}
 800d8a6:	b089      	sub	sp, #36	@ 0x24
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	60f8      	str	r0, [r7, #12]
 800d8ac:	60b9      	str	r1, [r7, #8]
 800d8ae:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d8b0:	2302      	movs	r3, #2
 800d8b2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	2b01      	cmp	r3, #1
 800d8b8:	f240 8109 	bls.w	800dace <put_fat+0x22a>
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	6a1b      	ldr	r3, [r3, #32]
 800d8c0:	68ba      	ldr	r2, [r7, #8]
 800d8c2:	429a      	cmp	r2, r3
 800d8c4:	f080 8103 	bcs.w	800dace <put_fat+0x22a>
		switch (fs->fs_type) {
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	781b      	ldrb	r3, [r3, #0]
 800d8cc:	2b03      	cmp	r3, #3
 800d8ce:	f000 80b6 	beq.w	800da3e <put_fat+0x19a>
 800d8d2:	2b03      	cmp	r3, #3
 800d8d4:	f300 80fb 	bgt.w	800dace <put_fat+0x22a>
 800d8d8:	2b01      	cmp	r3, #1
 800d8da:	d003      	beq.n	800d8e4 <put_fat+0x40>
 800d8dc:	2b02      	cmp	r3, #2
 800d8de:	f000 8083 	beq.w	800d9e8 <put_fat+0x144>
 800d8e2:	e0f4      	b.n	800dace <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	61bb      	str	r3, [r7, #24]
 800d8e8:	69bb      	ldr	r3, [r7, #24]
 800d8ea:	085b      	lsrs	r3, r3, #1
 800d8ec:	69ba      	ldr	r2, [r7, #24]
 800d8ee:	4413      	add	r3, r2
 800d8f0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	899b      	ldrh	r3, [r3, #12]
 800d8fa:	4619      	mov	r1, r3
 800d8fc:	69bb      	ldr	r3, [r7, #24]
 800d8fe:	fbb3 f3f1 	udiv	r3, r3, r1
 800d902:	4413      	add	r3, r2
 800d904:	4619      	mov	r1, r3
 800d906:	68f8      	ldr	r0, [r7, #12]
 800d908:	f7ff fe3c 	bl	800d584 <move_window>
 800d90c:	4603      	mov	r3, r0
 800d90e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d910:	7ffb      	ldrb	r3, [r7, #31]
 800d912:	2b00      	cmp	r3, #0
 800d914:	f040 80d4 	bne.w	800dac0 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800d91e:	69bb      	ldr	r3, [r7, #24]
 800d920:	1c5a      	adds	r2, r3, #1
 800d922:	61ba      	str	r2, [r7, #24]
 800d924:	68fa      	ldr	r2, [r7, #12]
 800d926:	8992      	ldrh	r2, [r2, #12]
 800d928:	fbb3 f0f2 	udiv	r0, r3, r2
 800d92c:	fb00 f202 	mul.w	r2, r0, r2
 800d930:	1a9b      	subs	r3, r3, r2
 800d932:	440b      	add	r3, r1
 800d934:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	f003 0301 	and.w	r3, r3, #1
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d00d      	beq.n	800d95c <put_fat+0xb8>
 800d940:	697b      	ldr	r3, [r7, #20]
 800d942:	781b      	ldrb	r3, [r3, #0]
 800d944:	b25b      	sxtb	r3, r3
 800d946:	f003 030f 	and.w	r3, r3, #15
 800d94a:	b25a      	sxtb	r2, r3
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	b2db      	uxtb	r3, r3
 800d950:	011b      	lsls	r3, r3, #4
 800d952:	b25b      	sxtb	r3, r3
 800d954:	4313      	orrs	r3, r2
 800d956:	b25b      	sxtb	r3, r3
 800d958:	b2db      	uxtb	r3, r3
 800d95a:	e001      	b.n	800d960 <put_fat+0xbc>
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	b2db      	uxtb	r3, r3
 800d960:	697a      	ldr	r2, [r7, #20]
 800d962:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	2201      	movs	r2, #1
 800d968:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	899b      	ldrh	r3, [r3, #12]
 800d972:	4619      	mov	r1, r3
 800d974:	69bb      	ldr	r3, [r7, #24]
 800d976:	fbb3 f3f1 	udiv	r3, r3, r1
 800d97a:	4413      	add	r3, r2
 800d97c:	4619      	mov	r1, r3
 800d97e:	68f8      	ldr	r0, [r7, #12]
 800d980:	f7ff fe00 	bl	800d584 <move_window>
 800d984:	4603      	mov	r3, r0
 800d986:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d988:	7ffb      	ldrb	r3, [r7, #31]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	f040 809a 	bne.w	800dac4 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	899b      	ldrh	r3, [r3, #12]
 800d99a:	461a      	mov	r2, r3
 800d99c:	69bb      	ldr	r3, [r7, #24]
 800d99e:	fbb3 f0f2 	udiv	r0, r3, r2
 800d9a2:	fb00 f202 	mul.w	r2, r0, r2
 800d9a6:	1a9b      	subs	r3, r3, r2
 800d9a8:	440b      	add	r3, r1
 800d9aa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	f003 0301 	and.w	r3, r3, #1
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d003      	beq.n	800d9be <put_fat+0x11a>
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	091b      	lsrs	r3, r3, #4
 800d9ba:	b2db      	uxtb	r3, r3
 800d9bc:	e00e      	b.n	800d9dc <put_fat+0x138>
 800d9be:	697b      	ldr	r3, [r7, #20]
 800d9c0:	781b      	ldrb	r3, [r3, #0]
 800d9c2:	b25b      	sxtb	r3, r3
 800d9c4:	f023 030f 	bic.w	r3, r3, #15
 800d9c8:	b25a      	sxtb	r2, r3
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	0a1b      	lsrs	r3, r3, #8
 800d9ce:	b25b      	sxtb	r3, r3
 800d9d0:	f003 030f 	and.w	r3, r3, #15
 800d9d4:	b25b      	sxtb	r3, r3
 800d9d6:	4313      	orrs	r3, r2
 800d9d8:	b25b      	sxtb	r3, r3
 800d9da:	b2db      	uxtb	r3, r3
 800d9dc:	697a      	ldr	r2, [r7, #20]
 800d9de:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	2201      	movs	r2, #1
 800d9e4:	70da      	strb	r2, [r3, #3]
			break;
 800d9e6:	e072      	b.n	800dace <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	899b      	ldrh	r3, [r3, #12]
 800d9f0:	085b      	lsrs	r3, r3, #1
 800d9f2:	b29b      	uxth	r3, r3
 800d9f4:	4619      	mov	r1, r3
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	fbb3 f3f1 	udiv	r3, r3, r1
 800d9fc:	4413      	add	r3, r2
 800d9fe:	4619      	mov	r1, r3
 800da00:	68f8      	ldr	r0, [r7, #12]
 800da02:	f7ff fdbf 	bl	800d584 <move_window>
 800da06:	4603      	mov	r3, r0
 800da08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800da0a:	7ffb      	ldrb	r3, [r7, #31]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d15b      	bne.n	800dac8 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800da16:	68bb      	ldr	r3, [r7, #8]
 800da18:	005b      	lsls	r3, r3, #1
 800da1a:	68fa      	ldr	r2, [r7, #12]
 800da1c:	8992      	ldrh	r2, [r2, #12]
 800da1e:	fbb3 f0f2 	udiv	r0, r3, r2
 800da22:	fb00 f202 	mul.w	r2, r0, r2
 800da26:	1a9b      	subs	r3, r3, r2
 800da28:	440b      	add	r3, r1
 800da2a:	687a      	ldr	r2, [r7, #4]
 800da2c:	b292      	uxth	r2, r2
 800da2e:	4611      	mov	r1, r2
 800da30:	4618      	mov	r0, r3
 800da32:	f7ff fb00 	bl	800d036 <st_word>
			fs->wflag = 1;
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	2201      	movs	r2, #1
 800da3a:	70da      	strb	r2, [r3, #3]
			break;
 800da3c:	e047      	b.n	800dace <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	899b      	ldrh	r3, [r3, #12]
 800da46:	089b      	lsrs	r3, r3, #2
 800da48:	b29b      	uxth	r3, r3
 800da4a:	4619      	mov	r1, r3
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	fbb3 f3f1 	udiv	r3, r3, r1
 800da52:	4413      	add	r3, r2
 800da54:	4619      	mov	r1, r3
 800da56:	68f8      	ldr	r0, [r7, #12]
 800da58:	f7ff fd94 	bl	800d584 <move_window>
 800da5c:	4603      	mov	r3, r0
 800da5e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800da60:	7ffb      	ldrb	r3, [r7, #31]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d132      	bne.n	800dacc <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800da72:	68bb      	ldr	r3, [r7, #8]
 800da74:	009b      	lsls	r3, r3, #2
 800da76:	68fa      	ldr	r2, [r7, #12]
 800da78:	8992      	ldrh	r2, [r2, #12]
 800da7a:	fbb3 f0f2 	udiv	r0, r3, r2
 800da7e:	fb00 f202 	mul.w	r2, r0, r2
 800da82:	1a9b      	subs	r3, r3, r2
 800da84:	440b      	add	r3, r1
 800da86:	4618      	mov	r0, r3
 800da88:	f7ff fab2 	bl	800cff0 <ld_dword>
 800da8c:	4603      	mov	r3, r0
 800da8e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800da92:	4323      	orrs	r3, r4
 800da94:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	009b      	lsls	r3, r3, #2
 800daa0:	68fa      	ldr	r2, [r7, #12]
 800daa2:	8992      	ldrh	r2, [r2, #12]
 800daa4:	fbb3 f0f2 	udiv	r0, r3, r2
 800daa8:	fb00 f202 	mul.w	r2, r0, r2
 800daac:	1a9b      	subs	r3, r3, r2
 800daae:	440b      	add	r3, r1
 800dab0:	6879      	ldr	r1, [r7, #4]
 800dab2:	4618      	mov	r0, r3
 800dab4:	f7ff fada 	bl	800d06c <st_dword>
			fs->wflag = 1;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	2201      	movs	r2, #1
 800dabc:	70da      	strb	r2, [r3, #3]
			break;
 800dabe:	e006      	b.n	800dace <put_fat+0x22a>
			if (res != FR_OK) break;
 800dac0:	bf00      	nop
 800dac2:	e004      	b.n	800dace <put_fat+0x22a>
			if (res != FR_OK) break;
 800dac4:	bf00      	nop
 800dac6:	e002      	b.n	800dace <put_fat+0x22a>
			if (res != FR_OK) break;
 800dac8:	bf00      	nop
 800daca:	e000      	b.n	800dace <put_fat+0x22a>
			if (res != FR_OK) break;
 800dacc:	bf00      	nop
		}
	}
	return res;
 800dace:	7ffb      	ldrb	r3, [r7, #31]
}
 800dad0:	4618      	mov	r0, r3
 800dad2:	3724      	adds	r7, #36	@ 0x24
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bd90      	pop	{r4, r7, pc}

0800dad8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b088      	sub	sp, #32
 800dadc:	af00      	add	r7, sp, #0
 800dade:	60f8      	str	r0, [r7, #12]
 800dae0:	60b9      	str	r1, [r7, #8]
 800dae2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800dae4:	2300      	movs	r3, #0
 800dae6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	2b01      	cmp	r3, #1
 800daf2:	d904      	bls.n	800dafe <remove_chain+0x26>
 800daf4:	69bb      	ldr	r3, [r7, #24]
 800daf6:	6a1b      	ldr	r3, [r3, #32]
 800daf8:	68ba      	ldr	r2, [r7, #8]
 800dafa:	429a      	cmp	r2, r3
 800dafc:	d301      	bcc.n	800db02 <remove_chain+0x2a>
 800dafe:	2302      	movs	r3, #2
 800db00:	e04b      	b.n	800db9a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d00c      	beq.n	800db22 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800db08:	f04f 32ff 	mov.w	r2, #4294967295
 800db0c:	6879      	ldr	r1, [r7, #4]
 800db0e:	69b8      	ldr	r0, [r7, #24]
 800db10:	f7ff fec8 	bl	800d8a4 <put_fat>
 800db14:	4603      	mov	r3, r0
 800db16:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800db18:	7ffb      	ldrb	r3, [r7, #31]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d001      	beq.n	800db22 <remove_chain+0x4a>
 800db1e:	7ffb      	ldrb	r3, [r7, #31]
 800db20:	e03b      	b.n	800db9a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800db22:	68b9      	ldr	r1, [r7, #8]
 800db24:	68f8      	ldr	r0, [r7, #12]
 800db26:	f7ff fdea 	bl	800d6fe <get_fat>
 800db2a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800db2c:	697b      	ldr	r3, [r7, #20]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d031      	beq.n	800db96 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800db32:	697b      	ldr	r3, [r7, #20]
 800db34:	2b01      	cmp	r3, #1
 800db36:	d101      	bne.n	800db3c <remove_chain+0x64>
 800db38:	2302      	movs	r3, #2
 800db3a:	e02e      	b.n	800db9a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800db3c:	697b      	ldr	r3, [r7, #20]
 800db3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db42:	d101      	bne.n	800db48 <remove_chain+0x70>
 800db44:	2301      	movs	r3, #1
 800db46:	e028      	b.n	800db9a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800db48:	2200      	movs	r2, #0
 800db4a:	68b9      	ldr	r1, [r7, #8]
 800db4c:	69b8      	ldr	r0, [r7, #24]
 800db4e:	f7ff fea9 	bl	800d8a4 <put_fat>
 800db52:	4603      	mov	r3, r0
 800db54:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800db56:	7ffb      	ldrb	r3, [r7, #31]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d001      	beq.n	800db60 <remove_chain+0x88>
 800db5c:	7ffb      	ldrb	r3, [r7, #31]
 800db5e:	e01c      	b.n	800db9a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800db60:	69bb      	ldr	r3, [r7, #24]
 800db62:	69da      	ldr	r2, [r3, #28]
 800db64:	69bb      	ldr	r3, [r7, #24]
 800db66:	6a1b      	ldr	r3, [r3, #32]
 800db68:	3b02      	subs	r3, #2
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d20b      	bcs.n	800db86 <remove_chain+0xae>
			fs->free_clst++;
 800db6e:	69bb      	ldr	r3, [r7, #24]
 800db70:	69db      	ldr	r3, [r3, #28]
 800db72:	1c5a      	adds	r2, r3, #1
 800db74:	69bb      	ldr	r3, [r7, #24]
 800db76:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800db78:	69bb      	ldr	r3, [r7, #24]
 800db7a:	791b      	ldrb	r3, [r3, #4]
 800db7c:	f043 0301 	orr.w	r3, r3, #1
 800db80:	b2da      	uxtb	r2, r3
 800db82:	69bb      	ldr	r3, [r7, #24]
 800db84:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800db86:	697b      	ldr	r3, [r7, #20]
 800db88:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800db8a:	69bb      	ldr	r3, [r7, #24]
 800db8c:	6a1b      	ldr	r3, [r3, #32]
 800db8e:	68ba      	ldr	r2, [r7, #8]
 800db90:	429a      	cmp	r2, r3
 800db92:	d3c6      	bcc.n	800db22 <remove_chain+0x4a>
 800db94:	e000      	b.n	800db98 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800db96:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800db98:	2300      	movs	r3, #0
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	3720      	adds	r7, #32
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}

0800dba2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800dba2:	b580      	push	{r7, lr}
 800dba4:	b088      	sub	sp, #32
 800dba6:	af00      	add	r7, sp, #0
 800dba8:	6078      	str	r0, [r7, #4]
 800dbaa:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d10d      	bne.n	800dbd4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	699b      	ldr	r3, [r3, #24]
 800dbbc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800dbbe:	69bb      	ldr	r3, [r7, #24]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d004      	beq.n	800dbce <create_chain+0x2c>
 800dbc4:	693b      	ldr	r3, [r7, #16]
 800dbc6:	6a1b      	ldr	r3, [r3, #32]
 800dbc8:	69ba      	ldr	r2, [r7, #24]
 800dbca:	429a      	cmp	r2, r3
 800dbcc:	d31b      	bcc.n	800dc06 <create_chain+0x64>
 800dbce:	2301      	movs	r3, #1
 800dbd0:	61bb      	str	r3, [r7, #24]
 800dbd2:	e018      	b.n	800dc06 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800dbd4:	6839      	ldr	r1, [r7, #0]
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f7ff fd91 	bl	800d6fe <get_fat>
 800dbdc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	2b01      	cmp	r3, #1
 800dbe2:	d801      	bhi.n	800dbe8 <create_chain+0x46>
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	e070      	b.n	800dcca <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbee:	d101      	bne.n	800dbf4 <create_chain+0x52>
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	e06a      	b.n	800dcca <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800dbf4:	693b      	ldr	r3, [r7, #16]
 800dbf6:	6a1b      	ldr	r3, [r3, #32]
 800dbf8:	68fa      	ldr	r2, [r7, #12]
 800dbfa:	429a      	cmp	r2, r3
 800dbfc:	d201      	bcs.n	800dc02 <create_chain+0x60>
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	e063      	b.n	800dcca <create_chain+0x128>
		scl = clst;
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800dc06:	69bb      	ldr	r3, [r7, #24]
 800dc08:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800dc0a:	69fb      	ldr	r3, [r7, #28]
 800dc0c:	3301      	adds	r3, #1
 800dc0e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800dc10:	693b      	ldr	r3, [r7, #16]
 800dc12:	6a1b      	ldr	r3, [r3, #32]
 800dc14:	69fa      	ldr	r2, [r7, #28]
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d307      	bcc.n	800dc2a <create_chain+0x88>
				ncl = 2;
 800dc1a:	2302      	movs	r3, #2
 800dc1c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800dc1e:	69fa      	ldr	r2, [r7, #28]
 800dc20:	69bb      	ldr	r3, [r7, #24]
 800dc22:	429a      	cmp	r2, r3
 800dc24:	d901      	bls.n	800dc2a <create_chain+0x88>
 800dc26:	2300      	movs	r3, #0
 800dc28:	e04f      	b.n	800dcca <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800dc2a:	69f9      	ldr	r1, [r7, #28]
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f7ff fd66 	bl	800d6fe <get_fat>
 800dc32:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d00e      	beq.n	800dc58 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	2b01      	cmp	r3, #1
 800dc3e:	d003      	beq.n	800dc48 <create_chain+0xa6>
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc46:	d101      	bne.n	800dc4c <create_chain+0xaa>
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	e03e      	b.n	800dcca <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800dc4c:	69fa      	ldr	r2, [r7, #28]
 800dc4e:	69bb      	ldr	r3, [r7, #24]
 800dc50:	429a      	cmp	r2, r3
 800dc52:	d1da      	bne.n	800dc0a <create_chain+0x68>
 800dc54:	2300      	movs	r3, #0
 800dc56:	e038      	b.n	800dcca <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800dc58:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800dc5a:	f04f 32ff 	mov.w	r2, #4294967295
 800dc5e:	69f9      	ldr	r1, [r7, #28]
 800dc60:	6938      	ldr	r0, [r7, #16]
 800dc62:	f7ff fe1f 	bl	800d8a4 <put_fat>
 800dc66:	4603      	mov	r3, r0
 800dc68:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800dc6a:	7dfb      	ldrb	r3, [r7, #23]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d109      	bne.n	800dc84 <create_chain+0xe2>
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d006      	beq.n	800dc84 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800dc76:	69fa      	ldr	r2, [r7, #28]
 800dc78:	6839      	ldr	r1, [r7, #0]
 800dc7a:	6938      	ldr	r0, [r7, #16]
 800dc7c:	f7ff fe12 	bl	800d8a4 <put_fat>
 800dc80:	4603      	mov	r3, r0
 800dc82:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800dc84:	7dfb      	ldrb	r3, [r7, #23]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d116      	bne.n	800dcb8 <create_chain+0x116>
		fs->last_clst = ncl;
 800dc8a:	693b      	ldr	r3, [r7, #16]
 800dc8c:	69fa      	ldr	r2, [r7, #28]
 800dc8e:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800dc90:	693b      	ldr	r3, [r7, #16]
 800dc92:	69da      	ldr	r2, [r3, #28]
 800dc94:	693b      	ldr	r3, [r7, #16]
 800dc96:	6a1b      	ldr	r3, [r3, #32]
 800dc98:	3b02      	subs	r3, #2
 800dc9a:	429a      	cmp	r2, r3
 800dc9c:	d804      	bhi.n	800dca8 <create_chain+0x106>
 800dc9e:	693b      	ldr	r3, [r7, #16]
 800dca0:	69db      	ldr	r3, [r3, #28]
 800dca2:	1e5a      	subs	r2, r3, #1
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800dca8:	693b      	ldr	r3, [r7, #16]
 800dcaa:	791b      	ldrb	r3, [r3, #4]
 800dcac:	f043 0301 	orr.w	r3, r3, #1
 800dcb0:	b2da      	uxtb	r2, r3
 800dcb2:	693b      	ldr	r3, [r7, #16]
 800dcb4:	711a      	strb	r2, [r3, #4]
 800dcb6:	e007      	b.n	800dcc8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800dcb8:	7dfb      	ldrb	r3, [r7, #23]
 800dcba:	2b01      	cmp	r3, #1
 800dcbc:	d102      	bne.n	800dcc4 <create_chain+0x122>
 800dcbe:	f04f 33ff 	mov.w	r3, #4294967295
 800dcc2:	e000      	b.n	800dcc6 <create_chain+0x124>
 800dcc4:	2301      	movs	r3, #1
 800dcc6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800dcc8:	69fb      	ldr	r3, [r7, #28]
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	3720      	adds	r7, #32
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}

0800dcd2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800dcd2:	b480      	push	{r7}
 800dcd4:	b087      	sub	sp, #28
 800dcd6:	af00      	add	r7, sp, #0
 800dcd8:	6078      	str	r0, [r7, #4]
 800dcda:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dce6:	3304      	adds	r3, #4
 800dce8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	899b      	ldrh	r3, [r3, #12]
 800dcee:	461a      	mov	r2, r3
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	fbb3 f3f2 	udiv	r3, r3, r2
 800dcf6:	68fa      	ldr	r2, [r7, #12]
 800dcf8:	8952      	ldrh	r2, [r2, #10]
 800dcfa:	fbb3 f3f2 	udiv	r3, r3, r2
 800dcfe:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dd00:	693b      	ldr	r3, [r7, #16]
 800dd02:	1d1a      	adds	r2, r3, #4
 800dd04:	613a      	str	r2, [r7, #16]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d101      	bne.n	800dd14 <clmt_clust+0x42>
 800dd10:	2300      	movs	r3, #0
 800dd12:	e010      	b.n	800dd36 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800dd14:	697a      	ldr	r2, [r7, #20]
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	d307      	bcc.n	800dd2c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800dd1c:	697a      	ldr	r2, [r7, #20]
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	1ad3      	subs	r3, r2, r3
 800dd22:	617b      	str	r3, [r7, #20]
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	3304      	adds	r3, #4
 800dd28:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dd2a:	e7e9      	b.n	800dd00 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800dd2c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800dd2e:	693b      	ldr	r3, [r7, #16]
 800dd30:	681a      	ldr	r2, [r3, #0]
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	4413      	add	r3, r2
}
 800dd36:	4618      	mov	r0, r3
 800dd38:	371c      	adds	r7, #28
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd40:	4770      	bx	lr

0800dd42 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800dd42:	b580      	push	{r7, lr}
 800dd44:	b086      	sub	sp, #24
 800dd46:	af00      	add	r7, sp, #0
 800dd48:	6078      	str	r0, [r7, #4]
 800dd4a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dd58:	d204      	bcs.n	800dd64 <dir_sdi+0x22>
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	f003 031f 	and.w	r3, r3, #31
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d001      	beq.n	800dd68 <dir_sdi+0x26>
		return FR_INT_ERR;
 800dd64:	2302      	movs	r3, #2
 800dd66:	e071      	b.n	800de4c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	683a      	ldr	r2, [r7, #0]
 800dd6c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	689b      	ldr	r3, [r3, #8]
 800dd72:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d106      	bne.n	800dd88 <dir_sdi+0x46>
 800dd7a:	693b      	ldr	r3, [r7, #16]
 800dd7c:	781b      	ldrb	r3, [r3, #0]
 800dd7e:	2b02      	cmp	r3, #2
 800dd80:	d902      	bls.n	800dd88 <dir_sdi+0x46>
		clst = fs->dirbase;
 800dd82:	693b      	ldr	r3, [r7, #16]
 800dd84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd86:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800dd88:	697b      	ldr	r3, [r7, #20]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d10c      	bne.n	800dda8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	095b      	lsrs	r3, r3, #5
 800dd92:	693a      	ldr	r2, [r7, #16]
 800dd94:	8912      	ldrh	r2, [r2, #8]
 800dd96:	4293      	cmp	r3, r2
 800dd98:	d301      	bcc.n	800dd9e <dir_sdi+0x5c>
 800dd9a:	2302      	movs	r3, #2
 800dd9c:	e056      	b.n	800de4c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800dd9e:	693b      	ldr	r3, [r7, #16]
 800dda0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	61da      	str	r2, [r3, #28]
 800dda6:	e02d      	b.n	800de04 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800dda8:	693b      	ldr	r3, [r7, #16]
 800ddaa:	895b      	ldrh	r3, [r3, #10]
 800ddac:	461a      	mov	r2, r3
 800ddae:	693b      	ldr	r3, [r7, #16]
 800ddb0:	899b      	ldrh	r3, [r3, #12]
 800ddb2:	fb02 f303 	mul.w	r3, r2, r3
 800ddb6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ddb8:	e019      	b.n	800ddee <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6979      	ldr	r1, [r7, #20]
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	f7ff fc9d 	bl	800d6fe <get_fat>
 800ddc4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ddc6:	697b      	ldr	r3, [r7, #20]
 800ddc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddcc:	d101      	bne.n	800ddd2 <dir_sdi+0x90>
 800ddce:	2301      	movs	r3, #1
 800ddd0:	e03c      	b.n	800de4c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	2b01      	cmp	r3, #1
 800ddd6:	d904      	bls.n	800dde2 <dir_sdi+0xa0>
 800ddd8:	693b      	ldr	r3, [r7, #16]
 800ddda:	6a1b      	ldr	r3, [r3, #32]
 800dddc:	697a      	ldr	r2, [r7, #20]
 800ddde:	429a      	cmp	r2, r3
 800dde0:	d301      	bcc.n	800dde6 <dir_sdi+0xa4>
 800dde2:	2302      	movs	r3, #2
 800dde4:	e032      	b.n	800de4c <dir_sdi+0x10a>
			ofs -= csz;
 800dde6:	683a      	ldr	r2, [r7, #0]
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	1ad3      	subs	r3, r2, r3
 800ddec:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ddee:	683a      	ldr	r2, [r7, #0]
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	429a      	cmp	r2, r3
 800ddf4:	d2e1      	bcs.n	800ddba <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800ddf6:	6979      	ldr	r1, [r7, #20]
 800ddf8:	6938      	ldr	r0, [r7, #16]
 800ddfa:	f7ff fc61 	bl	800d6c0 <clust2sect>
 800ddfe:	4602      	mov	r2, r0
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	697a      	ldr	r2, [r7, #20]
 800de08:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	69db      	ldr	r3, [r3, #28]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d101      	bne.n	800de16 <dir_sdi+0xd4>
 800de12:	2302      	movs	r3, #2
 800de14:	e01a      	b.n	800de4c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	69da      	ldr	r2, [r3, #28]
 800de1a:	693b      	ldr	r3, [r7, #16]
 800de1c:	899b      	ldrh	r3, [r3, #12]
 800de1e:	4619      	mov	r1, r3
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	fbb3 f3f1 	udiv	r3, r3, r1
 800de26:	441a      	add	r2, r3
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800de2c:	693b      	ldr	r3, [r7, #16]
 800de2e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800de32:	693b      	ldr	r3, [r7, #16]
 800de34:	899b      	ldrh	r3, [r3, #12]
 800de36:	461a      	mov	r2, r3
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	fbb3 f0f2 	udiv	r0, r3, r2
 800de3e:	fb00 f202 	mul.w	r2, r0, r2
 800de42:	1a9b      	subs	r3, r3, r2
 800de44:	18ca      	adds	r2, r1, r3
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800de4a:	2300      	movs	r3, #0
}
 800de4c:	4618      	mov	r0, r3
 800de4e:	3718      	adds	r7, #24
 800de50:	46bd      	mov	sp, r7
 800de52:	bd80      	pop	{r7, pc}

0800de54 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b086      	sub	sp, #24
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
 800de5c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	695b      	ldr	r3, [r3, #20]
 800de68:	3320      	adds	r3, #32
 800de6a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	69db      	ldr	r3, [r3, #28]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d003      	beq.n	800de7c <dir_next+0x28>
 800de74:	68bb      	ldr	r3, [r7, #8]
 800de76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800de7a:	d301      	bcc.n	800de80 <dir_next+0x2c>
 800de7c:	2304      	movs	r3, #4
 800de7e:	e0bb      	b.n	800dff8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	899b      	ldrh	r3, [r3, #12]
 800de84:	461a      	mov	r2, r3
 800de86:	68bb      	ldr	r3, [r7, #8]
 800de88:	fbb3 f1f2 	udiv	r1, r3, r2
 800de8c:	fb01 f202 	mul.w	r2, r1, r2
 800de90:	1a9b      	subs	r3, r3, r2
 800de92:	2b00      	cmp	r3, #0
 800de94:	f040 809d 	bne.w	800dfd2 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	69db      	ldr	r3, [r3, #28]
 800de9c:	1c5a      	adds	r2, r3, #1
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	699b      	ldr	r3, [r3, #24]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d10b      	bne.n	800dec2 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	095b      	lsrs	r3, r3, #5
 800deae:	68fa      	ldr	r2, [r7, #12]
 800deb0:	8912      	ldrh	r2, [r2, #8]
 800deb2:	4293      	cmp	r3, r2
 800deb4:	f0c0 808d 	bcc.w	800dfd2 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2200      	movs	r2, #0
 800debc:	61da      	str	r2, [r3, #28]
 800debe:	2304      	movs	r3, #4
 800dec0:	e09a      	b.n	800dff8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	899b      	ldrh	r3, [r3, #12]
 800dec6:	461a      	mov	r2, r3
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	fbb3 f3f2 	udiv	r3, r3, r2
 800dece:	68fa      	ldr	r2, [r7, #12]
 800ded0:	8952      	ldrh	r2, [r2, #10]
 800ded2:	3a01      	subs	r2, #1
 800ded4:	4013      	ands	r3, r2
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d17b      	bne.n	800dfd2 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800deda:	687a      	ldr	r2, [r7, #4]
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	699b      	ldr	r3, [r3, #24]
 800dee0:	4619      	mov	r1, r3
 800dee2:	4610      	mov	r0, r2
 800dee4:	f7ff fc0b 	bl	800d6fe <get_fat>
 800dee8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800deea:	697b      	ldr	r3, [r7, #20]
 800deec:	2b01      	cmp	r3, #1
 800deee:	d801      	bhi.n	800def4 <dir_next+0xa0>
 800def0:	2302      	movs	r3, #2
 800def2:	e081      	b.n	800dff8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800def4:	697b      	ldr	r3, [r7, #20]
 800def6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800defa:	d101      	bne.n	800df00 <dir_next+0xac>
 800defc:	2301      	movs	r3, #1
 800defe:	e07b      	b.n	800dff8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	6a1b      	ldr	r3, [r3, #32]
 800df04:	697a      	ldr	r2, [r7, #20]
 800df06:	429a      	cmp	r2, r3
 800df08:	d359      	bcc.n	800dfbe <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d104      	bne.n	800df1a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2200      	movs	r2, #0
 800df14:	61da      	str	r2, [r3, #28]
 800df16:	2304      	movs	r3, #4
 800df18:	e06e      	b.n	800dff8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800df1a:	687a      	ldr	r2, [r7, #4]
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	699b      	ldr	r3, [r3, #24]
 800df20:	4619      	mov	r1, r3
 800df22:	4610      	mov	r0, r2
 800df24:	f7ff fe3d 	bl	800dba2 <create_chain>
 800df28:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800df2a:	697b      	ldr	r3, [r7, #20]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d101      	bne.n	800df34 <dir_next+0xe0>
 800df30:	2307      	movs	r3, #7
 800df32:	e061      	b.n	800dff8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800df34:	697b      	ldr	r3, [r7, #20]
 800df36:	2b01      	cmp	r3, #1
 800df38:	d101      	bne.n	800df3e <dir_next+0xea>
 800df3a:	2302      	movs	r3, #2
 800df3c:	e05c      	b.n	800dff8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800df3e:	697b      	ldr	r3, [r7, #20]
 800df40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df44:	d101      	bne.n	800df4a <dir_next+0xf6>
 800df46:	2301      	movs	r3, #1
 800df48:	e056      	b.n	800dff8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800df4a:	68f8      	ldr	r0, [r7, #12]
 800df4c:	f7ff fad6 	bl	800d4fc <sync_window>
 800df50:	4603      	mov	r3, r0
 800df52:	2b00      	cmp	r3, #0
 800df54:	d001      	beq.n	800df5a <dir_next+0x106>
 800df56:	2301      	movs	r3, #1
 800df58:	e04e      	b.n	800dff8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	899b      	ldrh	r3, [r3, #12]
 800df64:	461a      	mov	r2, r3
 800df66:	2100      	movs	r1, #0
 800df68:	f7ff f8cd 	bl	800d106 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800df6c:	2300      	movs	r3, #0
 800df6e:	613b      	str	r3, [r7, #16]
 800df70:	6979      	ldr	r1, [r7, #20]
 800df72:	68f8      	ldr	r0, [r7, #12]
 800df74:	f7ff fba4 	bl	800d6c0 <clust2sect>
 800df78:	4602      	mov	r2, r0
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	639a      	str	r2, [r3, #56]	@ 0x38
 800df7e:	e012      	b.n	800dfa6 <dir_next+0x152>
						fs->wflag = 1;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	2201      	movs	r2, #1
 800df84:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800df86:	68f8      	ldr	r0, [r7, #12]
 800df88:	f7ff fab8 	bl	800d4fc <sync_window>
 800df8c:	4603      	mov	r3, r0
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d001      	beq.n	800df96 <dir_next+0x142>
 800df92:	2301      	movs	r3, #1
 800df94:	e030      	b.n	800dff8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800df96:	693b      	ldr	r3, [r7, #16]
 800df98:	3301      	adds	r3, #1
 800df9a:	613b      	str	r3, [r7, #16]
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dfa0:	1c5a      	adds	r2, r3, #1
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	639a      	str	r2, [r3, #56]	@ 0x38
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	895b      	ldrh	r3, [r3, #10]
 800dfaa:	461a      	mov	r2, r3
 800dfac:	693b      	ldr	r3, [r7, #16]
 800dfae:	4293      	cmp	r3, r2
 800dfb0:	d3e6      	bcc.n	800df80 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dfb6:	693b      	ldr	r3, [r7, #16]
 800dfb8:	1ad2      	subs	r2, r2, r3
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	697a      	ldr	r2, [r7, #20]
 800dfc2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800dfc4:	6979      	ldr	r1, [r7, #20]
 800dfc6:	68f8      	ldr	r0, [r7, #12]
 800dfc8:	f7ff fb7a 	bl	800d6c0 <clust2sect>
 800dfcc:	4602      	mov	r2, r0
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	68ba      	ldr	r2, [r7, #8]
 800dfd6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	899b      	ldrh	r3, [r3, #12]
 800dfe2:	461a      	mov	r2, r3
 800dfe4:	68bb      	ldr	r3, [r7, #8]
 800dfe6:	fbb3 f0f2 	udiv	r0, r3, r2
 800dfea:	fb00 f202 	mul.w	r2, r0, r2
 800dfee:	1a9b      	subs	r3, r3, r2
 800dff0:	18ca      	adds	r2, r1, r3
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800dff6:	2300      	movs	r3, #0
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	3718      	adds	r7, #24
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd80      	pop	{r7, pc}

0800e000 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b086      	sub	sp, #24
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
 800e008:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e010:	2100      	movs	r1, #0
 800e012:	6878      	ldr	r0, [r7, #4]
 800e014:	f7ff fe95 	bl	800dd42 <dir_sdi>
 800e018:	4603      	mov	r3, r0
 800e01a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e01c:	7dfb      	ldrb	r3, [r7, #23]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d12b      	bne.n	800e07a <dir_alloc+0x7a>
		n = 0;
 800e022:	2300      	movs	r3, #0
 800e024:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	69db      	ldr	r3, [r3, #28]
 800e02a:	4619      	mov	r1, r3
 800e02c:	68f8      	ldr	r0, [r7, #12]
 800e02e:	f7ff faa9 	bl	800d584 <move_window>
 800e032:	4603      	mov	r3, r0
 800e034:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e036:	7dfb      	ldrb	r3, [r7, #23]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d11d      	bne.n	800e078 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	6a1b      	ldr	r3, [r3, #32]
 800e040:	781b      	ldrb	r3, [r3, #0]
 800e042:	2be5      	cmp	r3, #229	@ 0xe5
 800e044:	d004      	beq.n	800e050 <dir_alloc+0x50>
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	6a1b      	ldr	r3, [r3, #32]
 800e04a:	781b      	ldrb	r3, [r3, #0]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d107      	bne.n	800e060 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e050:	693b      	ldr	r3, [r7, #16]
 800e052:	3301      	adds	r3, #1
 800e054:	613b      	str	r3, [r7, #16]
 800e056:	693a      	ldr	r2, [r7, #16]
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	429a      	cmp	r2, r3
 800e05c:	d102      	bne.n	800e064 <dir_alloc+0x64>
 800e05e:	e00c      	b.n	800e07a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e060:	2300      	movs	r3, #0
 800e062:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e064:	2101      	movs	r1, #1
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f7ff fef4 	bl	800de54 <dir_next>
 800e06c:	4603      	mov	r3, r0
 800e06e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e070:	7dfb      	ldrb	r3, [r7, #23]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d0d7      	beq.n	800e026 <dir_alloc+0x26>
 800e076:	e000      	b.n	800e07a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e078:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e07a:	7dfb      	ldrb	r3, [r7, #23]
 800e07c:	2b04      	cmp	r3, #4
 800e07e:	d101      	bne.n	800e084 <dir_alloc+0x84>
 800e080:	2307      	movs	r3, #7
 800e082:	75fb      	strb	r3, [r7, #23]
	return res;
 800e084:	7dfb      	ldrb	r3, [r7, #23]
}
 800e086:	4618      	mov	r0, r3
 800e088:	3718      	adds	r7, #24
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}

0800e08e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e08e:	b580      	push	{r7, lr}
 800e090:	b084      	sub	sp, #16
 800e092:	af00      	add	r7, sp, #0
 800e094:	6078      	str	r0, [r7, #4]
 800e096:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	331a      	adds	r3, #26
 800e09c:	4618      	mov	r0, r3
 800e09e:	f7fe ff8f 	bl	800cfc0 <ld_word>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	781b      	ldrb	r3, [r3, #0]
 800e0aa:	2b03      	cmp	r3, #3
 800e0ac:	d109      	bne.n	800e0c2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	3314      	adds	r3, #20
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	f7fe ff84 	bl	800cfc0 <ld_word>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	041b      	lsls	r3, r3, #16
 800e0bc:	68fa      	ldr	r2, [r7, #12]
 800e0be:	4313      	orrs	r3, r2
 800e0c0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e0c2:	68fb      	ldr	r3, [r7, #12]
}
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	3710      	adds	r7, #16
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}

0800e0cc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b084      	sub	sp, #16
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	60f8      	str	r0, [r7, #12]
 800e0d4:	60b9      	str	r1, [r7, #8]
 800e0d6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	331a      	adds	r3, #26
 800e0dc:	687a      	ldr	r2, [r7, #4]
 800e0de:	b292      	uxth	r2, r2
 800e0e0:	4611      	mov	r1, r2
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f7fe ffa7 	bl	800d036 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	781b      	ldrb	r3, [r3, #0]
 800e0ec:	2b03      	cmp	r3, #3
 800e0ee:	d109      	bne.n	800e104 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	f103 0214 	add.w	r2, r3, #20
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	0c1b      	lsrs	r3, r3, #16
 800e0fa:	b29b      	uxth	r3, r3
 800e0fc:	4619      	mov	r1, r3
 800e0fe:	4610      	mov	r0, r2
 800e100:	f7fe ff99 	bl	800d036 <st_word>
	}
}
 800e104:	bf00      	nop
 800e106:	3710      	adds	r7, #16
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}

0800e10c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e10c:	b590      	push	{r4, r7, lr}
 800e10e:	b087      	sub	sp, #28
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
 800e114:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	331a      	adds	r3, #26
 800e11a:	4618      	mov	r0, r3
 800e11c:	f7fe ff50 	bl	800cfc0 <ld_word>
 800e120:	4603      	mov	r3, r0
 800e122:	2b00      	cmp	r3, #0
 800e124:	d001      	beq.n	800e12a <cmp_lfn+0x1e>
 800e126:	2300      	movs	r3, #0
 800e128:	e059      	b.n	800e1de <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	781b      	ldrb	r3, [r3, #0]
 800e12e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e132:	1e5a      	subs	r2, r3, #1
 800e134:	4613      	mov	r3, r2
 800e136:	005b      	lsls	r3, r3, #1
 800e138:	4413      	add	r3, r2
 800e13a:	009b      	lsls	r3, r3, #2
 800e13c:	4413      	add	r3, r2
 800e13e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e140:	2301      	movs	r3, #1
 800e142:	81fb      	strh	r3, [r7, #14]
 800e144:	2300      	movs	r3, #0
 800e146:	613b      	str	r3, [r7, #16]
 800e148:	e033      	b.n	800e1b2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e14a:	4a27      	ldr	r2, [pc, #156]	@ (800e1e8 <cmp_lfn+0xdc>)
 800e14c:	693b      	ldr	r3, [r7, #16]
 800e14e:	4413      	add	r3, r2
 800e150:	781b      	ldrb	r3, [r3, #0]
 800e152:	461a      	mov	r2, r3
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	4413      	add	r3, r2
 800e158:	4618      	mov	r0, r3
 800e15a:	f7fe ff31 	bl	800cfc0 <ld_word>
 800e15e:	4603      	mov	r3, r0
 800e160:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e162:	89fb      	ldrh	r3, [r7, #14]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d01a      	beq.n	800e19e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	2bfe      	cmp	r3, #254	@ 0xfe
 800e16c:	d812      	bhi.n	800e194 <cmp_lfn+0x88>
 800e16e:	89bb      	ldrh	r3, [r7, #12]
 800e170:	4618      	mov	r0, r3
 800e172:	f002 f83d 	bl	80101f0 <ff_wtoupper>
 800e176:	4603      	mov	r3, r0
 800e178:	461c      	mov	r4, r3
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	1c5a      	adds	r2, r3, #1
 800e17e:	617a      	str	r2, [r7, #20]
 800e180:	005b      	lsls	r3, r3, #1
 800e182:	687a      	ldr	r2, [r7, #4]
 800e184:	4413      	add	r3, r2
 800e186:	881b      	ldrh	r3, [r3, #0]
 800e188:	4618      	mov	r0, r3
 800e18a:	f002 f831 	bl	80101f0 <ff_wtoupper>
 800e18e:	4603      	mov	r3, r0
 800e190:	429c      	cmp	r4, r3
 800e192:	d001      	beq.n	800e198 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e194:	2300      	movs	r3, #0
 800e196:	e022      	b.n	800e1de <cmp_lfn+0xd2>
			}
			wc = uc;
 800e198:	89bb      	ldrh	r3, [r7, #12]
 800e19a:	81fb      	strh	r3, [r7, #14]
 800e19c:	e006      	b.n	800e1ac <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e19e:	89bb      	ldrh	r3, [r7, #12]
 800e1a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e1a4:	4293      	cmp	r3, r2
 800e1a6:	d001      	beq.n	800e1ac <cmp_lfn+0xa0>
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	e018      	b.n	800e1de <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e1ac:	693b      	ldr	r3, [r7, #16]
 800e1ae:	3301      	adds	r3, #1
 800e1b0:	613b      	str	r3, [r7, #16]
 800e1b2:	693b      	ldr	r3, [r7, #16]
 800e1b4:	2b0c      	cmp	r3, #12
 800e1b6:	d9c8      	bls.n	800e14a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	781b      	ldrb	r3, [r3, #0]
 800e1bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d00b      	beq.n	800e1dc <cmp_lfn+0xd0>
 800e1c4:	89fb      	ldrh	r3, [r7, #14]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d008      	beq.n	800e1dc <cmp_lfn+0xd0>
 800e1ca:	697b      	ldr	r3, [r7, #20]
 800e1cc:	005b      	lsls	r3, r3, #1
 800e1ce:	687a      	ldr	r2, [r7, #4]
 800e1d0:	4413      	add	r3, r2
 800e1d2:	881b      	ldrh	r3, [r3, #0]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d001      	beq.n	800e1dc <cmp_lfn+0xd0>
 800e1d8:	2300      	movs	r3, #0
 800e1da:	e000      	b.n	800e1de <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e1dc:	2301      	movs	r3, #1
}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	371c      	adds	r7, #28
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd90      	pop	{r4, r7, pc}
 800e1e6:	bf00      	nop
 800e1e8:	08015cb4 	.word	0x08015cb4

0800e1ec <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b088      	sub	sp, #32
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	60f8      	str	r0, [r7, #12]
 800e1f4:	60b9      	str	r1, [r7, #8]
 800e1f6:	4611      	mov	r1, r2
 800e1f8:	461a      	mov	r2, r3
 800e1fa:	460b      	mov	r3, r1
 800e1fc:	71fb      	strb	r3, [r7, #7]
 800e1fe:	4613      	mov	r3, r2
 800e200:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e202:	68bb      	ldr	r3, [r7, #8]
 800e204:	330d      	adds	r3, #13
 800e206:	79ba      	ldrb	r2, [r7, #6]
 800e208:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e20a:	68bb      	ldr	r3, [r7, #8]
 800e20c:	330b      	adds	r3, #11
 800e20e:	220f      	movs	r2, #15
 800e210:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e212:	68bb      	ldr	r3, [r7, #8]
 800e214:	330c      	adds	r3, #12
 800e216:	2200      	movs	r2, #0
 800e218:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e21a:	68bb      	ldr	r3, [r7, #8]
 800e21c:	331a      	adds	r3, #26
 800e21e:	2100      	movs	r1, #0
 800e220:	4618      	mov	r0, r3
 800e222:	f7fe ff08 	bl	800d036 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e226:	79fb      	ldrb	r3, [r7, #7]
 800e228:	1e5a      	subs	r2, r3, #1
 800e22a:	4613      	mov	r3, r2
 800e22c:	005b      	lsls	r3, r3, #1
 800e22e:	4413      	add	r3, r2
 800e230:	009b      	lsls	r3, r3, #2
 800e232:	4413      	add	r3, r2
 800e234:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e236:	2300      	movs	r3, #0
 800e238:	82fb      	strh	r3, [r7, #22]
 800e23a:	2300      	movs	r3, #0
 800e23c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e23e:	8afb      	ldrh	r3, [r7, #22]
 800e240:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e244:	4293      	cmp	r3, r2
 800e246:	d007      	beq.n	800e258 <put_lfn+0x6c>
 800e248:	69fb      	ldr	r3, [r7, #28]
 800e24a:	1c5a      	adds	r2, r3, #1
 800e24c:	61fa      	str	r2, [r7, #28]
 800e24e:	005b      	lsls	r3, r3, #1
 800e250:	68fa      	ldr	r2, [r7, #12]
 800e252:	4413      	add	r3, r2
 800e254:	881b      	ldrh	r3, [r3, #0]
 800e256:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e258:	4a17      	ldr	r2, [pc, #92]	@ (800e2b8 <put_lfn+0xcc>)
 800e25a:	69bb      	ldr	r3, [r7, #24]
 800e25c:	4413      	add	r3, r2
 800e25e:	781b      	ldrb	r3, [r3, #0]
 800e260:	461a      	mov	r2, r3
 800e262:	68bb      	ldr	r3, [r7, #8]
 800e264:	4413      	add	r3, r2
 800e266:	8afa      	ldrh	r2, [r7, #22]
 800e268:	4611      	mov	r1, r2
 800e26a:	4618      	mov	r0, r3
 800e26c:	f7fe fee3 	bl	800d036 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e270:	8afb      	ldrh	r3, [r7, #22]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d102      	bne.n	800e27c <put_lfn+0x90>
 800e276:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e27a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e27c:	69bb      	ldr	r3, [r7, #24]
 800e27e:	3301      	adds	r3, #1
 800e280:	61bb      	str	r3, [r7, #24]
 800e282:	69bb      	ldr	r3, [r7, #24]
 800e284:	2b0c      	cmp	r3, #12
 800e286:	d9da      	bls.n	800e23e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e288:	8afb      	ldrh	r3, [r7, #22]
 800e28a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e28e:	4293      	cmp	r3, r2
 800e290:	d006      	beq.n	800e2a0 <put_lfn+0xb4>
 800e292:	69fb      	ldr	r3, [r7, #28]
 800e294:	005b      	lsls	r3, r3, #1
 800e296:	68fa      	ldr	r2, [r7, #12]
 800e298:	4413      	add	r3, r2
 800e29a:	881b      	ldrh	r3, [r3, #0]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d103      	bne.n	800e2a8 <put_lfn+0xbc>
 800e2a0:	79fb      	ldrb	r3, [r7, #7]
 800e2a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e2a6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e2a8:	68bb      	ldr	r3, [r7, #8]
 800e2aa:	79fa      	ldrb	r2, [r7, #7]
 800e2ac:	701a      	strb	r2, [r3, #0]
}
 800e2ae:	bf00      	nop
 800e2b0:	3720      	adds	r7, #32
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	bd80      	pop	{r7, pc}
 800e2b6:	bf00      	nop
 800e2b8:	08015cb4 	.word	0x08015cb4

0800e2bc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b08c      	sub	sp, #48	@ 0x30
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	60f8      	str	r0, [r7, #12]
 800e2c4:	60b9      	str	r1, [r7, #8]
 800e2c6:	607a      	str	r2, [r7, #4]
 800e2c8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e2ca:	220b      	movs	r2, #11
 800e2cc:	68b9      	ldr	r1, [r7, #8]
 800e2ce:	68f8      	ldr	r0, [r7, #12]
 800e2d0:	f7fe fef8 	bl	800d0c4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	2b05      	cmp	r3, #5
 800e2d8:	d92b      	bls.n	800e332 <gen_numname+0x76>
		sr = seq;
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e2de:	e022      	b.n	800e326 <gen_numname+0x6a>
			wc = *lfn++;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	1c9a      	adds	r2, r3, #2
 800e2e4:	607a      	str	r2, [r7, #4]
 800e2e6:	881b      	ldrh	r3, [r3, #0]
 800e2e8:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e2ee:	e017      	b.n	800e320 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800e2f0:	69fb      	ldr	r3, [r7, #28]
 800e2f2:	005a      	lsls	r2, r3, #1
 800e2f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e2f6:	f003 0301 	and.w	r3, r3, #1
 800e2fa:	4413      	add	r3, r2
 800e2fc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e2fe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e300:	085b      	lsrs	r3, r3, #1
 800e302:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e304:	69fb      	ldr	r3, [r7, #28]
 800e306:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d005      	beq.n	800e31a <gen_numname+0x5e>
 800e30e:	69fb      	ldr	r3, [r7, #28]
 800e310:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800e314:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800e318:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e31a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e31c:	3301      	adds	r3, #1
 800e31e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e322:	2b0f      	cmp	r3, #15
 800e324:	d9e4      	bls.n	800e2f0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	881b      	ldrh	r3, [r3, #0]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d1d8      	bne.n	800e2e0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e32e:	69fb      	ldr	r3, [r7, #28]
 800e330:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e332:	2307      	movs	r3, #7
 800e334:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	b2db      	uxtb	r3, r3
 800e33a:	f003 030f 	and.w	r3, r3, #15
 800e33e:	b2db      	uxtb	r3, r3
 800e340:	3330      	adds	r3, #48	@ 0x30
 800e342:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800e346:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e34a:	2b39      	cmp	r3, #57	@ 0x39
 800e34c:	d904      	bls.n	800e358 <gen_numname+0x9c>
 800e34e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e352:	3307      	adds	r3, #7
 800e354:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800e358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e35a:	1e5a      	subs	r2, r3, #1
 800e35c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800e35e:	3330      	adds	r3, #48	@ 0x30
 800e360:	443b      	add	r3, r7
 800e362:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800e366:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	091b      	lsrs	r3, r3, #4
 800e36e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d1df      	bne.n	800e336 <gen_numname+0x7a>
	ns[i] = '~';
 800e376:	f107 0214 	add.w	r2, r7, #20
 800e37a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e37c:	4413      	add	r3, r2
 800e37e:	227e      	movs	r2, #126	@ 0x7e
 800e380:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e382:	2300      	movs	r3, #0
 800e384:	627b      	str	r3, [r7, #36]	@ 0x24
 800e386:	e002      	b.n	800e38e <gen_numname+0xd2>
 800e388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e38a:	3301      	adds	r3, #1
 800e38c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e38e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e392:	429a      	cmp	r2, r3
 800e394:	d205      	bcs.n	800e3a2 <gen_numname+0xe6>
 800e396:	68fa      	ldr	r2, [r7, #12]
 800e398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e39a:	4413      	add	r3, r2
 800e39c:	781b      	ldrb	r3, [r3, #0]
 800e39e:	2b20      	cmp	r3, #32
 800e3a0:	d1f2      	bne.n	800e388 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e3a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3a4:	2b07      	cmp	r3, #7
 800e3a6:	d807      	bhi.n	800e3b8 <gen_numname+0xfc>
 800e3a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3aa:	1c5a      	adds	r2, r3, #1
 800e3ac:	62ba      	str	r2, [r7, #40]	@ 0x28
 800e3ae:	3330      	adds	r3, #48	@ 0x30
 800e3b0:	443b      	add	r3, r7
 800e3b2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e3b6:	e000      	b.n	800e3ba <gen_numname+0xfe>
 800e3b8:	2120      	movs	r1, #32
 800e3ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3bc:	1c5a      	adds	r2, r3, #1
 800e3be:	627a      	str	r2, [r7, #36]	@ 0x24
 800e3c0:	68fa      	ldr	r2, [r7, #12]
 800e3c2:	4413      	add	r3, r2
 800e3c4:	460a      	mov	r2, r1
 800e3c6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e3c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3ca:	2b07      	cmp	r3, #7
 800e3cc:	d9e9      	bls.n	800e3a2 <gen_numname+0xe6>
}
 800e3ce:	bf00      	nop
 800e3d0:	bf00      	nop
 800e3d2:	3730      	adds	r7, #48	@ 0x30
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	bd80      	pop	{r7, pc}

0800e3d8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e3d8:	b480      	push	{r7}
 800e3da:	b085      	sub	sp, #20
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e3e4:	230b      	movs	r3, #11
 800e3e6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e3e8:	7bfb      	ldrb	r3, [r7, #15]
 800e3ea:	b2da      	uxtb	r2, r3
 800e3ec:	0852      	lsrs	r2, r2, #1
 800e3ee:	01db      	lsls	r3, r3, #7
 800e3f0:	4313      	orrs	r3, r2
 800e3f2:	b2da      	uxtb	r2, r3
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	1c59      	adds	r1, r3, #1
 800e3f8:	6079      	str	r1, [r7, #4]
 800e3fa:	781b      	ldrb	r3, [r3, #0]
 800e3fc:	4413      	add	r3, r2
 800e3fe:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e400:	68bb      	ldr	r3, [r7, #8]
 800e402:	3b01      	subs	r3, #1
 800e404:	60bb      	str	r3, [r7, #8]
 800e406:	68bb      	ldr	r3, [r7, #8]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d1ed      	bne.n	800e3e8 <sum_sfn+0x10>
	return sum;
 800e40c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e40e:	4618      	mov	r0, r3
 800e410:	3714      	adds	r7, #20
 800e412:	46bd      	mov	sp, r7
 800e414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e418:	4770      	bx	lr

0800e41a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e41a:	b580      	push	{r7, lr}
 800e41c:	b086      	sub	sp, #24
 800e41e:	af00      	add	r7, sp, #0
 800e420:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e428:	2100      	movs	r1, #0
 800e42a:	6878      	ldr	r0, [r7, #4]
 800e42c:	f7ff fc89 	bl	800dd42 <dir_sdi>
 800e430:	4603      	mov	r3, r0
 800e432:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e434:	7dfb      	ldrb	r3, [r7, #23]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d001      	beq.n	800e43e <dir_find+0x24>
 800e43a:	7dfb      	ldrb	r3, [r7, #23]
 800e43c:	e0a9      	b.n	800e592 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e43e:	23ff      	movs	r3, #255	@ 0xff
 800e440:	753b      	strb	r3, [r7, #20]
 800e442:	7d3b      	ldrb	r3, [r7, #20]
 800e444:	757b      	strb	r3, [r7, #21]
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	f04f 32ff 	mov.w	r2, #4294967295
 800e44c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	69db      	ldr	r3, [r3, #28]
 800e452:	4619      	mov	r1, r3
 800e454:	6938      	ldr	r0, [r7, #16]
 800e456:	f7ff f895 	bl	800d584 <move_window>
 800e45a:	4603      	mov	r3, r0
 800e45c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e45e:	7dfb      	ldrb	r3, [r7, #23]
 800e460:	2b00      	cmp	r3, #0
 800e462:	f040 8090 	bne.w	800e586 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	6a1b      	ldr	r3, [r3, #32]
 800e46a:	781b      	ldrb	r3, [r3, #0]
 800e46c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e46e:	7dbb      	ldrb	r3, [r7, #22]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d102      	bne.n	800e47a <dir_find+0x60>
 800e474:	2304      	movs	r3, #4
 800e476:	75fb      	strb	r3, [r7, #23]
 800e478:	e08a      	b.n	800e590 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	6a1b      	ldr	r3, [r3, #32]
 800e47e:	330b      	adds	r3, #11
 800e480:	781b      	ldrb	r3, [r3, #0]
 800e482:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e486:	73fb      	strb	r3, [r7, #15]
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	7bfa      	ldrb	r2, [r7, #15]
 800e48c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e48e:	7dbb      	ldrb	r3, [r7, #22]
 800e490:	2be5      	cmp	r3, #229	@ 0xe5
 800e492:	d007      	beq.n	800e4a4 <dir_find+0x8a>
 800e494:	7bfb      	ldrb	r3, [r7, #15]
 800e496:	f003 0308 	and.w	r3, r3, #8
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d009      	beq.n	800e4b2 <dir_find+0x98>
 800e49e:	7bfb      	ldrb	r3, [r7, #15]
 800e4a0:	2b0f      	cmp	r3, #15
 800e4a2:	d006      	beq.n	800e4b2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e4a4:	23ff      	movs	r3, #255	@ 0xff
 800e4a6:	757b      	strb	r3, [r7, #21]
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f04f 32ff 	mov.w	r2, #4294967295
 800e4ae:	631a      	str	r2, [r3, #48]	@ 0x30
 800e4b0:	e05e      	b.n	800e570 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e4b2:	7bfb      	ldrb	r3, [r7, #15]
 800e4b4:	2b0f      	cmp	r3, #15
 800e4b6:	d136      	bne.n	800e526 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e4be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d154      	bne.n	800e570 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e4c6:	7dbb      	ldrb	r3, [r7, #22]
 800e4c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d00d      	beq.n	800e4ec <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	6a1b      	ldr	r3, [r3, #32]
 800e4d4:	7b5b      	ldrb	r3, [r3, #13]
 800e4d6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e4d8:	7dbb      	ldrb	r3, [r7, #22]
 800e4da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e4de:	75bb      	strb	r3, [r7, #22]
 800e4e0:	7dbb      	ldrb	r3, [r7, #22]
 800e4e2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	695a      	ldr	r2, [r3, #20]
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e4ec:	7dba      	ldrb	r2, [r7, #22]
 800e4ee:	7d7b      	ldrb	r3, [r7, #21]
 800e4f0:	429a      	cmp	r2, r3
 800e4f2:	d115      	bne.n	800e520 <dir_find+0x106>
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	6a1b      	ldr	r3, [r3, #32]
 800e4f8:	330d      	adds	r3, #13
 800e4fa:	781b      	ldrb	r3, [r3, #0]
 800e4fc:	7d3a      	ldrb	r2, [r7, #20]
 800e4fe:	429a      	cmp	r2, r3
 800e500:	d10e      	bne.n	800e520 <dir_find+0x106>
 800e502:	693b      	ldr	r3, [r7, #16]
 800e504:	691a      	ldr	r2, [r3, #16]
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	6a1b      	ldr	r3, [r3, #32]
 800e50a:	4619      	mov	r1, r3
 800e50c:	4610      	mov	r0, r2
 800e50e:	f7ff fdfd 	bl	800e10c <cmp_lfn>
 800e512:	4603      	mov	r3, r0
 800e514:	2b00      	cmp	r3, #0
 800e516:	d003      	beq.n	800e520 <dir_find+0x106>
 800e518:	7d7b      	ldrb	r3, [r7, #21]
 800e51a:	3b01      	subs	r3, #1
 800e51c:	b2db      	uxtb	r3, r3
 800e51e:	e000      	b.n	800e522 <dir_find+0x108>
 800e520:	23ff      	movs	r3, #255	@ 0xff
 800e522:	757b      	strb	r3, [r7, #21]
 800e524:	e024      	b.n	800e570 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e526:	7d7b      	ldrb	r3, [r7, #21]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d109      	bne.n	800e540 <dir_find+0x126>
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	6a1b      	ldr	r3, [r3, #32]
 800e530:	4618      	mov	r0, r3
 800e532:	f7ff ff51 	bl	800e3d8 <sum_sfn>
 800e536:	4603      	mov	r3, r0
 800e538:	461a      	mov	r2, r3
 800e53a:	7d3b      	ldrb	r3, [r7, #20]
 800e53c:	4293      	cmp	r3, r2
 800e53e:	d024      	beq.n	800e58a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e546:	f003 0301 	and.w	r3, r3, #1
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d10a      	bne.n	800e564 <dir_find+0x14a>
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	6a18      	ldr	r0, [r3, #32]
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	3324      	adds	r3, #36	@ 0x24
 800e556:	220b      	movs	r2, #11
 800e558:	4619      	mov	r1, r3
 800e55a:	f7fe fdef 	bl	800d13c <mem_cmp>
 800e55e:	4603      	mov	r3, r0
 800e560:	2b00      	cmp	r3, #0
 800e562:	d014      	beq.n	800e58e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e564:	23ff      	movs	r3, #255	@ 0xff
 800e566:	757b      	strb	r3, [r7, #21]
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	f04f 32ff 	mov.w	r2, #4294967295
 800e56e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e570:	2100      	movs	r1, #0
 800e572:	6878      	ldr	r0, [r7, #4]
 800e574:	f7ff fc6e 	bl	800de54 <dir_next>
 800e578:	4603      	mov	r3, r0
 800e57a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e57c:	7dfb      	ldrb	r3, [r7, #23]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	f43f af65 	beq.w	800e44e <dir_find+0x34>
 800e584:	e004      	b.n	800e590 <dir_find+0x176>
		if (res != FR_OK) break;
 800e586:	bf00      	nop
 800e588:	e002      	b.n	800e590 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e58a:	bf00      	nop
 800e58c:	e000      	b.n	800e590 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e58e:	bf00      	nop

	return res;
 800e590:	7dfb      	ldrb	r3, [r7, #23]
}
 800e592:	4618      	mov	r0, r3
 800e594:	3718      	adds	r7, #24
 800e596:	46bd      	mov	sp, r7
 800e598:	bd80      	pop	{r7, pc}
	...

0800e59c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b08c      	sub	sp, #48	@ 0x30
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e5b0:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d001      	beq.n	800e5bc <dir_register+0x20>
 800e5b8:	2306      	movs	r3, #6
 800e5ba:	e0e0      	b.n	800e77e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e5bc:	2300      	movs	r3, #0
 800e5be:	627b      	str	r3, [r7, #36]	@ 0x24
 800e5c0:	e002      	b.n	800e5c8 <dir_register+0x2c>
 800e5c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5c4:	3301      	adds	r3, #1
 800e5c6:	627b      	str	r3, [r7, #36]	@ 0x24
 800e5c8:	69fb      	ldr	r3, [r7, #28]
 800e5ca:	691a      	ldr	r2, [r3, #16]
 800e5cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5ce:	005b      	lsls	r3, r3, #1
 800e5d0:	4413      	add	r3, r2
 800e5d2:	881b      	ldrh	r3, [r3, #0]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d1f4      	bne.n	800e5c2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800e5de:	f107 030c 	add.w	r3, r7, #12
 800e5e2:	220c      	movs	r2, #12
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f7fe fd6d 	bl	800d0c4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e5ea:	7dfb      	ldrb	r3, [r7, #23]
 800e5ec:	f003 0301 	and.w	r3, r3, #1
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d032      	beq.n	800e65a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2240      	movs	r2, #64	@ 0x40
 800e5f8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e600:	e016      	b.n	800e630 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800e608:	69fb      	ldr	r3, [r7, #28]
 800e60a:	691a      	ldr	r2, [r3, #16]
 800e60c:	f107 010c 	add.w	r1, r7, #12
 800e610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e612:	f7ff fe53 	bl	800e2bc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e616:	6878      	ldr	r0, [r7, #4]
 800e618:	f7ff feff 	bl	800e41a <dir_find>
 800e61c:	4603      	mov	r3, r0
 800e61e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800e622:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e626:	2b00      	cmp	r3, #0
 800e628:	d106      	bne.n	800e638 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800e62a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e62c:	3301      	adds	r3, #1
 800e62e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e632:	2b63      	cmp	r3, #99	@ 0x63
 800e634:	d9e5      	bls.n	800e602 <dir_register+0x66>
 800e636:	e000      	b.n	800e63a <dir_register+0x9e>
			if (res != FR_OK) break;
 800e638:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e63a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e63c:	2b64      	cmp	r3, #100	@ 0x64
 800e63e:	d101      	bne.n	800e644 <dir_register+0xa8>
 800e640:	2307      	movs	r3, #7
 800e642:	e09c      	b.n	800e77e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e644:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e648:	2b04      	cmp	r3, #4
 800e64a:	d002      	beq.n	800e652 <dir_register+0xb6>
 800e64c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e650:	e095      	b.n	800e77e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e652:	7dfa      	ldrb	r2, [r7, #23]
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e65a:	7dfb      	ldrb	r3, [r7, #23]
 800e65c:	f003 0302 	and.w	r3, r3, #2
 800e660:	2b00      	cmp	r3, #0
 800e662:	d007      	beq.n	800e674 <dir_register+0xd8>
 800e664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e666:	330c      	adds	r3, #12
 800e668:	4a47      	ldr	r2, [pc, #284]	@ (800e788 <dir_register+0x1ec>)
 800e66a:	fba2 2303 	umull	r2, r3, r2, r3
 800e66e:	089b      	lsrs	r3, r3, #2
 800e670:	3301      	adds	r3, #1
 800e672:	e000      	b.n	800e676 <dir_register+0xda>
 800e674:	2301      	movs	r3, #1
 800e676:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e678:	6a39      	ldr	r1, [r7, #32]
 800e67a:	6878      	ldr	r0, [r7, #4]
 800e67c:	f7ff fcc0 	bl	800e000 <dir_alloc>
 800e680:	4603      	mov	r3, r0
 800e682:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e686:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d148      	bne.n	800e720 <dir_register+0x184>
 800e68e:	6a3b      	ldr	r3, [r7, #32]
 800e690:	3b01      	subs	r3, #1
 800e692:	623b      	str	r3, [r7, #32]
 800e694:	6a3b      	ldr	r3, [r7, #32]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d042      	beq.n	800e720 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	695a      	ldr	r2, [r3, #20]
 800e69e:	6a3b      	ldr	r3, [r7, #32]
 800e6a0:	015b      	lsls	r3, r3, #5
 800e6a2:	1ad3      	subs	r3, r2, r3
 800e6a4:	4619      	mov	r1, r3
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f7ff fb4b 	bl	800dd42 <dir_sdi>
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800e6b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d132      	bne.n	800e720 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	3324      	adds	r3, #36	@ 0x24
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f7ff fe8a 	bl	800e3d8 <sum_sfn>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	69db      	ldr	r3, [r3, #28]
 800e6cc:	4619      	mov	r1, r3
 800e6ce:	69f8      	ldr	r0, [r7, #28]
 800e6d0:	f7fe ff58 	bl	800d584 <move_window>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800e6da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d11d      	bne.n	800e71e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e6e2:	69fb      	ldr	r3, [r7, #28]
 800e6e4:	6918      	ldr	r0, [r3, #16]
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	6a19      	ldr	r1, [r3, #32]
 800e6ea:	6a3b      	ldr	r3, [r7, #32]
 800e6ec:	b2da      	uxtb	r2, r3
 800e6ee:	7efb      	ldrb	r3, [r7, #27]
 800e6f0:	f7ff fd7c 	bl	800e1ec <put_lfn>
				fs->wflag = 1;
 800e6f4:	69fb      	ldr	r3, [r7, #28]
 800e6f6:	2201      	movs	r2, #1
 800e6f8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e6fa:	2100      	movs	r1, #0
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	f7ff fba9 	bl	800de54 <dir_next>
 800e702:	4603      	mov	r3, r0
 800e704:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800e708:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d107      	bne.n	800e720 <dir_register+0x184>
 800e710:	6a3b      	ldr	r3, [r7, #32]
 800e712:	3b01      	subs	r3, #1
 800e714:	623b      	str	r3, [r7, #32]
 800e716:	6a3b      	ldr	r3, [r7, #32]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d1d5      	bne.n	800e6c8 <dir_register+0x12c>
 800e71c:	e000      	b.n	800e720 <dir_register+0x184>
				if (res != FR_OK) break;
 800e71e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e720:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e724:	2b00      	cmp	r3, #0
 800e726:	d128      	bne.n	800e77a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	69db      	ldr	r3, [r3, #28]
 800e72c:	4619      	mov	r1, r3
 800e72e:	69f8      	ldr	r0, [r7, #28]
 800e730:	f7fe ff28 	bl	800d584 <move_window>
 800e734:	4603      	mov	r3, r0
 800e736:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800e73a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d11b      	bne.n	800e77a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	6a1b      	ldr	r3, [r3, #32]
 800e746:	2220      	movs	r2, #32
 800e748:	2100      	movs	r1, #0
 800e74a:	4618      	mov	r0, r3
 800e74c:	f7fe fcdb 	bl	800d106 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	6a18      	ldr	r0, [r3, #32]
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	3324      	adds	r3, #36	@ 0x24
 800e758:	220b      	movs	r2, #11
 800e75a:	4619      	mov	r1, r3
 800e75c:	f7fe fcb2 	bl	800d0c4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	6a1b      	ldr	r3, [r3, #32]
 800e76a:	330c      	adds	r3, #12
 800e76c:	f002 0218 	and.w	r2, r2, #24
 800e770:	b2d2      	uxtb	r2, r2
 800e772:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800e774:	69fb      	ldr	r3, [r7, #28]
 800e776:	2201      	movs	r2, #1
 800e778:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e77a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800e77e:	4618      	mov	r0, r3
 800e780:	3730      	adds	r7, #48	@ 0x30
 800e782:	46bd      	mov	sp, r7
 800e784:	bd80      	pop	{r7, pc}
 800e786:	bf00      	nop
 800e788:	4ec4ec4f 	.word	0x4ec4ec4f

0800e78c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b08a      	sub	sp, #40	@ 0x28
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
 800e794:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e796:	683b      	ldr	r3, [r7, #0]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	613b      	str	r3, [r7, #16]
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	691b      	ldr	r3, [r3, #16]
 800e7a2:	60fb      	str	r3, [r7, #12]
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	617b      	str	r3, [r7, #20]
 800e7a8:	697b      	ldr	r3, [r7, #20]
 800e7aa:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e7ac:	69bb      	ldr	r3, [r7, #24]
 800e7ae:	1c5a      	adds	r2, r3, #1
 800e7b0:	61ba      	str	r2, [r7, #24]
 800e7b2:	693a      	ldr	r2, [r7, #16]
 800e7b4:	4413      	add	r3, r2
 800e7b6:	781b      	ldrb	r3, [r3, #0]
 800e7b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800e7ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e7bc:	2b1f      	cmp	r3, #31
 800e7be:	d940      	bls.n	800e842 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e7c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e7c2:	2b2f      	cmp	r3, #47	@ 0x2f
 800e7c4:	d006      	beq.n	800e7d4 <create_name+0x48>
 800e7c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e7c8:	2b5c      	cmp	r3, #92	@ 0x5c
 800e7ca:	d110      	bne.n	800e7ee <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e7cc:	e002      	b.n	800e7d4 <create_name+0x48>
 800e7ce:	69bb      	ldr	r3, [r7, #24]
 800e7d0:	3301      	adds	r3, #1
 800e7d2:	61bb      	str	r3, [r7, #24]
 800e7d4:	693a      	ldr	r2, [r7, #16]
 800e7d6:	69bb      	ldr	r3, [r7, #24]
 800e7d8:	4413      	add	r3, r2
 800e7da:	781b      	ldrb	r3, [r3, #0]
 800e7dc:	2b2f      	cmp	r3, #47	@ 0x2f
 800e7de:	d0f6      	beq.n	800e7ce <create_name+0x42>
 800e7e0:	693a      	ldr	r2, [r7, #16]
 800e7e2:	69bb      	ldr	r3, [r7, #24]
 800e7e4:	4413      	add	r3, r2
 800e7e6:	781b      	ldrb	r3, [r3, #0]
 800e7e8:	2b5c      	cmp	r3, #92	@ 0x5c
 800e7ea:	d0f0      	beq.n	800e7ce <create_name+0x42>
			break;
 800e7ec:	e02a      	b.n	800e844 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e7ee:	697b      	ldr	r3, [r7, #20]
 800e7f0:	2bfe      	cmp	r3, #254	@ 0xfe
 800e7f2:	d901      	bls.n	800e7f8 <create_name+0x6c>
 800e7f4:	2306      	movs	r3, #6
 800e7f6:	e17d      	b.n	800eaf4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e7f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e7fa:	b2db      	uxtb	r3, r3
 800e7fc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e7fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e800:	2101      	movs	r1, #1
 800e802:	4618      	mov	r0, r3
 800e804:	f001 fcb8 	bl	8010178 <ff_convert>
 800e808:	4603      	mov	r3, r0
 800e80a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e80c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d101      	bne.n	800e816 <create_name+0x8a>
 800e812:	2306      	movs	r3, #6
 800e814:	e16e      	b.n	800eaf4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800e816:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e818:	2b7f      	cmp	r3, #127	@ 0x7f
 800e81a:	d809      	bhi.n	800e830 <create_name+0xa4>
 800e81c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e81e:	4619      	mov	r1, r3
 800e820:	488d      	ldr	r0, [pc, #564]	@ (800ea58 <create_name+0x2cc>)
 800e822:	f7fe fcb2 	bl	800d18a <chk_chr>
 800e826:	4603      	mov	r3, r0
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d001      	beq.n	800e830 <create_name+0xa4>
 800e82c:	2306      	movs	r3, #6
 800e82e:	e161      	b.n	800eaf4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800e830:	697b      	ldr	r3, [r7, #20]
 800e832:	1c5a      	adds	r2, r3, #1
 800e834:	617a      	str	r2, [r7, #20]
 800e836:	005b      	lsls	r3, r3, #1
 800e838:	68fa      	ldr	r2, [r7, #12]
 800e83a:	4413      	add	r3, r2
 800e83c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e83e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e840:	e7b4      	b.n	800e7ac <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800e842:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e844:	693a      	ldr	r2, [r7, #16]
 800e846:	69bb      	ldr	r3, [r7, #24]
 800e848:	441a      	add	r2, r3
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e84e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e850:	2b1f      	cmp	r3, #31
 800e852:	d801      	bhi.n	800e858 <create_name+0xcc>
 800e854:	2304      	movs	r3, #4
 800e856:	e000      	b.n	800e85a <create_name+0xce>
 800e858:	2300      	movs	r3, #0
 800e85a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e85e:	e011      	b.n	800e884 <create_name+0xf8>
		w = lfn[di - 1];
 800e860:	697b      	ldr	r3, [r7, #20]
 800e862:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800e866:	3b01      	subs	r3, #1
 800e868:	005b      	lsls	r3, r3, #1
 800e86a:	68fa      	ldr	r2, [r7, #12]
 800e86c:	4413      	add	r3, r2
 800e86e:	881b      	ldrh	r3, [r3, #0]
 800e870:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800e872:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e874:	2b20      	cmp	r3, #32
 800e876:	d002      	beq.n	800e87e <create_name+0xf2>
 800e878:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e87a:	2b2e      	cmp	r3, #46	@ 0x2e
 800e87c:	d106      	bne.n	800e88c <create_name+0x100>
		di--;
 800e87e:	697b      	ldr	r3, [r7, #20]
 800e880:	3b01      	subs	r3, #1
 800e882:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e884:	697b      	ldr	r3, [r7, #20]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d1ea      	bne.n	800e860 <create_name+0xd4>
 800e88a:	e000      	b.n	800e88e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800e88c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800e88e:	697b      	ldr	r3, [r7, #20]
 800e890:	005b      	lsls	r3, r3, #1
 800e892:	68fa      	ldr	r2, [r7, #12]
 800e894:	4413      	add	r3, r2
 800e896:	2200      	movs	r2, #0
 800e898:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e89a:	697b      	ldr	r3, [r7, #20]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d101      	bne.n	800e8a4 <create_name+0x118>
 800e8a0:	2306      	movs	r3, #6
 800e8a2:	e127      	b.n	800eaf4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	3324      	adds	r3, #36	@ 0x24
 800e8a8:	220b      	movs	r2, #11
 800e8aa:	2120      	movs	r1, #32
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	f7fe fc2a 	bl	800d106 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	61bb      	str	r3, [r7, #24]
 800e8b6:	e002      	b.n	800e8be <create_name+0x132>
 800e8b8:	69bb      	ldr	r3, [r7, #24]
 800e8ba:	3301      	adds	r3, #1
 800e8bc:	61bb      	str	r3, [r7, #24]
 800e8be:	69bb      	ldr	r3, [r7, #24]
 800e8c0:	005b      	lsls	r3, r3, #1
 800e8c2:	68fa      	ldr	r2, [r7, #12]
 800e8c4:	4413      	add	r3, r2
 800e8c6:	881b      	ldrh	r3, [r3, #0]
 800e8c8:	2b20      	cmp	r3, #32
 800e8ca:	d0f5      	beq.n	800e8b8 <create_name+0x12c>
 800e8cc:	69bb      	ldr	r3, [r7, #24]
 800e8ce:	005b      	lsls	r3, r3, #1
 800e8d0:	68fa      	ldr	r2, [r7, #12]
 800e8d2:	4413      	add	r3, r2
 800e8d4:	881b      	ldrh	r3, [r3, #0]
 800e8d6:	2b2e      	cmp	r3, #46	@ 0x2e
 800e8d8:	d0ee      	beq.n	800e8b8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e8da:	69bb      	ldr	r3, [r7, #24]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d009      	beq.n	800e8f4 <create_name+0x168>
 800e8e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e8e4:	f043 0303 	orr.w	r3, r3, #3
 800e8e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e8ec:	e002      	b.n	800e8f4 <create_name+0x168>
 800e8ee:	697b      	ldr	r3, [r7, #20]
 800e8f0:	3b01      	subs	r3, #1
 800e8f2:	617b      	str	r3, [r7, #20]
 800e8f4:	697b      	ldr	r3, [r7, #20]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d009      	beq.n	800e90e <create_name+0x182>
 800e8fa:	697b      	ldr	r3, [r7, #20]
 800e8fc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800e900:	3b01      	subs	r3, #1
 800e902:	005b      	lsls	r3, r3, #1
 800e904:	68fa      	ldr	r2, [r7, #12]
 800e906:	4413      	add	r3, r2
 800e908:	881b      	ldrh	r3, [r3, #0]
 800e90a:	2b2e      	cmp	r3, #46	@ 0x2e
 800e90c:	d1ef      	bne.n	800e8ee <create_name+0x162>

	i = b = 0; ni = 8;
 800e90e:	2300      	movs	r3, #0
 800e910:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e914:	2300      	movs	r3, #0
 800e916:	623b      	str	r3, [r7, #32]
 800e918:	2308      	movs	r3, #8
 800e91a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e91c:	69bb      	ldr	r3, [r7, #24]
 800e91e:	1c5a      	adds	r2, r3, #1
 800e920:	61ba      	str	r2, [r7, #24]
 800e922:	005b      	lsls	r3, r3, #1
 800e924:	68fa      	ldr	r2, [r7, #12]
 800e926:	4413      	add	r3, r2
 800e928:	881b      	ldrh	r3, [r3, #0]
 800e92a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e92c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e92e:	2b00      	cmp	r3, #0
 800e930:	f000 8090 	beq.w	800ea54 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e934:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e936:	2b20      	cmp	r3, #32
 800e938:	d006      	beq.n	800e948 <create_name+0x1bc>
 800e93a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e93c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e93e:	d10a      	bne.n	800e956 <create_name+0x1ca>
 800e940:	69ba      	ldr	r2, [r7, #24]
 800e942:	697b      	ldr	r3, [r7, #20]
 800e944:	429a      	cmp	r2, r3
 800e946:	d006      	beq.n	800e956 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800e948:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e94c:	f043 0303 	orr.w	r3, r3, #3
 800e950:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e954:	e07d      	b.n	800ea52 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e956:	6a3a      	ldr	r2, [r7, #32]
 800e958:	69fb      	ldr	r3, [r7, #28]
 800e95a:	429a      	cmp	r2, r3
 800e95c:	d203      	bcs.n	800e966 <create_name+0x1da>
 800e95e:	69ba      	ldr	r2, [r7, #24]
 800e960:	697b      	ldr	r3, [r7, #20]
 800e962:	429a      	cmp	r2, r3
 800e964:	d123      	bne.n	800e9ae <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800e966:	69fb      	ldr	r3, [r7, #28]
 800e968:	2b0b      	cmp	r3, #11
 800e96a:	d106      	bne.n	800e97a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800e96c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e970:	f043 0303 	orr.w	r3, r3, #3
 800e974:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e978:	e075      	b.n	800ea66 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e97a:	69ba      	ldr	r2, [r7, #24]
 800e97c:	697b      	ldr	r3, [r7, #20]
 800e97e:	429a      	cmp	r2, r3
 800e980:	d005      	beq.n	800e98e <create_name+0x202>
 800e982:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e986:	f043 0303 	orr.w	r3, r3, #3
 800e98a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800e98e:	69ba      	ldr	r2, [r7, #24]
 800e990:	697b      	ldr	r3, [r7, #20]
 800e992:	429a      	cmp	r2, r3
 800e994:	d866      	bhi.n	800ea64 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e996:	697b      	ldr	r3, [r7, #20]
 800e998:	61bb      	str	r3, [r7, #24]
 800e99a:	2308      	movs	r3, #8
 800e99c:	623b      	str	r3, [r7, #32]
 800e99e:	230b      	movs	r3, #11
 800e9a0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e9a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e9a6:	009b      	lsls	r3, r3, #2
 800e9a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e9ac:	e051      	b.n	800ea52 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e9ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9b0:	2b7f      	cmp	r3, #127	@ 0x7f
 800e9b2:	d914      	bls.n	800e9de <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e9b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9b6:	2100      	movs	r1, #0
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	f001 fbdd 	bl	8010178 <ff_convert>
 800e9be:	4603      	mov	r3, r0
 800e9c0:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e9c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d004      	beq.n	800e9d2 <create_name+0x246>
 800e9c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9ca:	3b80      	subs	r3, #128	@ 0x80
 800e9cc:	4a23      	ldr	r2, [pc, #140]	@ (800ea5c <create_name+0x2d0>)
 800e9ce:	5cd3      	ldrb	r3, [r2, r3]
 800e9d0:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e9d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e9d6:	f043 0302 	orr.w	r3, r3, #2
 800e9da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e9de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d007      	beq.n	800e9f4 <create_name+0x268>
 800e9e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9e6:	4619      	mov	r1, r3
 800e9e8:	481d      	ldr	r0, [pc, #116]	@ (800ea60 <create_name+0x2d4>)
 800e9ea:	f7fe fbce 	bl	800d18a <chk_chr>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d008      	beq.n	800ea06 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e9f4:	235f      	movs	r3, #95	@ 0x5f
 800e9f6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800e9f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e9fc:	f043 0303 	orr.w	r3, r3, #3
 800ea00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ea04:	e01b      	b.n	800ea3e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800ea06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ea08:	2b40      	cmp	r3, #64	@ 0x40
 800ea0a:	d909      	bls.n	800ea20 <create_name+0x294>
 800ea0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ea0e:	2b5a      	cmp	r3, #90	@ 0x5a
 800ea10:	d806      	bhi.n	800ea20 <create_name+0x294>
					b |= 2;
 800ea12:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ea16:	f043 0302 	orr.w	r3, r3, #2
 800ea1a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ea1e:	e00e      	b.n	800ea3e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800ea20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ea22:	2b60      	cmp	r3, #96	@ 0x60
 800ea24:	d90b      	bls.n	800ea3e <create_name+0x2b2>
 800ea26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ea28:	2b7a      	cmp	r3, #122	@ 0x7a
 800ea2a:	d808      	bhi.n	800ea3e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800ea2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ea30:	f043 0301 	orr.w	r3, r3, #1
 800ea34:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ea38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ea3a:	3b20      	subs	r3, #32
 800ea3c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800ea3e:	6a3b      	ldr	r3, [r7, #32]
 800ea40:	1c5a      	adds	r2, r3, #1
 800ea42:	623a      	str	r2, [r7, #32]
 800ea44:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ea46:	b2d1      	uxtb	r1, r2
 800ea48:	687a      	ldr	r2, [r7, #4]
 800ea4a:	4413      	add	r3, r2
 800ea4c:	460a      	mov	r2, r1
 800ea4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800ea52:	e763      	b.n	800e91c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800ea54:	bf00      	nop
 800ea56:	e006      	b.n	800ea66 <create_name+0x2da>
 800ea58:	08015bc4 	.word	0x08015bc4
 800ea5c:	08015c34 	.word	0x08015c34
 800ea60:	08015bd0 	.word	0x08015bd0
			if (si > di) break;			/* No extension */
 800ea64:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ea6c:	2be5      	cmp	r3, #229	@ 0xe5
 800ea6e:	d103      	bne.n	800ea78 <create_name+0x2ec>
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2205      	movs	r2, #5
 800ea74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800ea78:	69fb      	ldr	r3, [r7, #28]
 800ea7a:	2b08      	cmp	r3, #8
 800ea7c:	d104      	bne.n	800ea88 <create_name+0x2fc>
 800ea7e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ea82:	009b      	lsls	r3, r3, #2
 800ea84:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800ea88:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ea8c:	f003 030c 	and.w	r3, r3, #12
 800ea90:	2b0c      	cmp	r3, #12
 800ea92:	d005      	beq.n	800eaa0 <create_name+0x314>
 800ea94:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ea98:	f003 0303 	and.w	r3, r3, #3
 800ea9c:	2b03      	cmp	r3, #3
 800ea9e:	d105      	bne.n	800eaac <create_name+0x320>
 800eaa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eaa4:	f043 0302 	orr.w	r3, r3, #2
 800eaa8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800eaac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eab0:	f003 0302 	and.w	r3, r3, #2
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d117      	bne.n	800eae8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800eab8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800eabc:	f003 0303 	and.w	r3, r3, #3
 800eac0:	2b01      	cmp	r3, #1
 800eac2:	d105      	bne.n	800ead0 <create_name+0x344>
 800eac4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eac8:	f043 0310 	orr.w	r3, r3, #16
 800eacc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ead0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ead4:	f003 030c 	and.w	r3, r3, #12
 800ead8:	2b04      	cmp	r3, #4
 800eada:	d105      	bne.n	800eae8 <create_name+0x35c>
 800eadc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eae0:	f043 0308 	orr.w	r3, r3, #8
 800eae4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800eaee:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800eaf2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	3728      	adds	r7, #40	@ 0x28
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}

0800eafc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b086      	sub	sp, #24
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
 800eb04:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800eb0a:	693b      	ldr	r3, [r7, #16]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800eb10:	e002      	b.n	800eb18 <follow_path+0x1c>
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	3301      	adds	r3, #1
 800eb16:	603b      	str	r3, [r7, #0]
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	781b      	ldrb	r3, [r3, #0]
 800eb1c:	2b2f      	cmp	r3, #47	@ 0x2f
 800eb1e:	d0f8      	beq.n	800eb12 <follow_path+0x16>
 800eb20:	683b      	ldr	r3, [r7, #0]
 800eb22:	781b      	ldrb	r3, [r3, #0]
 800eb24:	2b5c      	cmp	r3, #92	@ 0x5c
 800eb26:	d0f4      	beq.n	800eb12 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800eb28:	693b      	ldr	r3, [r7, #16]
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	781b      	ldrb	r3, [r3, #0]
 800eb32:	2b1f      	cmp	r3, #31
 800eb34:	d80a      	bhi.n	800eb4c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2280      	movs	r2, #128	@ 0x80
 800eb3a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800eb3e:	2100      	movs	r1, #0
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	f7ff f8fe 	bl	800dd42 <dir_sdi>
 800eb46:	4603      	mov	r3, r0
 800eb48:	75fb      	strb	r3, [r7, #23]
 800eb4a:	e048      	b.n	800ebde <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800eb4c:	463b      	mov	r3, r7
 800eb4e:	4619      	mov	r1, r3
 800eb50:	6878      	ldr	r0, [r7, #4]
 800eb52:	f7ff fe1b 	bl	800e78c <create_name>
 800eb56:	4603      	mov	r3, r0
 800eb58:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800eb5a:	7dfb      	ldrb	r3, [r7, #23]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d139      	bne.n	800ebd4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	f7ff fc5a 	bl	800e41a <dir_find>
 800eb66:	4603      	mov	r3, r0
 800eb68:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800eb70:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800eb72:	7dfb      	ldrb	r3, [r7, #23]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d00a      	beq.n	800eb8e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800eb78:	7dfb      	ldrb	r3, [r7, #23]
 800eb7a:	2b04      	cmp	r3, #4
 800eb7c:	d12c      	bne.n	800ebd8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800eb7e:	7afb      	ldrb	r3, [r7, #11]
 800eb80:	f003 0304 	and.w	r3, r3, #4
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d127      	bne.n	800ebd8 <follow_path+0xdc>
 800eb88:	2305      	movs	r3, #5
 800eb8a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800eb8c:	e024      	b.n	800ebd8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800eb8e:	7afb      	ldrb	r3, [r7, #11]
 800eb90:	f003 0304 	and.w	r3, r3, #4
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d121      	bne.n	800ebdc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800eb98:	693b      	ldr	r3, [r7, #16]
 800eb9a:	799b      	ldrb	r3, [r3, #6]
 800eb9c:	f003 0310 	and.w	r3, r3, #16
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d102      	bne.n	800ebaa <follow_path+0xae>
				res = FR_NO_PATH; break;
 800eba4:	2305      	movs	r3, #5
 800eba6:	75fb      	strb	r3, [r7, #23]
 800eba8:	e019      	b.n	800ebde <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	695b      	ldr	r3, [r3, #20]
 800ebb4:	68fa      	ldr	r2, [r7, #12]
 800ebb6:	8992      	ldrh	r2, [r2, #12]
 800ebb8:	fbb3 f0f2 	udiv	r0, r3, r2
 800ebbc:	fb00 f202 	mul.w	r2, r0, r2
 800ebc0:	1a9b      	subs	r3, r3, r2
 800ebc2:	440b      	add	r3, r1
 800ebc4:	4619      	mov	r1, r3
 800ebc6:	68f8      	ldr	r0, [r7, #12]
 800ebc8:	f7ff fa61 	bl	800e08e <ld_clust>
 800ebcc:	4602      	mov	r2, r0
 800ebce:	693b      	ldr	r3, [r7, #16]
 800ebd0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ebd2:	e7bb      	b.n	800eb4c <follow_path+0x50>
			if (res != FR_OK) break;
 800ebd4:	bf00      	nop
 800ebd6:	e002      	b.n	800ebde <follow_path+0xe2>
				break;
 800ebd8:	bf00      	nop
 800ebda:	e000      	b.n	800ebde <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ebdc:	bf00      	nop
			}
		}
	}

	return res;
 800ebde:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	3718      	adds	r7, #24
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	bd80      	pop	{r7, pc}

0800ebe8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ebe8:	b480      	push	{r7}
 800ebea:	b087      	sub	sp, #28
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ebf0:	f04f 33ff 	mov.w	r3, #4294967295
 800ebf4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d031      	beq.n	800ec62 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	617b      	str	r3, [r7, #20]
 800ec04:	e002      	b.n	800ec0c <get_ldnumber+0x24>
 800ec06:	697b      	ldr	r3, [r7, #20]
 800ec08:	3301      	adds	r3, #1
 800ec0a:	617b      	str	r3, [r7, #20]
 800ec0c:	697b      	ldr	r3, [r7, #20]
 800ec0e:	781b      	ldrb	r3, [r3, #0]
 800ec10:	2b1f      	cmp	r3, #31
 800ec12:	d903      	bls.n	800ec1c <get_ldnumber+0x34>
 800ec14:	697b      	ldr	r3, [r7, #20]
 800ec16:	781b      	ldrb	r3, [r3, #0]
 800ec18:	2b3a      	cmp	r3, #58	@ 0x3a
 800ec1a:	d1f4      	bne.n	800ec06 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ec1c:	697b      	ldr	r3, [r7, #20]
 800ec1e:	781b      	ldrb	r3, [r3, #0]
 800ec20:	2b3a      	cmp	r3, #58	@ 0x3a
 800ec22:	d11c      	bne.n	800ec5e <get_ldnumber+0x76>
			tp = *path;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	1c5a      	adds	r2, r3, #1
 800ec2e:	60fa      	str	r2, [r7, #12]
 800ec30:	781b      	ldrb	r3, [r3, #0]
 800ec32:	3b30      	subs	r3, #48	@ 0x30
 800ec34:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ec36:	68bb      	ldr	r3, [r7, #8]
 800ec38:	2b09      	cmp	r3, #9
 800ec3a:	d80e      	bhi.n	800ec5a <get_ldnumber+0x72>
 800ec3c:	68fa      	ldr	r2, [r7, #12]
 800ec3e:	697b      	ldr	r3, [r7, #20]
 800ec40:	429a      	cmp	r2, r3
 800ec42:	d10a      	bne.n	800ec5a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ec44:	68bb      	ldr	r3, [r7, #8]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d107      	bne.n	800ec5a <get_ldnumber+0x72>
					vol = (int)i;
 800ec4a:	68bb      	ldr	r3, [r7, #8]
 800ec4c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ec4e:	697b      	ldr	r3, [r7, #20]
 800ec50:	3301      	adds	r3, #1
 800ec52:	617b      	str	r3, [r7, #20]
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	697a      	ldr	r2, [r7, #20]
 800ec58:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ec5a:	693b      	ldr	r3, [r7, #16]
 800ec5c:	e002      	b.n	800ec64 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ec5e:	2300      	movs	r3, #0
 800ec60:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ec62:	693b      	ldr	r3, [r7, #16]
}
 800ec64:	4618      	mov	r0, r3
 800ec66:	371c      	adds	r7, #28
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6e:	4770      	bx	lr

0800ec70 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b082      	sub	sp, #8
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
 800ec78:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	70da      	strb	r2, [r3, #3]
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	f04f 32ff 	mov.w	r2, #4294967295
 800ec86:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ec88:	6839      	ldr	r1, [r7, #0]
 800ec8a:	6878      	ldr	r0, [r7, #4]
 800ec8c:	f7fe fc7a 	bl	800d584 <move_window>
 800ec90:	4603      	mov	r3, r0
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d001      	beq.n	800ec9a <check_fs+0x2a>
 800ec96:	2304      	movs	r3, #4
 800ec98:	e038      	b.n	800ed0c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	333c      	adds	r3, #60	@ 0x3c
 800ec9e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800eca2:	4618      	mov	r0, r3
 800eca4:	f7fe f98c 	bl	800cfc0 <ld_word>
 800eca8:	4603      	mov	r3, r0
 800ecaa:	461a      	mov	r2, r3
 800ecac:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ecb0:	429a      	cmp	r2, r3
 800ecb2:	d001      	beq.n	800ecb8 <check_fs+0x48>
 800ecb4:	2303      	movs	r3, #3
 800ecb6:	e029      	b.n	800ed0c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ecbe:	2be9      	cmp	r3, #233	@ 0xe9
 800ecc0:	d009      	beq.n	800ecd6 <check_fs+0x66>
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ecc8:	2beb      	cmp	r3, #235	@ 0xeb
 800ecca:	d11e      	bne.n	800ed0a <check_fs+0x9a>
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ecd2:	2b90      	cmp	r3, #144	@ 0x90
 800ecd4:	d119      	bne.n	800ed0a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	333c      	adds	r3, #60	@ 0x3c
 800ecda:	3336      	adds	r3, #54	@ 0x36
 800ecdc:	4618      	mov	r0, r3
 800ecde:	f7fe f987 	bl	800cff0 <ld_dword>
 800ece2:	4603      	mov	r3, r0
 800ece4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ece8:	4a0a      	ldr	r2, [pc, #40]	@ (800ed14 <check_fs+0xa4>)
 800ecea:	4293      	cmp	r3, r2
 800ecec:	d101      	bne.n	800ecf2 <check_fs+0x82>
 800ecee:	2300      	movs	r3, #0
 800ecf0:	e00c      	b.n	800ed0c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	333c      	adds	r3, #60	@ 0x3c
 800ecf6:	3352      	adds	r3, #82	@ 0x52
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	f7fe f979 	bl	800cff0 <ld_dword>
 800ecfe:	4603      	mov	r3, r0
 800ed00:	4a05      	ldr	r2, [pc, #20]	@ (800ed18 <check_fs+0xa8>)
 800ed02:	4293      	cmp	r3, r2
 800ed04:	d101      	bne.n	800ed0a <check_fs+0x9a>
 800ed06:	2300      	movs	r3, #0
 800ed08:	e000      	b.n	800ed0c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ed0a:	2302      	movs	r3, #2
}
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	3708      	adds	r7, #8
 800ed10:	46bd      	mov	sp, r7
 800ed12:	bd80      	pop	{r7, pc}
 800ed14:	00544146 	.word	0x00544146
 800ed18:	33544146 	.word	0x33544146

0800ed1c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b096      	sub	sp, #88	@ 0x58
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	60f8      	str	r0, [r7, #12]
 800ed24:	60b9      	str	r1, [r7, #8]
 800ed26:	4613      	mov	r3, r2
 800ed28:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ed30:	68f8      	ldr	r0, [r7, #12]
 800ed32:	f7ff ff59 	bl	800ebe8 <get_ldnumber>
 800ed36:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ed38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	da01      	bge.n	800ed42 <find_volume+0x26>
 800ed3e:	230b      	movs	r3, #11
 800ed40:	e26a      	b.n	800f218 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ed42:	4aa3      	ldr	r2, [pc, #652]	@ (800efd0 <find_volume+0x2b4>)
 800ed44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed4a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ed4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d101      	bne.n	800ed56 <find_volume+0x3a>
 800ed52:	230c      	movs	r3, #12
 800ed54:	e260      	b.n	800f218 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 800ed56:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ed58:	f7fe fa32 	bl	800d1c0 <lock_fs>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d101      	bne.n	800ed66 <find_volume+0x4a>
 800ed62:	230f      	movs	r3, #15
 800ed64:	e258      	b.n	800f218 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 800ed66:	68bb      	ldr	r3, [r7, #8]
 800ed68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ed6a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ed6c:	79fb      	ldrb	r3, [r7, #7]
 800ed6e:	f023 0301 	bic.w	r3, r3, #1
 800ed72:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ed74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed76:	781b      	ldrb	r3, [r3, #0]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d01a      	beq.n	800edb2 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800ed7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed7e:	785b      	ldrb	r3, [r3, #1]
 800ed80:	4618      	mov	r0, r3
 800ed82:	f7fe f87f 	bl	800ce84 <disk_status>
 800ed86:	4603      	mov	r3, r0
 800ed88:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ed8c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ed90:	f003 0301 	and.w	r3, r3, #1
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d10c      	bne.n	800edb2 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ed98:	79fb      	ldrb	r3, [r7, #7]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d007      	beq.n	800edae <find_volume+0x92>
 800ed9e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800eda2:	f003 0304 	and.w	r3, r3, #4
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d001      	beq.n	800edae <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800edaa:	230a      	movs	r3, #10
 800edac:	e234      	b.n	800f218 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 800edae:	2300      	movs	r3, #0
 800edb0:	e232      	b.n	800f218 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800edb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edb4:	2200      	movs	r2, #0
 800edb6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800edb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800edba:	b2da      	uxtb	r2, r3
 800edbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edbe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800edc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edc2:	785b      	ldrb	r3, [r3, #1]
 800edc4:	4618      	mov	r0, r3
 800edc6:	f7fe f877 	bl	800ceb8 <disk_initialize>
 800edca:	4603      	mov	r3, r0
 800edcc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800edd0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800edd4:	f003 0301 	and.w	r3, r3, #1
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d001      	beq.n	800ede0 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800eddc:	2303      	movs	r3, #3
 800edde:	e21b      	b.n	800f218 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ede0:	79fb      	ldrb	r3, [r7, #7]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d007      	beq.n	800edf6 <find_volume+0xda>
 800ede6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800edea:	f003 0304 	and.w	r3, r3, #4
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d001      	beq.n	800edf6 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800edf2:	230a      	movs	r3, #10
 800edf4:	e210      	b.n	800f218 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800edf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edf8:	7858      	ldrb	r0, [r3, #1]
 800edfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edfc:	330c      	adds	r3, #12
 800edfe:	461a      	mov	r2, r3
 800ee00:	2102      	movs	r1, #2
 800ee02:	f7fe f8bf 	bl	800cf84 <disk_ioctl>
 800ee06:	4603      	mov	r3, r0
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d001      	beq.n	800ee10 <find_volume+0xf4>
 800ee0c:	2301      	movs	r3, #1
 800ee0e:	e203      	b.n	800f218 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800ee10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee12:	899b      	ldrh	r3, [r3, #12]
 800ee14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ee18:	d80d      	bhi.n	800ee36 <find_volume+0x11a>
 800ee1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee1c:	899b      	ldrh	r3, [r3, #12]
 800ee1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ee22:	d308      	bcc.n	800ee36 <find_volume+0x11a>
 800ee24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee26:	899b      	ldrh	r3, [r3, #12]
 800ee28:	461a      	mov	r2, r3
 800ee2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee2c:	899b      	ldrh	r3, [r3, #12]
 800ee2e:	3b01      	subs	r3, #1
 800ee30:	4013      	ands	r3, r2
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d001      	beq.n	800ee3a <find_volume+0x11e>
 800ee36:	2301      	movs	r3, #1
 800ee38:	e1ee      	b.n	800f218 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ee3e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ee40:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ee42:	f7ff ff15 	bl	800ec70 <check_fs>
 800ee46:	4603      	mov	r3, r0
 800ee48:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ee4c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ee50:	2b02      	cmp	r3, #2
 800ee52:	d149      	bne.n	800eee8 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ee54:	2300      	movs	r3, #0
 800ee56:	643b      	str	r3, [r7, #64]	@ 0x40
 800ee58:	e01e      	b.n	800ee98 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ee5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee5c:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800ee60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ee62:	011b      	lsls	r3, r3, #4
 800ee64:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800ee68:	4413      	add	r3, r2
 800ee6a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ee6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee6e:	3304      	adds	r3, #4
 800ee70:	781b      	ldrb	r3, [r3, #0]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d006      	beq.n	800ee84 <find_volume+0x168>
 800ee76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee78:	3308      	adds	r3, #8
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	f7fe f8b8 	bl	800cff0 <ld_dword>
 800ee80:	4602      	mov	r2, r0
 800ee82:	e000      	b.n	800ee86 <find_volume+0x16a>
 800ee84:	2200      	movs	r2, #0
 800ee86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ee88:	009b      	lsls	r3, r3, #2
 800ee8a:	3358      	adds	r3, #88	@ 0x58
 800ee8c:	443b      	add	r3, r7
 800ee8e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ee92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ee94:	3301      	adds	r3, #1
 800ee96:	643b      	str	r3, [r7, #64]	@ 0x40
 800ee98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ee9a:	2b03      	cmp	r3, #3
 800ee9c:	d9dd      	bls.n	800ee5a <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ee9e:	2300      	movs	r3, #0
 800eea0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800eea2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d002      	beq.n	800eeae <find_volume+0x192>
 800eea8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eeaa:	3b01      	subs	r3, #1
 800eeac:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800eeae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eeb0:	009b      	lsls	r3, r3, #2
 800eeb2:	3358      	adds	r3, #88	@ 0x58
 800eeb4:	443b      	add	r3, r7
 800eeb6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800eeba:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800eebc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d005      	beq.n	800eece <find_volume+0x1b2>
 800eec2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800eec4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800eec6:	f7ff fed3 	bl	800ec70 <check_fs>
 800eeca:	4603      	mov	r3, r0
 800eecc:	e000      	b.n	800eed0 <find_volume+0x1b4>
 800eece:	2303      	movs	r3, #3
 800eed0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800eed4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800eed8:	2b01      	cmp	r3, #1
 800eeda:	d905      	bls.n	800eee8 <find_volume+0x1cc>
 800eedc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eede:	3301      	adds	r3, #1
 800eee0:	643b      	str	r3, [r7, #64]	@ 0x40
 800eee2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eee4:	2b03      	cmp	r3, #3
 800eee6:	d9e2      	bls.n	800eeae <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800eee8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800eeec:	2b04      	cmp	r3, #4
 800eeee:	d101      	bne.n	800eef4 <find_volume+0x1d8>
 800eef0:	2301      	movs	r3, #1
 800eef2:	e191      	b.n	800f218 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800eef4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800eef8:	2b01      	cmp	r3, #1
 800eefa:	d901      	bls.n	800ef00 <find_volume+0x1e4>
 800eefc:	230d      	movs	r3, #13
 800eefe:	e18b      	b.n	800f218 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ef00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef02:	333c      	adds	r3, #60	@ 0x3c
 800ef04:	330b      	adds	r3, #11
 800ef06:	4618      	mov	r0, r3
 800ef08:	f7fe f85a 	bl	800cfc0 <ld_word>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	461a      	mov	r2, r3
 800ef10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef12:	899b      	ldrh	r3, [r3, #12]
 800ef14:	429a      	cmp	r2, r3
 800ef16:	d001      	beq.n	800ef1c <find_volume+0x200>
 800ef18:	230d      	movs	r3, #13
 800ef1a:	e17d      	b.n	800f218 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ef1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef1e:	333c      	adds	r3, #60	@ 0x3c
 800ef20:	3316      	adds	r3, #22
 800ef22:	4618      	mov	r0, r3
 800ef24:	f7fe f84c 	bl	800cfc0 <ld_word>
 800ef28:	4603      	mov	r3, r0
 800ef2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ef2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d106      	bne.n	800ef40 <find_volume+0x224>
 800ef32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef34:	333c      	adds	r3, #60	@ 0x3c
 800ef36:	3324      	adds	r3, #36	@ 0x24
 800ef38:	4618      	mov	r0, r3
 800ef3a:	f7fe f859 	bl	800cff0 <ld_dword>
 800ef3e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800ef40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ef44:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ef46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef48:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 800ef4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef4e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ef50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef52:	789b      	ldrb	r3, [r3, #2]
 800ef54:	2b01      	cmp	r3, #1
 800ef56:	d005      	beq.n	800ef64 <find_volume+0x248>
 800ef58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef5a:	789b      	ldrb	r3, [r3, #2]
 800ef5c:	2b02      	cmp	r3, #2
 800ef5e:	d001      	beq.n	800ef64 <find_volume+0x248>
 800ef60:	230d      	movs	r3, #13
 800ef62:	e159      	b.n	800f218 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ef64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef66:	789b      	ldrb	r3, [r3, #2]
 800ef68:	461a      	mov	r2, r3
 800ef6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ef6c:	fb02 f303 	mul.w	r3, r2, r3
 800ef70:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ef72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef74:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800ef78:	461a      	mov	r2, r3
 800ef7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef7c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ef7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef80:	895b      	ldrh	r3, [r3, #10]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d008      	beq.n	800ef98 <find_volume+0x27c>
 800ef86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef88:	895b      	ldrh	r3, [r3, #10]
 800ef8a:	461a      	mov	r2, r3
 800ef8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef8e:	895b      	ldrh	r3, [r3, #10]
 800ef90:	3b01      	subs	r3, #1
 800ef92:	4013      	ands	r3, r2
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d001      	beq.n	800ef9c <find_volume+0x280>
 800ef98:	230d      	movs	r3, #13
 800ef9a:	e13d      	b.n	800f218 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ef9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef9e:	333c      	adds	r3, #60	@ 0x3c
 800efa0:	3311      	adds	r3, #17
 800efa2:	4618      	mov	r0, r3
 800efa4:	f7fe f80c 	bl	800cfc0 <ld_word>
 800efa8:	4603      	mov	r3, r0
 800efaa:	461a      	mov	r2, r3
 800efac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efae:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800efb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efb2:	891b      	ldrh	r3, [r3, #8]
 800efb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800efb6:	8992      	ldrh	r2, [r2, #12]
 800efb8:	0952      	lsrs	r2, r2, #5
 800efba:	b292      	uxth	r2, r2
 800efbc:	fbb3 f1f2 	udiv	r1, r3, r2
 800efc0:	fb01 f202 	mul.w	r2, r1, r2
 800efc4:	1a9b      	subs	r3, r3, r2
 800efc6:	b29b      	uxth	r3, r3
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d003      	beq.n	800efd4 <find_volume+0x2b8>
 800efcc:	230d      	movs	r3, #13
 800efce:	e123      	b.n	800f218 <find_volume+0x4fc>
 800efd0:	20002ba0 	.word	0x20002ba0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800efd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efd6:	333c      	adds	r3, #60	@ 0x3c
 800efd8:	3313      	adds	r3, #19
 800efda:	4618      	mov	r0, r3
 800efdc:	f7fd fff0 	bl	800cfc0 <ld_word>
 800efe0:	4603      	mov	r3, r0
 800efe2:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800efe4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d106      	bne.n	800eff8 <find_volume+0x2dc>
 800efea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efec:	333c      	adds	r3, #60	@ 0x3c
 800efee:	3320      	adds	r3, #32
 800eff0:	4618      	mov	r0, r3
 800eff2:	f7fd fffd 	bl	800cff0 <ld_dword>
 800eff6:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800eff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800effa:	333c      	adds	r3, #60	@ 0x3c
 800effc:	330e      	adds	r3, #14
 800effe:	4618      	mov	r0, r3
 800f000:	f7fd ffde 	bl	800cfc0 <ld_word>
 800f004:	4603      	mov	r3, r0
 800f006:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f008:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d101      	bne.n	800f012 <find_volume+0x2f6>
 800f00e:	230d      	movs	r3, #13
 800f010:	e102      	b.n	800f218 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f012:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f014:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f016:	4413      	add	r3, r2
 800f018:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f01a:	8911      	ldrh	r1, [r2, #8]
 800f01c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f01e:	8992      	ldrh	r2, [r2, #12]
 800f020:	0952      	lsrs	r2, r2, #5
 800f022:	b292      	uxth	r2, r2
 800f024:	fbb1 f2f2 	udiv	r2, r1, r2
 800f028:	b292      	uxth	r2, r2
 800f02a:	4413      	add	r3, r2
 800f02c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f02e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f032:	429a      	cmp	r2, r3
 800f034:	d201      	bcs.n	800f03a <find_volume+0x31e>
 800f036:	230d      	movs	r3, #13
 800f038:	e0ee      	b.n	800f218 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f03a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f03c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f03e:	1ad3      	subs	r3, r2, r3
 800f040:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f042:	8952      	ldrh	r2, [r2, #10]
 800f044:	fbb3 f3f2 	udiv	r3, r3, r2
 800f048:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d101      	bne.n	800f054 <find_volume+0x338>
 800f050:	230d      	movs	r3, #13
 800f052:	e0e1      	b.n	800f218 <find_volume+0x4fc>
		fmt = FS_FAT32;
 800f054:	2303      	movs	r3, #3
 800f056:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f05a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f05c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800f060:	4293      	cmp	r3, r2
 800f062:	d802      	bhi.n	800f06a <find_volume+0x34e>
 800f064:	2302      	movs	r3, #2
 800f066:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f06c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800f070:	4293      	cmp	r3, r2
 800f072:	d802      	bhi.n	800f07a <find_volume+0x35e>
 800f074:	2301      	movs	r3, #1
 800f076:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f07a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f07c:	1c9a      	adds	r2, r3, #2
 800f07e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f080:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800f082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f084:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f086:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f088:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f08a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f08c:	441a      	add	r2, r3
 800f08e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f090:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800f092:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f096:	441a      	add	r2, r3
 800f098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f09a:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 800f09c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f0a0:	2b03      	cmp	r3, #3
 800f0a2:	d11e      	bne.n	800f0e2 <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f0a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0a6:	333c      	adds	r3, #60	@ 0x3c
 800f0a8:	332a      	adds	r3, #42	@ 0x2a
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	f7fd ff88 	bl	800cfc0 <ld_word>
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d001      	beq.n	800f0ba <find_volume+0x39e>
 800f0b6:	230d      	movs	r3, #13
 800f0b8:	e0ae      	b.n	800f218 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f0ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0bc:	891b      	ldrh	r3, [r3, #8]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d001      	beq.n	800f0c6 <find_volume+0x3aa>
 800f0c2:	230d      	movs	r3, #13
 800f0c4:	e0a8      	b.n	800f218 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f0c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0c8:	333c      	adds	r3, #60	@ 0x3c
 800f0ca:	332c      	adds	r3, #44	@ 0x2c
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f7fd ff8f 	bl	800cff0 <ld_dword>
 800f0d2:	4602      	mov	r2, r0
 800f0d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0d6:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f0d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0da:	6a1b      	ldr	r3, [r3, #32]
 800f0dc:	009b      	lsls	r3, r3, #2
 800f0de:	647b      	str	r3, [r7, #68]	@ 0x44
 800f0e0:	e01f      	b.n	800f122 <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f0e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0e4:	891b      	ldrh	r3, [r3, #8]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d101      	bne.n	800f0ee <find_volume+0x3d2>
 800f0ea:	230d      	movs	r3, #13
 800f0ec:	e094      	b.n	800f218 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f0ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f0f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f0f4:	441a      	add	r2, r3
 800f0f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0f8:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f0fa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f0fe:	2b02      	cmp	r3, #2
 800f100:	d103      	bne.n	800f10a <find_volume+0x3ee>
 800f102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f104:	6a1b      	ldr	r3, [r3, #32]
 800f106:	005b      	lsls	r3, r3, #1
 800f108:	e00a      	b.n	800f120 <find_volume+0x404>
 800f10a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f10c:	6a1a      	ldr	r2, [r3, #32]
 800f10e:	4613      	mov	r3, r2
 800f110:	005b      	lsls	r3, r3, #1
 800f112:	4413      	add	r3, r2
 800f114:	085a      	lsrs	r2, r3, #1
 800f116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f118:	6a1b      	ldr	r3, [r3, #32]
 800f11a:	f003 0301 	and.w	r3, r3, #1
 800f11e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f120:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f124:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f128:	899b      	ldrh	r3, [r3, #12]
 800f12a:	4619      	mov	r1, r3
 800f12c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f12e:	440b      	add	r3, r1
 800f130:	3b01      	subs	r3, #1
 800f132:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f134:	8989      	ldrh	r1, [r1, #12]
 800f136:	fbb3 f3f1 	udiv	r3, r3, r1
 800f13a:	429a      	cmp	r2, r3
 800f13c:	d201      	bcs.n	800f142 <find_volume+0x426>
 800f13e:	230d      	movs	r3, #13
 800f140:	e06a      	b.n	800f218 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f144:	f04f 32ff 	mov.w	r2, #4294967295
 800f148:	61da      	str	r2, [r3, #28]
 800f14a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f14c:	69da      	ldr	r2, [r3, #28]
 800f14e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f150:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800f152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f154:	2280      	movs	r2, #128	@ 0x80
 800f156:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f158:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f15c:	2b03      	cmp	r3, #3
 800f15e:	d149      	bne.n	800f1f4 <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f162:	333c      	adds	r3, #60	@ 0x3c
 800f164:	3330      	adds	r3, #48	@ 0x30
 800f166:	4618      	mov	r0, r3
 800f168:	f7fd ff2a 	bl	800cfc0 <ld_word>
 800f16c:	4603      	mov	r3, r0
 800f16e:	2b01      	cmp	r3, #1
 800f170:	d140      	bne.n	800f1f4 <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f172:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f174:	3301      	adds	r3, #1
 800f176:	4619      	mov	r1, r3
 800f178:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f17a:	f7fe fa03 	bl	800d584 <move_window>
 800f17e:	4603      	mov	r3, r0
 800f180:	2b00      	cmp	r3, #0
 800f182:	d137      	bne.n	800f1f4 <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 800f184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f186:	2200      	movs	r2, #0
 800f188:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f18a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f18c:	333c      	adds	r3, #60	@ 0x3c
 800f18e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f192:	4618      	mov	r0, r3
 800f194:	f7fd ff14 	bl	800cfc0 <ld_word>
 800f198:	4603      	mov	r3, r0
 800f19a:	461a      	mov	r2, r3
 800f19c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f1a0:	429a      	cmp	r2, r3
 800f1a2:	d127      	bne.n	800f1f4 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f1a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1a6:	333c      	adds	r3, #60	@ 0x3c
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	f7fd ff21 	bl	800cff0 <ld_dword>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	4a1b      	ldr	r2, [pc, #108]	@ (800f220 <find_volume+0x504>)
 800f1b2:	4293      	cmp	r3, r2
 800f1b4:	d11e      	bne.n	800f1f4 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f1b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1b8:	333c      	adds	r3, #60	@ 0x3c
 800f1ba:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f7fd ff16 	bl	800cff0 <ld_dword>
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	4a17      	ldr	r2, [pc, #92]	@ (800f224 <find_volume+0x508>)
 800f1c8:	4293      	cmp	r3, r2
 800f1ca:	d113      	bne.n	800f1f4 <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f1cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1ce:	333c      	adds	r3, #60	@ 0x3c
 800f1d0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	f7fd ff0b 	bl	800cff0 <ld_dword>
 800f1da:	4602      	mov	r2, r0
 800f1dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1de:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f1e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1e2:	333c      	adds	r3, #60	@ 0x3c
 800f1e4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	f7fd ff01 	bl	800cff0 <ld_dword>
 800f1ee:	4602      	mov	r2, r0
 800f1f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1f2:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f1f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1f6:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800f1fa:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f1fc:	4b0a      	ldr	r3, [pc, #40]	@ (800f228 <find_volume+0x50c>)
 800f1fe:	881b      	ldrh	r3, [r3, #0]
 800f200:	3301      	adds	r3, #1
 800f202:	b29a      	uxth	r2, r3
 800f204:	4b08      	ldr	r3, [pc, #32]	@ (800f228 <find_volume+0x50c>)
 800f206:	801a      	strh	r2, [r3, #0]
 800f208:	4b07      	ldr	r3, [pc, #28]	@ (800f228 <find_volume+0x50c>)
 800f20a:	881a      	ldrh	r2, [r3, #0]
 800f20c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f20e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f210:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f212:	f7fe f94f 	bl	800d4b4 <clear_lock>
#endif
	return FR_OK;
 800f216:	2300      	movs	r3, #0
}
 800f218:	4618      	mov	r0, r3
 800f21a:	3758      	adds	r7, #88	@ 0x58
 800f21c:	46bd      	mov	sp, r7
 800f21e:	bd80      	pop	{r7, pc}
 800f220:	41615252 	.word	0x41615252
 800f224:	61417272 	.word	0x61417272
 800f228:	20002ba4 	.word	0x20002ba4

0800f22c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b084      	sub	sp, #16
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
 800f234:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f236:	2309      	movs	r3, #9
 800f238:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d02e      	beq.n	800f29e <validate+0x72>
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d02a      	beq.n	800f29e <validate+0x72>
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	781b      	ldrb	r3, [r3, #0]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d025      	beq.n	800f29e <validate+0x72>
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	889a      	ldrh	r2, [r3, #4]
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	88db      	ldrh	r3, [r3, #6]
 800f25c:	429a      	cmp	r2, r3
 800f25e:	d11e      	bne.n	800f29e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	4618      	mov	r0, r3
 800f266:	f7fd ffab 	bl	800d1c0 <lock_fs>
 800f26a:	4603      	mov	r3, r0
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d014      	beq.n	800f29a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	785b      	ldrb	r3, [r3, #1]
 800f276:	4618      	mov	r0, r3
 800f278:	f7fd fe04 	bl	800ce84 <disk_status>
 800f27c:	4603      	mov	r3, r0
 800f27e:	f003 0301 	and.w	r3, r3, #1
 800f282:	2b00      	cmp	r3, #0
 800f284:	d102      	bne.n	800f28c <validate+0x60>
				res = FR_OK;
 800f286:	2300      	movs	r3, #0
 800f288:	73fb      	strb	r3, [r7, #15]
 800f28a:	e008      	b.n	800f29e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	2100      	movs	r1, #0
 800f292:	4618      	mov	r0, r3
 800f294:	f7fd ffaa 	bl	800d1ec <unlock_fs>
 800f298:	e001      	b.n	800f29e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800f29a:	230f      	movs	r3, #15
 800f29c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f29e:	7bfb      	ldrb	r3, [r7, #15]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d102      	bne.n	800f2aa <validate+0x7e>
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	e000      	b.n	800f2ac <validate+0x80>
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	683a      	ldr	r2, [r7, #0]
 800f2ae:	6013      	str	r3, [r2, #0]
	return res;
 800f2b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	3710      	adds	r7, #16
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}
	...

0800f2bc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b088      	sub	sp, #32
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	60f8      	str	r0, [r7, #12]
 800f2c4:	60b9      	str	r1, [r7, #8]
 800f2c6:	4613      	mov	r3, r2
 800f2c8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f2ca:	68bb      	ldr	r3, [r7, #8]
 800f2cc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f2ce:	f107 0310 	add.w	r3, r7, #16
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f7ff fc88 	bl	800ebe8 <get_ldnumber>
 800f2d8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f2da:	69fb      	ldr	r3, [r7, #28]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	da01      	bge.n	800f2e4 <f_mount+0x28>
 800f2e0:	230b      	movs	r3, #11
 800f2e2:	e048      	b.n	800f376 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f2e4:	4a26      	ldr	r2, [pc, #152]	@ (800f380 <f_mount+0xc4>)
 800f2e6:	69fb      	ldr	r3, [r7, #28]
 800f2e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2ec:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f2ee:	69bb      	ldr	r3, [r7, #24]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d00f      	beq.n	800f314 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f2f4:	69b8      	ldr	r0, [r7, #24]
 800f2f6:	f7fe f8dd 	bl	800d4b4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800f2fa:	69bb      	ldr	r3, [r7, #24]
 800f2fc:	695b      	ldr	r3, [r3, #20]
 800f2fe:	4618      	mov	r0, r3
 800f300:	f001 f820 	bl	8010344 <ff_del_syncobj>
 800f304:	4603      	mov	r3, r0
 800f306:	2b00      	cmp	r3, #0
 800f308:	d101      	bne.n	800f30e <f_mount+0x52>
 800f30a:	2302      	movs	r3, #2
 800f30c:	e033      	b.n	800f376 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f30e:	69bb      	ldr	r3, [r7, #24]
 800f310:	2200      	movs	r2, #0
 800f312:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d00f      	beq.n	800f33a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	2200      	movs	r2, #0
 800f31e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800f320:	69fb      	ldr	r3, [r7, #28]
 800f322:	b2da      	uxtb	r2, r3
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	3314      	adds	r3, #20
 800f328:	4619      	mov	r1, r3
 800f32a:	4610      	mov	r0, r2
 800f32c:	f000 ffea 	bl	8010304 <ff_cre_syncobj>
 800f330:	4603      	mov	r3, r0
 800f332:	2b00      	cmp	r3, #0
 800f334:	d101      	bne.n	800f33a <f_mount+0x7e>
 800f336:	2302      	movs	r3, #2
 800f338:	e01d      	b.n	800f376 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f33a:	68fa      	ldr	r2, [r7, #12]
 800f33c:	4910      	ldr	r1, [pc, #64]	@ (800f380 <f_mount+0xc4>)
 800f33e:	69fb      	ldr	r3, [r7, #28]
 800f340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d002      	beq.n	800f350 <f_mount+0x94>
 800f34a:	79fb      	ldrb	r3, [r7, #7]
 800f34c:	2b01      	cmp	r3, #1
 800f34e:	d001      	beq.n	800f354 <f_mount+0x98>
 800f350:	2300      	movs	r3, #0
 800f352:	e010      	b.n	800f376 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f354:	f107 010c 	add.w	r1, r7, #12
 800f358:	f107 0308 	add.w	r3, r7, #8
 800f35c:	2200      	movs	r2, #0
 800f35e:	4618      	mov	r0, r3
 800f360:	f7ff fcdc 	bl	800ed1c <find_volume>
 800f364:	4603      	mov	r3, r0
 800f366:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	7dfa      	ldrb	r2, [r7, #23]
 800f36c:	4611      	mov	r1, r2
 800f36e:	4618      	mov	r0, r3
 800f370:	f7fd ff3c 	bl	800d1ec <unlock_fs>
 800f374:	7dfb      	ldrb	r3, [r7, #23]
}
 800f376:	4618      	mov	r0, r3
 800f378:	3720      	adds	r7, #32
 800f37a:	46bd      	mov	sp, r7
 800f37c:	bd80      	pop	{r7, pc}
 800f37e:	bf00      	nop
 800f380:	20002ba0 	.word	0x20002ba0

0800f384 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f384:	b580      	push	{r7, lr}
 800f386:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 800f38a:	af00      	add	r7, sp, #0
 800f38c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f390:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f394:	6018      	str	r0, [r3, #0]
 800f396:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f39a:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800f39e:	6019      	str	r1, [r3, #0]
 800f3a0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f3a4:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f3a8:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f3aa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f3ae:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d101      	bne.n	800f3bc <f_open+0x38>
 800f3b8:	2309      	movs	r3, #9
 800f3ba:	e2aa      	b.n	800f912 <f_open+0x58e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f3bc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f3c0:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f3c4:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800f3c8:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 800f3cc:	7812      	ldrb	r2, [r2, #0]
 800f3ce:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800f3d2:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800f3d4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f3d8:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f3dc:	781a      	ldrb	r2, [r3, #0]
 800f3de:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 800f3e2:	f107 0308 	add.w	r3, r7, #8
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	f7ff fc98 	bl	800ed1c <find_volume>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
	if (res == FR_OK) {
 800f3f2:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	f040 8276 	bne.w	800f8e8 <f_open+0x564>
		dj.obj.fs = fs;
 800f3fc:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f400:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
		INIT_NAMBUF(fs);
 800f404:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f408:	f107 0214 	add.w	r2, r7, #20
 800f40c:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800f40e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f412:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800f416:	681a      	ldr	r2, [r3, #0]
 800f418:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f41c:	4611      	mov	r1, r2
 800f41e:	4618      	mov	r0, r3
 800f420:	f7ff fb6c 	bl	800eafc <follow_path>
 800f424:	4603      	mov	r3, r0
 800f426:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f42a:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d11c      	bne.n	800f46c <f_open+0xe8>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f432:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 800f436:	b25b      	sxtb	r3, r3
 800f438:	2b00      	cmp	r3, #0
 800f43a:	da03      	bge.n	800f444 <f_open+0xc0>
				res = FR_INVALID_NAME;
 800f43c:	2306      	movs	r3, #6
 800f43e:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 800f442:	e013      	b.n	800f46c <f_open+0xe8>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f444:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f448:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f44c:	781b      	ldrb	r3, [r3, #0]
 800f44e:	2b01      	cmp	r3, #1
 800f450:	bf8c      	ite	hi
 800f452:	2301      	movhi	r3, #1
 800f454:	2300      	movls	r3, #0
 800f456:	b2db      	uxtb	r3, r3
 800f458:	461a      	mov	r2, r3
 800f45a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f45e:	4611      	mov	r1, r2
 800f460:	4618      	mov	r0, r3
 800f462:	f7fd fedf 	bl	800d224 <chk_lock>
 800f466:	4603      	mov	r3, r0
 800f468:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f46c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f470:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f474:	781b      	ldrb	r3, [r3, #0]
 800f476:	f003 031c 	and.w	r3, r3, #28
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	f000 80a7 	beq.w	800f5ce <f_open+0x24a>
			if (res != FR_OK) {					/* No file, create new */
 800f480:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f484:	2b00      	cmp	r3, #0
 800f486:	d01f      	beq.n	800f4c8 <f_open+0x144>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f488:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f48c:	2b04      	cmp	r3, #4
 800f48e:	d10e      	bne.n	800f4ae <f_open+0x12a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f490:	f7fd ff24 	bl	800d2dc <enq_lock>
 800f494:	4603      	mov	r3, r0
 800f496:	2b00      	cmp	r3, #0
 800f498:	d006      	beq.n	800f4a8 <f_open+0x124>
 800f49a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f7ff f87c 	bl	800e59c <dir_register>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	e000      	b.n	800f4aa <f_open+0x126>
 800f4a8:	2312      	movs	r3, #18
 800f4aa:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f4ae:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f4b2:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f4b6:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800f4ba:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 800f4be:	7812      	ldrb	r2, [r2, #0]
 800f4c0:	f042 0208 	orr.w	r2, r2, #8
 800f4c4:	701a      	strb	r2, [r3, #0]
 800f4c6:	e015      	b.n	800f4f4 <f_open+0x170>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f4c8:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 800f4cc:	f003 0311 	and.w	r3, r3, #17
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d003      	beq.n	800f4dc <f_open+0x158>
					res = FR_DENIED;
 800f4d4:	2307      	movs	r3, #7
 800f4d6:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 800f4da:	e00b      	b.n	800f4f4 <f_open+0x170>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f4dc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f4e0:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f4e4:	781b      	ldrb	r3, [r3, #0]
 800f4e6:	f003 0304 	and.w	r3, r3, #4
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d002      	beq.n	800f4f4 <f_open+0x170>
 800f4ee:	2308      	movs	r3, #8
 800f4f0:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f4f4:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	f040 8088 	bne.w	800f60e <f_open+0x28a>
 800f4fe:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f502:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f506:	781b      	ldrb	r3, [r3, #0]
 800f508:	f003 0308 	and.w	r3, r3, #8
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d07e      	beq.n	800f60e <f_open+0x28a>
				dw = GET_FATTIME();
 800f510:	f7fd fc5a 	bl	800cdc8 <get_fattime>
 800f514:	f8c7 0258 	str.w	r0, [r7, #600]	@ 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f518:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800f51c:	330e      	adds	r3, #14
 800f51e:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 800f522:	4618      	mov	r0, r3
 800f524:	f7fd fda2 	bl	800d06c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f528:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800f52c:	3316      	adds	r3, #22
 800f52e:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 800f532:	4618      	mov	r0, r3
 800f534:	f7fd fd9a 	bl	800d06c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f538:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800f53c:	330b      	adds	r3, #11
 800f53e:	2220      	movs	r2, #32
 800f540:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f542:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f546:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800f54a:	4611      	mov	r1, r2
 800f54c:	4618      	mov	r0, r3
 800f54e:	f7fe fd9e 	bl	800e08e <ld_clust>
 800f552:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f556:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f55a:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 800f55e:	2200      	movs	r2, #0
 800f560:	4618      	mov	r0, r3
 800f562:	f7fe fdb3 	bl	800e0cc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f566:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800f56a:	331c      	adds	r3, #28
 800f56c:	2100      	movs	r1, #0
 800f56e:	4618      	mov	r0, r3
 800f570:	f7fd fd7c 	bl	800d06c <st_dword>
					fs->wflag = 1;
 800f574:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f578:	2201      	movs	r2, #1
 800f57a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f57c:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800f580:	2b00      	cmp	r3, #0
 800f582:	d044      	beq.n	800f60e <f_open+0x28a>
						dw = fs->winsect;
 800f584:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f58a:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
						res = remove_chain(&dj.obj, cl, 0);
 800f58e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f592:	2200      	movs	r2, #0
 800f594:	f8d7 1254 	ldr.w	r1, [r7, #596]	@ 0x254
 800f598:	4618      	mov	r0, r3
 800f59a:	f7fe fa9d 	bl	800dad8 <remove_chain>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
						if (res == FR_OK) {
 800f5a4:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d130      	bne.n	800f60e <f_open+0x28a>
							res = move_window(fs, dw);
 800f5ac:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f5b0:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	f7fd ffe5 	bl	800d584 <move_window>
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f5c0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f5c4:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 800f5c8:	3a01      	subs	r2, #1
 800f5ca:	619a      	str	r2, [r3, #24]
 800f5cc:	e01f      	b.n	800f60e <f_open+0x28a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f5ce:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d11b      	bne.n	800f60e <f_open+0x28a>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f5d6:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 800f5da:	f003 0310 	and.w	r3, r3, #16
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d003      	beq.n	800f5ea <f_open+0x266>
					res = FR_NO_FILE;
 800f5e2:	2304      	movs	r3, #4
 800f5e4:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 800f5e8:	e011      	b.n	800f60e <f_open+0x28a>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f5ea:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f5ee:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f5f2:	781b      	ldrb	r3, [r3, #0]
 800f5f4:	f003 0302 	and.w	r3, r3, #2
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d008      	beq.n	800f60e <f_open+0x28a>
 800f5fc:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 800f600:	f003 0301 	and.w	r3, r3, #1
 800f604:	2b00      	cmp	r3, #0
 800f606:	d002      	beq.n	800f60e <f_open+0x28a>
						res = FR_DENIED;
 800f608:	2307      	movs	r3, #7
 800f60a:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 800f60e:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f612:	2b00      	cmp	r3, #0
 800f614:	d148      	bne.n	800f6a8 <f_open+0x324>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f616:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f61a:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f61e:	781b      	ldrb	r3, [r3, #0]
 800f620:	f003 0308 	and.w	r3, r3, #8
 800f624:	2b00      	cmp	r3, #0
 800f626:	d00b      	beq.n	800f640 <f_open+0x2bc>
				mode |= FA_MODIFIED;
 800f628:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f62c:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f630:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800f634:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 800f638:	7812      	ldrb	r2, [r2, #0]
 800f63a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f63e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f640:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f644:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f646:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f64a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800f652:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800f656:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f65a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f662:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f666:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f66a:	781b      	ldrb	r3, [r3, #0]
 800f66c:	2b01      	cmp	r3, #1
 800f66e:	bf8c      	ite	hi
 800f670:	2301      	movhi	r3, #1
 800f672:	2300      	movls	r3, #0
 800f674:	b2db      	uxtb	r3, r3
 800f676:	461a      	mov	r2, r3
 800f678:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f67c:	4611      	mov	r1, r2
 800f67e:	4618      	mov	r0, r3
 800f680:	f7fd fe4e 	bl	800d320 <inc_lock>
 800f684:	4602      	mov	r2, r0
 800f686:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f68a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f692:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f696:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	691b      	ldr	r3, [r3, #16]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d102      	bne.n	800f6a8 <f_open+0x324>
 800f6a2:	2302      	movs	r3, #2
 800f6a4:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f6a8:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	f040 811b 	bne.w	800f8e8 <f_open+0x564>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f6b2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f6b6:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800f6ba:	4611      	mov	r1, r2
 800f6bc:	4618      	mov	r0, r3
 800f6be:	f7fe fce6 	bl	800e08e <ld_clust>
 800f6c2:	4602      	mov	r2, r0
 800f6c4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f6c8:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f6d0:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800f6d4:	331c      	adds	r3, #28
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	f7fd fc8a 	bl	800cff0 <ld_dword>
 800f6dc:	4602      	mov	r2, r0
 800f6de:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f6e2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f6ea:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f6ee:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f6f8:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 800f6fc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f700:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f708:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f70c:	88da      	ldrh	r2, [r3, #6]
 800f70e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f712:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f71a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f71e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800f728:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 800f72c:	7812      	ldrb	r2, [r2, #0]
 800f72e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f730:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f734:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	2200      	movs	r2, #0
 800f73c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f73e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f742:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	2200      	movs	r2, #0
 800f74a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f74c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f750:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	2200      	movs	r2, #0
 800f758:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f75a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f75e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	3330      	adds	r3, #48	@ 0x30
 800f766:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800f76a:	2100      	movs	r1, #0
 800f76c:	4618      	mov	r0, r3
 800f76e:	f7fd fcca 	bl	800d106 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f772:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f776:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f77a:	781b      	ldrb	r3, [r3, #0]
 800f77c:	f003 0320 	and.w	r3, r3, #32
 800f780:	2b00      	cmp	r3, #0
 800f782:	f000 80b1 	beq.w	800f8e8 <f_open+0x564>
 800f786:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f78a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	68db      	ldr	r3, [r3, #12]
 800f792:	2b00      	cmp	r3, #0
 800f794:	f000 80a8 	beq.w	800f8e8 <f_open+0x564>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f798:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f79c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	68da      	ldr	r2, [r3, #12]
 800f7a4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f7a8:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f7b0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f7b4:	895b      	ldrh	r3, [r3, #10]
 800f7b6:	461a      	mov	r2, r3
 800f7b8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f7bc:	899b      	ldrh	r3, [r3, #12]
 800f7be:	fb02 f303 	mul.w	r3, r2, r3
 800f7c2:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f7c6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f7ca:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	689b      	ldr	r3, [r3, #8]
 800f7d2:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f7d6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f7da:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	68db      	ldr	r3, [r3, #12]
 800f7e2:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 800f7e6:	e021      	b.n	800f82c <f_open+0x4a8>
					clst = get_fat(&fp->obj, clst);
 800f7e8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f7ec:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f7fd ff81 	bl	800d6fe <get_fat>
 800f7fc:	f8c7 0260 	str.w	r0, [r7, #608]	@ 0x260
					if (clst <= 1) res = FR_INT_ERR;
 800f800:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 800f804:	2b01      	cmp	r3, #1
 800f806:	d802      	bhi.n	800f80e <f_open+0x48a>
 800f808:	2302      	movs	r3, #2
 800f80a:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f80e:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 800f812:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f816:	d102      	bne.n	800f81e <f_open+0x49a>
 800f818:	2301      	movs	r3, #1
 800f81a:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f81e:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800f822:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 800f826:	1ad3      	subs	r3, r2, r3
 800f828:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 800f82c:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f830:	2b00      	cmp	r3, #0
 800f832:	d105      	bne.n	800f840 <f_open+0x4bc>
 800f834:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800f838:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 800f83c:	429a      	cmp	r2, r3
 800f83e:	d8d3      	bhi.n	800f7e8 <f_open+0x464>
				}
				fp->clust = clst;
 800f840:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f844:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 800f84e:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f850:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f854:	2b00      	cmp	r3, #0
 800f856:	d147      	bne.n	800f8e8 <f_open+0x564>
 800f858:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f85c:	899b      	ldrh	r3, [r3, #12]
 800f85e:	461a      	mov	r2, r3
 800f860:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800f864:	fbb3 f1f2 	udiv	r1, r3, r2
 800f868:	fb01 f202 	mul.w	r2, r1, r2
 800f86c:	1a9b      	subs	r3, r3, r2
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d03a      	beq.n	800f8e8 <f_open+0x564>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f872:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f876:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 800f87a:	4618      	mov	r0, r3
 800f87c:	f7fd ff20 	bl	800d6c0 <clust2sect>
 800f880:	f8c7 024c 	str.w	r0, [r7, #588]	@ 0x24c
 800f884:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d103      	bne.n	800f894 <f_open+0x510>
						res = FR_INT_ERR;
 800f88c:	2302      	movs	r3, #2
 800f88e:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 800f892:	e029      	b.n	800f8e8 <f_open+0x564>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f894:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f898:	899b      	ldrh	r3, [r3, #12]
 800f89a:	461a      	mov	r2, r3
 800f89c:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800f8a0:	fbb3 f2f2 	udiv	r2, r3, r2
 800f8a4:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800f8a8:	441a      	add	r2, r3
 800f8aa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f8ae:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f8b6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f8ba:	7858      	ldrb	r0, [r3, #1]
 800f8bc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f8c0:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f8ca:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f8ce:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	6a1a      	ldr	r2, [r3, #32]
 800f8d6:	2301      	movs	r3, #1
 800f8d8:	f7fd fb14 	bl	800cf04 <disk_read>
 800f8dc:	4603      	mov	r3, r0
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d002      	beq.n	800f8e8 <f_open+0x564>
 800f8e2:	2301      	movs	r3, #1
 800f8e4:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f8e8:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d006      	beq.n	800f8fe <f_open+0x57a>
 800f8f0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f8f4:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f8fe:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f902:	f897 2267 	ldrb.w	r2, [r7, #615]	@ 0x267
 800f906:	4611      	mov	r1, r2
 800f908:	4618      	mov	r0, r3
 800f90a:	f7fd fc6f 	bl	800d1ec <unlock_fs>
 800f90e:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
}
 800f912:	4618      	mov	r0, r3
 800f914:	f507 771a 	add.w	r7, r7, #616	@ 0x268
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd80      	pop	{r7, pc}

0800f91c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b08c      	sub	sp, #48	@ 0x30
 800f920:	af00      	add	r7, sp, #0
 800f922:	60f8      	str	r0, [r7, #12]
 800f924:	60b9      	str	r1, [r7, #8]
 800f926:	607a      	str	r2, [r7, #4]
 800f928:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f92a:	68bb      	ldr	r3, [r7, #8]
 800f92c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f92e:	683b      	ldr	r3, [r7, #0]
 800f930:	2200      	movs	r2, #0
 800f932:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	f107 0210 	add.w	r2, r7, #16
 800f93a:	4611      	mov	r1, r2
 800f93c:	4618      	mov	r0, r3
 800f93e:	f7ff fc75 	bl	800f22c <validate>
 800f942:	4603      	mov	r3, r0
 800f944:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f948:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d107      	bne.n	800f960 <f_write+0x44>
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	7d5b      	ldrb	r3, [r3, #21]
 800f954:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800f958:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d009      	beq.n	800f974 <f_write+0x58>
 800f960:	693b      	ldr	r3, [r7, #16]
 800f962:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800f966:	4611      	mov	r1, r2
 800f968:	4618      	mov	r0, r3
 800f96a:	f7fd fc3f 	bl	800d1ec <unlock_fs>
 800f96e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f972:	e192      	b.n	800fc9a <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	7d1b      	ldrb	r3, [r3, #20]
 800f978:	f003 0302 	and.w	r3, r3, #2
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d106      	bne.n	800f98e <f_write+0x72>
 800f980:	693b      	ldr	r3, [r7, #16]
 800f982:	2107      	movs	r1, #7
 800f984:	4618      	mov	r0, r3
 800f986:	f7fd fc31 	bl	800d1ec <unlock_fs>
 800f98a:	2307      	movs	r3, #7
 800f98c:	e185      	b.n	800fc9a <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	699a      	ldr	r2, [r3, #24]
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	441a      	add	r2, r3
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	699b      	ldr	r3, [r3, #24]
 800f99a:	429a      	cmp	r2, r3
 800f99c:	f080 816a 	bcs.w	800fc74 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	699b      	ldr	r3, [r3, #24]
 800f9a4:	43db      	mvns	r3, r3
 800f9a6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f9a8:	e164      	b.n	800fc74 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	699b      	ldr	r3, [r3, #24]
 800f9ae:	693a      	ldr	r2, [r7, #16]
 800f9b0:	8992      	ldrh	r2, [r2, #12]
 800f9b2:	fbb3 f1f2 	udiv	r1, r3, r2
 800f9b6:	fb01 f202 	mul.w	r2, r1, r2
 800f9ba:	1a9b      	subs	r3, r3, r2
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	f040 810f 	bne.w	800fbe0 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	699b      	ldr	r3, [r3, #24]
 800f9c6:	693a      	ldr	r2, [r7, #16]
 800f9c8:	8992      	ldrh	r2, [r2, #12]
 800f9ca:	fbb3 f3f2 	udiv	r3, r3, r2
 800f9ce:	693a      	ldr	r2, [r7, #16]
 800f9d0:	8952      	ldrh	r2, [r2, #10]
 800f9d2:	3a01      	subs	r2, #1
 800f9d4:	4013      	ands	r3, r2
 800f9d6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f9d8:	69bb      	ldr	r3, [r7, #24]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d14d      	bne.n	800fa7a <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	699b      	ldr	r3, [r3, #24]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d10c      	bne.n	800fa00 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	689b      	ldr	r3, [r3, #8]
 800f9ea:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f9ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d11a      	bne.n	800fa28 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	2100      	movs	r1, #0
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f7fe f8d3 	bl	800dba2 <create_chain>
 800f9fc:	62b8      	str	r0, [r7, #40]	@ 0x28
 800f9fe:	e013      	b.n	800fa28 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d007      	beq.n	800fa18 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	699b      	ldr	r3, [r3, #24]
 800fa0c:	4619      	mov	r1, r3
 800fa0e:	68f8      	ldr	r0, [r7, #12]
 800fa10:	f7fe f95f 	bl	800dcd2 <clmt_clust>
 800fa14:	62b8      	str	r0, [r7, #40]	@ 0x28
 800fa16:	e007      	b.n	800fa28 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800fa18:	68fa      	ldr	r2, [r7, #12]
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	69db      	ldr	r3, [r3, #28]
 800fa1e:	4619      	mov	r1, r3
 800fa20:	4610      	mov	r0, r2
 800fa22:	f7fe f8be 	bl	800dba2 <create_chain>
 800fa26:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fa28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	f000 8127 	beq.w	800fc7e <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fa30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa32:	2b01      	cmp	r3, #1
 800fa34:	d109      	bne.n	800fa4a <f_write+0x12e>
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	2202      	movs	r2, #2
 800fa3a:	755a      	strb	r2, [r3, #21]
 800fa3c:	693b      	ldr	r3, [r7, #16]
 800fa3e:	2102      	movs	r1, #2
 800fa40:	4618      	mov	r0, r3
 800fa42:	f7fd fbd3 	bl	800d1ec <unlock_fs>
 800fa46:	2302      	movs	r3, #2
 800fa48:	e127      	b.n	800fc9a <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fa4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa50:	d109      	bne.n	800fa66 <f_write+0x14a>
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	2201      	movs	r2, #1
 800fa56:	755a      	strb	r2, [r3, #21]
 800fa58:	693b      	ldr	r3, [r7, #16]
 800fa5a:	2101      	movs	r1, #1
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	f7fd fbc5 	bl	800d1ec <unlock_fs>
 800fa62:	2301      	movs	r3, #1
 800fa64:	e119      	b.n	800fc9a <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fa6a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	689b      	ldr	r3, [r3, #8]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d102      	bne.n	800fa7a <f_write+0x15e>
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fa78:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	7d1b      	ldrb	r3, [r3, #20]
 800fa7e:	b25b      	sxtb	r3, r3
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	da1d      	bge.n	800fac0 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fa84:	693b      	ldr	r3, [r7, #16]
 800fa86:	7858      	ldrb	r0, [r3, #1]
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	6a1a      	ldr	r2, [r3, #32]
 800fa92:	2301      	movs	r3, #1
 800fa94:	f7fd fa56 	bl	800cf44 <disk_write>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d009      	beq.n	800fab2 <f_write+0x196>
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	2201      	movs	r2, #1
 800faa2:	755a      	strb	r2, [r3, #21]
 800faa4:	693b      	ldr	r3, [r7, #16]
 800faa6:	2101      	movs	r1, #1
 800faa8:	4618      	mov	r0, r3
 800faaa:	f7fd fb9f 	bl	800d1ec <unlock_fs>
 800faae:	2301      	movs	r3, #1
 800fab0:	e0f3      	b.n	800fc9a <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	7d1b      	ldrb	r3, [r3, #20]
 800fab6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800faba:	b2da      	uxtb	r2, r3
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fac0:	693a      	ldr	r2, [r7, #16]
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	69db      	ldr	r3, [r3, #28]
 800fac6:	4619      	mov	r1, r3
 800fac8:	4610      	mov	r0, r2
 800faca:	f7fd fdf9 	bl	800d6c0 <clust2sect>
 800face:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fad0:	697b      	ldr	r3, [r7, #20]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d109      	bne.n	800faea <f_write+0x1ce>
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	2202      	movs	r2, #2
 800fada:	755a      	strb	r2, [r3, #21]
 800fadc:	693b      	ldr	r3, [r7, #16]
 800fade:	2102      	movs	r1, #2
 800fae0:	4618      	mov	r0, r3
 800fae2:	f7fd fb83 	bl	800d1ec <unlock_fs>
 800fae6:	2302      	movs	r3, #2
 800fae8:	e0d7      	b.n	800fc9a <f_write+0x37e>
			sect += csect;
 800faea:	697a      	ldr	r2, [r7, #20]
 800faec:	69bb      	ldr	r3, [r7, #24]
 800faee:	4413      	add	r3, r2
 800faf0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800faf2:	693b      	ldr	r3, [r7, #16]
 800faf4:	899b      	ldrh	r3, [r3, #12]
 800faf6:	461a      	mov	r2, r3
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	fbb3 f3f2 	udiv	r3, r3, r2
 800fafe:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800fb00:	6a3b      	ldr	r3, [r7, #32]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d048      	beq.n	800fb98 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fb06:	69ba      	ldr	r2, [r7, #24]
 800fb08:	6a3b      	ldr	r3, [r7, #32]
 800fb0a:	4413      	add	r3, r2
 800fb0c:	693a      	ldr	r2, [r7, #16]
 800fb0e:	8952      	ldrh	r2, [r2, #10]
 800fb10:	4293      	cmp	r3, r2
 800fb12:	d905      	bls.n	800fb20 <f_write+0x204>
					cc = fs->csize - csect;
 800fb14:	693b      	ldr	r3, [r7, #16]
 800fb16:	895b      	ldrh	r3, [r3, #10]
 800fb18:	461a      	mov	r2, r3
 800fb1a:	69bb      	ldr	r3, [r7, #24]
 800fb1c:	1ad3      	subs	r3, r2, r3
 800fb1e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fb20:	693b      	ldr	r3, [r7, #16]
 800fb22:	7858      	ldrb	r0, [r3, #1]
 800fb24:	6a3b      	ldr	r3, [r7, #32]
 800fb26:	697a      	ldr	r2, [r7, #20]
 800fb28:	69f9      	ldr	r1, [r7, #28]
 800fb2a:	f7fd fa0b 	bl	800cf44 <disk_write>
 800fb2e:	4603      	mov	r3, r0
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d009      	beq.n	800fb48 <f_write+0x22c>
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	2201      	movs	r2, #1
 800fb38:	755a      	strb	r2, [r3, #21]
 800fb3a:	693b      	ldr	r3, [r7, #16]
 800fb3c:	2101      	movs	r1, #1
 800fb3e:	4618      	mov	r0, r3
 800fb40:	f7fd fb54 	bl	800d1ec <unlock_fs>
 800fb44:	2301      	movs	r3, #1
 800fb46:	e0a8      	b.n	800fc9a <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	6a1a      	ldr	r2, [r3, #32]
 800fb4c:	697b      	ldr	r3, [r7, #20]
 800fb4e:	1ad3      	subs	r3, r2, r3
 800fb50:	6a3a      	ldr	r2, [r7, #32]
 800fb52:	429a      	cmp	r2, r3
 800fb54:	d918      	bls.n	800fb88 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	6a1a      	ldr	r2, [r3, #32]
 800fb60:	697b      	ldr	r3, [r7, #20]
 800fb62:	1ad3      	subs	r3, r2, r3
 800fb64:	693a      	ldr	r2, [r7, #16]
 800fb66:	8992      	ldrh	r2, [r2, #12]
 800fb68:	fb02 f303 	mul.w	r3, r2, r3
 800fb6c:	69fa      	ldr	r2, [r7, #28]
 800fb6e:	18d1      	adds	r1, r2, r3
 800fb70:	693b      	ldr	r3, [r7, #16]
 800fb72:	899b      	ldrh	r3, [r3, #12]
 800fb74:	461a      	mov	r2, r3
 800fb76:	f7fd faa5 	bl	800d0c4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	7d1b      	ldrb	r3, [r3, #20]
 800fb7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fb82:	b2da      	uxtb	r2, r3
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800fb88:	693b      	ldr	r3, [r7, #16]
 800fb8a:	899b      	ldrh	r3, [r3, #12]
 800fb8c:	461a      	mov	r2, r3
 800fb8e:	6a3b      	ldr	r3, [r7, #32]
 800fb90:	fb02 f303 	mul.w	r3, r2, r3
 800fb94:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800fb96:	e050      	b.n	800fc3a <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	6a1b      	ldr	r3, [r3, #32]
 800fb9c:	697a      	ldr	r2, [r7, #20]
 800fb9e:	429a      	cmp	r2, r3
 800fba0:	d01b      	beq.n	800fbda <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	699a      	ldr	r2, [r3, #24]
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fbaa:	429a      	cmp	r2, r3
 800fbac:	d215      	bcs.n	800fbda <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800fbae:	693b      	ldr	r3, [r7, #16]
 800fbb0:	7858      	ldrb	r0, [r3, #1]
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fbb8:	2301      	movs	r3, #1
 800fbba:	697a      	ldr	r2, [r7, #20]
 800fbbc:	f7fd f9a2 	bl	800cf04 <disk_read>
 800fbc0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d009      	beq.n	800fbda <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	2201      	movs	r2, #1
 800fbca:	755a      	strb	r2, [r3, #21]
 800fbcc:	693b      	ldr	r3, [r7, #16]
 800fbce:	2101      	movs	r1, #1
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	f7fd fb0b 	bl	800d1ec <unlock_fs>
 800fbd6:	2301      	movs	r3, #1
 800fbd8:	e05f      	b.n	800fc9a <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	697a      	ldr	r2, [r7, #20]
 800fbde:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800fbe0:	693b      	ldr	r3, [r7, #16]
 800fbe2:	899b      	ldrh	r3, [r3, #12]
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	699b      	ldr	r3, [r3, #24]
 800fbea:	693a      	ldr	r2, [r7, #16]
 800fbec:	8992      	ldrh	r2, [r2, #12]
 800fbee:	fbb3 f1f2 	udiv	r1, r3, r2
 800fbf2:	fb01 f202 	mul.w	r2, r1, r2
 800fbf6:	1a9b      	subs	r3, r3, r2
 800fbf8:	1ac3      	subs	r3, r0, r3
 800fbfa:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800fbfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	429a      	cmp	r2, r3
 800fc02:	d901      	bls.n	800fc08 <f_write+0x2ec>
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	699b      	ldr	r3, [r3, #24]
 800fc12:	693a      	ldr	r2, [r7, #16]
 800fc14:	8992      	ldrh	r2, [r2, #12]
 800fc16:	fbb3 f0f2 	udiv	r0, r3, r2
 800fc1a:	fb00 f202 	mul.w	r2, r0, r2
 800fc1e:	1a9b      	subs	r3, r3, r2
 800fc20:	440b      	add	r3, r1
 800fc22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fc24:	69f9      	ldr	r1, [r7, #28]
 800fc26:	4618      	mov	r0, r3
 800fc28:	f7fd fa4c 	bl	800d0c4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	7d1b      	ldrb	r3, [r3, #20]
 800fc30:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800fc34:	b2da      	uxtb	r2, r3
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800fc3a:	69fa      	ldr	r2, [r7, #28]
 800fc3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc3e:	4413      	add	r3, r2
 800fc40:	61fb      	str	r3, [r7, #28]
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	699a      	ldr	r2, [r3, #24]
 800fc46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc48:	441a      	add	r2, r3
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	619a      	str	r2, [r3, #24]
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	68da      	ldr	r2, [r3, #12]
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	699b      	ldr	r3, [r3, #24]
 800fc56:	429a      	cmp	r2, r3
 800fc58:	bf38      	it	cc
 800fc5a:	461a      	movcc	r2, r3
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	60da      	str	r2, [r3, #12]
 800fc60:	683b      	ldr	r3, [r7, #0]
 800fc62:	681a      	ldr	r2, [r3, #0]
 800fc64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc66:	441a      	add	r2, r3
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	601a      	str	r2, [r3, #0]
 800fc6c:	687a      	ldr	r2, [r7, #4]
 800fc6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc70:	1ad3      	subs	r3, r2, r3
 800fc72:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	f47f ae97 	bne.w	800f9aa <f_write+0x8e>
 800fc7c:	e000      	b.n	800fc80 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fc7e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	7d1b      	ldrb	r3, [r3, #20]
 800fc84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fc88:	b2da      	uxtb	r2, r3
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800fc8e:	693b      	ldr	r3, [r7, #16]
 800fc90:	2100      	movs	r1, #0
 800fc92:	4618      	mov	r0, r3
 800fc94:	f7fd faaa 	bl	800d1ec <unlock_fs>
 800fc98:	2300      	movs	r3, #0
}
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	3730      	adds	r7, #48	@ 0x30
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd80      	pop	{r7, pc}

0800fca2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800fca2:	b580      	push	{r7, lr}
 800fca4:	b086      	sub	sp, #24
 800fca6:	af00      	add	r7, sp, #0
 800fca8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	f107 0208 	add.w	r2, r7, #8
 800fcb0:	4611      	mov	r1, r2
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f7ff faba 	bl	800f22c <validate>
 800fcb8:	4603      	mov	r3, r0
 800fcba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fcbc:	7dfb      	ldrb	r3, [r7, #23]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d16d      	bne.n	800fd9e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	7d1b      	ldrb	r3, [r3, #20]
 800fcc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d067      	beq.n	800fd9e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	7d1b      	ldrb	r3, [r3, #20]
 800fcd2:	b25b      	sxtb	r3, r3
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	da1a      	bge.n	800fd0e <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800fcd8:	68bb      	ldr	r3, [r7, #8]
 800fcda:	7858      	ldrb	r0, [r3, #1]
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	6a1a      	ldr	r2, [r3, #32]
 800fce6:	2301      	movs	r3, #1
 800fce8:	f7fd f92c 	bl	800cf44 <disk_write>
 800fcec:	4603      	mov	r3, r0
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d006      	beq.n	800fd00 <f_sync+0x5e>
 800fcf2:	68bb      	ldr	r3, [r7, #8]
 800fcf4:	2101      	movs	r1, #1
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	f7fd fa78 	bl	800d1ec <unlock_fs>
 800fcfc:	2301      	movs	r3, #1
 800fcfe:	e055      	b.n	800fdac <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	7d1b      	ldrb	r3, [r3, #20]
 800fd04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fd08:	b2da      	uxtb	r2, r3
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800fd0e:	f7fd f85b 	bl	800cdc8 <get_fattime>
 800fd12:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800fd14:	68ba      	ldr	r2, [r7, #8]
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd1a:	4619      	mov	r1, r3
 800fd1c:	4610      	mov	r0, r2
 800fd1e:	f7fd fc31 	bl	800d584 <move_window>
 800fd22:	4603      	mov	r3, r0
 800fd24:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800fd26:	7dfb      	ldrb	r3, [r7, #23]
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d138      	bne.n	800fd9e <f_sync+0xfc>
					dir = fp->dir_ptr;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd30:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	330b      	adds	r3, #11
 800fd36:	781a      	ldrb	r2, [r3, #0]
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	330b      	adds	r3, #11
 800fd3c:	f042 0220 	orr.w	r2, r2, #32
 800fd40:	b2d2      	uxtb	r2, r2
 800fd42:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	6818      	ldr	r0, [r3, #0]
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	689b      	ldr	r3, [r3, #8]
 800fd4c:	461a      	mov	r2, r3
 800fd4e:	68f9      	ldr	r1, [r7, #12]
 800fd50:	f7fe f9bc 	bl	800e0cc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	f103 021c 	add.w	r2, r3, #28
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	68db      	ldr	r3, [r3, #12]
 800fd5e:	4619      	mov	r1, r3
 800fd60:	4610      	mov	r0, r2
 800fd62:	f7fd f983 	bl	800d06c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	3316      	adds	r3, #22
 800fd6a:	6939      	ldr	r1, [r7, #16]
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	f7fd f97d 	bl	800d06c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	3312      	adds	r3, #18
 800fd76:	2100      	movs	r1, #0
 800fd78:	4618      	mov	r0, r3
 800fd7a:	f7fd f95c 	bl	800d036 <st_word>
					fs->wflag = 1;
 800fd7e:	68bb      	ldr	r3, [r7, #8]
 800fd80:	2201      	movs	r2, #1
 800fd82:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800fd84:	68bb      	ldr	r3, [r7, #8]
 800fd86:	4618      	mov	r0, r3
 800fd88:	f7fd fc2a 	bl	800d5e0 <sync_fs>
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	7d1b      	ldrb	r3, [r3, #20]
 800fd94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fd98:	b2da      	uxtb	r2, r3
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800fd9e:	68bb      	ldr	r3, [r7, #8]
 800fda0:	7dfa      	ldrb	r2, [r7, #23]
 800fda2:	4611      	mov	r1, r2
 800fda4:	4618      	mov	r0, r3
 800fda6:	f7fd fa21 	bl	800d1ec <unlock_fs>
 800fdaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800fdac:	4618      	mov	r0, r3
 800fdae:	3718      	adds	r7, #24
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	bd80      	pop	{r7, pc}

0800fdb4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b084      	sub	sp, #16
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800fdbc:	6878      	ldr	r0, [r7, #4]
 800fdbe:	f7ff ff70 	bl	800fca2 <f_sync>
 800fdc2:	4603      	mov	r3, r0
 800fdc4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800fdc6:	7bfb      	ldrb	r3, [r7, #15]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d11d      	bne.n	800fe08 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	f107 0208 	add.w	r2, r7, #8
 800fdd2:	4611      	mov	r1, r2
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	f7ff fa29 	bl	800f22c <validate>
 800fdda:	4603      	mov	r3, r0
 800fddc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fdde:	7bfb      	ldrb	r3, [r7, #15]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d111      	bne.n	800fe08 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	691b      	ldr	r3, [r3, #16]
 800fde8:	4618      	mov	r0, r3
 800fdea:	f7fd fb27 	bl	800d43c <dec_lock>
 800fdee:	4603      	mov	r3, r0
 800fdf0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800fdf2:	7bfb      	ldrb	r3, [r7, #15]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d102      	bne.n	800fdfe <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800fdfe:	68bb      	ldr	r3, [r7, #8]
 800fe00:	2100      	movs	r1, #0
 800fe02:	4618      	mov	r0, r3
 800fe04:	f7fd f9f2 	bl	800d1ec <unlock_fs>
#endif
		}
	}
	return res;
 800fe08:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	3710      	adds	r7, #16
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	bd80      	pop	{r7, pc}

0800fe12 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800fe12:	b580      	push	{r7, lr}
 800fe14:	b092      	sub	sp, #72	@ 0x48
 800fe16:	af00      	add	r7, sp, #0
 800fe18:	60f8      	str	r0, [r7, #12]
 800fe1a:	60b9      	str	r1, [r7, #8]
 800fe1c:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800fe1e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800fe22:	f107 030c 	add.w	r3, r7, #12
 800fe26:	2200      	movs	r2, #0
 800fe28:	4618      	mov	r0, r3
 800fe2a:	f7fe ff77 	bl	800ed1c <find_volume>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800fe34:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	f040 8099 	bne.w	800ff70 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800fe3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800fe44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe46:	69da      	ldr	r2, [r3, #28]
 800fe48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe4a:	6a1b      	ldr	r3, [r3, #32]
 800fe4c:	3b02      	subs	r3, #2
 800fe4e:	429a      	cmp	r2, r3
 800fe50:	d804      	bhi.n	800fe5c <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800fe52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe54:	69da      	ldr	r2, [r3, #28]
 800fe56:	68bb      	ldr	r3, [r7, #8]
 800fe58:	601a      	str	r2, [r3, #0]
 800fe5a:	e089      	b.n	800ff70 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800fe60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe62:	781b      	ldrb	r3, [r3, #0]
 800fe64:	2b01      	cmp	r3, #1
 800fe66:	d128      	bne.n	800feba <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800fe68:	2302      	movs	r3, #2
 800fe6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fe6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe6e:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800fe70:	f107 0314 	add.w	r3, r7, #20
 800fe74:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fe76:	4618      	mov	r0, r3
 800fe78:	f7fd fc41 	bl	800d6fe <get_fat>
 800fe7c:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800fe7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe84:	d103      	bne.n	800fe8e <f_getfree+0x7c>
 800fe86:	2301      	movs	r3, #1
 800fe88:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800fe8c:	e063      	b.n	800ff56 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800fe8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe90:	2b01      	cmp	r3, #1
 800fe92:	d103      	bne.n	800fe9c <f_getfree+0x8a>
 800fe94:	2302      	movs	r3, #2
 800fe96:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800fe9a:	e05c      	b.n	800ff56 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800fe9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d102      	bne.n	800fea8 <f_getfree+0x96>
 800fea2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fea4:	3301      	adds	r3, #1
 800fea6:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800fea8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800feaa:	3301      	adds	r3, #1
 800feac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800feae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800feb0:	6a1b      	ldr	r3, [r3, #32]
 800feb2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800feb4:	429a      	cmp	r2, r3
 800feb6:	d3db      	bcc.n	800fe70 <f_getfree+0x5e>
 800feb8:	e04d      	b.n	800ff56 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800feba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800febc:	6a1b      	ldr	r3, [r3, #32]
 800febe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fec4:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800fec6:	2300      	movs	r3, #0
 800fec8:	637b      	str	r3, [r7, #52]	@ 0x34
 800feca:	2300      	movs	r3, #0
 800fecc:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800fece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d113      	bne.n	800fefc <f_getfree+0xea>
							res = move_window(fs, sect++);
 800fed4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fed8:	1c5a      	adds	r2, r3, #1
 800feda:	63ba      	str	r2, [r7, #56]	@ 0x38
 800fedc:	4619      	mov	r1, r3
 800fede:	f7fd fb51 	bl	800d584 <move_window>
 800fee2:	4603      	mov	r3, r0
 800fee4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800fee8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800feec:	2b00      	cmp	r3, #0
 800feee:	d131      	bne.n	800ff54 <f_getfree+0x142>
							p = fs->win;
 800fef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fef2:	333c      	adds	r3, #60	@ 0x3c
 800fef4:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800fef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fef8:	899b      	ldrh	r3, [r3, #12]
 800fefa:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800fefc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fefe:	781b      	ldrb	r3, [r3, #0]
 800ff00:	2b02      	cmp	r3, #2
 800ff02:	d10f      	bne.n	800ff24 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800ff04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ff06:	f7fd f85b 	bl	800cfc0 <ld_word>
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d102      	bne.n	800ff16 <f_getfree+0x104>
 800ff10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ff12:	3301      	adds	r3, #1
 800ff14:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800ff16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff18:	3302      	adds	r3, #2
 800ff1a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ff1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff1e:	3b02      	subs	r3, #2
 800ff20:	637b      	str	r3, [r7, #52]	@ 0x34
 800ff22:	e010      	b.n	800ff46 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800ff24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ff26:	f7fd f863 	bl	800cff0 <ld_dword>
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d102      	bne.n	800ff3a <f_getfree+0x128>
 800ff34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ff36:	3301      	adds	r3, #1
 800ff38:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800ff3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff3c:	3304      	adds	r3, #4
 800ff3e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ff40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff42:	3b04      	subs	r3, #4
 800ff44:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800ff46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff48:	3b01      	subs	r3, #1
 800ff4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ff4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d1bd      	bne.n	800fece <f_getfree+0xbc>
 800ff52:	e000      	b.n	800ff56 <f_getfree+0x144>
							if (res != FR_OK) break;
 800ff54:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800ff56:	68bb      	ldr	r3, [r7, #8]
 800ff58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ff5a:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800ff5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ff60:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800ff62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff64:	791a      	ldrb	r2, [r3, #4]
 800ff66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff68:	f042 0201 	orr.w	r2, r2, #1
 800ff6c:	b2d2      	uxtb	r2, r2
 800ff6e:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800ff70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff72:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800ff76:	4611      	mov	r1, r2
 800ff78:	4618      	mov	r0, r3
 800ff7a:	f7fd f937 	bl	800d1ec <unlock_fs>
 800ff7e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800ff82:	4618      	mov	r0, r3
 800ff84:	3748      	adds	r7, #72	@ 0x48
 800ff86:	46bd      	mov	sp, r7
 800ff88:	bd80      	pop	{r7, pc}

0800ff8a <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800ff8a:	b580      	push	{r7, lr}
 800ff8c:	b084      	sub	sp, #16
 800ff8e:	af00      	add	r7, sp, #0
 800ff90:	6078      	str	r0, [r7, #4]
 800ff92:	460b      	mov	r3, r1
 800ff94:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800ff96:	78fb      	ldrb	r3, [r7, #3]
 800ff98:	2b0a      	cmp	r3, #10
 800ff9a:	d103      	bne.n	800ffa4 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800ff9c:	210d      	movs	r1, #13
 800ff9e:	6878      	ldr	r0, [r7, #4]
 800ffa0:	f7ff fff3 	bl	800ff8a <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	685b      	ldr	r3, [r3, #4]
 800ffa8:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	db25      	blt.n	800fffc <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	1c5a      	adds	r2, r3, #1
 800ffb4:	60fa      	str	r2, [r7, #12]
 800ffb6:	687a      	ldr	r2, [r7, #4]
 800ffb8:	4413      	add	r3, r2
 800ffba:	78fa      	ldrb	r2, [r7, #3]
 800ffbc:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	2b3c      	cmp	r3, #60	@ 0x3c
 800ffc2:	dd12      	ble.n	800ffea <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	6818      	ldr	r0, [r3, #0]
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	f103 010c 	add.w	r1, r3, #12
 800ffce:	68fa      	ldr	r2, [r7, #12]
 800ffd0:	f107 0308 	add.w	r3, r7, #8
 800ffd4:	f7ff fca2 	bl	800f91c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800ffd8:	68ba      	ldr	r2, [r7, #8]
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	429a      	cmp	r2, r3
 800ffde:	d101      	bne.n	800ffe4 <putc_bfd+0x5a>
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	e001      	b.n	800ffe8 <putc_bfd+0x5e>
 800ffe4:	f04f 33ff 	mov.w	r3, #4294967295
 800ffe8:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	68fa      	ldr	r2, [r7, #12]
 800ffee:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	689b      	ldr	r3, [r3, #8]
 800fff4:	1c5a      	adds	r2, r3, #1
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	609a      	str	r2, [r3, #8]
 800fffa:	e000      	b.n	800fffe <putc_bfd+0x74>
	if (i < 0) return;
 800fffc:	bf00      	nop
}
 800fffe:	3710      	adds	r7, #16
 8010000:	46bd      	mov	sp, r7
 8010002:	bd80      	pop	{r7, pc}

08010004 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8010004:	b580      	push	{r7, lr}
 8010006:	b084      	sub	sp, #16
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	685b      	ldr	r3, [r3, #4]
 8010010:	2b00      	cmp	r3, #0
 8010012:	db16      	blt.n	8010042 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	6818      	ldr	r0, [r3, #0]
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	f103 010c 	add.w	r1, r3, #12
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	685b      	ldr	r3, [r3, #4]
 8010022:	461a      	mov	r2, r3
 8010024:	f107 030c 	add.w	r3, r7, #12
 8010028:	f7ff fc78 	bl	800f91c <f_write>
 801002c:	4603      	mov	r3, r0
 801002e:	2b00      	cmp	r3, #0
 8010030:	d107      	bne.n	8010042 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	685b      	ldr	r3, [r3, #4]
 8010036:	68fa      	ldr	r2, [r7, #12]
 8010038:	4293      	cmp	r3, r2
 801003a:	d102      	bne.n	8010042 <putc_flush+0x3e>
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	689b      	ldr	r3, [r3, #8]
 8010040:	e001      	b.n	8010046 <putc_flush+0x42>
	return EOF;
 8010042:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010046:	4618      	mov	r0, r3
 8010048:	3710      	adds	r7, #16
 801004a:	46bd      	mov	sp, r7
 801004c:	bd80      	pop	{r7, pc}

0801004e <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 801004e:	b480      	push	{r7}
 8010050:	b083      	sub	sp, #12
 8010052:	af00      	add	r7, sp, #0
 8010054:	6078      	str	r0, [r7, #4]
 8010056:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	683a      	ldr	r2, [r7, #0]
 801005c:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	2200      	movs	r2, #0
 8010062:	605a      	str	r2, [r3, #4]
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	685a      	ldr	r2, [r3, #4]
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	609a      	str	r2, [r3, #8]
}
 801006c:	bf00      	nop
 801006e:	370c      	adds	r7, #12
 8010070:	46bd      	mov	sp, r7
 8010072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010076:	4770      	bx	lr

08010078 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8010078:	b580      	push	{r7, lr}
 801007a:	b096      	sub	sp, #88	@ 0x58
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
 8010080:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8010082:	f107 030c 	add.w	r3, r7, #12
 8010086:	6839      	ldr	r1, [r7, #0]
 8010088:	4618      	mov	r0, r3
 801008a:	f7ff ffe0 	bl	801004e <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 801008e:	e009      	b.n	80100a4 <f_puts+0x2c>
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	1c5a      	adds	r2, r3, #1
 8010094:	607a      	str	r2, [r7, #4]
 8010096:	781a      	ldrb	r2, [r3, #0]
 8010098:	f107 030c 	add.w	r3, r7, #12
 801009c:	4611      	mov	r1, r2
 801009e:	4618      	mov	r0, r3
 80100a0:	f7ff ff73 	bl	800ff8a <putc_bfd>
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	781b      	ldrb	r3, [r3, #0]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d1f1      	bne.n	8010090 <f_puts+0x18>
	return putc_flush(&pb);
 80100ac:	f107 030c 	add.w	r3, r7, #12
 80100b0:	4618      	mov	r0, r3
 80100b2:	f7ff ffa7 	bl	8010004 <putc_flush>
 80100b6:	4603      	mov	r3, r0
}
 80100b8:	4618      	mov	r0, r3
 80100ba:	3758      	adds	r7, #88	@ 0x58
 80100bc:	46bd      	mov	sp, r7
 80100be:	bd80      	pop	{r7, pc}

080100c0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80100c0:	b480      	push	{r7}
 80100c2:	b087      	sub	sp, #28
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	60f8      	str	r0, [r7, #12]
 80100c8:	60b9      	str	r1, [r7, #8]
 80100ca:	4613      	mov	r3, r2
 80100cc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80100ce:	2301      	movs	r3, #1
 80100d0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80100d2:	2300      	movs	r3, #0
 80100d4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80100d6:	4b1f      	ldr	r3, [pc, #124]	@ (8010154 <FATFS_LinkDriverEx+0x94>)
 80100d8:	7a5b      	ldrb	r3, [r3, #9]
 80100da:	b2db      	uxtb	r3, r3
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d131      	bne.n	8010144 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80100e0:	4b1c      	ldr	r3, [pc, #112]	@ (8010154 <FATFS_LinkDriverEx+0x94>)
 80100e2:	7a5b      	ldrb	r3, [r3, #9]
 80100e4:	b2db      	uxtb	r3, r3
 80100e6:	461a      	mov	r2, r3
 80100e8:	4b1a      	ldr	r3, [pc, #104]	@ (8010154 <FATFS_LinkDriverEx+0x94>)
 80100ea:	2100      	movs	r1, #0
 80100ec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80100ee:	4b19      	ldr	r3, [pc, #100]	@ (8010154 <FATFS_LinkDriverEx+0x94>)
 80100f0:	7a5b      	ldrb	r3, [r3, #9]
 80100f2:	b2db      	uxtb	r3, r3
 80100f4:	4a17      	ldr	r2, [pc, #92]	@ (8010154 <FATFS_LinkDriverEx+0x94>)
 80100f6:	009b      	lsls	r3, r3, #2
 80100f8:	4413      	add	r3, r2
 80100fa:	68fa      	ldr	r2, [r7, #12]
 80100fc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80100fe:	4b15      	ldr	r3, [pc, #84]	@ (8010154 <FATFS_LinkDriverEx+0x94>)
 8010100:	7a5b      	ldrb	r3, [r3, #9]
 8010102:	b2db      	uxtb	r3, r3
 8010104:	461a      	mov	r2, r3
 8010106:	4b13      	ldr	r3, [pc, #76]	@ (8010154 <FATFS_LinkDriverEx+0x94>)
 8010108:	4413      	add	r3, r2
 801010a:	79fa      	ldrb	r2, [r7, #7]
 801010c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801010e:	4b11      	ldr	r3, [pc, #68]	@ (8010154 <FATFS_LinkDriverEx+0x94>)
 8010110:	7a5b      	ldrb	r3, [r3, #9]
 8010112:	b2db      	uxtb	r3, r3
 8010114:	1c5a      	adds	r2, r3, #1
 8010116:	b2d1      	uxtb	r1, r2
 8010118:	4a0e      	ldr	r2, [pc, #56]	@ (8010154 <FATFS_LinkDriverEx+0x94>)
 801011a:	7251      	strb	r1, [r2, #9]
 801011c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801011e:	7dbb      	ldrb	r3, [r7, #22]
 8010120:	3330      	adds	r3, #48	@ 0x30
 8010122:	b2da      	uxtb	r2, r3
 8010124:	68bb      	ldr	r3, [r7, #8]
 8010126:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010128:	68bb      	ldr	r3, [r7, #8]
 801012a:	3301      	adds	r3, #1
 801012c:	223a      	movs	r2, #58	@ 0x3a
 801012e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010130:	68bb      	ldr	r3, [r7, #8]
 8010132:	3302      	adds	r3, #2
 8010134:	222f      	movs	r2, #47	@ 0x2f
 8010136:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010138:	68bb      	ldr	r3, [r7, #8]
 801013a:	3303      	adds	r3, #3
 801013c:	2200      	movs	r2, #0
 801013e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010140:	2300      	movs	r3, #0
 8010142:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010144:	7dfb      	ldrb	r3, [r7, #23]
}
 8010146:	4618      	mov	r0, r3
 8010148:	371c      	adds	r7, #28
 801014a:	46bd      	mov	sp, r7
 801014c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010150:	4770      	bx	lr
 8010152:	bf00      	nop
 8010154:	20002bc8 	.word	0x20002bc8

08010158 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010158:	b580      	push	{r7, lr}
 801015a:	b082      	sub	sp, #8
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]
 8010160:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010162:	2200      	movs	r2, #0
 8010164:	6839      	ldr	r1, [r7, #0]
 8010166:	6878      	ldr	r0, [r7, #4]
 8010168:	f7ff ffaa 	bl	80100c0 <FATFS_LinkDriverEx>
 801016c:	4603      	mov	r3, r0
}
 801016e:	4618      	mov	r0, r3
 8010170:	3708      	adds	r7, #8
 8010172:	46bd      	mov	sp, r7
 8010174:	bd80      	pop	{r7, pc}
	...

08010178 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8010178:	b480      	push	{r7}
 801017a:	b085      	sub	sp, #20
 801017c:	af00      	add	r7, sp, #0
 801017e:	4603      	mov	r3, r0
 8010180:	6039      	str	r1, [r7, #0]
 8010182:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8010184:	88fb      	ldrh	r3, [r7, #6]
 8010186:	2b7f      	cmp	r3, #127	@ 0x7f
 8010188:	d802      	bhi.n	8010190 <ff_convert+0x18>
		c = chr;
 801018a:	88fb      	ldrh	r3, [r7, #6]
 801018c:	81fb      	strh	r3, [r7, #14]
 801018e:	e025      	b.n	80101dc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010190:	683b      	ldr	r3, [r7, #0]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d00b      	beq.n	80101ae <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8010196:	88fb      	ldrh	r3, [r7, #6]
 8010198:	2bff      	cmp	r3, #255	@ 0xff
 801019a:	d805      	bhi.n	80101a8 <ff_convert+0x30>
 801019c:	88fb      	ldrh	r3, [r7, #6]
 801019e:	3b80      	subs	r3, #128	@ 0x80
 80101a0:	4a12      	ldr	r2, [pc, #72]	@ (80101ec <ff_convert+0x74>)
 80101a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80101a6:	e000      	b.n	80101aa <ff_convert+0x32>
 80101a8:	2300      	movs	r3, #0
 80101aa:	81fb      	strh	r3, [r7, #14]
 80101ac:	e016      	b.n	80101dc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80101ae:	2300      	movs	r3, #0
 80101b0:	81fb      	strh	r3, [r7, #14]
 80101b2:	e009      	b.n	80101c8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80101b4:	89fb      	ldrh	r3, [r7, #14]
 80101b6:	4a0d      	ldr	r2, [pc, #52]	@ (80101ec <ff_convert+0x74>)
 80101b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80101bc:	88fa      	ldrh	r2, [r7, #6]
 80101be:	429a      	cmp	r2, r3
 80101c0:	d006      	beq.n	80101d0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80101c2:	89fb      	ldrh	r3, [r7, #14]
 80101c4:	3301      	adds	r3, #1
 80101c6:	81fb      	strh	r3, [r7, #14]
 80101c8:	89fb      	ldrh	r3, [r7, #14]
 80101ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80101cc:	d9f2      	bls.n	80101b4 <ff_convert+0x3c>
 80101ce:	e000      	b.n	80101d2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80101d0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80101d2:	89fb      	ldrh	r3, [r7, #14]
 80101d4:	3380      	adds	r3, #128	@ 0x80
 80101d6:	b29b      	uxth	r3, r3
 80101d8:	b2db      	uxtb	r3, r3
 80101da:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80101dc:	89fb      	ldrh	r3, [r7, #14]
}
 80101de:	4618      	mov	r0, r3
 80101e0:	3714      	adds	r7, #20
 80101e2:	46bd      	mov	sp, r7
 80101e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e8:	4770      	bx	lr
 80101ea:	bf00      	nop
 80101ec:	08015cc4 	.word	0x08015cc4

080101f0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80101f0:	b480      	push	{r7}
 80101f2:	b087      	sub	sp, #28
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	4603      	mov	r3, r0
 80101f8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80101fa:	88fb      	ldrh	r3, [r7, #6]
 80101fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010200:	d201      	bcs.n	8010206 <ff_wtoupper+0x16>
 8010202:	4b3e      	ldr	r3, [pc, #248]	@ (80102fc <ff_wtoupper+0x10c>)
 8010204:	e000      	b.n	8010208 <ff_wtoupper+0x18>
 8010206:	4b3e      	ldr	r3, [pc, #248]	@ (8010300 <ff_wtoupper+0x110>)
 8010208:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801020a:	697b      	ldr	r3, [r7, #20]
 801020c:	1c9a      	adds	r2, r3, #2
 801020e:	617a      	str	r2, [r7, #20]
 8010210:	881b      	ldrh	r3, [r3, #0]
 8010212:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8010214:	8a7b      	ldrh	r3, [r7, #18]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d068      	beq.n	80102ec <ff_wtoupper+0xfc>
 801021a:	88fa      	ldrh	r2, [r7, #6]
 801021c:	8a7b      	ldrh	r3, [r7, #18]
 801021e:	429a      	cmp	r2, r3
 8010220:	d364      	bcc.n	80102ec <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8010222:	697b      	ldr	r3, [r7, #20]
 8010224:	1c9a      	adds	r2, r3, #2
 8010226:	617a      	str	r2, [r7, #20]
 8010228:	881b      	ldrh	r3, [r3, #0]
 801022a:	823b      	strh	r3, [r7, #16]
 801022c:	8a3b      	ldrh	r3, [r7, #16]
 801022e:	0a1b      	lsrs	r3, r3, #8
 8010230:	81fb      	strh	r3, [r7, #14]
 8010232:	8a3b      	ldrh	r3, [r7, #16]
 8010234:	b2db      	uxtb	r3, r3
 8010236:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8010238:	88fa      	ldrh	r2, [r7, #6]
 801023a:	8a79      	ldrh	r1, [r7, #18]
 801023c:	8a3b      	ldrh	r3, [r7, #16]
 801023e:	440b      	add	r3, r1
 8010240:	429a      	cmp	r2, r3
 8010242:	da49      	bge.n	80102d8 <ff_wtoupper+0xe8>
			switch (cmd) {
 8010244:	89fb      	ldrh	r3, [r7, #14]
 8010246:	2b08      	cmp	r3, #8
 8010248:	d84f      	bhi.n	80102ea <ff_wtoupper+0xfa>
 801024a:	a201      	add	r2, pc, #4	@ (adr r2, 8010250 <ff_wtoupper+0x60>)
 801024c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010250:	08010275 	.word	0x08010275
 8010254:	08010287 	.word	0x08010287
 8010258:	0801029d 	.word	0x0801029d
 801025c:	080102a5 	.word	0x080102a5
 8010260:	080102ad 	.word	0x080102ad
 8010264:	080102b5 	.word	0x080102b5
 8010268:	080102bd 	.word	0x080102bd
 801026c:	080102c5 	.word	0x080102c5
 8010270:	080102cd 	.word	0x080102cd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010274:	88fa      	ldrh	r2, [r7, #6]
 8010276:	8a7b      	ldrh	r3, [r7, #18]
 8010278:	1ad3      	subs	r3, r2, r3
 801027a:	005b      	lsls	r3, r3, #1
 801027c:	697a      	ldr	r2, [r7, #20]
 801027e:	4413      	add	r3, r2
 8010280:	881b      	ldrh	r3, [r3, #0]
 8010282:	80fb      	strh	r3, [r7, #6]
 8010284:	e027      	b.n	80102d6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8010286:	88fa      	ldrh	r2, [r7, #6]
 8010288:	8a7b      	ldrh	r3, [r7, #18]
 801028a:	1ad3      	subs	r3, r2, r3
 801028c:	b29b      	uxth	r3, r3
 801028e:	f003 0301 	and.w	r3, r3, #1
 8010292:	b29b      	uxth	r3, r3
 8010294:	88fa      	ldrh	r2, [r7, #6]
 8010296:	1ad3      	subs	r3, r2, r3
 8010298:	80fb      	strh	r3, [r7, #6]
 801029a:	e01c      	b.n	80102d6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801029c:	88fb      	ldrh	r3, [r7, #6]
 801029e:	3b10      	subs	r3, #16
 80102a0:	80fb      	strh	r3, [r7, #6]
 80102a2:	e018      	b.n	80102d6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80102a4:	88fb      	ldrh	r3, [r7, #6]
 80102a6:	3b20      	subs	r3, #32
 80102a8:	80fb      	strh	r3, [r7, #6]
 80102aa:	e014      	b.n	80102d6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80102ac:	88fb      	ldrh	r3, [r7, #6]
 80102ae:	3b30      	subs	r3, #48	@ 0x30
 80102b0:	80fb      	strh	r3, [r7, #6]
 80102b2:	e010      	b.n	80102d6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80102b4:	88fb      	ldrh	r3, [r7, #6]
 80102b6:	3b1a      	subs	r3, #26
 80102b8:	80fb      	strh	r3, [r7, #6]
 80102ba:	e00c      	b.n	80102d6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80102bc:	88fb      	ldrh	r3, [r7, #6]
 80102be:	3308      	adds	r3, #8
 80102c0:	80fb      	strh	r3, [r7, #6]
 80102c2:	e008      	b.n	80102d6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80102c4:	88fb      	ldrh	r3, [r7, #6]
 80102c6:	3b50      	subs	r3, #80	@ 0x50
 80102c8:	80fb      	strh	r3, [r7, #6]
 80102ca:	e004      	b.n	80102d6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80102cc:	88fb      	ldrh	r3, [r7, #6]
 80102ce:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 80102d2:	80fb      	strh	r3, [r7, #6]
 80102d4:	bf00      	nop
			}
			break;
 80102d6:	e008      	b.n	80102ea <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80102d8:	89fb      	ldrh	r3, [r7, #14]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d195      	bne.n	801020a <ff_wtoupper+0x1a>
 80102de:	8a3b      	ldrh	r3, [r7, #16]
 80102e0:	005b      	lsls	r3, r3, #1
 80102e2:	697a      	ldr	r2, [r7, #20]
 80102e4:	4413      	add	r3, r2
 80102e6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80102e8:	e78f      	b.n	801020a <ff_wtoupper+0x1a>
			break;
 80102ea:	bf00      	nop
	}

	return chr;
 80102ec:	88fb      	ldrh	r3, [r7, #6]
}
 80102ee:	4618      	mov	r0, r3
 80102f0:	371c      	adds	r7, #28
 80102f2:	46bd      	mov	sp, r7
 80102f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f8:	4770      	bx	lr
 80102fa:	bf00      	nop
 80102fc:	08015dc4 	.word	0x08015dc4
 8010300:	08015fb8 	.word	0x08015fb8

08010304 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b086      	sub	sp, #24
 8010308:	af00      	add	r7, sp, #0
 801030a:	4603      	mov	r3, r0
 801030c:	6039      	str	r1, [r7, #0]
 801030e:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8010310:	2300      	movs	r3, #0
 8010312:	60fb      	str	r3, [r7, #12]
 8010314:	2300      	movs	r3, #0
 8010316:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8010318:	f107 030c 	add.w	r3, r7, #12
 801031c:	2101      	movs	r1, #1
 801031e:	4618      	mov	r0, r3
 8010320:	f000 f8cd 	bl	80104be <osSemaphoreCreate>
 8010324:	4602      	mov	r2, r0
 8010326:	683b      	ldr	r3, [r7, #0]
 8010328:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 801032a:	683b      	ldr	r3, [r7, #0]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	2b00      	cmp	r3, #0
 8010330:	bf14      	ite	ne
 8010332:	2301      	movne	r3, #1
 8010334:	2300      	moveq	r3, #0
 8010336:	b2db      	uxtb	r3, r3
 8010338:	617b      	str	r3, [r7, #20]

    return ret;
 801033a:	697b      	ldr	r3, [r7, #20]
}
 801033c:	4618      	mov	r0, r3
 801033e:	3718      	adds	r7, #24
 8010340:	46bd      	mov	sp, r7
 8010342:	bd80      	pop	{r7, pc}

08010344 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8010344:	b580      	push	{r7, lr}
 8010346:	b082      	sub	sp, #8
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 801034c:	6878      	ldr	r0, [r7, #4]
 801034e:	f000 f96d 	bl	801062c <osSemaphoreDelete>
#endif
    return 1;
 8010352:	2301      	movs	r3, #1
}
 8010354:	4618      	mov	r0, r3
 8010356:	3708      	adds	r7, #8
 8010358:	46bd      	mov	sp, r7
 801035a:	bd80      	pop	{r7, pc}

0801035c <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b084      	sub	sp, #16
 8010360:	af00      	add	r7, sp, #0
 8010362:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8010364:	2300      	movs	r3, #0
 8010366:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8010368:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801036c:	6878      	ldr	r0, [r7, #4]
 801036e:	f000 f8d9 	bl	8010524 <osSemaphoreWait>
 8010372:	4603      	mov	r3, r0
 8010374:	2b00      	cmp	r3, #0
 8010376:	d101      	bne.n	801037c <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8010378:	2301      	movs	r3, #1
 801037a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801037c:	68fb      	ldr	r3, [r7, #12]
}
 801037e:	4618      	mov	r0, r3
 8010380:	3710      	adds	r7, #16
 8010382:	46bd      	mov	sp, r7
 8010384:	bd80      	pop	{r7, pc}

08010386 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8010386:	b580      	push	{r7, lr}
 8010388:	b082      	sub	sp, #8
 801038a:	af00      	add	r7, sp, #0
 801038c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 801038e:	6878      	ldr	r0, [r7, #4]
 8010390:	f000 f916 	bl	80105c0 <osSemaphoreRelease>
#endif
}
 8010394:	bf00      	nop
 8010396:	3708      	adds	r7, #8
 8010398:	46bd      	mov	sp, r7
 801039a:	bd80      	pop	{r7, pc}

0801039c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801039c:	b480      	push	{r7}
 801039e:	b085      	sub	sp, #20
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	4603      	mov	r3, r0
 80103a4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80103a6:	2300      	movs	r3, #0
 80103a8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80103aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80103ae:	2b84      	cmp	r3, #132	@ 0x84
 80103b0:	d005      	beq.n	80103be <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80103b2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	4413      	add	r3, r2
 80103ba:	3303      	adds	r3, #3
 80103bc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80103be:	68fb      	ldr	r3, [r7, #12]
}
 80103c0:	4618      	mov	r0, r3
 80103c2:	3714      	adds	r7, #20
 80103c4:	46bd      	mov	sp, r7
 80103c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ca:	4770      	bx	lr

080103cc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80103cc:	b480      	push	{r7}
 80103ce:	b083      	sub	sp, #12
 80103d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80103d2:	f3ef 8305 	mrs	r3, IPSR
 80103d6:	607b      	str	r3, [r7, #4]
  return(result);
 80103d8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80103da:	2b00      	cmp	r3, #0
 80103dc:	bf14      	ite	ne
 80103de:	2301      	movne	r3, #1
 80103e0:	2300      	moveq	r3, #0
 80103e2:	b2db      	uxtb	r3, r3
}
 80103e4:	4618      	mov	r0, r3
 80103e6:	370c      	adds	r7, #12
 80103e8:	46bd      	mov	sp, r7
 80103ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ee:	4770      	bx	lr

080103f0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80103f4:	f001 f9cc 	bl	8011790 <vTaskStartScheduler>
  
  return osOK;
 80103f8:	2300      	movs	r3, #0
}
 80103fa:	4618      	mov	r0, r3
 80103fc:	bd80      	pop	{r7, pc}

080103fe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80103fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010400:	b089      	sub	sp, #36	@ 0x24
 8010402:	af04      	add	r7, sp, #16
 8010404:	6078      	str	r0, [r7, #4]
 8010406:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	695b      	ldr	r3, [r3, #20]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d020      	beq.n	8010452 <osThreadCreate+0x54>
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	699b      	ldr	r3, [r3, #24]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d01c      	beq.n	8010452 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	685c      	ldr	r4, [r3, #4]
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	691e      	ldr	r6, [r3, #16]
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801042a:	4618      	mov	r0, r3
 801042c:	f7ff ffb6 	bl	801039c <makeFreeRtosPriority>
 8010430:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	695b      	ldr	r3, [r3, #20]
 8010436:	687a      	ldr	r2, [r7, #4]
 8010438:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801043a:	9202      	str	r2, [sp, #8]
 801043c:	9301      	str	r3, [sp, #4]
 801043e:	9100      	str	r1, [sp, #0]
 8010440:	683b      	ldr	r3, [r7, #0]
 8010442:	4632      	mov	r2, r6
 8010444:	4629      	mov	r1, r5
 8010446:	4620      	mov	r0, r4
 8010448:	f000 ffbc 	bl	80113c4 <xTaskCreateStatic>
 801044c:	4603      	mov	r3, r0
 801044e:	60fb      	str	r3, [r7, #12]
 8010450:	e01c      	b.n	801048c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	685c      	ldr	r4, [r3, #4]
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801045e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010466:	4618      	mov	r0, r3
 8010468:	f7ff ff98 	bl	801039c <makeFreeRtosPriority>
 801046c:	4602      	mov	r2, r0
 801046e:	f107 030c 	add.w	r3, r7, #12
 8010472:	9301      	str	r3, [sp, #4]
 8010474:	9200      	str	r2, [sp, #0]
 8010476:	683b      	ldr	r3, [r7, #0]
 8010478:	4632      	mov	r2, r6
 801047a:	4629      	mov	r1, r5
 801047c:	4620      	mov	r0, r4
 801047e:	f001 f801 	bl	8011484 <xTaskCreate>
 8010482:	4603      	mov	r3, r0
 8010484:	2b01      	cmp	r3, #1
 8010486:	d001      	beq.n	801048c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8010488:	2300      	movs	r3, #0
 801048a:	e000      	b.n	801048e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801048c:	68fb      	ldr	r3, [r7, #12]
}
 801048e:	4618      	mov	r0, r3
 8010490:	3714      	adds	r7, #20
 8010492:	46bd      	mov	sp, r7
 8010494:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010496 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8010496:	b580      	push	{r7, lr}
 8010498:	b084      	sub	sp, #16
 801049a:	af00      	add	r7, sp, #0
 801049c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d001      	beq.n	80104ac <osDelay+0x16>
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	e000      	b.n	80104ae <osDelay+0x18>
 80104ac:	2301      	movs	r3, #1
 80104ae:	4618      	mov	r0, r3
 80104b0:	f001 f938 	bl	8011724 <vTaskDelay>
  
  return osOK;
 80104b4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80104b6:	4618      	mov	r0, r3
 80104b8:	3710      	adds	r7, #16
 80104ba:	46bd      	mov	sp, r7
 80104bc:	bd80      	pop	{r7, pc}

080104be <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80104be:	b580      	push	{r7, lr}
 80104c0:	b086      	sub	sp, #24
 80104c2:	af02      	add	r7, sp, #8
 80104c4:	6078      	str	r0, [r7, #4]
 80104c6:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	685b      	ldr	r3, [r3, #4]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d00f      	beq.n	80104f0 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80104d0:	683b      	ldr	r3, [r7, #0]
 80104d2:	2b01      	cmp	r3, #1
 80104d4:	d10a      	bne.n	80104ec <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	685b      	ldr	r3, [r3, #4]
 80104da:	2203      	movs	r2, #3
 80104dc:	9200      	str	r2, [sp, #0]
 80104de:	2200      	movs	r2, #0
 80104e0:	2100      	movs	r1, #0
 80104e2:	2001      	movs	r0, #1
 80104e4:	f000 f9fc 	bl	80108e0 <xQueueGenericCreateStatic>
 80104e8:	4603      	mov	r3, r0
 80104ea:	e016      	b.n	801051a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80104ec:	2300      	movs	r3, #0
 80104ee:	e014      	b.n	801051a <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80104f0:	683b      	ldr	r3, [r7, #0]
 80104f2:	2b01      	cmp	r3, #1
 80104f4:	d110      	bne.n	8010518 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80104f6:	2203      	movs	r2, #3
 80104f8:	2100      	movs	r1, #0
 80104fa:	2001      	movs	r0, #1
 80104fc:	f000 fa6d 	bl	80109da <xQueueGenericCreate>
 8010500:	60f8      	str	r0, [r7, #12]
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d005      	beq.n	8010514 <osSemaphoreCreate+0x56>
 8010508:	2300      	movs	r3, #0
 801050a:	2200      	movs	r2, #0
 801050c:	2100      	movs	r1, #0
 801050e:	68f8      	ldr	r0, [r7, #12]
 8010510:	f000 fabe 	bl	8010a90 <xQueueGenericSend>
      return sema;
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	e000      	b.n	801051a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8010518:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 801051a:	4618      	mov	r0, r3
 801051c:	3710      	adds	r7, #16
 801051e:	46bd      	mov	sp, r7
 8010520:	bd80      	pop	{r7, pc}
	...

08010524 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b084      	sub	sp, #16
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
 801052c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801052e:	2300      	movs	r3, #0
 8010530:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d101      	bne.n	801053c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8010538:	2380      	movs	r3, #128	@ 0x80
 801053a:	e03a      	b.n	80105b2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 801053c:	2300      	movs	r3, #0
 801053e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8010540:	683b      	ldr	r3, [r7, #0]
 8010542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010546:	d103      	bne.n	8010550 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8010548:	f04f 33ff 	mov.w	r3, #4294967295
 801054c:	60fb      	str	r3, [r7, #12]
 801054e:	e009      	b.n	8010564 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8010550:	683b      	ldr	r3, [r7, #0]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d006      	beq.n	8010564 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8010556:	683b      	ldr	r3, [r7, #0]
 8010558:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d101      	bne.n	8010564 <osSemaphoreWait+0x40>
      ticks = 1;
 8010560:	2301      	movs	r3, #1
 8010562:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8010564:	f7ff ff32 	bl	80103cc <inHandlerMode>
 8010568:	4603      	mov	r3, r0
 801056a:	2b00      	cmp	r3, #0
 801056c:	d017      	beq.n	801059e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801056e:	f107 0308 	add.w	r3, r7, #8
 8010572:	461a      	mov	r2, r3
 8010574:	2100      	movs	r1, #0
 8010576:	6878      	ldr	r0, [r7, #4]
 8010578:	f000 fd2c 	bl	8010fd4 <xQueueReceiveFromISR>
 801057c:	4603      	mov	r3, r0
 801057e:	2b01      	cmp	r3, #1
 8010580:	d001      	beq.n	8010586 <osSemaphoreWait+0x62>
      return osErrorOS;
 8010582:	23ff      	movs	r3, #255	@ 0xff
 8010584:	e015      	b.n	80105b2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8010586:	68bb      	ldr	r3, [r7, #8]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d011      	beq.n	80105b0 <osSemaphoreWait+0x8c>
 801058c:	4b0b      	ldr	r3, [pc, #44]	@ (80105bc <osSemaphoreWait+0x98>)
 801058e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010592:	601a      	str	r2, [r3, #0]
 8010594:	f3bf 8f4f 	dsb	sy
 8010598:	f3bf 8f6f 	isb	sy
 801059c:	e008      	b.n	80105b0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 801059e:	68f9      	ldr	r1, [r7, #12]
 80105a0:	6878      	ldr	r0, [r7, #4]
 80105a2:	f000 fc07 	bl	8010db4 <xQueueSemaphoreTake>
 80105a6:	4603      	mov	r3, r0
 80105a8:	2b01      	cmp	r3, #1
 80105aa:	d001      	beq.n	80105b0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80105ac:	23ff      	movs	r3, #255	@ 0xff
 80105ae:	e000      	b.n	80105b2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80105b0:	2300      	movs	r3, #0
}
 80105b2:	4618      	mov	r0, r3
 80105b4:	3710      	adds	r7, #16
 80105b6:	46bd      	mov	sp, r7
 80105b8:	bd80      	pop	{r7, pc}
 80105ba:	bf00      	nop
 80105bc:	e000ed04 	.word	0xe000ed04

080105c0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b084      	sub	sp, #16
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80105c8:	2300      	movs	r3, #0
 80105ca:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80105cc:	2300      	movs	r3, #0
 80105ce:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80105d0:	f7ff fefc 	bl	80103cc <inHandlerMode>
 80105d4:	4603      	mov	r3, r0
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d016      	beq.n	8010608 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80105da:	f107 0308 	add.w	r3, r7, #8
 80105de:	4619      	mov	r1, r3
 80105e0:	6878      	ldr	r0, [r7, #4]
 80105e2:	f000 fb57 	bl	8010c94 <xQueueGiveFromISR>
 80105e6:	4603      	mov	r3, r0
 80105e8:	2b01      	cmp	r3, #1
 80105ea:	d001      	beq.n	80105f0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80105ec:	23ff      	movs	r3, #255	@ 0xff
 80105ee:	e017      	b.n	8010620 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80105f0:	68bb      	ldr	r3, [r7, #8]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d013      	beq.n	801061e <osSemaphoreRelease+0x5e>
 80105f6:	4b0c      	ldr	r3, [pc, #48]	@ (8010628 <osSemaphoreRelease+0x68>)
 80105f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80105fc:	601a      	str	r2, [r3, #0]
 80105fe:	f3bf 8f4f 	dsb	sy
 8010602:	f3bf 8f6f 	isb	sy
 8010606:	e00a      	b.n	801061e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8010608:	2300      	movs	r3, #0
 801060a:	2200      	movs	r2, #0
 801060c:	2100      	movs	r1, #0
 801060e:	6878      	ldr	r0, [r7, #4]
 8010610:	f000 fa3e 	bl	8010a90 <xQueueGenericSend>
 8010614:	4603      	mov	r3, r0
 8010616:	2b01      	cmp	r3, #1
 8010618:	d001      	beq.n	801061e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 801061a:	23ff      	movs	r3, #255	@ 0xff
 801061c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 801061e:	68fb      	ldr	r3, [r7, #12]
}
 8010620:	4618      	mov	r0, r3
 8010622:	3710      	adds	r7, #16
 8010624:	46bd      	mov	sp, r7
 8010626:	bd80      	pop	{r7, pc}
 8010628:	e000ed04 	.word	0xe000ed04

0801062c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 801062c:	b580      	push	{r7, lr}
 801062e:	b082      	sub	sp, #8
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8010634:	f7ff feca 	bl	80103cc <inHandlerMode>
 8010638:	4603      	mov	r3, r0
 801063a:	2b00      	cmp	r3, #0
 801063c:	d001      	beq.n	8010642 <osSemaphoreDelete+0x16>
    return osErrorISR;
 801063e:	2382      	movs	r3, #130	@ 0x82
 8010640:	e003      	b.n	801064a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8010642:	6878      	ldr	r0, [r7, #4]
 8010644:	f000 fd48 	bl	80110d8 <vQueueDelete>

  return osOK; 
 8010648:	2300      	movs	r3, #0
}
 801064a:	4618      	mov	r0, r3
 801064c:	3708      	adds	r7, #8
 801064e:	46bd      	mov	sp, r7
 8010650:	bd80      	pop	{r7, pc}

08010652 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8010652:	b590      	push	{r4, r7, lr}
 8010654:	b085      	sub	sp, #20
 8010656:	af02      	add	r7, sp, #8
 8010658:	6078      	str	r0, [r7, #4]
 801065a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	689b      	ldr	r3, [r3, #8]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d011      	beq.n	8010688 <osMessageCreate+0x36>
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	68db      	ldr	r3, [r3, #12]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d00d      	beq.n	8010688 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	6818      	ldr	r0, [r3, #0]
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	6859      	ldr	r1, [r3, #4]
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	689a      	ldr	r2, [r3, #8]
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	68db      	ldr	r3, [r3, #12]
 801067c:	2400      	movs	r4, #0
 801067e:	9400      	str	r4, [sp, #0]
 8010680:	f000 f92e 	bl	80108e0 <xQueueGenericCreateStatic>
 8010684:	4603      	mov	r3, r0
 8010686:	e008      	b.n	801069a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	6818      	ldr	r0, [r3, #0]
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	685b      	ldr	r3, [r3, #4]
 8010690:	2200      	movs	r2, #0
 8010692:	4619      	mov	r1, r3
 8010694:	f000 f9a1 	bl	80109da <xQueueGenericCreate>
 8010698:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 801069a:	4618      	mov	r0, r3
 801069c:	370c      	adds	r7, #12
 801069e:	46bd      	mov	sp, r7
 80106a0:	bd90      	pop	{r4, r7, pc}

080106a2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80106a2:	b480      	push	{r7}
 80106a4:	b083      	sub	sp, #12
 80106a6:	af00      	add	r7, sp, #0
 80106a8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	f103 0208 	add.w	r2, r3, #8
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	f04f 32ff 	mov.w	r2, #4294967295
 80106ba:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	f103 0208 	add.w	r2, r3, #8
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	f103 0208 	add.w	r2, r3, #8
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	2200      	movs	r2, #0
 80106d4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80106d6:	bf00      	nop
 80106d8:	370c      	adds	r7, #12
 80106da:	46bd      	mov	sp, r7
 80106dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e0:	4770      	bx	lr

080106e2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80106e2:	b480      	push	{r7}
 80106e4:	b083      	sub	sp, #12
 80106e6:	af00      	add	r7, sp, #0
 80106e8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	2200      	movs	r2, #0
 80106ee:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80106f0:	bf00      	nop
 80106f2:	370c      	adds	r7, #12
 80106f4:	46bd      	mov	sp, r7
 80106f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fa:	4770      	bx	lr

080106fc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80106fc:	b480      	push	{r7}
 80106fe:	b085      	sub	sp, #20
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
 8010704:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	685b      	ldr	r3, [r3, #4]
 801070a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801070c:	683b      	ldr	r3, [r7, #0]
 801070e:	68fa      	ldr	r2, [r7, #12]
 8010710:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	689a      	ldr	r2, [r3, #8]
 8010716:	683b      	ldr	r3, [r7, #0]
 8010718:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	689b      	ldr	r3, [r3, #8]
 801071e:	683a      	ldr	r2, [r7, #0]
 8010720:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	683a      	ldr	r2, [r7, #0]
 8010726:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010728:	683b      	ldr	r3, [r7, #0]
 801072a:	687a      	ldr	r2, [r7, #4]
 801072c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	1c5a      	adds	r2, r3, #1
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	601a      	str	r2, [r3, #0]
}
 8010738:	bf00      	nop
 801073a:	3714      	adds	r7, #20
 801073c:	46bd      	mov	sp, r7
 801073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010742:	4770      	bx	lr

08010744 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010744:	b480      	push	{r7}
 8010746:	b085      	sub	sp, #20
 8010748:	af00      	add	r7, sp, #0
 801074a:	6078      	str	r0, [r7, #4]
 801074c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801074e:	683b      	ldr	r3, [r7, #0]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010754:	68bb      	ldr	r3, [r7, #8]
 8010756:	f1b3 3fff 	cmp.w	r3, #4294967295
 801075a:	d103      	bne.n	8010764 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	691b      	ldr	r3, [r3, #16]
 8010760:	60fb      	str	r3, [r7, #12]
 8010762:	e00c      	b.n	801077e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	3308      	adds	r3, #8
 8010768:	60fb      	str	r3, [r7, #12]
 801076a:	e002      	b.n	8010772 <vListInsert+0x2e>
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	685b      	ldr	r3, [r3, #4]
 8010770:	60fb      	str	r3, [r7, #12]
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	685b      	ldr	r3, [r3, #4]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	68ba      	ldr	r2, [r7, #8]
 801077a:	429a      	cmp	r2, r3
 801077c:	d2f6      	bcs.n	801076c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	685a      	ldr	r2, [r3, #4]
 8010782:	683b      	ldr	r3, [r7, #0]
 8010784:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010786:	683b      	ldr	r3, [r7, #0]
 8010788:	685b      	ldr	r3, [r3, #4]
 801078a:	683a      	ldr	r2, [r7, #0]
 801078c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801078e:	683b      	ldr	r3, [r7, #0]
 8010790:	68fa      	ldr	r2, [r7, #12]
 8010792:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	683a      	ldr	r2, [r7, #0]
 8010798:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801079a:	683b      	ldr	r3, [r7, #0]
 801079c:	687a      	ldr	r2, [r7, #4]
 801079e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	1c5a      	adds	r2, r3, #1
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	601a      	str	r2, [r3, #0]
}
 80107aa:	bf00      	nop
 80107ac:	3714      	adds	r7, #20
 80107ae:	46bd      	mov	sp, r7
 80107b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b4:	4770      	bx	lr

080107b6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80107b6:	b480      	push	{r7}
 80107b8:	b085      	sub	sp, #20
 80107ba:	af00      	add	r7, sp, #0
 80107bc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	691b      	ldr	r3, [r3, #16]
 80107c2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	685b      	ldr	r3, [r3, #4]
 80107c8:	687a      	ldr	r2, [r7, #4]
 80107ca:	6892      	ldr	r2, [r2, #8]
 80107cc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	689b      	ldr	r3, [r3, #8]
 80107d2:	687a      	ldr	r2, [r7, #4]
 80107d4:	6852      	ldr	r2, [r2, #4]
 80107d6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	685b      	ldr	r3, [r3, #4]
 80107dc:	687a      	ldr	r2, [r7, #4]
 80107de:	429a      	cmp	r2, r3
 80107e0:	d103      	bne.n	80107ea <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	689a      	ldr	r2, [r3, #8]
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	2200      	movs	r2, #0
 80107ee:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	1e5a      	subs	r2, r3, #1
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	681b      	ldr	r3, [r3, #0]
}
 80107fe:	4618      	mov	r0, r3
 8010800:	3714      	adds	r7, #20
 8010802:	46bd      	mov	sp, r7
 8010804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010808:	4770      	bx	lr
	...

0801080c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801080c:	b580      	push	{r7, lr}
 801080e:	b084      	sub	sp, #16
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
 8010814:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d10b      	bne.n	8010838 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010824:	f383 8811 	msr	BASEPRI, r3
 8010828:	f3bf 8f6f 	isb	sy
 801082c:	f3bf 8f4f 	dsb	sy
 8010830:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010832:	bf00      	nop
 8010834:	bf00      	nop
 8010836:	e7fd      	b.n	8010834 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010838:	f001 ff1e 	bl	8012678 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	681a      	ldr	r2, [r3, #0]
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010844:	68f9      	ldr	r1, [r7, #12]
 8010846:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8010848:	fb01 f303 	mul.w	r3, r1, r3
 801084c:	441a      	add	r2, r3
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	2200      	movs	r2, #0
 8010856:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	681a      	ldr	r2, [r3, #0]
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	681a      	ldr	r2, [r3, #0]
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010868:	3b01      	subs	r3, #1
 801086a:	68f9      	ldr	r1, [r7, #12]
 801086c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801086e:	fb01 f303 	mul.w	r3, r1, r3
 8010872:	441a      	add	r2, r3
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	22ff      	movs	r2, #255	@ 0xff
 801087c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	22ff      	movs	r2, #255	@ 0xff
 8010884:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8010888:	683b      	ldr	r3, [r7, #0]
 801088a:	2b00      	cmp	r3, #0
 801088c:	d114      	bne.n	80108b8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	691b      	ldr	r3, [r3, #16]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d01a      	beq.n	80108cc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	3310      	adds	r3, #16
 801089a:	4618      	mov	r0, r3
 801089c:	f001 f9d2 	bl	8011c44 <xTaskRemoveFromEventList>
 80108a0:	4603      	mov	r3, r0
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d012      	beq.n	80108cc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80108a6:	4b0d      	ldr	r3, [pc, #52]	@ (80108dc <xQueueGenericReset+0xd0>)
 80108a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80108ac:	601a      	str	r2, [r3, #0]
 80108ae:	f3bf 8f4f 	dsb	sy
 80108b2:	f3bf 8f6f 	isb	sy
 80108b6:	e009      	b.n	80108cc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	3310      	adds	r3, #16
 80108bc:	4618      	mov	r0, r3
 80108be:	f7ff fef0 	bl	80106a2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	3324      	adds	r3, #36	@ 0x24
 80108c6:	4618      	mov	r0, r3
 80108c8:	f7ff feeb 	bl	80106a2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80108cc:	f001 ff06 	bl	80126dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80108d0:	2301      	movs	r3, #1
}
 80108d2:	4618      	mov	r0, r3
 80108d4:	3710      	adds	r7, #16
 80108d6:	46bd      	mov	sp, r7
 80108d8:	bd80      	pop	{r7, pc}
 80108da:	bf00      	nop
 80108dc:	e000ed04 	.word	0xe000ed04

080108e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b08e      	sub	sp, #56	@ 0x38
 80108e4:	af02      	add	r7, sp, #8
 80108e6:	60f8      	str	r0, [r7, #12]
 80108e8:	60b9      	str	r1, [r7, #8]
 80108ea:	607a      	str	r2, [r7, #4]
 80108ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d10b      	bne.n	801090c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80108f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108f8:	f383 8811 	msr	BASEPRI, r3
 80108fc:	f3bf 8f6f 	isb	sy
 8010900:	f3bf 8f4f 	dsb	sy
 8010904:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010906:	bf00      	nop
 8010908:	bf00      	nop
 801090a:	e7fd      	b.n	8010908 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d10b      	bne.n	801092a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8010912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010916:	f383 8811 	msr	BASEPRI, r3
 801091a:	f3bf 8f6f 	isb	sy
 801091e:	f3bf 8f4f 	dsb	sy
 8010922:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010924:	bf00      	nop
 8010926:	bf00      	nop
 8010928:	e7fd      	b.n	8010926 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d002      	beq.n	8010936 <xQueueGenericCreateStatic+0x56>
 8010930:	68bb      	ldr	r3, [r7, #8]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d001      	beq.n	801093a <xQueueGenericCreateStatic+0x5a>
 8010936:	2301      	movs	r3, #1
 8010938:	e000      	b.n	801093c <xQueueGenericCreateStatic+0x5c>
 801093a:	2300      	movs	r3, #0
 801093c:	2b00      	cmp	r3, #0
 801093e:	d10b      	bne.n	8010958 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8010940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010944:	f383 8811 	msr	BASEPRI, r3
 8010948:	f3bf 8f6f 	isb	sy
 801094c:	f3bf 8f4f 	dsb	sy
 8010950:	623b      	str	r3, [r7, #32]
}
 8010952:	bf00      	nop
 8010954:	bf00      	nop
 8010956:	e7fd      	b.n	8010954 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d102      	bne.n	8010964 <xQueueGenericCreateStatic+0x84>
 801095e:	68bb      	ldr	r3, [r7, #8]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d101      	bne.n	8010968 <xQueueGenericCreateStatic+0x88>
 8010964:	2301      	movs	r3, #1
 8010966:	e000      	b.n	801096a <xQueueGenericCreateStatic+0x8a>
 8010968:	2300      	movs	r3, #0
 801096a:	2b00      	cmp	r3, #0
 801096c:	d10b      	bne.n	8010986 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 801096e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010972:	f383 8811 	msr	BASEPRI, r3
 8010976:	f3bf 8f6f 	isb	sy
 801097a:	f3bf 8f4f 	dsb	sy
 801097e:	61fb      	str	r3, [r7, #28]
}
 8010980:	bf00      	nop
 8010982:	bf00      	nop
 8010984:	e7fd      	b.n	8010982 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010986:	2348      	movs	r3, #72	@ 0x48
 8010988:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801098a:	697b      	ldr	r3, [r7, #20]
 801098c:	2b48      	cmp	r3, #72	@ 0x48
 801098e:	d00b      	beq.n	80109a8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8010990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010994:	f383 8811 	msr	BASEPRI, r3
 8010998:	f3bf 8f6f 	isb	sy
 801099c:	f3bf 8f4f 	dsb	sy
 80109a0:	61bb      	str	r3, [r7, #24]
}
 80109a2:	bf00      	nop
 80109a4:	bf00      	nop
 80109a6:	e7fd      	b.n	80109a4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80109a8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80109aa:	683b      	ldr	r3, [r7, #0]
 80109ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80109ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d00d      	beq.n	80109d0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80109b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109b6:	2201      	movs	r2, #1
 80109b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80109bc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80109c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109c2:	9300      	str	r3, [sp, #0]
 80109c4:	4613      	mov	r3, r2
 80109c6:	687a      	ldr	r2, [r7, #4]
 80109c8:	68b9      	ldr	r1, [r7, #8]
 80109ca:	68f8      	ldr	r0, [r7, #12]
 80109cc:	f000 f840 	bl	8010a50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80109d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80109d2:	4618      	mov	r0, r3
 80109d4:	3730      	adds	r7, #48	@ 0x30
 80109d6:	46bd      	mov	sp, r7
 80109d8:	bd80      	pop	{r7, pc}

080109da <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80109da:	b580      	push	{r7, lr}
 80109dc:	b08a      	sub	sp, #40	@ 0x28
 80109de:	af02      	add	r7, sp, #8
 80109e0:	60f8      	str	r0, [r7, #12]
 80109e2:	60b9      	str	r1, [r7, #8]
 80109e4:	4613      	mov	r3, r2
 80109e6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d10b      	bne.n	8010a06 <xQueueGenericCreate+0x2c>
	__asm volatile
 80109ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109f2:	f383 8811 	msr	BASEPRI, r3
 80109f6:	f3bf 8f6f 	isb	sy
 80109fa:	f3bf 8f4f 	dsb	sy
 80109fe:	613b      	str	r3, [r7, #16]
}
 8010a00:	bf00      	nop
 8010a02:	bf00      	nop
 8010a04:	e7fd      	b.n	8010a02 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	68ba      	ldr	r2, [r7, #8]
 8010a0a:	fb02 f303 	mul.w	r3, r2, r3
 8010a0e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010a10:	69fb      	ldr	r3, [r7, #28]
 8010a12:	3348      	adds	r3, #72	@ 0x48
 8010a14:	4618      	mov	r0, r3
 8010a16:	f001 ff51 	bl	80128bc <pvPortMalloc>
 8010a1a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010a1c:	69bb      	ldr	r3, [r7, #24]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d011      	beq.n	8010a46 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010a22:	69bb      	ldr	r3, [r7, #24]
 8010a24:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010a26:	697b      	ldr	r3, [r7, #20]
 8010a28:	3348      	adds	r3, #72	@ 0x48
 8010a2a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010a2c:	69bb      	ldr	r3, [r7, #24]
 8010a2e:	2200      	movs	r2, #0
 8010a30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010a34:	79fa      	ldrb	r2, [r7, #7]
 8010a36:	69bb      	ldr	r3, [r7, #24]
 8010a38:	9300      	str	r3, [sp, #0]
 8010a3a:	4613      	mov	r3, r2
 8010a3c:	697a      	ldr	r2, [r7, #20]
 8010a3e:	68b9      	ldr	r1, [r7, #8]
 8010a40:	68f8      	ldr	r0, [r7, #12]
 8010a42:	f000 f805 	bl	8010a50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010a46:	69bb      	ldr	r3, [r7, #24]
	}
 8010a48:	4618      	mov	r0, r3
 8010a4a:	3720      	adds	r7, #32
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	bd80      	pop	{r7, pc}

08010a50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010a50:	b580      	push	{r7, lr}
 8010a52:	b084      	sub	sp, #16
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	60f8      	str	r0, [r7, #12]
 8010a58:	60b9      	str	r1, [r7, #8]
 8010a5a:	607a      	str	r2, [r7, #4]
 8010a5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010a5e:	68bb      	ldr	r3, [r7, #8]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d103      	bne.n	8010a6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010a64:	69bb      	ldr	r3, [r7, #24]
 8010a66:	69ba      	ldr	r2, [r7, #24]
 8010a68:	601a      	str	r2, [r3, #0]
 8010a6a:	e002      	b.n	8010a72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010a6c:	69bb      	ldr	r3, [r7, #24]
 8010a6e:	687a      	ldr	r2, [r7, #4]
 8010a70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010a72:	69bb      	ldr	r3, [r7, #24]
 8010a74:	68fa      	ldr	r2, [r7, #12]
 8010a76:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010a78:	69bb      	ldr	r3, [r7, #24]
 8010a7a:	68ba      	ldr	r2, [r7, #8]
 8010a7c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010a7e:	2101      	movs	r1, #1
 8010a80:	69b8      	ldr	r0, [r7, #24]
 8010a82:	f7ff fec3 	bl	801080c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010a86:	bf00      	nop
 8010a88:	3710      	adds	r7, #16
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	bd80      	pop	{r7, pc}
	...

08010a90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b08e      	sub	sp, #56	@ 0x38
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	60f8      	str	r0, [r7, #12]
 8010a98:	60b9      	str	r1, [r7, #8]
 8010a9a:	607a      	str	r2, [r7, #4]
 8010a9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8010aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d10b      	bne.n	8010ac4 <xQueueGenericSend+0x34>
	__asm volatile
 8010aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ab0:	f383 8811 	msr	BASEPRI, r3
 8010ab4:	f3bf 8f6f 	isb	sy
 8010ab8:	f3bf 8f4f 	dsb	sy
 8010abc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010abe:	bf00      	nop
 8010ac0:	bf00      	nop
 8010ac2:	e7fd      	b.n	8010ac0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010ac4:	68bb      	ldr	r3, [r7, #8]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d103      	bne.n	8010ad2 <xQueueGenericSend+0x42>
 8010aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d101      	bne.n	8010ad6 <xQueueGenericSend+0x46>
 8010ad2:	2301      	movs	r3, #1
 8010ad4:	e000      	b.n	8010ad8 <xQueueGenericSend+0x48>
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d10b      	bne.n	8010af4 <xQueueGenericSend+0x64>
	__asm volatile
 8010adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ae0:	f383 8811 	msr	BASEPRI, r3
 8010ae4:	f3bf 8f6f 	isb	sy
 8010ae8:	f3bf 8f4f 	dsb	sy
 8010aec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010aee:	bf00      	nop
 8010af0:	bf00      	nop
 8010af2:	e7fd      	b.n	8010af0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010af4:	683b      	ldr	r3, [r7, #0]
 8010af6:	2b02      	cmp	r3, #2
 8010af8:	d103      	bne.n	8010b02 <xQueueGenericSend+0x72>
 8010afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010afc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010afe:	2b01      	cmp	r3, #1
 8010b00:	d101      	bne.n	8010b06 <xQueueGenericSend+0x76>
 8010b02:	2301      	movs	r3, #1
 8010b04:	e000      	b.n	8010b08 <xQueueGenericSend+0x78>
 8010b06:	2300      	movs	r3, #0
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d10b      	bne.n	8010b24 <xQueueGenericSend+0x94>
	__asm volatile
 8010b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b10:	f383 8811 	msr	BASEPRI, r3
 8010b14:	f3bf 8f6f 	isb	sy
 8010b18:	f3bf 8f4f 	dsb	sy
 8010b1c:	623b      	str	r3, [r7, #32]
}
 8010b1e:	bf00      	nop
 8010b20:	bf00      	nop
 8010b22:	e7fd      	b.n	8010b20 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010b24:	f001 fa54 	bl	8011fd0 <xTaskGetSchedulerState>
 8010b28:	4603      	mov	r3, r0
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d102      	bne.n	8010b34 <xQueueGenericSend+0xa4>
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d101      	bne.n	8010b38 <xQueueGenericSend+0xa8>
 8010b34:	2301      	movs	r3, #1
 8010b36:	e000      	b.n	8010b3a <xQueueGenericSend+0xaa>
 8010b38:	2300      	movs	r3, #0
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d10b      	bne.n	8010b56 <xQueueGenericSend+0xc6>
	__asm volatile
 8010b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b42:	f383 8811 	msr	BASEPRI, r3
 8010b46:	f3bf 8f6f 	isb	sy
 8010b4a:	f3bf 8f4f 	dsb	sy
 8010b4e:	61fb      	str	r3, [r7, #28]
}
 8010b50:	bf00      	nop
 8010b52:	bf00      	nop
 8010b54:	e7fd      	b.n	8010b52 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010b56:	f001 fd8f 	bl	8012678 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010b62:	429a      	cmp	r2, r3
 8010b64:	d302      	bcc.n	8010b6c <xQueueGenericSend+0xdc>
 8010b66:	683b      	ldr	r3, [r7, #0]
 8010b68:	2b02      	cmp	r3, #2
 8010b6a:	d129      	bne.n	8010bc0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010b6c:	683a      	ldr	r2, [r7, #0]
 8010b6e:	68b9      	ldr	r1, [r7, #8]
 8010b70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010b72:	f000 faed 	bl	8011150 <prvCopyDataToQueue>
 8010b76:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d010      	beq.n	8010ba2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b82:	3324      	adds	r3, #36	@ 0x24
 8010b84:	4618      	mov	r0, r3
 8010b86:	f001 f85d 	bl	8011c44 <xTaskRemoveFromEventList>
 8010b8a:	4603      	mov	r3, r0
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d013      	beq.n	8010bb8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010b90:	4b3f      	ldr	r3, [pc, #252]	@ (8010c90 <xQueueGenericSend+0x200>)
 8010b92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010b96:	601a      	str	r2, [r3, #0]
 8010b98:	f3bf 8f4f 	dsb	sy
 8010b9c:	f3bf 8f6f 	isb	sy
 8010ba0:	e00a      	b.n	8010bb8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d007      	beq.n	8010bb8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010ba8:	4b39      	ldr	r3, [pc, #228]	@ (8010c90 <xQueueGenericSend+0x200>)
 8010baa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010bae:	601a      	str	r2, [r3, #0]
 8010bb0:	f3bf 8f4f 	dsb	sy
 8010bb4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010bb8:	f001 fd90 	bl	80126dc <vPortExitCritical>
				return pdPASS;
 8010bbc:	2301      	movs	r3, #1
 8010bbe:	e063      	b.n	8010c88 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d103      	bne.n	8010bce <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010bc6:	f001 fd89 	bl	80126dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010bca:	2300      	movs	r3, #0
 8010bcc:	e05c      	b.n	8010c88 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010bce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d106      	bne.n	8010be2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010bd4:	f107 0314 	add.w	r3, r7, #20
 8010bd8:	4618      	mov	r0, r3
 8010bda:	f001 f897 	bl	8011d0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010bde:	2301      	movs	r3, #1
 8010be0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010be2:	f001 fd7b 	bl	80126dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010be6:	f000 fe3d 	bl	8011864 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010bea:	f001 fd45 	bl	8012678 <vPortEnterCritical>
 8010bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bf0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010bf4:	b25b      	sxtb	r3, r3
 8010bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bfa:	d103      	bne.n	8010c04 <xQueueGenericSend+0x174>
 8010bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bfe:	2200      	movs	r2, #0
 8010c00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010c0a:	b25b      	sxtb	r3, r3
 8010c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c10:	d103      	bne.n	8010c1a <xQueueGenericSend+0x18a>
 8010c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c14:	2200      	movs	r2, #0
 8010c16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010c1a:	f001 fd5f 	bl	80126dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010c1e:	1d3a      	adds	r2, r7, #4
 8010c20:	f107 0314 	add.w	r3, r7, #20
 8010c24:	4611      	mov	r1, r2
 8010c26:	4618      	mov	r0, r3
 8010c28:	f001 f886 	bl	8011d38 <xTaskCheckForTimeOut>
 8010c2c:	4603      	mov	r3, r0
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d124      	bne.n	8010c7c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010c32:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010c34:	f000 fb84 	bl	8011340 <prvIsQueueFull>
 8010c38:	4603      	mov	r3, r0
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d018      	beq.n	8010c70 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c40:	3310      	adds	r3, #16
 8010c42:	687a      	ldr	r2, [r7, #4]
 8010c44:	4611      	mov	r1, r2
 8010c46:	4618      	mov	r0, r3
 8010c48:	f000 ffd6 	bl	8011bf8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010c4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010c4e:	f000 fb0f 	bl	8011270 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010c52:	f000 fe15 	bl	8011880 <xTaskResumeAll>
 8010c56:	4603      	mov	r3, r0
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	f47f af7c 	bne.w	8010b56 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8010c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8010c90 <xQueueGenericSend+0x200>)
 8010c60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010c64:	601a      	str	r2, [r3, #0]
 8010c66:	f3bf 8f4f 	dsb	sy
 8010c6a:	f3bf 8f6f 	isb	sy
 8010c6e:	e772      	b.n	8010b56 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010c70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010c72:	f000 fafd 	bl	8011270 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010c76:	f000 fe03 	bl	8011880 <xTaskResumeAll>
 8010c7a:	e76c      	b.n	8010b56 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010c7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010c7e:	f000 faf7 	bl	8011270 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010c82:	f000 fdfd 	bl	8011880 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010c86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010c88:	4618      	mov	r0, r3
 8010c8a:	3738      	adds	r7, #56	@ 0x38
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	bd80      	pop	{r7, pc}
 8010c90:	e000ed04 	.word	0xe000ed04

08010c94 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b08e      	sub	sp, #56	@ 0x38
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
 8010c9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d10b      	bne.n	8010cc0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8010ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cac:	f383 8811 	msr	BASEPRI, r3
 8010cb0:	f3bf 8f6f 	isb	sy
 8010cb4:	f3bf 8f4f 	dsb	sy
 8010cb8:	623b      	str	r3, [r7, #32]
}
 8010cba:	bf00      	nop
 8010cbc:	bf00      	nop
 8010cbe:	e7fd      	b.n	8010cbc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d00b      	beq.n	8010ce0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8010cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ccc:	f383 8811 	msr	BASEPRI, r3
 8010cd0:	f3bf 8f6f 	isb	sy
 8010cd4:	f3bf 8f4f 	dsb	sy
 8010cd8:	61fb      	str	r3, [r7, #28]
}
 8010cda:	bf00      	nop
 8010cdc:	bf00      	nop
 8010cde:	e7fd      	b.n	8010cdc <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d103      	bne.n	8010cf0 <xQueueGiveFromISR+0x5c>
 8010ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cea:	689b      	ldr	r3, [r3, #8]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d101      	bne.n	8010cf4 <xQueueGiveFromISR+0x60>
 8010cf0:	2301      	movs	r3, #1
 8010cf2:	e000      	b.n	8010cf6 <xQueueGiveFromISR+0x62>
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d10b      	bne.n	8010d12 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8010cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cfe:	f383 8811 	msr	BASEPRI, r3
 8010d02:	f3bf 8f6f 	isb	sy
 8010d06:	f3bf 8f4f 	dsb	sy
 8010d0a:	61bb      	str	r3, [r7, #24]
}
 8010d0c:	bf00      	nop
 8010d0e:	bf00      	nop
 8010d10:	e7fd      	b.n	8010d0e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010d12:	f001 fd91 	bl	8012838 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010d16:	f3ef 8211 	mrs	r2, BASEPRI
 8010d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d1e:	f383 8811 	msr	BASEPRI, r3
 8010d22:	f3bf 8f6f 	isb	sy
 8010d26:	f3bf 8f4f 	dsb	sy
 8010d2a:	617a      	str	r2, [r7, #20]
 8010d2c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010d2e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d36:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010d3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010d3e:	429a      	cmp	r2, r3
 8010d40:	d22b      	bcs.n	8010d9a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d44:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010d48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d4e:	1c5a      	adds	r2, r3, #1
 8010d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d52:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010d54:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8010d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d5c:	d112      	bne.n	8010d84 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d016      	beq.n	8010d94 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d68:	3324      	adds	r3, #36	@ 0x24
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	f000 ff6a 	bl	8011c44 <xTaskRemoveFromEventList>
 8010d70:	4603      	mov	r3, r0
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d00e      	beq.n	8010d94 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d00b      	beq.n	8010d94 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010d7c:	683b      	ldr	r3, [r7, #0]
 8010d7e:	2201      	movs	r2, #1
 8010d80:	601a      	str	r2, [r3, #0]
 8010d82:	e007      	b.n	8010d94 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010d84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010d88:	3301      	adds	r3, #1
 8010d8a:	b2db      	uxtb	r3, r3
 8010d8c:	b25a      	sxtb	r2, r3
 8010d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8010d94:	2301      	movs	r3, #1
 8010d96:	637b      	str	r3, [r7, #52]	@ 0x34
 8010d98:	e001      	b.n	8010d9e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8010d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010da0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010da8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8010dac:	4618      	mov	r0, r3
 8010dae:	3738      	adds	r7, #56	@ 0x38
 8010db0:	46bd      	mov	sp, r7
 8010db2:	bd80      	pop	{r7, pc}

08010db4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b08e      	sub	sp, #56	@ 0x38
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]
 8010dbc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010dbe:	2300      	movs	r3, #0
 8010dc0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d10b      	bne.n	8010de8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8010dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dd4:	f383 8811 	msr	BASEPRI, r3
 8010dd8:	f3bf 8f6f 	isb	sy
 8010ddc:	f3bf 8f4f 	dsb	sy
 8010de0:	623b      	str	r3, [r7, #32]
}
 8010de2:	bf00      	nop
 8010de4:	bf00      	nop
 8010de6:	e7fd      	b.n	8010de4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d00b      	beq.n	8010e08 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8010df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010df4:	f383 8811 	msr	BASEPRI, r3
 8010df8:	f3bf 8f6f 	isb	sy
 8010dfc:	f3bf 8f4f 	dsb	sy
 8010e00:	61fb      	str	r3, [r7, #28]
}
 8010e02:	bf00      	nop
 8010e04:	bf00      	nop
 8010e06:	e7fd      	b.n	8010e04 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010e08:	f001 f8e2 	bl	8011fd0 <xTaskGetSchedulerState>
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d102      	bne.n	8010e18 <xQueueSemaphoreTake+0x64>
 8010e12:	683b      	ldr	r3, [r7, #0]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d101      	bne.n	8010e1c <xQueueSemaphoreTake+0x68>
 8010e18:	2301      	movs	r3, #1
 8010e1a:	e000      	b.n	8010e1e <xQueueSemaphoreTake+0x6a>
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d10b      	bne.n	8010e3a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8010e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e26:	f383 8811 	msr	BASEPRI, r3
 8010e2a:	f3bf 8f6f 	isb	sy
 8010e2e:	f3bf 8f4f 	dsb	sy
 8010e32:	61bb      	str	r3, [r7, #24]
}
 8010e34:	bf00      	nop
 8010e36:	bf00      	nop
 8010e38:	e7fd      	b.n	8010e36 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010e3a:	f001 fc1d 	bl	8012678 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010e42:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d024      	beq.n	8010e94 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e4c:	1e5a      	subs	r2, r3, #1
 8010e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e50:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d104      	bne.n	8010e64 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010e5a:	f001 fa65 	bl	8012328 <pvTaskIncrementMutexHeldCount>
 8010e5e:	4602      	mov	r2, r0
 8010e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e62:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e66:	691b      	ldr	r3, [r3, #16]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d00f      	beq.n	8010e8c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e6e:	3310      	adds	r3, #16
 8010e70:	4618      	mov	r0, r3
 8010e72:	f000 fee7 	bl	8011c44 <xTaskRemoveFromEventList>
 8010e76:	4603      	mov	r3, r0
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d007      	beq.n	8010e8c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010e7c:	4b54      	ldr	r3, [pc, #336]	@ (8010fd0 <xQueueSemaphoreTake+0x21c>)
 8010e7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010e82:	601a      	str	r2, [r3, #0]
 8010e84:	f3bf 8f4f 	dsb	sy
 8010e88:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010e8c:	f001 fc26 	bl	80126dc <vPortExitCritical>
				return pdPASS;
 8010e90:	2301      	movs	r3, #1
 8010e92:	e098      	b.n	8010fc6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010e94:	683b      	ldr	r3, [r7, #0]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d112      	bne.n	8010ec0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d00b      	beq.n	8010eb8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8010ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ea4:	f383 8811 	msr	BASEPRI, r3
 8010ea8:	f3bf 8f6f 	isb	sy
 8010eac:	f3bf 8f4f 	dsb	sy
 8010eb0:	617b      	str	r3, [r7, #20]
}
 8010eb2:	bf00      	nop
 8010eb4:	bf00      	nop
 8010eb6:	e7fd      	b.n	8010eb4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010eb8:	f001 fc10 	bl	80126dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	e082      	b.n	8010fc6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d106      	bne.n	8010ed4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010ec6:	f107 030c 	add.w	r3, r7, #12
 8010eca:	4618      	mov	r0, r3
 8010ecc:	f000 ff1e 	bl	8011d0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010ed0:	2301      	movs	r3, #1
 8010ed2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010ed4:	f001 fc02 	bl	80126dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010ed8:	f000 fcc4 	bl	8011864 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010edc:	f001 fbcc 	bl	8012678 <vPortEnterCritical>
 8010ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ee2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010ee6:	b25b      	sxtb	r3, r3
 8010ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010eec:	d103      	bne.n	8010ef6 <xQueueSemaphoreTake+0x142>
 8010eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ef0:	2200      	movs	r2, #0
 8010ef2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ef8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010efc:	b25b      	sxtb	r3, r3
 8010efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f02:	d103      	bne.n	8010f0c <xQueueSemaphoreTake+0x158>
 8010f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f06:	2200      	movs	r2, #0
 8010f08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010f0c:	f001 fbe6 	bl	80126dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010f10:	463a      	mov	r2, r7
 8010f12:	f107 030c 	add.w	r3, r7, #12
 8010f16:	4611      	mov	r1, r2
 8010f18:	4618      	mov	r0, r3
 8010f1a:	f000 ff0d 	bl	8011d38 <xTaskCheckForTimeOut>
 8010f1e:	4603      	mov	r3, r0
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d132      	bne.n	8010f8a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010f24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010f26:	f000 f9f5 	bl	8011314 <prvIsQueueEmpty>
 8010f2a:	4603      	mov	r3, r0
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d026      	beq.n	8010f7e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d109      	bne.n	8010f4c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8010f38:	f001 fb9e 	bl	8012678 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f3e:	689b      	ldr	r3, [r3, #8]
 8010f40:	4618      	mov	r0, r3
 8010f42:	f001 f863 	bl	801200c <xTaskPriorityInherit>
 8010f46:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8010f48:	f001 fbc8 	bl	80126dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f4e:	3324      	adds	r3, #36	@ 0x24
 8010f50:	683a      	ldr	r2, [r7, #0]
 8010f52:	4611      	mov	r1, r2
 8010f54:	4618      	mov	r0, r3
 8010f56:	f000 fe4f 	bl	8011bf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010f5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010f5c:	f000 f988 	bl	8011270 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010f60:	f000 fc8e 	bl	8011880 <xTaskResumeAll>
 8010f64:	4603      	mov	r3, r0
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	f47f af67 	bne.w	8010e3a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8010f6c:	4b18      	ldr	r3, [pc, #96]	@ (8010fd0 <xQueueSemaphoreTake+0x21c>)
 8010f6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010f72:	601a      	str	r2, [r3, #0]
 8010f74:	f3bf 8f4f 	dsb	sy
 8010f78:	f3bf 8f6f 	isb	sy
 8010f7c:	e75d      	b.n	8010e3a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010f7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010f80:	f000 f976 	bl	8011270 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010f84:	f000 fc7c 	bl	8011880 <xTaskResumeAll>
 8010f88:	e757      	b.n	8010e3a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010f8a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010f8c:	f000 f970 	bl	8011270 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010f90:	f000 fc76 	bl	8011880 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010f94:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010f96:	f000 f9bd 	bl	8011314 <prvIsQueueEmpty>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	f43f af4c 	beq.w	8010e3a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d00d      	beq.n	8010fc4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8010fa8:	f001 fb66 	bl	8012678 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010fac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010fae:	f000 f8b7 	bl	8011120 <prvGetDisinheritPriorityAfterTimeout>
 8010fb2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010fb6:	689b      	ldr	r3, [r3, #8]
 8010fb8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010fba:	4618      	mov	r0, r3
 8010fbc:	f001 f924 	bl	8012208 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010fc0:	f001 fb8c 	bl	80126dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010fc4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	3738      	adds	r7, #56	@ 0x38
 8010fca:	46bd      	mov	sp, r7
 8010fcc:	bd80      	pop	{r7, pc}
 8010fce:	bf00      	nop
 8010fd0:	e000ed04 	.word	0xe000ed04

08010fd4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b08e      	sub	sp, #56	@ 0x38
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	60f8      	str	r0, [r7, #12]
 8010fdc:	60b9      	str	r1, [r7, #8]
 8010fde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8010fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d10b      	bne.n	8011002 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8010fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fee:	f383 8811 	msr	BASEPRI, r3
 8010ff2:	f3bf 8f6f 	isb	sy
 8010ff6:	f3bf 8f4f 	dsb	sy
 8010ffa:	623b      	str	r3, [r7, #32]
}
 8010ffc:	bf00      	nop
 8010ffe:	bf00      	nop
 8011000:	e7fd      	b.n	8010ffe <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011002:	68bb      	ldr	r3, [r7, #8]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d103      	bne.n	8011010 <xQueueReceiveFromISR+0x3c>
 8011008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801100a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801100c:	2b00      	cmp	r3, #0
 801100e:	d101      	bne.n	8011014 <xQueueReceiveFromISR+0x40>
 8011010:	2301      	movs	r3, #1
 8011012:	e000      	b.n	8011016 <xQueueReceiveFromISR+0x42>
 8011014:	2300      	movs	r3, #0
 8011016:	2b00      	cmp	r3, #0
 8011018:	d10b      	bne.n	8011032 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 801101a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801101e:	f383 8811 	msr	BASEPRI, r3
 8011022:	f3bf 8f6f 	isb	sy
 8011026:	f3bf 8f4f 	dsb	sy
 801102a:	61fb      	str	r3, [r7, #28]
}
 801102c:	bf00      	nop
 801102e:	bf00      	nop
 8011030:	e7fd      	b.n	801102e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011032:	f001 fc01 	bl	8012838 <vPortValidateInterruptPriority>
	__asm volatile
 8011036:	f3ef 8211 	mrs	r2, BASEPRI
 801103a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801103e:	f383 8811 	msr	BASEPRI, r3
 8011042:	f3bf 8f6f 	isb	sy
 8011046:	f3bf 8f4f 	dsb	sy
 801104a:	61ba      	str	r2, [r7, #24]
 801104c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801104e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011050:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011056:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801105a:	2b00      	cmp	r3, #0
 801105c:	d02f      	beq.n	80110be <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801105e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011060:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011064:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011068:	68b9      	ldr	r1, [r7, #8]
 801106a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801106c:	f000 f8da 	bl	8011224 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011072:	1e5a      	subs	r2, r3, #1
 8011074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011076:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011078:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801107c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011080:	d112      	bne.n	80110a8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011084:	691b      	ldr	r3, [r3, #16]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d016      	beq.n	80110b8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801108a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801108c:	3310      	adds	r3, #16
 801108e:	4618      	mov	r0, r3
 8011090:	f000 fdd8 	bl	8011c44 <xTaskRemoveFromEventList>
 8011094:	4603      	mov	r3, r0
 8011096:	2b00      	cmp	r3, #0
 8011098:	d00e      	beq.n	80110b8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d00b      	beq.n	80110b8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	2201      	movs	r2, #1
 80110a4:	601a      	str	r2, [r3, #0]
 80110a6:	e007      	b.n	80110b8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80110a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80110ac:	3301      	adds	r3, #1
 80110ae:	b2db      	uxtb	r3, r3
 80110b0:	b25a      	sxtb	r2, r3
 80110b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80110b8:	2301      	movs	r3, #1
 80110ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80110bc:	e001      	b.n	80110c2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80110be:	2300      	movs	r3, #0
 80110c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80110c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110c4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80110c6:	693b      	ldr	r3, [r7, #16]
 80110c8:	f383 8811 	msr	BASEPRI, r3
}
 80110cc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80110ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80110d0:	4618      	mov	r0, r3
 80110d2:	3738      	adds	r7, #56	@ 0x38
 80110d4:	46bd      	mov	sp, r7
 80110d6:	bd80      	pop	{r7, pc}

080110d8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80110d8:	b580      	push	{r7, lr}
 80110da:	b084      	sub	sp, #16
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d10b      	bne.n	8011102 <vQueueDelete+0x2a>
	__asm volatile
 80110ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110ee:	f383 8811 	msr	BASEPRI, r3
 80110f2:	f3bf 8f6f 	isb	sy
 80110f6:	f3bf 8f4f 	dsb	sy
 80110fa:	60bb      	str	r3, [r7, #8]
}
 80110fc:	bf00      	nop
 80110fe:	bf00      	nop
 8011100:	e7fd      	b.n	80110fe <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8011102:	68f8      	ldr	r0, [r7, #12]
 8011104:	f000 f934 	bl	8011370 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 801110e:	2b00      	cmp	r3, #0
 8011110:	d102      	bne.n	8011118 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8011112:	68f8      	ldr	r0, [r7, #12]
 8011114:	f001 fca0 	bl	8012a58 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8011118:	bf00      	nop
 801111a:	3710      	adds	r7, #16
 801111c:	46bd      	mov	sp, r7
 801111e:	bd80      	pop	{r7, pc}

08011120 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011120:	b480      	push	{r7}
 8011122:	b085      	sub	sp, #20
 8011124:	af00      	add	r7, sp, #0
 8011126:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801112c:	2b00      	cmp	r3, #0
 801112e:	d006      	beq.n	801113e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	f1c3 0307 	rsb	r3, r3, #7
 801113a:	60fb      	str	r3, [r7, #12]
 801113c:	e001      	b.n	8011142 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801113e:	2300      	movs	r3, #0
 8011140:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011142:	68fb      	ldr	r3, [r7, #12]
	}
 8011144:	4618      	mov	r0, r3
 8011146:	3714      	adds	r7, #20
 8011148:	46bd      	mov	sp, r7
 801114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801114e:	4770      	bx	lr

08011150 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011150:	b580      	push	{r7, lr}
 8011152:	b086      	sub	sp, #24
 8011154:	af00      	add	r7, sp, #0
 8011156:	60f8      	str	r0, [r7, #12]
 8011158:	60b9      	str	r1, [r7, #8]
 801115a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801115c:	2300      	movs	r3, #0
 801115e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011164:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801116a:	2b00      	cmp	r3, #0
 801116c:	d10d      	bne.n	801118a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d14d      	bne.n	8011212 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	689b      	ldr	r3, [r3, #8]
 801117a:	4618      	mov	r0, r3
 801117c:	f000 ffbc 	bl	80120f8 <xTaskPriorityDisinherit>
 8011180:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	2200      	movs	r2, #0
 8011186:	609a      	str	r2, [r3, #8]
 8011188:	e043      	b.n	8011212 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d119      	bne.n	80111c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	6858      	ldr	r0, [r3, #4]
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011198:	461a      	mov	r2, r3
 801119a:	68b9      	ldr	r1, [r7, #8]
 801119c:	f002 fbe1 	bl	8013962 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	685a      	ldr	r2, [r3, #4]
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80111a8:	441a      	add	r2, r3
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	685a      	ldr	r2, [r3, #4]
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	689b      	ldr	r3, [r3, #8]
 80111b6:	429a      	cmp	r2, r3
 80111b8:	d32b      	bcc.n	8011212 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	681a      	ldr	r2, [r3, #0]
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	605a      	str	r2, [r3, #4]
 80111c2:	e026      	b.n	8011212 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	68d8      	ldr	r0, [r3, #12]
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80111cc:	461a      	mov	r2, r3
 80111ce:	68b9      	ldr	r1, [r7, #8]
 80111d0:	f002 fbc7 	bl	8013962 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	68da      	ldr	r2, [r3, #12]
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80111dc:	425b      	negs	r3, r3
 80111de:	441a      	add	r2, r3
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	68da      	ldr	r2, [r3, #12]
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	429a      	cmp	r2, r3
 80111ee:	d207      	bcs.n	8011200 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	689a      	ldr	r2, [r3, #8]
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80111f8:	425b      	negs	r3, r3
 80111fa:	441a      	add	r2, r3
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	2b02      	cmp	r3, #2
 8011204:	d105      	bne.n	8011212 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011206:	693b      	ldr	r3, [r7, #16]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d002      	beq.n	8011212 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801120c:	693b      	ldr	r3, [r7, #16]
 801120e:	3b01      	subs	r3, #1
 8011210:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011212:	693b      	ldr	r3, [r7, #16]
 8011214:	1c5a      	adds	r2, r3, #1
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801121a:	697b      	ldr	r3, [r7, #20]
}
 801121c:	4618      	mov	r0, r3
 801121e:	3718      	adds	r7, #24
 8011220:	46bd      	mov	sp, r7
 8011222:	bd80      	pop	{r7, pc}

08011224 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b082      	sub	sp, #8
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
 801122c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011232:	2b00      	cmp	r3, #0
 8011234:	d018      	beq.n	8011268 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	68da      	ldr	r2, [r3, #12]
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801123e:	441a      	add	r2, r3
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	68da      	ldr	r2, [r3, #12]
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	689b      	ldr	r3, [r3, #8]
 801124c:	429a      	cmp	r2, r3
 801124e:	d303      	bcc.n	8011258 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	681a      	ldr	r2, [r3, #0]
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	68d9      	ldr	r1, [r3, #12]
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011260:	461a      	mov	r2, r3
 8011262:	6838      	ldr	r0, [r7, #0]
 8011264:	f002 fb7d 	bl	8013962 <memcpy>
	}
}
 8011268:	bf00      	nop
 801126a:	3708      	adds	r7, #8
 801126c:	46bd      	mov	sp, r7
 801126e:	bd80      	pop	{r7, pc}

08011270 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011270:	b580      	push	{r7, lr}
 8011272:	b084      	sub	sp, #16
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011278:	f001 f9fe 	bl	8012678 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011282:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011284:	e011      	b.n	80112aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801128a:	2b00      	cmp	r3, #0
 801128c:	d012      	beq.n	80112b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	3324      	adds	r3, #36	@ 0x24
 8011292:	4618      	mov	r0, r3
 8011294:	f000 fcd6 	bl	8011c44 <xTaskRemoveFromEventList>
 8011298:	4603      	mov	r3, r0
 801129a:	2b00      	cmp	r3, #0
 801129c:	d001      	beq.n	80112a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801129e:	f000 fdaf 	bl	8011e00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80112a2:	7bfb      	ldrb	r3, [r7, #15]
 80112a4:	3b01      	subs	r3, #1
 80112a6:	b2db      	uxtb	r3, r3
 80112a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80112aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	dce9      	bgt.n	8011286 <prvUnlockQueue+0x16>
 80112b2:	e000      	b.n	80112b6 <prvUnlockQueue+0x46>
					break;
 80112b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	22ff      	movs	r2, #255	@ 0xff
 80112ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80112be:	f001 fa0d 	bl	80126dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80112c2:	f001 f9d9 	bl	8012678 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80112cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80112ce:	e011      	b.n	80112f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	691b      	ldr	r3, [r3, #16]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d012      	beq.n	80112fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	3310      	adds	r3, #16
 80112dc:	4618      	mov	r0, r3
 80112de:	f000 fcb1 	bl	8011c44 <xTaskRemoveFromEventList>
 80112e2:	4603      	mov	r3, r0
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d001      	beq.n	80112ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80112e8:	f000 fd8a 	bl	8011e00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80112ec:	7bbb      	ldrb	r3, [r7, #14]
 80112ee:	3b01      	subs	r3, #1
 80112f0:	b2db      	uxtb	r3, r3
 80112f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80112f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	dce9      	bgt.n	80112d0 <prvUnlockQueue+0x60>
 80112fc:	e000      	b.n	8011300 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80112fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	22ff      	movs	r2, #255	@ 0xff
 8011304:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8011308:	f001 f9e8 	bl	80126dc <vPortExitCritical>
}
 801130c:	bf00      	nop
 801130e:	3710      	adds	r7, #16
 8011310:	46bd      	mov	sp, r7
 8011312:	bd80      	pop	{r7, pc}

08011314 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b084      	sub	sp, #16
 8011318:	af00      	add	r7, sp, #0
 801131a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801131c:	f001 f9ac 	bl	8012678 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011324:	2b00      	cmp	r3, #0
 8011326:	d102      	bne.n	801132e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011328:	2301      	movs	r3, #1
 801132a:	60fb      	str	r3, [r7, #12]
 801132c:	e001      	b.n	8011332 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801132e:	2300      	movs	r3, #0
 8011330:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011332:	f001 f9d3 	bl	80126dc <vPortExitCritical>

	return xReturn;
 8011336:	68fb      	ldr	r3, [r7, #12]
}
 8011338:	4618      	mov	r0, r3
 801133a:	3710      	adds	r7, #16
 801133c:	46bd      	mov	sp, r7
 801133e:	bd80      	pop	{r7, pc}

08011340 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011340:	b580      	push	{r7, lr}
 8011342:	b084      	sub	sp, #16
 8011344:	af00      	add	r7, sp, #0
 8011346:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011348:	f001 f996 	bl	8012678 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011354:	429a      	cmp	r2, r3
 8011356:	d102      	bne.n	801135e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011358:	2301      	movs	r3, #1
 801135a:	60fb      	str	r3, [r7, #12]
 801135c:	e001      	b.n	8011362 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801135e:	2300      	movs	r3, #0
 8011360:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011362:	f001 f9bb 	bl	80126dc <vPortExitCritical>

	return xReturn;
 8011366:	68fb      	ldr	r3, [r7, #12]
}
 8011368:	4618      	mov	r0, r3
 801136a:	3710      	adds	r7, #16
 801136c:	46bd      	mov	sp, r7
 801136e:	bd80      	pop	{r7, pc}

08011370 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8011370:	b480      	push	{r7}
 8011372:	b085      	sub	sp, #20
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011378:	2300      	movs	r3, #0
 801137a:	60fb      	str	r3, [r7, #12]
 801137c:	e016      	b.n	80113ac <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801137e:	4a10      	ldr	r2, [pc, #64]	@ (80113c0 <vQueueUnregisterQueue+0x50>)
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	00db      	lsls	r3, r3, #3
 8011384:	4413      	add	r3, r2
 8011386:	685b      	ldr	r3, [r3, #4]
 8011388:	687a      	ldr	r2, [r7, #4]
 801138a:	429a      	cmp	r2, r3
 801138c:	d10b      	bne.n	80113a6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801138e:	4a0c      	ldr	r2, [pc, #48]	@ (80113c0 <vQueueUnregisterQueue+0x50>)
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	2100      	movs	r1, #0
 8011394:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011398:	4a09      	ldr	r2, [pc, #36]	@ (80113c0 <vQueueUnregisterQueue+0x50>)
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	00db      	lsls	r3, r3, #3
 801139e:	4413      	add	r3, r2
 80113a0:	2200      	movs	r2, #0
 80113a2:	605a      	str	r2, [r3, #4]
				break;
 80113a4:	e006      	b.n	80113b4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	3301      	adds	r3, #1
 80113aa:	60fb      	str	r3, [r7, #12]
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	2b07      	cmp	r3, #7
 80113b0:	d9e5      	bls.n	801137e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80113b2:	bf00      	nop
 80113b4:	bf00      	nop
 80113b6:	3714      	adds	r7, #20
 80113b8:	46bd      	mov	sp, r7
 80113ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113be:	4770      	bx	lr
 80113c0:	20002bd4 	.word	0x20002bd4

080113c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80113c4:	b580      	push	{r7, lr}
 80113c6:	b08e      	sub	sp, #56	@ 0x38
 80113c8:	af04      	add	r7, sp, #16
 80113ca:	60f8      	str	r0, [r7, #12]
 80113cc:	60b9      	str	r1, [r7, #8]
 80113ce:	607a      	str	r2, [r7, #4]
 80113d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80113d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d10b      	bne.n	80113f0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80113d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113dc:	f383 8811 	msr	BASEPRI, r3
 80113e0:	f3bf 8f6f 	isb	sy
 80113e4:	f3bf 8f4f 	dsb	sy
 80113e8:	623b      	str	r3, [r7, #32]
}
 80113ea:	bf00      	nop
 80113ec:	bf00      	nop
 80113ee:	e7fd      	b.n	80113ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80113f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d10b      	bne.n	801140e <xTaskCreateStatic+0x4a>
	__asm volatile
 80113f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113fa:	f383 8811 	msr	BASEPRI, r3
 80113fe:	f3bf 8f6f 	isb	sy
 8011402:	f3bf 8f4f 	dsb	sy
 8011406:	61fb      	str	r3, [r7, #28]
}
 8011408:	bf00      	nop
 801140a:	bf00      	nop
 801140c:	e7fd      	b.n	801140a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801140e:	23a0      	movs	r3, #160	@ 0xa0
 8011410:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011412:	693b      	ldr	r3, [r7, #16]
 8011414:	2ba0      	cmp	r3, #160	@ 0xa0
 8011416:	d00b      	beq.n	8011430 <xTaskCreateStatic+0x6c>
	__asm volatile
 8011418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801141c:	f383 8811 	msr	BASEPRI, r3
 8011420:	f3bf 8f6f 	isb	sy
 8011424:	f3bf 8f4f 	dsb	sy
 8011428:	61bb      	str	r3, [r7, #24]
}
 801142a:	bf00      	nop
 801142c:	bf00      	nop
 801142e:	e7fd      	b.n	801142c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011430:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011434:	2b00      	cmp	r3, #0
 8011436:	d01e      	beq.n	8011476 <xTaskCreateStatic+0xb2>
 8011438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801143a:	2b00      	cmp	r3, #0
 801143c:	d01b      	beq.n	8011476 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801143e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011440:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011444:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011446:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801144a:	2202      	movs	r2, #2
 801144c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011450:	2300      	movs	r3, #0
 8011452:	9303      	str	r3, [sp, #12]
 8011454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011456:	9302      	str	r3, [sp, #8]
 8011458:	f107 0314 	add.w	r3, r7, #20
 801145c:	9301      	str	r3, [sp, #4]
 801145e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011460:	9300      	str	r3, [sp, #0]
 8011462:	683b      	ldr	r3, [r7, #0]
 8011464:	687a      	ldr	r2, [r7, #4]
 8011466:	68b9      	ldr	r1, [r7, #8]
 8011468:	68f8      	ldr	r0, [r7, #12]
 801146a:	f000 f851 	bl	8011510 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801146e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011470:	f000 f8ee 	bl	8011650 <prvAddNewTaskToReadyList>
 8011474:	e001      	b.n	801147a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8011476:	2300      	movs	r3, #0
 8011478:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801147a:	697b      	ldr	r3, [r7, #20]
	}
 801147c:	4618      	mov	r0, r3
 801147e:	3728      	adds	r7, #40	@ 0x28
 8011480:	46bd      	mov	sp, r7
 8011482:	bd80      	pop	{r7, pc}

08011484 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011484:	b580      	push	{r7, lr}
 8011486:	b08c      	sub	sp, #48	@ 0x30
 8011488:	af04      	add	r7, sp, #16
 801148a:	60f8      	str	r0, [r7, #12]
 801148c:	60b9      	str	r1, [r7, #8]
 801148e:	603b      	str	r3, [r7, #0]
 8011490:	4613      	mov	r3, r2
 8011492:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011494:	88fb      	ldrh	r3, [r7, #6]
 8011496:	009b      	lsls	r3, r3, #2
 8011498:	4618      	mov	r0, r3
 801149a:	f001 fa0f 	bl	80128bc <pvPortMalloc>
 801149e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80114a0:	697b      	ldr	r3, [r7, #20]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d00e      	beq.n	80114c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80114a6:	20a0      	movs	r0, #160	@ 0xa0
 80114a8:	f001 fa08 	bl	80128bc <pvPortMalloc>
 80114ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80114ae:	69fb      	ldr	r3, [r7, #28]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d003      	beq.n	80114bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80114b4:	69fb      	ldr	r3, [r7, #28]
 80114b6:	697a      	ldr	r2, [r7, #20]
 80114b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80114ba:	e005      	b.n	80114c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80114bc:	6978      	ldr	r0, [r7, #20]
 80114be:	f001 facb 	bl	8012a58 <vPortFree>
 80114c2:	e001      	b.n	80114c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80114c4:	2300      	movs	r3, #0
 80114c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80114c8:	69fb      	ldr	r3, [r7, #28]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d017      	beq.n	80114fe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80114ce:	69fb      	ldr	r3, [r7, #28]
 80114d0:	2200      	movs	r2, #0
 80114d2:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80114d6:	88fa      	ldrh	r2, [r7, #6]
 80114d8:	2300      	movs	r3, #0
 80114da:	9303      	str	r3, [sp, #12]
 80114dc:	69fb      	ldr	r3, [r7, #28]
 80114de:	9302      	str	r3, [sp, #8]
 80114e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114e2:	9301      	str	r3, [sp, #4]
 80114e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114e6:	9300      	str	r3, [sp, #0]
 80114e8:	683b      	ldr	r3, [r7, #0]
 80114ea:	68b9      	ldr	r1, [r7, #8]
 80114ec:	68f8      	ldr	r0, [r7, #12]
 80114ee:	f000 f80f 	bl	8011510 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80114f2:	69f8      	ldr	r0, [r7, #28]
 80114f4:	f000 f8ac 	bl	8011650 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80114f8:	2301      	movs	r3, #1
 80114fa:	61bb      	str	r3, [r7, #24]
 80114fc:	e002      	b.n	8011504 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80114fe:	f04f 33ff 	mov.w	r3, #4294967295
 8011502:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011504:	69bb      	ldr	r3, [r7, #24]
	}
 8011506:	4618      	mov	r0, r3
 8011508:	3720      	adds	r7, #32
 801150a:	46bd      	mov	sp, r7
 801150c:	bd80      	pop	{r7, pc}
	...

08011510 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011510:	b580      	push	{r7, lr}
 8011512:	b088      	sub	sp, #32
 8011514:	af00      	add	r7, sp, #0
 8011516:	60f8      	str	r0, [r7, #12]
 8011518:	60b9      	str	r1, [r7, #8]
 801151a:	607a      	str	r2, [r7, #4]
 801151c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801151e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011520:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011528:	3b01      	subs	r3, #1
 801152a:	009b      	lsls	r3, r3, #2
 801152c:	4413      	add	r3, r2
 801152e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011530:	69bb      	ldr	r3, [r7, #24]
 8011532:	f023 0307 	bic.w	r3, r3, #7
 8011536:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011538:	69bb      	ldr	r3, [r7, #24]
 801153a:	f003 0307 	and.w	r3, r3, #7
 801153e:	2b00      	cmp	r3, #0
 8011540:	d00b      	beq.n	801155a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8011542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011546:	f383 8811 	msr	BASEPRI, r3
 801154a:	f3bf 8f6f 	isb	sy
 801154e:	f3bf 8f4f 	dsb	sy
 8011552:	617b      	str	r3, [r7, #20]
}
 8011554:	bf00      	nop
 8011556:	bf00      	nop
 8011558:	e7fd      	b.n	8011556 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801155a:	68bb      	ldr	r3, [r7, #8]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d01f      	beq.n	80115a0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011560:	2300      	movs	r3, #0
 8011562:	61fb      	str	r3, [r7, #28]
 8011564:	e012      	b.n	801158c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011566:	68ba      	ldr	r2, [r7, #8]
 8011568:	69fb      	ldr	r3, [r7, #28]
 801156a:	4413      	add	r3, r2
 801156c:	7819      	ldrb	r1, [r3, #0]
 801156e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011570:	69fb      	ldr	r3, [r7, #28]
 8011572:	4413      	add	r3, r2
 8011574:	3334      	adds	r3, #52	@ 0x34
 8011576:	460a      	mov	r2, r1
 8011578:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801157a:	68ba      	ldr	r2, [r7, #8]
 801157c:	69fb      	ldr	r3, [r7, #28]
 801157e:	4413      	add	r3, r2
 8011580:	781b      	ldrb	r3, [r3, #0]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d006      	beq.n	8011594 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011586:	69fb      	ldr	r3, [r7, #28]
 8011588:	3301      	adds	r3, #1
 801158a:	61fb      	str	r3, [r7, #28]
 801158c:	69fb      	ldr	r3, [r7, #28]
 801158e:	2b0f      	cmp	r3, #15
 8011590:	d9e9      	bls.n	8011566 <prvInitialiseNewTask+0x56>
 8011592:	e000      	b.n	8011596 <prvInitialiseNewTask+0x86>
			{
				break;
 8011594:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011598:	2200      	movs	r2, #0
 801159a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801159e:	e003      	b.n	80115a8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80115a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115a2:	2200      	movs	r2, #0
 80115a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80115a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115aa:	2b06      	cmp	r3, #6
 80115ac:	d901      	bls.n	80115b2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80115ae:	2306      	movs	r3, #6
 80115b0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80115b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80115b6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80115b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80115bc:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80115be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115c0:	2200      	movs	r2, #0
 80115c2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80115c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115c6:	3304      	adds	r3, #4
 80115c8:	4618      	mov	r0, r3
 80115ca:	f7ff f88a 	bl	80106e2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80115ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115d0:	3318      	adds	r3, #24
 80115d2:	4618      	mov	r0, r3
 80115d4:	f7ff f885 	bl	80106e2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80115d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80115dc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80115de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115e0:	f1c3 0207 	rsb	r2, r3, #7
 80115e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115e6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80115e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80115ec:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80115ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115f0:	2200      	movs	r2, #0
 80115f2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80115f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115f8:	2200      	movs	r2, #0
 80115fa:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80115fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011600:	334c      	adds	r3, #76	@ 0x4c
 8011602:	224c      	movs	r2, #76	@ 0x4c
 8011604:	2100      	movs	r1, #0
 8011606:	4618      	mov	r0, r3
 8011608:	f002 f8d5 	bl	80137b6 <memset>
 801160c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801160e:	4a0d      	ldr	r2, [pc, #52]	@ (8011644 <prvInitialiseNewTask+0x134>)
 8011610:	651a      	str	r2, [r3, #80]	@ 0x50
 8011612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011614:	4a0c      	ldr	r2, [pc, #48]	@ (8011648 <prvInitialiseNewTask+0x138>)
 8011616:	655a      	str	r2, [r3, #84]	@ 0x54
 8011618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801161a:	4a0c      	ldr	r2, [pc, #48]	@ (801164c <prvInitialiseNewTask+0x13c>)
 801161c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801161e:	683a      	ldr	r2, [r7, #0]
 8011620:	68f9      	ldr	r1, [r7, #12]
 8011622:	69b8      	ldr	r0, [r7, #24]
 8011624:	f000 fefa 	bl	801241c <pxPortInitialiseStack>
 8011628:	4602      	mov	r2, r0
 801162a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801162c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801162e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011630:	2b00      	cmp	r3, #0
 8011632:	d002      	beq.n	801163a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011636:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011638:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801163a:	bf00      	nop
 801163c:	3720      	adds	r7, #32
 801163e:	46bd      	mov	sp, r7
 8011640:	bd80      	pop	{r7, pc}
 8011642:	bf00      	nop
 8011644:	20006968 	.word	0x20006968
 8011648:	200069d0 	.word	0x200069d0
 801164c:	20006a38 	.word	0x20006a38

08011650 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b082      	sub	sp, #8
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011658:	f001 f80e 	bl	8012678 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801165c:	4b2a      	ldr	r3, [pc, #168]	@ (8011708 <prvAddNewTaskToReadyList+0xb8>)
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	3301      	adds	r3, #1
 8011662:	4a29      	ldr	r2, [pc, #164]	@ (8011708 <prvAddNewTaskToReadyList+0xb8>)
 8011664:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011666:	4b29      	ldr	r3, [pc, #164]	@ (801170c <prvAddNewTaskToReadyList+0xbc>)
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d109      	bne.n	8011682 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801166e:	4a27      	ldr	r2, [pc, #156]	@ (801170c <prvAddNewTaskToReadyList+0xbc>)
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011674:	4b24      	ldr	r3, [pc, #144]	@ (8011708 <prvAddNewTaskToReadyList+0xb8>)
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	2b01      	cmp	r3, #1
 801167a:	d110      	bne.n	801169e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801167c:	f000 fbe4 	bl	8011e48 <prvInitialiseTaskLists>
 8011680:	e00d      	b.n	801169e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011682:	4b23      	ldr	r3, [pc, #140]	@ (8011710 <prvAddNewTaskToReadyList+0xc0>)
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d109      	bne.n	801169e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801168a:	4b20      	ldr	r3, [pc, #128]	@ (801170c <prvAddNewTaskToReadyList+0xbc>)
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011694:	429a      	cmp	r2, r3
 8011696:	d802      	bhi.n	801169e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011698:	4a1c      	ldr	r2, [pc, #112]	@ (801170c <prvAddNewTaskToReadyList+0xbc>)
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801169e:	4b1d      	ldr	r3, [pc, #116]	@ (8011714 <prvAddNewTaskToReadyList+0xc4>)
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	3301      	adds	r3, #1
 80116a4:	4a1b      	ldr	r2, [pc, #108]	@ (8011714 <prvAddNewTaskToReadyList+0xc4>)
 80116a6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80116ac:	2201      	movs	r2, #1
 80116ae:	409a      	lsls	r2, r3
 80116b0:	4b19      	ldr	r3, [pc, #100]	@ (8011718 <prvAddNewTaskToReadyList+0xc8>)
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	4313      	orrs	r3, r2
 80116b6:	4a18      	ldr	r2, [pc, #96]	@ (8011718 <prvAddNewTaskToReadyList+0xc8>)
 80116b8:	6013      	str	r3, [r2, #0]
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80116be:	4613      	mov	r3, r2
 80116c0:	009b      	lsls	r3, r3, #2
 80116c2:	4413      	add	r3, r2
 80116c4:	009b      	lsls	r3, r3, #2
 80116c6:	4a15      	ldr	r2, [pc, #84]	@ (801171c <prvAddNewTaskToReadyList+0xcc>)
 80116c8:	441a      	add	r2, r3
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	3304      	adds	r3, #4
 80116ce:	4619      	mov	r1, r3
 80116d0:	4610      	mov	r0, r2
 80116d2:	f7ff f813 	bl	80106fc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80116d6:	f001 f801 	bl	80126dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80116da:	4b0d      	ldr	r3, [pc, #52]	@ (8011710 <prvAddNewTaskToReadyList+0xc0>)
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d00e      	beq.n	8011700 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80116e2:	4b0a      	ldr	r3, [pc, #40]	@ (801170c <prvAddNewTaskToReadyList+0xbc>)
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80116ec:	429a      	cmp	r2, r3
 80116ee:	d207      	bcs.n	8011700 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80116f0:	4b0b      	ldr	r3, [pc, #44]	@ (8011720 <prvAddNewTaskToReadyList+0xd0>)
 80116f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80116f6:	601a      	str	r2, [r3, #0]
 80116f8:	f3bf 8f4f 	dsb	sy
 80116fc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011700:	bf00      	nop
 8011702:	3708      	adds	r7, #8
 8011704:	46bd      	mov	sp, r7
 8011706:	bd80      	pop	{r7, pc}
 8011708:	20002d14 	.word	0x20002d14
 801170c:	20002c14 	.word	0x20002c14
 8011710:	20002d20 	.word	0x20002d20
 8011714:	20002d30 	.word	0x20002d30
 8011718:	20002d1c 	.word	0x20002d1c
 801171c:	20002c18 	.word	0x20002c18
 8011720:	e000ed04 	.word	0xe000ed04

08011724 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011724:	b580      	push	{r7, lr}
 8011726:	b084      	sub	sp, #16
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801172c:	2300      	movs	r3, #0
 801172e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d018      	beq.n	8011768 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011736:	4b14      	ldr	r3, [pc, #80]	@ (8011788 <vTaskDelay+0x64>)
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d00b      	beq.n	8011756 <vTaskDelay+0x32>
	__asm volatile
 801173e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011742:	f383 8811 	msr	BASEPRI, r3
 8011746:	f3bf 8f6f 	isb	sy
 801174a:	f3bf 8f4f 	dsb	sy
 801174e:	60bb      	str	r3, [r7, #8]
}
 8011750:	bf00      	nop
 8011752:	bf00      	nop
 8011754:	e7fd      	b.n	8011752 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011756:	f000 f885 	bl	8011864 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801175a:	2100      	movs	r1, #0
 801175c:	6878      	ldr	r0, [r7, #4]
 801175e:	f000 fdf7 	bl	8012350 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011762:	f000 f88d 	bl	8011880 <xTaskResumeAll>
 8011766:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d107      	bne.n	801177e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801176e:	4b07      	ldr	r3, [pc, #28]	@ (801178c <vTaskDelay+0x68>)
 8011770:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011774:	601a      	str	r2, [r3, #0]
 8011776:	f3bf 8f4f 	dsb	sy
 801177a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801177e:	bf00      	nop
 8011780:	3710      	adds	r7, #16
 8011782:	46bd      	mov	sp, r7
 8011784:	bd80      	pop	{r7, pc}
 8011786:	bf00      	nop
 8011788:	20002d3c 	.word	0x20002d3c
 801178c:	e000ed04 	.word	0xe000ed04

08011790 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011790:	b580      	push	{r7, lr}
 8011792:	b08a      	sub	sp, #40	@ 0x28
 8011794:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011796:	2300      	movs	r3, #0
 8011798:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801179a:	2300      	movs	r3, #0
 801179c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801179e:	463a      	mov	r2, r7
 80117a0:	1d39      	adds	r1, r7, #4
 80117a2:	f107 0308 	add.w	r3, r7, #8
 80117a6:	4618      	mov	r0, r3
 80117a8:	f7f0 fe56 	bl	8002458 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80117ac:	6839      	ldr	r1, [r7, #0]
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	68ba      	ldr	r2, [r7, #8]
 80117b2:	9202      	str	r2, [sp, #8]
 80117b4:	9301      	str	r3, [sp, #4]
 80117b6:	2300      	movs	r3, #0
 80117b8:	9300      	str	r3, [sp, #0]
 80117ba:	2300      	movs	r3, #0
 80117bc:	460a      	mov	r2, r1
 80117be:	4921      	ldr	r1, [pc, #132]	@ (8011844 <vTaskStartScheduler+0xb4>)
 80117c0:	4821      	ldr	r0, [pc, #132]	@ (8011848 <vTaskStartScheduler+0xb8>)
 80117c2:	f7ff fdff 	bl	80113c4 <xTaskCreateStatic>
 80117c6:	4603      	mov	r3, r0
 80117c8:	4a20      	ldr	r2, [pc, #128]	@ (801184c <vTaskStartScheduler+0xbc>)
 80117ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80117cc:	4b1f      	ldr	r3, [pc, #124]	@ (801184c <vTaskStartScheduler+0xbc>)
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d002      	beq.n	80117da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80117d4:	2301      	movs	r3, #1
 80117d6:	617b      	str	r3, [r7, #20]
 80117d8:	e001      	b.n	80117de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80117da:	2300      	movs	r3, #0
 80117dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80117de:	697b      	ldr	r3, [r7, #20]
 80117e0:	2b01      	cmp	r3, #1
 80117e2:	d11b      	bne.n	801181c <vTaskStartScheduler+0x8c>
	__asm volatile
 80117e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117e8:	f383 8811 	msr	BASEPRI, r3
 80117ec:	f3bf 8f6f 	isb	sy
 80117f0:	f3bf 8f4f 	dsb	sy
 80117f4:	613b      	str	r3, [r7, #16]
}
 80117f6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80117f8:	4b15      	ldr	r3, [pc, #84]	@ (8011850 <vTaskStartScheduler+0xc0>)
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	334c      	adds	r3, #76	@ 0x4c
 80117fe:	4a15      	ldr	r2, [pc, #84]	@ (8011854 <vTaskStartScheduler+0xc4>)
 8011800:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011802:	4b15      	ldr	r3, [pc, #84]	@ (8011858 <vTaskStartScheduler+0xc8>)
 8011804:	f04f 32ff 	mov.w	r2, #4294967295
 8011808:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801180a:	4b14      	ldr	r3, [pc, #80]	@ (801185c <vTaskStartScheduler+0xcc>)
 801180c:	2201      	movs	r2, #1
 801180e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011810:	4b13      	ldr	r3, [pc, #76]	@ (8011860 <vTaskStartScheduler+0xd0>)
 8011812:	2200      	movs	r2, #0
 8011814:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011816:	f000 fe8b 	bl	8012530 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801181a:	e00f      	b.n	801183c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801181c:	697b      	ldr	r3, [r7, #20]
 801181e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011822:	d10b      	bne.n	801183c <vTaskStartScheduler+0xac>
	__asm volatile
 8011824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011828:	f383 8811 	msr	BASEPRI, r3
 801182c:	f3bf 8f6f 	isb	sy
 8011830:	f3bf 8f4f 	dsb	sy
 8011834:	60fb      	str	r3, [r7, #12]
}
 8011836:	bf00      	nop
 8011838:	bf00      	nop
 801183a:	e7fd      	b.n	8011838 <vTaskStartScheduler+0xa8>
}
 801183c:	bf00      	nop
 801183e:	3718      	adds	r7, #24
 8011840:	46bd      	mov	sp, r7
 8011842:	bd80      	pop	{r7, pc}
 8011844:	08015c0c 	.word	0x08015c0c
 8011848:	08011e19 	.word	0x08011e19
 801184c:	20002d38 	.word	0x20002d38
 8011850:	20002c14 	.word	0x20002c14
 8011854:	20000034 	.word	0x20000034
 8011858:	20002d34 	.word	0x20002d34
 801185c:	20002d20 	.word	0x20002d20
 8011860:	20002d18 	.word	0x20002d18

08011864 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011864:	b480      	push	{r7}
 8011866:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011868:	4b04      	ldr	r3, [pc, #16]	@ (801187c <vTaskSuspendAll+0x18>)
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	3301      	adds	r3, #1
 801186e:	4a03      	ldr	r2, [pc, #12]	@ (801187c <vTaskSuspendAll+0x18>)
 8011870:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011872:	bf00      	nop
 8011874:	46bd      	mov	sp, r7
 8011876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187a:	4770      	bx	lr
 801187c:	20002d3c 	.word	0x20002d3c

08011880 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011880:	b580      	push	{r7, lr}
 8011882:	b084      	sub	sp, #16
 8011884:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011886:	2300      	movs	r3, #0
 8011888:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801188a:	2300      	movs	r3, #0
 801188c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801188e:	4b42      	ldr	r3, [pc, #264]	@ (8011998 <xTaskResumeAll+0x118>)
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d10b      	bne.n	80118ae <xTaskResumeAll+0x2e>
	__asm volatile
 8011896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801189a:	f383 8811 	msr	BASEPRI, r3
 801189e:	f3bf 8f6f 	isb	sy
 80118a2:	f3bf 8f4f 	dsb	sy
 80118a6:	603b      	str	r3, [r7, #0]
}
 80118a8:	bf00      	nop
 80118aa:	bf00      	nop
 80118ac:	e7fd      	b.n	80118aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80118ae:	f000 fee3 	bl	8012678 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80118b2:	4b39      	ldr	r3, [pc, #228]	@ (8011998 <xTaskResumeAll+0x118>)
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	3b01      	subs	r3, #1
 80118b8:	4a37      	ldr	r2, [pc, #220]	@ (8011998 <xTaskResumeAll+0x118>)
 80118ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80118bc:	4b36      	ldr	r3, [pc, #216]	@ (8011998 <xTaskResumeAll+0x118>)
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d161      	bne.n	8011988 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80118c4:	4b35      	ldr	r3, [pc, #212]	@ (801199c <xTaskResumeAll+0x11c>)
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d05d      	beq.n	8011988 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80118cc:	e02e      	b.n	801192c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80118ce:	4b34      	ldr	r3, [pc, #208]	@ (80119a0 <xTaskResumeAll+0x120>)
 80118d0:	68db      	ldr	r3, [r3, #12]
 80118d2:	68db      	ldr	r3, [r3, #12]
 80118d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	3318      	adds	r3, #24
 80118da:	4618      	mov	r0, r3
 80118dc:	f7fe ff6b 	bl	80107b6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	3304      	adds	r3, #4
 80118e4:	4618      	mov	r0, r3
 80118e6:	f7fe ff66 	bl	80107b6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118ee:	2201      	movs	r2, #1
 80118f0:	409a      	lsls	r2, r3
 80118f2:	4b2c      	ldr	r3, [pc, #176]	@ (80119a4 <xTaskResumeAll+0x124>)
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	4313      	orrs	r3, r2
 80118f8:	4a2a      	ldr	r2, [pc, #168]	@ (80119a4 <xTaskResumeAll+0x124>)
 80118fa:	6013      	str	r3, [r2, #0]
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011900:	4613      	mov	r3, r2
 8011902:	009b      	lsls	r3, r3, #2
 8011904:	4413      	add	r3, r2
 8011906:	009b      	lsls	r3, r3, #2
 8011908:	4a27      	ldr	r2, [pc, #156]	@ (80119a8 <xTaskResumeAll+0x128>)
 801190a:	441a      	add	r2, r3
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	3304      	adds	r3, #4
 8011910:	4619      	mov	r1, r3
 8011912:	4610      	mov	r0, r2
 8011914:	f7fe fef2 	bl	80106fc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801191c:	4b23      	ldr	r3, [pc, #140]	@ (80119ac <xTaskResumeAll+0x12c>)
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011922:	429a      	cmp	r2, r3
 8011924:	d302      	bcc.n	801192c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8011926:	4b22      	ldr	r3, [pc, #136]	@ (80119b0 <xTaskResumeAll+0x130>)
 8011928:	2201      	movs	r2, #1
 801192a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801192c:	4b1c      	ldr	r3, [pc, #112]	@ (80119a0 <xTaskResumeAll+0x120>)
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d1cc      	bne.n	80118ce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d001      	beq.n	801193e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801193a:	f000 fb29 	bl	8011f90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801193e:	4b1d      	ldr	r3, [pc, #116]	@ (80119b4 <xTaskResumeAll+0x134>)
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d010      	beq.n	801196c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801194a:	f000 f837 	bl	80119bc <xTaskIncrementTick>
 801194e:	4603      	mov	r3, r0
 8011950:	2b00      	cmp	r3, #0
 8011952:	d002      	beq.n	801195a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011954:	4b16      	ldr	r3, [pc, #88]	@ (80119b0 <xTaskResumeAll+0x130>)
 8011956:	2201      	movs	r2, #1
 8011958:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	3b01      	subs	r3, #1
 801195e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d1f1      	bne.n	801194a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8011966:	4b13      	ldr	r3, [pc, #76]	@ (80119b4 <xTaskResumeAll+0x134>)
 8011968:	2200      	movs	r2, #0
 801196a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801196c:	4b10      	ldr	r3, [pc, #64]	@ (80119b0 <xTaskResumeAll+0x130>)
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d009      	beq.n	8011988 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011974:	2301      	movs	r3, #1
 8011976:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011978:	4b0f      	ldr	r3, [pc, #60]	@ (80119b8 <xTaskResumeAll+0x138>)
 801197a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801197e:	601a      	str	r2, [r3, #0]
 8011980:	f3bf 8f4f 	dsb	sy
 8011984:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011988:	f000 fea8 	bl	80126dc <vPortExitCritical>

	return xAlreadyYielded;
 801198c:	68bb      	ldr	r3, [r7, #8]
}
 801198e:	4618      	mov	r0, r3
 8011990:	3710      	adds	r7, #16
 8011992:	46bd      	mov	sp, r7
 8011994:	bd80      	pop	{r7, pc}
 8011996:	bf00      	nop
 8011998:	20002d3c 	.word	0x20002d3c
 801199c:	20002d14 	.word	0x20002d14
 80119a0:	20002cd4 	.word	0x20002cd4
 80119a4:	20002d1c 	.word	0x20002d1c
 80119a8:	20002c18 	.word	0x20002c18
 80119ac:	20002c14 	.word	0x20002c14
 80119b0:	20002d28 	.word	0x20002d28
 80119b4:	20002d24 	.word	0x20002d24
 80119b8:	e000ed04 	.word	0xe000ed04

080119bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80119bc:	b580      	push	{r7, lr}
 80119be:	b086      	sub	sp, #24
 80119c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80119c2:	2300      	movs	r3, #0
 80119c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80119c6:	4b4f      	ldr	r3, [pc, #316]	@ (8011b04 <xTaskIncrementTick+0x148>)
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	f040 808f 	bne.w	8011aee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80119d0:	4b4d      	ldr	r3, [pc, #308]	@ (8011b08 <xTaskIncrementTick+0x14c>)
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	3301      	adds	r3, #1
 80119d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80119d8:	4a4b      	ldr	r2, [pc, #300]	@ (8011b08 <xTaskIncrementTick+0x14c>)
 80119da:	693b      	ldr	r3, [r7, #16]
 80119dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80119de:	693b      	ldr	r3, [r7, #16]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d121      	bne.n	8011a28 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80119e4:	4b49      	ldr	r3, [pc, #292]	@ (8011b0c <xTaskIncrementTick+0x150>)
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d00b      	beq.n	8011a06 <xTaskIncrementTick+0x4a>
	__asm volatile
 80119ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119f2:	f383 8811 	msr	BASEPRI, r3
 80119f6:	f3bf 8f6f 	isb	sy
 80119fa:	f3bf 8f4f 	dsb	sy
 80119fe:	603b      	str	r3, [r7, #0]
}
 8011a00:	bf00      	nop
 8011a02:	bf00      	nop
 8011a04:	e7fd      	b.n	8011a02 <xTaskIncrementTick+0x46>
 8011a06:	4b41      	ldr	r3, [pc, #260]	@ (8011b0c <xTaskIncrementTick+0x150>)
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	60fb      	str	r3, [r7, #12]
 8011a0c:	4b40      	ldr	r3, [pc, #256]	@ (8011b10 <xTaskIncrementTick+0x154>)
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	4a3e      	ldr	r2, [pc, #248]	@ (8011b0c <xTaskIncrementTick+0x150>)
 8011a12:	6013      	str	r3, [r2, #0]
 8011a14:	4a3e      	ldr	r2, [pc, #248]	@ (8011b10 <xTaskIncrementTick+0x154>)
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	6013      	str	r3, [r2, #0]
 8011a1a:	4b3e      	ldr	r3, [pc, #248]	@ (8011b14 <xTaskIncrementTick+0x158>)
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	3301      	adds	r3, #1
 8011a20:	4a3c      	ldr	r2, [pc, #240]	@ (8011b14 <xTaskIncrementTick+0x158>)
 8011a22:	6013      	str	r3, [r2, #0]
 8011a24:	f000 fab4 	bl	8011f90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011a28:	4b3b      	ldr	r3, [pc, #236]	@ (8011b18 <xTaskIncrementTick+0x15c>)
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	693a      	ldr	r2, [r7, #16]
 8011a2e:	429a      	cmp	r2, r3
 8011a30:	d348      	bcc.n	8011ac4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011a32:	4b36      	ldr	r3, [pc, #216]	@ (8011b0c <xTaskIncrementTick+0x150>)
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d104      	bne.n	8011a46 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a3c:	4b36      	ldr	r3, [pc, #216]	@ (8011b18 <xTaskIncrementTick+0x15c>)
 8011a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8011a42:	601a      	str	r2, [r3, #0]
					break;
 8011a44:	e03e      	b.n	8011ac4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a46:	4b31      	ldr	r3, [pc, #196]	@ (8011b0c <xTaskIncrementTick+0x150>)
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	68db      	ldr	r3, [r3, #12]
 8011a4c:	68db      	ldr	r3, [r3, #12]
 8011a4e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011a50:	68bb      	ldr	r3, [r7, #8]
 8011a52:	685b      	ldr	r3, [r3, #4]
 8011a54:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011a56:	693a      	ldr	r2, [r7, #16]
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	429a      	cmp	r2, r3
 8011a5c:	d203      	bcs.n	8011a66 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011a5e:	4a2e      	ldr	r2, [pc, #184]	@ (8011b18 <xTaskIncrementTick+0x15c>)
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011a64:	e02e      	b.n	8011ac4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011a66:	68bb      	ldr	r3, [r7, #8]
 8011a68:	3304      	adds	r3, #4
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	f7fe fea3 	bl	80107b6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011a70:	68bb      	ldr	r3, [r7, #8]
 8011a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d004      	beq.n	8011a82 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011a78:	68bb      	ldr	r3, [r7, #8]
 8011a7a:	3318      	adds	r3, #24
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	f7fe fe9a 	bl	80107b6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011a82:	68bb      	ldr	r3, [r7, #8]
 8011a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a86:	2201      	movs	r2, #1
 8011a88:	409a      	lsls	r2, r3
 8011a8a:	4b24      	ldr	r3, [pc, #144]	@ (8011b1c <xTaskIncrementTick+0x160>)
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	4313      	orrs	r3, r2
 8011a90:	4a22      	ldr	r2, [pc, #136]	@ (8011b1c <xTaskIncrementTick+0x160>)
 8011a92:	6013      	str	r3, [r2, #0]
 8011a94:	68bb      	ldr	r3, [r7, #8]
 8011a96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a98:	4613      	mov	r3, r2
 8011a9a:	009b      	lsls	r3, r3, #2
 8011a9c:	4413      	add	r3, r2
 8011a9e:	009b      	lsls	r3, r3, #2
 8011aa0:	4a1f      	ldr	r2, [pc, #124]	@ (8011b20 <xTaskIncrementTick+0x164>)
 8011aa2:	441a      	add	r2, r3
 8011aa4:	68bb      	ldr	r3, [r7, #8]
 8011aa6:	3304      	adds	r3, #4
 8011aa8:	4619      	mov	r1, r3
 8011aaa:	4610      	mov	r0, r2
 8011aac:	f7fe fe26 	bl	80106fc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011ab0:	68bb      	ldr	r3, [r7, #8]
 8011ab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8011b24 <xTaskIncrementTick+0x168>)
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011aba:	429a      	cmp	r2, r3
 8011abc:	d3b9      	bcc.n	8011a32 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8011abe:	2301      	movs	r3, #1
 8011ac0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011ac2:	e7b6      	b.n	8011a32 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011ac4:	4b17      	ldr	r3, [pc, #92]	@ (8011b24 <xTaskIncrementTick+0x168>)
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011aca:	4915      	ldr	r1, [pc, #84]	@ (8011b20 <xTaskIncrementTick+0x164>)
 8011acc:	4613      	mov	r3, r2
 8011ace:	009b      	lsls	r3, r3, #2
 8011ad0:	4413      	add	r3, r2
 8011ad2:	009b      	lsls	r3, r3, #2
 8011ad4:	440b      	add	r3, r1
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	2b01      	cmp	r3, #1
 8011ada:	d901      	bls.n	8011ae0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8011adc:	2301      	movs	r3, #1
 8011ade:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011ae0:	4b11      	ldr	r3, [pc, #68]	@ (8011b28 <xTaskIncrementTick+0x16c>)
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d007      	beq.n	8011af8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8011ae8:	2301      	movs	r3, #1
 8011aea:	617b      	str	r3, [r7, #20]
 8011aec:	e004      	b.n	8011af8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011aee:	4b0f      	ldr	r3, [pc, #60]	@ (8011b2c <xTaskIncrementTick+0x170>)
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	3301      	adds	r3, #1
 8011af4:	4a0d      	ldr	r2, [pc, #52]	@ (8011b2c <xTaskIncrementTick+0x170>)
 8011af6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011af8:	697b      	ldr	r3, [r7, #20]
}
 8011afa:	4618      	mov	r0, r3
 8011afc:	3718      	adds	r7, #24
 8011afe:	46bd      	mov	sp, r7
 8011b00:	bd80      	pop	{r7, pc}
 8011b02:	bf00      	nop
 8011b04:	20002d3c 	.word	0x20002d3c
 8011b08:	20002d18 	.word	0x20002d18
 8011b0c:	20002ccc 	.word	0x20002ccc
 8011b10:	20002cd0 	.word	0x20002cd0
 8011b14:	20002d2c 	.word	0x20002d2c
 8011b18:	20002d34 	.word	0x20002d34
 8011b1c:	20002d1c 	.word	0x20002d1c
 8011b20:	20002c18 	.word	0x20002c18
 8011b24:	20002c14 	.word	0x20002c14
 8011b28:	20002d28 	.word	0x20002d28
 8011b2c:	20002d24 	.word	0x20002d24

08011b30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011b30:	b480      	push	{r7}
 8011b32:	b087      	sub	sp, #28
 8011b34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011b36:	4b2a      	ldr	r3, [pc, #168]	@ (8011be0 <vTaskSwitchContext+0xb0>)
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d003      	beq.n	8011b46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011b3e:	4b29      	ldr	r3, [pc, #164]	@ (8011be4 <vTaskSwitchContext+0xb4>)
 8011b40:	2201      	movs	r2, #1
 8011b42:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011b44:	e045      	b.n	8011bd2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8011b46:	4b27      	ldr	r3, [pc, #156]	@ (8011be4 <vTaskSwitchContext+0xb4>)
 8011b48:	2200      	movs	r2, #0
 8011b4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b4c:	4b26      	ldr	r3, [pc, #152]	@ (8011be8 <vTaskSwitchContext+0xb8>)
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	fab3 f383 	clz	r3, r3
 8011b58:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011b5a:	7afb      	ldrb	r3, [r7, #11]
 8011b5c:	f1c3 031f 	rsb	r3, r3, #31
 8011b60:	617b      	str	r3, [r7, #20]
 8011b62:	4922      	ldr	r1, [pc, #136]	@ (8011bec <vTaskSwitchContext+0xbc>)
 8011b64:	697a      	ldr	r2, [r7, #20]
 8011b66:	4613      	mov	r3, r2
 8011b68:	009b      	lsls	r3, r3, #2
 8011b6a:	4413      	add	r3, r2
 8011b6c:	009b      	lsls	r3, r3, #2
 8011b6e:	440b      	add	r3, r1
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d10b      	bne.n	8011b8e <vTaskSwitchContext+0x5e>
	__asm volatile
 8011b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b7a:	f383 8811 	msr	BASEPRI, r3
 8011b7e:	f3bf 8f6f 	isb	sy
 8011b82:	f3bf 8f4f 	dsb	sy
 8011b86:	607b      	str	r3, [r7, #4]
}
 8011b88:	bf00      	nop
 8011b8a:	bf00      	nop
 8011b8c:	e7fd      	b.n	8011b8a <vTaskSwitchContext+0x5a>
 8011b8e:	697a      	ldr	r2, [r7, #20]
 8011b90:	4613      	mov	r3, r2
 8011b92:	009b      	lsls	r3, r3, #2
 8011b94:	4413      	add	r3, r2
 8011b96:	009b      	lsls	r3, r3, #2
 8011b98:	4a14      	ldr	r2, [pc, #80]	@ (8011bec <vTaskSwitchContext+0xbc>)
 8011b9a:	4413      	add	r3, r2
 8011b9c:	613b      	str	r3, [r7, #16]
 8011b9e:	693b      	ldr	r3, [r7, #16]
 8011ba0:	685b      	ldr	r3, [r3, #4]
 8011ba2:	685a      	ldr	r2, [r3, #4]
 8011ba4:	693b      	ldr	r3, [r7, #16]
 8011ba6:	605a      	str	r2, [r3, #4]
 8011ba8:	693b      	ldr	r3, [r7, #16]
 8011baa:	685a      	ldr	r2, [r3, #4]
 8011bac:	693b      	ldr	r3, [r7, #16]
 8011bae:	3308      	adds	r3, #8
 8011bb0:	429a      	cmp	r2, r3
 8011bb2:	d104      	bne.n	8011bbe <vTaskSwitchContext+0x8e>
 8011bb4:	693b      	ldr	r3, [r7, #16]
 8011bb6:	685b      	ldr	r3, [r3, #4]
 8011bb8:	685a      	ldr	r2, [r3, #4]
 8011bba:	693b      	ldr	r3, [r7, #16]
 8011bbc:	605a      	str	r2, [r3, #4]
 8011bbe:	693b      	ldr	r3, [r7, #16]
 8011bc0:	685b      	ldr	r3, [r3, #4]
 8011bc2:	68db      	ldr	r3, [r3, #12]
 8011bc4:	4a0a      	ldr	r2, [pc, #40]	@ (8011bf0 <vTaskSwitchContext+0xc0>)
 8011bc6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011bc8:	4b09      	ldr	r3, [pc, #36]	@ (8011bf0 <vTaskSwitchContext+0xc0>)
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	334c      	adds	r3, #76	@ 0x4c
 8011bce:	4a09      	ldr	r2, [pc, #36]	@ (8011bf4 <vTaskSwitchContext+0xc4>)
 8011bd0:	6013      	str	r3, [r2, #0]
}
 8011bd2:	bf00      	nop
 8011bd4:	371c      	adds	r7, #28
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bdc:	4770      	bx	lr
 8011bde:	bf00      	nop
 8011be0:	20002d3c 	.word	0x20002d3c
 8011be4:	20002d28 	.word	0x20002d28
 8011be8:	20002d1c 	.word	0x20002d1c
 8011bec:	20002c18 	.word	0x20002c18
 8011bf0:	20002c14 	.word	0x20002c14
 8011bf4:	20000034 	.word	0x20000034

08011bf8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b084      	sub	sp, #16
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	6078      	str	r0, [r7, #4]
 8011c00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d10b      	bne.n	8011c20 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8011c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c0c:	f383 8811 	msr	BASEPRI, r3
 8011c10:	f3bf 8f6f 	isb	sy
 8011c14:	f3bf 8f4f 	dsb	sy
 8011c18:	60fb      	str	r3, [r7, #12]
}
 8011c1a:	bf00      	nop
 8011c1c:	bf00      	nop
 8011c1e:	e7fd      	b.n	8011c1c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011c20:	4b07      	ldr	r3, [pc, #28]	@ (8011c40 <vTaskPlaceOnEventList+0x48>)
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	3318      	adds	r3, #24
 8011c26:	4619      	mov	r1, r3
 8011c28:	6878      	ldr	r0, [r7, #4]
 8011c2a:	f7fe fd8b 	bl	8010744 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011c2e:	2101      	movs	r1, #1
 8011c30:	6838      	ldr	r0, [r7, #0]
 8011c32:	f000 fb8d 	bl	8012350 <prvAddCurrentTaskToDelayedList>
}
 8011c36:	bf00      	nop
 8011c38:	3710      	adds	r7, #16
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	bd80      	pop	{r7, pc}
 8011c3e:	bf00      	nop
 8011c40:	20002c14 	.word	0x20002c14

08011c44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011c44:	b580      	push	{r7, lr}
 8011c46:	b086      	sub	sp, #24
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	68db      	ldr	r3, [r3, #12]
 8011c50:	68db      	ldr	r3, [r3, #12]
 8011c52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011c54:	693b      	ldr	r3, [r7, #16]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d10b      	bne.n	8011c72 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8011c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c5e:	f383 8811 	msr	BASEPRI, r3
 8011c62:	f3bf 8f6f 	isb	sy
 8011c66:	f3bf 8f4f 	dsb	sy
 8011c6a:	60fb      	str	r3, [r7, #12]
}
 8011c6c:	bf00      	nop
 8011c6e:	bf00      	nop
 8011c70:	e7fd      	b.n	8011c6e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011c72:	693b      	ldr	r3, [r7, #16]
 8011c74:	3318      	adds	r3, #24
 8011c76:	4618      	mov	r0, r3
 8011c78:	f7fe fd9d 	bl	80107b6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8011cf4 <xTaskRemoveFromEventList+0xb0>)
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d11c      	bne.n	8011cbe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011c84:	693b      	ldr	r3, [r7, #16]
 8011c86:	3304      	adds	r3, #4
 8011c88:	4618      	mov	r0, r3
 8011c8a:	f7fe fd94 	bl	80107b6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011c8e:	693b      	ldr	r3, [r7, #16]
 8011c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c92:	2201      	movs	r2, #1
 8011c94:	409a      	lsls	r2, r3
 8011c96:	4b18      	ldr	r3, [pc, #96]	@ (8011cf8 <xTaskRemoveFromEventList+0xb4>)
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	4313      	orrs	r3, r2
 8011c9c:	4a16      	ldr	r2, [pc, #88]	@ (8011cf8 <xTaskRemoveFromEventList+0xb4>)
 8011c9e:	6013      	str	r3, [r2, #0]
 8011ca0:	693b      	ldr	r3, [r7, #16]
 8011ca2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011ca4:	4613      	mov	r3, r2
 8011ca6:	009b      	lsls	r3, r3, #2
 8011ca8:	4413      	add	r3, r2
 8011caa:	009b      	lsls	r3, r3, #2
 8011cac:	4a13      	ldr	r2, [pc, #76]	@ (8011cfc <xTaskRemoveFromEventList+0xb8>)
 8011cae:	441a      	add	r2, r3
 8011cb0:	693b      	ldr	r3, [r7, #16]
 8011cb2:	3304      	adds	r3, #4
 8011cb4:	4619      	mov	r1, r3
 8011cb6:	4610      	mov	r0, r2
 8011cb8:	f7fe fd20 	bl	80106fc <vListInsertEnd>
 8011cbc:	e005      	b.n	8011cca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011cbe:	693b      	ldr	r3, [r7, #16]
 8011cc0:	3318      	adds	r3, #24
 8011cc2:	4619      	mov	r1, r3
 8011cc4:	480e      	ldr	r0, [pc, #56]	@ (8011d00 <xTaskRemoveFromEventList+0xbc>)
 8011cc6:	f7fe fd19 	bl	80106fc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011cca:	693b      	ldr	r3, [r7, #16]
 8011ccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011cce:	4b0d      	ldr	r3, [pc, #52]	@ (8011d04 <xTaskRemoveFromEventList+0xc0>)
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011cd4:	429a      	cmp	r2, r3
 8011cd6:	d905      	bls.n	8011ce4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011cd8:	2301      	movs	r3, #1
 8011cda:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8011d08 <xTaskRemoveFromEventList+0xc4>)
 8011cde:	2201      	movs	r2, #1
 8011ce0:	601a      	str	r2, [r3, #0]
 8011ce2:	e001      	b.n	8011ce8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011ce4:	2300      	movs	r3, #0
 8011ce6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011ce8:	697b      	ldr	r3, [r7, #20]
}
 8011cea:	4618      	mov	r0, r3
 8011cec:	3718      	adds	r7, #24
 8011cee:	46bd      	mov	sp, r7
 8011cf0:	bd80      	pop	{r7, pc}
 8011cf2:	bf00      	nop
 8011cf4:	20002d3c 	.word	0x20002d3c
 8011cf8:	20002d1c 	.word	0x20002d1c
 8011cfc:	20002c18 	.word	0x20002c18
 8011d00:	20002cd4 	.word	0x20002cd4
 8011d04:	20002c14 	.word	0x20002c14
 8011d08:	20002d28 	.word	0x20002d28

08011d0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011d0c:	b480      	push	{r7}
 8011d0e:	b083      	sub	sp, #12
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011d14:	4b06      	ldr	r3, [pc, #24]	@ (8011d30 <vTaskInternalSetTimeOutState+0x24>)
 8011d16:	681a      	ldr	r2, [r3, #0]
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011d1c:	4b05      	ldr	r3, [pc, #20]	@ (8011d34 <vTaskInternalSetTimeOutState+0x28>)
 8011d1e:	681a      	ldr	r2, [r3, #0]
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	605a      	str	r2, [r3, #4]
}
 8011d24:	bf00      	nop
 8011d26:	370c      	adds	r7, #12
 8011d28:	46bd      	mov	sp, r7
 8011d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d2e:	4770      	bx	lr
 8011d30:	20002d2c 	.word	0x20002d2c
 8011d34:	20002d18 	.word	0x20002d18

08011d38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b088      	sub	sp, #32
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
 8011d40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d10b      	bne.n	8011d60 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8011d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d4c:	f383 8811 	msr	BASEPRI, r3
 8011d50:	f3bf 8f6f 	isb	sy
 8011d54:	f3bf 8f4f 	dsb	sy
 8011d58:	613b      	str	r3, [r7, #16]
}
 8011d5a:	bf00      	nop
 8011d5c:	bf00      	nop
 8011d5e:	e7fd      	b.n	8011d5c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011d60:	683b      	ldr	r3, [r7, #0]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d10b      	bne.n	8011d7e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8011d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d6a:	f383 8811 	msr	BASEPRI, r3
 8011d6e:	f3bf 8f6f 	isb	sy
 8011d72:	f3bf 8f4f 	dsb	sy
 8011d76:	60fb      	str	r3, [r7, #12]
}
 8011d78:	bf00      	nop
 8011d7a:	bf00      	nop
 8011d7c:	e7fd      	b.n	8011d7a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8011d7e:	f000 fc7b 	bl	8012678 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011d82:	4b1d      	ldr	r3, [pc, #116]	@ (8011df8 <xTaskCheckForTimeOut+0xc0>)
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	685b      	ldr	r3, [r3, #4]
 8011d8c:	69ba      	ldr	r2, [r7, #24]
 8011d8e:	1ad3      	subs	r3, r2, r3
 8011d90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011d92:	683b      	ldr	r3, [r7, #0]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d9a:	d102      	bne.n	8011da2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	61fb      	str	r3, [r7, #28]
 8011da0:	e023      	b.n	8011dea <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	681a      	ldr	r2, [r3, #0]
 8011da6:	4b15      	ldr	r3, [pc, #84]	@ (8011dfc <xTaskCheckForTimeOut+0xc4>)
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	429a      	cmp	r2, r3
 8011dac:	d007      	beq.n	8011dbe <xTaskCheckForTimeOut+0x86>
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	685b      	ldr	r3, [r3, #4]
 8011db2:	69ba      	ldr	r2, [r7, #24]
 8011db4:	429a      	cmp	r2, r3
 8011db6:	d302      	bcc.n	8011dbe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011db8:	2301      	movs	r3, #1
 8011dba:	61fb      	str	r3, [r7, #28]
 8011dbc:	e015      	b.n	8011dea <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011dbe:	683b      	ldr	r3, [r7, #0]
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	697a      	ldr	r2, [r7, #20]
 8011dc4:	429a      	cmp	r2, r3
 8011dc6:	d20b      	bcs.n	8011de0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011dc8:	683b      	ldr	r3, [r7, #0]
 8011dca:	681a      	ldr	r2, [r3, #0]
 8011dcc:	697b      	ldr	r3, [r7, #20]
 8011dce:	1ad2      	subs	r2, r2, r3
 8011dd0:	683b      	ldr	r3, [r7, #0]
 8011dd2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011dd4:	6878      	ldr	r0, [r7, #4]
 8011dd6:	f7ff ff99 	bl	8011d0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011dda:	2300      	movs	r3, #0
 8011ddc:	61fb      	str	r3, [r7, #28]
 8011dde:	e004      	b.n	8011dea <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8011de0:	683b      	ldr	r3, [r7, #0]
 8011de2:	2200      	movs	r2, #0
 8011de4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011de6:	2301      	movs	r3, #1
 8011de8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011dea:	f000 fc77 	bl	80126dc <vPortExitCritical>

	return xReturn;
 8011dee:	69fb      	ldr	r3, [r7, #28]
}
 8011df0:	4618      	mov	r0, r3
 8011df2:	3720      	adds	r7, #32
 8011df4:	46bd      	mov	sp, r7
 8011df6:	bd80      	pop	{r7, pc}
 8011df8:	20002d18 	.word	0x20002d18
 8011dfc:	20002d2c 	.word	0x20002d2c

08011e00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011e00:	b480      	push	{r7}
 8011e02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011e04:	4b03      	ldr	r3, [pc, #12]	@ (8011e14 <vTaskMissedYield+0x14>)
 8011e06:	2201      	movs	r2, #1
 8011e08:	601a      	str	r2, [r3, #0]
}
 8011e0a:	bf00      	nop
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e12:	4770      	bx	lr
 8011e14:	20002d28 	.word	0x20002d28

08011e18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b082      	sub	sp, #8
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011e20:	f000 f852 	bl	8011ec8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011e24:	4b06      	ldr	r3, [pc, #24]	@ (8011e40 <prvIdleTask+0x28>)
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	2b01      	cmp	r3, #1
 8011e2a:	d9f9      	bls.n	8011e20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011e2c:	4b05      	ldr	r3, [pc, #20]	@ (8011e44 <prvIdleTask+0x2c>)
 8011e2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011e32:	601a      	str	r2, [r3, #0]
 8011e34:	f3bf 8f4f 	dsb	sy
 8011e38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011e3c:	e7f0      	b.n	8011e20 <prvIdleTask+0x8>
 8011e3e:	bf00      	nop
 8011e40:	20002c18 	.word	0x20002c18
 8011e44:	e000ed04 	.word	0xe000ed04

08011e48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b082      	sub	sp, #8
 8011e4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011e4e:	2300      	movs	r3, #0
 8011e50:	607b      	str	r3, [r7, #4]
 8011e52:	e00c      	b.n	8011e6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011e54:	687a      	ldr	r2, [r7, #4]
 8011e56:	4613      	mov	r3, r2
 8011e58:	009b      	lsls	r3, r3, #2
 8011e5a:	4413      	add	r3, r2
 8011e5c:	009b      	lsls	r3, r3, #2
 8011e5e:	4a12      	ldr	r2, [pc, #72]	@ (8011ea8 <prvInitialiseTaskLists+0x60>)
 8011e60:	4413      	add	r3, r2
 8011e62:	4618      	mov	r0, r3
 8011e64:	f7fe fc1d 	bl	80106a2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	3301      	adds	r3, #1
 8011e6c:	607b      	str	r3, [r7, #4]
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	2b06      	cmp	r3, #6
 8011e72:	d9ef      	bls.n	8011e54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011e74:	480d      	ldr	r0, [pc, #52]	@ (8011eac <prvInitialiseTaskLists+0x64>)
 8011e76:	f7fe fc14 	bl	80106a2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011e7a:	480d      	ldr	r0, [pc, #52]	@ (8011eb0 <prvInitialiseTaskLists+0x68>)
 8011e7c:	f7fe fc11 	bl	80106a2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011e80:	480c      	ldr	r0, [pc, #48]	@ (8011eb4 <prvInitialiseTaskLists+0x6c>)
 8011e82:	f7fe fc0e 	bl	80106a2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011e86:	480c      	ldr	r0, [pc, #48]	@ (8011eb8 <prvInitialiseTaskLists+0x70>)
 8011e88:	f7fe fc0b 	bl	80106a2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011e8c:	480b      	ldr	r0, [pc, #44]	@ (8011ebc <prvInitialiseTaskLists+0x74>)
 8011e8e:	f7fe fc08 	bl	80106a2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011e92:	4b0b      	ldr	r3, [pc, #44]	@ (8011ec0 <prvInitialiseTaskLists+0x78>)
 8011e94:	4a05      	ldr	r2, [pc, #20]	@ (8011eac <prvInitialiseTaskLists+0x64>)
 8011e96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011e98:	4b0a      	ldr	r3, [pc, #40]	@ (8011ec4 <prvInitialiseTaskLists+0x7c>)
 8011e9a:	4a05      	ldr	r2, [pc, #20]	@ (8011eb0 <prvInitialiseTaskLists+0x68>)
 8011e9c:	601a      	str	r2, [r3, #0]
}
 8011e9e:	bf00      	nop
 8011ea0:	3708      	adds	r7, #8
 8011ea2:	46bd      	mov	sp, r7
 8011ea4:	bd80      	pop	{r7, pc}
 8011ea6:	bf00      	nop
 8011ea8:	20002c18 	.word	0x20002c18
 8011eac:	20002ca4 	.word	0x20002ca4
 8011eb0:	20002cb8 	.word	0x20002cb8
 8011eb4:	20002cd4 	.word	0x20002cd4
 8011eb8:	20002ce8 	.word	0x20002ce8
 8011ebc:	20002d00 	.word	0x20002d00
 8011ec0:	20002ccc 	.word	0x20002ccc
 8011ec4:	20002cd0 	.word	0x20002cd0

08011ec8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011ec8:	b580      	push	{r7, lr}
 8011eca:	b082      	sub	sp, #8
 8011ecc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011ece:	e019      	b.n	8011f04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011ed0:	f000 fbd2 	bl	8012678 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011ed4:	4b10      	ldr	r3, [pc, #64]	@ (8011f18 <prvCheckTasksWaitingTermination+0x50>)
 8011ed6:	68db      	ldr	r3, [r3, #12]
 8011ed8:	68db      	ldr	r3, [r3, #12]
 8011eda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	3304      	adds	r3, #4
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	f7fe fc68 	bl	80107b6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8011f1c <prvCheckTasksWaitingTermination+0x54>)
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	3b01      	subs	r3, #1
 8011eec:	4a0b      	ldr	r2, [pc, #44]	@ (8011f1c <prvCheckTasksWaitingTermination+0x54>)
 8011eee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8011f20 <prvCheckTasksWaitingTermination+0x58>)
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	3b01      	subs	r3, #1
 8011ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8011f20 <prvCheckTasksWaitingTermination+0x58>)
 8011ef8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011efa:	f000 fbef 	bl	80126dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011efe:	6878      	ldr	r0, [r7, #4]
 8011f00:	f000 f810 	bl	8011f24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011f04:	4b06      	ldr	r3, [pc, #24]	@ (8011f20 <prvCheckTasksWaitingTermination+0x58>)
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d1e1      	bne.n	8011ed0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011f0c:	bf00      	nop
 8011f0e:	bf00      	nop
 8011f10:	3708      	adds	r7, #8
 8011f12:	46bd      	mov	sp, r7
 8011f14:	bd80      	pop	{r7, pc}
 8011f16:	bf00      	nop
 8011f18:	20002ce8 	.word	0x20002ce8
 8011f1c:	20002d14 	.word	0x20002d14
 8011f20:	20002cfc 	.word	0x20002cfc

08011f24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011f24:	b580      	push	{r7, lr}
 8011f26:	b084      	sub	sp, #16
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	334c      	adds	r3, #76	@ 0x4c
 8011f30:	4618      	mov	r0, r3
 8011f32:	f001 fc5d 	bl	80137f0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d108      	bne.n	8011f52 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f44:	4618      	mov	r0, r3
 8011f46:	f000 fd87 	bl	8012a58 <vPortFree>
				vPortFree( pxTCB );
 8011f4a:	6878      	ldr	r0, [r7, #4]
 8011f4c:	f000 fd84 	bl	8012a58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011f50:	e019      	b.n	8011f86 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8011f58:	2b01      	cmp	r3, #1
 8011f5a:	d103      	bne.n	8011f64 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011f5c:	6878      	ldr	r0, [r7, #4]
 8011f5e:	f000 fd7b 	bl	8012a58 <vPortFree>
	}
 8011f62:	e010      	b.n	8011f86 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8011f6a:	2b02      	cmp	r3, #2
 8011f6c:	d00b      	beq.n	8011f86 <prvDeleteTCB+0x62>
	__asm volatile
 8011f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f72:	f383 8811 	msr	BASEPRI, r3
 8011f76:	f3bf 8f6f 	isb	sy
 8011f7a:	f3bf 8f4f 	dsb	sy
 8011f7e:	60fb      	str	r3, [r7, #12]
}
 8011f80:	bf00      	nop
 8011f82:	bf00      	nop
 8011f84:	e7fd      	b.n	8011f82 <prvDeleteTCB+0x5e>
	}
 8011f86:	bf00      	nop
 8011f88:	3710      	adds	r7, #16
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	bd80      	pop	{r7, pc}
	...

08011f90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011f90:	b480      	push	{r7}
 8011f92:	b083      	sub	sp, #12
 8011f94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011f96:	4b0c      	ldr	r3, [pc, #48]	@ (8011fc8 <prvResetNextTaskUnblockTime+0x38>)
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d104      	bne.n	8011faa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8011fcc <prvResetNextTaskUnblockTime+0x3c>)
 8011fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8011fa6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011fa8:	e008      	b.n	8011fbc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011faa:	4b07      	ldr	r3, [pc, #28]	@ (8011fc8 <prvResetNextTaskUnblockTime+0x38>)
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	68db      	ldr	r3, [r3, #12]
 8011fb0:	68db      	ldr	r3, [r3, #12]
 8011fb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	685b      	ldr	r3, [r3, #4]
 8011fb8:	4a04      	ldr	r2, [pc, #16]	@ (8011fcc <prvResetNextTaskUnblockTime+0x3c>)
 8011fba:	6013      	str	r3, [r2, #0]
}
 8011fbc:	bf00      	nop
 8011fbe:	370c      	adds	r7, #12
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc6:	4770      	bx	lr
 8011fc8:	20002ccc 	.word	0x20002ccc
 8011fcc:	20002d34 	.word	0x20002d34

08011fd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011fd0:	b480      	push	{r7}
 8011fd2:	b083      	sub	sp, #12
 8011fd4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8012004 <xTaskGetSchedulerState+0x34>)
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d102      	bne.n	8011fe4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011fde:	2301      	movs	r3, #1
 8011fe0:	607b      	str	r3, [r7, #4]
 8011fe2:	e008      	b.n	8011ff6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011fe4:	4b08      	ldr	r3, [pc, #32]	@ (8012008 <xTaskGetSchedulerState+0x38>)
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d102      	bne.n	8011ff2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011fec:	2302      	movs	r3, #2
 8011fee:	607b      	str	r3, [r7, #4]
 8011ff0:	e001      	b.n	8011ff6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011ff6:	687b      	ldr	r3, [r7, #4]
	}
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	370c      	adds	r7, #12
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012002:	4770      	bx	lr
 8012004:	20002d20 	.word	0x20002d20
 8012008:	20002d3c 	.word	0x20002d3c

0801200c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801200c:	b580      	push	{r7, lr}
 801200e:	b084      	sub	sp, #16
 8012010:	af00      	add	r7, sp, #0
 8012012:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012018:	2300      	movs	r3, #0
 801201a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d05e      	beq.n	80120e0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012022:	68bb      	ldr	r3, [r7, #8]
 8012024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012026:	4b31      	ldr	r3, [pc, #196]	@ (80120ec <xTaskPriorityInherit+0xe0>)
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801202c:	429a      	cmp	r2, r3
 801202e:	d24e      	bcs.n	80120ce <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012030:	68bb      	ldr	r3, [r7, #8]
 8012032:	699b      	ldr	r3, [r3, #24]
 8012034:	2b00      	cmp	r3, #0
 8012036:	db06      	blt.n	8012046 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012038:	4b2c      	ldr	r3, [pc, #176]	@ (80120ec <xTaskPriorityInherit+0xe0>)
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801203e:	f1c3 0207 	rsb	r2, r3, #7
 8012042:	68bb      	ldr	r3, [r7, #8]
 8012044:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012046:	68bb      	ldr	r3, [r7, #8]
 8012048:	6959      	ldr	r1, [r3, #20]
 801204a:	68bb      	ldr	r3, [r7, #8]
 801204c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801204e:	4613      	mov	r3, r2
 8012050:	009b      	lsls	r3, r3, #2
 8012052:	4413      	add	r3, r2
 8012054:	009b      	lsls	r3, r3, #2
 8012056:	4a26      	ldr	r2, [pc, #152]	@ (80120f0 <xTaskPriorityInherit+0xe4>)
 8012058:	4413      	add	r3, r2
 801205a:	4299      	cmp	r1, r3
 801205c:	d12f      	bne.n	80120be <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801205e:	68bb      	ldr	r3, [r7, #8]
 8012060:	3304      	adds	r3, #4
 8012062:	4618      	mov	r0, r3
 8012064:	f7fe fba7 	bl	80107b6 <uxListRemove>
 8012068:	4603      	mov	r3, r0
 801206a:	2b00      	cmp	r3, #0
 801206c:	d10a      	bne.n	8012084 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 801206e:	68bb      	ldr	r3, [r7, #8]
 8012070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012072:	2201      	movs	r2, #1
 8012074:	fa02 f303 	lsl.w	r3, r2, r3
 8012078:	43da      	mvns	r2, r3
 801207a:	4b1e      	ldr	r3, [pc, #120]	@ (80120f4 <xTaskPriorityInherit+0xe8>)
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	4013      	ands	r3, r2
 8012080:	4a1c      	ldr	r2, [pc, #112]	@ (80120f4 <xTaskPriorityInherit+0xe8>)
 8012082:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012084:	4b19      	ldr	r3, [pc, #100]	@ (80120ec <xTaskPriorityInherit+0xe0>)
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801208a:	68bb      	ldr	r3, [r7, #8]
 801208c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801208e:	68bb      	ldr	r3, [r7, #8]
 8012090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012092:	2201      	movs	r2, #1
 8012094:	409a      	lsls	r2, r3
 8012096:	4b17      	ldr	r3, [pc, #92]	@ (80120f4 <xTaskPriorityInherit+0xe8>)
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	4313      	orrs	r3, r2
 801209c:	4a15      	ldr	r2, [pc, #84]	@ (80120f4 <xTaskPriorityInherit+0xe8>)
 801209e:	6013      	str	r3, [r2, #0]
 80120a0:	68bb      	ldr	r3, [r7, #8]
 80120a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80120a4:	4613      	mov	r3, r2
 80120a6:	009b      	lsls	r3, r3, #2
 80120a8:	4413      	add	r3, r2
 80120aa:	009b      	lsls	r3, r3, #2
 80120ac:	4a10      	ldr	r2, [pc, #64]	@ (80120f0 <xTaskPriorityInherit+0xe4>)
 80120ae:	441a      	add	r2, r3
 80120b0:	68bb      	ldr	r3, [r7, #8]
 80120b2:	3304      	adds	r3, #4
 80120b4:	4619      	mov	r1, r3
 80120b6:	4610      	mov	r0, r2
 80120b8:	f7fe fb20 	bl	80106fc <vListInsertEnd>
 80120bc:	e004      	b.n	80120c8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80120be:	4b0b      	ldr	r3, [pc, #44]	@ (80120ec <xTaskPriorityInherit+0xe0>)
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80120c4:	68bb      	ldr	r3, [r7, #8]
 80120c6:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80120c8:	2301      	movs	r3, #1
 80120ca:	60fb      	str	r3, [r7, #12]
 80120cc:	e008      	b.n	80120e0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80120ce:	68bb      	ldr	r3, [r7, #8]
 80120d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80120d2:	4b06      	ldr	r3, [pc, #24]	@ (80120ec <xTaskPriorityInherit+0xe0>)
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120d8:	429a      	cmp	r2, r3
 80120da:	d201      	bcs.n	80120e0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80120dc:	2301      	movs	r3, #1
 80120de:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80120e0:	68fb      	ldr	r3, [r7, #12]
	}
 80120e2:	4618      	mov	r0, r3
 80120e4:	3710      	adds	r7, #16
 80120e6:	46bd      	mov	sp, r7
 80120e8:	bd80      	pop	{r7, pc}
 80120ea:	bf00      	nop
 80120ec:	20002c14 	.word	0x20002c14
 80120f0:	20002c18 	.word	0x20002c18
 80120f4:	20002d1c 	.word	0x20002d1c

080120f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80120f8:	b580      	push	{r7, lr}
 80120fa:	b086      	sub	sp, #24
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012104:	2300      	movs	r3, #0
 8012106:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d070      	beq.n	80121f0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801210e:	4b3b      	ldr	r3, [pc, #236]	@ (80121fc <xTaskPriorityDisinherit+0x104>)
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	693a      	ldr	r2, [r7, #16]
 8012114:	429a      	cmp	r2, r3
 8012116:	d00b      	beq.n	8012130 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8012118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801211c:	f383 8811 	msr	BASEPRI, r3
 8012120:	f3bf 8f6f 	isb	sy
 8012124:	f3bf 8f4f 	dsb	sy
 8012128:	60fb      	str	r3, [r7, #12]
}
 801212a:	bf00      	nop
 801212c:	bf00      	nop
 801212e:	e7fd      	b.n	801212c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8012130:	693b      	ldr	r3, [r7, #16]
 8012132:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012134:	2b00      	cmp	r3, #0
 8012136:	d10b      	bne.n	8012150 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8012138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801213c:	f383 8811 	msr	BASEPRI, r3
 8012140:	f3bf 8f6f 	isb	sy
 8012144:	f3bf 8f4f 	dsb	sy
 8012148:	60bb      	str	r3, [r7, #8]
}
 801214a:	bf00      	nop
 801214c:	bf00      	nop
 801214e:	e7fd      	b.n	801214c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8012150:	693b      	ldr	r3, [r7, #16]
 8012152:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012154:	1e5a      	subs	r2, r3, #1
 8012156:	693b      	ldr	r3, [r7, #16]
 8012158:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801215a:	693b      	ldr	r3, [r7, #16]
 801215c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801215e:	693b      	ldr	r3, [r7, #16]
 8012160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012162:	429a      	cmp	r2, r3
 8012164:	d044      	beq.n	80121f0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012166:	693b      	ldr	r3, [r7, #16]
 8012168:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801216a:	2b00      	cmp	r3, #0
 801216c:	d140      	bne.n	80121f0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801216e:	693b      	ldr	r3, [r7, #16]
 8012170:	3304      	adds	r3, #4
 8012172:	4618      	mov	r0, r3
 8012174:	f7fe fb1f 	bl	80107b6 <uxListRemove>
 8012178:	4603      	mov	r3, r0
 801217a:	2b00      	cmp	r3, #0
 801217c:	d115      	bne.n	80121aa <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801217e:	693b      	ldr	r3, [r7, #16]
 8012180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012182:	491f      	ldr	r1, [pc, #124]	@ (8012200 <xTaskPriorityDisinherit+0x108>)
 8012184:	4613      	mov	r3, r2
 8012186:	009b      	lsls	r3, r3, #2
 8012188:	4413      	add	r3, r2
 801218a:	009b      	lsls	r3, r3, #2
 801218c:	440b      	add	r3, r1
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d10a      	bne.n	80121aa <xTaskPriorityDisinherit+0xb2>
 8012194:	693b      	ldr	r3, [r7, #16]
 8012196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012198:	2201      	movs	r2, #1
 801219a:	fa02 f303 	lsl.w	r3, r2, r3
 801219e:	43da      	mvns	r2, r3
 80121a0:	4b18      	ldr	r3, [pc, #96]	@ (8012204 <xTaskPriorityDisinherit+0x10c>)
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	4013      	ands	r3, r2
 80121a6:	4a17      	ldr	r2, [pc, #92]	@ (8012204 <xTaskPriorityDisinherit+0x10c>)
 80121a8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80121aa:	693b      	ldr	r3, [r7, #16]
 80121ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80121ae:	693b      	ldr	r3, [r7, #16]
 80121b0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80121b2:	693b      	ldr	r3, [r7, #16]
 80121b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121b6:	f1c3 0207 	rsb	r2, r3, #7
 80121ba:	693b      	ldr	r3, [r7, #16]
 80121bc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80121be:	693b      	ldr	r3, [r7, #16]
 80121c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121c2:	2201      	movs	r2, #1
 80121c4:	409a      	lsls	r2, r3
 80121c6:	4b0f      	ldr	r3, [pc, #60]	@ (8012204 <xTaskPriorityDisinherit+0x10c>)
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	4313      	orrs	r3, r2
 80121cc:	4a0d      	ldr	r2, [pc, #52]	@ (8012204 <xTaskPriorityDisinherit+0x10c>)
 80121ce:	6013      	str	r3, [r2, #0]
 80121d0:	693b      	ldr	r3, [r7, #16]
 80121d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80121d4:	4613      	mov	r3, r2
 80121d6:	009b      	lsls	r3, r3, #2
 80121d8:	4413      	add	r3, r2
 80121da:	009b      	lsls	r3, r3, #2
 80121dc:	4a08      	ldr	r2, [pc, #32]	@ (8012200 <xTaskPriorityDisinherit+0x108>)
 80121de:	441a      	add	r2, r3
 80121e0:	693b      	ldr	r3, [r7, #16]
 80121e2:	3304      	adds	r3, #4
 80121e4:	4619      	mov	r1, r3
 80121e6:	4610      	mov	r0, r2
 80121e8:	f7fe fa88 	bl	80106fc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80121ec:	2301      	movs	r3, #1
 80121ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80121f0:	697b      	ldr	r3, [r7, #20]
	}
 80121f2:	4618      	mov	r0, r3
 80121f4:	3718      	adds	r7, #24
 80121f6:	46bd      	mov	sp, r7
 80121f8:	bd80      	pop	{r7, pc}
 80121fa:	bf00      	nop
 80121fc:	20002c14 	.word	0x20002c14
 8012200:	20002c18 	.word	0x20002c18
 8012204:	20002d1c 	.word	0x20002d1c

08012208 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012208:	b580      	push	{r7, lr}
 801220a:	b088      	sub	sp, #32
 801220c:	af00      	add	r7, sp, #0
 801220e:	6078      	str	r0, [r7, #4]
 8012210:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8012216:	2301      	movs	r3, #1
 8012218:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d079      	beq.n	8012314 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012220:	69bb      	ldr	r3, [r7, #24]
 8012222:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012224:	2b00      	cmp	r3, #0
 8012226:	d10b      	bne.n	8012240 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8012228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801222c:	f383 8811 	msr	BASEPRI, r3
 8012230:	f3bf 8f6f 	isb	sy
 8012234:	f3bf 8f4f 	dsb	sy
 8012238:	60fb      	str	r3, [r7, #12]
}
 801223a:	bf00      	nop
 801223c:	bf00      	nop
 801223e:	e7fd      	b.n	801223c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012240:	69bb      	ldr	r3, [r7, #24]
 8012242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012244:	683a      	ldr	r2, [r7, #0]
 8012246:	429a      	cmp	r2, r3
 8012248:	d902      	bls.n	8012250 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801224a:	683b      	ldr	r3, [r7, #0]
 801224c:	61fb      	str	r3, [r7, #28]
 801224e:	e002      	b.n	8012256 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012250:	69bb      	ldr	r3, [r7, #24]
 8012252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012254:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012256:	69bb      	ldr	r3, [r7, #24]
 8012258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801225a:	69fa      	ldr	r2, [r7, #28]
 801225c:	429a      	cmp	r2, r3
 801225e:	d059      	beq.n	8012314 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012260:	69bb      	ldr	r3, [r7, #24]
 8012262:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012264:	697a      	ldr	r2, [r7, #20]
 8012266:	429a      	cmp	r2, r3
 8012268:	d154      	bne.n	8012314 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801226a:	4b2c      	ldr	r3, [pc, #176]	@ (801231c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	69ba      	ldr	r2, [r7, #24]
 8012270:	429a      	cmp	r2, r3
 8012272:	d10b      	bne.n	801228c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8012274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012278:	f383 8811 	msr	BASEPRI, r3
 801227c:	f3bf 8f6f 	isb	sy
 8012280:	f3bf 8f4f 	dsb	sy
 8012284:	60bb      	str	r3, [r7, #8]
}
 8012286:	bf00      	nop
 8012288:	bf00      	nop
 801228a:	e7fd      	b.n	8012288 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801228c:	69bb      	ldr	r3, [r7, #24]
 801228e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012290:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012292:	69bb      	ldr	r3, [r7, #24]
 8012294:	69fa      	ldr	r2, [r7, #28]
 8012296:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012298:	69bb      	ldr	r3, [r7, #24]
 801229a:	699b      	ldr	r3, [r3, #24]
 801229c:	2b00      	cmp	r3, #0
 801229e:	db04      	blt.n	80122aa <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80122a0:	69fb      	ldr	r3, [r7, #28]
 80122a2:	f1c3 0207 	rsb	r2, r3, #7
 80122a6:	69bb      	ldr	r3, [r7, #24]
 80122a8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80122aa:	69bb      	ldr	r3, [r7, #24]
 80122ac:	6959      	ldr	r1, [r3, #20]
 80122ae:	693a      	ldr	r2, [r7, #16]
 80122b0:	4613      	mov	r3, r2
 80122b2:	009b      	lsls	r3, r3, #2
 80122b4:	4413      	add	r3, r2
 80122b6:	009b      	lsls	r3, r3, #2
 80122b8:	4a19      	ldr	r2, [pc, #100]	@ (8012320 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80122ba:	4413      	add	r3, r2
 80122bc:	4299      	cmp	r1, r3
 80122be:	d129      	bne.n	8012314 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80122c0:	69bb      	ldr	r3, [r7, #24]
 80122c2:	3304      	adds	r3, #4
 80122c4:	4618      	mov	r0, r3
 80122c6:	f7fe fa76 	bl	80107b6 <uxListRemove>
 80122ca:	4603      	mov	r3, r0
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d10a      	bne.n	80122e6 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80122d0:	69bb      	ldr	r3, [r7, #24]
 80122d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122d4:	2201      	movs	r2, #1
 80122d6:	fa02 f303 	lsl.w	r3, r2, r3
 80122da:	43da      	mvns	r2, r3
 80122dc:	4b11      	ldr	r3, [pc, #68]	@ (8012324 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	4013      	ands	r3, r2
 80122e2:	4a10      	ldr	r2, [pc, #64]	@ (8012324 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80122e4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80122e6:	69bb      	ldr	r3, [r7, #24]
 80122e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122ea:	2201      	movs	r2, #1
 80122ec:	409a      	lsls	r2, r3
 80122ee:	4b0d      	ldr	r3, [pc, #52]	@ (8012324 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	4313      	orrs	r3, r2
 80122f4:	4a0b      	ldr	r2, [pc, #44]	@ (8012324 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80122f6:	6013      	str	r3, [r2, #0]
 80122f8:	69bb      	ldr	r3, [r7, #24]
 80122fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80122fc:	4613      	mov	r3, r2
 80122fe:	009b      	lsls	r3, r3, #2
 8012300:	4413      	add	r3, r2
 8012302:	009b      	lsls	r3, r3, #2
 8012304:	4a06      	ldr	r2, [pc, #24]	@ (8012320 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8012306:	441a      	add	r2, r3
 8012308:	69bb      	ldr	r3, [r7, #24]
 801230a:	3304      	adds	r3, #4
 801230c:	4619      	mov	r1, r3
 801230e:	4610      	mov	r0, r2
 8012310:	f7fe f9f4 	bl	80106fc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012314:	bf00      	nop
 8012316:	3720      	adds	r7, #32
 8012318:	46bd      	mov	sp, r7
 801231a:	bd80      	pop	{r7, pc}
 801231c:	20002c14 	.word	0x20002c14
 8012320:	20002c18 	.word	0x20002c18
 8012324:	20002d1c 	.word	0x20002d1c

08012328 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8012328:	b480      	push	{r7}
 801232a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801232c:	4b07      	ldr	r3, [pc, #28]	@ (801234c <pvTaskIncrementMutexHeldCount+0x24>)
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d004      	beq.n	801233e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012334:	4b05      	ldr	r3, [pc, #20]	@ (801234c <pvTaskIncrementMutexHeldCount+0x24>)
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801233a:	3201      	adds	r2, #1
 801233c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 801233e:	4b03      	ldr	r3, [pc, #12]	@ (801234c <pvTaskIncrementMutexHeldCount+0x24>)
 8012340:	681b      	ldr	r3, [r3, #0]
	}
 8012342:	4618      	mov	r0, r3
 8012344:	46bd      	mov	sp, r7
 8012346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801234a:	4770      	bx	lr
 801234c:	20002c14 	.word	0x20002c14

08012350 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012350:	b580      	push	{r7, lr}
 8012352:	b084      	sub	sp, #16
 8012354:	af00      	add	r7, sp, #0
 8012356:	6078      	str	r0, [r7, #4]
 8012358:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801235a:	4b29      	ldr	r3, [pc, #164]	@ (8012400 <prvAddCurrentTaskToDelayedList+0xb0>)
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012360:	4b28      	ldr	r3, [pc, #160]	@ (8012404 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	3304      	adds	r3, #4
 8012366:	4618      	mov	r0, r3
 8012368:	f7fe fa25 	bl	80107b6 <uxListRemove>
 801236c:	4603      	mov	r3, r0
 801236e:	2b00      	cmp	r3, #0
 8012370:	d10b      	bne.n	801238a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8012372:	4b24      	ldr	r3, [pc, #144]	@ (8012404 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012378:	2201      	movs	r2, #1
 801237a:	fa02 f303 	lsl.w	r3, r2, r3
 801237e:	43da      	mvns	r2, r3
 8012380:	4b21      	ldr	r3, [pc, #132]	@ (8012408 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	4013      	ands	r3, r2
 8012386:	4a20      	ldr	r2, [pc, #128]	@ (8012408 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012388:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012390:	d10a      	bne.n	80123a8 <prvAddCurrentTaskToDelayedList+0x58>
 8012392:	683b      	ldr	r3, [r7, #0]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d007      	beq.n	80123a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012398:	4b1a      	ldr	r3, [pc, #104]	@ (8012404 <prvAddCurrentTaskToDelayedList+0xb4>)
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	3304      	adds	r3, #4
 801239e:	4619      	mov	r1, r3
 80123a0:	481a      	ldr	r0, [pc, #104]	@ (801240c <prvAddCurrentTaskToDelayedList+0xbc>)
 80123a2:	f7fe f9ab 	bl	80106fc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80123a6:	e026      	b.n	80123f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80123a8:	68fa      	ldr	r2, [r7, #12]
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	4413      	add	r3, r2
 80123ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80123b0:	4b14      	ldr	r3, [pc, #80]	@ (8012404 <prvAddCurrentTaskToDelayedList+0xb4>)
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	68ba      	ldr	r2, [r7, #8]
 80123b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80123b8:	68ba      	ldr	r2, [r7, #8]
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	429a      	cmp	r2, r3
 80123be:	d209      	bcs.n	80123d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80123c0:	4b13      	ldr	r3, [pc, #76]	@ (8012410 <prvAddCurrentTaskToDelayedList+0xc0>)
 80123c2:	681a      	ldr	r2, [r3, #0]
 80123c4:	4b0f      	ldr	r3, [pc, #60]	@ (8012404 <prvAddCurrentTaskToDelayedList+0xb4>)
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	3304      	adds	r3, #4
 80123ca:	4619      	mov	r1, r3
 80123cc:	4610      	mov	r0, r2
 80123ce:	f7fe f9b9 	bl	8010744 <vListInsert>
}
 80123d2:	e010      	b.n	80123f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80123d4:	4b0f      	ldr	r3, [pc, #60]	@ (8012414 <prvAddCurrentTaskToDelayedList+0xc4>)
 80123d6:	681a      	ldr	r2, [r3, #0]
 80123d8:	4b0a      	ldr	r3, [pc, #40]	@ (8012404 <prvAddCurrentTaskToDelayedList+0xb4>)
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	3304      	adds	r3, #4
 80123de:	4619      	mov	r1, r3
 80123e0:	4610      	mov	r0, r2
 80123e2:	f7fe f9af 	bl	8010744 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80123e6:	4b0c      	ldr	r3, [pc, #48]	@ (8012418 <prvAddCurrentTaskToDelayedList+0xc8>)
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	68ba      	ldr	r2, [r7, #8]
 80123ec:	429a      	cmp	r2, r3
 80123ee:	d202      	bcs.n	80123f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80123f0:	4a09      	ldr	r2, [pc, #36]	@ (8012418 <prvAddCurrentTaskToDelayedList+0xc8>)
 80123f2:	68bb      	ldr	r3, [r7, #8]
 80123f4:	6013      	str	r3, [r2, #0]
}
 80123f6:	bf00      	nop
 80123f8:	3710      	adds	r7, #16
 80123fa:	46bd      	mov	sp, r7
 80123fc:	bd80      	pop	{r7, pc}
 80123fe:	bf00      	nop
 8012400:	20002d18 	.word	0x20002d18
 8012404:	20002c14 	.word	0x20002c14
 8012408:	20002d1c 	.word	0x20002d1c
 801240c:	20002d00 	.word	0x20002d00
 8012410:	20002cd0 	.word	0x20002cd0
 8012414:	20002ccc 	.word	0x20002ccc
 8012418:	20002d34 	.word	0x20002d34

0801241c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801241c:	b480      	push	{r7}
 801241e:	b085      	sub	sp, #20
 8012420:	af00      	add	r7, sp, #0
 8012422:	60f8      	str	r0, [r7, #12]
 8012424:	60b9      	str	r1, [r7, #8]
 8012426:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	3b04      	subs	r3, #4
 801242c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8012434:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	3b04      	subs	r3, #4
 801243a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801243c:	68bb      	ldr	r3, [r7, #8]
 801243e:	f023 0201 	bic.w	r2, r3, #1
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	3b04      	subs	r3, #4
 801244a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801244c:	4a0c      	ldr	r2, [pc, #48]	@ (8012480 <pxPortInitialiseStack+0x64>)
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	3b14      	subs	r3, #20
 8012456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012458:	687a      	ldr	r2, [r7, #4]
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	3b04      	subs	r3, #4
 8012462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	f06f 0202 	mvn.w	r2, #2
 801246a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	3b20      	subs	r3, #32
 8012470:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012472:	68fb      	ldr	r3, [r7, #12]
}
 8012474:	4618      	mov	r0, r3
 8012476:	3714      	adds	r7, #20
 8012478:	46bd      	mov	sp, r7
 801247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247e:	4770      	bx	lr
 8012480:	08012485 	.word	0x08012485

08012484 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012484:	b480      	push	{r7}
 8012486:	b085      	sub	sp, #20
 8012488:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801248a:	2300      	movs	r3, #0
 801248c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801248e:	4b13      	ldr	r3, [pc, #76]	@ (80124dc <prvTaskExitError+0x58>)
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012496:	d00b      	beq.n	80124b0 <prvTaskExitError+0x2c>
	__asm volatile
 8012498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801249c:	f383 8811 	msr	BASEPRI, r3
 80124a0:	f3bf 8f6f 	isb	sy
 80124a4:	f3bf 8f4f 	dsb	sy
 80124a8:	60fb      	str	r3, [r7, #12]
}
 80124aa:	bf00      	nop
 80124ac:	bf00      	nop
 80124ae:	e7fd      	b.n	80124ac <prvTaskExitError+0x28>
	__asm volatile
 80124b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124b4:	f383 8811 	msr	BASEPRI, r3
 80124b8:	f3bf 8f6f 	isb	sy
 80124bc:	f3bf 8f4f 	dsb	sy
 80124c0:	60bb      	str	r3, [r7, #8]
}
 80124c2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80124c4:	bf00      	nop
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d0fc      	beq.n	80124c6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80124cc:	bf00      	nop
 80124ce:	bf00      	nop
 80124d0:	3714      	adds	r7, #20
 80124d2:	46bd      	mov	sp, r7
 80124d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d8:	4770      	bx	lr
 80124da:	bf00      	nop
 80124dc:	20000024 	.word	0x20000024

080124e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80124e0:	4b07      	ldr	r3, [pc, #28]	@ (8012500 <pxCurrentTCBConst2>)
 80124e2:	6819      	ldr	r1, [r3, #0]
 80124e4:	6808      	ldr	r0, [r1, #0]
 80124e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124ea:	f380 8809 	msr	PSP, r0
 80124ee:	f3bf 8f6f 	isb	sy
 80124f2:	f04f 0000 	mov.w	r0, #0
 80124f6:	f380 8811 	msr	BASEPRI, r0
 80124fa:	4770      	bx	lr
 80124fc:	f3af 8000 	nop.w

08012500 <pxCurrentTCBConst2>:
 8012500:	20002c14 	.word	0x20002c14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012504:	bf00      	nop
 8012506:	bf00      	nop

08012508 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012508:	4808      	ldr	r0, [pc, #32]	@ (801252c <prvPortStartFirstTask+0x24>)
 801250a:	6800      	ldr	r0, [r0, #0]
 801250c:	6800      	ldr	r0, [r0, #0]
 801250e:	f380 8808 	msr	MSP, r0
 8012512:	f04f 0000 	mov.w	r0, #0
 8012516:	f380 8814 	msr	CONTROL, r0
 801251a:	b662      	cpsie	i
 801251c:	b661      	cpsie	f
 801251e:	f3bf 8f4f 	dsb	sy
 8012522:	f3bf 8f6f 	isb	sy
 8012526:	df00      	svc	0
 8012528:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801252a:	bf00      	nop
 801252c:	e000ed08 	.word	0xe000ed08

08012530 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012530:	b580      	push	{r7, lr}
 8012532:	b086      	sub	sp, #24
 8012534:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012536:	4b47      	ldr	r3, [pc, #284]	@ (8012654 <xPortStartScheduler+0x124>)
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	4a47      	ldr	r2, [pc, #284]	@ (8012658 <xPortStartScheduler+0x128>)
 801253c:	4293      	cmp	r3, r2
 801253e:	d10b      	bne.n	8012558 <xPortStartScheduler+0x28>
	__asm volatile
 8012540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012544:	f383 8811 	msr	BASEPRI, r3
 8012548:	f3bf 8f6f 	isb	sy
 801254c:	f3bf 8f4f 	dsb	sy
 8012550:	613b      	str	r3, [r7, #16]
}
 8012552:	bf00      	nop
 8012554:	bf00      	nop
 8012556:	e7fd      	b.n	8012554 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012558:	4b3e      	ldr	r3, [pc, #248]	@ (8012654 <xPortStartScheduler+0x124>)
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	4a3f      	ldr	r2, [pc, #252]	@ (801265c <xPortStartScheduler+0x12c>)
 801255e:	4293      	cmp	r3, r2
 8012560:	d10b      	bne.n	801257a <xPortStartScheduler+0x4a>
	__asm volatile
 8012562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012566:	f383 8811 	msr	BASEPRI, r3
 801256a:	f3bf 8f6f 	isb	sy
 801256e:	f3bf 8f4f 	dsb	sy
 8012572:	60fb      	str	r3, [r7, #12]
}
 8012574:	bf00      	nop
 8012576:	bf00      	nop
 8012578:	e7fd      	b.n	8012576 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801257a:	4b39      	ldr	r3, [pc, #228]	@ (8012660 <xPortStartScheduler+0x130>)
 801257c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801257e:	697b      	ldr	r3, [r7, #20]
 8012580:	781b      	ldrb	r3, [r3, #0]
 8012582:	b2db      	uxtb	r3, r3
 8012584:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012586:	697b      	ldr	r3, [r7, #20]
 8012588:	22ff      	movs	r2, #255	@ 0xff
 801258a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801258c:	697b      	ldr	r3, [r7, #20]
 801258e:	781b      	ldrb	r3, [r3, #0]
 8012590:	b2db      	uxtb	r3, r3
 8012592:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012594:	78fb      	ldrb	r3, [r7, #3]
 8012596:	b2db      	uxtb	r3, r3
 8012598:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801259c:	b2da      	uxtb	r2, r3
 801259e:	4b31      	ldr	r3, [pc, #196]	@ (8012664 <xPortStartScheduler+0x134>)
 80125a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80125a2:	4b31      	ldr	r3, [pc, #196]	@ (8012668 <xPortStartScheduler+0x138>)
 80125a4:	2207      	movs	r2, #7
 80125a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80125a8:	e009      	b.n	80125be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80125aa:	4b2f      	ldr	r3, [pc, #188]	@ (8012668 <xPortStartScheduler+0x138>)
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	3b01      	subs	r3, #1
 80125b0:	4a2d      	ldr	r2, [pc, #180]	@ (8012668 <xPortStartScheduler+0x138>)
 80125b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80125b4:	78fb      	ldrb	r3, [r7, #3]
 80125b6:	b2db      	uxtb	r3, r3
 80125b8:	005b      	lsls	r3, r3, #1
 80125ba:	b2db      	uxtb	r3, r3
 80125bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80125be:	78fb      	ldrb	r3, [r7, #3]
 80125c0:	b2db      	uxtb	r3, r3
 80125c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80125c6:	2b80      	cmp	r3, #128	@ 0x80
 80125c8:	d0ef      	beq.n	80125aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80125ca:	4b27      	ldr	r3, [pc, #156]	@ (8012668 <xPortStartScheduler+0x138>)
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	f1c3 0307 	rsb	r3, r3, #7
 80125d2:	2b04      	cmp	r3, #4
 80125d4:	d00b      	beq.n	80125ee <xPortStartScheduler+0xbe>
	__asm volatile
 80125d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125da:	f383 8811 	msr	BASEPRI, r3
 80125de:	f3bf 8f6f 	isb	sy
 80125e2:	f3bf 8f4f 	dsb	sy
 80125e6:	60bb      	str	r3, [r7, #8]
}
 80125e8:	bf00      	nop
 80125ea:	bf00      	nop
 80125ec:	e7fd      	b.n	80125ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80125ee:	4b1e      	ldr	r3, [pc, #120]	@ (8012668 <xPortStartScheduler+0x138>)
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	021b      	lsls	r3, r3, #8
 80125f4:	4a1c      	ldr	r2, [pc, #112]	@ (8012668 <xPortStartScheduler+0x138>)
 80125f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80125f8:	4b1b      	ldr	r3, [pc, #108]	@ (8012668 <xPortStartScheduler+0x138>)
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8012600:	4a19      	ldr	r2, [pc, #100]	@ (8012668 <xPortStartScheduler+0x138>)
 8012602:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	b2da      	uxtb	r2, r3
 8012608:	697b      	ldr	r3, [r7, #20]
 801260a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801260c:	4b17      	ldr	r3, [pc, #92]	@ (801266c <xPortStartScheduler+0x13c>)
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	4a16      	ldr	r2, [pc, #88]	@ (801266c <xPortStartScheduler+0x13c>)
 8012612:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012616:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012618:	4b14      	ldr	r3, [pc, #80]	@ (801266c <xPortStartScheduler+0x13c>)
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	4a13      	ldr	r2, [pc, #76]	@ (801266c <xPortStartScheduler+0x13c>)
 801261e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8012622:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012624:	f000 f8da 	bl	80127dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012628:	4b11      	ldr	r3, [pc, #68]	@ (8012670 <xPortStartScheduler+0x140>)
 801262a:	2200      	movs	r2, #0
 801262c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801262e:	f000 f8f9 	bl	8012824 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012632:	4b10      	ldr	r3, [pc, #64]	@ (8012674 <xPortStartScheduler+0x144>)
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	4a0f      	ldr	r2, [pc, #60]	@ (8012674 <xPortStartScheduler+0x144>)
 8012638:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801263c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801263e:	f7ff ff63 	bl	8012508 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012642:	f7ff fa75 	bl	8011b30 <vTaskSwitchContext>
	prvTaskExitError();
 8012646:	f7ff ff1d 	bl	8012484 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801264a:	2300      	movs	r3, #0
}
 801264c:	4618      	mov	r0, r3
 801264e:	3718      	adds	r7, #24
 8012650:	46bd      	mov	sp, r7
 8012652:	bd80      	pop	{r7, pc}
 8012654:	e000ed00 	.word	0xe000ed00
 8012658:	410fc271 	.word	0x410fc271
 801265c:	410fc270 	.word	0x410fc270
 8012660:	e000e400 	.word	0xe000e400
 8012664:	20002d40 	.word	0x20002d40
 8012668:	20002d44 	.word	0x20002d44
 801266c:	e000ed20 	.word	0xe000ed20
 8012670:	20000024 	.word	0x20000024
 8012674:	e000ef34 	.word	0xe000ef34

08012678 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012678:	b480      	push	{r7}
 801267a:	b083      	sub	sp, #12
 801267c:	af00      	add	r7, sp, #0
	__asm volatile
 801267e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012682:	f383 8811 	msr	BASEPRI, r3
 8012686:	f3bf 8f6f 	isb	sy
 801268a:	f3bf 8f4f 	dsb	sy
 801268e:	607b      	str	r3, [r7, #4]
}
 8012690:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012692:	4b10      	ldr	r3, [pc, #64]	@ (80126d4 <vPortEnterCritical+0x5c>)
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	3301      	adds	r3, #1
 8012698:	4a0e      	ldr	r2, [pc, #56]	@ (80126d4 <vPortEnterCritical+0x5c>)
 801269a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801269c:	4b0d      	ldr	r3, [pc, #52]	@ (80126d4 <vPortEnterCritical+0x5c>)
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	2b01      	cmp	r3, #1
 80126a2:	d110      	bne.n	80126c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80126a4:	4b0c      	ldr	r3, [pc, #48]	@ (80126d8 <vPortEnterCritical+0x60>)
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	b2db      	uxtb	r3, r3
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d00b      	beq.n	80126c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80126ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126b2:	f383 8811 	msr	BASEPRI, r3
 80126b6:	f3bf 8f6f 	isb	sy
 80126ba:	f3bf 8f4f 	dsb	sy
 80126be:	603b      	str	r3, [r7, #0]
}
 80126c0:	bf00      	nop
 80126c2:	bf00      	nop
 80126c4:	e7fd      	b.n	80126c2 <vPortEnterCritical+0x4a>
	}
}
 80126c6:	bf00      	nop
 80126c8:	370c      	adds	r7, #12
 80126ca:	46bd      	mov	sp, r7
 80126cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d0:	4770      	bx	lr
 80126d2:	bf00      	nop
 80126d4:	20000024 	.word	0x20000024
 80126d8:	e000ed04 	.word	0xe000ed04

080126dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80126dc:	b480      	push	{r7}
 80126de:	b083      	sub	sp, #12
 80126e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80126e2:	4b12      	ldr	r3, [pc, #72]	@ (801272c <vPortExitCritical+0x50>)
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d10b      	bne.n	8012702 <vPortExitCritical+0x26>
	__asm volatile
 80126ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126ee:	f383 8811 	msr	BASEPRI, r3
 80126f2:	f3bf 8f6f 	isb	sy
 80126f6:	f3bf 8f4f 	dsb	sy
 80126fa:	607b      	str	r3, [r7, #4]
}
 80126fc:	bf00      	nop
 80126fe:	bf00      	nop
 8012700:	e7fd      	b.n	80126fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012702:	4b0a      	ldr	r3, [pc, #40]	@ (801272c <vPortExitCritical+0x50>)
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	3b01      	subs	r3, #1
 8012708:	4a08      	ldr	r2, [pc, #32]	@ (801272c <vPortExitCritical+0x50>)
 801270a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801270c:	4b07      	ldr	r3, [pc, #28]	@ (801272c <vPortExitCritical+0x50>)
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	2b00      	cmp	r3, #0
 8012712:	d105      	bne.n	8012720 <vPortExitCritical+0x44>
 8012714:	2300      	movs	r3, #0
 8012716:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012718:	683b      	ldr	r3, [r7, #0]
 801271a:	f383 8811 	msr	BASEPRI, r3
}
 801271e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012720:	bf00      	nop
 8012722:	370c      	adds	r7, #12
 8012724:	46bd      	mov	sp, r7
 8012726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801272a:	4770      	bx	lr
 801272c:	20000024 	.word	0x20000024

08012730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012730:	f3ef 8009 	mrs	r0, PSP
 8012734:	f3bf 8f6f 	isb	sy
 8012738:	4b15      	ldr	r3, [pc, #84]	@ (8012790 <pxCurrentTCBConst>)
 801273a:	681a      	ldr	r2, [r3, #0]
 801273c:	f01e 0f10 	tst.w	lr, #16
 8012740:	bf08      	it	eq
 8012742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801274a:	6010      	str	r0, [r2, #0]
 801274c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012750:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8012754:	f380 8811 	msr	BASEPRI, r0
 8012758:	f3bf 8f4f 	dsb	sy
 801275c:	f3bf 8f6f 	isb	sy
 8012760:	f7ff f9e6 	bl	8011b30 <vTaskSwitchContext>
 8012764:	f04f 0000 	mov.w	r0, #0
 8012768:	f380 8811 	msr	BASEPRI, r0
 801276c:	bc09      	pop	{r0, r3}
 801276e:	6819      	ldr	r1, [r3, #0]
 8012770:	6808      	ldr	r0, [r1, #0]
 8012772:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012776:	f01e 0f10 	tst.w	lr, #16
 801277a:	bf08      	it	eq
 801277c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012780:	f380 8809 	msr	PSP, r0
 8012784:	f3bf 8f6f 	isb	sy
 8012788:	4770      	bx	lr
 801278a:	bf00      	nop
 801278c:	f3af 8000 	nop.w

08012790 <pxCurrentTCBConst>:
 8012790:	20002c14 	.word	0x20002c14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012794:	bf00      	nop
 8012796:	bf00      	nop

08012798 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012798:	b580      	push	{r7, lr}
 801279a:	b082      	sub	sp, #8
 801279c:	af00      	add	r7, sp, #0
	__asm volatile
 801279e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127a2:	f383 8811 	msr	BASEPRI, r3
 80127a6:	f3bf 8f6f 	isb	sy
 80127aa:	f3bf 8f4f 	dsb	sy
 80127ae:	607b      	str	r3, [r7, #4]
}
 80127b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80127b2:	f7ff f903 	bl	80119bc <xTaskIncrementTick>
 80127b6:	4603      	mov	r3, r0
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d003      	beq.n	80127c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80127bc:	4b06      	ldr	r3, [pc, #24]	@ (80127d8 <SysTick_Handler+0x40>)
 80127be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80127c2:	601a      	str	r2, [r3, #0]
 80127c4:	2300      	movs	r3, #0
 80127c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80127c8:	683b      	ldr	r3, [r7, #0]
 80127ca:	f383 8811 	msr	BASEPRI, r3
}
 80127ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80127d0:	bf00      	nop
 80127d2:	3708      	adds	r7, #8
 80127d4:	46bd      	mov	sp, r7
 80127d6:	bd80      	pop	{r7, pc}
 80127d8:	e000ed04 	.word	0xe000ed04

080127dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80127dc:	b480      	push	{r7}
 80127de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80127e0:	4b0b      	ldr	r3, [pc, #44]	@ (8012810 <vPortSetupTimerInterrupt+0x34>)
 80127e2:	2200      	movs	r2, #0
 80127e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80127e6:	4b0b      	ldr	r3, [pc, #44]	@ (8012814 <vPortSetupTimerInterrupt+0x38>)
 80127e8:	2200      	movs	r2, #0
 80127ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80127ec:	4b0a      	ldr	r3, [pc, #40]	@ (8012818 <vPortSetupTimerInterrupt+0x3c>)
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	4a0a      	ldr	r2, [pc, #40]	@ (801281c <vPortSetupTimerInterrupt+0x40>)
 80127f2:	fba2 2303 	umull	r2, r3, r2, r3
 80127f6:	099b      	lsrs	r3, r3, #6
 80127f8:	4a09      	ldr	r2, [pc, #36]	@ (8012820 <vPortSetupTimerInterrupt+0x44>)
 80127fa:	3b01      	subs	r3, #1
 80127fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80127fe:	4b04      	ldr	r3, [pc, #16]	@ (8012810 <vPortSetupTimerInterrupt+0x34>)
 8012800:	2207      	movs	r2, #7
 8012802:	601a      	str	r2, [r3, #0]
}
 8012804:	bf00      	nop
 8012806:	46bd      	mov	sp, r7
 8012808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801280c:	4770      	bx	lr
 801280e:	bf00      	nop
 8012810:	e000e010 	.word	0xe000e010
 8012814:	e000e018 	.word	0xe000e018
 8012818:	20000004 	.word	0x20000004
 801281c:	10624dd3 	.word	0x10624dd3
 8012820:	e000e014 	.word	0xe000e014

08012824 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012824:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8012834 <vPortEnableVFP+0x10>
 8012828:	6801      	ldr	r1, [r0, #0]
 801282a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801282e:	6001      	str	r1, [r0, #0]
 8012830:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012832:	bf00      	nop
 8012834:	e000ed88 	.word	0xe000ed88

08012838 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012838:	b480      	push	{r7}
 801283a:	b085      	sub	sp, #20
 801283c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801283e:	f3ef 8305 	mrs	r3, IPSR
 8012842:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	2b0f      	cmp	r3, #15
 8012848:	d915      	bls.n	8012876 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801284a:	4a18      	ldr	r2, [pc, #96]	@ (80128ac <vPortValidateInterruptPriority+0x74>)
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	4413      	add	r3, r2
 8012850:	781b      	ldrb	r3, [r3, #0]
 8012852:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012854:	4b16      	ldr	r3, [pc, #88]	@ (80128b0 <vPortValidateInterruptPriority+0x78>)
 8012856:	781b      	ldrb	r3, [r3, #0]
 8012858:	7afa      	ldrb	r2, [r7, #11]
 801285a:	429a      	cmp	r2, r3
 801285c:	d20b      	bcs.n	8012876 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801285e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012862:	f383 8811 	msr	BASEPRI, r3
 8012866:	f3bf 8f6f 	isb	sy
 801286a:	f3bf 8f4f 	dsb	sy
 801286e:	607b      	str	r3, [r7, #4]
}
 8012870:	bf00      	nop
 8012872:	bf00      	nop
 8012874:	e7fd      	b.n	8012872 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012876:	4b0f      	ldr	r3, [pc, #60]	@ (80128b4 <vPortValidateInterruptPriority+0x7c>)
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801287e:	4b0e      	ldr	r3, [pc, #56]	@ (80128b8 <vPortValidateInterruptPriority+0x80>)
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	429a      	cmp	r2, r3
 8012884:	d90b      	bls.n	801289e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8012886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801288a:	f383 8811 	msr	BASEPRI, r3
 801288e:	f3bf 8f6f 	isb	sy
 8012892:	f3bf 8f4f 	dsb	sy
 8012896:	603b      	str	r3, [r7, #0]
}
 8012898:	bf00      	nop
 801289a:	bf00      	nop
 801289c:	e7fd      	b.n	801289a <vPortValidateInterruptPriority+0x62>
	}
 801289e:	bf00      	nop
 80128a0:	3714      	adds	r7, #20
 80128a2:	46bd      	mov	sp, r7
 80128a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a8:	4770      	bx	lr
 80128aa:	bf00      	nop
 80128ac:	e000e3f0 	.word	0xe000e3f0
 80128b0:	20002d40 	.word	0x20002d40
 80128b4:	e000ed0c 	.word	0xe000ed0c
 80128b8:	20002d44 	.word	0x20002d44

080128bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b08a      	sub	sp, #40	@ 0x28
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80128c4:	2300      	movs	r3, #0
 80128c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80128c8:	f7fe ffcc 	bl	8011864 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80128cc:	4b5c      	ldr	r3, [pc, #368]	@ (8012a40 <pvPortMalloc+0x184>)
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d101      	bne.n	80128d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80128d4:	f000 f924 	bl	8012b20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80128d8:	4b5a      	ldr	r3, [pc, #360]	@ (8012a44 <pvPortMalloc+0x188>)
 80128da:	681a      	ldr	r2, [r3, #0]
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	4013      	ands	r3, r2
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	f040 8095 	bne.w	8012a10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d01e      	beq.n	801292a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80128ec:	2208      	movs	r2, #8
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	4413      	add	r3, r2
 80128f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	f003 0307 	and.w	r3, r3, #7
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d015      	beq.n	801292a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	f023 0307 	bic.w	r3, r3, #7
 8012904:	3308      	adds	r3, #8
 8012906:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	f003 0307 	and.w	r3, r3, #7
 801290e:	2b00      	cmp	r3, #0
 8012910:	d00b      	beq.n	801292a <pvPortMalloc+0x6e>
	__asm volatile
 8012912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012916:	f383 8811 	msr	BASEPRI, r3
 801291a:	f3bf 8f6f 	isb	sy
 801291e:	f3bf 8f4f 	dsb	sy
 8012922:	617b      	str	r3, [r7, #20]
}
 8012924:	bf00      	nop
 8012926:	bf00      	nop
 8012928:	e7fd      	b.n	8012926 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d06f      	beq.n	8012a10 <pvPortMalloc+0x154>
 8012930:	4b45      	ldr	r3, [pc, #276]	@ (8012a48 <pvPortMalloc+0x18c>)
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	687a      	ldr	r2, [r7, #4]
 8012936:	429a      	cmp	r2, r3
 8012938:	d86a      	bhi.n	8012a10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801293a:	4b44      	ldr	r3, [pc, #272]	@ (8012a4c <pvPortMalloc+0x190>)
 801293c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801293e:	4b43      	ldr	r3, [pc, #268]	@ (8012a4c <pvPortMalloc+0x190>)
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012944:	e004      	b.n	8012950 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8012946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012948:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801294a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012952:	685b      	ldr	r3, [r3, #4]
 8012954:	687a      	ldr	r2, [r7, #4]
 8012956:	429a      	cmp	r2, r3
 8012958:	d903      	bls.n	8012962 <pvPortMalloc+0xa6>
 801295a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	2b00      	cmp	r3, #0
 8012960:	d1f1      	bne.n	8012946 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012962:	4b37      	ldr	r3, [pc, #220]	@ (8012a40 <pvPortMalloc+0x184>)
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012968:	429a      	cmp	r2, r3
 801296a:	d051      	beq.n	8012a10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801296c:	6a3b      	ldr	r3, [r7, #32]
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	2208      	movs	r2, #8
 8012972:	4413      	add	r3, r2
 8012974:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012978:	681a      	ldr	r2, [r3, #0]
 801297a:	6a3b      	ldr	r3, [r7, #32]
 801297c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801297e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012980:	685a      	ldr	r2, [r3, #4]
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	1ad2      	subs	r2, r2, r3
 8012986:	2308      	movs	r3, #8
 8012988:	005b      	lsls	r3, r3, #1
 801298a:	429a      	cmp	r2, r3
 801298c:	d920      	bls.n	80129d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801298e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	4413      	add	r3, r2
 8012994:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012996:	69bb      	ldr	r3, [r7, #24]
 8012998:	f003 0307 	and.w	r3, r3, #7
 801299c:	2b00      	cmp	r3, #0
 801299e:	d00b      	beq.n	80129b8 <pvPortMalloc+0xfc>
	__asm volatile
 80129a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129a4:	f383 8811 	msr	BASEPRI, r3
 80129a8:	f3bf 8f6f 	isb	sy
 80129ac:	f3bf 8f4f 	dsb	sy
 80129b0:	613b      	str	r3, [r7, #16]
}
 80129b2:	bf00      	nop
 80129b4:	bf00      	nop
 80129b6:	e7fd      	b.n	80129b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80129b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129ba:	685a      	ldr	r2, [r3, #4]
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	1ad2      	subs	r2, r2, r3
 80129c0:	69bb      	ldr	r3, [r7, #24]
 80129c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80129c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129c6:	687a      	ldr	r2, [r7, #4]
 80129c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80129ca:	69b8      	ldr	r0, [r7, #24]
 80129cc:	f000 f90a 	bl	8012be4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80129d0:	4b1d      	ldr	r3, [pc, #116]	@ (8012a48 <pvPortMalloc+0x18c>)
 80129d2:	681a      	ldr	r2, [r3, #0]
 80129d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129d6:	685b      	ldr	r3, [r3, #4]
 80129d8:	1ad3      	subs	r3, r2, r3
 80129da:	4a1b      	ldr	r2, [pc, #108]	@ (8012a48 <pvPortMalloc+0x18c>)
 80129dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80129de:	4b1a      	ldr	r3, [pc, #104]	@ (8012a48 <pvPortMalloc+0x18c>)
 80129e0:	681a      	ldr	r2, [r3, #0]
 80129e2:	4b1b      	ldr	r3, [pc, #108]	@ (8012a50 <pvPortMalloc+0x194>)
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	429a      	cmp	r2, r3
 80129e8:	d203      	bcs.n	80129f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80129ea:	4b17      	ldr	r3, [pc, #92]	@ (8012a48 <pvPortMalloc+0x18c>)
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	4a18      	ldr	r2, [pc, #96]	@ (8012a50 <pvPortMalloc+0x194>)
 80129f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80129f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129f4:	685a      	ldr	r2, [r3, #4]
 80129f6:	4b13      	ldr	r3, [pc, #76]	@ (8012a44 <pvPortMalloc+0x188>)
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	431a      	orrs	r2, r3
 80129fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a02:	2200      	movs	r2, #0
 8012a04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012a06:	4b13      	ldr	r3, [pc, #76]	@ (8012a54 <pvPortMalloc+0x198>)
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	3301      	adds	r3, #1
 8012a0c:	4a11      	ldr	r2, [pc, #68]	@ (8012a54 <pvPortMalloc+0x198>)
 8012a0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012a10:	f7fe ff36 	bl	8011880 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012a14:	69fb      	ldr	r3, [r7, #28]
 8012a16:	f003 0307 	and.w	r3, r3, #7
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d00b      	beq.n	8012a36 <pvPortMalloc+0x17a>
	__asm volatile
 8012a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a22:	f383 8811 	msr	BASEPRI, r3
 8012a26:	f3bf 8f6f 	isb	sy
 8012a2a:	f3bf 8f4f 	dsb	sy
 8012a2e:	60fb      	str	r3, [r7, #12]
}
 8012a30:	bf00      	nop
 8012a32:	bf00      	nop
 8012a34:	e7fd      	b.n	8012a32 <pvPortMalloc+0x176>
	return pvReturn;
 8012a36:	69fb      	ldr	r3, [r7, #28]
}
 8012a38:	4618      	mov	r0, r3
 8012a3a:	3728      	adds	r7, #40	@ 0x28
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	bd80      	pop	{r7, pc}
 8012a40:	20006950 	.word	0x20006950
 8012a44:	20006964 	.word	0x20006964
 8012a48:	20006954 	.word	0x20006954
 8012a4c:	20006948 	.word	0x20006948
 8012a50:	20006958 	.word	0x20006958
 8012a54:	2000695c 	.word	0x2000695c

08012a58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	b086      	sub	sp, #24
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d04f      	beq.n	8012b0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012a6a:	2308      	movs	r3, #8
 8012a6c:	425b      	negs	r3, r3
 8012a6e:	697a      	ldr	r2, [r7, #20]
 8012a70:	4413      	add	r3, r2
 8012a72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012a74:	697b      	ldr	r3, [r7, #20]
 8012a76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012a78:	693b      	ldr	r3, [r7, #16]
 8012a7a:	685a      	ldr	r2, [r3, #4]
 8012a7c:	4b25      	ldr	r3, [pc, #148]	@ (8012b14 <vPortFree+0xbc>)
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	4013      	ands	r3, r2
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d10b      	bne.n	8012a9e <vPortFree+0x46>
	__asm volatile
 8012a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a8a:	f383 8811 	msr	BASEPRI, r3
 8012a8e:	f3bf 8f6f 	isb	sy
 8012a92:	f3bf 8f4f 	dsb	sy
 8012a96:	60fb      	str	r3, [r7, #12]
}
 8012a98:	bf00      	nop
 8012a9a:	bf00      	nop
 8012a9c:	e7fd      	b.n	8012a9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012a9e:	693b      	ldr	r3, [r7, #16]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d00b      	beq.n	8012abe <vPortFree+0x66>
	__asm volatile
 8012aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012aaa:	f383 8811 	msr	BASEPRI, r3
 8012aae:	f3bf 8f6f 	isb	sy
 8012ab2:	f3bf 8f4f 	dsb	sy
 8012ab6:	60bb      	str	r3, [r7, #8]
}
 8012ab8:	bf00      	nop
 8012aba:	bf00      	nop
 8012abc:	e7fd      	b.n	8012aba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012abe:	693b      	ldr	r3, [r7, #16]
 8012ac0:	685a      	ldr	r2, [r3, #4]
 8012ac2:	4b14      	ldr	r3, [pc, #80]	@ (8012b14 <vPortFree+0xbc>)
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	4013      	ands	r3, r2
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d01e      	beq.n	8012b0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012acc:	693b      	ldr	r3, [r7, #16]
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d11a      	bne.n	8012b0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012ad4:	693b      	ldr	r3, [r7, #16]
 8012ad6:	685a      	ldr	r2, [r3, #4]
 8012ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8012b14 <vPortFree+0xbc>)
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	43db      	mvns	r3, r3
 8012ade:	401a      	ands	r2, r3
 8012ae0:	693b      	ldr	r3, [r7, #16]
 8012ae2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012ae4:	f7fe febe 	bl	8011864 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012ae8:	693b      	ldr	r3, [r7, #16]
 8012aea:	685a      	ldr	r2, [r3, #4]
 8012aec:	4b0a      	ldr	r3, [pc, #40]	@ (8012b18 <vPortFree+0xc0>)
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	4413      	add	r3, r2
 8012af2:	4a09      	ldr	r2, [pc, #36]	@ (8012b18 <vPortFree+0xc0>)
 8012af4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012af6:	6938      	ldr	r0, [r7, #16]
 8012af8:	f000 f874 	bl	8012be4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012afc:	4b07      	ldr	r3, [pc, #28]	@ (8012b1c <vPortFree+0xc4>)
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	3301      	adds	r3, #1
 8012b02:	4a06      	ldr	r2, [pc, #24]	@ (8012b1c <vPortFree+0xc4>)
 8012b04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012b06:	f7fe febb 	bl	8011880 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012b0a:	bf00      	nop
 8012b0c:	3718      	adds	r7, #24
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	bd80      	pop	{r7, pc}
 8012b12:	bf00      	nop
 8012b14:	20006964 	.word	0x20006964
 8012b18:	20006954 	.word	0x20006954
 8012b1c:	20006960 	.word	0x20006960

08012b20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012b20:	b480      	push	{r7}
 8012b22:	b085      	sub	sp, #20
 8012b24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012b26:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8012b2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012b2c:	4b27      	ldr	r3, [pc, #156]	@ (8012bcc <prvHeapInit+0xac>)
 8012b2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	f003 0307 	and.w	r3, r3, #7
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d00c      	beq.n	8012b54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	3307      	adds	r3, #7
 8012b3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	f023 0307 	bic.w	r3, r3, #7
 8012b46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012b48:	68ba      	ldr	r2, [r7, #8]
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	1ad3      	subs	r3, r2, r3
 8012b4e:	4a1f      	ldr	r2, [pc, #124]	@ (8012bcc <prvHeapInit+0xac>)
 8012b50:	4413      	add	r3, r2
 8012b52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012b58:	4a1d      	ldr	r2, [pc, #116]	@ (8012bd0 <prvHeapInit+0xb0>)
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8012bd0 <prvHeapInit+0xb0>)
 8012b60:	2200      	movs	r2, #0
 8012b62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	68ba      	ldr	r2, [r7, #8]
 8012b68:	4413      	add	r3, r2
 8012b6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012b6c:	2208      	movs	r2, #8
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	1a9b      	subs	r3, r3, r2
 8012b72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	f023 0307 	bic.w	r3, r3, #7
 8012b7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	4a15      	ldr	r2, [pc, #84]	@ (8012bd4 <prvHeapInit+0xb4>)
 8012b80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012b82:	4b14      	ldr	r3, [pc, #80]	@ (8012bd4 <prvHeapInit+0xb4>)
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	2200      	movs	r2, #0
 8012b88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012b8a:	4b12      	ldr	r3, [pc, #72]	@ (8012bd4 <prvHeapInit+0xb4>)
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	2200      	movs	r2, #0
 8012b90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012b96:	683b      	ldr	r3, [r7, #0]
 8012b98:	68fa      	ldr	r2, [r7, #12]
 8012b9a:	1ad2      	subs	r2, r2, r3
 8012b9c:	683b      	ldr	r3, [r7, #0]
 8012b9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8012bd4 <prvHeapInit+0xb4>)
 8012ba2:	681a      	ldr	r2, [r3, #0]
 8012ba4:	683b      	ldr	r3, [r7, #0]
 8012ba6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012ba8:	683b      	ldr	r3, [r7, #0]
 8012baa:	685b      	ldr	r3, [r3, #4]
 8012bac:	4a0a      	ldr	r2, [pc, #40]	@ (8012bd8 <prvHeapInit+0xb8>)
 8012bae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012bb0:	683b      	ldr	r3, [r7, #0]
 8012bb2:	685b      	ldr	r3, [r3, #4]
 8012bb4:	4a09      	ldr	r2, [pc, #36]	@ (8012bdc <prvHeapInit+0xbc>)
 8012bb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012bb8:	4b09      	ldr	r3, [pc, #36]	@ (8012be0 <prvHeapInit+0xc0>)
 8012bba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8012bbe:	601a      	str	r2, [r3, #0]
}
 8012bc0:	bf00      	nop
 8012bc2:	3714      	adds	r7, #20
 8012bc4:	46bd      	mov	sp, r7
 8012bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bca:	4770      	bx	lr
 8012bcc:	20002d48 	.word	0x20002d48
 8012bd0:	20006948 	.word	0x20006948
 8012bd4:	20006950 	.word	0x20006950
 8012bd8:	20006958 	.word	0x20006958
 8012bdc:	20006954 	.word	0x20006954
 8012be0:	20006964 	.word	0x20006964

08012be4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012be4:	b480      	push	{r7}
 8012be6:	b085      	sub	sp, #20
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012bec:	4b28      	ldr	r3, [pc, #160]	@ (8012c90 <prvInsertBlockIntoFreeList+0xac>)
 8012bee:	60fb      	str	r3, [r7, #12]
 8012bf0:	e002      	b.n	8012bf8 <prvInsertBlockIntoFreeList+0x14>
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	60fb      	str	r3, [r7, #12]
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	687a      	ldr	r2, [r7, #4]
 8012bfe:	429a      	cmp	r2, r3
 8012c00:	d8f7      	bhi.n	8012bf2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	685b      	ldr	r3, [r3, #4]
 8012c0a:	68ba      	ldr	r2, [r7, #8]
 8012c0c:	4413      	add	r3, r2
 8012c0e:	687a      	ldr	r2, [r7, #4]
 8012c10:	429a      	cmp	r2, r3
 8012c12:	d108      	bne.n	8012c26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	685a      	ldr	r2, [r3, #4]
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	685b      	ldr	r3, [r3, #4]
 8012c1c:	441a      	add	r2, r3
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	685b      	ldr	r3, [r3, #4]
 8012c2e:	68ba      	ldr	r2, [r7, #8]
 8012c30:	441a      	add	r2, r3
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	429a      	cmp	r2, r3
 8012c38:	d118      	bne.n	8012c6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	681a      	ldr	r2, [r3, #0]
 8012c3e:	4b15      	ldr	r3, [pc, #84]	@ (8012c94 <prvInsertBlockIntoFreeList+0xb0>)
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	429a      	cmp	r2, r3
 8012c44:	d00d      	beq.n	8012c62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	685a      	ldr	r2, [r3, #4]
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	685b      	ldr	r3, [r3, #4]
 8012c50:	441a      	add	r2, r3
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	681a      	ldr	r2, [r3, #0]
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	601a      	str	r2, [r3, #0]
 8012c60:	e008      	b.n	8012c74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012c62:	4b0c      	ldr	r3, [pc, #48]	@ (8012c94 <prvInsertBlockIntoFreeList+0xb0>)
 8012c64:	681a      	ldr	r2, [r3, #0]
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	601a      	str	r2, [r3, #0]
 8012c6a:	e003      	b.n	8012c74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	681a      	ldr	r2, [r3, #0]
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012c74:	68fa      	ldr	r2, [r7, #12]
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	429a      	cmp	r2, r3
 8012c7a:	d002      	beq.n	8012c82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	687a      	ldr	r2, [r7, #4]
 8012c80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012c82:	bf00      	nop
 8012c84:	3714      	adds	r7, #20
 8012c86:	46bd      	mov	sp, r7
 8012c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c8c:	4770      	bx	lr
 8012c8e:	bf00      	nop
 8012c90:	20006948 	.word	0x20006948
 8012c94:	20006950 	.word	0x20006950

08012c98 <__cvt>:
 8012c98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012c9c:	ec57 6b10 	vmov	r6, r7, d0
 8012ca0:	2f00      	cmp	r7, #0
 8012ca2:	460c      	mov	r4, r1
 8012ca4:	4619      	mov	r1, r3
 8012ca6:	463b      	mov	r3, r7
 8012ca8:	bfbb      	ittet	lt
 8012caa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8012cae:	461f      	movlt	r7, r3
 8012cb0:	2300      	movge	r3, #0
 8012cb2:	232d      	movlt	r3, #45	@ 0x2d
 8012cb4:	700b      	strb	r3, [r1, #0]
 8012cb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012cb8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8012cbc:	4691      	mov	r9, r2
 8012cbe:	f023 0820 	bic.w	r8, r3, #32
 8012cc2:	bfbc      	itt	lt
 8012cc4:	4632      	movlt	r2, r6
 8012cc6:	4616      	movlt	r6, r2
 8012cc8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012ccc:	d005      	beq.n	8012cda <__cvt+0x42>
 8012cce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8012cd2:	d100      	bne.n	8012cd6 <__cvt+0x3e>
 8012cd4:	3401      	adds	r4, #1
 8012cd6:	2102      	movs	r1, #2
 8012cd8:	e000      	b.n	8012cdc <__cvt+0x44>
 8012cda:	2103      	movs	r1, #3
 8012cdc:	ab03      	add	r3, sp, #12
 8012cde:	9301      	str	r3, [sp, #4]
 8012ce0:	ab02      	add	r3, sp, #8
 8012ce2:	9300      	str	r3, [sp, #0]
 8012ce4:	ec47 6b10 	vmov	d0, r6, r7
 8012ce8:	4653      	mov	r3, sl
 8012cea:	4622      	mov	r2, r4
 8012cec:	f000 fed0 	bl	8013a90 <_dtoa_r>
 8012cf0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8012cf4:	4605      	mov	r5, r0
 8012cf6:	d119      	bne.n	8012d2c <__cvt+0x94>
 8012cf8:	f019 0f01 	tst.w	r9, #1
 8012cfc:	d00e      	beq.n	8012d1c <__cvt+0x84>
 8012cfe:	eb00 0904 	add.w	r9, r0, r4
 8012d02:	2200      	movs	r2, #0
 8012d04:	2300      	movs	r3, #0
 8012d06:	4630      	mov	r0, r6
 8012d08:	4639      	mov	r1, r7
 8012d0a:	f7ed fefd 	bl	8000b08 <__aeabi_dcmpeq>
 8012d0e:	b108      	cbz	r0, 8012d14 <__cvt+0x7c>
 8012d10:	f8cd 900c 	str.w	r9, [sp, #12]
 8012d14:	2230      	movs	r2, #48	@ 0x30
 8012d16:	9b03      	ldr	r3, [sp, #12]
 8012d18:	454b      	cmp	r3, r9
 8012d1a:	d31e      	bcc.n	8012d5a <__cvt+0xc2>
 8012d1c:	9b03      	ldr	r3, [sp, #12]
 8012d1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012d20:	1b5b      	subs	r3, r3, r5
 8012d22:	4628      	mov	r0, r5
 8012d24:	6013      	str	r3, [r2, #0]
 8012d26:	b004      	add	sp, #16
 8012d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d2c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012d30:	eb00 0904 	add.w	r9, r0, r4
 8012d34:	d1e5      	bne.n	8012d02 <__cvt+0x6a>
 8012d36:	7803      	ldrb	r3, [r0, #0]
 8012d38:	2b30      	cmp	r3, #48	@ 0x30
 8012d3a:	d10a      	bne.n	8012d52 <__cvt+0xba>
 8012d3c:	2200      	movs	r2, #0
 8012d3e:	2300      	movs	r3, #0
 8012d40:	4630      	mov	r0, r6
 8012d42:	4639      	mov	r1, r7
 8012d44:	f7ed fee0 	bl	8000b08 <__aeabi_dcmpeq>
 8012d48:	b918      	cbnz	r0, 8012d52 <__cvt+0xba>
 8012d4a:	f1c4 0401 	rsb	r4, r4, #1
 8012d4e:	f8ca 4000 	str.w	r4, [sl]
 8012d52:	f8da 3000 	ldr.w	r3, [sl]
 8012d56:	4499      	add	r9, r3
 8012d58:	e7d3      	b.n	8012d02 <__cvt+0x6a>
 8012d5a:	1c59      	adds	r1, r3, #1
 8012d5c:	9103      	str	r1, [sp, #12]
 8012d5e:	701a      	strb	r2, [r3, #0]
 8012d60:	e7d9      	b.n	8012d16 <__cvt+0x7e>

08012d62 <__exponent>:
 8012d62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012d64:	2900      	cmp	r1, #0
 8012d66:	bfba      	itte	lt
 8012d68:	4249      	neglt	r1, r1
 8012d6a:	232d      	movlt	r3, #45	@ 0x2d
 8012d6c:	232b      	movge	r3, #43	@ 0x2b
 8012d6e:	2909      	cmp	r1, #9
 8012d70:	7002      	strb	r2, [r0, #0]
 8012d72:	7043      	strb	r3, [r0, #1]
 8012d74:	dd29      	ble.n	8012dca <__exponent+0x68>
 8012d76:	f10d 0307 	add.w	r3, sp, #7
 8012d7a:	461d      	mov	r5, r3
 8012d7c:	270a      	movs	r7, #10
 8012d7e:	461a      	mov	r2, r3
 8012d80:	fbb1 f6f7 	udiv	r6, r1, r7
 8012d84:	fb07 1416 	mls	r4, r7, r6, r1
 8012d88:	3430      	adds	r4, #48	@ 0x30
 8012d8a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012d8e:	460c      	mov	r4, r1
 8012d90:	2c63      	cmp	r4, #99	@ 0x63
 8012d92:	f103 33ff 	add.w	r3, r3, #4294967295
 8012d96:	4631      	mov	r1, r6
 8012d98:	dcf1      	bgt.n	8012d7e <__exponent+0x1c>
 8012d9a:	3130      	adds	r1, #48	@ 0x30
 8012d9c:	1e94      	subs	r4, r2, #2
 8012d9e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012da2:	1c41      	adds	r1, r0, #1
 8012da4:	4623      	mov	r3, r4
 8012da6:	42ab      	cmp	r3, r5
 8012da8:	d30a      	bcc.n	8012dc0 <__exponent+0x5e>
 8012daa:	f10d 0309 	add.w	r3, sp, #9
 8012dae:	1a9b      	subs	r3, r3, r2
 8012db0:	42ac      	cmp	r4, r5
 8012db2:	bf88      	it	hi
 8012db4:	2300      	movhi	r3, #0
 8012db6:	3302      	adds	r3, #2
 8012db8:	4403      	add	r3, r0
 8012dba:	1a18      	subs	r0, r3, r0
 8012dbc:	b003      	add	sp, #12
 8012dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012dc0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012dc4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012dc8:	e7ed      	b.n	8012da6 <__exponent+0x44>
 8012dca:	2330      	movs	r3, #48	@ 0x30
 8012dcc:	3130      	adds	r1, #48	@ 0x30
 8012dce:	7083      	strb	r3, [r0, #2]
 8012dd0:	70c1      	strb	r1, [r0, #3]
 8012dd2:	1d03      	adds	r3, r0, #4
 8012dd4:	e7f1      	b.n	8012dba <__exponent+0x58>
	...

08012dd8 <_printf_float>:
 8012dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ddc:	b08d      	sub	sp, #52	@ 0x34
 8012dde:	460c      	mov	r4, r1
 8012de0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8012de4:	4616      	mov	r6, r2
 8012de6:	461f      	mov	r7, r3
 8012de8:	4605      	mov	r5, r0
 8012dea:	f000 fced 	bl	80137c8 <_localeconv_r>
 8012dee:	6803      	ldr	r3, [r0, #0]
 8012df0:	9304      	str	r3, [sp, #16]
 8012df2:	4618      	mov	r0, r3
 8012df4:	f7ed fa5c 	bl	80002b0 <strlen>
 8012df8:	2300      	movs	r3, #0
 8012dfa:	930a      	str	r3, [sp, #40]	@ 0x28
 8012dfc:	f8d8 3000 	ldr.w	r3, [r8]
 8012e00:	9005      	str	r0, [sp, #20]
 8012e02:	3307      	adds	r3, #7
 8012e04:	f023 0307 	bic.w	r3, r3, #7
 8012e08:	f103 0208 	add.w	r2, r3, #8
 8012e0c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012e10:	f8d4 b000 	ldr.w	fp, [r4]
 8012e14:	f8c8 2000 	str.w	r2, [r8]
 8012e18:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012e1c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8012e20:	9307      	str	r3, [sp, #28]
 8012e22:	f8cd 8018 	str.w	r8, [sp, #24]
 8012e26:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8012e2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012e2e:	4b9c      	ldr	r3, [pc, #624]	@ (80130a0 <_printf_float+0x2c8>)
 8012e30:	f04f 32ff 	mov.w	r2, #4294967295
 8012e34:	f7ed fe9a 	bl	8000b6c <__aeabi_dcmpun>
 8012e38:	bb70      	cbnz	r0, 8012e98 <_printf_float+0xc0>
 8012e3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012e3e:	4b98      	ldr	r3, [pc, #608]	@ (80130a0 <_printf_float+0x2c8>)
 8012e40:	f04f 32ff 	mov.w	r2, #4294967295
 8012e44:	f7ed fe74 	bl	8000b30 <__aeabi_dcmple>
 8012e48:	bb30      	cbnz	r0, 8012e98 <_printf_float+0xc0>
 8012e4a:	2200      	movs	r2, #0
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	4640      	mov	r0, r8
 8012e50:	4649      	mov	r1, r9
 8012e52:	f7ed fe63 	bl	8000b1c <__aeabi_dcmplt>
 8012e56:	b110      	cbz	r0, 8012e5e <_printf_float+0x86>
 8012e58:	232d      	movs	r3, #45	@ 0x2d
 8012e5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012e5e:	4a91      	ldr	r2, [pc, #580]	@ (80130a4 <_printf_float+0x2cc>)
 8012e60:	4b91      	ldr	r3, [pc, #580]	@ (80130a8 <_printf_float+0x2d0>)
 8012e62:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012e66:	bf94      	ite	ls
 8012e68:	4690      	movls	r8, r2
 8012e6a:	4698      	movhi	r8, r3
 8012e6c:	2303      	movs	r3, #3
 8012e6e:	6123      	str	r3, [r4, #16]
 8012e70:	f02b 0304 	bic.w	r3, fp, #4
 8012e74:	6023      	str	r3, [r4, #0]
 8012e76:	f04f 0900 	mov.w	r9, #0
 8012e7a:	9700      	str	r7, [sp, #0]
 8012e7c:	4633      	mov	r3, r6
 8012e7e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012e80:	4621      	mov	r1, r4
 8012e82:	4628      	mov	r0, r5
 8012e84:	f000 f9d2 	bl	801322c <_printf_common>
 8012e88:	3001      	adds	r0, #1
 8012e8a:	f040 808d 	bne.w	8012fa8 <_printf_float+0x1d0>
 8012e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8012e92:	b00d      	add	sp, #52	@ 0x34
 8012e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e98:	4642      	mov	r2, r8
 8012e9a:	464b      	mov	r3, r9
 8012e9c:	4640      	mov	r0, r8
 8012e9e:	4649      	mov	r1, r9
 8012ea0:	f7ed fe64 	bl	8000b6c <__aeabi_dcmpun>
 8012ea4:	b140      	cbz	r0, 8012eb8 <_printf_float+0xe0>
 8012ea6:	464b      	mov	r3, r9
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	bfbc      	itt	lt
 8012eac:	232d      	movlt	r3, #45	@ 0x2d
 8012eae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8012eb2:	4a7e      	ldr	r2, [pc, #504]	@ (80130ac <_printf_float+0x2d4>)
 8012eb4:	4b7e      	ldr	r3, [pc, #504]	@ (80130b0 <_printf_float+0x2d8>)
 8012eb6:	e7d4      	b.n	8012e62 <_printf_float+0x8a>
 8012eb8:	6863      	ldr	r3, [r4, #4]
 8012eba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8012ebe:	9206      	str	r2, [sp, #24]
 8012ec0:	1c5a      	adds	r2, r3, #1
 8012ec2:	d13b      	bne.n	8012f3c <_printf_float+0x164>
 8012ec4:	2306      	movs	r3, #6
 8012ec6:	6063      	str	r3, [r4, #4]
 8012ec8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8012ecc:	2300      	movs	r3, #0
 8012ece:	6022      	str	r2, [r4, #0]
 8012ed0:	9303      	str	r3, [sp, #12]
 8012ed2:	ab0a      	add	r3, sp, #40	@ 0x28
 8012ed4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8012ed8:	ab09      	add	r3, sp, #36	@ 0x24
 8012eda:	9300      	str	r3, [sp, #0]
 8012edc:	6861      	ldr	r1, [r4, #4]
 8012ede:	ec49 8b10 	vmov	d0, r8, r9
 8012ee2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012ee6:	4628      	mov	r0, r5
 8012ee8:	f7ff fed6 	bl	8012c98 <__cvt>
 8012eec:	9b06      	ldr	r3, [sp, #24]
 8012eee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012ef0:	2b47      	cmp	r3, #71	@ 0x47
 8012ef2:	4680      	mov	r8, r0
 8012ef4:	d129      	bne.n	8012f4a <_printf_float+0x172>
 8012ef6:	1cc8      	adds	r0, r1, #3
 8012ef8:	db02      	blt.n	8012f00 <_printf_float+0x128>
 8012efa:	6863      	ldr	r3, [r4, #4]
 8012efc:	4299      	cmp	r1, r3
 8012efe:	dd41      	ble.n	8012f84 <_printf_float+0x1ac>
 8012f00:	f1aa 0a02 	sub.w	sl, sl, #2
 8012f04:	fa5f fa8a 	uxtb.w	sl, sl
 8012f08:	3901      	subs	r1, #1
 8012f0a:	4652      	mov	r2, sl
 8012f0c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012f10:	9109      	str	r1, [sp, #36]	@ 0x24
 8012f12:	f7ff ff26 	bl	8012d62 <__exponent>
 8012f16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012f18:	1813      	adds	r3, r2, r0
 8012f1a:	2a01      	cmp	r2, #1
 8012f1c:	4681      	mov	r9, r0
 8012f1e:	6123      	str	r3, [r4, #16]
 8012f20:	dc02      	bgt.n	8012f28 <_printf_float+0x150>
 8012f22:	6822      	ldr	r2, [r4, #0]
 8012f24:	07d2      	lsls	r2, r2, #31
 8012f26:	d501      	bpl.n	8012f2c <_printf_float+0x154>
 8012f28:	3301      	adds	r3, #1
 8012f2a:	6123      	str	r3, [r4, #16]
 8012f2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d0a2      	beq.n	8012e7a <_printf_float+0xa2>
 8012f34:	232d      	movs	r3, #45	@ 0x2d
 8012f36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012f3a:	e79e      	b.n	8012e7a <_printf_float+0xa2>
 8012f3c:	9a06      	ldr	r2, [sp, #24]
 8012f3e:	2a47      	cmp	r2, #71	@ 0x47
 8012f40:	d1c2      	bne.n	8012ec8 <_printf_float+0xf0>
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d1c0      	bne.n	8012ec8 <_printf_float+0xf0>
 8012f46:	2301      	movs	r3, #1
 8012f48:	e7bd      	b.n	8012ec6 <_printf_float+0xee>
 8012f4a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012f4e:	d9db      	bls.n	8012f08 <_printf_float+0x130>
 8012f50:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8012f54:	d118      	bne.n	8012f88 <_printf_float+0x1b0>
 8012f56:	2900      	cmp	r1, #0
 8012f58:	6863      	ldr	r3, [r4, #4]
 8012f5a:	dd0b      	ble.n	8012f74 <_printf_float+0x19c>
 8012f5c:	6121      	str	r1, [r4, #16]
 8012f5e:	b913      	cbnz	r3, 8012f66 <_printf_float+0x18e>
 8012f60:	6822      	ldr	r2, [r4, #0]
 8012f62:	07d0      	lsls	r0, r2, #31
 8012f64:	d502      	bpl.n	8012f6c <_printf_float+0x194>
 8012f66:	3301      	adds	r3, #1
 8012f68:	440b      	add	r3, r1
 8012f6a:	6123      	str	r3, [r4, #16]
 8012f6c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012f6e:	f04f 0900 	mov.w	r9, #0
 8012f72:	e7db      	b.n	8012f2c <_printf_float+0x154>
 8012f74:	b913      	cbnz	r3, 8012f7c <_printf_float+0x1a4>
 8012f76:	6822      	ldr	r2, [r4, #0]
 8012f78:	07d2      	lsls	r2, r2, #31
 8012f7a:	d501      	bpl.n	8012f80 <_printf_float+0x1a8>
 8012f7c:	3302      	adds	r3, #2
 8012f7e:	e7f4      	b.n	8012f6a <_printf_float+0x192>
 8012f80:	2301      	movs	r3, #1
 8012f82:	e7f2      	b.n	8012f6a <_printf_float+0x192>
 8012f84:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8012f88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012f8a:	4299      	cmp	r1, r3
 8012f8c:	db05      	blt.n	8012f9a <_printf_float+0x1c2>
 8012f8e:	6823      	ldr	r3, [r4, #0]
 8012f90:	6121      	str	r1, [r4, #16]
 8012f92:	07d8      	lsls	r0, r3, #31
 8012f94:	d5ea      	bpl.n	8012f6c <_printf_float+0x194>
 8012f96:	1c4b      	adds	r3, r1, #1
 8012f98:	e7e7      	b.n	8012f6a <_printf_float+0x192>
 8012f9a:	2900      	cmp	r1, #0
 8012f9c:	bfd4      	ite	le
 8012f9e:	f1c1 0202 	rsble	r2, r1, #2
 8012fa2:	2201      	movgt	r2, #1
 8012fa4:	4413      	add	r3, r2
 8012fa6:	e7e0      	b.n	8012f6a <_printf_float+0x192>
 8012fa8:	6823      	ldr	r3, [r4, #0]
 8012faa:	055a      	lsls	r2, r3, #21
 8012fac:	d407      	bmi.n	8012fbe <_printf_float+0x1e6>
 8012fae:	6923      	ldr	r3, [r4, #16]
 8012fb0:	4642      	mov	r2, r8
 8012fb2:	4631      	mov	r1, r6
 8012fb4:	4628      	mov	r0, r5
 8012fb6:	47b8      	blx	r7
 8012fb8:	3001      	adds	r0, #1
 8012fba:	d12b      	bne.n	8013014 <_printf_float+0x23c>
 8012fbc:	e767      	b.n	8012e8e <_printf_float+0xb6>
 8012fbe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012fc2:	f240 80dd 	bls.w	8013180 <_printf_float+0x3a8>
 8012fc6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012fca:	2200      	movs	r2, #0
 8012fcc:	2300      	movs	r3, #0
 8012fce:	f7ed fd9b 	bl	8000b08 <__aeabi_dcmpeq>
 8012fd2:	2800      	cmp	r0, #0
 8012fd4:	d033      	beq.n	801303e <_printf_float+0x266>
 8012fd6:	4a37      	ldr	r2, [pc, #220]	@ (80130b4 <_printf_float+0x2dc>)
 8012fd8:	2301      	movs	r3, #1
 8012fda:	4631      	mov	r1, r6
 8012fdc:	4628      	mov	r0, r5
 8012fde:	47b8      	blx	r7
 8012fe0:	3001      	adds	r0, #1
 8012fe2:	f43f af54 	beq.w	8012e8e <_printf_float+0xb6>
 8012fe6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8012fea:	4543      	cmp	r3, r8
 8012fec:	db02      	blt.n	8012ff4 <_printf_float+0x21c>
 8012fee:	6823      	ldr	r3, [r4, #0]
 8012ff0:	07d8      	lsls	r0, r3, #31
 8012ff2:	d50f      	bpl.n	8013014 <_printf_float+0x23c>
 8012ff4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012ff8:	4631      	mov	r1, r6
 8012ffa:	4628      	mov	r0, r5
 8012ffc:	47b8      	blx	r7
 8012ffe:	3001      	adds	r0, #1
 8013000:	f43f af45 	beq.w	8012e8e <_printf_float+0xb6>
 8013004:	f04f 0900 	mov.w	r9, #0
 8013008:	f108 38ff 	add.w	r8, r8, #4294967295
 801300c:	f104 0a1a 	add.w	sl, r4, #26
 8013010:	45c8      	cmp	r8, r9
 8013012:	dc09      	bgt.n	8013028 <_printf_float+0x250>
 8013014:	6823      	ldr	r3, [r4, #0]
 8013016:	079b      	lsls	r3, r3, #30
 8013018:	f100 8103 	bmi.w	8013222 <_printf_float+0x44a>
 801301c:	68e0      	ldr	r0, [r4, #12]
 801301e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013020:	4298      	cmp	r0, r3
 8013022:	bfb8      	it	lt
 8013024:	4618      	movlt	r0, r3
 8013026:	e734      	b.n	8012e92 <_printf_float+0xba>
 8013028:	2301      	movs	r3, #1
 801302a:	4652      	mov	r2, sl
 801302c:	4631      	mov	r1, r6
 801302e:	4628      	mov	r0, r5
 8013030:	47b8      	blx	r7
 8013032:	3001      	adds	r0, #1
 8013034:	f43f af2b 	beq.w	8012e8e <_printf_float+0xb6>
 8013038:	f109 0901 	add.w	r9, r9, #1
 801303c:	e7e8      	b.n	8013010 <_printf_float+0x238>
 801303e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013040:	2b00      	cmp	r3, #0
 8013042:	dc39      	bgt.n	80130b8 <_printf_float+0x2e0>
 8013044:	4a1b      	ldr	r2, [pc, #108]	@ (80130b4 <_printf_float+0x2dc>)
 8013046:	2301      	movs	r3, #1
 8013048:	4631      	mov	r1, r6
 801304a:	4628      	mov	r0, r5
 801304c:	47b8      	blx	r7
 801304e:	3001      	adds	r0, #1
 8013050:	f43f af1d 	beq.w	8012e8e <_printf_float+0xb6>
 8013054:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8013058:	ea59 0303 	orrs.w	r3, r9, r3
 801305c:	d102      	bne.n	8013064 <_printf_float+0x28c>
 801305e:	6823      	ldr	r3, [r4, #0]
 8013060:	07d9      	lsls	r1, r3, #31
 8013062:	d5d7      	bpl.n	8013014 <_printf_float+0x23c>
 8013064:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013068:	4631      	mov	r1, r6
 801306a:	4628      	mov	r0, r5
 801306c:	47b8      	blx	r7
 801306e:	3001      	adds	r0, #1
 8013070:	f43f af0d 	beq.w	8012e8e <_printf_float+0xb6>
 8013074:	f04f 0a00 	mov.w	sl, #0
 8013078:	f104 0b1a 	add.w	fp, r4, #26
 801307c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801307e:	425b      	negs	r3, r3
 8013080:	4553      	cmp	r3, sl
 8013082:	dc01      	bgt.n	8013088 <_printf_float+0x2b0>
 8013084:	464b      	mov	r3, r9
 8013086:	e793      	b.n	8012fb0 <_printf_float+0x1d8>
 8013088:	2301      	movs	r3, #1
 801308a:	465a      	mov	r2, fp
 801308c:	4631      	mov	r1, r6
 801308e:	4628      	mov	r0, r5
 8013090:	47b8      	blx	r7
 8013092:	3001      	adds	r0, #1
 8013094:	f43f aefb 	beq.w	8012e8e <_printf_float+0xb6>
 8013098:	f10a 0a01 	add.w	sl, sl, #1
 801309c:	e7ee      	b.n	801307c <_printf_float+0x2a4>
 801309e:	bf00      	nop
 80130a0:	7fefffff 	.word	0x7fefffff
 80130a4:	08016074 	.word	0x08016074
 80130a8:	08016078 	.word	0x08016078
 80130ac:	0801607c 	.word	0x0801607c
 80130b0:	08016080 	.word	0x08016080
 80130b4:	08016084 	.word	0x08016084
 80130b8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80130ba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80130be:	4553      	cmp	r3, sl
 80130c0:	bfa8      	it	ge
 80130c2:	4653      	movge	r3, sl
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	4699      	mov	r9, r3
 80130c8:	dc36      	bgt.n	8013138 <_printf_float+0x360>
 80130ca:	f04f 0b00 	mov.w	fp, #0
 80130ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80130d2:	f104 021a 	add.w	r2, r4, #26
 80130d6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80130d8:	9306      	str	r3, [sp, #24]
 80130da:	eba3 0309 	sub.w	r3, r3, r9
 80130de:	455b      	cmp	r3, fp
 80130e0:	dc31      	bgt.n	8013146 <_printf_float+0x36e>
 80130e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80130e4:	459a      	cmp	sl, r3
 80130e6:	dc3a      	bgt.n	801315e <_printf_float+0x386>
 80130e8:	6823      	ldr	r3, [r4, #0]
 80130ea:	07da      	lsls	r2, r3, #31
 80130ec:	d437      	bmi.n	801315e <_printf_float+0x386>
 80130ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80130f0:	ebaa 0903 	sub.w	r9, sl, r3
 80130f4:	9b06      	ldr	r3, [sp, #24]
 80130f6:	ebaa 0303 	sub.w	r3, sl, r3
 80130fa:	4599      	cmp	r9, r3
 80130fc:	bfa8      	it	ge
 80130fe:	4699      	movge	r9, r3
 8013100:	f1b9 0f00 	cmp.w	r9, #0
 8013104:	dc33      	bgt.n	801316e <_printf_float+0x396>
 8013106:	f04f 0800 	mov.w	r8, #0
 801310a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801310e:	f104 0b1a 	add.w	fp, r4, #26
 8013112:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013114:	ebaa 0303 	sub.w	r3, sl, r3
 8013118:	eba3 0309 	sub.w	r3, r3, r9
 801311c:	4543      	cmp	r3, r8
 801311e:	f77f af79 	ble.w	8013014 <_printf_float+0x23c>
 8013122:	2301      	movs	r3, #1
 8013124:	465a      	mov	r2, fp
 8013126:	4631      	mov	r1, r6
 8013128:	4628      	mov	r0, r5
 801312a:	47b8      	blx	r7
 801312c:	3001      	adds	r0, #1
 801312e:	f43f aeae 	beq.w	8012e8e <_printf_float+0xb6>
 8013132:	f108 0801 	add.w	r8, r8, #1
 8013136:	e7ec      	b.n	8013112 <_printf_float+0x33a>
 8013138:	4642      	mov	r2, r8
 801313a:	4631      	mov	r1, r6
 801313c:	4628      	mov	r0, r5
 801313e:	47b8      	blx	r7
 8013140:	3001      	adds	r0, #1
 8013142:	d1c2      	bne.n	80130ca <_printf_float+0x2f2>
 8013144:	e6a3      	b.n	8012e8e <_printf_float+0xb6>
 8013146:	2301      	movs	r3, #1
 8013148:	4631      	mov	r1, r6
 801314a:	4628      	mov	r0, r5
 801314c:	9206      	str	r2, [sp, #24]
 801314e:	47b8      	blx	r7
 8013150:	3001      	adds	r0, #1
 8013152:	f43f ae9c 	beq.w	8012e8e <_printf_float+0xb6>
 8013156:	9a06      	ldr	r2, [sp, #24]
 8013158:	f10b 0b01 	add.w	fp, fp, #1
 801315c:	e7bb      	b.n	80130d6 <_printf_float+0x2fe>
 801315e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013162:	4631      	mov	r1, r6
 8013164:	4628      	mov	r0, r5
 8013166:	47b8      	blx	r7
 8013168:	3001      	adds	r0, #1
 801316a:	d1c0      	bne.n	80130ee <_printf_float+0x316>
 801316c:	e68f      	b.n	8012e8e <_printf_float+0xb6>
 801316e:	9a06      	ldr	r2, [sp, #24]
 8013170:	464b      	mov	r3, r9
 8013172:	4442      	add	r2, r8
 8013174:	4631      	mov	r1, r6
 8013176:	4628      	mov	r0, r5
 8013178:	47b8      	blx	r7
 801317a:	3001      	adds	r0, #1
 801317c:	d1c3      	bne.n	8013106 <_printf_float+0x32e>
 801317e:	e686      	b.n	8012e8e <_printf_float+0xb6>
 8013180:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8013184:	f1ba 0f01 	cmp.w	sl, #1
 8013188:	dc01      	bgt.n	801318e <_printf_float+0x3b6>
 801318a:	07db      	lsls	r3, r3, #31
 801318c:	d536      	bpl.n	80131fc <_printf_float+0x424>
 801318e:	2301      	movs	r3, #1
 8013190:	4642      	mov	r2, r8
 8013192:	4631      	mov	r1, r6
 8013194:	4628      	mov	r0, r5
 8013196:	47b8      	blx	r7
 8013198:	3001      	adds	r0, #1
 801319a:	f43f ae78 	beq.w	8012e8e <_printf_float+0xb6>
 801319e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80131a2:	4631      	mov	r1, r6
 80131a4:	4628      	mov	r0, r5
 80131a6:	47b8      	blx	r7
 80131a8:	3001      	adds	r0, #1
 80131aa:	f43f ae70 	beq.w	8012e8e <_printf_float+0xb6>
 80131ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80131b2:	2200      	movs	r2, #0
 80131b4:	2300      	movs	r3, #0
 80131b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80131ba:	f7ed fca5 	bl	8000b08 <__aeabi_dcmpeq>
 80131be:	b9c0      	cbnz	r0, 80131f2 <_printf_float+0x41a>
 80131c0:	4653      	mov	r3, sl
 80131c2:	f108 0201 	add.w	r2, r8, #1
 80131c6:	4631      	mov	r1, r6
 80131c8:	4628      	mov	r0, r5
 80131ca:	47b8      	blx	r7
 80131cc:	3001      	adds	r0, #1
 80131ce:	d10c      	bne.n	80131ea <_printf_float+0x412>
 80131d0:	e65d      	b.n	8012e8e <_printf_float+0xb6>
 80131d2:	2301      	movs	r3, #1
 80131d4:	465a      	mov	r2, fp
 80131d6:	4631      	mov	r1, r6
 80131d8:	4628      	mov	r0, r5
 80131da:	47b8      	blx	r7
 80131dc:	3001      	adds	r0, #1
 80131de:	f43f ae56 	beq.w	8012e8e <_printf_float+0xb6>
 80131e2:	f108 0801 	add.w	r8, r8, #1
 80131e6:	45d0      	cmp	r8, sl
 80131e8:	dbf3      	blt.n	80131d2 <_printf_float+0x3fa>
 80131ea:	464b      	mov	r3, r9
 80131ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80131f0:	e6df      	b.n	8012fb2 <_printf_float+0x1da>
 80131f2:	f04f 0800 	mov.w	r8, #0
 80131f6:	f104 0b1a 	add.w	fp, r4, #26
 80131fa:	e7f4      	b.n	80131e6 <_printf_float+0x40e>
 80131fc:	2301      	movs	r3, #1
 80131fe:	4642      	mov	r2, r8
 8013200:	e7e1      	b.n	80131c6 <_printf_float+0x3ee>
 8013202:	2301      	movs	r3, #1
 8013204:	464a      	mov	r2, r9
 8013206:	4631      	mov	r1, r6
 8013208:	4628      	mov	r0, r5
 801320a:	47b8      	blx	r7
 801320c:	3001      	adds	r0, #1
 801320e:	f43f ae3e 	beq.w	8012e8e <_printf_float+0xb6>
 8013212:	f108 0801 	add.w	r8, r8, #1
 8013216:	68e3      	ldr	r3, [r4, #12]
 8013218:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801321a:	1a5b      	subs	r3, r3, r1
 801321c:	4543      	cmp	r3, r8
 801321e:	dcf0      	bgt.n	8013202 <_printf_float+0x42a>
 8013220:	e6fc      	b.n	801301c <_printf_float+0x244>
 8013222:	f04f 0800 	mov.w	r8, #0
 8013226:	f104 0919 	add.w	r9, r4, #25
 801322a:	e7f4      	b.n	8013216 <_printf_float+0x43e>

0801322c <_printf_common>:
 801322c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013230:	4616      	mov	r6, r2
 8013232:	4698      	mov	r8, r3
 8013234:	688a      	ldr	r2, [r1, #8]
 8013236:	690b      	ldr	r3, [r1, #16]
 8013238:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801323c:	4293      	cmp	r3, r2
 801323e:	bfb8      	it	lt
 8013240:	4613      	movlt	r3, r2
 8013242:	6033      	str	r3, [r6, #0]
 8013244:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013248:	4607      	mov	r7, r0
 801324a:	460c      	mov	r4, r1
 801324c:	b10a      	cbz	r2, 8013252 <_printf_common+0x26>
 801324e:	3301      	adds	r3, #1
 8013250:	6033      	str	r3, [r6, #0]
 8013252:	6823      	ldr	r3, [r4, #0]
 8013254:	0699      	lsls	r1, r3, #26
 8013256:	bf42      	ittt	mi
 8013258:	6833      	ldrmi	r3, [r6, #0]
 801325a:	3302      	addmi	r3, #2
 801325c:	6033      	strmi	r3, [r6, #0]
 801325e:	6825      	ldr	r5, [r4, #0]
 8013260:	f015 0506 	ands.w	r5, r5, #6
 8013264:	d106      	bne.n	8013274 <_printf_common+0x48>
 8013266:	f104 0a19 	add.w	sl, r4, #25
 801326a:	68e3      	ldr	r3, [r4, #12]
 801326c:	6832      	ldr	r2, [r6, #0]
 801326e:	1a9b      	subs	r3, r3, r2
 8013270:	42ab      	cmp	r3, r5
 8013272:	dc26      	bgt.n	80132c2 <_printf_common+0x96>
 8013274:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013278:	6822      	ldr	r2, [r4, #0]
 801327a:	3b00      	subs	r3, #0
 801327c:	bf18      	it	ne
 801327e:	2301      	movne	r3, #1
 8013280:	0692      	lsls	r2, r2, #26
 8013282:	d42b      	bmi.n	80132dc <_printf_common+0xb0>
 8013284:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013288:	4641      	mov	r1, r8
 801328a:	4638      	mov	r0, r7
 801328c:	47c8      	blx	r9
 801328e:	3001      	adds	r0, #1
 8013290:	d01e      	beq.n	80132d0 <_printf_common+0xa4>
 8013292:	6823      	ldr	r3, [r4, #0]
 8013294:	6922      	ldr	r2, [r4, #16]
 8013296:	f003 0306 	and.w	r3, r3, #6
 801329a:	2b04      	cmp	r3, #4
 801329c:	bf02      	ittt	eq
 801329e:	68e5      	ldreq	r5, [r4, #12]
 80132a0:	6833      	ldreq	r3, [r6, #0]
 80132a2:	1aed      	subeq	r5, r5, r3
 80132a4:	68a3      	ldr	r3, [r4, #8]
 80132a6:	bf0c      	ite	eq
 80132a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80132ac:	2500      	movne	r5, #0
 80132ae:	4293      	cmp	r3, r2
 80132b0:	bfc4      	itt	gt
 80132b2:	1a9b      	subgt	r3, r3, r2
 80132b4:	18ed      	addgt	r5, r5, r3
 80132b6:	2600      	movs	r6, #0
 80132b8:	341a      	adds	r4, #26
 80132ba:	42b5      	cmp	r5, r6
 80132bc:	d11a      	bne.n	80132f4 <_printf_common+0xc8>
 80132be:	2000      	movs	r0, #0
 80132c0:	e008      	b.n	80132d4 <_printf_common+0xa8>
 80132c2:	2301      	movs	r3, #1
 80132c4:	4652      	mov	r2, sl
 80132c6:	4641      	mov	r1, r8
 80132c8:	4638      	mov	r0, r7
 80132ca:	47c8      	blx	r9
 80132cc:	3001      	adds	r0, #1
 80132ce:	d103      	bne.n	80132d8 <_printf_common+0xac>
 80132d0:	f04f 30ff 	mov.w	r0, #4294967295
 80132d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80132d8:	3501      	adds	r5, #1
 80132da:	e7c6      	b.n	801326a <_printf_common+0x3e>
 80132dc:	18e1      	adds	r1, r4, r3
 80132de:	1c5a      	adds	r2, r3, #1
 80132e0:	2030      	movs	r0, #48	@ 0x30
 80132e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80132e6:	4422      	add	r2, r4
 80132e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80132ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80132f0:	3302      	adds	r3, #2
 80132f2:	e7c7      	b.n	8013284 <_printf_common+0x58>
 80132f4:	2301      	movs	r3, #1
 80132f6:	4622      	mov	r2, r4
 80132f8:	4641      	mov	r1, r8
 80132fa:	4638      	mov	r0, r7
 80132fc:	47c8      	blx	r9
 80132fe:	3001      	adds	r0, #1
 8013300:	d0e6      	beq.n	80132d0 <_printf_common+0xa4>
 8013302:	3601      	adds	r6, #1
 8013304:	e7d9      	b.n	80132ba <_printf_common+0x8e>
	...

08013308 <_printf_i>:
 8013308:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801330c:	7e0f      	ldrb	r7, [r1, #24]
 801330e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013310:	2f78      	cmp	r7, #120	@ 0x78
 8013312:	4691      	mov	r9, r2
 8013314:	4680      	mov	r8, r0
 8013316:	460c      	mov	r4, r1
 8013318:	469a      	mov	sl, r3
 801331a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801331e:	d807      	bhi.n	8013330 <_printf_i+0x28>
 8013320:	2f62      	cmp	r7, #98	@ 0x62
 8013322:	d80a      	bhi.n	801333a <_printf_i+0x32>
 8013324:	2f00      	cmp	r7, #0
 8013326:	f000 80d2 	beq.w	80134ce <_printf_i+0x1c6>
 801332a:	2f58      	cmp	r7, #88	@ 0x58
 801332c:	f000 80b9 	beq.w	80134a2 <_printf_i+0x19a>
 8013330:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013334:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013338:	e03a      	b.n	80133b0 <_printf_i+0xa8>
 801333a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801333e:	2b15      	cmp	r3, #21
 8013340:	d8f6      	bhi.n	8013330 <_printf_i+0x28>
 8013342:	a101      	add	r1, pc, #4	@ (adr r1, 8013348 <_printf_i+0x40>)
 8013344:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013348:	080133a1 	.word	0x080133a1
 801334c:	080133b5 	.word	0x080133b5
 8013350:	08013331 	.word	0x08013331
 8013354:	08013331 	.word	0x08013331
 8013358:	08013331 	.word	0x08013331
 801335c:	08013331 	.word	0x08013331
 8013360:	080133b5 	.word	0x080133b5
 8013364:	08013331 	.word	0x08013331
 8013368:	08013331 	.word	0x08013331
 801336c:	08013331 	.word	0x08013331
 8013370:	08013331 	.word	0x08013331
 8013374:	080134b5 	.word	0x080134b5
 8013378:	080133df 	.word	0x080133df
 801337c:	0801346f 	.word	0x0801346f
 8013380:	08013331 	.word	0x08013331
 8013384:	08013331 	.word	0x08013331
 8013388:	080134d7 	.word	0x080134d7
 801338c:	08013331 	.word	0x08013331
 8013390:	080133df 	.word	0x080133df
 8013394:	08013331 	.word	0x08013331
 8013398:	08013331 	.word	0x08013331
 801339c:	08013477 	.word	0x08013477
 80133a0:	6833      	ldr	r3, [r6, #0]
 80133a2:	1d1a      	adds	r2, r3, #4
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	6032      	str	r2, [r6, #0]
 80133a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80133ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80133b0:	2301      	movs	r3, #1
 80133b2:	e09d      	b.n	80134f0 <_printf_i+0x1e8>
 80133b4:	6833      	ldr	r3, [r6, #0]
 80133b6:	6820      	ldr	r0, [r4, #0]
 80133b8:	1d19      	adds	r1, r3, #4
 80133ba:	6031      	str	r1, [r6, #0]
 80133bc:	0606      	lsls	r6, r0, #24
 80133be:	d501      	bpl.n	80133c4 <_printf_i+0xbc>
 80133c0:	681d      	ldr	r5, [r3, #0]
 80133c2:	e003      	b.n	80133cc <_printf_i+0xc4>
 80133c4:	0645      	lsls	r5, r0, #25
 80133c6:	d5fb      	bpl.n	80133c0 <_printf_i+0xb8>
 80133c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80133cc:	2d00      	cmp	r5, #0
 80133ce:	da03      	bge.n	80133d8 <_printf_i+0xd0>
 80133d0:	232d      	movs	r3, #45	@ 0x2d
 80133d2:	426d      	negs	r5, r5
 80133d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80133d8:	4859      	ldr	r0, [pc, #356]	@ (8013540 <_printf_i+0x238>)
 80133da:	230a      	movs	r3, #10
 80133dc:	e011      	b.n	8013402 <_printf_i+0xfa>
 80133de:	6821      	ldr	r1, [r4, #0]
 80133e0:	6833      	ldr	r3, [r6, #0]
 80133e2:	0608      	lsls	r0, r1, #24
 80133e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80133e8:	d402      	bmi.n	80133f0 <_printf_i+0xe8>
 80133ea:	0649      	lsls	r1, r1, #25
 80133ec:	bf48      	it	mi
 80133ee:	b2ad      	uxthmi	r5, r5
 80133f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80133f2:	4853      	ldr	r0, [pc, #332]	@ (8013540 <_printf_i+0x238>)
 80133f4:	6033      	str	r3, [r6, #0]
 80133f6:	bf14      	ite	ne
 80133f8:	230a      	movne	r3, #10
 80133fa:	2308      	moveq	r3, #8
 80133fc:	2100      	movs	r1, #0
 80133fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013402:	6866      	ldr	r6, [r4, #4]
 8013404:	60a6      	str	r6, [r4, #8]
 8013406:	2e00      	cmp	r6, #0
 8013408:	bfa2      	ittt	ge
 801340a:	6821      	ldrge	r1, [r4, #0]
 801340c:	f021 0104 	bicge.w	r1, r1, #4
 8013410:	6021      	strge	r1, [r4, #0]
 8013412:	b90d      	cbnz	r5, 8013418 <_printf_i+0x110>
 8013414:	2e00      	cmp	r6, #0
 8013416:	d04b      	beq.n	80134b0 <_printf_i+0x1a8>
 8013418:	4616      	mov	r6, r2
 801341a:	fbb5 f1f3 	udiv	r1, r5, r3
 801341e:	fb03 5711 	mls	r7, r3, r1, r5
 8013422:	5dc7      	ldrb	r7, [r0, r7]
 8013424:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013428:	462f      	mov	r7, r5
 801342a:	42bb      	cmp	r3, r7
 801342c:	460d      	mov	r5, r1
 801342e:	d9f4      	bls.n	801341a <_printf_i+0x112>
 8013430:	2b08      	cmp	r3, #8
 8013432:	d10b      	bne.n	801344c <_printf_i+0x144>
 8013434:	6823      	ldr	r3, [r4, #0]
 8013436:	07df      	lsls	r7, r3, #31
 8013438:	d508      	bpl.n	801344c <_printf_i+0x144>
 801343a:	6923      	ldr	r3, [r4, #16]
 801343c:	6861      	ldr	r1, [r4, #4]
 801343e:	4299      	cmp	r1, r3
 8013440:	bfde      	ittt	le
 8013442:	2330      	movle	r3, #48	@ 0x30
 8013444:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013448:	f106 36ff 	addle.w	r6, r6, #4294967295
 801344c:	1b92      	subs	r2, r2, r6
 801344e:	6122      	str	r2, [r4, #16]
 8013450:	f8cd a000 	str.w	sl, [sp]
 8013454:	464b      	mov	r3, r9
 8013456:	aa03      	add	r2, sp, #12
 8013458:	4621      	mov	r1, r4
 801345a:	4640      	mov	r0, r8
 801345c:	f7ff fee6 	bl	801322c <_printf_common>
 8013460:	3001      	adds	r0, #1
 8013462:	d14a      	bne.n	80134fa <_printf_i+0x1f2>
 8013464:	f04f 30ff 	mov.w	r0, #4294967295
 8013468:	b004      	add	sp, #16
 801346a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801346e:	6823      	ldr	r3, [r4, #0]
 8013470:	f043 0320 	orr.w	r3, r3, #32
 8013474:	6023      	str	r3, [r4, #0]
 8013476:	4833      	ldr	r0, [pc, #204]	@ (8013544 <_printf_i+0x23c>)
 8013478:	2778      	movs	r7, #120	@ 0x78
 801347a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801347e:	6823      	ldr	r3, [r4, #0]
 8013480:	6831      	ldr	r1, [r6, #0]
 8013482:	061f      	lsls	r7, r3, #24
 8013484:	f851 5b04 	ldr.w	r5, [r1], #4
 8013488:	d402      	bmi.n	8013490 <_printf_i+0x188>
 801348a:	065f      	lsls	r7, r3, #25
 801348c:	bf48      	it	mi
 801348e:	b2ad      	uxthmi	r5, r5
 8013490:	6031      	str	r1, [r6, #0]
 8013492:	07d9      	lsls	r1, r3, #31
 8013494:	bf44      	itt	mi
 8013496:	f043 0320 	orrmi.w	r3, r3, #32
 801349a:	6023      	strmi	r3, [r4, #0]
 801349c:	b11d      	cbz	r5, 80134a6 <_printf_i+0x19e>
 801349e:	2310      	movs	r3, #16
 80134a0:	e7ac      	b.n	80133fc <_printf_i+0xf4>
 80134a2:	4827      	ldr	r0, [pc, #156]	@ (8013540 <_printf_i+0x238>)
 80134a4:	e7e9      	b.n	801347a <_printf_i+0x172>
 80134a6:	6823      	ldr	r3, [r4, #0]
 80134a8:	f023 0320 	bic.w	r3, r3, #32
 80134ac:	6023      	str	r3, [r4, #0]
 80134ae:	e7f6      	b.n	801349e <_printf_i+0x196>
 80134b0:	4616      	mov	r6, r2
 80134b2:	e7bd      	b.n	8013430 <_printf_i+0x128>
 80134b4:	6833      	ldr	r3, [r6, #0]
 80134b6:	6825      	ldr	r5, [r4, #0]
 80134b8:	6961      	ldr	r1, [r4, #20]
 80134ba:	1d18      	adds	r0, r3, #4
 80134bc:	6030      	str	r0, [r6, #0]
 80134be:	062e      	lsls	r6, r5, #24
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	d501      	bpl.n	80134c8 <_printf_i+0x1c0>
 80134c4:	6019      	str	r1, [r3, #0]
 80134c6:	e002      	b.n	80134ce <_printf_i+0x1c6>
 80134c8:	0668      	lsls	r0, r5, #25
 80134ca:	d5fb      	bpl.n	80134c4 <_printf_i+0x1bc>
 80134cc:	8019      	strh	r1, [r3, #0]
 80134ce:	2300      	movs	r3, #0
 80134d0:	6123      	str	r3, [r4, #16]
 80134d2:	4616      	mov	r6, r2
 80134d4:	e7bc      	b.n	8013450 <_printf_i+0x148>
 80134d6:	6833      	ldr	r3, [r6, #0]
 80134d8:	1d1a      	adds	r2, r3, #4
 80134da:	6032      	str	r2, [r6, #0]
 80134dc:	681e      	ldr	r6, [r3, #0]
 80134de:	6862      	ldr	r2, [r4, #4]
 80134e0:	2100      	movs	r1, #0
 80134e2:	4630      	mov	r0, r6
 80134e4:	f7ec fe94 	bl	8000210 <memchr>
 80134e8:	b108      	cbz	r0, 80134ee <_printf_i+0x1e6>
 80134ea:	1b80      	subs	r0, r0, r6
 80134ec:	6060      	str	r0, [r4, #4]
 80134ee:	6863      	ldr	r3, [r4, #4]
 80134f0:	6123      	str	r3, [r4, #16]
 80134f2:	2300      	movs	r3, #0
 80134f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80134f8:	e7aa      	b.n	8013450 <_printf_i+0x148>
 80134fa:	6923      	ldr	r3, [r4, #16]
 80134fc:	4632      	mov	r2, r6
 80134fe:	4649      	mov	r1, r9
 8013500:	4640      	mov	r0, r8
 8013502:	47d0      	blx	sl
 8013504:	3001      	adds	r0, #1
 8013506:	d0ad      	beq.n	8013464 <_printf_i+0x15c>
 8013508:	6823      	ldr	r3, [r4, #0]
 801350a:	079b      	lsls	r3, r3, #30
 801350c:	d413      	bmi.n	8013536 <_printf_i+0x22e>
 801350e:	68e0      	ldr	r0, [r4, #12]
 8013510:	9b03      	ldr	r3, [sp, #12]
 8013512:	4298      	cmp	r0, r3
 8013514:	bfb8      	it	lt
 8013516:	4618      	movlt	r0, r3
 8013518:	e7a6      	b.n	8013468 <_printf_i+0x160>
 801351a:	2301      	movs	r3, #1
 801351c:	4632      	mov	r2, r6
 801351e:	4649      	mov	r1, r9
 8013520:	4640      	mov	r0, r8
 8013522:	47d0      	blx	sl
 8013524:	3001      	adds	r0, #1
 8013526:	d09d      	beq.n	8013464 <_printf_i+0x15c>
 8013528:	3501      	adds	r5, #1
 801352a:	68e3      	ldr	r3, [r4, #12]
 801352c:	9903      	ldr	r1, [sp, #12]
 801352e:	1a5b      	subs	r3, r3, r1
 8013530:	42ab      	cmp	r3, r5
 8013532:	dcf2      	bgt.n	801351a <_printf_i+0x212>
 8013534:	e7eb      	b.n	801350e <_printf_i+0x206>
 8013536:	2500      	movs	r5, #0
 8013538:	f104 0619 	add.w	r6, r4, #25
 801353c:	e7f5      	b.n	801352a <_printf_i+0x222>
 801353e:	bf00      	nop
 8013540:	08016086 	.word	0x08016086
 8013544:	08016097 	.word	0x08016097

08013548 <std>:
 8013548:	2300      	movs	r3, #0
 801354a:	b510      	push	{r4, lr}
 801354c:	4604      	mov	r4, r0
 801354e:	e9c0 3300 	strd	r3, r3, [r0]
 8013552:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013556:	6083      	str	r3, [r0, #8]
 8013558:	8181      	strh	r1, [r0, #12]
 801355a:	6643      	str	r3, [r0, #100]	@ 0x64
 801355c:	81c2      	strh	r2, [r0, #14]
 801355e:	6183      	str	r3, [r0, #24]
 8013560:	4619      	mov	r1, r3
 8013562:	2208      	movs	r2, #8
 8013564:	305c      	adds	r0, #92	@ 0x5c
 8013566:	f000 f926 	bl	80137b6 <memset>
 801356a:	4b0d      	ldr	r3, [pc, #52]	@ (80135a0 <std+0x58>)
 801356c:	6263      	str	r3, [r4, #36]	@ 0x24
 801356e:	4b0d      	ldr	r3, [pc, #52]	@ (80135a4 <std+0x5c>)
 8013570:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013572:	4b0d      	ldr	r3, [pc, #52]	@ (80135a8 <std+0x60>)
 8013574:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013576:	4b0d      	ldr	r3, [pc, #52]	@ (80135ac <std+0x64>)
 8013578:	6323      	str	r3, [r4, #48]	@ 0x30
 801357a:	4b0d      	ldr	r3, [pc, #52]	@ (80135b0 <std+0x68>)
 801357c:	6224      	str	r4, [r4, #32]
 801357e:	429c      	cmp	r4, r3
 8013580:	d006      	beq.n	8013590 <std+0x48>
 8013582:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013586:	4294      	cmp	r4, r2
 8013588:	d002      	beq.n	8013590 <std+0x48>
 801358a:	33d0      	adds	r3, #208	@ 0xd0
 801358c:	429c      	cmp	r4, r3
 801358e:	d105      	bne.n	801359c <std+0x54>
 8013590:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013598:	f000 b9e0 	b.w	801395c <__retarget_lock_init_recursive>
 801359c:	bd10      	pop	{r4, pc}
 801359e:	bf00      	nop
 80135a0:	08013731 	.word	0x08013731
 80135a4:	08013753 	.word	0x08013753
 80135a8:	0801378b 	.word	0x0801378b
 80135ac:	080137af 	.word	0x080137af
 80135b0:	20006968 	.word	0x20006968

080135b4 <stdio_exit_handler>:
 80135b4:	4a02      	ldr	r2, [pc, #8]	@ (80135c0 <stdio_exit_handler+0xc>)
 80135b6:	4903      	ldr	r1, [pc, #12]	@ (80135c4 <stdio_exit_handler+0x10>)
 80135b8:	4803      	ldr	r0, [pc, #12]	@ (80135c8 <stdio_exit_handler+0x14>)
 80135ba:	f000 b869 	b.w	8013690 <_fwalk_sglue>
 80135be:	bf00      	nop
 80135c0:	20000028 	.word	0x20000028
 80135c4:	08015559 	.word	0x08015559
 80135c8:	20000038 	.word	0x20000038

080135cc <cleanup_stdio>:
 80135cc:	6841      	ldr	r1, [r0, #4]
 80135ce:	4b0c      	ldr	r3, [pc, #48]	@ (8013600 <cleanup_stdio+0x34>)
 80135d0:	4299      	cmp	r1, r3
 80135d2:	b510      	push	{r4, lr}
 80135d4:	4604      	mov	r4, r0
 80135d6:	d001      	beq.n	80135dc <cleanup_stdio+0x10>
 80135d8:	f001 ffbe 	bl	8015558 <_fflush_r>
 80135dc:	68a1      	ldr	r1, [r4, #8]
 80135de:	4b09      	ldr	r3, [pc, #36]	@ (8013604 <cleanup_stdio+0x38>)
 80135e0:	4299      	cmp	r1, r3
 80135e2:	d002      	beq.n	80135ea <cleanup_stdio+0x1e>
 80135e4:	4620      	mov	r0, r4
 80135e6:	f001 ffb7 	bl	8015558 <_fflush_r>
 80135ea:	68e1      	ldr	r1, [r4, #12]
 80135ec:	4b06      	ldr	r3, [pc, #24]	@ (8013608 <cleanup_stdio+0x3c>)
 80135ee:	4299      	cmp	r1, r3
 80135f0:	d004      	beq.n	80135fc <cleanup_stdio+0x30>
 80135f2:	4620      	mov	r0, r4
 80135f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80135f8:	f001 bfae 	b.w	8015558 <_fflush_r>
 80135fc:	bd10      	pop	{r4, pc}
 80135fe:	bf00      	nop
 8013600:	20006968 	.word	0x20006968
 8013604:	200069d0 	.word	0x200069d0
 8013608:	20006a38 	.word	0x20006a38

0801360c <global_stdio_init.part.0>:
 801360c:	b510      	push	{r4, lr}
 801360e:	4b0b      	ldr	r3, [pc, #44]	@ (801363c <global_stdio_init.part.0+0x30>)
 8013610:	4c0b      	ldr	r4, [pc, #44]	@ (8013640 <global_stdio_init.part.0+0x34>)
 8013612:	4a0c      	ldr	r2, [pc, #48]	@ (8013644 <global_stdio_init.part.0+0x38>)
 8013614:	601a      	str	r2, [r3, #0]
 8013616:	4620      	mov	r0, r4
 8013618:	2200      	movs	r2, #0
 801361a:	2104      	movs	r1, #4
 801361c:	f7ff ff94 	bl	8013548 <std>
 8013620:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013624:	2201      	movs	r2, #1
 8013626:	2109      	movs	r1, #9
 8013628:	f7ff ff8e 	bl	8013548 <std>
 801362c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013630:	2202      	movs	r2, #2
 8013632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013636:	2112      	movs	r1, #18
 8013638:	f7ff bf86 	b.w	8013548 <std>
 801363c:	20006aa0 	.word	0x20006aa0
 8013640:	20006968 	.word	0x20006968
 8013644:	080135b5 	.word	0x080135b5

08013648 <__sfp_lock_acquire>:
 8013648:	4801      	ldr	r0, [pc, #4]	@ (8013650 <__sfp_lock_acquire+0x8>)
 801364a:	f000 b988 	b.w	801395e <__retarget_lock_acquire_recursive>
 801364e:	bf00      	nop
 8013650:	20006aa9 	.word	0x20006aa9

08013654 <__sfp_lock_release>:
 8013654:	4801      	ldr	r0, [pc, #4]	@ (801365c <__sfp_lock_release+0x8>)
 8013656:	f000 b983 	b.w	8013960 <__retarget_lock_release_recursive>
 801365a:	bf00      	nop
 801365c:	20006aa9 	.word	0x20006aa9

08013660 <__sinit>:
 8013660:	b510      	push	{r4, lr}
 8013662:	4604      	mov	r4, r0
 8013664:	f7ff fff0 	bl	8013648 <__sfp_lock_acquire>
 8013668:	6a23      	ldr	r3, [r4, #32]
 801366a:	b11b      	cbz	r3, 8013674 <__sinit+0x14>
 801366c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013670:	f7ff bff0 	b.w	8013654 <__sfp_lock_release>
 8013674:	4b04      	ldr	r3, [pc, #16]	@ (8013688 <__sinit+0x28>)
 8013676:	6223      	str	r3, [r4, #32]
 8013678:	4b04      	ldr	r3, [pc, #16]	@ (801368c <__sinit+0x2c>)
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d1f5      	bne.n	801366c <__sinit+0xc>
 8013680:	f7ff ffc4 	bl	801360c <global_stdio_init.part.0>
 8013684:	e7f2      	b.n	801366c <__sinit+0xc>
 8013686:	bf00      	nop
 8013688:	080135cd 	.word	0x080135cd
 801368c:	20006aa0 	.word	0x20006aa0

08013690 <_fwalk_sglue>:
 8013690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013694:	4607      	mov	r7, r0
 8013696:	4688      	mov	r8, r1
 8013698:	4614      	mov	r4, r2
 801369a:	2600      	movs	r6, #0
 801369c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80136a0:	f1b9 0901 	subs.w	r9, r9, #1
 80136a4:	d505      	bpl.n	80136b2 <_fwalk_sglue+0x22>
 80136a6:	6824      	ldr	r4, [r4, #0]
 80136a8:	2c00      	cmp	r4, #0
 80136aa:	d1f7      	bne.n	801369c <_fwalk_sglue+0xc>
 80136ac:	4630      	mov	r0, r6
 80136ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80136b2:	89ab      	ldrh	r3, [r5, #12]
 80136b4:	2b01      	cmp	r3, #1
 80136b6:	d907      	bls.n	80136c8 <_fwalk_sglue+0x38>
 80136b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80136bc:	3301      	adds	r3, #1
 80136be:	d003      	beq.n	80136c8 <_fwalk_sglue+0x38>
 80136c0:	4629      	mov	r1, r5
 80136c2:	4638      	mov	r0, r7
 80136c4:	47c0      	blx	r8
 80136c6:	4306      	orrs	r6, r0
 80136c8:	3568      	adds	r5, #104	@ 0x68
 80136ca:	e7e9      	b.n	80136a0 <_fwalk_sglue+0x10>

080136cc <iprintf>:
 80136cc:	b40f      	push	{r0, r1, r2, r3}
 80136ce:	b507      	push	{r0, r1, r2, lr}
 80136d0:	4906      	ldr	r1, [pc, #24]	@ (80136ec <iprintf+0x20>)
 80136d2:	ab04      	add	r3, sp, #16
 80136d4:	6808      	ldr	r0, [r1, #0]
 80136d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80136da:	6881      	ldr	r1, [r0, #8]
 80136dc:	9301      	str	r3, [sp, #4]
 80136de:	f001 fd9f 	bl	8015220 <_vfiprintf_r>
 80136e2:	b003      	add	sp, #12
 80136e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80136e8:	b004      	add	sp, #16
 80136ea:	4770      	bx	lr
 80136ec:	20000034 	.word	0x20000034

080136f0 <siprintf>:
 80136f0:	b40e      	push	{r1, r2, r3}
 80136f2:	b500      	push	{lr}
 80136f4:	b09c      	sub	sp, #112	@ 0x70
 80136f6:	ab1d      	add	r3, sp, #116	@ 0x74
 80136f8:	9002      	str	r0, [sp, #8]
 80136fa:	9006      	str	r0, [sp, #24]
 80136fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013700:	4809      	ldr	r0, [pc, #36]	@ (8013728 <siprintf+0x38>)
 8013702:	9107      	str	r1, [sp, #28]
 8013704:	9104      	str	r1, [sp, #16]
 8013706:	4909      	ldr	r1, [pc, #36]	@ (801372c <siprintf+0x3c>)
 8013708:	f853 2b04 	ldr.w	r2, [r3], #4
 801370c:	9105      	str	r1, [sp, #20]
 801370e:	6800      	ldr	r0, [r0, #0]
 8013710:	9301      	str	r3, [sp, #4]
 8013712:	a902      	add	r1, sp, #8
 8013714:	f001 fc5e 	bl	8014fd4 <_svfiprintf_r>
 8013718:	9b02      	ldr	r3, [sp, #8]
 801371a:	2200      	movs	r2, #0
 801371c:	701a      	strb	r2, [r3, #0]
 801371e:	b01c      	add	sp, #112	@ 0x70
 8013720:	f85d eb04 	ldr.w	lr, [sp], #4
 8013724:	b003      	add	sp, #12
 8013726:	4770      	bx	lr
 8013728:	20000034 	.word	0x20000034
 801372c:	ffff0208 	.word	0xffff0208

08013730 <__sread>:
 8013730:	b510      	push	{r4, lr}
 8013732:	460c      	mov	r4, r1
 8013734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013738:	f000 f8c2 	bl	80138c0 <_read_r>
 801373c:	2800      	cmp	r0, #0
 801373e:	bfab      	itete	ge
 8013740:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013742:	89a3      	ldrhlt	r3, [r4, #12]
 8013744:	181b      	addge	r3, r3, r0
 8013746:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801374a:	bfac      	ite	ge
 801374c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801374e:	81a3      	strhlt	r3, [r4, #12]
 8013750:	bd10      	pop	{r4, pc}

08013752 <__swrite>:
 8013752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013756:	461f      	mov	r7, r3
 8013758:	898b      	ldrh	r3, [r1, #12]
 801375a:	05db      	lsls	r3, r3, #23
 801375c:	4605      	mov	r5, r0
 801375e:	460c      	mov	r4, r1
 8013760:	4616      	mov	r6, r2
 8013762:	d505      	bpl.n	8013770 <__swrite+0x1e>
 8013764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013768:	2302      	movs	r3, #2
 801376a:	2200      	movs	r2, #0
 801376c:	f000 f896 	bl	801389c <_lseek_r>
 8013770:	89a3      	ldrh	r3, [r4, #12]
 8013772:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013776:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801377a:	81a3      	strh	r3, [r4, #12]
 801377c:	4632      	mov	r2, r6
 801377e:	463b      	mov	r3, r7
 8013780:	4628      	mov	r0, r5
 8013782:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013786:	f000 b8ad 	b.w	80138e4 <_write_r>

0801378a <__sseek>:
 801378a:	b510      	push	{r4, lr}
 801378c:	460c      	mov	r4, r1
 801378e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013792:	f000 f883 	bl	801389c <_lseek_r>
 8013796:	1c43      	adds	r3, r0, #1
 8013798:	89a3      	ldrh	r3, [r4, #12]
 801379a:	bf15      	itete	ne
 801379c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801379e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80137a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80137a6:	81a3      	strheq	r3, [r4, #12]
 80137a8:	bf18      	it	ne
 80137aa:	81a3      	strhne	r3, [r4, #12]
 80137ac:	bd10      	pop	{r4, pc}

080137ae <__sclose>:
 80137ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137b2:	f000 b80d 	b.w	80137d0 <_close_r>

080137b6 <memset>:
 80137b6:	4402      	add	r2, r0
 80137b8:	4603      	mov	r3, r0
 80137ba:	4293      	cmp	r3, r2
 80137bc:	d100      	bne.n	80137c0 <memset+0xa>
 80137be:	4770      	bx	lr
 80137c0:	f803 1b01 	strb.w	r1, [r3], #1
 80137c4:	e7f9      	b.n	80137ba <memset+0x4>
	...

080137c8 <_localeconv_r>:
 80137c8:	4800      	ldr	r0, [pc, #0]	@ (80137cc <_localeconv_r+0x4>)
 80137ca:	4770      	bx	lr
 80137cc:	20000174 	.word	0x20000174

080137d0 <_close_r>:
 80137d0:	b538      	push	{r3, r4, r5, lr}
 80137d2:	4d06      	ldr	r5, [pc, #24]	@ (80137ec <_close_r+0x1c>)
 80137d4:	2300      	movs	r3, #0
 80137d6:	4604      	mov	r4, r0
 80137d8:	4608      	mov	r0, r1
 80137da:	602b      	str	r3, [r5, #0]
 80137dc:	f7f0 fe06 	bl	80043ec <_close>
 80137e0:	1c43      	adds	r3, r0, #1
 80137e2:	d102      	bne.n	80137ea <_close_r+0x1a>
 80137e4:	682b      	ldr	r3, [r5, #0]
 80137e6:	b103      	cbz	r3, 80137ea <_close_r+0x1a>
 80137e8:	6023      	str	r3, [r4, #0]
 80137ea:	bd38      	pop	{r3, r4, r5, pc}
 80137ec:	20006aa4 	.word	0x20006aa4

080137f0 <_reclaim_reent>:
 80137f0:	4b29      	ldr	r3, [pc, #164]	@ (8013898 <_reclaim_reent+0xa8>)
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	4283      	cmp	r3, r0
 80137f6:	b570      	push	{r4, r5, r6, lr}
 80137f8:	4604      	mov	r4, r0
 80137fa:	d04b      	beq.n	8013894 <_reclaim_reent+0xa4>
 80137fc:	69c3      	ldr	r3, [r0, #28]
 80137fe:	b1ab      	cbz	r3, 801382c <_reclaim_reent+0x3c>
 8013800:	68db      	ldr	r3, [r3, #12]
 8013802:	b16b      	cbz	r3, 8013820 <_reclaim_reent+0x30>
 8013804:	2500      	movs	r5, #0
 8013806:	69e3      	ldr	r3, [r4, #28]
 8013808:	68db      	ldr	r3, [r3, #12]
 801380a:	5959      	ldr	r1, [r3, r5]
 801380c:	2900      	cmp	r1, #0
 801380e:	d13b      	bne.n	8013888 <_reclaim_reent+0x98>
 8013810:	3504      	adds	r5, #4
 8013812:	2d80      	cmp	r5, #128	@ 0x80
 8013814:	d1f7      	bne.n	8013806 <_reclaim_reent+0x16>
 8013816:	69e3      	ldr	r3, [r4, #28]
 8013818:	4620      	mov	r0, r4
 801381a:	68d9      	ldr	r1, [r3, #12]
 801381c:	f000 fefc 	bl	8014618 <_free_r>
 8013820:	69e3      	ldr	r3, [r4, #28]
 8013822:	6819      	ldr	r1, [r3, #0]
 8013824:	b111      	cbz	r1, 801382c <_reclaim_reent+0x3c>
 8013826:	4620      	mov	r0, r4
 8013828:	f000 fef6 	bl	8014618 <_free_r>
 801382c:	6961      	ldr	r1, [r4, #20]
 801382e:	b111      	cbz	r1, 8013836 <_reclaim_reent+0x46>
 8013830:	4620      	mov	r0, r4
 8013832:	f000 fef1 	bl	8014618 <_free_r>
 8013836:	69e1      	ldr	r1, [r4, #28]
 8013838:	b111      	cbz	r1, 8013840 <_reclaim_reent+0x50>
 801383a:	4620      	mov	r0, r4
 801383c:	f000 feec 	bl	8014618 <_free_r>
 8013840:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8013842:	b111      	cbz	r1, 801384a <_reclaim_reent+0x5a>
 8013844:	4620      	mov	r0, r4
 8013846:	f000 fee7 	bl	8014618 <_free_r>
 801384a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801384c:	b111      	cbz	r1, 8013854 <_reclaim_reent+0x64>
 801384e:	4620      	mov	r0, r4
 8013850:	f000 fee2 	bl	8014618 <_free_r>
 8013854:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8013856:	b111      	cbz	r1, 801385e <_reclaim_reent+0x6e>
 8013858:	4620      	mov	r0, r4
 801385a:	f000 fedd 	bl	8014618 <_free_r>
 801385e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8013860:	b111      	cbz	r1, 8013868 <_reclaim_reent+0x78>
 8013862:	4620      	mov	r0, r4
 8013864:	f000 fed8 	bl	8014618 <_free_r>
 8013868:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801386a:	b111      	cbz	r1, 8013872 <_reclaim_reent+0x82>
 801386c:	4620      	mov	r0, r4
 801386e:	f000 fed3 	bl	8014618 <_free_r>
 8013872:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8013874:	b111      	cbz	r1, 801387c <_reclaim_reent+0x8c>
 8013876:	4620      	mov	r0, r4
 8013878:	f000 fece 	bl	8014618 <_free_r>
 801387c:	6a23      	ldr	r3, [r4, #32]
 801387e:	b14b      	cbz	r3, 8013894 <_reclaim_reent+0xa4>
 8013880:	4620      	mov	r0, r4
 8013882:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013886:	4718      	bx	r3
 8013888:	680e      	ldr	r6, [r1, #0]
 801388a:	4620      	mov	r0, r4
 801388c:	f000 fec4 	bl	8014618 <_free_r>
 8013890:	4631      	mov	r1, r6
 8013892:	e7bb      	b.n	801380c <_reclaim_reent+0x1c>
 8013894:	bd70      	pop	{r4, r5, r6, pc}
 8013896:	bf00      	nop
 8013898:	20000034 	.word	0x20000034

0801389c <_lseek_r>:
 801389c:	b538      	push	{r3, r4, r5, lr}
 801389e:	4d07      	ldr	r5, [pc, #28]	@ (80138bc <_lseek_r+0x20>)
 80138a0:	4604      	mov	r4, r0
 80138a2:	4608      	mov	r0, r1
 80138a4:	4611      	mov	r1, r2
 80138a6:	2200      	movs	r2, #0
 80138a8:	602a      	str	r2, [r5, #0]
 80138aa:	461a      	mov	r2, r3
 80138ac:	f7f0 fdc5 	bl	800443a <_lseek>
 80138b0:	1c43      	adds	r3, r0, #1
 80138b2:	d102      	bne.n	80138ba <_lseek_r+0x1e>
 80138b4:	682b      	ldr	r3, [r5, #0]
 80138b6:	b103      	cbz	r3, 80138ba <_lseek_r+0x1e>
 80138b8:	6023      	str	r3, [r4, #0]
 80138ba:	bd38      	pop	{r3, r4, r5, pc}
 80138bc:	20006aa4 	.word	0x20006aa4

080138c0 <_read_r>:
 80138c0:	b538      	push	{r3, r4, r5, lr}
 80138c2:	4d07      	ldr	r5, [pc, #28]	@ (80138e0 <_read_r+0x20>)
 80138c4:	4604      	mov	r4, r0
 80138c6:	4608      	mov	r0, r1
 80138c8:	4611      	mov	r1, r2
 80138ca:	2200      	movs	r2, #0
 80138cc:	602a      	str	r2, [r5, #0]
 80138ce:	461a      	mov	r2, r3
 80138d0:	f7f0 fd6f 	bl	80043b2 <_read>
 80138d4:	1c43      	adds	r3, r0, #1
 80138d6:	d102      	bne.n	80138de <_read_r+0x1e>
 80138d8:	682b      	ldr	r3, [r5, #0]
 80138da:	b103      	cbz	r3, 80138de <_read_r+0x1e>
 80138dc:	6023      	str	r3, [r4, #0]
 80138de:	bd38      	pop	{r3, r4, r5, pc}
 80138e0:	20006aa4 	.word	0x20006aa4

080138e4 <_write_r>:
 80138e4:	b538      	push	{r3, r4, r5, lr}
 80138e6:	4d07      	ldr	r5, [pc, #28]	@ (8013904 <_write_r+0x20>)
 80138e8:	4604      	mov	r4, r0
 80138ea:	4608      	mov	r0, r1
 80138ec:	4611      	mov	r1, r2
 80138ee:	2200      	movs	r2, #0
 80138f0:	602a      	str	r2, [r5, #0]
 80138f2:	461a      	mov	r2, r3
 80138f4:	f7ee fed2 	bl	800269c <_write>
 80138f8:	1c43      	adds	r3, r0, #1
 80138fa:	d102      	bne.n	8013902 <_write_r+0x1e>
 80138fc:	682b      	ldr	r3, [r5, #0]
 80138fe:	b103      	cbz	r3, 8013902 <_write_r+0x1e>
 8013900:	6023      	str	r3, [r4, #0]
 8013902:	bd38      	pop	{r3, r4, r5, pc}
 8013904:	20006aa4 	.word	0x20006aa4

08013908 <__errno>:
 8013908:	4b01      	ldr	r3, [pc, #4]	@ (8013910 <__errno+0x8>)
 801390a:	6818      	ldr	r0, [r3, #0]
 801390c:	4770      	bx	lr
 801390e:	bf00      	nop
 8013910:	20000034 	.word	0x20000034

08013914 <__libc_init_array>:
 8013914:	b570      	push	{r4, r5, r6, lr}
 8013916:	4d0d      	ldr	r5, [pc, #52]	@ (801394c <__libc_init_array+0x38>)
 8013918:	4c0d      	ldr	r4, [pc, #52]	@ (8013950 <__libc_init_array+0x3c>)
 801391a:	1b64      	subs	r4, r4, r5
 801391c:	10a4      	asrs	r4, r4, #2
 801391e:	2600      	movs	r6, #0
 8013920:	42a6      	cmp	r6, r4
 8013922:	d109      	bne.n	8013938 <__libc_init_array+0x24>
 8013924:	4d0b      	ldr	r5, [pc, #44]	@ (8013954 <__libc_init_array+0x40>)
 8013926:	4c0c      	ldr	r4, [pc, #48]	@ (8013958 <__libc_init_array+0x44>)
 8013928:	f002 f866 	bl	80159f8 <_init>
 801392c:	1b64      	subs	r4, r4, r5
 801392e:	10a4      	asrs	r4, r4, #2
 8013930:	2600      	movs	r6, #0
 8013932:	42a6      	cmp	r6, r4
 8013934:	d105      	bne.n	8013942 <__libc_init_array+0x2e>
 8013936:	bd70      	pop	{r4, r5, r6, pc}
 8013938:	f855 3b04 	ldr.w	r3, [r5], #4
 801393c:	4798      	blx	r3
 801393e:	3601      	adds	r6, #1
 8013940:	e7ee      	b.n	8013920 <__libc_init_array+0xc>
 8013942:	f855 3b04 	ldr.w	r3, [r5], #4
 8013946:	4798      	blx	r3
 8013948:	3601      	adds	r6, #1
 801394a:	e7f2      	b.n	8013932 <__libc_init_array+0x1e>
 801394c:	080163f0 	.word	0x080163f0
 8013950:	080163f0 	.word	0x080163f0
 8013954:	080163f0 	.word	0x080163f0
 8013958:	080163f4 	.word	0x080163f4

0801395c <__retarget_lock_init_recursive>:
 801395c:	4770      	bx	lr

0801395e <__retarget_lock_acquire_recursive>:
 801395e:	4770      	bx	lr

08013960 <__retarget_lock_release_recursive>:
 8013960:	4770      	bx	lr

08013962 <memcpy>:
 8013962:	440a      	add	r2, r1
 8013964:	4291      	cmp	r1, r2
 8013966:	f100 33ff 	add.w	r3, r0, #4294967295
 801396a:	d100      	bne.n	801396e <memcpy+0xc>
 801396c:	4770      	bx	lr
 801396e:	b510      	push	{r4, lr}
 8013970:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013974:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013978:	4291      	cmp	r1, r2
 801397a:	d1f9      	bne.n	8013970 <memcpy+0xe>
 801397c:	bd10      	pop	{r4, pc}

0801397e <quorem>:
 801397e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013982:	6903      	ldr	r3, [r0, #16]
 8013984:	690c      	ldr	r4, [r1, #16]
 8013986:	42a3      	cmp	r3, r4
 8013988:	4607      	mov	r7, r0
 801398a:	db7e      	blt.n	8013a8a <quorem+0x10c>
 801398c:	3c01      	subs	r4, #1
 801398e:	f101 0814 	add.w	r8, r1, #20
 8013992:	00a3      	lsls	r3, r4, #2
 8013994:	f100 0514 	add.w	r5, r0, #20
 8013998:	9300      	str	r3, [sp, #0]
 801399a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801399e:	9301      	str	r3, [sp, #4]
 80139a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80139a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80139a8:	3301      	adds	r3, #1
 80139aa:	429a      	cmp	r2, r3
 80139ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80139b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80139b4:	d32e      	bcc.n	8013a14 <quorem+0x96>
 80139b6:	f04f 0a00 	mov.w	sl, #0
 80139ba:	46c4      	mov	ip, r8
 80139bc:	46ae      	mov	lr, r5
 80139be:	46d3      	mov	fp, sl
 80139c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80139c4:	b298      	uxth	r0, r3
 80139c6:	fb06 a000 	mla	r0, r6, r0, sl
 80139ca:	0c02      	lsrs	r2, r0, #16
 80139cc:	0c1b      	lsrs	r3, r3, #16
 80139ce:	fb06 2303 	mla	r3, r6, r3, r2
 80139d2:	f8de 2000 	ldr.w	r2, [lr]
 80139d6:	b280      	uxth	r0, r0
 80139d8:	b292      	uxth	r2, r2
 80139da:	1a12      	subs	r2, r2, r0
 80139dc:	445a      	add	r2, fp
 80139de:	f8de 0000 	ldr.w	r0, [lr]
 80139e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80139e6:	b29b      	uxth	r3, r3
 80139e8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80139ec:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80139f0:	b292      	uxth	r2, r2
 80139f2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80139f6:	45e1      	cmp	r9, ip
 80139f8:	f84e 2b04 	str.w	r2, [lr], #4
 80139fc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8013a00:	d2de      	bcs.n	80139c0 <quorem+0x42>
 8013a02:	9b00      	ldr	r3, [sp, #0]
 8013a04:	58eb      	ldr	r3, [r5, r3]
 8013a06:	b92b      	cbnz	r3, 8013a14 <quorem+0x96>
 8013a08:	9b01      	ldr	r3, [sp, #4]
 8013a0a:	3b04      	subs	r3, #4
 8013a0c:	429d      	cmp	r5, r3
 8013a0e:	461a      	mov	r2, r3
 8013a10:	d32f      	bcc.n	8013a72 <quorem+0xf4>
 8013a12:	613c      	str	r4, [r7, #16]
 8013a14:	4638      	mov	r0, r7
 8013a16:	f001 f979 	bl	8014d0c <__mcmp>
 8013a1a:	2800      	cmp	r0, #0
 8013a1c:	db25      	blt.n	8013a6a <quorem+0xec>
 8013a1e:	4629      	mov	r1, r5
 8013a20:	2000      	movs	r0, #0
 8013a22:	f858 2b04 	ldr.w	r2, [r8], #4
 8013a26:	f8d1 c000 	ldr.w	ip, [r1]
 8013a2a:	fa1f fe82 	uxth.w	lr, r2
 8013a2e:	fa1f f38c 	uxth.w	r3, ip
 8013a32:	eba3 030e 	sub.w	r3, r3, lr
 8013a36:	4403      	add	r3, r0
 8013a38:	0c12      	lsrs	r2, r2, #16
 8013a3a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8013a3e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8013a42:	b29b      	uxth	r3, r3
 8013a44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013a48:	45c1      	cmp	r9, r8
 8013a4a:	f841 3b04 	str.w	r3, [r1], #4
 8013a4e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013a52:	d2e6      	bcs.n	8013a22 <quorem+0xa4>
 8013a54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013a58:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013a5c:	b922      	cbnz	r2, 8013a68 <quorem+0xea>
 8013a5e:	3b04      	subs	r3, #4
 8013a60:	429d      	cmp	r5, r3
 8013a62:	461a      	mov	r2, r3
 8013a64:	d30b      	bcc.n	8013a7e <quorem+0x100>
 8013a66:	613c      	str	r4, [r7, #16]
 8013a68:	3601      	adds	r6, #1
 8013a6a:	4630      	mov	r0, r6
 8013a6c:	b003      	add	sp, #12
 8013a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a72:	6812      	ldr	r2, [r2, #0]
 8013a74:	3b04      	subs	r3, #4
 8013a76:	2a00      	cmp	r2, #0
 8013a78:	d1cb      	bne.n	8013a12 <quorem+0x94>
 8013a7a:	3c01      	subs	r4, #1
 8013a7c:	e7c6      	b.n	8013a0c <quorem+0x8e>
 8013a7e:	6812      	ldr	r2, [r2, #0]
 8013a80:	3b04      	subs	r3, #4
 8013a82:	2a00      	cmp	r2, #0
 8013a84:	d1ef      	bne.n	8013a66 <quorem+0xe8>
 8013a86:	3c01      	subs	r4, #1
 8013a88:	e7ea      	b.n	8013a60 <quorem+0xe2>
 8013a8a:	2000      	movs	r0, #0
 8013a8c:	e7ee      	b.n	8013a6c <quorem+0xee>
	...

08013a90 <_dtoa_r>:
 8013a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a94:	69c7      	ldr	r7, [r0, #28]
 8013a96:	b099      	sub	sp, #100	@ 0x64
 8013a98:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013a9c:	ec55 4b10 	vmov	r4, r5, d0
 8013aa0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8013aa2:	9109      	str	r1, [sp, #36]	@ 0x24
 8013aa4:	4683      	mov	fp, r0
 8013aa6:	920e      	str	r2, [sp, #56]	@ 0x38
 8013aa8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013aaa:	b97f      	cbnz	r7, 8013acc <_dtoa_r+0x3c>
 8013aac:	2010      	movs	r0, #16
 8013aae:	f000 fdfd 	bl	80146ac <malloc>
 8013ab2:	4602      	mov	r2, r0
 8013ab4:	f8cb 001c 	str.w	r0, [fp, #28]
 8013ab8:	b920      	cbnz	r0, 8013ac4 <_dtoa_r+0x34>
 8013aba:	4ba7      	ldr	r3, [pc, #668]	@ (8013d58 <_dtoa_r+0x2c8>)
 8013abc:	21ef      	movs	r1, #239	@ 0xef
 8013abe:	48a7      	ldr	r0, [pc, #668]	@ (8013d5c <_dtoa_r+0x2cc>)
 8013ac0:	f001 fe30 	bl	8015724 <__assert_func>
 8013ac4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8013ac8:	6007      	str	r7, [r0, #0]
 8013aca:	60c7      	str	r7, [r0, #12]
 8013acc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013ad0:	6819      	ldr	r1, [r3, #0]
 8013ad2:	b159      	cbz	r1, 8013aec <_dtoa_r+0x5c>
 8013ad4:	685a      	ldr	r2, [r3, #4]
 8013ad6:	604a      	str	r2, [r1, #4]
 8013ad8:	2301      	movs	r3, #1
 8013ada:	4093      	lsls	r3, r2
 8013adc:	608b      	str	r3, [r1, #8]
 8013ade:	4658      	mov	r0, fp
 8013ae0:	f000 feda 	bl	8014898 <_Bfree>
 8013ae4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013ae8:	2200      	movs	r2, #0
 8013aea:	601a      	str	r2, [r3, #0]
 8013aec:	1e2b      	subs	r3, r5, #0
 8013aee:	bfb9      	ittee	lt
 8013af0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8013af4:	9303      	strlt	r3, [sp, #12]
 8013af6:	2300      	movge	r3, #0
 8013af8:	6033      	strge	r3, [r6, #0]
 8013afa:	9f03      	ldr	r7, [sp, #12]
 8013afc:	4b98      	ldr	r3, [pc, #608]	@ (8013d60 <_dtoa_r+0x2d0>)
 8013afe:	bfbc      	itt	lt
 8013b00:	2201      	movlt	r2, #1
 8013b02:	6032      	strlt	r2, [r6, #0]
 8013b04:	43bb      	bics	r3, r7
 8013b06:	d112      	bne.n	8013b2e <_dtoa_r+0x9e>
 8013b08:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013b0a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8013b0e:	6013      	str	r3, [r2, #0]
 8013b10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013b14:	4323      	orrs	r3, r4
 8013b16:	f000 854d 	beq.w	80145b4 <_dtoa_r+0xb24>
 8013b1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013b1c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8013d74 <_dtoa_r+0x2e4>
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	f000 854f 	beq.w	80145c4 <_dtoa_r+0xb34>
 8013b26:	f10a 0303 	add.w	r3, sl, #3
 8013b2a:	f000 bd49 	b.w	80145c0 <_dtoa_r+0xb30>
 8013b2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013b32:	2200      	movs	r2, #0
 8013b34:	ec51 0b17 	vmov	r0, r1, d7
 8013b38:	2300      	movs	r3, #0
 8013b3a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8013b3e:	f7ec ffe3 	bl	8000b08 <__aeabi_dcmpeq>
 8013b42:	4680      	mov	r8, r0
 8013b44:	b158      	cbz	r0, 8013b5e <_dtoa_r+0xce>
 8013b46:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013b48:	2301      	movs	r3, #1
 8013b4a:	6013      	str	r3, [r2, #0]
 8013b4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013b4e:	b113      	cbz	r3, 8013b56 <_dtoa_r+0xc6>
 8013b50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013b52:	4b84      	ldr	r3, [pc, #528]	@ (8013d64 <_dtoa_r+0x2d4>)
 8013b54:	6013      	str	r3, [r2, #0]
 8013b56:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8013d78 <_dtoa_r+0x2e8>
 8013b5a:	f000 bd33 	b.w	80145c4 <_dtoa_r+0xb34>
 8013b5e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8013b62:	aa16      	add	r2, sp, #88	@ 0x58
 8013b64:	a917      	add	r1, sp, #92	@ 0x5c
 8013b66:	4658      	mov	r0, fp
 8013b68:	f001 f980 	bl	8014e6c <__d2b>
 8013b6c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8013b70:	4681      	mov	r9, r0
 8013b72:	2e00      	cmp	r6, #0
 8013b74:	d077      	beq.n	8013c66 <_dtoa_r+0x1d6>
 8013b76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013b78:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8013b7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013b80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013b84:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8013b88:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8013b8c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8013b90:	4619      	mov	r1, r3
 8013b92:	2200      	movs	r2, #0
 8013b94:	4b74      	ldr	r3, [pc, #464]	@ (8013d68 <_dtoa_r+0x2d8>)
 8013b96:	f7ec fb97 	bl	80002c8 <__aeabi_dsub>
 8013b9a:	a369      	add	r3, pc, #420	@ (adr r3, 8013d40 <_dtoa_r+0x2b0>)
 8013b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ba0:	f7ec fd4a 	bl	8000638 <__aeabi_dmul>
 8013ba4:	a368      	add	r3, pc, #416	@ (adr r3, 8013d48 <_dtoa_r+0x2b8>)
 8013ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013baa:	f7ec fb8f 	bl	80002cc <__adddf3>
 8013bae:	4604      	mov	r4, r0
 8013bb0:	4630      	mov	r0, r6
 8013bb2:	460d      	mov	r5, r1
 8013bb4:	f7ec fcd6 	bl	8000564 <__aeabi_i2d>
 8013bb8:	a365      	add	r3, pc, #404	@ (adr r3, 8013d50 <_dtoa_r+0x2c0>)
 8013bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bbe:	f7ec fd3b 	bl	8000638 <__aeabi_dmul>
 8013bc2:	4602      	mov	r2, r0
 8013bc4:	460b      	mov	r3, r1
 8013bc6:	4620      	mov	r0, r4
 8013bc8:	4629      	mov	r1, r5
 8013bca:	f7ec fb7f 	bl	80002cc <__adddf3>
 8013bce:	4604      	mov	r4, r0
 8013bd0:	460d      	mov	r5, r1
 8013bd2:	f7ec ffe1 	bl	8000b98 <__aeabi_d2iz>
 8013bd6:	2200      	movs	r2, #0
 8013bd8:	4607      	mov	r7, r0
 8013bda:	2300      	movs	r3, #0
 8013bdc:	4620      	mov	r0, r4
 8013bde:	4629      	mov	r1, r5
 8013be0:	f7ec ff9c 	bl	8000b1c <__aeabi_dcmplt>
 8013be4:	b140      	cbz	r0, 8013bf8 <_dtoa_r+0x168>
 8013be6:	4638      	mov	r0, r7
 8013be8:	f7ec fcbc 	bl	8000564 <__aeabi_i2d>
 8013bec:	4622      	mov	r2, r4
 8013bee:	462b      	mov	r3, r5
 8013bf0:	f7ec ff8a 	bl	8000b08 <__aeabi_dcmpeq>
 8013bf4:	b900      	cbnz	r0, 8013bf8 <_dtoa_r+0x168>
 8013bf6:	3f01      	subs	r7, #1
 8013bf8:	2f16      	cmp	r7, #22
 8013bfa:	d851      	bhi.n	8013ca0 <_dtoa_r+0x210>
 8013bfc:	4b5b      	ldr	r3, [pc, #364]	@ (8013d6c <_dtoa_r+0x2dc>)
 8013bfe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013c0a:	f7ec ff87 	bl	8000b1c <__aeabi_dcmplt>
 8013c0e:	2800      	cmp	r0, #0
 8013c10:	d048      	beq.n	8013ca4 <_dtoa_r+0x214>
 8013c12:	3f01      	subs	r7, #1
 8013c14:	2300      	movs	r3, #0
 8013c16:	9312      	str	r3, [sp, #72]	@ 0x48
 8013c18:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013c1a:	1b9b      	subs	r3, r3, r6
 8013c1c:	1e5a      	subs	r2, r3, #1
 8013c1e:	bf44      	itt	mi
 8013c20:	f1c3 0801 	rsbmi	r8, r3, #1
 8013c24:	2300      	movmi	r3, #0
 8013c26:	9208      	str	r2, [sp, #32]
 8013c28:	bf54      	ite	pl
 8013c2a:	f04f 0800 	movpl.w	r8, #0
 8013c2e:	9308      	strmi	r3, [sp, #32]
 8013c30:	2f00      	cmp	r7, #0
 8013c32:	db39      	blt.n	8013ca8 <_dtoa_r+0x218>
 8013c34:	9b08      	ldr	r3, [sp, #32]
 8013c36:	970f      	str	r7, [sp, #60]	@ 0x3c
 8013c38:	443b      	add	r3, r7
 8013c3a:	9308      	str	r3, [sp, #32]
 8013c3c:	2300      	movs	r3, #0
 8013c3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013c40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c42:	2b09      	cmp	r3, #9
 8013c44:	d864      	bhi.n	8013d10 <_dtoa_r+0x280>
 8013c46:	2b05      	cmp	r3, #5
 8013c48:	bfc4      	itt	gt
 8013c4a:	3b04      	subgt	r3, #4
 8013c4c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8013c4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c50:	f1a3 0302 	sub.w	r3, r3, #2
 8013c54:	bfcc      	ite	gt
 8013c56:	2400      	movgt	r4, #0
 8013c58:	2401      	movle	r4, #1
 8013c5a:	2b03      	cmp	r3, #3
 8013c5c:	d863      	bhi.n	8013d26 <_dtoa_r+0x296>
 8013c5e:	e8df f003 	tbb	[pc, r3]
 8013c62:	372a      	.short	0x372a
 8013c64:	5535      	.short	0x5535
 8013c66:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8013c6a:	441e      	add	r6, r3
 8013c6c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8013c70:	2b20      	cmp	r3, #32
 8013c72:	bfc1      	itttt	gt
 8013c74:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8013c78:	409f      	lslgt	r7, r3
 8013c7a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8013c7e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8013c82:	bfd6      	itet	le
 8013c84:	f1c3 0320 	rsble	r3, r3, #32
 8013c88:	ea47 0003 	orrgt.w	r0, r7, r3
 8013c8c:	fa04 f003 	lslle.w	r0, r4, r3
 8013c90:	f7ec fc58 	bl	8000544 <__aeabi_ui2d>
 8013c94:	2201      	movs	r2, #1
 8013c96:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8013c9a:	3e01      	subs	r6, #1
 8013c9c:	9214      	str	r2, [sp, #80]	@ 0x50
 8013c9e:	e777      	b.n	8013b90 <_dtoa_r+0x100>
 8013ca0:	2301      	movs	r3, #1
 8013ca2:	e7b8      	b.n	8013c16 <_dtoa_r+0x186>
 8013ca4:	9012      	str	r0, [sp, #72]	@ 0x48
 8013ca6:	e7b7      	b.n	8013c18 <_dtoa_r+0x188>
 8013ca8:	427b      	negs	r3, r7
 8013caa:	930a      	str	r3, [sp, #40]	@ 0x28
 8013cac:	2300      	movs	r3, #0
 8013cae:	eba8 0807 	sub.w	r8, r8, r7
 8013cb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013cb4:	e7c4      	b.n	8013c40 <_dtoa_r+0x1b0>
 8013cb6:	2300      	movs	r3, #0
 8013cb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013cba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	dc35      	bgt.n	8013d2c <_dtoa_r+0x29c>
 8013cc0:	2301      	movs	r3, #1
 8013cc2:	9300      	str	r3, [sp, #0]
 8013cc4:	9307      	str	r3, [sp, #28]
 8013cc6:	461a      	mov	r2, r3
 8013cc8:	920e      	str	r2, [sp, #56]	@ 0x38
 8013cca:	e00b      	b.n	8013ce4 <_dtoa_r+0x254>
 8013ccc:	2301      	movs	r3, #1
 8013cce:	e7f3      	b.n	8013cb8 <_dtoa_r+0x228>
 8013cd0:	2300      	movs	r3, #0
 8013cd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013cd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013cd6:	18fb      	adds	r3, r7, r3
 8013cd8:	9300      	str	r3, [sp, #0]
 8013cda:	3301      	adds	r3, #1
 8013cdc:	2b01      	cmp	r3, #1
 8013cde:	9307      	str	r3, [sp, #28]
 8013ce0:	bfb8      	it	lt
 8013ce2:	2301      	movlt	r3, #1
 8013ce4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8013ce8:	2100      	movs	r1, #0
 8013cea:	2204      	movs	r2, #4
 8013cec:	f102 0514 	add.w	r5, r2, #20
 8013cf0:	429d      	cmp	r5, r3
 8013cf2:	d91f      	bls.n	8013d34 <_dtoa_r+0x2a4>
 8013cf4:	6041      	str	r1, [r0, #4]
 8013cf6:	4658      	mov	r0, fp
 8013cf8:	f000 fd8e 	bl	8014818 <_Balloc>
 8013cfc:	4682      	mov	sl, r0
 8013cfe:	2800      	cmp	r0, #0
 8013d00:	d13c      	bne.n	8013d7c <_dtoa_r+0x2ec>
 8013d02:	4b1b      	ldr	r3, [pc, #108]	@ (8013d70 <_dtoa_r+0x2e0>)
 8013d04:	4602      	mov	r2, r0
 8013d06:	f240 11af 	movw	r1, #431	@ 0x1af
 8013d0a:	e6d8      	b.n	8013abe <_dtoa_r+0x2e>
 8013d0c:	2301      	movs	r3, #1
 8013d0e:	e7e0      	b.n	8013cd2 <_dtoa_r+0x242>
 8013d10:	2401      	movs	r4, #1
 8013d12:	2300      	movs	r3, #0
 8013d14:	9309      	str	r3, [sp, #36]	@ 0x24
 8013d16:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013d18:	f04f 33ff 	mov.w	r3, #4294967295
 8013d1c:	9300      	str	r3, [sp, #0]
 8013d1e:	9307      	str	r3, [sp, #28]
 8013d20:	2200      	movs	r2, #0
 8013d22:	2312      	movs	r3, #18
 8013d24:	e7d0      	b.n	8013cc8 <_dtoa_r+0x238>
 8013d26:	2301      	movs	r3, #1
 8013d28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013d2a:	e7f5      	b.n	8013d18 <_dtoa_r+0x288>
 8013d2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013d2e:	9300      	str	r3, [sp, #0]
 8013d30:	9307      	str	r3, [sp, #28]
 8013d32:	e7d7      	b.n	8013ce4 <_dtoa_r+0x254>
 8013d34:	3101      	adds	r1, #1
 8013d36:	0052      	lsls	r2, r2, #1
 8013d38:	e7d8      	b.n	8013cec <_dtoa_r+0x25c>
 8013d3a:	bf00      	nop
 8013d3c:	f3af 8000 	nop.w
 8013d40:	636f4361 	.word	0x636f4361
 8013d44:	3fd287a7 	.word	0x3fd287a7
 8013d48:	8b60c8b3 	.word	0x8b60c8b3
 8013d4c:	3fc68a28 	.word	0x3fc68a28
 8013d50:	509f79fb 	.word	0x509f79fb
 8013d54:	3fd34413 	.word	0x3fd34413
 8013d58:	080160b5 	.word	0x080160b5
 8013d5c:	080160cc 	.word	0x080160cc
 8013d60:	7ff00000 	.word	0x7ff00000
 8013d64:	08016085 	.word	0x08016085
 8013d68:	3ff80000 	.word	0x3ff80000
 8013d6c:	080161c8 	.word	0x080161c8
 8013d70:	08016124 	.word	0x08016124
 8013d74:	080160b1 	.word	0x080160b1
 8013d78:	08016084 	.word	0x08016084
 8013d7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013d80:	6018      	str	r0, [r3, #0]
 8013d82:	9b07      	ldr	r3, [sp, #28]
 8013d84:	2b0e      	cmp	r3, #14
 8013d86:	f200 80a4 	bhi.w	8013ed2 <_dtoa_r+0x442>
 8013d8a:	2c00      	cmp	r4, #0
 8013d8c:	f000 80a1 	beq.w	8013ed2 <_dtoa_r+0x442>
 8013d90:	2f00      	cmp	r7, #0
 8013d92:	dd33      	ble.n	8013dfc <_dtoa_r+0x36c>
 8013d94:	4bad      	ldr	r3, [pc, #692]	@ (801404c <_dtoa_r+0x5bc>)
 8013d96:	f007 020f 	and.w	r2, r7, #15
 8013d9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013d9e:	ed93 7b00 	vldr	d7, [r3]
 8013da2:	05f8      	lsls	r0, r7, #23
 8013da4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013da8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8013dac:	d516      	bpl.n	8013ddc <_dtoa_r+0x34c>
 8013dae:	4ba8      	ldr	r3, [pc, #672]	@ (8014050 <_dtoa_r+0x5c0>)
 8013db0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013db4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013db8:	f7ec fd68 	bl	800088c <__aeabi_ddiv>
 8013dbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013dc0:	f004 040f 	and.w	r4, r4, #15
 8013dc4:	2603      	movs	r6, #3
 8013dc6:	4da2      	ldr	r5, [pc, #648]	@ (8014050 <_dtoa_r+0x5c0>)
 8013dc8:	b954      	cbnz	r4, 8013de0 <_dtoa_r+0x350>
 8013dca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013dce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013dd2:	f7ec fd5b 	bl	800088c <__aeabi_ddiv>
 8013dd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013dda:	e028      	b.n	8013e2e <_dtoa_r+0x39e>
 8013ddc:	2602      	movs	r6, #2
 8013dde:	e7f2      	b.n	8013dc6 <_dtoa_r+0x336>
 8013de0:	07e1      	lsls	r1, r4, #31
 8013de2:	d508      	bpl.n	8013df6 <_dtoa_r+0x366>
 8013de4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013de8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013dec:	f7ec fc24 	bl	8000638 <__aeabi_dmul>
 8013df0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013df4:	3601      	adds	r6, #1
 8013df6:	1064      	asrs	r4, r4, #1
 8013df8:	3508      	adds	r5, #8
 8013dfa:	e7e5      	b.n	8013dc8 <_dtoa_r+0x338>
 8013dfc:	f000 80d2 	beq.w	8013fa4 <_dtoa_r+0x514>
 8013e00:	427c      	negs	r4, r7
 8013e02:	4b92      	ldr	r3, [pc, #584]	@ (801404c <_dtoa_r+0x5bc>)
 8013e04:	4d92      	ldr	r5, [pc, #584]	@ (8014050 <_dtoa_r+0x5c0>)
 8013e06:	f004 020f 	and.w	r2, r4, #15
 8013e0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013e16:	f7ec fc0f 	bl	8000638 <__aeabi_dmul>
 8013e1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013e1e:	1124      	asrs	r4, r4, #4
 8013e20:	2300      	movs	r3, #0
 8013e22:	2602      	movs	r6, #2
 8013e24:	2c00      	cmp	r4, #0
 8013e26:	f040 80b2 	bne.w	8013f8e <_dtoa_r+0x4fe>
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d1d3      	bne.n	8013dd6 <_dtoa_r+0x346>
 8013e2e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013e30:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	f000 80b7 	beq.w	8013fa8 <_dtoa_r+0x518>
 8013e3a:	4b86      	ldr	r3, [pc, #536]	@ (8014054 <_dtoa_r+0x5c4>)
 8013e3c:	2200      	movs	r2, #0
 8013e3e:	4620      	mov	r0, r4
 8013e40:	4629      	mov	r1, r5
 8013e42:	f7ec fe6b 	bl	8000b1c <__aeabi_dcmplt>
 8013e46:	2800      	cmp	r0, #0
 8013e48:	f000 80ae 	beq.w	8013fa8 <_dtoa_r+0x518>
 8013e4c:	9b07      	ldr	r3, [sp, #28]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	f000 80aa 	beq.w	8013fa8 <_dtoa_r+0x518>
 8013e54:	9b00      	ldr	r3, [sp, #0]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	dd37      	ble.n	8013eca <_dtoa_r+0x43a>
 8013e5a:	1e7b      	subs	r3, r7, #1
 8013e5c:	9304      	str	r3, [sp, #16]
 8013e5e:	4620      	mov	r0, r4
 8013e60:	4b7d      	ldr	r3, [pc, #500]	@ (8014058 <_dtoa_r+0x5c8>)
 8013e62:	2200      	movs	r2, #0
 8013e64:	4629      	mov	r1, r5
 8013e66:	f7ec fbe7 	bl	8000638 <__aeabi_dmul>
 8013e6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013e6e:	9c00      	ldr	r4, [sp, #0]
 8013e70:	3601      	adds	r6, #1
 8013e72:	4630      	mov	r0, r6
 8013e74:	f7ec fb76 	bl	8000564 <__aeabi_i2d>
 8013e78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013e7c:	f7ec fbdc 	bl	8000638 <__aeabi_dmul>
 8013e80:	4b76      	ldr	r3, [pc, #472]	@ (801405c <_dtoa_r+0x5cc>)
 8013e82:	2200      	movs	r2, #0
 8013e84:	f7ec fa22 	bl	80002cc <__adddf3>
 8013e88:	4605      	mov	r5, r0
 8013e8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8013e8e:	2c00      	cmp	r4, #0
 8013e90:	f040 808d 	bne.w	8013fae <_dtoa_r+0x51e>
 8013e94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013e98:	4b71      	ldr	r3, [pc, #452]	@ (8014060 <_dtoa_r+0x5d0>)
 8013e9a:	2200      	movs	r2, #0
 8013e9c:	f7ec fa14 	bl	80002c8 <__aeabi_dsub>
 8013ea0:	4602      	mov	r2, r0
 8013ea2:	460b      	mov	r3, r1
 8013ea4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013ea8:	462a      	mov	r2, r5
 8013eaa:	4633      	mov	r3, r6
 8013eac:	f7ec fe54 	bl	8000b58 <__aeabi_dcmpgt>
 8013eb0:	2800      	cmp	r0, #0
 8013eb2:	f040 828b 	bne.w	80143cc <_dtoa_r+0x93c>
 8013eb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013eba:	462a      	mov	r2, r5
 8013ebc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8013ec0:	f7ec fe2c 	bl	8000b1c <__aeabi_dcmplt>
 8013ec4:	2800      	cmp	r0, #0
 8013ec6:	f040 8128 	bne.w	801411a <_dtoa_r+0x68a>
 8013eca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8013ece:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8013ed2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	f2c0 815a 	blt.w	801418e <_dtoa_r+0x6fe>
 8013eda:	2f0e      	cmp	r7, #14
 8013edc:	f300 8157 	bgt.w	801418e <_dtoa_r+0x6fe>
 8013ee0:	4b5a      	ldr	r3, [pc, #360]	@ (801404c <_dtoa_r+0x5bc>)
 8013ee2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013ee6:	ed93 7b00 	vldr	d7, [r3]
 8013eea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	ed8d 7b00 	vstr	d7, [sp]
 8013ef2:	da03      	bge.n	8013efc <_dtoa_r+0x46c>
 8013ef4:	9b07      	ldr	r3, [sp, #28]
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	f340 8101 	ble.w	80140fe <_dtoa_r+0x66e>
 8013efc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8013f00:	4656      	mov	r6, sl
 8013f02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013f06:	4620      	mov	r0, r4
 8013f08:	4629      	mov	r1, r5
 8013f0a:	f7ec fcbf 	bl	800088c <__aeabi_ddiv>
 8013f0e:	f7ec fe43 	bl	8000b98 <__aeabi_d2iz>
 8013f12:	4680      	mov	r8, r0
 8013f14:	f7ec fb26 	bl	8000564 <__aeabi_i2d>
 8013f18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013f1c:	f7ec fb8c 	bl	8000638 <__aeabi_dmul>
 8013f20:	4602      	mov	r2, r0
 8013f22:	460b      	mov	r3, r1
 8013f24:	4620      	mov	r0, r4
 8013f26:	4629      	mov	r1, r5
 8013f28:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8013f2c:	f7ec f9cc 	bl	80002c8 <__aeabi_dsub>
 8013f30:	f806 4b01 	strb.w	r4, [r6], #1
 8013f34:	9d07      	ldr	r5, [sp, #28]
 8013f36:	eba6 040a 	sub.w	r4, r6, sl
 8013f3a:	42a5      	cmp	r5, r4
 8013f3c:	4602      	mov	r2, r0
 8013f3e:	460b      	mov	r3, r1
 8013f40:	f040 8117 	bne.w	8014172 <_dtoa_r+0x6e2>
 8013f44:	f7ec f9c2 	bl	80002cc <__adddf3>
 8013f48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013f4c:	4604      	mov	r4, r0
 8013f4e:	460d      	mov	r5, r1
 8013f50:	f7ec fe02 	bl	8000b58 <__aeabi_dcmpgt>
 8013f54:	2800      	cmp	r0, #0
 8013f56:	f040 80f9 	bne.w	801414c <_dtoa_r+0x6bc>
 8013f5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013f5e:	4620      	mov	r0, r4
 8013f60:	4629      	mov	r1, r5
 8013f62:	f7ec fdd1 	bl	8000b08 <__aeabi_dcmpeq>
 8013f66:	b118      	cbz	r0, 8013f70 <_dtoa_r+0x4e0>
 8013f68:	f018 0f01 	tst.w	r8, #1
 8013f6c:	f040 80ee 	bne.w	801414c <_dtoa_r+0x6bc>
 8013f70:	4649      	mov	r1, r9
 8013f72:	4658      	mov	r0, fp
 8013f74:	f000 fc90 	bl	8014898 <_Bfree>
 8013f78:	2300      	movs	r3, #0
 8013f7a:	7033      	strb	r3, [r6, #0]
 8013f7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013f7e:	3701      	adds	r7, #1
 8013f80:	601f      	str	r7, [r3, #0]
 8013f82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	f000 831d 	beq.w	80145c4 <_dtoa_r+0xb34>
 8013f8a:	601e      	str	r6, [r3, #0]
 8013f8c:	e31a      	b.n	80145c4 <_dtoa_r+0xb34>
 8013f8e:	07e2      	lsls	r2, r4, #31
 8013f90:	d505      	bpl.n	8013f9e <_dtoa_r+0x50e>
 8013f92:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013f96:	f7ec fb4f 	bl	8000638 <__aeabi_dmul>
 8013f9a:	3601      	adds	r6, #1
 8013f9c:	2301      	movs	r3, #1
 8013f9e:	1064      	asrs	r4, r4, #1
 8013fa0:	3508      	adds	r5, #8
 8013fa2:	e73f      	b.n	8013e24 <_dtoa_r+0x394>
 8013fa4:	2602      	movs	r6, #2
 8013fa6:	e742      	b.n	8013e2e <_dtoa_r+0x39e>
 8013fa8:	9c07      	ldr	r4, [sp, #28]
 8013faa:	9704      	str	r7, [sp, #16]
 8013fac:	e761      	b.n	8013e72 <_dtoa_r+0x3e2>
 8013fae:	4b27      	ldr	r3, [pc, #156]	@ (801404c <_dtoa_r+0x5bc>)
 8013fb0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013fb2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013fb6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013fba:	4454      	add	r4, sl
 8013fbc:	2900      	cmp	r1, #0
 8013fbe:	d053      	beq.n	8014068 <_dtoa_r+0x5d8>
 8013fc0:	4928      	ldr	r1, [pc, #160]	@ (8014064 <_dtoa_r+0x5d4>)
 8013fc2:	2000      	movs	r0, #0
 8013fc4:	f7ec fc62 	bl	800088c <__aeabi_ddiv>
 8013fc8:	4633      	mov	r3, r6
 8013fca:	462a      	mov	r2, r5
 8013fcc:	f7ec f97c 	bl	80002c8 <__aeabi_dsub>
 8013fd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013fd4:	4656      	mov	r6, sl
 8013fd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013fda:	f7ec fddd 	bl	8000b98 <__aeabi_d2iz>
 8013fde:	4605      	mov	r5, r0
 8013fe0:	f7ec fac0 	bl	8000564 <__aeabi_i2d>
 8013fe4:	4602      	mov	r2, r0
 8013fe6:	460b      	mov	r3, r1
 8013fe8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013fec:	f7ec f96c 	bl	80002c8 <__aeabi_dsub>
 8013ff0:	3530      	adds	r5, #48	@ 0x30
 8013ff2:	4602      	mov	r2, r0
 8013ff4:	460b      	mov	r3, r1
 8013ff6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013ffa:	f806 5b01 	strb.w	r5, [r6], #1
 8013ffe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8014002:	f7ec fd8b 	bl	8000b1c <__aeabi_dcmplt>
 8014006:	2800      	cmp	r0, #0
 8014008:	d171      	bne.n	80140ee <_dtoa_r+0x65e>
 801400a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801400e:	4911      	ldr	r1, [pc, #68]	@ (8014054 <_dtoa_r+0x5c4>)
 8014010:	2000      	movs	r0, #0
 8014012:	f7ec f959 	bl	80002c8 <__aeabi_dsub>
 8014016:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801401a:	f7ec fd7f 	bl	8000b1c <__aeabi_dcmplt>
 801401e:	2800      	cmp	r0, #0
 8014020:	f040 8095 	bne.w	801414e <_dtoa_r+0x6be>
 8014024:	42a6      	cmp	r6, r4
 8014026:	f43f af50 	beq.w	8013eca <_dtoa_r+0x43a>
 801402a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801402e:	4b0a      	ldr	r3, [pc, #40]	@ (8014058 <_dtoa_r+0x5c8>)
 8014030:	2200      	movs	r2, #0
 8014032:	f7ec fb01 	bl	8000638 <__aeabi_dmul>
 8014036:	4b08      	ldr	r3, [pc, #32]	@ (8014058 <_dtoa_r+0x5c8>)
 8014038:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801403c:	2200      	movs	r2, #0
 801403e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014042:	f7ec faf9 	bl	8000638 <__aeabi_dmul>
 8014046:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801404a:	e7c4      	b.n	8013fd6 <_dtoa_r+0x546>
 801404c:	080161c8 	.word	0x080161c8
 8014050:	080161a0 	.word	0x080161a0
 8014054:	3ff00000 	.word	0x3ff00000
 8014058:	40240000 	.word	0x40240000
 801405c:	401c0000 	.word	0x401c0000
 8014060:	40140000 	.word	0x40140000
 8014064:	3fe00000 	.word	0x3fe00000
 8014068:	4631      	mov	r1, r6
 801406a:	4628      	mov	r0, r5
 801406c:	f7ec fae4 	bl	8000638 <__aeabi_dmul>
 8014070:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8014074:	9415      	str	r4, [sp, #84]	@ 0x54
 8014076:	4656      	mov	r6, sl
 8014078:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801407c:	f7ec fd8c 	bl	8000b98 <__aeabi_d2iz>
 8014080:	4605      	mov	r5, r0
 8014082:	f7ec fa6f 	bl	8000564 <__aeabi_i2d>
 8014086:	4602      	mov	r2, r0
 8014088:	460b      	mov	r3, r1
 801408a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801408e:	f7ec f91b 	bl	80002c8 <__aeabi_dsub>
 8014092:	3530      	adds	r5, #48	@ 0x30
 8014094:	f806 5b01 	strb.w	r5, [r6], #1
 8014098:	4602      	mov	r2, r0
 801409a:	460b      	mov	r3, r1
 801409c:	42a6      	cmp	r6, r4
 801409e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80140a2:	f04f 0200 	mov.w	r2, #0
 80140a6:	d124      	bne.n	80140f2 <_dtoa_r+0x662>
 80140a8:	4bac      	ldr	r3, [pc, #688]	@ (801435c <_dtoa_r+0x8cc>)
 80140aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80140ae:	f7ec f90d 	bl	80002cc <__adddf3>
 80140b2:	4602      	mov	r2, r0
 80140b4:	460b      	mov	r3, r1
 80140b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80140ba:	f7ec fd4d 	bl	8000b58 <__aeabi_dcmpgt>
 80140be:	2800      	cmp	r0, #0
 80140c0:	d145      	bne.n	801414e <_dtoa_r+0x6be>
 80140c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80140c6:	49a5      	ldr	r1, [pc, #660]	@ (801435c <_dtoa_r+0x8cc>)
 80140c8:	2000      	movs	r0, #0
 80140ca:	f7ec f8fd 	bl	80002c8 <__aeabi_dsub>
 80140ce:	4602      	mov	r2, r0
 80140d0:	460b      	mov	r3, r1
 80140d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80140d6:	f7ec fd21 	bl	8000b1c <__aeabi_dcmplt>
 80140da:	2800      	cmp	r0, #0
 80140dc:	f43f aef5 	beq.w	8013eca <_dtoa_r+0x43a>
 80140e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80140e2:	1e73      	subs	r3, r6, #1
 80140e4:	9315      	str	r3, [sp, #84]	@ 0x54
 80140e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80140ea:	2b30      	cmp	r3, #48	@ 0x30
 80140ec:	d0f8      	beq.n	80140e0 <_dtoa_r+0x650>
 80140ee:	9f04      	ldr	r7, [sp, #16]
 80140f0:	e73e      	b.n	8013f70 <_dtoa_r+0x4e0>
 80140f2:	4b9b      	ldr	r3, [pc, #620]	@ (8014360 <_dtoa_r+0x8d0>)
 80140f4:	f7ec faa0 	bl	8000638 <__aeabi_dmul>
 80140f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80140fc:	e7bc      	b.n	8014078 <_dtoa_r+0x5e8>
 80140fe:	d10c      	bne.n	801411a <_dtoa_r+0x68a>
 8014100:	4b98      	ldr	r3, [pc, #608]	@ (8014364 <_dtoa_r+0x8d4>)
 8014102:	2200      	movs	r2, #0
 8014104:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014108:	f7ec fa96 	bl	8000638 <__aeabi_dmul>
 801410c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014110:	f7ec fd18 	bl	8000b44 <__aeabi_dcmpge>
 8014114:	2800      	cmp	r0, #0
 8014116:	f000 8157 	beq.w	80143c8 <_dtoa_r+0x938>
 801411a:	2400      	movs	r4, #0
 801411c:	4625      	mov	r5, r4
 801411e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014120:	43db      	mvns	r3, r3
 8014122:	9304      	str	r3, [sp, #16]
 8014124:	4656      	mov	r6, sl
 8014126:	2700      	movs	r7, #0
 8014128:	4621      	mov	r1, r4
 801412a:	4658      	mov	r0, fp
 801412c:	f000 fbb4 	bl	8014898 <_Bfree>
 8014130:	2d00      	cmp	r5, #0
 8014132:	d0dc      	beq.n	80140ee <_dtoa_r+0x65e>
 8014134:	b12f      	cbz	r7, 8014142 <_dtoa_r+0x6b2>
 8014136:	42af      	cmp	r7, r5
 8014138:	d003      	beq.n	8014142 <_dtoa_r+0x6b2>
 801413a:	4639      	mov	r1, r7
 801413c:	4658      	mov	r0, fp
 801413e:	f000 fbab 	bl	8014898 <_Bfree>
 8014142:	4629      	mov	r1, r5
 8014144:	4658      	mov	r0, fp
 8014146:	f000 fba7 	bl	8014898 <_Bfree>
 801414a:	e7d0      	b.n	80140ee <_dtoa_r+0x65e>
 801414c:	9704      	str	r7, [sp, #16]
 801414e:	4633      	mov	r3, r6
 8014150:	461e      	mov	r6, r3
 8014152:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014156:	2a39      	cmp	r2, #57	@ 0x39
 8014158:	d107      	bne.n	801416a <_dtoa_r+0x6da>
 801415a:	459a      	cmp	sl, r3
 801415c:	d1f8      	bne.n	8014150 <_dtoa_r+0x6c0>
 801415e:	9a04      	ldr	r2, [sp, #16]
 8014160:	3201      	adds	r2, #1
 8014162:	9204      	str	r2, [sp, #16]
 8014164:	2230      	movs	r2, #48	@ 0x30
 8014166:	f88a 2000 	strb.w	r2, [sl]
 801416a:	781a      	ldrb	r2, [r3, #0]
 801416c:	3201      	adds	r2, #1
 801416e:	701a      	strb	r2, [r3, #0]
 8014170:	e7bd      	b.n	80140ee <_dtoa_r+0x65e>
 8014172:	4b7b      	ldr	r3, [pc, #492]	@ (8014360 <_dtoa_r+0x8d0>)
 8014174:	2200      	movs	r2, #0
 8014176:	f7ec fa5f 	bl	8000638 <__aeabi_dmul>
 801417a:	2200      	movs	r2, #0
 801417c:	2300      	movs	r3, #0
 801417e:	4604      	mov	r4, r0
 8014180:	460d      	mov	r5, r1
 8014182:	f7ec fcc1 	bl	8000b08 <__aeabi_dcmpeq>
 8014186:	2800      	cmp	r0, #0
 8014188:	f43f aebb 	beq.w	8013f02 <_dtoa_r+0x472>
 801418c:	e6f0      	b.n	8013f70 <_dtoa_r+0x4e0>
 801418e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014190:	2a00      	cmp	r2, #0
 8014192:	f000 80db 	beq.w	801434c <_dtoa_r+0x8bc>
 8014196:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014198:	2a01      	cmp	r2, #1
 801419a:	f300 80bf 	bgt.w	801431c <_dtoa_r+0x88c>
 801419e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80141a0:	2a00      	cmp	r2, #0
 80141a2:	f000 80b7 	beq.w	8014314 <_dtoa_r+0x884>
 80141a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80141aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80141ac:	4646      	mov	r6, r8
 80141ae:	9a08      	ldr	r2, [sp, #32]
 80141b0:	2101      	movs	r1, #1
 80141b2:	441a      	add	r2, r3
 80141b4:	4658      	mov	r0, fp
 80141b6:	4498      	add	r8, r3
 80141b8:	9208      	str	r2, [sp, #32]
 80141ba:	f000 fc21 	bl	8014a00 <__i2b>
 80141be:	4605      	mov	r5, r0
 80141c0:	b15e      	cbz	r6, 80141da <_dtoa_r+0x74a>
 80141c2:	9b08      	ldr	r3, [sp, #32]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	dd08      	ble.n	80141da <_dtoa_r+0x74a>
 80141c8:	42b3      	cmp	r3, r6
 80141ca:	9a08      	ldr	r2, [sp, #32]
 80141cc:	bfa8      	it	ge
 80141ce:	4633      	movge	r3, r6
 80141d0:	eba8 0803 	sub.w	r8, r8, r3
 80141d4:	1af6      	subs	r6, r6, r3
 80141d6:	1ad3      	subs	r3, r2, r3
 80141d8:	9308      	str	r3, [sp, #32]
 80141da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80141dc:	b1f3      	cbz	r3, 801421c <_dtoa_r+0x78c>
 80141de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	f000 80b7 	beq.w	8014354 <_dtoa_r+0x8c4>
 80141e6:	b18c      	cbz	r4, 801420c <_dtoa_r+0x77c>
 80141e8:	4629      	mov	r1, r5
 80141ea:	4622      	mov	r2, r4
 80141ec:	4658      	mov	r0, fp
 80141ee:	f000 fcc7 	bl	8014b80 <__pow5mult>
 80141f2:	464a      	mov	r2, r9
 80141f4:	4601      	mov	r1, r0
 80141f6:	4605      	mov	r5, r0
 80141f8:	4658      	mov	r0, fp
 80141fa:	f000 fc17 	bl	8014a2c <__multiply>
 80141fe:	4649      	mov	r1, r9
 8014200:	9004      	str	r0, [sp, #16]
 8014202:	4658      	mov	r0, fp
 8014204:	f000 fb48 	bl	8014898 <_Bfree>
 8014208:	9b04      	ldr	r3, [sp, #16]
 801420a:	4699      	mov	r9, r3
 801420c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801420e:	1b1a      	subs	r2, r3, r4
 8014210:	d004      	beq.n	801421c <_dtoa_r+0x78c>
 8014212:	4649      	mov	r1, r9
 8014214:	4658      	mov	r0, fp
 8014216:	f000 fcb3 	bl	8014b80 <__pow5mult>
 801421a:	4681      	mov	r9, r0
 801421c:	2101      	movs	r1, #1
 801421e:	4658      	mov	r0, fp
 8014220:	f000 fbee 	bl	8014a00 <__i2b>
 8014224:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014226:	4604      	mov	r4, r0
 8014228:	2b00      	cmp	r3, #0
 801422a:	f000 81cf 	beq.w	80145cc <_dtoa_r+0xb3c>
 801422e:	461a      	mov	r2, r3
 8014230:	4601      	mov	r1, r0
 8014232:	4658      	mov	r0, fp
 8014234:	f000 fca4 	bl	8014b80 <__pow5mult>
 8014238:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801423a:	2b01      	cmp	r3, #1
 801423c:	4604      	mov	r4, r0
 801423e:	f300 8095 	bgt.w	801436c <_dtoa_r+0x8dc>
 8014242:	9b02      	ldr	r3, [sp, #8]
 8014244:	2b00      	cmp	r3, #0
 8014246:	f040 8087 	bne.w	8014358 <_dtoa_r+0x8c8>
 801424a:	9b03      	ldr	r3, [sp, #12]
 801424c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014250:	2b00      	cmp	r3, #0
 8014252:	f040 8089 	bne.w	8014368 <_dtoa_r+0x8d8>
 8014256:	9b03      	ldr	r3, [sp, #12]
 8014258:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801425c:	0d1b      	lsrs	r3, r3, #20
 801425e:	051b      	lsls	r3, r3, #20
 8014260:	b12b      	cbz	r3, 801426e <_dtoa_r+0x7de>
 8014262:	9b08      	ldr	r3, [sp, #32]
 8014264:	3301      	adds	r3, #1
 8014266:	9308      	str	r3, [sp, #32]
 8014268:	f108 0801 	add.w	r8, r8, #1
 801426c:	2301      	movs	r3, #1
 801426e:	930a      	str	r3, [sp, #40]	@ 0x28
 8014270:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014272:	2b00      	cmp	r3, #0
 8014274:	f000 81b0 	beq.w	80145d8 <_dtoa_r+0xb48>
 8014278:	6923      	ldr	r3, [r4, #16]
 801427a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801427e:	6918      	ldr	r0, [r3, #16]
 8014280:	f000 fb72 	bl	8014968 <__hi0bits>
 8014284:	f1c0 0020 	rsb	r0, r0, #32
 8014288:	9b08      	ldr	r3, [sp, #32]
 801428a:	4418      	add	r0, r3
 801428c:	f010 001f 	ands.w	r0, r0, #31
 8014290:	d077      	beq.n	8014382 <_dtoa_r+0x8f2>
 8014292:	f1c0 0320 	rsb	r3, r0, #32
 8014296:	2b04      	cmp	r3, #4
 8014298:	dd6b      	ble.n	8014372 <_dtoa_r+0x8e2>
 801429a:	9b08      	ldr	r3, [sp, #32]
 801429c:	f1c0 001c 	rsb	r0, r0, #28
 80142a0:	4403      	add	r3, r0
 80142a2:	4480      	add	r8, r0
 80142a4:	4406      	add	r6, r0
 80142a6:	9308      	str	r3, [sp, #32]
 80142a8:	f1b8 0f00 	cmp.w	r8, #0
 80142ac:	dd05      	ble.n	80142ba <_dtoa_r+0x82a>
 80142ae:	4649      	mov	r1, r9
 80142b0:	4642      	mov	r2, r8
 80142b2:	4658      	mov	r0, fp
 80142b4:	f000 fcbe 	bl	8014c34 <__lshift>
 80142b8:	4681      	mov	r9, r0
 80142ba:	9b08      	ldr	r3, [sp, #32]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	dd05      	ble.n	80142cc <_dtoa_r+0x83c>
 80142c0:	4621      	mov	r1, r4
 80142c2:	461a      	mov	r2, r3
 80142c4:	4658      	mov	r0, fp
 80142c6:	f000 fcb5 	bl	8014c34 <__lshift>
 80142ca:	4604      	mov	r4, r0
 80142cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d059      	beq.n	8014386 <_dtoa_r+0x8f6>
 80142d2:	4621      	mov	r1, r4
 80142d4:	4648      	mov	r0, r9
 80142d6:	f000 fd19 	bl	8014d0c <__mcmp>
 80142da:	2800      	cmp	r0, #0
 80142dc:	da53      	bge.n	8014386 <_dtoa_r+0x8f6>
 80142de:	1e7b      	subs	r3, r7, #1
 80142e0:	9304      	str	r3, [sp, #16]
 80142e2:	4649      	mov	r1, r9
 80142e4:	2300      	movs	r3, #0
 80142e6:	220a      	movs	r2, #10
 80142e8:	4658      	mov	r0, fp
 80142ea:	f000 faf7 	bl	80148dc <__multadd>
 80142ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80142f0:	4681      	mov	r9, r0
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	f000 8172 	beq.w	80145dc <_dtoa_r+0xb4c>
 80142f8:	2300      	movs	r3, #0
 80142fa:	4629      	mov	r1, r5
 80142fc:	220a      	movs	r2, #10
 80142fe:	4658      	mov	r0, fp
 8014300:	f000 faec 	bl	80148dc <__multadd>
 8014304:	9b00      	ldr	r3, [sp, #0]
 8014306:	2b00      	cmp	r3, #0
 8014308:	4605      	mov	r5, r0
 801430a:	dc67      	bgt.n	80143dc <_dtoa_r+0x94c>
 801430c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801430e:	2b02      	cmp	r3, #2
 8014310:	dc41      	bgt.n	8014396 <_dtoa_r+0x906>
 8014312:	e063      	b.n	80143dc <_dtoa_r+0x94c>
 8014314:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014316:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801431a:	e746      	b.n	80141aa <_dtoa_r+0x71a>
 801431c:	9b07      	ldr	r3, [sp, #28]
 801431e:	1e5c      	subs	r4, r3, #1
 8014320:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014322:	42a3      	cmp	r3, r4
 8014324:	bfbf      	itttt	lt
 8014326:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8014328:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801432a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801432c:	1ae3      	sublt	r3, r4, r3
 801432e:	bfb4      	ite	lt
 8014330:	18d2      	addlt	r2, r2, r3
 8014332:	1b1c      	subge	r4, r3, r4
 8014334:	9b07      	ldr	r3, [sp, #28]
 8014336:	bfbc      	itt	lt
 8014338:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801433a:	2400      	movlt	r4, #0
 801433c:	2b00      	cmp	r3, #0
 801433e:	bfb5      	itete	lt
 8014340:	eba8 0603 	sublt.w	r6, r8, r3
 8014344:	9b07      	ldrge	r3, [sp, #28]
 8014346:	2300      	movlt	r3, #0
 8014348:	4646      	movge	r6, r8
 801434a:	e730      	b.n	80141ae <_dtoa_r+0x71e>
 801434c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801434e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8014350:	4646      	mov	r6, r8
 8014352:	e735      	b.n	80141c0 <_dtoa_r+0x730>
 8014354:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014356:	e75c      	b.n	8014212 <_dtoa_r+0x782>
 8014358:	2300      	movs	r3, #0
 801435a:	e788      	b.n	801426e <_dtoa_r+0x7de>
 801435c:	3fe00000 	.word	0x3fe00000
 8014360:	40240000 	.word	0x40240000
 8014364:	40140000 	.word	0x40140000
 8014368:	9b02      	ldr	r3, [sp, #8]
 801436a:	e780      	b.n	801426e <_dtoa_r+0x7de>
 801436c:	2300      	movs	r3, #0
 801436e:	930a      	str	r3, [sp, #40]	@ 0x28
 8014370:	e782      	b.n	8014278 <_dtoa_r+0x7e8>
 8014372:	d099      	beq.n	80142a8 <_dtoa_r+0x818>
 8014374:	9a08      	ldr	r2, [sp, #32]
 8014376:	331c      	adds	r3, #28
 8014378:	441a      	add	r2, r3
 801437a:	4498      	add	r8, r3
 801437c:	441e      	add	r6, r3
 801437e:	9208      	str	r2, [sp, #32]
 8014380:	e792      	b.n	80142a8 <_dtoa_r+0x818>
 8014382:	4603      	mov	r3, r0
 8014384:	e7f6      	b.n	8014374 <_dtoa_r+0x8e4>
 8014386:	9b07      	ldr	r3, [sp, #28]
 8014388:	9704      	str	r7, [sp, #16]
 801438a:	2b00      	cmp	r3, #0
 801438c:	dc20      	bgt.n	80143d0 <_dtoa_r+0x940>
 801438e:	9300      	str	r3, [sp, #0]
 8014390:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014392:	2b02      	cmp	r3, #2
 8014394:	dd1e      	ble.n	80143d4 <_dtoa_r+0x944>
 8014396:	9b00      	ldr	r3, [sp, #0]
 8014398:	2b00      	cmp	r3, #0
 801439a:	f47f aec0 	bne.w	801411e <_dtoa_r+0x68e>
 801439e:	4621      	mov	r1, r4
 80143a0:	2205      	movs	r2, #5
 80143a2:	4658      	mov	r0, fp
 80143a4:	f000 fa9a 	bl	80148dc <__multadd>
 80143a8:	4601      	mov	r1, r0
 80143aa:	4604      	mov	r4, r0
 80143ac:	4648      	mov	r0, r9
 80143ae:	f000 fcad 	bl	8014d0c <__mcmp>
 80143b2:	2800      	cmp	r0, #0
 80143b4:	f77f aeb3 	ble.w	801411e <_dtoa_r+0x68e>
 80143b8:	4656      	mov	r6, sl
 80143ba:	2331      	movs	r3, #49	@ 0x31
 80143bc:	f806 3b01 	strb.w	r3, [r6], #1
 80143c0:	9b04      	ldr	r3, [sp, #16]
 80143c2:	3301      	adds	r3, #1
 80143c4:	9304      	str	r3, [sp, #16]
 80143c6:	e6ae      	b.n	8014126 <_dtoa_r+0x696>
 80143c8:	9c07      	ldr	r4, [sp, #28]
 80143ca:	9704      	str	r7, [sp, #16]
 80143cc:	4625      	mov	r5, r4
 80143ce:	e7f3      	b.n	80143b8 <_dtoa_r+0x928>
 80143d0:	9b07      	ldr	r3, [sp, #28]
 80143d2:	9300      	str	r3, [sp, #0]
 80143d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	f000 8104 	beq.w	80145e4 <_dtoa_r+0xb54>
 80143dc:	2e00      	cmp	r6, #0
 80143de:	dd05      	ble.n	80143ec <_dtoa_r+0x95c>
 80143e0:	4629      	mov	r1, r5
 80143e2:	4632      	mov	r2, r6
 80143e4:	4658      	mov	r0, fp
 80143e6:	f000 fc25 	bl	8014c34 <__lshift>
 80143ea:	4605      	mov	r5, r0
 80143ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d05a      	beq.n	80144a8 <_dtoa_r+0xa18>
 80143f2:	6869      	ldr	r1, [r5, #4]
 80143f4:	4658      	mov	r0, fp
 80143f6:	f000 fa0f 	bl	8014818 <_Balloc>
 80143fa:	4606      	mov	r6, r0
 80143fc:	b928      	cbnz	r0, 801440a <_dtoa_r+0x97a>
 80143fe:	4b84      	ldr	r3, [pc, #528]	@ (8014610 <_dtoa_r+0xb80>)
 8014400:	4602      	mov	r2, r0
 8014402:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8014406:	f7ff bb5a 	b.w	8013abe <_dtoa_r+0x2e>
 801440a:	692a      	ldr	r2, [r5, #16]
 801440c:	3202      	adds	r2, #2
 801440e:	0092      	lsls	r2, r2, #2
 8014410:	f105 010c 	add.w	r1, r5, #12
 8014414:	300c      	adds	r0, #12
 8014416:	f7ff faa4 	bl	8013962 <memcpy>
 801441a:	2201      	movs	r2, #1
 801441c:	4631      	mov	r1, r6
 801441e:	4658      	mov	r0, fp
 8014420:	f000 fc08 	bl	8014c34 <__lshift>
 8014424:	f10a 0301 	add.w	r3, sl, #1
 8014428:	9307      	str	r3, [sp, #28]
 801442a:	9b00      	ldr	r3, [sp, #0]
 801442c:	4453      	add	r3, sl
 801442e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014430:	9b02      	ldr	r3, [sp, #8]
 8014432:	f003 0301 	and.w	r3, r3, #1
 8014436:	462f      	mov	r7, r5
 8014438:	930a      	str	r3, [sp, #40]	@ 0x28
 801443a:	4605      	mov	r5, r0
 801443c:	9b07      	ldr	r3, [sp, #28]
 801443e:	4621      	mov	r1, r4
 8014440:	3b01      	subs	r3, #1
 8014442:	4648      	mov	r0, r9
 8014444:	9300      	str	r3, [sp, #0]
 8014446:	f7ff fa9a 	bl	801397e <quorem>
 801444a:	4639      	mov	r1, r7
 801444c:	9002      	str	r0, [sp, #8]
 801444e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8014452:	4648      	mov	r0, r9
 8014454:	f000 fc5a 	bl	8014d0c <__mcmp>
 8014458:	462a      	mov	r2, r5
 801445a:	9008      	str	r0, [sp, #32]
 801445c:	4621      	mov	r1, r4
 801445e:	4658      	mov	r0, fp
 8014460:	f000 fc70 	bl	8014d44 <__mdiff>
 8014464:	68c2      	ldr	r2, [r0, #12]
 8014466:	4606      	mov	r6, r0
 8014468:	bb02      	cbnz	r2, 80144ac <_dtoa_r+0xa1c>
 801446a:	4601      	mov	r1, r0
 801446c:	4648      	mov	r0, r9
 801446e:	f000 fc4d 	bl	8014d0c <__mcmp>
 8014472:	4602      	mov	r2, r0
 8014474:	4631      	mov	r1, r6
 8014476:	4658      	mov	r0, fp
 8014478:	920e      	str	r2, [sp, #56]	@ 0x38
 801447a:	f000 fa0d 	bl	8014898 <_Bfree>
 801447e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014480:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014482:	9e07      	ldr	r6, [sp, #28]
 8014484:	ea43 0102 	orr.w	r1, r3, r2
 8014488:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801448a:	4319      	orrs	r1, r3
 801448c:	d110      	bne.n	80144b0 <_dtoa_r+0xa20>
 801448e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8014492:	d029      	beq.n	80144e8 <_dtoa_r+0xa58>
 8014494:	9b08      	ldr	r3, [sp, #32]
 8014496:	2b00      	cmp	r3, #0
 8014498:	dd02      	ble.n	80144a0 <_dtoa_r+0xa10>
 801449a:	9b02      	ldr	r3, [sp, #8]
 801449c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80144a0:	9b00      	ldr	r3, [sp, #0]
 80144a2:	f883 8000 	strb.w	r8, [r3]
 80144a6:	e63f      	b.n	8014128 <_dtoa_r+0x698>
 80144a8:	4628      	mov	r0, r5
 80144aa:	e7bb      	b.n	8014424 <_dtoa_r+0x994>
 80144ac:	2201      	movs	r2, #1
 80144ae:	e7e1      	b.n	8014474 <_dtoa_r+0x9e4>
 80144b0:	9b08      	ldr	r3, [sp, #32]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	db04      	blt.n	80144c0 <_dtoa_r+0xa30>
 80144b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80144b8:	430b      	orrs	r3, r1
 80144ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80144bc:	430b      	orrs	r3, r1
 80144be:	d120      	bne.n	8014502 <_dtoa_r+0xa72>
 80144c0:	2a00      	cmp	r2, #0
 80144c2:	dded      	ble.n	80144a0 <_dtoa_r+0xa10>
 80144c4:	4649      	mov	r1, r9
 80144c6:	2201      	movs	r2, #1
 80144c8:	4658      	mov	r0, fp
 80144ca:	f000 fbb3 	bl	8014c34 <__lshift>
 80144ce:	4621      	mov	r1, r4
 80144d0:	4681      	mov	r9, r0
 80144d2:	f000 fc1b 	bl	8014d0c <__mcmp>
 80144d6:	2800      	cmp	r0, #0
 80144d8:	dc03      	bgt.n	80144e2 <_dtoa_r+0xa52>
 80144da:	d1e1      	bne.n	80144a0 <_dtoa_r+0xa10>
 80144dc:	f018 0f01 	tst.w	r8, #1
 80144e0:	d0de      	beq.n	80144a0 <_dtoa_r+0xa10>
 80144e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80144e6:	d1d8      	bne.n	801449a <_dtoa_r+0xa0a>
 80144e8:	9a00      	ldr	r2, [sp, #0]
 80144ea:	2339      	movs	r3, #57	@ 0x39
 80144ec:	7013      	strb	r3, [r2, #0]
 80144ee:	4633      	mov	r3, r6
 80144f0:	461e      	mov	r6, r3
 80144f2:	3b01      	subs	r3, #1
 80144f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80144f8:	2a39      	cmp	r2, #57	@ 0x39
 80144fa:	d052      	beq.n	80145a2 <_dtoa_r+0xb12>
 80144fc:	3201      	adds	r2, #1
 80144fe:	701a      	strb	r2, [r3, #0]
 8014500:	e612      	b.n	8014128 <_dtoa_r+0x698>
 8014502:	2a00      	cmp	r2, #0
 8014504:	dd07      	ble.n	8014516 <_dtoa_r+0xa86>
 8014506:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801450a:	d0ed      	beq.n	80144e8 <_dtoa_r+0xa58>
 801450c:	9a00      	ldr	r2, [sp, #0]
 801450e:	f108 0301 	add.w	r3, r8, #1
 8014512:	7013      	strb	r3, [r2, #0]
 8014514:	e608      	b.n	8014128 <_dtoa_r+0x698>
 8014516:	9b07      	ldr	r3, [sp, #28]
 8014518:	9a07      	ldr	r2, [sp, #28]
 801451a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801451e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014520:	4293      	cmp	r3, r2
 8014522:	d028      	beq.n	8014576 <_dtoa_r+0xae6>
 8014524:	4649      	mov	r1, r9
 8014526:	2300      	movs	r3, #0
 8014528:	220a      	movs	r2, #10
 801452a:	4658      	mov	r0, fp
 801452c:	f000 f9d6 	bl	80148dc <__multadd>
 8014530:	42af      	cmp	r7, r5
 8014532:	4681      	mov	r9, r0
 8014534:	f04f 0300 	mov.w	r3, #0
 8014538:	f04f 020a 	mov.w	r2, #10
 801453c:	4639      	mov	r1, r7
 801453e:	4658      	mov	r0, fp
 8014540:	d107      	bne.n	8014552 <_dtoa_r+0xac2>
 8014542:	f000 f9cb 	bl	80148dc <__multadd>
 8014546:	4607      	mov	r7, r0
 8014548:	4605      	mov	r5, r0
 801454a:	9b07      	ldr	r3, [sp, #28]
 801454c:	3301      	adds	r3, #1
 801454e:	9307      	str	r3, [sp, #28]
 8014550:	e774      	b.n	801443c <_dtoa_r+0x9ac>
 8014552:	f000 f9c3 	bl	80148dc <__multadd>
 8014556:	4629      	mov	r1, r5
 8014558:	4607      	mov	r7, r0
 801455a:	2300      	movs	r3, #0
 801455c:	220a      	movs	r2, #10
 801455e:	4658      	mov	r0, fp
 8014560:	f000 f9bc 	bl	80148dc <__multadd>
 8014564:	4605      	mov	r5, r0
 8014566:	e7f0      	b.n	801454a <_dtoa_r+0xaba>
 8014568:	9b00      	ldr	r3, [sp, #0]
 801456a:	2b00      	cmp	r3, #0
 801456c:	bfcc      	ite	gt
 801456e:	461e      	movgt	r6, r3
 8014570:	2601      	movle	r6, #1
 8014572:	4456      	add	r6, sl
 8014574:	2700      	movs	r7, #0
 8014576:	4649      	mov	r1, r9
 8014578:	2201      	movs	r2, #1
 801457a:	4658      	mov	r0, fp
 801457c:	f000 fb5a 	bl	8014c34 <__lshift>
 8014580:	4621      	mov	r1, r4
 8014582:	4681      	mov	r9, r0
 8014584:	f000 fbc2 	bl	8014d0c <__mcmp>
 8014588:	2800      	cmp	r0, #0
 801458a:	dcb0      	bgt.n	80144ee <_dtoa_r+0xa5e>
 801458c:	d102      	bne.n	8014594 <_dtoa_r+0xb04>
 801458e:	f018 0f01 	tst.w	r8, #1
 8014592:	d1ac      	bne.n	80144ee <_dtoa_r+0xa5e>
 8014594:	4633      	mov	r3, r6
 8014596:	461e      	mov	r6, r3
 8014598:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801459c:	2a30      	cmp	r2, #48	@ 0x30
 801459e:	d0fa      	beq.n	8014596 <_dtoa_r+0xb06>
 80145a0:	e5c2      	b.n	8014128 <_dtoa_r+0x698>
 80145a2:	459a      	cmp	sl, r3
 80145a4:	d1a4      	bne.n	80144f0 <_dtoa_r+0xa60>
 80145a6:	9b04      	ldr	r3, [sp, #16]
 80145a8:	3301      	adds	r3, #1
 80145aa:	9304      	str	r3, [sp, #16]
 80145ac:	2331      	movs	r3, #49	@ 0x31
 80145ae:	f88a 3000 	strb.w	r3, [sl]
 80145b2:	e5b9      	b.n	8014128 <_dtoa_r+0x698>
 80145b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80145b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8014614 <_dtoa_r+0xb84>
 80145ba:	b11b      	cbz	r3, 80145c4 <_dtoa_r+0xb34>
 80145bc:	f10a 0308 	add.w	r3, sl, #8
 80145c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80145c2:	6013      	str	r3, [r2, #0]
 80145c4:	4650      	mov	r0, sl
 80145c6:	b019      	add	sp, #100	@ 0x64
 80145c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80145ce:	2b01      	cmp	r3, #1
 80145d0:	f77f ae37 	ble.w	8014242 <_dtoa_r+0x7b2>
 80145d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80145d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80145d8:	2001      	movs	r0, #1
 80145da:	e655      	b.n	8014288 <_dtoa_r+0x7f8>
 80145dc:	9b00      	ldr	r3, [sp, #0]
 80145de:	2b00      	cmp	r3, #0
 80145e0:	f77f aed6 	ble.w	8014390 <_dtoa_r+0x900>
 80145e4:	4656      	mov	r6, sl
 80145e6:	4621      	mov	r1, r4
 80145e8:	4648      	mov	r0, r9
 80145ea:	f7ff f9c8 	bl	801397e <quorem>
 80145ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80145f2:	f806 8b01 	strb.w	r8, [r6], #1
 80145f6:	9b00      	ldr	r3, [sp, #0]
 80145f8:	eba6 020a 	sub.w	r2, r6, sl
 80145fc:	4293      	cmp	r3, r2
 80145fe:	ddb3      	ble.n	8014568 <_dtoa_r+0xad8>
 8014600:	4649      	mov	r1, r9
 8014602:	2300      	movs	r3, #0
 8014604:	220a      	movs	r2, #10
 8014606:	4658      	mov	r0, fp
 8014608:	f000 f968 	bl	80148dc <__multadd>
 801460c:	4681      	mov	r9, r0
 801460e:	e7ea      	b.n	80145e6 <_dtoa_r+0xb56>
 8014610:	08016124 	.word	0x08016124
 8014614:	080160a8 	.word	0x080160a8

08014618 <_free_r>:
 8014618:	b538      	push	{r3, r4, r5, lr}
 801461a:	4605      	mov	r5, r0
 801461c:	2900      	cmp	r1, #0
 801461e:	d041      	beq.n	80146a4 <_free_r+0x8c>
 8014620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014624:	1f0c      	subs	r4, r1, #4
 8014626:	2b00      	cmp	r3, #0
 8014628:	bfb8      	it	lt
 801462a:	18e4      	addlt	r4, r4, r3
 801462c:	f000 f8e8 	bl	8014800 <__malloc_lock>
 8014630:	4a1d      	ldr	r2, [pc, #116]	@ (80146a8 <_free_r+0x90>)
 8014632:	6813      	ldr	r3, [r2, #0]
 8014634:	b933      	cbnz	r3, 8014644 <_free_r+0x2c>
 8014636:	6063      	str	r3, [r4, #4]
 8014638:	6014      	str	r4, [r2, #0]
 801463a:	4628      	mov	r0, r5
 801463c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014640:	f000 b8e4 	b.w	801480c <__malloc_unlock>
 8014644:	42a3      	cmp	r3, r4
 8014646:	d908      	bls.n	801465a <_free_r+0x42>
 8014648:	6820      	ldr	r0, [r4, #0]
 801464a:	1821      	adds	r1, r4, r0
 801464c:	428b      	cmp	r3, r1
 801464e:	bf01      	itttt	eq
 8014650:	6819      	ldreq	r1, [r3, #0]
 8014652:	685b      	ldreq	r3, [r3, #4]
 8014654:	1809      	addeq	r1, r1, r0
 8014656:	6021      	streq	r1, [r4, #0]
 8014658:	e7ed      	b.n	8014636 <_free_r+0x1e>
 801465a:	461a      	mov	r2, r3
 801465c:	685b      	ldr	r3, [r3, #4]
 801465e:	b10b      	cbz	r3, 8014664 <_free_r+0x4c>
 8014660:	42a3      	cmp	r3, r4
 8014662:	d9fa      	bls.n	801465a <_free_r+0x42>
 8014664:	6811      	ldr	r1, [r2, #0]
 8014666:	1850      	adds	r0, r2, r1
 8014668:	42a0      	cmp	r0, r4
 801466a:	d10b      	bne.n	8014684 <_free_r+0x6c>
 801466c:	6820      	ldr	r0, [r4, #0]
 801466e:	4401      	add	r1, r0
 8014670:	1850      	adds	r0, r2, r1
 8014672:	4283      	cmp	r3, r0
 8014674:	6011      	str	r1, [r2, #0]
 8014676:	d1e0      	bne.n	801463a <_free_r+0x22>
 8014678:	6818      	ldr	r0, [r3, #0]
 801467a:	685b      	ldr	r3, [r3, #4]
 801467c:	6053      	str	r3, [r2, #4]
 801467e:	4408      	add	r0, r1
 8014680:	6010      	str	r0, [r2, #0]
 8014682:	e7da      	b.n	801463a <_free_r+0x22>
 8014684:	d902      	bls.n	801468c <_free_r+0x74>
 8014686:	230c      	movs	r3, #12
 8014688:	602b      	str	r3, [r5, #0]
 801468a:	e7d6      	b.n	801463a <_free_r+0x22>
 801468c:	6820      	ldr	r0, [r4, #0]
 801468e:	1821      	adds	r1, r4, r0
 8014690:	428b      	cmp	r3, r1
 8014692:	bf04      	itt	eq
 8014694:	6819      	ldreq	r1, [r3, #0]
 8014696:	685b      	ldreq	r3, [r3, #4]
 8014698:	6063      	str	r3, [r4, #4]
 801469a:	bf04      	itt	eq
 801469c:	1809      	addeq	r1, r1, r0
 801469e:	6021      	streq	r1, [r4, #0]
 80146a0:	6054      	str	r4, [r2, #4]
 80146a2:	e7ca      	b.n	801463a <_free_r+0x22>
 80146a4:	bd38      	pop	{r3, r4, r5, pc}
 80146a6:	bf00      	nop
 80146a8:	20006ab0 	.word	0x20006ab0

080146ac <malloc>:
 80146ac:	4b02      	ldr	r3, [pc, #8]	@ (80146b8 <malloc+0xc>)
 80146ae:	4601      	mov	r1, r0
 80146b0:	6818      	ldr	r0, [r3, #0]
 80146b2:	f000 b825 	b.w	8014700 <_malloc_r>
 80146b6:	bf00      	nop
 80146b8:	20000034 	.word	0x20000034

080146bc <sbrk_aligned>:
 80146bc:	b570      	push	{r4, r5, r6, lr}
 80146be:	4e0f      	ldr	r6, [pc, #60]	@ (80146fc <sbrk_aligned+0x40>)
 80146c0:	460c      	mov	r4, r1
 80146c2:	6831      	ldr	r1, [r6, #0]
 80146c4:	4605      	mov	r5, r0
 80146c6:	b911      	cbnz	r1, 80146ce <sbrk_aligned+0x12>
 80146c8:	f001 f81c 	bl	8015704 <_sbrk_r>
 80146cc:	6030      	str	r0, [r6, #0]
 80146ce:	4621      	mov	r1, r4
 80146d0:	4628      	mov	r0, r5
 80146d2:	f001 f817 	bl	8015704 <_sbrk_r>
 80146d6:	1c43      	adds	r3, r0, #1
 80146d8:	d103      	bne.n	80146e2 <sbrk_aligned+0x26>
 80146da:	f04f 34ff 	mov.w	r4, #4294967295
 80146de:	4620      	mov	r0, r4
 80146e0:	bd70      	pop	{r4, r5, r6, pc}
 80146e2:	1cc4      	adds	r4, r0, #3
 80146e4:	f024 0403 	bic.w	r4, r4, #3
 80146e8:	42a0      	cmp	r0, r4
 80146ea:	d0f8      	beq.n	80146de <sbrk_aligned+0x22>
 80146ec:	1a21      	subs	r1, r4, r0
 80146ee:	4628      	mov	r0, r5
 80146f0:	f001 f808 	bl	8015704 <_sbrk_r>
 80146f4:	3001      	adds	r0, #1
 80146f6:	d1f2      	bne.n	80146de <sbrk_aligned+0x22>
 80146f8:	e7ef      	b.n	80146da <sbrk_aligned+0x1e>
 80146fa:	bf00      	nop
 80146fc:	20006aac 	.word	0x20006aac

08014700 <_malloc_r>:
 8014700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014704:	1ccd      	adds	r5, r1, #3
 8014706:	f025 0503 	bic.w	r5, r5, #3
 801470a:	3508      	adds	r5, #8
 801470c:	2d0c      	cmp	r5, #12
 801470e:	bf38      	it	cc
 8014710:	250c      	movcc	r5, #12
 8014712:	2d00      	cmp	r5, #0
 8014714:	4606      	mov	r6, r0
 8014716:	db01      	blt.n	801471c <_malloc_r+0x1c>
 8014718:	42a9      	cmp	r1, r5
 801471a:	d904      	bls.n	8014726 <_malloc_r+0x26>
 801471c:	230c      	movs	r3, #12
 801471e:	6033      	str	r3, [r6, #0]
 8014720:	2000      	movs	r0, #0
 8014722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014726:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80147fc <_malloc_r+0xfc>
 801472a:	f000 f869 	bl	8014800 <__malloc_lock>
 801472e:	f8d8 3000 	ldr.w	r3, [r8]
 8014732:	461c      	mov	r4, r3
 8014734:	bb44      	cbnz	r4, 8014788 <_malloc_r+0x88>
 8014736:	4629      	mov	r1, r5
 8014738:	4630      	mov	r0, r6
 801473a:	f7ff ffbf 	bl	80146bc <sbrk_aligned>
 801473e:	1c43      	adds	r3, r0, #1
 8014740:	4604      	mov	r4, r0
 8014742:	d158      	bne.n	80147f6 <_malloc_r+0xf6>
 8014744:	f8d8 4000 	ldr.w	r4, [r8]
 8014748:	4627      	mov	r7, r4
 801474a:	2f00      	cmp	r7, #0
 801474c:	d143      	bne.n	80147d6 <_malloc_r+0xd6>
 801474e:	2c00      	cmp	r4, #0
 8014750:	d04b      	beq.n	80147ea <_malloc_r+0xea>
 8014752:	6823      	ldr	r3, [r4, #0]
 8014754:	4639      	mov	r1, r7
 8014756:	4630      	mov	r0, r6
 8014758:	eb04 0903 	add.w	r9, r4, r3
 801475c:	f000 ffd2 	bl	8015704 <_sbrk_r>
 8014760:	4581      	cmp	r9, r0
 8014762:	d142      	bne.n	80147ea <_malloc_r+0xea>
 8014764:	6821      	ldr	r1, [r4, #0]
 8014766:	1a6d      	subs	r5, r5, r1
 8014768:	4629      	mov	r1, r5
 801476a:	4630      	mov	r0, r6
 801476c:	f7ff ffa6 	bl	80146bc <sbrk_aligned>
 8014770:	3001      	adds	r0, #1
 8014772:	d03a      	beq.n	80147ea <_malloc_r+0xea>
 8014774:	6823      	ldr	r3, [r4, #0]
 8014776:	442b      	add	r3, r5
 8014778:	6023      	str	r3, [r4, #0]
 801477a:	f8d8 3000 	ldr.w	r3, [r8]
 801477e:	685a      	ldr	r2, [r3, #4]
 8014780:	bb62      	cbnz	r2, 80147dc <_malloc_r+0xdc>
 8014782:	f8c8 7000 	str.w	r7, [r8]
 8014786:	e00f      	b.n	80147a8 <_malloc_r+0xa8>
 8014788:	6822      	ldr	r2, [r4, #0]
 801478a:	1b52      	subs	r2, r2, r5
 801478c:	d420      	bmi.n	80147d0 <_malloc_r+0xd0>
 801478e:	2a0b      	cmp	r2, #11
 8014790:	d917      	bls.n	80147c2 <_malloc_r+0xc2>
 8014792:	1961      	adds	r1, r4, r5
 8014794:	42a3      	cmp	r3, r4
 8014796:	6025      	str	r5, [r4, #0]
 8014798:	bf18      	it	ne
 801479a:	6059      	strne	r1, [r3, #4]
 801479c:	6863      	ldr	r3, [r4, #4]
 801479e:	bf08      	it	eq
 80147a0:	f8c8 1000 	streq.w	r1, [r8]
 80147a4:	5162      	str	r2, [r4, r5]
 80147a6:	604b      	str	r3, [r1, #4]
 80147a8:	4630      	mov	r0, r6
 80147aa:	f000 f82f 	bl	801480c <__malloc_unlock>
 80147ae:	f104 000b 	add.w	r0, r4, #11
 80147b2:	1d23      	adds	r3, r4, #4
 80147b4:	f020 0007 	bic.w	r0, r0, #7
 80147b8:	1ac2      	subs	r2, r0, r3
 80147ba:	bf1c      	itt	ne
 80147bc:	1a1b      	subne	r3, r3, r0
 80147be:	50a3      	strne	r3, [r4, r2]
 80147c0:	e7af      	b.n	8014722 <_malloc_r+0x22>
 80147c2:	6862      	ldr	r2, [r4, #4]
 80147c4:	42a3      	cmp	r3, r4
 80147c6:	bf0c      	ite	eq
 80147c8:	f8c8 2000 	streq.w	r2, [r8]
 80147cc:	605a      	strne	r2, [r3, #4]
 80147ce:	e7eb      	b.n	80147a8 <_malloc_r+0xa8>
 80147d0:	4623      	mov	r3, r4
 80147d2:	6864      	ldr	r4, [r4, #4]
 80147d4:	e7ae      	b.n	8014734 <_malloc_r+0x34>
 80147d6:	463c      	mov	r4, r7
 80147d8:	687f      	ldr	r7, [r7, #4]
 80147da:	e7b6      	b.n	801474a <_malloc_r+0x4a>
 80147dc:	461a      	mov	r2, r3
 80147de:	685b      	ldr	r3, [r3, #4]
 80147e0:	42a3      	cmp	r3, r4
 80147e2:	d1fb      	bne.n	80147dc <_malloc_r+0xdc>
 80147e4:	2300      	movs	r3, #0
 80147e6:	6053      	str	r3, [r2, #4]
 80147e8:	e7de      	b.n	80147a8 <_malloc_r+0xa8>
 80147ea:	230c      	movs	r3, #12
 80147ec:	6033      	str	r3, [r6, #0]
 80147ee:	4630      	mov	r0, r6
 80147f0:	f000 f80c 	bl	801480c <__malloc_unlock>
 80147f4:	e794      	b.n	8014720 <_malloc_r+0x20>
 80147f6:	6005      	str	r5, [r0, #0]
 80147f8:	e7d6      	b.n	80147a8 <_malloc_r+0xa8>
 80147fa:	bf00      	nop
 80147fc:	20006ab0 	.word	0x20006ab0

08014800 <__malloc_lock>:
 8014800:	4801      	ldr	r0, [pc, #4]	@ (8014808 <__malloc_lock+0x8>)
 8014802:	f7ff b8ac 	b.w	801395e <__retarget_lock_acquire_recursive>
 8014806:	bf00      	nop
 8014808:	20006aa8 	.word	0x20006aa8

0801480c <__malloc_unlock>:
 801480c:	4801      	ldr	r0, [pc, #4]	@ (8014814 <__malloc_unlock+0x8>)
 801480e:	f7ff b8a7 	b.w	8013960 <__retarget_lock_release_recursive>
 8014812:	bf00      	nop
 8014814:	20006aa8 	.word	0x20006aa8

08014818 <_Balloc>:
 8014818:	b570      	push	{r4, r5, r6, lr}
 801481a:	69c6      	ldr	r6, [r0, #28]
 801481c:	4604      	mov	r4, r0
 801481e:	460d      	mov	r5, r1
 8014820:	b976      	cbnz	r6, 8014840 <_Balloc+0x28>
 8014822:	2010      	movs	r0, #16
 8014824:	f7ff ff42 	bl	80146ac <malloc>
 8014828:	4602      	mov	r2, r0
 801482a:	61e0      	str	r0, [r4, #28]
 801482c:	b920      	cbnz	r0, 8014838 <_Balloc+0x20>
 801482e:	4b18      	ldr	r3, [pc, #96]	@ (8014890 <_Balloc+0x78>)
 8014830:	4818      	ldr	r0, [pc, #96]	@ (8014894 <_Balloc+0x7c>)
 8014832:	216b      	movs	r1, #107	@ 0x6b
 8014834:	f000 ff76 	bl	8015724 <__assert_func>
 8014838:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801483c:	6006      	str	r6, [r0, #0]
 801483e:	60c6      	str	r6, [r0, #12]
 8014840:	69e6      	ldr	r6, [r4, #28]
 8014842:	68f3      	ldr	r3, [r6, #12]
 8014844:	b183      	cbz	r3, 8014868 <_Balloc+0x50>
 8014846:	69e3      	ldr	r3, [r4, #28]
 8014848:	68db      	ldr	r3, [r3, #12]
 801484a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801484e:	b9b8      	cbnz	r0, 8014880 <_Balloc+0x68>
 8014850:	2101      	movs	r1, #1
 8014852:	fa01 f605 	lsl.w	r6, r1, r5
 8014856:	1d72      	adds	r2, r6, #5
 8014858:	0092      	lsls	r2, r2, #2
 801485a:	4620      	mov	r0, r4
 801485c:	f000 ff80 	bl	8015760 <_calloc_r>
 8014860:	b160      	cbz	r0, 801487c <_Balloc+0x64>
 8014862:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014866:	e00e      	b.n	8014886 <_Balloc+0x6e>
 8014868:	2221      	movs	r2, #33	@ 0x21
 801486a:	2104      	movs	r1, #4
 801486c:	4620      	mov	r0, r4
 801486e:	f000 ff77 	bl	8015760 <_calloc_r>
 8014872:	69e3      	ldr	r3, [r4, #28]
 8014874:	60f0      	str	r0, [r6, #12]
 8014876:	68db      	ldr	r3, [r3, #12]
 8014878:	2b00      	cmp	r3, #0
 801487a:	d1e4      	bne.n	8014846 <_Balloc+0x2e>
 801487c:	2000      	movs	r0, #0
 801487e:	bd70      	pop	{r4, r5, r6, pc}
 8014880:	6802      	ldr	r2, [r0, #0]
 8014882:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014886:	2300      	movs	r3, #0
 8014888:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801488c:	e7f7      	b.n	801487e <_Balloc+0x66>
 801488e:	bf00      	nop
 8014890:	080160b5 	.word	0x080160b5
 8014894:	08016135 	.word	0x08016135

08014898 <_Bfree>:
 8014898:	b570      	push	{r4, r5, r6, lr}
 801489a:	69c6      	ldr	r6, [r0, #28]
 801489c:	4605      	mov	r5, r0
 801489e:	460c      	mov	r4, r1
 80148a0:	b976      	cbnz	r6, 80148c0 <_Bfree+0x28>
 80148a2:	2010      	movs	r0, #16
 80148a4:	f7ff ff02 	bl	80146ac <malloc>
 80148a8:	4602      	mov	r2, r0
 80148aa:	61e8      	str	r0, [r5, #28]
 80148ac:	b920      	cbnz	r0, 80148b8 <_Bfree+0x20>
 80148ae:	4b09      	ldr	r3, [pc, #36]	@ (80148d4 <_Bfree+0x3c>)
 80148b0:	4809      	ldr	r0, [pc, #36]	@ (80148d8 <_Bfree+0x40>)
 80148b2:	218f      	movs	r1, #143	@ 0x8f
 80148b4:	f000 ff36 	bl	8015724 <__assert_func>
 80148b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80148bc:	6006      	str	r6, [r0, #0]
 80148be:	60c6      	str	r6, [r0, #12]
 80148c0:	b13c      	cbz	r4, 80148d2 <_Bfree+0x3a>
 80148c2:	69eb      	ldr	r3, [r5, #28]
 80148c4:	6862      	ldr	r2, [r4, #4]
 80148c6:	68db      	ldr	r3, [r3, #12]
 80148c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80148cc:	6021      	str	r1, [r4, #0]
 80148ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80148d2:	bd70      	pop	{r4, r5, r6, pc}
 80148d4:	080160b5 	.word	0x080160b5
 80148d8:	08016135 	.word	0x08016135

080148dc <__multadd>:
 80148dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148e0:	690d      	ldr	r5, [r1, #16]
 80148e2:	4607      	mov	r7, r0
 80148e4:	460c      	mov	r4, r1
 80148e6:	461e      	mov	r6, r3
 80148e8:	f101 0c14 	add.w	ip, r1, #20
 80148ec:	2000      	movs	r0, #0
 80148ee:	f8dc 3000 	ldr.w	r3, [ip]
 80148f2:	b299      	uxth	r1, r3
 80148f4:	fb02 6101 	mla	r1, r2, r1, r6
 80148f8:	0c1e      	lsrs	r6, r3, #16
 80148fa:	0c0b      	lsrs	r3, r1, #16
 80148fc:	fb02 3306 	mla	r3, r2, r6, r3
 8014900:	b289      	uxth	r1, r1
 8014902:	3001      	adds	r0, #1
 8014904:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014908:	4285      	cmp	r5, r0
 801490a:	f84c 1b04 	str.w	r1, [ip], #4
 801490e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014912:	dcec      	bgt.n	80148ee <__multadd+0x12>
 8014914:	b30e      	cbz	r6, 801495a <__multadd+0x7e>
 8014916:	68a3      	ldr	r3, [r4, #8]
 8014918:	42ab      	cmp	r3, r5
 801491a:	dc19      	bgt.n	8014950 <__multadd+0x74>
 801491c:	6861      	ldr	r1, [r4, #4]
 801491e:	4638      	mov	r0, r7
 8014920:	3101      	adds	r1, #1
 8014922:	f7ff ff79 	bl	8014818 <_Balloc>
 8014926:	4680      	mov	r8, r0
 8014928:	b928      	cbnz	r0, 8014936 <__multadd+0x5a>
 801492a:	4602      	mov	r2, r0
 801492c:	4b0c      	ldr	r3, [pc, #48]	@ (8014960 <__multadd+0x84>)
 801492e:	480d      	ldr	r0, [pc, #52]	@ (8014964 <__multadd+0x88>)
 8014930:	21ba      	movs	r1, #186	@ 0xba
 8014932:	f000 fef7 	bl	8015724 <__assert_func>
 8014936:	6922      	ldr	r2, [r4, #16]
 8014938:	3202      	adds	r2, #2
 801493a:	f104 010c 	add.w	r1, r4, #12
 801493e:	0092      	lsls	r2, r2, #2
 8014940:	300c      	adds	r0, #12
 8014942:	f7ff f80e 	bl	8013962 <memcpy>
 8014946:	4621      	mov	r1, r4
 8014948:	4638      	mov	r0, r7
 801494a:	f7ff ffa5 	bl	8014898 <_Bfree>
 801494e:	4644      	mov	r4, r8
 8014950:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014954:	3501      	adds	r5, #1
 8014956:	615e      	str	r6, [r3, #20]
 8014958:	6125      	str	r5, [r4, #16]
 801495a:	4620      	mov	r0, r4
 801495c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014960:	08016124 	.word	0x08016124
 8014964:	08016135 	.word	0x08016135

08014968 <__hi0bits>:
 8014968:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801496c:	4603      	mov	r3, r0
 801496e:	bf36      	itet	cc
 8014970:	0403      	lslcc	r3, r0, #16
 8014972:	2000      	movcs	r0, #0
 8014974:	2010      	movcc	r0, #16
 8014976:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801497a:	bf3c      	itt	cc
 801497c:	021b      	lslcc	r3, r3, #8
 801497e:	3008      	addcc	r0, #8
 8014980:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014984:	bf3c      	itt	cc
 8014986:	011b      	lslcc	r3, r3, #4
 8014988:	3004      	addcc	r0, #4
 801498a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801498e:	bf3c      	itt	cc
 8014990:	009b      	lslcc	r3, r3, #2
 8014992:	3002      	addcc	r0, #2
 8014994:	2b00      	cmp	r3, #0
 8014996:	db05      	blt.n	80149a4 <__hi0bits+0x3c>
 8014998:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801499c:	f100 0001 	add.w	r0, r0, #1
 80149a0:	bf08      	it	eq
 80149a2:	2020      	moveq	r0, #32
 80149a4:	4770      	bx	lr

080149a6 <__lo0bits>:
 80149a6:	6803      	ldr	r3, [r0, #0]
 80149a8:	4602      	mov	r2, r0
 80149aa:	f013 0007 	ands.w	r0, r3, #7
 80149ae:	d00b      	beq.n	80149c8 <__lo0bits+0x22>
 80149b0:	07d9      	lsls	r1, r3, #31
 80149b2:	d421      	bmi.n	80149f8 <__lo0bits+0x52>
 80149b4:	0798      	lsls	r0, r3, #30
 80149b6:	bf49      	itett	mi
 80149b8:	085b      	lsrmi	r3, r3, #1
 80149ba:	089b      	lsrpl	r3, r3, #2
 80149bc:	2001      	movmi	r0, #1
 80149be:	6013      	strmi	r3, [r2, #0]
 80149c0:	bf5c      	itt	pl
 80149c2:	6013      	strpl	r3, [r2, #0]
 80149c4:	2002      	movpl	r0, #2
 80149c6:	4770      	bx	lr
 80149c8:	b299      	uxth	r1, r3
 80149ca:	b909      	cbnz	r1, 80149d0 <__lo0bits+0x2a>
 80149cc:	0c1b      	lsrs	r3, r3, #16
 80149ce:	2010      	movs	r0, #16
 80149d0:	b2d9      	uxtb	r1, r3
 80149d2:	b909      	cbnz	r1, 80149d8 <__lo0bits+0x32>
 80149d4:	3008      	adds	r0, #8
 80149d6:	0a1b      	lsrs	r3, r3, #8
 80149d8:	0719      	lsls	r1, r3, #28
 80149da:	bf04      	itt	eq
 80149dc:	091b      	lsreq	r3, r3, #4
 80149de:	3004      	addeq	r0, #4
 80149e0:	0799      	lsls	r1, r3, #30
 80149e2:	bf04      	itt	eq
 80149e4:	089b      	lsreq	r3, r3, #2
 80149e6:	3002      	addeq	r0, #2
 80149e8:	07d9      	lsls	r1, r3, #31
 80149ea:	d403      	bmi.n	80149f4 <__lo0bits+0x4e>
 80149ec:	085b      	lsrs	r3, r3, #1
 80149ee:	f100 0001 	add.w	r0, r0, #1
 80149f2:	d003      	beq.n	80149fc <__lo0bits+0x56>
 80149f4:	6013      	str	r3, [r2, #0]
 80149f6:	4770      	bx	lr
 80149f8:	2000      	movs	r0, #0
 80149fa:	4770      	bx	lr
 80149fc:	2020      	movs	r0, #32
 80149fe:	4770      	bx	lr

08014a00 <__i2b>:
 8014a00:	b510      	push	{r4, lr}
 8014a02:	460c      	mov	r4, r1
 8014a04:	2101      	movs	r1, #1
 8014a06:	f7ff ff07 	bl	8014818 <_Balloc>
 8014a0a:	4602      	mov	r2, r0
 8014a0c:	b928      	cbnz	r0, 8014a1a <__i2b+0x1a>
 8014a0e:	4b05      	ldr	r3, [pc, #20]	@ (8014a24 <__i2b+0x24>)
 8014a10:	4805      	ldr	r0, [pc, #20]	@ (8014a28 <__i2b+0x28>)
 8014a12:	f240 1145 	movw	r1, #325	@ 0x145
 8014a16:	f000 fe85 	bl	8015724 <__assert_func>
 8014a1a:	2301      	movs	r3, #1
 8014a1c:	6144      	str	r4, [r0, #20]
 8014a1e:	6103      	str	r3, [r0, #16]
 8014a20:	bd10      	pop	{r4, pc}
 8014a22:	bf00      	nop
 8014a24:	08016124 	.word	0x08016124
 8014a28:	08016135 	.word	0x08016135

08014a2c <__multiply>:
 8014a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a30:	4614      	mov	r4, r2
 8014a32:	690a      	ldr	r2, [r1, #16]
 8014a34:	6923      	ldr	r3, [r4, #16]
 8014a36:	429a      	cmp	r2, r3
 8014a38:	bfa8      	it	ge
 8014a3a:	4623      	movge	r3, r4
 8014a3c:	460f      	mov	r7, r1
 8014a3e:	bfa4      	itt	ge
 8014a40:	460c      	movge	r4, r1
 8014a42:	461f      	movge	r7, r3
 8014a44:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8014a48:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8014a4c:	68a3      	ldr	r3, [r4, #8]
 8014a4e:	6861      	ldr	r1, [r4, #4]
 8014a50:	eb0a 0609 	add.w	r6, sl, r9
 8014a54:	42b3      	cmp	r3, r6
 8014a56:	b085      	sub	sp, #20
 8014a58:	bfb8      	it	lt
 8014a5a:	3101      	addlt	r1, #1
 8014a5c:	f7ff fedc 	bl	8014818 <_Balloc>
 8014a60:	b930      	cbnz	r0, 8014a70 <__multiply+0x44>
 8014a62:	4602      	mov	r2, r0
 8014a64:	4b44      	ldr	r3, [pc, #272]	@ (8014b78 <__multiply+0x14c>)
 8014a66:	4845      	ldr	r0, [pc, #276]	@ (8014b7c <__multiply+0x150>)
 8014a68:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8014a6c:	f000 fe5a 	bl	8015724 <__assert_func>
 8014a70:	f100 0514 	add.w	r5, r0, #20
 8014a74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014a78:	462b      	mov	r3, r5
 8014a7a:	2200      	movs	r2, #0
 8014a7c:	4543      	cmp	r3, r8
 8014a7e:	d321      	bcc.n	8014ac4 <__multiply+0x98>
 8014a80:	f107 0114 	add.w	r1, r7, #20
 8014a84:	f104 0214 	add.w	r2, r4, #20
 8014a88:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8014a8c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8014a90:	9302      	str	r3, [sp, #8]
 8014a92:	1b13      	subs	r3, r2, r4
 8014a94:	3b15      	subs	r3, #21
 8014a96:	f023 0303 	bic.w	r3, r3, #3
 8014a9a:	3304      	adds	r3, #4
 8014a9c:	f104 0715 	add.w	r7, r4, #21
 8014aa0:	42ba      	cmp	r2, r7
 8014aa2:	bf38      	it	cc
 8014aa4:	2304      	movcc	r3, #4
 8014aa6:	9301      	str	r3, [sp, #4]
 8014aa8:	9b02      	ldr	r3, [sp, #8]
 8014aaa:	9103      	str	r1, [sp, #12]
 8014aac:	428b      	cmp	r3, r1
 8014aae:	d80c      	bhi.n	8014aca <__multiply+0x9e>
 8014ab0:	2e00      	cmp	r6, #0
 8014ab2:	dd03      	ble.n	8014abc <__multiply+0x90>
 8014ab4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d05b      	beq.n	8014b74 <__multiply+0x148>
 8014abc:	6106      	str	r6, [r0, #16]
 8014abe:	b005      	add	sp, #20
 8014ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ac4:	f843 2b04 	str.w	r2, [r3], #4
 8014ac8:	e7d8      	b.n	8014a7c <__multiply+0x50>
 8014aca:	f8b1 a000 	ldrh.w	sl, [r1]
 8014ace:	f1ba 0f00 	cmp.w	sl, #0
 8014ad2:	d024      	beq.n	8014b1e <__multiply+0xf2>
 8014ad4:	f104 0e14 	add.w	lr, r4, #20
 8014ad8:	46a9      	mov	r9, r5
 8014ada:	f04f 0c00 	mov.w	ip, #0
 8014ade:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014ae2:	f8d9 3000 	ldr.w	r3, [r9]
 8014ae6:	fa1f fb87 	uxth.w	fp, r7
 8014aea:	b29b      	uxth	r3, r3
 8014aec:	fb0a 330b 	mla	r3, sl, fp, r3
 8014af0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8014af4:	f8d9 7000 	ldr.w	r7, [r9]
 8014af8:	4463      	add	r3, ip
 8014afa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8014afe:	fb0a c70b 	mla	r7, sl, fp, ip
 8014b02:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8014b06:	b29b      	uxth	r3, r3
 8014b08:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014b0c:	4572      	cmp	r2, lr
 8014b0e:	f849 3b04 	str.w	r3, [r9], #4
 8014b12:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8014b16:	d8e2      	bhi.n	8014ade <__multiply+0xb2>
 8014b18:	9b01      	ldr	r3, [sp, #4]
 8014b1a:	f845 c003 	str.w	ip, [r5, r3]
 8014b1e:	9b03      	ldr	r3, [sp, #12]
 8014b20:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8014b24:	3104      	adds	r1, #4
 8014b26:	f1b9 0f00 	cmp.w	r9, #0
 8014b2a:	d021      	beq.n	8014b70 <__multiply+0x144>
 8014b2c:	682b      	ldr	r3, [r5, #0]
 8014b2e:	f104 0c14 	add.w	ip, r4, #20
 8014b32:	46ae      	mov	lr, r5
 8014b34:	f04f 0a00 	mov.w	sl, #0
 8014b38:	f8bc b000 	ldrh.w	fp, [ip]
 8014b3c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8014b40:	fb09 770b 	mla	r7, r9, fp, r7
 8014b44:	4457      	add	r7, sl
 8014b46:	b29b      	uxth	r3, r3
 8014b48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014b4c:	f84e 3b04 	str.w	r3, [lr], #4
 8014b50:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014b54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014b58:	f8be 3000 	ldrh.w	r3, [lr]
 8014b5c:	fb09 330a 	mla	r3, r9, sl, r3
 8014b60:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8014b64:	4562      	cmp	r2, ip
 8014b66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014b6a:	d8e5      	bhi.n	8014b38 <__multiply+0x10c>
 8014b6c:	9f01      	ldr	r7, [sp, #4]
 8014b6e:	51eb      	str	r3, [r5, r7]
 8014b70:	3504      	adds	r5, #4
 8014b72:	e799      	b.n	8014aa8 <__multiply+0x7c>
 8014b74:	3e01      	subs	r6, #1
 8014b76:	e79b      	b.n	8014ab0 <__multiply+0x84>
 8014b78:	08016124 	.word	0x08016124
 8014b7c:	08016135 	.word	0x08016135

08014b80 <__pow5mult>:
 8014b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014b84:	4615      	mov	r5, r2
 8014b86:	f012 0203 	ands.w	r2, r2, #3
 8014b8a:	4607      	mov	r7, r0
 8014b8c:	460e      	mov	r6, r1
 8014b8e:	d007      	beq.n	8014ba0 <__pow5mult+0x20>
 8014b90:	4c25      	ldr	r4, [pc, #148]	@ (8014c28 <__pow5mult+0xa8>)
 8014b92:	3a01      	subs	r2, #1
 8014b94:	2300      	movs	r3, #0
 8014b96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014b9a:	f7ff fe9f 	bl	80148dc <__multadd>
 8014b9e:	4606      	mov	r6, r0
 8014ba0:	10ad      	asrs	r5, r5, #2
 8014ba2:	d03d      	beq.n	8014c20 <__pow5mult+0xa0>
 8014ba4:	69fc      	ldr	r4, [r7, #28]
 8014ba6:	b97c      	cbnz	r4, 8014bc8 <__pow5mult+0x48>
 8014ba8:	2010      	movs	r0, #16
 8014baa:	f7ff fd7f 	bl	80146ac <malloc>
 8014bae:	4602      	mov	r2, r0
 8014bb0:	61f8      	str	r0, [r7, #28]
 8014bb2:	b928      	cbnz	r0, 8014bc0 <__pow5mult+0x40>
 8014bb4:	4b1d      	ldr	r3, [pc, #116]	@ (8014c2c <__pow5mult+0xac>)
 8014bb6:	481e      	ldr	r0, [pc, #120]	@ (8014c30 <__pow5mult+0xb0>)
 8014bb8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8014bbc:	f000 fdb2 	bl	8015724 <__assert_func>
 8014bc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014bc4:	6004      	str	r4, [r0, #0]
 8014bc6:	60c4      	str	r4, [r0, #12]
 8014bc8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8014bcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014bd0:	b94c      	cbnz	r4, 8014be6 <__pow5mult+0x66>
 8014bd2:	f240 2171 	movw	r1, #625	@ 0x271
 8014bd6:	4638      	mov	r0, r7
 8014bd8:	f7ff ff12 	bl	8014a00 <__i2b>
 8014bdc:	2300      	movs	r3, #0
 8014bde:	f8c8 0008 	str.w	r0, [r8, #8]
 8014be2:	4604      	mov	r4, r0
 8014be4:	6003      	str	r3, [r0, #0]
 8014be6:	f04f 0900 	mov.w	r9, #0
 8014bea:	07eb      	lsls	r3, r5, #31
 8014bec:	d50a      	bpl.n	8014c04 <__pow5mult+0x84>
 8014bee:	4631      	mov	r1, r6
 8014bf0:	4622      	mov	r2, r4
 8014bf2:	4638      	mov	r0, r7
 8014bf4:	f7ff ff1a 	bl	8014a2c <__multiply>
 8014bf8:	4631      	mov	r1, r6
 8014bfa:	4680      	mov	r8, r0
 8014bfc:	4638      	mov	r0, r7
 8014bfe:	f7ff fe4b 	bl	8014898 <_Bfree>
 8014c02:	4646      	mov	r6, r8
 8014c04:	106d      	asrs	r5, r5, #1
 8014c06:	d00b      	beq.n	8014c20 <__pow5mult+0xa0>
 8014c08:	6820      	ldr	r0, [r4, #0]
 8014c0a:	b938      	cbnz	r0, 8014c1c <__pow5mult+0x9c>
 8014c0c:	4622      	mov	r2, r4
 8014c0e:	4621      	mov	r1, r4
 8014c10:	4638      	mov	r0, r7
 8014c12:	f7ff ff0b 	bl	8014a2c <__multiply>
 8014c16:	6020      	str	r0, [r4, #0]
 8014c18:	f8c0 9000 	str.w	r9, [r0]
 8014c1c:	4604      	mov	r4, r0
 8014c1e:	e7e4      	b.n	8014bea <__pow5mult+0x6a>
 8014c20:	4630      	mov	r0, r6
 8014c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c26:	bf00      	nop
 8014c28:	08016190 	.word	0x08016190
 8014c2c:	080160b5 	.word	0x080160b5
 8014c30:	08016135 	.word	0x08016135

08014c34 <__lshift>:
 8014c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c38:	460c      	mov	r4, r1
 8014c3a:	6849      	ldr	r1, [r1, #4]
 8014c3c:	6923      	ldr	r3, [r4, #16]
 8014c3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014c42:	68a3      	ldr	r3, [r4, #8]
 8014c44:	4607      	mov	r7, r0
 8014c46:	4691      	mov	r9, r2
 8014c48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014c4c:	f108 0601 	add.w	r6, r8, #1
 8014c50:	42b3      	cmp	r3, r6
 8014c52:	db0b      	blt.n	8014c6c <__lshift+0x38>
 8014c54:	4638      	mov	r0, r7
 8014c56:	f7ff fddf 	bl	8014818 <_Balloc>
 8014c5a:	4605      	mov	r5, r0
 8014c5c:	b948      	cbnz	r0, 8014c72 <__lshift+0x3e>
 8014c5e:	4602      	mov	r2, r0
 8014c60:	4b28      	ldr	r3, [pc, #160]	@ (8014d04 <__lshift+0xd0>)
 8014c62:	4829      	ldr	r0, [pc, #164]	@ (8014d08 <__lshift+0xd4>)
 8014c64:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014c68:	f000 fd5c 	bl	8015724 <__assert_func>
 8014c6c:	3101      	adds	r1, #1
 8014c6e:	005b      	lsls	r3, r3, #1
 8014c70:	e7ee      	b.n	8014c50 <__lshift+0x1c>
 8014c72:	2300      	movs	r3, #0
 8014c74:	f100 0114 	add.w	r1, r0, #20
 8014c78:	f100 0210 	add.w	r2, r0, #16
 8014c7c:	4618      	mov	r0, r3
 8014c7e:	4553      	cmp	r3, sl
 8014c80:	db33      	blt.n	8014cea <__lshift+0xb6>
 8014c82:	6920      	ldr	r0, [r4, #16]
 8014c84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014c88:	f104 0314 	add.w	r3, r4, #20
 8014c8c:	f019 091f 	ands.w	r9, r9, #31
 8014c90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014c94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014c98:	d02b      	beq.n	8014cf2 <__lshift+0xbe>
 8014c9a:	f1c9 0e20 	rsb	lr, r9, #32
 8014c9e:	468a      	mov	sl, r1
 8014ca0:	2200      	movs	r2, #0
 8014ca2:	6818      	ldr	r0, [r3, #0]
 8014ca4:	fa00 f009 	lsl.w	r0, r0, r9
 8014ca8:	4310      	orrs	r0, r2
 8014caa:	f84a 0b04 	str.w	r0, [sl], #4
 8014cae:	f853 2b04 	ldr.w	r2, [r3], #4
 8014cb2:	459c      	cmp	ip, r3
 8014cb4:	fa22 f20e 	lsr.w	r2, r2, lr
 8014cb8:	d8f3      	bhi.n	8014ca2 <__lshift+0x6e>
 8014cba:	ebac 0304 	sub.w	r3, ip, r4
 8014cbe:	3b15      	subs	r3, #21
 8014cc0:	f023 0303 	bic.w	r3, r3, #3
 8014cc4:	3304      	adds	r3, #4
 8014cc6:	f104 0015 	add.w	r0, r4, #21
 8014cca:	4584      	cmp	ip, r0
 8014ccc:	bf38      	it	cc
 8014cce:	2304      	movcc	r3, #4
 8014cd0:	50ca      	str	r2, [r1, r3]
 8014cd2:	b10a      	cbz	r2, 8014cd8 <__lshift+0xa4>
 8014cd4:	f108 0602 	add.w	r6, r8, #2
 8014cd8:	3e01      	subs	r6, #1
 8014cda:	4638      	mov	r0, r7
 8014cdc:	612e      	str	r6, [r5, #16]
 8014cde:	4621      	mov	r1, r4
 8014ce0:	f7ff fdda 	bl	8014898 <_Bfree>
 8014ce4:	4628      	mov	r0, r5
 8014ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014cea:	f842 0f04 	str.w	r0, [r2, #4]!
 8014cee:	3301      	adds	r3, #1
 8014cf0:	e7c5      	b.n	8014c7e <__lshift+0x4a>
 8014cf2:	3904      	subs	r1, #4
 8014cf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8014cf8:	f841 2f04 	str.w	r2, [r1, #4]!
 8014cfc:	459c      	cmp	ip, r3
 8014cfe:	d8f9      	bhi.n	8014cf4 <__lshift+0xc0>
 8014d00:	e7ea      	b.n	8014cd8 <__lshift+0xa4>
 8014d02:	bf00      	nop
 8014d04:	08016124 	.word	0x08016124
 8014d08:	08016135 	.word	0x08016135

08014d0c <__mcmp>:
 8014d0c:	690a      	ldr	r2, [r1, #16]
 8014d0e:	4603      	mov	r3, r0
 8014d10:	6900      	ldr	r0, [r0, #16]
 8014d12:	1a80      	subs	r0, r0, r2
 8014d14:	b530      	push	{r4, r5, lr}
 8014d16:	d10e      	bne.n	8014d36 <__mcmp+0x2a>
 8014d18:	3314      	adds	r3, #20
 8014d1a:	3114      	adds	r1, #20
 8014d1c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014d20:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014d24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014d28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014d2c:	4295      	cmp	r5, r2
 8014d2e:	d003      	beq.n	8014d38 <__mcmp+0x2c>
 8014d30:	d205      	bcs.n	8014d3e <__mcmp+0x32>
 8014d32:	f04f 30ff 	mov.w	r0, #4294967295
 8014d36:	bd30      	pop	{r4, r5, pc}
 8014d38:	42a3      	cmp	r3, r4
 8014d3a:	d3f3      	bcc.n	8014d24 <__mcmp+0x18>
 8014d3c:	e7fb      	b.n	8014d36 <__mcmp+0x2a>
 8014d3e:	2001      	movs	r0, #1
 8014d40:	e7f9      	b.n	8014d36 <__mcmp+0x2a>
	...

08014d44 <__mdiff>:
 8014d44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d48:	4689      	mov	r9, r1
 8014d4a:	4606      	mov	r6, r0
 8014d4c:	4611      	mov	r1, r2
 8014d4e:	4648      	mov	r0, r9
 8014d50:	4614      	mov	r4, r2
 8014d52:	f7ff ffdb 	bl	8014d0c <__mcmp>
 8014d56:	1e05      	subs	r5, r0, #0
 8014d58:	d112      	bne.n	8014d80 <__mdiff+0x3c>
 8014d5a:	4629      	mov	r1, r5
 8014d5c:	4630      	mov	r0, r6
 8014d5e:	f7ff fd5b 	bl	8014818 <_Balloc>
 8014d62:	4602      	mov	r2, r0
 8014d64:	b928      	cbnz	r0, 8014d72 <__mdiff+0x2e>
 8014d66:	4b3f      	ldr	r3, [pc, #252]	@ (8014e64 <__mdiff+0x120>)
 8014d68:	f240 2137 	movw	r1, #567	@ 0x237
 8014d6c:	483e      	ldr	r0, [pc, #248]	@ (8014e68 <__mdiff+0x124>)
 8014d6e:	f000 fcd9 	bl	8015724 <__assert_func>
 8014d72:	2301      	movs	r3, #1
 8014d74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014d78:	4610      	mov	r0, r2
 8014d7a:	b003      	add	sp, #12
 8014d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d80:	bfbc      	itt	lt
 8014d82:	464b      	movlt	r3, r9
 8014d84:	46a1      	movlt	r9, r4
 8014d86:	4630      	mov	r0, r6
 8014d88:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014d8c:	bfba      	itte	lt
 8014d8e:	461c      	movlt	r4, r3
 8014d90:	2501      	movlt	r5, #1
 8014d92:	2500      	movge	r5, #0
 8014d94:	f7ff fd40 	bl	8014818 <_Balloc>
 8014d98:	4602      	mov	r2, r0
 8014d9a:	b918      	cbnz	r0, 8014da4 <__mdiff+0x60>
 8014d9c:	4b31      	ldr	r3, [pc, #196]	@ (8014e64 <__mdiff+0x120>)
 8014d9e:	f240 2145 	movw	r1, #581	@ 0x245
 8014da2:	e7e3      	b.n	8014d6c <__mdiff+0x28>
 8014da4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014da8:	6926      	ldr	r6, [r4, #16]
 8014daa:	60c5      	str	r5, [r0, #12]
 8014dac:	f109 0310 	add.w	r3, r9, #16
 8014db0:	f109 0514 	add.w	r5, r9, #20
 8014db4:	f104 0e14 	add.w	lr, r4, #20
 8014db8:	f100 0b14 	add.w	fp, r0, #20
 8014dbc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014dc0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014dc4:	9301      	str	r3, [sp, #4]
 8014dc6:	46d9      	mov	r9, fp
 8014dc8:	f04f 0c00 	mov.w	ip, #0
 8014dcc:	9b01      	ldr	r3, [sp, #4]
 8014dce:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014dd2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8014dd6:	9301      	str	r3, [sp, #4]
 8014dd8:	fa1f f38a 	uxth.w	r3, sl
 8014ddc:	4619      	mov	r1, r3
 8014dde:	b283      	uxth	r3, r0
 8014de0:	1acb      	subs	r3, r1, r3
 8014de2:	0c00      	lsrs	r0, r0, #16
 8014de4:	4463      	add	r3, ip
 8014de6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8014dea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8014dee:	b29b      	uxth	r3, r3
 8014df0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014df4:	4576      	cmp	r6, lr
 8014df6:	f849 3b04 	str.w	r3, [r9], #4
 8014dfa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014dfe:	d8e5      	bhi.n	8014dcc <__mdiff+0x88>
 8014e00:	1b33      	subs	r3, r6, r4
 8014e02:	3b15      	subs	r3, #21
 8014e04:	f023 0303 	bic.w	r3, r3, #3
 8014e08:	3415      	adds	r4, #21
 8014e0a:	3304      	adds	r3, #4
 8014e0c:	42a6      	cmp	r6, r4
 8014e0e:	bf38      	it	cc
 8014e10:	2304      	movcc	r3, #4
 8014e12:	441d      	add	r5, r3
 8014e14:	445b      	add	r3, fp
 8014e16:	461e      	mov	r6, r3
 8014e18:	462c      	mov	r4, r5
 8014e1a:	4544      	cmp	r4, r8
 8014e1c:	d30e      	bcc.n	8014e3c <__mdiff+0xf8>
 8014e1e:	f108 0103 	add.w	r1, r8, #3
 8014e22:	1b49      	subs	r1, r1, r5
 8014e24:	f021 0103 	bic.w	r1, r1, #3
 8014e28:	3d03      	subs	r5, #3
 8014e2a:	45a8      	cmp	r8, r5
 8014e2c:	bf38      	it	cc
 8014e2e:	2100      	movcc	r1, #0
 8014e30:	440b      	add	r3, r1
 8014e32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014e36:	b191      	cbz	r1, 8014e5e <__mdiff+0x11a>
 8014e38:	6117      	str	r7, [r2, #16]
 8014e3a:	e79d      	b.n	8014d78 <__mdiff+0x34>
 8014e3c:	f854 1b04 	ldr.w	r1, [r4], #4
 8014e40:	46e6      	mov	lr, ip
 8014e42:	0c08      	lsrs	r0, r1, #16
 8014e44:	fa1c fc81 	uxtah	ip, ip, r1
 8014e48:	4471      	add	r1, lr
 8014e4a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8014e4e:	b289      	uxth	r1, r1
 8014e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014e54:	f846 1b04 	str.w	r1, [r6], #4
 8014e58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014e5c:	e7dd      	b.n	8014e1a <__mdiff+0xd6>
 8014e5e:	3f01      	subs	r7, #1
 8014e60:	e7e7      	b.n	8014e32 <__mdiff+0xee>
 8014e62:	bf00      	nop
 8014e64:	08016124 	.word	0x08016124
 8014e68:	08016135 	.word	0x08016135

08014e6c <__d2b>:
 8014e6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014e70:	460f      	mov	r7, r1
 8014e72:	2101      	movs	r1, #1
 8014e74:	ec59 8b10 	vmov	r8, r9, d0
 8014e78:	4616      	mov	r6, r2
 8014e7a:	f7ff fccd 	bl	8014818 <_Balloc>
 8014e7e:	4604      	mov	r4, r0
 8014e80:	b930      	cbnz	r0, 8014e90 <__d2b+0x24>
 8014e82:	4602      	mov	r2, r0
 8014e84:	4b23      	ldr	r3, [pc, #140]	@ (8014f14 <__d2b+0xa8>)
 8014e86:	4824      	ldr	r0, [pc, #144]	@ (8014f18 <__d2b+0xac>)
 8014e88:	f240 310f 	movw	r1, #783	@ 0x30f
 8014e8c:	f000 fc4a 	bl	8015724 <__assert_func>
 8014e90:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014e94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014e98:	b10d      	cbz	r5, 8014e9e <__d2b+0x32>
 8014e9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014e9e:	9301      	str	r3, [sp, #4]
 8014ea0:	f1b8 0300 	subs.w	r3, r8, #0
 8014ea4:	d023      	beq.n	8014eee <__d2b+0x82>
 8014ea6:	4668      	mov	r0, sp
 8014ea8:	9300      	str	r3, [sp, #0]
 8014eaa:	f7ff fd7c 	bl	80149a6 <__lo0bits>
 8014eae:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014eb2:	b1d0      	cbz	r0, 8014eea <__d2b+0x7e>
 8014eb4:	f1c0 0320 	rsb	r3, r0, #32
 8014eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8014ebc:	430b      	orrs	r3, r1
 8014ebe:	40c2      	lsrs	r2, r0
 8014ec0:	6163      	str	r3, [r4, #20]
 8014ec2:	9201      	str	r2, [sp, #4]
 8014ec4:	9b01      	ldr	r3, [sp, #4]
 8014ec6:	61a3      	str	r3, [r4, #24]
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	bf0c      	ite	eq
 8014ecc:	2201      	moveq	r2, #1
 8014ece:	2202      	movne	r2, #2
 8014ed0:	6122      	str	r2, [r4, #16]
 8014ed2:	b1a5      	cbz	r5, 8014efe <__d2b+0x92>
 8014ed4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014ed8:	4405      	add	r5, r0
 8014eda:	603d      	str	r5, [r7, #0]
 8014edc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014ee0:	6030      	str	r0, [r6, #0]
 8014ee2:	4620      	mov	r0, r4
 8014ee4:	b003      	add	sp, #12
 8014ee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014eea:	6161      	str	r1, [r4, #20]
 8014eec:	e7ea      	b.n	8014ec4 <__d2b+0x58>
 8014eee:	a801      	add	r0, sp, #4
 8014ef0:	f7ff fd59 	bl	80149a6 <__lo0bits>
 8014ef4:	9b01      	ldr	r3, [sp, #4]
 8014ef6:	6163      	str	r3, [r4, #20]
 8014ef8:	3020      	adds	r0, #32
 8014efa:	2201      	movs	r2, #1
 8014efc:	e7e8      	b.n	8014ed0 <__d2b+0x64>
 8014efe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014f02:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8014f06:	6038      	str	r0, [r7, #0]
 8014f08:	6918      	ldr	r0, [r3, #16]
 8014f0a:	f7ff fd2d 	bl	8014968 <__hi0bits>
 8014f0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014f12:	e7e5      	b.n	8014ee0 <__d2b+0x74>
 8014f14:	08016124 	.word	0x08016124
 8014f18:	08016135 	.word	0x08016135

08014f1c <__ssputs_r>:
 8014f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f20:	688e      	ldr	r6, [r1, #8]
 8014f22:	461f      	mov	r7, r3
 8014f24:	42be      	cmp	r6, r7
 8014f26:	680b      	ldr	r3, [r1, #0]
 8014f28:	4682      	mov	sl, r0
 8014f2a:	460c      	mov	r4, r1
 8014f2c:	4690      	mov	r8, r2
 8014f2e:	d82d      	bhi.n	8014f8c <__ssputs_r+0x70>
 8014f30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014f34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014f38:	d026      	beq.n	8014f88 <__ssputs_r+0x6c>
 8014f3a:	6965      	ldr	r5, [r4, #20]
 8014f3c:	6909      	ldr	r1, [r1, #16]
 8014f3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014f42:	eba3 0901 	sub.w	r9, r3, r1
 8014f46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014f4a:	1c7b      	adds	r3, r7, #1
 8014f4c:	444b      	add	r3, r9
 8014f4e:	106d      	asrs	r5, r5, #1
 8014f50:	429d      	cmp	r5, r3
 8014f52:	bf38      	it	cc
 8014f54:	461d      	movcc	r5, r3
 8014f56:	0553      	lsls	r3, r2, #21
 8014f58:	d527      	bpl.n	8014faa <__ssputs_r+0x8e>
 8014f5a:	4629      	mov	r1, r5
 8014f5c:	f7ff fbd0 	bl	8014700 <_malloc_r>
 8014f60:	4606      	mov	r6, r0
 8014f62:	b360      	cbz	r0, 8014fbe <__ssputs_r+0xa2>
 8014f64:	6921      	ldr	r1, [r4, #16]
 8014f66:	464a      	mov	r2, r9
 8014f68:	f7fe fcfb 	bl	8013962 <memcpy>
 8014f6c:	89a3      	ldrh	r3, [r4, #12]
 8014f6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8014f72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014f76:	81a3      	strh	r3, [r4, #12]
 8014f78:	6126      	str	r6, [r4, #16]
 8014f7a:	6165      	str	r5, [r4, #20]
 8014f7c:	444e      	add	r6, r9
 8014f7e:	eba5 0509 	sub.w	r5, r5, r9
 8014f82:	6026      	str	r6, [r4, #0]
 8014f84:	60a5      	str	r5, [r4, #8]
 8014f86:	463e      	mov	r6, r7
 8014f88:	42be      	cmp	r6, r7
 8014f8a:	d900      	bls.n	8014f8e <__ssputs_r+0x72>
 8014f8c:	463e      	mov	r6, r7
 8014f8e:	6820      	ldr	r0, [r4, #0]
 8014f90:	4632      	mov	r2, r6
 8014f92:	4641      	mov	r1, r8
 8014f94:	f000 fb9c 	bl	80156d0 <memmove>
 8014f98:	68a3      	ldr	r3, [r4, #8]
 8014f9a:	1b9b      	subs	r3, r3, r6
 8014f9c:	60a3      	str	r3, [r4, #8]
 8014f9e:	6823      	ldr	r3, [r4, #0]
 8014fa0:	4433      	add	r3, r6
 8014fa2:	6023      	str	r3, [r4, #0]
 8014fa4:	2000      	movs	r0, #0
 8014fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014faa:	462a      	mov	r2, r5
 8014fac:	f000 fbfe 	bl	80157ac <_realloc_r>
 8014fb0:	4606      	mov	r6, r0
 8014fb2:	2800      	cmp	r0, #0
 8014fb4:	d1e0      	bne.n	8014f78 <__ssputs_r+0x5c>
 8014fb6:	6921      	ldr	r1, [r4, #16]
 8014fb8:	4650      	mov	r0, sl
 8014fba:	f7ff fb2d 	bl	8014618 <_free_r>
 8014fbe:	230c      	movs	r3, #12
 8014fc0:	f8ca 3000 	str.w	r3, [sl]
 8014fc4:	89a3      	ldrh	r3, [r4, #12]
 8014fc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014fca:	81a3      	strh	r3, [r4, #12]
 8014fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8014fd0:	e7e9      	b.n	8014fa6 <__ssputs_r+0x8a>
	...

08014fd4 <_svfiprintf_r>:
 8014fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fd8:	4698      	mov	r8, r3
 8014fda:	898b      	ldrh	r3, [r1, #12]
 8014fdc:	061b      	lsls	r3, r3, #24
 8014fde:	b09d      	sub	sp, #116	@ 0x74
 8014fe0:	4607      	mov	r7, r0
 8014fe2:	460d      	mov	r5, r1
 8014fe4:	4614      	mov	r4, r2
 8014fe6:	d510      	bpl.n	801500a <_svfiprintf_r+0x36>
 8014fe8:	690b      	ldr	r3, [r1, #16]
 8014fea:	b973      	cbnz	r3, 801500a <_svfiprintf_r+0x36>
 8014fec:	2140      	movs	r1, #64	@ 0x40
 8014fee:	f7ff fb87 	bl	8014700 <_malloc_r>
 8014ff2:	6028      	str	r0, [r5, #0]
 8014ff4:	6128      	str	r0, [r5, #16]
 8014ff6:	b930      	cbnz	r0, 8015006 <_svfiprintf_r+0x32>
 8014ff8:	230c      	movs	r3, #12
 8014ffa:	603b      	str	r3, [r7, #0]
 8014ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8015000:	b01d      	add	sp, #116	@ 0x74
 8015002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015006:	2340      	movs	r3, #64	@ 0x40
 8015008:	616b      	str	r3, [r5, #20]
 801500a:	2300      	movs	r3, #0
 801500c:	9309      	str	r3, [sp, #36]	@ 0x24
 801500e:	2320      	movs	r3, #32
 8015010:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015014:	f8cd 800c 	str.w	r8, [sp, #12]
 8015018:	2330      	movs	r3, #48	@ 0x30
 801501a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80151b8 <_svfiprintf_r+0x1e4>
 801501e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015022:	f04f 0901 	mov.w	r9, #1
 8015026:	4623      	mov	r3, r4
 8015028:	469a      	mov	sl, r3
 801502a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801502e:	b10a      	cbz	r2, 8015034 <_svfiprintf_r+0x60>
 8015030:	2a25      	cmp	r2, #37	@ 0x25
 8015032:	d1f9      	bne.n	8015028 <_svfiprintf_r+0x54>
 8015034:	ebba 0b04 	subs.w	fp, sl, r4
 8015038:	d00b      	beq.n	8015052 <_svfiprintf_r+0x7e>
 801503a:	465b      	mov	r3, fp
 801503c:	4622      	mov	r2, r4
 801503e:	4629      	mov	r1, r5
 8015040:	4638      	mov	r0, r7
 8015042:	f7ff ff6b 	bl	8014f1c <__ssputs_r>
 8015046:	3001      	adds	r0, #1
 8015048:	f000 80a7 	beq.w	801519a <_svfiprintf_r+0x1c6>
 801504c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801504e:	445a      	add	r2, fp
 8015050:	9209      	str	r2, [sp, #36]	@ 0x24
 8015052:	f89a 3000 	ldrb.w	r3, [sl]
 8015056:	2b00      	cmp	r3, #0
 8015058:	f000 809f 	beq.w	801519a <_svfiprintf_r+0x1c6>
 801505c:	2300      	movs	r3, #0
 801505e:	f04f 32ff 	mov.w	r2, #4294967295
 8015062:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015066:	f10a 0a01 	add.w	sl, sl, #1
 801506a:	9304      	str	r3, [sp, #16]
 801506c:	9307      	str	r3, [sp, #28]
 801506e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015072:	931a      	str	r3, [sp, #104]	@ 0x68
 8015074:	4654      	mov	r4, sl
 8015076:	2205      	movs	r2, #5
 8015078:	f814 1b01 	ldrb.w	r1, [r4], #1
 801507c:	484e      	ldr	r0, [pc, #312]	@ (80151b8 <_svfiprintf_r+0x1e4>)
 801507e:	f7eb f8c7 	bl	8000210 <memchr>
 8015082:	9a04      	ldr	r2, [sp, #16]
 8015084:	b9d8      	cbnz	r0, 80150be <_svfiprintf_r+0xea>
 8015086:	06d0      	lsls	r0, r2, #27
 8015088:	bf44      	itt	mi
 801508a:	2320      	movmi	r3, #32
 801508c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015090:	0711      	lsls	r1, r2, #28
 8015092:	bf44      	itt	mi
 8015094:	232b      	movmi	r3, #43	@ 0x2b
 8015096:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801509a:	f89a 3000 	ldrb.w	r3, [sl]
 801509e:	2b2a      	cmp	r3, #42	@ 0x2a
 80150a0:	d015      	beq.n	80150ce <_svfiprintf_r+0xfa>
 80150a2:	9a07      	ldr	r2, [sp, #28]
 80150a4:	4654      	mov	r4, sl
 80150a6:	2000      	movs	r0, #0
 80150a8:	f04f 0c0a 	mov.w	ip, #10
 80150ac:	4621      	mov	r1, r4
 80150ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80150b2:	3b30      	subs	r3, #48	@ 0x30
 80150b4:	2b09      	cmp	r3, #9
 80150b6:	d94b      	bls.n	8015150 <_svfiprintf_r+0x17c>
 80150b8:	b1b0      	cbz	r0, 80150e8 <_svfiprintf_r+0x114>
 80150ba:	9207      	str	r2, [sp, #28]
 80150bc:	e014      	b.n	80150e8 <_svfiprintf_r+0x114>
 80150be:	eba0 0308 	sub.w	r3, r0, r8
 80150c2:	fa09 f303 	lsl.w	r3, r9, r3
 80150c6:	4313      	orrs	r3, r2
 80150c8:	9304      	str	r3, [sp, #16]
 80150ca:	46a2      	mov	sl, r4
 80150cc:	e7d2      	b.n	8015074 <_svfiprintf_r+0xa0>
 80150ce:	9b03      	ldr	r3, [sp, #12]
 80150d0:	1d19      	adds	r1, r3, #4
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	9103      	str	r1, [sp, #12]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	bfbb      	ittet	lt
 80150da:	425b      	neglt	r3, r3
 80150dc:	f042 0202 	orrlt.w	r2, r2, #2
 80150e0:	9307      	strge	r3, [sp, #28]
 80150e2:	9307      	strlt	r3, [sp, #28]
 80150e4:	bfb8      	it	lt
 80150e6:	9204      	strlt	r2, [sp, #16]
 80150e8:	7823      	ldrb	r3, [r4, #0]
 80150ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80150ec:	d10a      	bne.n	8015104 <_svfiprintf_r+0x130>
 80150ee:	7863      	ldrb	r3, [r4, #1]
 80150f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80150f2:	d132      	bne.n	801515a <_svfiprintf_r+0x186>
 80150f4:	9b03      	ldr	r3, [sp, #12]
 80150f6:	1d1a      	adds	r2, r3, #4
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	9203      	str	r2, [sp, #12]
 80150fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015100:	3402      	adds	r4, #2
 8015102:	9305      	str	r3, [sp, #20]
 8015104:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80151c8 <_svfiprintf_r+0x1f4>
 8015108:	7821      	ldrb	r1, [r4, #0]
 801510a:	2203      	movs	r2, #3
 801510c:	4650      	mov	r0, sl
 801510e:	f7eb f87f 	bl	8000210 <memchr>
 8015112:	b138      	cbz	r0, 8015124 <_svfiprintf_r+0x150>
 8015114:	9b04      	ldr	r3, [sp, #16]
 8015116:	eba0 000a 	sub.w	r0, r0, sl
 801511a:	2240      	movs	r2, #64	@ 0x40
 801511c:	4082      	lsls	r2, r0
 801511e:	4313      	orrs	r3, r2
 8015120:	3401      	adds	r4, #1
 8015122:	9304      	str	r3, [sp, #16]
 8015124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015128:	4824      	ldr	r0, [pc, #144]	@ (80151bc <_svfiprintf_r+0x1e8>)
 801512a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801512e:	2206      	movs	r2, #6
 8015130:	f7eb f86e 	bl	8000210 <memchr>
 8015134:	2800      	cmp	r0, #0
 8015136:	d036      	beq.n	80151a6 <_svfiprintf_r+0x1d2>
 8015138:	4b21      	ldr	r3, [pc, #132]	@ (80151c0 <_svfiprintf_r+0x1ec>)
 801513a:	bb1b      	cbnz	r3, 8015184 <_svfiprintf_r+0x1b0>
 801513c:	9b03      	ldr	r3, [sp, #12]
 801513e:	3307      	adds	r3, #7
 8015140:	f023 0307 	bic.w	r3, r3, #7
 8015144:	3308      	adds	r3, #8
 8015146:	9303      	str	r3, [sp, #12]
 8015148:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801514a:	4433      	add	r3, r6
 801514c:	9309      	str	r3, [sp, #36]	@ 0x24
 801514e:	e76a      	b.n	8015026 <_svfiprintf_r+0x52>
 8015150:	fb0c 3202 	mla	r2, ip, r2, r3
 8015154:	460c      	mov	r4, r1
 8015156:	2001      	movs	r0, #1
 8015158:	e7a8      	b.n	80150ac <_svfiprintf_r+0xd8>
 801515a:	2300      	movs	r3, #0
 801515c:	3401      	adds	r4, #1
 801515e:	9305      	str	r3, [sp, #20]
 8015160:	4619      	mov	r1, r3
 8015162:	f04f 0c0a 	mov.w	ip, #10
 8015166:	4620      	mov	r0, r4
 8015168:	f810 2b01 	ldrb.w	r2, [r0], #1
 801516c:	3a30      	subs	r2, #48	@ 0x30
 801516e:	2a09      	cmp	r2, #9
 8015170:	d903      	bls.n	801517a <_svfiprintf_r+0x1a6>
 8015172:	2b00      	cmp	r3, #0
 8015174:	d0c6      	beq.n	8015104 <_svfiprintf_r+0x130>
 8015176:	9105      	str	r1, [sp, #20]
 8015178:	e7c4      	b.n	8015104 <_svfiprintf_r+0x130>
 801517a:	fb0c 2101 	mla	r1, ip, r1, r2
 801517e:	4604      	mov	r4, r0
 8015180:	2301      	movs	r3, #1
 8015182:	e7f0      	b.n	8015166 <_svfiprintf_r+0x192>
 8015184:	ab03      	add	r3, sp, #12
 8015186:	9300      	str	r3, [sp, #0]
 8015188:	462a      	mov	r2, r5
 801518a:	4b0e      	ldr	r3, [pc, #56]	@ (80151c4 <_svfiprintf_r+0x1f0>)
 801518c:	a904      	add	r1, sp, #16
 801518e:	4638      	mov	r0, r7
 8015190:	f7fd fe22 	bl	8012dd8 <_printf_float>
 8015194:	1c42      	adds	r2, r0, #1
 8015196:	4606      	mov	r6, r0
 8015198:	d1d6      	bne.n	8015148 <_svfiprintf_r+0x174>
 801519a:	89ab      	ldrh	r3, [r5, #12]
 801519c:	065b      	lsls	r3, r3, #25
 801519e:	f53f af2d 	bmi.w	8014ffc <_svfiprintf_r+0x28>
 80151a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80151a4:	e72c      	b.n	8015000 <_svfiprintf_r+0x2c>
 80151a6:	ab03      	add	r3, sp, #12
 80151a8:	9300      	str	r3, [sp, #0]
 80151aa:	462a      	mov	r2, r5
 80151ac:	4b05      	ldr	r3, [pc, #20]	@ (80151c4 <_svfiprintf_r+0x1f0>)
 80151ae:	a904      	add	r1, sp, #16
 80151b0:	4638      	mov	r0, r7
 80151b2:	f7fe f8a9 	bl	8013308 <_printf_i>
 80151b6:	e7ed      	b.n	8015194 <_svfiprintf_r+0x1c0>
 80151b8:	08016290 	.word	0x08016290
 80151bc:	0801629a 	.word	0x0801629a
 80151c0:	08012dd9 	.word	0x08012dd9
 80151c4:	08014f1d 	.word	0x08014f1d
 80151c8:	08016296 	.word	0x08016296

080151cc <__sfputc_r>:
 80151cc:	6893      	ldr	r3, [r2, #8]
 80151ce:	3b01      	subs	r3, #1
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	b410      	push	{r4}
 80151d4:	6093      	str	r3, [r2, #8]
 80151d6:	da08      	bge.n	80151ea <__sfputc_r+0x1e>
 80151d8:	6994      	ldr	r4, [r2, #24]
 80151da:	42a3      	cmp	r3, r4
 80151dc:	db01      	blt.n	80151e2 <__sfputc_r+0x16>
 80151de:	290a      	cmp	r1, #10
 80151e0:	d103      	bne.n	80151ea <__sfputc_r+0x1e>
 80151e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80151e6:	f000 b9df 	b.w	80155a8 <__swbuf_r>
 80151ea:	6813      	ldr	r3, [r2, #0]
 80151ec:	1c58      	adds	r0, r3, #1
 80151ee:	6010      	str	r0, [r2, #0]
 80151f0:	7019      	strb	r1, [r3, #0]
 80151f2:	4608      	mov	r0, r1
 80151f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80151f8:	4770      	bx	lr

080151fa <__sfputs_r>:
 80151fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151fc:	4606      	mov	r6, r0
 80151fe:	460f      	mov	r7, r1
 8015200:	4614      	mov	r4, r2
 8015202:	18d5      	adds	r5, r2, r3
 8015204:	42ac      	cmp	r4, r5
 8015206:	d101      	bne.n	801520c <__sfputs_r+0x12>
 8015208:	2000      	movs	r0, #0
 801520a:	e007      	b.n	801521c <__sfputs_r+0x22>
 801520c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015210:	463a      	mov	r2, r7
 8015212:	4630      	mov	r0, r6
 8015214:	f7ff ffda 	bl	80151cc <__sfputc_r>
 8015218:	1c43      	adds	r3, r0, #1
 801521a:	d1f3      	bne.n	8015204 <__sfputs_r+0xa>
 801521c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015220 <_vfiprintf_r>:
 8015220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015224:	460d      	mov	r5, r1
 8015226:	b09d      	sub	sp, #116	@ 0x74
 8015228:	4614      	mov	r4, r2
 801522a:	4698      	mov	r8, r3
 801522c:	4606      	mov	r6, r0
 801522e:	b118      	cbz	r0, 8015238 <_vfiprintf_r+0x18>
 8015230:	6a03      	ldr	r3, [r0, #32]
 8015232:	b90b      	cbnz	r3, 8015238 <_vfiprintf_r+0x18>
 8015234:	f7fe fa14 	bl	8013660 <__sinit>
 8015238:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801523a:	07d9      	lsls	r1, r3, #31
 801523c:	d405      	bmi.n	801524a <_vfiprintf_r+0x2a>
 801523e:	89ab      	ldrh	r3, [r5, #12]
 8015240:	059a      	lsls	r2, r3, #22
 8015242:	d402      	bmi.n	801524a <_vfiprintf_r+0x2a>
 8015244:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015246:	f7fe fb8a 	bl	801395e <__retarget_lock_acquire_recursive>
 801524a:	89ab      	ldrh	r3, [r5, #12]
 801524c:	071b      	lsls	r3, r3, #28
 801524e:	d501      	bpl.n	8015254 <_vfiprintf_r+0x34>
 8015250:	692b      	ldr	r3, [r5, #16]
 8015252:	b99b      	cbnz	r3, 801527c <_vfiprintf_r+0x5c>
 8015254:	4629      	mov	r1, r5
 8015256:	4630      	mov	r0, r6
 8015258:	f000 f9e4 	bl	8015624 <__swsetup_r>
 801525c:	b170      	cbz	r0, 801527c <_vfiprintf_r+0x5c>
 801525e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015260:	07dc      	lsls	r4, r3, #31
 8015262:	d504      	bpl.n	801526e <_vfiprintf_r+0x4e>
 8015264:	f04f 30ff 	mov.w	r0, #4294967295
 8015268:	b01d      	add	sp, #116	@ 0x74
 801526a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801526e:	89ab      	ldrh	r3, [r5, #12]
 8015270:	0598      	lsls	r0, r3, #22
 8015272:	d4f7      	bmi.n	8015264 <_vfiprintf_r+0x44>
 8015274:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015276:	f7fe fb73 	bl	8013960 <__retarget_lock_release_recursive>
 801527a:	e7f3      	b.n	8015264 <_vfiprintf_r+0x44>
 801527c:	2300      	movs	r3, #0
 801527e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015280:	2320      	movs	r3, #32
 8015282:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015286:	f8cd 800c 	str.w	r8, [sp, #12]
 801528a:	2330      	movs	r3, #48	@ 0x30
 801528c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801543c <_vfiprintf_r+0x21c>
 8015290:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015294:	f04f 0901 	mov.w	r9, #1
 8015298:	4623      	mov	r3, r4
 801529a:	469a      	mov	sl, r3
 801529c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80152a0:	b10a      	cbz	r2, 80152a6 <_vfiprintf_r+0x86>
 80152a2:	2a25      	cmp	r2, #37	@ 0x25
 80152a4:	d1f9      	bne.n	801529a <_vfiprintf_r+0x7a>
 80152a6:	ebba 0b04 	subs.w	fp, sl, r4
 80152aa:	d00b      	beq.n	80152c4 <_vfiprintf_r+0xa4>
 80152ac:	465b      	mov	r3, fp
 80152ae:	4622      	mov	r2, r4
 80152b0:	4629      	mov	r1, r5
 80152b2:	4630      	mov	r0, r6
 80152b4:	f7ff ffa1 	bl	80151fa <__sfputs_r>
 80152b8:	3001      	adds	r0, #1
 80152ba:	f000 80a7 	beq.w	801540c <_vfiprintf_r+0x1ec>
 80152be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80152c0:	445a      	add	r2, fp
 80152c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80152c4:	f89a 3000 	ldrb.w	r3, [sl]
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	f000 809f 	beq.w	801540c <_vfiprintf_r+0x1ec>
 80152ce:	2300      	movs	r3, #0
 80152d0:	f04f 32ff 	mov.w	r2, #4294967295
 80152d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80152d8:	f10a 0a01 	add.w	sl, sl, #1
 80152dc:	9304      	str	r3, [sp, #16]
 80152de:	9307      	str	r3, [sp, #28]
 80152e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80152e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80152e6:	4654      	mov	r4, sl
 80152e8:	2205      	movs	r2, #5
 80152ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80152ee:	4853      	ldr	r0, [pc, #332]	@ (801543c <_vfiprintf_r+0x21c>)
 80152f0:	f7ea ff8e 	bl	8000210 <memchr>
 80152f4:	9a04      	ldr	r2, [sp, #16]
 80152f6:	b9d8      	cbnz	r0, 8015330 <_vfiprintf_r+0x110>
 80152f8:	06d1      	lsls	r1, r2, #27
 80152fa:	bf44      	itt	mi
 80152fc:	2320      	movmi	r3, #32
 80152fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015302:	0713      	lsls	r3, r2, #28
 8015304:	bf44      	itt	mi
 8015306:	232b      	movmi	r3, #43	@ 0x2b
 8015308:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801530c:	f89a 3000 	ldrb.w	r3, [sl]
 8015310:	2b2a      	cmp	r3, #42	@ 0x2a
 8015312:	d015      	beq.n	8015340 <_vfiprintf_r+0x120>
 8015314:	9a07      	ldr	r2, [sp, #28]
 8015316:	4654      	mov	r4, sl
 8015318:	2000      	movs	r0, #0
 801531a:	f04f 0c0a 	mov.w	ip, #10
 801531e:	4621      	mov	r1, r4
 8015320:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015324:	3b30      	subs	r3, #48	@ 0x30
 8015326:	2b09      	cmp	r3, #9
 8015328:	d94b      	bls.n	80153c2 <_vfiprintf_r+0x1a2>
 801532a:	b1b0      	cbz	r0, 801535a <_vfiprintf_r+0x13a>
 801532c:	9207      	str	r2, [sp, #28]
 801532e:	e014      	b.n	801535a <_vfiprintf_r+0x13a>
 8015330:	eba0 0308 	sub.w	r3, r0, r8
 8015334:	fa09 f303 	lsl.w	r3, r9, r3
 8015338:	4313      	orrs	r3, r2
 801533a:	9304      	str	r3, [sp, #16]
 801533c:	46a2      	mov	sl, r4
 801533e:	e7d2      	b.n	80152e6 <_vfiprintf_r+0xc6>
 8015340:	9b03      	ldr	r3, [sp, #12]
 8015342:	1d19      	adds	r1, r3, #4
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	9103      	str	r1, [sp, #12]
 8015348:	2b00      	cmp	r3, #0
 801534a:	bfbb      	ittet	lt
 801534c:	425b      	neglt	r3, r3
 801534e:	f042 0202 	orrlt.w	r2, r2, #2
 8015352:	9307      	strge	r3, [sp, #28]
 8015354:	9307      	strlt	r3, [sp, #28]
 8015356:	bfb8      	it	lt
 8015358:	9204      	strlt	r2, [sp, #16]
 801535a:	7823      	ldrb	r3, [r4, #0]
 801535c:	2b2e      	cmp	r3, #46	@ 0x2e
 801535e:	d10a      	bne.n	8015376 <_vfiprintf_r+0x156>
 8015360:	7863      	ldrb	r3, [r4, #1]
 8015362:	2b2a      	cmp	r3, #42	@ 0x2a
 8015364:	d132      	bne.n	80153cc <_vfiprintf_r+0x1ac>
 8015366:	9b03      	ldr	r3, [sp, #12]
 8015368:	1d1a      	adds	r2, r3, #4
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	9203      	str	r2, [sp, #12]
 801536e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015372:	3402      	adds	r4, #2
 8015374:	9305      	str	r3, [sp, #20]
 8015376:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801544c <_vfiprintf_r+0x22c>
 801537a:	7821      	ldrb	r1, [r4, #0]
 801537c:	2203      	movs	r2, #3
 801537e:	4650      	mov	r0, sl
 8015380:	f7ea ff46 	bl	8000210 <memchr>
 8015384:	b138      	cbz	r0, 8015396 <_vfiprintf_r+0x176>
 8015386:	9b04      	ldr	r3, [sp, #16]
 8015388:	eba0 000a 	sub.w	r0, r0, sl
 801538c:	2240      	movs	r2, #64	@ 0x40
 801538e:	4082      	lsls	r2, r0
 8015390:	4313      	orrs	r3, r2
 8015392:	3401      	adds	r4, #1
 8015394:	9304      	str	r3, [sp, #16]
 8015396:	f814 1b01 	ldrb.w	r1, [r4], #1
 801539a:	4829      	ldr	r0, [pc, #164]	@ (8015440 <_vfiprintf_r+0x220>)
 801539c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80153a0:	2206      	movs	r2, #6
 80153a2:	f7ea ff35 	bl	8000210 <memchr>
 80153a6:	2800      	cmp	r0, #0
 80153a8:	d03f      	beq.n	801542a <_vfiprintf_r+0x20a>
 80153aa:	4b26      	ldr	r3, [pc, #152]	@ (8015444 <_vfiprintf_r+0x224>)
 80153ac:	bb1b      	cbnz	r3, 80153f6 <_vfiprintf_r+0x1d6>
 80153ae:	9b03      	ldr	r3, [sp, #12]
 80153b0:	3307      	adds	r3, #7
 80153b2:	f023 0307 	bic.w	r3, r3, #7
 80153b6:	3308      	adds	r3, #8
 80153b8:	9303      	str	r3, [sp, #12]
 80153ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80153bc:	443b      	add	r3, r7
 80153be:	9309      	str	r3, [sp, #36]	@ 0x24
 80153c0:	e76a      	b.n	8015298 <_vfiprintf_r+0x78>
 80153c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80153c6:	460c      	mov	r4, r1
 80153c8:	2001      	movs	r0, #1
 80153ca:	e7a8      	b.n	801531e <_vfiprintf_r+0xfe>
 80153cc:	2300      	movs	r3, #0
 80153ce:	3401      	adds	r4, #1
 80153d0:	9305      	str	r3, [sp, #20]
 80153d2:	4619      	mov	r1, r3
 80153d4:	f04f 0c0a 	mov.w	ip, #10
 80153d8:	4620      	mov	r0, r4
 80153da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80153de:	3a30      	subs	r2, #48	@ 0x30
 80153e0:	2a09      	cmp	r2, #9
 80153e2:	d903      	bls.n	80153ec <_vfiprintf_r+0x1cc>
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d0c6      	beq.n	8015376 <_vfiprintf_r+0x156>
 80153e8:	9105      	str	r1, [sp, #20]
 80153ea:	e7c4      	b.n	8015376 <_vfiprintf_r+0x156>
 80153ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80153f0:	4604      	mov	r4, r0
 80153f2:	2301      	movs	r3, #1
 80153f4:	e7f0      	b.n	80153d8 <_vfiprintf_r+0x1b8>
 80153f6:	ab03      	add	r3, sp, #12
 80153f8:	9300      	str	r3, [sp, #0]
 80153fa:	462a      	mov	r2, r5
 80153fc:	4b12      	ldr	r3, [pc, #72]	@ (8015448 <_vfiprintf_r+0x228>)
 80153fe:	a904      	add	r1, sp, #16
 8015400:	4630      	mov	r0, r6
 8015402:	f7fd fce9 	bl	8012dd8 <_printf_float>
 8015406:	4607      	mov	r7, r0
 8015408:	1c78      	adds	r0, r7, #1
 801540a:	d1d6      	bne.n	80153ba <_vfiprintf_r+0x19a>
 801540c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801540e:	07d9      	lsls	r1, r3, #31
 8015410:	d405      	bmi.n	801541e <_vfiprintf_r+0x1fe>
 8015412:	89ab      	ldrh	r3, [r5, #12]
 8015414:	059a      	lsls	r2, r3, #22
 8015416:	d402      	bmi.n	801541e <_vfiprintf_r+0x1fe>
 8015418:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801541a:	f7fe faa1 	bl	8013960 <__retarget_lock_release_recursive>
 801541e:	89ab      	ldrh	r3, [r5, #12]
 8015420:	065b      	lsls	r3, r3, #25
 8015422:	f53f af1f 	bmi.w	8015264 <_vfiprintf_r+0x44>
 8015426:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015428:	e71e      	b.n	8015268 <_vfiprintf_r+0x48>
 801542a:	ab03      	add	r3, sp, #12
 801542c:	9300      	str	r3, [sp, #0]
 801542e:	462a      	mov	r2, r5
 8015430:	4b05      	ldr	r3, [pc, #20]	@ (8015448 <_vfiprintf_r+0x228>)
 8015432:	a904      	add	r1, sp, #16
 8015434:	4630      	mov	r0, r6
 8015436:	f7fd ff67 	bl	8013308 <_printf_i>
 801543a:	e7e4      	b.n	8015406 <_vfiprintf_r+0x1e6>
 801543c:	08016290 	.word	0x08016290
 8015440:	0801629a 	.word	0x0801629a
 8015444:	08012dd9 	.word	0x08012dd9
 8015448:	080151fb 	.word	0x080151fb
 801544c:	08016296 	.word	0x08016296

08015450 <__sflush_r>:
 8015450:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015458:	0716      	lsls	r6, r2, #28
 801545a:	4605      	mov	r5, r0
 801545c:	460c      	mov	r4, r1
 801545e:	d454      	bmi.n	801550a <__sflush_r+0xba>
 8015460:	684b      	ldr	r3, [r1, #4]
 8015462:	2b00      	cmp	r3, #0
 8015464:	dc02      	bgt.n	801546c <__sflush_r+0x1c>
 8015466:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8015468:	2b00      	cmp	r3, #0
 801546a:	dd48      	ble.n	80154fe <__sflush_r+0xae>
 801546c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801546e:	2e00      	cmp	r6, #0
 8015470:	d045      	beq.n	80154fe <__sflush_r+0xae>
 8015472:	2300      	movs	r3, #0
 8015474:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015478:	682f      	ldr	r7, [r5, #0]
 801547a:	6a21      	ldr	r1, [r4, #32]
 801547c:	602b      	str	r3, [r5, #0]
 801547e:	d030      	beq.n	80154e2 <__sflush_r+0x92>
 8015480:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8015482:	89a3      	ldrh	r3, [r4, #12]
 8015484:	0759      	lsls	r1, r3, #29
 8015486:	d505      	bpl.n	8015494 <__sflush_r+0x44>
 8015488:	6863      	ldr	r3, [r4, #4]
 801548a:	1ad2      	subs	r2, r2, r3
 801548c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801548e:	b10b      	cbz	r3, 8015494 <__sflush_r+0x44>
 8015490:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015492:	1ad2      	subs	r2, r2, r3
 8015494:	2300      	movs	r3, #0
 8015496:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015498:	6a21      	ldr	r1, [r4, #32]
 801549a:	4628      	mov	r0, r5
 801549c:	47b0      	blx	r6
 801549e:	1c43      	adds	r3, r0, #1
 80154a0:	89a3      	ldrh	r3, [r4, #12]
 80154a2:	d106      	bne.n	80154b2 <__sflush_r+0x62>
 80154a4:	6829      	ldr	r1, [r5, #0]
 80154a6:	291d      	cmp	r1, #29
 80154a8:	d82b      	bhi.n	8015502 <__sflush_r+0xb2>
 80154aa:	4a2a      	ldr	r2, [pc, #168]	@ (8015554 <__sflush_r+0x104>)
 80154ac:	410a      	asrs	r2, r1
 80154ae:	07d6      	lsls	r6, r2, #31
 80154b0:	d427      	bmi.n	8015502 <__sflush_r+0xb2>
 80154b2:	2200      	movs	r2, #0
 80154b4:	6062      	str	r2, [r4, #4]
 80154b6:	04d9      	lsls	r1, r3, #19
 80154b8:	6922      	ldr	r2, [r4, #16]
 80154ba:	6022      	str	r2, [r4, #0]
 80154bc:	d504      	bpl.n	80154c8 <__sflush_r+0x78>
 80154be:	1c42      	adds	r2, r0, #1
 80154c0:	d101      	bne.n	80154c6 <__sflush_r+0x76>
 80154c2:	682b      	ldr	r3, [r5, #0]
 80154c4:	b903      	cbnz	r3, 80154c8 <__sflush_r+0x78>
 80154c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80154c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80154ca:	602f      	str	r7, [r5, #0]
 80154cc:	b1b9      	cbz	r1, 80154fe <__sflush_r+0xae>
 80154ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80154d2:	4299      	cmp	r1, r3
 80154d4:	d002      	beq.n	80154dc <__sflush_r+0x8c>
 80154d6:	4628      	mov	r0, r5
 80154d8:	f7ff f89e 	bl	8014618 <_free_r>
 80154dc:	2300      	movs	r3, #0
 80154de:	6363      	str	r3, [r4, #52]	@ 0x34
 80154e0:	e00d      	b.n	80154fe <__sflush_r+0xae>
 80154e2:	2301      	movs	r3, #1
 80154e4:	4628      	mov	r0, r5
 80154e6:	47b0      	blx	r6
 80154e8:	4602      	mov	r2, r0
 80154ea:	1c50      	adds	r0, r2, #1
 80154ec:	d1c9      	bne.n	8015482 <__sflush_r+0x32>
 80154ee:	682b      	ldr	r3, [r5, #0]
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d0c6      	beq.n	8015482 <__sflush_r+0x32>
 80154f4:	2b1d      	cmp	r3, #29
 80154f6:	d001      	beq.n	80154fc <__sflush_r+0xac>
 80154f8:	2b16      	cmp	r3, #22
 80154fa:	d11e      	bne.n	801553a <__sflush_r+0xea>
 80154fc:	602f      	str	r7, [r5, #0]
 80154fe:	2000      	movs	r0, #0
 8015500:	e022      	b.n	8015548 <__sflush_r+0xf8>
 8015502:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015506:	b21b      	sxth	r3, r3
 8015508:	e01b      	b.n	8015542 <__sflush_r+0xf2>
 801550a:	690f      	ldr	r7, [r1, #16]
 801550c:	2f00      	cmp	r7, #0
 801550e:	d0f6      	beq.n	80154fe <__sflush_r+0xae>
 8015510:	0793      	lsls	r3, r2, #30
 8015512:	680e      	ldr	r6, [r1, #0]
 8015514:	bf08      	it	eq
 8015516:	694b      	ldreq	r3, [r1, #20]
 8015518:	600f      	str	r7, [r1, #0]
 801551a:	bf18      	it	ne
 801551c:	2300      	movne	r3, #0
 801551e:	eba6 0807 	sub.w	r8, r6, r7
 8015522:	608b      	str	r3, [r1, #8]
 8015524:	f1b8 0f00 	cmp.w	r8, #0
 8015528:	dde9      	ble.n	80154fe <__sflush_r+0xae>
 801552a:	6a21      	ldr	r1, [r4, #32]
 801552c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801552e:	4643      	mov	r3, r8
 8015530:	463a      	mov	r2, r7
 8015532:	4628      	mov	r0, r5
 8015534:	47b0      	blx	r6
 8015536:	2800      	cmp	r0, #0
 8015538:	dc08      	bgt.n	801554c <__sflush_r+0xfc>
 801553a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801553e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015542:	81a3      	strh	r3, [r4, #12]
 8015544:	f04f 30ff 	mov.w	r0, #4294967295
 8015548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801554c:	4407      	add	r7, r0
 801554e:	eba8 0800 	sub.w	r8, r8, r0
 8015552:	e7e7      	b.n	8015524 <__sflush_r+0xd4>
 8015554:	dfbffffe 	.word	0xdfbffffe

08015558 <_fflush_r>:
 8015558:	b538      	push	{r3, r4, r5, lr}
 801555a:	690b      	ldr	r3, [r1, #16]
 801555c:	4605      	mov	r5, r0
 801555e:	460c      	mov	r4, r1
 8015560:	b913      	cbnz	r3, 8015568 <_fflush_r+0x10>
 8015562:	2500      	movs	r5, #0
 8015564:	4628      	mov	r0, r5
 8015566:	bd38      	pop	{r3, r4, r5, pc}
 8015568:	b118      	cbz	r0, 8015572 <_fflush_r+0x1a>
 801556a:	6a03      	ldr	r3, [r0, #32]
 801556c:	b90b      	cbnz	r3, 8015572 <_fflush_r+0x1a>
 801556e:	f7fe f877 	bl	8013660 <__sinit>
 8015572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015576:	2b00      	cmp	r3, #0
 8015578:	d0f3      	beq.n	8015562 <_fflush_r+0xa>
 801557a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801557c:	07d0      	lsls	r0, r2, #31
 801557e:	d404      	bmi.n	801558a <_fflush_r+0x32>
 8015580:	0599      	lsls	r1, r3, #22
 8015582:	d402      	bmi.n	801558a <_fflush_r+0x32>
 8015584:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015586:	f7fe f9ea 	bl	801395e <__retarget_lock_acquire_recursive>
 801558a:	4628      	mov	r0, r5
 801558c:	4621      	mov	r1, r4
 801558e:	f7ff ff5f 	bl	8015450 <__sflush_r>
 8015592:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015594:	07da      	lsls	r2, r3, #31
 8015596:	4605      	mov	r5, r0
 8015598:	d4e4      	bmi.n	8015564 <_fflush_r+0xc>
 801559a:	89a3      	ldrh	r3, [r4, #12]
 801559c:	059b      	lsls	r3, r3, #22
 801559e:	d4e1      	bmi.n	8015564 <_fflush_r+0xc>
 80155a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80155a2:	f7fe f9dd 	bl	8013960 <__retarget_lock_release_recursive>
 80155a6:	e7dd      	b.n	8015564 <_fflush_r+0xc>

080155a8 <__swbuf_r>:
 80155a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155aa:	460e      	mov	r6, r1
 80155ac:	4614      	mov	r4, r2
 80155ae:	4605      	mov	r5, r0
 80155b0:	b118      	cbz	r0, 80155ba <__swbuf_r+0x12>
 80155b2:	6a03      	ldr	r3, [r0, #32]
 80155b4:	b90b      	cbnz	r3, 80155ba <__swbuf_r+0x12>
 80155b6:	f7fe f853 	bl	8013660 <__sinit>
 80155ba:	69a3      	ldr	r3, [r4, #24]
 80155bc:	60a3      	str	r3, [r4, #8]
 80155be:	89a3      	ldrh	r3, [r4, #12]
 80155c0:	071a      	lsls	r2, r3, #28
 80155c2:	d501      	bpl.n	80155c8 <__swbuf_r+0x20>
 80155c4:	6923      	ldr	r3, [r4, #16]
 80155c6:	b943      	cbnz	r3, 80155da <__swbuf_r+0x32>
 80155c8:	4621      	mov	r1, r4
 80155ca:	4628      	mov	r0, r5
 80155cc:	f000 f82a 	bl	8015624 <__swsetup_r>
 80155d0:	b118      	cbz	r0, 80155da <__swbuf_r+0x32>
 80155d2:	f04f 37ff 	mov.w	r7, #4294967295
 80155d6:	4638      	mov	r0, r7
 80155d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155da:	6823      	ldr	r3, [r4, #0]
 80155dc:	6922      	ldr	r2, [r4, #16]
 80155de:	1a98      	subs	r0, r3, r2
 80155e0:	6963      	ldr	r3, [r4, #20]
 80155e2:	b2f6      	uxtb	r6, r6
 80155e4:	4283      	cmp	r3, r0
 80155e6:	4637      	mov	r7, r6
 80155e8:	dc05      	bgt.n	80155f6 <__swbuf_r+0x4e>
 80155ea:	4621      	mov	r1, r4
 80155ec:	4628      	mov	r0, r5
 80155ee:	f7ff ffb3 	bl	8015558 <_fflush_r>
 80155f2:	2800      	cmp	r0, #0
 80155f4:	d1ed      	bne.n	80155d2 <__swbuf_r+0x2a>
 80155f6:	68a3      	ldr	r3, [r4, #8]
 80155f8:	3b01      	subs	r3, #1
 80155fa:	60a3      	str	r3, [r4, #8]
 80155fc:	6823      	ldr	r3, [r4, #0]
 80155fe:	1c5a      	adds	r2, r3, #1
 8015600:	6022      	str	r2, [r4, #0]
 8015602:	701e      	strb	r6, [r3, #0]
 8015604:	6962      	ldr	r2, [r4, #20]
 8015606:	1c43      	adds	r3, r0, #1
 8015608:	429a      	cmp	r2, r3
 801560a:	d004      	beq.n	8015616 <__swbuf_r+0x6e>
 801560c:	89a3      	ldrh	r3, [r4, #12]
 801560e:	07db      	lsls	r3, r3, #31
 8015610:	d5e1      	bpl.n	80155d6 <__swbuf_r+0x2e>
 8015612:	2e0a      	cmp	r6, #10
 8015614:	d1df      	bne.n	80155d6 <__swbuf_r+0x2e>
 8015616:	4621      	mov	r1, r4
 8015618:	4628      	mov	r0, r5
 801561a:	f7ff ff9d 	bl	8015558 <_fflush_r>
 801561e:	2800      	cmp	r0, #0
 8015620:	d0d9      	beq.n	80155d6 <__swbuf_r+0x2e>
 8015622:	e7d6      	b.n	80155d2 <__swbuf_r+0x2a>

08015624 <__swsetup_r>:
 8015624:	b538      	push	{r3, r4, r5, lr}
 8015626:	4b29      	ldr	r3, [pc, #164]	@ (80156cc <__swsetup_r+0xa8>)
 8015628:	4605      	mov	r5, r0
 801562a:	6818      	ldr	r0, [r3, #0]
 801562c:	460c      	mov	r4, r1
 801562e:	b118      	cbz	r0, 8015638 <__swsetup_r+0x14>
 8015630:	6a03      	ldr	r3, [r0, #32]
 8015632:	b90b      	cbnz	r3, 8015638 <__swsetup_r+0x14>
 8015634:	f7fe f814 	bl	8013660 <__sinit>
 8015638:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801563c:	0719      	lsls	r1, r3, #28
 801563e:	d422      	bmi.n	8015686 <__swsetup_r+0x62>
 8015640:	06da      	lsls	r2, r3, #27
 8015642:	d407      	bmi.n	8015654 <__swsetup_r+0x30>
 8015644:	2209      	movs	r2, #9
 8015646:	602a      	str	r2, [r5, #0]
 8015648:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801564c:	81a3      	strh	r3, [r4, #12]
 801564e:	f04f 30ff 	mov.w	r0, #4294967295
 8015652:	e033      	b.n	80156bc <__swsetup_r+0x98>
 8015654:	0758      	lsls	r0, r3, #29
 8015656:	d512      	bpl.n	801567e <__swsetup_r+0x5a>
 8015658:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801565a:	b141      	cbz	r1, 801566e <__swsetup_r+0x4a>
 801565c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015660:	4299      	cmp	r1, r3
 8015662:	d002      	beq.n	801566a <__swsetup_r+0x46>
 8015664:	4628      	mov	r0, r5
 8015666:	f7fe ffd7 	bl	8014618 <_free_r>
 801566a:	2300      	movs	r3, #0
 801566c:	6363      	str	r3, [r4, #52]	@ 0x34
 801566e:	89a3      	ldrh	r3, [r4, #12]
 8015670:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015674:	81a3      	strh	r3, [r4, #12]
 8015676:	2300      	movs	r3, #0
 8015678:	6063      	str	r3, [r4, #4]
 801567a:	6923      	ldr	r3, [r4, #16]
 801567c:	6023      	str	r3, [r4, #0]
 801567e:	89a3      	ldrh	r3, [r4, #12]
 8015680:	f043 0308 	orr.w	r3, r3, #8
 8015684:	81a3      	strh	r3, [r4, #12]
 8015686:	6923      	ldr	r3, [r4, #16]
 8015688:	b94b      	cbnz	r3, 801569e <__swsetup_r+0x7a>
 801568a:	89a3      	ldrh	r3, [r4, #12]
 801568c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015690:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015694:	d003      	beq.n	801569e <__swsetup_r+0x7a>
 8015696:	4621      	mov	r1, r4
 8015698:	4628      	mov	r0, r5
 801569a:	f000 f8fb 	bl	8015894 <__smakebuf_r>
 801569e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80156a2:	f013 0201 	ands.w	r2, r3, #1
 80156a6:	d00a      	beq.n	80156be <__swsetup_r+0x9a>
 80156a8:	2200      	movs	r2, #0
 80156aa:	60a2      	str	r2, [r4, #8]
 80156ac:	6962      	ldr	r2, [r4, #20]
 80156ae:	4252      	negs	r2, r2
 80156b0:	61a2      	str	r2, [r4, #24]
 80156b2:	6922      	ldr	r2, [r4, #16]
 80156b4:	b942      	cbnz	r2, 80156c8 <__swsetup_r+0xa4>
 80156b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80156ba:	d1c5      	bne.n	8015648 <__swsetup_r+0x24>
 80156bc:	bd38      	pop	{r3, r4, r5, pc}
 80156be:	0799      	lsls	r1, r3, #30
 80156c0:	bf58      	it	pl
 80156c2:	6962      	ldrpl	r2, [r4, #20]
 80156c4:	60a2      	str	r2, [r4, #8]
 80156c6:	e7f4      	b.n	80156b2 <__swsetup_r+0x8e>
 80156c8:	2000      	movs	r0, #0
 80156ca:	e7f7      	b.n	80156bc <__swsetup_r+0x98>
 80156cc:	20000034 	.word	0x20000034

080156d0 <memmove>:
 80156d0:	4288      	cmp	r0, r1
 80156d2:	b510      	push	{r4, lr}
 80156d4:	eb01 0402 	add.w	r4, r1, r2
 80156d8:	d902      	bls.n	80156e0 <memmove+0x10>
 80156da:	4284      	cmp	r4, r0
 80156dc:	4623      	mov	r3, r4
 80156de:	d807      	bhi.n	80156f0 <memmove+0x20>
 80156e0:	1e43      	subs	r3, r0, #1
 80156e2:	42a1      	cmp	r1, r4
 80156e4:	d008      	beq.n	80156f8 <memmove+0x28>
 80156e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80156ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80156ee:	e7f8      	b.n	80156e2 <memmove+0x12>
 80156f0:	4402      	add	r2, r0
 80156f2:	4601      	mov	r1, r0
 80156f4:	428a      	cmp	r2, r1
 80156f6:	d100      	bne.n	80156fa <memmove+0x2a>
 80156f8:	bd10      	pop	{r4, pc}
 80156fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80156fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015702:	e7f7      	b.n	80156f4 <memmove+0x24>

08015704 <_sbrk_r>:
 8015704:	b538      	push	{r3, r4, r5, lr}
 8015706:	4d06      	ldr	r5, [pc, #24]	@ (8015720 <_sbrk_r+0x1c>)
 8015708:	2300      	movs	r3, #0
 801570a:	4604      	mov	r4, r0
 801570c:	4608      	mov	r0, r1
 801570e:	602b      	str	r3, [r5, #0]
 8015710:	f7ee fea0 	bl	8004454 <_sbrk>
 8015714:	1c43      	adds	r3, r0, #1
 8015716:	d102      	bne.n	801571e <_sbrk_r+0x1a>
 8015718:	682b      	ldr	r3, [r5, #0]
 801571a:	b103      	cbz	r3, 801571e <_sbrk_r+0x1a>
 801571c:	6023      	str	r3, [r4, #0]
 801571e:	bd38      	pop	{r3, r4, r5, pc}
 8015720:	20006aa4 	.word	0x20006aa4

08015724 <__assert_func>:
 8015724:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015726:	4614      	mov	r4, r2
 8015728:	461a      	mov	r2, r3
 801572a:	4b09      	ldr	r3, [pc, #36]	@ (8015750 <__assert_func+0x2c>)
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	4605      	mov	r5, r0
 8015730:	68d8      	ldr	r0, [r3, #12]
 8015732:	b954      	cbnz	r4, 801574a <__assert_func+0x26>
 8015734:	4b07      	ldr	r3, [pc, #28]	@ (8015754 <__assert_func+0x30>)
 8015736:	461c      	mov	r4, r3
 8015738:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801573c:	9100      	str	r1, [sp, #0]
 801573e:	462b      	mov	r3, r5
 8015740:	4905      	ldr	r1, [pc, #20]	@ (8015758 <__assert_func+0x34>)
 8015742:	f000 f86f 	bl	8015824 <fiprintf>
 8015746:	f000 f903 	bl	8015950 <abort>
 801574a:	4b04      	ldr	r3, [pc, #16]	@ (801575c <__assert_func+0x38>)
 801574c:	e7f4      	b.n	8015738 <__assert_func+0x14>
 801574e:	bf00      	nop
 8015750:	20000034 	.word	0x20000034
 8015754:	080162e6 	.word	0x080162e6
 8015758:	080162b8 	.word	0x080162b8
 801575c:	080162ab 	.word	0x080162ab

08015760 <_calloc_r>:
 8015760:	b570      	push	{r4, r5, r6, lr}
 8015762:	fba1 5402 	umull	r5, r4, r1, r2
 8015766:	b93c      	cbnz	r4, 8015778 <_calloc_r+0x18>
 8015768:	4629      	mov	r1, r5
 801576a:	f7fe ffc9 	bl	8014700 <_malloc_r>
 801576e:	4606      	mov	r6, r0
 8015770:	b928      	cbnz	r0, 801577e <_calloc_r+0x1e>
 8015772:	2600      	movs	r6, #0
 8015774:	4630      	mov	r0, r6
 8015776:	bd70      	pop	{r4, r5, r6, pc}
 8015778:	220c      	movs	r2, #12
 801577a:	6002      	str	r2, [r0, #0]
 801577c:	e7f9      	b.n	8015772 <_calloc_r+0x12>
 801577e:	462a      	mov	r2, r5
 8015780:	4621      	mov	r1, r4
 8015782:	f7fe f818 	bl	80137b6 <memset>
 8015786:	e7f5      	b.n	8015774 <_calloc_r+0x14>

08015788 <__ascii_mbtowc>:
 8015788:	b082      	sub	sp, #8
 801578a:	b901      	cbnz	r1, 801578e <__ascii_mbtowc+0x6>
 801578c:	a901      	add	r1, sp, #4
 801578e:	b142      	cbz	r2, 80157a2 <__ascii_mbtowc+0x1a>
 8015790:	b14b      	cbz	r3, 80157a6 <__ascii_mbtowc+0x1e>
 8015792:	7813      	ldrb	r3, [r2, #0]
 8015794:	600b      	str	r3, [r1, #0]
 8015796:	7812      	ldrb	r2, [r2, #0]
 8015798:	1e10      	subs	r0, r2, #0
 801579a:	bf18      	it	ne
 801579c:	2001      	movne	r0, #1
 801579e:	b002      	add	sp, #8
 80157a0:	4770      	bx	lr
 80157a2:	4610      	mov	r0, r2
 80157a4:	e7fb      	b.n	801579e <__ascii_mbtowc+0x16>
 80157a6:	f06f 0001 	mvn.w	r0, #1
 80157aa:	e7f8      	b.n	801579e <__ascii_mbtowc+0x16>

080157ac <_realloc_r>:
 80157ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157b0:	4680      	mov	r8, r0
 80157b2:	4615      	mov	r5, r2
 80157b4:	460c      	mov	r4, r1
 80157b6:	b921      	cbnz	r1, 80157c2 <_realloc_r+0x16>
 80157b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80157bc:	4611      	mov	r1, r2
 80157be:	f7fe bf9f 	b.w	8014700 <_malloc_r>
 80157c2:	b92a      	cbnz	r2, 80157d0 <_realloc_r+0x24>
 80157c4:	f7fe ff28 	bl	8014618 <_free_r>
 80157c8:	2400      	movs	r4, #0
 80157ca:	4620      	mov	r0, r4
 80157cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157d0:	f000 f8c5 	bl	801595e <_malloc_usable_size_r>
 80157d4:	4285      	cmp	r5, r0
 80157d6:	4606      	mov	r6, r0
 80157d8:	d802      	bhi.n	80157e0 <_realloc_r+0x34>
 80157da:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80157de:	d8f4      	bhi.n	80157ca <_realloc_r+0x1e>
 80157e0:	4629      	mov	r1, r5
 80157e2:	4640      	mov	r0, r8
 80157e4:	f7fe ff8c 	bl	8014700 <_malloc_r>
 80157e8:	4607      	mov	r7, r0
 80157ea:	2800      	cmp	r0, #0
 80157ec:	d0ec      	beq.n	80157c8 <_realloc_r+0x1c>
 80157ee:	42b5      	cmp	r5, r6
 80157f0:	462a      	mov	r2, r5
 80157f2:	4621      	mov	r1, r4
 80157f4:	bf28      	it	cs
 80157f6:	4632      	movcs	r2, r6
 80157f8:	f7fe f8b3 	bl	8013962 <memcpy>
 80157fc:	4621      	mov	r1, r4
 80157fe:	4640      	mov	r0, r8
 8015800:	f7fe ff0a 	bl	8014618 <_free_r>
 8015804:	463c      	mov	r4, r7
 8015806:	e7e0      	b.n	80157ca <_realloc_r+0x1e>

08015808 <__ascii_wctomb>:
 8015808:	4603      	mov	r3, r0
 801580a:	4608      	mov	r0, r1
 801580c:	b141      	cbz	r1, 8015820 <__ascii_wctomb+0x18>
 801580e:	2aff      	cmp	r2, #255	@ 0xff
 8015810:	d904      	bls.n	801581c <__ascii_wctomb+0x14>
 8015812:	228a      	movs	r2, #138	@ 0x8a
 8015814:	601a      	str	r2, [r3, #0]
 8015816:	f04f 30ff 	mov.w	r0, #4294967295
 801581a:	4770      	bx	lr
 801581c:	700a      	strb	r2, [r1, #0]
 801581e:	2001      	movs	r0, #1
 8015820:	4770      	bx	lr
	...

08015824 <fiprintf>:
 8015824:	b40e      	push	{r1, r2, r3}
 8015826:	b503      	push	{r0, r1, lr}
 8015828:	4601      	mov	r1, r0
 801582a:	ab03      	add	r3, sp, #12
 801582c:	4805      	ldr	r0, [pc, #20]	@ (8015844 <fiprintf+0x20>)
 801582e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015832:	6800      	ldr	r0, [r0, #0]
 8015834:	9301      	str	r3, [sp, #4]
 8015836:	f7ff fcf3 	bl	8015220 <_vfiprintf_r>
 801583a:	b002      	add	sp, #8
 801583c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015840:	b003      	add	sp, #12
 8015842:	4770      	bx	lr
 8015844:	20000034 	.word	0x20000034

08015848 <__swhatbuf_r>:
 8015848:	b570      	push	{r4, r5, r6, lr}
 801584a:	460c      	mov	r4, r1
 801584c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015850:	2900      	cmp	r1, #0
 8015852:	b096      	sub	sp, #88	@ 0x58
 8015854:	4615      	mov	r5, r2
 8015856:	461e      	mov	r6, r3
 8015858:	da0d      	bge.n	8015876 <__swhatbuf_r+0x2e>
 801585a:	89a3      	ldrh	r3, [r4, #12]
 801585c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015860:	f04f 0100 	mov.w	r1, #0
 8015864:	bf14      	ite	ne
 8015866:	2340      	movne	r3, #64	@ 0x40
 8015868:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801586c:	2000      	movs	r0, #0
 801586e:	6031      	str	r1, [r6, #0]
 8015870:	602b      	str	r3, [r5, #0]
 8015872:	b016      	add	sp, #88	@ 0x58
 8015874:	bd70      	pop	{r4, r5, r6, pc}
 8015876:	466a      	mov	r2, sp
 8015878:	f000 f848 	bl	801590c <_fstat_r>
 801587c:	2800      	cmp	r0, #0
 801587e:	dbec      	blt.n	801585a <__swhatbuf_r+0x12>
 8015880:	9901      	ldr	r1, [sp, #4]
 8015882:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015886:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801588a:	4259      	negs	r1, r3
 801588c:	4159      	adcs	r1, r3
 801588e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015892:	e7eb      	b.n	801586c <__swhatbuf_r+0x24>

08015894 <__smakebuf_r>:
 8015894:	898b      	ldrh	r3, [r1, #12]
 8015896:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015898:	079d      	lsls	r5, r3, #30
 801589a:	4606      	mov	r6, r0
 801589c:	460c      	mov	r4, r1
 801589e:	d507      	bpl.n	80158b0 <__smakebuf_r+0x1c>
 80158a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80158a4:	6023      	str	r3, [r4, #0]
 80158a6:	6123      	str	r3, [r4, #16]
 80158a8:	2301      	movs	r3, #1
 80158aa:	6163      	str	r3, [r4, #20]
 80158ac:	b003      	add	sp, #12
 80158ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80158b0:	ab01      	add	r3, sp, #4
 80158b2:	466a      	mov	r2, sp
 80158b4:	f7ff ffc8 	bl	8015848 <__swhatbuf_r>
 80158b8:	9f00      	ldr	r7, [sp, #0]
 80158ba:	4605      	mov	r5, r0
 80158bc:	4639      	mov	r1, r7
 80158be:	4630      	mov	r0, r6
 80158c0:	f7fe ff1e 	bl	8014700 <_malloc_r>
 80158c4:	b948      	cbnz	r0, 80158da <__smakebuf_r+0x46>
 80158c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80158ca:	059a      	lsls	r2, r3, #22
 80158cc:	d4ee      	bmi.n	80158ac <__smakebuf_r+0x18>
 80158ce:	f023 0303 	bic.w	r3, r3, #3
 80158d2:	f043 0302 	orr.w	r3, r3, #2
 80158d6:	81a3      	strh	r3, [r4, #12]
 80158d8:	e7e2      	b.n	80158a0 <__smakebuf_r+0xc>
 80158da:	89a3      	ldrh	r3, [r4, #12]
 80158dc:	6020      	str	r0, [r4, #0]
 80158de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80158e2:	81a3      	strh	r3, [r4, #12]
 80158e4:	9b01      	ldr	r3, [sp, #4]
 80158e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80158ea:	b15b      	cbz	r3, 8015904 <__smakebuf_r+0x70>
 80158ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80158f0:	4630      	mov	r0, r6
 80158f2:	f000 f81d 	bl	8015930 <_isatty_r>
 80158f6:	b128      	cbz	r0, 8015904 <__smakebuf_r+0x70>
 80158f8:	89a3      	ldrh	r3, [r4, #12]
 80158fa:	f023 0303 	bic.w	r3, r3, #3
 80158fe:	f043 0301 	orr.w	r3, r3, #1
 8015902:	81a3      	strh	r3, [r4, #12]
 8015904:	89a3      	ldrh	r3, [r4, #12]
 8015906:	431d      	orrs	r5, r3
 8015908:	81a5      	strh	r5, [r4, #12]
 801590a:	e7cf      	b.n	80158ac <__smakebuf_r+0x18>

0801590c <_fstat_r>:
 801590c:	b538      	push	{r3, r4, r5, lr}
 801590e:	4d07      	ldr	r5, [pc, #28]	@ (801592c <_fstat_r+0x20>)
 8015910:	2300      	movs	r3, #0
 8015912:	4604      	mov	r4, r0
 8015914:	4608      	mov	r0, r1
 8015916:	4611      	mov	r1, r2
 8015918:	602b      	str	r3, [r5, #0]
 801591a:	f7ee fd73 	bl	8004404 <_fstat>
 801591e:	1c43      	adds	r3, r0, #1
 8015920:	d102      	bne.n	8015928 <_fstat_r+0x1c>
 8015922:	682b      	ldr	r3, [r5, #0]
 8015924:	b103      	cbz	r3, 8015928 <_fstat_r+0x1c>
 8015926:	6023      	str	r3, [r4, #0]
 8015928:	bd38      	pop	{r3, r4, r5, pc}
 801592a:	bf00      	nop
 801592c:	20006aa4 	.word	0x20006aa4

08015930 <_isatty_r>:
 8015930:	b538      	push	{r3, r4, r5, lr}
 8015932:	4d06      	ldr	r5, [pc, #24]	@ (801594c <_isatty_r+0x1c>)
 8015934:	2300      	movs	r3, #0
 8015936:	4604      	mov	r4, r0
 8015938:	4608      	mov	r0, r1
 801593a:	602b      	str	r3, [r5, #0]
 801593c:	f7ee fd72 	bl	8004424 <_isatty>
 8015940:	1c43      	adds	r3, r0, #1
 8015942:	d102      	bne.n	801594a <_isatty_r+0x1a>
 8015944:	682b      	ldr	r3, [r5, #0]
 8015946:	b103      	cbz	r3, 801594a <_isatty_r+0x1a>
 8015948:	6023      	str	r3, [r4, #0]
 801594a:	bd38      	pop	{r3, r4, r5, pc}
 801594c:	20006aa4 	.word	0x20006aa4

08015950 <abort>:
 8015950:	b508      	push	{r3, lr}
 8015952:	2006      	movs	r0, #6
 8015954:	f000 f834 	bl	80159c0 <raise>
 8015958:	2001      	movs	r0, #1
 801595a:	f7ee fd1f 	bl	800439c <_exit>

0801595e <_malloc_usable_size_r>:
 801595e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015962:	1f18      	subs	r0, r3, #4
 8015964:	2b00      	cmp	r3, #0
 8015966:	bfbc      	itt	lt
 8015968:	580b      	ldrlt	r3, [r1, r0]
 801596a:	18c0      	addlt	r0, r0, r3
 801596c:	4770      	bx	lr

0801596e <_raise_r>:
 801596e:	291f      	cmp	r1, #31
 8015970:	b538      	push	{r3, r4, r5, lr}
 8015972:	4605      	mov	r5, r0
 8015974:	460c      	mov	r4, r1
 8015976:	d904      	bls.n	8015982 <_raise_r+0x14>
 8015978:	2316      	movs	r3, #22
 801597a:	6003      	str	r3, [r0, #0]
 801597c:	f04f 30ff 	mov.w	r0, #4294967295
 8015980:	bd38      	pop	{r3, r4, r5, pc}
 8015982:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015984:	b112      	cbz	r2, 801598c <_raise_r+0x1e>
 8015986:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801598a:	b94b      	cbnz	r3, 80159a0 <_raise_r+0x32>
 801598c:	4628      	mov	r0, r5
 801598e:	f000 f831 	bl	80159f4 <_getpid_r>
 8015992:	4622      	mov	r2, r4
 8015994:	4601      	mov	r1, r0
 8015996:	4628      	mov	r0, r5
 8015998:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801599c:	f000 b818 	b.w	80159d0 <_kill_r>
 80159a0:	2b01      	cmp	r3, #1
 80159a2:	d00a      	beq.n	80159ba <_raise_r+0x4c>
 80159a4:	1c59      	adds	r1, r3, #1
 80159a6:	d103      	bne.n	80159b0 <_raise_r+0x42>
 80159a8:	2316      	movs	r3, #22
 80159aa:	6003      	str	r3, [r0, #0]
 80159ac:	2001      	movs	r0, #1
 80159ae:	e7e7      	b.n	8015980 <_raise_r+0x12>
 80159b0:	2100      	movs	r1, #0
 80159b2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80159b6:	4620      	mov	r0, r4
 80159b8:	4798      	blx	r3
 80159ba:	2000      	movs	r0, #0
 80159bc:	e7e0      	b.n	8015980 <_raise_r+0x12>
	...

080159c0 <raise>:
 80159c0:	4b02      	ldr	r3, [pc, #8]	@ (80159cc <raise+0xc>)
 80159c2:	4601      	mov	r1, r0
 80159c4:	6818      	ldr	r0, [r3, #0]
 80159c6:	f7ff bfd2 	b.w	801596e <_raise_r>
 80159ca:	bf00      	nop
 80159cc:	20000034 	.word	0x20000034

080159d0 <_kill_r>:
 80159d0:	b538      	push	{r3, r4, r5, lr}
 80159d2:	4d07      	ldr	r5, [pc, #28]	@ (80159f0 <_kill_r+0x20>)
 80159d4:	2300      	movs	r3, #0
 80159d6:	4604      	mov	r4, r0
 80159d8:	4608      	mov	r0, r1
 80159da:	4611      	mov	r1, r2
 80159dc:	602b      	str	r3, [r5, #0]
 80159de:	f7ee fccd 	bl	800437c <_kill>
 80159e2:	1c43      	adds	r3, r0, #1
 80159e4:	d102      	bne.n	80159ec <_kill_r+0x1c>
 80159e6:	682b      	ldr	r3, [r5, #0]
 80159e8:	b103      	cbz	r3, 80159ec <_kill_r+0x1c>
 80159ea:	6023      	str	r3, [r4, #0]
 80159ec:	bd38      	pop	{r3, r4, r5, pc}
 80159ee:	bf00      	nop
 80159f0:	20006aa4 	.word	0x20006aa4

080159f4 <_getpid_r>:
 80159f4:	f7ee bcba 	b.w	800436c <_getpid>

080159f8 <_init>:
 80159f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159fa:	bf00      	nop
 80159fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80159fe:	bc08      	pop	{r3}
 8015a00:	469e      	mov	lr, r3
 8015a02:	4770      	bx	lr

08015a04 <_fini>:
 8015a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a06:	bf00      	nop
 8015a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015a0a:	bc08      	pop	{r3}
 8015a0c:	469e      	mov	lr, r3
 8015a0e:	4770      	bx	lr
