
SubController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000155ac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b04  08015780  08015780  00025780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016284  08016284  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  08016284  08016284  00026284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801628c  0801628c  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801628c  0801628c  0002628c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016290  08016290  00026290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08016294  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006788  200001f8  0801648c  000301f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  20006980  0801648c  00036980  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024682  00000000  00000000  0003026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000535a  00000000  00000000  000548ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f50  00000000  00000000  00059c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000186c  00000000  00000000  0005bb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000299e7  00000000  00000000  0005d404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a831  00000000  00000000  00086deb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef09e  00000000  00000000  000b161c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000961c  00000000  00000000  001a06bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001a9cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015764 	.word	0x08015764

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	08015764 	.word	0x08015764

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b970 	b.w	8000fc0 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	460d      	mov	r5, r1
 8000d00:	4604      	mov	r4, r0
 8000d02:	460f      	mov	r7, r1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d14a      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4694      	mov	ip, r2
 8000d0c:	d965      	bls.n	8000dda <__udivmoddi4+0xe2>
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	b143      	cbz	r3, 8000d26 <__udivmoddi4+0x2e>
 8000d14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d18:	f1c3 0220 	rsb	r2, r3, #32
 8000d1c:	409f      	lsls	r7, r3
 8000d1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d22:	4317      	orrs	r7, r2
 8000d24:	409c      	lsls	r4, r3
 8000d26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d2a:	fa1f f58c 	uxth.w	r5, ip
 8000d2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d32:	0c22      	lsrs	r2, r4, #16
 8000d34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d3c:	fb01 f005 	mul.w	r0, r1, r5
 8000d40:	4290      	cmp	r0, r2
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x62>
 8000d44:	eb1c 0202 	adds.w	r2, ip, r2
 8000d48:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d4c:	f080 811c 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d50:	4290      	cmp	r0, r2
 8000d52:	f240 8119 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d56:	3902      	subs	r1, #2
 8000d58:	4462      	add	r2, ip
 8000d5a:	1a12      	subs	r2, r2, r0
 8000d5c:	b2a4      	uxth	r4, r4
 8000d5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d6a:	fb00 f505 	mul.w	r5, r0, r5
 8000d6e:	42a5      	cmp	r5, r4
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x90>
 8000d72:	eb1c 0404 	adds.w	r4, ip, r4
 8000d76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d7a:	f080 8107 	bcs.w	8000f8c <__udivmoddi4+0x294>
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	f240 8104 	bls.w	8000f8c <__udivmoddi4+0x294>
 8000d84:	4464      	add	r4, ip
 8000d86:	3802      	subs	r0, #2
 8000d88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d8c:	1b64      	subs	r4, r4, r5
 8000d8e:	2100      	movs	r1, #0
 8000d90:	b11e      	cbz	r6, 8000d9a <__udivmoddi4+0xa2>
 8000d92:	40dc      	lsrs	r4, r3
 8000d94:	2300      	movs	r3, #0
 8000d96:	e9c6 4300 	strd	r4, r3, [r6]
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0xbc>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80ed 	beq.w	8000f82 <__udivmoddi4+0x28a>
 8000da8:	2100      	movs	r1, #0
 8000daa:	e9c6 0500 	strd	r0, r5, [r6]
 8000dae:	4608      	mov	r0, r1
 8000db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db4:	fab3 f183 	clz	r1, r3
 8000db8:	2900      	cmp	r1, #0
 8000dba:	d149      	bne.n	8000e50 <__udivmoddi4+0x158>
 8000dbc:	42ab      	cmp	r3, r5
 8000dbe:	d302      	bcc.n	8000dc6 <__udivmoddi4+0xce>
 8000dc0:	4282      	cmp	r2, r0
 8000dc2:	f200 80f8 	bhi.w	8000fb6 <__udivmoddi4+0x2be>
 8000dc6:	1a84      	subs	r4, r0, r2
 8000dc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dcc:	2001      	movs	r0, #1
 8000dce:	4617      	mov	r7, r2
 8000dd0:	2e00      	cmp	r6, #0
 8000dd2:	d0e2      	beq.n	8000d9a <__udivmoddi4+0xa2>
 8000dd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000dd8:	e7df      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xe6>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f382 	clz	r3, r2
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f040 8090 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000de8:	1a8a      	subs	r2, r1, r2
 8000dea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dee:	fa1f fe8c 	uxth.w	lr, ip
 8000df2:	2101      	movs	r1, #1
 8000df4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000df8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dfc:	0c22      	lsrs	r2, r4, #16
 8000dfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e02:	fb0e f005 	mul.w	r0, lr, r5
 8000e06:	4290      	cmp	r0, r2
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4290      	cmp	r0, r2
 8000e16:	f200 80cb 	bhi.w	8000fb0 <__udivmoddi4+0x2b8>
 8000e1a:	4645      	mov	r5, r8
 8000e1c:	1a12      	subs	r2, r2, r0
 8000e1e:	b2a4      	uxth	r4, r4
 8000e20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e24:	fb07 2210 	mls	r2, r7, r0, r2
 8000e28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e30:	45a6      	cmp	lr, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x14e>
 8000e34:	eb1c 0404 	adds.w	r4, ip, r4
 8000e38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e3c:	d202      	bcs.n	8000e44 <__udivmoddi4+0x14c>
 8000e3e:	45a6      	cmp	lr, r4
 8000e40:	f200 80bb 	bhi.w	8000fba <__udivmoddi4+0x2c2>
 8000e44:	4610      	mov	r0, r2
 8000e46:	eba4 040e 	sub.w	r4, r4, lr
 8000e4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e4e:	e79f      	b.n	8000d90 <__udivmoddi4+0x98>
 8000e50:	f1c1 0720 	rsb	r7, r1, #32
 8000e54:	408b      	lsls	r3, r1
 8000e56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e62:	fa20 f307 	lsr.w	r3, r0, r7
 8000e66:	40fd      	lsrs	r5, r7
 8000e68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e6c:	4323      	orrs	r3, r4
 8000e6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	fb09 5518 	mls	r5, r9, r8, r5
 8000e7a:	0c1c      	lsrs	r4, r3, #16
 8000e7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e80:	fb08 f50e 	mul.w	r5, r8, lr
 8000e84:	42a5      	cmp	r5, r4
 8000e86:	fa02 f201 	lsl.w	r2, r2, r1
 8000e8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e98:	f080 8088 	bcs.w	8000fac <__udivmoddi4+0x2b4>
 8000e9c:	42a5      	cmp	r5, r4
 8000e9e:	f240 8085 	bls.w	8000fac <__udivmoddi4+0x2b4>
 8000ea2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea6:	4464      	add	r4, ip
 8000ea8:	1b64      	subs	r4, r4, r5
 8000eaa:	b29d      	uxth	r5, r3
 8000eac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eb0:	fb09 4413 	mls	r4, r9, r3, r4
 8000eb4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000eb8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ebc:	45a6      	cmp	lr, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ec8:	d26c      	bcs.n	8000fa4 <__udivmoddi4+0x2ac>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	d96a      	bls.n	8000fa4 <__udivmoddi4+0x2ac>
 8000ece:	3b02      	subs	r3, #2
 8000ed0:	4464      	add	r4, ip
 8000ed2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ed6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eda:	eba4 040e 	sub.w	r4, r4, lr
 8000ede:	42ac      	cmp	r4, r5
 8000ee0:	46c8      	mov	r8, r9
 8000ee2:	46ae      	mov	lr, r5
 8000ee4:	d356      	bcc.n	8000f94 <__udivmoddi4+0x29c>
 8000ee6:	d053      	beq.n	8000f90 <__udivmoddi4+0x298>
 8000ee8:	b156      	cbz	r6, 8000f00 <__udivmoddi4+0x208>
 8000eea:	ebb0 0208 	subs.w	r2, r0, r8
 8000eee:	eb64 040e 	sbc.w	r4, r4, lr
 8000ef2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ef6:	40ca      	lsrs	r2, r1
 8000ef8:	40cc      	lsrs	r4, r1
 8000efa:	4317      	orrs	r7, r2
 8000efc:	e9c6 7400 	strd	r7, r4, [r6]
 8000f00:	4618      	mov	r0, r3
 8000f02:	2100      	movs	r1, #0
 8000f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f08:	f1c3 0120 	rsb	r1, r3, #32
 8000f0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f10:	fa20 f201 	lsr.w	r2, r0, r1
 8000f14:	fa25 f101 	lsr.w	r1, r5, r1
 8000f18:	409d      	lsls	r5, r3
 8000f1a:	432a      	orrs	r2, r5
 8000f1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f20:	fa1f fe8c 	uxth.w	lr, ip
 8000f24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f28:	fb07 1510 	mls	r5, r7, r0, r1
 8000f2c:	0c11      	lsrs	r1, r2, #16
 8000f2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f32:	fb00 f50e 	mul.w	r5, r0, lr
 8000f36:	428d      	cmp	r5, r1
 8000f38:	fa04 f403 	lsl.w	r4, r4, r3
 8000f3c:	d908      	bls.n	8000f50 <__udivmoddi4+0x258>
 8000f3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f46:	d22f      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f48:	428d      	cmp	r5, r1
 8000f4a:	d92d      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	4461      	add	r1, ip
 8000f50:	1b49      	subs	r1, r1, r5
 8000f52:	b292      	uxth	r2, r2
 8000f54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f58:	fb07 1115 	mls	r1, r7, r5, r1
 8000f5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f60:	fb05 f10e 	mul.w	r1, r5, lr
 8000f64:	4291      	cmp	r1, r2
 8000f66:	d908      	bls.n	8000f7a <__udivmoddi4+0x282>
 8000f68:	eb1c 0202 	adds.w	r2, ip, r2
 8000f6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f70:	d216      	bcs.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f72:	4291      	cmp	r1, r2
 8000f74:	d914      	bls.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f76:	3d02      	subs	r5, #2
 8000f78:	4462      	add	r2, ip
 8000f7a:	1a52      	subs	r2, r2, r1
 8000f7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f80:	e738      	b.n	8000df4 <__udivmoddi4+0xfc>
 8000f82:	4631      	mov	r1, r6
 8000f84:	4630      	mov	r0, r6
 8000f86:	e708      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000f88:	4639      	mov	r1, r7
 8000f8a:	e6e6      	b.n	8000d5a <__udivmoddi4+0x62>
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	e6fb      	b.n	8000d88 <__udivmoddi4+0x90>
 8000f90:	4548      	cmp	r0, r9
 8000f92:	d2a9      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f94:	ebb9 0802 	subs.w	r8, r9, r2
 8000f98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	e7a3      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000fa0:	4645      	mov	r5, r8
 8000fa2:	e7ea      	b.n	8000f7a <__udivmoddi4+0x282>
 8000fa4:	462b      	mov	r3, r5
 8000fa6:	e794      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa8:	4640      	mov	r0, r8
 8000faa:	e7d1      	b.n	8000f50 <__udivmoddi4+0x258>
 8000fac:	46d0      	mov	r8, sl
 8000fae:	e77b      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fb0:	3d02      	subs	r5, #2
 8000fb2:	4462      	add	r2, ip
 8000fb4:	e732      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e70a      	b.n	8000dd0 <__udivmoddi4+0xd8>
 8000fba:	4464      	add	r4, ip
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	e742      	b.n	8000e46 <__udivmoddi4+0x14e>

08000fc0 <__aeabi_idiv0>:
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <Bar30init>:
#include "Bar30.h"
#include "stm32f4xx.h"
extern I2C_HandleTypeDef hi2c2;
HAL_StatusTypeDef halStatus;
void Bar30init(Bar30* sensor, I2C_HandleTypeDef* i2cHandle)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
	sensor->i2cHandle=i2cHandle;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	683a      	ldr	r2, [r7, #0]
 8000fd2:	601a      	str	r2, [r3, #0]

	for(int i=0; i<7;i++)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	e009      	b.n	8000fee <Bar30init+0x2a>
	{
		sensor->calibrationResult[i]=0;
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	3308      	adds	r3, #8
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	4413      	add	r3, r2
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	809a      	strh	r2, [r3, #4]
	for(int i=0; i<7;i++)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	3301      	adds	r3, #1
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2b06      	cmp	r3, #6
 8000ff2:	ddf2      	ble.n	8000fda <Bar30init+0x16>
	}
	sensor->rxFlag=0;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sensor->conversionCompleteFlag=0;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	sensor->dT=0;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	625a      	str	r2, [r3, #36]	; 0x24
	sensor->actualPressure=0;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	60da      	str	r2, [r3, #12]
	sensor->actualTemperature=0;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
	sensor->rawPressure=0;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	605a      	str	r2, [r3, #4]
	sensor->rawTemperature=0;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
}
 8001022:	bf00      	nop
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <Bar30reset>:



uint8_t Bar30reset(Bar30* sensor)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af02      	add	r7, sp, #8
 8001036:	6078      	str	r0, [r7, #4]
	uint8_t cmdByte=RESET_CMD;
 8001038:	231e      	movs	r3, #30
 800103a:	73bb      	strb	r3, [r7, #14]
	uint8_t numBytes=1;
 800103c:	2301      	movs	r3, #1
 800103e:	73fb      	strb	r3, [r7, #15]
	halStatus=(HAL_I2C_Master_Transmit(sensor->i2cHandle, BAR30_I2C_ADD, &cmdByte, numBytes, HAL_MAX_DELAY));
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6818      	ldr	r0, [r3, #0]
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	b29b      	uxth	r3, r3
 8001048:	f107 020e 	add.w	r2, r7, #14
 800104c:	f04f 31ff 	mov.w	r1, #4294967295
 8001050:	9100      	str	r1, [sp, #0]
 8001052:	21ec      	movs	r1, #236	; 0xec
 8001054:	f004 fd7a 	bl	8005b4c <HAL_I2C_Master_Transmit>
 8001058:	4603      	mov	r3, r0
 800105a:	461a      	mov	r2, r3
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <Bar30reset+0x48>)
 800105e:	701a      	strb	r2, [r3, #0]
	return halStatus==HAL_OK;
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <Bar30reset+0x48>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	bf0c      	ite	eq
 8001068:	2301      	moveq	r3, #1
 800106a:	2300      	movne	r3, #0
 800106c:	b2db      	uxtb	r3, r3
}
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000214 	.word	0x20000214

0800107c <Bar30getCalibration>:



uint8_t Bar30getCalibration(Bar30* sensor)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b088      	sub	sp, #32
 8001080:	af02      	add	r7, sp, #8
 8001082:	6078      	str	r0, [r7, #4]
	uint8_t errorCount=0;
 8001084:	2300      	movs	r3, #0
 8001086:	75fb      	strb	r3, [r7, #23]
	uint8_t numTxBytes=1;
 8001088:	2301      	movs	r3, #1
 800108a:	73fb      	strb	r3, [r7, #15]
	uint8_t numRxBytes=2;
 800108c:	2302      	movs	r3, #2
 800108e:	73bb      	strb	r3, [r7, #14]
	uint8_t rxBuffer[2];
	uint8_t cmdByte;

	for (int i=0;i<7;i++)
 8001090:	2300      	movs	r3, #0
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	e041      	b.n	800111a <Bar30getCalibration+0x9e>
	{
		cmdByte=READ_PROM_CMD_1+2*i;
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	3350      	adds	r3, #80	; 0x50
 800109a:	b2db      	uxtb	r3, r3
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	72fb      	strb	r3, [r7, #11]
		halStatus=HAL_I2C_Master_Transmit(sensor->i2cHandle, BAR30_I2C_ADD, &cmdByte, numTxBytes, HAL_MAX_DELAY);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6818      	ldr	r0, [r3, #0]
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	f107 020b 	add.w	r2, r7, #11
 80010ae:	f04f 31ff 	mov.w	r1, #4294967295
 80010b2:	9100      	str	r1, [sp, #0]
 80010b4:	21ec      	movs	r1, #236	; 0xec
 80010b6:	f004 fd49 	bl	8005b4c <HAL_I2C_Master_Transmit>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <Bar30getCalibration+0xb8>)
 80010c0:	701a      	strb	r2, [r3, #0]
		if(halStatus!=HAL_OK)
 80010c2:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <Bar30getCalibration+0xb8>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d002      	beq.n	80010d0 <Bar30getCalibration+0x54>
		{
			errorCount+=1;
 80010ca:	7dfb      	ldrb	r3, [r7, #23]
 80010cc:	3301      	adds	r3, #1
 80010ce:	75fb      	strb	r3, [r7, #23]
		}
		halStatus==HAL_I2C_Master_Receive(sensor->i2cHandle, BAR30_I2C_ADD, &rxBuffer[0], numRxBytes, HAL_MAX_DELAY);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6818      	ldr	r0, [r3, #0]
 80010d4:	7bbb      	ldrb	r3, [r7, #14]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	f107 020c 	add.w	r2, r7, #12
 80010dc:	f04f 31ff 	mov.w	r1, #4294967295
 80010e0:	9100      	str	r1, [sp, #0]
 80010e2:	21ec      	movs	r1, #236	; 0xec
 80010e4:	f004 fe30 	bl	8005d48 <HAL_I2C_Master_Receive>
		if(halStatus!=HAL_OK)
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <Bar30getCalibration+0xb8>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d002      	beq.n	80010f6 <Bar30getCalibration+0x7a>
		{
			errorCount+=1;
 80010f0:	7dfb      	ldrb	r3, [r7, #23]
 80010f2:	3301      	adds	r3, #1
 80010f4:	75fb      	strb	r3, [r7, #23]
		}
		sensor->calibrationResult[i]=(uint16_t)((rxBuffer[0] << 8) | rxBuffer[1]);
 80010f6:	7b3b      	ldrb	r3, [r7, #12]
 80010f8:	021b      	lsls	r3, r3, #8
 80010fa:	b21a      	sxth	r2, r3
 80010fc:	7b7b      	ldrb	r3, [r7, #13]
 80010fe:	b21b      	sxth	r3, r3
 8001100:	4313      	orrs	r3, r2
 8001102:	b21b      	sxth	r3, r3
 8001104:	b299      	uxth	r1, r3
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	3308      	adds	r3, #8
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	4413      	add	r3, r2
 8001110:	460a      	mov	r2, r1
 8001112:	809a      	strh	r2, [r3, #4]
	for (int i=0;i<7;i++)
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	3301      	adds	r3, #1
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	2b06      	cmp	r3, #6
 800111e:	ddba      	ble.n	8001096 <Bar30getCalibration+0x1a>
	}
	return errorCount==0;
 8001120:	7dfb      	ldrb	r3, [r7, #23]
 8001122:	2b00      	cmp	r3, #0
 8001124:	bf0c      	ite	eq
 8001126:	2301      	moveq	r3, #1
 8001128:	2300      	movne	r3, #0
 800112a:	b2db      	uxtb	r3, r3

}
 800112c:	4618      	mov	r0, r3
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000214 	.word	0x20000214

08001138 <Bar30getData>:



uint8_t Bar30getData(Bar30* sensor)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	uint8_t conversionGood=1;
 8001140:	2301      	movs	r3, #1
 8001142:	73fb      	strb	r3, [r7, #15]
	halStatus=initiatePressureConversion(sensor);
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f000 f845 	bl	80011d4 <initiatePressureConversion>
 800114a:	4603      	mov	r3, r0
 800114c:	461a      	mov	r2, r3
 800114e:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <Bar30getData+0x98>)
 8001150:	701a      	strb	r2, [r3, #0]
	if(halStatus!=HAL_OK)
 8001152:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <Bar30getData+0x98>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <Bar30getData+0x26>
		conversionGood=0;
 800115a:	2300      	movs	r3, #0
 800115c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(3);
 800115e:	2003      	movs	r0, #3
 8001160:	f002 ff8c 	bl	800407c <HAL_Delay>
	halStatus=readPressureData(sensor);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f000 f871 	bl	800124c <readPressureData>
 800116a:	4603      	mov	r3, r0
 800116c:	461a      	mov	r2, r3
 800116e:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <Bar30getData+0x98>)
 8001170:	701a      	strb	r2, [r3, #0]
	if(halStatus!=HAL_OK)
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <Bar30getData+0x98>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <Bar30getData+0x46>
		conversionGood=0;
 800117a:	2300      	movs	r3, #0
 800117c:	73fb      	strb	r3, [r7, #15]

	halStatus=initiateTemperatureConversion(sensor);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f000 f846 	bl	8001210 <initiateTemperatureConversion>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <Bar30getData+0x98>)
 800118a:	701a      	strb	r2, [r3, #0]
	if(halStatus!=HAL_OK)
 800118c:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <Bar30getData+0x98>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <Bar30getData+0x60>
		conversionGood=0;
 8001194:	2300      	movs	r3, #0
 8001196:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(3);
 8001198:	2003      	movs	r0, #3
 800119a:	f002 ff6f 	bl	800407c <HAL_Delay>
	halStatus=readTemperatureData(sensor);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f000 f894 	bl	80012cc <readTemperatureData>
 80011a4:	4603      	mov	r3, r0
 80011a6:	461a      	mov	r2, r3
 80011a8:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <Bar30getData+0x98>)
 80011aa:	701a      	strb	r2, [r3, #0]
	if(halStatus!=HAL_OK)
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <Bar30getData+0x98>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <Bar30getData+0x80>
		conversionGood=0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	73fb      	strb	r3, [r7, #15]
	calculateTemperature(sensor);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 f921 	bl	8001400 <calculateTemperature>
	calculatePressure(sensor);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f000 f964 	bl	800148c <calculatePressure>
	return conversionGood;
 80011c4:	7bfb      	ldrb	r3, [r7, #15]

}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000214 	.word	0x20000214

080011d4 <initiatePressureConversion>:

HAL_StatusTypeDef initiatePressureConversion(Bar30* sensor)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af02      	add	r7, sp, #8
 80011da:	6078      	str	r0, [r7, #4]
	uint8_t cmdByte=PRESSURE_CONVERSION_CMD;
 80011dc:	2344      	movs	r3, #68	; 0x44
 80011de:	73fb      	strb	r3, [r7, #15]
	halStatus=HAL_I2C_Master_Transmit(sensor->i2cHandle,BAR30_I2C_ADD,&cmdByte,1,HAL_MAX_DELAY);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6818      	ldr	r0, [r3, #0]
 80011e4:	f107 020f 	add.w	r2, r7, #15
 80011e8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	2301      	movs	r3, #1
 80011f0:	21ec      	movs	r1, #236	; 0xec
 80011f2:	f004 fcab 	bl	8005b4c <HAL_I2C_Master_Transmit>
 80011f6:	4603      	mov	r3, r0
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b04      	ldr	r3, [pc, #16]	; (800120c <initiatePressureConversion+0x38>)
 80011fc:	701a      	strb	r2, [r3, #0]
	return halStatus;
 80011fe:	4b03      	ldr	r3, [pc, #12]	; (800120c <initiatePressureConversion+0x38>)
 8001200:	781b      	ldrb	r3, [r3, #0]


}
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000214 	.word	0x20000214

08001210 <initiateTemperatureConversion>:
HAL_StatusTypeDef initiateTemperatureConversion(Bar30* sensor)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af02      	add	r7, sp, #8
 8001216:	6078      	str	r0, [r7, #4]
	uint8_t cmdByte=TEMP_CONVERSION_CMD;
 8001218:	2354      	movs	r3, #84	; 0x54
 800121a:	73fb      	strb	r3, [r7, #15]
	halStatus= HAL_I2C_Master_Transmit(sensor->i2cHandle,BAR30_I2C_ADD,&cmdByte,1,HAL_MAX_DELAY);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6818      	ldr	r0, [r3, #0]
 8001220:	f107 020f 	add.w	r2, r7, #15
 8001224:	f04f 33ff 	mov.w	r3, #4294967295
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	2301      	movs	r3, #1
 800122c:	21ec      	movs	r1, #236	; 0xec
 800122e:	f004 fc8d 	bl	8005b4c <HAL_I2C_Master_Transmit>
 8001232:	4603      	mov	r3, r0
 8001234:	461a      	mov	r2, r3
 8001236:	4b04      	ldr	r3, [pc, #16]	; (8001248 <initiateTemperatureConversion+0x38>)
 8001238:	701a      	strb	r2, [r3, #0]
	return halStatus;
 800123a:	4b03      	ldr	r3, [pc, #12]	; (8001248 <initiateTemperatureConversion+0x38>)
 800123c:	781b      	ldrb	r3, [r3, #0]

}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000214 	.word	0x20000214

0800124c <readPressureData>:
HAL_StatusTypeDef readPressureData(Bar30* sensor){
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af02      	add	r7, sp, #8
 8001252:	6078      	str	r0, [r7, #4]
	uint8_t cmdByte=READ_RESULT_CMD;
 8001254:	2300      	movs	r3, #0
 8001256:	73fb      	strb	r3, [r7, #15]
	uint8_t rxBuffer[3];
	halStatus= HAL_I2C_Master_Transmit(sensor->i2cHandle,BAR30_I2C_ADD,&cmdByte,1,HAL_MAX_DELAY);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6818      	ldr	r0, [r3, #0]
 800125c:	f107 020f 	add.w	r2, r7, #15
 8001260:	f04f 33ff 	mov.w	r3, #4294967295
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	2301      	movs	r3, #1
 8001268:	21ec      	movs	r1, #236	; 0xec
 800126a:	f004 fc6f 	bl	8005b4c <HAL_I2C_Master_Transmit>
 800126e:	4603      	mov	r3, r0
 8001270:	461a      	mov	r2, r3
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <readPressureData+0x7c>)
 8001274:	701a      	strb	r2, [r3, #0]
	halStatus=HAL_I2C_Master_Receive(sensor->i2cHandle, BAR30_I2C_ADD, rxBuffer, 3, HAL_MAX_DELAY);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6818      	ldr	r0, [r3, #0]
 800127a:	f107 020c 	add.w	r2, r7, #12
 800127e:	f04f 33ff 	mov.w	r3, #4294967295
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	2303      	movs	r3, #3
 8001286:	21ec      	movs	r1, #236	; 0xec
 8001288:	f004 fd5e 	bl	8005d48 <HAL_I2C_Master_Receive>
 800128c:	4603      	mov	r3, r0
 800128e:	461a      	mov	r2, r3
 8001290:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <readPressureData+0x7c>)
 8001292:	701a      	strb	r2, [r3, #0]
	sensor->rawPressure|=((uint32_t)rxBuffer[0]<<16);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	7b3b      	ldrb	r3, [r7, #12]
 800129a:	041b      	lsls	r3, r3, #16
 800129c:	431a      	orrs	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	605a      	str	r2, [r3, #4]
	sensor->rawPressure|=((uint32_t)rxBuffer[1]<<8);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	7b7b      	ldrb	r3, [r7, #13]
 80012a8:	021b      	lsls	r3, r3, #8
 80012aa:	431a      	orrs	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	605a      	str	r2, [r3, #4]
	sensor->rawPressure|=rxBuffer[2];
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	7bba      	ldrb	r2, [r7, #14]
 80012b6:	431a      	orrs	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	605a      	str	r2, [r3, #4]
	return halStatus;
 80012bc:	4b02      	ldr	r3, [pc, #8]	; (80012c8 <readPressureData+0x7c>)
 80012be:	781b      	ldrb	r3, [r3, #0]

}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000214 	.word	0x20000214

080012cc <readTemperatureData>:

HAL_StatusTypeDef readTemperatureData(Bar30* sensor)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af02      	add	r7, sp, #8
 80012d2:	6078      	str	r0, [r7, #4]
	uint8_t cmdByte=READ_RESULT_CMD;
 80012d4:	2300      	movs	r3, #0
 80012d6:	73fb      	strb	r3, [r7, #15]
	uint8_t rxBuffer[3];
	halStatus= HAL_I2C_Master_Transmit(sensor->i2cHandle,BAR30_I2C_ADD,&cmdByte,1,HAL_MAX_DELAY);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6818      	ldr	r0, [r3, #0]
 80012dc:	f107 020f 	add.w	r2, r7, #15
 80012e0:	f04f 33ff 	mov.w	r3, #4294967295
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	2301      	movs	r3, #1
 80012e8:	21ec      	movs	r1, #236	; 0xec
 80012ea:	f004 fc2f 	bl	8005b4c <HAL_I2C_Master_Transmit>
 80012ee:	4603      	mov	r3, r0
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <readTemperatureData+0x7c>)
 80012f4:	701a      	strb	r2, [r3, #0]
	halStatus=HAL_I2C_Master_Receive(sensor->i2cHandle, BAR30_I2C_ADD, rxBuffer, 3, HAL_MAX_DELAY);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6818      	ldr	r0, [r3, #0]
 80012fa:	f107 020c 	add.w	r2, r7, #12
 80012fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	2303      	movs	r3, #3
 8001306:	21ec      	movs	r1, #236	; 0xec
 8001308:	f004 fd1e 	bl	8005d48 <HAL_I2C_Master_Receive>
 800130c:	4603      	mov	r3, r0
 800130e:	461a      	mov	r2, r3
 8001310:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <readTemperatureData+0x7c>)
 8001312:	701a      	strb	r2, [r3, #0]
	sensor->rawTemperature|=((uint32_t)rxBuffer[0]<<16);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	7b3b      	ldrb	r3, [r7, #12]
 800131a:	041b      	lsls	r3, r3, #16
 800131c:	431a      	orrs	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	609a      	str	r2, [r3, #8]
	sensor->rawTemperature|=((uint32_t)rxBuffer[1]<<8);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	7b7b      	ldrb	r3, [r7, #13]
 8001328:	021b      	lsls	r3, r3, #8
 800132a:	431a      	orrs	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	609a      	str	r2, [r3, #8]
	sensor->rawTemperature|=rxBuffer[2];
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	7bba      	ldrb	r2, [r7, #14]
 8001336:	431a      	orrs	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	609a      	str	r2, [r3, #8]


	return halStatus;
 800133c:	4b02      	ldr	r3, [pc, #8]	; (8001348 <readTemperatureData+0x7c>)
 800133e:	781b      	ldrb	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000214 	.word	0x20000214

0800134c <Bar30CRCcheck>:


uint8_t Bar30CRCcheck(uint16_t* promData)
{
 800134c:	b480      	push	{r7}
 800134e:	b087      	sub	sp, #28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	uint8_t cnt;
	uint32_t remainder=0;
 8001354:	2300      	movs	r3, #0
 8001356:	613b      	str	r3, [r7, #16]
	uint8_t nbit;
	promData[0]=((promData[0])&0x0FFF);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001360:	b29a      	uxth	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	801a      	strh	r2, [r3, #0]
	for(cnt=0;cnt<16;cnt++)
 8001366:	2300      	movs	r3, #0
 8001368:	75fb      	strb	r3, [r7, #23]
 800136a:	e035      	b.n	80013d8 <Bar30CRCcheck+0x8c>
	{
		if(cnt%2==1)
 800136c:	7dfb      	ldrb	r3, [r7, #23]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	b2db      	uxtb	r3, r3
 8001374:	2b00      	cmp	r3, #0
 8001376:	d00b      	beq.n	8001390 <Bar30CRCcheck+0x44>
			remainder^=(uint16_t)((promData[cnt>>1])& 0x00FF);
 8001378:	7dfb      	ldrb	r3, [r7, #23]
 800137a:	085b      	lsrs	r3, r3, #1
 800137c:	b2db      	uxtb	r3, r3
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	4413      	add	r3, r2
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	b2db      	uxtb	r3, r3
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4053      	eors	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
 800138e:	e009      	b.n	80013a4 <Bar30CRCcheck+0x58>
		else
			remainder=(uint16_t)(promData[cnt>>1]>>8);
 8001390:	7dfb      	ldrb	r3, [r7, #23]
 8001392:	085b      	lsrs	r3, r3, #1
 8001394:	b2db      	uxtb	r3, r3
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	4413      	add	r3, r2
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	0a1b      	lsrs	r3, r3, #8
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	613b      	str	r3, [r7, #16]
		for(nbit=8;nbit>0;nbit--)
 80013a4:	2308      	movs	r3, #8
 80013a6:	73fb      	strb	r3, [r7, #15]
 80013a8:	e010      	b.n	80013cc <Bar30CRCcheck+0x80>
		{
			if(remainder&(0x8000))
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d005      	beq.n	80013c0 <Bar30CRCcheck+0x74>
				remainder=(remainder<<1)^0x3000;
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	e002      	b.n	80013c6 <Bar30CRCcheck+0x7a>
			else
				remainder=(remainder<<1);
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	613b      	str	r3, [r7, #16]
		for(nbit=8;nbit>0;nbit--)
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	3b01      	subs	r3, #1
 80013ca:	73fb      	strb	r3, [r7, #15]
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1eb      	bne.n	80013aa <Bar30CRCcheck+0x5e>
	for(cnt=0;cnt<16;cnt++)
 80013d2:	7dfb      	ldrb	r3, [r7, #23]
 80013d4:	3301      	adds	r3, #1
 80013d6:	75fb      	strb	r3, [r7, #23]
 80013d8:	7dfb      	ldrb	r3, [r7, #23]
 80013da:	2b0f      	cmp	r3, #15
 80013dc:	d9c6      	bls.n	800136c <Bar30CRCcheck+0x20>
		}
	}
	remainder=((remainder>>12)&0x000F);
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	0b1b      	lsrs	r3, r3, #12
 80013e2:	f003 030f 	and.w	r3, r3, #15
 80013e6:	613b      	str	r3, [r7, #16]
	return ((remainder^0x00)==0);
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	bf0c      	ite	eq
 80013ee:	2301      	moveq	r3, #1
 80013f0:	2300      	movne	r3, #0
 80013f2:	b2db      	uxtb	r3, r3



}
 80013f4:	4618      	mov	r0, r3
 80013f6:	371c      	adds	r7, #28
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <calculateTemperature>:

void calculateTemperature(Bar30* sensor)
{
 8001400:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001404:	b085      	sub	sp, #20
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
	int32_t temperature=0;
 800140a:	2100      	movs	r1, #0
 800140c:	60f9      	str	r1, [r7, #12]
	sensor->dT=sensor->rawTemperature-((uint32_t)(sensor->calibrationResult[5])*256l);
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	6888      	ldr	r0, [r1, #8]
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	8bc9      	ldrh	r1, [r1, #30]
 8001416:	0209      	lsls	r1, r1, #8
 8001418:	1a41      	subs	r1, r0, r1
 800141a:	4608      	mov	r0, r1
 800141c:	6879      	ldr	r1, [r7, #4]
 800141e:	6248      	str	r0, [r1, #36]	; 0x24
	temperature=2000l+(int64_t)(sensor->dT)*sensor->calibrationResult[6]/8388608LL;
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8001424:	17c8      	asrs	r0, r1, #31
 8001426:	4688      	mov	r8, r1
 8001428:	4681      	mov	r9, r0
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	8c09      	ldrh	r1, [r1, #32]
 800142e:	b289      	uxth	r1, r1
 8001430:	2000      	movs	r0, #0
 8001432:	460c      	mov	r4, r1
 8001434:	4605      	mov	r5, r0
 8001436:	fb04 f009 	mul.w	r0, r4, r9
 800143a:	fb08 f105 	mul.w	r1, r8, r5
 800143e:	4401      	add	r1, r0
 8001440:	fba8 2304 	umull	r2, r3, r8, r4
 8001444:	4419      	add	r1, r3
 8001446:	460b      	mov	r3, r1
 8001448:	2b00      	cmp	r3, #0
 800144a:	da06      	bge.n	800145a <calculateTemperature+0x5a>
 800144c:	490e      	ldr	r1, [pc, #56]	; (8001488 <calculateTemperature+0x88>)
 800144e:	eb12 0a01 	adds.w	sl, r2, r1
 8001452:	f143 0b00 	adc.w	fp, r3, #0
 8001456:	4652      	mov	r2, sl
 8001458:	465b      	mov	r3, fp
 800145a:	f04f 0000 	mov.w	r0, #0
 800145e:	f04f 0100 	mov.w	r1, #0
 8001462:	0dd0      	lsrs	r0, r2, #23
 8001464:	ea40 2043 	orr.w	r0, r0, r3, lsl #9
 8001468:	15d9      	asrs	r1, r3, #23
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	4613      	mov	r3, r2
 8001470:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001474:	60fb      	str	r3, [r7, #12]
	sensor->actualTemperature=temperature;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	611a      	str	r2, [r3, #16]


}
 800147c:	bf00      	nop
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001486:	4770      	bx	lr
 8001488:	007fffff 	.word	0x007fffff

0800148c <calculatePressure>:

void calculatePressure(Bar30* sensor)
{
 800148c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001490:	b099      	sub	sp, #100	; 0x64
 8001492:	af00      	add	r7, sp, #0
 8001494:	6478      	str	r0, [r7, #68]	; 0x44
	int32_t dT=sensor->dT;
 8001496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149a:	65fb      	str	r3, [r7, #92]	; 0x5c
	int64_t offset=0;
 800149c:	f04f 0200 	mov.w	r2, #0
 80014a0:	f04f 0300 	mov.w	r3, #0
 80014a4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	int64_t sensitivity=0;
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	f04f 0300 	mov.w	r3, #0
 80014b0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	offset=((int64_t)sensor->calibrationResult[2]*65536l) + ((int64_t)(sensor->calibrationResult[4] * dT)/128l);
 80014b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014b6:	8b1b      	ldrh	r3, [r3, #24]
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	2200      	movs	r2, #0
 80014bc:	461c      	mov	r4, r3
 80014be:	4615      	mov	r5, r2
 80014c0:	f04f 0000 	mov.w	r0, #0
 80014c4:	f04f 0100 	mov.w	r1, #0
 80014c8:	0429      	lsls	r1, r5, #16
 80014ca:	ea41 4114 	orr.w	r1, r1, r4, lsr #16
 80014ce:	0420      	lsls	r0, r4, #16
 80014d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014d2:	8b9b      	ldrh	r3, [r3, #28]
 80014d4:	461a      	mov	r2, r3
 80014d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014d8:	fb02 f303 	mul.w	r3, r2, r3
 80014dc:	2b00      	cmp	r3, #0
 80014de:	da00      	bge.n	80014e2 <calculatePressure+0x56>
 80014e0:	337f      	adds	r3, #127	; 0x7f
 80014e2:	11db      	asrs	r3, r3, #7
 80014e4:	17da      	asrs	r2, r3, #31
 80014e6:	469a      	mov	sl, r3
 80014e8:	4693      	mov	fp, r2
 80014ea:	eb10 030a 	adds.w	r3, r0, sl
 80014ee:	61bb      	str	r3, [r7, #24]
 80014f0:	eb41 030b 	adc.w	r3, r1, fp
 80014f4:	61fb      	str	r3, [r7, #28]
 80014f6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80014fa:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	sensitivity = (((int64_t)sensor->calibrationResult[1]*32768l)) + (((int64_t)(dT * sensor->calibrationResult[3]))/256l);
 80014fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001500:	8adb      	ldrh	r3, [r3, #22]
 8001502:	b29b      	uxth	r3, r3
 8001504:	2200      	movs	r2, #0
 8001506:	4698      	mov	r8, r3
 8001508:	4691      	mov	r9, r2
 800150a:	f04f 0000 	mov.w	r0, #0
 800150e:	f04f 0100 	mov.w	r1, #0
 8001512:	ea4f 31c9 	mov.w	r1, r9, lsl #15
 8001516:	ea41 4158 	orr.w	r1, r1, r8, lsr #17
 800151a:	ea4f 30c8 	mov.w	r0, r8, lsl #15
 800151e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001520:	8b5b      	ldrh	r3, [r3, #26]
 8001522:	461a      	mov	r2, r3
 8001524:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001526:	fb02 f303 	mul.w	r3, r2, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	da00      	bge.n	8001530 <calculatePressure+0xa4>
 800152e:	33ff      	adds	r3, #255	; 0xff
 8001530:	121b      	asrs	r3, r3, #8
 8001532:	17da      	asrs	r2, r3, #31
 8001534:	633b      	str	r3, [r7, #48]	; 0x30
 8001536:	637a      	str	r2, [r7, #52]	; 0x34
 8001538:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800153c:	4623      	mov	r3, r4
 800153e:	18c3      	adds	r3, r0, r3
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	462b      	mov	r3, r5
 8001544:	eb41 0303 	adc.w	r3, r1, r3
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800154e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	sensor->actualPressure=(sensor->rawPressure*sensitivity/(2097152l)-offset)/(8192l);
 8001552:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	62bb      	str	r3, [r7, #40]	; 0x28
 800155a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800155c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800155e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001562:	462a      	mov	r2, r5
 8001564:	fb02 f203 	mul.w	r2, r2, r3
 8001568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800156a:	4621      	mov	r1, r4
 800156c:	fb01 f303 	mul.w	r3, r1, r3
 8001570:	4413      	add	r3, r2
 8001572:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001574:	4621      	mov	r1, r4
 8001576:	fba2 1201 	umull	r1, r2, r2, r1
 800157a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800157c:	460a      	mov	r2, r1
 800157e:	63ba      	str	r2, [r7, #56]	; 0x38
 8001580:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001582:	4413      	add	r3, r2
 8001584:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001586:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800158a:	2b00      	cmp	r3, #0
 800158c:	da07      	bge.n	800159e <calculatePressure+0x112>
 800158e:	491b      	ldr	r1, [pc, #108]	; (80015fc <calculatePressure+0x170>)
 8001590:	1851      	adds	r1, r2, r1
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	f143 0300 	adc.w	r3, r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800159e:	f04f 0000 	mov.w	r0, #0
 80015a2:	f04f 0100 	mov.w	r1, #0
 80015a6:	0d50      	lsrs	r0, r2, #21
 80015a8:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 80015ac:	1559      	asrs	r1, r3, #21
 80015ae:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80015b2:	1a84      	subs	r4, r0, r2
 80015b4:	623c      	str	r4, [r7, #32]
 80015b6:	eb61 0303 	sbc.w	r3, r1, r3
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
 80015bc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	da08      	bge.n	80015d6 <calculatePressure+0x14a>
 80015c4:	f641 71ff 	movw	r1, #8191	; 0x1fff
 80015c8:	1851      	adds	r1, r2, r1
 80015ca:	6039      	str	r1, [r7, #0]
 80015cc:	f143 0300 	adc.w	r3, r3, #0
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015d6:	f04f 0000 	mov.w	r0, #0
 80015da:	f04f 0100 	mov.w	r1, #0
 80015de:	0b50      	lsrs	r0, r2, #13
 80015e0:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80015e4:	1359      	asrs	r1, r3, #13
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015ec:	60da      	str	r2, [r3, #12]


}
 80015ee:	bf00      	nop
 80015f0:	3764      	adds	r7, #100	; 0x64
 80015f2:	46bd      	mov	sp, r7
 80015f4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	001fffff 	.word	0x001fffff

08001600 <checkMPU6050Ready>:
#include "MPU6050.h"
extern I2C_HandleTypeDef hi2c1;

uint8_t checkMPU6050Ready()
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
	if((HAL_I2C_IsDeviceReady(&hi2c1,MPU6050ADDR+0,1,100)==HAL_OK))
 8001604:	2364      	movs	r3, #100	; 0x64
 8001606:	2201      	movs	r2, #1
 8001608:	21d0      	movs	r1, #208	; 0xd0
 800160a:	4805      	ldr	r0, [pc, #20]	; (8001620 <checkMPU6050Ready+0x20>)
 800160c:	f005 fa76 	bl	8006afc <HAL_I2C_IsDeviceReady>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <checkMPU6050Ready+0x1a>
	{
		return 1;
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <checkMPU6050Ready+0x1c>
	}
	return 0;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	bd80      	pop	{r7, pc}
 8001620:	2000263c 	.word	0x2000263c

08001624 <i2cWriteRegMPU6050>:
uint8_t i2cWriteRegMPU6050(uint16_t devAddr, uint16_t RegAddr, uint8_t* data){
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af04      	add	r7, sp, #16
 800162a:	4603      	mov	r3, r0
 800162c:	603a      	str	r2, [r7, #0]
 800162e:	80fb      	strh	r3, [r7, #6]
 8001630:	460b      	mov	r3, r1
 8001632:	80bb      	strh	r3, [r7, #4]

	return(HAL_I2C_Mem_Write(&hi2c1,devAddr,RegAddr, 1, data ,1,HAL_MAX_DELAY)==HAL_OK);
 8001634:	88ba      	ldrh	r2, [r7, #4]
 8001636:	88f9      	ldrh	r1, [r7, #6]
 8001638:	f04f 33ff 	mov.w	r3, #4294967295
 800163c:	9302      	str	r3, [sp, #8]
 800163e:	2301      	movs	r3, #1
 8001640:	9301      	str	r3, [sp, #4]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	2301      	movs	r3, #1
 8001648:	4806      	ldr	r0, [pc, #24]	; (8001664 <i2cWriteRegMPU6050+0x40>)
 800164a:	f004 fda3 	bl	8006194 <HAL_I2C_Mem_Write>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	bf0c      	ite	eq
 8001654:	2301      	moveq	r3, #1
 8001656:	2300      	movne	r3, #0
 8001658:	b2db      	uxtb	r3, r3

}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	2000263c 	.word	0x2000263c

08001668 <MPU6050init>:

uint8_t MPU6050init(MPU6050* imu, I2C_HandleTypeDef* i2cHandle)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
	imu->i2cHandle=i2cHandle;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	601a      	str	r2, [r3, #0]

	for(int i=0;i<3;i++)
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	e00a      	b.n	8001694 <MPU6050init+0x2c>
		imu->acc_mps2[i]=0;
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	3304      	adds	r3, #4
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
	for(int i=0;i<3;i++)
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	3301      	adds	r3, #1
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	2b02      	cmp	r3, #2
 8001698:	ddf1      	ble.n	800167e <MPU6050init+0x16>

	for(int i=0;i<3;i++)
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	e00a      	b.n	80016b6 <MPU6050init+0x4e>
		imu->gyr_rps[i]=0;
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	3304      	adds	r3, #4
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	f04f 0200 	mov.w	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
	for(int i=0;i<3;i++)
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	3301      	adds	r3, #1
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	ddf1      	ble.n	80016a0 <MPU6050init+0x38>

	for(int i=0; i<14;i++)
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	e008      	b.n	80016d4 <MPU6050init+0x6c>
		imu->rxData[i]=0;
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4413      	add	r3, r2
 80016c8:	3320      	adds	r3, #32
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<14;i++)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	3301      	adds	r3, #1
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2b0d      	cmp	r3, #13
 80016d8:	ddf3      	ble.n	80016c2 <MPU6050init+0x5a>

	imu->rxFlag=0;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	imu->dataReadyFlag=0;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	imu->temp_degC=0;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	61da      	str	r2, [r3, #28]

	uint8_t numErrors=0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	72fb      	strb	r3, [r7, #11]
	//Disable FSYNC, enable digital LPF ( fs=1kHz, bandwidth: acc=94 Hz, gyr=98Hz )
	uint8_t data=0x02;
 80016f6:	2302      	movs	r3, #2
 80016f8:	72bb      	strb	r3, [r7, #10]
	if(i2cWriteRegMPU6050(MPU6050ADDR,MPU6050_CONFIG_REG,&data)==0)
 80016fa:	f107 030a 	add.w	r3, r7, #10
 80016fe:	461a      	mov	r2, r3
 8001700:	211a      	movs	r1, #26
 8001702:	20d0      	movs	r0, #208	; 0xd0
 8001704:	f7ff ff8e 	bl	8001624 <i2cWriteRegMPU6050>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d102      	bne.n	8001714 <MPU6050init+0xac>
		numErrors+=1;
 800170e:	7afb      	ldrb	r3, [r7, #11]
 8001710:	3301      	adds	r3, #1
 8001712:	72fb      	strb	r3, [r7, #11]

	// Enable Interrupt, clear status bits on any read operation
	data=0x10;
 8001714:	2310      	movs	r3, #16
 8001716:	72bb      	strb	r3, [r7, #10]
	if(i2cWriteRegMPU6050(MPU6050ADDR,MPU6050_INT_PIN_CFG_REG,&data)==0)
 8001718:	f107 030a 	add.w	r3, r7, #10
 800171c:	461a      	mov	r2, r3
 800171e:	2137      	movs	r1, #55	; 0x37
 8001720:	20d0      	movs	r0, #208	; 0xd0
 8001722:	f7ff ff7f 	bl	8001624 <i2cWriteRegMPU6050>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d102      	bne.n	8001732 <MPU6050init+0xca>
		numErrors+=1;
 800172c:	7afb      	ldrb	r3, [r7, #11]
 800172e:	3301      	adds	r3, #1
 8001730:	72fb      	strb	r3, [r7, #11]

	data=0x01;
 8001732:	2301      	movs	r3, #1
 8001734:	72bb      	strb	r3, [r7, #10]
	if(i2cWriteRegMPU6050(MPU6050ADDR,MPU6050_INT_ENABLE_REG,&data)==0)
 8001736:	f107 030a 	add.w	r3, r7, #10
 800173a:	461a      	mov	r2, r3
 800173c:	2138      	movs	r1, #56	; 0x38
 800173e:	20d0      	movs	r0, #208	; 0xd0
 8001740:	f7ff ff70 	bl	8001624 <i2cWriteRegMPU6050>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d102      	bne.n	8001750 <MPU6050init+0xe8>
		numErrors+=1;
 800174a:	7afb      	ldrb	r3, [r7, #11]
 800174c:	3301      	adds	r3, #1
 800174e:	72fb      	strb	r3, [r7, #11]

	// Wake-up MPU6050
	data=0x00;
 8001750:	2300      	movs	r3, #0
 8001752:	72bb      	strb	r3, [r7, #10]
	if(i2cWriteRegMPU6050(MPU6050ADDR,MPU6050_PWR_MGMT_1_REG,&data)==0)
 8001754:	f107 030a 	add.w	r3, r7, #10
 8001758:	461a      	mov	r2, r3
 800175a:	216b      	movs	r1, #107	; 0x6b
 800175c:	20d0      	movs	r0, #208	; 0xd0
 800175e:	f7ff ff61 	bl	8001624 <i2cWriteRegMPU6050>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d102      	bne.n	800176e <MPU6050init+0x106>
		numErrors+=1;
 8001768:	7afb      	ldrb	r3, [r7, #11]
 800176a:	3301      	adds	r3, #1
 800176c:	72fb      	strb	r3, [r7, #11]

	return numErrors==0;
 800176e:	7afb      	ldrb	r3, [r7, #11]
 8001770:	2b00      	cmp	r3, #0
 8001772:	bf0c      	ite	eq
 8001774:	2301      	moveq	r3, #1
 8001776:	2300      	movne	r3, #0
 8001778:	b2db      	uxtb	r3, r3

}
 800177a:	4618      	mov	r0, r3
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <MPU6050readDataDMA>:

uint8_t MPU6050readDataDMA(MPU6050* imu)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b086      	sub	sp, #24
 8001786:	af02      	add	r7, sp, #8
 8001788:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef readStatus;
	readStatus=HAL_I2C_Mem_Read_DMA(imu->i2cHandle,MPU6050ADDR,MPU6050_DATA_START_ADD,1,imu->rxData,14);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6818      	ldr	r0, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3320      	adds	r3, #32
 8001792:	220e      	movs	r2, #14
 8001794:	9201      	str	r2, [sp, #4]
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	2301      	movs	r3, #1
 800179a:	223b      	movs	r2, #59	; 0x3b
 800179c:	21d0      	movs	r1, #208	; 0xd0
 800179e:	f005 f819 	bl	80067d4 <HAL_I2C_Mem_Read_DMA>
 80017a2:	4603      	mov	r3, r0
 80017a4:	73fb      	strb	r3, [r7, #15]
	imu->dataReadyFlag=0;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	if(readStatus==HAL_OK)return 1;
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <MPU6050readDataDMA+0x36>
 80017b4:	2301      	movs	r3, #1
 80017b6:	e00a      	b.n	80017ce <MPU6050readDataDMA+0x4c>
	else if(readStatus==HAL_ERROR)return 2;
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d101      	bne.n	80017c2 <MPU6050readDataDMA+0x40>
 80017be:	2302      	movs	r3, #2
 80017c0:	e005      	b.n	80017ce <MPU6050readDataDMA+0x4c>
	else if (readStatus==HAL_BUSY)return 3;
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d101      	bne.n	80017cc <MPU6050readDataDMA+0x4a>
 80017c8:	2303      	movs	r3, #3
 80017ca:	e000      	b.n	80017ce <MPU6050readDataDMA+0x4c>
	else return 0;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <MPU6050convertRawData>:

void MPU6050convertRawData(MPU6050* imu)
{
 80017d8:	b480      	push	{r7}
 80017da:	b087      	sub	sp, #28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	int16_t acc[3]={( (imu->rxData[0]<<8)|imu->rxData[1] ),( (imu->rxData[2]<<8)|imu->rxData[3] ),( (imu->rxData[4]<<8)|imu->rxData[5] )};
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017e6:	021b      	lsls	r3, r3, #8
 80017e8:	b21a      	sxth	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017f0:	b21b      	sxth	r3, r3
 80017f2:	4313      	orrs	r3, r2
 80017f4:	b21b      	sxth	r3, r3
 80017f6:	823b      	strh	r3, [r7, #16]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80017fe:	021b      	lsls	r3, r3, #8
 8001800:	b21a      	sxth	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001808:	b21b      	sxth	r3, r3
 800180a:	4313      	orrs	r3, r2
 800180c:	b21b      	sxth	r3, r3
 800180e:	827b      	strh	r3, [r7, #18]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001816:	021b      	lsls	r3, r3, #8
 8001818:	b21a      	sxth	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001820:	b21b      	sxth	r3, r3
 8001822:	4313      	orrs	r3, r2
 8001824:	b21b      	sxth	r3, r3
 8001826:	82bb      	strh	r3, [r7, #20]
	//int16_t temperature=(imu->rxData[6]<<8)|imu->rxData[7];
	int16_t gyr[3]={( (imu->rxData[8]<<8)|imu->rxData[9] ),( (imu->rxData[10]<<8)|imu->rxData[11] ),( (imu->rxData[12]<<8)|imu->rxData[13] )};
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800182e:	021b      	lsls	r3, r3, #8
 8001830:	b21a      	sxth	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001838:	b21b      	sxth	r3, r3
 800183a:	4313      	orrs	r3, r2
 800183c:	b21b      	sxth	r3, r3
 800183e:	813b      	strh	r3, [r7, #8]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001846:	021b      	lsls	r3, r3, #8
 8001848:	b21a      	sxth	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001850:	b21b      	sxth	r3, r3
 8001852:	4313      	orrs	r3, r2
 8001854:	b21b      	sxth	r3, r3
 8001856:	817b      	strh	r3, [r7, #10]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800185e:	021b      	lsls	r3, r3, #8
 8001860:	b21a      	sxth	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001868:	b21b      	sxth	r3, r3
 800186a:	4313      	orrs	r3, r2
 800186c:	b21b      	sxth	r3, r3
 800186e:	81bb      	strh	r3, [r7, #12]

	imu->acc_mps2[0]=MPU6050_ACC_RAW_TO_MPS2*acc[0];
 8001870:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001874:	ee07 3a90 	vmov	s15, r3
 8001878:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800187c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001918 <MPU6050convertRawData+0x140>
 8001880:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	edc3 7a01 	vstr	s15, [r3, #4]
	imu->acc_mps2[1]=MPU6050_ACC_RAW_TO_MPS2*acc[1];
 800188a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800188e:	ee07 3a90 	vmov	s15, r3
 8001892:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001896:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001918 <MPU6050convertRawData+0x140>
 800189a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	edc3 7a02 	vstr	s15, [r3, #8]
	imu->acc_mps2[2]=MPU6050_ACC_RAW_TO_MPS2*acc[2];
 80018a4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80018a8:	ee07 3a90 	vmov	s15, r3
 80018ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018b0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001918 <MPU6050convertRawData+0x140>
 80018b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	edc3 7a03 	vstr	s15, [r3, #12]

	imu->gyr_rps[0]=MPU6050_GYR_RAW_TO_RPS*gyr[0];
 80018be:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80018c2:	ee07 3a90 	vmov	s15, r3
 80018c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ca:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800191c <MPU6050convertRawData+0x144>
 80018ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	edc3 7a04 	vstr	s15, [r3, #16]
	imu->gyr_rps[1]=MPU6050_GYR_RAW_TO_RPS*gyr[1];
 80018d8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80018dc:	ee07 3a90 	vmov	s15, r3
 80018e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018e4:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800191c <MPU6050convertRawData+0x144>
 80018e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	edc3 7a05 	vstr	s15, [r3, #20]
	imu->gyr_rps[2]=MPU6050_GYR_RAW_TO_RPS*gyr[2];
 80018f2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018f6:	ee07 3a90 	vmov	s15, r3
 80018fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018fe:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800191c <MPU6050convertRawData+0x144>
 8001902:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	edc3 7a06 	vstr	s15, [r3, #24]

}
 800190c:	bf00      	nop
 800190e:	371c      	adds	r7, #28
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	3a1cf5c1 	.word	0x3a1cf5c1
 800191c:	390bb3fd 	.word	0x390bb3fd

08001920 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001924:	2200      	movs	r2, #0
 8001926:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800192a:	4804      	ldr	r0, [pc, #16]	; (800193c <SELECT+0x1c>)
 800192c:	f003 ff98 	bl	8005860 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001930:	2001      	movs	r0, #1
 8001932:	f002 fba3 	bl	800407c <HAL_Delay>
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40020400 	.word	0x40020400

08001940 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001944:	2201      	movs	r2, #1
 8001946:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800194a:	4804      	ldr	r0, [pc, #16]	; (800195c <DESELECT+0x1c>)
 800194c:	f003 ff88 	bl	8005860 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001950:	2001      	movs	r0, #1
 8001952:	f002 fb93 	bl	800407c <HAL_Delay>
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40020400 	.word	0x40020400

08001960 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800196a:	bf00      	nop
 800196c:	4b08      	ldr	r3, [pc, #32]	; (8001990 <SPI_TxByte+0x30>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b02      	cmp	r3, #2
 8001978:	d1f8      	bne.n	800196c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800197a:	1df9      	adds	r1, r7, #7
 800197c:	2364      	movs	r3, #100	; 0x64
 800197e:	2201      	movs	r2, #1
 8001980:	4803      	ldr	r0, [pc, #12]	; (8001990 <SPI_TxByte+0x30>)
 8001982:	f008 f9e2 	bl	8009d4a <HAL_SPI_Transmit>
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	200004bc 	.word	0x200004bc

08001994 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80019a0:	bf00      	nop
 80019a2:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <SPI_TxBuffer+0x30>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d1f8      	bne.n	80019a2 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80019b0:	887a      	ldrh	r2, [r7, #2]
 80019b2:	2364      	movs	r3, #100	; 0x64
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	4803      	ldr	r0, [pc, #12]	; (80019c4 <SPI_TxBuffer+0x30>)
 80019b8:	f008 f9c7 	bl	8009d4a <HAL_SPI_Transmit>
}
 80019bc:	bf00      	nop
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	200004bc 	.word	0x200004bc

080019c8 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80019ce:	23ff      	movs	r3, #255	; 0xff
 80019d0:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80019d2:	bf00      	nop
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <SPI_RxByte+0x34>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d1f8      	bne.n	80019d4 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80019e2:	1dba      	adds	r2, r7, #6
 80019e4:	1df9      	adds	r1, r7, #7
 80019e6:	2364      	movs	r3, #100	; 0x64
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	2301      	movs	r3, #1
 80019ec:	4803      	ldr	r0, [pc, #12]	; (80019fc <SPI_RxByte+0x34>)
 80019ee:	f008 fae8 	bl	8009fc2 <HAL_SPI_TransmitReceive>

	return data;
 80019f2:	79bb      	ldrb	r3, [r7, #6]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	200004bc 	.word	0x200004bc

08001a00 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8001a08:	f7ff ffde 	bl	80019c8 <SPI_RxByte>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	461a      	mov	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	701a      	strb	r2, [r3, #0]
}
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001a22:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <SD_ReadyWait+0x30>)
 8001a24:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001a28:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8001a2a:	f7ff ffcd 	bl	80019c8 <SPI_RxByte>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	2bff      	cmp	r3, #255	; 0xff
 8001a36:	d003      	beq.n	8001a40 <SD_ReadyWait+0x24>
 8001a38:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <SD_ReadyWait+0x30>)
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1f4      	bne.n	8001a2a <SD_ReadyWait+0xe>

	return res;
 8001a40:	79fb      	ldrb	r3, [r7, #7]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000218 	.word	0x20000218

08001a50 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001a56:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001a5a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001a5c:	f7ff ff70 	bl	8001940 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001a60:	2300      	movs	r3, #0
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	e005      	b.n	8001a72 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001a66:	20ff      	movs	r0, #255	; 0xff
 8001a68:	f7ff ff7a 	bl	8001960 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	2b09      	cmp	r3, #9
 8001a76:	ddf6      	ble.n	8001a66 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001a78:	f7ff ff52 	bl	8001920 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001a7c:	2340      	movs	r3, #64	; 0x40
 8001a7e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001a90:	2395      	movs	r3, #149	; 0x95
 8001a92:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001a94:	463b      	mov	r3, r7
 8001a96:	2106      	movs	r1, #6
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ff7b 	bl	8001994 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001a9e:	e002      	b.n	8001aa6 <SD_PowerOn+0x56>
	{
		cnt--;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001aa6:	f7ff ff8f 	bl	80019c8 <SPI_RxByte>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d002      	beq.n	8001ab6 <SD_PowerOn+0x66>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f4      	bne.n	8001aa0 <SD_PowerOn+0x50>
	}

	DESELECT();
 8001ab6:	f7ff ff43 	bl	8001940 <DESELECT>
	SPI_TxByte(0XFF);
 8001aba:	20ff      	movs	r0, #255	; 0xff
 8001abc:	f7ff ff50 	bl	8001960 <SPI_TxByte>

	PowerFlag = 1;
 8001ac0:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <SD_PowerOn+0x80>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	701a      	strb	r2, [r3, #0]
}
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	2000021b 	.word	0x2000021b

08001ad4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001ad8:	4b03      	ldr	r3, [pc, #12]	; (8001ae8 <SD_PowerOff+0x14>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]
}
 8001ade:	bf00      	nop
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	2000021b 	.word	0x2000021b

08001aec <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001af0:	4b03      	ldr	r3, [pc, #12]	; (8001b00 <SD_CheckPower+0x14>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	2000021b 	.word	0x2000021b

08001b04 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001b0e:	4b13      	ldr	r3, [pc, #76]	; (8001b5c <SD_RxDataBlock+0x58>)
 8001b10:	22c8      	movs	r2, #200	; 0xc8
 8001b12:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001b14:	f7ff ff58 	bl	80019c8 <SPI_RxByte>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	2bff      	cmp	r3, #255	; 0xff
 8001b20:	d103      	bne.n	8001b2a <SD_RxDataBlock+0x26>
 8001b22:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <SD_RxDataBlock+0x58>)
 8001b24:	881b      	ldrh	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f4      	bne.n	8001b14 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
 8001b2c:	2bfe      	cmp	r3, #254	; 0xfe
 8001b2e:	d001      	beq.n	8001b34 <SD_RxDataBlock+0x30>
 8001b30:	2300      	movs	r3, #0
 8001b32:	e00f      	b.n	8001b54 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	1c5a      	adds	r2, r3, #1
 8001b38:	607a      	str	r2, [r7, #4]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff ff60 	bl	8001a00 <SPI_RxBytePtr>
	} while(len--);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	1e5a      	subs	r2, r3, #1
 8001b44:	603a      	str	r2, [r7, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f4      	bne.n	8001b34 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8001b4a:	f7ff ff3d 	bl	80019c8 <SPI_RxByte>
	SPI_RxByte();
 8001b4e:	f7ff ff3b 	bl	80019c8 <SPI_RxByte>

	return TRUE;
 8001b52:	2301      	movs	r3, #1
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000216 	.word	0x20000216

08001b60 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001b70:	f7ff ff54 	bl	8001a1c <SD_ReadyWait>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2bff      	cmp	r3, #255	; 0xff
 8001b78:	d001      	beq.n	8001b7e <SD_TxDataBlock+0x1e>
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	e02f      	b.n	8001bde <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001b7e:	78fb      	ldrb	r3, [r7, #3]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff feed 	bl	8001960 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001b86:	78fb      	ldrb	r3, [r7, #3]
 8001b88:	2bfd      	cmp	r3, #253	; 0xfd
 8001b8a:	d020      	beq.n	8001bce <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001b8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff feff 	bl	8001994 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001b96:	f7ff ff17 	bl	80019c8 <SPI_RxByte>
		SPI_RxByte();
 8001b9a:	f7ff ff15 	bl	80019c8 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8001b9e:	e00b      	b.n	8001bb8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001ba0:	f7ff ff12 	bl	80019c8 <SPI_RxByte>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
 8001baa:	f003 031f 	and.w	r3, r3, #31
 8001bae:	2b05      	cmp	r3, #5
 8001bb0:	d006      	beq.n	8001bc0 <SD_TxDataBlock+0x60>
			i++;
 8001bb2:	7bbb      	ldrb	r3, [r7, #14]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001bb8:	7bbb      	ldrb	r3, [r7, #14]
 8001bba:	2b40      	cmp	r3, #64	; 0x40
 8001bbc:	d9f0      	bls.n	8001ba0 <SD_TxDataBlock+0x40>
 8001bbe:	e000      	b.n	8001bc2 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001bc0:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001bc2:	bf00      	nop
 8001bc4:	f7ff ff00 	bl	80019c8 <SPI_RxByte>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0fa      	beq.n	8001bc4 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001bce:	7bfb      	ldrb	r3, [r7, #15]
 8001bd0:	f003 031f 	and.w	r3, r3, #31
 8001bd4:	2b05      	cmp	r3, #5
 8001bd6:	d101      	bne.n	8001bdc <SD_TxDataBlock+0x7c>
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e000      	b.n	8001bde <SD_TxDataBlock+0x7e>

	return FALSE;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b084      	sub	sp, #16
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	4603      	mov	r3, r0
 8001bee:	6039      	str	r1, [r7, #0]
 8001bf0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001bf2:	f7ff ff13 	bl	8001a1c <SD_ReadyWait>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2bff      	cmp	r3, #255	; 0xff
 8001bfa:	d001      	beq.n	8001c00 <SD_SendCmd+0x1a>
 8001bfc:	23ff      	movs	r3, #255	; 0xff
 8001bfe:	e042      	b.n	8001c86 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff feac 	bl	8001960 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	0e1b      	lsrs	r3, r3, #24
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fea6 	bl	8001960 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	0c1b      	lsrs	r3, r3, #16
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fea0 	bl	8001960 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	0a1b      	lsrs	r3, r3, #8
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fe9a 	bl	8001960 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fe95 	bl	8001960 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	2b40      	cmp	r3, #64	; 0x40
 8001c3a:	d102      	bne.n	8001c42 <SD_SendCmd+0x5c>
 8001c3c:	2395      	movs	r3, #149	; 0x95
 8001c3e:	73fb      	strb	r3, [r7, #15]
 8001c40:	e007      	b.n	8001c52 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	2b48      	cmp	r3, #72	; 0x48
 8001c46:	d102      	bne.n	8001c4e <SD_SendCmd+0x68>
 8001c48:	2387      	movs	r3, #135	; 0x87
 8001c4a:	73fb      	strb	r3, [r7, #15]
 8001c4c:	e001      	b.n	8001c52 <SD_SendCmd+0x6c>
	else crc = 1;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fe83 	bl	8001960 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	2b4c      	cmp	r3, #76	; 0x4c
 8001c5e:	d101      	bne.n	8001c64 <SD_SendCmd+0x7e>
 8001c60:	f7ff feb2 	bl	80019c8 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001c64:	230a      	movs	r3, #10
 8001c66:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001c68:	f7ff feae 	bl	80019c8 <SPI_RxByte>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001c70:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	da05      	bge.n	8001c84 <SD_SendCmd+0x9e>
 8001c78:	7bbb      	ldrb	r3, [r7, #14]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	73bb      	strb	r3, [r7, #14]
 8001c7e:	7bbb      	ldrb	r3, [r7, #14]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1f1      	bne.n	8001c68 <SD_SendCmd+0x82>

	return res;
 8001c84:	7b7b      	ldrb	r3, [r7, #13]
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
	...

08001c90 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001c90:	b590      	push	{r4, r7, lr}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <SD_disk_initialize+0x14>
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e0d1      	b.n	8001e48 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001ca4:	4b6a      	ldr	r3, [pc, #424]	; (8001e50 <SD_disk_initialize+0x1c0>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <SD_disk_initialize+0x2a>
 8001cb2:	4b67      	ldr	r3, [pc, #412]	; (8001e50 <SD_disk_initialize+0x1c0>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	e0c6      	b.n	8001e48 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8001cba:	f7ff fec9 	bl	8001a50 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001cbe:	f7ff fe2f 	bl	8001920 <SELECT>

	/* check disk type */
	type = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	2040      	movs	r0, #64	; 0x40
 8001cca:	f7ff ff8c 	bl	8001be6 <SD_SendCmd>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	f040 80a1 	bne.w	8001e18 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001cd6:	4b5f      	ldr	r3, [pc, #380]	; (8001e54 <SD_disk_initialize+0x1c4>)
 8001cd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cdc:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001cde:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001ce2:	2048      	movs	r0, #72	; 0x48
 8001ce4:	f7ff ff7f 	bl	8001be6 <SD_SendCmd>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d155      	bne.n	8001d9a <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001cee:	2300      	movs	r3, #0
 8001cf0:	73fb      	strb	r3, [r7, #15]
 8001cf2:	e00c      	b.n	8001d0e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001cf4:	7bfc      	ldrb	r4, [r7, #15]
 8001cf6:	f7ff fe67 	bl	80019c8 <SPI_RxByte>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	f104 0310 	add.w	r3, r4, #16
 8001d02:	443b      	add	r3, r7
 8001d04:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	73fb      	strb	r3, [r7, #15]
 8001d0e:	7bfb      	ldrb	r3, [r7, #15]
 8001d10:	2b03      	cmp	r3, #3
 8001d12:	d9ef      	bls.n	8001cf4 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001d14:	7abb      	ldrb	r3, [r7, #10]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d17e      	bne.n	8001e18 <SD_disk_initialize+0x188>
 8001d1a:	7afb      	ldrb	r3, [r7, #11]
 8001d1c:	2baa      	cmp	r3, #170	; 0xaa
 8001d1e:	d17b      	bne.n	8001e18 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001d20:	2100      	movs	r1, #0
 8001d22:	2077      	movs	r0, #119	; 0x77
 8001d24:	f7ff ff5f 	bl	8001be6 <SD_SendCmd>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d807      	bhi.n	8001d3e <SD_disk_initialize+0xae>
 8001d2e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d32:	2069      	movs	r0, #105	; 0x69
 8001d34:	f7ff ff57 	bl	8001be6 <SD_SendCmd>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d004      	beq.n	8001d48 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8001d3e:	4b45      	ldr	r3, [pc, #276]	; (8001e54 <SD_disk_initialize+0x1c4>)
 8001d40:	881b      	ldrh	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1ec      	bne.n	8001d20 <SD_disk_initialize+0x90>
 8001d46:	e000      	b.n	8001d4a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001d48:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001d4a:	4b42      	ldr	r3, [pc, #264]	; (8001e54 <SD_disk_initialize+0x1c4>)
 8001d4c:	881b      	ldrh	r3, [r3, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d062      	beq.n	8001e18 <SD_disk_initialize+0x188>
 8001d52:	2100      	movs	r1, #0
 8001d54:	207a      	movs	r0, #122	; 0x7a
 8001d56:	f7ff ff46 	bl	8001be6 <SD_SendCmd>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d15b      	bne.n	8001e18 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001d60:	2300      	movs	r3, #0
 8001d62:	73fb      	strb	r3, [r7, #15]
 8001d64:	e00c      	b.n	8001d80 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8001d66:	7bfc      	ldrb	r4, [r7, #15]
 8001d68:	f7ff fe2e 	bl	80019c8 <SPI_RxByte>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	461a      	mov	r2, r3
 8001d70:	f104 0310 	add.w	r3, r4, #16
 8001d74:	443b      	add	r3, r7
 8001d76:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	73fb      	strb	r3, [r7, #15]
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
 8001d82:	2b03      	cmp	r3, #3
 8001d84:	d9ef      	bls.n	8001d66 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001d86:	7a3b      	ldrb	r3, [r7, #8]
 8001d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <SD_disk_initialize+0x104>
 8001d90:	230c      	movs	r3, #12
 8001d92:	e000      	b.n	8001d96 <SD_disk_initialize+0x106>
 8001d94:	2304      	movs	r3, #4
 8001d96:	73bb      	strb	r3, [r7, #14]
 8001d98:	e03e      	b.n	8001e18 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	2077      	movs	r0, #119	; 0x77
 8001d9e:	f7ff ff22 	bl	8001be6 <SD_SendCmd>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d808      	bhi.n	8001dba <SD_disk_initialize+0x12a>
 8001da8:	2100      	movs	r1, #0
 8001daa:	2069      	movs	r0, #105	; 0x69
 8001dac:	f7ff ff1b 	bl	8001be6 <SD_SendCmd>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d801      	bhi.n	8001dba <SD_disk_initialize+0x12a>
 8001db6:	2302      	movs	r3, #2
 8001db8:	e000      	b.n	8001dbc <SD_disk_initialize+0x12c>
 8001dba:	2301      	movs	r3, #1
 8001dbc:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001dbe:	7bbb      	ldrb	r3, [r7, #14]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d10e      	bne.n	8001de2 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	2077      	movs	r0, #119	; 0x77
 8001dc8:	f7ff ff0d 	bl	8001be6 <SD_SendCmd>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d80e      	bhi.n	8001df0 <SD_disk_initialize+0x160>
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	2069      	movs	r0, #105	; 0x69
 8001dd6:	f7ff ff06 	bl	8001be6 <SD_SendCmd>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d107      	bne.n	8001df0 <SD_disk_initialize+0x160>
 8001de0:	e00c      	b.n	8001dfc <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001de2:	2100      	movs	r1, #0
 8001de4:	2041      	movs	r0, #65	; 0x41
 8001de6:	f7ff fefe 	bl	8001be6 <SD_SendCmd>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d004      	beq.n	8001dfa <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001df0:	4b18      	ldr	r3, [pc, #96]	; (8001e54 <SD_disk_initialize+0x1c4>)
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1e2      	bne.n	8001dbe <SD_disk_initialize+0x12e>
 8001df8:	e000      	b.n	8001dfc <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001dfa:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001dfc:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <SD_disk_initialize+0x1c4>)
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d007      	beq.n	8001e14 <SD_disk_initialize+0x184>
 8001e04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e08:	2050      	movs	r0, #80	; 0x50
 8001e0a:	f7ff feec 	bl	8001be6 <SD_SendCmd>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <SD_disk_initialize+0x188>
 8001e14:	2300      	movs	r3, #0
 8001e16:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001e18:	4a0f      	ldr	r2, [pc, #60]	; (8001e58 <SD_disk_initialize+0x1c8>)
 8001e1a:	7bbb      	ldrb	r3, [r7, #14]
 8001e1c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001e1e:	f7ff fd8f 	bl	8001940 <DESELECT>
	SPI_RxByte();
 8001e22:	f7ff fdd1 	bl	80019c8 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001e26:	7bbb      	ldrb	r3, [r7, #14]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d008      	beq.n	8001e3e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001e2c:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <SD_disk_initialize+0x1c0>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	f023 0301 	bic.w	r3, r3, #1
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <SD_disk_initialize+0x1c0>)
 8001e3a:	701a      	strb	r2, [r3, #0]
 8001e3c:	e001      	b.n	8001e42 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001e3e:	f7ff fe49 	bl	8001ad4 <SD_PowerOff>
	}

	return Stat;
 8001e42:	4b03      	ldr	r3, [pc, #12]	; (8001e50 <SD_disk_initialize+0x1c0>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	b2db      	uxtb	r3, r3
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd90      	pop	{r4, r7, pc}
 8001e50:	20000000 	.word	0x20000000
 8001e54:	20000216 	.word	0x20000216
 8001e58:	2000021a 	.word	0x2000021a

08001e5c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <SD_disk_status+0x14>
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e002      	b.n	8001e76 <SD_disk_status+0x1a>
	return Stat;
 8001e70:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <SD_disk_status+0x28>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	b2db      	uxtb	r3, r3
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	20000000 	.word	0x20000000

08001e88 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
 8001e92:	603b      	str	r3, [r7, #0]
 8001e94:	4603      	mov	r3, r0
 8001e96:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d102      	bne.n	8001ea4 <SD_disk_read+0x1c>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <SD_disk_read+0x20>
 8001ea4:	2304      	movs	r3, #4
 8001ea6:	e051      	b.n	8001f4c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001ea8:	4b2a      	ldr	r3, [pc, #168]	; (8001f54 <SD_disk_read+0xcc>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <SD_disk_read+0x32>
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e048      	b.n	8001f4c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001eba:	4b27      	ldr	r3, [pc, #156]	; (8001f58 <SD_disk_read+0xd0>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d102      	bne.n	8001ecc <SD_disk_read+0x44>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	025b      	lsls	r3, r3, #9
 8001eca:	607b      	str	r3, [r7, #4]

	SELECT();
 8001ecc:	f7ff fd28 	bl	8001920 <SELECT>

	if (count == 1)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d111      	bne.n	8001efa <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	2051      	movs	r0, #81	; 0x51
 8001eda:	f7ff fe84 	bl	8001be6 <SD_SendCmd>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d129      	bne.n	8001f38 <SD_disk_read+0xb0>
 8001ee4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ee8:	68b8      	ldr	r0, [r7, #8]
 8001eea:	f7ff fe0b 	bl	8001b04 <SD_RxDataBlock>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d021      	beq.n	8001f38 <SD_disk_read+0xb0>
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	603b      	str	r3, [r7, #0]
 8001ef8:	e01e      	b.n	8001f38 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	2052      	movs	r0, #82	; 0x52
 8001efe:	f7ff fe72 	bl	8001be6 <SD_SendCmd>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d117      	bne.n	8001f38 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001f08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f0c:	68b8      	ldr	r0, [r7, #8]
 8001f0e:	f7ff fdf9 	bl	8001b04 <SD_RxDataBlock>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00a      	beq.n	8001f2e <SD_disk_read+0xa6>
				buff += 512;
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001f1e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	603b      	str	r3, [r7, #0]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1ed      	bne.n	8001f08 <SD_disk_read+0x80>
 8001f2c:	e000      	b.n	8001f30 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001f2e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001f30:	2100      	movs	r1, #0
 8001f32:	204c      	movs	r0, #76	; 0x4c
 8001f34:	f7ff fe57 	bl	8001be6 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001f38:	f7ff fd02 	bl	8001940 <DESELECT>
	SPI_RxByte();
 8001f3c:	f7ff fd44 	bl	80019c8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	bf14      	ite	ne
 8001f46:	2301      	movne	r3, #1
 8001f48:	2300      	moveq	r3, #0
 8001f4a:	b2db      	uxtb	r3, r3
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000000 	.word	0x20000000
 8001f58:	2000021a 	.word	0x2000021a

08001f5c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60b9      	str	r1, [r7, #8]
 8001f64:	607a      	str	r2, [r7, #4]
 8001f66:	603b      	str	r3, [r7, #0]
 8001f68:	4603      	mov	r3, r0
 8001f6a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d102      	bne.n	8001f78 <SD_disk_write+0x1c>
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <SD_disk_write+0x20>
 8001f78:	2304      	movs	r3, #4
 8001f7a:	e06b      	b.n	8002054 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001f7c:	4b37      	ldr	r3, [pc, #220]	; (800205c <SD_disk_write+0x100>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <SD_disk_write+0x32>
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e062      	b.n	8002054 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001f8e:	4b33      	ldr	r3, [pc, #204]	; (800205c <SD_disk_write+0x100>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <SD_disk_write+0x44>
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	e059      	b.n	8002054 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001fa0:	4b2f      	ldr	r3, [pc, #188]	; (8002060 <SD_disk_write+0x104>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d102      	bne.n	8001fb2 <SD_disk_write+0x56>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	025b      	lsls	r3, r3, #9
 8001fb0:	607b      	str	r3, [r7, #4]

	SELECT();
 8001fb2:	f7ff fcb5 	bl	8001920 <SELECT>

	if (count == 1)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d110      	bne.n	8001fde <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	2058      	movs	r0, #88	; 0x58
 8001fc0:	f7ff fe11 	bl	8001be6 <SD_SendCmd>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d13a      	bne.n	8002040 <SD_disk_write+0xe4>
 8001fca:	21fe      	movs	r1, #254	; 0xfe
 8001fcc:	68b8      	ldr	r0, [r7, #8]
 8001fce:	f7ff fdc7 	bl	8001b60 <SD_TxDataBlock>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d033      	beq.n	8002040 <SD_disk_write+0xe4>
			count = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	603b      	str	r3, [r7, #0]
 8001fdc:	e030      	b.n	8002040 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001fde:	4b20      	ldr	r3, [pc, #128]	; (8002060 <SD_disk_write+0x104>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d007      	beq.n	8001ffa <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001fea:	2100      	movs	r1, #0
 8001fec:	2077      	movs	r0, #119	; 0x77
 8001fee:	f7ff fdfa 	bl	8001be6 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001ff2:	6839      	ldr	r1, [r7, #0]
 8001ff4:	2057      	movs	r0, #87	; 0x57
 8001ff6:	f7ff fdf6 	bl	8001be6 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	2059      	movs	r0, #89	; 0x59
 8001ffe:	f7ff fdf2 	bl	8001be6 <SD_SendCmd>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d11b      	bne.n	8002040 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002008:	21fc      	movs	r1, #252	; 0xfc
 800200a:	68b8      	ldr	r0, [r7, #8]
 800200c:	f7ff fda8 	bl	8001b60 <SD_TxDataBlock>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00a      	beq.n	800202c <SD_disk_write+0xd0>
				buff += 512;
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800201c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	3b01      	subs	r3, #1
 8002022:	603b      	str	r3, [r7, #0]
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1ee      	bne.n	8002008 <SD_disk_write+0xac>
 800202a:	e000      	b.n	800202e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800202c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800202e:	21fd      	movs	r1, #253	; 0xfd
 8002030:	2000      	movs	r0, #0
 8002032:	f7ff fd95 	bl	8001b60 <SD_TxDataBlock>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d101      	bne.n	8002040 <SD_disk_write+0xe4>
			{
				count = 1;
 800203c:	2301      	movs	r3, #1
 800203e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8002040:	f7ff fc7e 	bl	8001940 <DESELECT>
	SPI_RxByte();
 8002044:	f7ff fcc0 	bl	80019c8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	bf14      	ite	ne
 800204e:	2301      	movne	r3, #1
 8002050:	2300      	moveq	r3, #0
 8002052:	b2db      	uxtb	r3, r3
}
 8002054:	4618      	mov	r0, r3
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	20000000 	.word	0x20000000
 8002060:	2000021a 	.word	0x2000021a

08002064 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8002064:	b590      	push	{r4, r7, lr}
 8002066:	b08b      	sub	sp, #44	; 0x2c
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	603a      	str	r2, [r7, #0]
 800206e:	71fb      	strb	r3, [r7, #7]
 8002070:	460b      	mov	r3, r1
 8002072:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8002078:	79fb      	ldrb	r3, [r7, #7]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <SD_disk_ioctl+0x1e>
 800207e:	2304      	movs	r3, #4
 8002080:	e115      	b.n	80022ae <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8002088:	79bb      	ldrb	r3, [r7, #6]
 800208a:	2b05      	cmp	r3, #5
 800208c:	d124      	bne.n	80020d8 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800208e:	6a3b      	ldr	r3, [r7, #32]
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d012      	beq.n	80020bc <SD_disk_ioctl+0x58>
 8002096:	2b02      	cmp	r3, #2
 8002098:	dc1a      	bgt.n	80020d0 <SD_disk_ioctl+0x6c>
 800209a:	2b00      	cmp	r3, #0
 800209c:	d002      	beq.n	80020a4 <SD_disk_ioctl+0x40>
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d006      	beq.n	80020b0 <SD_disk_ioctl+0x4c>
 80020a2:	e015      	b.n	80020d0 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80020a4:	f7ff fd16 	bl	8001ad4 <SD_PowerOff>
			res = RES_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80020ae:	e0fc      	b.n	80022aa <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80020b0:	f7ff fcce 	bl	8001a50 <SD_PowerOn>
			res = RES_OK;
 80020b4:	2300      	movs	r3, #0
 80020b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80020ba:	e0f6      	b.n	80022aa <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	1c5c      	adds	r4, r3, #1
 80020c0:	f7ff fd14 	bl	8001aec <SD_CheckPower>
 80020c4:	4603      	mov	r3, r0
 80020c6:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80020c8:	2300      	movs	r3, #0
 80020ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80020ce:	e0ec      	b.n	80022aa <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80020d0:	2304      	movs	r3, #4
 80020d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80020d6:	e0e8      	b.n	80022aa <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80020d8:	4b77      	ldr	r3, [pc, #476]	; (80022b8 <SD_disk_ioctl+0x254>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <SD_disk_ioctl+0x86>
 80020e6:	2303      	movs	r3, #3
 80020e8:	e0e1      	b.n	80022ae <SD_disk_ioctl+0x24a>

		SELECT();
 80020ea:	f7ff fc19 	bl	8001920 <SELECT>

		switch (ctrl)
 80020ee:	79bb      	ldrb	r3, [r7, #6]
 80020f0:	2b0d      	cmp	r3, #13
 80020f2:	f200 80cb 	bhi.w	800228c <SD_disk_ioctl+0x228>
 80020f6:	a201      	add	r2, pc, #4	; (adr r2, 80020fc <SD_disk_ioctl+0x98>)
 80020f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020fc:	080021f7 	.word	0x080021f7
 8002100:	08002135 	.word	0x08002135
 8002104:	080021e7 	.word	0x080021e7
 8002108:	0800228d 	.word	0x0800228d
 800210c:	0800228d 	.word	0x0800228d
 8002110:	0800228d 	.word	0x0800228d
 8002114:	0800228d 	.word	0x0800228d
 8002118:	0800228d 	.word	0x0800228d
 800211c:	0800228d 	.word	0x0800228d
 8002120:	0800228d 	.word	0x0800228d
 8002124:	0800228d 	.word	0x0800228d
 8002128:	08002209 	.word	0x08002209
 800212c:	0800222d 	.word	0x0800222d
 8002130:	08002251 	.word	0x08002251
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002134:	2100      	movs	r1, #0
 8002136:	2049      	movs	r0, #73	; 0x49
 8002138:	f7ff fd55 	bl	8001be6 <SD_SendCmd>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	f040 80a8 	bne.w	8002294 <SD_disk_ioctl+0x230>
 8002144:	f107 030c 	add.w	r3, r7, #12
 8002148:	2110      	movs	r1, #16
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff fcda 	bl	8001b04 <SD_RxDataBlock>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 809e 	beq.w	8002294 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8002158:	7b3b      	ldrb	r3, [r7, #12]
 800215a:	099b      	lsrs	r3, r3, #6
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b01      	cmp	r3, #1
 8002160:	d10e      	bne.n	8002180 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002162:	7d7b      	ldrb	r3, [r7, #21]
 8002164:	b29a      	uxth	r2, r3
 8002166:	7d3b      	ldrb	r3, [r7, #20]
 8002168:	b29b      	uxth	r3, r3
 800216a:	021b      	lsls	r3, r3, #8
 800216c:	b29b      	uxth	r3, r3
 800216e:	4413      	add	r3, r2
 8002170:	b29b      	uxth	r3, r3
 8002172:	3301      	adds	r3, #1
 8002174:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8002176:	8bfb      	ldrh	r3, [r7, #30]
 8002178:	029a      	lsls	r2, r3, #10
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	e02e      	b.n	80021de <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002180:	7c7b      	ldrb	r3, [r7, #17]
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	b2da      	uxtb	r2, r3
 8002188:	7dbb      	ldrb	r3, [r7, #22]
 800218a:	09db      	lsrs	r3, r3, #7
 800218c:	b2db      	uxtb	r3, r3
 800218e:	4413      	add	r3, r2
 8002190:	b2da      	uxtb	r2, r3
 8002192:	7d7b      	ldrb	r3, [r7, #21]
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	b2db      	uxtb	r3, r3
 8002198:	f003 0306 	and.w	r3, r3, #6
 800219c:	b2db      	uxtb	r3, r3
 800219e:	4413      	add	r3, r2
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	3302      	adds	r3, #2
 80021a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80021a8:	7d3b      	ldrb	r3, [r7, #20]
 80021aa:	099b      	lsrs	r3, r3, #6
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	7cfb      	ldrb	r3, [r7, #19]
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	4413      	add	r3, r2
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	7cbb      	ldrb	r3, [r7, #18]
 80021be:	029b      	lsls	r3, r3, #10
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	4413      	add	r3, r2
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	3301      	adds	r3, #1
 80021ce:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80021d0:	8bfa      	ldrh	r2, [r7, #30]
 80021d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80021d6:	3b09      	subs	r3, #9
 80021d8:	409a      	lsls	r2, r3
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80021e4:	e056      	b.n	8002294 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021ec:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80021ee:	2300      	movs	r3, #0
 80021f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80021f4:	e055      	b.n	80022a2 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80021f6:	f7ff fc11 	bl	8001a1c <SD_ReadyWait>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2bff      	cmp	r3, #255	; 0xff
 80021fe:	d14b      	bne.n	8002298 <SD_disk_ioctl+0x234>
 8002200:	2300      	movs	r3, #0
 8002202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002206:	e047      	b.n	8002298 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002208:	2100      	movs	r1, #0
 800220a:	2049      	movs	r0, #73	; 0x49
 800220c:	f7ff fceb 	bl	8001be6 <SD_SendCmd>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d142      	bne.n	800229c <SD_disk_ioctl+0x238>
 8002216:	2110      	movs	r1, #16
 8002218:	6a38      	ldr	r0, [r7, #32]
 800221a:	f7ff fc73 	bl	8001b04 <SD_RxDataBlock>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d03b      	beq.n	800229c <SD_disk_ioctl+0x238>
 8002224:	2300      	movs	r3, #0
 8002226:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800222a:	e037      	b.n	800229c <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800222c:	2100      	movs	r1, #0
 800222e:	204a      	movs	r0, #74	; 0x4a
 8002230:	f7ff fcd9 	bl	8001be6 <SD_SendCmd>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d132      	bne.n	80022a0 <SD_disk_ioctl+0x23c>
 800223a:	2110      	movs	r1, #16
 800223c:	6a38      	ldr	r0, [r7, #32]
 800223e:	f7ff fc61 	bl	8001b04 <SD_RxDataBlock>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d02b      	beq.n	80022a0 <SD_disk_ioctl+0x23c>
 8002248:	2300      	movs	r3, #0
 800224a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800224e:	e027      	b.n	80022a0 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8002250:	2100      	movs	r1, #0
 8002252:	207a      	movs	r0, #122	; 0x7a
 8002254:	f7ff fcc7 	bl	8001be6 <SD_SendCmd>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d116      	bne.n	800228c <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 800225e:	2300      	movs	r3, #0
 8002260:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002264:	e00b      	b.n	800227e <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8002266:	6a3c      	ldr	r4, [r7, #32]
 8002268:	1c63      	adds	r3, r4, #1
 800226a:	623b      	str	r3, [r7, #32]
 800226c:	f7ff fbac 	bl	80019c8 <SPI_RxByte>
 8002270:	4603      	mov	r3, r0
 8002272:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8002274:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002278:	3301      	adds	r3, #1
 800227a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800227e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002282:	2b03      	cmp	r3, #3
 8002284:	d9ef      	bls.n	8002266 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8002286:	2300      	movs	r3, #0
 8002288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 800228c:	2304      	movs	r3, #4
 800228e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002292:	e006      	b.n	80022a2 <SD_disk_ioctl+0x23e>
			break;
 8002294:	bf00      	nop
 8002296:	e004      	b.n	80022a2 <SD_disk_ioctl+0x23e>
			break;
 8002298:	bf00      	nop
 800229a:	e002      	b.n	80022a2 <SD_disk_ioctl+0x23e>
			break;
 800229c:	bf00      	nop
 800229e:	e000      	b.n	80022a2 <SD_disk_ioctl+0x23e>
			break;
 80022a0:	bf00      	nop
		}

		DESELECT();
 80022a2:	f7ff fb4d 	bl	8001940 <DESELECT>
		SPI_RxByte();
 80022a6:	f7ff fb8f 	bl	80019c8 <SPI_RxByte>
	}

	return res;
 80022aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	372c      	adds	r7, #44	; 0x2c
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd90      	pop	{r4, r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20000000 	.word	0x20000000

080022bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	4a07      	ldr	r2, [pc, #28]	; (80022e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80022cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	4a06      	ldr	r2, [pc, #24]	; (80022ec <vApplicationGetIdleTaskMemory+0x30>)
 80022d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2280      	movs	r2, #128	; 0x80
 80022d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80022da:	bf00      	nop
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	2000021c 	.word	0x2000021c
 80022ec:	200002bc 	.word	0x200002bc

080022f0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80022f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80022fc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b00      	cmp	r3, #0
 8002306:	d013      	beq.n	8002330 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002308:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800230c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002310:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00b      	beq.n	8002330 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002318:	e000      	b.n	800231c <ITM_SendChar+0x2c>
    {
      __NOP();
 800231a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800231c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0f9      	beq.n	800231a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002326:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002330:	687b      	ldr	r3, [r7, #4]
}
 8002332:	4618      	mov	r0, r3
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
	...

08002340 <readJoystick>:
	uint16_t joystickData[2]; // [1]-> horizontal output, [2]->verticalOutput
	float joystickVoltage[2];
}Joystick;

void readJoystick(Joystick* stick)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1,stick->joystickData,2);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2202      	movs	r2, #2
 800234c:	4619      	mov	r1, r3
 800234e:	4805      	ldr	r0, [pc, #20]	; (8002364 <readJoystick+0x24>)
 8002350:	f002 f80c 	bl	800436c <HAL_ADC_Start_DMA>
	convertRaw2Voltage(stick);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 f807 	bl	8002368 <convertRaw2Voltage>

}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20002594 	.word	0x20002594

08002368 <convertRaw2Voltage>:

void convertRaw2Voltage( Joystick* stick)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
	stick->joystickVoltage[0]=stick->joystickData[0]*3.3/4095.0f;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f7fe f8f5 	bl	8000564 <__aeabi_i2d>
 800237a:	a31b      	add	r3, pc, #108	; (adr r3, 80023e8 <convertRaw2Voltage+0x80>)
 800237c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002380:	f7fe f95a 	bl	8000638 <__aeabi_dmul>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4610      	mov	r0, r2
 800238a:	4619      	mov	r1, r3
 800238c:	a318      	add	r3, pc, #96	; (adr r3, 80023f0 <convertRaw2Voltage+0x88>)
 800238e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002392:	f7fe fa7b 	bl	800088c <__aeabi_ddiv>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	4610      	mov	r0, r2
 800239c:	4619      	mov	r1, r3
 800239e:	f7fe fc43 	bl	8000c28 <__aeabi_d2f>
 80023a2:	4602      	mov	r2, r0
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	605a      	str	r2, [r3, #4]
	stick->joystickVoltage[1]=stick->joystickData[1]*3.3/4095.0f;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	885b      	ldrh	r3, [r3, #2]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe f8d9 	bl	8000564 <__aeabi_i2d>
 80023b2:	a30d      	add	r3, pc, #52	; (adr r3, 80023e8 <convertRaw2Voltage+0x80>)
 80023b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b8:	f7fe f93e 	bl	8000638 <__aeabi_dmul>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4610      	mov	r0, r2
 80023c2:	4619      	mov	r1, r3
 80023c4:	a30a      	add	r3, pc, #40	; (adr r3, 80023f0 <convertRaw2Voltage+0x88>)
 80023c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ca:	f7fe fa5f 	bl	800088c <__aeabi_ddiv>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	4610      	mov	r0, r2
 80023d4:	4619      	mov	r1, r3
 80023d6:	f7fe fc27 	bl	8000c28 <__aeabi_d2f>
 80023da:	4602      	mov	r2, r0
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	609a      	str	r2, [r3, #8]


}
 80023e0:	bf00      	nop
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	66666666 	.word	0x66666666
 80023ec:	400a6666 	.word	0x400a6666
 80023f0:	00000000 	.word	0x00000000
 80023f4:	40affe00 	.word	0x40affe00

080023f8 <HAL_GPIO_EXTI_Callback>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin==INT_MPU6050_Pin) //interrupt called at 1kHz
 8002402:	88fb      	ldrh	r3, [r7, #6]
 8002404:	2b02      	cmp	r3, #2
 8002406:	d113      	bne.n	8002430 <HAL_GPIO_EXTI_Callback+0x38>
	{
		mpuIntCount=mpuIntCount+1;
 8002408:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <HAL_GPIO_EXTI_Callback+0x40>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	3301      	adds	r3, #1
 800240e:	b2da      	uxtb	r2, r3
 8002410:	4b09      	ldr	r3, [pc, #36]	; (8002438 <HAL_GPIO_EXTI_Callback+0x40>)
 8002412:	701a      	strb	r2, [r3, #0]
		if(mpuIntCount==20){ // downsample MPU6050 data at 50 Hz
 8002414:	4b08      	ldr	r3, [pc, #32]	; (8002438 <HAL_GPIO_EXTI_Callback+0x40>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b14      	cmp	r3, #20
 800241a:	d109      	bne.n	8002430 <HAL_GPIO_EXTI_Callback+0x38>
			message=MPU6050readDataDMA(&mpu6050);
 800241c:	4807      	ldr	r0, [pc, #28]	; (800243c <HAL_GPIO_EXTI_Callback+0x44>)
 800241e:	f7ff f9b0 	bl	8001782 <MPU6050readDataDMA>
 8002422:	4603      	mov	r3, r0
 8002424:	461a      	mov	r2, r3
 8002426:	4b06      	ldr	r3, [pc, #24]	; (8002440 <HAL_GPIO_EXTI_Callback+0x48>)
 8002428:	701a      	strb	r2, [r3, #0]
			//printf("error message: %i\r\n:",message);
			mpuIntCount=0;
 800242a:	4b03      	ldr	r3, [pc, #12]	; (8002438 <HAL_GPIO_EXTI_Callback+0x40>)
 800242c:	2200      	movs	r2, #0
 800242e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002430:	bf00      	nop
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	200029fd 	.word	0x200029fd
 800243c:	200029a4 	.word	0x200029a4
 8002440:	200029fc 	.word	0x200029fc

08002444 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef* hi2c)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance==mpu6050.i2cHandle->Instance)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	4b07      	ldr	r3, [pc, #28]	; (8002470 <HAL_I2C_MemRxCpltCallback+0x2c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d106      	bne.n	8002468 <HAL_I2C_MemRxCpltCallback+0x24>
	{
		mpu6050.rxFlag=0;
 800245a:	4b05      	ldr	r3, [pc, #20]	; (8002470 <HAL_I2C_MemRxCpltCallback+0x2c>)
 800245c:	2200      	movs	r2, #0
 800245e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		MPU6050convertRawData(&mpu6050);
 8002462:	4803      	ldr	r0, [pc, #12]	; (8002470 <HAL_I2C_MemRxCpltCallback+0x2c>)
 8002464:	f7ff f9b8 	bl	80017d8 <MPU6050convertRawData>
//	    printf("az %.2f\r\n",*accelz);
//		printf("MPU6050 data read success");
//
	}

}
 8002468:	bf00      	nop
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	200029a4 	.word	0x200029a4

08002474 <HAL_ADC_ConvCpltCallback>:
	uint8_t len=strlen(string);
	HAL_UART_Transmit(&huart2,(uint8_t*)string,len,200);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
//	if(hadc->Instance==ADC1){
//		printf("Joystick x %.2f\r\n",joystick.joystickVoltage[0]);
//		printf("Joystick y %.2f\r\n",joystick.joystickVoltage[1]);
//	}

}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
	if (huart->Instance==USART3)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a0e      	ldr	r2, [pc, #56]	; (80024d0 <HAL_UART_RxCpltCallback+0x48>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d10f      	bne.n	80024ba <HAL_UART_RxCpltCallback+0x32>
	{
		if(currentState==IDLE_STATE)
 800249a:	4b0e      	ldr	r3, [pc, #56]	; (80024d4 <HAL_UART_RxCpltCallback+0x4c>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d107      	bne.n	80024b2 <HAL_UART_RxCpltCallback+0x2a>
		{
			if(transferControlByte==0xFF)
 80024a2:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <HAL_UART_RxCpltCallback+0x50>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2bff      	cmp	r3, #255	; 0xff
 80024a8:	d107      	bne.n	80024ba <HAL_UART_RxCpltCallback+0x32>
				currentState=SEND_ACK_STATE;
 80024aa:	4b0a      	ldr	r3, [pc, #40]	; (80024d4 <HAL_UART_RxCpltCallback+0x4c>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	701a      	strb	r2, [r3, #0]
 80024b0:	e003      	b.n	80024ba <HAL_UART_RxCpltCallback+0x32>
		}

		else if(currentState==SENDING_DATA_STATE)
 80024b2:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <HAL_UART_RxCpltCallback+0x4c>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d103      	bne.n	80024c2 <HAL_UART_RxCpltCallback+0x3a>
			currentState==IDLE_STATE;
		}
		else
			return;
	}
	transferControlByte=0x00;
 80024ba:	4b07      	ldr	r3, [pc, #28]	; (80024d8 <HAL_UART_RxCpltCallback+0x50>)
 80024bc:	2200      	movs	r2, #0
 80024be:	701a      	strb	r2, [r3, #0]
 80024c0:	e000      	b.n	80024c4 <HAL_UART_RxCpltCallback+0x3c>
			return;
 80024c2:	bf00      	nop




}
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	40004800 	.word	0x40004800
 80024d4:	20002a12 	.word	0x20002a12
 80024d8:	20002a10 	.word	0x20002a10

080024dc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]


}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <_write>:

int _write(int file, char *ptr, int len)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	e009      	b.n	8002516 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	1c5a      	adds	r2, r3, #1
 8002506:	60ba      	str	r2, [r7, #8]
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff fef0 	bl	80022f0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	3301      	adds	r3, #1
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	429a      	cmp	r2, r3
 800251c:	dbf1      	blt.n	8002502 <_write+0x12>
  }
  return len;
 800251e:	687b      	ldr	r3, [r7, #4]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002528:	b5b0      	push	{r4, r5, r7, lr}
 800252a:	b0b2      	sub	sp, #200	; 0xc8
 800252c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800252e:	f001 fd63 	bl	8003ff8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002532:	f000 f959 	bl	80027e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002536:	f000 fc27 	bl	8002d88 <MX_GPIO_Init>
  MX_DMA_Init();
 800253a:	f000 fbd7 	bl	8002cec <MX_DMA_Init>
  MX_ADC1_Init();
 800253e:	f000 f9bf 	bl	80028c0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002542:	f000 fa1d 	bl	8002980 <MX_I2C1_Init>
  MX_TIM3_Init();
 8002546:	f000 fafb 	bl	8002b40 <MX_TIM3_Init>
  MX_I2C2_Init();
 800254a:	f000 fa47 	bl	80029dc <MX_I2C2_Init>
  MX_SPI2_Init();
 800254e:	f000 fa73 	bl	8002a38 <MX_SPI2_Init>
  MX_FATFS_Init();
 8002552:	f00a fa35 	bl	800c9c0 <MX_FATFS_Init>
  MX_TIM2_Init();
 8002556:	f000 faa5 	bl	8002aa4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800255a:	f000 fb6b 	bl	8002c34 <MX_USART2_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 800255e:	f000 fbbd 	bl	8002cdc <MX_USB_OTG_FS_USB_Init>
  MX_USART3_UART_Init();
 8002562:	f000 fb91 	bl	8002c88 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Start servo PWM ( pulse duration from 0.9ms to 2.1ms with 1.5 as center ) duty cycle varies from 4.5% to 7.5%
  //( CCR can go from 450 to 750 )
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8002566:	2100      	movs	r1, #0
 8002568:	4883      	ldr	r0, [pc, #524]	; (8002778 <main+0x250>)
 800256a:	f008 f90f 	bl	800a78c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 800256e:	2104      	movs	r1, #4
 8002570:	4881      	ldr	r0, [pc, #516]	; (8002778 <main+0x250>)
 8002572:	f008 f90b 	bl	800a78c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8002576:	2108      	movs	r1, #8
 8002578:	487f      	ldr	r0, [pc, #508]	; (8002778 <main+0x250>)
 800257a:	f008 f907 	bl	800a78c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 800257e:	210c      	movs	r1, #12
 8002580:	487d      	ldr	r0, [pc, #500]	; (8002778 <main+0x250>)
 8002582:	f008 f903 	bl	800a78c <HAL_TIM_PWM_Start>

  htim3.Instance->CCR1=600;
 8002586:	4b7c      	ldr	r3, [pc, #496]	; (8002778 <main+0x250>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800258e:	635a      	str	r2, [r3, #52]	; 0x34
  htim3.Instance->CCR2=600;
 8002590:	4b79      	ldr	r3, [pc, #484]	; (8002778 <main+0x250>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002598:	639a      	str	r2, [r3, #56]	; 0x38
  htim3.Instance->CCR3=600;
 800259a:	4b77      	ldr	r3, [pc, #476]	; (8002778 <main+0x250>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f44f 7216 	mov.w	r2, #600	; 0x258
 80025a2:	63da      	str	r2, [r3, #60]	; 0x3c
  htim3.Instance->CCR4=600;
 80025a4:	4b74      	ldr	r3, [pc, #464]	; (8002778 <main+0x250>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f44f 7216 	mov.w	r2, #600	; 0x258
 80025ac:	641a      	str	r2, [r3, #64]	; 0x40


  // Start DMA streams
  HAL_ADC_Start_DMA(&hadc1,joystick.joystickData,2);
 80025ae:	2202      	movs	r2, #2
 80025b0:	4972      	ldr	r1, [pc, #456]	; (800277c <main+0x254>)
 80025b2:	4873      	ldr	r0, [pc, #460]	; (8002780 <main+0x258>)
 80025b4:	f001 feda 	bl	800436c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim2);
 80025b8:	4872      	ldr	r0, [pc, #456]	; (8002784 <main+0x25c>)
 80025ba:	f007 ffbf 	bl	800a53c <HAL_TIM_Base_Start>
  HAL_UART_Receive_DMA(&huart3,uartRxBuffer,8);
 80025be:	2208      	movs	r2, #8
 80025c0:	4971      	ldr	r1, [pc, #452]	; (8002788 <main+0x260>)
 80025c2:	4872      	ldr	r0, [pc, #456]	; (800278c <main+0x264>)
 80025c4:	f009 f8e3 	bl	800b78e <HAL_UART_Receive_DMA>

  // Put servos in initial positioning (centered)
  htim3.Instance->CCR1=450;
 80025c8:	4b6b      	ldr	r3, [pc, #428]	; (8002778 <main+0x250>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80025d0:	635a      	str	r2, [r3, #52]	; 0x34
  htim3.Instance->CCR2=450;
 80025d2:	4b69      	ldr	r3, [pc, #420]	; (8002778 <main+0x250>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80025da:	639a      	str	r2, [r3, #56]	; 0x38
  htim3.Instance->CCR3=450;
 80025dc:	4b66      	ldr	r3, [pc, #408]	; (8002778 <main+0x250>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80025e4:	63da      	str	r2, [r3, #60]	; 0x3c
  htim3.Instance->CCR4=450;
 80025e6:	4b64      	ldr	r3, [pc, #400]	; (8002778 <main+0x250>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80025ee:	641a      	str	r2, [r3, #64]	; 0x40

  // sensor initialization
  uint8_t deviceReady;
  deviceReady=checkMPU6050Ready();
 80025f0:	f7ff f806 	bl	8001600 <checkMPU6050Ready>
 80025f4:	4603      	mov	r3, r0
 80025f6:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
  uint8_t configGood=MPU6050init(&mpu6050,&hi2c1 );
 80025fa:	4965      	ldr	r1, [pc, #404]	; (8002790 <main+0x268>)
 80025fc:	4865      	ldr	r0, [pc, #404]	; (8002794 <main+0x26c>)
 80025fe:	f7ff f833 	bl	8001668 <MPU6050init>
 8002602:	4603      	mov	r3, r0
 8002604:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
  uint8_t rec;
  HAL_StatusTypeDef stat;
  stat=HAL_I2C_Mem_Read (&hi2c1,MPU6050ADDR,WHO_AM_I_REG,I2C_MEMADD_SIZE_8BIT,&rec,1,100);
 8002608:	2364      	movs	r3, #100	; 0x64
 800260a:	9302      	str	r3, [sp, #8]
 800260c:	2301      	movs	r3, #1
 800260e:	9301      	str	r3, [sp, #4]
 8002610:	f107 03b3 	add.w	r3, r7, #179	; 0xb3
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	2301      	movs	r3, #1
 8002618:	2275      	movs	r2, #117	; 0x75
 800261a:	21d0      	movs	r1, #208	; 0xd0
 800261c:	485c      	ldr	r0, [pc, #368]	; (8002790 <main+0x268>)
 800261e:	f003 feb3 	bl	8006388 <HAL_I2C_Mem_Read>
 8002622:	4603      	mov	r3, r0
 8002624:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
  Bar30init(&pressureSensor, &hi2c2);
 8002628:	495b      	ldr	r1, [pc, #364]	; (8002798 <main+0x270>)
 800262a:	485c      	ldr	r0, [pc, #368]	; (800279c <main+0x274>)
 800262c:	f7fe fcca 	bl	8000fc4 <Bar30init>
  uint8_t i2cGood=0;
 8002630:	2300      	movs	r3, #0
 8002632:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
  i2cGood=Bar30reset(&pressureSensor);
 8002636:	4859      	ldr	r0, [pc, #356]	; (800279c <main+0x274>)
 8002638:	f7fe fcfa 	bl	8001030 <Bar30reset>
 800263c:	4603      	mov	r3, r0
 800263e:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
  printf("Reset Command Result : %i\r\n",i2cGood );
 8002642:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8002646:	4619      	mov	r1, r3
 8002648:	4855      	ldr	r0, [pc, #340]	; (80027a0 <main+0x278>)
 800264a:	f010 fe2f 	bl	80132ac <iprintf>
  i2cGood=Bar30getCalibration(&pressureSensor);
 800264e:	4853      	ldr	r0, [pc, #332]	; (800279c <main+0x274>)
 8002650:	f7fe fd14 	bl	800107c <Bar30getCalibration>
 8002654:	4603      	mov	r3, r0
 8002656:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
  printf("Calibration phase result : %i\r\n",i2cGood );
 800265a:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 800265e:	4619      	mov	r1, r3
 8002660:	4850      	ldr	r0, [pc, #320]	; (80027a4 <main+0x27c>)
 8002662:	f010 fe23 	bl	80132ac <iprintf>
  i2cGood=Bar30CRCcheck(pressureSensor.calibrationResult);
 8002666:	4850      	ldr	r0, [pc, #320]	; (80027a8 <main+0x280>)
 8002668:	f7fe fe70 	bl	800134c <Bar30CRCcheck>
 800266c:	4603      	mov	r3, r0
 800266e:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4

  HAL_UART_Receive_DMA(&huart3,&transferControlByte,1);
 8002672:	2201      	movs	r2, #1
 8002674:	494d      	ldr	r1, [pc, #308]	; (80027ac <main+0x284>)
 8002676:	4845      	ldr	r0, [pc, #276]	; (800278c <main+0x264>)
 8002678:	f009 f889 	bl	800b78e <HAL_UART_Receive_DMA>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of sender */
  osMessageQDef(sender, 32, uint16_t);
 800267c:	4b4c      	ldr	r3, [pc, #304]	; (80027b0 <main+0x288>)
 800267e:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8002682:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002684:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  senderHandle = osMessageCreate(osMessageQ(sender), NULL);
 8002688:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800268c:	2100      	movs	r1, #0
 800268e:	4618      	mov	r0, r3
 8002690:	f00d fdf3 	bl	801027a <osMessageCreate>
 8002694:	4603      	mov	r3, r0
 8002696:	4a47      	ldr	r2, [pc, #284]	; (80027b4 <main+0x28c>)
 8002698:	6013      	str	r3, [r2, #0]

  /* definition and creation of receiver */
  osMessageQDef(receiver, 16, uint16_t);
 800269a:	4b47      	ldr	r3, [pc, #284]	; (80027b8 <main+0x290>)
 800269c:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80026a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  receiverHandle = osMessageCreate(osMessageQ(receiver), NULL);
 80026a6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80026aa:	2100      	movs	r1, #0
 80026ac:	4618      	mov	r0, r3
 80026ae:	f00d fde4 	bl	801027a <osMessageCreate>
 80026b2:	4603      	mov	r3, r0
 80026b4:	4a41      	ldr	r2, [pc, #260]	; (80027bc <main+0x294>)
 80026b6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of DefaultTask */
  osThreadDef(DefaultTask, defaultTask, osPriorityIdle, 0, 128);
 80026b8:	4b41      	ldr	r3, [pc, #260]	; (80027c0 <main+0x298>)
 80026ba:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80026be:	461d      	mov	r5, r3
 80026c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DefaultTaskHandle = osThreadCreate(osThread(DefaultTask), NULL);
 80026cc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80026d0:	2100      	movs	r1, #0
 80026d2:	4618      	mov	r0, r3
 80026d4:	f00d fca7 	bl	8010026 <osThreadCreate>
 80026d8:	4603      	mov	r3, r0
 80026da:	4a3a      	ldr	r2, [pc, #232]	; (80027c4 <main+0x29c>)
 80026dc:	6013      	str	r3, [r2, #0]

  /* definition and creation of LEDscreenTask */
  osThreadDef(LEDscreenTask, sendDataToScreen, osPriorityNormal, 0, 1024);
 80026de:	4b3a      	ldr	r3, [pc, #232]	; (80027c8 <main+0x2a0>)
 80026e0:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80026e4:	461d      	mov	r5, r3
 80026e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LEDscreenTaskHandle = osThreadCreate(osThread(LEDscreenTask), NULL);
 80026f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80026f6:	2100      	movs	r1, #0
 80026f8:	4618      	mov	r0, r3
 80026fa:	f00d fc94 	bl	8010026 <osThreadCreate>
 80026fe:	4603      	mov	r3, r0
 8002700:	4a32      	ldr	r2, [pc, #200]	; (80027cc <main+0x2a4>)
 8002702:	6013      	str	r3, [r2, #0]

  /* definition and creation of controlLoopTask */
  osThreadDef(controlLoopTask, updateControlLoop, osPriorityHigh, 0, 256);
 8002704:	4b32      	ldr	r3, [pc, #200]	; (80027d0 <main+0x2a8>)
 8002706:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800270a:	461d      	mov	r5, r3
 800270c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800270e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002710:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002714:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  controlLoopTaskHandle = osThreadCreate(osThread(controlLoopTask), NULL);
 8002718:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800271c:	2100      	movs	r1, #0
 800271e:	4618      	mov	r0, r3
 8002720:	f00d fc81 	bl	8010026 <osThreadCreate>
 8002724:	4603      	mov	r3, r0
 8002726:	4a2b      	ldr	r2, [pc, #172]	; (80027d4 <main+0x2ac>)
 8002728:	6013      	str	r3, [r2, #0]

  /* definition and creation of SDcardTask */
  osThreadDef(SDcardTask, recordSDdata, osPriorityAboveNormal, 0, 2048);
 800272a:	4b2b      	ldr	r3, [pc, #172]	; (80027d8 <main+0x2b0>)
 800272c:	f107 0420 	add.w	r4, r7, #32
 8002730:	461d      	mov	r5, r3
 8002732:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002734:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002736:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800273a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SDcardTaskHandle = osThreadCreate(osThread(SDcardTask), NULL);
 800273e:	f107 0320 	add.w	r3, r7, #32
 8002742:	2100      	movs	r1, #0
 8002744:	4618      	mov	r0, r3
 8002746:	f00d fc6e 	bl	8010026 <osThreadCreate>
 800274a:	4603      	mov	r3, r0
 800274c:	4a23      	ldr	r2, [pc, #140]	; (80027dc <main+0x2b4>)
 800274e:	6013      	str	r3, [r2, #0]

  /* definition and creation of pressureSensorT */
  osThreadDef(pressureSensorT, getBar30Data, osPriorityNormal, 0, 128);
 8002750:	4b23      	ldr	r3, [pc, #140]	; (80027e0 <main+0x2b8>)
 8002752:	1d3c      	adds	r4, r7, #4
 8002754:	461d      	mov	r5, r3
 8002756:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002758:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800275a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800275e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pressureSensorTHandle = osThreadCreate(osThread(pressureSensorT), NULL);
 8002762:	1d3b      	adds	r3, r7, #4
 8002764:	2100      	movs	r1, #0
 8002766:	4618      	mov	r0, r3
 8002768:	f00d fc5d 	bl	8010026 <osThreadCreate>
 800276c:	4603      	mov	r3, r0
 800276e:	4a1d      	ldr	r2, [pc, #116]	; (80027e4 <main+0x2bc>)
 8002770:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002772:	f00d fc51 	bl	8010018 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  while (1)
 8002776:	e7fe      	b.n	8002776 <main+0x24e>
 8002778:	200027ec 	.word	0x200027ec
 800277c:	20002998 	.word	0x20002998
 8002780:	20002594 	.word	0x20002594
 8002784:	200027a4 	.word	0x200027a4
 8002788:	20002a00 	.word	0x20002a00
 800278c:	20002878 	.word	0x20002878
 8002790:	2000263c 	.word	0x2000263c
 8002794:	200029a4 	.word	0x200029a4
 8002798:	20002690 	.word	0x20002690
 800279c:	200029d4 	.word	0x200029d4
 80027a0:	08015780 	.word	0x08015780
 80027a4:	0801579c 	.word	0x0801579c
 80027a8:	200029e8 	.word	0x200029e8
 80027ac:	20002a10 	.word	0x20002a10
 80027b0:	080157bc 	.word	0x080157bc
 80027b4:	20002990 	.word	0x20002990
 80027b8:	080157cc 	.word	0x080157cc
 80027bc:	20002994 	.word	0x20002994
 80027c0:	080157e8 	.word	0x080157e8
 80027c4:	2000297c 	.word	0x2000297c
 80027c8:	08015814 	.word	0x08015814
 80027cc:	20002980 	.word	0x20002980
 80027d0:	08015840 	.word	0x08015840
 80027d4:	20002984 	.word	0x20002984
 80027d8:	08015868 	.word	0x08015868
 80027dc:	20002988 	.word	0x20002988
 80027e0:	08015894 	.word	0x08015894
 80027e4:	2000298c 	.word	0x2000298c

080027e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b094      	sub	sp, #80	; 0x50
 80027ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027ee:	f107 031c 	add.w	r3, r7, #28
 80027f2:	2234      	movs	r2, #52	; 0x34
 80027f4:	2100      	movs	r1, #0
 80027f6:	4618      	mov	r0, r3
 80027f8:	f010 fec6 	bl	8013588 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027fc:	f107 0308 	add.w	r3, r7, #8
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	60da      	str	r2, [r3, #12]
 800280a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800280c:	2300      	movs	r3, #0
 800280e:	607b      	str	r3, [r7, #4]
 8002810:	4b29      	ldr	r3, [pc, #164]	; (80028b8 <SystemClock_Config+0xd0>)
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	4a28      	ldr	r2, [pc, #160]	; (80028b8 <SystemClock_Config+0xd0>)
 8002816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800281a:	6413      	str	r3, [r2, #64]	; 0x40
 800281c:	4b26      	ldr	r3, [pc, #152]	; (80028b8 <SystemClock_Config+0xd0>)
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002824:	607b      	str	r3, [r7, #4]
 8002826:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002828:	2300      	movs	r3, #0
 800282a:	603b      	str	r3, [r7, #0]
 800282c:	4b23      	ldr	r3, [pc, #140]	; (80028bc <SystemClock_Config+0xd4>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a22      	ldr	r2, [pc, #136]	; (80028bc <SystemClock_Config+0xd4>)
 8002832:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002836:	6013      	str	r3, [r2, #0]
 8002838:	4b20      	ldr	r3, [pc, #128]	; (80028bc <SystemClock_Config+0xd4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002840:	603b      	str	r3, [r7, #0]
 8002842:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002844:	2301      	movs	r3, #1
 8002846:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002848:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800284c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800284e:	2302      	movs	r3, #2
 8002850:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002852:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002856:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002858:	2308      	movs	r3, #8
 800285a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800285c:	23a8      	movs	r3, #168	; 0xa8
 800285e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002860:	2302      	movs	r3, #2
 8002862:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002864:	2307      	movs	r3, #7
 8002866:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002868:	2302      	movs	r3, #2
 800286a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800286c:	f107 031c 	add.w	r3, r7, #28
 8002870:	4618      	mov	r0, r3
 8002872:	f006 ff43 	bl	80096fc <HAL_RCC_OscConfig>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800287c:	f000 fe66 	bl	800354c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002880:	230f      	movs	r3, #15
 8002882:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002884:	2302      	movs	r3, #2
 8002886:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002888:	2300      	movs	r3, #0
 800288a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800288c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002890:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002892:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002896:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002898:	f107 0308 	add.w	r3, r7, #8
 800289c:	2105      	movs	r1, #5
 800289e:	4618      	mov	r0, r3
 80028a0:	f006 fbb2 	bl	8009008 <HAL_RCC_ClockConfig>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80028aa:	f000 fe4f 	bl	800354c <Error_Handler>
  }
}
 80028ae:	bf00      	nop
 80028b0:	3750      	adds	r7, #80	; 0x50
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40007000 	.word	0x40007000

080028c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80028c6:	463b      	mov	r3, r7
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80028d2:	4b29      	ldr	r3, [pc, #164]	; (8002978 <MX_ADC1_Init+0xb8>)
 80028d4:	4a29      	ldr	r2, [pc, #164]	; (800297c <MX_ADC1_Init+0xbc>)
 80028d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80028d8:	4b27      	ldr	r3, [pc, #156]	; (8002978 <MX_ADC1_Init+0xb8>)
 80028da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80028e0:	4b25      	ldr	r3, [pc, #148]	; (8002978 <MX_ADC1_Init+0xb8>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80028e6:	4b24      	ldr	r3, [pc, #144]	; (8002978 <MX_ADC1_Init+0xb8>)
 80028e8:	2201      	movs	r2, #1
 80028ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80028ec:	4b22      	ldr	r3, [pc, #136]	; (8002978 <MX_ADC1_Init+0xb8>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80028f2:	4b21      	ldr	r3, [pc, #132]	; (8002978 <MX_ADC1_Init+0xb8>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80028fa:	4b1f      	ldr	r3, [pc, #124]	; (8002978 <MX_ADC1_Init+0xb8>)
 80028fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002900:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8002902:	4b1d      	ldr	r3, [pc, #116]	; (8002978 <MX_ADC1_Init+0xb8>)
 8002904:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002908:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800290a:	4b1b      	ldr	r3, [pc, #108]	; (8002978 <MX_ADC1_Init+0xb8>)
 800290c:	2200      	movs	r2, #0
 800290e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8002910:	4b19      	ldr	r3, [pc, #100]	; (8002978 <MX_ADC1_Init+0xb8>)
 8002912:	2202      	movs	r2, #2
 8002914:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002916:	4b18      	ldr	r3, [pc, #96]	; (8002978 <MX_ADC1_Init+0xb8>)
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800291e:	4b16      	ldr	r3, [pc, #88]	; (8002978 <MX_ADC1_Init+0xb8>)
 8002920:	2201      	movs	r2, #1
 8002922:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002924:	4814      	ldr	r0, [pc, #80]	; (8002978 <MX_ADC1_Init+0xb8>)
 8002926:	f001 fbcd 	bl	80040c4 <HAL_ADC_Init>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8002930:	f000 fe0c 	bl	800354c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002934:	2300      	movs	r3, #0
 8002936:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002938:	2301      	movs	r3, #1
 800293a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800293c:	2306      	movs	r3, #6
 800293e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002940:	463b      	mov	r3, r7
 8002942:	4619      	mov	r1, r3
 8002944:	480c      	ldr	r0, [pc, #48]	; (8002978 <MX_ADC1_Init+0xb8>)
 8002946:	f001 fe3f 	bl	80045c8 <HAL_ADC_ConfigChannel>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002950:	f000 fdfc 	bl	800354c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002954:	2301      	movs	r3, #1
 8002956:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002958:	2302      	movs	r3, #2
 800295a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800295c:	463b      	mov	r3, r7
 800295e:	4619      	mov	r1, r3
 8002960:	4805      	ldr	r0, [pc, #20]	; (8002978 <MX_ADC1_Init+0xb8>)
 8002962:	f001 fe31 	bl	80045c8 <HAL_ADC_ConfigChannel>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800296c:	f000 fdee 	bl	800354c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002970:	bf00      	nop
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	20002594 	.word	0x20002594
 800297c:	40012000 	.word	0x40012000

08002980 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002984:	4b12      	ldr	r3, [pc, #72]	; (80029d0 <MX_I2C1_Init+0x50>)
 8002986:	4a13      	ldr	r2, [pc, #76]	; (80029d4 <MX_I2C1_Init+0x54>)
 8002988:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800298a:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <MX_I2C1_Init+0x50>)
 800298c:	4a12      	ldr	r2, [pc, #72]	; (80029d8 <MX_I2C1_Init+0x58>)
 800298e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002990:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <MX_I2C1_Init+0x50>)
 8002992:	2200      	movs	r2, #0
 8002994:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002996:	4b0e      	ldr	r3, [pc, #56]	; (80029d0 <MX_I2C1_Init+0x50>)
 8002998:	2200      	movs	r2, #0
 800299a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800299c:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <MX_I2C1_Init+0x50>)
 800299e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029a4:	4b0a      	ldr	r3, [pc, #40]	; (80029d0 <MX_I2C1_Init+0x50>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80029aa:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <MX_I2C1_Init+0x50>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029b0:	4b07      	ldr	r3, [pc, #28]	; (80029d0 <MX_I2C1_Init+0x50>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029b6:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <MX_I2C1_Init+0x50>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029bc:	4804      	ldr	r0, [pc, #16]	; (80029d0 <MX_I2C1_Init+0x50>)
 80029be:	f002 ff81 	bl	80058c4 <HAL_I2C_Init>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80029c8:	f000 fdc0 	bl	800354c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029cc:	bf00      	nop
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	2000263c 	.word	0x2000263c
 80029d4:	40005400 	.word	0x40005400
 80029d8:	000186a0 	.word	0x000186a0

080029dc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80029e0:	4b12      	ldr	r3, [pc, #72]	; (8002a2c <MX_I2C2_Init+0x50>)
 80029e2:	4a13      	ldr	r2, [pc, #76]	; (8002a30 <MX_I2C2_Init+0x54>)
 80029e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80029e6:	4b11      	ldr	r3, [pc, #68]	; (8002a2c <MX_I2C2_Init+0x50>)
 80029e8:	4a12      	ldr	r2, [pc, #72]	; (8002a34 <MX_I2C2_Init+0x58>)
 80029ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029ec:	4b0f      	ldr	r3, [pc, #60]	; (8002a2c <MX_I2C2_Init+0x50>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80029f2:	4b0e      	ldr	r3, [pc, #56]	; (8002a2c <MX_I2C2_Init+0x50>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029f8:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <MX_I2C2_Init+0x50>)
 80029fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029fe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a00:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <MX_I2C2_Init+0x50>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002a06:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <MX_I2C2_Init+0x50>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a0c:	4b07      	ldr	r3, [pc, #28]	; (8002a2c <MX_I2C2_Init+0x50>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a12:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <MX_I2C2_Init+0x50>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002a18:	4804      	ldr	r0, [pc, #16]	; (8002a2c <MX_I2C2_Init+0x50>)
 8002a1a:	f002 ff53 	bl	80058c4 <HAL_I2C_Init>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002a24:	f000 fd92 	bl	800354c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002a28:	bf00      	nop
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	20002690 	.word	0x20002690
 8002a30:	40005800 	.word	0x40005800
 8002a34:	000186a0 	.word	0x000186a0

08002a38 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002a3c:	4b17      	ldr	r3, [pc, #92]	; (8002a9c <MX_SPI2_Init+0x64>)
 8002a3e:	4a18      	ldr	r2, [pc, #96]	; (8002aa0 <MX_SPI2_Init+0x68>)
 8002a40:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002a42:	4b16      	ldr	r3, [pc, #88]	; (8002a9c <MX_SPI2_Init+0x64>)
 8002a44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a48:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002a4a:	4b14      	ldr	r3, [pc, #80]	; (8002a9c <MX_SPI2_Init+0x64>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a50:	4b12      	ldr	r3, [pc, #72]	; (8002a9c <MX_SPI2_Init+0x64>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a56:	4b11      	ldr	r3, [pc, #68]	; (8002a9c <MX_SPI2_Init+0x64>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a5c:	4b0f      	ldr	r3, [pc, #60]	; (8002a9c <MX_SPI2_Init+0x64>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002a62:	4b0e      	ldr	r3, [pc, #56]	; (8002a9c <MX_SPI2_Init+0x64>)
 8002a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a68:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002a6a:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <MX_SPI2_Init+0x64>)
 8002a6c:	2208      	movs	r2, #8
 8002a6e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a70:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <MX_SPI2_Init+0x64>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a76:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <MX_SPI2_Init+0x64>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a7c:	4b07      	ldr	r3, [pc, #28]	; (8002a9c <MX_SPI2_Init+0x64>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002a82:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <MX_SPI2_Init+0x64>)
 8002a84:	220a      	movs	r2, #10
 8002a86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002a88:	4804      	ldr	r0, [pc, #16]	; (8002a9c <MX_SPI2_Init+0x64>)
 8002a8a:	f007 f8d5 	bl	8009c38 <HAL_SPI_Init>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002a94:	f000 fd5a 	bl	800354c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002a98:	bf00      	nop
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	200004bc 	.word	0x200004bc
 8002aa0:	40003800 	.word	0x40003800

08002aa4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002aaa:	f107 0308 	add.w	r3, r7, #8
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	605a      	str	r2, [r3, #4]
 8002ab4:	609a      	str	r2, [r3, #8]
 8002ab6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ab8:	463b      	mov	r3, r7
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ac0:	4b1e      	ldr	r3, [pc, #120]	; (8002b3c <MX_TIM2_Init+0x98>)
 8002ac2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ac6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8002ac8:	4b1c      	ldr	r3, [pc, #112]	; (8002b3c <MX_TIM2_Init+0x98>)
 8002aca:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002ace:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ad0:	4b1a      	ldr	r3, [pc, #104]	; (8002b3c <MX_TIM2_Init+0x98>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002ad6:	4b19      	ldr	r3, [pc, #100]	; (8002b3c <MX_TIM2_Init+0x98>)
 8002ad8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002adc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ade:	4b17      	ldr	r3, [pc, #92]	; (8002b3c <MX_TIM2_Init+0x98>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ae4:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <MX_TIM2_Init+0x98>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002aea:	4814      	ldr	r0, [pc, #80]	; (8002b3c <MX_TIM2_Init+0x98>)
 8002aec:	f007 fcd6 	bl	800a49c <HAL_TIM_Base_Init>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002af6:	f000 fd29 	bl	800354c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002afa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002afe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b00:	f107 0308 	add.w	r3, r7, #8
 8002b04:	4619      	mov	r1, r3
 8002b06:	480d      	ldr	r0, [pc, #52]	; (8002b3c <MX_TIM2_Init+0x98>)
 8002b08:	f008 f8d2 	bl	800acb0 <HAL_TIM_ConfigClockSource>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002b12:	f000 fd1b 	bl	800354c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002b16:	2320      	movs	r3, #32
 8002b18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b1e:	463b      	mov	r3, r7
 8002b20:	4619      	mov	r1, r3
 8002b22:	4806      	ldr	r0, [pc, #24]	; (8002b3c <MX_TIM2_Init+0x98>)
 8002b24:	f008 fcc4 	bl	800b4b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002b2e:	f000 fd0d 	bl	800354c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b32:	bf00      	nop
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	200027a4 	.word	0x200027a4

08002b40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b08a      	sub	sp, #40	; 0x28
 8002b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b46:	f107 0320 	add.w	r3, r7, #32
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b50:	1d3b      	adds	r3, r7, #4
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	605a      	str	r2, [r3, #4]
 8002b58:	609a      	str	r2, [r3, #8]
 8002b5a:	60da      	str	r2, [r3, #12]
 8002b5c:	611a      	str	r2, [r3, #16]
 8002b5e:	615a      	str	r2, [r3, #20]
 8002b60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b62:	4b32      	ldr	r3, [pc, #200]	; (8002c2c <MX_TIM3_Init+0xec>)
 8002b64:	4a32      	ldr	r2, [pc, #200]	; (8002c30 <MX_TIM3_Init+0xf0>)
 8002b66:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 168;
 8002b68:	4b30      	ldr	r3, [pc, #192]	; (8002c2c <MX_TIM3_Init+0xec>)
 8002b6a:	22a8      	movs	r2, #168	; 0xa8
 8002b6c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b6e:	4b2f      	ldr	r3, [pc, #188]	; (8002c2c <MX_TIM3_Init+0xec>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8002b74:	4b2d      	ldr	r3, [pc, #180]	; (8002c2c <MX_TIM3_Init+0xec>)
 8002b76:	f242 720f 	movw	r2, #9999	; 0x270f
 8002b7a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b7c:	4b2b      	ldr	r3, [pc, #172]	; (8002c2c <MX_TIM3_Init+0xec>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b82:	4b2a      	ldr	r3, [pc, #168]	; (8002c2c <MX_TIM3_Init+0xec>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002b88:	4828      	ldr	r0, [pc, #160]	; (8002c2c <MX_TIM3_Init+0xec>)
 8002b8a:	f007 fdaf 	bl	800a6ec <HAL_TIM_PWM_Init>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002b94:	f000 fcda 	bl	800354c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ba0:	f107 0320 	add.w	r3, r7, #32
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4821      	ldr	r0, [pc, #132]	; (8002c2c <MX_TIM3_Init+0xec>)
 8002ba8:	f008 fc82 	bl	800b4b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002bb2:	f000 fccb 	bl	800354c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bb6:	2360      	movs	r3, #96	; 0x60
 8002bb8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bc6:	1d3b      	adds	r3, r7, #4
 8002bc8:	2200      	movs	r2, #0
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4817      	ldr	r0, [pc, #92]	; (8002c2c <MX_TIM3_Init+0xec>)
 8002bce:	f007 ffad 	bl	800ab2c <HAL_TIM_PWM_ConfigChannel>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002bd8:	f000 fcb8 	bl	800354c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002bdc:	1d3b      	adds	r3, r7, #4
 8002bde:	2204      	movs	r2, #4
 8002be0:	4619      	mov	r1, r3
 8002be2:	4812      	ldr	r0, [pc, #72]	; (8002c2c <MX_TIM3_Init+0xec>)
 8002be4:	f007 ffa2 	bl	800ab2c <HAL_TIM_PWM_ConfigChannel>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002bee:	f000 fcad 	bl	800354c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002bf2:	1d3b      	adds	r3, r7, #4
 8002bf4:	2208      	movs	r2, #8
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	480c      	ldr	r0, [pc, #48]	; (8002c2c <MX_TIM3_Init+0xec>)
 8002bfa:	f007 ff97 	bl	800ab2c <HAL_TIM_PWM_ConfigChannel>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8002c04:	f000 fca2 	bl	800354c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002c08:	1d3b      	adds	r3, r7, #4
 8002c0a:	220c      	movs	r2, #12
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4807      	ldr	r0, [pc, #28]	; (8002c2c <MX_TIM3_Init+0xec>)
 8002c10:	f007 ff8c 	bl	800ab2c <HAL_TIM_PWM_ConfigChannel>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8002c1a:	f000 fc97 	bl	800354c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002c1e:	4803      	ldr	r0, [pc, #12]	; (8002c2c <MX_TIM3_Init+0xec>)
 8002c20:	f000 fee4 	bl	80039ec <HAL_TIM_MspPostInit>

}
 8002c24:	bf00      	nop
 8002c26:	3728      	adds	r7, #40	; 0x28
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	200027ec 	.word	0x200027ec
 8002c30:	40000400 	.word	0x40000400

08002c34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c38:	4b11      	ldr	r3, [pc, #68]	; (8002c80 <MX_USART2_UART_Init+0x4c>)
 8002c3a:	4a12      	ldr	r2, [pc, #72]	; (8002c84 <MX_USART2_UART_Init+0x50>)
 8002c3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c3e:	4b10      	ldr	r3, [pc, #64]	; (8002c80 <MX_USART2_UART_Init+0x4c>)
 8002c40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c46:	4b0e      	ldr	r3, [pc, #56]	; (8002c80 <MX_USART2_UART_Init+0x4c>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <MX_USART2_UART_Init+0x4c>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c52:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <MX_USART2_UART_Init+0x4c>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c58:	4b09      	ldr	r3, [pc, #36]	; (8002c80 <MX_USART2_UART_Init+0x4c>)
 8002c5a:	220c      	movs	r2, #12
 8002c5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c5e:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <MX_USART2_UART_Init+0x4c>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c64:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <MX_USART2_UART_Init+0x4c>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c6a:	4805      	ldr	r0, [pc, #20]	; (8002c80 <MX_USART2_UART_Init+0x4c>)
 8002c6c:	f008 fcb0 	bl	800b5d0 <HAL_UART_Init>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002c76:	f000 fc69 	bl	800354c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c7a:	bf00      	nop
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	20002834 	.word	0x20002834
 8002c84:	40004400 	.word	0x40004400

08002c88 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002c8c:	4b11      	ldr	r3, [pc, #68]	; (8002cd4 <MX_USART3_UART_Init+0x4c>)
 8002c8e:	4a12      	ldr	r2, [pc, #72]	; (8002cd8 <MX_USART3_UART_Init+0x50>)
 8002c90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002c92:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <MX_USART3_UART_Init+0x4c>)
 8002c94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c9a:	4b0e      	ldr	r3, [pc, #56]	; (8002cd4 <MX_USART3_UART_Init+0x4c>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002ca0:	4b0c      	ldr	r3, [pc, #48]	; (8002cd4 <MX_USART3_UART_Init+0x4c>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002ca6:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <MX_USART3_UART_Init+0x4c>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002cac:	4b09      	ldr	r3, [pc, #36]	; (8002cd4 <MX_USART3_UART_Init+0x4c>)
 8002cae:	220c      	movs	r2, #12
 8002cb0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cb2:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <MX_USART3_UART_Init+0x4c>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cb8:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <MX_USART3_UART_Init+0x4c>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002cbe:	4805      	ldr	r0, [pc, #20]	; (8002cd4 <MX_USART3_UART_Init+0x4c>)
 8002cc0:	f008 fc86 	bl	800b5d0 <HAL_UART_Init>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002cca:	f000 fc3f 	bl	800354c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20002878 	.word	0x20002878
 8002cd8:	40004800 	.word	0x40004800

08002cdc <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
	...

08002cec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	607b      	str	r3, [r7, #4]
 8002cf6:	4b23      	ldr	r3, [pc, #140]	; (8002d84 <MX_DMA_Init+0x98>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	4a22      	ldr	r2, [pc, #136]	; (8002d84 <MX_DMA_Init+0x98>)
 8002cfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d00:	6313      	str	r3, [r2, #48]	; 0x30
 8002d02:	4b20      	ldr	r3, [pc, #128]	; (8002d84 <MX_DMA_Init+0x98>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d0a:	607b      	str	r3, [r7, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	603b      	str	r3, [r7, #0]
 8002d12:	4b1c      	ldr	r3, [pc, #112]	; (8002d84 <MX_DMA_Init+0x98>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	4a1b      	ldr	r2, [pc, #108]	; (8002d84 <MX_DMA_Init+0x98>)
 8002d18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d1e:	4b19      	ldr	r3, [pc, #100]	; (8002d84 <MX_DMA_Init+0x98>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d26:	603b      	str	r3, [r7, #0]
 8002d28:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	2105      	movs	r1, #5
 8002d2e:	200b      	movs	r0, #11
 8002d30:	f001 ffbc 	bl	8004cac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002d34:	200b      	movs	r0, #11
 8002d36:	f001 ffd5 	bl	8004ce4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	2105      	movs	r1, #5
 8002d3e:	200c      	movs	r0, #12
 8002d40:	f001 ffb4 	bl	8004cac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002d44:	200c      	movs	r0, #12
 8002d46:	f001 ffcd 	bl	8004ce4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	2105      	movs	r1, #5
 8002d4e:	200e      	movs	r0, #14
 8002d50:	f001 ffac 	bl	8004cac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002d54:	200e      	movs	r0, #14
 8002d56:	f001 ffc5 	bl	8004ce4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	2105      	movs	r1, #5
 8002d5e:	202f      	movs	r0, #47	; 0x2f
 8002d60:	f001 ffa4 	bl	8004cac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002d64:	202f      	movs	r0, #47	; 0x2f
 8002d66:	f001 ffbd 	bl	8004ce4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	2105      	movs	r1, #5
 8002d6e:	2038      	movs	r0, #56	; 0x38
 8002d70:	f001 ff9c 	bl	8004cac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002d74:	2038      	movs	r0, #56	; 0x38
 8002d76:	f001 ffb5 	bl	8004ce4 <HAL_NVIC_EnableIRQ>

}
 8002d7a:	bf00      	nop
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40023800 	.word	0x40023800

08002d88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08a      	sub	sp, #40	; 0x28
 8002d8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d8e:	f107 0314 	add.w	r3, r7, #20
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	605a      	str	r2, [r3, #4]
 8002d98:	609a      	str	r2, [r3, #8]
 8002d9a:	60da      	str	r2, [r3, #12]
 8002d9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	4b5c      	ldr	r3, [pc, #368]	; (8002f14 <MX_GPIO_Init+0x18c>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	4a5b      	ldr	r2, [pc, #364]	; (8002f14 <MX_GPIO_Init+0x18c>)
 8002da8:	f043 0304 	orr.w	r3, r3, #4
 8002dac:	6313      	str	r3, [r2, #48]	; 0x30
 8002dae:	4b59      	ldr	r3, [pc, #356]	; (8002f14 <MX_GPIO_Init+0x18c>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	613b      	str	r3, [r7, #16]
 8002db8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	4b55      	ldr	r3, [pc, #340]	; (8002f14 <MX_GPIO_Init+0x18c>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	4a54      	ldr	r2, [pc, #336]	; (8002f14 <MX_GPIO_Init+0x18c>)
 8002dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dca:	4b52      	ldr	r3, [pc, #328]	; (8002f14 <MX_GPIO_Init+0x18c>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60bb      	str	r3, [r7, #8]
 8002dda:	4b4e      	ldr	r3, [pc, #312]	; (8002f14 <MX_GPIO_Init+0x18c>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	4a4d      	ldr	r2, [pc, #308]	; (8002f14 <MX_GPIO_Init+0x18c>)
 8002de0:	f043 0301 	orr.w	r3, r3, #1
 8002de4:	6313      	str	r3, [r2, #48]	; 0x30
 8002de6:	4b4b      	ldr	r3, [pc, #300]	; (8002f14 <MX_GPIO_Init+0x18c>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	60bb      	str	r3, [r7, #8]
 8002df0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	607b      	str	r3, [r7, #4]
 8002df6:	4b47      	ldr	r3, [pc, #284]	; (8002f14 <MX_GPIO_Init+0x18c>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	4a46      	ldr	r2, [pc, #280]	; (8002f14 <MX_GPIO_Init+0x18c>)
 8002dfc:	f043 0302 	orr.w	r3, r3, #2
 8002e00:	6313      	str	r3, [r2, #48]	; 0x30
 8002e02:	4b44      	ldr	r3, [pc, #272]	; (8002f14 <MX_GPIO_Init+0x18c>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	607b      	str	r3, [r7, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f248 1160 	movw	r1, #33120	; 0x8160
 8002e14:	4840      	ldr	r0, [pc, #256]	; (8002f18 <MX_GPIO_Init+0x190>)
 8002e16:	f002 fd23 	bl	8005860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	483f      	ldr	r0, [pc, #252]	; (8002f1c <MX_GPIO_Init+0x194>)
 8002e20:	f002 fd1e 	bl	8005860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8002e24:	2201      	movs	r2, #1
 8002e26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e2a:	483c      	ldr	r0, [pc, #240]	; (8002f1c <MX_GPIO_Init+0x194>)
 8002e2c:	f002 fd18 	bl	8005860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002e30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e36:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002e3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e40:	f107 0314 	add.w	r3, r7, #20
 8002e44:	4619      	mov	r1, r3
 8002e46:	4836      	ldr	r0, [pc, #216]	; (8002f20 <MX_GPIO_Init+0x198>)
 8002e48:	f002 fb76 	bl	8005538 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_MPU6050_Pin */
  GPIO_InitStruct.Pin = INT_MPU6050_Pin;
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e50:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002e54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_MPU6050_GPIO_Port, &GPIO_InitStruct);
 8002e5a:	f107 0314 	add.w	r3, r7, #20
 8002e5e:	4619      	mov	r1, r3
 8002e60:	482f      	ldr	r0, [pc, #188]	; (8002f20 <MX_GPIO_Init+0x198>)
 8002e62:	f002 fb69 	bl	8005538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_15;
 8002e66:	f248 1360 	movw	r3, #33120	; 0x8160
 8002e6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e70:	2300      	movs	r3, #0
 8002e72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e74:	2300      	movs	r3, #0
 8002e76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e78:	f107 0314 	add.w	r3, r7, #20
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4826      	ldr	r0, [pc, #152]	; (8002f18 <MX_GPIO_Init+0x190>)
 8002e80:	f002 fb5a 	bl	8005538 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e84:	2301      	movs	r3, #1
 8002e86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e90:	2300      	movs	r3, #0
 8002e92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e94:	f107 0314 	add.w	r3, r7, #20
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4820      	ldr	r0, [pc, #128]	; (8002f1c <MX_GPIO_Init+0x194>)
 8002e9c:	f002 fb4c 	bl	8005538 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8002ea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ea4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8002eb2:	f107 0314 	add.w	r3, r7, #20
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4818      	ldr	r0, [pc, #96]	; (8002f1c <MX_GPIO_Init+0x194>)
 8002eba:	f002 fb3d 	bl	8005538 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ebe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ec2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ecc:	f107 0314 	add.w	r3, r7, #20
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4811      	ldr	r0, [pc, #68]	; (8002f18 <MX_GPIO_Init+0x190>)
 8002ed4:	f002 fb30 	bl	8005538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002ed8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002edc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ede:	2302      	movs	r3, #2
 8002ee0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002eea:	230a      	movs	r3, #10
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eee:	f107 0314 	add.w	r3, r7, #20
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4808      	ldr	r0, [pc, #32]	; (8002f18 <MX_GPIO_Init+0x190>)
 8002ef6:	f002 fb1f 	bl	8005538 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002efa:	2200      	movs	r2, #0
 8002efc:	2105      	movs	r1, #5
 8002efe:	2007      	movs	r0, #7
 8002f00:	f001 fed4 	bl	8004cac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002f04:	2007      	movs	r0, #7
 8002f06:	f001 feed 	bl	8004ce4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f0a:	bf00      	nop
 8002f0c:	3728      	adds	r7, #40	; 0x28
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40023800 	.word	0x40023800
 8002f18:	40020000 	.word	0x40020000
 8002f1c:	40020400 	.word	0x40020400
 8002f20:	40020800 	.word	0x40020800

08002f24 <defaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_defaultTask */
void defaultTask(void const * argument)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002f2c:	2001      	movs	r0, #1
 8002f2e:	f00d f8c6 	bl	80100be <osDelay>
 8002f32:	e7fb      	b.n	8002f2c <defaultTask+0x8>

08002f34 <sendDataToScreen>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sendDataToScreen */
void sendDataToScreen(void const * argument)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
	  switch(currentState){
 8002f3c:	4b1e      	ldr	r3, [pc, #120]	; (8002fb8 <sendDataToScreen+0x84>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d00f      	beq.n	8002f64 <sendDataToScreen+0x30>
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	dc32      	bgt.n	8002fae <sendDataToScreen+0x7a>
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d02f      	beq.n	8002fac <sendDataToScreen+0x78>
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d12e      	bne.n	8002fae <sendDataToScreen+0x7a>
		  case IDLE_STATE:
			  // request byte is received in background via cicular DMA
			  break;

		  case SEND_ACK_STATE:
			  uint8_t ackByte=0x10;
 8002f50:	2310      	movs	r3, #16
 8002f52:	73fb      	strb	r3, [r7, #15]
			  HAL_UART_Transmit(&huart3,&ackByte,1,100);
 8002f54:	f107 010f 	add.w	r1, r7, #15
 8002f58:	2364      	movs	r3, #100	; 0x64
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	4817      	ldr	r0, [pc, #92]	; (8002fbc <sendDataToScreen+0x88>)
 8002f5e:	f008 fb84 	bl	800b66a <HAL_UART_Transmit>
			  break;
 8002f62:	e024      	b.n	8002fae <sendDataToScreen+0x7a>


		  case SENDING_DATA_STATE:
			  uartTxBuffer[0]=0xAA;
 8002f64:	4b16      	ldr	r3, [pc, #88]	; (8002fc0 <sendDataToScreen+0x8c>)
 8002f66:	22aa      	movs	r2, #170	; 0xaa
 8002f68:	701a      	strb	r2, [r3, #0]
			  uartTxBuffer[1]=0xBB;
 8002f6a:	4b15      	ldr	r3, [pc, #84]	; (8002fc0 <sendDataToScreen+0x8c>)
 8002f6c:	22bb      	movs	r2, #187	; 0xbb
 8002f6e:	705a      	strb	r2, [r3, #1]
			  uartTxBuffer[2]=0xCC;
 8002f70:	4b13      	ldr	r3, [pc, #76]	; (8002fc0 <sendDataToScreen+0x8c>)
 8002f72:	22cc      	movs	r2, #204	; 0xcc
 8002f74:	709a      	strb	r2, [r3, #2]
			  uartTxBuffer[3]=0xDD;
 8002f76:	4b12      	ldr	r3, [pc, #72]	; (8002fc0 <sendDataToScreen+0x8c>)
 8002f78:	22dd      	movs	r2, #221	; 0xdd
 8002f7a:	70da      	strb	r2, [r3, #3]
			  uartTxBuffer[4]=0xEE;
 8002f7c:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <sendDataToScreen+0x8c>)
 8002f7e:	22ee      	movs	r2, #238	; 0xee
 8002f80:	711a      	strb	r2, [r3, #4]
			  uartTxBuffer[5]=0xFF;
 8002f82:	4b0f      	ldr	r3, [pc, #60]	; (8002fc0 <sendDataToScreen+0x8c>)
 8002f84:	22ff      	movs	r2, #255	; 0xff
 8002f86:	715a      	strb	r2, [r3, #5]
			  uartTxBuffer[6]=0x00;
 8002f88:	4b0d      	ldr	r3, [pc, #52]	; (8002fc0 <sendDataToScreen+0x8c>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	719a      	strb	r2, [r3, #6]
			  uartTxBuffer[7]=0x01;
 8002f8e:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <sendDataToScreen+0x8c>)
 8002f90:	2201      	movs	r2, #1
 8002f92:	71da      	strb	r2, [r3, #7]
			  txStatus=HAL_UART_Transmit(&huart3,txbufptr,8,10);
 8002f94:	4b0b      	ldr	r3, [pc, #44]	; (8002fc4 <sendDataToScreen+0x90>)
 8002f96:	6819      	ldr	r1, [r3, #0]
 8002f98:	230a      	movs	r3, #10
 8002f9a:	2208      	movs	r2, #8
 8002f9c:	4807      	ldr	r0, [pc, #28]	; (8002fbc <sendDataToScreen+0x88>)
 8002f9e:	f008 fb64 	bl	800b66a <HAL_UART_Transmit>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4b08      	ldr	r3, [pc, #32]	; (8002fc8 <sendDataToScreen+0x94>)
 8002fa8:	701a      	strb	r2, [r3, #0]
			  break;
 8002faa:	e000      	b.n	8002fae <sendDataToScreen+0x7a>
			  break;
 8002fac:	bf00      	nop

	  }


	  osDelay(50000); //
 8002fae:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002fb2:	f00d f884 	bl	80100be <osDelay>
	  switch(currentState){
 8002fb6:	e7c1      	b.n	8002f3c <sendDataToScreen+0x8>
 8002fb8:	20002a12 	.word	0x20002a12
 8002fbc:	20002878 	.word	0x20002878
 8002fc0:	20002a08 	.word	0x20002a08
 8002fc4:	20000004 	.word	0x20000004
 8002fc8:	20002a11 	.word	0x20002a11

08002fcc <updateControlLoop>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_updateControlLoop */
void updateControlLoop(void const * argument)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

	readJoystick(&joystick);
 8002fd4:	4888      	ldr	r0, [pc, #544]	; (80031f8 <updateControlLoop+0x22c>)
 8002fd6:	f7ff f9b3 	bl	8002340 <readJoystick>
	//printf("Joystick x %.2f\r\n",joystick.joystickVoltage[0]);
	//printf("Joystick y %.2f\r\n",joystick.joystickVoltage[1]);

	if(joystick.joystickVoltage[0]<1.02f ) // go left
 8002fda:	4b87      	ldr	r3, [pc, #540]	; (80031f8 <updateControlLoop+0x22c>)
 8002fdc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002fe0:	ed9f 7a86 	vldr	s14, [pc, #536]	; 80031fc <updateControlLoop+0x230>
 8002fe4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fec:	d54f      	bpl.n	800308e <updateControlLoop+0xc2>
	{
		//go left
		if(htim3.Instance->CCR1<=750-variation)
 8002fee:	4b84      	ldr	r3, [pc, #528]	; (8003200 <updateControlLoop+0x234>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ff4:	4b83      	ldr	r3, [pc, #524]	; (8003204 <updateControlLoop+0x238>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	f5c3 733b 	rsb	r3, r3, #748	; 0x2ec
 8002ffc:	3302      	adds	r3, #2
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d809      	bhi.n	8003016 <updateControlLoop+0x4a>
			htim3.Instance->CCR1+=variation;
 8003002:	4b7f      	ldr	r3, [pc, #508]	; (8003200 <updateControlLoop+0x234>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003008:	4b7e      	ldr	r3, [pc, #504]	; (8003204 <updateControlLoop+0x238>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	4619      	mov	r1, r3
 800300e:	4b7c      	ldr	r3, [pc, #496]	; (8003200 <updateControlLoop+0x234>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	440a      	add	r2, r1
 8003014:	635a      	str	r2, [r3, #52]	; 0x34

		if(htim3.Instance->CCR2>=450+variation)
 8003016:	4b7a      	ldr	r3, [pc, #488]	; (8003200 <updateControlLoop+0x234>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301c:	4a79      	ldr	r2, [pc, #484]	; (8003204 <updateControlLoop+0x238>)
 800301e:	7812      	ldrb	r2, [r2, #0]
 8003020:	f502 72e1 	add.w	r2, r2, #450	; 0x1c2
 8003024:	4293      	cmp	r3, r2
 8003026:	d309      	bcc.n	800303c <updateControlLoop+0x70>
			htim3.Instance->CCR2-=variation;
 8003028:	4b75      	ldr	r3, [pc, #468]	; (8003200 <updateControlLoop+0x234>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800302e:	4b75      	ldr	r3, [pc, #468]	; (8003204 <updateControlLoop+0x238>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	4619      	mov	r1, r3
 8003034:	4b72      	ldr	r3, [pc, #456]	; (8003200 <updateControlLoop+0x234>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	1a52      	subs	r2, r2, r1
 800303a:	639a      	str	r2, [r3, #56]	; 0x38

	    if(htim3.Instance->CCR3<=750-variation)
 800303c:	4b70      	ldr	r3, [pc, #448]	; (8003200 <updateControlLoop+0x234>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003042:	4b70      	ldr	r3, [pc, #448]	; (8003204 <updateControlLoop+0x238>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	f5c3 733b 	rsb	r3, r3, #748	; 0x2ec
 800304a:	3302      	adds	r3, #2
 800304c:	429a      	cmp	r2, r3
 800304e:	d809      	bhi.n	8003064 <updateControlLoop+0x98>
	    	htim3.Instance->CCR3+=variation;
 8003050:	4b6b      	ldr	r3, [pc, #428]	; (8003200 <updateControlLoop+0x234>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003056:	4b6b      	ldr	r3, [pc, #428]	; (8003204 <updateControlLoop+0x238>)
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	4619      	mov	r1, r3
 800305c:	4b68      	ldr	r3, [pc, #416]	; (8003200 <updateControlLoop+0x234>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	440a      	add	r2, r1
 8003062:	63da      	str	r2, [r3, #60]	; 0x3c

	    if(htim3.Instance->CCR4>=450+variation)
 8003064:	4b66      	ldr	r3, [pc, #408]	; (8003200 <updateControlLoop+0x234>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	4a66      	ldr	r2, [pc, #408]	; (8003204 <updateControlLoop+0x238>)
 800306c:	7812      	ldrb	r2, [r2, #0]
 800306e:	f502 72e1 	add.w	r2, r2, #450	; 0x1c2
 8003072:	4293      	cmp	r3, r2
 8003074:	f0c0 8120 	bcc.w	80032b8 <updateControlLoop+0x2ec>
	    	htim3.Instance->CCR4-=variation;
 8003078:	4b61      	ldr	r3, [pc, #388]	; (8003200 <updateControlLoop+0x234>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800307e:	4b61      	ldr	r3, [pc, #388]	; (8003204 <updateControlLoop+0x238>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	4619      	mov	r1, r3
 8003084:	4b5e      	ldr	r3, [pc, #376]	; (8003200 <updateControlLoop+0x234>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	1a52      	subs	r2, r2, r1
 800308a:	641a      	str	r2, [r3, #64]	; 0x40
 800308c:	e114      	b.n	80032b8 <updateControlLoop+0x2ec>

	}
	else if(joystick.joystickVoltage[0]>1.83f)
 800308e:	4b5a      	ldr	r3, [pc, #360]	; (80031f8 <updateControlLoop+0x22c>)
 8003090:	edd3 7a01 	vldr	s15, [r3, #4]
 8003094:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8003208 <updateControlLoop+0x23c>
 8003098:	eef4 7ac7 	vcmpe.f32	s15, s14
 800309c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030a0:	dd4f      	ble.n	8003142 <updateControlLoop+0x176>
	{
		//go Right
		if(htim3.Instance->CCR1>=450+variation)
 80030a2:	4b57      	ldr	r3, [pc, #348]	; (8003200 <updateControlLoop+0x234>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a8:	4a56      	ldr	r2, [pc, #344]	; (8003204 <updateControlLoop+0x238>)
 80030aa:	7812      	ldrb	r2, [r2, #0]
 80030ac:	f502 72e1 	add.w	r2, r2, #450	; 0x1c2
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d309      	bcc.n	80030c8 <updateControlLoop+0xfc>
			htim3.Instance->CCR1-=variation;
 80030b4:	4b52      	ldr	r3, [pc, #328]	; (8003200 <updateControlLoop+0x234>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ba:	4b52      	ldr	r3, [pc, #328]	; (8003204 <updateControlLoop+0x238>)
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	4619      	mov	r1, r3
 80030c0:	4b4f      	ldr	r3, [pc, #316]	; (8003200 <updateControlLoop+0x234>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	1a52      	subs	r2, r2, r1
 80030c6:	635a      	str	r2, [r3, #52]	; 0x34

		if(htim3.Instance->CCR2<=750-variation)
 80030c8:	4b4d      	ldr	r3, [pc, #308]	; (8003200 <updateControlLoop+0x234>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030ce:	4b4d      	ldr	r3, [pc, #308]	; (8003204 <updateControlLoop+0x238>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	f5c3 733b 	rsb	r3, r3, #748	; 0x2ec
 80030d6:	3302      	adds	r3, #2
 80030d8:	429a      	cmp	r2, r3
 80030da:	d809      	bhi.n	80030f0 <updateControlLoop+0x124>
			htim3.Instance->CCR2+=variation;
 80030dc:	4b48      	ldr	r3, [pc, #288]	; (8003200 <updateControlLoop+0x234>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030e2:	4b48      	ldr	r3, [pc, #288]	; (8003204 <updateControlLoop+0x238>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	4619      	mov	r1, r3
 80030e8:	4b45      	ldr	r3, [pc, #276]	; (8003200 <updateControlLoop+0x234>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	440a      	add	r2, r1
 80030ee:	639a      	str	r2, [r3, #56]	; 0x38

		if(htim3.Instance->CCR3>=450+variation)
 80030f0:	4b43      	ldr	r3, [pc, #268]	; (8003200 <updateControlLoop+0x234>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f6:	4a43      	ldr	r2, [pc, #268]	; (8003204 <updateControlLoop+0x238>)
 80030f8:	7812      	ldrb	r2, [r2, #0]
 80030fa:	f502 72e1 	add.w	r2, r2, #450	; 0x1c2
 80030fe:	4293      	cmp	r3, r2
 8003100:	d309      	bcc.n	8003116 <updateControlLoop+0x14a>
			htim3.Instance->CCR3-=variation;
 8003102:	4b3f      	ldr	r3, [pc, #252]	; (8003200 <updateControlLoop+0x234>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003108:	4b3e      	ldr	r3, [pc, #248]	; (8003204 <updateControlLoop+0x238>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	4619      	mov	r1, r3
 800310e:	4b3c      	ldr	r3, [pc, #240]	; (8003200 <updateControlLoop+0x234>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	1a52      	subs	r2, r2, r1
 8003114:	63da      	str	r2, [r3, #60]	; 0x3c

		if(htim3.Instance->CCR4<=750-variation)
 8003116:	4b3a      	ldr	r3, [pc, #232]	; (8003200 <updateControlLoop+0x234>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800311c:	4b39      	ldr	r3, [pc, #228]	; (8003204 <updateControlLoop+0x238>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	f5c3 733b 	rsb	r3, r3, #748	; 0x2ec
 8003124:	3302      	adds	r3, #2
 8003126:	429a      	cmp	r2, r3
 8003128:	f200 80c6 	bhi.w	80032b8 <updateControlLoop+0x2ec>
			htim3.Instance->CCR4+=variation;
 800312c:	4b34      	ldr	r3, [pc, #208]	; (8003200 <updateControlLoop+0x234>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003132:	4b34      	ldr	r3, [pc, #208]	; (8003204 <updateControlLoop+0x238>)
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	4619      	mov	r1, r3
 8003138:	4b31      	ldr	r3, [pc, #196]	; (8003200 <updateControlLoop+0x234>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	440a      	add	r2, r1
 800313e:	641a      	str	r2, [r3, #64]	; 0x40
 8003140:	e0ba      	b.n	80032b8 <updateControlLoop+0x2ec>
	}

	else if (joystick.joystickVoltage[1]<1.02f)
 8003142:	4b2d      	ldr	r3, [pc, #180]	; (80031f8 <updateControlLoop+0x22c>)
 8003144:	edd3 7a02 	vldr	s15, [r3, #8]
 8003148:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80031fc <updateControlLoop+0x230>
 800314c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003154:	d55a      	bpl.n	800320c <updateControlLoop+0x240>
	{
		//go down
		if(htim3.Instance->CCR1<=750-variation)
 8003156:	4b2a      	ldr	r3, [pc, #168]	; (8003200 <updateControlLoop+0x234>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800315c:	4b29      	ldr	r3, [pc, #164]	; (8003204 <updateControlLoop+0x238>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	f5c3 733b 	rsb	r3, r3, #748	; 0x2ec
 8003164:	3302      	adds	r3, #2
 8003166:	429a      	cmp	r2, r3
 8003168:	d809      	bhi.n	800317e <updateControlLoop+0x1b2>
			htim3.Instance->CCR1+=variation;
 800316a:	4b25      	ldr	r3, [pc, #148]	; (8003200 <updateControlLoop+0x234>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003170:	4b24      	ldr	r3, [pc, #144]	; (8003204 <updateControlLoop+0x238>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	4619      	mov	r1, r3
 8003176:	4b22      	ldr	r3, [pc, #136]	; (8003200 <updateControlLoop+0x234>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	440a      	add	r2, r1
 800317c:	635a      	str	r2, [r3, #52]	; 0x34
		if(htim3.Instance->CCR2<=750-variation)
 800317e:	4b20      	ldr	r3, [pc, #128]	; (8003200 <updateControlLoop+0x234>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003184:	4b1f      	ldr	r3, [pc, #124]	; (8003204 <updateControlLoop+0x238>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	f5c3 733b 	rsb	r3, r3, #748	; 0x2ec
 800318c:	3302      	adds	r3, #2
 800318e:	429a      	cmp	r2, r3
 8003190:	d809      	bhi.n	80031a6 <updateControlLoop+0x1da>
			htim3.Instance->CCR2+=variation;
 8003192:	4b1b      	ldr	r3, [pc, #108]	; (8003200 <updateControlLoop+0x234>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003198:	4b1a      	ldr	r3, [pc, #104]	; (8003204 <updateControlLoop+0x238>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	4619      	mov	r1, r3
 800319e:	4b18      	ldr	r3, [pc, #96]	; (8003200 <updateControlLoop+0x234>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	440a      	add	r2, r1
 80031a4:	639a      	str	r2, [r3, #56]	; 0x38
		if(htim3.Instance->CCR3<=750-variation)
 80031a6:	4b16      	ldr	r3, [pc, #88]	; (8003200 <updateControlLoop+0x234>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031ac:	4b15      	ldr	r3, [pc, #84]	; (8003204 <updateControlLoop+0x238>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	f5c3 733b 	rsb	r3, r3, #748	; 0x2ec
 80031b4:	3302      	adds	r3, #2
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d809      	bhi.n	80031ce <updateControlLoop+0x202>
			htim3.Instance->CCR3+=variation;
 80031ba:	4b11      	ldr	r3, [pc, #68]	; (8003200 <updateControlLoop+0x234>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031c0:	4b10      	ldr	r3, [pc, #64]	; (8003204 <updateControlLoop+0x238>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	4619      	mov	r1, r3
 80031c6:	4b0e      	ldr	r3, [pc, #56]	; (8003200 <updateControlLoop+0x234>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	440a      	add	r2, r1
 80031cc:	63da      	str	r2, [r3, #60]	; 0x3c
		if(htim3.Instance->CCR4<=750-variation)
 80031ce:	4b0c      	ldr	r3, [pc, #48]	; (8003200 <updateControlLoop+0x234>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031d4:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <updateControlLoop+0x238>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	f5c3 733b 	rsb	r3, r3, #748	; 0x2ec
 80031dc:	3302      	adds	r3, #2
 80031de:	429a      	cmp	r2, r3
 80031e0:	d86a      	bhi.n	80032b8 <updateControlLoop+0x2ec>
			htim3.Instance->CCR4+=variation;
 80031e2:	4b07      	ldr	r3, [pc, #28]	; (8003200 <updateControlLoop+0x234>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031e8:	4b06      	ldr	r3, [pc, #24]	; (8003204 <updateControlLoop+0x238>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	4619      	mov	r1, r3
 80031ee:	4b04      	ldr	r3, [pc, #16]	; (8003200 <updateControlLoop+0x234>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	440a      	add	r2, r1
 80031f4:	641a      	str	r2, [r3, #64]	; 0x40
 80031f6:	e05f      	b.n	80032b8 <updateControlLoop+0x2ec>
 80031f8:	20002998 	.word	0x20002998
 80031fc:	3f828f5c 	.word	0x3f828f5c
 8003200:	200027ec 	.word	0x200027ec
 8003204:	20000008 	.word	0x20000008
 8003208:	3fea3d71 	.word	0x3fea3d71
	}
	else if(joystick.joystickVoltage[1]>2.7f)
 800320c:	4b2c      	ldr	r3, [pc, #176]	; (80032c0 <updateControlLoop+0x2f4>)
 800320e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003212:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80032c4 <updateControlLoop+0x2f8>
 8003216:	eef4 7ac7 	vcmpe.f32	s15, s14
 800321a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800321e:	dd4b      	ble.n	80032b8 <updateControlLoop+0x2ec>
	{
		//go up
		if(htim3.Instance->CCR1>=450+variation)
 8003220:	4b29      	ldr	r3, [pc, #164]	; (80032c8 <updateControlLoop+0x2fc>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003226:	4a29      	ldr	r2, [pc, #164]	; (80032cc <updateControlLoop+0x300>)
 8003228:	7812      	ldrb	r2, [r2, #0]
 800322a:	f502 72e1 	add.w	r2, r2, #450	; 0x1c2
 800322e:	4293      	cmp	r3, r2
 8003230:	d309      	bcc.n	8003246 <updateControlLoop+0x27a>
			htim3.Instance->CCR1-=variation;
 8003232:	4b25      	ldr	r3, [pc, #148]	; (80032c8 <updateControlLoop+0x2fc>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003238:	4b24      	ldr	r3, [pc, #144]	; (80032cc <updateControlLoop+0x300>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	4619      	mov	r1, r3
 800323e:	4b22      	ldr	r3, [pc, #136]	; (80032c8 <updateControlLoop+0x2fc>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	1a52      	subs	r2, r2, r1
 8003244:	635a      	str	r2, [r3, #52]	; 0x34
		if(htim3.Instance->CCR2>=450+variation)
 8003246:	4b20      	ldr	r3, [pc, #128]	; (80032c8 <updateControlLoop+0x2fc>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324c:	4a1f      	ldr	r2, [pc, #124]	; (80032cc <updateControlLoop+0x300>)
 800324e:	7812      	ldrb	r2, [r2, #0]
 8003250:	f502 72e1 	add.w	r2, r2, #450	; 0x1c2
 8003254:	4293      	cmp	r3, r2
 8003256:	d309      	bcc.n	800326c <updateControlLoop+0x2a0>
			htim3.Instance->CCR2-=variation;
 8003258:	4b1b      	ldr	r3, [pc, #108]	; (80032c8 <updateControlLoop+0x2fc>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800325e:	4b1b      	ldr	r3, [pc, #108]	; (80032cc <updateControlLoop+0x300>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	4619      	mov	r1, r3
 8003264:	4b18      	ldr	r3, [pc, #96]	; (80032c8 <updateControlLoop+0x2fc>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	1a52      	subs	r2, r2, r1
 800326a:	639a      	str	r2, [r3, #56]	; 0x38
		if(htim3.Instance->CCR3>=450+variation)
 800326c:	4b16      	ldr	r3, [pc, #88]	; (80032c8 <updateControlLoop+0x2fc>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003272:	4a16      	ldr	r2, [pc, #88]	; (80032cc <updateControlLoop+0x300>)
 8003274:	7812      	ldrb	r2, [r2, #0]
 8003276:	f502 72e1 	add.w	r2, r2, #450	; 0x1c2
 800327a:	4293      	cmp	r3, r2
 800327c:	d309      	bcc.n	8003292 <updateControlLoop+0x2c6>
			htim3.Instance->CCR3-=variation;
 800327e:	4b12      	ldr	r3, [pc, #72]	; (80032c8 <updateControlLoop+0x2fc>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003284:	4b11      	ldr	r3, [pc, #68]	; (80032cc <updateControlLoop+0x300>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	4619      	mov	r1, r3
 800328a:	4b0f      	ldr	r3, [pc, #60]	; (80032c8 <updateControlLoop+0x2fc>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	1a52      	subs	r2, r2, r1
 8003290:	63da      	str	r2, [r3, #60]	; 0x3c
		if(htim3.Instance->CCR4>=450+variation)
 8003292:	4b0d      	ldr	r3, [pc, #52]	; (80032c8 <updateControlLoop+0x2fc>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	4a0c      	ldr	r2, [pc, #48]	; (80032cc <updateControlLoop+0x300>)
 800329a:	7812      	ldrb	r2, [r2, #0]
 800329c:	f502 72e1 	add.w	r2, r2, #450	; 0x1c2
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d309      	bcc.n	80032b8 <updateControlLoop+0x2ec>
			htim3.Instance->CCR4-=variation;
 80032a4:	4b08      	ldr	r3, [pc, #32]	; (80032c8 <updateControlLoop+0x2fc>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032aa:	4b08      	ldr	r3, [pc, #32]	; (80032cc <updateControlLoop+0x300>)
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	4619      	mov	r1, r3
 80032b0:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <updateControlLoop+0x2fc>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	1a52      	subs	r2, r2, r1
 80032b6:	641a      	str	r2, [r3, #64]	; 0x40
//
//	 }



    osDelay(200); // update control loop every 100 ms
 80032b8:	20c8      	movs	r0, #200	; 0xc8
 80032ba:	f00c ff00 	bl	80100be <osDelay>
	readJoystick(&joystick);
 80032be:	e689      	b.n	8002fd4 <updateControlLoop+0x8>
 80032c0:	20002998 	.word	0x20002998
 80032c4:	402ccccd 	.word	0x402ccccd
 80032c8:	200027ec 	.word	0x200027ec
 80032cc:	20000008 	.word	0x20000008

080032d0 <recordSDdata>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_recordSDdata */
void recordSDdata(void const * argument)
{
 80032d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80032d4:	b096      	sub	sp, #88	; 0x58
 80032d6:	af04      	add	r7, sp, #16
 80032d8:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {

	    // Waiting for the Micro SD module to initialize
	  	printf("SD card thread is called!");
 80032da:	4871      	ldr	r0, [pc, #452]	; (80034a0 <recordSDdata+0x1d0>)
 80032dc:	f00f ffe6 	bl	80132ac <iprintf>

	  	fres = f_mount(&fs, "", 0);
 80032e0:	2200      	movs	r2, #0
 80032e2:	4970      	ldr	r1, [pc, #448]	; (80034a4 <recordSDdata+0x1d4>)
 80032e4:	4870      	ldr	r0, [pc, #448]	; (80034a8 <recordSDdata+0x1d8>)
 80032e6:	f00b fdf9 	bl	800eedc <f_mount>
 80032ea:	4603      	mov	r3, r0
 80032ec:	461a      	mov	r2, r3
 80032ee:	4b6f      	ldr	r3, [pc, #444]	; (80034ac <recordSDdata+0x1dc>)
 80032f0:	701a      	strb	r2, [r3, #0]
	  	if (fres == FR_OK) {
 80032f2:	4b6e      	ldr	r3, [pc, #440]	; (80034ac <recordSDdata+0x1dc>)
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d103      	bne.n	8003302 <recordSDdata+0x32>
	  		printf("Micro SD card is mounted successfully!\n");
 80032fa:	486d      	ldr	r0, [pc, #436]	; (80034b0 <recordSDdata+0x1e0>)
 80032fc:	f010 f844 	bl	8013388 <puts>
 8003300:	e006      	b.n	8003310 <recordSDdata+0x40>
	  	} else if (fres != FR_OK) {
 8003302:	4b6a      	ldr	r3, [pc, #424]	; (80034ac <recordSDdata+0x1dc>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d002      	beq.n	8003310 <recordSDdata+0x40>
	  		printf("Micro SD card's mount error!\n");
 800330a:	486a      	ldr	r0, [pc, #424]	; (80034b4 <recordSDdata+0x1e4>)
 800330c:	f010 f83c 	bl	8013388 <puts>
	  	}

	  	// FA_OPEN_APPEND opens file if it exists and if not then creates it,
	  	// the pointer is set at the end of the file for appending
	  	fres = f_open(&fil, "accel.txt", FA_OPEN_APPEND | FA_WRITE | FA_READ);
 8003310:	2233      	movs	r2, #51	; 0x33
 8003312:	4969      	ldr	r1, [pc, #420]	; (80034b8 <recordSDdata+0x1e8>)
 8003314:	4869      	ldr	r0, [pc, #420]	; (80034bc <recordSDdata+0x1ec>)
 8003316:	f00b fe45 	bl	800efa4 <f_open>
 800331a:	4603      	mov	r3, r0
 800331c:	461a      	mov	r2, r3
 800331e:	4b63      	ldr	r3, [pc, #396]	; (80034ac <recordSDdata+0x1dc>)
 8003320:	701a      	strb	r2, [r3, #0]
	  	if (fres == FR_OK) {
 8003322:	4b62      	ldr	r3, [pc, #392]	; (80034ac <recordSDdata+0x1dc>)
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d103      	bne.n	8003332 <recordSDdata+0x62>
	  		printf("File opened for reading and checking the free space.\n");
 800332a:	4865      	ldr	r0, [pc, #404]	; (80034c0 <recordSDdata+0x1f0>)
 800332c:	f010 f82c 	bl	8013388 <puts>
 8003330:	e006      	b.n	8003340 <recordSDdata+0x70>
	  	} else if (fres != FR_OK) {
 8003332:	4b5e      	ldr	r3, [pc, #376]	; (80034ac <recordSDdata+0x1dc>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d002      	beq.n	8003340 <recordSDdata+0x70>
	  		printf("File was not opened for reading and checking the free space!\n");
 800333a:	4862      	ldr	r0, [pc, #392]	; (80034c4 <recordSDdata+0x1f4>)
 800333c:	f010 f824 	bl	8013388 <puts>
	  	}

	  	fres = f_getfree("", &fre_clust, &pfs);
 8003340:	4a61      	ldr	r2, [pc, #388]	; (80034c8 <recordSDdata+0x1f8>)
 8003342:	4962      	ldr	r1, [pc, #392]	; (80034cc <recordSDdata+0x1fc>)
 8003344:	4857      	ldr	r0, [pc, #348]	; (80034a4 <recordSDdata+0x1d4>)
 8003346:	f00c fb78 	bl	800fa3a <f_getfree>
 800334a:	4603      	mov	r3, r0
 800334c:	461a      	mov	r2, r3
 800334e:	4b57      	ldr	r3, [pc, #348]	; (80034ac <recordSDdata+0x1dc>)
 8003350:	701a      	strb	r2, [r3, #0]
	  	totalSpace = (uint32_t) ((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8003352:	4b5d      	ldr	r3, [pc, #372]	; (80034c8 <recordSDdata+0x1f8>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	3b02      	subs	r3, #2
 800335a:	4a5b      	ldr	r2, [pc, #364]	; (80034c8 <recordSDdata+0x1f8>)
 800335c:	6812      	ldr	r2, [r2, #0]
 800335e:	8952      	ldrh	r2, [r2, #10]
 8003360:	fb02 f303 	mul.w	r3, r2, r3
 8003364:	4618      	mov	r0, r3
 8003366:	f7fd f8ed 	bl	8000544 <__aeabi_ui2d>
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	4b58      	ldr	r3, [pc, #352]	; (80034d0 <recordSDdata+0x200>)
 8003370:	f7fd f962 	bl	8000638 <__aeabi_dmul>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4610      	mov	r0, r2
 800337a:	4619      	mov	r1, r3
 800337c:	f7fd fc34 	bl	8000be8 <__aeabi_d2uiz>
 8003380:	4603      	mov	r3, r0
 8003382:	4a54      	ldr	r2, [pc, #336]	; (80034d4 <recordSDdata+0x204>)
 8003384:	6013      	str	r3, [r2, #0]
	  	freeSpace = (uint32_t) (fre_clust * pfs->csize * 0.5);
 8003386:	4b50      	ldr	r3, [pc, #320]	; (80034c8 <recordSDdata+0x1f8>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	895b      	ldrh	r3, [r3, #10]
 800338c:	461a      	mov	r2, r3
 800338e:	4b4f      	ldr	r3, [pc, #316]	; (80034cc <recordSDdata+0x1fc>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	fb02 f303 	mul.w	r3, r2, r3
 8003396:	4618      	mov	r0, r3
 8003398:	f7fd f8d4 	bl	8000544 <__aeabi_ui2d>
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	4b4b      	ldr	r3, [pc, #300]	; (80034d0 <recordSDdata+0x200>)
 80033a2:	f7fd f949 	bl	8000638 <__aeabi_dmul>
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	4610      	mov	r0, r2
 80033ac:	4619      	mov	r1, r3
 80033ae:	f7fd fc1b 	bl	8000be8 <__aeabi_d2uiz>
 80033b2:	4603      	mov	r3, r0
 80033b4:	4a48      	ldr	r2, [pc, #288]	; (80034d8 <recordSDdata+0x208>)
 80033b6:	6013      	str	r3, [r2, #0]
	  	char mSz[12];
	  	sprintf(mSz, "%lu", freeSpace);
 80033b8:	4b47      	ldr	r3, [pc, #284]	; (80034d8 <recordSDdata+0x208>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80033c0:	4946      	ldr	r1, [pc, #280]	; (80034dc <recordSDdata+0x20c>)
 80033c2:	4618      	mov	r0, r3
 80033c4:	f00f ffe8 	bl	8013398 <siprintf>
	  	if (fres == FR_OK) {
 80033c8:	4b38      	ldr	r3, [pc, #224]	; (80034ac <recordSDdata+0x1dc>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10b      	bne.n	80033e8 <recordSDdata+0x118>
	  		printf("The free space is: ");
 80033d0:	4843      	ldr	r0, [pc, #268]	; (80034e0 <recordSDdata+0x210>)
 80033d2:	f00f ff6b 	bl	80132ac <iprintf>
	  		printf(mSz);
 80033d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80033da:	4618      	mov	r0, r3
 80033dc:	f00f ff66 	bl	80132ac <iprintf>
	  		printf("\n");
 80033e0:	200a      	movs	r0, #10
 80033e2:	f00f ff75 	bl	80132d0 <putchar>
 80033e6:	e006      	b.n	80033f6 <recordSDdata+0x126>
	  	} else if (fres != FR_OK) {
 80033e8:	4b30      	ldr	r3, [pc, #192]	; (80034ac <recordSDdata+0x1dc>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d002      	beq.n	80033f6 <recordSDdata+0x126>
	  		printf("The free space could not be determined!\n");
 80033f0:	483c      	ldr	r0, [pc, #240]	; (80034e4 <recordSDdata+0x214>)
 80033f2:	f00f ffc9 	bl	8013388 <puts>

//	  	for (uint8_t i = 0; i < 10; i++) {
//	  		f_puts("NEW BOARD TEST.\n", &fil);
//	  	}
	  	char accDataString[50];
	  	sprintf(accDataString, "ax=%3f, ay=%3f, az=%3f\n", mpu6050.acc_mps2[0],  mpu6050.acc_mps2[1],  mpu6050.acc_mps2[2]);
 80033f6:	4b3c      	ldr	r3, [pc, #240]	; (80034e8 <recordSDdata+0x218>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fd f8c4 	bl	8000588 <__aeabi_f2d>
 8003400:	4680      	mov	r8, r0
 8003402:	4689      	mov	r9, r1
 8003404:	4b38      	ldr	r3, [pc, #224]	; (80034e8 <recordSDdata+0x218>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	4618      	mov	r0, r3
 800340a:	f7fd f8bd 	bl	8000588 <__aeabi_f2d>
 800340e:	4604      	mov	r4, r0
 8003410:	460d      	mov	r5, r1
 8003412:	4b35      	ldr	r3, [pc, #212]	; (80034e8 <recordSDdata+0x218>)
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	4618      	mov	r0, r3
 8003418:	f7fd f8b6 	bl	8000588 <__aeabi_f2d>
 800341c:	4602      	mov	r2, r0
 800341e:	460b      	mov	r3, r1
 8003420:	f107 0008 	add.w	r0, r7, #8
 8003424:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003428:	e9cd 4500 	strd	r4, r5, [sp]
 800342c:	4642      	mov	r2, r8
 800342e:	464b      	mov	r3, r9
 8003430:	492e      	ldr	r1, [pc, #184]	; (80034ec <recordSDdata+0x21c>)
 8003432:	f00f ffb1 	bl	8013398 <siprintf>
	  	f_puts(accDataString, &fil);
 8003436:	f107 0308 	add.w	r3, r7, #8
 800343a:	4920      	ldr	r1, [pc, #128]	; (80034bc <recordSDdata+0x1ec>)
 800343c:	4618      	mov	r0, r3
 800343e:	f00c fc2f 	bl	800fca0 <f_puts>

	  	fres = f_close(&fil);
 8003442:	481e      	ldr	r0, [pc, #120]	; (80034bc <recordSDdata+0x1ec>)
 8003444:	f00c faca 	bl	800f9dc <f_close>
 8003448:	4603      	mov	r3, r0
 800344a:	461a      	mov	r2, r3
 800344c:	4b17      	ldr	r3, [pc, #92]	; (80034ac <recordSDdata+0x1dc>)
 800344e:	701a      	strb	r2, [r3, #0]
	  	if (fres == FR_OK) {
 8003450:	4b16      	ldr	r3, [pc, #88]	; (80034ac <recordSDdata+0x1dc>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d103      	bne.n	8003460 <recordSDdata+0x190>
	  		printf("The file is closed.\n");
 8003458:	4825      	ldr	r0, [pc, #148]	; (80034f0 <recordSDdata+0x220>)
 800345a:	f00f ff95 	bl	8013388 <puts>
 800345e:	e006      	b.n	800346e <recordSDdata+0x19e>
	  	} else if (fres != FR_OK) {
 8003460:	4b12      	ldr	r3, [pc, #72]	; (80034ac <recordSDdata+0x1dc>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d002      	beq.n	800346e <recordSDdata+0x19e>
	  		printf("The file was not closed.\n");
 8003468:	4822      	ldr	r0, [pc, #136]	; (80034f4 <recordSDdata+0x224>)
 800346a:	f00f ff8d 	bl	8013388 <puts>
//	  		printf("The file is closed.\n");
//	  	} else if (fres != FR_OK) {
//	  		printf("The file was not closed.\n");
//	  	}

	  	f_mount(NULL, "", 1);
 800346e:	2201      	movs	r2, #1
 8003470:	490c      	ldr	r1, [pc, #48]	; (80034a4 <recordSDdata+0x1d4>)
 8003472:	2000      	movs	r0, #0
 8003474:	f00b fd32 	bl	800eedc <f_mount>
	  	if (fres == FR_OK) {
 8003478:	4b0c      	ldr	r3, [pc, #48]	; (80034ac <recordSDdata+0x1dc>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d103      	bne.n	8003488 <recordSDdata+0x1b8>
	  		printf("The Micro SD card is unmounted!\n");
 8003480:	481d      	ldr	r0, [pc, #116]	; (80034f8 <recordSDdata+0x228>)
 8003482:	f00f ff81 	bl	8013388 <puts>
 8003486:	e006      	b.n	8003496 <recordSDdata+0x1c6>
	  	} else if (fres != FR_OK) {
 8003488:	4b08      	ldr	r3, [pc, #32]	; (80034ac <recordSDdata+0x1dc>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <recordSDdata+0x1c6>
	  		printf("The Micro SD was not unmounted!");
 8003490:	481a      	ldr	r0, [pc, #104]	; (80034fc <recordSDdata+0x22c>)
 8003492:	f00f ff0b 	bl	80132ac <iprintf>
	  	}
    osDelay(5000); // write SD card data every 5 seconds
 8003496:	f241 3088 	movw	r0, #5000	; 0x1388
 800349a:	f00c fe10 	bl	80100be <osDelay>
  {
 800349e:	e71c      	b.n	80032da <recordSDdata+0xa>
 80034a0:	080158b0 	.word	0x080158b0
 80034a4:	080158cc 	.word	0x080158cc
 80034a8:	20000514 	.word	0x20000514
 80034ac:	20002584 	.word	0x20002584
 80034b0:	080158d0 	.word	0x080158d0
 80034b4:	080158f8 	.word	0x080158f8
 80034b8:	08015918 	.word	0x08015918
 80034bc:	20001554 	.word	0x20001554
 80034c0:	08015924 	.word	0x08015924
 80034c4:	0801595c 	.word	0x0801595c
 80034c8:	20001550 	.word	0x20001550
 80034cc:	20002588 	.word	0x20002588
 80034d0:	3fe00000 	.word	0x3fe00000
 80034d4:	2000258c 	.word	0x2000258c
 80034d8:	20002590 	.word	0x20002590
 80034dc:	0801599c 	.word	0x0801599c
 80034e0:	080159a0 	.word	0x080159a0
 80034e4:	080159b4 	.word	0x080159b4
 80034e8:	200029a4 	.word	0x200029a4
 80034ec:	080159dc 	.word	0x080159dc
 80034f0:	080159f4 	.word	0x080159f4
 80034f4:	08015a08 	.word	0x08015a08
 80034f8:	08015a24 	.word	0x08015a24
 80034fc:	08015a44 	.word	0x08015a44

08003500 <getBar30Data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_getBar30Data */
void getBar30Data(void const * argument)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN getBar30Data */
  /* Infinite loop */
	static uint8_t i2cGood=1;
  for(;;)
  {
	 i2cGood=Bar30getData(&pressureSensor);
 8003508:	4805      	ldr	r0, [pc, #20]	; (8003520 <getBar30Data+0x20>)
 800350a:	f7fd fe15 	bl	8001138 <Bar30getData>
 800350e:	4603      	mov	r3, r0
 8003510:	461a      	mov	r2, r3
 8003512:	4b04      	ldr	r3, [pc, #16]	; (8003524 <getBar30Data+0x24>)
 8003514:	701a      	strb	r2, [r3, #0]
    osDelay(250);
 8003516:	20fa      	movs	r0, #250	; 0xfa
 8003518:	f00c fdd1 	bl	80100be <osDelay>
	 i2cGood=Bar30getData(&pressureSensor);
 800351c:	e7f4      	b.n	8003508 <getBar30Data+0x8>
 800351e:	bf00      	nop
 8003520:	200029d4 	.word	0x200029d4
 8003524:	20000009 	.word	0x20000009

08003528 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a04      	ldr	r2, [pc, #16]	; (8003548 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d101      	bne.n	800353e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800353a:	f000 fd7f 	bl	800403c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800353e:	bf00      	nop
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	40010000 	.word	0x40010000

0800354c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003550:	b672      	cpsid	i
}
 8003552:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003554:	e7fe      	b.n	8003554 <Error_Handler+0x8>
	...

08003558 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800355e:	2300      	movs	r3, #0
 8003560:	607b      	str	r3, [r7, #4]
 8003562:	4b12      	ldr	r3, [pc, #72]	; (80035ac <HAL_MspInit+0x54>)
 8003564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003566:	4a11      	ldr	r2, [pc, #68]	; (80035ac <HAL_MspInit+0x54>)
 8003568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800356c:	6453      	str	r3, [r2, #68]	; 0x44
 800356e:	4b0f      	ldr	r3, [pc, #60]	; (80035ac <HAL_MspInit+0x54>)
 8003570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003576:	607b      	str	r3, [r7, #4]
 8003578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800357a:	2300      	movs	r3, #0
 800357c:	603b      	str	r3, [r7, #0]
 800357e:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <HAL_MspInit+0x54>)
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	4a0a      	ldr	r2, [pc, #40]	; (80035ac <HAL_MspInit+0x54>)
 8003584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003588:	6413      	str	r3, [r2, #64]	; 0x40
 800358a:	4b08      	ldr	r3, [pc, #32]	; (80035ac <HAL_MspInit+0x54>)
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003592:	603b      	str	r3, [r7, #0]
 8003594:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003596:	2200      	movs	r2, #0
 8003598:	210f      	movs	r1, #15
 800359a:	f06f 0001 	mvn.w	r0, #1
 800359e:	f001 fb85 	bl	8004cac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035a2:	bf00      	nop
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	40023800 	.word	0x40023800

080035b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b08a      	sub	sp, #40	; 0x28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b8:	f107 0314 	add.w	r3, r7, #20
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	605a      	str	r2, [r3, #4]
 80035c2:	609a      	str	r2, [r3, #8]
 80035c4:	60da      	str	r2, [r3, #12]
 80035c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a33      	ldr	r2, [pc, #204]	; (800369c <HAL_ADC_MspInit+0xec>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d15f      	bne.n	8003692 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80035d2:	2300      	movs	r3, #0
 80035d4:	613b      	str	r3, [r7, #16]
 80035d6:	4b32      	ldr	r3, [pc, #200]	; (80036a0 <HAL_ADC_MspInit+0xf0>)
 80035d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035da:	4a31      	ldr	r2, [pc, #196]	; (80036a0 <HAL_ADC_MspInit+0xf0>)
 80035dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e0:	6453      	str	r3, [r2, #68]	; 0x44
 80035e2:	4b2f      	ldr	r3, [pc, #188]	; (80036a0 <HAL_ADC_MspInit+0xf0>)
 80035e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ea:	613b      	str	r3, [r7, #16]
 80035ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	4b2b      	ldr	r3, [pc, #172]	; (80036a0 <HAL_ADC_MspInit+0xf0>)
 80035f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f6:	4a2a      	ldr	r2, [pc, #168]	; (80036a0 <HAL_ADC_MspInit+0xf0>)
 80035f8:	f043 0301 	orr.w	r3, r3, #1
 80035fc:	6313      	str	r3, [r2, #48]	; 0x30
 80035fe:	4b28      	ldr	r3, [pc, #160]	; (80036a0 <HAL_ADC_MspInit+0xf0>)
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800360a:	2303      	movs	r3, #3
 800360c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800360e:	2303      	movs	r3, #3
 8003610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003612:	2300      	movs	r3, #0
 8003614:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003616:	f107 0314 	add.w	r3, r7, #20
 800361a:	4619      	mov	r1, r3
 800361c:	4821      	ldr	r0, [pc, #132]	; (80036a4 <HAL_ADC_MspInit+0xf4>)
 800361e:	f001 ff8b 	bl	8005538 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003622:	4b21      	ldr	r3, [pc, #132]	; (80036a8 <HAL_ADC_MspInit+0xf8>)
 8003624:	4a21      	ldr	r2, [pc, #132]	; (80036ac <HAL_ADC_MspInit+0xfc>)
 8003626:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003628:	4b1f      	ldr	r3, [pc, #124]	; (80036a8 <HAL_ADC_MspInit+0xf8>)
 800362a:	2200      	movs	r2, #0
 800362c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800362e:	4b1e      	ldr	r3, [pc, #120]	; (80036a8 <HAL_ADC_MspInit+0xf8>)
 8003630:	2200      	movs	r2, #0
 8003632:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003634:	4b1c      	ldr	r3, [pc, #112]	; (80036a8 <HAL_ADC_MspInit+0xf8>)
 8003636:	2200      	movs	r2, #0
 8003638:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800363a:	4b1b      	ldr	r3, [pc, #108]	; (80036a8 <HAL_ADC_MspInit+0xf8>)
 800363c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003640:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003642:	4b19      	ldr	r3, [pc, #100]	; (80036a8 <HAL_ADC_MspInit+0xf8>)
 8003644:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003648:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800364a:	4b17      	ldr	r3, [pc, #92]	; (80036a8 <HAL_ADC_MspInit+0xf8>)
 800364c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003650:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003652:	4b15      	ldr	r3, [pc, #84]	; (80036a8 <HAL_ADC_MspInit+0xf8>)
 8003654:	2200      	movs	r2, #0
 8003656:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003658:	4b13      	ldr	r3, [pc, #76]	; (80036a8 <HAL_ADC_MspInit+0xf8>)
 800365a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800365e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003660:	4b11      	ldr	r3, [pc, #68]	; (80036a8 <HAL_ADC_MspInit+0xf8>)
 8003662:	2200      	movs	r2, #0
 8003664:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003666:	4810      	ldr	r0, [pc, #64]	; (80036a8 <HAL_ADC_MspInit+0xf8>)
 8003668:	f001 fb4a 	bl	8004d00 <HAL_DMA_Init>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003672:	f7ff ff6b 	bl	800354c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a0b      	ldr	r2, [pc, #44]	; (80036a8 <HAL_ADC_MspInit+0xf8>)
 800367a:	639a      	str	r2, [r3, #56]	; 0x38
 800367c:	4a0a      	ldr	r2, [pc, #40]	; (80036a8 <HAL_ADC_MspInit+0xf8>)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8003682:	2200      	movs	r2, #0
 8003684:	2105      	movs	r1, #5
 8003686:	2012      	movs	r0, #18
 8003688:	f001 fb10 	bl	8004cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800368c:	2012      	movs	r0, #18
 800368e:	f001 fb29 	bl	8004ce4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003692:	bf00      	nop
 8003694:	3728      	adds	r7, #40	; 0x28
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	40012000 	.word	0x40012000
 80036a0:	40023800 	.word	0x40023800
 80036a4:	40020000 	.word	0x40020000
 80036a8:	200025dc 	.word	0x200025dc
 80036ac:	40026410 	.word	0x40026410

080036b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b08c      	sub	sp, #48	; 0x30
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036b8:	f107 031c 	add.w	r3, r7, #28
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	605a      	str	r2, [r3, #4]
 80036c2:	609a      	str	r2, [r3, #8]
 80036c4:	60da      	str	r2, [r3, #12]
 80036c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a76      	ldr	r2, [pc, #472]	; (80038a8 <HAL_I2C_MspInit+0x1f8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	f040 808c 	bne.w	80037ec <HAL_I2C_MspInit+0x13c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036d4:	2300      	movs	r3, #0
 80036d6:	61bb      	str	r3, [r7, #24]
 80036d8:	4b74      	ldr	r3, [pc, #464]	; (80038ac <HAL_I2C_MspInit+0x1fc>)
 80036da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036dc:	4a73      	ldr	r2, [pc, #460]	; (80038ac <HAL_I2C_MspInit+0x1fc>)
 80036de:	f043 0302 	orr.w	r3, r3, #2
 80036e2:	6313      	str	r3, [r2, #48]	; 0x30
 80036e4:	4b71      	ldr	r3, [pc, #452]	; (80038ac <HAL_I2C_MspInit+0x1fc>)
 80036e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	61bb      	str	r3, [r7, #24]
 80036ee:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80036f0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80036f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036f6:	2312      	movs	r3, #18
 80036f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036fe:	2303      	movs	r3, #3
 8003700:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003702:	2304      	movs	r3, #4
 8003704:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003706:	f107 031c 	add.w	r3, r7, #28
 800370a:	4619      	mov	r1, r3
 800370c:	4868      	ldr	r0, [pc, #416]	; (80038b0 <HAL_I2C_MspInit+0x200>)
 800370e:	f001 ff13 	bl	8005538 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003712:	2300      	movs	r3, #0
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	4b65      	ldr	r3, [pc, #404]	; (80038ac <HAL_I2C_MspInit+0x1fc>)
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	4a64      	ldr	r2, [pc, #400]	; (80038ac <HAL_I2C_MspInit+0x1fc>)
 800371c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003720:	6413      	str	r3, [r2, #64]	; 0x40
 8003722:	4b62      	ldr	r3, [pc, #392]	; (80038ac <HAL_I2C_MspInit+0x1fc>)
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800372a:	617b      	str	r3, [r7, #20]
 800372c:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800372e:	4b61      	ldr	r3, [pc, #388]	; (80038b4 <HAL_I2C_MspInit+0x204>)
 8003730:	4a61      	ldr	r2, [pc, #388]	; (80038b8 <HAL_I2C_MspInit+0x208>)
 8003732:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8003734:	4b5f      	ldr	r3, [pc, #380]	; (80038b4 <HAL_I2C_MspInit+0x204>)
 8003736:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800373a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800373c:	4b5d      	ldr	r3, [pc, #372]	; (80038b4 <HAL_I2C_MspInit+0x204>)
 800373e:	2200      	movs	r2, #0
 8003740:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003742:	4b5c      	ldr	r3, [pc, #368]	; (80038b4 <HAL_I2C_MspInit+0x204>)
 8003744:	2200      	movs	r2, #0
 8003746:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003748:	4b5a      	ldr	r3, [pc, #360]	; (80038b4 <HAL_I2C_MspInit+0x204>)
 800374a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800374e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003750:	4b58      	ldr	r3, [pc, #352]	; (80038b4 <HAL_I2C_MspInit+0x204>)
 8003752:	2200      	movs	r2, #0
 8003754:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003756:	4b57      	ldr	r3, [pc, #348]	; (80038b4 <HAL_I2C_MspInit+0x204>)
 8003758:	2200      	movs	r2, #0
 800375a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800375c:	4b55      	ldr	r3, [pc, #340]	; (80038b4 <HAL_I2C_MspInit+0x204>)
 800375e:	2200      	movs	r2, #0
 8003760:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003762:	4b54      	ldr	r3, [pc, #336]	; (80038b4 <HAL_I2C_MspInit+0x204>)
 8003764:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003768:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800376a:	4b52      	ldr	r3, [pc, #328]	; (80038b4 <HAL_I2C_MspInit+0x204>)
 800376c:	2200      	movs	r2, #0
 800376e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003770:	4850      	ldr	r0, [pc, #320]	; (80038b4 <HAL_I2C_MspInit+0x204>)
 8003772:	f001 fac5 	bl	8004d00 <HAL_DMA_Init>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 800377c:	f7ff fee6 	bl	800354c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a4c      	ldr	r2, [pc, #304]	; (80038b4 <HAL_I2C_MspInit+0x204>)
 8003784:	639a      	str	r2, [r3, #56]	; 0x38
 8003786:	4a4b      	ldr	r2, [pc, #300]	; (80038b4 <HAL_I2C_MspInit+0x204>)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 800378c:	4b4b      	ldr	r3, [pc, #300]	; (80038bc <HAL_I2C_MspInit+0x20c>)
 800378e:	4a4c      	ldr	r2, [pc, #304]	; (80038c0 <HAL_I2C_MspInit+0x210>)
 8003790:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8003792:	4b4a      	ldr	r3, [pc, #296]	; (80038bc <HAL_I2C_MspInit+0x20c>)
 8003794:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003798:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800379a:	4b48      	ldr	r3, [pc, #288]	; (80038bc <HAL_I2C_MspInit+0x20c>)
 800379c:	2240      	movs	r2, #64	; 0x40
 800379e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037a0:	4b46      	ldr	r3, [pc, #280]	; (80038bc <HAL_I2C_MspInit+0x20c>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80037a6:	4b45      	ldr	r3, [pc, #276]	; (80038bc <HAL_I2C_MspInit+0x20c>)
 80037a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037ac:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037ae:	4b43      	ldr	r3, [pc, #268]	; (80038bc <HAL_I2C_MspInit+0x20c>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037b4:	4b41      	ldr	r3, [pc, #260]	; (80038bc <HAL_I2C_MspInit+0x20c>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80037ba:	4b40      	ldr	r3, [pc, #256]	; (80038bc <HAL_I2C_MspInit+0x20c>)
 80037bc:	2200      	movs	r2, #0
 80037be:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80037c0:	4b3e      	ldr	r3, [pc, #248]	; (80038bc <HAL_I2C_MspInit+0x20c>)
 80037c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037c6:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037c8:	4b3c      	ldr	r3, [pc, #240]	; (80038bc <HAL_I2C_MspInit+0x20c>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80037ce:	483b      	ldr	r0, [pc, #236]	; (80038bc <HAL_I2C_MspInit+0x20c>)
 80037d0:	f001 fa96 	bl	8004d00 <HAL_DMA_Init>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <HAL_I2C_MspInit+0x12e>
    {
      Error_Handler();
 80037da:	f7ff feb7 	bl	800354c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a36      	ldr	r2, [pc, #216]	; (80038bc <HAL_I2C_MspInit+0x20c>)
 80037e2:	635a      	str	r2, [r3, #52]	; 0x34
 80037e4:	4a35      	ldr	r2, [pc, #212]	; (80038bc <HAL_I2C_MspInit+0x20c>)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80037ea:	e058      	b.n	800389e <HAL_I2C_MspInit+0x1ee>
  else if(hi2c->Instance==I2C2)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a34      	ldr	r2, [pc, #208]	; (80038c4 <HAL_I2C_MspInit+0x214>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d153      	bne.n	800389e <HAL_I2C_MspInit+0x1ee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037f6:	2300      	movs	r3, #0
 80037f8:	613b      	str	r3, [r7, #16]
 80037fa:	4b2c      	ldr	r3, [pc, #176]	; (80038ac <HAL_I2C_MspInit+0x1fc>)
 80037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fe:	4a2b      	ldr	r2, [pc, #172]	; (80038ac <HAL_I2C_MspInit+0x1fc>)
 8003800:	f043 0302 	orr.w	r3, r3, #2
 8003804:	6313      	str	r3, [r2, #48]	; 0x30
 8003806:	4b29      	ldr	r3, [pc, #164]	; (80038ac <HAL_I2C_MspInit+0x1fc>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	613b      	str	r3, [r7, #16]
 8003810:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003812:	2300      	movs	r3, #0
 8003814:	60fb      	str	r3, [r7, #12]
 8003816:	4b25      	ldr	r3, [pc, #148]	; (80038ac <HAL_I2C_MspInit+0x1fc>)
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	4a24      	ldr	r2, [pc, #144]	; (80038ac <HAL_I2C_MspInit+0x1fc>)
 800381c:	f043 0304 	orr.w	r3, r3, #4
 8003820:	6313      	str	r3, [r2, #48]	; 0x30
 8003822:	4b22      	ldr	r3, [pc, #136]	; (80038ac <HAL_I2C_MspInit+0x1fc>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	f003 0304 	and.w	r3, r3, #4
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800382e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003834:	2312      	movs	r3, #18
 8003836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003838:	2300      	movs	r3, #0
 800383a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800383c:	2303      	movs	r3, #3
 800383e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003840:	2304      	movs	r3, #4
 8003842:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003844:	f107 031c 	add.w	r3, r7, #28
 8003848:	4619      	mov	r1, r3
 800384a:	4819      	ldr	r0, [pc, #100]	; (80038b0 <HAL_I2C_MspInit+0x200>)
 800384c:	f001 fe74 	bl	8005538 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003856:	2312      	movs	r3, #18
 8003858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385a:	2300      	movs	r3, #0
 800385c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800385e:	2303      	movs	r3, #3
 8003860:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003862:	2304      	movs	r3, #4
 8003864:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003866:	f107 031c 	add.w	r3, r7, #28
 800386a:	4619      	mov	r1, r3
 800386c:	4816      	ldr	r0, [pc, #88]	; (80038c8 <HAL_I2C_MspInit+0x218>)
 800386e:	f001 fe63 	bl	8005538 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003872:	2300      	movs	r3, #0
 8003874:	60bb      	str	r3, [r7, #8]
 8003876:	4b0d      	ldr	r3, [pc, #52]	; (80038ac <HAL_I2C_MspInit+0x1fc>)
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	4a0c      	ldr	r2, [pc, #48]	; (80038ac <HAL_I2C_MspInit+0x1fc>)
 800387c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003880:	6413      	str	r3, [r2, #64]	; 0x40
 8003882:	4b0a      	ldr	r3, [pc, #40]	; (80038ac <HAL_I2C_MspInit+0x1fc>)
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800388a:	60bb      	str	r3, [r7, #8]
 800388c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 800388e:	2200      	movs	r2, #0
 8003890:	2105      	movs	r1, #5
 8003892:	2021      	movs	r0, #33	; 0x21
 8003894:	f001 fa0a 	bl	8004cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003898:	2021      	movs	r0, #33	; 0x21
 800389a:	f001 fa23 	bl	8004ce4 <HAL_NVIC_EnableIRQ>
}
 800389e:	bf00      	nop
 80038a0:	3730      	adds	r7, #48	; 0x30
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	40005400 	.word	0x40005400
 80038ac:	40023800 	.word	0x40023800
 80038b0:	40020400 	.word	0x40020400
 80038b4:	200026e4 	.word	0x200026e4
 80038b8:	40026010 	.word	0x40026010
 80038bc:	20002744 	.word	0x20002744
 80038c0:	400260b8 	.word	0x400260b8
 80038c4:	40005800 	.word	0x40005800
 80038c8:	40020800 	.word	0x40020800

080038cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08a      	sub	sp, #40	; 0x28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038d4:	f107 0314 	add.w	r3, r7, #20
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	605a      	str	r2, [r3, #4]
 80038de:	609a      	str	r2, [r3, #8]
 80038e0:	60da      	str	r2, [r3, #12]
 80038e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a19      	ldr	r2, [pc, #100]	; (8003950 <HAL_SPI_MspInit+0x84>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d12c      	bne.n	8003948 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80038ee:	2300      	movs	r3, #0
 80038f0:	613b      	str	r3, [r7, #16]
 80038f2:	4b18      	ldr	r3, [pc, #96]	; (8003954 <HAL_SPI_MspInit+0x88>)
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	4a17      	ldr	r2, [pc, #92]	; (8003954 <HAL_SPI_MspInit+0x88>)
 80038f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038fc:	6413      	str	r3, [r2, #64]	; 0x40
 80038fe:	4b15      	ldr	r3, [pc, #84]	; (8003954 <HAL_SPI_MspInit+0x88>)
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003906:	613b      	str	r3, [r7, #16]
 8003908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800390a:	2300      	movs	r3, #0
 800390c:	60fb      	str	r3, [r7, #12]
 800390e:	4b11      	ldr	r3, [pc, #68]	; (8003954 <HAL_SPI_MspInit+0x88>)
 8003910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003912:	4a10      	ldr	r2, [pc, #64]	; (8003954 <HAL_SPI_MspInit+0x88>)
 8003914:	f043 0302 	orr.w	r3, r3, #2
 8003918:	6313      	str	r3, [r2, #48]	; 0x30
 800391a:	4b0e      	ldr	r3, [pc, #56]	; (8003954 <HAL_SPI_MspInit+0x88>)
 800391c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003926:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800392a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800392c:	2302      	movs	r3, #2
 800392e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003930:	2300      	movs	r3, #0
 8003932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003934:	2303      	movs	r3, #3
 8003936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003938:	2305      	movs	r3, #5
 800393a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800393c:	f107 0314 	add.w	r3, r7, #20
 8003940:	4619      	mov	r1, r3
 8003942:	4805      	ldr	r0, [pc, #20]	; (8003958 <HAL_SPI_MspInit+0x8c>)
 8003944:	f001 fdf8 	bl	8005538 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003948:	bf00      	nop
 800394a:	3728      	adds	r7, #40	; 0x28
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40003800 	.word	0x40003800
 8003954:	40023800 	.word	0x40023800
 8003958:	40020400 	.word	0x40020400

0800395c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800396c:	d10d      	bne.n	800398a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800396e:	2300      	movs	r3, #0
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	4b09      	ldr	r3, [pc, #36]	; (8003998 <HAL_TIM_Base_MspInit+0x3c>)
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	4a08      	ldr	r2, [pc, #32]	; (8003998 <HAL_TIM_Base_MspInit+0x3c>)
 8003978:	f043 0301 	orr.w	r3, r3, #1
 800397c:	6413      	str	r3, [r2, #64]	; 0x40
 800397e:	4b06      	ldr	r3, [pc, #24]	; (8003998 <HAL_TIM_Base_MspInit+0x3c>)
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800398a:	bf00      	nop
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	40023800 	.word	0x40023800

0800399c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a0e      	ldr	r2, [pc, #56]	; (80039e4 <HAL_TIM_PWM_MspInit+0x48>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d115      	bne.n	80039da <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80039ae:	2300      	movs	r3, #0
 80039b0:	60fb      	str	r3, [r7, #12]
 80039b2:	4b0d      	ldr	r3, [pc, #52]	; (80039e8 <HAL_TIM_PWM_MspInit+0x4c>)
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	4a0c      	ldr	r2, [pc, #48]	; (80039e8 <HAL_TIM_PWM_MspInit+0x4c>)
 80039b8:	f043 0302 	orr.w	r3, r3, #2
 80039bc:	6413      	str	r3, [r2, #64]	; 0x40
 80039be:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <HAL_TIM_PWM_MspInit+0x4c>)
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80039ca:	2200      	movs	r2, #0
 80039cc:	2105      	movs	r1, #5
 80039ce:	201d      	movs	r0, #29
 80039d0:	f001 f96c 	bl	8004cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80039d4:	201d      	movs	r0, #29
 80039d6:	f001 f985 	bl	8004ce4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80039da:	bf00      	nop
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	40000400 	.word	0x40000400
 80039e8:	40023800 	.word	0x40023800

080039ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b088      	sub	sp, #32
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039f4:	f107 030c 	add.w	r3, r7, #12
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	605a      	str	r2, [r3, #4]
 80039fe:	609a      	str	r2, [r3, #8]
 8003a00:	60da      	str	r2, [r3, #12]
 8003a02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a12      	ldr	r2, [pc, #72]	; (8003a54 <HAL_TIM_MspPostInit+0x68>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d11e      	bne.n	8003a4c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60bb      	str	r3, [r7, #8]
 8003a12:	4b11      	ldr	r3, [pc, #68]	; (8003a58 <HAL_TIM_MspPostInit+0x6c>)
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	4a10      	ldr	r2, [pc, #64]	; (8003a58 <HAL_TIM_MspPostInit+0x6c>)
 8003a18:	f043 0304 	orr.w	r3, r3, #4
 8003a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a1e:	4b0e      	ldr	r3, [pc, #56]	; (8003a58 <HAL_TIM_MspPostInit+0x6c>)
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	f003 0304 	and.w	r3, r3, #4
 8003a26:	60bb      	str	r3, [r7, #8]
 8003a28:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003a2a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003a2e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a30:	2302      	movs	r3, #2
 8003a32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a34:	2300      	movs	r3, #0
 8003a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a40:	f107 030c 	add.w	r3, r7, #12
 8003a44:	4619      	mov	r1, r3
 8003a46:	4805      	ldr	r0, [pc, #20]	; (8003a5c <HAL_TIM_MspPostInit+0x70>)
 8003a48:	f001 fd76 	bl	8005538 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003a4c:	bf00      	nop
 8003a4e:	3720      	adds	r7, #32
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	40000400 	.word	0x40000400
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	40020800 	.word	0x40020800

08003a60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b08c      	sub	sp, #48	; 0x30
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a68:	f107 031c 	add.w	r3, r7, #28
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	605a      	str	r2, [r3, #4]
 8003a72:	609a      	str	r2, [r3, #8]
 8003a74:	60da      	str	r2, [r3, #12]
 8003a76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a67      	ldr	r2, [pc, #412]	; (8003c1c <HAL_UART_MspInit+0x1bc>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d12c      	bne.n	8003adc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a82:	2300      	movs	r3, #0
 8003a84:	61bb      	str	r3, [r7, #24]
 8003a86:	4b66      	ldr	r3, [pc, #408]	; (8003c20 <HAL_UART_MspInit+0x1c0>)
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	4a65      	ldr	r2, [pc, #404]	; (8003c20 <HAL_UART_MspInit+0x1c0>)
 8003a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a90:	6413      	str	r3, [r2, #64]	; 0x40
 8003a92:	4b63      	ldr	r3, [pc, #396]	; (8003c20 <HAL_UART_MspInit+0x1c0>)
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9a:	61bb      	str	r3, [r7, #24]
 8003a9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	617b      	str	r3, [r7, #20]
 8003aa2:	4b5f      	ldr	r3, [pc, #380]	; (8003c20 <HAL_UART_MspInit+0x1c0>)
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa6:	4a5e      	ldr	r2, [pc, #376]	; (8003c20 <HAL_UART_MspInit+0x1c0>)
 8003aa8:	f043 0301 	orr.w	r3, r3, #1
 8003aac:	6313      	str	r3, [r2, #48]	; 0x30
 8003aae:	4b5c      	ldr	r3, [pc, #368]	; (8003c20 <HAL_UART_MspInit+0x1c0>)
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	617b      	str	r3, [r7, #20]
 8003ab8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003aba:	230c      	movs	r3, #12
 8003abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003abe:	2302      	movs	r3, #2
 8003ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003aca:	2307      	movs	r3, #7
 8003acc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ace:	f107 031c 	add.w	r3, r7, #28
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	4853      	ldr	r0, [pc, #332]	; (8003c24 <HAL_UART_MspInit+0x1c4>)
 8003ad6:	f001 fd2f 	bl	8005538 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003ada:	e09a      	b.n	8003c12 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a51      	ldr	r2, [pc, #324]	; (8003c28 <HAL_UART_MspInit+0x1c8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	f040 8095 	bne.w	8003c12 <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003ae8:	2300      	movs	r3, #0
 8003aea:	613b      	str	r3, [r7, #16]
 8003aec:	4b4c      	ldr	r3, [pc, #304]	; (8003c20 <HAL_UART_MspInit+0x1c0>)
 8003aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af0:	4a4b      	ldr	r2, [pc, #300]	; (8003c20 <HAL_UART_MspInit+0x1c0>)
 8003af2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003af6:	6413      	str	r3, [r2, #64]	; 0x40
 8003af8:	4b49      	ldr	r3, [pc, #292]	; (8003c20 <HAL_UART_MspInit+0x1c0>)
 8003afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b00:	613b      	str	r3, [r7, #16]
 8003b02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b04:	2300      	movs	r3, #0
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	4b45      	ldr	r3, [pc, #276]	; (8003c20 <HAL_UART_MspInit+0x1c0>)
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0c:	4a44      	ldr	r2, [pc, #272]	; (8003c20 <HAL_UART_MspInit+0x1c0>)
 8003b0e:	f043 0304 	orr.w	r3, r3, #4
 8003b12:	6313      	str	r3, [r2, #48]	; 0x30
 8003b14:	4b42      	ldr	r3, [pc, #264]	; (8003c20 <HAL_UART_MspInit+0x1c0>)
 8003b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003b20:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b26:	2302      	movs	r3, #2
 8003b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003b32:	2307      	movs	r3, #7
 8003b34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b36:	f107 031c 	add.w	r3, r7, #28
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	483b      	ldr	r0, [pc, #236]	; (8003c2c <HAL_UART_MspInit+0x1cc>)
 8003b3e:	f001 fcfb 	bl	8005538 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003b42:	4b3b      	ldr	r3, [pc, #236]	; (8003c30 <HAL_UART_MspInit+0x1d0>)
 8003b44:	4a3b      	ldr	r2, [pc, #236]	; (8003c34 <HAL_UART_MspInit+0x1d4>)
 8003b46:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003b48:	4b39      	ldr	r3, [pc, #228]	; (8003c30 <HAL_UART_MspInit+0x1d0>)
 8003b4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b4e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b50:	4b37      	ldr	r3, [pc, #220]	; (8003c30 <HAL_UART_MspInit+0x1d0>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b56:	4b36      	ldr	r3, [pc, #216]	; (8003c30 <HAL_UART_MspInit+0x1d0>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b5c:	4b34      	ldr	r3, [pc, #208]	; (8003c30 <HAL_UART_MspInit+0x1d0>)
 8003b5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b62:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b64:	4b32      	ldr	r3, [pc, #200]	; (8003c30 <HAL_UART_MspInit+0x1d0>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b6a:	4b31      	ldr	r3, [pc, #196]	; (8003c30 <HAL_UART_MspInit+0x1d0>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003b70:	4b2f      	ldr	r3, [pc, #188]	; (8003c30 <HAL_UART_MspInit+0x1d0>)
 8003b72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b76:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003b78:	4b2d      	ldr	r3, [pc, #180]	; (8003c30 <HAL_UART_MspInit+0x1d0>)
 8003b7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003b7e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b80:	4b2b      	ldr	r3, [pc, #172]	; (8003c30 <HAL_UART_MspInit+0x1d0>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003b86:	482a      	ldr	r0, [pc, #168]	; (8003c30 <HAL_UART_MspInit+0x1d0>)
 8003b88:	f001 f8ba 	bl	8004d00 <HAL_DMA_Init>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <HAL_UART_MspInit+0x136>
      Error_Handler();
 8003b92:	f7ff fcdb 	bl	800354c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a25      	ldr	r2, [pc, #148]	; (8003c30 <HAL_UART_MspInit+0x1d0>)
 8003b9a:	639a      	str	r2, [r3, #56]	; 0x38
 8003b9c:	4a24      	ldr	r2, [pc, #144]	; (8003c30 <HAL_UART_MspInit+0x1d0>)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003ba2:	4b25      	ldr	r3, [pc, #148]	; (8003c38 <HAL_UART_MspInit+0x1d8>)
 8003ba4:	4a25      	ldr	r2, [pc, #148]	; (8003c3c <HAL_UART_MspInit+0x1dc>)
 8003ba6:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003ba8:	4b23      	ldr	r3, [pc, #140]	; (8003c38 <HAL_UART_MspInit+0x1d8>)
 8003baa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003bae:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003bb0:	4b21      	ldr	r3, [pc, #132]	; (8003c38 <HAL_UART_MspInit+0x1d8>)
 8003bb2:	2240      	movs	r2, #64	; 0x40
 8003bb4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bb6:	4b20      	ldr	r3, [pc, #128]	; (8003c38 <HAL_UART_MspInit+0x1d8>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003bbc:	4b1e      	ldr	r3, [pc, #120]	; (8003c38 <HAL_UART_MspInit+0x1d8>)
 8003bbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bc2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003bc4:	4b1c      	ldr	r3, [pc, #112]	; (8003c38 <HAL_UART_MspInit+0x1d8>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bca:	4b1b      	ldr	r3, [pc, #108]	; (8003c38 <HAL_UART_MspInit+0x1d8>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
 8003bd0:	4b19      	ldr	r3, [pc, #100]	; (8003c38 <HAL_UART_MspInit+0x1d8>)
 8003bd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bd6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003bd8:	4b17      	ldr	r3, [pc, #92]	; (8003c38 <HAL_UART_MspInit+0x1d8>)
 8003bda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003bde:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003be0:	4b15      	ldr	r3, [pc, #84]	; (8003c38 <HAL_UART_MspInit+0x1d8>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003be6:	4814      	ldr	r0, [pc, #80]	; (8003c38 <HAL_UART_MspInit+0x1d8>)
 8003be8:	f001 f88a 	bl	8004d00 <HAL_DMA_Init>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <HAL_UART_MspInit+0x196>
      Error_Handler();
 8003bf2:	f7ff fcab 	bl	800354c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a0f      	ldr	r2, [pc, #60]	; (8003c38 <HAL_UART_MspInit+0x1d8>)
 8003bfa:	635a      	str	r2, [r3, #52]	; 0x34
 8003bfc:	4a0e      	ldr	r2, [pc, #56]	; (8003c38 <HAL_UART_MspInit+0x1d8>)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003c02:	2200      	movs	r2, #0
 8003c04:	2105      	movs	r1, #5
 8003c06:	2027      	movs	r0, #39	; 0x27
 8003c08:	f001 f850 	bl	8004cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003c0c:	2027      	movs	r0, #39	; 0x27
 8003c0e:	f001 f869 	bl	8004ce4 <HAL_NVIC_EnableIRQ>
}
 8003c12:	bf00      	nop
 8003c14:	3730      	adds	r7, #48	; 0x30
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	40004400 	.word	0x40004400
 8003c20:	40023800 	.word	0x40023800
 8003c24:	40020000 	.word	0x40020000
 8003c28:	40004800 	.word	0x40004800
 8003c2c:	40020800 	.word	0x40020800
 8003c30:	200028bc 	.word	0x200028bc
 8003c34:	40026028 	.word	0x40026028
 8003c38:	2000291c 	.word	0x2000291c
 8003c3c:	40026058 	.word	0x40026058

08003c40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b08c      	sub	sp, #48	; 0x30
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003c50:	2300      	movs	r3, #0
 8003c52:	60bb      	str	r3, [r7, #8]
 8003c54:	4b2f      	ldr	r3, [pc, #188]	; (8003d14 <HAL_InitTick+0xd4>)
 8003c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c58:	4a2e      	ldr	r2, [pc, #184]	; (8003d14 <HAL_InitTick+0xd4>)
 8003c5a:	f043 0301 	orr.w	r3, r3, #1
 8003c5e:	6453      	str	r3, [r2, #68]	; 0x44
 8003c60:	4b2c      	ldr	r3, [pc, #176]	; (8003d14 <HAL_InitTick+0xd4>)
 8003c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	60bb      	str	r3, [r7, #8]
 8003c6a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003c6c:	f107 020c 	add.w	r2, r7, #12
 8003c70:	f107 0310 	add.w	r3, r7, #16
 8003c74:	4611      	mov	r1, r2
 8003c76:	4618      	mov	r0, r3
 8003c78:	f005 fae0 	bl	800923c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003c7c:	f005 faca 	bl	8009214 <HAL_RCC_GetPCLK2Freq>
 8003c80:	4603      	mov	r3, r0
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c88:	4a23      	ldr	r2, [pc, #140]	; (8003d18 <HAL_InitTick+0xd8>)
 8003c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8e:	0c9b      	lsrs	r3, r3, #18
 8003c90:	3b01      	subs	r3, #1
 8003c92:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003c94:	4b21      	ldr	r3, [pc, #132]	; (8003d1c <HAL_InitTick+0xdc>)
 8003c96:	4a22      	ldr	r2, [pc, #136]	; (8003d20 <HAL_InitTick+0xe0>)
 8003c98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003c9a:	4b20      	ldr	r3, [pc, #128]	; (8003d1c <HAL_InitTick+0xdc>)
 8003c9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003ca0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003ca2:	4a1e      	ldr	r2, [pc, #120]	; (8003d1c <HAL_InitTick+0xdc>)
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003ca8:	4b1c      	ldr	r3, [pc, #112]	; (8003d1c <HAL_InitTick+0xdc>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cae:	4b1b      	ldr	r3, [pc, #108]	; (8003d1c <HAL_InitTick+0xdc>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cb4:	4b19      	ldr	r3, [pc, #100]	; (8003d1c <HAL_InitTick+0xdc>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003cba:	4818      	ldr	r0, [pc, #96]	; (8003d1c <HAL_InitTick+0xdc>)
 8003cbc:	f006 fbee 	bl	800a49c <HAL_TIM_Base_Init>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8003cc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d11b      	bne.n	8003d06 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003cce:	4813      	ldr	r0, [pc, #76]	; (8003d1c <HAL_InitTick+0xdc>)
 8003cd0:	f006 fc9c 	bl	800a60c <HAL_TIM_Base_Start_IT>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8003cda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d111      	bne.n	8003d06 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003ce2:	2019      	movs	r0, #25
 8003ce4:	f000 fffe 	bl	8004ce4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b0f      	cmp	r3, #15
 8003cec:	d808      	bhi.n	8003d00 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8003cee:	2200      	movs	r2, #0
 8003cf0:	6879      	ldr	r1, [r7, #4]
 8003cf2:	2019      	movs	r0, #25
 8003cf4:	f000 ffda 	bl	8004cac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003cf8:	4a0a      	ldr	r2, [pc, #40]	; (8003d24 <HAL_InitTick+0xe4>)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6013      	str	r3, [r2, #0]
 8003cfe:	e002      	b.n	8003d06 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003d06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3730      	adds	r7, #48	; 0x30
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	40023800 	.word	0x40023800
 8003d18:	431bde83 	.word	0x431bde83
 8003d1c:	20002a14 	.word	0x20002a14
 8003d20:	40010000 	.word	0x40010000
 8003d24:	20000010 	.word	0x20000010

08003d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d2c:	e7fe      	b.n	8003d2c <NMI_Handler+0x4>

08003d2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d32:	e7fe      	b.n	8003d32 <HardFault_Handler+0x4>

08003d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d38:	e7fe      	b.n	8003d38 <MemManage_Handler+0x4>

08003d3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d3e:	e7fe      	b.n	8003d3e <BusFault_Handler+0x4>

08003d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d44:	e7fe      	b.n	8003d44 <UsageFault_Handler+0x4>

08003d46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d46:	b480      	push	{r7}
 8003d48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d4a:	bf00      	nop
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_MPU6050_Pin);
 8003d58:	2002      	movs	r0, #2
 8003d5a:	f001 fd9b 	bl	8005894 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003d5e:	bf00      	nop
 8003d60:	bd80      	pop	{r7, pc}
	...

08003d64 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003d68:	4802      	ldr	r0, [pc, #8]	; (8003d74 <DMA1_Stream0_IRQHandler+0x10>)
 8003d6a:	f001 f961 	bl	8005030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003d6e:	bf00      	nop
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	200026e4 	.word	0x200026e4

08003d78 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003d7c:	4802      	ldr	r0, [pc, #8]	; (8003d88 <DMA1_Stream1_IRQHandler+0x10>)
 8003d7e:	f001 f957 	bl	8005030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003d82:	bf00      	nop
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	200028bc 	.word	0x200028bc

08003d8c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003d90:	4802      	ldr	r0, [pc, #8]	; (8003d9c <DMA1_Stream3_IRQHandler+0x10>)
 8003d92:	f001 f94d 	bl	8005030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003d96:	bf00      	nop
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	2000291c 	.word	0x2000291c

08003da0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003da4:	4802      	ldr	r0, [pc, #8]	; (8003db0 <ADC_IRQHandler+0x10>)
 8003da6:	f000 f9d0 	bl	800414a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003daa:	bf00      	nop
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	20002594 	.word	0x20002594

08003db4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003db8:	4802      	ldr	r0, [pc, #8]	; (8003dc4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003dba:	f006 fdaf 	bl	800a91c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003dbe:	bf00      	nop
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20002a14 	.word	0x20002a14

08003dc8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003dcc:	4802      	ldr	r0, [pc, #8]	; (8003dd8 <TIM3_IRQHandler+0x10>)
 8003dce:	f006 fda5 	bl	800a91c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003dd2:	bf00      	nop
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	200027ec 	.word	0x200027ec

08003ddc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003de0:	4802      	ldr	r0, [pc, #8]	; (8003dec <I2C2_EV_IRQHandler+0x10>)
 8003de2:	f002 ffb9 	bl	8006d58 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003de6:	bf00      	nop
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	20002690 	.word	0x20002690

08003df0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003df4:	4802      	ldr	r0, [pc, #8]	; (8003e00 <USART3_IRQHandler+0x10>)
 8003df6:	f007 fcfb 	bl	800b7f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003dfa:	bf00      	nop
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	20002878 	.word	0x20002878

08003e04 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003e08:	4802      	ldr	r0, [pc, #8]	; (8003e14 <DMA1_Stream7_IRQHandler+0x10>)
 8003e0a:	f001 f911 	bl	8005030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8003e0e:	bf00      	nop
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	20002744 	.word	0x20002744

08003e18 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003e1c:	4802      	ldr	r0, [pc, #8]	; (8003e28 <DMA2_Stream0_IRQHandler+0x10>)
 8003e1e:	f001 f907 	bl	8005030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003e22:	bf00      	nop
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	200025dc 	.word	0x200025dc

08003e2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  return 1;
 8003e30:	2301      	movs	r3, #1
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <_kill>:

int _kill(int pid, int sig)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003e46:	f00f fc47 	bl	80136d8 <__errno>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2216      	movs	r2, #22
 8003e4e:	601a      	str	r2, [r3, #0]
  return -1;
 8003e50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <_exit>:

void _exit (int status)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003e64:	f04f 31ff 	mov.w	r1, #4294967295
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f7ff ffe7 	bl	8003e3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003e6e:	e7fe      	b.n	8003e6e <_exit+0x12>

08003e70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	e00a      	b.n	8003e98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003e82:	f3af 8000 	nop.w
 8003e86:	4601      	mov	r1, r0
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	1c5a      	adds	r2, r3, #1
 8003e8c:	60ba      	str	r2, [r7, #8]
 8003e8e:	b2ca      	uxtb	r2, r1
 8003e90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	3301      	adds	r3, #1
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	dbf0      	blt.n	8003e82 <_read+0x12>
  }

  return len;
 8003ea0:	687b      	ldr	r3, [r7, #4]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3718      	adds	r7, #24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <_close>:
  }
  return len;
}

int _close(int file)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b083      	sub	sp, #12
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003eb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
 8003eca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ed2:	605a      	str	r2, [r3, #4]
  return 0;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <_isatty>:

int _isatty(int file)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b083      	sub	sp, #12
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003eea:	2301      	movs	r3, #1
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3714      	adds	r7, #20
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
	...

08003f14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f1c:	4a14      	ldr	r2, [pc, #80]	; (8003f70 <_sbrk+0x5c>)
 8003f1e:	4b15      	ldr	r3, [pc, #84]	; (8003f74 <_sbrk+0x60>)
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f28:	4b13      	ldr	r3, [pc, #76]	; (8003f78 <_sbrk+0x64>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d102      	bne.n	8003f36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f30:	4b11      	ldr	r3, [pc, #68]	; (8003f78 <_sbrk+0x64>)
 8003f32:	4a12      	ldr	r2, [pc, #72]	; (8003f7c <_sbrk+0x68>)
 8003f34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f36:	4b10      	ldr	r3, [pc, #64]	; (8003f78 <_sbrk+0x64>)
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d207      	bcs.n	8003f54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f44:	f00f fbc8 	bl	80136d8 <__errno>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	220c      	movs	r2, #12
 8003f4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f52:	e009      	b.n	8003f68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f54:	4b08      	ldr	r3, [pc, #32]	; (8003f78 <_sbrk+0x64>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f5a:	4b07      	ldr	r3, [pc, #28]	; (8003f78 <_sbrk+0x64>)
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4413      	add	r3, r2
 8003f62:	4a05      	ldr	r2, [pc, #20]	; (8003f78 <_sbrk+0x64>)
 8003f64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f66:	68fb      	ldr	r3, [r7, #12]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	20020000 	.word	0x20020000
 8003f74:	00000400 	.word	0x00000400
 8003f78:	20002a5c 	.word	0x20002a5c
 8003f7c:	20006980 	.word	0x20006980

08003f80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f84:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <SystemInit+0x20>)
 8003f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8a:	4a05      	ldr	r2, [pc, #20]	; (8003fa0 <SystemInit+0x20>)
 8003f8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f94:	bf00      	nop
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	e000ed00 	.word	0xe000ed00

08003fa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003fa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003fdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003fa8:	480d      	ldr	r0, [pc, #52]	; (8003fe0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003faa:	490e      	ldr	r1, [pc, #56]	; (8003fe4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003fac:	4a0e      	ldr	r2, [pc, #56]	; (8003fe8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fb0:	e002      	b.n	8003fb8 <LoopCopyDataInit>

08003fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fb6:	3304      	adds	r3, #4

08003fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fbc:	d3f9      	bcc.n	8003fb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fbe:	4a0b      	ldr	r2, [pc, #44]	; (8003fec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003fc0:	4c0b      	ldr	r4, [pc, #44]	; (8003ff0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fc4:	e001      	b.n	8003fca <LoopFillZerobss>

08003fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fc8:	3204      	adds	r2, #4

08003fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fcc:	d3fb      	bcc.n	8003fc6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003fce:	f7ff ffd7 	bl	8003f80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003fd2:	f00f fb87 	bl	80136e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003fd6:	f7fe faa7 	bl	8002528 <main>
  bx  lr    
 8003fda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003fdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fe4:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8003fe8:	08016294 	.word	0x08016294
  ldr r2, =_sbss
 8003fec:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003ff0:	20006980 	.word	0x20006980

08003ff4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ff4:	e7fe      	b.n	8003ff4 <CAN1_RX0_IRQHandler>
	...

08003ff8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ffc:	4b0e      	ldr	r3, [pc, #56]	; (8004038 <HAL_Init+0x40>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a0d      	ldr	r2, [pc, #52]	; (8004038 <HAL_Init+0x40>)
 8004002:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004006:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004008:	4b0b      	ldr	r3, [pc, #44]	; (8004038 <HAL_Init+0x40>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a0a      	ldr	r2, [pc, #40]	; (8004038 <HAL_Init+0x40>)
 800400e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004012:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004014:	4b08      	ldr	r3, [pc, #32]	; (8004038 <HAL_Init+0x40>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a07      	ldr	r2, [pc, #28]	; (8004038 <HAL_Init+0x40>)
 800401a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800401e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004020:	2003      	movs	r0, #3
 8004022:	f000 fe38 	bl	8004c96 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004026:	200f      	movs	r0, #15
 8004028:	f7ff fe0a 	bl	8003c40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800402c:	f7ff fa94 	bl	8003558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	40023c00 	.word	0x40023c00

0800403c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004040:	4b06      	ldr	r3, [pc, #24]	; (800405c <HAL_IncTick+0x20>)
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	461a      	mov	r2, r3
 8004046:	4b06      	ldr	r3, [pc, #24]	; (8004060 <HAL_IncTick+0x24>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4413      	add	r3, r2
 800404c:	4a04      	ldr	r2, [pc, #16]	; (8004060 <HAL_IncTick+0x24>)
 800404e:	6013      	str	r3, [r2, #0]
}
 8004050:	bf00      	nop
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	20000014 	.word	0x20000014
 8004060:	20002a60 	.word	0x20002a60

08004064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  return uwTick;
 8004068:	4b03      	ldr	r3, [pc, #12]	; (8004078 <HAL_GetTick+0x14>)
 800406a:	681b      	ldr	r3, [r3, #0]
}
 800406c:	4618      	mov	r0, r3
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	20002a60 	.word	0x20002a60

0800407c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004084:	f7ff ffee 	bl	8004064 <HAL_GetTick>
 8004088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004094:	d005      	beq.n	80040a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004096:	4b0a      	ldr	r3, [pc, #40]	; (80040c0 <HAL_Delay+0x44>)
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	461a      	mov	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4413      	add	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80040a2:	bf00      	nop
 80040a4:	f7ff ffde 	bl	8004064 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d8f7      	bhi.n	80040a4 <HAL_Delay+0x28>
  {
  }
}
 80040b4:	bf00      	nop
 80040b6:	bf00      	nop
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	20000014 	.word	0x20000014

080040c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040cc:	2300      	movs	r3, #0
 80040ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e033      	b.n	8004142 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d109      	bne.n	80040f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7ff fa64 	bl	80035b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	f003 0310 	and.w	r3, r3, #16
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d118      	bne.n	8004134 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800410a:	f023 0302 	bic.w	r3, r3, #2
 800410e:	f043 0202 	orr.w	r2, r3, #2
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 fb88 	bl	800482c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	f023 0303 	bic.w	r3, r3, #3
 800412a:	f043 0201 	orr.w	r2, r3, #1
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	641a      	str	r2, [r3, #64]	; 0x40
 8004132:	e001      	b.n	8004138 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004140:	7bfb      	ldrb	r3, [r7, #15]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b086      	sub	sp, #24
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004152:	2300      	movs	r3, #0
 8004154:	617b      	str	r3, [r7, #20]
 8004156:	2300      	movs	r3, #0
 8004158:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	f003 0320 	and.w	r3, r3, #32
 8004178:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d049      	beq.n	8004214 <HAL_ADC_IRQHandler+0xca>
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d046      	beq.n	8004214 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	f003 0310 	and.w	r3, r3, #16
 800418e:	2b00      	cmp	r3, #0
 8004190:	d105      	bne.n	800419e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d12b      	bne.n	8004204 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d127      	bne.n	8004204 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d006      	beq.n	80041d0 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d119      	bne.n	8004204 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0220 	bic.w	r2, r2, #32
 80041de:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d105      	bne.n	8004204 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	f043 0201 	orr.w	r2, r3, #1
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7fe f935 	bl	8002474 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f06f 0212 	mvn.w	r2, #18
 8004212:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f003 0304 	and.w	r3, r3, #4
 800421a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004222:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d057      	beq.n	80042da <HAL_ADC_IRQHandler+0x190>
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d054      	beq.n	80042da <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004234:	f003 0310 	and.w	r3, r3, #16
 8004238:	2b00      	cmp	r3, #0
 800423a:	d105      	bne.n	8004248 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004240:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d139      	bne.n	80042ca <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004260:	2b00      	cmp	r3, #0
 8004262:	d006      	beq.n	8004272 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800426e:	2b00      	cmp	r3, #0
 8004270:	d12b      	bne.n	80042ca <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800427c:	2b00      	cmp	r3, #0
 800427e:	d124      	bne.n	80042ca <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800428a:	2b00      	cmp	r3, #0
 800428c:	d11d      	bne.n	80042ca <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004292:	2b00      	cmp	r3, #0
 8004294:	d119      	bne.n	80042ca <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042a4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d105      	bne.n	80042ca <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	f043 0201 	orr.w	r2, r3, #1
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 fc2c 	bl	8004b28 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f06f 020c 	mvn.w	r2, #12
 80042d8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d017      	beq.n	8004320 <HAL_ADC_IRQHandler+0x1d6>
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d014      	beq.n	8004320 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b01      	cmp	r3, #1
 8004302:	d10d      	bne.n	8004320 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004308:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 f945 	bl	80045a0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f06f 0201 	mvn.w	r2, #1
 800431e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f003 0320 	and.w	r3, r3, #32
 8004326:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800432e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d015      	beq.n	8004362 <HAL_ADC_IRQHandler+0x218>
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d012      	beq.n	8004362 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004340:	f043 0202 	orr.w	r2, r3, #2
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f06f 0220 	mvn.w	r2, #32
 8004350:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f92e 	bl	80045b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f06f 0220 	mvn.w	r2, #32
 8004360:	601a      	str	r2, [r3, #0]
  }
}
 8004362:	bf00      	nop
 8004364:	3718      	adds	r7, #24
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004382:	2b01      	cmp	r3, #1
 8004384:	d101      	bne.n	800438a <HAL_ADC_Start_DMA+0x1e>
 8004386:	2302      	movs	r3, #2
 8004388:	e0e9      	b.n	800455e <HAL_ADC_Start_DMA+0x1f2>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	2b01      	cmp	r3, #1
 800439e:	d018      	beq.n	80043d2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689a      	ldr	r2, [r3, #8]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 0201 	orr.w	r2, r2, #1
 80043ae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80043b0:	4b6d      	ldr	r3, [pc, #436]	; (8004568 <HAL_ADC_Start_DMA+0x1fc>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a6d      	ldr	r2, [pc, #436]	; (800456c <HAL_ADC_Start_DMA+0x200>)
 80043b6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ba:	0c9a      	lsrs	r2, r3, #18
 80043bc:	4613      	mov	r3, r2
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	4413      	add	r3, r2
 80043c2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80043c4:	e002      	b.n	80043cc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	3b01      	subs	r3, #1
 80043ca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1f9      	bne.n	80043c6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043e0:	d107      	bne.n	80043f2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	f040 80a1 	bne.w	8004544 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800440a:	f023 0301 	bic.w	r3, r3, #1
 800440e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004420:	2b00      	cmp	r3, #0
 8004422:	d007      	beq.n	8004434 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004428:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800442c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004438:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800443c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004440:	d106      	bne.n	8004450 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004446:	f023 0206 	bic.w	r2, r3, #6
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	645a      	str	r2, [r3, #68]	; 0x44
 800444e:	e002      	b.n	8004456 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800445e:	4b44      	ldr	r3, [pc, #272]	; (8004570 <HAL_ADC_Start_DMA+0x204>)
 8004460:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004466:	4a43      	ldr	r2, [pc, #268]	; (8004574 <HAL_ADC_Start_DMA+0x208>)
 8004468:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446e:	4a42      	ldr	r2, [pc, #264]	; (8004578 <HAL_ADC_Start_DMA+0x20c>)
 8004470:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004476:	4a41      	ldr	r2, [pc, #260]	; (800457c <HAL_ADC_Start_DMA+0x210>)
 8004478:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004482:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685a      	ldr	r2, [r3, #4]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004492:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044a2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	334c      	adds	r3, #76	; 0x4c
 80044ae:	4619      	mov	r1, r3
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f000 fcd2 	bl	8004e5c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f003 031f 	and.w	r3, r3, #31
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d12a      	bne.n	800451a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a2d      	ldr	r2, [pc, #180]	; (8004580 <HAL_ADC_Start_DMA+0x214>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d015      	beq.n	80044fa <HAL_ADC_Start_DMA+0x18e>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a2c      	ldr	r2, [pc, #176]	; (8004584 <HAL_ADC_Start_DMA+0x218>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d105      	bne.n	80044e4 <HAL_ADC_Start_DMA+0x178>
 80044d8:	4b25      	ldr	r3, [pc, #148]	; (8004570 <HAL_ADC_Start_DMA+0x204>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f003 031f 	and.w	r3, r3, #31
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00a      	beq.n	80044fa <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a27      	ldr	r2, [pc, #156]	; (8004588 <HAL_ADC_Start_DMA+0x21c>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d136      	bne.n	800455c <HAL_ADC_Start_DMA+0x1f0>
 80044ee:	4b20      	ldr	r3, [pc, #128]	; (8004570 <HAL_ADC_Start_DMA+0x204>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f003 0310 	and.w	r3, r3, #16
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d130      	bne.n	800455c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d129      	bne.n	800455c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689a      	ldr	r2, [r3, #8]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004516:	609a      	str	r2, [r3, #8]
 8004518:	e020      	b.n	800455c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a18      	ldr	r2, [pc, #96]	; (8004580 <HAL_ADC_Start_DMA+0x214>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d11b      	bne.n	800455c <HAL_ADC_Start_DMA+0x1f0>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d114      	bne.n	800455c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004540:	609a      	str	r2, [r3, #8]
 8004542:	e00b      	b.n	800455c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004548:	f043 0210 	orr.w	r2, r3, #16
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004554:	f043 0201 	orr.w	r2, r3, #1
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3718      	adds	r7, #24
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	2000000c 	.word	0x2000000c
 800456c:	431bde83 	.word	0x431bde83
 8004570:	40012300 	.word	0x40012300
 8004574:	08004a25 	.word	0x08004a25
 8004578:	08004adf 	.word	0x08004adf
 800457c:	08004afb 	.word	0x08004afb
 8004580:	40012000 	.word	0x40012000
 8004584:	40012100 	.word	0x40012100
 8004588:	40012200 	.word	0x40012200

0800458c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d101      	bne.n	80045e4 <HAL_ADC_ConfigChannel+0x1c>
 80045e0:	2302      	movs	r3, #2
 80045e2:	e113      	b.n	800480c <HAL_ADC_ConfigChannel+0x244>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2b09      	cmp	r3, #9
 80045f2:	d925      	bls.n	8004640 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68d9      	ldr	r1, [r3, #12]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	b29b      	uxth	r3, r3
 8004600:	461a      	mov	r2, r3
 8004602:	4613      	mov	r3, r2
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	4413      	add	r3, r2
 8004608:	3b1e      	subs	r3, #30
 800460a:	2207      	movs	r2, #7
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	43da      	mvns	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	400a      	ands	r2, r1
 8004618:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68d9      	ldr	r1, [r3, #12]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	b29b      	uxth	r3, r3
 800462a:	4618      	mov	r0, r3
 800462c:	4603      	mov	r3, r0
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	4403      	add	r3, r0
 8004632:	3b1e      	subs	r3, #30
 8004634:	409a      	lsls	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	60da      	str	r2, [r3, #12]
 800463e:	e022      	b.n	8004686 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6919      	ldr	r1, [r3, #16]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	b29b      	uxth	r3, r3
 800464c:	461a      	mov	r2, r3
 800464e:	4613      	mov	r3, r2
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	4413      	add	r3, r2
 8004654:	2207      	movs	r2, #7
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	43da      	mvns	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	400a      	ands	r2, r1
 8004662:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6919      	ldr	r1, [r3, #16]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	689a      	ldr	r2, [r3, #8]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	b29b      	uxth	r3, r3
 8004674:	4618      	mov	r0, r3
 8004676:	4603      	mov	r3, r0
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	4403      	add	r3, r0
 800467c:	409a      	lsls	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	2b06      	cmp	r3, #6
 800468c:	d824      	bhi.n	80046d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	4613      	mov	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	3b05      	subs	r3, #5
 80046a0:	221f      	movs	r2, #31
 80046a2:	fa02 f303 	lsl.w	r3, r2, r3
 80046a6:	43da      	mvns	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	400a      	ands	r2, r1
 80046ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	4618      	mov	r0, r3
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	4613      	mov	r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	4413      	add	r3, r2
 80046c8:	3b05      	subs	r3, #5
 80046ca:	fa00 f203 	lsl.w	r2, r0, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	635a      	str	r2, [r3, #52]	; 0x34
 80046d6:	e04c      	b.n	8004772 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2b0c      	cmp	r3, #12
 80046de:	d824      	bhi.n	800472a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	4613      	mov	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4413      	add	r3, r2
 80046f0:	3b23      	subs	r3, #35	; 0x23
 80046f2:	221f      	movs	r2, #31
 80046f4:	fa02 f303 	lsl.w	r3, r2, r3
 80046f8:	43da      	mvns	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	400a      	ands	r2, r1
 8004700:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	b29b      	uxth	r3, r3
 800470e:	4618      	mov	r0, r3
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	4613      	mov	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4413      	add	r3, r2
 800471a:	3b23      	subs	r3, #35	; 0x23
 800471c:	fa00 f203 	lsl.w	r2, r0, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	631a      	str	r2, [r3, #48]	; 0x30
 8004728:	e023      	b.n	8004772 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	4613      	mov	r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4413      	add	r3, r2
 800473a:	3b41      	subs	r3, #65	; 0x41
 800473c:	221f      	movs	r2, #31
 800473e:	fa02 f303 	lsl.w	r3, r2, r3
 8004742:	43da      	mvns	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	400a      	ands	r2, r1
 800474a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	b29b      	uxth	r3, r3
 8004758:	4618      	mov	r0, r3
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	4613      	mov	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4413      	add	r3, r2
 8004764:	3b41      	subs	r3, #65	; 0x41
 8004766:	fa00 f203 	lsl.w	r2, r0, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	430a      	orrs	r2, r1
 8004770:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004772:	4b29      	ldr	r3, [pc, #164]	; (8004818 <HAL_ADC_ConfigChannel+0x250>)
 8004774:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a28      	ldr	r2, [pc, #160]	; (800481c <HAL_ADC_ConfigChannel+0x254>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d10f      	bne.n	80047a0 <HAL_ADC_ConfigChannel+0x1d8>
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2b12      	cmp	r3, #18
 8004786:	d10b      	bne.n	80047a0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a1d      	ldr	r2, [pc, #116]	; (800481c <HAL_ADC_ConfigChannel+0x254>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d12b      	bne.n	8004802 <HAL_ADC_ConfigChannel+0x23a>
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a1c      	ldr	r2, [pc, #112]	; (8004820 <HAL_ADC_ConfigChannel+0x258>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d003      	beq.n	80047bc <HAL_ADC_ConfigChannel+0x1f4>
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b11      	cmp	r3, #17
 80047ba:	d122      	bne.n	8004802 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a11      	ldr	r2, [pc, #68]	; (8004820 <HAL_ADC_ConfigChannel+0x258>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d111      	bne.n	8004802 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80047de:	4b11      	ldr	r3, [pc, #68]	; (8004824 <HAL_ADC_ConfigChannel+0x25c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a11      	ldr	r2, [pc, #68]	; (8004828 <HAL_ADC_ConfigChannel+0x260>)
 80047e4:	fba2 2303 	umull	r2, r3, r2, r3
 80047e8:	0c9a      	lsrs	r2, r3, #18
 80047ea:	4613      	mov	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80047f4:	e002      	b.n	80047fc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	3b01      	subs	r3, #1
 80047fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1f9      	bne.n	80047f6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3714      	adds	r7, #20
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr
 8004818:	40012300 	.word	0x40012300
 800481c:	40012000 	.word	0x40012000
 8004820:	10000012 	.word	0x10000012
 8004824:	2000000c 	.word	0x2000000c
 8004828:	431bde83 	.word	0x431bde83

0800482c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004834:	4b79      	ldr	r3, [pc, #484]	; (8004a1c <ADC_Init+0x1f0>)
 8004836:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	431a      	orrs	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004860:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	6859      	ldr	r1, [r3, #4]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	021a      	lsls	r2, r3, #8
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	430a      	orrs	r2, r1
 8004874:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004884:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6859      	ldr	r1, [r3, #4]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689a      	ldr	r2, [r3, #8]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6899      	ldr	r1, [r3, #8]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048be:	4a58      	ldr	r2, [pc, #352]	; (8004a20 <ADC_Init+0x1f4>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d022      	beq.n	800490a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689a      	ldr	r2, [r3, #8]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80048d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6899      	ldr	r1, [r3, #8]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80048f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	6899      	ldr	r1, [r3, #8]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	609a      	str	r2, [r3, #8]
 8004908:	e00f      	b.n	800492a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004918:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004928:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 0202 	bic.w	r2, r2, #2
 8004938:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6899      	ldr	r1, [r3, #8]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	7e1b      	ldrb	r3, [r3, #24]
 8004944:	005a      	lsls	r2, r3, #1
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d01b      	beq.n	8004990 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004966:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004976:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6859      	ldr	r1, [r3, #4]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004982:	3b01      	subs	r3, #1
 8004984:	035a      	lsls	r2, r3, #13
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	605a      	str	r2, [r3, #4]
 800498e:	e007      	b.n	80049a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800499e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80049ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	3b01      	subs	r3, #1
 80049bc:	051a      	lsls	r2, r3, #20
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	689a      	ldr	r2, [r3, #8]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80049d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	6899      	ldr	r1, [r3, #8]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80049e2:	025a      	lsls	r2, r3, #9
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689a      	ldr	r2, [r3, #8]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6899      	ldr	r1, [r3, #8]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	029a      	lsls	r2, r3, #10
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	609a      	str	r2, [r3, #8]
}
 8004a10:	bf00      	nop
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	40012300 	.word	0x40012300
 8004a20:	0f000001 	.word	0x0f000001

08004a24 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a30:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d13c      	bne.n	8004ab8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d12b      	bne.n	8004ab0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d127      	bne.n	8004ab0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a66:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d006      	beq.n	8004a7c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d119      	bne.n	8004ab0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 0220 	bic.w	r2, r2, #32
 8004a8a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d105      	bne.n	8004ab0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa8:	f043 0201 	orr.w	r2, r3, #1
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f7fd fcdf 	bl	8002474 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004ab6:	e00e      	b.n	8004ad6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abc:	f003 0310 	and.w	r3, r3, #16
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d003      	beq.n	8004acc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f7ff fd75 	bl	80045b4 <HAL_ADC_ErrorCallback>
}
 8004aca:	e004      	b.n	8004ad6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	4798      	blx	r3
}
 8004ad6:	bf00      	nop
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b084      	sub	sp, #16
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aea:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f7ff fd4d 	bl	800458c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004af2:	bf00      	nop
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b084      	sub	sp, #16
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b06:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2240      	movs	r2, #64	; 0x40
 8004b0c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b12:	f043 0204 	orr.w	r2, r3, #4
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f7ff fd4a 	bl	80045b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b20:	bf00      	nop
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <__NVIC_SetPriorityGrouping>:
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b4c:	4b0c      	ldr	r3, [pc, #48]	; (8004b80 <__NVIC_SetPriorityGrouping+0x44>)
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b58:	4013      	ands	r3, r2
 8004b5a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b6e:	4a04      	ldr	r2, [pc, #16]	; (8004b80 <__NVIC_SetPriorityGrouping+0x44>)
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	60d3      	str	r3, [r2, #12]
}
 8004b74:	bf00      	nop
 8004b76:	3714      	adds	r7, #20
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr
 8004b80:	e000ed00 	.word	0xe000ed00

08004b84 <__NVIC_GetPriorityGrouping>:
{
 8004b84:	b480      	push	{r7}
 8004b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b88:	4b04      	ldr	r3, [pc, #16]	; (8004b9c <__NVIC_GetPriorityGrouping+0x18>)
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	0a1b      	lsrs	r3, r3, #8
 8004b8e:	f003 0307 	and.w	r3, r3, #7
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	e000ed00 	.word	0xe000ed00

08004ba0 <__NVIC_EnableIRQ>:
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	db0b      	blt.n	8004bca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bb2:	79fb      	ldrb	r3, [r7, #7]
 8004bb4:	f003 021f 	and.w	r2, r3, #31
 8004bb8:	4907      	ldr	r1, [pc, #28]	; (8004bd8 <__NVIC_EnableIRQ+0x38>)
 8004bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bbe:	095b      	lsrs	r3, r3, #5
 8004bc0:	2001      	movs	r0, #1
 8004bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8004bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	e000e100 	.word	0xe000e100

08004bdc <__NVIC_SetPriority>:
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	4603      	mov	r3, r0
 8004be4:	6039      	str	r1, [r7, #0]
 8004be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	db0a      	blt.n	8004c06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	490c      	ldr	r1, [pc, #48]	; (8004c28 <__NVIC_SetPriority+0x4c>)
 8004bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bfa:	0112      	lsls	r2, r2, #4
 8004bfc:	b2d2      	uxtb	r2, r2
 8004bfe:	440b      	add	r3, r1
 8004c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004c04:	e00a      	b.n	8004c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	4908      	ldr	r1, [pc, #32]	; (8004c2c <__NVIC_SetPriority+0x50>)
 8004c0c:	79fb      	ldrb	r3, [r7, #7]
 8004c0e:	f003 030f 	and.w	r3, r3, #15
 8004c12:	3b04      	subs	r3, #4
 8004c14:	0112      	lsls	r2, r2, #4
 8004c16:	b2d2      	uxtb	r2, r2
 8004c18:	440b      	add	r3, r1
 8004c1a:	761a      	strb	r2, [r3, #24]
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	e000e100 	.word	0xe000e100
 8004c2c:	e000ed00 	.word	0xe000ed00

08004c30 <NVIC_EncodePriority>:
{
 8004c30:	b480      	push	{r7}
 8004c32:	b089      	sub	sp, #36	; 0x24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f003 0307 	and.w	r3, r3, #7
 8004c42:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	f1c3 0307 	rsb	r3, r3, #7
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	bf28      	it	cs
 8004c4e:	2304      	movcs	r3, #4
 8004c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	3304      	adds	r3, #4
 8004c56:	2b06      	cmp	r3, #6
 8004c58:	d902      	bls.n	8004c60 <NVIC_EncodePriority+0x30>
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	3b03      	subs	r3, #3
 8004c5e:	e000      	b.n	8004c62 <NVIC_EncodePriority+0x32>
 8004c60:	2300      	movs	r3, #0
 8004c62:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c64:	f04f 32ff 	mov.w	r2, #4294967295
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6e:	43da      	mvns	r2, r3
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	401a      	ands	r2, r3
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c78:	f04f 31ff 	mov.w	r1, #4294967295
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c82:	43d9      	mvns	r1, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c88:	4313      	orrs	r3, r2
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3724      	adds	r7, #36	; 0x24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b082      	sub	sp, #8
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7ff ff4c 	bl	8004b3c <__NVIC_SetPriorityGrouping>
}
 8004ca4:	bf00      	nop
 8004ca6:	3708      	adds	r7, #8
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
 8004cb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cbe:	f7ff ff61 	bl	8004b84 <__NVIC_GetPriorityGrouping>
 8004cc2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	68b9      	ldr	r1, [r7, #8]
 8004cc8:	6978      	ldr	r0, [r7, #20]
 8004cca:	f7ff ffb1 	bl	8004c30 <NVIC_EncodePriority>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cd4:	4611      	mov	r1, r2
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7ff ff80 	bl	8004bdc <__NVIC_SetPriority>
}
 8004cdc:	bf00      	nop
 8004cde:	3718      	adds	r7, #24
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	4603      	mov	r3, r0
 8004cec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7ff ff54 	bl	8004ba0 <__NVIC_EnableIRQ>
}
 8004cf8:	bf00      	nop
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d0c:	f7ff f9aa 	bl	8004064 <HAL_GetTick>
 8004d10:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d101      	bne.n	8004d1c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e099      	b.n	8004e50 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 0201 	bic.w	r2, r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d3c:	e00f      	b.n	8004d5e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d3e:	f7ff f991 	bl	8004064 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b05      	cmp	r3, #5
 8004d4a:	d908      	bls.n	8004d5e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2203      	movs	r2, #3
 8004d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e078      	b.n	8004e50 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1e8      	bne.n	8004d3e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	4b38      	ldr	r3, [pc, #224]	; (8004e58 <HAL_DMA_Init+0x158>)
 8004d78:	4013      	ands	r3, r2
 8004d7a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004da2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db4:	2b04      	cmp	r3, #4
 8004db6:	d107      	bne.n	8004dc8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f023 0307 	bic.w	r3, r3, #7
 8004dde:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	2b04      	cmp	r3, #4
 8004df0:	d117      	bne.n	8004e22 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00e      	beq.n	8004e22 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 fb1b 	bl	8005440 <DMA_CheckFifoParam>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d008      	beq.n	8004e22 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2240      	movs	r2, #64	; 0x40
 8004e14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e016      	b.n	8004e50 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 fad2 	bl	80053d4 <DMA_CalcBaseAndBitshift>
 8004e30:	4603      	mov	r3, r0
 8004e32:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e38:	223f      	movs	r2, #63	; 0x3f
 8004e3a:	409a      	lsls	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3718      	adds	r7, #24
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	f010803f 	.word	0xf010803f

08004e5c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
 8004e68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e72:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d101      	bne.n	8004e82 <HAL_DMA_Start_IT+0x26>
 8004e7e:	2302      	movs	r3, #2
 8004e80:	e040      	b.n	8004f04 <HAL_DMA_Start_IT+0xa8>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d12f      	bne.n	8004ef6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2202      	movs	r2, #2
 8004e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	68b9      	ldr	r1, [r7, #8]
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f000 fa64 	bl	8005378 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb4:	223f      	movs	r2, #63	; 0x3f
 8004eb6:	409a      	lsls	r2, r3
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f042 0216 	orr.w	r2, r2, #22
 8004eca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d007      	beq.n	8004ee4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f042 0208 	orr.w	r2, r2, #8
 8004ee2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f042 0201 	orr.w	r2, r2, #1
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	e005      	b.n	8004f02 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004efe:	2302      	movs	r3, #2
 8004f00:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3718      	adds	r7, #24
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f18:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004f1a:	f7ff f8a3 	bl	8004064 <HAL_GetTick>
 8004f1e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d008      	beq.n	8004f3e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2280      	movs	r2, #128	; 0x80
 8004f30:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e052      	b.n	8004fe4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 0216 	bic.w	r2, r2, #22
 8004f4c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	695a      	ldr	r2, [r3, #20]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f5c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d103      	bne.n	8004f6e <HAL_DMA_Abort+0x62>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d007      	beq.n	8004f7e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f022 0208 	bic.w	r2, r2, #8
 8004f7c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 0201 	bic.w	r2, r2, #1
 8004f8c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f8e:	e013      	b.n	8004fb8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f90:	f7ff f868 	bl	8004064 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b05      	cmp	r3, #5
 8004f9c:	d90c      	bls.n	8004fb8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2203      	movs	r2, #3
 8004fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e015      	b.n	8004fe4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1e4      	bne.n	8004f90 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fca:	223f      	movs	r2, #63	; 0x3f
 8004fcc:	409a      	lsls	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d004      	beq.n	800500a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2280      	movs	r2, #128	; 0x80
 8005004:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e00c      	b.n	8005024 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2205      	movs	r2, #5
 800500e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 0201 	bic.w	r2, r2, #1
 8005020:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800503c:	4b8e      	ldr	r3, [pc, #568]	; (8005278 <HAL_DMA_IRQHandler+0x248>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a8e      	ldr	r2, [pc, #568]	; (800527c <HAL_DMA_IRQHandler+0x24c>)
 8005042:	fba2 2303 	umull	r2, r3, r2, r3
 8005046:	0a9b      	lsrs	r3, r3, #10
 8005048:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800504e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800505a:	2208      	movs	r2, #8
 800505c:	409a      	lsls	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	4013      	ands	r3, r2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d01a      	beq.n	800509c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0304 	and.w	r3, r3, #4
 8005070:	2b00      	cmp	r3, #0
 8005072:	d013      	beq.n	800509c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f022 0204 	bic.w	r2, r2, #4
 8005082:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005088:	2208      	movs	r2, #8
 800508a:	409a      	lsls	r2, r3
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005094:	f043 0201 	orr.w	r2, r3, #1
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050a0:	2201      	movs	r2, #1
 80050a2:	409a      	lsls	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4013      	ands	r3, r2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d012      	beq.n	80050d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00b      	beq.n	80050d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050be:	2201      	movs	r2, #1
 80050c0:	409a      	lsls	r2, r3
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ca:	f043 0202 	orr.w	r2, r3, #2
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050d6:	2204      	movs	r2, #4
 80050d8:	409a      	lsls	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4013      	ands	r3, r2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d012      	beq.n	8005108 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00b      	beq.n	8005108 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f4:	2204      	movs	r2, #4
 80050f6:	409a      	lsls	r2, r3
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005100:	f043 0204 	orr.w	r2, r3, #4
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800510c:	2210      	movs	r2, #16
 800510e:	409a      	lsls	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4013      	ands	r3, r2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d043      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0308 	and.w	r3, r3, #8
 8005122:	2b00      	cmp	r3, #0
 8005124:	d03c      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800512a:	2210      	movs	r2, #16
 800512c:	409a      	lsls	r2, r3
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d018      	beq.n	8005172 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d108      	bne.n	8005160 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005152:	2b00      	cmp	r3, #0
 8005154:	d024      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	4798      	blx	r3
 800515e:	e01f      	b.n	80051a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005164:	2b00      	cmp	r3, #0
 8005166:	d01b      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	4798      	blx	r3
 8005170:	e016      	b.n	80051a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800517c:	2b00      	cmp	r3, #0
 800517e:	d107      	bne.n	8005190 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 0208 	bic.w	r2, r2, #8
 800518e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005194:	2b00      	cmp	r3, #0
 8005196:	d003      	beq.n	80051a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a4:	2220      	movs	r2, #32
 80051a6:	409a      	lsls	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4013      	ands	r3, r2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 808f 	beq.w	80052d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0310 	and.w	r3, r3, #16
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f000 8087 	beq.w	80052d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c6:	2220      	movs	r2, #32
 80051c8:	409a      	lsls	r2, r3
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b05      	cmp	r3, #5
 80051d8:	d136      	bne.n	8005248 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f022 0216 	bic.w	r2, r2, #22
 80051e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	695a      	ldr	r2, [r3, #20]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d103      	bne.n	800520a <HAL_DMA_IRQHandler+0x1da>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005206:	2b00      	cmp	r3, #0
 8005208:	d007      	beq.n	800521a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f022 0208 	bic.w	r2, r2, #8
 8005218:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800521e:	223f      	movs	r2, #63	; 0x3f
 8005220:	409a      	lsls	r2, r3
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800523a:	2b00      	cmp	r3, #0
 800523c:	d07e      	beq.n	800533c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	4798      	blx	r3
        }
        return;
 8005246:	e079      	b.n	800533c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d01d      	beq.n	8005292 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10d      	bne.n	8005280 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005268:	2b00      	cmp	r3, #0
 800526a:	d031      	beq.n	80052d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	4798      	blx	r3
 8005274:	e02c      	b.n	80052d0 <HAL_DMA_IRQHandler+0x2a0>
 8005276:	bf00      	nop
 8005278:	2000000c 	.word	0x2000000c
 800527c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005284:	2b00      	cmp	r3, #0
 8005286:	d023      	beq.n	80052d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	4798      	blx	r3
 8005290:	e01e      	b.n	80052d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10f      	bne.n	80052c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f022 0210 	bic.w	r2, r2, #16
 80052ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d003      	beq.n	80052d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d032      	beq.n	800533e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d022      	beq.n	800532a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2205      	movs	r2, #5
 80052e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f022 0201 	bic.w	r2, r2, #1
 80052fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	3301      	adds	r3, #1
 8005300:	60bb      	str	r3, [r7, #8]
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	429a      	cmp	r2, r3
 8005306:	d307      	bcc.n	8005318 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1f2      	bne.n	80052fc <HAL_DMA_IRQHandler+0x2cc>
 8005316:	e000      	b.n	800531a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005318:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800532e:	2b00      	cmp	r3, #0
 8005330:	d005      	beq.n	800533e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	4798      	blx	r3
 800533a:	e000      	b.n	800533e <HAL_DMA_IRQHandler+0x30e>
        return;
 800533c:	bf00      	nop
    }
  }
}
 800533e:	3718      	adds	r7, #24
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005352:	b2db      	uxtb	r3, r3
}
 8005354:	4618      	mov	r0, r3
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800536c:	4618      	mov	r0, r3
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
 8005384:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005394:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	2b40      	cmp	r3, #64	; 0x40
 80053a4:	d108      	bne.n	80053b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80053b6:	e007      	b.n	80053c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	60da      	str	r2, [r3, #12]
}
 80053c8:	bf00      	nop
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	3b10      	subs	r3, #16
 80053e4:	4a14      	ldr	r2, [pc, #80]	; (8005438 <DMA_CalcBaseAndBitshift+0x64>)
 80053e6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ea:	091b      	lsrs	r3, r3, #4
 80053ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80053ee:	4a13      	ldr	r2, [pc, #76]	; (800543c <DMA_CalcBaseAndBitshift+0x68>)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	4413      	add	r3, r2
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	461a      	mov	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2b03      	cmp	r3, #3
 8005400:	d909      	bls.n	8005416 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800540a:	f023 0303 	bic.w	r3, r3, #3
 800540e:	1d1a      	adds	r2, r3, #4
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	659a      	str	r2, [r3, #88]	; 0x58
 8005414:	e007      	b.n	8005426 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800541e:	f023 0303 	bic.w	r3, r3, #3
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800542a:	4618      	mov	r0, r3
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	aaaaaaab 	.word	0xaaaaaaab
 800543c:	08015acc 	.word	0x08015acc

08005440 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005448:	2300      	movs	r3, #0
 800544a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005450:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d11f      	bne.n	800549a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	2b03      	cmp	r3, #3
 800545e:	d856      	bhi.n	800550e <DMA_CheckFifoParam+0xce>
 8005460:	a201      	add	r2, pc, #4	; (adr r2, 8005468 <DMA_CheckFifoParam+0x28>)
 8005462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005466:	bf00      	nop
 8005468:	08005479 	.word	0x08005479
 800546c:	0800548b 	.word	0x0800548b
 8005470:	08005479 	.word	0x08005479
 8005474:	0800550f 	.word	0x0800550f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d046      	beq.n	8005512 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005488:	e043      	b.n	8005512 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005492:	d140      	bne.n	8005516 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005498:	e03d      	b.n	8005516 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054a2:	d121      	bne.n	80054e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	2b03      	cmp	r3, #3
 80054a8:	d837      	bhi.n	800551a <DMA_CheckFifoParam+0xda>
 80054aa:	a201      	add	r2, pc, #4	; (adr r2, 80054b0 <DMA_CheckFifoParam+0x70>)
 80054ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b0:	080054c1 	.word	0x080054c1
 80054b4:	080054c7 	.word	0x080054c7
 80054b8:	080054c1 	.word	0x080054c1
 80054bc:	080054d9 	.word	0x080054d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	73fb      	strb	r3, [r7, #15]
      break;
 80054c4:	e030      	b.n	8005528 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d025      	beq.n	800551e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054d6:	e022      	b.n	800551e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80054e0:	d11f      	bne.n	8005522 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80054e6:	e01c      	b.n	8005522 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d903      	bls.n	80054f6 <DMA_CheckFifoParam+0xb6>
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	2b03      	cmp	r3, #3
 80054f2:	d003      	beq.n	80054fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80054f4:	e018      	b.n	8005528 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	73fb      	strb	r3, [r7, #15]
      break;
 80054fa:	e015      	b.n	8005528 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005500:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00e      	beq.n	8005526 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	73fb      	strb	r3, [r7, #15]
      break;
 800550c:	e00b      	b.n	8005526 <DMA_CheckFifoParam+0xe6>
      break;
 800550e:	bf00      	nop
 8005510:	e00a      	b.n	8005528 <DMA_CheckFifoParam+0xe8>
      break;
 8005512:	bf00      	nop
 8005514:	e008      	b.n	8005528 <DMA_CheckFifoParam+0xe8>
      break;
 8005516:	bf00      	nop
 8005518:	e006      	b.n	8005528 <DMA_CheckFifoParam+0xe8>
      break;
 800551a:	bf00      	nop
 800551c:	e004      	b.n	8005528 <DMA_CheckFifoParam+0xe8>
      break;
 800551e:	bf00      	nop
 8005520:	e002      	b.n	8005528 <DMA_CheckFifoParam+0xe8>
      break;   
 8005522:	bf00      	nop
 8005524:	e000      	b.n	8005528 <DMA_CheckFifoParam+0xe8>
      break;
 8005526:	bf00      	nop
    }
  } 
  
  return status; 
 8005528:	7bfb      	ldrb	r3, [r7, #15]
}
 800552a:	4618      	mov	r0, r3
 800552c:	3714      	adds	r7, #20
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop

08005538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005538:	b480      	push	{r7}
 800553a:	b089      	sub	sp, #36	; 0x24
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005542:	2300      	movs	r3, #0
 8005544:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005546:	2300      	movs	r3, #0
 8005548:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800554a:	2300      	movs	r3, #0
 800554c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800554e:	2300      	movs	r3, #0
 8005550:	61fb      	str	r3, [r7, #28]
 8005552:	e165      	b.n	8005820 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005554:	2201      	movs	r2, #1
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	fa02 f303 	lsl.w	r3, r2, r3
 800555c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	4013      	ands	r3, r2
 8005566:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	429a      	cmp	r2, r3
 800556e:	f040 8154 	bne.w	800581a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f003 0303 	and.w	r3, r3, #3
 800557a:	2b01      	cmp	r3, #1
 800557c:	d005      	beq.n	800558a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005586:	2b02      	cmp	r3, #2
 8005588:	d130      	bne.n	80055ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	005b      	lsls	r3, r3, #1
 8005594:	2203      	movs	r2, #3
 8005596:	fa02 f303 	lsl.w	r3, r2, r3
 800559a:	43db      	mvns	r3, r3
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	4013      	ands	r3, r2
 80055a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	68da      	ldr	r2, [r3, #12]
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	fa02 f303 	lsl.w	r3, r2, r3
 80055ae:	69ba      	ldr	r2, [r7, #24]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	69ba      	ldr	r2, [r7, #24]
 80055b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80055c0:	2201      	movs	r2, #1
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	fa02 f303 	lsl.w	r3, r2, r3
 80055c8:	43db      	mvns	r3, r3
 80055ca:	69ba      	ldr	r2, [r7, #24]
 80055cc:	4013      	ands	r3, r2
 80055ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	091b      	lsrs	r3, r3, #4
 80055d6:	f003 0201 	and.w	r2, r3, #1
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	fa02 f303 	lsl.w	r3, r2, r3
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f003 0303 	and.w	r3, r3, #3
 80055f4:	2b03      	cmp	r3, #3
 80055f6:	d017      	beq.n	8005628 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	005b      	lsls	r3, r3, #1
 8005602:	2203      	movs	r2, #3
 8005604:	fa02 f303 	lsl.w	r3, r2, r3
 8005608:	43db      	mvns	r3, r3
 800560a:	69ba      	ldr	r2, [r7, #24]
 800560c:	4013      	ands	r3, r2
 800560e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	689a      	ldr	r2, [r3, #8]
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	005b      	lsls	r3, r3, #1
 8005618:	fa02 f303 	lsl.w	r3, r2, r3
 800561c:	69ba      	ldr	r2, [r7, #24]
 800561e:	4313      	orrs	r3, r2
 8005620:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f003 0303 	and.w	r3, r3, #3
 8005630:	2b02      	cmp	r3, #2
 8005632:	d123      	bne.n	800567c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	08da      	lsrs	r2, r3, #3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	3208      	adds	r2, #8
 800563c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005640:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	f003 0307 	and.w	r3, r3, #7
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	220f      	movs	r2, #15
 800564c:	fa02 f303 	lsl.w	r3, r2, r3
 8005650:	43db      	mvns	r3, r3
 8005652:	69ba      	ldr	r2, [r7, #24]
 8005654:	4013      	ands	r3, r2
 8005656:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	691a      	ldr	r2, [r3, #16]
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	f003 0307 	and.w	r3, r3, #7
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	fa02 f303 	lsl.w	r3, r2, r3
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	4313      	orrs	r3, r2
 800566c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	08da      	lsrs	r2, r3, #3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	3208      	adds	r2, #8
 8005676:	69b9      	ldr	r1, [r7, #24]
 8005678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	005b      	lsls	r3, r3, #1
 8005686:	2203      	movs	r2, #3
 8005688:	fa02 f303 	lsl.w	r3, r2, r3
 800568c:	43db      	mvns	r3, r3
 800568e:	69ba      	ldr	r2, [r7, #24]
 8005690:	4013      	ands	r3, r2
 8005692:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f003 0203 	and.w	r2, r3, #3
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	005b      	lsls	r3, r3, #1
 80056a0:	fa02 f303 	lsl.w	r3, r2, r3
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f000 80ae 	beq.w	800581a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056be:	2300      	movs	r3, #0
 80056c0:	60fb      	str	r3, [r7, #12]
 80056c2:	4b5d      	ldr	r3, [pc, #372]	; (8005838 <HAL_GPIO_Init+0x300>)
 80056c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c6:	4a5c      	ldr	r2, [pc, #368]	; (8005838 <HAL_GPIO_Init+0x300>)
 80056c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056cc:	6453      	str	r3, [r2, #68]	; 0x44
 80056ce:	4b5a      	ldr	r3, [pc, #360]	; (8005838 <HAL_GPIO_Init+0x300>)
 80056d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80056da:	4a58      	ldr	r2, [pc, #352]	; (800583c <HAL_GPIO_Init+0x304>)
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	089b      	lsrs	r3, r3, #2
 80056e0:	3302      	adds	r3, #2
 80056e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	f003 0303 	and.w	r3, r3, #3
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	220f      	movs	r2, #15
 80056f2:	fa02 f303 	lsl.w	r3, r2, r3
 80056f6:	43db      	mvns	r3, r3
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	4013      	ands	r3, r2
 80056fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a4f      	ldr	r2, [pc, #316]	; (8005840 <HAL_GPIO_Init+0x308>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d025      	beq.n	8005752 <HAL_GPIO_Init+0x21a>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a4e      	ldr	r2, [pc, #312]	; (8005844 <HAL_GPIO_Init+0x30c>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d01f      	beq.n	800574e <HAL_GPIO_Init+0x216>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a4d      	ldr	r2, [pc, #308]	; (8005848 <HAL_GPIO_Init+0x310>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d019      	beq.n	800574a <HAL_GPIO_Init+0x212>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a4c      	ldr	r2, [pc, #304]	; (800584c <HAL_GPIO_Init+0x314>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d013      	beq.n	8005746 <HAL_GPIO_Init+0x20e>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a4b      	ldr	r2, [pc, #300]	; (8005850 <HAL_GPIO_Init+0x318>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d00d      	beq.n	8005742 <HAL_GPIO_Init+0x20a>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a4a      	ldr	r2, [pc, #296]	; (8005854 <HAL_GPIO_Init+0x31c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d007      	beq.n	800573e <HAL_GPIO_Init+0x206>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a49      	ldr	r2, [pc, #292]	; (8005858 <HAL_GPIO_Init+0x320>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d101      	bne.n	800573a <HAL_GPIO_Init+0x202>
 8005736:	2306      	movs	r3, #6
 8005738:	e00c      	b.n	8005754 <HAL_GPIO_Init+0x21c>
 800573a:	2307      	movs	r3, #7
 800573c:	e00a      	b.n	8005754 <HAL_GPIO_Init+0x21c>
 800573e:	2305      	movs	r3, #5
 8005740:	e008      	b.n	8005754 <HAL_GPIO_Init+0x21c>
 8005742:	2304      	movs	r3, #4
 8005744:	e006      	b.n	8005754 <HAL_GPIO_Init+0x21c>
 8005746:	2303      	movs	r3, #3
 8005748:	e004      	b.n	8005754 <HAL_GPIO_Init+0x21c>
 800574a:	2302      	movs	r3, #2
 800574c:	e002      	b.n	8005754 <HAL_GPIO_Init+0x21c>
 800574e:	2301      	movs	r3, #1
 8005750:	e000      	b.n	8005754 <HAL_GPIO_Init+0x21c>
 8005752:	2300      	movs	r3, #0
 8005754:	69fa      	ldr	r2, [r7, #28]
 8005756:	f002 0203 	and.w	r2, r2, #3
 800575a:	0092      	lsls	r2, r2, #2
 800575c:	4093      	lsls	r3, r2
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	4313      	orrs	r3, r2
 8005762:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005764:	4935      	ldr	r1, [pc, #212]	; (800583c <HAL_GPIO_Init+0x304>)
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	089b      	lsrs	r3, r3, #2
 800576a:	3302      	adds	r3, #2
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005772:	4b3a      	ldr	r3, [pc, #232]	; (800585c <HAL_GPIO_Init+0x324>)
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	43db      	mvns	r3, r3
 800577c:	69ba      	ldr	r2, [r7, #24]
 800577e:	4013      	ands	r3, r2
 8005780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d003      	beq.n	8005796 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800578e:	69ba      	ldr	r2, [r7, #24]
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	4313      	orrs	r3, r2
 8005794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005796:	4a31      	ldr	r2, [pc, #196]	; (800585c <HAL_GPIO_Init+0x324>)
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800579c:	4b2f      	ldr	r3, [pc, #188]	; (800585c <HAL_GPIO_Init+0x324>)
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	43db      	mvns	r3, r3
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	4013      	ands	r3, r2
 80057aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d003      	beq.n	80057c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	4313      	orrs	r3, r2
 80057be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80057c0:	4a26      	ldr	r2, [pc, #152]	; (800585c <HAL_GPIO_Init+0x324>)
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80057c6:	4b25      	ldr	r3, [pc, #148]	; (800585c <HAL_GPIO_Init+0x324>)
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	43db      	mvns	r3, r3
 80057d0:	69ba      	ldr	r2, [r7, #24]
 80057d2:	4013      	ands	r3, r2
 80057d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d003      	beq.n	80057ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80057e2:	69ba      	ldr	r2, [r7, #24]
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80057ea:	4a1c      	ldr	r2, [pc, #112]	; (800585c <HAL_GPIO_Init+0x324>)
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80057f0:	4b1a      	ldr	r3, [pc, #104]	; (800585c <HAL_GPIO_Init+0x324>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	43db      	mvns	r3, r3
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	4013      	ands	r3, r2
 80057fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d003      	beq.n	8005814 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	4313      	orrs	r3, r2
 8005812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005814:	4a11      	ldr	r2, [pc, #68]	; (800585c <HAL_GPIO_Init+0x324>)
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	3301      	adds	r3, #1
 800581e:	61fb      	str	r3, [r7, #28]
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	2b0f      	cmp	r3, #15
 8005824:	f67f ae96 	bls.w	8005554 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005828:	bf00      	nop
 800582a:	bf00      	nop
 800582c:	3724      	adds	r7, #36	; 0x24
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	40023800 	.word	0x40023800
 800583c:	40013800 	.word	0x40013800
 8005840:	40020000 	.word	0x40020000
 8005844:	40020400 	.word	0x40020400
 8005848:	40020800 	.word	0x40020800
 800584c:	40020c00 	.word	0x40020c00
 8005850:	40021000 	.word	0x40021000
 8005854:	40021400 	.word	0x40021400
 8005858:	40021800 	.word	0x40021800
 800585c:	40013c00 	.word	0x40013c00

08005860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	460b      	mov	r3, r1
 800586a:	807b      	strh	r3, [r7, #2]
 800586c:	4613      	mov	r3, r2
 800586e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005870:	787b      	ldrb	r3, [r7, #1]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005876:	887a      	ldrh	r2, [r7, #2]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800587c:	e003      	b.n	8005886 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800587e:	887b      	ldrh	r3, [r7, #2]
 8005880:	041a      	lsls	r2, r3, #16
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	619a      	str	r2, [r3, #24]
}
 8005886:	bf00      	nop
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
	...

08005894 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	4603      	mov	r3, r0
 800589c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800589e:	4b08      	ldr	r3, [pc, #32]	; (80058c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80058a0:	695a      	ldr	r2, [r3, #20]
 80058a2:	88fb      	ldrh	r3, [r7, #6]
 80058a4:	4013      	ands	r3, r2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d006      	beq.n	80058b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80058aa:	4a05      	ldr	r2, [pc, #20]	; (80058c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80058ac:	88fb      	ldrh	r3, [r7, #6]
 80058ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80058b0:	88fb      	ldrh	r3, [r7, #6]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7fc fda0 	bl	80023f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80058b8:	bf00      	nop
 80058ba:	3708      	adds	r7, #8
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	40013c00 	.word	0x40013c00

080058c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e12b      	b.n	8005b2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d106      	bne.n	80058f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7fd fee0 	bl	80036b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2224      	movs	r2, #36	; 0x24
 80058f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f022 0201 	bic.w	r2, r2, #1
 8005906:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005916:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005926:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005928:	f003 fc60 	bl	80091ec <HAL_RCC_GetPCLK1Freq>
 800592c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	4a81      	ldr	r2, [pc, #516]	; (8005b38 <HAL_I2C_Init+0x274>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d807      	bhi.n	8005948 <HAL_I2C_Init+0x84>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	4a80      	ldr	r2, [pc, #512]	; (8005b3c <HAL_I2C_Init+0x278>)
 800593c:	4293      	cmp	r3, r2
 800593e:	bf94      	ite	ls
 8005940:	2301      	movls	r3, #1
 8005942:	2300      	movhi	r3, #0
 8005944:	b2db      	uxtb	r3, r3
 8005946:	e006      	b.n	8005956 <HAL_I2C_Init+0x92>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	4a7d      	ldr	r2, [pc, #500]	; (8005b40 <HAL_I2C_Init+0x27c>)
 800594c:	4293      	cmp	r3, r2
 800594e:	bf94      	ite	ls
 8005950:	2301      	movls	r3, #1
 8005952:	2300      	movhi	r3, #0
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e0e7      	b.n	8005b2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	4a78      	ldr	r2, [pc, #480]	; (8005b44 <HAL_I2C_Init+0x280>)
 8005962:	fba2 2303 	umull	r2, r3, r2, r3
 8005966:	0c9b      	lsrs	r3, r3, #18
 8005968:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	430a      	orrs	r2, r1
 800597c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	6a1b      	ldr	r3, [r3, #32]
 8005984:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	4a6a      	ldr	r2, [pc, #424]	; (8005b38 <HAL_I2C_Init+0x274>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d802      	bhi.n	8005998 <HAL_I2C_Init+0xd4>
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	3301      	adds	r3, #1
 8005996:	e009      	b.n	80059ac <HAL_I2C_Init+0xe8>
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800599e:	fb02 f303 	mul.w	r3, r2, r3
 80059a2:	4a69      	ldr	r2, [pc, #420]	; (8005b48 <HAL_I2C_Init+0x284>)
 80059a4:	fba2 2303 	umull	r2, r3, r2, r3
 80059a8:	099b      	lsrs	r3, r3, #6
 80059aa:	3301      	adds	r3, #1
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	6812      	ldr	r2, [r2, #0]
 80059b0:	430b      	orrs	r3, r1
 80059b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	69db      	ldr	r3, [r3, #28]
 80059ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80059be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	495c      	ldr	r1, [pc, #368]	; (8005b38 <HAL_I2C_Init+0x274>)
 80059c8:	428b      	cmp	r3, r1
 80059ca:	d819      	bhi.n	8005a00 <HAL_I2C_Init+0x13c>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	1e59      	subs	r1, r3, #1
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	005b      	lsls	r3, r3, #1
 80059d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80059da:	1c59      	adds	r1, r3, #1
 80059dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80059e0:	400b      	ands	r3, r1
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00a      	beq.n	80059fc <HAL_I2C_Init+0x138>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	1e59      	subs	r1, r3, #1
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	005b      	lsls	r3, r3, #1
 80059f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80059f4:	3301      	adds	r3, #1
 80059f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059fa:	e051      	b.n	8005aa0 <HAL_I2C_Init+0x1dc>
 80059fc:	2304      	movs	r3, #4
 80059fe:	e04f      	b.n	8005aa0 <HAL_I2C_Init+0x1dc>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d111      	bne.n	8005a2c <HAL_I2C_Init+0x168>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	1e58      	subs	r0, r3, #1
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6859      	ldr	r1, [r3, #4]
 8005a10:	460b      	mov	r3, r1
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	440b      	add	r3, r1
 8005a16:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	bf0c      	ite	eq
 8005a24:	2301      	moveq	r3, #1
 8005a26:	2300      	movne	r3, #0
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	e012      	b.n	8005a52 <HAL_I2C_Init+0x18e>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	1e58      	subs	r0, r3, #1
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6859      	ldr	r1, [r3, #4]
 8005a34:	460b      	mov	r3, r1
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	440b      	add	r3, r1
 8005a3a:	0099      	lsls	r1, r3, #2
 8005a3c:	440b      	add	r3, r1
 8005a3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a42:	3301      	adds	r3, #1
 8005a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	bf0c      	ite	eq
 8005a4c:	2301      	moveq	r3, #1
 8005a4e:	2300      	movne	r3, #0
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d001      	beq.n	8005a5a <HAL_I2C_Init+0x196>
 8005a56:	2301      	movs	r3, #1
 8005a58:	e022      	b.n	8005aa0 <HAL_I2C_Init+0x1dc>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10e      	bne.n	8005a80 <HAL_I2C_Init+0x1bc>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	1e58      	subs	r0, r3, #1
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6859      	ldr	r1, [r3, #4]
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	440b      	add	r3, r1
 8005a70:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a74:	3301      	adds	r3, #1
 8005a76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a7e:	e00f      	b.n	8005aa0 <HAL_I2C_Init+0x1dc>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	1e58      	subs	r0, r3, #1
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6859      	ldr	r1, [r3, #4]
 8005a88:	460b      	mov	r3, r1
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	440b      	add	r3, r1
 8005a8e:	0099      	lsls	r1, r3, #2
 8005a90:	440b      	add	r3, r1
 8005a92:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a96:	3301      	adds	r3, #1
 8005a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005aa0:	6879      	ldr	r1, [r7, #4]
 8005aa2:	6809      	ldr	r1, [r1, #0]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	69da      	ldr	r2, [r3, #28]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	431a      	orrs	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005ace:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	6911      	ldr	r1, [r2, #16]
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	68d2      	ldr	r2, [r2, #12]
 8005ada:	4311      	orrs	r1, r2
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	6812      	ldr	r2, [r2, #0]
 8005ae0:	430b      	orrs	r3, r1
 8005ae2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	695a      	ldr	r2, [r3, #20]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	431a      	orrs	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f042 0201 	orr.w	r2, r2, #1
 8005b0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2220      	movs	r2, #32
 8005b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	000186a0 	.word	0x000186a0
 8005b3c:	001e847f 	.word	0x001e847f
 8005b40:	003d08ff 	.word	0x003d08ff
 8005b44:	431bde83 	.word	0x431bde83
 8005b48:	10624dd3 	.word	0x10624dd3

08005b4c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b088      	sub	sp, #32
 8005b50:	af02      	add	r7, sp, #8
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	607a      	str	r2, [r7, #4]
 8005b56:	461a      	mov	r2, r3
 8005b58:	460b      	mov	r3, r1
 8005b5a:	817b      	strh	r3, [r7, #10]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b60:	f7fe fa80 	bl	8004064 <HAL_GetTick>
 8005b64:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b20      	cmp	r3, #32
 8005b70:	f040 80e0 	bne.w	8005d34 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	9300      	str	r3, [sp, #0]
 8005b78:	2319      	movs	r3, #25
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	4970      	ldr	r1, [pc, #448]	; (8005d40 <HAL_I2C_Master_Transmit+0x1f4>)
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f003 f818 	bl	8008bb4 <I2C_WaitOnFlagUntilTimeout>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d001      	beq.n	8005b8e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005b8a:	2302      	movs	r3, #2
 8005b8c:	e0d3      	b.n	8005d36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d101      	bne.n	8005b9c <HAL_I2C_Master_Transmit+0x50>
 8005b98:	2302      	movs	r3, #2
 8005b9a:	e0cc      	b.n	8005d36 <HAL_I2C_Master_Transmit+0x1ea>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d007      	beq.n	8005bc2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f042 0201 	orr.w	r2, r2, #1
 8005bc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bd0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2221      	movs	r2, #33	; 0x21
 8005bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2210      	movs	r2, #16
 8005bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	893a      	ldrh	r2, [r7, #8]
 8005bf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	4a50      	ldr	r2, [pc, #320]	; (8005d44 <HAL_I2C_Master_Transmit+0x1f8>)
 8005c02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005c04:	8979      	ldrh	r1, [r7, #10]
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	6a3a      	ldr	r2, [r7, #32]
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f002 fb4a 	bl	80082a4 <I2C_MasterRequestWrite>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d001      	beq.n	8005c1a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e08d      	b.n	8005d36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	613b      	str	r3, [r7, #16]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	695b      	ldr	r3, [r3, #20]
 8005c24:	613b      	str	r3, [r7, #16]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	613b      	str	r3, [r7, #16]
 8005c2e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005c30:	e066      	b.n	8005d00 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	6a39      	ldr	r1, [r7, #32]
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f003 f892 	bl	8008d60 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00d      	beq.n	8005c5e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c46:	2b04      	cmp	r3, #4
 8005c48:	d107      	bne.n	8005c5a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e06b      	b.n	8005d36 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c62:	781a      	ldrb	r2, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	1c5a      	adds	r2, r3, #1
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c86:	3b01      	subs	r3, #1
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	f003 0304 	and.w	r3, r3, #4
 8005c98:	2b04      	cmp	r3, #4
 8005c9a:	d11b      	bne.n	8005cd4 <HAL_I2C_Master_Transmit+0x188>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d017      	beq.n	8005cd4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca8:	781a      	ldrb	r2, [r3, #0]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb4:	1c5a      	adds	r2, r3, #1
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	6a39      	ldr	r1, [r7, #32]
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f003 f882 	bl	8008de2 <I2C_WaitOnBTFFlagUntilTimeout>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00d      	beq.n	8005d00 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce8:	2b04      	cmp	r3, #4
 8005cea:	d107      	bne.n	8005cfc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cfa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e01a      	b.n	8005d36 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d194      	bne.n	8005c32 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d30:	2300      	movs	r3, #0
 8005d32:	e000      	b.n	8005d36 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005d34:	2302      	movs	r3, #2
  }
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3718      	adds	r7, #24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	00100002 	.word	0x00100002
 8005d44:	ffff0000 	.word	0xffff0000

08005d48 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b08c      	sub	sp, #48	; 0x30
 8005d4c:	af02      	add	r7, sp, #8
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	607a      	str	r2, [r7, #4]
 8005d52:	461a      	mov	r2, r3
 8005d54:	460b      	mov	r3, r1
 8005d56:	817b      	strh	r3, [r7, #10]
 8005d58:	4613      	mov	r3, r2
 8005d5a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d5c:	f7fe f982 	bl	8004064 <HAL_GetTick>
 8005d60:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b20      	cmp	r3, #32
 8005d6c:	f040 820b 	bne.w	8006186 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	9300      	str	r3, [sp, #0]
 8005d74:	2319      	movs	r3, #25
 8005d76:	2201      	movs	r2, #1
 8005d78:	497c      	ldr	r1, [pc, #496]	; (8005f6c <HAL_I2C_Master_Receive+0x224>)
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	f002 ff1a 	bl	8008bb4 <I2C_WaitOnFlagUntilTimeout>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005d86:	2302      	movs	r3, #2
 8005d88:	e1fe      	b.n	8006188 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d101      	bne.n	8005d98 <HAL_I2C_Master_Receive+0x50>
 8005d94:	2302      	movs	r3, #2
 8005d96:	e1f7      	b.n	8006188 <HAL_I2C_Master_Receive+0x440>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d007      	beq.n	8005dbe <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f042 0201 	orr.w	r2, r2, #1
 8005dbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dcc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2222      	movs	r2, #34	; 0x22
 8005dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2210      	movs	r2, #16
 8005dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	893a      	ldrh	r2, [r7, #8]
 8005dee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	4a5c      	ldr	r2, [pc, #368]	; (8005f70 <HAL_I2C_Master_Receive+0x228>)
 8005dfe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005e00:	8979      	ldrh	r1, [r7, #10]
 8005e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f002 face 	bl	80083a8 <I2C_MasterRequestRead>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d001      	beq.n	8005e16 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e1b8      	b.n	8006188 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d113      	bne.n	8005e46 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e1e:	2300      	movs	r3, #0
 8005e20:	623b      	str	r3, [r7, #32]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	623b      	str	r3, [r7, #32]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	623b      	str	r3, [r7, #32]
 8005e32:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e42:	601a      	str	r2, [r3, #0]
 8005e44:	e18c      	b.n	8006160 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d11b      	bne.n	8005e86 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e5e:	2300      	movs	r3, #0
 8005e60:	61fb      	str	r3, [r7, #28]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	695b      	ldr	r3, [r3, #20]
 8005e68:	61fb      	str	r3, [r7, #28]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	699b      	ldr	r3, [r3, #24]
 8005e70:	61fb      	str	r3, [r7, #28]
 8005e72:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e82:	601a      	str	r2, [r3, #0]
 8005e84:	e16c      	b.n	8006160 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d11b      	bne.n	8005ec6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e9c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005eac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eae:	2300      	movs	r3, #0
 8005eb0:	61bb      	str	r3, [r7, #24]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	695b      	ldr	r3, [r3, #20]
 8005eb8:	61bb      	str	r3, [r7, #24]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	61bb      	str	r3, [r7, #24]
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	e14c      	b.n	8006160 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ed4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	617b      	str	r3, [r7, #20]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	617b      	str	r3, [r7, #20]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	617b      	str	r3, [r7, #20]
 8005eea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005eec:	e138      	b.n	8006160 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ef2:	2b03      	cmp	r3, #3
 8005ef4:	f200 80f1 	bhi.w	80060da <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d123      	bne.n	8005f48 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f002 ffdf 	bl	8008ec8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d001      	beq.n	8005f14 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e139      	b.n	8006188 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	691a      	ldr	r2, [r3, #16]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1e:	b2d2      	uxtb	r2, r2
 8005f20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	1c5a      	adds	r2, r3, #1
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f30:	3b01      	subs	r3, #1
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f46:	e10b      	b.n	8006160 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d14e      	bne.n	8005fee <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f56:	2200      	movs	r2, #0
 8005f58:	4906      	ldr	r1, [pc, #24]	; (8005f74 <HAL_I2C_Master_Receive+0x22c>)
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f002 fe2a 	bl	8008bb4 <I2C_WaitOnFlagUntilTimeout>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d008      	beq.n	8005f78 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e10e      	b.n	8006188 <HAL_I2C_Master_Receive+0x440>
 8005f6a:	bf00      	nop
 8005f6c:	00100002 	.word	0x00100002
 8005f70:	ffff0000 	.word	0xffff0000
 8005f74:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	691a      	ldr	r2, [r3, #16]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f92:	b2d2      	uxtb	r2, r2
 8005f94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9a:	1c5a      	adds	r2, r3, #1
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	691a      	ldr	r2, [r3, #16]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc4:	b2d2      	uxtb	r2, r2
 8005fc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fcc:	1c5a      	adds	r2, r3, #1
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005fec:	e0b8      	b.n	8006160 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	4966      	ldr	r1, [pc, #408]	; (8006190 <HAL_I2C_Master_Receive+0x448>)
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f002 fddb 	bl	8008bb4 <I2C_WaitOnFlagUntilTimeout>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d001      	beq.n	8006008 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e0bf      	b.n	8006188 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006016:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	691a      	ldr	r2, [r3, #16]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006022:	b2d2      	uxtb	r2, r2
 8006024:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602a:	1c5a      	adds	r2, r3, #1
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006034:	3b01      	subs	r3, #1
 8006036:	b29a      	uxth	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006040:	b29b      	uxth	r3, r3
 8006042:	3b01      	subs	r3, #1
 8006044:	b29a      	uxth	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	9300      	str	r3, [sp, #0]
 800604e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006050:	2200      	movs	r2, #0
 8006052:	494f      	ldr	r1, [pc, #316]	; (8006190 <HAL_I2C_Master_Receive+0x448>)
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f002 fdad 	bl	8008bb4 <I2C_WaitOnFlagUntilTimeout>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d001      	beq.n	8006064 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e091      	b.n	8006188 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006072:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	691a      	ldr	r2, [r3, #16]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607e:	b2d2      	uxtb	r2, r2
 8006080:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006086:	1c5a      	adds	r2, r3, #1
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006090:	3b01      	subs	r3, #1
 8006092:	b29a      	uxth	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800609c:	b29b      	uxth	r3, r3
 800609e:	3b01      	subs	r3, #1
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	691a      	ldr	r2, [r3, #16]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b0:	b2d2      	uxtb	r2, r2
 80060b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b8:	1c5a      	adds	r2, r3, #1
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060c2:	3b01      	subs	r3, #1
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	3b01      	subs	r3, #1
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80060d8:	e042      	b.n	8006160 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f002 fef2 	bl	8008ec8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d001      	beq.n	80060ee <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e04c      	b.n	8006188 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	691a      	ldr	r2, [r3, #16]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f8:	b2d2      	uxtb	r2, r2
 80060fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006100:	1c5a      	adds	r2, r3, #1
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800610a:	3b01      	subs	r3, #1
 800610c:	b29a      	uxth	r2, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006116:	b29b      	uxth	r3, r3
 8006118:	3b01      	subs	r3, #1
 800611a:	b29a      	uxth	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	f003 0304 	and.w	r3, r3, #4
 800612a:	2b04      	cmp	r3, #4
 800612c:	d118      	bne.n	8006160 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	691a      	ldr	r2, [r3, #16]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006138:	b2d2      	uxtb	r2, r2
 800613a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006140:	1c5a      	adds	r2, r3, #1
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800614a:	3b01      	subs	r3, #1
 800614c:	b29a      	uxth	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006156:	b29b      	uxth	r3, r3
 8006158:	3b01      	subs	r3, #1
 800615a:	b29a      	uxth	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006164:	2b00      	cmp	r3, #0
 8006166:	f47f aec2 	bne.w	8005eee <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2220      	movs	r2, #32
 800616e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006182:	2300      	movs	r3, #0
 8006184:	e000      	b.n	8006188 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006186:	2302      	movs	r3, #2
  }
}
 8006188:	4618      	mov	r0, r3
 800618a:	3728      	adds	r7, #40	; 0x28
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	00010004 	.word	0x00010004

08006194 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b088      	sub	sp, #32
 8006198:	af02      	add	r7, sp, #8
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	4608      	mov	r0, r1
 800619e:	4611      	mov	r1, r2
 80061a0:	461a      	mov	r2, r3
 80061a2:	4603      	mov	r3, r0
 80061a4:	817b      	strh	r3, [r7, #10]
 80061a6:	460b      	mov	r3, r1
 80061a8:	813b      	strh	r3, [r7, #8]
 80061aa:	4613      	mov	r3, r2
 80061ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80061ae:	f7fd ff59 	bl	8004064 <HAL_GetTick>
 80061b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	2b20      	cmp	r3, #32
 80061be:	f040 80d9 	bne.w	8006374 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	9300      	str	r3, [sp, #0]
 80061c6:	2319      	movs	r3, #25
 80061c8:	2201      	movs	r2, #1
 80061ca:	496d      	ldr	r1, [pc, #436]	; (8006380 <HAL_I2C_Mem_Write+0x1ec>)
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f002 fcf1 	bl	8008bb4 <I2C_WaitOnFlagUntilTimeout>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d001      	beq.n	80061dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80061d8:	2302      	movs	r3, #2
 80061da:	e0cc      	b.n	8006376 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d101      	bne.n	80061ea <HAL_I2C_Mem_Write+0x56>
 80061e6:	2302      	movs	r3, #2
 80061e8:	e0c5      	b.n	8006376 <HAL_I2C_Mem_Write+0x1e2>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0301 	and.w	r3, r3, #1
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d007      	beq.n	8006210 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f042 0201 	orr.w	r2, r2, #1
 800620e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800621e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2221      	movs	r2, #33	; 0x21
 8006224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2240      	movs	r2, #64	; 0x40
 800622c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6a3a      	ldr	r2, [r7, #32]
 800623a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006240:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006246:	b29a      	uxth	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	4a4d      	ldr	r2, [pc, #308]	; (8006384 <HAL_I2C_Mem_Write+0x1f0>)
 8006250:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006252:	88f8      	ldrh	r0, [r7, #6]
 8006254:	893a      	ldrh	r2, [r7, #8]
 8006256:	8979      	ldrh	r1, [r7, #10]
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	9301      	str	r3, [sp, #4]
 800625c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625e:	9300      	str	r3, [sp, #0]
 8006260:	4603      	mov	r3, r0
 8006262:	68f8      	ldr	r0, [r7, #12]
 8006264:	f002 f96e 	bl	8008544 <I2C_RequestMemoryWrite>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d052      	beq.n	8006314 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e081      	b.n	8006376 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006272:	697a      	ldr	r2, [r7, #20]
 8006274:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f002 fd72 	bl	8008d60 <I2C_WaitOnTXEFlagUntilTimeout>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00d      	beq.n	800629e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006286:	2b04      	cmp	r3, #4
 8006288:	d107      	bne.n	800629a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006298:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e06b      	b.n	8006376 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a2:	781a      	ldrb	r2, [r3, #0]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ae:	1c5a      	adds	r2, r3, #1
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062b8:	3b01      	subs	r3, #1
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	3b01      	subs	r3, #1
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	695b      	ldr	r3, [r3, #20]
 80062d4:	f003 0304 	and.w	r3, r3, #4
 80062d8:	2b04      	cmp	r3, #4
 80062da:	d11b      	bne.n	8006314 <HAL_I2C_Mem_Write+0x180>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d017      	beq.n	8006314 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e8:	781a      	ldrb	r2, [r3, #0]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f4:	1c5a      	adds	r2, r3, #1
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062fe:	3b01      	subs	r3, #1
 8006300:	b29a      	uxth	r2, r3
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800630a:	b29b      	uxth	r3, r3
 800630c:	3b01      	subs	r3, #1
 800630e:	b29a      	uxth	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1aa      	bne.n	8006272 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800631c:	697a      	ldr	r2, [r7, #20]
 800631e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f002 fd5e 	bl	8008de2 <I2C_WaitOnBTFFlagUntilTimeout>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00d      	beq.n	8006348 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006330:	2b04      	cmp	r3, #4
 8006332:	d107      	bne.n	8006344 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006342:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e016      	b.n	8006376 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006356:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2220      	movs	r2, #32
 800635c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006370:	2300      	movs	r3, #0
 8006372:	e000      	b.n	8006376 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006374:	2302      	movs	r3, #2
  }
}
 8006376:	4618      	mov	r0, r3
 8006378:	3718      	adds	r7, #24
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	00100002 	.word	0x00100002
 8006384:	ffff0000 	.word	0xffff0000

08006388 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b08c      	sub	sp, #48	; 0x30
 800638c:	af02      	add	r7, sp, #8
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	4608      	mov	r0, r1
 8006392:	4611      	mov	r1, r2
 8006394:	461a      	mov	r2, r3
 8006396:	4603      	mov	r3, r0
 8006398:	817b      	strh	r3, [r7, #10]
 800639a:	460b      	mov	r3, r1
 800639c:	813b      	strh	r3, [r7, #8]
 800639e:	4613      	mov	r3, r2
 80063a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80063a2:	f7fd fe5f 	bl	8004064 <HAL_GetTick>
 80063a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	2b20      	cmp	r3, #32
 80063b2:	f040 8208 	bne.w	80067c6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b8:	9300      	str	r3, [sp, #0]
 80063ba:	2319      	movs	r3, #25
 80063bc:	2201      	movs	r2, #1
 80063be:	497b      	ldr	r1, [pc, #492]	; (80065ac <HAL_I2C_Mem_Read+0x224>)
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f002 fbf7 	bl	8008bb4 <I2C_WaitOnFlagUntilTimeout>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d001      	beq.n	80063d0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80063cc:	2302      	movs	r3, #2
 80063ce:	e1fb      	b.n	80067c8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d101      	bne.n	80063de <HAL_I2C_Mem_Read+0x56>
 80063da:	2302      	movs	r3, #2
 80063dc:	e1f4      	b.n	80067c8 <HAL_I2C_Mem_Read+0x440>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0301 	and.w	r3, r3, #1
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d007      	beq.n	8006404 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f042 0201 	orr.w	r2, r2, #1
 8006402:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006412:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2222      	movs	r2, #34	; 0x22
 8006418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2240      	movs	r2, #64	; 0x40
 8006420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800642e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006434:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800643a:	b29a      	uxth	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	4a5b      	ldr	r2, [pc, #364]	; (80065b0 <HAL_I2C_Mem_Read+0x228>)
 8006444:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006446:	88f8      	ldrh	r0, [r7, #6]
 8006448:	893a      	ldrh	r2, [r7, #8]
 800644a:	8979      	ldrh	r1, [r7, #10]
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644e:	9301      	str	r3, [sp, #4]
 8006450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	4603      	mov	r3, r0
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f002 f90a 	bl	8008670 <I2C_RequestMemoryRead>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e1b0      	b.n	80067c8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800646a:	2b00      	cmp	r3, #0
 800646c:	d113      	bne.n	8006496 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800646e:	2300      	movs	r3, #0
 8006470:	623b      	str	r3, [r7, #32]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	695b      	ldr	r3, [r3, #20]
 8006478:	623b      	str	r3, [r7, #32]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	623b      	str	r3, [r7, #32]
 8006482:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006492:	601a      	str	r2, [r3, #0]
 8006494:	e184      	b.n	80067a0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800649a:	2b01      	cmp	r3, #1
 800649c:	d11b      	bne.n	80064d6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064ae:	2300      	movs	r3, #0
 80064b0:	61fb      	str	r3, [r7, #28]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	61fb      	str	r3, [r7, #28]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	61fb      	str	r3, [r7, #28]
 80064c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064d2:	601a      	str	r2, [r3, #0]
 80064d4:	e164      	b.n	80067a0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d11b      	bne.n	8006516 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064fe:	2300      	movs	r3, #0
 8006500:	61bb      	str	r3, [r7, #24]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	695b      	ldr	r3, [r3, #20]
 8006508:	61bb      	str	r3, [r7, #24]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	61bb      	str	r3, [r7, #24]
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	e144      	b.n	80067a0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006516:	2300      	movs	r3, #0
 8006518:	617b      	str	r3, [r7, #20]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	695b      	ldr	r3, [r3, #20]
 8006520:	617b      	str	r3, [r7, #20]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	617b      	str	r3, [r7, #20]
 800652a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800652c:	e138      	b.n	80067a0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006532:	2b03      	cmp	r3, #3
 8006534:	f200 80f1 	bhi.w	800671a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800653c:	2b01      	cmp	r3, #1
 800653e:	d123      	bne.n	8006588 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006542:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f002 fcbf 	bl	8008ec8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d001      	beq.n	8006554 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e139      	b.n	80067c8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	691a      	ldr	r2, [r3, #16]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655e:	b2d2      	uxtb	r2, r2
 8006560:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006566:	1c5a      	adds	r2, r3, #1
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006570:	3b01      	subs	r3, #1
 8006572:	b29a      	uxth	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800657c:	b29b      	uxth	r3, r3
 800657e:	3b01      	subs	r3, #1
 8006580:	b29a      	uxth	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006586:	e10b      	b.n	80067a0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800658c:	2b02      	cmp	r3, #2
 800658e:	d14e      	bne.n	800662e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006592:	9300      	str	r3, [sp, #0]
 8006594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006596:	2200      	movs	r2, #0
 8006598:	4906      	ldr	r1, [pc, #24]	; (80065b4 <HAL_I2C_Mem_Read+0x22c>)
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f002 fb0a 	bl	8008bb4 <I2C_WaitOnFlagUntilTimeout>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d008      	beq.n	80065b8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e10e      	b.n	80067c8 <HAL_I2C_Mem_Read+0x440>
 80065aa:	bf00      	nop
 80065ac:	00100002 	.word	0x00100002
 80065b0:	ffff0000 	.word	0xffff0000
 80065b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	691a      	ldr	r2, [r3, #16]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d2:	b2d2      	uxtb	r2, r2
 80065d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065da:	1c5a      	adds	r2, r3, #1
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065e4:	3b01      	subs	r3, #1
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	3b01      	subs	r3, #1
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	691a      	ldr	r2, [r3, #16]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006604:	b2d2      	uxtb	r2, r2
 8006606:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660c:	1c5a      	adds	r2, r3, #1
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006616:	3b01      	subs	r3, #1
 8006618:	b29a      	uxth	r2, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006622:	b29b      	uxth	r3, r3
 8006624:	3b01      	subs	r3, #1
 8006626:	b29a      	uxth	r2, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800662c:	e0b8      	b.n	80067a0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006630:	9300      	str	r3, [sp, #0]
 8006632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006634:	2200      	movs	r2, #0
 8006636:	4966      	ldr	r1, [pc, #408]	; (80067d0 <HAL_I2C_Mem_Read+0x448>)
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f002 fabb 	bl	8008bb4 <I2C_WaitOnFlagUntilTimeout>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d001      	beq.n	8006648 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e0bf      	b.n	80067c8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006656:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	691a      	ldr	r2, [r3, #16]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006662:	b2d2      	uxtb	r2, r2
 8006664:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666a:	1c5a      	adds	r2, r3, #1
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006674:	3b01      	subs	r3, #1
 8006676:	b29a      	uxth	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006680:	b29b      	uxth	r3, r3
 8006682:	3b01      	subs	r3, #1
 8006684:	b29a      	uxth	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800668a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668c:	9300      	str	r3, [sp, #0]
 800668e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006690:	2200      	movs	r2, #0
 8006692:	494f      	ldr	r1, [pc, #316]	; (80067d0 <HAL_I2C_Mem_Read+0x448>)
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f002 fa8d 	bl	8008bb4 <I2C_WaitOnFlagUntilTimeout>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d001      	beq.n	80066a4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e091      	b.n	80067c8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	691a      	ldr	r2, [r3, #16]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066be:	b2d2      	uxtb	r2, r2
 80066c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c6:	1c5a      	adds	r2, r3, #1
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066d0:	3b01      	subs	r3, #1
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066dc:	b29b      	uxth	r3, r3
 80066de:	3b01      	subs	r3, #1
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	691a      	ldr	r2, [r3, #16]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f0:	b2d2      	uxtb	r2, r2
 80066f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f8:	1c5a      	adds	r2, r3, #1
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006702:	3b01      	subs	r3, #1
 8006704:	b29a      	uxth	r2, r3
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800670e:	b29b      	uxth	r3, r3
 8006710:	3b01      	subs	r3, #1
 8006712:	b29a      	uxth	r2, r3
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006718:	e042      	b.n	80067a0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800671a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800671c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f002 fbd2 	bl	8008ec8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e04c      	b.n	80067c8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	691a      	ldr	r2, [r3, #16]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006738:	b2d2      	uxtb	r2, r2
 800673a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006740:	1c5a      	adds	r2, r3, #1
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800674a:	3b01      	subs	r3, #1
 800674c:	b29a      	uxth	r2, r3
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006756:	b29b      	uxth	r3, r3
 8006758:	3b01      	subs	r3, #1
 800675a:	b29a      	uxth	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	f003 0304 	and.w	r3, r3, #4
 800676a:	2b04      	cmp	r3, #4
 800676c:	d118      	bne.n	80067a0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	691a      	ldr	r2, [r3, #16]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006778:	b2d2      	uxtb	r2, r2
 800677a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006780:	1c5a      	adds	r2, r3, #1
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800678a:	3b01      	subs	r3, #1
 800678c:	b29a      	uxth	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006796:	b29b      	uxth	r3, r3
 8006798:	3b01      	subs	r3, #1
 800679a:	b29a      	uxth	r2, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f47f aec2 	bne.w	800652e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2220      	movs	r2, #32
 80067ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80067c2:	2300      	movs	r3, #0
 80067c4:	e000      	b.n	80067c8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80067c6:	2302      	movs	r3, #2
  }
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3728      	adds	r7, #40	; 0x28
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	00010004 	.word	0x00010004

080067d4 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b08c      	sub	sp, #48	; 0x30
 80067d8:	af02      	add	r7, sp, #8
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	4608      	mov	r0, r1
 80067de:	4611      	mov	r1, r2
 80067e0:	461a      	mov	r2, r3
 80067e2:	4603      	mov	r3, r0
 80067e4:	817b      	strh	r3, [r7, #10]
 80067e6:	460b      	mov	r3, r1
 80067e8:	813b      	strh	r3, [r7, #8]
 80067ea:	4613      	mov	r3, r2
 80067ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80067ee:	f7fd fc39 	bl	8004064 <HAL_GetTick>
 80067f2:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 80067f4:	2300      	movs	r3, #0
 80067f6:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2b20      	cmp	r3, #32
 8006802:	f040 8176 	bne.w	8006af2 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006806:	4b95      	ldr	r3, [pc, #596]	; (8006a5c <HAL_I2C_Mem_Read_DMA+0x288>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	08db      	lsrs	r3, r3, #3
 800680c:	4a94      	ldr	r2, [pc, #592]	; (8006a60 <HAL_I2C_Mem_Read_DMA+0x28c>)
 800680e:	fba2 2303 	umull	r2, r3, r2, r3
 8006812:	0a1a      	lsrs	r2, r3, #8
 8006814:	4613      	mov	r3, r2
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	4413      	add	r3, r2
 800681a:	009a      	lsls	r2, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	3b01      	subs	r3, #1
 8006824:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d116      	bne.n	800685a <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2220      	movs	r2, #32
 8006836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006846:	f043 0220 	orr.w	r2, r3, #32
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e14c      	b.n	8006af4 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	f003 0302 	and.w	r3, r3, #2
 8006864:	2b02      	cmp	r3, #2
 8006866:	d0db      	beq.n	8006820 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800686e:	2b01      	cmp	r3, #1
 8006870:	d101      	bne.n	8006876 <HAL_I2C_Mem_Read_DMA+0xa2>
 8006872:	2302      	movs	r3, #2
 8006874:	e13e      	b.n	8006af4 <HAL_I2C_Mem_Read_DMA+0x320>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0301 	and.w	r3, r3, #1
 8006888:	2b01      	cmp	r3, #1
 800688a:	d007      	beq.n	800689c <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f042 0201 	orr.w	r2, r2, #1
 800689a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2222      	movs	r2, #34	; 0x22
 80068b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2240      	movs	r2, #64	; 0x40
 80068b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80068cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	4a62      	ldr	r2, [pc, #392]	; (8006a64 <HAL_I2C_Mem_Read_DMA+0x290>)
 80068dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80068de:	897a      	ldrh	r2, [r7, #10]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80068e4:	893a      	ldrh	r2, [r7, #8]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80068ea:	88fa      	ldrh	r2, [r7, #6]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f000 80cc 	beq.w	8006a98 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006904:	2b00      	cmp	r3, #0
 8006906:	d02d      	beq.n	8006964 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690c:	4a56      	ldr	r2, [pc, #344]	; (8006a68 <HAL_I2C_Mem_Read_DMA+0x294>)
 800690e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006914:	4a55      	ldr	r2, [pc, #340]	; (8006a6c <HAL_I2C_Mem_Read_DMA+0x298>)
 8006916:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691c:	2200      	movs	r2, #0
 800691e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006924:	2200      	movs	r2, #0
 8006926:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692c:	2200      	movs	r2, #0
 800692e:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006934:	2200      	movs	r2, #0
 8006936:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	3310      	adds	r3, #16
 8006942:	4619      	mov	r1, r3
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006948:	461a      	mov	r2, r3
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800694e:	f7fe fa85 	bl	8004e5c <HAL_DMA_Start_IT>
 8006952:	4603      	mov	r3, r0
 8006954:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8006958:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800695c:	2b00      	cmp	r3, #0
 800695e:	f040 8087 	bne.w	8006a70 <HAL_I2C_Mem_Read_DMA+0x29c>
 8006962:	e013      	b.n	800698c <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2220      	movs	r2, #32
 8006968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006978:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e0b3      	b.n	8006af4 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800698c:	88f8      	ldrh	r0, [r7, #6]
 800698e:	893a      	ldrh	r2, [r7, #8]
 8006990:	8979      	ldrh	r1, [r7, #10]
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	9301      	str	r3, [sp, #4]
 8006996:	2323      	movs	r3, #35	; 0x23
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	4603      	mov	r3, r0
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f001 fe67 	bl	8008670 <I2C_RequestMemoryRead>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d023      	beq.n	80069f0 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7fe fb1d 	bl	8004fec <HAL_DMA_Abort_IT>
 80069b2:	4603      	mov	r3, r0
 80069b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069bc:	2200      	movs	r2, #0
 80069be:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069ce:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f022 0201 	bic.w	r2, r2, #1
 80069ea:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e081      	b.n	8006af4 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d108      	bne.n	8006a0a <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a06:	601a      	str	r2, [r3, #0]
 8006a08:	e007      	b.n	8006a1a <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	685a      	ldr	r2, [r3, #4]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a18:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	61bb      	str	r3, [r7, #24]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	695b      	ldr	r3, [r3, #20]
 8006a24:	61bb      	str	r3, [r7, #24]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	61bb      	str	r3, [r7, #24]
 8006a2e:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a46:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	685a      	ldr	r2, [r3, #4]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a56:	605a      	str	r2, [r3, #4]
 8006a58:	e049      	b.n	8006aee <HAL_I2C_Mem_Read_DMA+0x31a>
 8006a5a:	bf00      	nop
 8006a5c:	2000000c 	.word	0x2000000c
 8006a60:	14f8b589 	.word	0x14f8b589
 8006a64:	ffff0000 	.word	0xffff0000
 8006a68:	08008841 	.word	0x08008841
 8006a6c:	080089eb 	.word	0x080089eb
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2220      	movs	r2, #32
 8006a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a84:	f043 0210 	orr.w	r2, r3, #16
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	e02d      	b.n	8006af4 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006a98:	88f8      	ldrh	r0, [r7, #6]
 8006a9a:	893a      	ldrh	r2, [r7, #8]
 8006a9c:	8979      	ldrh	r1, [r7, #10]
 8006a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa0:	9301      	str	r3, [sp, #4]
 8006aa2:	2323      	movs	r3, #35	; 0x23
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f001 fde1 	bl	8008670 <I2C_RequestMemoryRead>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d001      	beq.n	8006ab8 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e01d      	b.n	8006af4 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ab8:	2300      	movs	r3, #0
 8006aba:	617b      	str	r3, [r7, #20]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	695b      	ldr	r3, [r3, #20]
 8006ac2:	617b      	str	r3, [r7, #20]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	617b      	str	r3, [r7, #20]
 8006acc:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006adc:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2220      	movs	r2, #32
 8006ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8006aee:	2300      	movs	r3, #0
 8006af0:	e000      	b.n	8006af4 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 8006af2:	2302      	movs	r3, #2
  }
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3728      	adds	r7, #40	; 0x28
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b08a      	sub	sp, #40	; 0x28
 8006b00:	af02      	add	r7, sp, #8
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	607a      	str	r2, [r7, #4]
 8006b06:	603b      	str	r3, [r7, #0]
 8006b08:	460b      	mov	r3, r1
 8006b0a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006b0c:	f7fd faaa 	bl	8004064 <HAL_GetTick>
 8006b10:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8006b12:	2300      	movs	r3, #0
 8006b14:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	2b20      	cmp	r3, #32
 8006b20:	f040 8111 	bne.w	8006d46 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	9300      	str	r3, [sp, #0]
 8006b28:	2319      	movs	r3, #25
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	4988      	ldr	r1, [pc, #544]	; (8006d50 <HAL_I2C_IsDeviceReady+0x254>)
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f002 f840 	bl	8008bb4 <I2C_WaitOnFlagUntilTimeout>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d001      	beq.n	8006b3e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006b3a:	2302      	movs	r3, #2
 8006b3c:	e104      	b.n	8006d48 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d101      	bne.n	8006b4c <HAL_I2C_IsDeviceReady+0x50>
 8006b48:	2302      	movs	r3, #2
 8006b4a:	e0fd      	b.n	8006d48 <HAL_I2C_IsDeviceReady+0x24c>
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0301 	and.w	r3, r3, #1
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d007      	beq.n	8006b72 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f042 0201 	orr.w	r2, r2, #1
 8006b70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b80:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2224      	movs	r2, #36	; 0x24
 8006b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	4a70      	ldr	r2, [pc, #448]	; (8006d54 <HAL_I2C_IsDeviceReady+0x258>)
 8006b94:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ba4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	9300      	str	r3, [sp, #0]
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f001 fffe 	bl	8008bb4 <I2C_WaitOnFlagUntilTimeout>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00d      	beq.n	8006bda <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bcc:	d103      	bne.n	8006bd6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bd4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e0b6      	b.n	8006d48 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006bda:	897b      	ldrh	r3, [r7, #10]
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	461a      	mov	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006be8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006bea:	f7fd fa3b 	bl	8004064 <HAL_GetTick>
 8006bee:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	f003 0302 	and.w	r3, r3, #2
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	bf0c      	ite	eq
 8006bfe:	2301      	moveq	r3, #1
 8006c00:	2300      	movne	r3, #0
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	695b      	ldr	r3, [r3, #20]
 8006c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c14:	bf0c      	ite	eq
 8006c16:	2301      	moveq	r3, #1
 8006c18:	2300      	movne	r3, #0
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006c1e:	e025      	b.n	8006c6c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006c20:	f7fd fa20 	bl	8004064 <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	683a      	ldr	r2, [r7, #0]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d302      	bcc.n	8006c36 <HAL_I2C_IsDeviceReady+0x13a>
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d103      	bne.n	8006c3e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	22a0      	movs	r2, #160	; 0xa0
 8006c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	695b      	ldr	r3, [r3, #20]
 8006c44:	f003 0302 	and.w	r3, r3, #2
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	bf0c      	ite	eq
 8006c4c:	2301      	moveq	r3, #1
 8006c4e:	2300      	movne	r3, #0
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	695b      	ldr	r3, [r3, #20]
 8006c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c62:	bf0c      	ite	eq
 8006c64:	2301      	moveq	r3, #1
 8006c66:	2300      	movne	r3, #0
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2ba0      	cmp	r3, #160	; 0xa0
 8006c76:	d005      	beq.n	8006c84 <HAL_I2C_IsDeviceReady+0x188>
 8006c78:	7dfb      	ldrb	r3, [r7, #23]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d102      	bne.n	8006c84 <HAL_I2C_IsDeviceReady+0x188>
 8006c7e:	7dbb      	ldrb	r3, [r7, #22]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d0cd      	beq.n	8006c20 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2220      	movs	r2, #32
 8006c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	695b      	ldr	r3, [r3, #20]
 8006c92:	f003 0302 	and.w	r3, r3, #2
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d129      	bne.n	8006cee <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ca8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006caa:	2300      	movs	r3, #0
 8006cac:	613b      	str	r3, [r7, #16]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	695b      	ldr	r3, [r3, #20]
 8006cb4:	613b      	str	r3, [r7, #16]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	613b      	str	r3, [r7, #16]
 8006cbe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	9300      	str	r3, [sp, #0]
 8006cc4:	2319      	movs	r3, #25
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	4921      	ldr	r1, [pc, #132]	; (8006d50 <HAL_I2C_IsDeviceReady+0x254>)
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	f001 ff72 	bl	8008bb4 <I2C_WaitOnFlagUntilTimeout>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d001      	beq.n	8006cda <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e036      	b.n	8006d48 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2220      	movs	r2, #32
 8006cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8006cea:	2300      	movs	r3, #0
 8006cec:	e02c      	b.n	8006d48 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cfc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d06:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	2319      	movs	r3, #25
 8006d0e:	2201      	movs	r2, #1
 8006d10:	490f      	ldr	r1, [pc, #60]	; (8006d50 <HAL_I2C_IsDeviceReady+0x254>)
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f001 ff4e 	bl	8008bb4 <I2C_WaitOnFlagUntilTimeout>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d001      	beq.n	8006d22 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e012      	b.n	8006d48 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	3301      	adds	r3, #1
 8006d26:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006d28:	69ba      	ldr	r2, [r7, #24]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	f4ff af32 	bcc.w	8006b96 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2220      	movs	r2, #32
 8006d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e000      	b.n	8006d48 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006d46:	2302      	movs	r3, #2
  }
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3720      	adds	r7, #32
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	00100002 	.word	0x00100002
 8006d54:	ffff0000 	.word	0xffff0000

08006d58 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b088      	sub	sp, #32
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006d60:	2300      	movs	r3, #0
 8006d62:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d70:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d78:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d80:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006d82:	7bfb      	ldrb	r3, [r7, #15]
 8006d84:	2b10      	cmp	r3, #16
 8006d86:	d003      	beq.n	8006d90 <HAL_I2C_EV_IRQHandler+0x38>
 8006d88:	7bfb      	ldrb	r3, [r7, #15]
 8006d8a:	2b40      	cmp	r3, #64	; 0x40
 8006d8c:	f040 80b1 	bne.w	8006ef2 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	f003 0301 	and.w	r3, r3, #1
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d10d      	bne.n	8006dc6 <HAL_I2C_EV_IRQHandler+0x6e>
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006db0:	d003      	beq.n	8006dba <HAL_I2C_EV_IRQHandler+0x62>
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006db8:	d101      	bne.n	8006dbe <HAL_I2C_EV_IRQHandler+0x66>
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e000      	b.n	8006dc0 <HAL_I2C_EV_IRQHandler+0x68>
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	f000 8114 	beq.w	8006fee <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	f003 0301 	and.w	r3, r3, #1
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00b      	beq.n	8006de8 <HAL_I2C_EV_IRQHandler+0x90>
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d006      	beq.n	8006de8 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f002 f8f9 	bl	8008fd2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 fcb5 	bl	8007750 <I2C_Master_SB>
 8006de6:	e083      	b.n	8006ef0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	f003 0308 	and.w	r3, r3, #8
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d008      	beq.n	8006e04 <HAL_I2C_EV_IRQHandler+0xac>
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d003      	beq.n	8006e04 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 fd2d 	bl	800785c <I2C_Master_ADD10>
 8006e02:	e075      	b.n	8006ef0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	f003 0302 	and.w	r3, r3, #2
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d008      	beq.n	8006e20 <HAL_I2C_EV_IRQHandler+0xc8>
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d003      	beq.n	8006e20 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 fd49 	bl	80078b0 <I2C_Master_ADDR>
 8006e1e:	e067      	b.n	8006ef0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	f003 0304 	and.w	r3, r3, #4
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d036      	beq.n	8006e98 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e38:	f000 80db 	beq.w	8006ff2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00d      	beq.n	8006e62 <HAL_I2C_EV_IRQHandler+0x10a>
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d008      	beq.n	8006e62 <HAL_I2C_EV_IRQHandler+0x10a>
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	f003 0304 	and.w	r3, r3, #4
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d103      	bne.n	8006e62 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f92d 	bl	80070ba <I2C_MasterTransmit_TXE>
 8006e60:	e046      	b.n	8006ef0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	f003 0304 	and.w	r3, r3, #4
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f000 80c2 	beq.w	8006ff2 <HAL_I2C_EV_IRQHandler+0x29a>
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f000 80bc 	beq.w	8006ff2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006e7a:	7bbb      	ldrb	r3, [r7, #14]
 8006e7c:	2b21      	cmp	r3, #33	; 0x21
 8006e7e:	d103      	bne.n	8006e88 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 f9b6 	bl	80071f2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e86:	e0b4      	b.n	8006ff2 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006e88:	7bfb      	ldrb	r3, [r7, #15]
 8006e8a:	2b40      	cmp	r3, #64	; 0x40
 8006e8c:	f040 80b1 	bne.w	8006ff2 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 fa24 	bl	80072de <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e96:	e0ac      	b.n	8006ff2 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ea2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ea6:	f000 80a4 	beq.w	8006ff2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00d      	beq.n	8006ed0 <HAL_I2C_EV_IRQHandler+0x178>
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d008      	beq.n	8006ed0 <HAL_I2C_EV_IRQHandler+0x178>
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	f003 0304 	and.w	r3, r3, #4
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d103      	bne.n	8006ed0 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 fa9c 	bl	8007406 <I2C_MasterReceive_RXNE>
 8006ece:	e00f      	b.n	8006ef0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	f003 0304 	and.w	r3, r3, #4
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	f000 808b 	beq.w	8006ff2 <HAL_I2C_EV_IRQHandler+0x29a>
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	f000 8085 	beq.w	8006ff2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 fb47 	bl	800757c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006eee:	e080      	b.n	8006ff2 <HAL_I2C_EV_IRQHandler+0x29a>
 8006ef0:	e07f      	b.n	8006ff2 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d004      	beq.n	8006f04 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	695b      	ldr	r3, [r3, #20]
 8006f00:	61fb      	str	r3, [r7, #28]
 8006f02:	e007      	b.n	8006f14 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	695b      	ldr	r3, [r3, #20]
 8006f12:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	f003 0302 	and.w	r3, r3, #2
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d011      	beq.n	8006f42 <HAL_I2C_EV_IRQHandler+0x1ea>
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00c      	beq.n	8006f42 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d003      	beq.n	8006f38 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006f38:	69b9      	ldr	r1, [r7, #24]
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 ff07 	bl	8007d4e <I2C_Slave_ADDR>
 8006f40:	e05a      	b.n	8006ff8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	f003 0310 	and.w	r3, r3, #16
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d008      	beq.n	8006f5e <HAL_I2C_EV_IRQHandler+0x206>
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d003      	beq.n	8006f5e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 ff42 	bl	8007de0 <I2C_Slave_STOPF>
 8006f5c:	e04c      	b.n	8006ff8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006f5e:	7bbb      	ldrb	r3, [r7, #14]
 8006f60:	2b21      	cmp	r3, #33	; 0x21
 8006f62:	d002      	beq.n	8006f6a <HAL_I2C_EV_IRQHandler+0x212>
 8006f64:	7bbb      	ldrb	r3, [r7, #14]
 8006f66:	2b29      	cmp	r3, #41	; 0x29
 8006f68:	d120      	bne.n	8006fac <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00d      	beq.n	8006f90 <HAL_I2C_EV_IRQHandler+0x238>
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d008      	beq.n	8006f90 <HAL_I2C_EV_IRQHandler+0x238>
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	f003 0304 	and.w	r3, r3, #4
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d103      	bne.n	8006f90 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 fe22 	bl	8007bd2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006f8e:	e032      	b.n	8006ff6 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	f003 0304 	and.w	r3, r3, #4
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d02d      	beq.n	8006ff6 <HAL_I2C_EV_IRQHandler+0x29e>
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d028      	beq.n	8006ff6 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fe51 	bl	8007c4c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006faa:	e024      	b.n	8006ff6 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00d      	beq.n	8006fd2 <HAL_I2C_EV_IRQHandler+0x27a>
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d008      	beq.n	8006fd2 <HAL_I2C_EV_IRQHandler+0x27a>
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	f003 0304 	and.w	r3, r3, #4
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d103      	bne.n	8006fd2 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 fe5f 	bl	8007c8e <I2C_SlaveReceive_RXNE>
 8006fd0:	e012      	b.n	8006ff8 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	f003 0304 	and.w	r3, r3, #4
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00d      	beq.n	8006ff8 <HAL_I2C_EV_IRQHandler+0x2a0>
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d008      	beq.n	8006ff8 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fe8f 	bl	8007d0a <I2C_SlaveReceive_BTF>
 8006fec:	e004      	b.n	8006ff8 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8006fee:	bf00      	nop
 8006ff0:	e002      	b.n	8006ff8 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ff2:	bf00      	nop
 8006ff4:	e000      	b.n	8006ff8 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006ff6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006ff8:	3720      	adds	r7, #32
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ffe:	b480      	push	{r7}
 8007000:	b083      	sub	sp, #12
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007006:	bf00      	nop
 8007008:	370c      	adds	r7, #12
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr

08007012 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007012:	b480      	push	{r7}
 8007014:	b083      	sub	sp, #12
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800701a:	bf00      	nop
 800701c:	370c      	adds	r7, #12
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr

08007026 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007026:	b480      	push	{r7}
 8007028:	b083      	sub	sp, #12
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800702e:	bf00      	nop
 8007030:	370c      	adds	r7, #12
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr

0800703a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800703a:	b480      	push	{r7}
 800703c:	b083      	sub	sp, #12
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007042:	bf00      	nop
 8007044:	370c      	adds	r7, #12
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800704e:	b480      	push	{r7}
 8007050:	b083      	sub	sp, #12
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
 8007056:	460b      	mov	r3, r1
 8007058:	70fb      	strb	r3, [r7, #3]
 800705a:	4613      	mov	r3, r2
 800705c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800705e:	bf00      	nop
 8007060:	370c      	adds	r7, #12
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr

0800706a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800706a:	b480      	push	{r7}
 800706c:	b083      	sub	sp, #12
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007072:	bf00      	nop
 8007074:	370c      	adds	r7, #12
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr

0800707e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800707e:	b480      	push	{r7}
 8007080:	b083      	sub	sp, #12
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007086:	bf00      	nop
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007092:	b480      	push	{r7}
 8007094:	b083      	sub	sp, #12
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800709a:	bf00      	nop
 800709c:	370c      	adds	r7, #12
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr

080070a6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80070a6:	b480      	push	{r7}
 80070a8:	b083      	sub	sp, #12
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80070ae:	bf00      	nop
 80070b0:	370c      	adds	r7, #12
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr

080070ba <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b084      	sub	sp, #16
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070c8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070d0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d150      	bne.n	8007182 <I2C_MasterTransmit_TXE+0xc8>
 80070e0:	7bfb      	ldrb	r3, [r7, #15]
 80070e2:	2b21      	cmp	r3, #33	; 0x21
 80070e4:	d14d      	bne.n	8007182 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	2b08      	cmp	r3, #8
 80070ea:	d01d      	beq.n	8007128 <I2C_MasterTransmit_TXE+0x6e>
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	2b20      	cmp	r3, #32
 80070f0:	d01a      	beq.n	8007128 <I2C_MasterTransmit_TXE+0x6e>
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80070f8:	d016      	beq.n	8007128 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	685a      	ldr	r2, [r3, #4]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007108:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2211      	movs	r2, #17
 800710e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2220      	movs	r2, #32
 800711c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f7ff ff6c 	bl	8006ffe <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007126:	e060      	b.n	80071ea <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	685a      	ldr	r2, [r3, #4]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007136:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007146:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2220      	movs	r2, #32
 8007152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800715c:	b2db      	uxtb	r3, r3
 800715e:	2b40      	cmp	r3, #64	; 0x40
 8007160:	d107      	bne.n	8007172 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f7ff ff87 	bl	800707e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007170:	e03b      	b.n	80071ea <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f7ff ff3f 	bl	8006ffe <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007180:	e033      	b.n	80071ea <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007182:	7bfb      	ldrb	r3, [r7, #15]
 8007184:	2b21      	cmp	r3, #33	; 0x21
 8007186:	d005      	beq.n	8007194 <I2C_MasterTransmit_TXE+0xda>
 8007188:	7bbb      	ldrb	r3, [r7, #14]
 800718a:	2b40      	cmp	r3, #64	; 0x40
 800718c:	d12d      	bne.n	80071ea <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800718e:	7bfb      	ldrb	r3, [r7, #15]
 8007190:	2b22      	cmp	r3, #34	; 0x22
 8007192:	d12a      	bne.n	80071ea <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007198:	b29b      	uxth	r3, r3
 800719a:	2b00      	cmp	r3, #0
 800719c:	d108      	bne.n	80071b0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	685a      	ldr	r2, [r3, #4]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071ac:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80071ae:	e01c      	b.n	80071ea <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	2b40      	cmp	r3, #64	; 0x40
 80071ba:	d103      	bne.n	80071c4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 f88e 	bl	80072de <I2C_MemoryTransmit_TXE_BTF>
}
 80071c2:	e012      	b.n	80071ea <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c8:	781a      	ldrb	r2, [r3, #0]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d4:	1c5a      	adds	r2, r3, #1
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071de:	b29b      	uxth	r3, r3
 80071e0:	3b01      	subs	r3, #1
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80071e8:	e7ff      	b.n	80071ea <I2C_MasterTransmit_TXE+0x130>
 80071ea:	bf00      	nop
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}

080071f2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b084      	sub	sp, #16
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fe:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b21      	cmp	r3, #33	; 0x21
 800720a:	d164      	bne.n	80072d6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007210:	b29b      	uxth	r3, r3
 8007212:	2b00      	cmp	r3, #0
 8007214:	d012      	beq.n	800723c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721a:	781a      	ldrb	r2, [r3, #0]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007226:	1c5a      	adds	r2, r3, #1
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007230:	b29b      	uxth	r3, r3
 8007232:	3b01      	subs	r3, #1
 8007234:	b29a      	uxth	r2, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800723a:	e04c      	b.n	80072d6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2b08      	cmp	r3, #8
 8007240:	d01d      	beq.n	800727e <I2C_MasterTransmit_BTF+0x8c>
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2b20      	cmp	r3, #32
 8007246:	d01a      	beq.n	800727e <I2C_MasterTransmit_BTF+0x8c>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800724e:	d016      	beq.n	800727e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	685a      	ldr	r2, [r3, #4]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800725e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2211      	movs	r2, #17
 8007264:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2220      	movs	r2, #32
 8007272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f7ff fec1 	bl	8006ffe <HAL_I2C_MasterTxCpltCallback>
}
 800727c:	e02b      	b.n	80072d6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800728c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800729c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2220      	movs	r2, #32
 80072a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	2b40      	cmp	r3, #64	; 0x40
 80072b6:	d107      	bne.n	80072c8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f7ff fedc 	bl	800707e <HAL_I2C_MemTxCpltCallback>
}
 80072c6:	e006      	b.n	80072d6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f7ff fe94 	bl	8006ffe <HAL_I2C_MasterTxCpltCallback>
}
 80072d6:	bf00      	nop
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80072de:	b580      	push	{r7, lr}
 80072e0:	b084      	sub	sp, #16
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072ec:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d11d      	bne.n	8007332 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d10b      	bne.n	8007316 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007302:	b2da      	uxtb	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800730e:	1c9a      	adds	r2, r3, #2
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007314:	e073      	b.n	80073fe <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800731a:	b29b      	uxth	r3, r3
 800731c:	121b      	asrs	r3, r3, #8
 800731e:	b2da      	uxtb	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800732a:	1c5a      	adds	r2, r3, #1
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007330:	e065      	b.n	80073fe <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007336:	2b01      	cmp	r3, #1
 8007338:	d10b      	bne.n	8007352 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800733e:	b2da      	uxtb	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800734a:	1c5a      	adds	r2, r3, #1
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007350:	e055      	b.n	80073fe <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007356:	2b02      	cmp	r3, #2
 8007358:	d151      	bne.n	80073fe <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800735a:	7bfb      	ldrb	r3, [r7, #15]
 800735c:	2b22      	cmp	r3, #34	; 0x22
 800735e:	d10d      	bne.n	800737c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800736e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007374:	1c5a      	adds	r2, r3, #1
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	651a      	str	r2, [r3, #80]	; 0x50
}
 800737a:	e040      	b.n	80073fe <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007380:	b29b      	uxth	r3, r3
 8007382:	2b00      	cmp	r3, #0
 8007384:	d015      	beq.n	80073b2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007386:	7bfb      	ldrb	r3, [r7, #15]
 8007388:	2b21      	cmp	r3, #33	; 0x21
 800738a:	d112      	bne.n	80073b2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007390:	781a      	ldrb	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739c:	1c5a      	adds	r2, r3, #1
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	3b01      	subs	r3, #1
 80073aa:	b29a      	uxth	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80073b0:	e025      	b.n	80073fe <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d120      	bne.n	80073fe <I2C_MemoryTransmit_TXE_BTF+0x120>
 80073bc:	7bfb      	ldrb	r3, [r7, #15]
 80073be:	2b21      	cmp	r3, #33	; 0x21
 80073c0:	d11d      	bne.n	80073fe <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	685a      	ldr	r2, [r3, #4]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80073d0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073e0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2220      	movs	r2, #32
 80073ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f7ff fe40 	bl	800707e <HAL_I2C_MemTxCpltCallback>
}
 80073fe:	bf00      	nop
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b084      	sub	sp, #16
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007414:	b2db      	uxtb	r3, r3
 8007416:	2b22      	cmp	r3, #34	; 0x22
 8007418:	f040 80ac 	bne.w	8007574 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007420:	b29b      	uxth	r3, r3
 8007422:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2b03      	cmp	r3, #3
 8007428:	d921      	bls.n	800746e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	691a      	ldr	r2, [r3, #16]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007434:	b2d2      	uxtb	r2, r2
 8007436:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743c:	1c5a      	adds	r2, r3, #1
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007446:	b29b      	uxth	r3, r3
 8007448:	3b01      	subs	r3, #1
 800744a:	b29a      	uxth	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007454:	b29b      	uxth	r3, r3
 8007456:	2b03      	cmp	r3, #3
 8007458:	f040 808c 	bne.w	8007574 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	685a      	ldr	r2, [r3, #4]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800746a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800746c:	e082      	b.n	8007574 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007472:	2b02      	cmp	r3, #2
 8007474:	d075      	beq.n	8007562 <I2C_MasterReceive_RXNE+0x15c>
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d002      	beq.n	8007482 <I2C_MasterReceive_RXNE+0x7c>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d16f      	bne.n	8007562 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f001 fcee 	bl	8008e64 <I2C_WaitOnSTOPRequestThroughIT>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d142      	bne.n	8007514 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800749c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	685a      	ldr	r2, [r3, #4]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80074ac:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	691a      	ldr	r2, [r3, #16]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b8:	b2d2      	uxtb	r2, r2
 80074ba:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c0:	1c5a      	adds	r2, r3, #1
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	3b01      	subs	r3, #1
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2220      	movs	r2, #32
 80074d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	2b40      	cmp	r3, #64	; 0x40
 80074e6:	d10a      	bne.n	80074fe <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f7fa ffa4 	bl	8002444 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80074fc:	e03a      	b.n	8007574 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2212      	movs	r2, #18
 800750a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7ff fd80 	bl	8007012 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007512:	e02f      	b.n	8007574 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	685a      	ldr	r2, [r3, #4]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007522:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	691a      	ldr	r2, [r3, #16]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752e:	b2d2      	uxtb	r2, r2
 8007530:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007536:	1c5a      	adds	r2, r3, #1
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007540:	b29b      	uxth	r3, r3
 8007542:	3b01      	subs	r3, #1
 8007544:	b29a      	uxth	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2220      	movs	r2, #32
 800754e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f7ff fd99 	bl	8007092 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007560:	e008      	b.n	8007574 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	685a      	ldr	r2, [r3, #4]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007570:	605a      	str	r2, [r3, #4]
}
 8007572:	e7ff      	b.n	8007574 <I2C_MasterReceive_RXNE+0x16e>
 8007574:	bf00      	nop
 8007576:	3710      	adds	r7, #16
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007588:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800758e:	b29b      	uxth	r3, r3
 8007590:	2b04      	cmp	r3, #4
 8007592:	d11b      	bne.n	80075cc <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	685a      	ldr	r2, [r3, #4]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075a2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	691a      	ldr	r2, [r3, #16]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ae:	b2d2      	uxtb	r2, r2
 80075b0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b6:	1c5a      	adds	r2, r3, #1
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	3b01      	subs	r3, #1
 80075c4:	b29a      	uxth	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80075ca:	e0bd      	b.n	8007748 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	2b03      	cmp	r3, #3
 80075d4:	d129      	bne.n	800762a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	685a      	ldr	r2, [r3, #4]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075e4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2b04      	cmp	r3, #4
 80075ea:	d00a      	beq.n	8007602 <I2C_MasterReceive_BTF+0x86>
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d007      	beq.n	8007602 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007600:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	691a      	ldr	r2, [r3, #16]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760c:	b2d2      	uxtb	r2, r2
 800760e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007614:	1c5a      	adds	r2, r3, #1
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800761e:	b29b      	uxth	r3, r3
 8007620:	3b01      	subs	r3, #1
 8007622:	b29a      	uxth	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007628:	e08e      	b.n	8007748 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800762e:	b29b      	uxth	r3, r3
 8007630:	2b02      	cmp	r3, #2
 8007632:	d176      	bne.n	8007722 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2b01      	cmp	r3, #1
 8007638:	d002      	beq.n	8007640 <I2C_MasterReceive_BTF+0xc4>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2b10      	cmp	r3, #16
 800763e:	d108      	bne.n	8007652 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800764e:	601a      	str	r2, [r3, #0]
 8007650:	e019      	b.n	8007686 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2b04      	cmp	r3, #4
 8007656:	d002      	beq.n	800765e <I2C_MasterReceive_BTF+0xe2>
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2b02      	cmp	r3, #2
 800765c:	d108      	bne.n	8007670 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800766c:	601a      	str	r2, [r3, #0]
 800766e:	e00a      	b.n	8007686 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2b10      	cmp	r3, #16
 8007674:	d007      	beq.n	8007686 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007684:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	691a      	ldr	r2, [r3, #16]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007690:	b2d2      	uxtb	r2, r2
 8007692:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007698:	1c5a      	adds	r2, r3, #1
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	3b01      	subs	r3, #1
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	691a      	ldr	r2, [r3, #16]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b6:	b2d2      	uxtb	r2, r2
 80076b8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076be:	1c5a      	adds	r2, r3, #1
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	3b01      	subs	r3, #1
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	685a      	ldr	r2, [r3, #4]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80076e0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2220      	movs	r2, #32
 80076e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	2b40      	cmp	r3, #64	; 0x40
 80076f4:	d10a      	bne.n	800770c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f7fa fe9d 	bl	8002444 <HAL_I2C_MemRxCpltCallback>
}
 800770a:	e01d      	b.n	8007748 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2212      	movs	r2, #18
 8007718:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f7ff fc79 	bl	8007012 <HAL_I2C_MasterRxCpltCallback>
}
 8007720:	e012      	b.n	8007748 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	691a      	ldr	r2, [r3, #16]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772c:	b2d2      	uxtb	r2, r2
 800772e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007734:	1c5a      	adds	r2, r3, #1
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800773e:	b29b      	uxth	r3, r3
 8007740:	3b01      	subs	r3, #1
 8007742:	b29a      	uxth	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007748:	bf00      	nop
 800774a:	3710      	adds	r7, #16
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800775e:	b2db      	uxtb	r3, r3
 8007760:	2b40      	cmp	r3, #64	; 0x40
 8007762:	d117      	bne.n	8007794 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007768:	2b00      	cmp	r3, #0
 800776a:	d109      	bne.n	8007780 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007770:	b2db      	uxtb	r3, r3
 8007772:	461a      	mov	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800777c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800777e:	e067      	b.n	8007850 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007784:	b2db      	uxtb	r3, r3
 8007786:	f043 0301 	orr.w	r3, r3, #1
 800778a:	b2da      	uxtb	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	611a      	str	r2, [r3, #16]
}
 8007792:	e05d      	b.n	8007850 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800779c:	d133      	bne.n	8007806 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	2b21      	cmp	r3, #33	; 0x21
 80077a8:	d109      	bne.n	80077be <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	461a      	mov	r2, r3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80077ba:	611a      	str	r2, [r3, #16]
 80077bc:	e008      	b.n	80077d0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	f043 0301 	orr.w	r3, r3, #1
 80077c8:	b2da      	uxtb	r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d004      	beq.n	80077e2 <I2C_Master_SB+0x92>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d108      	bne.n	80077f4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d032      	beq.n	8007850 <I2C_Master_SB+0x100>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d02d      	beq.n	8007850 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	685a      	ldr	r2, [r3, #4]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007802:	605a      	str	r2, [r3, #4]
}
 8007804:	e024      	b.n	8007850 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800780a:	2b00      	cmp	r3, #0
 800780c:	d10e      	bne.n	800782c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007812:	b29b      	uxth	r3, r3
 8007814:	11db      	asrs	r3, r3, #7
 8007816:	b2db      	uxtb	r3, r3
 8007818:	f003 0306 	and.w	r3, r3, #6
 800781c:	b2db      	uxtb	r3, r3
 800781e:	f063 030f 	orn	r3, r3, #15
 8007822:	b2da      	uxtb	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	611a      	str	r2, [r3, #16]
}
 800782a:	e011      	b.n	8007850 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007830:	2b01      	cmp	r3, #1
 8007832:	d10d      	bne.n	8007850 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007838:	b29b      	uxth	r3, r3
 800783a:	11db      	asrs	r3, r3, #7
 800783c:	b2db      	uxtb	r3, r3
 800783e:	f003 0306 	and.w	r3, r3, #6
 8007842:	b2db      	uxtb	r3, r3
 8007844:	f063 030e 	orn	r3, r3, #14
 8007848:	b2da      	uxtb	r2, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	611a      	str	r2, [r3, #16]
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007868:	b2da      	uxtb	r2, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007874:	2b00      	cmp	r3, #0
 8007876:	d004      	beq.n	8007882 <I2C_Master_ADD10+0x26>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800787c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800787e:	2b00      	cmp	r3, #0
 8007880:	d108      	bne.n	8007894 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00c      	beq.n	80078a4 <I2C_Master_ADD10+0x48>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800788e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007890:	2b00      	cmp	r3, #0
 8007892:	d007      	beq.n	80078a4 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	685a      	ldr	r2, [r3, #4]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078a2:	605a      	str	r2, [r3, #4]
  }
}
 80078a4:	bf00      	nop
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b091      	sub	sp, #68	; 0x44
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078cc:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	2b22      	cmp	r3, #34	; 0x22
 80078d8:	f040 8169 	bne.w	8007bae <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d10f      	bne.n	8007904 <I2C_Master_ADDR+0x54>
 80078e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80078e8:	2b40      	cmp	r3, #64	; 0x40
 80078ea:	d10b      	bne.n	8007904 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078ec:	2300      	movs	r3, #0
 80078ee:	633b      	str	r3, [r7, #48]	; 0x30
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	633b      	str	r3, [r7, #48]	; 0x30
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	699b      	ldr	r3, [r3, #24]
 80078fe:	633b      	str	r3, [r7, #48]	; 0x30
 8007900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007902:	e160      	b.n	8007bc6 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007908:	2b00      	cmp	r3, #0
 800790a:	d11d      	bne.n	8007948 <I2C_Master_ADDR+0x98>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	691b      	ldr	r3, [r3, #16]
 8007910:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007914:	d118      	bne.n	8007948 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007916:	2300      	movs	r3, #0
 8007918:	62fb      	str	r3, [r7, #44]	; 0x2c
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	695b      	ldr	r3, [r3, #20]
 8007920:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	699b      	ldr	r3, [r3, #24]
 8007928:	62fb      	str	r3, [r7, #44]	; 0x2c
 800792a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800793a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007940:	1c5a      	adds	r2, r3, #1
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	651a      	str	r2, [r3, #80]	; 0x50
 8007946:	e13e      	b.n	8007bc6 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800794c:	b29b      	uxth	r3, r3
 800794e:	2b00      	cmp	r3, #0
 8007950:	d113      	bne.n	800797a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007952:	2300      	movs	r3, #0
 8007954:	62bb      	str	r3, [r7, #40]	; 0x28
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	695b      	ldr	r3, [r3, #20]
 800795c:	62bb      	str	r3, [r7, #40]	; 0x28
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	699b      	ldr	r3, [r3, #24]
 8007964:	62bb      	str	r3, [r7, #40]	; 0x28
 8007966:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007976:	601a      	str	r2, [r3, #0]
 8007978:	e115      	b.n	8007ba6 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800797e:	b29b      	uxth	r3, r3
 8007980:	2b01      	cmp	r3, #1
 8007982:	f040 808a 	bne.w	8007a9a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007988:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800798c:	d137      	bne.n	80079fe <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800799c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079ac:	d113      	bne.n	80079d6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079bc:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079be:	2300      	movs	r3, #0
 80079c0:	627b      	str	r3, [r7, #36]	; 0x24
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	695b      	ldr	r3, [r3, #20]
 80079c8:	627b      	str	r3, [r7, #36]	; 0x24
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	699b      	ldr	r3, [r3, #24]
 80079d0:	627b      	str	r3, [r7, #36]	; 0x24
 80079d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d4:	e0e7      	b.n	8007ba6 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079d6:	2300      	movs	r3, #0
 80079d8:	623b      	str	r3, [r7, #32]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	695b      	ldr	r3, [r3, #20]
 80079e0:	623b      	str	r3, [r7, #32]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	699b      	ldr	r3, [r3, #24]
 80079e8:	623b      	str	r3, [r7, #32]
 80079ea:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079fa:	601a      	str	r2, [r3, #0]
 80079fc:	e0d3      	b.n	8007ba6 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80079fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a00:	2b08      	cmp	r3, #8
 8007a02:	d02e      	beq.n	8007a62 <I2C_Master_ADDR+0x1b2>
 8007a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a06:	2b20      	cmp	r3, #32
 8007a08:	d02b      	beq.n	8007a62 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a0c:	2b12      	cmp	r3, #18
 8007a0e:	d102      	bne.n	8007a16 <I2C_Master_ADDR+0x166>
 8007a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d125      	bne.n	8007a62 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a18:	2b04      	cmp	r3, #4
 8007a1a:	d00e      	beq.n	8007a3a <I2C_Master_ADDR+0x18a>
 8007a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1e:	2b02      	cmp	r3, #2
 8007a20:	d00b      	beq.n	8007a3a <I2C_Master_ADDR+0x18a>
 8007a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a24:	2b10      	cmp	r3, #16
 8007a26:	d008      	beq.n	8007a3a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a36:	601a      	str	r2, [r3, #0]
 8007a38:	e007      	b.n	8007a4a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a48:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	61fb      	str	r3, [r7, #28]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	695b      	ldr	r3, [r3, #20]
 8007a54:	61fb      	str	r3, [r7, #28]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	61fb      	str	r3, [r7, #28]
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	e0a1      	b.n	8007ba6 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a70:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a72:	2300      	movs	r3, #0
 8007a74:	61bb      	str	r3, [r7, #24]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	695b      	ldr	r3, [r3, #20]
 8007a7c:	61bb      	str	r3, [r7, #24]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	61bb      	str	r3, [r7, #24]
 8007a86:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a96:	601a      	str	r2, [r3, #0]
 8007a98:	e085      	b.n	8007ba6 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	2b02      	cmp	r3, #2
 8007aa2:	d14d      	bne.n	8007b40 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa6:	2b04      	cmp	r3, #4
 8007aa8:	d016      	beq.n	8007ad8 <I2C_Master_ADDR+0x228>
 8007aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d013      	beq.n	8007ad8 <I2C_Master_ADDR+0x228>
 8007ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab2:	2b10      	cmp	r3, #16
 8007ab4:	d010      	beq.n	8007ad8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ac4:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ad4:	601a      	str	r2, [r3, #0]
 8007ad6:	e007      	b.n	8007ae8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ae6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007af2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007af6:	d117      	bne.n	8007b28 <I2C_Master_ADDR+0x278>
 8007af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007afe:	d00b      	beq.n	8007b18 <I2C_Master_ADDR+0x268>
 8007b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d008      	beq.n	8007b18 <I2C_Master_ADDR+0x268>
 8007b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b08:	2b08      	cmp	r3, #8
 8007b0a:	d005      	beq.n	8007b18 <I2C_Master_ADDR+0x268>
 8007b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0e:	2b10      	cmp	r3, #16
 8007b10:	d002      	beq.n	8007b18 <I2C_Master_ADDR+0x268>
 8007b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b14:	2b20      	cmp	r3, #32
 8007b16:	d107      	bne.n	8007b28 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	685a      	ldr	r2, [r3, #4]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b26:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b28:	2300      	movs	r3, #0
 8007b2a:	617b      	str	r3, [r7, #20]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	617b      	str	r3, [r7, #20]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	617b      	str	r3, [r7, #20]
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	e032      	b.n	8007ba6 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b4e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b5e:	d117      	bne.n	8007b90 <I2C_Master_ADDR+0x2e0>
 8007b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b62:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b66:	d00b      	beq.n	8007b80 <I2C_Master_ADDR+0x2d0>
 8007b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d008      	beq.n	8007b80 <I2C_Master_ADDR+0x2d0>
 8007b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b70:	2b08      	cmp	r3, #8
 8007b72:	d005      	beq.n	8007b80 <I2C_Master_ADDR+0x2d0>
 8007b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b76:	2b10      	cmp	r3, #16
 8007b78:	d002      	beq.n	8007b80 <I2C_Master_ADDR+0x2d0>
 8007b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b7c:	2b20      	cmp	r3, #32
 8007b7e:	d107      	bne.n	8007b90 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	685a      	ldr	r2, [r3, #4]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b8e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b90:	2300      	movs	r3, #0
 8007b92:	613b      	str	r3, [r7, #16]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	695b      	ldr	r3, [r3, #20]
 8007b9a:	613b      	str	r3, [r7, #16]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	699b      	ldr	r3, [r3, #24]
 8007ba2:	613b      	str	r3, [r7, #16]
 8007ba4:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007bac:	e00b      	b.n	8007bc6 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bae:	2300      	movs	r3, #0
 8007bb0:	60fb      	str	r3, [r7, #12]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	695b      	ldr	r3, [r3, #20]
 8007bb8:	60fb      	str	r3, [r7, #12]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	699b      	ldr	r3, [r3, #24]
 8007bc0:	60fb      	str	r3, [r7, #12]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
}
 8007bc4:	e7ff      	b.n	8007bc6 <I2C_Master_ADDR+0x316>
 8007bc6:	bf00      	nop
 8007bc8:	3744      	adds	r7, #68	; 0x44
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr

08007bd2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b084      	sub	sp, #16
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007be0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d02b      	beq.n	8007c44 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf0:	781a      	ldrb	r2, [r3, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfc:	1c5a      	adds	r2, r3, #1
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	b29a      	uxth	r2, r3
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d114      	bne.n	8007c44 <I2C_SlaveTransmit_TXE+0x72>
 8007c1a:	7bfb      	ldrb	r3, [r7, #15]
 8007c1c:	2b29      	cmp	r3, #41	; 0x29
 8007c1e:	d111      	bne.n	8007c44 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c2e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2221      	movs	r2, #33	; 0x21
 8007c34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2228      	movs	r2, #40	; 0x28
 8007c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f7ff f9f1 	bl	8007026 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007c44:	bf00      	nop
 8007c46:	3710      	adds	r7, #16
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d011      	beq.n	8007c82 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c62:	781a      	ldrb	r2, [r3, #0]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6e:	1c5a      	adds	r2, r3, #1
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	b29a      	uxth	r2, r3
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007c82:	bf00      	nop
 8007c84:	370c      	adds	r7, #12
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr

08007c8e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b084      	sub	sp, #16
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c9c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d02c      	beq.n	8007d02 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	691a      	ldr	r2, [r3, #16]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb2:	b2d2      	uxtb	r2, r2
 8007cb4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cba:	1c5a      	adds	r2, r3, #1
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d114      	bne.n	8007d02 <I2C_SlaveReceive_RXNE+0x74>
 8007cd8:	7bfb      	ldrb	r3, [r7, #15]
 8007cda:	2b2a      	cmp	r3, #42	; 0x2a
 8007cdc:	d111      	bne.n	8007d02 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	685a      	ldr	r2, [r3, #4]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cec:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2222      	movs	r2, #34	; 0x22
 8007cf2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2228      	movs	r2, #40	; 0x28
 8007cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f7ff f99c 	bl	800703a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007d02:	bf00      	nop
 8007d04:	3710      	adds	r7, #16
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007d0a:	b480      	push	{r7}
 8007d0c:	b083      	sub	sp, #12
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d012      	beq.n	8007d42 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	691a      	ldr	r2, [r3, #16]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d26:	b2d2      	uxtb	r2, r2
 8007d28:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2e:	1c5a      	adds	r2, r3, #1
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	b29a      	uxth	r2, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007d42:	bf00      	nop
 8007d44:	370c      	adds	r7, #12
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b084      	sub	sp, #16
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
 8007d56:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007d68:	2b28      	cmp	r3, #40	; 0x28
 8007d6a:	d125      	bne.n	8007db8 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	685a      	ldr	r2, [r3, #4]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d7a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	f003 0304 	and.w	r3, r3, #4
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d101      	bne.n	8007d8a <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007d86:	2301      	movs	r3, #1
 8007d88:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d103      	bne.n	8007d9c <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	81bb      	strh	r3, [r7, #12]
 8007d9a:	e002      	b.n	8007da2 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007daa:	89ba      	ldrh	r2, [r7, #12]
 8007dac:	7bfb      	ldrb	r3, [r7, #15]
 8007dae:	4619      	mov	r1, r3
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f7ff f94c 	bl	800704e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007db6:	e00e      	b.n	8007dd6 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007db8:	2300      	movs	r3, #0
 8007dba:	60bb      	str	r3, [r7, #8]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	695b      	ldr	r3, [r3, #20]
 8007dc2:	60bb      	str	r3, [r7, #8]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	699b      	ldr	r3, [r3, #24]
 8007dca:	60bb      	str	r3, [r7, #8]
 8007dcc:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007dd6:	bf00      	nop
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
	...

08007de0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dee:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	685a      	ldr	r2, [r3, #4]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007dfe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007e00:	2300      	movs	r3, #0
 8007e02:	60bb      	str	r3, [r7, #8]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	695b      	ldr	r3, [r3, #20]
 8007e0a:	60bb      	str	r3, [r7, #8]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f042 0201 	orr.w	r2, r2, #1
 8007e1a:	601a      	str	r2, [r3, #0]
 8007e1c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e2c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e3c:	d172      	bne.n	8007f24 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007e3e:	7bfb      	ldrb	r3, [r7, #15]
 8007e40:	2b22      	cmp	r3, #34	; 0x22
 8007e42:	d002      	beq.n	8007e4a <I2C_Slave_STOPF+0x6a>
 8007e44:	7bfb      	ldrb	r3, [r7, #15]
 8007e46:	2b2a      	cmp	r3, #42	; 0x2a
 8007e48:	d135      	bne.n	8007eb6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	b29a      	uxth	r2, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d005      	beq.n	8007e6e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e66:	f043 0204 	orr.w	r2, r3, #4
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e7c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7fd fa5e 	bl	8005344 <HAL_DMA_GetState>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d049      	beq.n	8007f22 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e92:	4a69      	ldr	r2, [pc, #420]	; (8008038 <I2C_Slave_STOPF+0x258>)
 8007e94:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7fd f8a6 	bl	8004fec <HAL_DMA_Abort_IT>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d03d      	beq.n	8007f22 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007eb0:	4610      	mov	r0, r2
 8007eb2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007eb4:	e035      	b.n	8007f22 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d005      	beq.n	8007eda <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed2:	f043 0204 	orr.w	r2, r3, #4
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	685a      	ldr	r2, [r3, #4]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ee8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f7fd fa28 	bl	8005344 <HAL_DMA_GetState>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d014      	beq.n	8007f24 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007efe:	4a4e      	ldr	r2, [pc, #312]	; (8008038 <I2C_Slave_STOPF+0x258>)
 8007f00:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7fd f870 	bl	8004fec <HAL_DMA_Abort_IT>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d008      	beq.n	8007f24 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007f1c:	4610      	mov	r0, r2
 8007f1e:	4798      	blx	r3
 8007f20:	e000      	b.n	8007f24 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007f22:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d03e      	beq.n	8007fac <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	695b      	ldr	r3, [r3, #20]
 8007f34:	f003 0304 	and.w	r3, r3, #4
 8007f38:	2b04      	cmp	r3, #4
 8007f3a:	d112      	bne.n	8007f62 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	691a      	ldr	r2, [r3, #16]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f46:	b2d2      	uxtb	r2, r2
 8007f48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4e:	1c5a      	adds	r2, r3, #1
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	b29a      	uxth	r2, r3
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	695b      	ldr	r3, [r3, #20]
 8007f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f6c:	2b40      	cmp	r3, #64	; 0x40
 8007f6e:	d112      	bne.n	8007f96 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	691a      	ldr	r2, [r3, #16]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7a:	b2d2      	uxtb	r2, r2
 8007f7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f82:	1c5a      	adds	r2, r3, #1
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	b29a      	uxth	r2, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d005      	beq.n	8007fac <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa4:	f043 0204 	orr.w	r2, r3, #4
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d003      	beq.n	8007fbc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f843 	bl	8008040 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007fba:	e039      	b.n	8008030 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007fbc:	7bfb      	ldrb	r3, [r7, #15]
 8007fbe:	2b2a      	cmp	r3, #42	; 0x2a
 8007fc0:	d109      	bne.n	8007fd6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2228      	movs	r2, #40	; 0x28
 8007fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f7ff f832 	bl	800703a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b28      	cmp	r3, #40	; 0x28
 8007fe0:	d111      	bne.n	8008006 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a15      	ldr	r2, [pc, #84]	; (800803c <I2C_Slave_STOPF+0x25c>)
 8007fe6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2220      	movs	r2, #32
 8007ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f7ff f833 	bl	800706a <HAL_I2C_ListenCpltCallback>
}
 8008004:	e014      	b.n	8008030 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800800a:	2b22      	cmp	r3, #34	; 0x22
 800800c:	d002      	beq.n	8008014 <I2C_Slave_STOPF+0x234>
 800800e:	7bfb      	ldrb	r3, [r7, #15]
 8008010:	2b22      	cmp	r3, #34	; 0x22
 8008012:	d10d      	bne.n	8008030 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2220      	movs	r2, #32
 800801e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f7ff f805 	bl	800703a <HAL_I2C_SlaveRxCpltCallback>
}
 8008030:	bf00      	nop
 8008032:	3710      	adds	r7, #16
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}
 8008038:	08008a65 	.word	0x08008a65
 800803c:	ffff0000 	.word	0xffff0000

08008040 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800804e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008056:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008058:	7bbb      	ldrb	r3, [r7, #14]
 800805a:	2b10      	cmp	r3, #16
 800805c:	d002      	beq.n	8008064 <I2C_ITError+0x24>
 800805e:	7bbb      	ldrb	r3, [r7, #14]
 8008060:	2b40      	cmp	r3, #64	; 0x40
 8008062:	d10a      	bne.n	800807a <I2C_ITError+0x3a>
 8008064:	7bfb      	ldrb	r3, [r7, #15]
 8008066:	2b22      	cmp	r3, #34	; 0x22
 8008068:	d107      	bne.n	800807a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008078:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800807a:	7bfb      	ldrb	r3, [r7, #15]
 800807c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008080:	2b28      	cmp	r3, #40	; 0x28
 8008082:	d107      	bne.n	8008094 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2228      	movs	r2, #40	; 0x28
 800808e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008092:	e015      	b.n	80080c0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800809e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080a2:	d00a      	beq.n	80080ba <I2C_ITError+0x7a>
 80080a4:	7bfb      	ldrb	r3, [r7, #15]
 80080a6:	2b60      	cmp	r3, #96	; 0x60
 80080a8:	d007      	beq.n	80080ba <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2220      	movs	r2, #32
 80080ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080ce:	d162      	bne.n	8008196 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	685a      	ldr	r2, [r3, #4]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080de:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d020      	beq.n	8008130 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080f2:	4a6a      	ldr	r2, [pc, #424]	; (800829c <I2C_ITError+0x25c>)
 80080f4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7fc ff76 	bl	8004fec <HAL_DMA_Abort_IT>
 8008100:	4603      	mov	r3, r0
 8008102:	2b00      	cmp	r3, #0
 8008104:	f000 8089 	beq.w	800821a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f022 0201 	bic.w	r2, r2, #1
 8008116:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2220      	movs	r2, #32
 800811c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800812a:	4610      	mov	r0, r2
 800812c:	4798      	blx	r3
 800812e:	e074      	b.n	800821a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008134:	4a59      	ldr	r2, [pc, #356]	; (800829c <I2C_ITError+0x25c>)
 8008136:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813c:	4618      	mov	r0, r3
 800813e:	f7fc ff55 	bl	8004fec <HAL_DMA_Abort_IT>
 8008142:	4603      	mov	r3, r0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d068      	beq.n	800821a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	695b      	ldr	r3, [r3, #20]
 800814e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008152:	2b40      	cmp	r3, #64	; 0x40
 8008154:	d10b      	bne.n	800816e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	691a      	ldr	r2, [r3, #16]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008160:	b2d2      	uxtb	r2, r2
 8008162:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008168:	1c5a      	adds	r2, r3, #1
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f022 0201 	bic.w	r2, r2, #1
 800817c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2220      	movs	r2, #32
 8008182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800818a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008190:	4610      	mov	r0, r2
 8008192:	4798      	blx	r3
 8008194:	e041      	b.n	800821a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800819c:	b2db      	uxtb	r3, r3
 800819e:	2b60      	cmp	r3, #96	; 0x60
 80081a0:	d125      	bne.n	80081ee <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2220      	movs	r2, #32
 80081a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	695b      	ldr	r3, [r3, #20]
 80081b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ba:	2b40      	cmp	r3, #64	; 0x40
 80081bc:	d10b      	bne.n	80081d6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	691a      	ldr	r2, [r3, #16]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c8:	b2d2      	uxtb	r2, r2
 80081ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d0:	1c5a      	adds	r2, r3, #1
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f022 0201 	bic.w	r2, r2, #1
 80081e4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f7fe ff5d 	bl	80070a6 <HAL_I2C_AbortCpltCallback>
 80081ec:	e015      	b.n	800821a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	695b      	ldr	r3, [r3, #20]
 80081f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f8:	2b40      	cmp	r3, #64	; 0x40
 80081fa:	d10b      	bne.n	8008214 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	691a      	ldr	r2, [r3, #16]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008206:	b2d2      	uxtb	r2, r2
 8008208:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820e:	1c5a      	adds	r2, r3, #1
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f7fe ff3c 	bl	8007092 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	f003 0301 	and.w	r3, r3, #1
 8008226:	2b00      	cmp	r3, #0
 8008228:	d10e      	bne.n	8008248 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008230:	2b00      	cmp	r3, #0
 8008232:	d109      	bne.n	8008248 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800823a:	2b00      	cmp	r3, #0
 800823c:	d104      	bne.n	8008248 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008244:	2b00      	cmp	r3, #0
 8008246:	d007      	beq.n	8008258 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	685a      	ldr	r2, [r3, #4]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008256:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800825e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008264:	f003 0304 	and.w	r3, r3, #4
 8008268:	2b04      	cmp	r3, #4
 800826a:	d113      	bne.n	8008294 <I2C_ITError+0x254>
 800826c:	7bfb      	ldrb	r3, [r7, #15]
 800826e:	2b28      	cmp	r3, #40	; 0x28
 8008270:	d110      	bne.n	8008294 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a0a      	ldr	r2, [pc, #40]	; (80082a0 <I2C_ITError+0x260>)
 8008276:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2220      	movs	r2, #32
 8008282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f7fe feeb 	bl	800706a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008294:	bf00      	nop
 8008296:	3710      	adds	r7, #16
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}
 800829c:	08008a65 	.word	0x08008a65
 80082a0:	ffff0000 	.word	0xffff0000

080082a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b088      	sub	sp, #32
 80082a8:	af02      	add	r7, sp, #8
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	607a      	str	r2, [r7, #4]
 80082ae:	603b      	str	r3, [r7, #0]
 80082b0:	460b      	mov	r3, r1
 80082b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	2b08      	cmp	r3, #8
 80082be:	d006      	beq.n	80082ce <I2C_MasterRequestWrite+0x2a>
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d003      	beq.n	80082ce <I2C_MasterRequestWrite+0x2a>
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80082cc:	d108      	bne.n	80082e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082dc:	601a      	str	r2, [r3, #0]
 80082de:	e00b      	b.n	80082f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082e4:	2b12      	cmp	r3, #18
 80082e6:	d107      	bne.n	80082f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	9300      	str	r3, [sp, #0]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008304:	68f8      	ldr	r0, [r7, #12]
 8008306:	f000 fc55 	bl	8008bb4 <I2C_WaitOnFlagUntilTimeout>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00d      	beq.n	800832c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800831a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800831e:	d103      	bne.n	8008328 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008326:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008328:	2303      	movs	r3, #3
 800832a:	e035      	b.n	8008398 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	691b      	ldr	r3, [r3, #16]
 8008330:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008334:	d108      	bne.n	8008348 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008336:	897b      	ldrh	r3, [r7, #10]
 8008338:	b2db      	uxtb	r3, r3
 800833a:	461a      	mov	r2, r3
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008344:	611a      	str	r2, [r3, #16]
 8008346:	e01b      	b.n	8008380 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008348:	897b      	ldrh	r3, [r7, #10]
 800834a:	11db      	asrs	r3, r3, #7
 800834c:	b2db      	uxtb	r3, r3
 800834e:	f003 0306 	and.w	r3, r3, #6
 8008352:	b2db      	uxtb	r3, r3
 8008354:	f063 030f 	orn	r3, r3, #15
 8008358:	b2da      	uxtb	r2, r3
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	490e      	ldr	r1, [pc, #56]	; (80083a0 <I2C_MasterRequestWrite+0xfc>)
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f000 fc7b 	bl	8008c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800836c:	4603      	mov	r3, r0
 800836e:	2b00      	cmp	r3, #0
 8008370:	d001      	beq.n	8008376 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e010      	b.n	8008398 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008376:	897b      	ldrh	r3, [r7, #10]
 8008378:	b2da      	uxtb	r2, r3
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	4907      	ldr	r1, [pc, #28]	; (80083a4 <I2C_MasterRequestWrite+0x100>)
 8008386:	68f8      	ldr	r0, [r7, #12]
 8008388:	f000 fc6b 	bl	8008c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	d001      	beq.n	8008396 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	e000      	b.n	8008398 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3718      	adds	r7, #24
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	00010008 	.word	0x00010008
 80083a4:	00010002 	.word	0x00010002

080083a8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b088      	sub	sp, #32
 80083ac:	af02      	add	r7, sp, #8
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	607a      	str	r2, [r7, #4]
 80083b2:	603b      	str	r3, [r7, #0]
 80083b4:	460b      	mov	r3, r1
 80083b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083bc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80083cc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	2b08      	cmp	r3, #8
 80083d2:	d006      	beq.n	80083e2 <I2C_MasterRequestRead+0x3a>
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d003      	beq.n	80083e2 <I2C_MasterRequestRead+0x3a>
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80083e0:	d108      	bne.n	80083f4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083f0:	601a      	str	r2, [r3, #0]
 80083f2:	e00b      	b.n	800840c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f8:	2b11      	cmp	r3, #17
 80083fa:	d107      	bne.n	800840c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800840a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	9300      	str	r3, [sp, #0]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008418:	68f8      	ldr	r0, [r7, #12]
 800841a:	f000 fbcb 	bl	8008bb4 <I2C_WaitOnFlagUntilTimeout>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d00d      	beq.n	8008440 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800842e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008432:	d103      	bne.n	800843c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f44f 7200 	mov.w	r2, #512	; 0x200
 800843a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800843c:	2303      	movs	r3, #3
 800843e:	e079      	b.n	8008534 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008448:	d108      	bne.n	800845c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800844a:	897b      	ldrh	r3, [r7, #10]
 800844c:	b2db      	uxtb	r3, r3
 800844e:	f043 0301 	orr.w	r3, r3, #1
 8008452:	b2da      	uxtb	r2, r3
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	611a      	str	r2, [r3, #16]
 800845a:	e05f      	b.n	800851c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800845c:	897b      	ldrh	r3, [r7, #10]
 800845e:	11db      	asrs	r3, r3, #7
 8008460:	b2db      	uxtb	r3, r3
 8008462:	f003 0306 	and.w	r3, r3, #6
 8008466:	b2db      	uxtb	r3, r3
 8008468:	f063 030f 	orn	r3, r3, #15
 800846c:	b2da      	uxtb	r2, r3
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	4930      	ldr	r1, [pc, #192]	; (800853c <I2C_MasterRequestRead+0x194>)
 800847a:	68f8      	ldr	r0, [r7, #12]
 800847c:	f000 fbf1 	bl	8008c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008480:	4603      	mov	r3, r0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d001      	beq.n	800848a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e054      	b.n	8008534 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800848a:	897b      	ldrh	r3, [r7, #10]
 800848c:	b2da      	uxtb	r2, r3
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	4929      	ldr	r1, [pc, #164]	; (8008540 <I2C_MasterRequestRead+0x198>)
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	f000 fbe1 	bl	8008c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d001      	beq.n	80084aa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	e044      	b.n	8008534 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084aa:	2300      	movs	r3, #0
 80084ac:	613b      	str	r3, [r7, #16]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	695b      	ldr	r3, [r3, #20]
 80084b4:	613b      	str	r3, [r7, #16]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	613b      	str	r3, [r7, #16]
 80084be:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084ce:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	9300      	str	r3, [sp, #0]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f000 fb69 	bl	8008bb4 <I2C_WaitOnFlagUntilTimeout>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d00d      	beq.n	8008504 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084f6:	d103      	bne.n	8008500 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084fe:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8008500:	2303      	movs	r3, #3
 8008502:	e017      	b.n	8008534 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008504:	897b      	ldrh	r3, [r7, #10]
 8008506:	11db      	asrs	r3, r3, #7
 8008508:	b2db      	uxtb	r3, r3
 800850a:	f003 0306 	and.w	r3, r3, #6
 800850e:	b2db      	uxtb	r3, r3
 8008510:	f063 030e 	orn	r3, r3, #14
 8008514:	b2da      	uxtb	r2, r3
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	4907      	ldr	r1, [pc, #28]	; (8008540 <I2C_MasterRequestRead+0x198>)
 8008522:	68f8      	ldr	r0, [r7, #12]
 8008524:	f000 fb9d 	bl	8008c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d001      	beq.n	8008532 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	e000      	b.n	8008534 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	3718      	adds	r7, #24
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}
 800853c:	00010008 	.word	0x00010008
 8008540:	00010002 	.word	0x00010002

08008544 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b088      	sub	sp, #32
 8008548:	af02      	add	r7, sp, #8
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	4608      	mov	r0, r1
 800854e:	4611      	mov	r1, r2
 8008550:	461a      	mov	r2, r3
 8008552:	4603      	mov	r3, r0
 8008554:	817b      	strh	r3, [r7, #10]
 8008556:	460b      	mov	r3, r1
 8008558:	813b      	strh	r3, [r7, #8]
 800855a:	4613      	mov	r3, r2
 800855c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800856c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800856e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008570:	9300      	str	r3, [sp, #0]
 8008572:	6a3b      	ldr	r3, [r7, #32]
 8008574:	2200      	movs	r2, #0
 8008576:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800857a:	68f8      	ldr	r0, [r7, #12]
 800857c:	f000 fb1a 	bl	8008bb4 <I2C_WaitOnFlagUntilTimeout>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00d      	beq.n	80085a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008594:	d103      	bne.n	800859e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f44f 7200 	mov.w	r2, #512	; 0x200
 800859c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800859e:	2303      	movs	r3, #3
 80085a0:	e05f      	b.n	8008662 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80085a2:	897b      	ldrh	r3, [r7, #10]
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	461a      	mov	r2, r3
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80085b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80085b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b4:	6a3a      	ldr	r2, [r7, #32]
 80085b6:	492d      	ldr	r1, [pc, #180]	; (800866c <I2C_RequestMemoryWrite+0x128>)
 80085b8:	68f8      	ldr	r0, [r7, #12]
 80085ba:	f000 fb52 	bl	8008c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d001      	beq.n	80085c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	e04c      	b.n	8008662 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085c8:	2300      	movs	r3, #0
 80085ca:	617b      	str	r3, [r7, #20]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	695b      	ldr	r3, [r3, #20]
 80085d2:	617b      	str	r3, [r7, #20]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	699b      	ldr	r3, [r3, #24]
 80085da:	617b      	str	r3, [r7, #20]
 80085dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085e0:	6a39      	ldr	r1, [r7, #32]
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f000 fbbc 	bl	8008d60 <I2C_WaitOnTXEFlagUntilTimeout>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00d      	beq.n	800860a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f2:	2b04      	cmp	r3, #4
 80085f4:	d107      	bne.n	8008606 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008604:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	e02b      	b.n	8008662 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800860a:	88fb      	ldrh	r3, [r7, #6]
 800860c:	2b01      	cmp	r3, #1
 800860e:	d105      	bne.n	800861c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008610:	893b      	ldrh	r3, [r7, #8]
 8008612:	b2da      	uxtb	r2, r3
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	611a      	str	r2, [r3, #16]
 800861a:	e021      	b.n	8008660 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800861c:	893b      	ldrh	r3, [r7, #8]
 800861e:	0a1b      	lsrs	r3, r3, #8
 8008620:	b29b      	uxth	r3, r3
 8008622:	b2da      	uxtb	r2, r3
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800862a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800862c:	6a39      	ldr	r1, [r7, #32]
 800862e:	68f8      	ldr	r0, [r7, #12]
 8008630:	f000 fb96 	bl	8008d60 <I2C_WaitOnTXEFlagUntilTimeout>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00d      	beq.n	8008656 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863e:	2b04      	cmp	r3, #4
 8008640:	d107      	bne.n	8008652 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008650:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	e005      	b.n	8008662 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008656:	893b      	ldrh	r3, [r7, #8]
 8008658:	b2da      	uxtb	r2, r3
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008660:	2300      	movs	r3, #0
}
 8008662:	4618      	mov	r0, r3
 8008664:	3718      	adds	r7, #24
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	00010002 	.word	0x00010002

08008670 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b088      	sub	sp, #32
 8008674:	af02      	add	r7, sp, #8
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	4608      	mov	r0, r1
 800867a:	4611      	mov	r1, r2
 800867c:	461a      	mov	r2, r3
 800867e:	4603      	mov	r3, r0
 8008680:	817b      	strh	r3, [r7, #10]
 8008682:	460b      	mov	r3, r1
 8008684:	813b      	strh	r3, [r7, #8]
 8008686:	4613      	mov	r3, r2
 8008688:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008698:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80086aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ac:	9300      	str	r3, [sp, #0]
 80086ae:	6a3b      	ldr	r3, [r7, #32]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80086b6:	68f8      	ldr	r0, [r7, #12]
 80086b8:	f000 fa7c 	bl	8008bb4 <I2C_WaitOnFlagUntilTimeout>
 80086bc:	4603      	mov	r3, r0
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d00d      	beq.n	80086de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086d0:	d103      	bne.n	80086da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80086da:	2303      	movs	r3, #3
 80086dc:	e0aa      	b.n	8008834 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80086de:	897b      	ldrh	r3, [r7, #10]
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	461a      	mov	r2, r3
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80086ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80086ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f0:	6a3a      	ldr	r2, [r7, #32]
 80086f2:	4952      	ldr	r1, [pc, #328]	; (800883c <I2C_RequestMemoryRead+0x1cc>)
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f000 fab4 	bl	8008c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d001      	beq.n	8008704 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008700:	2301      	movs	r3, #1
 8008702:	e097      	b.n	8008834 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008704:	2300      	movs	r3, #0
 8008706:	617b      	str	r3, [r7, #20]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	695b      	ldr	r3, [r3, #20]
 800870e:	617b      	str	r3, [r7, #20]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	699b      	ldr	r3, [r3, #24]
 8008716:	617b      	str	r3, [r7, #20]
 8008718:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800871a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800871c:	6a39      	ldr	r1, [r7, #32]
 800871e:	68f8      	ldr	r0, [r7, #12]
 8008720:	f000 fb1e 	bl	8008d60 <I2C_WaitOnTXEFlagUntilTimeout>
 8008724:	4603      	mov	r3, r0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00d      	beq.n	8008746 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800872e:	2b04      	cmp	r3, #4
 8008730:	d107      	bne.n	8008742 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008740:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008742:	2301      	movs	r3, #1
 8008744:	e076      	b.n	8008834 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008746:	88fb      	ldrh	r3, [r7, #6]
 8008748:	2b01      	cmp	r3, #1
 800874a:	d105      	bne.n	8008758 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800874c:	893b      	ldrh	r3, [r7, #8]
 800874e:	b2da      	uxtb	r2, r3
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	611a      	str	r2, [r3, #16]
 8008756:	e021      	b.n	800879c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008758:	893b      	ldrh	r3, [r7, #8]
 800875a:	0a1b      	lsrs	r3, r3, #8
 800875c:	b29b      	uxth	r3, r3
 800875e:	b2da      	uxtb	r2, r3
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008768:	6a39      	ldr	r1, [r7, #32]
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f000 faf8 	bl	8008d60 <I2C_WaitOnTXEFlagUntilTimeout>
 8008770:	4603      	mov	r3, r0
 8008772:	2b00      	cmp	r3, #0
 8008774:	d00d      	beq.n	8008792 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800877a:	2b04      	cmp	r3, #4
 800877c:	d107      	bne.n	800878e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800878c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	e050      	b.n	8008834 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008792:	893b      	ldrh	r3, [r7, #8]
 8008794:	b2da      	uxtb	r2, r3
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800879c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800879e:	6a39      	ldr	r1, [r7, #32]
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	f000 fadd 	bl	8008d60 <I2C_WaitOnTXEFlagUntilTimeout>
 80087a6:	4603      	mov	r3, r0
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d00d      	beq.n	80087c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b0:	2b04      	cmp	r3, #4
 80087b2:	d107      	bne.n	80087c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80087c4:	2301      	movs	r3, #1
 80087c6:	e035      	b.n	8008834 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80087d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087da:	9300      	str	r3, [sp, #0]
 80087dc:	6a3b      	ldr	r3, [r7, #32]
 80087de:	2200      	movs	r2, #0
 80087e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80087e4:	68f8      	ldr	r0, [r7, #12]
 80087e6:	f000 f9e5 	bl	8008bb4 <I2C_WaitOnFlagUntilTimeout>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d00d      	beq.n	800880c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087fe:	d103      	bne.n	8008808 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008806:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008808:	2303      	movs	r3, #3
 800880a:	e013      	b.n	8008834 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800880c:	897b      	ldrh	r3, [r7, #10]
 800880e:	b2db      	uxtb	r3, r3
 8008810:	f043 0301 	orr.w	r3, r3, #1
 8008814:	b2da      	uxtb	r2, r3
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800881c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881e:	6a3a      	ldr	r2, [r7, #32]
 8008820:	4906      	ldr	r1, [pc, #24]	; (800883c <I2C_RequestMemoryRead+0x1cc>)
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f000 fa1d 	bl	8008c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008828:	4603      	mov	r3, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	d001      	beq.n	8008832 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e000      	b.n	8008834 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008832:	2300      	movs	r3, #0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3718      	adds	r7, #24
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	00010002 	.word	0x00010002

08008840 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b086      	sub	sp, #24
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800884c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008854:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800885c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008862:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	685a      	ldr	r2, [r3, #4]
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008872:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008878:	2b00      	cmp	r3, #0
 800887a:	d003      	beq.n	8008884 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008880:	2200      	movs	r2, #0
 8008882:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008888:	2b00      	cmp	r3, #0
 800888a:	d003      	beq.n	8008894 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008890:	2200      	movs	r2, #0
 8008892:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8008894:	7cfb      	ldrb	r3, [r7, #19]
 8008896:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800889a:	2b21      	cmp	r3, #33	; 0x21
 800889c:	d007      	beq.n	80088ae <I2C_DMAXferCplt+0x6e>
 800889e:	7cfb      	ldrb	r3, [r7, #19]
 80088a0:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80088a4:	2b22      	cmp	r3, #34	; 0x22
 80088a6:	d131      	bne.n	800890c <I2C_DMAXferCplt+0xcc>
 80088a8:	7cbb      	ldrb	r3, [r7, #18]
 80088aa:	2b20      	cmp	r3, #32
 80088ac:	d12e      	bne.n	800890c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	685a      	ldr	r2, [r3, #4]
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80088bc:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	2200      	movs	r2, #0
 80088c2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80088c4:	7cfb      	ldrb	r3, [r7, #19]
 80088c6:	2b29      	cmp	r3, #41	; 0x29
 80088c8:	d10a      	bne.n	80088e0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	2221      	movs	r2, #33	; 0x21
 80088ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	2228      	movs	r2, #40	; 0x28
 80088d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80088d8:	6978      	ldr	r0, [r7, #20]
 80088da:	f7fe fba4 	bl	8007026 <HAL_I2C_SlaveTxCpltCallback>
 80088de:	e00c      	b.n	80088fa <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80088e0:	7cfb      	ldrb	r3, [r7, #19]
 80088e2:	2b2a      	cmp	r3, #42	; 0x2a
 80088e4:	d109      	bne.n	80088fa <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	2222      	movs	r2, #34	; 0x22
 80088ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	2228      	movs	r2, #40	; 0x28
 80088f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80088f4:	6978      	ldr	r0, [r7, #20]
 80088f6:	f7fe fba0 	bl	800703a <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	685a      	ldr	r2, [r3, #4]
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8008908:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800890a:	e06a      	b.n	80089e2 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008912:	b2db      	uxtb	r3, r3
 8008914:	2b00      	cmp	r3, #0
 8008916:	d064      	beq.n	80089e2 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800891c:	b29b      	uxth	r3, r3
 800891e:	2b01      	cmp	r3, #1
 8008920:	d107      	bne.n	8008932 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008930:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	685a      	ldr	r2, [r3, #4]
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008940:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008948:	d009      	beq.n	800895e <I2C_DMAXferCplt+0x11e>
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2b08      	cmp	r3, #8
 800894e:	d006      	beq.n	800895e <I2C_DMAXferCplt+0x11e>
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008956:	d002      	beq.n	800895e <I2C_DMAXferCplt+0x11e>
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2b20      	cmp	r3, #32
 800895c:	d107      	bne.n	800896e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800896c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	685a      	ldr	r2, [r3, #4]
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800897c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	685a      	ldr	r2, [r3, #4]
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800898c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	2200      	movs	r2, #0
 8008992:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008998:	2b00      	cmp	r3, #0
 800899a:	d003      	beq.n	80089a4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800899c:	6978      	ldr	r0, [r7, #20]
 800899e:	f7fe fb78 	bl	8007092 <HAL_I2C_ErrorCallback>
}
 80089a2:	e01e      	b.n	80089e2 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	2220      	movs	r2, #32
 80089a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	2b40      	cmp	r3, #64	; 0x40
 80089b6:	d10a      	bne.n	80089ce <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	2200      	movs	r2, #0
 80089bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	2200      	movs	r2, #0
 80089c4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80089c6:	6978      	ldr	r0, [r7, #20]
 80089c8:	f7f9 fd3c 	bl	8002444 <HAL_I2C_MemRxCpltCallback>
}
 80089cc:	e009      	b.n	80089e2 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	2200      	movs	r2, #0
 80089d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	2212      	movs	r2, #18
 80089da:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80089dc:	6978      	ldr	r0, [r7, #20]
 80089de:	f7fe fb18 	bl	8007012 <HAL_I2C_MasterRxCpltCallback>
}
 80089e2:	bf00      	nop
 80089e4:	3718      	adds	r7, #24
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}

080089ea <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b084      	sub	sp, #16
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f6:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d003      	beq.n	8008a08 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a04:	2200      	movs	r2, #0
 8008a06:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d003      	beq.n	8008a18 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a14:	2200      	movs	r2, #0
 8008a16:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f7fc fca1 	bl	8005360 <HAL_DMA_GetError>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	d01b      	beq.n	8008a5c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a32:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2200      	movs	r2, #0
 8008a38:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2220      	movs	r2, #32
 8008a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4e:	f043 0210 	orr.w	r2, r3, #16
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008a56:	68f8      	ldr	r0, [r7, #12]
 8008a58:	f7fe fb1b 	bl	8007092 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008a5c:	bf00      	nop
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b086      	sub	sp, #24
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a74:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a7c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008a7e:	4b4b      	ldr	r3, [pc, #300]	; (8008bac <I2C_DMAAbort+0x148>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	08db      	lsrs	r3, r3, #3
 8008a84:	4a4a      	ldr	r2, [pc, #296]	; (8008bb0 <I2C_DMAAbort+0x14c>)
 8008a86:	fba2 2303 	umull	r2, r3, r2, r3
 8008a8a:	0a1a      	lsrs	r2, r3, #8
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	4413      	add	r3, r2
 8008a92:	00da      	lsls	r2, r3, #3
 8008a94:	1ad3      	subs	r3, r2, r3
 8008a96:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d106      	bne.n	8008aac <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa2:	f043 0220 	orr.w	r2, r3, #32
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008aaa:	e00a      	b.n	8008ac2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ac0:	d0ea      	beq.n	8008a98 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d003      	beq.n	8008ad2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ace:	2200      	movs	r2, #0
 8008ad0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d003      	beq.n	8008ae2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ade:	2200      	movs	r2, #0
 8008ae0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008af0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	2200      	movs	r2, #0
 8008af6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d003      	beq.n	8008b08 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b04:	2200      	movs	r2, #0
 8008b06:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d003      	beq.n	8008b18 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b14:	2200      	movs	r2, #0
 8008b16:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f022 0201 	bic.w	r2, r2, #1
 8008b26:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	2b60      	cmp	r3, #96	; 0x60
 8008b32:	d10e      	bne.n	8008b52 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	2220      	movs	r2, #32
 8008b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	2200      	movs	r2, #0
 8008b48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008b4a:	6978      	ldr	r0, [r7, #20]
 8008b4c:	f7fe faab 	bl	80070a6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008b50:	e027      	b.n	8008ba2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008b52:	7cfb      	ldrb	r3, [r7, #19]
 8008b54:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008b58:	2b28      	cmp	r3, #40	; 0x28
 8008b5a:	d117      	bne.n	8008b8c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f042 0201 	orr.w	r2, r2, #1
 8008b6a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008b7a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	2228      	movs	r2, #40	; 0x28
 8008b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008b8a:	e007      	b.n	8008b9c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	2220      	movs	r2, #32
 8008b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008b9c:	6978      	ldr	r0, [r7, #20]
 8008b9e:	f7fe fa78 	bl	8007092 <HAL_I2C_ErrorCallback>
}
 8008ba2:	bf00      	nop
 8008ba4:	3718      	adds	r7, #24
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	2000000c 	.word	0x2000000c
 8008bb0:	14f8b589 	.word	0x14f8b589

08008bb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	603b      	str	r3, [r7, #0]
 8008bc0:	4613      	mov	r3, r2
 8008bc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008bc4:	e025      	b.n	8008c12 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bcc:	d021      	beq.n	8008c12 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bce:	f7fb fa49 	bl	8004064 <HAL_GetTick>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	69bb      	ldr	r3, [r7, #24]
 8008bd6:	1ad3      	subs	r3, r2, r3
 8008bd8:	683a      	ldr	r2, [r7, #0]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d302      	bcc.n	8008be4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d116      	bne.n	8008c12 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2200      	movs	r2, #0
 8008be8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2220      	movs	r2, #32
 8008bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bfe:	f043 0220 	orr.w	r2, r3, #32
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e023      	b.n	8008c5a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	0c1b      	lsrs	r3, r3, #16
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d10d      	bne.n	8008c38 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	695b      	ldr	r3, [r3, #20]
 8008c22:	43da      	mvns	r2, r3
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	4013      	ands	r3, r2
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	bf0c      	ite	eq
 8008c2e:	2301      	moveq	r3, #1
 8008c30:	2300      	movne	r3, #0
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	461a      	mov	r2, r3
 8008c36:	e00c      	b.n	8008c52 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	699b      	ldr	r3, [r3, #24]
 8008c3e:	43da      	mvns	r2, r3
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	4013      	ands	r3, r2
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	bf0c      	ite	eq
 8008c4a:	2301      	moveq	r3, #1
 8008c4c:	2300      	movne	r3, #0
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	461a      	mov	r2, r3
 8008c52:	79fb      	ldrb	r3, [r7, #7]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d0b6      	beq.n	8008bc6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b084      	sub	sp, #16
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	60f8      	str	r0, [r7, #12]
 8008c6a:	60b9      	str	r1, [r7, #8]
 8008c6c:	607a      	str	r2, [r7, #4]
 8008c6e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008c70:	e051      	b.n	8008d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	695b      	ldr	r3, [r3, #20]
 8008c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c80:	d123      	bne.n	8008cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c90:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008c9a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2220      	movs	r2, #32
 8008ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2200      	movs	r2, #0
 8008cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb6:	f043 0204 	orr.w	r2, r3, #4
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e046      	b.n	8008d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cd0:	d021      	beq.n	8008d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cd2:	f7fb f9c7 	bl	8004064 <HAL_GetTick>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	1ad3      	subs	r3, r2, r3
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d302      	bcc.n	8008ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d116      	bne.n	8008d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2200      	movs	r2, #0
 8008cec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2220      	movs	r2, #32
 8008cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d02:	f043 0220 	orr.w	r2, r3, #32
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008d12:	2301      	movs	r3, #1
 8008d14:	e020      	b.n	8008d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	0c1b      	lsrs	r3, r3, #16
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d10c      	bne.n	8008d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	695b      	ldr	r3, [r3, #20]
 8008d26:	43da      	mvns	r2, r3
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	4013      	ands	r3, r2
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	bf14      	ite	ne
 8008d32:	2301      	movne	r3, #1
 8008d34:	2300      	moveq	r3, #0
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	e00b      	b.n	8008d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	699b      	ldr	r3, [r3, #24]
 8008d40:	43da      	mvns	r2, r3
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	4013      	ands	r3, r2
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	bf14      	ite	ne
 8008d4c:	2301      	movne	r3, #1
 8008d4e:	2300      	moveq	r3, #0
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d18d      	bne.n	8008c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008d56:	2300      	movs	r3, #0
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3710      	adds	r7, #16
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	60b9      	str	r1, [r7, #8]
 8008d6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008d6c:	e02d      	b.n	8008dca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f000 f900 	bl	8008f74 <I2C_IsAcknowledgeFailed>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d001      	beq.n	8008d7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e02d      	b.n	8008dda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d84:	d021      	beq.n	8008dca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d86:	f7fb f96d 	bl	8004064 <HAL_GetTick>
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	1ad3      	subs	r3, r2, r3
 8008d90:	68ba      	ldr	r2, [r7, #8]
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d302      	bcc.n	8008d9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d116      	bne.n	8008dca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2220      	movs	r2, #32
 8008da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db6:	f043 0220 	orr.w	r2, r3, #32
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e007      	b.n	8008dda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	695b      	ldr	r3, [r3, #20]
 8008dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dd4:	2b80      	cmp	r3, #128	; 0x80
 8008dd6:	d1ca      	bne.n	8008d6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b084      	sub	sp, #16
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	60f8      	str	r0, [r7, #12]
 8008dea:	60b9      	str	r1, [r7, #8]
 8008dec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008dee:	e02d      	b.n	8008e4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008df0:	68f8      	ldr	r0, [r7, #12]
 8008df2:	f000 f8bf 	bl	8008f74 <I2C_IsAcknowledgeFailed>
 8008df6:	4603      	mov	r3, r0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d001      	beq.n	8008e00 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	e02d      	b.n	8008e5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e06:	d021      	beq.n	8008e4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e08:	f7fb f92c 	bl	8004064 <HAL_GetTick>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	1ad3      	subs	r3, r2, r3
 8008e12:	68ba      	ldr	r2, [r7, #8]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d302      	bcc.n	8008e1e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d116      	bne.n	8008e4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2200      	movs	r2, #0
 8008e22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2220      	movs	r2, #32
 8008e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e38:	f043 0220 	orr.w	r2, r3, #32
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2200      	movs	r2, #0
 8008e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	e007      	b.n	8008e5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	695b      	ldr	r3, [r3, #20]
 8008e52:	f003 0304 	and.w	r3, r3, #4
 8008e56:	2b04      	cmp	r3, #4
 8008e58:	d1ca      	bne.n	8008df0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008e5a:	2300      	movs	r3, #0
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3710      	adds	r7, #16
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}

08008e64 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b085      	sub	sp, #20
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008e70:	4b13      	ldr	r3, [pc, #76]	; (8008ec0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	08db      	lsrs	r3, r3, #3
 8008e76:	4a13      	ldr	r2, [pc, #76]	; (8008ec4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008e78:	fba2 2303 	umull	r2, r3, r2, r3
 8008e7c:	0a1a      	lsrs	r2, r3, #8
 8008e7e:	4613      	mov	r3, r2
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	4413      	add	r3, r2
 8008e84:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d107      	bne.n	8008ea2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e96:	f043 0220 	orr.w	r2, r3, #32
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e008      	b.n	8008eb4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008eb0:	d0e9      	beq.n	8008e86 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3714      	adds	r7, #20
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr
 8008ec0:	2000000c 	.word	0x2000000c
 8008ec4:	14f8b589 	.word	0x14f8b589

08008ec8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	60b9      	str	r1, [r7, #8]
 8008ed2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008ed4:	e042      	b.n	8008f5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	695b      	ldr	r3, [r3, #20]
 8008edc:	f003 0310 	and.w	r3, r3, #16
 8008ee0:	2b10      	cmp	r3, #16
 8008ee2:	d119      	bne.n	8008f18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f06f 0210 	mvn.w	r2, #16
 8008eec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2220      	movs	r2, #32
 8008ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2200      	movs	r2, #0
 8008f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008f14:	2301      	movs	r3, #1
 8008f16:	e029      	b.n	8008f6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f18:	f7fb f8a4 	bl	8004064 <HAL_GetTick>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	1ad3      	subs	r3, r2, r3
 8008f22:	68ba      	ldr	r2, [r7, #8]
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d302      	bcc.n	8008f2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d116      	bne.n	8008f5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2200      	movs	r2, #0
 8008f32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2220      	movs	r2, #32
 8008f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f48:	f043 0220 	orr.w	r2, r3, #32
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	e007      	b.n	8008f6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	695b      	ldr	r3, [r3, #20]
 8008f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f66:	2b40      	cmp	r3, #64	; 0x40
 8008f68:	d1b5      	bne.n	8008ed6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3710      	adds	r7, #16
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b083      	sub	sp, #12
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	695b      	ldr	r3, [r3, #20]
 8008f82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f8a:	d11b      	bne.n	8008fc4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008f94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2220      	movs	r2, #32
 8008fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb0:	f043 0204 	orr.w	r2, r3, #4
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e000      	b.n	8008fc6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	370c      	adds	r7, #12
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr

08008fd2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008fd2:	b480      	push	{r7}
 8008fd4:	b083      	sub	sp, #12
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fde:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008fe2:	d103      	bne.n	8008fec <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008fea:	e007      	b.n	8008ffc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008ff4:	d102      	bne.n	8008ffc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2208      	movs	r2, #8
 8008ffa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008ffc:	bf00      	nop
 8008ffe:	370c      	adds	r7, #12
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d101      	bne.n	800901c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009018:	2301      	movs	r3, #1
 800901a:	e0cc      	b.n	80091b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800901c:	4b68      	ldr	r3, [pc, #416]	; (80091c0 <HAL_RCC_ClockConfig+0x1b8>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f003 030f 	and.w	r3, r3, #15
 8009024:	683a      	ldr	r2, [r7, #0]
 8009026:	429a      	cmp	r2, r3
 8009028:	d90c      	bls.n	8009044 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800902a:	4b65      	ldr	r3, [pc, #404]	; (80091c0 <HAL_RCC_ClockConfig+0x1b8>)
 800902c:	683a      	ldr	r2, [r7, #0]
 800902e:	b2d2      	uxtb	r2, r2
 8009030:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009032:	4b63      	ldr	r3, [pc, #396]	; (80091c0 <HAL_RCC_ClockConfig+0x1b8>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f003 030f 	and.w	r3, r3, #15
 800903a:	683a      	ldr	r2, [r7, #0]
 800903c:	429a      	cmp	r2, r3
 800903e:	d001      	beq.n	8009044 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009040:	2301      	movs	r3, #1
 8009042:	e0b8      	b.n	80091b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f003 0302 	and.w	r3, r3, #2
 800904c:	2b00      	cmp	r3, #0
 800904e:	d020      	beq.n	8009092 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f003 0304 	and.w	r3, r3, #4
 8009058:	2b00      	cmp	r3, #0
 800905a:	d005      	beq.n	8009068 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800905c:	4b59      	ldr	r3, [pc, #356]	; (80091c4 <HAL_RCC_ClockConfig+0x1bc>)
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	4a58      	ldr	r2, [pc, #352]	; (80091c4 <HAL_RCC_ClockConfig+0x1bc>)
 8009062:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009066:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f003 0308 	and.w	r3, r3, #8
 8009070:	2b00      	cmp	r3, #0
 8009072:	d005      	beq.n	8009080 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009074:	4b53      	ldr	r3, [pc, #332]	; (80091c4 <HAL_RCC_ClockConfig+0x1bc>)
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	4a52      	ldr	r2, [pc, #328]	; (80091c4 <HAL_RCC_ClockConfig+0x1bc>)
 800907a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800907e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009080:	4b50      	ldr	r3, [pc, #320]	; (80091c4 <HAL_RCC_ClockConfig+0x1bc>)
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	494d      	ldr	r1, [pc, #308]	; (80091c4 <HAL_RCC_ClockConfig+0x1bc>)
 800908e:	4313      	orrs	r3, r2
 8009090:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f003 0301 	and.w	r3, r3, #1
 800909a:	2b00      	cmp	r3, #0
 800909c:	d044      	beq.n	8009128 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d107      	bne.n	80090b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090a6:	4b47      	ldr	r3, [pc, #284]	; (80091c4 <HAL_RCC_ClockConfig+0x1bc>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d119      	bne.n	80090e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090b2:	2301      	movs	r3, #1
 80090b4:	e07f      	b.n	80091b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	2b02      	cmp	r3, #2
 80090bc:	d003      	beq.n	80090c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80090c2:	2b03      	cmp	r3, #3
 80090c4:	d107      	bne.n	80090d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80090c6:	4b3f      	ldr	r3, [pc, #252]	; (80091c4 <HAL_RCC_ClockConfig+0x1bc>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d109      	bne.n	80090e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090d2:	2301      	movs	r3, #1
 80090d4:	e06f      	b.n	80091b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090d6:	4b3b      	ldr	r3, [pc, #236]	; (80091c4 <HAL_RCC_ClockConfig+0x1bc>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f003 0302 	and.w	r3, r3, #2
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d101      	bne.n	80090e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090e2:	2301      	movs	r3, #1
 80090e4:	e067      	b.n	80091b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80090e6:	4b37      	ldr	r3, [pc, #220]	; (80091c4 <HAL_RCC_ClockConfig+0x1bc>)
 80090e8:	689b      	ldr	r3, [r3, #8]
 80090ea:	f023 0203 	bic.w	r2, r3, #3
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	4934      	ldr	r1, [pc, #208]	; (80091c4 <HAL_RCC_ClockConfig+0x1bc>)
 80090f4:	4313      	orrs	r3, r2
 80090f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80090f8:	f7fa ffb4 	bl	8004064 <HAL_GetTick>
 80090fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090fe:	e00a      	b.n	8009116 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009100:	f7fa ffb0 	bl	8004064 <HAL_GetTick>
 8009104:	4602      	mov	r2, r0
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	1ad3      	subs	r3, r2, r3
 800910a:	f241 3288 	movw	r2, #5000	; 0x1388
 800910e:	4293      	cmp	r3, r2
 8009110:	d901      	bls.n	8009116 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009112:	2303      	movs	r3, #3
 8009114:	e04f      	b.n	80091b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009116:	4b2b      	ldr	r3, [pc, #172]	; (80091c4 <HAL_RCC_ClockConfig+0x1bc>)
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	f003 020c 	and.w	r2, r3, #12
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	429a      	cmp	r2, r3
 8009126:	d1eb      	bne.n	8009100 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009128:	4b25      	ldr	r3, [pc, #148]	; (80091c0 <HAL_RCC_ClockConfig+0x1b8>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f003 030f 	and.w	r3, r3, #15
 8009130:	683a      	ldr	r2, [r7, #0]
 8009132:	429a      	cmp	r2, r3
 8009134:	d20c      	bcs.n	8009150 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009136:	4b22      	ldr	r3, [pc, #136]	; (80091c0 <HAL_RCC_ClockConfig+0x1b8>)
 8009138:	683a      	ldr	r2, [r7, #0]
 800913a:	b2d2      	uxtb	r2, r2
 800913c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800913e:	4b20      	ldr	r3, [pc, #128]	; (80091c0 <HAL_RCC_ClockConfig+0x1b8>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f003 030f 	and.w	r3, r3, #15
 8009146:	683a      	ldr	r2, [r7, #0]
 8009148:	429a      	cmp	r2, r3
 800914a:	d001      	beq.n	8009150 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800914c:	2301      	movs	r3, #1
 800914e:	e032      	b.n	80091b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f003 0304 	and.w	r3, r3, #4
 8009158:	2b00      	cmp	r3, #0
 800915a:	d008      	beq.n	800916e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800915c:	4b19      	ldr	r3, [pc, #100]	; (80091c4 <HAL_RCC_ClockConfig+0x1bc>)
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	4916      	ldr	r1, [pc, #88]	; (80091c4 <HAL_RCC_ClockConfig+0x1bc>)
 800916a:	4313      	orrs	r3, r2
 800916c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f003 0308 	and.w	r3, r3, #8
 8009176:	2b00      	cmp	r3, #0
 8009178:	d009      	beq.n	800918e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800917a:	4b12      	ldr	r3, [pc, #72]	; (80091c4 <HAL_RCC_ClockConfig+0x1bc>)
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	691b      	ldr	r3, [r3, #16]
 8009186:	00db      	lsls	r3, r3, #3
 8009188:	490e      	ldr	r1, [pc, #56]	; (80091c4 <HAL_RCC_ClockConfig+0x1bc>)
 800918a:	4313      	orrs	r3, r2
 800918c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800918e:	f000 f887 	bl	80092a0 <HAL_RCC_GetSysClockFreq>
 8009192:	4602      	mov	r2, r0
 8009194:	4b0b      	ldr	r3, [pc, #44]	; (80091c4 <HAL_RCC_ClockConfig+0x1bc>)
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	091b      	lsrs	r3, r3, #4
 800919a:	f003 030f 	and.w	r3, r3, #15
 800919e:	490a      	ldr	r1, [pc, #40]	; (80091c8 <HAL_RCC_ClockConfig+0x1c0>)
 80091a0:	5ccb      	ldrb	r3, [r1, r3]
 80091a2:	fa22 f303 	lsr.w	r3, r2, r3
 80091a6:	4a09      	ldr	r2, [pc, #36]	; (80091cc <HAL_RCC_ClockConfig+0x1c4>)
 80091a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80091aa:	4b09      	ldr	r3, [pc, #36]	; (80091d0 <HAL_RCC_ClockConfig+0x1c8>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7fa fd46 	bl	8003c40 <HAL_InitTick>

  return HAL_OK;
 80091b4:	2300      	movs	r3, #0
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop
 80091c0:	40023c00 	.word	0x40023c00
 80091c4:	40023800 	.word	0x40023800
 80091c8:	08015ab4 	.word	0x08015ab4
 80091cc:	2000000c 	.word	0x2000000c
 80091d0:	20000010 	.word	0x20000010

080091d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80091d4:	b480      	push	{r7}
 80091d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80091d8:	4b03      	ldr	r3, [pc, #12]	; (80091e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80091da:	681b      	ldr	r3, [r3, #0]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr
 80091e6:	bf00      	nop
 80091e8:	2000000c 	.word	0x2000000c

080091ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80091f0:	f7ff fff0 	bl	80091d4 <HAL_RCC_GetHCLKFreq>
 80091f4:	4602      	mov	r2, r0
 80091f6:	4b05      	ldr	r3, [pc, #20]	; (800920c <HAL_RCC_GetPCLK1Freq+0x20>)
 80091f8:	689b      	ldr	r3, [r3, #8]
 80091fa:	0a9b      	lsrs	r3, r3, #10
 80091fc:	f003 0307 	and.w	r3, r3, #7
 8009200:	4903      	ldr	r1, [pc, #12]	; (8009210 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009202:	5ccb      	ldrb	r3, [r1, r3]
 8009204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009208:	4618      	mov	r0, r3
 800920a:	bd80      	pop	{r7, pc}
 800920c:	40023800 	.word	0x40023800
 8009210:	08015ac4 	.word	0x08015ac4

08009214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009218:	f7ff ffdc 	bl	80091d4 <HAL_RCC_GetHCLKFreq>
 800921c:	4602      	mov	r2, r0
 800921e:	4b05      	ldr	r3, [pc, #20]	; (8009234 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009220:	689b      	ldr	r3, [r3, #8]
 8009222:	0b5b      	lsrs	r3, r3, #13
 8009224:	f003 0307 	and.w	r3, r3, #7
 8009228:	4903      	ldr	r1, [pc, #12]	; (8009238 <HAL_RCC_GetPCLK2Freq+0x24>)
 800922a:	5ccb      	ldrb	r3, [r1, r3]
 800922c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009230:	4618      	mov	r0, r3
 8009232:	bd80      	pop	{r7, pc}
 8009234:	40023800 	.word	0x40023800
 8009238:	08015ac4 	.word	0x08015ac4

0800923c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	220f      	movs	r2, #15
 800924a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800924c:	4b12      	ldr	r3, [pc, #72]	; (8009298 <HAL_RCC_GetClockConfig+0x5c>)
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	f003 0203 	and.w	r2, r3, #3
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009258:	4b0f      	ldr	r3, [pc, #60]	; (8009298 <HAL_RCC_GetClockConfig+0x5c>)
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009264:	4b0c      	ldr	r3, [pc, #48]	; (8009298 <HAL_RCC_GetClockConfig+0x5c>)
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009270:	4b09      	ldr	r3, [pc, #36]	; (8009298 <HAL_RCC_GetClockConfig+0x5c>)
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	08db      	lsrs	r3, r3, #3
 8009276:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800927e:	4b07      	ldr	r3, [pc, #28]	; (800929c <HAL_RCC_GetClockConfig+0x60>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f003 020f 	and.w	r2, r3, #15
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	601a      	str	r2, [r3, #0]
}
 800928a:	bf00      	nop
 800928c:	370c      	adds	r7, #12
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr
 8009296:	bf00      	nop
 8009298:	40023800 	.word	0x40023800
 800929c:	40023c00 	.word	0x40023c00

080092a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80092a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092a4:	b0ae      	sub	sp, #184	; 0xb8
 80092a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80092a8:	2300      	movs	r3, #0
 80092aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80092ae:	2300      	movs	r3, #0
 80092b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80092b4:	2300      	movs	r3, #0
 80092b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80092ba:	2300      	movs	r3, #0
 80092bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80092c0:	2300      	movs	r3, #0
 80092c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80092c6:	4bcb      	ldr	r3, [pc, #812]	; (80095f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	f003 030c 	and.w	r3, r3, #12
 80092ce:	2b0c      	cmp	r3, #12
 80092d0:	f200 8204 	bhi.w	80096dc <HAL_RCC_GetSysClockFreq+0x43c>
 80092d4:	a201      	add	r2, pc, #4	; (adr r2, 80092dc <HAL_RCC_GetSysClockFreq+0x3c>)
 80092d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092da:	bf00      	nop
 80092dc:	08009311 	.word	0x08009311
 80092e0:	080096dd 	.word	0x080096dd
 80092e4:	080096dd 	.word	0x080096dd
 80092e8:	080096dd 	.word	0x080096dd
 80092ec:	08009319 	.word	0x08009319
 80092f0:	080096dd 	.word	0x080096dd
 80092f4:	080096dd 	.word	0x080096dd
 80092f8:	080096dd 	.word	0x080096dd
 80092fc:	08009321 	.word	0x08009321
 8009300:	080096dd 	.word	0x080096dd
 8009304:	080096dd 	.word	0x080096dd
 8009308:	080096dd 	.word	0x080096dd
 800930c:	08009511 	.word	0x08009511
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009310:	4bb9      	ldr	r3, [pc, #740]	; (80095f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8009312:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8009316:	e1e5      	b.n	80096e4 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009318:	4bb7      	ldr	r3, [pc, #732]	; (80095f8 <HAL_RCC_GetSysClockFreq+0x358>)
 800931a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800931e:	e1e1      	b.n	80096e4 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009320:	4bb4      	ldr	r3, [pc, #720]	; (80095f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009328:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800932c:	4bb1      	ldr	r3, [pc, #708]	; (80095f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009334:	2b00      	cmp	r3, #0
 8009336:	d071      	beq.n	800941c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009338:	4bae      	ldr	r3, [pc, #696]	; (80095f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	099b      	lsrs	r3, r3, #6
 800933e:	2200      	movs	r2, #0
 8009340:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009344:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8009348:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800934c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009350:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009354:	2300      	movs	r3, #0
 8009356:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800935a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800935e:	4622      	mov	r2, r4
 8009360:	462b      	mov	r3, r5
 8009362:	f04f 0000 	mov.w	r0, #0
 8009366:	f04f 0100 	mov.w	r1, #0
 800936a:	0159      	lsls	r1, r3, #5
 800936c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009370:	0150      	lsls	r0, r2, #5
 8009372:	4602      	mov	r2, r0
 8009374:	460b      	mov	r3, r1
 8009376:	4621      	mov	r1, r4
 8009378:	1a51      	subs	r1, r2, r1
 800937a:	6439      	str	r1, [r7, #64]	; 0x40
 800937c:	4629      	mov	r1, r5
 800937e:	eb63 0301 	sbc.w	r3, r3, r1
 8009382:	647b      	str	r3, [r7, #68]	; 0x44
 8009384:	f04f 0200 	mov.w	r2, #0
 8009388:	f04f 0300 	mov.w	r3, #0
 800938c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8009390:	4649      	mov	r1, r9
 8009392:	018b      	lsls	r3, r1, #6
 8009394:	4641      	mov	r1, r8
 8009396:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800939a:	4641      	mov	r1, r8
 800939c:	018a      	lsls	r2, r1, #6
 800939e:	4641      	mov	r1, r8
 80093a0:	1a51      	subs	r1, r2, r1
 80093a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80093a4:	4649      	mov	r1, r9
 80093a6:	eb63 0301 	sbc.w	r3, r3, r1
 80093aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093ac:	f04f 0200 	mov.w	r2, #0
 80093b0:	f04f 0300 	mov.w	r3, #0
 80093b4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80093b8:	4649      	mov	r1, r9
 80093ba:	00cb      	lsls	r3, r1, #3
 80093bc:	4641      	mov	r1, r8
 80093be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093c2:	4641      	mov	r1, r8
 80093c4:	00ca      	lsls	r2, r1, #3
 80093c6:	4610      	mov	r0, r2
 80093c8:	4619      	mov	r1, r3
 80093ca:	4603      	mov	r3, r0
 80093cc:	4622      	mov	r2, r4
 80093ce:	189b      	adds	r3, r3, r2
 80093d0:	633b      	str	r3, [r7, #48]	; 0x30
 80093d2:	462b      	mov	r3, r5
 80093d4:	460a      	mov	r2, r1
 80093d6:	eb42 0303 	adc.w	r3, r2, r3
 80093da:	637b      	str	r3, [r7, #52]	; 0x34
 80093dc:	f04f 0200 	mov.w	r2, #0
 80093e0:	f04f 0300 	mov.w	r3, #0
 80093e4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80093e8:	4629      	mov	r1, r5
 80093ea:	028b      	lsls	r3, r1, #10
 80093ec:	4621      	mov	r1, r4
 80093ee:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80093f2:	4621      	mov	r1, r4
 80093f4:	028a      	lsls	r2, r1, #10
 80093f6:	4610      	mov	r0, r2
 80093f8:	4619      	mov	r1, r3
 80093fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80093fe:	2200      	movs	r2, #0
 8009400:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009404:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009408:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800940c:	f7f7 fc5c 	bl	8000cc8 <__aeabi_uldivmod>
 8009410:	4602      	mov	r2, r0
 8009412:	460b      	mov	r3, r1
 8009414:	4613      	mov	r3, r2
 8009416:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800941a:	e067      	b.n	80094ec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800941c:	4b75      	ldr	r3, [pc, #468]	; (80095f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	099b      	lsrs	r3, r3, #6
 8009422:	2200      	movs	r2, #0
 8009424:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009428:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800942c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009434:	67bb      	str	r3, [r7, #120]	; 0x78
 8009436:	2300      	movs	r3, #0
 8009438:	67fb      	str	r3, [r7, #124]	; 0x7c
 800943a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800943e:	4622      	mov	r2, r4
 8009440:	462b      	mov	r3, r5
 8009442:	f04f 0000 	mov.w	r0, #0
 8009446:	f04f 0100 	mov.w	r1, #0
 800944a:	0159      	lsls	r1, r3, #5
 800944c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009450:	0150      	lsls	r0, r2, #5
 8009452:	4602      	mov	r2, r0
 8009454:	460b      	mov	r3, r1
 8009456:	4621      	mov	r1, r4
 8009458:	1a51      	subs	r1, r2, r1
 800945a:	62b9      	str	r1, [r7, #40]	; 0x28
 800945c:	4629      	mov	r1, r5
 800945e:	eb63 0301 	sbc.w	r3, r3, r1
 8009462:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009464:	f04f 0200 	mov.w	r2, #0
 8009468:	f04f 0300 	mov.w	r3, #0
 800946c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8009470:	4649      	mov	r1, r9
 8009472:	018b      	lsls	r3, r1, #6
 8009474:	4641      	mov	r1, r8
 8009476:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800947a:	4641      	mov	r1, r8
 800947c:	018a      	lsls	r2, r1, #6
 800947e:	4641      	mov	r1, r8
 8009480:	ebb2 0a01 	subs.w	sl, r2, r1
 8009484:	4649      	mov	r1, r9
 8009486:	eb63 0b01 	sbc.w	fp, r3, r1
 800948a:	f04f 0200 	mov.w	r2, #0
 800948e:	f04f 0300 	mov.w	r3, #0
 8009492:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009496:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800949a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800949e:	4692      	mov	sl, r2
 80094a0:	469b      	mov	fp, r3
 80094a2:	4623      	mov	r3, r4
 80094a4:	eb1a 0303 	adds.w	r3, sl, r3
 80094a8:	623b      	str	r3, [r7, #32]
 80094aa:	462b      	mov	r3, r5
 80094ac:	eb4b 0303 	adc.w	r3, fp, r3
 80094b0:	627b      	str	r3, [r7, #36]	; 0x24
 80094b2:	f04f 0200 	mov.w	r2, #0
 80094b6:	f04f 0300 	mov.w	r3, #0
 80094ba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80094be:	4629      	mov	r1, r5
 80094c0:	028b      	lsls	r3, r1, #10
 80094c2:	4621      	mov	r1, r4
 80094c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80094c8:	4621      	mov	r1, r4
 80094ca:	028a      	lsls	r2, r1, #10
 80094cc:	4610      	mov	r0, r2
 80094ce:	4619      	mov	r1, r3
 80094d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80094d4:	2200      	movs	r2, #0
 80094d6:	673b      	str	r3, [r7, #112]	; 0x70
 80094d8:	677a      	str	r2, [r7, #116]	; 0x74
 80094da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80094de:	f7f7 fbf3 	bl	8000cc8 <__aeabi_uldivmod>
 80094e2:	4602      	mov	r2, r0
 80094e4:	460b      	mov	r3, r1
 80094e6:	4613      	mov	r3, r2
 80094e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80094ec:	4b41      	ldr	r3, [pc, #260]	; (80095f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	0c1b      	lsrs	r3, r3, #16
 80094f2:	f003 0303 	and.w	r3, r3, #3
 80094f6:	3301      	adds	r3, #1
 80094f8:	005b      	lsls	r3, r3, #1
 80094fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80094fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009502:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009506:	fbb2 f3f3 	udiv	r3, r2, r3
 800950a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800950e:	e0e9      	b.n	80096e4 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009510:	4b38      	ldr	r3, [pc, #224]	; (80095f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009518:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800951c:	4b35      	ldr	r3, [pc, #212]	; (80095f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009524:	2b00      	cmp	r3, #0
 8009526:	d069      	beq.n	80095fc <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009528:	4b32      	ldr	r3, [pc, #200]	; (80095f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	099b      	lsrs	r3, r3, #6
 800952e:	2200      	movs	r2, #0
 8009530:	66bb      	str	r3, [r7, #104]	; 0x68
 8009532:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009534:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800953a:	663b      	str	r3, [r7, #96]	; 0x60
 800953c:	2300      	movs	r3, #0
 800953e:	667b      	str	r3, [r7, #100]	; 0x64
 8009540:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8009544:	4622      	mov	r2, r4
 8009546:	462b      	mov	r3, r5
 8009548:	f04f 0000 	mov.w	r0, #0
 800954c:	f04f 0100 	mov.w	r1, #0
 8009550:	0159      	lsls	r1, r3, #5
 8009552:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009556:	0150      	lsls	r0, r2, #5
 8009558:	4602      	mov	r2, r0
 800955a:	460b      	mov	r3, r1
 800955c:	4621      	mov	r1, r4
 800955e:	1a51      	subs	r1, r2, r1
 8009560:	61b9      	str	r1, [r7, #24]
 8009562:	4629      	mov	r1, r5
 8009564:	eb63 0301 	sbc.w	r3, r3, r1
 8009568:	61fb      	str	r3, [r7, #28]
 800956a:	f04f 0200 	mov.w	r2, #0
 800956e:	f04f 0300 	mov.w	r3, #0
 8009572:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8009576:	4659      	mov	r1, fp
 8009578:	018b      	lsls	r3, r1, #6
 800957a:	4651      	mov	r1, sl
 800957c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009580:	4651      	mov	r1, sl
 8009582:	018a      	lsls	r2, r1, #6
 8009584:	4651      	mov	r1, sl
 8009586:	ebb2 0801 	subs.w	r8, r2, r1
 800958a:	4659      	mov	r1, fp
 800958c:	eb63 0901 	sbc.w	r9, r3, r1
 8009590:	f04f 0200 	mov.w	r2, #0
 8009594:	f04f 0300 	mov.w	r3, #0
 8009598:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800959c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80095a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80095a4:	4690      	mov	r8, r2
 80095a6:	4699      	mov	r9, r3
 80095a8:	4623      	mov	r3, r4
 80095aa:	eb18 0303 	adds.w	r3, r8, r3
 80095ae:	613b      	str	r3, [r7, #16]
 80095b0:	462b      	mov	r3, r5
 80095b2:	eb49 0303 	adc.w	r3, r9, r3
 80095b6:	617b      	str	r3, [r7, #20]
 80095b8:	f04f 0200 	mov.w	r2, #0
 80095bc:	f04f 0300 	mov.w	r3, #0
 80095c0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80095c4:	4629      	mov	r1, r5
 80095c6:	028b      	lsls	r3, r1, #10
 80095c8:	4621      	mov	r1, r4
 80095ca:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80095ce:	4621      	mov	r1, r4
 80095d0:	028a      	lsls	r2, r1, #10
 80095d2:	4610      	mov	r0, r2
 80095d4:	4619      	mov	r1, r3
 80095d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80095da:	2200      	movs	r2, #0
 80095dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80095de:	65fa      	str	r2, [r7, #92]	; 0x5c
 80095e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80095e4:	f7f7 fb70 	bl	8000cc8 <__aeabi_uldivmod>
 80095e8:	4602      	mov	r2, r0
 80095ea:	460b      	mov	r3, r1
 80095ec:	4613      	mov	r3, r2
 80095ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80095f2:	e063      	b.n	80096bc <HAL_RCC_GetSysClockFreq+0x41c>
 80095f4:	40023800 	.word	0x40023800
 80095f8:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80095fc:	4b3d      	ldr	r3, [pc, #244]	; (80096f4 <HAL_RCC_GetSysClockFreq+0x454>)
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	099b      	lsrs	r3, r3, #6
 8009602:	2200      	movs	r2, #0
 8009604:	4618      	mov	r0, r3
 8009606:	4611      	mov	r1, r2
 8009608:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800960c:	653b      	str	r3, [r7, #80]	; 0x50
 800960e:	2300      	movs	r3, #0
 8009610:	657b      	str	r3, [r7, #84]	; 0x54
 8009612:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8009616:	4642      	mov	r2, r8
 8009618:	464b      	mov	r3, r9
 800961a:	f04f 0000 	mov.w	r0, #0
 800961e:	f04f 0100 	mov.w	r1, #0
 8009622:	0159      	lsls	r1, r3, #5
 8009624:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009628:	0150      	lsls	r0, r2, #5
 800962a:	4602      	mov	r2, r0
 800962c:	460b      	mov	r3, r1
 800962e:	4641      	mov	r1, r8
 8009630:	1a51      	subs	r1, r2, r1
 8009632:	60b9      	str	r1, [r7, #8]
 8009634:	4649      	mov	r1, r9
 8009636:	eb63 0301 	sbc.w	r3, r3, r1
 800963a:	60fb      	str	r3, [r7, #12]
 800963c:	f04f 0200 	mov.w	r2, #0
 8009640:	f04f 0300 	mov.w	r3, #0
 8009644:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8009648:	4659      	mov	r1, fp
 800964a:	018b      	lsls	r3, r1, #6
 800964c:	4651      	mov	r1, sl
 800964e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009652:	4651      	mov	r1, sl
 8009654:	018a      	lsls	r2, r1, #6
 8009656:	4651      	mov	r1, sl
 8009658:	1a54      	subs	r4, r2, r1
 800965a:	4659      	mov	r1, fp
 800965c:	eb63 0501 	sbc.w	r5, r3, r1
 8009660:	f04f 0200 	mov.w	r2, #0
 8009664:	f04f 0300 	mov.w	r3, #0
 8009668:	00eb      	lsls	r3, r5, #3
 800966a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800966e:	00e2      	lsls	r2, r4, #3
 8009670:	4614      	mov	r4, r2
 8009672:	461d      	mov	r5, r3
 8009674:	4643      	mov	r3, r8
 8009676:	18e3      	adds	r3, r4, r3
 8009678:	603b      	str	r3, [r7, #0]
 800967a:	464b      	mov	r3, r9
 800967c:	eb45 0303 	adc.w	r3, r5, r3
 8009680:	607b      	str	r3, [r7, #4]
 8009682:	f04f 0200 	mov.w	r2, #0
 8009686:	f04f 0300 	mov.w	r3, #0
 800968a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800968e:	4629      	mov	r1, r5
 8009690:	028b      	lsls	r3, r1, #10
 8009692:	4621      	mov	r1, r4
 8009694:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009698:	4621      	mov	r1, r4
 800969a:	028a      	lsls	r2, r1, #10
 800969c:	4610      	mov	r0, r2
 800969e:	4619      	mov	r1, r3
 80096a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80096a4:	2200      	movs	r2, #0
 80096a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80096a8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80096aa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80096ae:	f7f7 fb0b 	bl	8000cc8 <__aeabi_uldivmod>
 80096b2:	4602      	mov	r2, r0
 80096b4:	460b      	mov	r3, r1
 80096b6:	4613      	mov	r3, r2
 80096b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80096bc:	4b0d      	ldr	r3, [pc, #52]	; (80096f4 <HAL_RCC_GetSysClockFreq+0x454>)
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	0f1b      	lsrs	r3, r3, #28
 80096c2:	f003 0307 	and.w	r3, r3, #7
 80096c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80096ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80096ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80096d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80096d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80096da:	e003      	b.n	80096e4 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80096dc:	4b06      	ldr	r3, [pc, #24]	; (80096f8 <HAL_RCC_GetSysClockFreq+0x458>)
 80096de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80096e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80096e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	37b8      	adds	r7, #184	; 0xb8
 80096ec:	46bd      	mov	sp, r7
 80096ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80096f2:	bf00      	nop
 80096f4:	40023800 	.word	0x40023800
 80096f8:	00f42400 	.word	0x00f42400

080096fc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b086      	sub	sp, #24
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d101      	bne.n	800970e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800970a:	2301      	movs	r3, #1
 800970c:	e28d      	b.n	8009c2a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f003 0301 	and.w	r3, r3, #1
 8009716:	2b00      	cmp	r3, #0
 8009718:	f000 8083 	beq.w	8009822 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800971c:	4b94      	ldr	r3, [pc, #592]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	f003 030c 	and.w	r3, r3, #12
 8009724:	2b04      	cmp	r3, #4
 8009726:	d019      	beq.n	800975c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009728:	4b91      	ldr	r3, [pc, #580]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009730:	2b08      	cmp	r3, #8
 8009732:	d106      	bne.n	8009742 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009734:	4b8e      	ldr	r3, [pc, #568]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800973c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009740:	d00c      	beq.n	800975c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009742:	4b8b      	ldr	r3, [pc, #556]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800974a:	2b0c      	cmp	r3, #12
 800974c:	d112      	bne.n	8009774 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800974e:	4b88      	ldr	r3, [pc, #544]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009756:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800975a:	d10b      	bne.n	8009774 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800975c:	4b84      	ldr	r3, [pc, #528]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009764:	2b00      	cmp	r3, #0
 8009766:	d05b      	beq.n	8009820 <HAL_RCC_OscConfig+0x124>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d157      	bne.n	8009820 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8009770:	2301      	movs	r3, #1
 8009772:	e25a      	b.n	8009c2a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800977c:	d106      	bne.n	800978c <HAL_RCC_OscConfig+0x90>
 800977e:	4b7c      	ldr	r3, [pc, #496]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a7b      	ldr	r2, [pc, #492]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 8009784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009788:	6013      	str	r3, [r2, #0]
 800978a:	e01d      	b.n	80097c8 <HAL_RCC_OscConfig+0xcc>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	685b      	ldr	r3, [r3, #4]
 8009790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009794:	d10c      	bne.n	80097b0 <HAL_RCC_OscConfig+0xb4>
 8009796:	4b76      	ldr	r3, [pc, #472]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a75      	ldr	r2, [pc, #468]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 800979c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80097a0:	6013      	str	r3, [r2, #0]
 80097a2:	4b73      	ldr	r3, [pc, #460]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4a72      	ldr	r2, [pc, #456]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 80097a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097ac:	6013      	str	r3, [r2, #0]
 80097ae:	e00b      	b.n	80097c8 <HAL_RCC_OscConfig+0xcc>
 80097b0:	4b6f      	ldr	r3, [pc, #444]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a6e      	ldr	r2, [pc, #440]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 80097b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097ba:	6013      	str	r3, [r2, #0]
 80097bc:	4b6c      	ldr	r3, [pc, #432]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a6b      	ldr	r2, [pc, #428]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 80097c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80097c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d013      	beq.n	80097f8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097d0:	f7fa fc48 	bl	8004064 <HAL_GetTick>
 80097d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80097d6:	e008      	b.n	80097ea <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80097d8:	f7fa fc44 	bl	8004064 <HAL_GetTick>
 80097dc:	4602      	mov	r2, r0
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	1ad3      	subs	r3, r2, r3
 80097e2:	2b64      	cmp	r3, #100	; 0x64
 80097e4:	d901      	bls.n	80097ea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80097e6:	2303      	movs	r3, #3
 80097e8:	e21f      	b.n	8009c2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80097ea:	4b61      	ldr	r3, [pc, #388]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d0f0      	beq.n	80097d8 <HAL_RCC_OscConfig+0xdc>
 80097f6:	e014      	b.n	8009822 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097f8:	f7fa fc34 	bl	8004064 <HAL_GetTick>
 80097fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80097fe:	e008      	b.n	8009812 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009800:	f7fa fc30 	bl	8004064 <HAL_GetTick>
 8009804:	4602      	mov	r2, r0
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	1ad3      	subs	r3, r2, r3
 800980a:	2b64      	cmp	r3, #100	; 0x64
 800980c:	d901      	bls.n	8009812 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800980e:	2303      	movs	r3, #3
 8009810:	e20b      	b.n	8009c2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009812:	4b57      	ldr	r3, [pc, #348]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800981a:	2b00      	cmp	r3, #0
 800981c:	d1f0      	bne.n	8009800 <HAL_RCC_OscConfig+0x104>
 800981e:	e000      	b.n	8009822 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f003 0302 	and.w	r3, r3, #2
 800982a:	2b00      	cmp	r3, #0
 800982c:	d06f      	beq.n	800990e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800982e:	4b50      	ldr	r3, [pc, #320]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 8009830:	689b      	ldr	r3, [r3, #8]
 8009832:	f003 030c 	and.w	r3, r3, #12
 8009836:	2b00      	cmp	r3, #0
 8009838:	d017      	beq.n	800986a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800983a:	4b4d      	ldr	r3, [pc, #308]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 800983c:	689b      	ldr	r3, [r3, #8]
 800983e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009842:	2b08      	cmp	r3, #8
 8009844:	d105      	bne.n	8009852 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009846:	4b4a      	ldr	r3, [pc, #296]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800984e:	2b00      	cmp	r3, #0
 8009850:	d00b      	beq.n	800986a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009852:	4b47      	ldr	r3, [pc, #284]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800985a:	2b0c      	cmp	r3, #12
 800985c:	d11c      	bne.n	8009898 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800985e:	4b44      	ldr	r3, [pc, #272]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009866:	2b00      	cmp	r3, #0
 8009868:	d116      	bne.n	8009898 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800986a:	4b41      	ldr	r3, [pc, #260]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f003 0302 	and.w	r3, r3, #2
 8009872:	2b00      	cmp	r3, #0
 8009874:	d005      	beq.n	8009882 <HAL_RCC_OscConfig+0x186>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	2b01      	cmp	r3, #1
 800987c:	d001      	beq.n	8009882 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800987e:	2301      	movs	r3, #1
 8009880:	e1d3      	b.n	8009c2a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009882:	4b3b      	ldr	r3, [pc, #236]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	00db      	lsls	r3, r3, #3
 8009890:	4937      	ldr	r1, [pc, #220]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 8009892:	4313      	orrs	r3, r2
 8009894:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009896:	e03a      	b.n	800990e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d020      	beq.n	80098e2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80098a0:	4b34      	ldr	r3, [pc, #208]	; (8009974 <HAL_RCC_OscConfig+0x278>)
 80098a2:	2201      	movs	r2, #1
 80098a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098a6:	f7fa fbdd 	bl	8004064 <HAL_GetTick>
 80098aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80098ac:	e008      	b.n	80098c0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80098ae:	f7fa fbd9 	bl	8004064 <HAL_GetTick>
 80098b2:	4602      	mov	r2, r0
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	1ad3      	subs	r3, r2, r3
 80098b8:	2b02      	cmp	r3, #2
 80098ba:	d901      	bls.n	80098c0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80098bc:	2303      	movs	r3, #3
 80098be:	e1b4      	b.n	8009c2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80098c0:	4b2b      	ldr	r3, [pc, #172]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f003 0302 	and.w	r3, r3, #2
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d0f0      	beq.n	80098ae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098cc:	4b28      	ldr	r3, [pc, #160]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	691b      	ldr	r3, [r3, #16]
 80098d8:	00db      	lsls	r3, r3, #3
 80098da:	4925      	ldr	r1, [pc, #148]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 80098dc:	4313      	orrs	r3, r2
 80098de:	600b      	str	r3, [r1, #0]
 80098e0:	e015      	b.n	800990e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80098e2:	4b24      	ldr	r3, [pc, #144]	; (8009974 <HAL_RCC_OscConfig+0x278>)
 80098e4:	2200      	movs	r2, #0
 80098e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098e8:	f7fa fbbc 	bl	8004064 <HAL_GetTick>
 80098ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80098ee:	e008      	b.n	8009902 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80098f0:	f7fa fbb8 	bl	8004064 <HAL_GetTick>
 80098f4:	4602      	mov	r2, r0
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	1ad3      	subs	r3, r2, r3
 80098fa:	2b02      	cmp	r3, #2
 80098fc:	d901      	bls.n	8009902 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80098fe:	2303      	movs	r3, #3
 8009900:	e193      	b.n	8009c2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009902:	4b1b      	ldr	r3, [pc, #108]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f003 0302 	and.w	r3, r3, #2
 800990a:	2b00      	cmp	r3, #0
 800990c:	d1f0      	bne.n	80098f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f003 0308 	and.w	r3, r3, #8
 8009916:	2b00      	cmp	r3, #0
 8009918:	d036      	beq.n	8009988 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	695b      	ldr	r3, [r3, #20]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d016      	beq.n	8009950 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009922:	4b15      	ldr	r3, [pc, #84]	; (8009978 <HAL_RCC_OscConfig+0x27c>)
 8009924:	2201      	movs	r2, #1
 8009926:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009928:	f7fa fb9c 	bl	8004064 <HAL_GetTick>
 800992c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800992e:	e008      	b.n	8009942 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009930:	f7fa fb98 	bl	8004064 <HAL_GetTick>
 8009934:	4602      	mov	r2, r0
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	1ad3      	subs	r3, r2, r3
 800993a:	2b02      	cmp	r3, #2
 800993c:	d901      	bls.n	8009942 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800993e:	2303      	movs	r3, #3
 8009940:	e173      	b.n	8009c2a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009942:	4b0b      	ldr	r3, [pc, #44]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 8009944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009946:	f003 0302 	and.w	r3, r3, #2
 800994a:	2b00      	cmp	r3, #0
 800994c:	d0f0      	beq.n	8009930 <HAL_RCC_OscConfig+0x234>
 800994e:	e01b      	b.n	8009988 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009950:	4b09      	ldr	r3, [pc, #36]	; (8009978 <HAL_RCC_OscConfig+0x27c>)
 8009952:	2200      	movs	r2, #0
 8009954:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009956:	f7fa fb85 	bl	8004064 <HAL_GetTick>
 800995a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800995c:	e00e      	b.n	800997c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800995e:	f7fa fb81 	bl	8004064 <HAL_GetTick>
 8009962:	4602      	mov	r2, r0
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	1ad3      	subs	r3, r2, r3
 8009968:	2b02      	cmp	r3, #2
 800996a:	d907      	bls.n	800997c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800996c:	2303      	movs	r3, #3
 800996e:	e15c      	b.n	8009c2a <HAL_RCC_OscConfig+0x52e>
 8009970:	40023800 	.word	0x40023800
 8009974:	42470000 	.word	0x42470000
 8009978:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800997c:	4b8a      	ldr	r3, [pc, #552]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 800997e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009980:	f003 0302 	and.w	r3, r3, #2
 8009984:	2b00      	cmp	r3, #0
 8009986:	d1ea      	bne.n	800995e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f003 0304 	and.w	r3, r3, #4
 8009990:	2b00      	cmp	r3, #0
 8009992:	f000 8097 	beq.w	8009ac4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009996:	2300      	movs	r3, #0
 8009998:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800999a:	4b83      	ldr	r3, [pc, #524]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 800999c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800999e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d10f      	bne.n	80099c6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80099a6:	2300      	movs	r3, #0
 80099a8:	60bb      	str	r3, [r7, #8]
 80099aa:	4b7f      	ldr	r3, [pc, #508]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 80099ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ae:	4a7e      	ldr	r2, [pc, #504]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 80099b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099b4:	6413      	str	r3, [r2, #64]	; 0x40
 80099b6:	4b7c      	ldr	r3, [pc, #496]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 80099b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099be:	60bb      	str	r3, [r7, #8]
 80099c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80099c2:	2301      	movs	r3, #1
 80099c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099c6:	4b79      	ldr	r3, [pc, #484]	; (8009bac <HAL_RCC_OscConfig+0x4b0>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d118      	bne.n	8009a04 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80099d2:	4b76      	ldr	r3, [pc, #472]	; (8009bac <HAL_RCC_OscConfig+0x4b0>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a75      	ldr	r2, [pc, #468]	; (8009bac <HAL_RCC_OscConfig+0x4b0>)
 80099d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80099de:	f7fa fb41 	bl	8004064 <HAL_GetTick>
 80099e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099e4:	e008      	b.n	80099f8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80099e6:	f7fa fb3d 	bl	8004064 <HAL_GetTick>
 80099ea:	4602      	mov	r2, r0
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	1ad3      	subs	r3, r2, r3
 80099f0:	2b02      	cmp	r3, #2
 80099f2:	d901      	bls.n	80099f8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80099f4:	2303      	movs	r3, #3
 80099f6:	e118      	b.n	8009c2a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099f8:	4b6c      	ldr	r3, [pc, #432]	; (8009bac <HAL_RCC_OscConfig+0x4b0>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d0f0      	beq.n	80099e6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d106      	bne.n	8009a1a <HAL_RCC_OscConfig+0x31e>
 8009a0c:	4b66      	ldr	r3, [pc, #408]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 8009a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a10:	4a65      	ldr	r2, [pc, #404]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 8009a12:	f043 0301 	orr.w	r3, r3, #1
 8009a16:	6713      	str	r3, [r2, #112]	; 0x70
 8009a18:	e01c      	b.n	8009a54 <HAL_RCC_OscConfig+0x358>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	689b      	ldr	r3, [r3, #8]
 8009a1e:	2b05      	cmp	r3, #5
 8009a20:	d10c      	bne.n	8009a3c <HAL_RCC_OscConfig+0x340>
 8009a22:	4b61      	ldr	r3, [pc, #388]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 8009a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a26:	4a60      	ldr	r2, [pc, #384]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 8009a28:	f043 0304 	orr.w	r3, r3, #4
 8009a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8009a2e:	4b5e      	ldr	r3, [pc, #376]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 8009a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a32:	4a5d      	ldr	r2, [pc, #372]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 8009a34:	f043 0301 	orr.w	r3, r3, #1
 8009a38:	6713      	str	r3, [r2, #112]	; 0x70
 8009a3a:	e00b      	b.n	8009a54 <HAL_RCC_OscConfig+0x358>
 8009a3c:	4b5a      	ldr	r3, [pc, #360]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 8009a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a40:	4a59      	ldr	r2, [pc, #356]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 8009a42:	f023 0301 	bic.w	r3, r3, #1
 8009a46:	6713      	str	r3, [r2, #112]	; 0x70
 8009a48:	4b57      	ldr	r3, [pc, #348]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 8009a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a4c:	4a56      	ldr	r2, [pc, #344]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 8009a4e:	f023 0304 	bic.w	r3, r3, #4
 8009a52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d015      	beq.n	8009a88 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a5c:	f7fa fb02 	bl	8004064 <HAL_GetTick>
 8009a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a62:	e00a      	b.n	8009a7a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009a64:	f7fa fafe 	bl	8004064 <HAL_GetTick>
 8009a68:	4602      	mov	r2, r0
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	1ad3      	subs	r3, r2, r3
 8009a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d901      	bls.n	8009a7a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8009a76:	2303      	movs	r3, #3
 8009a78:	e0d7      	b.n	8009c2a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a7a:	4b4b      	ldr	r3, [pc, #300]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 8009a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a7e:	f003 0302 	and.w	r3, r3, #2
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d0ee      	beq.n	8009a64 <HAL_RCC_OscConfig+0x368>
 8009a86:	e014      	b.n	8009ab2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a88:	f7fa faec 	bl	8004064 <HAL_GetTick>
 8009a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009a8e:	e00a      	b.n	8009aa6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009a90:	f7fa fae8 	bl	8004064 <HAL_GetTick>
 8009a94:	4602      	mov	r2, r0
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	1ad3      	subs	r3, r2, r3
 8009a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d901      	bls.n	8009aa6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8009aa2:	2303      	movs	r3, #3
 8009aa4:	e0c1      	b.n	8009c2a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009aa6:	4b40      	ldr	r3, [pc, #256]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 8009aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aaa:	f003 0302 	and.w	r3, r3, #2
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d1ee      	bne.n	8009a90 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009ab2:	7dfb      	ldrb	r3, [r7, #23]
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d105      	bne.n	8009ac4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009ab8:	4b3b      	ldr	r3, [pc, #236]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 8009aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009abc:	4a3a      	ldr	r2, [pc, #232]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 8009abe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ac2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	699b      	ldr	r3, [r3, #24]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	f000 80ad 	beq.w	8009c28 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009ace:	4b36      	ldr	r3, [pc, #216]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	f003 030c 	and.w	r3, r3, #12
 8009ad6:	2b08      	cmp	r3, #8
 8009ad8:	d060      	beq.n	8009b9c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	699b      	ldr	r3, [r3, #24]
 8009ade:	2b02      	cmp	r3, #2
 8009ae0:	d145      	bne.n	8009b6e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ae2:	4b33      	ldr	r3, [pc, #204]	; (8009bb0 <HAL_RCC_OscConfig+0x4b4>)
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ae8:	f7fa fabc 	bl	8004064 <HAL_GetTick>
 8009aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009aee:	e008      	b.n	8009b02 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009af0:	f7fa fab8 	bl	8004064 <HAL_GetTick>
 8009af4:	4602      	mov	r2, r0
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	1ad3      	subs	r3, r2, r3
 8009afa:	2b02      	cmp	r3, #2
 8009afc:	d901      	bls.n	8009b02 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8009afe:	2303      	movs	r3, #3
 8009b00:	e093      	b.n	8009c2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b02:	4b29      	ldr	r3, [pc, #164]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d1f0      	bne.n	8009af0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	69da      	ldr	r2, [r3, #28]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6a1b      	ldr	r3, [r3, #32]
 8009b16:	431a      	orrs	r2, r3
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1c:	019b      	lsls	r3, r3, #6
 8009b1e:	431a      	orrs	r2, r3
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b24:	085b      	lsrs	r3, r3, #1
 8009b26:	3b01      	subs	r3, #1
 8009b28:	041b      	lsls	r3, r3, #16
 8009b2a:	431a      	orrs	r2, r3
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b30:	061b      	lsls	r3, r3, #24
 8009b32:	431a      	orrs	r2, r3
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b38:	071b      	lsls	r3, r3, #28
 8009b3a:	491b      	ldr	r1, [pc, #108]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009b40:	4b1b      	ldr	r3, [pc, #108]	; (8009bb0 <HAL_RCC_OscConfig+0x4b4>)
 8009b42:	2201      	movs	r2, #1
 8009b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b46:	f7fa fa8d 	bl	8004064 <HAL_GetTick>
 8009b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b4c:	e008      	b.n	8009b60 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b4e:	f7fa fa89 	bl	8004064 <HAL_GetTick>
 8009b52:	4602      	mov	r2, r0
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	1ad3      	subs	r3, r2, r3
 8009b58:	2b02      	cmp	r3, #2
 8009b5a:	d901      	bls.n	8009b60 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8009b5c:	2303      	movs	r3, #3
 8009b5e:	e064      	b.n	8009c2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b60:	4b11      	ldr	r3, [pc, #68]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d0f0      	beq.n	8009b4e <HAL_RCC_OscConfig+0x452>
 8009b6c:	e05c      	b.n	8009c28 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b6e:	4b10      	ldr	r3, [pc, #64]	; (8009bb0 <HAL_RCC_OscConfig+0x4b4>)
 8009b70:	2200      	movs	r2, #0
 8009b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b74:	f7fa fa76 	bl	8004064 <HAL_GetTick>
 8009b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b7a:	e008      	b.n	8009b8e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b7c:	f7fa fa72 	bl	8004064 <HAL_GetTick>
 8009b80:	4602      	mov	r2, r0
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	1ad3      	subs	r3, r2, r3
 8009b86:	2b02      	cmp	r3, #2
 8009b88:	d901      	bls.n	8009b8e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8009b8a:	2303      	movs	r3, #3
 8009b8c:	e04d      	b.n	8009c2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b8e:	4b06      	ldr	r3, [pc, #24]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d1f0      	bne.n	8009b7c <HAL_RCC_OscConfig+0x480>
 8009b9a:	e045      	b.n	8009c28 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	699b      	ldr	r3, [r3, #24]
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d107      	bne.n	8009bb4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	e040      	b.n	8009c2a <HAL_RCC_OscConfig+0x52e>
 8009ba8:	40023800 	.word	0x40023800
 8009bac:	40007000 	.word	0x40007000
 8009bb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009bb4:	4b1f      	ldr	r3, [pc, #124]	; (8009c34 <HAL_RCC_OscConfig+0x538>)
 8009bb6:	685b      	ldr	r3, [r3, #4]
 8009bb8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	699b      	ldr	r3, [r3, #24]
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d030      	beq.n	8009c24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d129      	bne.n	8009c24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d122      	bne.n	8009c24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009bde:	68fa      	ldr	r2, [r7, #12]
 8009be0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009be4:	4013      	ands	r3, r2
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009bea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d119      	bne.n	8009c24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bfa:	085b      	lsrs	r3, r3, #1
 8009bfc:	3b01      	subs	r3, #1
 8009bfe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d10f      	bne.n	8009c24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d107      	bne.n	8009c24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c1e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d001      	beq.n	8009c28 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8009c24:	2301      	movs	r3, #1
 8009c26:	e000      	b.n	8009c2a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8009c28:	2300      	movs	r3, #0
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3718      	adds	r7, #24
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
 8009c32:	bf00      	nop
 8009c34:	40023800 	.word	0x40023800

08009c38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d101      	bne.n	8009c4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009c46:	2301      	movs	r3, #1
 8009c48:	e07b      	b.n	8009d42 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d108      	bne.n	8009c64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	685b      	ldr	r3, [r3, #4]
 8009c56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c5a:	d009      	beq.n	8009c70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	61da      	str	r2, [r3, #28]
 8009c62:	e005      	b.n	8009c70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2200      	movs	r2, #0
 8009c68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2200      	movs	r2, #0
 8009c74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d106      	bne.n	8009c90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2200      	movs	r2, #0
 8009c86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f7f9 fe1e 	bl	80038cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2202      	movs	r2, #2
 8009c94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ca6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	689b      	ldr	r3, [r3, #8]
 8009cb4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009cb8:	431a      	orrs	r2, r3
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009cc2:	431a      	orrs	r2, r3
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	691b      	ldr	r3, [r3, #16]
 8009cc8:	f003 0302 	and.w	r3, r3, #2
 8009ccc:	431a      	orrs	r2, r3
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	695b      	ldr	r3, [r3, #20]
 8009cd2:	f003 0301 	and.w	r3, r3, #1
 8009cd6:	431a      	orrs	r2, r3
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	699b      	ldr	r3, [r3, #24]
 8009cdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ce0:	431a      	orrs	r2, r3
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	69db      	ldr	r3, [r3, #28]
 8009ce6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009cea:	431a      	orrs	r2, r3
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6a1b      	ldr	r3, [r3, #32]
 8009cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cf4:	ea42 0103 	orr.w	r1, r2, r3
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cfc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	430a      	orrs	r2, r1
 8009d06:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	699b      	ldr	r3, [r3, #24]
 8009d0c:	0c1b      	lsrs	r3, r3, #16
 8009d0e:	f003 0104 	and.w	r1, r3, #4
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d16:	f003 0210 	and.w	r2, r3, #16
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	430a      	orrs	r2, r1
 8009d20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	69da      	ldr	r2, [r3, #28]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009d30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2200      	movs	r2, #0
 8009d36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009d40:	2300      	movs	r3, #0
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3708      	adds	r7, #8
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}

08009d4a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d4a:	b580      	push	{r7, lr}
 8009d4c:	b088      	sub	sp, #32
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	60f8      	str	r0, [r7, #12]
 8009d52:	60b9      	str	r1, [r7, #8]
 8009d54:	603b      	str	r3, [r7, #0]
 8009d56:	4613      	mov	r3, r2
 8009d58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	d101      	bne.n	8009d6c <HAL_SPI_Transmit+0x22>
 8009d68:	2302      	movs	r3, #2
 8009d6a:	e126      	b.n	8009fba <HAL_SPI_Transmit+0x270>
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2201      	movs	r2, #1
 8009d70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009d74:	f7fa f976 	bl	8004064 <HAL_GetTick>
 8009d78:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009d7a:	88fb      	ldrh	r3, [r7, #6]
 8009d7c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	d002      	beq.n	8009d90 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009d8a:	2302      	movs	r3, #2
 8009d8c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009d8e:	e10b      	b.n	8009fa8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d002      	beq.n	8009d9c <HAL_SPI_Transmit+0x52>
 8009d96:	88fb      	ldrh	r3, [r7, #6]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d102      	bne.n	8009da2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009da0:	e102      	b.n	8009fa8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2203      	movs	r2, #3
 8009da6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2200      	movs	r2, #0
 8009dae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	68ba      	ldr	r2, [r7, #8]
 8009db4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	88fa      	ldrh	r2, [r7, #6]
 8009dba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	88fa      	ldrh	r2, [r7, #6]
 8009dc0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	689b      	ldr	r3, [r3, #8]
 8009de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009de8:	d10f      	bne.n	8009e0a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	681a      	ldr	r2, [r3, #0]
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009df8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009e08:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e14:	2b40      	cmp	r3, #64	; 0x40
 8009e16:	d007      	beq.n	8009e28 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	681a      	ldr	r2, [r3, #0]
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e30:	d14b      	bne.n	8009eca <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d002      	beq.n	8009e40 <HAL_SPI_Transmit+0xf6>
 8009e3a:	8afb      	ldrh	r3, [r7, #22]
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	d13e      	bne.n	8009ebe <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e44:	881a      	ldrh	r2, [r3, #0]
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e50:	1c9a      	adds	r2, r3, #2
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	3b01      	subs	r3, #1
 8009e5e:	b29a      	uxth	r2, r3
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009e64:	e02b      	b.n	8009ebe <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	689b      	ldr	r3, [r3, #8]
 8009e6c:	f003 0302 	and.w	r3, r3, #2
 8009e70:	2b02      	cmp	r3, #2
 8009e72:	d112      	bne.n	8009e9a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e78:	881a      	ldrh	r2, [r3, #0]
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e84:	1c9a      	adds	r2, r3, #2
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e8e:	b29b      	uxth	r3, r3
 8009e90:	3b01      	subs	r3, #1
 8009e92:	b29a      	uxth	r2, r3
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	86da      	strh	r2, [r3, #54]	; 0x36
 8009e98:	e011      	b.n	8009ebe <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e9a:	f7fa f8e3 	bl	8004064 <HAL_GetTick>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	69bb      	ldr	r3, [r7, #24]
 8009ea2:	1ad3      	subs	r3, r2, r3
 8009ea4:	683a      	ldr	r2, [r7, #0]
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d803      	bhi.n	8009eb2 <HAL_SPI_Transmit+0x168>
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eb0:	d102      	bne.n	8009eb8 <HAL_SPI_Transmit+0x16e>
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d102      	bne.n	8009ebe <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009eb8:	2303      	movs	r3, #3
 8009eba:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009ebc:	e074      	b.n	8009fa8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d1ce      	bne.n	8009e66 <HAL_SPI_Transmit+0x11c>
 8009ec8:	e04c      	b.n	8009f64 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d002      	beq.n	8009ed8 <HAL_SPI_Transmit+0x18e>
 8009ed2:	8afb      	ldrh	r3, [r7, #22]
 8009ed4:	2b01      	cmp	r3, #1
 8009ed6:	d140      	bne.n	8009f5a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	330c      	adds	r3, #12
 8009ee2:	7812      	ldrb	r2, [r2, #0]
 8009ee4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eea:	1c5a      	adds	r2, r3, #1
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ef4:	b29b      	uxth	r3, r3
 8009ef6:	3b01      	subs	r3, #1
 8009ef8:	b29a      	uxth	r2, r3
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009efe:	e02c      	b.n	8009f5a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	689b      	ldr	r3, [r3, #8]
 8009f06:	f003 0302 	and.w	r3, r3, #2
 8009f0a:	2b02      	cmp	r3, #2
 8009f0c:	d113      	bne.n	8009f36 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	330c      	adds	r3, #12
 8009f18:	7812      	ldrb	r2, [r2, #0]
 8009f1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f20:	1c5a      	adds	r2, r3, #1
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	3b01      	subs	r3, #1
 8009f2e:	b29a      	uxth	r2, r3
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	86da      	strh	r2, [r3, #54]	; 0x36
 8009f34:	e011      	b.n	8009f5a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f36:	f7fa f895 	bl	8004064 <HAL_GetTick>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	1ad3      	subs	r3, r2, r3
 8009f40:	683a      	ldr	r2, [r7, #0]
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d803      	bhi.n	8009f4e <HAL_SPI_Transmit+0x204>
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f4c:	d102      	bne.n	8009f54 <HAL_SPI_Transmit+0x20a>
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d102      	bne.n	8009f5a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009f54:	2303      	movs	r3, #3
 8009f56:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009f58:	e026      	b.n	8009fa8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d1cd      	bne.n	8009f00 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009f64:	69ba      	ldr	r2, [r7, #24]
 8009f66:	6839      	ldr	r1, [r7, #0]
 8009f68:	68f8      	ldr	r0, [r7, #12]
 8009f6a:	f000 fa55 	bl	800a418 <SPI_EndRxTxTransaction>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d002      	beq.n	8009f7a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2220      	movs	r2, #32
 8009f78:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d10a      	bne.n	8009f98 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009f82:	2300      	movs	r3, #0
 8009f84:	613b      	str	r3, [r7, #16]
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	68db      	ldr	r3, [r3, #12]
 8009f8c:	613b      	str	r3, [r7, #16]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	689b      	ldr	r3, [r3, #8]
 8009f94:	613b      	str	r3, [r7, #16]
 8009f96:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d002      	beq.n	8009fa6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	77fb      	strb	r3, [r7, #31]
 8009fa4:	e000      	b.n	8009fa8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009fa6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2201      	movs	r2, #1
 8009fac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009fb8:	7ffb      	ldrb	r3, [r7, #31]
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3720      	adds	r7, #32
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}

08009fc2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009fc2:	b580      	push	{r7, lr}
 8009fc4:	b08c      	sub	sp, #48	; 0x30
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	60f8      	str	r0, [r7, #12]
 8009fca:	60b9      	str	r1, [r7, #8]
 8009fcc:	607a      	str	r2, [r7, #4]
 8009fce:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d101      	bne.n	8009fe8 <HAL_SPI_TransmitReceive+0x26>
 8009fe4:	2302      	movs	r3, #2
 8009fe6:	e18a      	b.n	800a2fe <HAL_SPI_TransmitReceive+0x33c>
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2201      	movs	r2, #1
 8009fec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009ff0:	f7fa f838 	bl	8004064 <HAL_GetTick>
 8009ff4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009ffc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a006:	887b      	ldrh	r3, [r7, #2]
 800a008:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a00a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d00f      	beq.n	800a032 <HAL_SPI_TransmitReceive+0x70>
 800a012:	69fb      	ldr	r3, [r7, #28]
 800a014:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a018:	d107      	bne.n	800a02a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d103      	bne.n	800a02a <HAL_SPI_TransmitReceive+0x68>
 800a022:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a026:	2b04      	cmp	r3, #4
 800a028:	d003      	beq.n	800a032 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a02a:	2302      	movs	r3, #2
 800a02c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a030:	e15b      	b.n	800a2ea <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d005      	beq.n	800a044 <HAL_SPI_TransmitReceive+0x82>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d002      	beq.n	800a044 <HAL_SPI_TransmitReceive+0x82>
 800a03e:	887b      	ldrh	r3, [r7, #2]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d103      	bne.n	800a04c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a044:	2301      	movs	r3, #1
 800a046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a04a:	e14e      	b.n	800a2ea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a052:	b2db      	uxtb	r3, r3
 800a054:	2b04      	cmp	r3, #4
 800a056:	d003      	beq.n	800a060 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2205      	movs	r2, #5
 800a05c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2200      	movs	r2, #0
 800a064:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	887a      	ldrh	r2, [r7, #2]
 800a070:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	887a      	ldrh	r2, [r7, #2]
 800a076:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	68ba      	ldr	r2, [r7, #8]
 800a07c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	887a      	ldrh	r2, [r7, #2]
 800a082:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	887a      	ldrh	r2, [r7, #2]
 800a088:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2200      	movs	r2, #0
 800a08e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2200      	movs	r2, #0
 800a094:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0a0:	2b40      	cmp	r3, #64	; 0x40
 800a0a2:	d007      	beq.n	800a0b4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	681a      	ldr	r2, [r3, #0]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a0b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	68db      	ldr	r3, [r3, #12]
 800a0b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0bc:	d178      	bne.n	800a1b0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d002      	beq.n	800a0cc <HAL_SPI_TransmitReceive+0x10a>
 800a0c6:	8b7b      	ldrh	r3, [r7, #26]
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d166      	bne.n	800a19a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0d0:	881a      	ldrh	r2, [r3, #0]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0dc:	1c9a      	adds	r2, r3, #2
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	3b01      	subs	r3, #1
 800a0ea:	b29a      	uxth	r2, r3
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a0f0:	e053      	b.n	800a19a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	689b      	ldr	r3, [r3, #8]
 800a0f8:	f003 0302 	and.w	r3, r3, #2
 800a0fc:	2b02      	cmp	r3, #2
 800a0fe:	d11b      	bne.n	800a138 <HAL_SPI_TransmitReceive+0x176>
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a104:	b29b      	uxth	r3, r3
 800a106:	2b00      	cmp	r3, #0
 800a108:	d016      	beq.n	800a138 <HAL_SPI_TransmitReceive+0x176>
 800a10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d113      	bne.n	800a138 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a114:	881a      	ldrh	r2, [r3, #0]
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a120:	1c9a      	adds	r2, r3, #2
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	3b01      	subs	r3, #1
 800a12e:	b29a      	uxth	r2, r3
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a134:	2300      	movs	r3, #0
 800a136:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	689b      	ldr	r3, [r3, #8]
 800a13e:	f003 0301 	and.w	r3, r3, #1
 800a142:	2b01      	cmp	r3, #1
 800a144:	d119      	bne.n	800a17a <HAL_SPI_TransmitReceive+0x1b8>
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d014      	beq.n	800a17a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	68da      	ldr	r2, [r3, #12]
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a15a:	b292      	uxth	r2, r2
 800a15c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a162:	1c9a      	adds	r2, r3, #2
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	3b01      	subs	r3, #1
 800a170:	b29a      	uxth	r2, r3
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a176:	2301      	movs	r3, #1
 800a178:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a17a:	f7f9 ff73 	bl	8004064 <HAL_GetTick>
 800a17e:	4602      	mov	r2, r0
 800a180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a182:	1ad3      	subs	r3, r2, r3
 800a184:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a186:	429a      	cmp	r2, r3
 800a188:	d807      	bhi.n	800a19a <HAL_SPI_TransmitReceive+0x1d8>
 800a18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a18c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a190:	d003      	beq.n	800a19a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a192:	2303      	movs	r3, #3
 800a194:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a198:	e0a7      	b.n	800a2ea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a19e:	b29b      	uxth	r3, r3
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d1a6      	bne.n	800a0f2 <HAL_SPI_TransmitReceive+0x130>
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d1a1      	bne.n	800a0f2 <HAL_SPI_TransmitReceive+0x130>
 800a1ae:	e07c      	b.n	800a2aa <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d002      	beq.n	800a1be <HAL_SPI_TransmitReceive+0x1fc>
 800a1b8:	8b7b      	ldrh	r3, [r7, #26]
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	d16b      	bne.n	800a296 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	330c      	adds	r3, #12
 800a1c8:	7812      	ldrb	r2, [r2, #0]
 800a1ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1d0:	1c5a      	adds	r2, r3, #1
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	3b01      	subs	r3, #1
 800a1de:	b29a      	uxth	r2, r3
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a1e4:	e057      	b.n	800a296 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	689b      	ldr	r3, [r3, #8]
 800a1ec:	f003 0302 	and.w	r3, r3, #2
 800a1f0:	2b02      	cmp	r3, #2
 800a1f2:	d11c      	bne.n	800a22e <HAL_SPI_TransmitReceive+0x26c>
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a1f8:	b29b      	uxth	r3, r3
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d017      	beq.n	800a22e <HAL_SPI_TransmitReceive+0x26c>
 800a1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a200:	2b01      	cmp	r3, #1
 800a202:	d114      	bne.n	800a22e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	330c      	adds	r3, #12
 800a20e:	7812      	ldrb	r2, [r2, #0]
 800a210:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a216:	1c5a      	adds	r2, r3, #1
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a220:	b29b      	uxth	r3, r3
 800a222:	3b01      	subs	r3, #1
 800a224:	b29a      	uxth	r2, r3
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a22a:	2300      	movs	r3, #0
 800a22c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	689b      	ldr	r3, [r3, #8]
 800a234:	f003 0301 	and.w	r3, r3, #1
 800a238:	2b01      	cmp	r3, #1
 800a23a:	d119      	bne.n	800a270 <HAL_SPI_TransmitReceive+0x2ae>
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a240:	b29b      	uxth	r3, r3
 800a242:	2b00      	cmp	r3, #0
 800a244:	d014      	beq.n	800a270 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	68da      	ldr	r2, [r3, #12]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a250:	b2d2      	uxtb	r2, r2
 800a252:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a258:	1c5a      	adds	r2, r3, #1
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a262:	b29b      	uxth	r3, r3
 800a264:	3b01      	subs	r3, #1
 800a266:	b29a      	uxth	r2, r3
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a26c:	2301      	movs	r3, #1
 800a26e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a270:	f7f9 fef8 	bl	8004064 <HAL_GetTick>
 800a274:	4602      	mov	r2, r0
 800a276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a278:	1ad3      	subs	r3, r2, r3
 800a27a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d803      	bhi.n	800a288 <HAL_SPI_TransmitReceive+0x2c6>
 800a280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a282:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a286:	d102      	bne.n	800a28e <HAL_SPI_TransmitReceive+0x2cc>
 800a288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d103      	bne.n	800a296 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a28e:	2303      	movs	r3, #3
 800a290:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a294:	e029      	b.n	800a2ea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d1a2      	bne.n	800a1e6 <HAL_SPI_TransmitReceive+0x224>
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d19d      	bne.n	800a1e6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a2aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a2ae:	68f8      	ldr	r0, [r7, #12]
 800a2b0:	f000 f8b2 	bl	800a418 <SPI_EndRxTxTransaction>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d006      	beq.n	800a2c8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2220      	movs	r2, #32
 800a2c4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a2c6:	e010      	b.n	800a2ea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	689b      	ldr	r3, [r3, #8]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d10b      	bne.n	800a2e8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	617b      	str	r3, [r7, #20]
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	68db      	ldr	r3, [r3, #12]
 800a2da:	617b      	str	r3, [r7, #20]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	689b      	ldr	r3, [r3, #8]
 800a2e2:	617b      	str	r3, [r7, #20]
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	e000      	b.n	800a2ea <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a2e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a2fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3730      	adds	r7, #48	; 0x30
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}
	...

0800a308 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b088      	sub	sp, #32
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	60f8      	str	r0, [r7, #12]
 800a310:	60b9      	str	r1, [r7, #8]
 800a312:	603b      	str	r3, [r7, #0]
 800a314:	4613      	mov	r3, r2
 800a316:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a318:	f7f9 fea4 	bl	8004064 <HAL_GetTick>
 800a31c:	4602      	mov	r2, r0
 800a31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a320:	1a9b      	subs	r3, r3, r2
 800a322:	683a      	ldr	r2, [r7, #0]
 800a324:	4413      	add	r3, r2
 800a326:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a328:	f7f9 fe9c 	bl	8004064 <HAL_GetTick>
 800a32c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a32e:	4b39      	ldr	r3, [pc, #228]	; (800a414 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	015b      	lsls	r3, r3, #5
 800a334:	0d1b      	lsrs	r3, r3, #20
 800a336:	69fa      	ldr	r2, [r7, #28]
 800a338:	fb02 f303 	mul.w	r3, r2, r3
 800a33c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a33e:	e054      	b.n	800a3ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a346:	d050      	beq.n	800a3ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a348:	f7f9 fe8c 	bl	8004064 <HAL_GetTick>
 800a34c:	4602      	mov	r2, r0
 800a34e:	69bb      	ldr	r3, [r7, #24]
 800a350:	1ad3      	subs	r3, r2, r3
 800a352:	69fa      	ldr	r2, [r7, #28]
 800a354:	429a      	cmp	r2, r3
 800a356:	d902      	bls.n	800a35e <SPI_WaitFlagStateUntilTimeout+0x56>
 800a358:	69fb      	ldr	r3, [r7, #28]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d13d      	bne.n	800a3da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	685a      	ldr	r2, [r3, #4]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a36c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a376:	d111      	bne.n	800a39c <SPI_WaitFlagStateUntilTimeout+0x94>
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	689b      	ldr	r3, [r3, #8]
 800a37c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a380:	d004      	beq.n	800a38c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	689b      	ldr	r3, [r3, #8]
 800a386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a38a:	d107      	bne.n	800a39c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a39a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3a4:	d10f      	bne.n	800a3c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a3b4:	601a      	str	r2, [r3, #0]
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	681a      	ldr	r2, [r3, #0]
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a3c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a3d6:	2303      	movs	r3, #3
 800a3d8:	e017      	b.n	800a40a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d101      	bne.n	800a3e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	3b01      	subs	r3, #1
 800a3e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	689a      	ldr	r2, [r3, #8]
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	4013      	ands	r3, r2
 800a3f4:	68ba      	ldr	r2, [r7, #8]
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	bf0c      	ite	eq
 800a3fa:	2301      	moveq	r3, #1
 800a3fc:	2300      	movne	r3, #0
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	461a      	mov	r2, r3
 800a402:	79fb      	ldrb	r3, [r7, #7]
 800a404:	429a      	cmp	r2, r3
 800a406:	d19b      	bne.n	800a340 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a408:	2300      	movs	r3, #0
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3720      	adds	r7, #32
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	2000000c 	.word	0x2000000c

0800a418 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b088      	sub	sp, #32
 800a41c:	af02      	add	r7, sp, #8
 800a41e:	60f8      	str	r0, [r7, #12]
 800a420:	60b9      	str	r1, [r7, #8]
 800a422:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a424:	4b1b      	ldr	r3, [pc, #108]	; (800a494 <SPI_EndRxTxTransaction+0x7c>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4a1b      	ldr	r2, [pc, #108]	; (800a498 <SPI_EndRxTxTransaction+0x80>)
 800a42a:	fba2 2303 	umull	r2, r3, r2, r3
 800a42e:	0d5b      	lsrs	r3, r3, #21
 800a430:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a434:	fb02 f303 	mul.w	r3, r2, r3
 800a438:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a442:	d112      	bne.n	800a46a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	9300      	str	r3, [sp, #0]
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	2200      	movs	r2, #0
 800a44c:	2180      	movs	r1, #128	; 0x80
 800a44e:	68f8      	ldr	r0, [r7, #12]
 800a450:	f7ff ff5a 	bl	800a308 <SPI_WaitFlagStateUntilTimeout>
 800a454:	4603      	mov	r3, r0
 800a456:	2b00      	cmp	r3, #0
 800a458:	d016      	beq.n	800a488 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a45e:	f043 0220 	orr.w	r2, r3, #32
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a466:	2303      	movs	r3, #3
 800a468:	e00f      	b.n	800a48a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d00a      	beq.n	800a486 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	3b01      	subs	r3, #1
 800a474:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	689b      	ldr	r3, [r3, #8]
 800a47c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a480:	2b80      	cmp	r3, #128	; 0x80
 800a482:	d0f2      	beq.n	800a46a <SPI_EndRxTxTransaction+0x52>
 800a484:	e000      	b.n	800a488 <SPI_EndRxTxTransaction+0x70>
        break;
 800a486:	bf00      	nop
  }

  return HAL_OK;
 800a488:	2300      	movs	r3, #0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3718      	adds	r7, #24
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	2000000c 	.word	0x2000000c
 800a498:	165e9f81 	.word	0x165e9f81

0800a49c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b082      	sub	sp, #8
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d101      	bne.n	800a4ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	e041      	b.n	800a532 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d106      	bne.n	800a4c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f7f9 fa4a 	bl	800395c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2202      	movs	r2, #2
 800a4cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	3304      	adds	r3, #4
 800a4d8:	4619      	mov	r1, r3
 800a4da:	4610      	mov	r0, r2
 800a4dc:	f000 fcd8 	bl	800ae90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2201      	movs	r2, #1
 800a504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2201      	movs	r2, #1
 800a50c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2201      	movs	r2, #1
 800a514:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2201      	movs	r2, #1
 800a51c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2201      	movs	r2, #1
 800a524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2201      	movs	r2, #1
 800a52c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a530:	2300      	movs	r3, #0
}
 800a532:	4618      	mov	r0, r3
 800a534:	3708      	adds	r7, #8
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
	...

0800a53c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b085      	sub	sp, #20
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	d001      	beq.n	800a554 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a550:	2301      	movs	r3, #1
 800a552:	e046      	b.n	800a5e2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2202      	movs	r2, #2
 800a558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a23      	ldr	r2, [pc, #140]	; (800a5f0 <HAL_TIM_Base_Start+0xb4>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d022      	beq.n	800a5ac <HAL_TIM_Base_Start+0x70>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a56e:	d01d      	beq.n	800a5ac <HAL_TIM_Base_Start+0x70>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4a1f      	ldr	r2, [pc, #124]	; (800a5f4 <HAL_TIM_Base_Start+0xb8>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d018      	beq.n	800a5ac <HAL_TIM_Base_Start+0x70>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4a1e      	ldr	r2, [pc, #120]	; (800a5f8 <HAL_TIM_Base_Start+0xbc>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d013      	beq.n	800a5ac <HAL_TIM_Base_Start+0x70>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4a1c      	ldr	r2, [pc, #112]	; (800a5fc <HAL_TIM_Base_Start+0xc0>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d00e      	beq.n	800a5ac <HAL_TIM_Base_Start+0x70>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a1b      	ldr	r2, [pc, #108]	; (800a600 <HAL_TIM_Base_Start+0xc4>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d009      	beq.n	800a5ac <HAL_TIM_Base_Start+0x70>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4a19      	ldr	r2, [pc, #100]	; (800a604 <HAL_TIM_Base_Start+0xc8>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d004      	beq.n	800a5ac <HAL_TIM_Base_Start+0x70>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4a18      	ldr	r2, [pc, #96]	; (800a608 <HAL_TIM_Base_Start+0xcc>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d111      	bne.n	800a5d0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	689b      	ldr	r3, [r3, #8]
 800a5b2:	f003 0307 	and.w	r3, r3, #7
 800a5b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2b06      	cmp	r3, #6
 800a5bc:	d010      	beq.n	800a5e0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	681a      	ldr	r2, [r3, #0]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f042 0201 	orr.w	r2, r2, #1
 800a5cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5ce:	e007      	b.n	800a5e0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f042 0201 	orr.w	r2, r2, #1
 800a5de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a5e0:	2300      	movs	r3, #0
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3714      	adds	r7, #20
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ec:	4770      	bx	lr
 800a5ee:	bf00      	nop
 800a5f0:	40010000 	.word	0x40010000
 800a5f4:	40000400 	.word	0x40000400
 800a5f8:	40000800 	.word	0x40000800
 800a5fc:	40000c00 	.word	0x40000c00
 800a600:	40010400 	.word	0x40010400
 800a604:	40014000 	.word	0x40014000
 800a608:	40001800 	.word	0x40001800

0800a60c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b085      	sub	sp, #20
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a61a:	b2db      	uxtb	r3, r3
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d001      	beq.n	800a624 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a620:	2301      	movs	r3, #1
 800a622:	e04e      	b.n	800a6c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2202      	movs	r2, #2
 800a628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	68da      	ldr	r2, [r3, #12]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f042 0201 	orr.w	r2, r2, #1
 800a63a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4a23      	ldr	r2, [pc, #140]	; (800a6d0 <HAL_TIM_Base_Start_IT+0xc4>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d022      	beq.n	800a68c <HAL_TIM_Base_Start_IT+0x80>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a64e:	d01d      	beq.n	800a68c <HAL_TIM_Base_Start_IT+0x80>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	4a1f      	ldr	r2, [pc, #124]	; (800a6d4 <HAL_TIM_Base_Start_IT+0xc8>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d018      	beq.n	800a68c <HAL_TIM_Base_Start_IT+0x80>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	4a1e      	ldr	r2, [pc, #120]	; (800a6d8 <HAL_TIM_Base_Start_IT+0xcc>)
 800a660:	4293      	cmp	r3, r2
 800a662:	d013      	beq.n	800a68c <HAL_TIM_Base_Start_IT+0x80>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4a1c      	ldr	r2, [pc, #112]	; (800a6dc <HAL_TIM_Base_Start_IT+0xd0>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d00e      	beq.n	800a68c <HAL_TIM_Base_Start_IT+0x80>
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	4a1b      	ldr	r2, [pc, #108]	; (800a6e0 <HAL_TIM_Base_Start_IT+0xd4>)
 800a674:	4293      	cmp	r3, r2
 800a676:	d009      	beq.n	800a68c <HAL_TIM_Base_Start_IT+0x80>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4a19      	ldr	r2, [pc, #100]	; (800a6e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d004      	beq.n	800a68c <HAL_TIM_Base_Start_IT+0x80>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4a18      	ldr	r2, [pc, #96]	; (800a6e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d111      	bne.n	800a6b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	689b      	ldr	r3, [r3, #8]
 800a692:	f003 0307 	and.w	r3, r3, #7
 800a696:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2b06      	cmp	r3, #6
 800a69c:	d010      	beq.n	800a6c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	681a      	ldr	r2, [r3, #0]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f042 0201 	orr.w	r2, r2, #1
 800a6ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6ae:	e007      	b.n	800a6c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f042 0201 	orr.w	r2, r2, #1
 800a6be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a6c0:	2300      	movs	r3, #0
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3714      	adds	r7, #20
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6cc:	4770      	bx	lr
 800a6ce:	bf00      	nop
 800a6d0:	40010000 	.word	0x40010000
 800a6d4:	40000400 	.word	0x40000400
 800a6d8:	40000800 	.word	0x40000800
 800a6dc:	40000c00 	.word	0x40000c00
 800a6e0:	40010400 	.word	0x40010400
 800a6e4:	40014000 	.word	0x40014000
 800a6e8:	40001800 	.word	0x40001800

0800a6ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d101      	bne.n	800a6fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	e041      	b.n	800a782 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a704:	b2db      	uxtb	r3, r3
 800a706:	2b00      	cmp	r3, #0
 800a708:	d106      	bne.n	800a718 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2200      	movs	r2, #0
 800a70e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f7f9 f942 	bl	800399c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2202      	movs	r2, #2
 800a71c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	3304      	adds	r3, #4
 800a728:	4619      	mov	r1, r3
 800a72a:	4610      	mov	r0, r2
 800a72c:	f000 fbb0 	bl	800ae90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2201      	movs	r2, #1
 800a73c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2201      	movs	r2, #1
 800a744:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2201      	movs	r2, #1
 800a74c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2201      	movs	r2, #1
 800a754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2201      	movs	r2, #1
 800a75c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2201      	movs	r2, #1
 800a764:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2201      	movs	r2, #1
 800a76c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2201      	movs	r2, #1
 800a774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2201      	movs	r2, #1
 800a77c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a780:	2300      	movs	r3, #0
}
 800a782:	4618      	mov	r0, r3
 800a784:	3708      	adds	r7, #8
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
	...

0800a78c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b084      	sub	sp, #16
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d109      	bne.n	800a7b0 <HAL_TIM_PWM_Start+0x24>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a7a2:	b2db      	uxtb	r3, r3
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	bf14      	ite	ne
 800a7a8:	2301      	movne	r3, #1
 800a7aa:	2300      	moveq	r3, #0
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	e022      	b.n	800a7f6 <HAL_TIM_PWM_Start+0x6a>
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	2b04      	cmp	r3, #4
 800a7b4:	d109      	bne.n	800a7ca <HAL_TIM_PWM_Start+0x3e>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	2b01      	cmp	r3, #1
 800a7c0:	bf14      	ite	ne
 800a7c2:	2301      	movne	r3, #1
 800a7c4:	2300      	moveq	r3, #0
 800a7c6:	b2db      	uxtb	r3, r3
 800a7c8:	e015      	b.n	800a7f6 <HAL_TIM_PWM_Start+0x6a>
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	2b08      	cmp	r3, #8
 800a7ce:	d109      	bne.n	800a7e4 <HAL_TIM_PWM_Start+0x58>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a7d6:	b2db      	uxtb	r3, r3
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	bf14      	ite	ne
 800a7dc:	2301      	movne	r3, #1
 800a7de:	2300      	moveq	r3, #0
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	e008      	b.n	800a7f6 <HAL_TIM_PWM_Start+0x6a>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a7ea:	b2db      	uxtb	r3, r3
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	bf14      	ite	ne
 800a7f0:	2301      	movne	r3, #1
 800a7f2:	2300      	moveq	r3, #0
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d001      	beq.n	800a7fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	e07c      	b.n	800a8f8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d104      	bne.n	800a80e <HAL_TIM_PWM_Start+0x82>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2202      	movs	r2, #2
 800a808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a80c:	e013      	b.n	800a836 <HAL_TIM_PWM_Start+0xaa>
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	2b04      	cmp	r3, #4
 800a812:	d104      	bne.n	800a81e <HAL_TIM_PWM_Start+0x92>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2202      	movs	r2, #2
 800a818:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a81c:	e00b      	b.n	800a836 <HAL_TIM_PWM_Start+0xaa>
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	2b08      	cmp	r3, #8
 800a822:	d104      	bne.n	800a82e <HAL_TIM_PWM_Start+0xa2>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2202      	movs	r2, #2
 800a828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a82c:	e003      	b.n	800a836 <HAL_TIM_PWM_Start+0xaa>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2202      	movs	r2, #2
 800a832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	2201      	movs	r2, #1
 800a83c:	6839      	ldr	r1, [r7, #0]
 800a83e:	4618      	mov	r0, r3
 800a840:	f000 fe10 	bl	800b464 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a2d      	ldr	r2, [pc, #180]	; (800a900 <HAL_TIM_PWM_Start+0x174>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d004      	beq.n	800a858 <HAL_TIM_PWM_Start+0xcc>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	4a2c      	ldr	r2, [pc, #176]	; (800a904 <HAL_TIM_PWM_Start+0x178>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d101      	bne.n	800a85c <HAL_TIM_PWM_Start+0xd0>
 800a858:	2301      	movs	r3, #1
 800a85a:	e000      	b.n	800a85e <HAL_TIM_PWM_Start+0xd2>
 800a85c:	2300      	movs	r3, #0
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d007      	beq.n	800a872 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a870:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	4a22      	ldr	r2, [pc, #136]	; (800a900 <HAL_TIM_PWM_Start+0x174>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d022      	beq.n	800a8c2 <HAL_TIM_PWM_Start+0x136>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a884:	d01d      	beq.n	800a8c2 <HAL_TIM_PWM_Start+0x136>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4a1f      	ldr	r2, [pc, #124]	; (800a908 <HAL_TIM_PWM_Start+0x17c>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d018      	beq.n	800a8c2 <HAL_TIM_PWM_Start+0x136>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4a1d      	ldr	r2, [pc, #116]	; (800a90c <HAL_TIM_PWM_Start+0x180>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d013      	beq.n	800a8c2 <HAL_TIM_PWM_Start+0x136>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4a1c      	ldr	r2, [pc, #112]	; (800a910 <HAL_TIM_PWM_Start+0x184>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d00e      	beq.n	800a8c2 <HAL_TIM_PWM_Start+0x136>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4a16      	ldr	r2, [pc, #88]	; (800a904 <HAL_TIM_PWM_Start+0x178>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d009      	beq.n	800a8c2 <HAL_TIM_PWM_Start+0x136>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	4a18      	ldr	r2, [pc, #96]	; (800a914 <HAL_TIM_PWM_Start+0x188>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d004      	beq.n	800a8c2 <HAL_TIM_PWM_Start+0x136>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a16      	ldr	r2, [pc, #88]	; (800a918 <HAL_TIM_PWM_Start+0x18c>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d111      	bne.n	800a8e6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	689b      	ldr	r3, [r3, #8]
 800a8c8:	f003 0307 	and.w	r3, r3, #7
 800a8cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2b06      	cmp	r3, #6
 800a8d2:	d010      	beq.n	800a8f6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	681a      	ldr	r2, [r3, #0]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f042 0201 	orr.w	r2, r2, #1
 800a8e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8e4:	e007      	b.n	800a8f6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f042 0201 	orr.w	r2, r2, #1
 800a8f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a8f6:	2300      	movs	r3, #0
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3710      	adds	r7, #16
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	40010000 	.word	0x40010000
 800a904:	40010400 	.word	0x40010400
 800a908:	40000400 	.word	0x40000400
 800a90c:	40000800 	.word	0x40000800
 800a910:	40000c00 	.word	0x40000c00
 800a914:	40014000 	.word	0x40014000
 800a918:	40001800 	.word	0x40001800

0800a91c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b082      	sub	sp, #8
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	691b      	ldr	r3, [r3, #16]
 800a92a:	f003 0302 	and.w	r3, r3, #2
 800a92e:	2b02      	cmp	r3, #2
 800a930:	d122      	bne.n	800a978 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	68db      	ldr	r3, [r3, #12]
 800a938:	f003 0302 	and.w	r3, r3, #2
 800a93c:	2b02      	cmp	r3, #2
 800a93e:	d11b      	bne.n	800a978 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f06f 0202 	mvn.w	r2, #2
 800a948:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2201      	movs	r2, #1
 800a94e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	699b      	ldr	r3, [r3, #24]
 800a956:	f003 0303 	and.w	r3, r3, #3
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d003      	beq.n	800a966 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f000 fa77 	bl	800ae52 <HAL_TIM_IC_CaptureCallback>
 800a964:	e005      	b.n	800a972 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 fa69 	bl	800ae3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f000 fa7a 	bl	800ae66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2200      	movs	r2, #0
 800a976:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	691b      	ldr	r3, [r3, #16]
 800a97e:	f003 0304 	and.w	r3, r3, #4
 800a982:	2b04      	cmp	r3, #4
 800a984:	d122      	bne.n	800a9cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	68db      	ldr	r3, [r3, #12]
 800a98c:	f003 0304 	and.w	r3, r3, #4
 800a990:	2b04      	cmp	r3, #4
 800a992:	d11b      	bne.n	800a9cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f06f 0204 	mvn.w	r2, #4
 800a99c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2202      	movs	r2, #2
 800a9a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	699b      	ldr	r3, [r3, #24]
 800a9aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d003      	beq.n	800a9ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f000 fa4d 	bl	800ae52 <HAL_TIM_IC_CaptureCallback>
 800a9b8:	e005      	b.n	800a9c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f000 fa3f 	bl	800ae3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f000 fa50 	bl	800ae66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	691b      	ldr	r3, [r3, #16]
 800a9d2:	f003 0308 	and.w	r3, r3, #8
 800a9d6:	2b08      	cmp	r3, #8
 800a9d8:	d122      	bne.n	800aa20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	f003 0308 	and.w	r3, r3, #8
 800a9e4:	2b08      	cmp	r3, #8
 800a9e6:	d11b      	bne.n	800aa20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f06f 0208 	mvn.w	r2, #8
 800a9f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2204      	movs	r2, #4
 800a9f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	69db      	ldr	r3, [r3, #28]
 800a9fe:	f003 0303 	and.w	r3, r3, #3
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d003      	beq.n	800aa0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f000 fa23 	bl	800ae52 <HAL_TIM_IC_CaptureCallback>
 800aa0c:	e005      	b.n	800aa1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 fa15 	bl	800ae3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f000 fa26 	bl	800ae66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	691b      	ldr	r3, [r3, #16]
 800aa26:	f003 0310 	and.w	r3, r3, #16
 800aa2a:	2b10      	cmp	r3, #16
 800aa2c:	d122      	bne.n	800aa74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	68db      	ldr	r3, [r3, #12]
 800aa34:	f003 0310 	and.w	r3, r3, #16
 800aa38:	2b10      	cmp	r3, #16
 800aa3a:	d11b      	bne.n	800aa74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f06f 0210 	mvn.w	r2, #16
 800aa44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2208      	movs	r2, #8
 800aa4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	69db      	ldr	r3, [r3, #28]
 800aa52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d003      	beq.n	800aa62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f000 f9f9 	bl	800ae52 <HAL_TIM_IC_CaptureCallback>
 800aa60:	e005      	b.n	800aa6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f000 f9eb 	bl	800ae3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f000 f9fc 	bl	800ae66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2200      	movs	r2, #0
 800aa72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	691b      	ldr	r3, [r3, #16]
 800aa7a:	f003 0301 	and.w	r3, r3, #1
 800aa7e:	2b01      	cmp	r3, #1
 800aa80:	d10e      	bne.n	800aaa0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	68db      	ldr	r3, [r3, #12]
 800aa88:	f003 0301 	and.w	r3, r3, #1
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d107      	bne.n	800aaa0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f06f 0201 	mvn.w	r2, #1
 800aa98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f7f8 fd44 	bl	8003528 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	691b      	ldr	r3, [r3, #16]
 800aaa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaaa:	2b80      	cmp	r3, #128	; 0x80
 800aaac:	d10e      	bne.n	800aacc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	68db      	ldr	r3, [r3, #12]
 800aab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aab8:	2b80      	cmp	r3, #128	; 0x80
 800aaba:	d107      	bne.n	800aacc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f000 fd78 	bl	800b5bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	691b      	ldr	r3, [r3, #16]
 800aad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aad6:	2b40      	cmp	r3, #64	; 0x40
 800aad8:	d10e      	bne.n	800aaf8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	68db      	ldr	r3, [r3, #12]
 800aae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aae4:	2b40      	cmp	r3, #64	; 0x40
 800aae6:	d107      	bne.n	800aaf8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aaf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f000 f9c1 	bl	800ae7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	691b      	ldr	r3, [r3, #16]
 800aafe:	f003 0320 	and.w	r3, r3, #32
 800ab02:	2b20      	cmp	r3, #32
 800ab04:	d10e      	bne.n	800ab24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	68db      	ldr	r3, [r3, #12]
 800ab0c:	f003 0320 	and.w	r3, r3, #32
 800ab10:	2b20      	cmp	r3, #32
 800ab12:	d107      	bne.n	800ab24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f06f 0220 	mvn.w	r2, #32
 800ab1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f000 fd42 	bl	800b5a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ab24:	bf00      	nop
 800ab26:	3708      	adds	r7, #8
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}

0800ab2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b086      	sub	sp, #24
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	60f8      	str	r0, [r7, #12]
 800ab34:	60b9      	str	r1, [r7, #8]
 800ab36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d101      	bne.n	800ab4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ab46:	2302      	movs	r3, #2
 800ab48:	e0ae      	b.n	800aca8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2b0c      	cmp	r3, #12
 800ab56:	f200 809f 	bhi.w	800ac98 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800ab5a:	a201      	add	r2, pc, #4	; (adr r2, 800ab60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ab5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab60:	0800ab95 	.word	0x0800ab95
 800ab64:	0800ac99 	.word	0x0800ac99
 800ab68:	0800ac99 	.word	0x0800ac99
 800ab6c:	0800ac99 	.word	0x0800ac99
 800ab70:	0800abd5 	.word	0x0800abd5
 800ab74:	0800ac99 	.word	0x0800ac99
 800ab78:	0800ac99 	.word	0x0800ac99
 800ab7c:	0800ac99 	.word	0x0800ac99
 800ab80:	0800ac17 	.word	0x0800ac17
 800ab84:	0800ac99 	.word	0x0800ac99
 800ab88:	0800ac99 	.word	0x0800ac99
 800ab8c:	0800ac99 	.word	0x0800ac99
 800ab90:	0800ac57 	.word	0x0800ac57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	68b9      	ldr	r1, [r7, #8]
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f000 fa18 	bl	800afd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	699a      	ldr	r2, [r3, #24]
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f042 0208 	orr.w	r2, r2, #8
 800abae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	699a      	ldr	r2, [r3, #24]
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f022 0204 	bic.w	r2, r2, #4
 800abbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	6999      	ldr	r1, [r3, #24]
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	691a      	ldr	r2, [r3, #16]
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	430a      	orrs	r2, r1
 800abd0:	619a      	str	r2, [r3, #24]
      break;
 800abd2:	e064      	b.n	800ac9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	68b9      	ldr	r1, [r7, #8]
 800abda:	4618      	mov	r0, r3
 800abdc:	f000 fa68 	bl	800b0b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	699a      	ldr	r2, [r3, #24]
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800abee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	699a      	ldr	r2, [r3, #24]
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800abfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	6999      	ldr	r1, [r3, #24]
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	691b      	ldr	r3, [r3, #16]
 800ac0a:	021a      	lsls	r2, r3, #8
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	430a      	orrs	r2, r1
 800ac12:	619a      	str	r2, [r3, #24]
      break;
 800ac14:	e043      	b.n	800ac9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	68b9      	ldr	r1, [r7, #8]
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f000 fabd 	bl	800b19c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	69da      	ldr	r2, [r3, #28]
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f042 0208 	orr.w	r2, r2, #8
 800ac30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	69da      	ldr	r2, [r3, #28]
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f022 0204 	bic.w	r2, r2, #4
 800ac40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	69d9      	ldr	r1, [r3, #28]
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	691a      	ldr	r2, [r3, #16]
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	430a      	orrs	r2, r1
 800ac52:	61da      	str	r2, [r3, #28]
      break;
 800ac54:	e023      	b.n	800ac9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	68b9      	ldr	r1, [r7, #8]
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f000 fb11 	bl	800b284 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	69da      	ldr	r2, [r3, #28]
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	69da      	ldr	r2, [r3, #28]
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	69d9      	ldr	r1, [r3, #28]
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	691b      	ldr	r3, [r3, #16]
 800ac8c:	021a      	lsls	r2, r3, #8
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	430a      	orrs	r2, r1
 800ac94:	61da      	str	r2, [r3, #28]
      break;
 800ac96:	e002      	b.n	800ac9e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	75fb      	strb	r3, [r7, #23]
      break;
 800ac9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	2200      	movs	r2, #0
 800aca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aca6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3718      	adds	r7, #24
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b084      	sub	sp, #16
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800acba:	2300      	movs	r3, #0
 800acbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acc4:	2b01      	cmp	r3, #1
 800acc6:	d101      	bne.n	800accc <HAL_TIM_ConfigClockSource+0x1c>
 800acc8:	2302      	movs	r3, #2
 800acca:	e0b4      	b.n	800ae36 <HAL_TIM_ConfigClockSource+0x186>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2201      	movs	r2, #1
 800acd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2202      	movs	r2, #2
 800acd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	689b      	ldr	r3, [r3, #8]
 800ace2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800acea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800acf2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	68ba      	ldr	r2, [r7, #8]
 800acfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad04:	d03e      	beq.n	800ad84 <HAL_TIM_ConfigClockSource+0xd4>
 800ad06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad0a:	f200 8087 	bhi.w	800ae1c <HAL_TIM_ConfigClockSource+0x16c>
 800ad0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad12:	f000 8086 	beq.w	800ae22 <HAL_TIM_ConfigClockSource+0x172>
 800ad16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad1a:	d87f      	bhi.n	800ae1c <HAL_TIM_ConfigClockSource+0x16c>
 800ad1c:	2b70      	cmp	r3, #112	; 0x70
 800ad1e:	d01a      	beq.n	800ad56 <HAL_TIM_ConfigClockSource+0xa6>
 800ad20:	2b70      	cmp	r3, #112	; 0x70
 800ad22:	d87b      	bhi.n	800ae1c <HAL_TIM_ConfigClockSource+0x16c>
 800ad24:	2b60      	cmp	r3, #96	; 0x60
 800ad26:	d050      	beq.n	800adca <HAL_TIM_ConfigClockSource+0x11a>
 800ad28:	2b60      	cmp	r3, #96	; 0x60
 800ad2a:	d877      	bhi.n	800ae1c <HAL_TIM_ConfigClockSource+0x16c>
 800ad2c:	2b50      	cmp	r3, #80	; 0x50
 800ad2e:	d03c      	beq.n	800adaa <HAL_TIM_ConfigClockSource+0xfa>
 800ad30:	2b50      	cmp	r3, #80	; 0x50
 800ad32:	d873      	bhi.n	800ae1c <HAL_TIM_ConfigClockSource+0x16c>
 800ad34:	2b40      	cmp	r3, #64	; 0x40
 800ad36:	d058      	beq.n	800adea <HAL_TIM_ConfigClockSource+0x13a>
 800ad38:	2b40      	cmp	r3, #64	; 0x40
 800ad3a:	d86f      	bhi.n	800ae1c <HAL_TIM_ConfigClockSource+0x16c>
 800ad3c:	2b30      	cmp	r3, #48	; 0x30
 800ad3e:	d064      	beq.n	800ae0a <HAL_TIM_ConfigClockSource+0x15a>
 800ad40:	2b30      	cmp	r3, #48	; 0x30
 800ad42:	d86b      	bhi.n	800ae1c <HAL_TIM_ConfigClockSource+0x16c>
 800ad44:	2b20      	cmp	r3, #32
 800ad46:	d060      	beq.n	800ae0a <HAL_TIM_ConfigClockSource+0x15a>
 800ad48:	2b20      	cmp	r3, #32
 800ad4a:	d867      	bhi.n	800ae1c <HAL_TIM_ConfigClockSource+0x16c>
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d05c      	beq.n	800ae0a <HAL_TIM_ConfigClockSource+0x15a>
 800ad50:	2b10      	cmp	r3, #16
 800ad52:	d05a      	beq.n	800ae0a <HAL_TIM_ConfigClockSource+0x15a>
 800ad54:	e062      	b.n	800ae1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6818      	ldr	r0, [r3, #0]
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	6899      	ldr	r1, [r3, #8]
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	685a      	ldr	r2, [r3, #4]
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	68db      	ldr	r3, [r3, #12]
 800ad66:	f000 fb5d 	bl	800b424 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	689b      	ldr	r3, [r3, #8]
 800ad70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ad78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	68ba      	ldr	r2, [r7, #8]
 800ad80:	609a      	str	r2, [r3, #8]
      break;
 800ad82:	e04f      	b.n	800ae24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6818      	ldr	r0, [r3, #0]
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	6899      	ldr	r1, [r3, #8]
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	685a      	ldr	r2, [r3, #4]
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	68db      	ldr	r3, [r3, #12]
 800ad94:	f000 fb46 	bl	800b424 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	689a      	ldr	r2, [r3, #8]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ada6:	609a      	str	r2, [r3, #8]
      break;
 800ada8:	e03c      	b.n	800ae24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6818      	ldr	r0, [r3, #0]
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	6859      	ldr	r1, [r3, #4]
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	68db      	ldr	r3, [r3, #12]
 800adb6:	461a      	mov	r2, r3
 800adb8:	f000 faba 	bl	800b330 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	2150      	movs	r1, #80	; 0x50
 800adc2:	4618      	mov	r0, r3
 800adc4:	f000 fb13 	bl	800b3ee <TIM_ITRx_SetConfig>
      break;
 800adc8:	e02c      	b.n	800ae24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6818      	ldr	r0, [r3, #0]
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	6859      	ldr	r1, [r3, #4]
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	68db      	ldr	r3, [r3, #12]
 800add6:	461a      	mov	r2, r3
 800add8:	f000 fad9 	bl	800b38e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	2160      	movs	r1, #96	; 0x60
 800ade2:	4618      	mov	r0, r3
 800ade4:	f000 fb03 	bl	800b3ee <TIM_ITRx_SetConfig>
      break;
 800ade8:	e01c      	b.n	800ae24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6818      	ldr	r0, [r3, #0]
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	6859      	ldr	r1, [r3, #4]
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	461a      	mov	r2, r3
 800adf8:	f000 fa9a 	bl	800b330 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	2140      	movs	r1, #64	; 0x40
 800ae02:	4618      	mov	r0, r3
 800ae04:	f000 faf3 	bl	800b3ee <TIM_ITRx_SetConfig>
      break;
 800ae08:	e00c      	b.n	800ae24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681a      	ldr	r2, [r3, #0]
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	4619      	mov	r1, r3
 800ae14:	4610      	mov	r0, r2
 800ae16:	f000 faea 	bl	800b3ee <TIM_ITRx_SetConfig>
      break;
 800ae1a:	e003      	b.n	800ae24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	73fb      	strb	r3, [r7, #15]
      break;
 800ae20:	e000      	b.n	800ae24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ae22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2201      	movs	r2, #1
 800ae28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ae34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3710      	adds	r7, #16
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}

0800ae3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ae3e:	b480      	push	{r7}
 800ae40:	b083      	sub	sp, #12
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ae46:	bf00      	nop
 800ae48:	370c      	adds	r7, #12
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae50:	4770      	bx	lr

0800ae52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ae52:	b480      	push	{r7}
 800ae54:	b083      	sub	sp, #12
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ae5a:	bf00      	nop
 800ae5c:	370c      	adds	r7, #12
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr

0800ae66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ae66:	b480      	push	{r7}
 800ae68:	b083      	sub	sp, #12
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ae6e:	bf00      	nop
 800ae70:	370c      	adds	r7, #12
 800ae72:	46bd      	mov	sp, r7
 800ae74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae78:	4770      	bx	lr

0800ae7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ae7a:	b480      	push	{r7}
 800ae7c:	b083      	sub	sp, #12
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ae82:	bf00      	nop
 800ae84:	370c      	adds	r7, #12
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr
	...

0800ae90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ae90:	b480      	push	{r7}
 800ae92:	b085      	sub	sp, #20
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	4a40      	ldr	r2, [pc, #256]	; (800afa4 <TIM_Base_SetConfig+0x114>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d013      	beq.n	800aed0 <TIM_Base_SetConfig+0x40>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aeae:	d00f      	beq.n	800aed0 <TIM_Base_SetConfig+0x40>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	4a3d      	ldr	r2, [pc, #244]	; (800afa8 <TIM_Base_SetConfig+0x118>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d00b      	beq.n	800aed0 <TIM_Base_SetConfig+0x40>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	4a3c      	ldr	r2, [pc, #240]	; (800afac <TIM_Base_SetConfig+0x11c>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d007      	beq.n	800aed0 <TIM_Base_SetConfig+0x40>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	4a3b      	ldr	r2, [pc, #236]	; (800afb0 <TIM_Base_SetConfig+0x120>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d003      	beq.n	800aed0 <TIM_Base_SetConfig+0x40>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	4a3a      	ldr	r2, [pc, #232]	; (800afb4 <TIM_Base_SetConfig+0x124>)
 800aecc:	4293      	cmp	r3, r2
 800aece:	d108      	bne.n	800aee2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aed6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	68fa      	ldr	r2, [r7, #12]
 800aede:	4313      	orrs	r3, r2
 800aee0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	4a2f      	ldr	r2, [pc, #188]	; (800afa4 <TIM_Base_SetConfig+0x114>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d02b      	beq.n	800af42 <TIM_Base_SetConfig+0xb2>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aef0:	d027      	beq.n	800af42 <TIM_Base_SetConfig+0xb2>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	4a2c      	ldr	r2, [pc, #176]	; (800afa8 <TIM_Base_SetConfig+0x118>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d023      	beq.n	800af42 <TIM_Base_SetConfig+0xb2>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	4a2b      	ldr	r2, [pc, #172]	; (800afac <TIM_Base_SetConfig+0x11c>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d01f      	beq.n	800af42 <TIM_Base_SetConfig+0xb2>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	4a2a      	ldr	r2, [pc, #168]	; (800afb0 <TIM_Base_SetConfig+0x120>)
 800af06:	4293      	cmp	r3, r2
 800af08:	d01b      	beq.n	800af42 <TIM_Base_SetConfig+0xb2>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	4a29      	ldr	r2, [pc, #164]	; (800afb4 <TIM_Base_SetConfig+0x124>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	d017      	beq.n	800af42 <TIM_Base_SetConfig+0xb2>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	4a28      	ldr	r2, [pc, #160]	; (800afb8 <TIM_Base_SetConfig+0x128>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d013      	beq.n	800af42 <TIM_Base_SetConfig+0xb2>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	4a27      	ldr	r2, [pc, #156]	; (800afbc <TIM_Base_SetConfig+0x12c>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d00f      	beq.n	800af42 <TIM_Base_SetConfig+0xb2>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	4a26      	ldr	r2, [pc, #152]	; (800afc0 <TIM_Base_SetConfig+0x130>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d00b      	beq.n	800af42 <TIM_Base_SetConfig+0xb2>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	4a25      	ldr	r2, [pc, #148]	; (800afc4 <TIM_Base_SetConfig+0x134>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d007      	beq.n	800af42 <TIM_Base_SetConfig+0xb2>
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	4a24      	ldr	r2, [pc, #144]	; (800afc8 <TIM_Base_SetConfig+0x138>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d003      	beq.n	800af42 <TIM_Base_SetConfig+0xb2>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	4a23      	ldr	r2, [pc, #140]	; (800afcc <TIM_Base_SetConfig+0x13c>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	d108      	bne.n	800af54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	68db      	ldr	r3, [r3, #12]
 800af4e:	68fa      	ldr	r2, [r7, #12]
 800af50:	4313      	orrs	r3, r2
 800af52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	695b      	ldr	r3, [r3, #20]
 800af5e:	4313      	orrs	r3, r2
 800af60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	68fa      	ldr	r2, [r7, #12]
 800af66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	689a      	ldr	r2, [r3, #8]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	681a      	ldr	r2, [r3, #0]
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	4a0a      	ldr	r2, [pc, #40]	; (800afa4 <TIM_Base_SetConfig+0x114>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d003      	beq.n	800af88 <TIM_Base_SetConfig+0xf8>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	4a0c      	ldr	r2, [pc, #48]	; (800afb4 <TIM_Base_SetConfig+0x124>)
 800af84:	4293      	cmp	r3, r2
 800af86:	d103      	bne.n	800af90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	691a      	ldr	r2, [r3, #16]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2201      	movs	r2, #1
 800af94:	615a      	str	r2, [r3, #20]
}
 800af96:	bf00      	nop
 800af98:	3714      	adds	r7, #20
 800af9a:	46bd      	mov	sp, r7
 800af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop
 800afa4:	40010000 	.word	0x40010000
 800afa8:	40000400 	.word	0x40000400
 800afac:	40000800 	.word	0x40000800
 800afb0:	40000c00 	.word	0x40000c00
 800afb4:	40010400 	.word	0x40010400
 800afb8:	40014000 	.word	0x40014000
 800afbc:	40014400 	.word	0x40014400
 800afc0:	40014800 	.word	0x40014800
 800afc4:	40001800 	.word	0x40001800
 800afc8:	40001c00 	.word	0x40001c00
 800afcc:	40002000 	.word	0x40002000

0800afd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b087      	sub	sp, #28
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6a1b      	ldr	r3, [r3, #32]
 800afde:	f023 0201 	bic.w	r2, r3, #1
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6a1b      	ldr	r3, [r3, #32]
 800afea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	699b      	ldr	r3, [r3, #24]
 800aff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800affe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	f023 0303 	bic.w	r3, r3, #3
 800b006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	68fa      	ldr	r2, [r7, #12]
 800b00e:	4313      	orrs	r3, r2
 800b010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	f023 0302 	bic.w	r3, r3, #2
 800b018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	689b      	ldr	r3, [r3, #8]
 800b01e:	697a      	ldr	r2, [r7, #20]
 800b020:	4313      	orrs	r3, r2
 800b022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	4a20      	ldr	r2, [pc, #128]	; (800b0a8 <TIM_OC1_SetConfig+0xd8>)
 800b028:	4293      	cmp	r3, r2
 800b02a:	d003      	beq.n	800b034 <TIM_OC1_SetConfig+0x64>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	4a1f      	ldr	r2, [pc, #124]	; (800b0ac <TIM_OC1_SetConfig+0xdc>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d10c      	bne.n	800b04e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	f023 0308 	bic.w	r3, r3, #8
 800b03a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	68db      	ldr	r3, [r3, #12]
 800b040:	697a      	ldr	r2, [r7, #20]
 800b042:	4313      	orrs	r3, r2
 800b044:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	f023 0304 	bic.w	r3, r3, #4
 800b04c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	4a15      	ldr	r2, [pc, #84]	; (800b0a8 <TIM_OC1_SetConfig+0xd8>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d003      	beq.n	800b05e <TIM_OC1_SetConfig+0x8e>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	4a14      	ldr	r2, [pc, #80]	; (800b0ac <TIM_OC1_SetConfig+0xdc>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d111      	bne.n	800b082 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b064:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b06c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	695b      	ldr	r3, [r3, #20]
 800b072:	693a      	ldr	r2, [r7, #16]
 800b074:	4313      	orrs	r3, r2
 800b076:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	699b      	ldr	r3, [r3, #24]
 800b07c:	693a      	ldr	r2, [r7, #16]
 800b07e:	4313      	orrs	r3, r2
 800b080:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	693a      	ldr	r2, [r7, #16]
 800b086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	68fa      	ldr	r2, [r7, #12]
 800b08c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	685a      	ldr	r2, [r3, #4]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	697a      	ldr	r2, [r7, #20]
 800b09a:	621a      	str	r2, [r3, #32]
}
 800b09c:	bf00      	nop
 800b09e:	371c      	adds	r7, #28
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr
 800b0a8:	40010000 	.word	0x40010000
 800b0ac:	40010400 	.word	0x40010400

0800b0b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b087      	sub	sp, #28
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6a1b      	ldr	r3, [r3, #32]
 800b0be:	f023 0210 	bic.w	r2, r3, #16
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6a1b      	ldr	r3, [r3, #32]
 800b0ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	699b      	ldr	r3, [r3, #24]
 800b0d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b0e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	021b      	lsls	r3, r3, #8
 800b0ee:	68fa      	ldr	r2, [r7, #12]
 800b0f0:	4313      	orrs	r3, r2
 800b0f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	f023 0320 	bic.w	r3, r3, #32
 800b0fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	689b      	ldr	r3, [r3, #8]
 800b100:	011b      	lsls	r3, r3, #4
 800b102:	697a      	ldr	r2, [r7, #20]
 800b104:	4313      	orrs	r3, r2
 800b106:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	4a22      	ldr	r2, [pc, #136]	; (800b194 <TIM_OC2_SetConfig+0xe4>)
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d003      	beq.n	800b118 <TIM_OC2_SetConfig+0x68>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	4a21      	ldr	r2, [pc, #132]	; (800b198 <TIM_OC2_SetConfig+0xe8>)
 800b114:	4293      	cmp	r3, r2
 800b116:	d10d      	bne.n	800b134 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b11e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	68db      	ldr	r3, [r3, #12]
 800b124:	011b      	lsls	r3, r3, #4
 800b126:	697a      	ldr	r2, [r7, #20]
 800b128:	4313      	orrs	r3, r2
 800b12a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b132:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	4a17      	ldr	r2, [pc, #92]	; (800b194 <TIM_OC2_SetConfig+0xe4>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d003      	beq.n	800b144 <TIM_OC2_SetConfig+0x94>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	4a16      	ldr	r2, [pc, #88]	; (800b198 <TIM_OC2_SetConfig+0xe8>)
 800b140:	4293      	cmp	r3, r2
 800b142:	d113      	bne.n	800b16c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b14a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b152:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	695b      	ldr	r3, [r3, #20]
 800b158:	009b      	lsls	r3, r3, #2
 800b15a:	693a      	ldr	r2, [r7, #16]
 800b15c:	4313      	orrs	r3, r2
 800b15e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	699b      	ldr	r3, [r3, #24]
 800b164:	009b      	lsls	r3, r3, #2
 800b166:	693a      	ldr	r2, [r7, #16]
 800b168:	4313      	orrs	r3, r2
 800b16a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	693a      	ldr	r2, [r7, #16]
 800b170:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	68fa      	ldr	r2, [r7, #12]
 800b176:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	685a      	ldr	r2, [r3, #4]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	697a      	ldr	r2, [r7, #20]
 800b184:	621a      	str	r2, [r3, #32]
}
 800b186:	bf00      	nop
 800b188:	371c      	adds	r7, #28
 800b18a:	46bd      	mov	sp, r7
 800b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b190:	4770      	bx	lr
 800b192:	bf00      	nop
 800b194:	40010000 	.word	0x40010000
 800b198:	40010400 	.word	0x40010400

0800b19c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b087      	sub	sp, #28
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6a1b      	ldr	r3, [r3, #32]
 800b1aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6a1b      	ldr	r3, [r3, #32]
 800b1b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	69db      	ldr	r3, [r3, #28]
 800b1c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	f023 0303 	bic.w	r3, r3, #3
 800b1d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	68fa      	ldr	r2, [r7, #12]
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b1e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	689b      	ldr	r3, [r3, #8]
 800b1ea:	021b      	lsls	r3, r3, #8
 800b1ec:	697a      	ldr	r2, [r7, #20]
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	4a21      	ldr	r2, [pc, #132]	; (800b27c <TIM_OC3_SetConfig+0xe0>)
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d003      	beq.n	800b202 <TIM_OC3_SetConfig+0x66>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	4a20      	ldr	r2, [pc, #128]	; (800b280 <TIM_OC3_SetConfig+0xe4>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d10d      	bne.n	800b21e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b208:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	68db      	ldr	r3, [r3, #12]
 800b20e:	021b      	lsls	r3, r3, #8
 800b210:	697a      	ldr	r2, [r7, #20]
 800b212:	4313      	orrs	r3, r2
 800b214:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b21c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	4a16      	ldr	r2, [pc, #88]	; (800b27c <TIM_OC3_SetConfig+0xe0>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d003      	beq.n	800b22e <TIM_OC3_SetConfig+0x92>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	4a15      	ldr	r2, [pc, #84]	; (800b280 <TIM_OC3_SetConfig+0xe4>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d113      	bne.n	800b256 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b234:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b23c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	695b      	ldr	r3, [r3, #20]
 800b242:	011b      	lsls	r3, r3, #4
 800b244:	693a      	ldr	r2, [r7, #16]
 800b246:	4313      	orrs	r3, r2
 800b248:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	699b      	ldr	r3, [r3, #24]
 800b24e:	011b      	lsls	r3, r3, #4
 800b250:	693a      	ldr	r2, [r7, #16]
 800b252:	4313      	orrs	r3, r2
 800b254:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	693a      	ldr	r2, [r7, #16]
 800b25a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	68fa      	ldr	r2, [r7, #12]
 800b260:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	685a      	ldr	r2, [r3, #4]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	697a      	ldr	r2, [r7, #20]
 800b26e:	621a      	str	r2, [r3, #32]
}
 800b270:	bf00      	nop
 800b272:	371c      	adds	r7, #28
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr
 800b27c:	40010000 	.word	0x40010000
 800b280:	40010400 	.word	0x40010400

0800b284 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b284:	b480      	push	{r7}
 800b286:	b087      	sub	sp, #28
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6a1b      	ldr	r3, [r3, #32]
 800b292:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6a1b      	ldr	r3, [r3, #32]
 800b29e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	69db      	ldr	r3, [r3, #28]
 800b2aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b2b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	021b      	lsls	r3, r3, #8
 800b2c2:	68fa      	ldr	r2, [r7, #12]
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b2ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	689b      	ldr	r3, [r3, #8]
 800b2d4:	031b      	lsls	r3, r3, #12
 800b2d6:	693a      	ldr	r2, [r7, #16]
 800b2d8:	4313      	orrs	r3, r2
 800b2da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	4a12      	ldr	r2, [pc, #72]	; (800b328 <TIM_OC4_SetConfig+0xa4>)
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d003      	beq.n	800b2ec <TIM_OC4_SetConfig+0x68>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	4a11      	ldr	r2, [pc, #68]	; (800b32c <TIM_OC4_SetConfig+0xa8>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d109      	bne.n	800b300 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b2f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	695b      	ldr	r3, [r3, #20]
 800b2f8:	019b      	lsls	r3, r3, #6
 800b2fa:	697a      	ldr	r2, [r7, #20]
 800b2fc:	4313      	orrs	r3, r2
 800b2fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	697a      	ldr	r2, [r7, #20]
 800b304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	68fa      	ldr	r2, [r7, #12]
 800b30a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	685a      	ldr	r2, [r3, #4]
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	693a      	ldr	r2, [r7, #16]
 800b318:	621a      	str	r2, [r3, #32]
}
 800b31a:	bf00      	nop
 800b31c:	371c      	adds	r7, #28
 800b31e:	46bd      	mov	sp, r7
 800b320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b324:	4770      	bx	lr
 800b326:	bf00      	nop
 800b328:	40010000 	.word	0x40010000
 800b32c:	40010400 	.word	0x40010400

0800b330 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b330:	b480      	push	{r7}
 800b332:	b087      	sub	sp, #28
 800b334:	af00      	add	r7, sp, #0
 800b336:	60f8      	str	r0, [r7, #12]
 800b338:	60b9      	str	r1, [r7, #8]
 800b33a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	6a1b      	ldr	r3, [r3, #32]
 800b340:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	6a1b      	ldr	r3, [r3, #32]
 800b346:	f023 0201 	bic.w	r2, r3, #1
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	699b      	ldr	r3, [r3, #24]
 800b352:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b35a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	011b      	lsls	r3, r3, #4
 800b360:	693a      	ldr	r2, [r7, #16]
 800b362:	4313      	orrs	r3, r2
 800b364:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	f023 030a 	bic.w	r3, r3, #10
 800b36c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b36e:	697a      	ldr	r2, [r7, #20]
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	4313      	orrs	r3, r2
 800b374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	693a      	ldr	r2, [r7, #16]
 800b37a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	697a      	ldr	r2, [r7, #20]
 800b380:	621a      	str	r2, [r3, #32]
}
 800b382:	bf00      	nop
 800b384:	371c      	adds	r7, #28
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr

0800b38e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b38e:	b480      	push	{r7}
 800b390:	b087      	sub	sp, #28
 800b392:	af00      	add	r7, sp, #0
 800b394:	60f8      	str	r0, [r7, #12]
 800b396:	60b9      	str	r1, [r7, #8]
 800b398:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	6a1b      	ldr	r3, [r3, #32]
 800b39e:	f023 0210 	bic.w	r2, r3, #16
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	699b      	ldr	r3, [r3, #24]
 800b3aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	6a1b      	ldr	r3, [r3, #32]
 800b3b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b3b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	031b      	lsls	r3, r3, #12
 800b3be:	697a      	ldr	r2, [r7, #20]
 800b3c0:	4313      	orrs	r3, r2
 800b3c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b3c4:	693b      	ldr	r3, [r7, #16]
 800b3c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b3ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	011b      	lsls	r3, r3, #4
 800b3d0:	693a      	ldr	r2, [r7, #16]
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	697a      	ldr	r2, [r7, #20]
 800b3da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	693a      	ldr	r2, [r7, #16]
 800b3e0:	621a      	str	r2, [r3, #32]
}
 800b3e2:	bf00      	nop
 800b3e4:	371c      	adds	r7, #28
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ec:	4770      	bx	lr

0800b3ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b3ee:	b480      	push	{r7}
 800b3f0:	b085      	sub	sp, #20
 800b3f2:	af00      	add	r7, sp, #0
 800b3f4:	6078      	str	r0, [r7, #4]
 800b3f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	689b      	ldr	r3, [r3, #8]
 800b3fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b404:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b406:	683a      	ldr	r2, [r7, #0]
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	4313      	orrs	r3, r2
 800b40c:	f043 0307 	orr.w	r3, r3, #7
 800b410:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	68fa      	ldr	r2, [r7, #12]
 800b416:	609a      	str	r2, [r3, #8]
}
 800b418:	bf00      	nop
 800b41a:	3714      	adds	r7, #20
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr

0800b424 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b424:	b480      	push	{r7}
 800b426:	b087      	sub	sp, #28
 800b428:	af00      	add	r7, sp, #0
 800b42a:	60f8      	str	r0, [r7, #12]
 800b42c:	60b9      	str	r1, [r7, #8]
 800b42e:	607a      	str	r2, [r7, #4]
 800b430:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	689b      	ldr	r3, [r3, #8]
 800b436:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b43e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	021a      	lsls	r2, r3, #8
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	431a      	orrs	r2, r3
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	4313      	orrs	r3, r2
 800b44c:	697a      	ldr	r2, [r7, #20]
 800b44e:	4313      	orrs	r3, r2
 800b450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	697a      	ldr	r2, [r7, #20]
 800b456:	609a      	str	r2, [r3, #8]
}
 800b458:	bf00      	nop
 800b45a:	371c      	adds	r7, #28
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr

0800b464 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b464:	b480      	push	{r7}
 800b466:	b087      	sub	sp, #28
 800b468:	af00      	add	r7, sp, #0
 800b46a:	60f8      	str	r0, [r7, #12]
 800b46c:	60b9      	str	r1, [r7, #8]
 800b46e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	f003 031f 	and.w	r3, r3, #31
 800b476:	2201      	movs	r2, #1
 800b478:	fa02 f303 	lsl.w	r3, r2, r3
 800b47c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	6a1a      	ldr	r2, [r3, #32]
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	43db      	mvns	r3, r3
 800b486:	401a      	ands	r2, r3
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	6a1a      	ldr	r2, [r3, #32]
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	f003 031f 	and.w	r3, r3, #31
 800b496:	6879      	ldr	r1, [r7, #4]
 800b498:	fa01 f303 	lsl.w	r3, r1, r3
 800b49c:	431a      	orrs	r2, r3
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	621a      	str	r2, [r3, #32]
}
 800b4a2:	bf00      	nop
 800b4a4:	371c      	adds	r7, #28
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ac:	4770      	bx	lr
	...

0800b4b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b085      	sub	sp, #20
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
 800b4b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4c0:	2b01      	cmp	r3, #1
 800b4c2:	d101      	bne.n	800b4c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b4c4:	2302      	movs	r3, #2
 800b4c6:	e05a      	b.n	800b57e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2202      	movs	r2, #2
 800b4d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	689b      	ldr	r3, [r3, #8]
 800b4e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	68fa      	ldr	r2, [r7, #12]
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	68fa      	ldr	r2, [r7, #12]
 800b500:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4a21      	ldr	r2, [pc, #132]	; (800b58c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d022      	beq.n	800b552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b514:	d01d      	beq.n	800b552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	4a1d      	ldr	r2, [pc, #116]	; (800b590 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d018      	beq.n	800b552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4a1b      	ldr	r2, [pc, #108]	; (800b594 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b526:	4293      	cmp	r3, r2
 800b528:	d013      	beq.n	800b552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	4a1a      	ldr	r2, [pc, #104]	; (800b598 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b530:	4293      	cmp	r3, r2
 800b532:	d00e      	beq.n	800b552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a18      	ldr	r2, [pc, #96]	; (800b59c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d009      	beq.n	800b552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	4a17      	ldr	r2, [pc, #92]	; (800b5a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b544:	4293      	cmp	r3, r2
 800b546:	d004      	beq.n	800b552 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	4a15      	ldr	r2, [pc, #84]	; (800b5a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b54e:	4293      	cmp	r3, r2
 800b550:	d10c      	bne.n	800b56c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b558:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	68ba      	ldr	r2, [r7, #8]
 800b560:	4313      	orrs	r3, r2
 800b562:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	68ba      	ldr	r2, [r7, #8]
 800b56a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2201      	movs	r2, #1
 800b570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2200      	movs	r2, #0
 800b578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b57c:	2300      	movs	r3, #0
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3714      	adds	r7, #20
 800b582:	46bd      	mov	sp, r7
 800b584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b588:	4770      	bx	lr
 800b58a:	bf00      	nop
 800b58c:	40010000 	.word	0x40010000
 800b590:	40000400 	.word	0x40000400
 800b594:	40000800 	.word	0x40000800
 800b598:	40000c00 	.word	0x40000c00
 800b59c:	40010400 	.word	0x40010400
 800b5a0:	40014000 	.word	0x40014000
 800b5a4:	40001800 	.word	0x40001800

0800b5a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b083      	sub	sp, #12
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b5b0:	bf00      	nop
 800b5b2:	370c      	adds	r7, #12
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ba:	4770      	bx	lr

0800b5bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b083      	sub	sp, #12
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b5c4:	bf00      	nop
 800b5c6:	370c      	adds	r7, #12
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr

0800b5d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b082      	sub	sp, #8
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d101      	bne.n	800b5e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b5de:	2301      	movs	r3, #1
 800b5e0:	e03f      	b.n	800b662 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d106      	bne.n	800b5fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f7f8 fa32 	bl	8003a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2224      	movs	r2, #36	; 0x24
 800b600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	68da      	ldr	r2, [r3, #12]
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b612:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 ff5f 	bl	800c4d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	691a      	ldr	r2, [r3, #16]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b628:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	695a      	ldr	r2, [r3, #20]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b638:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	68da      	ldr	r2, [r3, #12]
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b648:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2200      	movs	r2, #0
 800b64e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2220      	movs	r2, #32
 800b654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2220      	movs	r2, #32
 800b65c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b660:	2300      	movs	r3, #0
}
 800b662:	4618      	mov	r0, r3
 800b664:	3708      	adds	r7, #8
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}

0800b66a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b66a:	b580      	push	{r7, lr}
 800b66c:	b08a      	sub	sp, #40	; 0x28
 800b66e:	af02      	add	r7, sp, #8
 800b670:	60f8      	str	r0, [r7, #12]
 800b672:	60b9      	str	r1, [r7, #8]
 800b674:	603b      	str	r3, [r7, #0]
 800b676:	4613      	mov	r3, r2
 800b678:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b67a:	2300      	movs	r3, #0
 800b67c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b684:	b2db      	uxtb	r3, r3
 800b686:	2b20      	cmp	r3, #32
 800b688:	d17c      	bne.n	800b784 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d002      	beq.n	800b696 <HAL_UART_Transmit+0x2c>
 800b690:	88fb      	ldrh	r3, [r7, #6]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d101      	bne.n	800b69a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b696:	2301      	movs	r3, #1
 800b698:	e075      	b.n	800b786 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	d101      	bne.n	800b6a8 <HAL_UART_Transmit+0x3e>
 800b6a4:	2302      	movs	r3, #2
 800b6a6:	e06e      	b.n	800b786 <HAL_UART_Transmit+0x11c>
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2221      	movs	r2, #33	; 0x21
 800b6ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b6be:	f7f8 fcd1 	bl	8004064 <HAL_GetTick>
 800b6c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	88fa      	ldrh	r2, [r7, #6]
 800b6c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	88fa      	ldrh	r2, [r7, #6]
 800b6ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	689b      	ldr	r3, [r3, #8]
 800b6d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6d8:	d108      	bne.n	800b6ec <HAL_UART_Transmit+0x82>
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	691b      	ldr	r3, [r3, #16]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d104      	bne.n	800b6ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	61bb      	str	r3, [r7, #24]
 800b6ea:	e003      	b.n	800b6f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b6fc:	e02a      	b.n	800b754 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	9300      	str	r3, [sp, #0]
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	2200      	movs	r2, #0
 800b706:	2180      	movs	r1, #128	; 0x80
 800b708:	68f8      	ldr	r0, [r7, #12]
 800b70a:	f000 fc17 	bl	800bf3c <UART_WaitOnFlagUntilTimeout>
 800b70e:	4603      	mov	r3, r0
 800b710:	2b00      	cmp	r3, #0
 800b712:	d001      	beq.n	800b718 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b714:	2303      	movs	r3, #3
 800b716:	e036      	b.n	800b786 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b718:	69fb      	ldr	r3, [r7, #28]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d10b      	bne.n	800b736 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b71e:	69bb      	ldr	r3, [r7, #24]
 800b720:	881b      	ldrh	r3, [r3, #0]
 800b722:	461a      	mov	r2, r3
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b72c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b72e:	69bb      	ldr	r3, [r7, #24]
 800b730:	3302      	adds	r3, #2
 800b732:	61bb      	str	r3, [r7, #24]
 800b734:	e007      	b.n	800b746 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b736:	69fb      	ldr	r3, [r7, #28]
 800b738:	781a      	ldrb	r2, [r3, #0]
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b740:	69fb      	ldr	r3, [r7, #28]
 800b742:	3301      	adds	r3, #1
 800b744:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b74a:	b29b      	uxth	r3, r3
 800b74c:	3b01      	subs	r3, #1
 800b74e:	b29a      	uxth	r2, r3
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b758:	b29b      	uxth	r3, r3
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d1cf      	bne.n	800b6fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	9300      	str	r3, [sp, #0]
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	2200      	movs	r2, #0
 800b766:	2140      	movs	r1, #64	; 0x40
 800b768:	68f8      	ldr	r0, [r7, #12]
 800b76a:	f000 fbe7 	bl	800bf3c <UART_WaitOnFlagUntilTimeout>
 800b76e:	4603      	mov	r3, r0
 800b770:	2b00      	cmp	r3, #0
 800b772:	d001      	beq.n	800b778 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b774:	2303      	movs	r3, #3
 800b776:	e006      	b.n	800b786 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2220      	movs	r2, #32
 800b77c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b780:	2300      	movs	r3, #0
 800b782:	e000      	b.n	800b786 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b784:	2302      	movs	r3, #2
  }
}
 800b786:	4618      	mov	r0, r3
 800b788:	3720      	adds	r7, #32
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}

0800b78e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b78e:	b580      	push	{r7, lr}
 800b790:	b084      	sub	sp, #16
 800b792:	af00      	add	r7, sp, #0
 800b794:	60f8      	str	r0, [r7, #12]
 800b796:	60b9      	str	r1, [r7, #8]
 800b798:	4613      	mov	r3, r2
 800b79a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	2b20      	cmp	r3, #32
 800b7a6:	d11d      	bne.n	800b7e4 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d002      	beq.n	800b7b4 <HAL_UART_Receive_DMA+0x26>
 800b7ae:	88fb      	ldrh	r3, [r7, #6]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d101      	bne.n	800b7b8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	e016      	b.n	800b7e6 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7be:	2b01      	cmp	r3, #1
 800b7c0:	d101      	bne.n	800b7c6 <HAL_UART_Receive_DMA+0x38>
 800b7c2:	2302      	movs	r3, #2
 800b7c4:	e00f      	b.n	800b7e6 <HAL_UART_Receive_DMA+0x58>
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b7d4:	88fb      	ldrh	r3, [r7, #6]
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	68b9      	ldr	r1, [r7, #8]
 800b7da:	68f8      	ldr	r0, [r7, #12]
 800b7dc:	f000 fc1c 	bl	800c018 <UART_Start_Receive_DMA>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	e000      	b.n	800b7e6 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b7e4:	2302      	movs	r3, #2
  }
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3710      	adds	r7, #16
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
	...

0800b7f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b0ba      	sub	sp, #232	; 0xe8
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	68db      	ldr	r3, [r3, #12]
 800b808:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	695b      	ldr	r3, [r3, #20]
 800b812:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b816:	2300      	movs	r3, #0
 800b818:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b81c:	2300      	movs	r3, #0
 800b81e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b826:	f003 030f 	and.w	r3, r3, #15
 800b82a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b82e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b832:	2b00      	cmp	r3, #0
 800b834:	d10f      	bne.n	800b856 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b83a:	f003 0320 	and.w	r3, r3, #32
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d009      	beq.n	800b856 <HAL_UART_IRQHandler+0x66>
 800b842:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b846:	f003 0320 	and.w	r3, r3, #32
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d003      	beq.n	800b856 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f000 fd87 	bl	800c362 <UART_Receive_IT>
      return;
 800b854:	e256      	b.n	800bd04 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b856:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	f000 80de 	beq.w	800ba1c <HAL_UART_IRQHandler+0x22c>
 800b860:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b864:	f003 0301 	and.w	r3, r3, #1
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d106      	bne.n	800b87a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b86c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b870:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b874:	2b00      	cmp	r3, #0
 800b876:	f000 80d1 	beq.w	800ba1c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b87a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b87e:	f003 0301 	and.w	r3, r3, #1
 800b882:	2b00      	cmp	r3, #0
 800b884:	d00b      	beq.n	800b89e <HAL_UART_IRQHandler+0xae>
 800b886:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b88a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d005      	beq.n	800b89e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b896:	f043 0201 	orr.w	r2, r3, #1
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b89e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8a2:	f003 0304 	and.w	r3, r3, #4
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d00b      	beq.n	800b8c2 <HAL_UART_IRQHandler+0xd2>
 800b8aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8ae:	f003 0301 	and.w	r3, r3, #1
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d005      	beq.n	800b8c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ba:	f043 0202 	orr.w	r2, r3, #2
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b8c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8c6:	f003 0302 	and.w	r3, r3, #2
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d00b      	beq.n	800b8e6 <HAL_UART_IRQHandler+0xf6>
 800b8ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8d2:	f003 0301 	and.w	r3, r3, #1
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d005      	beq.n	800b8e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8de:	f043 0204 	orr.w	r2, r3, #4
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b8e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8ea:	f003 0308 	and.w	r3, r3, #8
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d011      	beq.n	800b916 <HAL_UART_IRQHandler+0x126>
 800b8f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8f6:	f003 0320 	and.w	r3, r3, #32
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d105      	bne.n	800b90a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b8fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b902:	f003 0301 	and.w	r3, r3, #1
 800b906:	2b00      	cmp	r3, #0
 800b908:	d005      	beq.n	800b916 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b90e:	f043 0208 	orr.w	r2, r3, #8
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	f000 81ed 	beq.w	800bcfa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b924:	f003 0320 	and.w	r3, r3, #32
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d008      	beq.n	800b93e <HAL_UART_IRQHandler+0x14e>
 800b92c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b930:	f003 0320 	and.w	r3, r3, #32
 800b934:	2b00      	cmp	r3, #0
 800b936:	d002      	beq.n	800b93e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f000 fd12 	bl	800c362 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	695b      	ldr	r3, [r3, #20]
 800b944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b948:	2b40      	cmp	r3, #64	; 0x40
 800b94a:	bf0c      	ite	eq
 800b94c:	2301      	moveq	r3, #1
 800b94e:	2300      	movne	r3, #0
 800b950:	b2db      	uxtb	r3, r3
 800b952:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b95a:	f003 0308 	and.w	r3, r3, #8
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d103      	bne.n	800b96a <HAL_UART_IRQHandler+0x17a>
 800b962:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b966:	2b00      	cmp	r3, #0
 800b968:	d04f      	beq.n	800ba0a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 fc1a 	bl	800c1a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	695b      	ldr	r3, [r3, #20]
 800b976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b97a:	2b40      	cmp	r3, #64	; 0x40
 800b97c:	d141      	bne.n	800ba02 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	3314      	adds	r3, #20
 800b984:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b988:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b98c:	e853 3f00 	ldrex	r3, [r3]
 800b990:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b994:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b998:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b99c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	3314      	adds	r3, #20
 800b9a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b9aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b9ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b9b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b9ba:	e841 2300 	strex	r3, r2, [r1]
 800b9be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b9c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d1d9      	bne.n	800b97e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d013      	beq.n	800b9fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9d6:	4a7d      	ldr	r2, [pc, #500]	; (800bbcc <HAL_UART_IRQHandler+0x3dc>)
 800b9d8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f7f9 fb04 	bl	8004fec <HAL_DMA_Abort_IT>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d016      	beq.n	800ba18 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9f0:	687a      	ldr	r2, [r7, #4]
 800b9f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b9f4:	4610      	mov	r0, r2
 800b9f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9f8:	e00e      	b.n	800ba18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f000 f990 	bl	800bd20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba00:	e00a      	b.n	800ba18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 f98c 	bl	800bd20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba08:	e006      	b.n	800ba18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f000 f988 	bl	800bd20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2200      	movs	r2, #0
 800ba14:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800ba16:	e170      	b.n	800bcfa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba18:	bf00      	nop
    return;
 800ba1a:	e16e      	b.n	800bcfa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba20:	2b01      	cmp	r3, #1
 800ba22:	f040 814a 	bne.w	800bcba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ba26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba2a:	f003 0310 	and.w	r3, r3, #16
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	f000 8143 	beq.w	800bcba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800ba34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba38:	f003 0310 	and.w	r3, r3, #16
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	f000 813c 	beq.w	800bcba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ba42:	2300      	movs	r3, #0
 800ba44:	60bb      	str	r3, [r7, #8]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	60bb      	str	r3, [r7, #8]
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	60bb      	str	r3, [r7, #8]
 800ba56:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	695b      	ldr	r3, [r3, #20]
 800ba5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba62:	2b40      	cmp	r3, #64	; 0x40
 800ba64:	f040 80b4 	bne.w	800bbd0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	685b      	ldr	r3, [r3, #4]
 800ba70:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ba74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	f000 8140 	beq.w	800bcfe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ba82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ba86:	429a      	cmp	r2, r3
 800ba88:	f080 8139 	bcs.w	800bcfe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ba92:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba98:	69db      	ldr	r3, [r3, #28]
 800ba9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba9e:	f000 8088 	beq.w	800bbb2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	330c      	adds	r3, #12
 800baa8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bab0:	e853 3f00 	ldrex	r3, [r3]
 800bab4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bab8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800babc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bac0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	330c      	adds	r3, #12
 800baca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bace:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bad2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bad6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bada:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bade:	e841 2300 	strex	r3, r2, [r1]
 800bae2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bae6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800baea:	2b00      	cmp	r3, #0
 800baec:	d1d9      	bne.n	800baa2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	3314      	adds	r3, #20
 800baf4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800baf8:	e853 3f00 	ldrex	r3, [r3]
 800bafc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bafe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb00:	f023 0301 	bic.w	r3, r3, #1
 800bb04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	3314      	adds	r3, #20
 800bb0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bb12:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bb16:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bb1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bb1e:	e841 2300 	strex	r3, r2, [r1]
 800bb22:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bb24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d1e1      	bne.n	800baee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	3314      	adds	r3, #20
 800bb30:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb34:	e853 3f00 	ldrex	r3, [r3]
 800bb38:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bb3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	3314      	adds	r3, #20
 800bb4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bb4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bb50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bb54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bb56:	e841 2300 	strex	r3, r2, [r1]
 800bb5a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bb5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d1e3      	bne.n	800bb2a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2220      	movs	r2, #32
 800bb66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	330c      	adds	r3, #12
 800bb76:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb7a:	e853 3f00 	ldrex	r3, [r3]
 800bb7e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bb80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb82:	f023 0310 	bic.w	r3, r3, #16
 800bb86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	330c      	adds	r3, #12
 800bb90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bb94:	65ba      	str	r2, [r7, #88]	; 0x58
 800bb96:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bb9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bb9c:	e841 2300 	strex	r3, r2, [r1]
 800bba0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d1e3      	bne.n	800bb70 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbac:	4618      	mov	r0, r3
 800bbae:	f7f9 f9ad 	bl	8004f0c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bbba:	b29b      	uxth	r3, r3
 800bbbc:	1ad3      	subs	r3, r2, r3
 800bbbe:	b29b      	uxth	r3, r3
 800bbc0:	4619      	mov	r1, r3
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f000 f8b6 	bl	800bd34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bbc8:	e099      	b.n	800bcfe <HAL_UART_IRQHandler+0x50e>
 800bbca:	bf00      	nop
 800bbcc:	0800c26b 	.word	0x0800c26b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bbd8:	b29b      	uxth	r3, r3
 800bbda:	1ad3      	subs	r3, r2, r3
 800bbdc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bbe4:	b29b      	uxth	r3, r3
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	f000 808b 	beq.w	800bd02 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800bbec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	f000 8086 	beq.w	800bd02 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	330c      	adds	r3, #12
 800bbfc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc00:	e853 3f00 	ldrex	r3, [r3]
 800bc04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bc06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	330c      	adds	r3, #12
 800bc16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bc1a:	647a      	str	r2, [r7, #68]	; 0x44
 800bc1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bc20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc22:	e841 2300 	strex	r3, r2, [r1]
 800bc26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bc28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d1e3      	bne.n	800bbf6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	3314      	adds	r3, #20
 800bc34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc38:	e853 3f00 	ldrex	r3, [r3]
 800bc3c:	623b      	str	r3, [r7, #32]
   return(result);
 800bc3e:	6a3b      	ldr	r3, [r7, #32]
 800bc40:	f023 0301 	bic.w	r3, r3, #1
 800bc44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	3314      	adds	r3, #20
 800bc4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bc52:	633a      	str	r2, [r7, #48]	; 0x30
 800bc54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc5a:	e841 2300 	strex	r3, r2, [r1]
 800bc5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bc60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d1e3      	bne.n	800bc2e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2220      	movs	r2, #32
 800bc6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2200      	movs	r2, #0
 800bc72:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	330c      	adds	r3, #12
 800bc7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	e853 3f00 	ldrex	r3, [r3]
 800bc82:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f023 0310 	bic.w	r3, r3, #16
 800bc8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	330c      	adds	r3, #12
 800bc94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bc98:	61fa      	str	r2, [r7, #28]
 800bc9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc9c:	69b9      	ldr	r1, [r7, #24]
 800bc9e:	69fa      	ldr	r2, [r7, #28]
 800bca0:	e841 2300 	strex	r3, r2, [r1]
 800bca4:	617b      	str	r3, [r7, #20]
   return(result);
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d1e3      	bne.n	800bc74 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bcac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f000 f83e 	bl	800bd34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bcb8:	e023      	b.n	800bd02 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bcba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d009      	beq.n	800bcda <HAL_UART_IRQHandler+0x4ea>
 800bcc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d003      	beq.n	800bcda <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f000 fadd 	bl	800c292 <UART_Transmit_IT>
    return;
 800bcd8:	e014      	b.n	800bd04 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bcda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d00e      	beq.n	800bd04 <HAL_UART_IRQHandler+0x514>
 800bce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d008      	beq.n	800bd04 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f000 fb1d 	bl	800c332 <UART_EndTransmit_IT>
    return;
 800bcf8:	e004      	b.n	800bd04 <HAL_UART_IRQHandler+0x514>
    return;
 800bcfa:	bf00      	nop
 800bcfc:	e002      	b.n	800bd04 <HAL_UART_IRQHandler+0x514>
      return;
 800bcfe:	bf00      	nop
 800bd00:	e000      	b.n	800bd04 <HAL_UART_IRQHandler+0x514>
      return;
 800bd02:	bf00      	nop
  }
}
 800bd04:	37e8      	adds	r7, #232	; 0xe8
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}
 800bd0a:	bf00      	nop

0800bd0c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b083      	sub	sp, #12
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800bd14:	bf00      	nop
 800bd16:	370c      	adds	r7, #12
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr

0800bd20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bd20:	b480      	push	{r7}
 800bd22:	b083      	sub	sp, #12
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bd28:	bf00      	nop
 800bd2a:	370c      	adds	r7, #12
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd32:	4770      	bx	lr

0800bd34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bd34:	b480      	push	{r7}
 800bd36:	b083      	sub	sp, #12
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	460b      	mov	r3, r1
 800bd3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bd40:	bf00      	nop
 800bd42:	370c      	adds	r7, #12
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr

0800bd4c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b09c      	sub	sp, #112	; 0x70
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd58:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d172      	bne.n	800be4e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800bd68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	330c      	adds	r3, #12
 800bd74:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd78:	e853 3f00 	ldrex	r3, [r3]
 800bd7c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bd7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bd84:	66bb      	str	r3, [r7, #104]	; 0x68
 800bd86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	330c      	adds	r3, #12
 800bd8c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bd8e:	65ba      	str	r2, [r7, #88]	; 0x58
 800bd90:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd92:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bd94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bd96:	e841 2300 	strex	r3, r2, [r1]
 800bd9a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bd9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d1e5      	bne.n	800bd6e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bda2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	3314      	adds	r3, #20
 800bda8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdac:	e853 3f00 	ldrex	r3, [r3]
 800bdb0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bdb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdb4:	f023 0301 	bic.w	r3, r3, #1
 800bdb8:	667b      	str	r3, [r7, #100]	; 0x64
 800bdba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	3314      	adds	r3, #20
 800bdc0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bdc2:	647a      	str	r2, [r7, #68]	; 0x44
 800bdc4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdc6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bdc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bdca:	e841 2300 	strex	r3, r2, [r1]
 800bdce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bdd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d1e5      	bne.n	800bda2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bdd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	3314      	adds	r3, #20
 800bddc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde0:	e853 3f00 	ldrex	r3, [r3]
 800bde4:	623b      	str	r3, [r7, #32]
   return(result);
 800bde6:	6a3b      	ldr	r3, [r7, #32]
 800bde8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bdec:	663b      	str	r3, [r7, #96]	; 0x60
 800bdee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	3314      	adds	r3, #20
 800bdf4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bdf6:	633a      	str	r2, [r7, #48]	; 0x30
 800bdf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bdfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdfe:	e841 2300 	strex	r3, r2, [r1]
 800be02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800be04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be06:	2b00      	cmp	r3, #0
 800be08:	d1e5      	bne.n	800bdd6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800be0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be0c:	2220      	movs	r2, #32
 800be0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be16:	2b01      	cmp	r3, #1
 800be18:	d119      	bne.n	800be4e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	330c      	adds	r3, #12
 800be20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	e853 3f00 	ldrex	r3, [r3]
 800be28:	60fb      	str	r3, [r7, #12]
   return(result);
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	f023 0310 	bic.w	r3, r3, #16
 800be30:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	330c      	adds	r3, #12
 800be38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800be3a:	61fa      	str	r2, [r7, #28]
 800be3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be3e:	69b9      	ldr	r1, [r7, #24]
 800be40:	69fa      	ldr	r2, [r7, #28]
 800be42:	e841 2300 	strex	r3, r2, [r1]
 800be46:	617b      	str	r3, [r7, #20]
   return(result);
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d1e5      	bne.n	800be1a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be52:	2b01      	cmp	r3, #1
 800be54:	d106      	bne.n	800be64 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800be56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800be5a:	4619      	mov	r1, r3
 800be5c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800be5e:	f7ff ff69 	bl	800bd34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800be62:	e002      	b.n	800be6a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800be64:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800be66:	f7f6 fb0f 	bl	8002488 <HAL_UART_RxCpltCallback>
}
 800be6a:	bf00      	nop
 800be6c:	3770      	adds	r7, #112	; 0x70
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}

0800be72 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800be72:	b580      	push	{r7, lr}
 800be74:	b084      	sub	sp, #16
 800be76:	af00      	add	r7, sp, #0
 800be78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be7e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be84:	2b01      	cmp	r3, #1
 800be86:	d108      	bne.n	800be9a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800be8c:	085b      	lsrs	r3, r3, #1
 800be8e:	b29b      	uxth	r3, r3
 800be90:	4619      	mov	r1, r3
 800be92:	68f8      	ldr	r0, [r7, #12]
 800be94:	f7ff ff4e 	bl	800bd34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800be98:	e002      	b.n	800bea0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800be9a:	68f8      	ldr	r0, [r7, #12]
 800be9c:	f7ff ff36 	bl	800bd0c <HAL_UART_RxHalfCpltCallback>
}
 800bea0:	bf00      	nop
 800bea2:	3710      	adds	r7, #16
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}

0800bea8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b084      	sub	sp, #16
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800beb0:	2300      	movs	r3, #0
 800beb2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beb8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	695b      	ldr	r3, [r3, #20]
 800bec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bec4:	2b80      	cmp	r3, #128	; 0x80
 800bec6:	bf0c      	ite	eq
 800bec8:	2301      	moveq	r3, #1
 800beca:	2300      	movne	r3, #0
 800becc:	b2db      	uxtb	r3, r3
 800bece:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bed6:	b2db      	uxtb	r3, r3
 800bed8:	2b21      	cmp	r3, #33	; 0x21
 800beda:	d108      	bne.n	800beee <UART_DMAError+0x46>
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d005      	beq.n	800beee <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	2200      	movs	r2, #0
 800bee6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800bee8:	68b8      	ldr	r0, [r7, #8]
 800beea:	f000 f933 	bl	800c154 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	695b      	ldr	r3, [r3, #20]
 800bef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bef8:	2b40      	cmp	r3, #64	; 0x40
 800befa:	bf0c      	ite	eq
 800befc:	2301      	moveq	r3, #1
 800befe:	2300      	movne	r3, #0
 800bf00:	b2db      	uxtb	r3, r3
 800bf02:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bf0a:	b2db      	uxtb	r3, r3
 800bf0c:	2b22      	cmp	r3, #34	; 0x22
 800bf0e:	d108      	bne.n	800bf22 <UART_DMAError+0x7a>
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d005      	beq.n	800bf22 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800bf1c:	68b8      	ldr	r0, [r7, #8]
 800bf1e:	f000 f941 	bl	800c1a4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf26:	f043 0210 	orr.w	r2, r3, #16
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bf2e:	68b8      	ldr	r0, [r7, #8]
 800bf30:	f7ff fef6 	bl	800bd20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf34:	bf00      	nop
 800bf36:	3710      	adds	r7, #16
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b090      	sub	sp, #64	; 0x40
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	60f8      	str	r0, [r7, #12]
 800bf44:	60b9      	str	r1, [r7, #8]
 800bf46:	603b      	str	r3, [r7, #0]
 800bf48:	4613      	mov	r3, r2
 800bf4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf4c:	e050      	b.n	800bff0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf54:	d04c      	beq.n	800bff0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800bf56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d007      	beq.n	800bf6c <UART_WaitOnFlagUntilTimeout+0x30>
 800bf5c:	f7f8 f882 	bl	8004064 <HAL_GetTick>
 800bf60:	4602      	mov	r2, r0
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	1ad3      	subs	r3, r2, r3
 800bf66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	d241      	bcs.n	800bff0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	330c      	adds	r3, #12
 800bf72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf76:	e853 3f00 	ldrex	r3, [r3]
 800bf7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bf82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	330c      	adds	r3, #12
 800bf8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bf8c:	637a      	str	r2, [r7, #52]	; 0x34
 800bf8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bf92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf94:	e841 2300 	strex	r3, r2, [r1]
 800bf98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bf9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d1e5      	bne.n	800bf6c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	3314      	adds	r3, #20
 800bfa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	e853 3f00 	ldrex	r3, [r3]
 800bfae:	613b      	str	r3, [r7, #16]
   return(result);
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	f023 0301 	bic.w	r3, r3, #1
 800bfb6:	63bb      	str	r3, [r7, #56]	; 0x38
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	3314      	adds	r3, #20
 800bfbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfc0:	623a      	str	r2, [r7, #32]
 800bfc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfc4:	69f9      	ldr	r1, [r7, #28]
 800bfc6:	6a3a      	ldr	r2, [r7, #32]
 800bfc8:	e841 2300 	strex	r3, r2, [r1]
 800bfcc:	61bb      	str	r3, [r7, #24]
   return(result);
 800bfce:	69bb      	ldr	r3, [r7, #24]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d1e5      	bne.n	800bfa0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	2220      	movs	r2, #32
 800bfd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	2220      	movs	r2, #32
 800bfe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800bfec:	2303      	movs	r3, #3
 800bfee:	e00f      	b.n	800c010 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	681a      	ldr	r2, [r3, #0]
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	4013      	ands	r3, r2
 800bffa:	68ba      	ldr	r2, [r7, #8]
 800bffc:	429a      	cmp	r2, r3
 800bffe:	bf0c      	ite	eq
 800c000:	2301      	moveq	r3, #1
 800c002:	2300      	movne	r3, #0
 800c004:	b2db      	uxtb	r3, r3
 800c006:	461a      	mov	r2, r3
 800c008:	79fb      	ldrb	r3, [r7, #7]
 800c00a:	429a      	cmp	r2, r3
 800c00c:	d09f      	beq.n	800bf4e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c00e:	2300      	movs	r3, #0
}
 800c010:	4618      	mov	r0, r3
 800c012:	3740      	adds	r7, #64	; 0x40
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}

0800c018 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b098      	sub	sp, #96	; 0x60
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	60f8      	str	r0, [r7, #12]
 800c020:	60b9      	str	r1, [r7, #8]
 800c022:	4613      	mov	r3, r2
 800c024:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800c026:	68ba      	ldr	r2, [r7, #8]
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	88fa      	ldrh	r2, [r7, #6]
 800c030:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	2200      	movs	r2, #0
 800c036:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	2222      	movs	r2, #34	; 0x22
 800c03c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c044:	4a40      	ldr	r2, [pc, #256]	; (800c148 <UART_Start_Receive_DMA+0x130>)
 800c046:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c04c:	4a3f      	ldr	r2, [pc, #252]	; (800c14c <UART_Start_Receive_DMA+0x134>)
 800c04e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c054:	4a3e      	ldr	r2, [pc, #248]	; (800c150 <UART_Start_Receive_DMA+0x138>)
 800c056:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c05c:	2200      	movs	r2, #0
 800c05e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800c060:	f107 0308 	add.w	r3, r7, #8
 800c064:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	3304      	adds	r3, #4
 800c070:	4619      	mov	r1, r3
 800c072:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c074:	681a      	ldr	r2, [r3, #0]
 800c076:	88fb      	ldrh	r3, [r7, #6]
 800c078:	f7f8 fef0 	bl	8004e5c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800c07c:	2300      	movs	r3, #0
 800c07e:	613b      	str	r3, [r7, #16]
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	613b      	str	r3, [r7, #16]
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	685b      	ldr	r3, [r3, #4]
 800c08e:	613b      	str	r3, [r7, #16]
 800c090:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	2200      	movs	r2, #0
 800c096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	691b      	ldr	r3, [r3, #16]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d019      	beq.n	800c0d6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	330c      	adds	r3, #12
 800c0a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0ac:	e853 3f00 	ldrex	r3, [r3]
 800c0b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c0b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c0b8:	65bb      	str	r3, [r7, #88]	; 0x58
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	330c      	adds	r3, #12
 800c0c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c0c2:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c0c4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0c6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c0c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c0ca:	e841 2300 	strex	r3, r2, [r1]
 800c0ce:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c0d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d1e5      	bne.n	800c0a2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	3314      	adds	r3, #20
 800c0dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e0:	e853 3f00 	ldrex	r3, [r3]
 800c0e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e8:	f043 0301 	orr.w	r3, r3, #1
 800c0ec:	657b      	str	r3, [r7, #84]	; 0x54
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	3314      	adds	r3, #20
 800c0f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c0f6:	63ba      	str	r2, [r7, #56]	; 0x38
 800c0f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c0fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0fe:	e841 2300 	strex	r3, r2, [r1]
 800c102:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c106:	2b00      	cmp	r3, #0
 800c108:	d1e5      	bne.n	800c0d6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	3314      	adds	r3, #20
 800c110:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c112:	69bb      	ldr	r3, [r7, #24]
 800c114:	e853 3f00 	ldrex	r3, [r3]
 800c118:	617b      	str	r3, [r7, #20]
   return(result);
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c120:	653b      	str	r3, [r7, #80]	; 0x50
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	3314      	adds	r3, #20
 800c128:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c12a:	627a      	str	r2, [r7, #36]	; 0x24
 800c12c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c12e:	6a39      	ldr	r1, [r7, #32]
 800c130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c132:	e841 2300 	strex	r3, r2, [r1]
 800c136:	61fb      	str	r3, [r7, #28]
   return(result);
 800c138:	69fb      	ldr	r3, [r7, #28]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d1e5      	bne.n	800c10a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800c13e:	2300      	movs	r3, #0
}
 800c140:	4618      	mov	r0, r3
 800c142:	3760      	adds	r7, #96	; 0x60
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}
 800c148:	0800bd4d 	.word	0x0800bd4d
 800c14c:	0800be73 	.word	0x0800be73
 800c150:	0800bea9 	.word	0x0800bea9

0800c154 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c154:	b480      	push	{r7}
 800c156:	b089      	sub	sp, #36	; 0x24
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	330c      	adds	r3, #12
 800c162:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	e853 3f00 	ldrex	r3, [r3]
 800c16a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c172:	61fb      	str	r3, [r7, #28]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	330c      	adds	r3, #12
 800c17a:	69fa      	ldr	r2, [r7, #28]
 800c17c:	61ba      	str	r2, [r7, #24]
 800c17e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c180:	6979      	ldr	r1, [r7, #20]
 800c182:	69ba      	ldr	r2, [r7, #24]
 800c184:	e841 2300 	strex	r3, r2, [r1]
 800c188:	613b      	str	r3, [r7, #16]
   return(result);
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d1e5      	bne.n	800c15c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2220      	movs	r2, #32
 800c194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800c198:	bf00      	nop
 800c19a:	3724      	adds	r7, #36	; 0x24
 800c19c:	46bd      	mov	sp, r7
 800c19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a2:	4770      	bx	lr

0800c1a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b095      	sub	sp, #84	; 0x54
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	330c      	adds	r3, #12
 800c1b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1b6:	e853 3f00 	ldrex	r3, [r3]
 800c1ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c1c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	330c      	adds	r3, #12
 800c1ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c1cc:	643a      	str	r2, [r7, #64]	; 0x40
 800c1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c1d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c1d4:	e841 2300 	strex	r3, r2, [r1]
 800c1d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d1e5      	bne.n	800c1ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	3314      	adds	r3, #20
 800c1e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1e8:	6a3b      	ldr	r3, [r7, #32]
 800c1ea:	e853 3f00 	ldrex	r3, [r3]
 800c1ee:	61fb      	str	r3, [r7, #28]
   return(result);
 800c1f0:	69fb      	ldr	r3, [r7, #28]
 800c1f2:	f023 0301 	bic.w	r3, r3, #1
 800c1f6:	64bb      	str	r3, [r7, #72]	; 0x48
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	3314      	adds	r3, #20
 800c1fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c200:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c202:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c204:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c206:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c208:	e841 2300 	strex	r3, r2, [r1]
 800c20c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c210:	2b00      	cmp	r3, #0
 800c212:	d1e5      	bne.n	800c1e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c218:	2b01      	cmp	r3, #1
 800c21a:	d119      	bne.n	800c250 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	330c      	adds	r3, #12
 800c222:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	e853 3f00 	ldrex	r3, [r3]
 800c22a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	f023 0310 	bic.w	r3, r3, #16
 800c232:	647b      	str	r3, [r7, #68]	; 0x44
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	330c      	adds	r3, #12
 800c23a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c23c:	61ba      	str	r2, [r7, #24]
 800c23e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c240:	6979      	ldr	r1, [r7, #20]
 800c242:	69ba      	ldr	r2, [r7, #24]
 800c244:	e841 2300 	strex	r3, r2, [r1]
 800c248:	613b      	str	r3, [r7, #16]
   return(result);
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d1e5      	bne.n	800c21c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2220      	movs	r2, #32
 800c254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2200      	movs	r2, #0
 800c25c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c25e:	bf00      	nop
 800c260:	3754      	adds	r7, #84	; 0x54
 800c262:	46bd      	mov	sp, r7
 800c264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c268:	4770      	bx	lr

0800c26a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c26a:	b580      	push	{r7, lr}
 800c26c:	b084      	sub	sp, #16
 800c26e:	af00      	add	r7, sp, #0
 800c270:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c276:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	2200      	movs	r2, #0
 800c27c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	2200      	movs	r2, #0
 800c282:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c284:	68f8      	ldr	r0, [r7, #12]
 800c286:	f7ff fd4b 	bl	800bd20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c28a:	bf00      	nop
 800c28c:	3710      	adds	r7, #16
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}

0800c292 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c292:	b480      	push	{r7}
 800c294:	b085      	sub	sp, #20
 800c296:	af00      	add	r7, sp, #0
 800c298:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c2a0:	b2db      	uxtb	r3, r3
 800c2a2:	2b21      	cmp	r3, #33	; 0x21
 800c2a4:	d13e      	bne.n	800c324 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	689b      	ldr	r3, [r3, #8]
 800c2aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2ae:	d114      	bne.n	800c2da <UART_Transmit_IT+0x48>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	691b      	ldr	r3, [r3, #16]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d110      	bne.n	800c2da <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6a1b      	ldr	r3, [r3, #32]
 800c2bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	881b      	ldrh	r3, [r3, #0]
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c2cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6a1b      	ldr	r3, [r3, #32]
 800c2d2:	1c9a      	adds	r2, r3, #2
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	621a      	str	r2, [r3, #32]
 800c2d8:	e008      	b.n	800c2ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6a1b      	ldr	r3, [r3, #32]
 800c2de:	1c59      	adds	r1, r3, #1
 800c2e0:	687a      	ldr	r2, [r7, #4]
 800c2e2:	6211      	str	r1, [r2, #32]
 800c2e4:	781a      	ldrb	r2, [r3, #0]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c2f0:	b29b      	uxth	r3, r3
 800c2f2:	3b01      	subs	r3, #1
 800c2f4:	b29b      	uxth	r3, r3
 800c2f6:	687a      	ldr	r2, [r7, #4]
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d10f      	bne.n	800c320 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	68da      	ldr	r2, [r3, #12]
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c30e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	68da      	ldr	r2, [r3, #12]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c31e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c320:	2300      	movs	r3, #0
 800c322:	e000      	b.n	800c326 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c324:	2302      	movs	r3, #2
  }
}
 800c326:	4618      	mov	r0, r3
 800c328:	3714      	adds	r7, #20
 800c32a:	46bd      	mov	sp, r7
 800c32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c330:	4770      	bx	lr

0800c332 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c332:	b580      	push	{r7, lr}
 800c334:	b082      	sub	sp, #8
 800c336:	af00      	add	r7, sp, #0
 800c338:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	68da      	ldr	r2, [r3, #12]
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c348:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2220      	movs	r2, #32
 800c34e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f7f6 f8c2 	bl	80024dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c358:	2300      	movs	r3, #0
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3708      	adds	r7, #8
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}

0800c362 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c362:	b580      	push	{r7, lr}
 800c364:	b08c      	sub	sp, #48	; 0x30
 800c366:	af00      	add	r7, sp, #0
 800c368:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c370:	b2db      	uxtb	r3, r3
 800c372:	2b22      	cmp	r3, #34	; 0x22
 800c374:	f040 80ab 	bne.w	800c4ce <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	689b      	ldr	r3, [r3, #8]
 800c37c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c380:	d117      	bne.n	800c3b2 <UART_Receive_IT+0x50>
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	691b      	ldr	r3, [r3, #16]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d113      	bne.n	800c3b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c38a:	2300      	movs	r3, #0
 800c38c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c392:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	685b      	ldr	r3, [r3, #4]
 800c39a:	b29b      	uxth	r3, r3
 800c39c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3a0:	b29a      	uxth	r2, r3
 800c3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3aa:	1c9a      	adds	r2, r3, #2
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	629a      	str	r2, [r3, #40]	; 0x28
 800c3b0:	e026      	b.n	800c400 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	689b      	ldr	r3, [r3, #8]
 800c3c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3c4:	d007      	beq.n	800c3d6 <UART_Receive_IT+0x74>
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	689b      	ldr	r3, [r3, #8]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d10a      	bne.n	800c3e4 <UART_Receive_IT+0x82>
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	691b      	ldr	r3, [r3, #16]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d106      	bne.n	800c3e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	b2da      	uxtb	r2, r3
 800c3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e0:	701a      	strb	r2, [r3, #0]
 800c3e2:	e008      	b.n	800c3f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	685b      	ldr	r3, [r3, #4]
 800c3ea:	b2db      	uxtb	r3, r3
 800c3ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3f0:	b2da      	uxtb	r2, r3
 800c3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3fa:	1c5a      	adds	r2, r3, #1
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c404:	b29b      	uxth	r3, r3
 800c406:	3b01      	subs	r3, #1
 800c408:	b29b      	uxth	r3, r3
 800c40a:	687a      	ldr	r2, [r7, #4]
 800c40c:	4619      	mov	r1, r3
 800c40e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c410:	2b00      	cmp	r3, #0
 800c412:	d15a      	bne.n	800c4ca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	68da      	ldr	r2, [r3, #12]
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f022 0220 	bic.w	r2, r2, #32
 800c422:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	68da      	ldr	r2, [r3, #12]
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c432:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	695a      	ldr	r2, [r3, #20]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f022 0201 	bic.w	r2, r2, #1
 800c442:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2220      	movs	r2, #32
 800c448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c450:	2b01      	cmp	r3, #1
 800c452:	d135      	bne.n	800c4c0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2200      	movs	r2, #0
 800c458:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	330c      	adds	r3, #12
 800c460:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	e853 3f00 	ldrex	r3, [r3]
 800c468:	613b      	str	r3, [r7, #16]
   return(result);
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	f023 0310 	bic.w	r3, r3, #16
 800c470:	627b      	str	r3, [r7, #36]	; 0x24
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	330c      	adds	r3, #12
 800c478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c47a:	623a      	str	r2, [r7, #32]
 800c47c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c47e:	69f9      	ldr	r1, [r7, #28]
 800c480:	6a3a      	ldr	r2, [r7, #32]
 800c482:	e841 2300 	strex	r3, r2, [r1]
 800c486:	61bb      	str	r3, [r7, #24]
   return(result);
 800c488:	69bb      	ldr	r3, [r7, #24]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d1e5      	bne.n	800c45a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f003 0310 	and.w	r3, r3, #16
 800c498:	2b10      	cmp	r3, #16
 800c49a:	d10a      	bne.n	800c4b2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c49c:	2300      	movs	r3, #0
 800c49e:	60fb      	str	r3, [r7, #12]
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	60fb      	str	r3, [r7, #12]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	60fb      	str	r3, [r7, #12]
 800c4b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c4b6:	4619      	mov	r1, r3
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f7ff fc3b 	bl	800bd34 <HAL_UARTEx_RxEventCallback>
 800c4be:	e002      	b.n	800c4c6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f7f5 ffe1 	bl	8002488 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	e002      	b.n	800c4d0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	e000      	b.n	800c4d0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c4ce:	2302      	movs	r3, #2
  }
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3730      	adds	r7, #48	; 0x30
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}

0800c4d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c4d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c4dc:	b0c0      	sub	sp, #256	; 0x100
 800c4de:	af00      	add	r7, sp, #0
 800c4e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c4e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	691b      	ldr	r3, [r3, #16]
 800c4ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c4f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4f4:	68d9      	ldr	r1, [r3, #12]
 800c4f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4fa:	681a      	ldr	r2, [r3, #0]
 800c4fc:	ea40 0301 	orr.w	r3, r0, r1
 800c500:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c506:	689a      	ldr	r2, [r3, #8]
 800c508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c50c:	691b      	ldr	r3, [r3, #16]
 800c50e:	431a      	orrs	r2, r3
 800c510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c514:	695b      	ldr	r3, [r3, #20]
 800c516:	431a      	orrs	r2, r3
 800c518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c51c:	69db      	ldr	r3, [r3, #28]
 800c51e:	4313      	orrs	r3, r2
 800c520:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	68db      	ldr	r3, [r3, #12]
 800c52c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c530:	f021 010c 	bic.w	r1, r1, #12
 800c534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c53e:	430b      	orrs	r3, r1
 800c540:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	695b      	ldr	r3, [r3, #20]
 800c54a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c54e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c552:	6999      	ldr	r1, [r3, #24]
 800c554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c558:	681a      	ldr	r2, [r3, #0]
 800c55a:	ea40 0301 	orr.w	r3, r0, r1
 800c55e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c564:	681a      	ldr	r2, [r3, #0]
 800c566:	4b8f      	ldr	r3, [pc, #572]	; (800c7a4 <UART_SetConfig+0x2cc>)
 800c568:	429a      	cmp	r2, r3
 800c56a:	d005      	beq.n	800c578 <UART_SetConfig+0xa0>
 800c56c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c570:	681a      	ldr	r2, [r3, #0]
 800c572:	4b8d      	ldr	r3, [pc, #564]	; (800c7a8 <UART_SetConfig+0x2d0>)
 800c574:	429a      	cmp	r2, r3
 800c576:	d104      	bne.n	800c582 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c578:	f7fc fe4c 	bl	8009214 <HAL_RCC_GetPCLK2Freq>
 800c57c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c580:	e003      	b.n	800c58a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c582:	f7fc fe33 	bl	80091ec <HAL_RCC_GetPCLK1Freq>
 800c586:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c58a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c58e:	69db      	ldr	r3, [r3, #28]
 800c590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c594:	f040 810c 	bne.w	800c7b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c598:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c59c:	2200      	movs	r2, #0
 800c59e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c5a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c5a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c5aa:	4622      	mov	r2, r4
 800c5ac:	462b      	mov	r3, r5
 800c5ae:	1891      	adds	r1, r2, r2
 800c5b0:	65b9      	str	r1, [r7, #88]	; 0x58
 800c5b2:	415b      	adcs	r3, r3
 800c5b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c5b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c5ba:	4621      	mov	r1, r4
 800c5bc:	eb12 0801 	adds.w	r8, r2, r1
 800c5c0:	4629      	mov	r1, r5
 800c5c2:	eb43 0901 	adc.w	r9, r3, r1
 800c5c6:	f04f 0200 	mov.w	r2, #0
 800c5ca:	f04f 0300 	mov.w	r3, #0
 800c5ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c5d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c5d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c5da:	4690      	mov	r8, r2
 800c5dc:	4699      	mov	r9, r3
 800c5de:	4623      	mov	r3, r4
 800c5e0:	eb18 0303 	adds.w	r3, r8, r3
 800c5e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c5e8:	462b      	mov	r3, r5
 800c5ea:	eb49 0303 	adc.w	r3, r9, r3
 800c5ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c5f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5f6:	685b      	ldr	r3, [r3, #4]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c5fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c602:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c606:	460b      	mov	r3, r1
 800c608:	18db      	adds	r3, r3, r3
 800c60a:	653b      	str	r3, [r7, #80]	; 0x50
 800c60c:	4613      	mov	r3, r2
 800c60e:	eb42 0303 	adc.w	r3, r2, r3
 800c612:	657b      	str	r3, [r7, #84]	; 0x54
 800c614:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c618:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c61c:	f7f4 fb54 	bl	8000cc8 <__aeabi_uldivmod>
 800c620:	4602      	mov	r2, r0
 800c622:	460b      	mov	r3, r1
 800c624:	4b61      	ldr	r3, [pc, #388]	; (800c7ac <UART_SetConfig+0x2d4>)
 800c626:	fba3 2302 	umull	r2, r3, r3, r2
 800c62a:	095b      	lsrs	r3, r3, #5
 800c62c:	011c      	lsls	r4, r3, #4
 800c62e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c632:	2200      	movs	r2, #0
 800c634:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c638:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c63c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c640:	4642      	mov	r2, r8
 800c642:	464b      	mov	r3, r9
 800c644:	1891      	adds	r1, r2, r2
 800c646:	64b9      	str	r1, [r7, #72]	; 0x48
 800c648:	415b      	adcs	r3, r3
 800c64a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c64c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c650:	4641      	mov	r1, r8
 800c652:	eb12 0a01 	adds.w	sl, r2, r1
 800c656:	4649      	mov	r1, r9
 800c658:	eb43 0b01 	adc.w	fp, r3, r1
 800c65c:	f04f 0200 	mov.w	r2, #0
 800c660:	f04f 0300 	mov.w	r3, #0
 800c664:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c668:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c66c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c670:	4692      	mov	sl, r2
 800c672:	469b      	mov	fp, r3
 800c674:	4643      	mov	r3, r8
 800c676:	eb1a 0303 	adds.w	r3, sl, r3
 800c67a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c67e:	464b      	mov	r3, r9
 800c680:	eb4b 0303 	adc.w	r3, fp, r3
 800c684:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c68c:	685b      	ldr	r3, [r3, #4]
 800c68e:	2200      	movs	r2, #0
 800c690:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c694:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c698:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c69c:	460b      	mov	r3, r1
 800c69e:	18db      	adds	r3, r3, r3
 800c6a0:	643b      	str	r3, [r7, #64]	; 0x40
 800c6a2:	4613      	mov	r3, r2
 800c6a4:	eb42 0303 	adc.w	r3, r2, r3
 800c6a8:	647b      	str	r3, [r7, #68]	; 0x44
 800c6aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c6ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c6b2:	f7f4 fb09 	bl	8000cc8 <__aeabi_uldivmod>
 800c6b6:	4602      	mov	r2, r0
 800c6b8:	460b      	mov	r3, r1
 800c6ba:	4611      	mov	r1, r2
 800c6bc:	4b3b      	ldr	r3, [pc, #236]	; (800c7ac <UART_SetConfig+0x2d4>)
 800c6be:	fba3 2301 	umull	r2, r3, r3, r1
 800c6c2:	095b      	lsrs	r3, r3, #5
 800c6c4:	2264      	movs	r2, #100	; 0x64
 800c6c6:	fb02 f303 	mul.w	r3, r2, r3
 800c6ca:	1acb      	subs	r3, r1, r3
 800c6cc:	00db      	lsls	r3, r3, #3
 800c6ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c6d2:	4b36      	ldr	r3, [pc, #216]	; (800c7ac <UART_SetConfig+0x2d4>)
 800c6d4:	fba3 2302 	umull	r2, r3, r3, r2
 800c6d8:	095b      	lsrs	r3, r3, #5
 800c6da:	005b      	lsls	r3, r3, #1
 800c6dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c6e0:	441c      	add	r4, r3
 800c6e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c6ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c6f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c6f4:	4642      	mov	r2, r8
 800c6f6:	464b      	mov	r3, r9
 800c6f8:	1891      	adds	r1, r2, r2
 800c6fa:	63b9      	str	r1, [r7, #56]	; 0x38
 800c6fc:	415b      	adcs	r3, r3
 800c6fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c700:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c704:	4641      	mov	r1, r8
 800c706:	1851      	adds	r1, r2, r1
 800c708:	6339      	str	r1, [r7, #48]	; 0x30
 800c70a:	4649      	mov	r1, r9
 800c70c:	414b      	adcs	r3, r1
 800c70e:	637b      	str	r3, [r7, #52]	; 0x34
 800c710:	f04f 0200 	mov.w	r2, #0
 800c714:	f04f 0300 	mov.w	r3, #0
 800c718:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c71c:	4659      	mov	r1, fp
 800c71e:	00cb      	lsls	r3, r1, #3
 800c720:	4651      	mov	r1, sl
 800c722:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c726:	4651      	mov	r1, sl
 800c728:	00ca      	lsls	r2, r1, #3
 800c72a:	4610      	mov	r0, r2
 800c72c:	4619      	mov	r1, r3
 800c72e:	4603      	mov	r3, r0
 800c730:	4642      	mov	r2, r8
 800c732:	189b      	adds	r3, r3, r2
 800c734:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c738:	464b      	mov	r3, r9
 800c73a:	460a      	mov	r2, r1
 800c73c:	eb42 0303 	adc.w	r3, r2, r3
 800c740:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c748:	685b      	ldr	r3, [r3, #4]
 800c74a:	2200      	movs	r2, #0
 800c74c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c750:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c754:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c758:	460b      	mov	r3, r1
 800c75a:	18db      	adds	r3, r3, r3
 800c75c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c75e:	4613      	mov	r3, r2
 800c760:	eb42 0303 	adc.w	r3, r2, r3
 800c764:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c766:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c76a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c76e:	f7f4 faab 	bl	8000cc8 <__aeabi_uldivmod>
 800c772:	4602      	mov	r2, r0
 800c774:	460b      	mov	r3, r1
 800c776:	4b0d      	ldr	r3, [pc, #52]	; (800c7ac <UART_SetConfig+0x2d4>)
 800c778:	fba3 1302 	umull	r1, r3, r3, r2
 800c77c:	095b      	lsrs	r3, r3, #5
 800c77e:	2164      	movs	r1, #100	; 0x64
 800c780:	fb01 f303 	mul.w	r3, r1, r3
 800c784:	1ad3      	subs	r3, r2, r3
 800c786:	00db      	lsls	r3, r3, #3
 800c788:	3332      	adds	r3, #50	; 0x32
 800c78a:	4a08      	ldr	r2, [pc, #32]	; (800c7ac <UART_SetConfig+0x2d4>)
 800c78c:	fba2 2303 	umull	r2, r3, r2, r3
 800c790:	095b      	lsrs	r3, r3, #5
 800c792:	f003 0207 	and.w	r2, r3, #7
 800c796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	4422      	add	r2, r4
 800c79e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c7a0:	e106      	b.n	800c9b0 <UART_SetConfig+0x4d8>
 800c7a2:	bf00      	nop
 800c7a4:	40011000 	.word	0x40011000
 800c7a8:	40011400 	.word	0x40011400
 800c7ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c7b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c7ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c7be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c7c2:	4642      	mov	r2, r8
 800c7c4:	464b      	mov	r3, r9
 800c7c6:	1891      	adds	r1, r2, r2
 800c7c8:	6239      	str	r1, [r7, #32]
 800c7ca:	415b      	adcs	r3, r3
 800c7cc:	627b      	str	r3, [r7, #36]	; 0x24
 800c7ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c7d2:	4641      	mov	r1, r8
 800c7d4:	1854      	adds	r4, r2, r1
 800c7d6:	4649      	mov	r1, r9
 800c7d8:	eb43 0501 	adc.w	r5, r3, r1
 800c7dc:	f04f 0200 	mov.w	r2, #0
 800c7e0:	f04f 0300 	mov.w	r3, #0
 800c7e4:	00eb      	lsls	r3, r5, #3
 800c7e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c7ea:	00e2      	lsls	r2, r4, #3
 800c7ec:	4614      	mov	r4, r2
 800c7ee:	461d      	mov	r5, r3
 800c7f0:	4643      	mov	r3, r8
 800c7f2:	18e3      	adds	r3, r4, r3
 800c7f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c7f8:	464b      	mov	r3, r9
 800c7fa:	eb45 0303 	adc.w	r3, r5, r3
 800c7fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c806:	685b      	ldr	r3, [r3, #4]
 800c808:	2200      	movs	r2, #0
 800c80a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c80e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c812:	f04f 0200 	mov.w	r2, #0
 800c816:	f04f 0300 	mov.w	r3, #0
 800c81a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c81e:	4629      	mov	r1, r5
 800c820:	008b      	lsls	r3, r1, #2
 800c822:	4621      	mov	r1, r4
 800c824:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c828:	4621      	mov	r1, r4
 800c82a:	008a      	lsls	r2, r1, #2
 800c82c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c830:	f7f4 fa4a 	bl	8000cc8 <__aeabi_uldivmod>
 800c834:	4602      	mov	r2, r0
 800c836:	460b      	mov	r3, r1
 800c838:	4b60      	ldr	r3, [pc, #384]	; (800c9bc <UART_SetConfig+0x4e4>)
 800c83a:	fba3 2302 	umull	r2, r3, r3, r2
 800c83e:	095b      	lsrs	r3, r3, #5
 800c840:	011c      	lsls	r4, r3, #4
 800c842:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c846:	2200      	movs	r2, #0
 800c848:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c84c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c850:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c854:	4642      	mov	r2, r8
 800c856:	464b      	mov	r3, r9
 800c858:	1891      	adds	r1, r2, r2
 800c85a:	61b9      	str	r1, [r7, #24]
 800c85c:	415b      	adcs	r3, r3
 800c85e:	61fb      	str	r3, [r7, #28]
 800c860:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c864:	4641      	mov	r1, r8
 800c866:	1851      	adds	r1, r2, r1
 800c868:	6139      	str	r1, [r7, #16]
 800c86a:	4649      	mov	r1, r9
 800c86c:	414b      	adcs	r3, r1
 800c86e:	617b      	str	r3, [r7, #20]
 800c870:	f04f 0200 	mov.w	r2, #0
 800c874:	f04f 0300 	mov.w	r3, #0
 800c878:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c87c:	4659      	mov	r1, fp
 800c87e:	00cb      	lsls	r3, r1, #3
 800c880:	4651      	mov	r1, sl
 800c882:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c886:	4651      	mov	r1, sl
 800c888:	00ca      	lsls	r2, r1, #3
 800c88a:	4610      	mov	r0, r2
 800c88c:	4619      	mov	r1, r3
 800c88e:	4603      	mov	r3, r0
 800c890:	4642      	mov	r2, r8
 800c892:	189b      	adds	r3, r3, r2
 800c894:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c898:	464b      	mov	r3, r9
 800c89a:	460a      	mov	r2, r1
 800c89c:	eb42 0303 	adc.w	r3, r2, r3
 800c8a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c8a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8a8:	685b      	ldr	r3, [r3, #4]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	67bb      	str	r3, [r7, #120]	; 0x78
 800c8ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c8b0:	f04f 0200 	mov.w	r2, #0
 800c8b4:	f04f 0300 	mov.w	r3, #0
 800c8b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c8bc:	4649      	mov	r1, r9
 800c8be:	008b      	lsls	r3, r1, #2
 800c8c0:	4641      	mov	r1, r8
 800c8c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c8c6:	4641      	mov	r1, r8
 800c8c8:	008a      	lsls	r2, r1, #2
 800c8ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c8ce:	f7f4 f9fb 	bl	8000cc8 <__aeabi_uldivmod>
 800c8d2:	4602      	mov	r2, r0
 800c8d4:	460b      	mov	r3, r1
 800c8d6:	4611      	mov	r1, r2
 800c8d8:	4b38      	ldr	r3, [pc, #224]	; (800c9bc <UART_SetConfig+0x4e4>)
 800c8da:	fba3 2301 	umull	r2, r3, r3, r1
 800c8de:	095b      	lsrs	r3, r3, #5
 800c8e0:	2264      	movs	r2, #100	; 0x64
 800c8e2:	fb02 f303 	mul.w	r3, r2, r3
 800c8e6:	1acb      	subs	r3, r1, r3
 800c8e8:	011b      	lsls	r3, r3, #4
 800c8ea:	3332      	adds	r3, #50	; 0x32
 800c8ec:	4a33      	ldr	r2, [pc, #204]	; (800c9bc <UART_SetConfig+0x4e4>)
 800c8ee:	fba2 2303 	umull	r2, r3, r2, r3
 800c8f2:	095b      	lsrs	r3, r3, #5
 800c8f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c8f8:	441c      	add	r4, r3
 800c8fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c8fe:	2200      	movs	r2, #0
 800c900:	673b      	str	r3, [r7, #112]	; 0x70
 800c902:	677a      	str	r2, [r7, #116]	; 0x74
 800c904:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c908:	4642      	mov	r2, r8
 800c90a:	464b      	mov	r3, r9
 800c90c:	1891      	adds	r1, r2, r2
 800c90e:	60b9      	str	r1, [r7, #8]
 800c910:	415b      	adcs	r3, r3
 800c912:	60fb      	str	r3, [r7, #12]
 800c914:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c918:	4641      	mov	r1, r8
 800c91a:	1851      	adds	r1, r2, r1
 800c91c:	6039      	str	r1, [r7, #0]
 800c91e:	4649      	mov	r1, r9
 800c920:	414b      	adcs	r3, r1
 800c922:	607b      	str	r3, [r7, #4]
 800c924:	f04f 0200 	mov.w	r2, #0
 800c928:	f04f 0300 	mov.w	r3, #0
 800c92c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c930:	4659      	mov	r1, fp
 800c932:	00cb      	lsls	r3, r1, #3
 800c934:	4651      	mov	r1, sl
 800c936:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c93a:	4651      	mov	r1, sl
 800c93c:	00ca      	lsls	r2, r1, #3
 800c93e:	4610      	mov	r0, r2
 800c940:	4619      	mov	r1, r3
 800c942:	4603      	mov	r3, r0
 800c944:	4642      	mov	r2, r8
 800c946:	189b      	adds	r3, r3, r2
 800c948:	66bb      	str	r3, [r7, #104]	; 0x68
 800c94a:	464b      	mov	r3, r9
 800c94c:	460a      	mov	r2, r1
 800c94e:	eb42 0303 	adc.w	r3, r2, r3
 800c952:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c958:	685b      	ldr	r3, [r3, #4]
 800c95a:	2200      	movs	r2, #0
 800c95c:	663b      	str	r3, [r7, #96]	; 0x60
 800c95e:	667a      	str	r2, [r7, #100]	; 0x64
 800c960:	f04f 0200 	mov.w	r2, #0
 800c964:	f04f 0300 	mov.w	r3, #0
 800c968:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c96c:	4649      	mov	r1, r9
 800c96e:	008b      	lsls	r3, r1, #2
 800c970:	4641      	mov	r1, r8
 800c972:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c976:	4641      	mov	r1, r8
 800c978:	008a      	lsls	r2, r1, #2
 800c97a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c97e:	f7f4 f9a3 	bl	8000cc8 <__aeabi_uldivmod>
 800c982:	4602      	mov	r2, r0
 800c984:	460b      	mov	r3, r1
 800c986:	4b0d      	ldr	r3, [pc, #52]	; (800c9bc <UART_SetConfig+0x4e4>)
 800c988:	fba3 1302 	umull	r1, r3, r3, r2
 800c98c:	095b      	lsrs	r3, r3, #5
 800c98e:	2164      	movs	r1, #100	; 0x64
 800c990:	fb01 f303 	mul.w	r3, r1, r3
 800c994:	1ad3      	subs	r3, r2, r3
 800c996:	011b      	lsls	r3, r3, #4
 800c998:	3332      	adds	r3, #50	; 0x32
 800c99a:	4a08      	ldr	r2, [pc, #32]	; (800c9bc <UART_SetConfig+0x4e4>)
 800c99c:	fba2 2303 	umull	r2, r3, r2, r3
 800c9a0:	095b      	lsrs	r3, r3, #5
 800c9a2:	f003 020f 	and.w	r2, r3, #15
 800c9a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	4422      	add	r2, r4
 800c9ae:	609a      	str	r2, [r3, #8]
}
 800c9b0:	bf00      	nop
 800c9b2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c9bc:	51eb851f 	.word	0x51eb851f

0800c9c0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800c9c4:	4904      	ldr	r1, [pc, #16]	; (800c9d8 <MX_FATFS_Init+0x18>)
 800c9c6:	4805      	ldr	r0, [pc, #20]	; (800c9dc <MX_FATFS_Init+0x1c>)
 800c9c8:	f003 f9da 	bl	800fd80 <FATFS_LinkDriver>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	4b03      	ldr	r3, [pc, #12]	; (800c9e0 <MX_FATFS_Init+0x20>)
 800c9d2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c9d4:	bf00      	nop
 800c9d6:	bd80      	pop	{r7, pc}
 800c9d8:	20002a68 	.word	0x20002a68
 800c9dc:	20000018 	.word	0x20000018
 800c9e0:	20002a64 	.word	0x20002a64

0800c9e4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c9e8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f2:	4770      	bx	lr

0800c9f4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b082      	sub	sp, #8
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	SD_disk_initialize (pdrv);
 800c9fe:	79fb      	ldrb	r3, [r7, #7]
 800ca00:	4618      	mov	r0, r3
 800ca02:	f7f5 f945 	bl	8001c90 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 800ca06:	bf00      	nop
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3708      	adds	r7, #8
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b082      	sub	sp, #8
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	4603      	mov	r3, r0
 800ca18:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
   // Stat = STA_NOINIT;
   // return Stat;
	SD_disk_status ( pdrv);
 800ca1a:	79fb      	ldrb	r3, [r7, #7]
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f7f5 fa1d 	bl	8001e5c <SD_disk_status>
  /* USER CODE END STATUS */
}
 800ca22:	bf00      	nop
 800ca24:	4618      	mov	r0, r3
 800ca26:	3708      	adds	r7, #8
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}

0800ca2c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b084      	sub	sp, #16
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	60b9      	str	r1, [r7, #8]
 800ca34:	607a      	str	r2, [r7, #4]
 800ca36:	603b      	str	r3, [r7, #0]
 800ca38:	4603      	mov	r3, r0
 800ca3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	SD_disk_read ( pdrv,  buff,  sector,  count);
 800ca3c:	7bf8      	ldrb	r0, [r7, #15]
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	687a      	ldr	r2, [r7, #4]
 800ca42:	68b9      	ldr	r1, [r7, #8]
 800ca44:	f7f5 fa20 	bl	8001e88 <SD_disk_read>
  /* USER CODE END READ */
}
 800ca48:	bf00      	nop
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3710      	adds	r7, #16
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}

0800ca52 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800ca52:	b580      	push	{r7, lr}
 800ca54:	b084      	sub	sp, #16
 800ca56:	af00      	add	r7, sp, #0
 800ca58:	60b9      	str	r1, [r7, #8]
 800ca5a:	607a      	str	r2, [r7, #4]
 800ca5c:	603b      	str	r3, [r7, #0]
 800ca5e:	4603      	mov	r3, r0
 800ca60:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
   // return RES_OK;
	SD_disk_write (pdrv,buff,sector,count);
 800ca62:	7bf8      	ldrb	r0, [r7, #15]
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	687a      	ldr	r2, [r7, #4]
 800ca68:	68b9      	ldr	r1, [r7, #8]
 800ca6a:	f7f5 fa77 	bl	8001f5c <SD_disk_write>
  /* USER CODE END WRITE */
}
 800ca6e:	bf00      	nop
 800ca70:	4618      	mov	r0, r3
 800ca72:	3710      	adds	r7, #16
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}

0800ca78 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b082      	sub	sp, #8
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	4603      	mov	r3, r0
 800ca80:	603a      	str	r2, [r7, #0]
 800ca82:	71fb      	strb	r3, [r7, #7]
 800ca84:	460b      	mov	r3, r1
 800ca86:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	SD_disk_ioctl ( pdrv,  cmd,  buff);
 800ca88:	79fb      	ldrb	r3, [r7, #7]
 800ca8a:	79b9      	ldrb	r1, [r7, #6]
 800ca8c:	683a      	ldr	r2, [r7, #0]
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f7f5 fae8 	bl	8002064 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 800ca94:	bf00      	nop
 800ca96:	4618      	mov	r0, r3
 800ca98:	3708      	adds	r7, #8
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}
	...

0800caa0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b084      	sub	sp, #16
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	4603      	mov	r3, r0
 800caa8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800caaa:	79fb      	ldrb	r3, [r7, #7]
 800caac:	4a08      	ldr	r2, [pc, #32]	; (800cad0 <disk_status+0x30>)
 800caae:	009b      	lsls	r3, r3, #2
 800cab0:	4413      	add	r3, r2
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	685b      	ldr	r3, [r3, #4]
 800cab6:	79fa      	ldrb	r2, [r7, #7]
 800cab8:	4905      	ldr	r1, [pc, #20]	; (800cad0 <disk_status+0x30>)
 800caba:	440a      	add	r2, r1
 800cabc:	7a12      	ldrb	r2, [r2, #8]
 800cabe:	4610      	mov	r0, r2
 800cac0:	4798      	blx	r3
 800cac2:	4603      	mov	r3, r0
 800cac4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800cac6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cac8:	4618      	mov	r0, r3
 800caca:	3710      	adds	r7, #16
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}
 800cad0:	20002a94 	.word	0x20002a94

0800cad4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b084      	sub	sp, #16
 800cad8:	af00      	add	r7, sp, #0
 800cada:	4603      	mov	r3, r0
 800cadc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cade:	2300      	movs	r3, #0
 800cae0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cae2:	79fb      	ldrb	r3, [r7, #7]
 800cae4:	4a0d      	ldr	r2, [pc, #52]	; (800cb1c <disk_initialize+0x48>)
 800cae6:	5cd3      	ldrb	r3, [r2, r3]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d111      	bne.n	800cb10 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800caec:	79fb      	ldrb	r3, [r7, #7]
 800caee:	4a0b      	ldr	r2, [pc, #44]	; (800cb1c <disk_initialize+0x48>)
 800caf0:	2101      	movs	r1, #1
 800caf2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800caf4:	79fb      	ldrb	r3, [r7, #7]
 800caf6:	4a09      	ldr	r2, [pc, #36]	; (800cb1c <disk_initialize+0x48>)
 800caf8:	009b      	lsls	r3, r3, #2
 800cafa:	4413      	add	r3, r2
 800cafc:	685b      	ldr	r3, [r3, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	79fa      	ldrb	r2, [r7, #7]
 800cb02:	4906      	ldr	r1, [pc, #24]	; (800cb1c <disk_initialize+0x48>)
 800cb04:	440a      	add	r2, r1
 800cb06:	7a12      	ldrb	r2, [r2, #8]
 800cb08:	4610      	mov	r0, r2
 800cb0a:	4798      	blx	r3
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800cb10:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3710      	adds	r7, #16
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}
 800cb1a:	bf00      	nop
 800cb1c:	20002a94 	.word	0x20002a94

0800cb20 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cb20:	b590      	push	{r4, r7, lr}
 800cb22:	b087      	sub	sp, #28
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	60b9      	str	r1, [r7, #8]
 800cb28:	607a      	str	r2, [r7, #4]
 800cb2a:	603b      	str	r3, [r7, #0]
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cb30:	7bfb      	ldrb	r3, [r7, #15]
 800cb32:	4a0a      	ldr	r2, [pc, #40]	; (800cb5c <disk_read+0x3c>)
 800cb34:	009b      	lsls	r3, r3, #2
 800cb36:	4413      	add	r3, r2
 800cb38:	685b      	ldr	r3, [r3, #4]
 800cb3a:	689c      	ldr	r4, [r3, #8]
 800cb3c:	7bfb      	ldrb	r3, [r7, #15]
 800cb3e:	4a07      	ldr	r2, [pc, #28]	; (800cb5c <disk_read+0x3c>)
 800cb40:	4413      	add	r3, r2
 800cb42:	7a18      	ldrb	r0, [r3, #8]
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	687a      	ldr	r2, [r7, #4]
 800cb48:	68b9      	ldr	r1, [r7, #8]
 800cb4a:	47a0      	blx	r4
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	75fb      	strb	r3, [r7, #23]
  return res;
 800cb50:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	371c      	adds	r7, #28
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd90      	pop	{r4, r7, pc}
 800cb5a:	bf00      	nop
 800cb5c:	20002a94 	.word	0x20002a94

0800cb60 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cb60:	b590      	push	{r4, r7, lr}
 800cb62:	b087      	sub	sp, #28
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	60b9      	str	r1, [r7, #8]
 800cb68:	607a      	str	r2, [r7, #4]
 800cb6a:	603b      	str	r3, [r7, #0]
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cb70:	7bfb      	ldrb	r3, [r7, #15]
 800cb72:	4a0a      	ldr	r2, [pc, #40]	; (800cb9c <disk_write+0x3c>)
 800cb74:	009b      	lsls	r3, r3, #2
 800cb76:	4413      	add	r3, r2
 800cb78:	685b      	ldr	r3, [r3, #4]
 800cb7a:	68dc      	ldr	r4, [r3, #12]
 800cb7c:	7bfb      	ldrb	r3, [r7, #15]
 800cb7e:	4a07      	ldr	r2, [pc, #28]	; (800cb9c <disk_write+0x3c>)
 800cb80:	4413      	add	r3, r2
 800cb82:	7a18      	ldrb	r0, [r3, #8]
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	687a      	ldr	r2, [r7, #4]
 800cb88:	68b9      	ldr	r1, [r7, #8]
 800cb8a:	47a0      	blx	r4
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	75fb      	strb	r3, [r7, #23]
  return res;
 800cb90:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	371c      	adds	r7, #28
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd90      	pop	{r4, r7, pc}
 800cb9a:	bf00      	nop
 800cb9c:	20002a94 	.word	0x20002a94

0800cba0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b084      	sub	sp, #16
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	4603      	mov	r3, r0
 800cba8:	603a      	str	r2, [r7, #0]
 800cbaa:	71fb      	strb	r3, [r7, #7]
 800cbac:	460b      	mov	r3, r1
 800cbae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cbb0:	79fb      	ldrb	r3, [r7, #7]
 800cbb2:	4a09      	ldr	r2, [pc, #36]	; (800cbd8 <disk_ioctl+0x38>)
 800cbb4:	009b      	lsls	r3, r3, #2
 800cbb6:	4413      	add	r3, r2
 800cbb8:	685b      	ldr	r3, [r3, #4]
 800cbba:	691b      	ldr	r3, [r3, #16]
 800cbbc:	79fa      	ldrb	r2, [r7, #7]
 800cbbe:	4906      	ldr	r1, [pc, #24]	; (800cbd8 <disk_ioctl+0x38>)
 800cbc0:	440a      	add	r2, r1
 800cbc2:	7a10      	ldrb	r0, [r2, #8]
 800cbc4:	79b9      	ldrb	r1, [r7, #6]
 800cbc6:	683a      	ldr	r2, [r7, #0]
 800cbc8:	4798      	blx	r3
 800cbca:	4603      	mov	r3, r0
 800cbcc:	73fb      	strb	r3, [r7, #15]
  return res;
 800cbce:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	3710      	adds	r7, #16
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	bd80      	pop	{r7, pc}
 800cbd8:	20002a94 	.word	0x20002a94

0800cbdc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b085      	sub	sp, #20
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	3301      	adds	r3, #1
 800cbe8:	781b      	ldrb	r3, [r3, #0]
 800cbea:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800cbec:	89fb      	ldrh	r3, [r7, #14]
 800cbee:	021b      	lsls	r3, r3, #8
 800cbf0:	b21a      	sxth	r2, r3
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	b21b      	sxth	r3, r3
 800cbf8:	4313      	orrs	r3, r2
 800cbfa:	b21b      	sxth	r3, r3
 800cbfc:	81fb      	strh	r3, [r7, #14]
	return rv;
 800cbfe:	89fb      	ldrh	r3, [r7, #14]
}
 800cc00:	4618      	mov	r0, r3
 800cc02:	3714      	adds	r7, #20
 800cc04:	46bd      	mov	sp, r7
 800cc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0a:	4770      	bx	lr

0800cc0c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b085      	sub	sp, #20
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	3303      	adds	r3, #3
 800cc18:	781b      	ldrb	r3, [r3, #0]
 800cc1a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	021b      	lsls	r3, r3, #8
 800cc20:	687a      	ldr	r2, [r7, #4]
 800cc22:	3202      	adds	r2, #2
 800cc24:	7812      	ldrb	r2, [r2, #0]
 800cc26:	4313      	orrs	r3, r2
 800cc28:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	021b      	lsls	r3, r3, #8
 800cc2e:	687a      	ldr	r2, [r7, #4]
 800cc30:	3201      	adds	r2, #1
 800cc32:	7812      	ldrb	r2, [r2, #0]
 800cc34:	4313      	orrs	r3, r2
 800cc36:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	021b      	lsls	r3, r3, #8
 800cc3c:	687a      	ldr	r2, [r7, #4]
 800cc3e:	7812      	ldrb	r2, [r2, #0]
 800cc40:	4313      	orrs	r3, r2
 800cc42:	60fb      	str	r3, [r7, #12]
	return rv;
 800cc44:	68fb      	ldr	r3, [r7, #12]
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3714      	adds	r7, #20
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc50:	4770      	bx	lr

0800cc52 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800cc52:	b480      	push	{r7}
 800cc54:	b083      	sub	sp, #12
 800cc56:	af00      	add	r7, sp, #0
 800cc58:	6078      	str	r0, [r7, #4]
 800cc5a:	460b      	mov	r3, r1
 800cc5c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	1c5a      	adds	r2, r3, #1
 800cc62:	607a      	str	r2, [r7, #4]
 800cc64:	887a      	ldrh	r2, [r7, #2]
 800cc66:	b2d2      	uxtb	r2, r2
 800cc68:	701a      	strb	r2, [r3, #0]
 800cc6a:	887b      	ldrh	r3, [r7, #2]
 800cc6c:	0a1b      	lsrs	r3, r3, #8
 800cc6e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	1c5a      	adds	r2, r3, #1
 800cc74:	607a      	str	r2, [r7, #4]
 800cc76:	887a      	ldrh	r2, [r7, #2]
 800cc78:	b2d2      	uxtb	r2, r2
 800cc7a:	701a      	strb	r2, [r3, #0]
}
 800cc7c:	bf00      	nop
 800cc7e:	370c      	adds	r7, #12
 800cc80:	46bd      	mov	sp, r7
 800cc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc86:	4770      	bx	lr

0800cc88 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b083      	sub	sp, #12
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	1c5a      	adds	r2, r3, #1
 800cc96:	607a      	str	r2, [r7, #4]
 800cc98:	683a      	ldr	r2, [r7, #0]
 800cc9a:	b2d2      	uxtb	r2, r2
 800cc9c:	701a      	strb	r2, [r3, #0]
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	0a1b      	lsrs	r3, r3, #8
 800cca2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	1c5a      	adds	r2, r3, #1
 800cca8:	607a      	str	r2, [r7, #4]
 800ccaa:	683a      	ldr	r2, [r7, #0]
 800ccac:	b2d2      	uxtb	r2, r2
 800ccae:	701a      	strb	r2, [r3, #0]
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	0a1b      	lsrs	r3, r3, #8
 800ccb4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	1c5a      	adds	r2, r3, #1
 800ccba:	607a      	str	r2, [r7, #4]
 800ccbc:	683a      	ldr	r2, [r7, #0]
 800ccbe:	b2d2      	uxtb	r2, r2
 800ccc0:	701a      	strb	r2, [r3, #0]
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	0a1b      	lsrs	r3, r3, #8
 800ccc6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	1c5a      	adds	r2, r3, #1
 800cccc:	607a      	str	r2, [r7, #4]
 800ccce:	683a      	ldr	r2, [r7, #0]
 800ccd0:	b2d2      	uxtb	r2, r2
 800ccd2:	701a      	strb	r2, [r3, #0]
}
 800ccd4:	bf00      	nop
 800ccd6:	370c      	adds	r7, #12
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccde:	4770      	bx	lr

0800cce0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800cce0:	b480      	push	{r7}
 800cce2:	b087      	sub	sp, #28
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	60f8      	str	r0, [r7, #12]
 800cce8:	60b9      	str	r1, [r7, #8]
 800ccea:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d00d      	beq.n	800cd16 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ccfa:	693a      	ldr	r2, [r7, #16]
 800ccfc:	1c53      	adds	r3, r2, #1
 800ccfe:	613b      	str	r3, [r7, #16]
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	1c59      	adds	r1, r3, #1
 800cd04:	6179      	str	r1, [r7, #20]
 800cd06:	7812      	ldrb	r2, [r2, #0]
 800cd08:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	3b01      	subs	r3, #1
 800cd0e:	607b      	str	r3, [r7, #4]
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d1f1      	bne.n	800ccfa <mem_cpy+0x1a>
	}
}
 800cd16:	bf00      	nop
 800cd18:	371c      	adds	r7, #28
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd20:	4770      	bx	lr

0800cd22 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800cd22:	b480      	push	{r7}
 800cd24:	b087      	sub	sp, #28
 800cd26:	af00      	add	r7, sp, #0
 800cd28:	60f8      	str	r0, [r7, #12]
 800cd2a:	60b9      	str	r1, [r7, #8]
 800cd2c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	1c5a      	adds	r2, r3, #1
 800cd36:	617a      	str	r2, [r7, #20]
 800cd38:	68ba      	ldr	r2, [r7, #8]
 800cd3a:	b2d2      	uxtb	r2, r2
 800cd3c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	3b01      	subs	r3, #1
 800cd42:	607b      	str	r3, [r7, #4]
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d1f3      	bne.n	800cd32 <mem_set+0x10>
}
 800cd4a:	bf00      	nop
 800cd4c:	bf00      	nop
 800cd4e:	371c      	adds	r7, #28
 800cd50:	46bd      	mov	sp, r7
 800cd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd56:	4770      	bx	lr

0800cd58 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800cd58:	b480      	push	{r7}
 800cd5a:	b089      	sub	sp, #36	; 0x24
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	60f8      	str	r0, [r7, #12]
 800cd60:	60b9      	str	r1, [r7, #8]
 800cd62:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	61fb      	str	r3, [r7, #28]
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800cd70:	69fb      	ldr	r3, [r7, #28]
 800cd72:	1c5a      	adds	r2, r3, #1
 800cd74:	61fa      	str	r2, [r7, #28]
 800cd76:	781b      	ldrb	r3, [r3, #0]
 800cd78:	4619      	mov	r1, r3
 800cd7a:	69bb      	ldr	r3, [r7, #24]
 800cd7c:	1c5a      	adds	r2, r3, #1
 800cd7e:	61ba      	str	r2, [r7, #24]
 800cd80:	781b      	ldrb	r3, [r3, #0]
 800cd82:	1acb      	subs	r3, r1, r3
 800cd84:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	3b01      	subs	r3, #1
 800cd8a:	607b      	str	r3, [r7, #4]
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d002      	beq.n	800cd98 <mem_cmp+0x40>
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d0eb      	beq.n	800cd70 <mem_cmp+0x18>

	return r;
 800cd98:	697b      	ldr	r3, [r7, #20]
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3724      	adds	r7, #36	; 0x24
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda4:	4770      	bx	lr

0800cda6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800cda6:	b480      	push	{r7}
 800cda8:	b083      	sub	sp, #12
 800cdaa:	af00      	add	r7, sp, #0
 800cdac:	6078      	str	r0, [r7, #4]
 800cdae:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800cdb0:	e002      	b.n	800cdb8 <chk_chr+0x12>
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	3301      	adds	r3, #1
 800cdb6:	607b      	str	r3, [r7, #4]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	781b      	ldrb	r3, [r3, #0]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d005      	beq.n	800cdcc <chk_chr+0x26>
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	781b      	ldrb	r3, [r3, #0]
 800cdc4:	461a      	mov	r2, r3
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	4293      	cmp	r3, r2
 800cdca:	d1f2      	bne.n	800cdb2 <chk_chr+0xc>
	return *str;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	781b      	ldrb	r3, [r3, #0]
}
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	370c      	adds	r7, #12
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdda:	4770      	bx	lr

0800cddc <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b082      	sub	sp, #8
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d009      	beq.n	800cdfe <lock_fs+0x22>
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	695b      	ldr	r3, [r3, #20]
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f003 f8c8 	bl	800ff84 <ff_req_grant>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d001      	beq.n	800cdfe <lock_fs+0x22>
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	e000      	b.n	800ce00 <lock_fs+0x24>
 800cdfe:	2300      	movs	r3, #0
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	3708      	adds	r7, #8
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}

0800ce08 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b082      	sub	sp, #8
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
 800ce10:	460b      	mov	r3, r1
 800ce12:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d00d      	beq.n	800ce36 <unlock_fs+0x2e>
 800ce1a:	78fb      	ldrb	r3, [r7, #3]
 800ce1c:	2b0c      	cmp	r3, #12
 800ce1e:	d00a      	beq.n	800ce36 <unlock_fs+0x2e>
 800ce20:	78fb      	ldrb	r3, [r7, #3]
 800ce22:	2b0b      	cmp	r3, #11
 800ce24:	d007      	beq.n	800ce36 <unlock_fs+0x2e>
 800ce26:	78fb      	ldrb	r3, [r7, #3]
 800ce28:	2b0f      	cmp	r3, #15
 800ce2a:	d004      	beq.n	800ce36 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	695b      	ldr	r3, [r3, #20]
 800ce30:	4618      	mov	r0, r3
 800ce32:	f003 f8bc 	bl	800ffae <ff_rel_grant>
	}
}
 800ce36:	bf00      	nop
 800ce38:	3708      	adds	r7, #8
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}
	...

0800ce40 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ce40:	b480      	push	{r7}
 800ce42:	b085      	sub	sp, #20
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
 800ce48:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	60bb      	str	r3, [r7, #8]
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	60fb      	str	r3, [r7, #12]
 800ce52:	e029      	b.n	800cea8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ce54:	4a27      	ldr	r2, [pc, #156]	; (800cef4 <chk_lock+0xb4>)
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	011b      	lsls	r3, r3, #4
 800ce5a:	4413      	add	r3, r2
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d01d      	beq.n	800ce9e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ce62:	4a24      	ldr	r2, [pc, #144]	; (800cef4 <chk_lock+0xb4>)
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	011b      	lsls	r3, r3, #4
 800ce68:	4413      	add	r3, r2
 800ce6a:	681a      	ldr	r2, [r3, #0]
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	429a      	cmp	r2, r3
 800ce72:	d116      	bne.n	800cea2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ce74:	4a1f      	ldr	r2, [pc, #124]	; (800cef4 <chk_lock+0xb4>)
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	011b      	lsls	r3, r3, #4
 800ce7a:	4413      	add	r3, r2
 800ce7c:	3304      	adds	r3, #4
 800ce7e:	681a      	ldr	r2, [r3, #0]
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ce84:	429a      	cmp	r2, r3
 800ce86:	d10c      	bne.n	800cea2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ce88:	4a1a      	ldr	r2, [pc, #104]	; (800cef4 <chk_lock+0xb4>)
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	011b      	lsls	r3, r3, #4
 800ce8e:	4413      	add	r3, r2
 800ce90:	3308      	adds	r3, #8
 800ce92:	681a      	ldr	r2, [r3, #0]
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	d102      	bne.n	800cea2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ce9c:	e007      	b.n	800ceae <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ce9e:	2301      	movs	r3, #1
 800cea0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	3301      	adds	r3, #1
 800cea6:	60fb      	str	r3, [r7, #12]
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	2b01      	cmp	r3, #1
 800ceac:	d9d2      	bls.n	800ce54 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2b02      	cmp	r3, #2
 800ceb2:	d109      	bne.n	800cec8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d102      	bne.n	800cec0 <chk_lock+0x80>
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	2b02      	cmp	r3, #2
 800cebe:	d101      	bne.n	800cec4 <chk_lock+0x84>
 800cec0:	2300      	movs	r3, #0
 800cec2:	e010      	b.n	800cee6 <chk_lock+0xa6>
 800cec4:	2312      	movs	r3, #18
 800cec6:	e00e      	b.n	800cee6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d108      	bne.n	800cee0 <chk_lock+0xa0>
 800cece:	4a09      	ldr	r2, [pc, #36]	; (800cef4 <chk_lock+0xb4>)
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	011b      	lsls	r3, r3, #4
 800ced4:	4413      	add	r3, r2
 800ced6:	330c      	adds	r3, #12
 800ced8:	881b      	ldrh	r3, [r3, #0]
 800ceda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cede:	d101      	bne.n	800cee4 <chk_lock+0xa4>
 800cee0:	2310      	movs	r3, #16
 800cee2:	e000      	b.n	800cee6 <chk_lock+0xa6>
 800cee4:	2300      	movs	r3, #0
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3714      	adds	r7, #20
 800ceea:	46bd      	mov	sp, r7
 800ceec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef0:	4770      	bx	lr
 800cef2:	bf00      	nop
 800cef4:	20002a74 	.word	0x20002a74

0800cef8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800cef8:	b480      	push	{r7}
 800cefa:	b083      	sub	sp, #12
 800cefc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cefe:	2300      	movs	r3, #0
 800cf00:	607b      	str	r3, [r7, #4]
 800cf02:	e002      	b.n	800cf0a <enq_lock+0x12>
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	3301      	adds	r3, #1
 800cf08:	607b      	str	r3, [r7, #4]
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2b01      	cmp	r3, #1
 800cf0e:	d806      	bhi.n	800cf1e <enq_lock+0x26>
 800cf10:	4a09      	ldr	r2, [pc, #36]	; (800cf38 <enq_lock+0x40>)
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	011b      	lsls	r3, r3, #4
 800cf16:	4413      	add	r3, r2
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d1f2      	bne.n	800cf04 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2b02      	cmp	r3, #2
 800cf22:	bf14      	ite	ne
 800cf24:	2301      	movne	r3, #1
 800cf26:	2300      	moveq	r3, #0
 800cf28:	b2db      	uxtb	r3, r3
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	370c      	adds	r7, #12
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf34:	4770      	bx	lr
 800cf36:	bf00      	nop
 800cf38:	20002a74 	.word	0x20002a74

0800cf3c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b085      	sub	sp, #20
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
 800cf44:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cf46:	2300      	movs	r3, #0
 800cf48:	60fb      	str	r3, [r7, #12]
 800cf4a:	e01f      	b.n	800cf8c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800cf4c:	4a41      	ldr	r2, [pc, #260]	; (800d054 <inc_lock+0x118>)
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	011b      	lsls	r3, r3, #4
 800cf52:	4413      	add	r3, r2
 800cf54:	681a      	ldr	r2, [r3, #0]
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	429a      	cmp	r2, r3
 800cf5c:	d113      	bne.n	800cf86 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800cf5e:	4a3d      	ldr	r2, [pc, #244]	; (800d054 <inc_lock+0x118>)
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	011b      	lsls	r3, r3, #4
 800cf64:	4413      	add	r3, r2
 800cf66:	3304      	adds	r3, #4
 800cf68:	681a      	ldr	r2, [r3, #0]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	d109      	bne.n	800cf86 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800cf72:	4a38      	ldr	r2, [pc, #224]	; (800d054 <inc_lock+0x118>)
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	011b      	lsls	r3, r3, #4
 800cf78:	4413      	add	r3, r2
 800cf7a:	3308      	adds	r3, #8
 800cf7c:	681a      	ldr	r2, [r3, #0]
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d006      	beq.n	800cf94 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	3301      	adds	r3, #1
 800cf8a:	60fb      	str	r3, [r7, #12]
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	2b01      	cmp	r3, #1
 800cf90:	d9dc      	bls.n	800cf4c <inc_lock+0x10>
 800cf92:	e000      	b.n	800cf96 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800cf94:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2b02      	cmp	r3, #2
 800cf9a:	d132      	bne.n	800d002 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	60fb      	str	r3, [r7, #12]
 800cfa0:	e002      	b.n	800cfa8 <inc_lock+0x6c>
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	3301      	adds	r3, #1
 800cfa6:	60fb      	str	r3, [r7, #12]
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	2b01      	cmp	r3, #1
 800cfac:	d806      	bhi.n	800cfbc <inc_lock+0x80>
 800cfae:	4a29      	ldr	r2, [pc, #164]	; (800d054 <inc_lock+0x118>)
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	011b      	lsls	r3, r3, #4
 800cfb4:	4413      	add	r3, r2
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d1f2      	bne.n	800cfa2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	2b02      	cmp	r3, #2
 800cfc0:	d101      	bne.n	800cfc6 <inc_lock+0x8a>
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	e040      	b.n	800d048 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681a      	ldr	r2, [r3, #0]
 800cfca:	4922      	ldr	r1, [pc, #136]	; (800d054 <inc_lock+0x118>)
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	011b      	lsls	r3, r3, #4
 800cfd0:	440b      	add	r3, r1
 800cfd2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	689a      	ldr	r2, [r3, #8]
 800cfd8:	491e      	ldr	r1, [pc, #120]	; (800d054 <inc_lock+0x118>)
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	011b      	lsls	r3, r3, #4
 800cfde:	440b      	add	r3, r1
 800cfe0:	3304      	adds	r3, #4
 800cfe2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	695a      	ldr	r2, [r3, #20]
 800cfe8:	491a      	ldr	r1, [pc, #104]	; (800d054 <inc_lock+0x118>)
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	011b      	lsls	r3, r3, #4
 800cfee:	440b      	add	r3, r1
 800cff0:	3308      	adds	r3, #8
 800cff2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800cff4:	4a17      	ldr	r2, [pc, #92]	; (800d054 <inc_lock+0x118>)
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	011b      	lsls	r3, r3, #4
 800cffa:	4413      	add	r3, r2
 800cffc:	330c      	adds	r3, #12
 800cffe:	2200      	movs	r2, #0
 800d000:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d009      	beq.n	800d01c <inc_lock+0xe0>
 800d008:	4a12      	ldr	r2, [pc, #72]	; (800d054 <inc_lock+0x118>)
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	011b      	lsls	r3, r3, #4
 800d00e:	4413      	add	r3, r2
 800d010:	330c      	adds	r3, #12
 800d012:	881b      	ldrh	r3, [r3, #0]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d001      	beq.n	800d01c <inc_lock+0xe0>
 800d018:	2300      	movs	r3, #0
 800d01a:	e015      	b.n	800d048 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d108      	bne.n	800d034 <inc_lock+0xf8>
 800d022:	4a0c      	ldr	r2, [pc, #48]	; (800d054 <inc_lock+0x118>)
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	011b      	lsls	r3, r3, #4
 800d028:	4413      	add	r3, r2
 800d02a:	330c      	adds	r3, #12
 800d02c:	881b      	ldrh	r3, [r3, #0]
 800d02e:	3301      	adds	r3, #1
 800d030:	b29a      	uxth	r2, r3
 800d032:	e001      	b.n	800d038 <inc_lock+0xfc>
 800d034:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d038:	4906      	ldr	r1, [pc, #24]	; (800d054 <inc_lock+0x118>)
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	011b      	lsls	r3, r3, #4
 800d03e:	440b      	add	r3, r1
 800d040:	330c      	adds	r3, #12
 800d042:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	3301      	adds	r3, #1
}
 800d048:	4618      	mov	r0, r3
 800d04a:	3714      	adds	r7, #20
 800d04c:	46bd      	mov	sp, r7
 800d04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d052:	4770      	bx	lr
 800d054:	20002a74 	.word	0x20002a74

0800d058 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d058:	b480      	push	{r7}
 800d05a:	b085      	sub	sp, #20
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	3b01      	subs	r3, #1
 800d064:	607b      	str	r3, [r7, #4]
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2b01      	cmp	r3, #1
 800d06a:	d825      	bhi.n	800d0b8 <dec_lock+0x60>
		n = Files[i].ctr;
 800d06c:	4a17      	ldr	r2, [pc, #92]	; (800d0cc <dec_lock+0x74>)
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	011b      	lsls	r3, r3, #4
 800d072:	4413      	add	r3, r2
 800d074:	330c      	adds	r3, #12
 800d076:	881b      	ldrh	r3, [r3, #0]
 800d078:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d07a:	89fb      	ldrh	r3, [r7, #14]
 800d07c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d080:	d101      	bne.n	800d086 <dec_lock+0x2e>
 800d082:	2300      	movs	r3, #0
 800d084:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d086:	89fb      	ldrh	r3, [r7, #14]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d002      	beq.n	800d092 <dec_lock+0x3a>
 800d08c:	89fb      	ldrh	r3, [r7, #14]
 800d08e:	3b01      	subs	r3, #1
 800d090:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d092:	4a0e      	ldr	r2, [pc, #56]	; (800d0cc <dec_lock+0x74>)
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	011b      	lsls	r3, r3, #4
 800d098:	4413      	add	r3, r2
 800d09a:	330c      	adds	r3, #12
 800d09c:	89fa      	ldrh	r2, [r7, #14]
 800d09e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d0a0:	89fb      	ldrh	r3, [r7, #14]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d105      	bne.n	800d0b2 <dec_lock+0x5a>
 800d0a6:	4a09      	ldr	r2, [pc, #36]	; (800d0cc <dec_lock+0x74>)
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	011b      	lsls	r3, r3, #4
 800d0ac:	4413      	add	r3, r2
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	737b      	strb	r3, [r7, #13]
 800d0b6:	e001      	b.n	800d0bc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d0b8:	2302      	movs	r3, #2
 800d0ba:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d0bc:	7b7b      	ldrb	r3, [r7, #13]
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3714      	adds	r7, #20
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c8:	4770      	bx	lr
 800d0ca:	bf00      	nop
 800d0cc:	20002a74 	.word	0x20002a74

0800d0d0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b085      	sub	sp, #20
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d0d8:	2300      	movs	r3, #0
 800d0da:	60fb      	str	r3, [r7, #12]
 800d0dc:	e010      	b.n	800d100 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d0de:	4a0d      	ldr	r2, [pc, #52]	; (800d114 <clear_lock+0x44>)
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	011b      	lsls	r3, r3, #4
 800d0e4:	4413      	add	r3, r2
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	687a      	ldr	r2, [r7, #4]
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d105      	bne.n	800d0fa <clear_lock+0x2a>
 800d0ee:	4a09      	ldr	r2, [pc, #36]	; (800d114 <clear_lock+0x44>)
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	011b      	lsls	r3, r3, #4
 800d0f4:	4413      	add	r3, r2
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	3301      	adds	r3, #1
 800d0fe:	60fb      	str	r3, [r7, #12]
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	2b01      	cmp	r3, #1
 800d104:	d9eb      	bls.n	800d0de <clear_lock+0xe>
	}
}
 800d106:	bf00      	nop
 800d108:	bf00      	nop
 800d10a:	3714      	adds	r7, #20
 800d10c:	46bd      	mov	sp, r7
 800d10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d112:	4770      	bx	lr
 800d114:	20002a74 	.word	0x20002a74

0800d118 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b086      	sub	sp, #24
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d120:	2300      	movs	r3, #0
 800d122:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	78db      	ldrb	r3, [r3, #3]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d034      	beq.n	800d196 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d130:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	7858      	ldrb	r0, [r3, #1]
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d13c:	2301      	movs	r3, #1
 800d13e:	697a      	ldr	r2, [r7, #20]
 800d140:	f7ff fd0e 	bl	800cb60 <disk_write>
 800d144:	4603      	mov	r3, r0
 800d146:	2b00      	cmp	r3, #0
 800d148:	d002      	beq.n	800d150 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d14a:	2301      	movs	r3, #1
 800d14c:	73fb      	strb	r3, [r7, #15]
 800d14e:	e022      	b.n	800d196 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2200      	movs	r2, #0
 800d154:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d15a:	697a      	ldr	r2, [r7, #20]
 800d15c:	1ad2      	subs	r2, r2, r3
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d162:	429a      	cmp	r2, r3
 800d164:	d217      	bcs.n	800d196 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	789b      	ldrb	r3, [r3, #2]
 800d16a:	613b      	str	r3, [r7, #16]
 800d16c:	e010      	b.n	800d190 <sync_window+0x78>
					wsect += fs->fsize;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d172:	697a      	ldr	r2, [r7, #20]
 800d174:	4413      	add	r3, r2
 800d176:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	7858      	ldrb	r0, [r3, #1]
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d182:	2301      	movs	r3, #1
 800d184:	697a      	ldr	r2, [r7, #20]
 800d186:	f7ff fceb 	bl	800cb60 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d18a:	693b      	ldr	r3, [r7, #16]
 800d18c:	3b01      	subs	r3, #1
 800d18e:	613b      	str	r3, [r7, #16]
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	2b01      	cmp	r3, #1
 800d194:	d8eb      	bhi.n	800d16e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d196:	7bfb      	ldrb	r3, [r7, #15]
}
 800d198:	4618      	mov	r0, r3
 800d19a:	3718      	adds	r7, #24
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd80      	pop	{r7, pc}

0800d1a0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b084      	sub	sp, #16
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
 800d1a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1b2:	683a      	ldr	r2, [r7, #0]
 800d1b4:	429a      	cmp	r2, r3
 800d1b6:	d01b      	beq.n	800d1f0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f7ff ffad 	bl	800d118 <sync_window>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d1c2:	7bfb      	ldrb	r3, [r7, #15]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d113      	bne.n	800d1f0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	7858      	ldrb	r0, [r3, #1]
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d1d2:	2301      	movs	r3, #1
 800d1d4:	683a      	ldr	r2, [r7, #0]
 800d1d6:	f7ff fca3 	bl	800cb20 <disk_read>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d004      	beq.n	800d1ea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d1e0:	f04f 33ff 	mov.w	r3, #4294967295
 800d1e4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	683a      	ldr	r2, [r7, #0]
 800d1ee:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800d1f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3710      	adds	r7, #16
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}
	...

0800d1fc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b084      	sub	sp, #16
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d204:	6878      	ldr	r0, [r7, #4]
 800d206:	f7ff ff87 	bl	800d118 <sync_window>
 800d20a:	4603      	mov	r3, r0
 800d20c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d20e:	7bfb      	ldrb	r3, [r7, #15]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d159      	bne.n	800d2c8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	781b      	ldrb	r3, [r3, #0]
 800d218:	2b03      	cmp	r3, #3
 800d21a:	d149      	bne.n	800d2b0 <sync_fs+0xb4>
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	791b      	ldrb	r3, [r3, #4]
 800d220:	2b01      	cmp	r3, #1
 800d222:	d145      	bne.n	800d2b0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	899b      	ldrh	r3, [r3, #12]
 800d22e:	461a      	mov	r2, r3
 800d230:	2100      	movs	r1, #0
 800d232:	f7ff fd76 	bl	800cd22 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	333c      	adds	r3, #60	; 0x3c
 800d23a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d23e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d242:	4618      	mov	r0, r3
 800d244:	f7ff fd05 	bl	800cc52 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	333c      	adds	r3, #60	; 0x3c
 800d24c:	4921      	ldr	r1, [pc, #132]	; (800d2d4 <sync_fs+0xd8>)
 800d24e:	4618      	mov	r0, r3
 800d250:	f7ff fd1a 	bl	800cc88 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	333c      	adds	r3, #60	; 0x3c
 800d258:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d25c:	491e      	ldr	r1, [pc, #120]	; (800d2d8 <sync_fs+0xdc>)
 800d25e:	4618      	mov	r0, r3
 800d260:	f7ff fd12 	bl	800cc88 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	333c      	adds	r3, #60	; 0x3c
 800d268:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	69db      	ldr	r3, [r3, #28]
 800d270:	4619      	mov	r1, r3
 800d272:	4610      	mov	r0, r2
 800d274:	f7ff fd08 	bl	800cc88 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	333c      	adds	r3, #60	; 0x3c
 800d27c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	699b      	ldr	r3, [r3, #24]
 800d284:	4619      	mov	r1, r3
 800d286:	4610      	mov	r0, r2
 800d288:	f7ff fcfe 	bl	800cc88 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d290:	1c5a      	adds	r2, r3, #1
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	7858      	ldrb	r0, [r3, #1]
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2a4:	2301      	movs	r3, #1
 800d2a6:	f7ff fc5b 	bl	800cb60 <disk_write>
			fs->fsi_flag = 0;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	785b      	ldrb	r3, [r3, #1]
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	2100      	movs	r1, #0
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f7ff fc71 	bl	800cba0 <disk_ioctl>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d001      	beq.n	800d2c8 <sync_fs+0xcc>
 800d2c4:	2301      	movs	r3, #1
 800d2c6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d2c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	3710      	adds	r7, #16
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}
 800d2d2:	bf00      	nop
 800d2d4:	41615252 	.word	0x41615252
 800d2d8:	61417272 	.word	0x61417272

0800d2dc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d2dc:	b480      	push	{r7}
 800d2de:	b083      	sub	sp, #12
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
 800d2e4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	3b02      	subs	r3, #2
 800d2ea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6a1b      	ldr	r3, [r3, #32]
 800d2f0:	3b02      	subs	r3, #2
 800d2f2:	683a      	ldr	r2, [r7, #0]
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d301      	bcc.n	800d2fc <clust2sect+0x20>
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	e008      	b.n	800d30e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	895b      	ldrh	r3, [r3, #10]
 800d300:	461a      	mov	r2, r3
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	fb03 f202 	mul.w	r2, r3, r2
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d30c:	4413      	add	r3, r2
}
 800d30e:	4618      	mov	r0, r3
 800d310:	370c      	adds	r7, #12
 800d312:	46bd      	mov	sp, r7
 800d314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d318:	4770      	bx	lr

0800d31a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d31a:	b580      	push	{r7, lr}
 800d31c:	b086      	sub	sp, #24
 800d31e:	af00      	add	r7, sp, #0
 800d320:	6078      	str	r0, [r7, #4]
 800d322:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	d904      	bls.n	800d33a <get_fat+0x20>
 800d330:	693b      	ldr	r3, [r7, #16]
 800d332:	6a1b      	ldr	r3, [r3, #32]
 800d334:	683a      	ldr	r2, [r7, #0]
 800d336:	429a      	cmp	r2, r3
 800d338:	d302      	bcc.n	800d340 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d33a:	2301      	movs	r3, #1
 800d33c:	617b      	str	r3, [r7, #20]
 800d33e:	e0bb      	b.n	800d4b8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d340:	f04f 33ff 	mov.w	r3, #4294967295
 800d344:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d346:	693b      	ldr	r3, [r7, #16]
 800d348:	781b      	ldrb	r3, [r3, #0]
 800d34a:	2b03      	cmp	r3, #3
 800d34c:	f000 8083 	beq.w	800d456 <get_fat+0x13c>
 800d350:	2b03      	cmp	r3, #3
 800d352:	f300 80a7 	bgt.w	800d4a4 <get_fat+0x18a>
 800d356:	2b01      	cmp	r3, #1
 800d358:	d002      	beq.n	800d360 <get_fat+0x46>
 800d35a:	2b02      	cmp	r3, #2
 800d35c:	d056      	beq.n	800d40c <get_fat+0xf2>
 800d35e:	e0a1      	b.n	800d4a4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	60fb      	str	r3, [r7, #12]
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	085b      	lsrs	r3, r3, #1
 800d368:	68fa      	ldr	r2, [r7, #12]
 800d36a:	4413      	add	r3, r2
 800d36c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d36e:	693b      	ldr	r3, [r7, #16]
 800d370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d372:	693b      	ldr	r3, [r7, #16]
 800d374:	899b      	ldrh	r3, [r3, #12]
 800d376:	4619      	mov	r1, r3
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	fbb3 f3f1 	udiv	r3, r3, r1
 800d37e:	4413      	add	r3, r2
 800d380:	4619      	mov	r1, r3
 800d382:	6938      	ldr	r0, [r7, #16]
 800d384:	f7ff ff0c 	bl	800d1a0 <move_window>
 800d388:	4603      	mov	r3, r0
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	f040 808d 	bne.w	800d4aa <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	1c5a      	adds	r2, r3, #1
 800d394:	60fa      	str	r2, [r7, #12]
 800d396:	693a      	ldr	r2, [r7, #16]
 800d398:	8992      	ldrh	r2, [r2, #12]
 800d39a:	fbb3 f1f2 	udiv	r1, r3, r2
 800d39e:	fb01 f202 	mul.w	r2, r1, r2
 800d3a2:	1a9b      	subs	r3, r3, r2
 800d3a4:	693a      	ldr	r2, [r7, #16]
 800d3a6:	4413      	add	r3, r2
 800d3a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d3ac:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d3ae:	693b      	ldr	r3, [r7, #16]
 800d3b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	899b      	ldrh	r3, [r3, #12]
 800d3b6:	4619      	mov	r1, r3
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	fbb3 f3f1 	udiv	r3, r3, r1
 800d3be:	4413      	add	r3, r2
 800d3c0:	4619      	mov	r1, r3
 800d3c2:	6938      	ldr	r0, [r7, #16]
 800d3c4:	f7ff feec 	bl	800d1a0 <move_window>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d16f      	bne.n	800d4ae <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d3ce:	693b      	ldr	r3, [r7, #16]
 800d3d0:	899b      	ldrh	r3, [r3, #12]
 800d3d2:	461a      	mov	r2, r3
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	fbb3 f1f2 	udiv	r1, r3, r2
 800d3da:	fb01 f202 	mul.w	r2, r1, r2
 800d3de:	1a9b      	subs	r3, r3, r2
 800d3e0:	693a      	ldr	r2, [r7, #16]
 800d3e2:	4413      	add	r3, r2
 800d3e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d3e8:	021b      	lsls	r3, r3, #8
 800d3ea:	461a      	mov	r2, r3
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	4313      	orrs	r3, r2
 800d3f0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	f003 0301 	and.w	r3, r3, #1
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d002      	beq.n	800d402 <get_fat+0xe8>
 800d3fc:	68bb      	ldr	r3, [r7, #8]
 800d3fe:	091b      	lsrs	r3, r3, #4
 800d400:	e002      	b.n	800d408 <get_fat+0xee>
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d408:	617b      	str	r3, [r7, #20]
			break;
 800d40a:	e055      	b.n	800d4b8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d40c:	693b      	ldr	r3, [r7, #16]
 800d40e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d410:	693b      	ldr	r3, [r7, #16]
 800d412:	899b      	ldrh	r3, [r3, #12]
 800d414:	085b      	lsrs	r3, r3, #1
 800d416:	b29b      	uxth	r3, r3
 800d418:	4619      	mov	r1, r3
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	fbb3 f3f1 	udiv	r3, r3, r1
 800d420:	4413      	add	r3, r2
 800d422:	4619      	mov	r1, r3
 800d424:	6938      	ldr	r0, [r7, #16]
 800d426:	f7ff febb 	bl	800d1a0 <move_window>
 800d42a:	4603      	mov	r3, r0
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d140      	bne.n	800d4b2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	005b      	lsls	r3, r3, #1
 800d43a:	693a      	ldr	r2, [r7, #16]
 800d43c:	8992      	ldrh	r2, [r2, #12]
 800d43e:	fbb3 f0f2 	udiv	r0, r3, r2
 800d442:	fb00 f202 	mul.w	r2, r0, r2
 800d446:	1a9b      	subs	r3, r3, r2
 800d448:	440b      	add	r3, r1
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7ff fbc6 	bl	800cbdc <ld_word>
 800d450:	4603      	mov	r3, r0
 800d452:	617b      	str	r3, [r7, #20]
			break;
 800d454:	e030      	b.n	800d4b8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d45a:	693b      	ldr	r3, [r7, #16]
 800d45c:	899b      	ldrh	r3, [r3, #12]
 800d45e:	089b      	lsrs	r3, r3, #2
 800d460:	b29b      	uxth	r3, r3
 800d462:	4619      	mov	r1, r3
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	fbb3 f3f1 	udiv	r3, r3, r1
 800d46a:	4413      	add	r3, r2
 800d46c:	4619      	mov	r1, r3
 800d46e:	6938      	ldr	r0, [r7, #16]
 800d470:	f7ff fe96 	bl	800d1a0 <move_window>
 800d474:	4603      	mov	r3, r0
 800d476:	2b00      	cmp	r3, #0
 800d478:	d11d      	bne.n	800d4b6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	009b      	lsls	r3, r3, #2
 800d484:	693a      	ldr	r2, [r7, #16]
 800d486:	8992      	ldrh	r2, [r2, #12]
 800d488:	fbb3 f0f2 	udiv	r0, r3, r2
 800d48c:	fb00 f202 	mul.w	r2, r0, r2
 800d490:	1a9b      	subs	r3, r3, r2
 800d492:	440b      	add	r3, r1
 800d494:	4618      	mov	r0, r3
 800d496:	f7ff fbb9 	bl	800cc0c <ld_dword>
 800d49a:	4603      	mov	r3, r0
 800d49c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d4a0:	617b      	str	r3, [r7, #20]
			break;
 800d4a2:	e009      	b.n	800d4b8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d4a4:	2301      	movs	r3, #1
 800d4a6:	617b      	str	r3, [r7, #20]
 800d4a8:	e006      	b.n	800d4b8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d4aa:	bf00      	nop
 800d4ac:	e004      	b.n	800d4b8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d4ae:	bf00      	nop
 800d4b0:	e002      	b.n	800d4b8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d4b2:	bf00      	nop
 800d4b4:	e000      	b.n	800d4b8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d4b6:	bf00      	nop
		}
	}

	return val;
 800d4b8:	697b      	ldr	r3, [r7, #20]
}
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	3718      	adds	r7, #24
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bd80      	pop	{r7, pc}

0800d4c2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d4c2:	b590      	push	{r4, r7, lr}
 800d4c4:	b089      	sub	sp, #36	; 0x24
 800d4c6:	af00      	add	r7, sp, #0
 800d4c8:	60f8      	str	r0, [r7, #12]
 800d4ca:	60b9      	str	r1, [r7, #8]
 800d4cc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d4ce:	2302      	movs	r3, #2
 800d4d0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d4d2:	68bb      	ldr	r3, [r7, #8]
 800d4d4:	2b01      	cmp	r3, #1
 800d4d6:	f240 8109 	bls.w	800d6ec <put_fat+0x22a>
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	6a1b      	ldr	r3, [r3, #32]
 800d4de:	68ba      	ldr	r2, [r7, #8]
 800d4e0:	429a      	cmp	r2, r3
 800d4e2:	f080 8103 	bcs.w	800d6ec <put_fat+0x22a>
		switch (fs->fs_type) {
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	781b      	ldrb	r3, [r3, #0]
 800d4ea:	2b03      	cmp	r3, #3
 800d4ec:	f000 80b6 	beq.w	800d65c <put_fat+0x19a>
 800d4f0:	2b03      	cmp	r3, #3
 800d4f2:	f300 80fb 	bgt.w	800d6ec <put_fat+0x22a>
 800d4f6:	2b01      	cmp	r3, #1
 800d4f8:	d003      	beq.n	800d502 <put_fat+0x40>
 800d4fa:	2b02      	cmp	r3, #2
 800d4fc:	f000 8083 	beq.w	800d606 <put_fat+0x144>
 800d500:	e0f4      	b.n	800d6ec <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	61bb      	str	r3, [r7, #24]
 800d506:	69bb      	ldr	r3, [r7, #24]
 800d508:	085b      	lsrs	r3, r3, #1
 800d50a:	69ba      	ldr	r2, [r7, #24]
 800d50c:	4413      	add	r3, r2
 800d50e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	899b      	ldrh	r3, [r3, #12]
 800d518:	4619      	mov	r1, r3
 800d51a:	69bb      	ldr	r3, [r7, #24]
 800d51c:	fbb3 f3f1 	udiv	r3, r3, r1
 800d520:	4413      	add	r3, r2
 800d522:	4619      	mov	r1, r3
 800d524:	68f8      	ldr	r0, [r7, #12]
 800d526:	f7ff fe3b 	bl	800d1a0 <move_window>
 800d52a:	4603      	mov	r3, r0
 800d52c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d52e:	7ffb      	ldrb	r3, [r7, #31]
 800d530:	2b00      	cmp	r3, #0
 800d532:	f040 80d4 	bne.w	800d6de <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d53c:	69bb      	ldr	r3, [r7, #24]
 800d53e:	1c5a      	adds	r2, r3, #1
 800d540:	61ba      	str	r2, [r7, #24]
 800d542:	68fa      	ldr	r2, [r7, #12]
 800d544:	8992      	ldrh	r2, [r2, #12]
 800d546:	fbb3 f0f2 	udiv	r0, r3, r2
 800d54a:	fb00 f202 	mul.w	r2, r0, r2
 800d54e:	1a9b      	subs	r3, r3, r2
 800d550:	440b      	add	r3, r1
 800d552:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	f003 0301 	and.w	r3, r3, #1
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d00d      	beq.n	800d57a <put_fat+0xb8>
 800d55e:	697b      	ldr	r3, [r7, #20]
 800d560:	781b      	ldrb	r3, [r3, #0]
 800d562:	b25b      	sxtb	r3, r3
 800d564:	f003 030f 	and.w	r3, r3, #15
 800d568:	b25a      	sxtb	r2, r3
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	b2db      	uxtb	r3, r3
 800d56e:	011b      	lsls	r3, r3, #4
 800d570:	b25b      	sxtb	r3, r3
 800d572:	4313      	orrs	r3, r2
 800d574:	b25b      	sxtb	r3, r3
 800d576:	b2db      	uxtb	r3, r3
 800d578:	e001      	b.n	800d57e <put_fat+0xbc>
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	b2db      	uxtb	r3, r3
 800d57e:	697a      	ldr	r2, [r7, #20]
 800d580:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	2201      	movs	r2, #1
 800d586:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	899b      	ldrh	r3, [r3, #12]
 800d590:	4619      	mov	r1, r3
 800d592:	69bb      	ldr	r3, [r7, #24]
 800d594:	fbb3 f3f1 	udiv	r3, r3, r1
 800d598:	4413      	add	r3, r2
 800d59a:	4619      	mov	r1, r3
 800d59c:	68f8      	ldr	r0, [r7, #12]
 800d59e:	f7ff fdff 	bl	800d1a0 <move_window>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d5a6:	7ffb      	ldrb	r3, [r7, #31]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	f040 809a 	bne.w	800d6e2 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	899b      	ldrh	r3, [r3, #12]
 800d5b8:	461a      	mov	r2, r3
 800d5ba:	69bb      	ldr	r3, [r7, #24]
 800d5bc:	fbb3 f0f2 	udiv	r0, r3, r2
 800d5c0:	fb00 f202 	mul.w	r2, r0, r2
 800d5c4:	1a9b      	subs	r3, r3, r2
 800d5c6:	440b      	add	r3, r1
 800d5c8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	f003 0301 	and.w	r3, r3, #1
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d003      	beq.n	800d5dc <put_fat+0x11a>
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	091b      	lsrs	r3, r3, #4
 800d5d8:	b2db      	uxtb	r3, r3
 800d5da:	e00e      	b.n	800d5fa <put_fat+0x138>
 800d5dc:	697b      	ldr	r3, [r7, #20]
 800d5de:	781b      	ldrb	r3, [r3, #0]
 800d5e0:	b25b      	sxtb	r3, r3
 800d5e2:	f023 030f 	bic.w	r3, r3, #15
 800d5e6:	b25a      	sxtb	r2, r3
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	0a1b      	lsrs	r3, r3, #8
 800d5ec:	b25b      	sxtb	r3, r3
 800d5ee:	f003 030f 	and.w	r3, r3, #15
 800d5f2:	b25b      	sxtb	r3, r3
 800d5f4:	4313      	orrs	r3, r2
 800d5f6:	b25b      	sxtb	r3, r3
 800d5f8:	b2db      	uxtb	r3, r3
 800d5fa:	697a      	ldr	r2, [r7, #20]
 800d5fc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	2201      	movs	r2, #1
 800d602:	70da      	strb	r2, [r3, #3]
			break;
 800d604:	e072      	b.n	800d6ec <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	899b      	ldrh	r3, [r3, #12]
 800d60e:	085b      	lsrs	r3, r3, #1
 800d610:	b29b      	uxth	r3, r3
 800d612:	4619      	mov	r1, r3
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	fbb3 f3f1 	udiv	r3, r3, r1
 800d61a:	4413      	add	r3, r2
 800d61c:	4619      	mov	r1, r3
 800d61e:	68f8      	ldr	r0, [r7, #12]
 800d620:	f7ff fdbe 	bl	800d1a0 <move_window>
 800d624:	4603      	mov	r3, r0
 800d626:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d628:	7ffb      	ldrb	r3, [r7, #31]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d15b      	bne.n	800d6e6 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	005b      	lsls	r3, r3, #1
 800d638:	68fa      	ldr	r2, [r7, #12]
 800d63a:	8992      	ldrh	r2, [r2, #12]
 800d63c:	fbb3 f0f2 	udiv	r0, r3, r2
 800d640:	fb00 f202 	mul.w	r2, r0, r2
 800d644:	1a9b      	subs	r3, r3, r2
 800d646:	440b      	add	r3, r1
 800d648:	687a      	ldr	r2, [r7, #4]
 800d64a:	b292      	uxth	r2, r2
 800d64c:	4611      	mov	r1, r2
 800d64e:	4618      	mov	r0, r3
 800d650:	f7ff faff 	bl	800cc52 <st_word>
			fs->wflag = 1;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	2201      	movs	r2, #1
 800d658:	70da      	strb	r2, [r3, #3]
			break;
 800d65a:	e047      	b.n	800d6ec <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	899b      	ldrh	r3, [r3, #12]
 800d664:	089b      	lsrs	r3, r3, #2
 800d666:	b29b      	uxth	r3, r3
 800d668:	4619      	mov	r1, r3
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	fbb3 f3f1 	udiv	r3, r3, r1
 800d670:	4413      	add	r3, r2
 800d672:	4619      	mov	r1, r3
 800d674:	68f8      	ldr	r0, [r7, #12]
 800d676:	f7ff fd93 	bl	800d1a0 <move_window>
 800d67a:	4603      	mov	r3, r0
 800d67c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d67e:	7ffb      	ldrb	r3, [r7, #31]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d132      	bne.n	800d6ea <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	009b      	lsls	r3, r3, #2
 800d694:	68fa      	ldr	r2, [r7, #12]
 800d696:	8992      	ldrh	r2, [r2, #12]
 800d698:	fbb3 f0f2 	udiv	r0, r3, r2
 800d69c:	fb00 f202 	mul.w	r2, r0, r2
 800d6a0:	1a9b      	subs	r3, r3, r2
 800d6a2:	440b      	add	r3, r1
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	f7ff fab1 	bl	800cc0c <ld_dword>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d6b0:	4323      	orrs	r3, r4
 800d6b2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	009b      	lsls	r3, r3, #2
 800d6be:	68fa      	ldr	r2, [r7, #12]
 800d6c0:	8992      	ldrh	r2, [r2, #12]
 800d6c2:	fbb3 f0f2 	udiv	r0, r3, r2
 800d6c6:	fb00 f202 	mul.w	r2, r0, r2
 800d6ca:	1a9b      	subs	r3, r3, r2
 800d6cc:	440b      	add	r3, r1
 800d6ce:	6879      	ldr	r1, [r7, #4]
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	f7ff fad9 	bl	800cc88 <st_dword>
			fs->wflag = 1;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	2201      	movs	r2, #1
 800d6da:	70da      	strb	r2, [r3, #3]
			break;
 800d6dc:	e006      	b.n	800d6ec <put_fat+0x22a>
			if (res != FR_OK) break;
 800d6de:	bf00      	nop
 800d6e0:	e004      	b.n	800d6ec <put_fat+0x22a>
			if (res != FR_OK) break;
 800d6e2:	bf00      	nop
 800d6e4:	e002      	b.n	800d6ec <put_fat+0x22a>
			if (res != FR_OK) break;
 800d6e6:	bf00      	nop
 800d6e8:	e000      	b.n	800d6ec <put_fat+0x22a>
			if (res != FR_OK) break;
 800d6ea:	bf00      	nop
		}
	}
	return res;
 800d6ec:	7ffb      	ldrb	r3, [r7, #31]
}
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	3724      	adds	r7, #36	; 0x24
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bd90      	pop	{r4, r7, pc}

0800d6f6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d6f6:	b580      	push	{r7, lr}
 800d6f8:	b088      	sub	sp, #32
 800d6fa:	af00      	add	r7, sp, #0
 800d6fc:	60f8      	str	r0, [r7, #12]
 800d6fe:	60b9      	str	r1, [r7, #8]
 800d700:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d702:	2300      	movs	r3, #0
 800d704:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	2b01      	cmp	r3, #1
 800d710:	d904      	bls.n	800d71c <remove_chain+0x26>
 800d712:	69bb      	ldr	r3, [r7, #24]
 800d714:	6a1b      	ldr	r3, [r3, #32]
 800d716:	68ba      	ldr	r2, [r7, #8]
 800d718:	429a      	cmp	r2, r3
 800d71a:	d301      	bcc.n	800d720 <remove_chain+0x2a>
 800d71c:	2302      	movs	r3, #2
 800d71e:	e04b      	b.n	800d7b8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d00c      	beq.n	800d740 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d726:	f04f 32ff 	mov.w	r2, #4294967295
 800d72a:	6879      	ldr	r1, [r7, #4]
 800d72c:	69b8      	ldr	r0, [r7, #24]
 800d72e:	f7ff fec8 	bl	800d4c2 <put_fat>
 800d732:	4603      	mov	r3, r0
 800d734:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d736:	7ffb      	ldrb	r3, [r7, #31]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d001      	beq.n	800d740 <remove_chain+0x4a>
 800d73c:	7ffb      	ldrb	r3, [r7, #31]
 800d73e:	e03b      	b.n	800d7b8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d740:	68b9      	ldr	r1, [r7, #8]
 800d742:	68f8      	ldr	r0, [r7, #12]
 800d744:	f7ff fde9 	bl	800d31a <get_fat>
 800d748:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d74a:	697b      	ldr	r3, [r7, #20]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d031      	beq.n	800d7b4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d750:	697b      	ldr	r3, [r7, #20]
 800d752:	2b01      	cmp	r3, #1
 800d754:	d101      	bne.n	800d75a <remove_chain+0x64>
 800d756:	2302      	movs	r3, #2
 800d758:	e02e      	b.n	800d7b8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d75a:	697b      	ldr	r3, [r7, #20]
 800d75c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d760:	d101      	bne.n	800d766 <remove_chain+0x70>
 800d762:	2301      	movs	r3, #1
 800d764:	e028      	b.n	800d7b8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d766:	2200      	movs	r2, #0
 800d768:	68b9      	ldr	r1, [r7, #8]
 800d76a:	69b8      	ldr	r0, [r7, #24]
 800d76c:	f7ff fea9 	bl	800d4c2 <put_fat>
 800d770:	4603      	mov	r3, r0
 800d772:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d774:	7ffb      	ldrb	r3, [r7, #31]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d001      	beq.n	800d77e <remove_chain+0x88>
 800d77a:	7ffb      	ldrb	r3, [r7, #31]
 800d77c:	e01c      	b.n	800d7b8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d77e:	69bb      	ldr	r3, [r7, #24]
 800d780:	69da      	ldr	r2, [r3, #28]
 800d782:	69bb      	ldr	r3, [r7, #24]
 800d784:	6a1b      	ldr	r3, [r3, #32]
 800d786:	3b02      	subs	r3, #2
 800d788:	429a      	cmp	r2, r3
 800d78a:	d20b      	bcs.n	800d7a4 <remove_chain+0xae>
			fs->free_clst++;
 800d78c:	69bb      	ldr	r3, [r7, #24]
 800d78e:	69db      	ldr	r3, [r3, #28]
 800d790:	1c5a      	adds	r2, r3, #1
 800d792:	69bb      	ldr	r3, [r7, #24]
 800d794:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800d796:	69bb      	ldr	r3, [r7, #24]
 800d798:	791b      	ldrb	r3, [r3, #4]
 800d79a:	f043 0301 	orr.w	r3, r3, #1
 800d79e:	b2da      	uxtb	r2, r3
 800d7a0:	69bb      	ldr	r3, [r7, #24]
 800d7a2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d7a4:	697b      	ldr	r3, [r7, #20]
 800d7a6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d7a8:	69bb      	ldr	r3, [r7, #24]
 800d7aa:	6a1b      	ldr	r3, [r3, #32]
 800d7ac:	68ba      	ldr	r2, [r7, #8]
 800d7ae:	429a      	cmp	r2, r3
 800d7b0:	d3c6      	bcc.n	800d740 <remove_chain+0x4a>
 800d7b2:	e000      	b.n	800d7b6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d7b4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d7b6:	2300      	movs	r3, #0
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	3720      	adds	r7, #32
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}

0800d7c0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b088      	sub	sp, #32
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
 800d7c8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d10d      	bne.n	800d7f2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d7d6:	693b      	ldr	r3, [r7, #16]
 800d7d8:	699b      	ldr	r3, [r3, #24]
 800d7da:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d7dc:	69bb      	ldr	r3, [r7, #24]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d004      	beq.n	800d7ec <create_chain+0x2c>
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	6a1b      	ldr	r3, [r3, #32]
 800d7e6:	69ba      	ldr	r2, [r7, #24]
 800d7e8:	429a      	cmp	r2, r3
 800d7ea:	d31b      	bcc.n	800d824 <create_chain+0x64>
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	61bb      	str	r3, [r7, #24]
 800d7f0:	e018      	b.n	800d824 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d7f2:	6839      	ldr	r1, [r7, #0]
 800d7f4:	6878      	ldr	r0, [r7, #4]
 800d7f6:	f7ff fd90 	bl	800d31a <get_fat>
 800d7fa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	2b01      	cmp	r3, #1
 800d800:	d801      	bhi.n	800d806 <create_chain+0x46>
 800d802:	2301      	movs	r3, #1
 800d804:	e070      	b.n	800d8e8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d80c:	d101      	bne.n	800d812 <create_chain+0x52>
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	e06a      	b.n	800d8e8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d812:	693b      	ldr	r3, [r7, #16]
 800d814:	6a1b      	ldr	r3, [r3, #32]
 800d816:	68fa      	ldr	r2, [r7, #12]
 800d818:	429a      	cmp	r2, r3
 800d81a:	d201      	bcs.n	800d820 <create_chain+0x60>
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	e063      	b.n	800d8e8 <create_chain+0x128>
		scl = clst;
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d824:	69bb      	ldr	r3, [r7, #24]
 800d826:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d828:	69fb      	ldr	r3, [r7, #28]
 800d82a:	3301      	adds	r3, #1
 800d82c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d82e:	693b      	ldr	r3, [r7, #16]
 800d830:	6a1b      	ldr	r3, [r3, #32]
 800d832:	69fa      	ldr	r2, [r7, #28]
 800d834:	429a      	cmp	r2, r3
 800d836:	d307      	bcc.n	800d848 <create_chain+0x88>
				ncl = 2;
 800d838:	2302      	movs	r3, #2
 800d83a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d83c:	69fa      	ldr	r2, [r7, #28]
 800d83e:	69bb      	ldr	r3, [r7, #24]
 800d840:	429a      	cmp	r2, r3
 800d842:	d901      	bls.n	800d848 <create_chain+0x88>
 800d844:	2300      	movs	r3, #0
 800d846:	e04f      	b.n	800d8e8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d848:	69f9      	ldr	r1, [r7, #28]
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f7ff fd65 	bl	800d31a <get_fat>
 800d850:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d00e      	beq.n	800d876 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	2b01      	cmp	r3, #1
 800d85c:	d003      	beq.n	800d866 <create_chain+0xa6>
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d864:	d101      	bne.n	800d86a <create_chain+0xaa>
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	e03e      	b.n	800d8e8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d86a:	69fa      	ldr	r2, [r7, #28]
 800d86c:	69bb      	ldr	r3, [r7, #24]
 800d86e:	429a      	cmp	r2, r3
 800d870:	d1da      	bne.n	800d828 <create_chain+0x68>
 800d872:	2300      	movs	r3, #0
 800d874:	e038      	b.n	800d8e8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d876:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d878:	f04f 32ff 	mov.w	r2, #4294967295
 800d87c:	69f9      	ldr	r1, [r7, #28]
 800d87e:	6938      	ldr	r0, [r7, #16]
 800d880:	f7ff fe1f 	bl	800d4c2 <put_fat>
 800d884:	4603      	mov	r3, r0
 800d886:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d888:	7dfb      	ldrb	r3, [r7, #23]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d109      	bne.n	800d8a2 <create_chain+0xe2>
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d006      	beq.n	800d8a2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d894:	69fa      	ldr	r2, [r7, #28]
 800d896:	6839      	ldr	r1, [r7, #0]
 800d898:	6938      	ldr	r0, [r7, #16]
 800d89a:	f7ff fe12 	bl	800d4c2 <put_fat>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d8a2:	7dfb      	ldrb	r3, [r7, #23]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d116      	bne.n	800d8d6 <create_chain+0x116>
		fs->last_clst = ncl;
 800d8a8:	693b      	ldr	r3, [r7, #16]
 800d8aa:	69fa      	ldr	r2, [r7, #28]
 800d8ac:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d8ae:	693b      	ldr	r3, [r7, #16]
 800d8b0:	69da      	ldr	r2, [r3, #28]
 800d8b2:	693b      	ldr	r3, [r7, #16]
 800d8b4:	6a1b      	ldr	r3, [r3, #32]
 800d8b6:	3b02      	subs	r3, #2
 800d8b8:	429a      	cmp	r2, r3
 800d8ba:	d804      	bhi.n	800d8c6 <create_chain+0x106>
 800d8bc:	693b      	ldr	r3, [r7, #16]
 800d8be:	69db      	ldr	r3, [r3, #28]
 800d8c0:	1e5a      	subs	r2, r3, #1
 800d8c2:	693b      	ldr	r3, [r7, #16]
 800d8c4:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800d8c6:	693b      	ldr	r3, [r7, #16]
 800d8c8:	791b      	ldrb	r3, [r3, #4]
 800d8ca:	f043 0301 	orr.w	r3, r3, #1
 800d8ce:	b2da      	uxtb	r2, r3
 800d8d0:	693b      	ldr	r3, [r7, #16]
 800d8d2:	711a      	strb	r2, [r3, #4]
 800d8d4:	e007      	b.n	800d8e6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d8d6:	7dfb      	ldrb	r3, [r7, #23]
 800d8d8:	2b01      	cmp	r3, #1
 800d8da:	d102      	bne.n	800d8e2 <create_chain+0x122>
 800d8dc:	f04f 33ff 	mov.w	r3, #4294967295
 800d8e0:	e000      	b.n	800d8e4 <create_chain+0x124>
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d8e6:	69fb      	ldr	r3, [r7, #28]
}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	3720      	adds	r7, #32
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd80      	pop	{r7, pc}

0800d8f0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d8f0:	b480      	push	{r7}
 800d8f2:	b087      	sub	sp, #28
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
 800d8f8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d904:	3304      	adds	r3, #4
 800d906:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	899b      	ldrh	r3, [r3, #12]
 800d90c:	461a      	mov	r2, r3
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	fbb3 f3f2 	udiv	r3, r3, r2
 800d914:	68fa      	ldr	r2, [r7, #12]
 800d916:	8952      	ldrh	r2, [r2, #10]
 800d918:	fbb3 f3f2 	udiv	r3, r3, r2
 800d91c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d91e:	693b      	ldr	r3, [r7, #16]
 800d920:	1d1a      	adds	r2, r3, #4
 800d922:	613a      	str	r2, [r7, #16]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d101      	bne.n	800d932 <clmt_clust+0x42>
 800d92e:	2300      	movs	r3, #0
 800d930:	e010      	b.n	800d954 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800d932:	697a      	ldr	r2, [r7, #20]
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	429a      	cmp	r2, r3
 800d938:	d307      	bcc.n	800d94a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800d93a:	697a      	ldr	r2, [r7, #20]
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	1ad3      	subs	r3, r2, r3
 800d940:	617b      	str	r3, [r7, #20]
 800d942:	693b      	ldr	r3, [r7, #16]
 800d944:	3304      	adds	r3, #4
 800d946:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d948:	e7e9      	b.n	800d91e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800d94a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d94c:	693b      	ldr	r3, [r7, #16]
 800d94e:	681a      	ldr	r2, [r3, #0]
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	4413      	add	r3, r2
}
 800d954:	4618      	mov	r0, r3
 800d956:	371c      	adds	r7, #28
 800d958:	46bd      	mov	sp, r7
 800d95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95e:	4770      	bx	lr

0800d960 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b086      	sub	sp, #24
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
 800d968:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d976:	d204      	bcs.n	800d982 <dir_sdi+0x22>
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	f003 031f 	and.w	r3, r3, #31
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d001      	beq.n	800d986 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d982:	2302      	movs	r3, #2
 800d984:	e071      	b.n	800da6a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	683a      	ldr	r2, [r7, #0]
 800d98a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	689b      	ldr	r3, [r3, #8]
 800d990:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d106      	bne.n	800d9a6 <dir_sdi+0x46>
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	781b      	ldrb	r3, [r3, #0]
 800d99c:	2b02      	cmp	r3, #2
 800d99e:	d902      	bls.n	800d9a6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d9a0:	693b      	ldr	r3, [r7, #16]
 800d9a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9a4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d9a6:	697b      	ldr	r3, [r7, #20]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d10c      	bne.n	800d9c6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	095b      	lsrs	r3, r3, #5
 800d9b0:	693a      	ldr	r2, [r7, #16]
 800d9b2:	8912      	ldrh	r2, [r2, #8]
 800d9b4:	4293      	cmp	r3, r2
 800d9b6:	d301      	bcc.n	800d9bc <dir_sdi+0x5c>
 800d9b8:	2302      	movs	r3, #2
 800d9ba:	e056      	b.n	800da6a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800d9bc:	693b      	ldr	r3, [r7, #16]
 800d9be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	61da      	str	r2, [r3, #28]
 800d9c4:	e02d      	b.n	800da22 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d9c6:	693b      	ldr	r3, [r7, #16]
 800d9c8:	895b      	ldrh	r3, [r3, #10]
 800d9ca:	461a      	mov	r2, r3
 800d9cc:	693b      	ldr	r3, [r7, #16]
 800d9ce:	899b      	ldrh	r3, [r3, #12]
 800d9d0:	fb02 f303 	mul.w	r3, r2, r3
 800d9d4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d9d6:	e019      	b.n	800da0c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6979      	ldr	r1, [r7, #20]
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f7ff fc9c 	bl	800d31a <get_fat>
 800d9e2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d9e4:	697b      	ldr	r3, [r7, #20]
 800d9e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9ea:	d101      	bne.n	800d9f0 <dir_sdi+0x90>
 800d9ec:	2301      	movs	r3, #1
 800d9ee:	e03c      	b.n	800da6a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	2b01      	cmp	r3, #1
 800d9f4:	d904      	bls.n	800da00 <dir_sdi+0xa0>
 800d9f6:	693b      	ldr	r3, [r7, #16]
 800d9f8:	6a1b      	ldr	r3, [r3, #32]
 800d9fa:	697a      	ldr	r2, [r7, #20]
 800d9fc:	429a      	cmp	r2, r3
 800d9fe:	d301      	bcc.n	800da04 <dir_sdi+0xa4>
 800da00:	2302      	movs	r3, #2
 800da02:	e032      	b.n	800da6a <dir_sdi+0x10a>
			ofs -= csz;
 800da04:	683a      	ldr	r2, [r7, #0]
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	1ad3      	subs	r3, r2, r3
 800da0a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800da0c:	683a      	ldr	r2, [r7, #0]
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	429a      	cmp	r2, r3
 800da12:	d2e1      	bcs.n	800d9d8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800da14:	6979      	ldr	r1, [r7, #20]
 800da16:	6938      	ldr	r0, [r7, #16]
 800da18:	f7ff fc60 	bl	800d2dc <clust2sect>
 800da1c:	4602      	mov	r2, r0
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	697a      	ldr	r2, [r7, #20]
 800da26:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	69db      	ldr	r3, [r3, #28]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d101      	bne.n	800da34 <dir_sdi+0xd4>
 800da30:	2302      	movs	r3, #2
 800da32:	e01a      	b.n	800da6a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	69da      	ldr	r2, [r3, #28]
 800da38:	693b      	ldr	r3, [r7, #16]
 800da3a:	899b      	ldrh	r3, [r3, #12]
 800da3c:	4619      	mov	r1, r3
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	fbb3 f3f1 	udiv	r3, r3, r1
 800da44:	441a      	add	r2, r3
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800da4a:	693b      	ldr	r3, [r7, #16]
 800da4c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800da50:	693b      	ldr	r3, [r7, #16]
 800da52:	899b      	ldrh	r3, [r3, #12]
 800da54:	461a      	mov	r2, r3
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	fbb3 f0f2 	udiv	r0, r3, r2
 800da5c:	fb00 f202 	mul.w	r2, r0, r2
 800da60:	1a9b      	subs	r3, r3, r2
 800da62:	18ca      	adds	r2, r1, r3
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800da68:	2300      	movs	r3, #0
}
 800da6a:	4618      	mov	r0, r3
 800da6c:	3718      	adds	r7, #24
 800da6e:	46bd      	mov	sp, r7
 800da70:	bd80      	pop	{r7, pc}

0800da72 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800da72:	b580      	push	{r7, lr}
 800da74:	b086      	sub	sp, #24
 800da76:	af00      	add	r7, sp, #0
 800da78:	6078      	str	r0, [r7, #4]
 800da7a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	695b      	ldr	r3, [r3, #20]
 800da86:	3320      	adds	r3, #32
 800da88:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	69db      	ldr	r3, [r3, #28]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d003      	beq.n	800da9a <dir_next+0x28>
 800da92:	68bb      	ldr	r3, [r7, #8]
 800da94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800da98:	d301      	bcc.n	800da9e <dir_next+0x2c>
 800da9a:	2304      	movs	r3, #4
 800da9c:	e0bb      	b.n	800dc16 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	899b      	ldrh	r3, [r3, #12]
 800daa2:	461a      	mov	r2, r3
 800daa4:	68bb      	ldr	r3, [r7, #8]
 800daa6:	fbb3 f1f2 	udiv	r1, r3, r2
 800daaa:	fb01 f202 	mul.w	r2, r1, r2
 800daae:	1a9b      	subs	r3, r3, r2
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	f040 809d 	bne.w	800dbf0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	69db      	ldr	r3, [r3, #28]
 800daba:	1c5a      	adds	r2, r3, #1
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	699b      	ldr	r3, [r3, #24]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d10b      	bne.n	800dae0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	095b      	lsrs	r3, r3, #5
 800dacc:	68fa      	ldr	r2, [r7, #12]
 800dace:	8912      	ldrh	r2, [r2, #8]
 800dad0:	4293      	cmp	r3, r2
 800dad2:	f0c0 808d 	bcc.w	800dbf0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	2200      	movs	r2, #0
 800dada:	61da      	str	r2, [r3, #28]
 800dadc:	2304      	movs	r3, #4
 800dade:	e09a      	b.n	800dc16 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	899b      	ldrh	r3, [r3, #12]
 800dae4:	461a      	mov	r2, r3
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	fbb3 f3f2 	udiv	r3, r3, r2
 800daec:	68fa      	ldr	r2, [r7, #12]
 800daee:	8952      	ldrh	r2, [r2, #10]
 800daf0:	3a01      	subs	r2, #1
 800daf2:	4013      	ands	r3, r2
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d17b      	bne.n	800dbf0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800daf8:	687a      	ldr	r2, [r7, #4]
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	699b      	ldr	r3, [r3, #24]
 800dafe:	4619      	mov	r1, r3
 800db00:	4610      	mov	r0, r2
 800db02:	f7ff fc0a 	bl	800d31a <get_fat>
 800db06:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	2b01      	cmp	r3, #1
 800db0c:	d801      	bhi.n	800db12 <dir_next+0xa0>
 800db0e:	2302      	movs	r3, #2
 800db10:	e081      	b.n	800dc16 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db18:	d101      	bne.n	800db1e <dir_next+0xac>
 800db1a:	2301      	movs	r3, #1
 800db1c:	e07b      	b.n	800dc16 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	6a1b      	ldr	r3, [r3, #32]
 800db22:	697a      	ldr	r2, [r7, #20]
 800db24:	429a      	cmp	r2, r3
 800db26:	d359      	bcc.n	800dbdc <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d104      	bne.n	800db38 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	2200      	movs	r2, #0
 800db32:	61da      	str	r2, [r3, #28]
 800db34:	2304      	movs	r3, #4
 800db36:	e06e      	b.n	800dc16 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800db38:	687a      	ldr	r2, [r7, #4]
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	699b      	ldr	r3, [r3, #24]
 800db3e:	4619      	mov	r1, r3
 800db40:	4610      	mov	r0, r2
 800db42:	f7ff fe3d 	bl	800d7c0 <create_chain>
 800db46:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800db48:	697b      	ldr	r3, [r7, #20]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d101      	bne.n	800db52 <dir_next+0xe0>
 800db4e:	2307      	movs	r3, #7
 800db50:	e061      	b.n	800dc16 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800db52:	697b      	ldr	r3, [r7, #20]
 800db54:	2b01      	cmp	r3, #1
 800db56:	d101      	bne.n	800db5c <dir_next+0xea>
 800db58:	2302      	movs	r3, #2
 800db5a:	e05c      	b.n	800dc16 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db62:	d101      	bne.n	800db68 <dir_next+0xf6>
 800db64:	2301      	movs	r3, #1
 800db66:	e056      	b.n	800dc16 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800db68:	68f8      	ldr	r0, [r7, #12]
 800db6a:	f7ff fad5 	bl	800d118 <sync_window>
 800db6e:	4603      	mov	r3, r0
 800db70:	2b00      	cmp	r3, #0
 800db72:	d001      	beq.n	800db78 <dir_next+0x106>
 800db74:	2301      	movs	r3, #1
 800db76:	e04e      	b.n	800dc16 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	899b      	ldrh	r3, [r3, #12]
 800db82:	461a      	mov	r2, r3
 800db84:	2100      	movs	r1, #0
 800db86:	f7ff f8cc 	bl	800cd22 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800db8a:	2300      	movs	r3, #0
 800db8c:	613b      	str	r3, [r7, #16]
 800db8e:	6979      	ldr	r1, [r7, #20]
 800db90:	68f8      	ldr	r0, [r7, #12]
 800db92:	f7ff fba3 	bl	800d2dc <clust2sect>
 800db96:	4602      	mov	r2, r0
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	639a      	str	r2, [r3, #56]	; 0x38
 800db9c:	e012      	b.n	800dbc4 <dir_next+0x152>
						fs->wflag = 1;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	2201      	movs	r2, #1
 800dba2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800dba4:	68f8      	ldr	r0, [r7, #12]
 800dba6:	f7ff fab7 	bl	800d118 <sync_window>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d001      	beq.n	800dbb4 <dir_next+0x142>
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	e030      	b.n	800dc16 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dbb4:	693b      	ldr	r3, [r7, #16]
 800dbb6:	3301      	adds	r3, #1
 800dbb8:	613b      	str	r3, [r7, #16]
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbbe:	1c5a      	adds	r2, r3, #1
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	639a      	str	r2, [r3, #56]	; 0x38
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	895b      	ldrh	r3, [r3, #10]
 800dbc8:	461a      	mov	r2, r3
 800dbca:	693b      	ldr	r3, [r7, #16]
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	d3e6      	bcc.n	800db9e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dbd4:	693b      	ldr	r3, [r7, #16]
 800dbd6:	1ad2      	subs	r2, r2, r3
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	697a      	ldr	r2, [r7, #20]
 800dbe0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800dbe2:	6979      	ldr	r1, [r7, #20]
 800dbe4:	68f8      	ldr	r0, [r7, #12]
 800dbe6:	f7ff fb79 	bl	800d2dc <clust2sect>
 800dbea:	4602      	mov	r2, r0
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	68ba      	ldr	r2, [r7, #8]
 800dbf4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	899b      	ldrh	r3, [r3, #12]
 800dc00:	461a      	mov	r2, r3
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	fbb3 f0f2 	udiv	r0, r3, r2
 800dc08:	fb00 f202 	mul.w	r2, r0, r2
 800dc0c:	1a9b      	subs	r3, r3, r2
 800dc0e:	18ca      	adds	r2, r1, r3
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800dc14:	2300      	movs	r3, #0
}
 800dc16:	4618      	mov	r0, r3
 800dc18:	3718      	adds	r7, #24
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}

0800dc1e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800dc1e:	b580      	push	{r7, lr}
 800dc20:	b086      	sub	sp, #24
 800dc22:	af00      	add	r7, sp, #0
 800dc24:	6078      	str	r0, [r7, #4]
 800dc26:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800dc2e:	2100      	movs	r1, #0
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f7ff fe95 	bl	800d960 <dir_sdi>
 800dc36:	4603      	mov	r3, r0
 800dc38:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dc3a:	7dfb      	ldrb	r3, [r7, #23]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d12b      	bne.n	800dc98 <dir_alloc+0x7a>
		n = 0;
 800dc40:	2300      	movs	r3, #0
 800dc42:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	69db      	ldr	r3, [r3, #28]
 800dc48:	4619      	mov	r1, r3
 800dc4a:	68f8      	ldr	r0, [r7, #12]
 800dc4c:	f7ff faa8 	bl	800d1a0 <move_window>
 800dc50:	4603      	mov	r3, r0
 800dc52:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dc54:	7dfb      	ldrb	r3, [r7, #23]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d11d      	bne.n	800dc96 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	6a1b      	ldr	r3, [r3, #32]
 800dc5e:	781b      	ldrb	r3, [r3, #0]
 800dc60:	2be5      	cmp	r3, #229	; 0xe5
 800dc62:	d004      	beq.n	800dc6e <dir_alloc+0x50>
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	6a1b      	ldr	r3, [r3, #32]
 800dc68:	781b      	ldrb	r3, [r3, #0]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d107      	bne.n	800dc7e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	3301      	adds	r3, #1
 800dc72:	613b      	str	r3, [r7, #16]
 800dc74:	693a      	ldr	r2, [r7, #16]
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	429a      	cmp	r2, r3
 800dc7a:	d102      	bne.n	800dc82 <dir_alloc+0x64>
 800dc7c:	e00c      	b.n	800dc98 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800dc7e:	2300      	movs	r3, #0
 800dc80:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800dc82:	2101      	movs	r1, #1
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f7ff fef4 	bl	800da72 <dir_next>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800dc8e:	7dfb      	ldrb	r3, [r7, #23]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d0d7      	beq.n	800dc44 <dir_alloc+0x26>
 800dc94:	e000      	b.n	800dc98 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800dc96:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800dc98:	7dfb      	ldrb	r3, [r7, #23]
 800dc9a:	2b04      	cmp	r3, #4
 800dc9c:	d101      	bne.n	800dca2 <dir_alloc+0x84>
 800dc9e:	2307      	movs	r3, #7
 800dca0:	75fb      	strb	r3, [r7, #23]
	return res;
 800dca2:	7dfb      	ldrb	r3, [r7, #23]
}
 800dca4:	4618      	mov	r0, r3
 800dca6:	3718      	adds	r7, #24
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}

0800dcac <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b084      	sub	sp, #16
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
 800dcb4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	331a      	adds	r3, #26
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f7fe ff8e 	bl	800cbdc <ld_word>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	781b      	ldrb	r3, [r3, #0]
 800dcc8:	2b03      	cmp	r3, #3
 800dcca:	d109      	bne.n	800dce0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	3314      	adds	r3, #20
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f7fe ff83 	bl	800cbdc <ld_word>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	041b      	lsls	r3, r3, #16
 800dcda:	68fa      	ldr	r2, [r7, #12]
 800dcdc:	4313      	orrs	r3, r2
 800dcde:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800dce0:	68fb      	ldr	r3, [r7, #12]
}
 800dce2:	4618      	mov	r0, r3
 800dce4:	3710      	adds	r7, #16
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}

0800dcea <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800dcea:	b580      	push	{r7, lr}
 800dcec:	b084      	sub	sp, #16
 800dcee:	af00      	add	r7, sp, #0
 800dcf0:	60f8      	str	r0, [r7, #12]
 800dcf2:	60b9      	str	r1, [r7, #8]
 800dcf4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	331a      	adds	r3, #26
 800dcfa:	687a      	ldr	r2, [r7, #4]
 800dcfc:	b292      	uxth	r2, r2
 800dcfe:	4611      	mov	r1, r2
 800dd00:	4618      	mov	r0, r3
 800dd02:	f7fe ffa6 	bl	800cc52 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	781b      	ldrb	r3, [r3, #0]
 800dd0a:	2b03      	cmp	r3, #3
 800dd0c:	d109      	bne.n	800dd22 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800dd0e:	68bb      	ldr	r3, [r7, #8]
 800dd10:	f103 0214 	add.w	r2, r3, #20
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	0c1b      	lsrs	r3, r3, #16
 800dd18:	b29b      	uxth	r3, r3
 800dd1a:	4619      	mov	r1, r3
 800dd1c:	4610      	mov	r0, r2
 800dd1e:	f7fe ff98 	bl	800cc52 <st_word>
	}
}
 800dd22:	bf00      	nop
 800dd24:	3710      	adds	r7, #16
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}
	...

0800dd2c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800dd2c:	b590      	push	{r4, r7, lr}
 800dd2e:	b087      	sub	sp, #28
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
 800dd34:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	331a      	adds	r3, #26
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	f7fe ff4e 	bl	800cbdc <ld_word>
 800dd40:	4603      	mov	r3, r0
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d001      	beq.n	800dd4a <cmp_lfn+0x1e>
 800dd46:	2300      	movs	r3, #0
 800dd48:	e059      	b.n	800ddfe <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	781b      	ldrb	r3, [r3, #0]
 800dd4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd52:	1e5a      	subs	r2, r3, #1
 800dd54:	4613      	mov	r3, r2
 800dd56:	005b      	lsls	r3, r3, #1
 800dd58:	4413      	add	r3, r2
 800dd5a:	009b      	lsls	r3, r3, #2
 800dd5c:	4413      	add	r3, r2
 800dd5e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800dd60:	2301      	movs	r3, #1
 800dd62:	81fb      	strh	r3, [r7, #14]
 800dd64:	2300      	movs	r3, #0
 800dd66:	613b      	str	r3, [r7, #16]
 800dd68:	e033      	b.n	800ddd2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800dd6a:	4a27      	ldr	r2, [pc, #156]	; (800de08 <cmp_lfn+0xdc>)
 800dd6c:	693b      	ldr	r3, [r7, #16]
 800dd6e:	4413      	add	r3, r2
 800dd70:	781b      	ldrb	r3, [r3, #0]
 800dd72:	461a      	mov	r2, r3
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	4413      	add	r3, r2
 800dd78:	4618      	mov	r0, r3
 800dd7a:	f7fe ff2f 	bl	800cbdc <ld_word>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800dd82:	89fb      	ldrh	r3, [r7, #14]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d01a      	beq.n	800ddbe <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800dd88:	697b      	ldr	r3, [r7, #20]
 800dd8a:	2bfe      	cmp	r3, #254	; 0xfe
 800dd8c:	d812      	bhi.n	800ddb4 <cmp_lfn+0x88>
 800dd8e:	89bb      	ldrh	r3, [r7, #12]
 800dd90:	4618      	mov	r0, r3
 800dd92:	f002 f841 	bl	800fe18 <ff_wtoupper>
 800dd96:	4603      	mov	r3, r0
 800dd98:	461c      	mov	r4, r3
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	1c5a      	adds	r2, r3, #1
 800dd9e:	617a      	str	r2, [r7, #20]
 800dda0:	005b      	lsls	r3, r3, #1
 800dda2:	687a      	ldr	r2, [r7, #4]
 800dda4:	4413      	add	r3, r2
 800dda6:	881b      	ldrh	r3, [r3, #0]
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f002 f835 	bl	800fe18 <ff_wtoupper>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	429c      	cmp	r4, r3
 800ddb2:	d001      	beq.n	800ddb8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	e022      	b.n	800ddfe <cmp_lfn+0xd2>
			}
			wc = uc;
 800ddb8:	89bb      	ldrh	r3, [r7, #12]
 800ddba:	81fb      	strh	r3, [r7, #14]
 800ddbc:	e006      	b.n	800ddcc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ddbe:	89bb      	ldrh	r3, [r7, #12]
 800ddc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ddc4:	4293      	cmp	r3, r2
 800ddc6:	d001      	beq.n	800ddcc <cmp_lfn+0xa0>
 800ddc8:	2300      	movs	r3, #0
 800ddca:	e018      	b.n	800ddfe <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ddcc:	693b      	ldr	r3, [r7, #16]
 800ddce:	3301      	adds	r3, #1
 800ddd0:	613b      	str	r3, [r7, #16]
 800ddd2:	693b      	ldr	r3, [r7, #16]
 800ddd4:	2b0c      	cmp	r3, #12
 800ddd6:	d9c8      	bls.n	800dd6a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	781b      	ldrb	r3, [r3, #0]
 800dddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d00b      	beq.n	800ddfc <cmp_lfn+0xd0>
 800dde4:	89fb      	ldrh	r3, [r7, #14]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d008      	beq.n	800ddfc <cmp_lfn+0xd0>
 800ddea:	697b      	ldr	r3, [r7, #20]
 800ddec:	005b      	lsls	r3, r3, #1
 800ddee:	687a      	ldr	r2, [r7, #4]
 800ddf0:	4413      	add	r3, r2
 800ddf2:	881b      	ldrh	r3, [r3, #0]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d001      	beq.n	800ddfc <cmp_lfn+0xd0>
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	e000      	b.n	800ddfe <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800ddfc:	2301      	movs	r3, #1
}
 800ddfe:	4618      	mov	r0, r3
 800de00:	371c      	adds	r7, #28
 800de02:	46bd      	mov	sp, r7
 800de04:	bd90      	pop	{r4, r7, pc}
 800de06:	bf00      	nop
 800de08:	08015b54 	.word	0x08015b54

0800de0c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b088      	sub	sp, #32
 800de10:	af00      	add	r7, sp, #0
 800de12:	60f8      	str	r0, [r7, #12]
 800de14:	60b9      	str	r1, [r7, #8]
 800de16:	4611      	mov	r1, r2
 800de18:	461a      	mov	r2, r3
 800de1a:	460b      	mov	r3, r1
 800de1c:	71fb      	strb	r3, [r7, #7]
 800de1e:	4613      	mov	r3, r2
 800de20:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	330d      	adds	r3, #13
 800de26:	79ba      	ldrb	r2, [r7, #6]
 800de28:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	330b      	adds	r3, #11
 800de2e:	220f      	movs	r2, #15
 800de30:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	330c      	adds	r3, #12
 800de36:	2200      	movs	r2, #0
 800de38:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800de3a:	68bb      	ldr	r3, [r7, #8]
 800de3c:	331a      	adds	r3, #26
 800de3e:	2100      	movs	r1, #0
 800de40:	4618      	mov	r0, r3
 800de42:	f7fe ff06 	bl	800cc52 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800de46:	79fb      	ldrb	r3, [r7, #7]
 800de48:	1e5a      	subs	r2, r3, #1
 800de4a:	4613      	mov	r3, r2
 800de4c:	005b      	lsls	r3, r3, #1
 800de4e:	4413      	add	r3, r2
 800de50:	009b      	lsls	r3, r3, #2
 800de52:	4413      	add	r3, r2
 800de54:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800de56:	2300      	movs	r3, #0
 800de58:	82fb      	strh	r3, [r7, #22]
 800de5a:	2300      	movs	r3, #0
 800de5c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800de5e:	8afb      	ldrh	r3, [r7, #22]
 800de60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de64:	4293      	cmp	r3, r2
 800de66:	d007      	beq.n	800de78 <put_lfn+0x6c>
 800de68:	69fb      	ldr	r3, [r7, #28]
 800de6a:	1c5a      	adds	r2, r3, #1
 800de6c:	61fa      	str	r2, [r7, #28]
 800de6e:	005b      	lsls	r3, r3, #1
 800de70:	68fa      	ldr	r2, [r7, #12]
 800de72:	4413      	add	r3, r2
 800de74:	881b      	ldrh	r3, [r3, #0]
 800de76:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800de78:	4a17      	ldr	r2, [pc, #92]	; (800ded8 <put_lfn+0xcc>)
 800de7a:	69bb      	ldr	r3, [r7, #24]
 800de7c:	4413      	add	r3, r2
 800de7e:	781b      	ldrb	r3, [r3, #0]
 800de80:	461a      	mov	r2, r3
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	4413      	add	r3, r2
 800de86:	8afa      	ldrh	r2, [r7, #22]
 800de88:	4611      	mov	r1, r2
 800de8a:	4618      	mov	r0, r3
 800de8c:	f7fe fee1 	bl	800cc52 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800de90:	8afb      	ldrh	r3, [r7, #22]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d102      	bne.n	800de9c <put_lfn+0x90>
 800de96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800de9a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800de9c:	69bb      	ldr	r3, [r7, #24]
 800de9e:	3301      	adds	r3, #1
 800dea0:	61bb      	str	r3, [r7, #24]
 800dea2:	69bb      	ldr	r3, [r7, #24]
 800dea4:	2b0c      	cmp	r3, #12
 800dea6:	d9da      	bls.n	800de5e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800dea8:	8afb      	ldrh	r3, [r7, #22]
 800deaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800deae:	4293      	cmp	r3, r2
 800deb0:	d006      	beq.n	800dec0 <put_lfn+0xb4>
 800deb2:	69fb      	ldr	r3, [r7, #28]
 800deb4:	005b      	lsls	r3, r3, #1
 800deb6:	68fa      	ldr	r2, [r7, #12]
 800deb8:	4413      	add	r3, r2
 800deba:	881b      	ldrh	r3, [r3, #0]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d103      	bne.n	800dec8 <put_lfn+0xbc>
 800dec0:	79fb      	ldrb	r3, [r7, #7]
 800dec2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dec6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	79fa      	ldrb	r2, [r7, #7]
 800decc:	701a      	strb	r2, [r3, #0]
}
 800dece:	bf00      	nop
 800ded0:	3720      	adds	r7, #32
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}
 800ded6:	bf00      	nop
 800ded8:	08015b54 	.word	0x08015b54

0800dedc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b08c      	sub	sp, #48	; 0x30
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	60f8      	str	r0, [r7, #12]
 800dee4:	60b9      	str	r1, [r7, #8]
 800dee6:	607a      	str	r2, [r7, #4]
 800dee8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800deea:	220b      	movs	r2, #11
 800deec:	68b9      	ldr	r1, [r7, #8]
 800deee:	68f8      	ldr	r0, [r7, #12]
 800def0:	f7fe fef6 	bl	800cce0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	2b05      	cmp	r3, #5
 800def8:	d92b      	bls.n	800df52 <gen_numname+0x76>
		sr = seq;
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800defe:	e022      	b.n	800df46 <gen_numname+0x6a>
			wc = *lfn++;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	1c9a      	adds	r2, r3, #2
 800df04:	607a      	str	r2, [r7, #4]
 800df06:	881b      	ldrh	r3, [r3, #0]
 800df08:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800df0a:	2300      	movs	r3, #0
 800df0c:	62bb      	str	r3, [r7, #40]	; 0x28
 800df0e:	e017      	b.n	800df40 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800df10:	69fb      	ldr	r3, [r7, #28]
 800df12:	005a      	lsls	r2, r3, #1
 800df14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df16:	f003 0301 	and.w	r3, r3, #1
 800df1a:	4413      	add	r3, r2
 800df1c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800df1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df20:	085b      	lsrs	r3, r3, #1
 800df22:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800df24:	69fb      	ldr	r3, [r7, #28]
 800df26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d005      	beq.n	800df3a <gen_numname+0x5e>
 800df2e:	69fb      	ldr	r3, [r7, #28]
 800df30:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800df34:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800df38:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800df3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df3c:	3301      	adds	r3, #1
 800df3e:	62bb      	str	r3, [r7, #40]	; 0x28
 800df40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df42:	2b0f      	cmp	r3, #15
 800df44:	d9e4      	bls.n	800df10 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	881b      	ldrh	r3, [r3, #0]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d1d8      	bne.n	800df00 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800df4e:	69fb      	ldr	r3, [r7, #28]
 800df50:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800df52:	2307      	movs	r3, #7
 800df54:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	b2db      	uxtb	r3, r3
 800df5a:	f003 030f 	and.w	r3, r3, #15
 800df5e:	b2db      	uxtb	r3, r3
 800df60:	3330      	adds	r3, #48	; 0x30
 800df62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800df66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800df6a:	2b39      	cmp	r3, #57	; 0x39
 800df6c:	d904      	bls.n	800df78 <gen_numname+0x9c>
 800df6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800df72:	3307      	adds	r3, #7
 800df74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800df78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df7a:	1e5a      	subs	r2, r3, #1
 800df7c:	62ba      	str	r2, [r7, #40]	; 0x28
 800df7e:	3330      	adds	r3, #48	; 0x30
 800df80:	443b      	add	r3, r7
 800df82:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800df86:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	091b      	lsrs	r3, r3, #4
 800df8e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d1df      	bne.n	800df56 <gen_numname+0x7a>
	ns[i] = '~';
 800df96:	f107 0214 	add.w	r2, r7, #20
 800df9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df9c:	4413      	add	r3, r2
 800df9e:	227e      	movs	r2, #126	; 0x7e
 800dfa0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	627b      	str	r3, [r7, #36]	; 0x24
 800dfa6:	e002      	b.n	800dfae <gen_numname+0xd2>
 800dfa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfaa:	3301      	adds	r3, #1
 800dfac:	627b      	str	r3, [r7, #36]	; 0x24
 800dfae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfb2:	429a      	cmp	r2, r3
 800dfb4:	d205      	bcs.n	800dfc2 <gen_numname+0xe6>
 800dfb6:	68fa      	ldr	r2, [r7, #12]
 800dfb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfba:	4413      	add	r3, r2
 800dfbc:	781b      	ldrb	r3, [r3, #0]
 800dfbe:	2b20      	cmp	r3, #32
 800dfc0:	d1f2      	bne.n	800dfa8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800dfc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfc4:	2b07      	cmp	r3, #7
 800dfc6:	d807      	bhi.n	800dfd8 <gen_numname+0xfc>
 800dfc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfca:	1c5a      	adds	r2, r3, #1
 800dfcc:	62ba      	str	r2, [r7, #40]	; 0x28
 800dfce:	3330      	adds	r3, #48	; 0x30
 800dfd0:	443b      	add	r3, r7
 800dfd2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800dfd6:	e000      	b.n	800dfda <gen_numname+0xfe>
 800dfd8:	2120      	movs	r1, #32
 800dfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfdc:	1c5a      	adds	r2, r3, #1
 800dfde:	627a      	str	r2, [r7, #36]	; 0x24
 800dfe0:	68fa      	ldr	r2, [r7, #12]
 800dfe2:	4413      	add	r3, r2
 800dfe4:	460a      	mov	r2, r1
 800dfe6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800dfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfea:	2b07      	cmp	r3, #7
 800dfec:	d9e9      	bls.n	800dfc2 <gen_numname+0xe6>
}
 800dfee:	bf00      	nop
 800dff0:	bf00      	nop
 800dff2:	3730      	adds	r7, #48	; 0x30
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}

0800dff8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800dff8:	b480      	push	{r7}
 800dffa:	b085      	sub	sp, #20
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e000:	2300      	movs	r3, #0
 800e002:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e004:	230b      	movs	r3, #11
 800e006:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e008:	7bfb      	ldrb	r3, [r7, #15]
 800e00a:	b2da      	uxtb	r2, r3
 800e00c:	0852      	lsrs	r2, r2, #1
 800e00e:	01db      	lsls	r3, r3, #7
 800e010:	4313      	orrs	r3, r2
 800e012:	b2da      	uxtb	r2, r3
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	1c59      	adds	r1, r3, #1
 800e018:	6079      	str	r1, [r7, #4]
 800e01a:	781b      	ldrb	r3, [r3, #0]
 800e01c:	4413      	add	r3, r2
 800e01e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e020:	68bb      	ldr	r3, [r7, #8]
 800e022:	3b01      	subs	r3, #1
 800e024:	60bb      	str	r3, [r7, #8]
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d1ed      	bne.n	800e008 <sum_sfn+0x10>
	return sum;
 800e02c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e02e:	4618      	mov	r0, r3
 800e030:	3714      	adds	r7, #20
 800e032:	46bd      	mov	sp, r7
 800e034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e038:	4770      	bx	lr

0800e03a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e03a:	b580      	push	{r7, lr}
 800e03c:	b086      	sub	sp, #24
 800e03e:	af00      	add	r7, sp, #0
 800e040:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e048:	2100      	movs	r1, #0
 800e04a:	6878      	ldr	r0, [r7, #4]
 800e04c:	f7ff fc88 	bl	800d960 <dir_sdi>
 800e050:	4603      	mov	r3, r0
 800e052:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e054:	7dfb      	ldrb	r3, [r7, #23]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d001      	beq.n	800e05e <dir_find+0x24>
 800e05a:	7dfb      	ldrb	r3, [r7, #23]
 800e05c:	e0a9      	b.n	800e1b2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e05e:	23ff      	movs	r3, #255	; 0xff
 800e060:	753b      	strb	r3, [r7, #20]
 800e062:	7d3b      	ldrb	r3, [r7, #20]
 800e064:	757b      	strb	r3, [r7, #21]
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f04f 32ff 	mov.w	r2, #4294967295
 800e06c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	69db      	ldr	r3, [r3, #28]
 800e072:	4619      	mov	r1, r3
 800e074:	6938      	ldr	r0, [r7, #16]
 800e076:	f7ff f893 	bl	800d1a0 <move_window>
 800e07a:	4603      	mov	r3, r0
 800e07c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e07e:	7dfb      	ldrb	r3, [r7, #23]
 800e080:	2b00      	cmp	r3, #0
 800e082:	f040 8090 	bne.w	800e1a6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	6a1b      	ldr	r3, [r3, #32]
 800e08a:	781b      	ldrb	r3, [r3, #0]
 800e08c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e08e:	7dbb      	ldrb	r3, [r7, #22]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d102      	bne.n	800e09a <dir_find+0x60>
 800e094:	2304      	movs	r3, #4
 800e096:	75fb      	strb	r3, [r7, #23]
 800e098:	e08a      	b.n	800e1b0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6a1b      	ldr	r3, [r3, #32]
 800e09e:	330b      	adds	r3, #11
 800e0a0:	781b      	ldrb	r3, [r3, #0]
 800e0a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e0a6:	73fb      	strb	r3, [r7, #15]
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	7bfa      	ldrb	r2, [r7, #15]
 800e0ac:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e0ae:	7dbb      	ldrb	r3, [r7, #22]
 800e0b0:	2be5      	cmp	r3, #229	; 0xe5
 800e0b2:	d007      	beq.n	800e0c4 <dir_find+0x8a>
 800e0b4:	7bfb      	ldrb	r3, [r7, #15]
 800e0b6:	f003 0308 	and.w	r3, r3, #8
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d009      	beq.n	800e0d2 <dir_find+0x98>
 800e0be:	7bfb      	ldrb	r3, [r7, #15]
 800e0c0:	2b0f      	cmp	r3, #15
 800e0c2:	d006      	beq.n	800e0d2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e0c4:	23ff      	movs	r3, #255	; 0xff
 800e0c6:	757b      	strb	r3, [r7, #21]
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	f04f 32ff 	mov.w	r2, #4294967295
 800e0ce:	631a      	str	r2, [r3, #48]	; 0x30
 800e0d0:	e05e      	b.n	800e190 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e0d2:	7bfb      	ldrb	r3, [r7, #15]
 800e0d4:	2b0f      	cmp	r3, #15
 800e0d6:	d136      	bne.n	800e146 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e0de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d154      	bne.n	800e190 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e0e6:	7dbb      	ldrb	r3, [r7, #22]
 800e0e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d00d      	beq.n	800e10c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	6a1b      	ldr	r3, [r3, #32]
 800e0f4:	7b5b      	ldrb	r3, [r3, #13]
 800e0f6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e0f8:	7dbb      	ldrb	r3, [r7, #22]
 800e0fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e0fe:	75bb      	strb	r3, [r7, #22]
 800e100:	7dbb      	ldrb	r3, [r7, #22]
 800e102:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	695a      	ldr	r2, [r3, #20]
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e10c:	7dba      	ldrb	r2, [r7, #22]
 800e10e:	7d7b      	ldrb	r3, [r7, #21]
 800e110:	429a      	cmp	r2, r3
 800e112:	d115      	bne.n	800e140 <dir_find+0x106>
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	6a1b      	ldr	r3, [r3, #32]
 800e118:	330d      	adds	r3, #13
 800e11a:	781b      	ldrb	r3, [r3, #0]
 800e11c:	7d3a      	ldrb	r2, [r7, #20]
 800e11e:	429a      	cmp	r2, r3
 800e120:	d10e      	bne.n	800e140 <dir_find+0x106>
 800e122:	693b      	ldr	r3, [r7, #16]
 800e124:	691a      	ldr	r2, [r3, #16]
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	6a1b      	ldr	r3, [r3, #32]
 800e12a:	4619      	mov	r1, r3
 800e12c:	4610      	mov	r0, r2
 800e12e:	f7ff fdfd 	bl	800dd2c <cmp_lfn>
 800e132:	4603      	mov	r3, r0
 800e134:	2b00      	cmp	r3, #0
 800e136:	d003      	beq.n	800e140 <dir_find+0x106>
 800e138:	7d7b      	ldrb	r3, [r7, #21]
 800e13a:	3b01      	subs	r3, #1
 800e13c:	b2db      	uxtb	r3, r3
 800e13e:	e000      	b.n	800e142 <dir_find+0x108>
 800e140:	23ff      	movs	r3, #255	; 0xff
 800e142:	757b      	strb	r3, [r7, #21]
 800e144:	e024      	b.n	800e190 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e146:	7d7b      	ldrb	r3, [r7, #21]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d109      	bne.n	800e160 <dir_find+0x126>
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	6a1b      	ldr	r3, [r3, #32]
 800e150:	4618      	mov	r0, r3
 800e152:	f7ff ff51 	bl	800dff8 <sum_sfn>
 800e156:	4603      	mov	r3, r0
 800e158:	461a      	mov	r2, r3
 800e15a:	7d3b      	ldrb	r3, [r7, #20]
 800e15c:	4293      	cmp	r3, r2
 800e15e:	d024      	beq.n	800e1aa <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e166:	f003 0301 	and.w	r3, r3, #1
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d10a      	bne.n	800e184 <dir_find+0x14a>
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	6a18      	ldr	r0, [r3, #32]
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	3324      	adds	r3, #36	; 0x24
 800e176:	220b      	movs	r2, #11
 800e178:	4619      	mov	r1, r3
 800e17a:	f7fe fded 	bl	800cd58 <mem_cmp>
 800e17e:	4603      	mov	r3, r0
 800e180:	2b00      	cmp	r3, #0
 800e182:	d014      	beq.n	800e1ae <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e184:	23ff      	movs	r3, #255	; 0xff
 800e186:	757b      	strb	r3, [r7, #21]
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	f04f 32ff 	mov.w	r2, #4294967295
 800e18e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e190:	2100      	movs	r1, #0
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f7ff fc6d 	bl	800da72 <dir_next>
 800e198:	4603      	mov	r3, r0
 800e19a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e19c:	7dfb      	ldrb	r3, [r7, #23]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	f43f af65 	beq.w	800e06e <dir_find+0x34>
 800e1a4:	e004      	b.n	800e1b0 <dir_find+0x176>
		if (res != FR_OK) break;
 800e1a6:	bf00      	nop
 800e1a8:	e002      	b.n	800e1b0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e1aa:	bf00      	nop
 800e1ac:	e000      	b.n	800e1b0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e1ae:	bf00      	nop

	return res;
 800e1b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	3718      	adds	r7, #24
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd80      	pop	{r7, pc}
	...

0800e1bc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b08c      	sub	sp, #48	; 0x30
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e1d0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d001      	beq.n	800e1dc <dir_register+0x20>
 800e1d8:	2306      	movs	r3, #6
 800e1da:	e0e0      	b.n	800e39e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e1dc:	2300      	movs	r3, #0
 800e1de:	627b      	str	r3, [r7, #36]	; 0x24
 800e1e0:	e002      	b.n	800e1e8 <dir_register+0x2c>
 800e1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e4:	3301      	adds	r3, #1
 800e1e6:	627b      	str	r3, [r7, #36]	; 0x24
 800e1e8:	69fb      	ldr	r3, [r7, #28]
 800e1ea:	691a      	ldr	r2, [r3, #16]
 800e1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ee:	005b      	lsls	r3, r3, #1
 800e1f0:	4413      	add	r3, r2
 800e1f2:	881b      	ldrh	r3, [r3, #0]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d1f4      	bne.n	800e1e2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800e1fe:	f107 030c 	add.w	r3, r7, #12
 800e202:	220c      	movs	r2, #12
 800e204:	4618      	mov	r0, r3
 800e206:	f7fe fd6b 	bl	800cce0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e20a:	7dfb      	ldrb	r3, [r7, #23]
 800e20c:	f003 0301 	and.w	r3, r3, #1
 800e210:	2b00      	cmp	r3, #0
 800e212:	d032      	beq.n	800e27a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2240      	movs	r2, #64	; 0x40
 800e218:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800e21c:	2301      	movs	r3, #1
 800e21e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e220:	e016      	b.n	800e250 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800e228:	69fb      	ldr	r3, [r7, #28]
 800e22a:	691a      	ldr	r2, [r3, #16]
 800e22c:	f107 010c 	add.w	r1, r7, #12
 800e230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e232:	f7ff fe53 	bl	800dedc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e236:	6878      	ldr	r0, [r7, #4]
 800e238:	f7ff feff 	bl	800e03a <dir_find>
 800e23c:	4603      	mov	r3, r0
 800e23e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800e242:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e246:	2b00      	cmp	r3, #0
 800e248:	d106      	bne.n	800e258 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800e24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e24c:	3301      	adds	r3, #1
 800e24e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e252:	2b63      	cmp	r3, #99	; 0x63
 800e254:	d9e5      	bls.n	800e222 <dir_register+0x66>
 800e256:	e000      	b.n	800e25a <dir_register+0x9e>
			if (res != FR_OK) break;
 800e258:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e25c:	2b64      	cmp	r3, #100	; 0x64
 800e25e:	d101      	bne.n	800e264 <dir_register+0xa8>
 800e260:	2307      	movs	r3, #7
 800e262:	e09c      	b.n	800e39e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e264:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e268:	2b04      	cmp	r3, #4
 800e26a:	d002      	beq.n	800e272 <dir_register+0xb6>
 800e26c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e270:	e095      	b.n	800e39e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e272:	7dfa      	ldrb	r2, [r7, #23]
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e27a:	7dfb      	ldrb	r3, [r7, #23]
 800e27c:	f003 0302 	and.w	r3, r3, #2
 800e280:	2b00      	cmp	r3, #0
 800e282:	d007      	beq.n	800e294 <dir_register+0xd8>
 800e284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e286:	330c      	adds	r3, #12
 800e288:	4a47      	ldr	r2, [pc, #284]	; (800e3a8 <dir_register+0x1ec>)
 800e28a:	fba2 2303 	umull	r2, r3, r2, r3
 800e28e:	089b      	lsrs	r3, r3, #2
 800e290:	3301      	adds	r3, #1
 800e292:	e000      	b.n	800e296 <dir_register+0xda>
 800e294:	2301      	movs	r3, #1
 800e296:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e298:	6a39      	ldr	r1, [r7, #32]
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	f7ff fcbf 	bl	800dc1e <dir_alloc>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e2a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d148      	bne.n	800e340 <dir_register+0x184>
 800e2ae:	6a3b      	ldr	r3, [r7, #32]
 800e2b0:	3b01      	subs	r3, #1
 800e2b2:	623b      	str	r3, [r7, #32]
 800e2b4:	6a3b      	ldr	r3, [r7, #32]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d042      	beq.n	800e340 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	695a      	ldr	r2, [r3, #20]
 800e2be:	6a3b      	ldr	r3, [r7, #32]
 800e2c0:	015b      	lsls	r3, r3, #5
 800e2c2:	1ad3      	subs	r3, r2, r3
 800e2c4:	4619      	mov	r1, r3
 800e2c6:	6878      	ldr	r0, [r7, #4]
 800e2c8:	f7ff fb4a 	bl	800d960 <dir_sdi>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e2d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d132      	bne.n	800e340 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	3324      	adds	r3, #36	; 0x24
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f7ff fe8a 	bl	800dff8 <sum_sfn>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	69db      	ldr	r3, [r3, #28]
 800e2ec:	4619      	mov	r1, r3
 800e2ee:	69f8      	ldr	r0, [r7, #28]
 800e2f0:	f7fe ff56 	bl	800d1a0 <move_window>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800e2fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d11d      	bne.n	800e33e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e302:	69fb      	ldr	r3, [r7, #28]
 800e304:	6918      	ldr	r0, [r3, #16]
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6a19      	ldr	r1, [r3, #32]
 800e30a:	6a3b      	ldr	r3, [r7, #32]
 800e30c:	b2da      	uxtb	r2, r3
 800e30e:	7efb      	ldrb	r3, [r7, #27]
 800e310:	f7ff fd7c 	bl	800de0c <put_lfn>
				fs->wflag = 1;
 800e314:	69fb      	ldr	r3, [r7, #28]
 800e316:	2201      	movs	r2, #1
 800e318:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e31a:	2100      	movs	r1, #0
 800e31c:	6878      	ldr	r0, [r7, #4]
 800e31e:	f7ff fba8 	bl	800da72 <dir_next>
 800e322:	4603      	mov	r3, r0
 800e324:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800e328:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d107      	bne.n	800e340 <dir_register+0x184>
 800e330:	6a3b      	ldr	r3, [r7, #32]
 800e332:	3b01      	subs	r3, #1
 800e334:	623b      	str	r3, [r7, #32]
 800e336:	6a3b      	ldr	r3, [r7, #32]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d1d5      	bne.n	800e2e8 <dir_register+0x12c>
 800e33c:	e000      	b.n	800e340 <dir_register+0x184>
				if (res != FR_OK) break;
 800e33e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e340:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e344:	2b00      	cmp	r3, #0
 800e346:	d128      	bne.n	800e39a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	69db      	ldr	r3, [r3, #28]
 800e34c:	4619      	mov	r1, r3
 800e34e:	69f8      	ldr	r0, [r7, #28]
 800e350:	f7fe ff26 	bl	800d1a0 <move_window>
 800e354:	4603      	mov	r3, r0
 800e356:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e35a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d11b      	bne.n	800e39a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	6a1b      	ldr	r3, [r3, #32]
 800e366:	2220      	movs	r2, #32
 800e368:	2100      	movs	r1, #0
 800e36a:	4618      	mov	r0, r3
 800e36c:	f7fe fcd9 	bl	800cd22 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	6a18      	ldr	r0, [r3, #32]
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	3324      	adds	r3, #36	; 0x24
 800e378:	220b      	movs	r2, #11
 800e37a:	4619      	mov	r1, r3
 800e37c:	f7fe fcb0 	bl	800cce0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	6a1b      	ldr	r3, [r3, #32]
 800e38a:	330c      	adds	r3, #12
 800e38c:	f002 0218 	and.w	r2, r2, #24
 800e390:	b2d2      	uxtb	r2, r2
 800e392:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800e394:	69fb      	ldr	r3, [r7, #28]
 800e396:	2201      	movs	r2, #1
 800e398:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e39a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e39e:	4618      	mov	r0, r3
 800e3a0:	3730      	adds	r7, #48	; 0x30
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	bd80      	pop	{r7, pc}
 800e3a6:	bf00      	nop
 800e3a8:	4ec4ec4f 	.word	0x4ec4ec4f

0800e3ac <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b08a      	sub	sp, #40	; 0x28
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
 800e3b4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	613b      	str	r3, [r7, #16]
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	691b      	ldr	r3, [r3, #16]
 800e3c2:	60fb      	str	r3, [r7, #12]
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	617b      	str	r3, [r7, #20]
 800e3c8:	697b      	ldr	r3, [r7, #20]
 800e3ca:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e3cc:	69bb      	ldr	r3, [r7, #24]
 800e3ce:	1c5a      	adds	r2, r3, #1
 800e3d0:	61ba      	str	r2, [r7, #24]
 800e3d2:	693a      	ldr	r2, [r7, #16]
 800e3d4:	4413      	add	r3, r2
 800e3d6:	781b      	ldrb	r3, [r3, #0]
 800e3d8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800e3da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e3dc:	2b1f      	cmp	r3, #31
 800e3de:	d940      	bls.n	800e462 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e3e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e3e2:	2b2f      	cmp	r3, #47	; 0x2f
 800e3e4:	d006      	beq.n	800e3f4 <create_name+0x48>
 800e3e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e3e8:	2b5c      	cmp	r3, #92	; 0x5c
 800e3ea:	d110      	bne.n	800e40e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e3ec:	e002      	b.n	800e3f4 <create_name+0x48>
 800e3ee:	69bb      	ldr	r3, [r7, #24]
 800e3f0:	3301      	adds	r3, #1
 800e3f2:	61bb      	str	r3, [r7, #24]
 800e3f4:	693a      	ldr	r2, [r7, #16]
 800e3f6:	69bb      	ldr	r3, [r7, #24]
 800e3f8:	4413      	add	r3, r2
 800e3fa:	781b      	ldrb	r3, [r3, #0]
 800e3fc:	2b2f      	cmp	r3, #47	; 0x2f
 800e3fe:	d0f6      	beq.n	800e3ee <create_name+0x42>
 800e400:	693a      	ldr	r2, [r7, #16]
 800e402:	69bb      	ldr	r3, [r7, #24]
 800e404:	4413      	add	r3, r2
 800e406:	781b      	ldrb	r3, [r3, #0]
 800e408:	2b5c      	cmp	r3, #92	; 0x5c
 800e40a:	d0f0      	beq.n	800e3ee <create_name+0x42>
			break;
 800e40c:	e02a      	b.n	800e464 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e40e:	697b      	ldr	r3, [r7, #20]
 800e410:	2bfe      	cmp	r3, #254	; 0xfe
 800e412:	d901      	bls.n	800e418 <create_name+0x6c>
 800e414:	2306      	movs	r3, #6
 800e416:	e17d      	b.n	800e714 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e418:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e41a:	b2db      	uxtb	r3, r3
 800e41c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e41e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e420:	2101      	movs	r1, #1
 800e422:	4618      	mov	r0, r3
 800e424:	f001 fcbc 	bl	800fda0 <ff_convert>
 800e428:	4603      	mov	r3, r0
 800e42a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e42c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d101      	bne.n	800e436 <create_name+0x8a>
 800e432:	2306      	movs	r3, #6
 800e434:	e16e      	b.n	800e714 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800e436:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e438:	2b7f      	cmp	r3, #127	; 0x7f
 800e43a:	d809      	bhi.n	800e450 <create_name+0xa4>
 800e43c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e43e:	4619      	mov	r1, r3
 800e440:	488d      	ldr	r0, [pc, #564]	; (800e678 <create_name+0x2cc>)
 800e442:	f7fe fcb0 	bl	800cda6 <chk_chr>
 800e446:	4603      	mov	r3, r0
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d001      	beq.n	800e450 <create_name+0xa4>
 800e44c:	2306      	movs	r3, #6
 800e44e:	e161      	b.n	800e714 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800e450:	697b      	ldr	r3, [r7, #20]
 800e452:	1c5a      	adds	r2, r3, #1
 800e454:	617a      	str	r2, [r7, #20]
 800e456:	005b      	lsls	r3, r3, #1
 800e458:	68fa      	ldr	r2, [r7, #12]
 800e45a:	4413      	add	r3, r2
 800e45c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e45e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e460:	e7b4      	b.n	800e3cc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800e462:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e464:	693a      	ldr	r2, [r7, #16]
 800e466:	69bb      	ldr	r3, [r7, #24]
 800e468:	441a      	add	r2, r3
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e46e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e470:	2b1f      	cmp	r3, #31
 800e472:	d801      	bhi.n	800e478 <create_name+0xcc>
 800e474:	2304      	movs	r3, #4
 800e476:	e000      	b.n	800e47a <create_name+0xce>
 800e478:	2300      	movs	r3, #0
 800e47a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e47e:	e011      	b.n	800e4a4 <create_name+0xf8>
		w = lfn[di - 1];
 800e480:	697b      	ldr	r3, [r7, #20]
 800e482:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e486:	3b01      	subs	r3, #1
 800e488:	005b      	lsls	r3, r3, #1
 800e48a:	68fa      	ldr	r2, [r7, #12]
 800e48c:	4413      	add	r3, r2
 800e48e:	881b      	ldrh	r3, [r3, #0]
 800e490:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800e492:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e494:	2b20      	cmp	r3, #32
 800e496:	d002      	beq.n	800e49e <create_name+0xf2>
 800e498:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e49a:	2b2e      	cmp	r3, #46	; 0x2e
 800e49c:	d106      	bne.n	800e4ac <create_name+0x100>
		di--;
 800e49e:	697b      	ldr	r3, [r7, #20]
 800e4a0:	3b01      	subs	r3, #1
 800e4a2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e4a4:	697b      	ldr	r3, [r7, #20]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d1ea      	bne.n	800e480 <create_name+0xd4>
 800e4aa:	e000      	b.n	800e4ae <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800e4ac:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800e4ae:	697b      	ldr	r3, [r7, #20]
 800e4b0:	005b      	lsls	r3, r3, #1
 800e4b2:	68fa      	ldr	r2, [r7, #12]
 800e4b4:	4413      	add	r3, r2
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e4ba:	697b      	ldr	r3, [r7, #20]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d101      	bne.n	800e4c4 <create_name+0x118>
 800e4c0:	2306      	movs	r3, #6
 800e4c2:	e127      	b.n	800e714 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	3324      	adds	r3, #36	; 0x24
 800e4c8:	220b      	movs	r2, #11
 800e4ca:	2120      	movs	r1, #32
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f7fe fc28 	bl	800cd22 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	61bb      	str	r3, [r7, #24]
 800e4d6:	e002      	b.n	800e4de <create_name+0x132>
 800e4d8:	69bb      	ldr	r3, [r7, #24]
 800e4da:	3301      	adds	r3, #1
 800e4dc:	61bb      	str	r3, [r7, #24]
 800e4de:	69bb      	ldr	r3, [r7, #24]
 800e4e0:	005b      	lsls	r3, r3, #1
 800e4e2:	68fa      	ldr	r2, [r7, #12]
 800e4e4:	4413      	add	r3, r2
 800e4e6:	881b      	ldrh	r3, [r3, #0]
 800e4e8:	2b20      	cmp	r3, #32
 800e4ea:	d0f5      	beq.n	800e4d8 <create_name+0x12c>
 800e4ec:	69bb      	ldr	r3, [r7, #24]
 800e4ee:	005b      	lsls	r3, r3, #1
 800e4f0:	68fa      	ldr	r2, [r7, #12]
 800e4f2:	4413      	add	r3, r2
 800e4f4:	881b      	ldrh	r3, [r3, #0]
 800e4f6:	2b2e      	cmp	r3, #46	; 0x2e
 800e4f8:	d0ee      	beq.n	800e4d8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e4fa:	69bb      	ldr	r3, [r7, #24]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d009      	beq.n	800e514 <create_name+0x168>
 800e500:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e504:	f043 0303 	orr.w	r3, r3, #3
 800e508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e50c:	e002      	b.n	800e514 <create_name+0x168>
 800e50e:	697b      	ldr	r3, [r7, #20]
 800e510:	3b01      	subs	r3, #1
 800e512:	617b      	str	r3, [r7, #20]
 800e514:	697b      	ldr	r3, [r7, #20]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d009      	beq.n	800e52e <create_name+0x182>
 800e51a:	697b      	ldr	r3, [r7, #20]
 800e51c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e520:	3b01      	subs	r3, #1
 800e522:	005b      	lsls	r3, r3, #1
 800e524:	68fa      	ldr	r2, [r7, #12]
 800e526:	4413      	add	r3, r2
 800e528:	881b      	ldrh	r3, [r3, #0]
 800e52a:	2b2e      	cmp	r3, #46	; 0x2e
 800e52c:	d1ef      	bne.n	800e50e <create_name+0x162>

	i = b = 0; ni = 8;
 800e52e:	2300      	movs	r3, #0
 800e530:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e534:	2300      	movs	r3, #0
 800e536:	623b      	str	r3, [r7, #32]
 800e538:	2308      	movs	r3, #8
 800e53a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e53c:	69bb      	ldr	r3, [r7, #24]
 800e53e:	1c5a      	adds	r2, r3, #1
 800e540:	61ba      	str	r2, [r7, #24]
 800e542:	005b      	lsls	r3, r3, #1
 800e544:	68fa      	ldr	r2, [r7, #12]
 800e546:	4413      	add	r3, r2
 800e548:	881b      	ldrh	r3, [r3, #0]
 800e54a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e54c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e54e:	2b00      	cmp	r3, #0
 800e550:	f000 8090 	beq.w	800e674 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e554:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e556:	2b20      	cmp	r3, #32
 800e558:	d006      	beq.n	800e568 <create_name+0x1bc>
 800e55a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e55c:	2b2e      	cmp	r3, #46	; 0x2e
 800e55e:	d10a      	bne.n	800e576 <create_name+0x1ca>
 800e560:	69ba      	ldr	r2, [r7, #24]
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	429a      	cmp	r2, r3
 800e566:	d006      	beq.n	800e576 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800e568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e56c:	f043 0303 	orr.w	r3, r3, #3
 800e570:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e574:	e07d      	b.n	800e672 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e576:	6a3a      	ldr	r2, [r7, #32]
 800e578:	69fb      	ldr	r3, [r7, #28]
 800e57a:	429a      	cmp	r2, r3
 800e57c:	d203      	bcs.n	800e586 <create_name+0x1da>
 800e57e:	69ba      	ldr	r2, [r7, #24]
 800e580:	697b      	ldr	r3, [r7, #20]
 800e582:	429a      	cmp	r2, r3
 800e584:	d123      	bne.n	800e5ce <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800e586:	69fb      	ldr	r3, [r7, #28]
 800e588:	2b0b      	cmp	r3, #11
 800e58a:	d106      	bne.n	800e59a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800e58c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e590:	f043 0303 	orr.w	r3, r3, #3
 800e594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e598:	e075      	b.n	800e686 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e59a:	69ba      	ldr	r2, [r7, #24]
 800e59c:	697b      	ldr	r3, [r7, #20]
 800e59e:	429a      	cmp	r2, r3
 800e5a0:	d005      	beq.n	800e5ae <create_name+0x202>
 800e5a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e5a6:	f043 0303 	orr.w	r3, r3, #3
 800e5aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800e5ae:	69ba      	ldr	r2, [r7, #24]
 800e5b0:	697b      	ldr	r3, [r7, #20]
 800e5b2:	429a      	cmp	r2, r3
 800e5b4:	d866      	bhi.n	800e684 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e5b6:	697b      	ldr	r3, [r7, #20]
 800e5b8:	61bb      	str	r3, [r7, #24]
 800e5ba:	2308      	movs	r3, #8
 800e5bc:	623b      	str	r3, [r7, #32]
 800e5be:	230b      	movs	r3, #11
 800e5c0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e5c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e5c6:	009b      	lsls	r3, r3, #2
 800e5c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e5cc:	e051      	b.n	800e672 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e5ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e5d0:	2b7f      	cmp	r3, #127	; 0x7f
 800e5d2:	d914      	bls.n	800e5fe <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e5d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e5d6:	2100      	movs	r1, #0
 800e5d8:	4618      	mov	r0, r3
 800e5da:	f001 fbe1 	bl	800fda0 <ff_convert>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e5e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d004      	beq.n	800e5f2 <create_name+0x246>
 800e5e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e5ea:	3b80      	subs	r3, #128	; 0x80
 800e5ec:	4a23      	ldr	r2, [pc, #140]	; (800e67c <create_name+0x2d0>)
 800e5ee:	5cd3      	ldrb	r3, [r2, r3]
 800e5f0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e5f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e5f6:	f043 0302 	orr.w	r3, r3, #2
 800e5fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e5fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e600:	2b00      	cmp	r3, #0
 800e602:	d007      	beq.n	800e614 <create_name+0x268>
 800e604:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e606:	4619      	mov	r1, r3
 800e608:	481d      	ldr	r0, [pc, #116]	; (800e680 <create_name+0x2d4>)
 800e60a:	f7fe fbcc 	bl	800cda6 <chk_chr>
 800e60e:	4603      	mov	r3, r0
 800e610:	2b00      	cmp	r3, #0
 800e612:	d008      	beq.n	800e626 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e614:	235f      	movs	r3, #95	; 0x5f
 800e616:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e618:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e61c:	f043 0303 	orr.w	r3, r3, #3
 800e620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e624:	e01b      	b.n	800e65e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e626:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e628:	2b40      	cmp	r3, #64	; 0x40
 800e62a:	d909      	bls.n	800e640 <create_name+0x294>
 800e62c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e62e:	2b5a      	cmp	r3, #90	; 0x5a
 800e630:	d806      	bhi.n	800e640 <create_name+0x294>
					b |= 2;
 800e632:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e636:	f043 0302 	orr.w	r3, r3, #2
 800e63a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e63e:	e00e      	b.n	800e65e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e640:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e642:	2b60      	cmp	r3, #96	; 0x60
 800e644:	d90b      	bls.n	800e65e <create_name+0x2b2>
 800e646:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e648:	2b7a      	cmp	r3, #122	; 0x7a
 800e64a:	d808      	bhi.n	800e65e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800e64c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e650:	f043 0301 	orr.w	r3, r3, #1
 800e654:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e658:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e65a:	3b20      	subs	r3, #32
 800e65c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e65e:	6a3b      	ldr	r3, [r7, #32]
 800e660:	1c5a      	adds	r2, r3, #1
 800e662:	623a      	str	r2, [r7, #32]
 800e664:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e666:	b2d1      	uxtb	r1, r2
 800e668:	687a      	ldr	r2, [r7, #4]
 800e66a:	4413      	add	r3, r2
 800e66c:	460a      	mov	r2, r1
 800e66e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800e672:	e763      	b.n	800e53c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800e674:	bf00      	nop
 800e676:	e006      	b.n	800e686 <create_name+0x2da>
 800e678:	08015a64 	.word	0x08015a64
 800e67c:	08015ad4 	.word	0x08015ad4
 800e680:	08015a70 	.word	0x08015a70
			if (si > di) break;			/* No extension */
 800e684:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e68c:	2be5      	cmp	r3, #229	; 0xe5
 800e68e:	d103      	bne.n	800e698 <create_name+0x2ec>
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	2205      	movs	r2, #5
 800e694:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800e698:	69fb      	ldr	r3, [r7, #28]
 800e69a:	2b08      	cmp	r3, #8
 800e69c:	d104      	bne.n	800e6a8 <create_name+0x2fc>
 800e69e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e6a2:	009b      	lsls	r3, r3, #2
 800e6a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e6a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e6ac:	f003 030c 	and.w	r3, r3, #12
 800e6b0:	2b0c      	cmp	r3, #12
 800e6b2:	d005      	beq.n	800e6c0 <create_name+0x314>
 800e6b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e6b8:	f003 0303 	and.w	r3, r3, #3
 800e6bc:	2b03      	cmp	r3, #3
 800e6be:	d105      	bne.n	800e6cc <create_name+0x320>
 800e6c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6c4:	f043 0302 	orr.w	r3, r3, #2
 800e6c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e6cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6d0:	f003 0302 	and.w	r3, r3, #2
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d117      	bne.n	800e708 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e6d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e6dc:	f003 0303 	and.w	r3, r3, #3
 800e6e0:	2b01      	cmp	r3, #1
 800e6e2:	d105      	bne.n	800e6f0 <create_name+0x344>
 800e6e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6e8:	f043 0310 	orr.w	r3, r3, #16
 800e6ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e6f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e6f4:	f003 030c 	and.w	r3, r3, #12
 800e6f8:	2b04      	cmp	r3, #4
 800e6fa:	d105      	bne.n	800e708 <create_name+0x35c>
 800e6fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e700:	f043 0308 	orr.w	r3, r3, #8
 800e704:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e70e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800e712:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800e714:	4618      	mov	r0, r3
 800e716:	3728      	adds	r7, #40	; 0x28
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}

0800e71c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b086      	sub	sp, #24
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
 800e724:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e72a:	693b      	ldr	r3, [r7, #16]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e730:	e002      	b.n	800e738 <follow_path+0x1c>
 800e732:	683b      	ldr	r3, [r7, #0]
 800e734:	3301      	adds	r3, #1
 800e736:	603b      	str	r3, [r7, #0]
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	781b      	ldrb	r3, [r3, #0]
 800e73c:	2b2f      	cmp	r3, #47	; 0x2f
 800e73e:	d0f8      	beq.n	800e732 <follow_path+0x16>
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	781b      	ldrb	r3, [r3, #0]
 800e744:	2b5c      	cmp	r3, #92	; 0x5c
 800e746:	d0f4      	beq.n	800e732 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e748:	693b      	ldr	r3, [r7, #16]
 800e74a:	2200      	movs	r2, #0
 800e74c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e74e:	683b      	ldr	r3, [r7, #0]
 800e750:	781b      	ldrb	r3, [r3, #0]
 800e752:	2b1f      	cmp	r3, #31
 800e754:	d80a      	bhi.n	800e76c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2280      	movs	r2, #128	; 0x80
 800e75a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e75e:	2100      	movs	r1, #0
 800e760:	6878      	ldr	r0, [r7, #4]
 800e762:	f7ff f8fd 	bl	800d960 <dir_sdi>
 800e766:	4603      	mov	r3, r0
 800e768:	75fb      	strb	r3, [r7, #23]
 800e76a:	e048      	b.n	800e7fe <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e76c:	463b      	mov	r3, r7
 800e76e:	4619      	mov	r1, r3
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	f7ff fe1b 	bl	800e3ac <create_name>
 800e776:	4603      	mov	r3, r0
 800e778:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e77a:	7dfb      	ldrb	r3, [r7, #23]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d139      	bne.n	800e7f4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	f7ff fc5a 	bl	800e03a <dir_find>
 800e786:	4603      	mov	r3, r0
 800e788:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e790:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e792:	7dfb      	ldrb	r3, [r7, #23]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d00a      	beq.n	800e7ae <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e798:	7dfb      	ldrb	r3, [r7, #23]
 800e79a:	2b04      	cmp	r3, #4
 800e79c:	d12c      	bne.n	800e7f8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e79e:	7afb      	ldrb	r3, [r7, #11]
 800e7a0:	f003 0304 	and.w	r3, r3, #4
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d127      	bne.n	800e7f8 <follow_path+0xdc>
 800e7a8:	2305      	movs	r3, #5
 800e7aa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e7ac:	e024      	b.n	800e7f8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e7ae:	7afb      	ldrb	r3, [r7, #11]
 800e7b0:	f003 0304 	and.w	r3, r3, #4
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d121      	bne.n	800e7fc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e7b8:	693b      	ldr	r3, [r7, #16]
 800e7ba:	799b      	ldrb	r3, [r3, #6]
 800e7bc:	f003 0310 	and.w	r3, r3, #16
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d102      	bne.n	800e7ca <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e7c4:	2305      	movs	r3, #5
 800e7c6:	75fb      	strb	r3, [r7, #23]
 800e7c8:	e019      	b.n	800e7fe <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	695b      	ldr	r3, [r3, #20]
 800e7d4:	68fa      	ldr	r2, [r7, #12]
 800e7d6:	8992      	ldrh	r2, [r2, #12]
 800e7d8:	fbb3 f0f2 	udiv	r0, r3, r2
 800e7dc:	fb00 f202 	mul.w	r2, r0, r2
 800e7e0:	1a9b      	subs	r3, r3, r2
 800e7e2:	440b      	add	r3, r1
 800e7e4:	4619      	mov	r1, r3
 800e7e6:	68f8      	ldr	r0, [r7, #12]
 800e7e8:	f7ff fa60 	bl	800dcac <ld_clust>
 800e7ec:	4602      	mov	r2, r0
 800e7ee:	693b      	ldr	r3, [r7, #16]
 800e7f0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e7f2:	e7bb      	b.n	800e76c <follow_path+0x50>
			if (res != FR_OK) break;
 800e7f4:	bf00      	nop
 800e7f6:	e002      	b.n	800e7fe <follow_path+0xe2>
				break;
 800e7f8:	bf00      	nop
 800e7fa:	e000      	b.n	800e7fe <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e7fc:	bf00      	nop
			}
		}
	}

	return res;
 800e7fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800e800:	4618      	mov	r0, r3
 800e802:	3718      	adds	r7, #24
 800e804:	46bd      	mov	sp, r7
 800e806:	bd80      	pop	{r7, pc}

0800e808 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e808:	b480      	push	{r7}
 800e80a:	b087      	sub	sp, #28
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e810:	f04f 33ff 	mov.w	r3, #4294967295
 800e814:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d031      	beq.n	800e882 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	617b      	str	r3, [r7, #20]
 800e824:	e002      	b.n	800e82c <get_ldnumber+0x24>
 800e826:	697b      	ldr	r3, [r7, #20]
 800e828:	3301      	adds	r3, #1
 800e82a:	617b      	str	r3, [r7, #20]
 800e82c:	697b      	ldr	r3, [r7, #20]
 800e82e:	781b      	ldrb	r3, [r3, #0]
 800e830:	2b1f      	cmp	r3, #31
 800e832:	d903      	bls.n	800e83c <get_ldnumber+0x34>
 800e834:	697b      	ldr	r3, [r7, #20]
 800e836:	781b      	ldrb	r3, [r3, #0]
 800e838:	2b3a      	cmp	r3, #58	; 0x3a
 800e83a:	d1f4      	bne.n	800e826 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e83c:	697b      	ldr	r3, [r7, #20]
 800e83e:	781b      	ldrb	r3, [r3, #0]
 800e840:	2b3a      	cmp	r3, #58	; 0x3a
 800e842:	d11c      	bne.n	800e87e <get_ldnumber+0x76>
			tp = *path;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	1c5a      	adds	r2, r3, #1
 800e84e:	60fa      	str	r2, [r7, #12]
 800e850:	781b      	ldrb	r3, [r3, #0]
 800e852:	3b30      	subs	r3, #48	; 0x30
 800e854:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	2b09      	cmp	r3, #9
 800e85a:	d80e      	bhi.n	800e87a <get_ldnumber+0x72>
 800e85c:	68fa      	ldr	r2, [r7, #12]
 800e85e:	697b      	ldr	r3, [r7, #20]
 800e860:	429a      	cmp	r2, r3
 800e862:	d10a      	bne.n	800e87a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e864:	68bb      	ldr	r3, [r7, #8]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d107      	bne.n	800e87a <get_ldnumber+0x72>
					vol = (int)i;
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e86e:	697b      	ldr	r3, [r7, #20]
 800e870:	3301      	adds	r3, #1
 800e872:	617b      	str	r3, [r7, #20]
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	697a      	ldr	r2, [r7, #20]
 800e878:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e87a:	693b      	ldr	r3, [r7, #16]
 800e87c:	e002      	b.n	800e884 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e87e:	2300      	movs	r3, #0
 800e880:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e882:	693b      	ldr	r3, [r7, #16]
}
 800e884:	4618      	mov	r0, r3
 800e886:	371c      	adds	r7, #28
 800e888:	46bd      	mov	sp, r7
 800e88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88e:	4770      	bx	lr

0800e890 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b082      	sub	sp, #8
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
 800e898:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2200      	movs	r2, #0
 800e89e:	70da      	strb	r2, [r3, #3]
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f04f 32ff 	mov.w	r2, #4294967295
 800e8a6:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e8a8:	6839      	ldr	r1, [r7, #0]
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f7fe fc78 	bl	800d1a0 <move_window>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d001      	beq.n	800e8ba <check_fs+0x2a>
 800e8b6:	2304      	movs	r3, #4
 800e8b8:	e038      	b.n	800e92c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	333c      	adds	r3, #60	; 0x3c
 800e8be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	f7fe f98a 	bl	800cbdc <ld_word>
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	461a      	mov	r2, r3
 800e8cc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e8d0:	429a      	cmp	r2, r3
 800e8d2:	d001      	beq.n	800e8d8 <check_fs+0x48>
 800e8d4:	2303      	movs	r3, #3
 800e8d6:	e029      	b.n	800e92c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e8de:	2be9      	cmp	r3, #233	; 0xe9
 800e8e0:	d009      	beq.n	800e8f6 <check_fs+0x66>
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e8e8:	2beb      	cmp	r3, #235	; 0xeb
 800e8ea:	d11e      	bne.n	800e92a <check_fs+0x9a>
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e8f2:	2b90      	cmp	r3, #144	; 0x90
 800e8f4:	d119      	bne.n	800e92a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	333c      	adds	r3, #60	; 0x3c
 800e8fa:	3336      	adds	r3, #54	; 0x36
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	f7fe f985 	bl	800cc0c <ld_dword>
 800e902:	4603      	mov	r3, r0
 800e904:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e908:	4a0a      	ldr	r2, [pc, #40]	; (800e934 <check_fs+0xa4>)
 800e90a:	4293      	cmp	r3, r2
 800e90c:	d101      	bne.n	800e912 <check_fs+0x82>
 800e90e:	2300      	movs	r3, #0
 800e910:	e00c      	b.n	800e92c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	333c      	adds	r3, #60	; 0x3c
 800e916:	3352      	adds	r3, #82	; 0x52
 800e918:	4618      	mov	r0, r3
 800e91a:	f7fe f977 	bl	800cc0c <ld_dword>
 800e91e:	4603      	mov	r3, r0
 800e920:	4a05      	ldr	r2, [pc, #20]	; (800e938 <check_fs+0xa8>)
 800e922:	4293      	cmp	r3, r2
 800e924:	d101      	bne.n	800e92a <check_fs+0x9a>
 800e926:	2300      	movs	r3, #0
 800e928:	e000      	b.n	800e92c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e92a:	2302      	movs	r3, #2
}
 800e92c:	4618      	mov	r0, r3
 800e92e:	3708      	adds	r7, #8
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}
 800e934:	00544146 	.word	0x00544146
 800e938:	33544146 	.word	0x33544146

0800e93c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b096      	sub	sp, #88	; 0x58
 800e940:	af00      	add	r7, sp, #0
 800e942:	60f8      	str	r0, [r7, #12]
 800e944:	60b9      	str	r1, [r7, #8]
 800e946:	4613      	mov	r3, r2
 800e948:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e94a:	68bb      	ldr	r3, [r7, #8]
 800e94c:	2200      	movs	r2, #0
 800e94e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e950:	68f8      	ldr	r0, [r7, #12]
 800e952:	f7ff ff59 	bl	800e808 <get_ldnumber>
 800e956:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	da01      	bge.n	800e962 <find_volume+0x26>
 800e95e:	230b      	movs	r3, #11
 800e960:	e26a      	b.n	800ee38 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e962:	4aa3      	ldr	r2, [pc, #652]	; (800ebf0 <find_volume+0x2b4>)
 800e964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e96a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d101      	bne.n	800e976 <find_volume+0x3a>
 800e972:	230c      	movs	r3, #12
 800e974:	e260      	b.n	800ee38 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 800e976:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e978:	f7fe fa30 	bl	800cddc <lock_fs>
 800e97c:	4603      	mov	r3, r0
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d101      	bne.n	800e986 <find_volume+0x4a>
 800e982:	230f      	movs	r3, #15
 800e984:	e258      	b.n	800ee38 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 800e986:	68bb      	ldr	r3, [r7, #8]
 800e988:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e98a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e98c:	79fb      	ldrb	r3, [r7, #7]
 800e98e:	f023 0301 	bic.w	r3, r3, #1
 800e992:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e996:	781b      	ldrb	r3, [r3, #0]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d01a      	beq.n	800e9d2 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800e99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e99e:	785b      	ldrb	r3, [r3, #1]
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	f7fe f87d 	bl	800caa0 <disk_status>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e9ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e9b0:	f003 0301 	and.w	r3, r3, #1
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d10c      	bne.n	800e9d2 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e9b8:	79fb      	ldrb	r3, [r7, #7]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d007      	beq.n	800e9ce <find_volume+0x92>
 800e9be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e9c2:	f003 0304 	and.w	r3, r3, #4
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d001      	beq.n	800e9ce <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800e9ca:	230a      	movs	r3, #10
 800e9cc:	e234      	b.n	800ee38 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	e232      	b.n	800ee38 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e9d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9da:	b2da      	uxtb	r2, r3
 800e9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9de:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9e2:	785b      	ldrb	r3, [r3, #1]
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	f7fe f875 	bl	800cad4 <disk_initialize>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e9f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e9f4:	f003 0301 	and.w	r3, r3, #1
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d001      	beq.n	800ea00 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e9fc:	2303      	movs	r3, #3
 800e9fe:	e21b      	b.n	800ee38 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ea00:	79fb      	ldrb	r3, [r7, #7]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d007      	beq.n	800ea16 <find_volume+0xda>
 800ea06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ea0a:	f003 0304 	and.w	r3, r3, #4
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d001      	beq.n	800ea16 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800ea12:	230a      	movs	r3, #10
 800ea14:	e210      	b.n	800ee38 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800ea16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea18:	7858      	ldrb	r0, [r3, #1]
 800ea1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea1c:	330c      	adds	r3, #12
 800ea1e:	461a      	mov	r2, r3
 800ea20:	2102      	movs	r1, #2
 800ea22:	f7fe f8bd 	bl	800cba0 <disk_ioctl>
 800ea26:	4603      	mov	r3, r0
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d001      	beq.n	800ea30 <find_volume+0xf4>
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	e203      	b.n	800ee38 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800ea30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea32:	899b      	ldrh	r3, [r3, #12]
 800ea34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea38:	d80d      	bhi.n	800ea56 <find_volume+0x11a>
 800ea3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea3c:	899b      	ldrh	r3, [r3, #12]
 800ea3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea42:	d308      	bcc.n	800ea56 <find_volume+0x11a>
 800ea44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea46:	899b      	ldrh	r3, [r3, #12]
 800ea48:	461a      	mov	r2, r3
 800ea4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea4c:	899b      	ldrh	r3, [r3, #12]
 800ea4e:	3b01      	subs	r3, #1
 800ea50:	4013      	ands	r3, r2
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d001      	beq.n	800ea5a <find_volume+0x11e>
 800ea56:	2301      	movs	r3, #1
 800ea58:	e1ee      	b.n	800ee38 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ea5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ea60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ea62:	f7ff ff15 	bl	800e890 <check_fs>
 800ea66:	4603      	mov	r3, r0
 800ea68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ea6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ea70:	2b02      	cmp	r3, #2
 800ea72:	d149      	bne.n	800eb08 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ea74:	2300      	movs	r3, #0
 800ea76:	643b      	str	r3, [r7, #64]	; 0x40
 800ea78:	e01e      	b.n	800eab8 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ea7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea7c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800ea80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea82:	011b      	lsls	r3, r3, #4
 800ea84:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ea88:	4413      	add	r3, r2
 800ea8a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ea8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea8e:	3304      	adds	r3, #4
 800ea90:	781b      	ldrb	r3, [r3, #0]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d006      	beq.n	800eaa4 <find_volume+0x168>
 800ea96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea98:	3308      	adds	r3, #8
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	f7fe f8b6 	bl	800cc0c <ld_dword>
 800eaa0:	4602      	mov	r2, r0
 800eaa2:	e000      	b.n	800eaa6 <find_volume+0x16a>
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eaa8:	009b      	lsls	r3, r3, #2
 800eaaa:	3358      	adds	r3, #88	; 0x58
 800eaac:	443b      	add	r3, r7
 800eaae:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800eab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eab4:	3301      	adds	r3, #1
 800eab6:	643b      	str	r3, [r7, #64]	; 0x40
 800eab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eaba:	2b03      	cmp	r3, #3
 800eabc:	d9dd      	bls.n	800ea7a <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800eabe:	2300      	movs	r3, #0
 800eac0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800eac2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d002      	beq.n	800eace <find_volume+0x192>
 800eac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eaca:	3b01      	subs	r3, #1
 800eacc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800eace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ead0:	009b      	lsls	r3, r3, #2
 800ead2:	3358      	adds	r3, #88	; 0x58
 800ead4:	443b      	add	r3, r7
 800ead6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800eada:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800eadc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d005      	beq.n	800eaee <find_volume+0x1b2>
 800eae2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800eae4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800eae6:	f7ff fed3 	bl	800e890 <check_fs>
 800eaea:	4603      	mov	r3, r0
 800eaec:	e000      	b.n	800eaf0 <find_volume+0x1b4>
 800eaee:	2303      	movs	r3, #3
 800eaf0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800eaf4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eaf8:	2b01      	cmp	r3, #1
 800eafa:	d905      	bls.n	800eb08 <find_volume+0x1cc>
 800eafc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eafe:	3301      	adds	r3, #1
 800eb00:	643b      	str	r3, [r7, #64]	; 0x40
 800eb02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb04:	2b03      	cmp	r3, #3
 800eb06:	d9e2      	bls.n	800eace <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800eb08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eb0c:	2b04      	cmp	r3, #4
 800eb0e:	d101      	bne.n	800eb14 <find_volume+0x1d8>
 800eb10:	2301      	movs	r3, #1
 800eb12:	e191      	b.n	800ee38 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800eb14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eb18:	2b01      	cmp	r3, #1
 800eb1a:	d901      	bls.n	800eb20 <find_volume+0x1e4>
 800eb1c:	230d      	movs	r3, #13
 800eb1e:	e18b      	b.n	800ee38 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800eb20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb22:	333c      	adds	r3, #60	; 0x3c
 800eb24:	330b      	adds	r3, #11
 800eb26:	4618      	mov	r0, r3
 800eb28:	f7fe f858 	bl	800cbdc <ld_word>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	461a      	mov	r2, r3
 800eb30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb32:	899b      	ldrh	r3, [r3, #12]
 800eb34:	429a      	cmp	r2, r3
 800eb36:	d001      	beq.n	800eb3c <find_volume+0x200>
 800eb38:	230d      	movs	r3, #13
 800eb3a:	e17d      	b.n	800ee38 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800eb3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb3e:	333c      	adds	r3, #60	; 0x3c
 800eb40:	3316      	adds	r3, #22
 800eb42:	4618      	mov	r0, r3
 800eb44:	f7fe f84a 	bl	800cbdc <ld_word>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800eb4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d106      	bne.n	800eb60 <find_volume+0x224>
 800eb52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb54:	333c      	adds	r3, #60	; 0x3c
 800eb56:	3324      	adds	r3, #36	; 0x24
 800eb58:	4618      	mov	r0, r3
 800eb5a:	f7fe f857 	bl	800cc0c <ld_dword>
 800eb5e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800eb60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800eb64:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800eb66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb68:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800eb6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb6e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800eb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb72:	789b      	ldrb	r3, [r3, #2]
 800eb74:	2b01      	cmp	r3, #1
 800eb76:	d005      	beq.n	800eb84 <find_volume+0x248>
 800eb78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb7a:	789b      	ldrb	r3, [r3, #2]
 800eb7c:	2b02      	cmp	r3, #2
 800eb7e:	d001      	beq.n	800eb84 <find_volume+0x248>
 800eb80:	230d      	movs	r3, #13
 800eb82:	e159      	b.n	800ee38 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800eb84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb86:	789b      	ldrb	r3, [r3, #2]
 800eb88:	461a      	mov	r2, r3
 800eb8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb8c:	fb02 f303 	mul.w	r3, r2, r3
 800eb90:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800eb92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb94:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800eb98:	b29a      	uxth	r2, r3
 800eb9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb9c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800eb9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eba0:	895b      	ldrh	r3, [r3, #10]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d008      	beq.n	800ebb8 <find_volume+0x27c>
 800eba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eba8:	895b      	ldrh	r3, [r3, #10]
 800ebaa:	461a      	mov	r2, r3
 800ebac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebae:	895b      	ldrh	r3, [r3, #10]
 800ebb0:	3b01      	subs	r3, #1
 800ebb2:	4013      	ands	r3, r2
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d001      	beq.n	800ebbc <find_volume+0x280>
 800ebb8:	230d      	movs	r3, #13
 800ebba:	e13d      	b.n	800ee38 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ebbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebbe:	333c      	adds	r3, #60	; 0x3c
 800ebc0:	3311      	adds	r3, #17
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f7fe f80a 	bl	800cbdc <ld_word>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	461a      	mov	r2, r3
 800ebcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebce:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ebd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebd2:	891b      	ldrh	r3, [r3, #8]
 800ebd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ebd6:	8992      	ldrh	r2, [r2, #12]
 800ebd8:	0952      	lsrs	r2, r2, #5
 800ebda:	b292      	uxth	r2, r2
 800ebdc:	fbb3 f1f2 	udiv	r1, r3, r2
 800ebe0:	fb01 f202 	mul.w	r2, r1, r2
 800ebe4:	1a9b      	subs	r3, r3, r2
 800ebe6:	b29b      	uxth	r3, r3
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d003      	beq.n	800ebf4 <find_volume+0x2b8>
 800ebec:	230d      	movs	r3, #13
 800ebee:	e123      	b.n	800ee38 <find_volume+0x4fc>
 800ebf0:	20002a6c 	.word	0x20002a6c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ebf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebf6:	333c      	adds	r3, #60	; 0x3c
 800ebf8:	3313      	adds	r3, #19
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f7fd ffee 	bl	800cbdc <ld_word>
 800ec00:	4603      	mov	r3, r0
 800ec02:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ec04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d106      	bne.n	800ec18 <find_volume+0x2dc>
 800ec0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec0c:	333c      	adds	r3, #60	; 0x3c
 800ec0e:	3320      	adds	r3, #32
 800ec10:	4618      	mov	r0, r3
 800ec12:	f7fd fffb 	bl	800cc0c <ld_dword>
 800ec16:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ec18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec1a:	333c      	adds	r3, #60	; 0x3c
 800ec1c:	330e      	adds	r3, #14
 800ec1e:	4618      	mov	r0, r3
 800ec20:	f7fd ffdc 	bl	800cbdc <ld_word>
 800ec24:	4603      	mov	r3, r0
 800ec26:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ec28:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d101      	bne.n	800ec32 <find_volume+0x2f6>
 800ec2e:	230d      	movs	r3, #13
 800ec30:	e102      	b.n	800ee38 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ec32:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ec34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec36:	4413      	add	r3, r2
 800ec38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec3a:	8911      	ldrh	r1, [r2, #8]
 800ec3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec3e:	8992      	ldrh	r2, [r2, #12]
 800ec40:	0952      	lsrs	r2, r2, #5
 800ec42:	b292      	uxth	r2, r2
 800ec44:	fbb1 f2f2 	udiv	r2, r1, r2
 800ec48:	b292      	uxth	r2, r2
 800ec4a:	4413      	add	r3, r2
 800ec4c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ec4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ec50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec52:	429a      	cmp	r2, r3
 800ec54:	d201      	bcs.n	800ec5a <find_volume+0x31e>
 800ec56:	230d      	movs	r3, #13
 800ec58:	e0ee      	b.n	800ee38 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ec5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ec5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec5e:	1ad3      	subs	r3, r2, r3
 800ec60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec62:	8952      	ldrh	r2, [r2, #10]
 800ec64:	fbb3 f3f2 	udiv	r3, r3, r2
 800ec68:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ec6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d101      	bne.n	800ec74 <find_volume+0x338>
 800ec70:	230d      	movs	r3, #13
 800ec72:	e0e1      	b.n	800ee38 <find_volume+0x4fc>
		fmt = FS_FAT32;
 800ec74:	2303      	movs	r3, #3
 800ec76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ec7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec7c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ec80:	4293      	cmp	r3, r2
 800ec82:	d802      	bhi.n	800ec8a <find_volume+0x34e>
 800ec84:	2302      	movs	r3, #2
 800ec86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ec8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec8c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ec90:	4293      	cmp	r3, r2
 800ec92:	d802      	bhi.n	800ec9a <find_volume+0x35e>
 800ec94:	2301      	movs	r3, #1
 800ec96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ec9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec9c:	1c9a      	adds	r2, r3, #2
 800ec9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eca0:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800eca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eca4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eca6:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800eca8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ecaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecac:	441a      	add	r2, r3
 800ecae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecb0:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800ecb2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ecb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecb6:	441a      	add	r2, r3
 800ecb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecba:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800ecbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ecc0:	2b03      	cmp	r3, #3
 800ecc2:	d11e      	bne.n	800ed02 <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ecc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecc6:	333c      	adds	r3, #60	; 0x3c
 800ecc8:	332a      	adds	r3, #42	; 0x2a
 800ecca:	4618      	mov	r0, r3
 800eccc:	f7fd ff86 	bl	800cbdc <ld_word>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d001      	beq.n	800ecda <find_volume+0x39e>
 800ecd6:	230d      	movs	r3, #13
 800ecd8:	e0ae      	b.n	800ee38 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ecda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecdc:	891b      	ldrh	r3, [r3, #8]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d001      	beq.n	800ece6 <find_volume+0x3aa>
 800ece2:	230d      	movs	r3, #13
 800ece4:	e0a8      	b.n	800ee38 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ece6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ece8:	333c      	adds	r3, #60	; 0x3c
 800ecea:	332c      	adds	r3, #44	; 0x2c
 800ecec:	4618      	mov	r0, r3
 800ecee:	f7fd ff8d 	bl	800cc0c <ld_dword>
 800ecf2:	4602      	mov	r2, r0
 800ecf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecf6:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ecf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecfa:	6a1b      	ldr	r3, [r3, #32]
 800ecfc:	009b      	lsls	r3, r3, #2
 800ecfe:	647b      	str	r3, [r7, #68]	; 0x44
 800ed00:	e01f      	b.n	800ed42 <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ed02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed04:	891b      	ldrh	r3, [r3, #8]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d101      	bne.n	800ed0e <find_volume+0x3d2>
 800ed0a:	230d      	movs	r3, #13
 800ed0c:	e094      	b.n	800ee38 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ed0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed14:	441a      	add	r2, r3
 800ed16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed18:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ed1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ed1e:	2b02      	cmp	r3, #2
 800ed20:	d103      	bne.n	800ed2a <find_volume+0x3ee>
 800ed22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed24:	6a1b      	ldr	r3, [r3, #32]
 800ed26:	005b      	lsls	r3, r3, #1
 800ed28:	e00a      	b.n	800ed40 <find_volume+0x404>
 800ed2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed2c:	6a1a      	ldr	r2, [r3, #32]
 800ed2e:	4613      	mov	r3, r2
 800ed30:	005b      	lsls	r3, r3, #1
 800ed32:	4413      	add	r3, r2
 800ed34:	085a      	lsrs	r2, r3, #1
 800ed36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed38:	6a1b      	ldr	r3, [r3, #32]
 800ed3a:	f003 0301 	and.w	r3, r3, #1
 800ed3e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ed40:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ed42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed48:	899b      	ldrh	r3, [r3, #12]
 800ed4a:	4619      	mov	r1, r3
 800ed4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed4e:	440b      	add	r3, r1
 800ed50:	3b01      	subs	r3, #1
 800ed52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ed54:	8989      	ldrh	r1, [r1, #12]
 800ed56:	fbb3 f3f1 	udiv	r3, r3, r1
 800ed5a:	429a      	cmp	r2, r3
 800ed5c:	d201      	bcs.n	800ed62 <find_volume+0x426>
 800ed5e:	230d      	movs	r3, #13
 800ed60:	e06a      	b.n	800ee38 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ed62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed64:	f04f 32ff 	mov.w	r2, #4294967295
 800ed68:	61da      	str	r2, [r3, #28]
 800ed6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed6c:	69da      	ldr	r2, [r3, #28]
 800ed6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed70:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800ed72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed74:	2280      	movs	r2, #128	; 0x80
 800ed76:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ed78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ed7c:	2b03      	cmp	r3, #3
 800ed7e:	d149      	bne.n	800ee14 <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ed80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed82:	333c      	adds	r3, #60	; 0x3c
 800ed84:	3330      	adds	r3, #48	; 0x30
 800ed86:	4618      	mov	r0, r3
 800ed88:	f7fd ff28 	bl	800cbdc <ld_word>
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	2b01      	cmp	r3, #1
 800ed90:	d140      	bne.n	800ee14 <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ed92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed94:	3301      	adds	r3, #1
 800ed96:	4619      	mov	r1, r3
 800ed98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ed9a:	f7fe fa01 	bl	800d1a0 <move_window>
 800ed9e:	4603      	mov	r3, r0
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d137      	bne.n	800ee14 <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 800eda4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eda6:	2200      	movs	r2, #0
 800eda8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800edaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edac:	333c      	adds	r3, #60	; 0x3c
 800edae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800edb2:	4618      	mov	r0, r3
 800edb4:	f7fd ff12 	bl	800cbdc <ld_word>
 800edb8:	4603      	mov	r3, r0
 800edba:	461a      	mov	r2, r3
 800edbc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800edc0:	429a      	cmp	r2, r3
 800edc2:	d127      	bne.n	800ee14 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800edc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edc6:	333c      	adds	r3, #60	; 0x3c
 800edc8:	4618      	mov	r0, r3
 800edca:	f7fd ff1f 	bl	800cc0c <ld_dword>
 800edce:	4603      	mov	r3, r0
 800edd0:	4a1b      	ldr	r2, [pc, #108]	; (800ee40 <find_volume+0x504>)
 800edd2:	4293      	cmp	r3, r2
 800edd4:	d11e      	bne.n	800ee14 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800edd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edd8:	333c      	adds	r3, #60	; 0x3c
 800edda:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800edde:	4618      	mov	r0, r3
 800ede0:	f7fd ff14 	bl	800cc0c <ld_dword>
 800ede4:	4603      	mov	r3, r0
 800ede6:	4a17      	ldr	r2, [pc, #92]	; (800ee44 <find_volume+0x508>)
 800ede8:	4293      	cmp	r3, r2
 800edea:	d113      	bne.n	800ee14 <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800edec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edee:	333c      	adds	r3, #60	; 0x3c
 800edf0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800edf4:	4618      	mov	r0, r3
 800edf6:	f7fd ff09 	bl	800cc0c <ld_dword>
 800edfa:	4602      	mov	r2, r0
 800edfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edfe:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ee00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee02:	333c      	adds	r3, #60	; 0x3c
 800ee04:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f7fd feff 	bl	800cc0c <ld_dword>
 800ee0e:	4602      	mov	r2, r0
 800ee10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee12:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ee14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee16:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ee1a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ee1c:	4b0a      	ldr	r3, [pc, #40]	; (800ee48 <find_volume+0x50c>)
 800ee1e:	881b      	ldrh	r3, [r3, #0]
 800ee20:	3301      	adds	r3, #1
 800ee22:	b29a      	uxth	r2, r3
 800ee24:	4b08      	ldr	r3, [pc, #32]	; (800ee48 <find_volume+0x50c>)
 800ee26:	801a      	strh	r2, [r3, #0]
 800ee28:	4b07      	ldr	r3, [pc, #28]	; (800ee48 <find_volume+0x50c>)
 800ee2a:	881a      	ldrh	r2, [r3, #0]
 800ee2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee2e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ee30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ee32:	f7fe f94d 	bl	800d0d0 <clear_lock>
#endif
	return FR_OK;
 800ee36:	2300      	movs	r3, #0
}
 800ee38:	4618      	mov	r0, r3
 800ee3a:	3758      	adds	r7, #88	; 0x58
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}
 800ee40:	41615252 	.word	0x41615252
 800ee44:	61417272 	.word	0x61417272
 800ee48:	20002a70 	.word	0x20002a70

0800ee4c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b084      	sub	sp, #16
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
 800ee54:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ee56:	2309      	movs	r3, #9
 800ee58:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d02e      	beq.n	800eebe <validate+0x72>
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d02a      	beq.n	800eebe <validate+0x72>
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	781b      	ldrb	r3, [r3, #0]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d025      	beq.n	800eebe <validate+0x72>
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	889a      	ldrh	r2, [r3, #4]
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	88db      	ldrh	r3, [r3, #6]
 800ee7c:	429a      	cmp	r2, r3
 800ee7e:	d11e      	bne.n	800eebe <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	4618      	mov	r0, r3
 800ee86:	f7fd ffa9 	bl	800cddc <lock_fs>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d014      	beq.n	800eeba <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	785b      	ldrb	r3, [r3, #1]
 800ee96:	4618      	mov	r0, r3
 800ee98:	f7fd fe02 	bl	800caa0 <disk_status>
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	f003 0301 	and.w	r3, r3, #1
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d102      	bne.n	800eeac <validate+0x60>
				res = FR_OK;
 800eea6:	2300      	movs	r3, #0
 800eea8:	73fb      	strb	r3, [r7, #15]
 800eeaa:	e008      	b.n	800eebe <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	2100      	movs	r1, #0
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f7fd ffa8 	bl	800ce08 <unlock_fs>
 800eeb8:	e001      	b.n	800eebe <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800eeba:	230f      	movs	r3, #15
 800eebc:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800eebe:	7bfb      	ldrb	r3, [r7, #15]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d102      	bne.n	800eeca <validate+0x7e>
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	e000      	b.n	800eecc <validate+0x80>
 800eeca:	2300      	movs	r3, #0
 800eecc:	683a      	ldr	r2, [r7, #0]
 800eece:	6013      	str	r3, [r2, #0]
	return res;
 800eed0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eed2:	4618      	mov	r0, r3
 800eed4:	3710      	adds	r7, #16
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bd80      	pop	{r7, pc}
	...

0800eedc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b088      	sub	sp, #32
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	60f8      	str	r0, [r7, #12]
 800eee4:	60b9      	str	r1, [r7, #8]
 800eee6:	4613      	mov	r3, r2
 800eee8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800eeea:	68bb      	ldr	r3, [r7, #8]
 800eeec:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800eeee:	f107 0310 	add.w	r3, r7, #16
 800eef2:	4618      	mov	r0, r3
 800eef4:	f7ff fc88 	bl	800e808 <get_ldnumber>
 800eef8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800eefa:	69fb      	ldr	r3, [r7, #28]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	da01      	bge.n	800ef04 <f_mount+0x28>
 800ef00:	230b      	movs	r3, #11
 800ef02:	e048      	b.n	800ef96 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ef04:	4a26      	ldr	r2, [pc, #152]	; (800efa0 <f_mount+0xc4>)
 800ef06:	69fb      	ldr	r3, [r7, #28]
 800ef08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef0c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ef0e:	69bb      	ldr	r3, [r7, #24]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d00f      	beq.n	800ef34 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ef14:	69b8      	ldr	r0, [r7, #24]
 800ef16:	f7fe f8db 	bl	800d0d0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800ef1a:	69bb      	ldr	r3, [r7, #24]
 800ef1c:	695b      	ldr	r3, [r3, #20]
 800ef1e:	4618      	mov	r0, r3
 800ef20:	f001 f824 	bl	800ff6c <ff_del_syncobj>
 800ef24:	4603      	mov	r3, r0
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d101      	bne.n	800ef2e <f_mount+0x52>
 800ef2a:	2302      	movs	r3, #2
 800ef2c:	e033      	b.n	800ef96 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ef2e:	69bb      	ldr	r3, [r7, #24]
 800ef30:	2200      	movs	r2, #0
 800ef32:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d00f      	beq.n	800ef5a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800ef40:	69fb      	ldr	r3, [r7, #28]
 800ef42:	b2da      	uxtb	r2, r3
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	3314      	adds	r3, #20
 800ef48:	4619      	mov	r1, r3
 800ef4a:	4610      	mov	r0, r2
 800ef4c:	f000 ffee 	bl	800ff2c <ff_cre_syncobj>
 800ef50:	4603      	mov	r3, r0
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d101      	bne.n	800ef5a <f_mount+0x7e>
 800ef56:	2302      	movs	r3, #2
 800ef58:	e01d      	b.n	800ef96 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ef5a:	68fa      	ldr	r2, [r7, #12]
 800ef5c:	4910      	ldr	r1, [pc, #64]	; (800efa0 <f_mount+0xc4>)
 800ef5e:	69fb      	ldr	r3, [r7, #28]
 800ef60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d002      	beq.n	800ef70 <f_mount+0x94>
 800ef6a:	79fb      	ldrb	r3, [r7, #7]
 800ef6c:	2b01      	cmp	r3, #1
 800ef6e:	d001      	beq.n	800ef74 <f_mount+0x98>
 800ef70:	2300      	movs	r3, #0
 800ef72:	e010      	b.n	800ef96 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ef74:	f107 010c 	add.w	r1, r7, #12
 800ef78:	f107 0308 	add.w	r3, r7, #8
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	4618      	mov	r0, r3
 800ef80:	f7ff fcdc 	bl	800e93c <find_volume>
 800ef84:	4603      	mov	r3, r0
 800ef86:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	7dfa      	ldrb	r2, [r7, #23]
 800ef8c:	4611      	mov	r1, r2
 800ef8e:	4618      	mov	r0, r3
 800ef90:	f7fd ff3a 	bl	800ce08 <unlock_fs>
 800ef94:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef96:	4618      	mov	r0, r3
 800ef98:	3720      	adds	r7, #32
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	bd80      	pop	{r7, pc}
 800ef9e:	bf00      	nop
 800efa0:	20002a6c 	.word	0x20002a6c

0800efa4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800efaa:	af00      	add	r7, sp, #0
 800efac:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800efb0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800efb4:	6018      	str	r0, [r3, #0]
 800efb6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800efba:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800efbe:	6019      	str	r1, [r3, #0]
 800efc0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800efc4:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800efc8:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800efca:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800efce:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d101      	bne.n	800efdc <f_open+0x38>
 800efd8:	2309      	movs	r3, #9
 800efda:	e2ae      	b.n	800f53a <f_open+0x596>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800efdc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800efe0:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800efe4:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800efe8:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800efec:	7812      	ldrb	r2, [r2, #0]
 800efee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800eff2:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800eff4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800eff8:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800effc:	781a      	ldrb	r2, [r3, #0]
 800effe:	f507 7105 	add.w	r1, r7, #532	; 0x214
 800f002:	f107 0308 	add.w	r3, r7, #8
 800f006:	4618      	mov	r0, r3
 800f008:	f7ff fc98 	bl	800e93c <find_volume>
 800f00c:	4603      	mov	r3, r0
 800f00e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 800f012:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800f016:	2b00      	cmp	r3, #0
 800f018:	f040 827a 	bne.w	800f510 <f_open+0x56c>
		dj.obj.fs = fs;
 800f01c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800f020:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 800f024:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800f028:	f107 0214 	add.w	r2, r7, #20
 800f02c:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800f02e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f032:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800f036:	681a      	ldr	r2, [r3, #0]
 800f038:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800f03c:	4611      	mov	r1, r2
 800f03e:	4618      	mov	r0, r3
 800f040:	f7ff fb6c 	bl	800e71c <follow_path>
 800f044:	4603      	mov	r3, r0
 800f046:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f04a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d11e      	bne.n	800f090 <f_open+0xec>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f052:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 800f056:	b25b      	sxtb	r3, r3
 800f058:	2b00      	cmp	r3, #0
 800f05a:	da03      	bge.n	800f064 <f_open+0xc0>
				res = FR_INVALID_NAME;
 800f05c:	2306      	movs	r3, #6
 800f05e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800f062:	e015      	b.n	800f090 <f_open+0xec>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f064:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f068:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800f06c:	781b      	ldrb	r3, [r3, #0]
 800f06e:	f023 0301 	bic.w	r3, r3, #1
 800f072:	2b00      	cmp	r3, #0
 800f074:	bf14      	ite	ne
 800f076:	2301      	movne	r3, #1
 800f078:	2300      	moveq	r3, #0
 800f07a:	b2db      	uxtb	r3, r3
 800f07c:	461a      	mov	r2, r3
 800f07e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800f082:	4611      	mov	r1, r2
 800f084:	4618      	mov	r0, r3
 800f086:	f7fd fedb 	bl	800ce40 <chk_lock>
 800f08a:	4603      	mov	r3, r0
 800f08c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f090:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f094:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800f098:	781b      	ldrb	r3, [r3, #0]
 800f09a:	f003 031c 	and.w	r3, r3, #28
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	f000 80a7 	beq.w	800f1f2 <f_open+0x24e>
			if (res != FR_OK) {					/* No file, create new */
 800f0a4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d01f      	beq.n	800f0ec <f_open+0x148>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f0ac:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800f0b0:	2b04      	cmp	r3, #4
 800f0b2:	d10e      	bne.n	800f0d2 <f_open+0x12e>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f0b4:	f7fd ff20 	bl	800cef8 <enq_lock>
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d006      	beq.n	800f0cc <f_open+0x128>
 800f0be:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f7ff f87a 	bl	800e1bc <dir_register>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	e000      	b.n	800f0ce <f_open+0x12a>
 800f0cc:	2312      	movs	r3, #18
 800f0ce:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f0d2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f0d6:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800f0da:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800f0de:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800f0e2:	7812      	ldrb	r2, [r2, #0]
 800f0e4:	f042 0208 	orr.w	r2, r2, #8
 800f0e8:	701a      	strb	r2, [r3, #0]
 800f0ea:	e015      	b.n	800f118 <f_open+0x174>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f0ec:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800f0f0:	f003 0311 	and.w	r3, r3, #17
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d003      	beq.n	800f100 <f_open+0x15c>
					res = FR_DENIED;
 800f0f8:	2307      	movs	r3, #7
 800f0fa:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800f0fe:	e00b      	b.n	800f118 <f_open+0x174>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f100:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f104:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800f108:	781b      	ldrb	r3, [r3, #0]
 800f10a:	f003 0304 	and.w	r3, r3, #4
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d002      	beq.n	800f118 <f_open+0x174>
 800f112:	2308      	movs	r3, #8
 800f114:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f118:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	f040 8088 	bne.w	800f232 <f_open+0x28e>
 800f122:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f126:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800f12a:	781b      	ldrb	r3, [r3, #0]
 800f12c:	f003 0308 	and.w	r3, r3, #8
 800f130:	2b00      	cmp	r3, #0
 800f132:	d07e      	beq.n	800f232 <f_open+0x28e>
				dw = GET_FATTIME();
 800f134:	f7fd fc56 	bl	800c9e4 <get_fattime>
 800f138:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f13c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800f140:	330e      	adds	r3, #14
 800f142:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800f146:	4618      	mov	r0, r3
 800f148:	f7fd fd9e 	bl	800cc88 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f14c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800f150:	3316      	adds	r3, #22
 800f152:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800f156:	4618      	mov	r0, r3
 800f158:	f7fd fd96 	bl	800cc88 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f15c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800f160:	330b      	adds	r3, #11
 800f162:	2220      	movs	r2, #32
 800f164:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f166:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800f16a:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800f16e:	4611      	mov	r1, r2
 800f170:	4618      	mov	r0, r3
 800f172:	f7fe fd9b 	bl	800dcac <ld_clust>
 800f176:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f17a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800f17e:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 800f182:	2200      	movs	r2, #0
 800f184:	4618      	mov	r0, r3
 800f186:	f7fe fdb0 	bl	800dcea <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f18a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800f18e:	331c      	adds	r3, #28
 800f190:	2100      	movs	r1, #0
 800f192:	4618      	mov	r0, r3
 800f194:	f7fd fd78 	bl	800cc88 <st_dword>
					fs->wflag = 1;
 800f198:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800f19c:	2201      	movs	r2, #1
 800f19e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f1a0:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d044      	beq.n	800f232 <f_open+0x28e>
						dw = fs->winsect;
 800f1a8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800f1ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1ae:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 800f1b2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 800f1bc:	4618      	mov	r0, r3
 800f1be:	f7fe fa9a 	bl	800d6f6 <remove_chain>
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 800f1c8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d130      	bne.n	800f232 <f_open+0x28e>
							res = move_window(fs, dw);
 800f1d0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800f1d4:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800f1d8:	4618      	mov	r0, r3
 800f1da:	f7fd ffe1 	bl	800d1a0 <move_window>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f1e4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800f1e8:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 800f1ec:	3a01      	subs	r2, #1
 800f1ee:	619a      	str	r2, [r3, #24]
 800f1f0:	e01f      	b.n	800f232 <f_open+0x28e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f1f2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d11b      	bne.n	800f232 <f_open+0x28e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f1fa:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800f1fe:	f003 0310 	and.w	r3, r3, #16
 800f202:	2b00      	cmp	r3, #0
 800f204:	d003      	beq.n	800f20e <f_open+0x26a>
					res = FR_NO_FILE;
 800f206:	2304      	movs	r3, #4
 800f208:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800f20c:	e011      	b.n	800f232 <f_open+0x28e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f20e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f212:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800f216:	781b      	ldrb	r3, [r3, #0]
 800f218:	f003 0302 	and.w	r3, r3, #2
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d008      	beq.n	800f232 <f_open+0x28e>
 800f220:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800f224:	f003 0301 	and.w	r3, r3, #1
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d002      	beq.n	800f232 <f_open+0x28e>
						res = FR_DENIED;
 800f22c:	2307      	movs	r3, #7
 800f22e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 800f232:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800f236:	2b00      	cmp	r3, #0
 800f238:	d14a      	bne.n	800f2d0 <f_open+0x32c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f23a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f23e:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800f242:	781b      	ldrb	r3, [r3, #0]
 800f244:	f003 0308 	and.w	r3, r3, #8
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d00b      	beq.n	800f264 <f_open+0x2c0>
				mode |= FA_MODIFIED;
 800f24c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f250:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800f254:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800f258:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800f25c:	7812      	ldrb	r2, [r2, #0]
 800f25e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f262:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f264:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800f268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f26a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f26e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f276:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800f27a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f27e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f286:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f28a:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800f28e:	781b      	ldrb	r3, [r3, #0]
 800f290:	f023 0301 	bic.w	r3, r3, #1
 800f294:	2b00      	cmp	r3, #0
 800f296:	bf14      	ite	ne
 800f298:	2301      	movne	r3, #1
 800f29a:	2300      	moveq	r3, #0
 800f29c:	b2db      	uxtb	r3, r3
 800f29e:	461a      	mov	r2, r3
 800f2a0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800f2a4:	4611      	mov	r1, r2
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f7fd fe48 	bl	800cf3c <inc_lock>
 800f2ac:	4602      	mov	r2, r0
 800f2ae:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f2b2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f2ba:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f2be:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	691b      	ldr	r3, [r3, #16]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d102      	bne.n	800f2d0 <f_open+0x32c>
 800f2ca:	2302      	movs	r3, #2
 800f2cc:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f2d0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	f040 811b 	bne.w	800f510 <f_open+0x56c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f2da:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800f2de:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800f2e2:	4611      	mov	r1, r2
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f7fe fce1 	bl	800dcac <ld_clust>
 800f2ea:	4602      	mov	r2, r0
 800f2ec:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f2f0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f2f8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800f2fc:	331c      	adds	r3, #28
 800f2fe:	4618      	mov	r0, r3
 800f300:	f7fd fc84 	bl	800cc0c <ld_dword>
 800f304:	4602      	mov	r2, r0
 800f306:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f30a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f312:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f316:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	2200      	movs	r2, #0
 800f31e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f320:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800f324:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f328:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f330:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800f334:	88da      	ldrh	r2, [r3, #6]
 800f336:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f33a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f342:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f346:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800f350:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800f354:	7812      	ldrb	r2, [r2, #0]
 800f356:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f358:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f35c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	2200      	movs	r2, #0
 800f364:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f366:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f36a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	2200      	movs	r2, #0
 800f372:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f374:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f378:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	2200      	movs	r2, #0
 800f380:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f382:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f386:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	3330      	adds	r3, #48	; 0x30
 800f38e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f392:	2100      	movs	r1, #0
 800f394:	4618      	mov	r0, r3
 800f396:	f7fd fcc4 	bl	800cd22 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f39a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f39e:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800f3a2:	781b      	ldrb	r3, [r3, #0]
 800f3a4:	f003 0320 	and.w	r3, r3, #32
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	f000 80b1 	beq.w	800f510 <f_open+0x56c>
 800f3ae:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f3b2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	68db      	ldr	r3, [r3, #12]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	f000 80a8 	beq.w	800f510 <f_open+0x56c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f3c0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f3c4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	68da      	ldr	r2, [r3, #12]
 800f3cc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f3d0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f3d8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800f3dc:	895b      	ldrh	r3, [r3, #10]
 800f3de:	461a      	mov	r2, r3
 800f3e0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800f3e4:	899b      	ldrh	r3, [r3, #12]
 800f3e6:	fb02 f303 	mul.w	r3, r2, r3
 800f3ea:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f3ee:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f3f2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	689b      	ldr	r3, [r3, #8]
 800f3fa:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f3fe:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f402:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	68db      	ldr	r3, [r3, #12]
 800f40a:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800f40e:	e021      	b.n	800f454 <f_open+0x4b0>
					clst = get_fat(&fp->obj, clst);
 800f410:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f414:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800f41e:	4618      	mov	r0, r3
 800f420:	f7fd ff7b 	bl	800d31a <get_fat>
 800f424:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 800f428:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800f42c:	2b01      	cmp	r3, #1
 800f42e:	d802      	bhi.n	800f436 <f_open+0x492>
 800f430:	2302      	movs	r3, #2
 800f432:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f436:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800f43a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f43e:	d102      	bne.n	800f446 <f_open+0x4a2>
 800f440:	2301      	movs	r3, #1
 800f442:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f446:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800f44a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800f44e:	1ad3      	subs	r3, r2, r3
 800f450:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800f454:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d105      	bne.n	800f468 <f_open+0x4c4>
 800f45c:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800f460:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800f464:	429a      	cmp	r2, r3
 800f466:	d8d3      	bhi.n	800f410 <f_open+0x46c>
				}
				fp->clust = clst;
 800f468:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f46c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 800f476:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f478:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d147      	bne.n	800f510 <f_open+0x56c>
 800f480:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800f484:	899b      	ldrh	r3, [r3, #12]
 800f486:	461a      	mov	r2, r3
 800f488:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800f48c:	fbb3 f1f2 	udiv	r1, r3, r2
 800f490:	fb01 f202 	mul.w	r2, r1, r2
 800f494:	1a9b      	subs	r3, r3, r2
 800f496:	2b00      	cmp	r3, #0
 800f498:	d03a      	beq.n	800f510 <f_open+0x56c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f49a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800f49e:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f7fd ff1a 	bl	800d2dc <clust2sect>
 800f4a8:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 800f4ac:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d103      	bne.n	800f4bc <f_open+0x518>
						res = FR_INT_ERR;
 800f4b4:	2302      	movs	r3, #2
 800f4b6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800f4ba:	e029      	b.n	800f510 <f_open+0x56c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f4bc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800f4c0:	899b      	ldrh	r3, [r3, #12]
 800f4c2:	461a      	mov	r2, r3
 800f4c4:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800f4c8:	fbb3 f2f2 	udiv	r2, r3, r2
 800f4cc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800f4d0:	441a      	add	r2, r3
 800f4d2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f4d6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f4de:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800f4e2:	7858      	ldrb	r0, [r3, #1]
 800f4e4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f4e8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f4f2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f4f6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	6a1a      	ldr	r2, [r3, #32]
 800f4fe:	2301      	movs	r3, #1
 800f500:	f7fd fb0e 	bl	800cb20 <disk_read>
 800f504:	4603      	mov	r3, r0
 800f506:	2b00      	cmp	r3, #0
 800f508:	d002      	beq.n	800f510 <f_open+0x56c>
 800f50a:	2301      	movs	r3, #1
 800f50c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f510:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800f514:	2b00      	cmp	r3, #0
 800f516:	d006      	beq.n	800f526 <f_open+0x582>
 800f518:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800f51c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	2200      	movs	r2, #0
 800f524:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f526:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800f52a:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 800f52e:	4611      	mov	r1, r2
 800f530:	4618      	mov	r0, r3
 800f532:	f7fd fc69 	bl	800ce08 <unlock_fs>
 800f536:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 800f53a:	4618      	mov	r0, r3
 800f53c:	f507 771a 	add.w	r7, r7, #616	; 0x268
 800f540:	46bd      	mov	sp, r7
 800f542:	bd80      	pop	{r7, pc}

0800f544 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b08c      	sub	sp, #48	; 0x30
 800f548:	af00      	add	r7, sp, #0
 800f54a:	60f8      	str	r0, [r7, #12]
 800f54c:	60b9      	str	r1, [r7, #8]
 800f54e:	607a      	str	r2, [r7, #4]
 800f550:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f552:	68bb      	ldr	r3, [r7, #8]
 800f554:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	2200      	movs	r2, #0
 800f55a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	f107 0210 	add.w	r2, r7, #16
 800f562:	4611      	mov	r1, r2
 800f564:	4618      	mov	r0, r3
 800f566:	f7ff fc71 	bl	800ee4c <validate>
 800f56a:	4603      	mov	r3, r0
 800f56c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f570:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f574:	2b00      	cmp	r3, #0
 800f576:	d107      	bne.n	800f588 <f_write+0x44>
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	7d5b      	ldrb	r3, [r3, #21]
 800f57c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f580:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f584:	2b00      	cmp	r3, #0
 800f586:	d009      	beq.n	800f59c <f_write+0x58>
 800f588:	693b      	ldr	r3, [r7, #16]
 800f58a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f58e:	4611      	mov	r1, r2
 800f590:	4618      	mov	r0, r3
 800f592:	f7fd fc39 	bl	800ce08 <unlock_fs>
 800f596:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f59a:	e192      	b.n	800f8c2 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	7d1b      	ldrb	r3, [r3, #20]
 800f5a0:	f003 0302 	and.w	r3, r3, #2
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d106      	bne.n	800f5b6 <f_write+0x72>
 800f5a8:	693b      	ldr	r3, [r7, #16]
 800f5aa:	2107      	movs	r1, #7
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	f7fd fc2b 	bl	800ce08 <unlock_fs>
 800f5b2:	2307      	movs	r3, #7
 800f5b4:	e185      	b.n	800f8c2 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	699a      	ldr	r2, [r3, #24]
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	441a      	add	r2, r3
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	699b      	ldr	r3, [r3, #24]
 800f5c2:	429a      	cmp	r2, r3
 800f5c4:	f080 816a 	bcs.w	800f89c <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	699b      	ldr	r3, [r3, #24]
 800f5cc:	43db      	mvns	r3, r3
 800f5ce:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f5d0:	e164      	b.n	800f89c <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	699b      	ldr	r3, [r3, #24]
 800f5d6:	693a      	ldr	r2, [r7, #16]
 800f5d8:	8992      	ldrh	r2, [r2, #12]
 800f5da:	fbb3 f1f2 	udiv	r1, r3, r2
 800f5de:	fb01 f202 	mul.w	r2, r1, r2
 800f5e2:	1a9b      	subs	r3, r3, r2
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	f040 810f 	bne.w	800f808 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	699b      	ldr	r3, [r3, #24]
 800f5ee:	693a      	ldr	r2, [r7, #16]
 800f5f0:	8992      	ldrh	r2, [r2, #12]
 800f5f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800f5f6:	693a      	ldr	r2, [r7, #16]
 800f5f8:	8952      	ldrh	r2, [r2, #10]
 800f5fa:	3a01      	subs	r2, #1
 800f5fc:	4013      	ands	r3, r2
 800f5fe:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f600:	69bb      	ldr	r3, [r7, #24]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d14d      	bne.n	800f6a2 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	699b      	ldr	r3, [r3, #24]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d10c      	bne.n	800f628 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	689b      	ldr	r3, [r3, #8]
 800f612:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f616:	2b00      	cmp	r3, #0
 800f618:	d11a      	bne.n	800f650 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	2100      	movs	r1, #0
 800f61e:	4618      	mov	r0, r3
 800f620:	f7fe f8ce 	bl	800d7c0 <create_chain>
 800f624:	62b8      	str	r0, [r7, #40]	; 0x28
 800f626:	e013      	b.n	800f650 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d007      	beq.n	800f640 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	699b      	ldr	r3, [r3, #24]
 800f634:	4619      	mov	r1, r3
 800f636:	68f8      	ldr	r0, [r7, #12]
 800f638:	f7fe f95a 	bl	800d8f0 <clmt_clust>
 800f63c:	62b8      	str	r0, [r7, #40]	; 0x28
 800f63e:	e007      	b.n	800f650 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f640:	68fa      	ldr	r2, [r7, #12]
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	69db      	ldr	r3, [r3, #28]
 800f646:	4619      	mov	r1, r3
 800f648:	4610      	mov	r0, r2
 800f64a:	f7fe f8b9 	bl	800d7c0 <create_chain>
 800f64e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f652:	2b00      	cmp	r3, #0
 800f654:	f000 8127 	beq.w	800f8a6 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f65a:	2b01      	cmp	r3, #1
 800f65c:	d109      	bne.n	800f672 <f_write+0x12e>
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	2202      	movs	r2, #2
 800f662:	755a      	strb	r2, [r3, #21]
 800f664:	693b      	ldr	r3, [r7, #16]
 800f666:	2102      	movs	r1, #2
 800f668:	4618      	mov	r0, r3
 800f66a:	f7fd fbcd 	bl	800ce08 <unlock_fs>
 800f66e:	2302      	movs	r3, #2
 800f670:	e127      	b.n	800f8c2 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f674:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f678:	d109      	bne.n	800f68e <f_write+0x14a>
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	2201      	movs	r2, #1
 800f67e:	755a      	strb	r2, [r3, #21]
 800f680:	693b      	ldr	r3, [r7, #16]
 800f682:	2101      	movs	r1, #1
 800f684:	4618      	mov	r0, r3
 800f686:	f7fd fbbf 	bl	800ce08 <unlock_fs>
 800f68a:	2301      	movs	r3, #1
 800f68c:	e119      	b.n	800f8c2 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f692:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	689b      	ldr	r3, [r3, #8]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d102      	bne.n	800f6a2 <f_write+0x15e>
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f6a0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	7d1b      	ldrb	r3, [r3, #20]
 800f6a6:	b25b      	sxtb	r3, r3
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	da1d      	bge.n	800f6e8 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f6ac:	693b      	ldr	r3, [r7, #16]
 800f6ae:	7858      	ldrb	r0, [r3, #1]
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	6a1a      	ldr	r2, [r3, #32]
 800f6ba:	2301      	movs	r3, #1
 800f6bc:	f7fd fa50 	bl	800cb60 <disk_write>
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d009      	beq.n	800f6da <f_write+0x196>
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	2201      	movs	r2, #1
 800f6ca:	755a      	strb	r2, [r3, #21]
 800f6cc:	693b      	ldr	r3, [r7, #16]
 800f6ce:	2101      	movs	r1, #1
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f7fd fb99 	bl	800ce08 <unlock_fs>
 800f6d6:	2301      	movs	r3, #1
 800f6d8:	e0f3      	b.n	800f8c2 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	7d1b      	ldrb	r3, [r3, #20]
 800f6de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f6e2:	b2da      	uxtb	r2, r3
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f6e8:	693a      	ldr	r2, [r7, #16]
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	69db      	ldr	r3, [r3, #28]
 800f6ee:	4619      	mov	r1, r3
 800f6f0:	4610      	mov	r0, r2
 800f6f2:	f7fd fdf3 	bl	800d2dc <clust2sect>
 800f6f6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f6f8:	697b      	ldr	r3, [r7, #20]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d109      	bne.n	800f712 <f_write+0x1ce>
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	2202      	movs	r2, #2
 800f702:	755a      	strb	r2, [r3, #21]
 800f704:	693b      	ldr	r3, [r7, #16]
 800f706:	2102      	movs	r1, #2
 800f708:	4618      	mov	r0, r3
 800f70a:	f7fd fb7d 	bl	800ce08 <unlock_fs>
 800f70e:	2302      	movs	r3, #2
 800f710:	e0d7      	b.n	800f8c2 <f_write+0x37e>
			sect += csect;
 800f712:	697a      	ldr	r2, [r7, #20]
 800f714:	69bb      	ldr	r3, [r7, #24]
 800f716:	4413      	add	r3, r2
 800f718:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f71a:	693b      	ldr	r3, [r7, #16]
 800f71c:	899b      	ldrh	r3, [r3, #12]
 800f71e:	461a      	mov	r2, r3
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	fbb3 f3f2 	udiv	r3, r3, r2
 800f726:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f728:	6a3b      	ldr	r3, [r7, #32]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d048      	beq.n	800f7c0 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f72e:	69ba      	ldr	r2, [r7, #24]
 800f730:	6a3b      	ldr	r3, [r7, #32]
 800f732:	4413      	add	r3, r2
 800f734:	693a      	ldr	r2, [r7, #16]
 800f736:	8952      	ldrh	r2, [r2, #10]
 800f738:	4293      	cmp	r3, r2
 800f73a:	d905      	bls.n	800f748 <f_write+0x204>
					cc = fs->csize - csect;
 800f73c:	693b      	ldr	r3, [r7, #16]
 800f73e:	895b      	ldrh	r3, [r3, #10]
 800f740:	461a      	mov	r2, r3
 800f742:	69bb      	ldr	r3, [r7, #24]
 800f744:	1ad3      	subs	r3, r2, r3
 800f746:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f748:	693b      	ldr	r3, [r7, #16]
 800f74a:	7858      	ldrb	r0, [r3, #1]
 800f74c:	6a3b      	ldr	r3, [r7, #32]
 800f74e:	697a      	ldr	r2, [r7, #20]
 800f750:	69f9      	ldr	r1, [r7, #28]
 800f752:	f7fd fa05 	bl	800cb60 <disk_write>
 800f756:	4603      	mov	r3, r0
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d009      	beq.n	800f770 <f_write+0x22c>
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	2201      	movs	r2, #1
 800f760:	755a      	strb	r2, [r3, #21]
 800f762:	693b      	ldr	r3, [r7, #16]
 800f764:	2101      	movs	r1, #1
 800f766:	4618      	mov	r0, r3
 800f768:	f7fd fb4e 	bl	800ce08 <unlock_fs>
 800f76c:	2301      	movs	r3, #1
 800f76e:	e0a8      	b.n	800f8c2 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	6a1a      	ldr	r2, [r3, #32]
 800f774:	697b      	ldr	r3, [r7, #20]
 800f776:	1ad3      	subs	r3, r2, r3
 800f778:	6a3a      	ldr	r2, [r7, #32]
 800f77a:	429a      	cmp	r2, r3
 800f77c:	d918      	bls.n	800f7b0 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	6a1a      	ldr	r2, [r3, #32]
 800f788:	697b      	ldr	r3, [r7, #20]
 800f78a:	1ad3      	subs	r3, r2, r3
 800f78c:	693a      	ldr	r2, [r7, #16]
 800f78e:	8992      	ldrh	r2, [r2, #12]
 800f790:	fb02 f303 	mul.w	r3, r2, r3
 800f794:	69fa      	ldr	r2, [r7, #28]
 800f796:	18d1      	adds	r1, r2, r3
 800f798:	693b      	ldr	r3, [r7, #16]
 800f79a:	899b      	ldrh	r3, [r3, #12]
 800f79c:	461a      	mov	r2, r3
 800f79e:	f7fd fa9f 	bl	800cce0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	7d1b      	ldrb	r3, [r3, #20]
 800f7a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f7aa:	b2da      	uxtb	r2, r3
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f7b0:	693b      	ldr	r3, [r7, #16]
 800f7b2:	899b      	ldrh	r3, [r3, #12]
 800f7b4:	461a      	mov	r2, r3
 800f7b6:	6a3b      	ldr	r3, [r7, #32]
 800f7b8:	fb02 f303 	mul.w	r3, r2, r3
 800f7bc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800f7be:	e050      	b.n	800f862 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	6a1b      	ldr	r3, [r3, #32]
 800f7c4:	697a      	ldr	r2, [r7, #20]
 800f7c6:	429a      	cmp	r2, r3
 800f7c8:	d01b      	beq.n	800f802 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	699a      	ldr	r2, [r3, #24]
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	d215      	bcs.n	800f802 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f7d6:	693b      	ldr	r3, [r7, #16]
 800f7d8:	7858      	ldrb	r0, [r3, #1]
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f7e0:	2301      	movs	r3, #1
 800f7e2:	697a      	ldr	r2, [r7, #20]
 800f7e4:	f7fd f99c 	bl	800cb20 <disk_read>
 800f7e8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d009      	beq.n	800f802 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	2201      	movs	r2, #1
 800f7f2:	755a      	strb	r2, [r3, #21]
 800f7f4:	693b      	ldr	r3, [r7, #16]
 800f7f6:	2101      	movs	r1, #1
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	f7fd fb05 	bl	800ce08 <unlock_fs>
 800f7fe:	2301      	movs	r3, #1
 800f800:	e05f      	b.n	800f8c2 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	697a      	ldr	r2, [r7, #20]
 800f806:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f808:	693b      	ldr	r3, [r7, #16]
 800f80a:	899b      	ldrh	r3, [r3, #12]
 800f80c:	4618      	mov	r0, r3
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	699b      	ldr	r3, [r3, #24]
 800f812:	693a      	ldr	r2, [r7, #16]
 800f814:	8992      	ldrh	r2, [r2, #12]
 800f816:	fbb3 f1f2 	udiv	r1, r3, r2
 800f81a:	fb01 f202 	mul.w	r2, r1, r2
 800f81e:	1a9b      	subs	r3, r3, r2
 800f820:	1ac3      	subs	r3, r0, r3
 800f822:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	429a      	cmp	r2, r3
 800f82a:	d901      	bls.n	800f830 <f_write+0x2ec>
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	699b      	ldr	r3, [r3, #24]
 800f83a:	693a      	ldr	r2, [r7, #16]
 800f83c:	8992      	ldrh	r2, [r2, #12]
 800f83e:	fbb3 f0f2 	udiv	r0, r3, r2
 800f842:	fb00 f202 	mul.w	r2, r0, r2
 800f846:	1a9b      	subs	r3, r3, r2
 800f848:	440b      	add	r3, r1
 800f84a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f84c:	69f9      	ldr	r1, [r7, #28]
 800f84e:	4618      	mov	r0, r3
 800f850:	f7fd fa46 	bl	800cce0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	7d1b      	ldrb	r3, [r3, #20]
 800f858:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f85c:	b2da      	uxtb	r2, r3
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f862:	69fa      	ldr	r2, [r7, #28]
 800f864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f866:	4413      	add	r3, r2
 800f868:	61fb      	str	r3, [r7, #28]
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	699a      	ldr	r2, [r3, #24]
 800f86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f870:	441a      	add	r2, r3
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	619a      	str	r2, [r3, #24]
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	68da      	ldr	r2, [r3, #12]
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	699b      	ldr	r3, [r3, #24]
 800f87e:	429a      	cmp	r2, r3
 800f880:	bf38      	it	cc
 800f882:	461a      	movcc	r2, r3
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	60da      	str	r2, [r3, #12]
 800f888:	683b      	ldr	r3, [r7, #0]
 800f88a:	681a      	ldr	r2, [r3, #0]
 800f88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f88e:	441a      	add	r2, r3
 800f890:	683b      	ldr	r3, [r7, #0]
 800f892:	601a      	str	r2, [r3, #0]
 800f894:	687a      	ldr	r2, [r7, #4]
 800f896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f898:	1ad3      	subs	r3, r2, r3
 800f89a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	f47f ae97 	bne.w	800f5d2 <f_write+0x8e>
 800f8a4:	e000      	b.n	800f8a8 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f8a6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	7d1b      	ldrb	r3, [r3, #20]
 800f8ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8b0:	b2da      	uxtb	r2, r3
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f8b6:	693b      	ldr	r3, [r7, #16]
 800f8b8:	2100      	movs	r1, #0
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f7fd faa4 	bl	800ce08 <unlock_fs>
 800f8c0:	2300      	movs	r3, #0
}
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	3730      	adds	r7, #48	; 0x30
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	bd80      	pop	{r7, pc}

0800f8ca <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f8ca:	b580      	push	{r7, lr}
 800f8cc:	b086      	sub	sp, #24
 800f8ce:	af00      	add	r7, sp, #0
 800f8d0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	f107 0208 	add.w	r2, r7, #8
 800f8d8:	4611      	mov	r1, r2
 800f8da:	4618      	mov	r0, r3
 800f8dc:	f7ff fab6 	bl	800ee4c <validate>
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f8e4:	7dfb      	ldrb	r3, [r7, #23]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d16d      	bne.n	800f9c6 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	7d1b      	ldrb	r3, [r3, #20]
 800f8ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d067      	beq.n	800f9c6 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	7d1b      	ldrb	r3, [r3, #20]
 800f8fa:	b25b      	sxtb	r3, r3
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	da1a      	bge.n	800f936 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f900:	68bb      	ldr	r3, [r7, #8]
 800f902:	7858      	ldrb	r0, [r3, #1]
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	6a1a      	ldr	r2, [r3, #32]
 800f90e:	2301      	movs	r3, #1
 800f910:	f7fd f926 	bl	800cb60 <disk_write>
 800f914:	4603      	mov	r3, r0
 800f916:	2b00      	cmp	r3, #0
 800f918:	d006      	beq.n	800f928 <f_sync+0x5e>
 800f91a:	68bb      	ldr	r3, [r7, #8]
 800f91c:	2101      	movs	r1, #1
 800f91e:	4618      	mov	r0, r3
 800f920:	f7fd fa72 	bl	800ce08 <unlock_fs>
 800f924:	2301      	movs	r3, #1
 800f926:	e055      	b.n	800f9d4 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	7d1b      	ldrb	r3, [r3, #20]
 800f92c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f930:	b2da      	uxtb	r2, r3
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f936:	f7fd f855 	bl	800c9e4 <get_fattime>
 800f93a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f93c:	68ba      	ldr	r2, [r7, #8]
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f942:	4619      	mov	r1, r3
 800f944:	4610      	mov	r0, r2
 800f946:	f7fd fc2b 	bl	800d1a0 <move_window>
 800f94a:	4603      	mov	r3, r0
 800f94c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f94e:	7dfb      	ldrb	r3, [r7, #23]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d138      	bne.n	800f9c6 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f958:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	330b      	adds	r3, #11
 800f95e:	781a      	ldrb	r2, [r3, #0]
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	330b      	adds	r3, #11
 800f964:	f042 0220 	orr.w	r2, r2, #32
 800f968:	b2d2      	uxtb	r2, r2
 800f96a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	6818      	ldr	r0, [r3, #0]
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	689b      	ldr	r3, [r3, #8]
 800f974:	461a      	mov	r2, r3
 800f976:	68f9      	ldr	r1, [r7, #12]
 800f978:	f7fe f9b7 	bl	800dcea <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	f103 021c 	add.w	r2, r3, #28
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	68db      	ldr	r3, [r3, #12]
 800f986:	4619      	mov	r1, r3
 800f988:	4610      	mov	r0, r2
 800f98a:	f7fd f97d 	bl	800cc88 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	3316      	adds	r3, #22
 800f992:	6939      	ldr	r1, [r7, #16]
 800f994:	4618      	mov	r0, r3
 800f996:	f7fd f977 	bl	800cc88 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	3312      	adds	r3, #18
 800f99e:	2100      	movs	r1, #0
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	f7fd f956 	bl	800cc52 <st_word>
					fs->wflag = 1;
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	2201      	movs	r2, #1
 800f9aa:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f9ac:	68bb      	ldr	r3, [r7, #8]
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f7fd fc24 	bl	800d1fc <sync_fs>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	7d1b      	ldrb	r3, [r3, #20]
 800f9bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f9c0:	b2da      	uxtb	r2, r3
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f9c6:	68bb      	ldr	r3, [r7, #8]
 800f9c8:	7dfa      	ldrb	r2, [r7, #23]
 800f9ca:	4611      	mov	r1, r2
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	f7fd fa1b 	bl	800ce08 <unlock_fs>
 800f9d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	3718      	adds	r7, #24
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	bd80      	pop	{r7, pc}

0800f9dc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b084      	sub	sp, #16
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	f7ff ff70 	bl	800f8ca <f_sync>
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f9ee:	7bfb      	ldrb	r3, [r7, #15]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d11d      	bne.n	800fa30 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	f107 0208 	add.w	r2, r7, #8
 800f9fa:	4611      	mov	r1, r2
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f7ff fa25 	bl	800ee4c <validate>
 800fa02:	4603      	mov	r3, r0
 800fa04:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fa06:	7bfb      	ldrb	r3, [r7, #15]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d111      	bne.n	800fa30 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	691b      	ldr	r3, [r3, #16]
 800fa10:	4618      	mov	r0, r3
 800fa12:	f7fd fb21 	bl	800d058 <dec_lock>
 800fa16:	4603      	mov	r3, r0
 800fa18:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800fa1a:	7bfb      	ldrb	r3, [r7, #15]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d102      	bne.n	800fa26 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	2200      	movs	r2, #0
 800fa24:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800fa26:	68bb      	ldr	r3, [r7, #8]
 800fa28:	2100      	movs	r1, #0
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	f7fd f9ec 	bl	800ce08 <unlock_fs>
#endif
		}
	}
	return res;
 800fa30:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	3710      	adds	r7, #16
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd80      	pop	{r7, pc}

0800fa3a <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800fa3a:	b580      	push	{r7, lr}
 800fa3c:	b092      	sub	sp, #72	; 0x48
 800fa3e:	af00      	add	r7, sp, #0
 800fa40:	60f8      	str	r0, [r7, #12]
 800fa42:	60b9      	str	r1, [r7, #8]
 800fa44:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800fa46:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800fa4a:	f107 030c 	add.w	r3, r7, #12
 800fa4e:	2200      	movs	r2, #0
 800fa50:	4618      	mov	r0, r3
 800fa52:	f7fe ff73 	bl	800e93c <find_volume>
 800fa56:	4603      	mov	r3, r0
 800fa58:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800fa5c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	f040 8099 	bne.w	800fb98 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800fa66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800fa6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa6e:	69da      	ldr	r2, [r3, #28]
 800fa70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa72:	6a1b      	ldr	r3, [r3, #32]
 800fa74:	3b02      	subs	r3, #2
 800fa76:	429a      	cmp	r2, r3
 800fa78:	d804      	bhi.n	800fa84 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800fa7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa7c:	69da      	ldr	r2, [r3, #28]
 800fa7e:	68bb      	ldr	r3, [r7, #8]
 800fa80:	601a      	str	r2, [r3, #0]
 800fa82:	e089      	b.n	800fb98 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800fa84:	2300      	movs	r3, #0
 800fa86:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800fa88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa8a:	781b      	ldrb	r3, [r3, #0]
 800fa8c:	2b01      	cmp	r3, #1
 800fa8e:	d128      	bne.n	800fae2 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800fa90:	2302      	movs	r3, #2
 800fa92:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fa94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa96:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800fa98:	f107 0314 	add.w	r3, r7, #20
 800fa9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7fd fc3b 	bl	800d31a <get_fat>
 800faa4:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800faa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800faac:	d103      	bne.n	800fab6 <f_getfree+0x7c>
 800faae:	2301      	movs	r3, #1
 800fab0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800fab4:	e063      	b.n	800fb7e <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800fab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fab8:	2b01      	cmp	r3, #1
 800faba:	d103      	bne.n	800fac4 <f_getfree+0x8a>
 800fabc:	2302      	movs	r3, #2
 800fabe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800fac2:	e05c      	b.n	800fb7e <f_getfree+0x144>
					if (stat == 0) nfree++;
 800fac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d102      	bne.n	800fad0 <f_getfree+0x96>
 800faca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800facc:	3301      	adds	r3, #1
 800face:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800fad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fad2:	3301      	adds	r3, #1
 800fad4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fad8:	6a1b      	ldr	r3, [r3, #32]
 800fada:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fadc:	429a      	cmp	r2, r3
 800fade:	d3db      	bcc.n	800fa98 <f_getfree+0x5e>
 800fae0:	e04d      	b.n	800fb7e <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800fae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fae4:	6a1b      	ldr	r3, [r3, #32]
 800fae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800faec:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800faee:	2300      	movs	r3, #0
 800faf0:	637b      	str	r3, [r7, #52]	; 0x34
 800faf2:	2300      	movs	r3, #0
 800faf4:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800faf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d113      	bne.n	800fb24 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800fafc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb00:	1c5a      	adds	r2, r3, #1
 800fb02:	63ba      	str	r2, [r7, #56]	; 0x38
 800fb04:	4619      	mov	r1, r3
 800fb06:	f7fd fb4b 	bl	800d1a0 <move_window>
 800fb0a:	4603      	mov	r3, r0
 800fb0c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800fb10:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d131      	bne.n	800fb7c <f_getfree+0x142>
							p = fs->win;
 800fb18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb1a:	333c      	adds	r3, #60	; 0x3c
 800fb1c:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800fb1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb20:	899b      	ldrh	r3, [r3, #12]
 800fb22:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800fb24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb26:	781b      	ldrb	r3, [r3, #0]
 800fb28:	2b02      	cmp	r3, #2
 800fb2a:	d10f      	bne.n	800fb4c <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800fb2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fb2e:	f7fd f855 	bl	800cbdc <ld_word>
 800fb32:	4603      	mov	r3, r0
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d102      	bne.n	800fb3e <f_getfree+0x104>
 800fb38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb3a:	3301      	adds	r3, #1
 800fb3c:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800fb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb40:	3302      	adds	r3, #2
 800fb42:	633b      	str	r3, [r7, #48]	; 0x30
 800fb44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb46:	3b02      	subs	r3, #2
 800fb48:	637b      	str	r3, [r7, #52]	; 0x34
 800fb4a:	e010      	b.n	800fb6e <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800fb4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fb4e:	f7fd f85d 	bl	800cc0c <ld_dword>
 800fb52:	4603      	mov	r3, r0
 800fb54:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d102      	bne.n	800fb62 <f_getfree+0x128>
 800fb5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb5e:	3301      	adds	r3, #1
 800fb60:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800fb62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb64:	3304      	adds	r3, #4
 800fb66:	633b      	str	r3, [r7, #48]	; 0x30
 800fb68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb6a:	3b04      	subs	r3, #4
 800fb6c:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800fb6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb70:	3b01      	subs	r3, #1
 800fb72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fb74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d1bd      	bne.n	800faf6 <f_getfree+0xbc>
 800fb7a:	e000      	b.n	800fb7e <f_getfree+0x144>
							if (res != FR_OK) break;
 800fb7c:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800fb7e:	68bb      	ldr	r3, [r7, #8]
 800fb80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fb82:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800fb84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fb88:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800fb8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb8c:	791a      	ldrb	r2, [r3, #4]
 800fb8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb90:	f042 0201 	orr.w	r2, r2, #1
 800fb94:	b2d2      	uxtb	r2, r2
 800fb96:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800fb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb9a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800fb9e:	4611      	mov	r1, r2
 800fba0:	4618      	mov	r0, r3
 800fba2:	f7fd f931 	bl	800ce08 <unlock_fs>
 800fba6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800fbaa:	4618      	mov	r0, r3
 800fbac:	3748      	adds	r7, #72	; 0x48
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	bd80      	pop	{r7, pc}

0800fbb2 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800fbb2:	b580      	push	{r7, lr}
 800fbb4:	b084      	sub	sp, #16
 800fbb6:	af00      	add	r7, sp, #0
 800fbb8:	6078      	str	r0, [r7, #4]
 800fbba:	460b      	mov	r3, r1
 800fbbc:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800fbbe:	78fb      	ldrb	r3, [r7, #3]
 800fbc0:	2b0a      	cmp	r3, #10
 800fbc2:	d103      	bne.n	800fbcc <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800fbc4:	210d      	movs	r1, #13
 800fbc6:	6878      	ldr	r0, [r7, #4]
 800fbc8:	f7ff fff3 	bl	800fbb2 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	685b      	ldr	r3, [r3, #4]
 800fbd0:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	db25      	blt.n	800fc24 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	1c5a      	adds	r2, r3, #1
 800fbdc:	60fa      	str	r2, [r7, #12]
 800fbde:	687a      	ldr	r2, [r7, #4]
 800fbe0:	4413      	add	r3, r2
 800fbe2:	78fa      	ldrb	r2, [r7, #3]
 800fbe4:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	2b3c      	cmp	r3, #60	; 0x3c
 800fbea:	dd12      	ble.n	800fc12 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	6818      	ldr	r0, [r3, #0]
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	f103 010c 	add.w	r1, r3, #12
 800fbf6:	68fa      	ldr	r2, [r7, #12]
 800fbf8:	f107 0308 	add.w	r3, r7, #8
 800fbfc:	f7ff fca2 	bl	800f544 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800fc00:	68ba      	ldr	r2, [r7, #8]
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	429a      	cmp	r2, r3
 800fc06:	d101      	bne.n	800fc0c <putc_bfd+0x5a>
 800fc08:	2300      	movs	r3, #0
 800fc0a:	e001      	b.n	800fc10 <putc_bfd+0x5e>
 800fc0c:	f04f 33ff 	mov.w	r3, #4294967295
 800fc10:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	68fa      	ldr	r2, [r7, #12]
 800fc16:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	689b      	ldr	r3, [r3, #8]
 800fc1c:	1c5a      	adds	r2, r3, #1
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	609a      	str	r2, [r3, #8]
 800fc22:	e000      	b.n	800fc26 <putc_bfd+0x74>
	if (i < 0) return;
 800fc24:	bf00      	nop
}
 800fc26:	3710      	adds	r7, #16
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	bd80      	pop	{r7, pc}

0800fc2c <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b084      	sub	sp, #16
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	685b      	ldr	r3, [r3, #4]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	db16      	blt.n	800fc6a <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	6818      	ldr	r0, [r3, #0]
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f103 010c 	add.w	r1, r3, #12
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	685b      	ldr	r3, [r3, #4]
 800fc4a:	461a      	mov	r2, r3
 800fc4c:	f107 030c 	add.w	r3, r7, #12
 800fc50:	f7ff fc78 	bl	800f544 <f_write>
 800fc54:	4603      	mov	r3, r0
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d107      	bne.n	800fc6a <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	685b      	ldr	r3, [r3, #4]
 800fc5e:	68fa      	ldr	r2, [r7, #12]
 800fc60:	4293      	cmp	r3, r2
 800fc62:	d102      	bne.n	800fc6a <putc_flush+0x3e>
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	689b      	ldr	r3, [r3, #8]
 800fc68:	e001      	b.n	800fc6e <putc_flush+0x42>
	return EOF;
 800fc6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fc6e:	4618      	mov	r0, r3
 800fc70:	3710      	adds	r7, #16
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bd80      	pop	{r7, pc}

0800fc76 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800fc76:	b480      	push	{r7}
 800fc78:	b083      	sub	sp, #12
 800fc7a:	af00      	add	r7, sp, #0
 800fc7c:	6078      	str	r0, [r7, #4]
 800fc7e:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	683a      	ldr	r2, [r7, #0]
 800fc84:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	2200      	movs	r2, #0
 800fc8a:	605a      	str	r2, [r3, #4]
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	685a      	ldr	r2, [r3, #4]
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	609a      	str	r2, [r3, #8]
}
 800fc94:	bf00      	nop
 800fc96:	370c      	adds	r7, #12
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9e:	4770      	bx	lr

0800fca0 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b096      	sub	sp, #88	; 0x58
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
 800fca8:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800fcaa:	f107 030c 	add.w	r3, r7, #12
 800fcae:	6839      	ldr	r1, [r7, #0]
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f7ff ffe0 	bl	800fc76 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800fcb6:	e009      	b.n	800fccc <f_puts+0x2c>
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	1c5a      	adds	r2, r3, #1
 800fcbc:	607a      	str	r2, [r7, #4]
 800fcbe:	781a      	ldrb	r2, [r3, #0]
 800fcc0:	f107 030c 	add.w	r3, r7, #12
 800fcc4:	4611      	mov	r1, r2
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f7ff ff73 	bl	800fbb2 <putc_bfd>
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	781b      	ldrb	r3, [r3, #0]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d1f1      	bne.n	800fcb8 <f_puts+0x18>
	return putc_flush(&pb);
 800fcd4:	f107 030c 	add.w	r3, r7, #12
 800fcd8:	4618      	mov	r0, r3
 800fcda:	f7ff ffa7 	bl	800fc2c <putc_flush>
 800fcde:	4603      	mov	r3, r0
}
 800fce0:	4618      	mov	r0, r3
 800fce2:	3758      	adds	r7, #88	; 0x58
 800fce4:	46bd      	mov	sp, r7
 800fce6:	bd80      	pop	{r7, pc}

0800fce8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fce8:	b480      	push	{r7}
 800fcea:	b087      	sub	sp, #28
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	60f8      	str	r0, [r7, #12]
 800fcf0:	60b9      	str	r1, [r7, #8]
 800fcf2:	4613      	mov	r3, r2
 800fcf4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fcf6:	2301      	movs	r3, #1
 800fcf8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fcfe:	4b1f      	ldr	r3, [pc, #124]	; (800fd7c <FATFS_LinkDriverEx+0x94>)
 800fd00:	7a5b      	ldrb	r3, [r3, #9]
 800fd02:	b2db      	uxtb	r3, r3
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d131      	bne.n	800fd6c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fd08:	4b1c      	ldr	r3, [pc, #112]	; (800fd7c <FATFS_LinkDriverEx+0x94>)
 800fd0a:	7a5b      	ldrb	r3, [r3, #9]
 800fd0c:	b2db      	uxtb	r3, r3
 800fd0e:	461a      	mov	r2, r3
 800fd10:	4b1a      	ldr	r3, [pc, #104]	; (800fd7c <FATFS_LinkDriverEx+0x94>)
 800fd12:	2100      	movs	r1, #0
 800fd14:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fd16:	4b19      	ldr	r3, [pc, #100]	; (800fd7c <FATFS_LinkDriverEx+0x94>)
 800fd18:	7a5b      	ldrb	r3, [r3, #9]
 800fd1a:	b2db      	uxtb	r3, r3
 800fd1c:	4a17      	ldr	r2, [pc, #92]	; (800fd7c <FATFS_LinkDriverEx+0x94>)
 800fd1e:	009b      	lsls	r3, r3, #2
 800fd20:	4413      	add	r3, r2
 800fd22:	68fa      	ldr	r2, [r7, #12]
 800fd24:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fd26:	4b15      	ldr	r3, [pc, #84]	; (800fd7c <FATFS_LinkDriverEx+0x94>)
 800fd28:	7a5b      	ldrb	r3, [r3, #9]
 800fd2a:	b2db      	uxtb	r3, r3
 800fd2c:	461a      	mov	r2, r3
 800fd2e:	4b13      	ldr	r3, [pc, #76]	; (800fd7c <FATFS_LinkDriverEx+0x94>)
 800fd30:	4413      	add	r3, r2
 800fd32:	79fa      	ldrb	r2, [r7, #7]
 800fd34:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fd36:	4b11      	ldr	r3, [pc, #68]	; (800fd7c <FATFS_LinkDriverEx+0x94>)
 800fd38:	7a5b      	ldrb	r3, [r3, #9]
 800fd3a:	b2db      	uxtb	r3, r3
 800fd3c:	1c5a      	adds	r2, r3, #1
 800fd3e:	b2d1      	uxtb	r1, r2
 800fd40:	4a0e      	ldr	r2, [pc, #56]	; (800fd7c <FATFS_LinkDriverEx+0x94>)
 800fd42:	7251      	strb	r1, [r2, #9]
 800fd44:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fd46:	7dbb      	ldrb	r3, [r7, #22]
 800fd48:	3330      	adds	r3, #48	; 0x30
 800fd4a:	b2da      	uxtb	r2, r3
 800fd4c:	68bb      	ldr	r3, [r7, #8]
 800fd4e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fd50:	68bb      	ldr	r3, [r7, #8]
 800fd52:	3301      	adds	r3, #1
 800fd54:	223a      	movs	r2, #58	; 0x3a
 800fd56:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fd58:	68bb      	ldr	r3, [r7, #8]
 800fd5a:	3302      	adds	r3, #2
 800fd5c:	222f      	movs	r2, #47	; 0x2f
 800fd5e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fd60:	68bb      	ldr	r3, [r7, #8]
 800fd62:	3303      	adds	r3, #3
 800fd64:	2200      	movs	r2, #0
 800fd66:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fd68:	2300      	movs	r3, #0
 800fd6a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fd6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd6e:	4618      	mov	r0, r3
 800fd70:	371c      	adds	r7, #28
 800fd72:	46bd      	mov	sp, r7
 800fd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd78:	4770      	bx	lr
 800fd7a:	bf00      	nop
 800fd7c:	20002a94 	.word	0x20002a94

0800fd80 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b082      	sub	sp, #8
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
 800fd88:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	6839      	ldr	r1, [r7, #0]
 800fd8e:	6878      	ldr	r0, [r7, #4]
 800fd90:	f7ff ffaa 	bl	800fce8 <FATFS_LinkDriverEx>
 800fd94:	4603      	mov	r3, r0
}
 800fd96:	4618      	mov	r0, r3
 800fd98:	3708      	adds	r7, #8
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	bd80      	pop	{r7, pc}
	...

0800fda0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800fda0:	b480      	push	{r7}
 800fda2:	b085      	sub	sp, #20
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	4603      	mov	r3, r0
 800fda8:	6039      	str	r1, [r7, #0]
 800fdaa:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800fdac:	88fb      	ldrh	r3, [r7, #6]
 800fdae:	2b7f      	cmp	r3, #127	; 0x7f
 800fdb0:	d802      	bhi.n	800fdb8 <ff_convert+0x18>
		c = chr;
 800fdb2:	88fb      	ldrh	r3, [r7, #6]
 800fdb4:	81fb      	strh	r3, [r7, #14]
 800fdb6:	e025      	b.n	800fe04 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d00b      	beq.n	800fdd6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800fdbe:	88fb      	ldrh	r3, [r7, #6]
 800fdc0:	2bff      	cmp	r3, #255	; 0xff
 800fdc2:	d805      	bhi.n	800fdd0 <ff_convert+0x30>
 800fdc4:	88fb      	ldrh	r3, [r7, #6]
 800fdc6:	3b80      	subs	r3, #128	; 0x80
 800fdc8:	4a12      	ldr	r2, [pc, #72]	; (800fe14 <ff_convert+0x74>)
 800fdca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fdce:	e000      	b.n	800fdd2 <ff_convert+0x32>
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	81fb      	strh	r3, [r7, #14]
 800fdd4:	e016      	b.n	800fe04 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	81fb      	strh	r3, [r7, #14]
 800fdda:	e009      	b.n	800fdf0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800fddc:	89fb      	ldrh	r3, [r7, #14]
 800fdde:	4a0d      	ldr	r2, [pc, #52]	; (800fe14 <ff_convert+0x74>)
 800fde0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fde4:	88fa      	ldrh	r2, [r7, #6]
 800fde6:	429a      	cmp	r2, r3
 800fde8:	d006      	beq.n	800fdf8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800fdea:	89fb      	ldrh	r3, [r7, #14]
 800fdec:	3301      	adds	r3, #1
 800fdee:	81fb      	strh	r3, [r7, #14]
 800fdf0:	89fb      	ldrh	r3, [r7, #14]
 800fdf2:	2b7f      	cmp	r3, #127	; 0x7f
 800fdf4:	d9f2      	bls.n	800fddc <ff_convert+0x3c>
 800fdf6:	e000      	b.n	800fdfa <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800fdf8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800fdfa:	89fb      	ldrh	r3, [r7, #14]
 800fdfc:	3380      	adds	r3, #128	; 0x80
 800fdfe:	b29b      	uxth	r3, r3
 800fe00:	b2db      	uxtb	r3, r3
 800fe02:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800fe04:	89fb      	ldrh	r3, [r7, #14]
}
 800fe06:	4618      	mov	r0, r3
 800fe08:	3714      	adds	r7, #20
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe10:	4770      	bx	lr
 800fe12:	bf00      	nop
 800fe14:	08015b64 	.word	0x08015b64

0800fe18 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800fe18:	b480      	push	{r7}
 800fe1a:	b087      	sub	sp, #28
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	4603      	mov	r3, r0
 800fe20:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800fe22:	88fb      	ldrh	r3, [r7, #6]
 800fe24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fe28:	d201      	bcs.n	800fe2e <ff_wtoupper+0x16>
 800fe2a:	4b3e      	ldr	r3, [pc, #248]	; (800ff24 <ff_wtoupper+0x10c>)
 800fe2c:	e000      	b.n	800fe30 <ff_wtoupper+0x18>
 800fe2e:	4b3e      	ldr	r3, [pc, #248]	; (800ff28 <ff_wtoupper+0x110>)
 800fe30:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800fe32:	697b      	ldr	r3, [r7, #20]
 800fe34:	1c9a      	adds	r2, r3, #2
 800fe36:	617a      	str	r2, [r7, #20]
 800fe38:	881b      	ldrh	r3, [r3, #0]
 800fe3a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800fe3c:	8a7b      	ldrh	r3, [r7, #18]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d068      	beq.n	800ff14 <ff_wtoupper+0xfc>
 800fe42:	88fa      	ldrh	r2, [r7, #6]
 800fe44:	8a7b      	ldrh	r3, [r7, #18]
 800fe46:	429a      	cmp	r2, r3
 800fe48:	d364      	bcc.n	800ff14 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800fe4a:	697b      	ldr	r3, [r7, #20]
 800fe4c:	1c9a      	adds	r2, r3, #2
 800fe4e:	617a      	str	r2, [r7, #20]
 800fe50:	881b      	ldrh	r3, [r3, #0]
 800fe52:	823b      	strh	r3, [r7, #16]
 800fe54:	8a3b      	ldrh	r3, [r7, #16]
 800fe56:	0a1b      	lsrs	r3, r3, #8
 800fe58:	81fb      	strh	r3, [r7, #14]
 800fe5a:	8a3b      	ldrh	r3, [r7, #16]
 800fe5c:	b2db      	uxtb	r3, r3
 800fe5e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800fe60:	88fa      	ldrh	r2, [r7, #6]
 800fe62:	8a79      	ldrh	r1, [r7, #18]
 800fe64:	8a3b      	ldrh	r3, [r7, #16]
 800fe66:	440b      	add	r3, r1
 800fe68:	429a      	cmp	r2, r3
 800fe6a:	da49      	bge.n	800ff00 <ff_wtoupper+0xe8>
			switch (cmd) {
 800fe6c:	89fb      	ldrh	r3, [r7, #14]
 800fe6e:	2b08      	cmp	r3, #8
 800fe70:	d84f      	bhi.n	800ff12 <ff_wtoupper+0xfa>
 800fe72:	a201      	add	r2, pc, #4	; (adr r2, 800fe78 <ff_wtoupper+0x60>)
 800fe74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe78:	0800fe9d 	.word	0x0800fe9d
 800fe7c:	0800feaf 	.word	0x0800feaf
 800fe80:	0800fec5 	.word	0x0800fec5
 800fe84:	0800fecd 	.word	0x0800fecd
 800fe88:	0800fed5 	.word	0x0800fed5
 800fe8c:	0800fedd 	.word	0x0800fedd
 800fe90:	0800fee5 	.word	0x0800fee5
 800fe94:	0800feed 	.word	0x0800feed
 800fe98:	0800fef5 	.word	0x0800fef5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800fe9c:	88fa      	ldrh	r2, [r7, #6]
 800fe9e:	8a7b      	ldrh	r3, [r7, #18]
 800fea0:	1ad3      	subs	r3, r2, r3
 800fea2:	005b      	lsls	r3, r3, #1
 800fea4:	697a      	ldr	r2, [r7, #20]
 800fea6:	4413      	add	r3, r2
 800fea8:	881b      	ldrh	r3, [r3, #0]
 800feaa:	80fb      	strh	r3, [r7, #6]
 800feac:	e027      	b.n	800fefe <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800feae:	88fa      	ldrh	r2, [r7, #6]
 800feb0:	8a7b      	ldrh	r3, [r7, #18]
 800feb2:	1ad3      	subs	r3, r2, r3
 800feb4:	b29b      	uxth	r3, r3
 800feb6:	f003 0301 	and.w	r3, r3, #1
 800feba:	b29b      	uxth	r3, r3
 800febc:	88fa      	ldrh	r2, [r7, #6]
 800febe:	1ad3      	subs	r3, r2, r3
 800fec0:	80fb      	strh	r3, [r7, #6]
 800fec2:	e01c      	b.n	800fefe <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800fec4:	88fb      	ldrh	r3, [r7, #6]
 800fec6:	3b10      	subs	r3, #16
 800fec8:	80fb      	strh	r3, [r7, #6]
 800feca:	e018      	b.n	800fefe <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800fecc:	88fb      	ldrh	r3, [r7, #6]
 800fece:	3b20      	subs	r3, #32
 800fed0:	80fb      	strh	r3, [r7, #6]
 800fed2:	e014      	b.n	800fefe <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800fed4:	88fb      	ldrh	r3, [r7, #6]
 800fed6:	3b30      	subs	r3, #48	; 0x30
 800fed8:	80fb      	strh	r3, [r7, #6]
 800feda:	e010      	b.n	800fefe <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800fedc:	88fb      	ldrh	r3, [r7, #6]
 800fede:	3b1a      	subs	r3, #26
 800fee0:	80fb      	strh	r3, [r7, #6]
 800fee2:	e00c      	b.n	800fefe <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800fee4:	88fb      	ldrh	r3, [r7, #6]
 800fee6:	3308      	adds	r3, #8
 800fee8:	80fb      	strh	r3, [r7, #6]
 800feea:	e008      	b.n	800fefe <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800feec:	88fb      	ldrh	r3, [r7, #6]
 800feee:	3b50      	subs	r3, #80	; 0x50
 800fef0:	80fb      	strh	r3, [r7, #6]
 800fef2:	e004      	b.n	800fefe <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800fef4:	88fb      	ldrh	r3, [r7, #6]
 800fef6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800fefa:	80fb      	strh	r3, [r7, #6]
 800fefc:	bf00      	nop
			}
			break;
 800fefe:	e008      	b.n	800ff12 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800ff00:	89fb      	ldrh	r3, [r7, #14]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d195      	bne.n	800fe32 <ff_wtoupper+0x1a>
 800ff06:	8a3b      	ldrh	r3, [r7, #16]
 800ff08:	005b      	lsls	r3, r3, #1
 800ff0a:	697a      	ldr	r2, [r7, #20]
 800ff0c:	4413      	add	r3, r2
 800ff0e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ff10:	e78f      	b.n	800fe32 <ff_wtoupper+0x1a>
			break;
 800ff12:	bf00      	nop
	}

	return chr;
 800ff14:	88fb      	ldrh	r3, [r7, #6]
}
 800ff16:	4618      	mov	r0, r3
 800ff18:	371c      	adds	r7, #28
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff20:	4770      	bx	lr
 800ff22:	bf00      	nop
 800ff24:	08015c64 	.word	0x08015c64
 800ff28:	08015e58 	.word	0x08015e58

0800ff2c <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b086      	sub	sp, #24
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	4603      	mov	r3, r0
 800ff34:	6039      	str	r1, [r7, #0]
 800ff36:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800ff38:	2300      	movs	r3, #0
 800ff3a:	60fb      	str	r3, [r7, #12]
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800ff40:	f107 030c 	add.w	r3, r7, #12
 800ff44:	2101      	movs	r1, #1
 800ff46:	4618      	mov	r0, r3
 800ff48:	f000 f8cd 	bl	80100e6 <osSemaphoreCreate>
 800ff4c:	4602      	mov	r2, r0
 800ff4e:	683b      	ldr	r3, [r7, #0]
 800ff50:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800ff52:	683b      	ldr	r3, [r7, #0]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	bf14      	ite	ne
 800ff5a:	2301      	movne	r3, #1
 800ff5c:	2300      	moveq	r3, #0
 800ff5e:	b2db      	uxtb	r3, r3
 800ff60:	617b      	str	r3, [r7, #20]

    return ret;
 800ff62:	697b      	ldr	r3, [r7, #20]
}
 800ff64:	4618      	mov	r0, r3
 800ff66:	3718      	adds	r7, #24
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bd80      	pop	{r7, pc}

0800ff6c <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b082      	sub	sp, #8
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800ff74:	6878      	ldr	r0, [r7, #4]
 800ff76:	f000 f96d 	bl	8010254 <osSemaphoreDelete>
#endif
    return 1;
 800ff7a:	2301      	movs	r3, #1
}
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	3708      	adds	r7, #8
 800ff80:	46bd      	mov	sp, r7
 800ff82:	bd80      	pop	{r7, pc}

0800ff84 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b084      	sub	sp, #16
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800ff90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ff94:	6878      	ldr	r0, [r7, #4]
 800ff96:	f000 f8d9 	bl	801014c <osSemaphoreWait>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d101      	bne.n	800ffa4 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800ffa0:	2301      	movs	r3, #1
 800ffa2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800ffa4:	68fb      	ldr	r3, [r7, #12]
}
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	3710      	adds	r7, #16
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	bd80      	pop	{r7, pc}

0800ffae <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800ffae:	b580      	push	{r7, lr}
 800ffb0:	b082      	sub	sp, #8
 800ffb2:	af00      	add	r7, sp, #0
 800ffb4:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800ffb6:	6878      	ldr	r0, [r7, #4]
 800ffb8:	f000 f916 	bl	80101e8 <osSemaphoreRelease>
#endif
}
 800ffbc:	bf00      	nop
 800ffbe:	3708      	adds	r7, #8
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	bd80      	pop	{r7, pc}

0800ffc4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ffc4:	b480      	push	{r7}
 800ffc6:	b085      	sub	sp, #20
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	4603      	mov	r3, r0
 800ffcc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ffce:	2300      	movs	r3, #0
 800ffd0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ffd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ffd6:	2b84      	cmp	r3, #132	; 0x84
 800ffd8:	d005      	beq.n	800ffe6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ffda:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	4413      	add	r3, r2
 800ffe2:	3303      	adds	r3, #3
 800ffe4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ffe6:	68fb      	ldr	r3, [r7, #12]
}
 800ffe8:	4618      	mov	r0, r3
 800ffea:	3714      	adds	r7, #20
 800ffec:	46bd      	mov	sp, r7
 800ffee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff2:	4770      	bx	lr

0800fff4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800fff4:	b480      	push	{r7}
 800fff6:	b083      	sub	sp, #12
 800fff8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fffa:	f3ef 8305 	mrs	r3, IPSR
 800fffe:	607b      	str	r3, [r7, #4]
  return(result);
 8010000:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8010002:	2b00      	cmp	r3, #0
 8010004:	bf14      	ite	ne
 8010006:	2301      	movne	r3, #1
 8010008:	2300      	moveq	r3, #0
 801000a:	b2db      	uxtb	r3, r3
}
 801000c:	4618      	mov	r0, r3
 801000e:	370c      	adds	r7, #12
 8010010:	46bd      	mov	sp, r7
 8010012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010016:	4770      	bx	lr

08010018 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801001c:	f001 f9b0 	bl	8011380 <vTaskStartScheduler>
  
  return osOK;
 8010020:	2300      	movs	r3, #0
}
 8010022:	4618      	mov	r0, r3
 8010024:	bd80      	pop	{r7, pc}

08010026 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8010026:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010028:	b089      	sub	sp, #36	; 0x24
 801002a:	af04      	add	r7, sp, #16
 801002c:	6078      	str	r0, [r7, #4]
 801002e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	695b      	ldr	r3, [r3, #20]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d020      	beq.n	801007a <osThreadCreate+0x54>
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	699b      	ldr	r3, [r3, #24]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d01c      	beq.n	801007a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	685c      	ldr	r4, [r3, #4]
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	691e      	ldr	r6, [r3, #16]
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010052:	4618      	mov	r0, r3
 8010054:	f7ff ffb6 	bl	800ffc4 <makeFreeRtosPriority>
 8010058:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	695b      	ldr	r3, [r3, #20]
 801005e:	687a      	ldr	r2, [r7, #4]
 8010060:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010062:	9202      	str	r2, [sp, #8]
 8010064:	9301      	str	r3, [sp, #4]
 8010066:	9100      	str	r1, [sp, #0]
 8010068:	683b      	ldr	r3, [r7, #0]
 801006a:	4632      	mov	r2, r6
 801006c:	4629      	mov	r1, r5
 801006e:	4620      	mov	r0, r4
 8010070:	f000 ffa8 	bl	8010fc4 <xTaskCreateStatic>
 8010074:	4603      	mov	r3, r0
 8010076:	60fb      	str	r3, [r7, #12]
 8010078:	e01c      	b.n	80100b4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	685c      	ldr	r4, [r3, #4]
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010086:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801008e:	4618      	mov	r0, r3
 8010090:	f7ff ff98 	bl	800ffc4 <makeFreeRtosPriority>
 8010094:	4602      	mov	r2, r0
 8010096:	f107 030c 	add.w	r3, r7, #12
 801009a:	9301      	str	r3, [sp, #4]
 801009c:	9200      	str	r2, [sp, #0]
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	4632      	mov	r2, r6
 80100a2:	4629      	mov	r1, r5
 80100a4:	4620      	mov	r0, r4
 80100a6:	f000 ffea 	bl	801107e <xTaskCreate>
 80100aa:	4603      	mov	r3, r0
 80100ac:	2b01      	cmp	r3, #1
 80100ae:	d001      	beq.n	80100b4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80100b0:	2300      	movs	r3, #0
 80100b2:	e000      	b.n	80100b6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80100b4:	68fb      	ldr	r3, [r7, #12]
}
 80100b6:	4618      	mov	r0, r3
 80100b8:	3714      	adds	r7, #20
 80100ba:	46bd      	mov	sp, r7
 80100bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080100be <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80100be:	b580      	push	{r7, lr}
 80100c0:	b084      	sub	sp, #16
 80100c2:	af00      	add	r7, sp, #0
 80100c4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d001      	beq.n	80100d4 <osDelay+0x16>
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	e000      	b.n	80100d6 <osDelay+0x18>
 80100d4:	2301      	movs	r3, #1
 80100d6:	4618      	mov	r0, r3
 80100d8:	f001 f91e 	bl	8011318 <vTaskDelay>
  
  return osOK;
 80100dc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80100de:	4618      	mov	r0, r3
 80100e0:	3710      	adds	r7, #16
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bd80      	pop	{r7, pc}

080100e6 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80100e6:	b580      	push	{r7, lr}
 80100e8:	b086      	sub	sp, #24
 80100ea:	af02      	add	r7, sp, #8
 80100ec:	6078      	str	r0, [r7, #4]
 80100ee:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	685b      	ldr	r3, [r3, #4]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d00f      	beq.n	8010118 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80100f8:	683b      	ldr	r3, [r7, #0]
 80100fa:	2b01      	cmp	r3, #1
 80100fc:	d10a      	bne.n	8010114 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	685b      	ldr	r3, [r3, #4]
 8010102:	2203      	movs	r2, #3
 8010104:	9200      	str	r2, [sp, #0]
 8010106:	2200      	movs	r2, #0
 8010108:	2100      	movs	r1, #0
 801010a:	2001      	movs	r0, #1
 801010c:	f000 f9fa 	bl	8010504 <xQueueGenericCreateStatic>
 8010110:	4603      	mov	r3, r0
 8010112:	e016      	b.n	8010142 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8010114:	2300      	movs	r3, #0
 8010116:	e014      	b.n	8010142 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8010118:	683b      	ldr	r3, [r7, #0]
 801011a:	2b01      	cmp	r3, #1
 801011c:	d110      	bne.n	8010140 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 801011e:	2203      	movs	r2, #3
 8010120:	2100      	movs	r1, #0
 8010122:	2001      	movs	r0, #1
 8010124:	f000 fa66 	bl	80105f4 <xQueueGenericCreate>
 8010128:	60f8      	str	r0, [r7, #12]
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d005      	beq.n	801013c <osSemaphoreCreate+0x56>
 8010130:	2300      	movs	r3, #0
 8010132:	2200      	movs	r2, #0
 8010134:	2100      	movs	r1, #0
 8010136:	68f8      	ldr	r0, [r7, #12]
 8010138:	f000 fab6 	bl	80106a8 <xQueueGenericSend>
      return sema;
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	e000      	b.n	8010142 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8010140:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8010142:	4618      	mov	r0, r3
 8010144:	3710      	adds	r7, #16
 8010146:	46bd      	mov	sp, r7
 8010148:	bd80      	pop	{r7, pc}
	...

0801014c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 801014c:	b580      	push	{r7, lr}
 801014e:	b084      	sub	sp, #16
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
 8010154:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8010156:	2300      	movs	r3, #0
 8010158:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d101      	bne.n	8010164 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8010160:	2380      	movs	r3, #128	; 0x80
 8010162:	e03a      	b.n	80101da <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8010164:	2300      	movs	r3, #0
 8010166:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8010168:	683b      	ldr	r3, [r7, #0]
 801016a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801016e:	d103      	bne.n	8010178 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8010170:	f04f 33ff 	mov.w	r3, #4294967295
 8010174:	60fb      	str	r3, [r7, #12]
 8010176:	e009      	b.n	801018c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8010178:	683b      	ldr	r3, [r7, #0]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d006      	beq.n	801018c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 801017e:	683b      	ldr	r3, [r7, #0]
 8010180:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d101      	bne.n	801018c <osSemaphoreWait+0x40>
      ticks = 1;
 8010188:	2301      	movs	r3, #1
 801018a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 801018c:	f7ff ff32 	bl	800fff4 <inHandlerMode>
 8010190:	4603      	mov	r3, r0
 8010192:	2b00      	cmp	r3, #0
 8010194:	d017      	beq.n	80101c6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8010196:	f107 0308 	add.w	r3, r7, #8
 801019a:	461a      	mov	r2, r3
 801019c:	2100      	movs	r1, #0
 801019e:	6878      	ldr	r0, [r7, #4]
 80101a0:	f000 fd1a 	bl	8010bd8 <xQueueReceiveFromISR>
 80101a4:	4603      	mov	r3, r0
 80101a6:	2b01      	cmp	r3, #1
 80101a8:	d001      	beq.n	80101ae <osSemaphoreWait+0x62>
      return osErrorOS;
 80101aa:	23ff      	movs	r3, #255	; 0xff
 80101ac:	e015      	b.n	80101da <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80101ae:	68bb      	ldr	r3, [r7, #8]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d011      	beq.n	80101d8 <osSemaphoreWait+0x8c>
 80101b4:	4b0b      	ldr	r3, [pc, #44]	; (80101e4 <osSemaphoreWait+0x98>)
 80101b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101ba:	601a      	str	r2, [r3, #0]
 80101bc:	f3bf 8f4f 	dsb	sy
 80101c0:	f3bf 8f6f 	isb	sy
 80101c4:	e008      	b.n	80101d8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80101c6:	68f9      	ldr	r1, [r7, #12]
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	f000 fbf9 	bl	80109c0 <xQueueSemaphoreTake>
 80101ce:	4603      	mov	r3, r0
 80101d0:	2b01      	cmp	r3, #1
 80101d2:	d001      	beq.n	80101d8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80101d4:	23ff      	movs	r3, #255	; 0xff
 80101d6:	e000      	b.n	80101da <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80101d8:	2300      	movs	r3, #0
}
 80101da:	4618      	mov	r0, r3
 80101dc:	3710      	adds	r7, #16
 80101de:	46bd      	mov	sp, r7
 80101e0:	bd80      	pop	{r7, pc}
 80101e2:	bf00      	nop
 80101e4:	e000ed04 	.word	0xe000ed04

080101e8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b084      	sub	sp, #16
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80101f0:	2300      	movs	r3, #0
 80101f2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80101f4:	2300      	movs	r3, #0
 80101f6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80101f8:	f7ff fefc 	bl	800fff4 <inHandlerMode>
 80101fc:	4603      	mov	r3, r0
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d016      	beq.n	8010230 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8010202:	f107 0308 	add.w	r3, r7, #8
 8010206:	4619      	mov	r1, r3
 8010208:	6878      	ldr	r0, [r7, #4]
 801020a:	f000 fb4b 	bl	80108a4 <xQueueGiveFromISR>
 801020e:	4603      	mov	r3, r0
 8010210:	2b01      	cmp	r3, #1
 8010212:	d001      	beq.n	8010218 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8010214:	23ff      	movs	r3, #255	; 0xff
 8010216:	e017      	b.n	8010248 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d013      	beq.n	8010246 <osSemaphoreRelease+0x5e>
 801021e:	4b0c      	ldr	r3, [pc, #48]	; (8010250 <osSemaphoreRelease+0x68>)
 8010220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010224:	601a      	str	r2, [r3, #0]
 8010226:	f3bf 8f4f 	dsb	sy
 801022a:	f3bf 8f6f 	isb	sy
 801022e:	e00a      	b.n	8010246 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8010230:	2300      	movs	r3, #0
 8010232:	2200      	movs	r2, #0
 8010234:	2100      	movs	r1, #0
 8010236:	6878      	ldr	r0, [r7, #4]
 8010238:	f000 fa36 	bl	80106a8 <xQueueGenericSend>
 801023c:	4603      	mov	r3, r0
 801023e:	2b01      	cmp	r3, #1
 8010240:	d001      	beq.n	8010246 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8010242:	23ff      	movs	r3, #255	; 0xff
 8010244:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8010246:	68fb      	ldr	r3, [r7, #12]
}
 8010248:	4618      	mov	r0, r3
 801024a:	3710      	adds	r7, #16
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}
 8010250:	e000ed04 	.word	0xe000ed04

08010254 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b082      	sub	sp, #8
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 801025c:	f7ff feca 	bl	800fff4 <inHandlerMode>
 8010260:	4603      	mov	r3, r0
 8010262:	2b00      	cmp	r3, #0
 8010264:	d001      	beq.n	801026a <osSemaphoreDelete+0x16>
    return osErrorISR;
 8010266:	2382      	movs	r3, #130	; 0x82
 8010268:	e003      	b.n	8010272 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 801026a:	6878      	ldr	r0, [r7, #4]
 801026c:	f000 fd34 	bl	8010cd8 <vQueueDelete>

  return osOK; 
 8010270:	2300      	movs	r3, #0
}
 8010272:	4618      	mov	r0, r3
 8010274:	3708      	adds	r7, #8
 8010276:	46bd      	mov	sp, r7
 8010278:	bd80      	pop	{r7, pc}

0801027a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 801027a:	b590      	push	{r4, r7, lr}
 801027c:	b085      	sub	sp, #20
 801027e:	af02      	add	r7, sp, #8
 8010280:	6078      	str	r0, [r7, #4]
 8010282:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	689b      	ldr	r3, [r3, #8]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d011      	beq.n	80102b0 <osMessageCreate+0x36>
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	68db      	ldr	r3, [r3, #12]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d00d      	beq.n	80102b0 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	6818      	ldr	r0, [r3, #0]
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	6859      	ldr	r1, [r3, #4]
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	689a      	ldr	r2, [r3, #8]
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	68db      	ldr	r3, [r3, #12]
 80102a4:	2400      	movs	r4, #0
 80102a6:	9400      	str	r4, [sp, #0]
 80102a8:	f000 f92c 	bl	8010504 <xQueueGenericCreateStatic>
 80102ac:	4603      	mov	r3, r0
 80102ae:	e008      	b.n	80102c2 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	6818      	ldr	r0, [r3, #0]
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	685b      	ldr	r3, [r3, #4]
 80102b8:	2200      	movs	r2, #0
 80102ba:	4619      	mov	r1, r3
 80102bc:	f000 f99a 	bl	80105f4 <xQueueGenericCreate>
 80102c0:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80102c2:	4618      	mov	r0, r3
 80102c4:	370c      	adds	r7, #12
 80102c6:	46bd      	mov	sp, r7
 80102c8:	bd90      	pop	{r4, r7, pc}

080102ca <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80102ca:	b480      	push	{r7}
 80102cc:	b083      	sub	sp, #12
 80102ce:	af00      	add	r7, sp, #0
 80102d0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	f103 0208 	add.w	r2, r3, #8
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	f04f 32ff 	mov.w	r2, #4294967295
 80102e2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	f103 0208 	add.w	r2, r3, #8
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	f103 0208 	add.w	r2, r3, #8
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	2200      	movs	r2, #0
 80102fc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80102fe:	bf00      	nop
 8010300:	370c      	adds	r7, #12
 8010302:	46bd      	mov	sp, r7
 8010304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010308:	4770      	bx	lr

0801030a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801030a:	b480      	push	{r7}
 801030c:	b083      	sub	sp, #12
 801030e:	af00      	add	r7, sp, #0
 8010310:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	2200      	movs	r2, #0
 8010316:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010318:	bf00      	nop
 801031a:	370c      	adds	r7, #12
 801031c:	46bd      	mov	sp, r7
 801031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010322:	4770      	bx	lr

08010324 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010324:	b480      	push	{r7}
 8010326:	b085      	sub	sp, #20
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
 801032c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	685b      	ldr	r3, [r3, #4]
 8010332:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010334:	683b      	ldr	r3, [r7, #0]
 8010336:	68fa      	ldr	r2, [r7, #12]
 8010338:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	689a      	ldr	r2, [r3, #8]
 801033e:	683b      	ldr	r3, [r7, #0]
 8010340:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	689b      	ldr	r3, [r3, #8]
 8010346:	683a      	ldr	r2, [r7, #0]
 8010348:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	683a      	ldr	r2, [r7, #0]
 801034e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010350:	683b      	ldr	r3, [r7, #0]
 8010352:	687a      	ldr	r2, [r7, #4]
 8010354:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	1c5a      	adds	r2, r3, #1
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	601a      	str	r2, [r3, #0]
}
 8010360:	bf00      	nop
 8010362:	3714      	adds	r7, #20
 8010364:	46bd      	mov	sp, r7
 8010366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036a:	4770      	bx	lr

0801036c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801036c:	b480      	push	{r7}
 801036e:	b085      	sub	sp, #20
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
 8010374:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801037c:	68bb      	ldr	r3, [r7, #8]
 801037e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010382:	d103      	bne.n	801038c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	691b      	ldr	r3, [r3, #16]
 8010388:	60fb      	str	r3, [r7, #12]
 801038a:	e00c      	b.n	80103a6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	3308      	adds	r3, #8
 8010390:	60fb      	str	r3, [r7, #12]
 8010392:	e002      	b.n	801039a <vListInsert+0x2e>
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	685b      	ldr	r3, [r3, #4]
 8010398:	60fb      	str	r3, [r7, #12]
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	685b      	ldr	r3, [r3, #4]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	68ba      	ldr	r2, [r7, #8]
 80103a2:	429a      	cmp	r2, r3
 80103a4:	d2f6      	bcs.n	8010394 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	685a      	ldr	r2, [r3, #4]
 80103aa:	683b      	ldr	r3, [r7, #0]
 80103ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80103ae:	683b      	ldr	r3, [r7, #0]
 80103b0:	685b      	ldr	r3, [r3, #4]
 80103b2:	683a      	ldr	r2, [r7, #0]
 80103b4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	68fa      	ldr	r2, [r7, #12]
 80103ba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	683a      	ldr	r2, [r7, #0]
 80103c0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80103c2:	683b      	ldr	r3, [r7, #0]
 80103c4:	687a      	ldr	r2, [r7, #4]
 80103c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	1c5a      	adds	r2, r3, #1
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	601a      	str	r2, [r3, #0]
}
 80103d2:	bf00      	nop
 80103d4:	3714      	adds	r7, #20
 80103d6:	46bd      	mov	sp, r7
 80103d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103dc:	4770      	bx	lr

080103de <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80103de:	b480      	push	{r7}
 80103e0:	b085      	sub	sp, #20
 80103e2:	af00      	add	r7, sp, #0
 80103e4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	691b      	ldr	r3, [r3, #16]
 80103ea:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	685b      	ldr	r3, [r3, #4]
 80103f0:	687a      	ldr	r2, [r7, #4]
 80103f2:	6892      	ldr	r2, [r2, #8]
 80103f4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	689b      	ldr	r3, [r3, #8]
 80103fa:	687a      	ldr	r2, [r7, #4]
 80103fc:	6852      	ldr	r2, [r2, #4]
 80103fe:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	685b      	ldr	r3, [r3, #4]
 8010404:	687a      	ldr	r2, [r7, #4]
 8010406:	429a      	cmp	r2, r3
 8010408:	d103      	bne.n	8010412 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	689a      	ldr	r2, [r3, #8]
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	2200      	movs	r2, #0
 8010416:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	1e5a      	subs	r2, r3, #1
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	681b      	ldr	r3, [r3, #0]
}
 8010426:	4618      	mov	r0, r3
 8010428:	3714      	adds	r7, #20
 801042a:	46bd      	mov	sp, r7
 801042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010430:	4770      	bx	lr
	...

08010434 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b084      	sub	sp, #16
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
 801043c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d10a      	bne.n	801045e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010448:	f04f 0350 	mov.w	r3, #80	; 0x50
 801044c:	f383 8811 	msr	BASEPRI, r3
 8010450:	f3bf 8f6f 	isb	sy
 8010454:	f3bf 8f4f 	dsb	sy
 8010458:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801045a:	bf00      	nop
 801045c:	e7fe      	b.n	801045c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801045e:	f001 fef1 	bl	8012244 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	681a      	ldr	r2, [r3, #0]
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801046a:	68f9      	ldr	r1, [r7, #12]
 801046c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801046e:	fb01 f303 	mul.w	r3, r1, r3
 8010472:	441a      	add	r2, r3
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	2200      	movs	r2, #0
 801047c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	681a      	ldr	r2, [r3, #0]
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	681a      	ldr	r2, [r3, #0]
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801048e:	3b01      	subs	r3, #1
 8010490:	68f9      	ldr	r1, [r7, #12]
 8010492:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010494:	fb01 f303 	mul.w	r3, r1, r3
 8010498:	441a      	add	r2, r3
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	22ff      	movs	r2, #255	; 0xff
 80104a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	22ff      	movs	r2, #255	; 0xff
 80104aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80104ae:	683b      	ldr	r3, [r7, #0]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d114      	bne.n	80104de <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	691b      	ldr	r3, [r3, #16]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d01a      	beq.n	80104f2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	3310      	adds	r3, #16
 80104c0:	4618      	mov	r0, r3
 80104c2:	f001 f9af 	bl	8011824 <xTaskRemoveFromEventList>
 80104c6:	4603      	mov	r3, r0
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d012      	beq.n	80104f2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80104cc:	4b0c      	ldr	r3, [pc, #48]	; (8010500 <xQueueGenericReset+0xcc>)
 80104ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104d2:	601a      	str	r2, [r3, #0]
 80104d4:	f3bf 8f4f 	dsb	sy
 80104d8:	f3bf 8f6f 	isb	sy
 80104dc:	e009      	b.n	80104f2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	3310      	adds	r3, #16
 80104e2:	4618      	mov	r0, r3
 80104e4:	f7ff fef1 	bl	80102ca <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	3324      	adds	r3, #36	; 0x24
 80104ec:	4618      	mov	r0, r3
 80104ee:	f7ff feec 	bl	80102ca <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80104f2:	f001 fed7 	bl	80122a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80104f6:	2301      	movs	r3, #1
}
 80104f8:	4618      	mov	r0, r3
 80104fa:	3710      	adds	r7, #16
 80104fc:	46bd      	mov	sp, r7
 80104fe:	bd80      	pop	{r7, pc}
 8010500:	e000ed04 	.word	0xe000ed04

08010504 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010504:	b580      	push	{r7, lr}
 8010506:	b08e      	sub	sp, #56	; 0x38
 8010508:	af02      	add	r7, sp, #8
 801050a:	60f8      	str	r0, [r7, #12]
 801050c:	60b9      	str	r1, [r7, #8]
 801050e:	607a      	str	r2, [r7, #4]
 8010510:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d10a      	bne.n	801052e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8010518:	f04f 0350 	mov.w	r3, #80	; 0x50
 801051c:	f383 8811 	msr	BASEPRI, r3
 8010520:	f3bf 8f6f 	isb	sy
 8010524:	f3bf 8f4f 	dsb	sy
 8010528:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801052a:	bf00      	nop
 801052c:	e7fe      	b.n	801052c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801052e:	683b      	ldr	r3, [r7, #0]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d10a      	bne.n	801054a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8010534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010538:	f383 8811 	msr	BASEPRI, r3
 801053c:	f3bf 8f6f 	isb	sy
 8010540:	f3bf 8f4f 	dsb	sy
 8010544:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010546:	bf00      	nop
 8010548:	e7fe      	b.n	8010548 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d002      	beq.n	8010556 <xQueueGenericCreateStatic+0x52>
 8010550:	68bb      	ldr	r3, [r7, #8]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d001      	beq.n	801055a <xQueueGenericCreateStatic+0x56>
 8010556:	2301      	movs	r3, #1
 8010558:	e000      	b.n	801055c <xQueueGenericCreateStatic+0x58>
 801055a:	2300      	movs	r3, #0
 801055c:	2b00      	cmp	r3, #0
 801055e:	d10a      	bne.n	8010576 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8010560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010564:	f383 8811 	msr	BASEPRI, r3
 8010568:	f3bf 8f6f 	isb	sy
 801056c:	f3bf 8f4f 	dsb	sy
 8010570:	623b      	str	r3, [r7, #32]
}
 8010572:	bf00      	nop
 8010574:	e7fe      	b.n	8010574 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d102      	bne.n	8010582 <xQueueGenericCreateStatic+0x7e>
 801057c:	68bb      	ldr	r3, [r7, #8]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d101      	bne.n	8010586 <xQueueGenericCreateStatic+0x82>
 8010582:	2301      	movs	r3, #1
 8010584:	e000      	b.n	8010588 <xQueueGenericCreateStatic+0x84>
 8010586:	2300      	movs	r3, #0
 8010588:	2b00      	cmp	r3, #0
 801058a:	d10a      	bne.n	80105a2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801058c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010590:	f383 8811 	msr	BASEPRI, r3
 8010594:	f3bf 8f6f 	isb	sy
 8010598:	f3bf 8f4f 	dsb	sy
 801059c:	61fb      	str	r3, [r7, #28]
}
 801059e:	bf00      	nop
 80105a0:	e7fe      	b.n	80105a0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80105a2:	2348      	movs	r3, #72	; 0x48
 80105a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80105a6:	697b      	ldr	r3, [r7, #20]
 80105a8:	2b48      	cmp	r3, #72	; 0x48
 80105aa:	d00a      	beq.n	80105c2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80105ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105b0:	f383 8811 	msr	BASEPRI, r3
 80105b4:	f3bf 8f6f 	isb	sy
 80105b8:	f3bf 8f4f 	dsb	sy
 80105bc:	61bb      	str	r3, [r7, #24]
}
 80105be:	bf00      	nop
 80105c0:	e7fe      	b.n	80105c0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80105c2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80105c4:	683b      	ldr	r3, [r7, #0]
 80105c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80105c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d00d      	beq.n	80105ea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80105ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105d0:	2201      	movs	r2, #1
 80105d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80105d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80105da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105dc:	9300      	str	r3, [sp, #0]
 80105de:	4613      	mov	r3, r2
 80105e0:	687a      	ldr	r2, [r7, #4]
 80105e2:	68b9      	ldr	r1, [r7, #8]
 80105e4:	68f8      	ldr	r0, [r7, #12]
 80105e6:	f000 f83f 	bl	8010668 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80105ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80105ec:	4618      	mov	r0, r3
 80105ee:	3730      	adds	r7, #48	; 0x30
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bd80      	pop	{r7, pc}

080105f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b08a      	sub	sp, #40	; 0x28
 80105f8:	af02      	add	r7, sp, #8
 80105fa:	60f8      	str	r0, [r7, #12]
 80105fc:	60b9      	str	r1, [r7, #8]
 80105fe:	4613      	mov	r3, r2
 8010600:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d10a      	bne.n	801061e <xQueueGenericCreate+0x2a>
	__asm volatile
 8010608:	f04f 0350 	mov.w	r3, #80	; 0x50
 801060c:	f383 8811 	msr	BASEPRI, r3
 8010610:	f3bf 8f6f 	isb	sy
 8010614:	f3bf 8f4f 	dsb	sy
 8010618:	613b      	str	r3, [r7, #16]
}
 801061a:	bf00      	nop
 801061c:	e7fe      	b.n	801061c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	68ba      	ldr	r2, [r7, #8]
 8010622:	fb02 f303 	mul.w	r3, r2, r3
 8010626:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010628:	69fb      	ldr	r3, [r7, #28]
 801062a:	3348      	adds	r3, #72	; 0x48
 801062c:	4618      	mov	r0, r3
 801062e:	f001 ff2b 	bl	8012488 <pvPortMalloc>
 8010632:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010634:	69bb      	ldr	r3, [r7, #24]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d011      	beq.n	801065e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801063a:	69bb      	ldr	r3, [r7, #24]
 801063c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801063e:	697b      	ldr	r3, [r7, #20]
 8010640:	3348      	adds	r3, #72	; 0x48
 8010642:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010644:	69bb      	ldr	r3, [r7, #24]
 8010646:	2200      	movs	r2, #0
 8010648:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801064c:	79fa      	ldrb	r2, [r7, #7]
 801064e:	69bb      	ldr	r3, [r7, #24]
 8010650:	9300      	str	r3, [sp, #0]
 8010652:	4613      	mov	r3, r2
 8010654:	697a      	ldr	r2, [r7, #20]
 8010656:	68b9      	ldr	r1, [r7, #8]
 8010658:	68f8      	ldr	r0, [r7, #12]
 801065a:	f000 f805 	bl	8010668 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801065e:	69bb      	ldr	r3, [r7, #24]
	}
 8010660:	4618      	mov	r0, r3
 8010662:	3720      	adds	r7, #32
 8010664:	46bd      	mov	sp, r7
 8010666:	bd80      	pop	{r7, pc}

08010668 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010668:	b580      	push	{r7, lr}
 801066a:	b084      	sub	sp, #16
 801066c:	af00      	add	r7, sp, #0
 801066e:	60f8      	str	r0, [r7, #12]
 8010670:	60b9      	str	r1, [r7, #8]
 8010672:	607a      	str	r2, [r7, #4]
 8010674:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010676:	68bb      	ldr	r3, [r7, #8]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d103      	bne.n	8010684 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801067c:	69bb      	ldr	r3, [r7, #24]
 801067e:	69ba      	ldr	r2, [r7, #24]
 8010680:	601a      	str	r2, [r3, #0]
 8010682:	e002      	b.n	801068a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010684:	69bb      	ldr	r3, [r7, #24]
 8010686:	687a      	ldr	r2, [r7, #4]
 8010688:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801068a:	69bb      	ldr	r3, [r7, #24]
 801068c:	68fa      	ldr	r2, [r7, #12]
 801068e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010690:	69bb      	ldr	r3, [r7, #24]
 8010692:	68ba      	ldr	r2, [r7, #8]
 8010694:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010696:	2101      	movs	r1, #1
 8010698:	69b8      	ldr	r0, [r7, #24]
 801069a:	f7ff fecb 	bl	8010434 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801069e:	bf00      	nop
 80106a0:	3710      	adds	r7, #16
 80106a2:	46bd      	mov	sp, r7
 80106a4:	bd80      	pop	{r7, pc}
	...

080106a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b08e      	sub	sp, #56	; 0x38
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	60f8      	str	r0, [r7, #12]
 80106b0:	60b9      	str	r1, [r7, #8]
 80106b2:	607a      	str	r2, [r7, #4]
 80106b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80106b6:	2300      	movs	r3, #0
 80106b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80106be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d10a      	bne.n	80106da <xQueueGenericSend+0x32>
	__asm volatile
 80106c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106c8:	f383 8811 	msr	BASEPRI, r3
 80106cc:	f3bf 8f6f 	isb	sy
 80106d0:	f3bf 8f4f 	dsb	sy
 80106d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80106d6:	bf00      	nop
 80106d8:	e7fe      	b.n	80106d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80106da:	68bb      	ldr	r3, [r7, #8]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d103      	bne.n	80106e8 <xQueueGenericSend+0x40>
 80106e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d101      	bne.n	80106ec <xQueueGenericSend+0x44>
 80106e8:	2301      	movs	r3, #1
 80106ea:	e000      	b.n	80106ee <xQueueGenericSend+0x46>
 80106ec:	2300      	movs	r3, #0
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d10a      	bne.n	8010708 <xQueueGenericSend+0x60>
	__asm volatile
 80106f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106f6:	f383 8811 	msr	BASEPRI, r3
 80106fa:	f3bf 8f6f 	isb	sy
 80106fe:	f3bf 8f4f 	dsb	sy
 8010702:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010704:	bf00      	nop
 8010706:	e7fe      	b.n	8010706 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010708:	683b      	ldr	r3, [r7, #0]
 801070a:	2b02      	cmp	r3, #2
 801070c:	d103      	bne.n	8010716 <xQueueGenericSend+0x6e>
 801070e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010712:	2b01      	cmp	r3, #1
 8010714:	d101      	bne.n	801071a <xQueueGenericSend+0x72>
 8010716:	2301      	movs	r3, #1
 8010718:	e000      	b.n	801071c <xQueueGenericSend+0x74>
 801071a:	2300      	movs	r3, #0
 801071c:	2b00      	cmp	r3, #0
 801071e:	d10a      	bne.n	8010736 <xQueueGenericSend+0x8e>
	__asm volatile
 8010720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010724:	f383 8811 	msr	BASEPRI, r3
 8010728:	f3bf 8f6f 	isb	sy
 801072c:	f3bf 8f4f 	dsb	sy
 8010730:	623b      	str	r3, [r7, #32]
}
 8010732:	bf00      	nop
 8010734:	e7fe      	b.n	8010734 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010736:	f001 fa35 	bl	8011ba4 <xTaskGetSchedulerState>
 801073a:	4603      	mov	r3, r0
 801073c:	2b00      	cmp	r3, #0
 801073e:	d102      	bne.n	8010746 <xQueueGenericSend+0x9e>
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d101      	bne.n	801074a <xQueueGenericSend+0xa2>
 8010746:	2301      	movs	r3, #1
 8010748:	e000      	b.n	801074c <xQueueGenericSend+0xa4>
 801074a:	2300      	movs	r3, #0
 801074c:	2b00      	cmp	r3, #0
 801074e:	d10a      	bne.n	8010766 <xQueueGenericSend+0xbe>
	__asm volatile
 8010750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010754:	f383 8811 	msr	BASEPRI, r3
 8010758:	f3bf 8f6f 	isb	sy
 801075c:	f3bf 8f4f 	dsb	sy
 8010760:	61fb      	str	r3, [r7, #28]
}
 8010762:	bf00      	nop
 8010764:	e7fe      	b.n	8010764 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010766:	f001 fd6d 	bl	8012244 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801076a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801076c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801076e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010772:	429a      	cmp	r2, r3
 8010774:	d302      	bcc.n	801077c <xQueueGenericSend+0xd4>
 8010776:	683b      	ldr	r3, [r7, #0]
 8010778:	2b02      	cmp	r3, #2
 801077a:	d129      	bne.n	80107d0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801077c:	683a      	ldr	r2, [r7, #0]
 801077e:	68b9      	ldr	r1, [r7, #8]
 8010780:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010782:	f000 fae4 	bl	8010d4e <prvCopyDataToQueue>
 8010786:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801078a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801078c:	2b00      	cmp	r3, #0
 801078e:	d010      	beq.n	80107b2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010792:	3324      	adds	r3, #36	; 0x24
 8010794:	4618      	mov	r0, r3
 8010796:	f001 f845 	bl	8011824 <xTaskRemoveFromEventList>
 801079a:	4603      	mov	r3, r0
 801079c:	2b00      	cmp	r3, #0
 801079e:	d013      	beq.n	80107c8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80107a0:	4b3f      	ldr	r3, [pc, #252]	; (80108a0 <xQueueGenericSend+0x1f8>)
 80107a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107a6:	601a      	str	r2, [r3, #0]
 80107a8:	f3bf 8f4f 	dsb	sy
 80107ac:	f3bf 8f6f 	isb	sy
 80107b0:	e00a      	b.n	80107c8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80107b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d007      	beq.n	80107c8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80107b8:	4b39      	ldr	r3, [pc, #228]	; (80108a0 <xQueueGenericSend+0x1f8>)
 80107ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107be:	601a      	str	r2, [r3, #0]
 80107c0:	f3bf 8f4f 	dsb	sy
 80107c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80107c8:	f001 fd6c 	bl	80122a4 <vPortExitCritical>
				return pdPASS;
 80107cc:	2301      	movs	r3, #1
 80107ce:	e063      	b.n	8010898 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d103      	bne.n	80107de <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80107d6:	f001 fd65 	bl	80122a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80107da:	2300      	movs	r3, #0
 80107dc:	e05c      	b.n	8010898 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80107de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d106      	bne.n	80107f2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80107e4:	f107 0314 	add.w	r3, r7, #20
 80107e8:	4618      	mov	r0, r3
 80107ea:	f001 f87d 	bl	80118e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80107ee:	2301      	movs	r3, #1
 80107f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80107f2:	f001 fd57 	bl	80122a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80107f6:	f000 fe2d 	bl	8011454 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80107fa:	f001 fd23 	bl	8012244 <vPortEnterCritical>
 80107fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010800:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010804:	b25b      	sxtb	r3, r3
 8010806:	f1b3 3fff 	cmp.w	r3, #4294967295
 801080a:	d103      	bne.n	8010814 <xQueueGenericSend+0x16c>
 801080c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801080e:	2200      	movs	r2, #0
 8010810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010816:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801081a:	b25b      	sxtb	r3, r3
 801081c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010820:	d103      	bne.n	801082a <xQueueGenericSend+0x182>
 8010822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010824:	2200      	movs	r2, #0
 8010826:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801082a:	f001 fd3b 	bl	80122a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801082e:	1d3a      	adds	r2, r7, #4
 8010830:	f107 0314 	add.w	r3, r7, #20
 8010834:	4611      	mov	r1, r2
 8010836:	4618      	mov	r0, r3
 8010838:	f001 f86c 	bl	8011914 <xTaskCheckForTimeOut>
 801083c:	4603      	mov	r3, r0
 801083e:	2b00      	cmp	r3, #0
 8010840:	d124      	bne.n	801088c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010842:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010844:	f000 fb7b 	bl	8010f3e <prvIsQueueFull>
 8010848:	4603      	mov	r3, r0
 801084a:	2b00      	cmp	r3, #0
 801084c:	d018      	beq.n	8010880 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801084e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010850:	3310      	adds	r3, #16
 8010852:	687a      	ldr	r2, [r7, #4]
 8010854:	4611      	mov	r1, r2
 8010856:	4618      	mov	r0, r3
 8010858:	f000 ffc0 	bl	80117dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801085c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801085e:	f000 fb06 	bl	8010e6e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010862:	f000 fe05 	bl	8011470 <xTaskResumeAll>
 8010866:	4603      	mov	r3, r0
 8010868:	2b00      	cmp	r3, #0
 801086a:	f47f af7c 	bne.w	8010766 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801086e:	4b0c      	ldr	r3, [pc, #48]	; (80108a0 <xQueueGenericSend+0x1f8>)
 8010870:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010874:	601a      	str	r2, [r3, #0]
 8010876:	f3bf 8f4f 	dsb	sy
 801087a:	f3bf 8f6f 	isb	sy
 801087e:	e772      	b.n	8010766 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010880:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010882:	f000 faf4 	bl	8010e6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010886:	f000 fdf3 	bl	8011470 <xTaskResumeAll>
 801088a:	e76c      	b.n	8010766 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801088c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801088e:	f000 faee 	bl	8010e6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010892:	f000 fded 	bl	8011470 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010896:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010898:	4618      	mov	r0, r3
 801089a:	3738      	adds	r7, #56	; 0x38
 801089c:	46bd      	mov	sp, r7
 801089e:	bd80      	pop	{r7, pc}
 80108a0:	e000ed04 	.word	0xe000ed04

080108a4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b08e      	sub	sp, #56	; 0x38
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
 80108ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80108b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d10a      	bne.n	80108ce <xQueueGiveFromISR+0x2a>
	__asm volatile
 80108b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108bc:	f383 8811 	msr	BASEPRI, r3
 80108c0:	f3bf 8f6f 	isb	sy
 80108c4:	f3bf 8f4f 	dsb	sy
 80108c8:	623b      	str	r3, [r7, #32]
}
 80108ca:	bf00      	nop
 80108cc:	e7fe      	b.n	80108cc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80108ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d00a      	beq.n	80108ec <xQueueGiveFromISR+0x48>
	__asm volatile
 80108d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108da:	f383 8811 	msr	BASEPRI, r3
 80108de:	f3bf 8f6f 	isb	sy
 80108e2:	f3bf 8f4f 	dsb	sy
 80108e6:	61fb      	str	r3, [r7, #28]
}
 80108e8:	bf00      	nop
 80108ea:	e7fe      	b.n	80108ea <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80108ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d103      	bne.n	80108fc <xQueueGiveFromISR+0x58>
 80108f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108f6:	689b      	ldr	r3, [r3, #8]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d101      	bne.n	8010900 <xQueueGiveFromISR+0x5c>
 80108fc:	2301      	movs	r3, #1
 80108fe:	e000      	b.n	8010902 <xQueueGiveFromISR+0x5e>
 8010900:	2300      	movs	r3, #0
 8010902:	2b00      	cmp	r3, #0
 8010904:	d10a      	bne.n	801091c <xQueueGiveFromISR+0x78>
	__asm volatile
 8010906:	f04f 0350 	mov.w	r3, #80	; 0x50
 801090a:	f383 8811 	msr	BASEPRI, r3
 801090e:	f3bf 8f6f 	isb	sy
 8010912:	f3bf 8f4f 	dsb	sy
 8010916:	61bb      	str	r3, [r7, #24]
}
 8010918:	bf00      	nop
 801091a:	e7fe      	b.n	801091a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801091c:	f001 fd74 	bl	8012408 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010920:	f3ef 8211 	mrs	r2, BASEPRI
 8010924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010928:	f383 8811 	msr	BASEPRI, r3
 801092c:	f3bf 8f6f 	isb	sy
 8010930:	f3bf 8f4f 	dsb	sy
 8010934:	617a      	str	r2, [r7, #20]
 8010936:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010938:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801093a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801093c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801093e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010940:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010946:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010948:	429a      	cmp	r2, r3
 801094a:	d22b      	bcs.n	80109a4 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801094c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801094e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010952:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010958:	1c5a      	adds	r2, r3, #1
 801095a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801095c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801095e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010966:	d112      	bne.n	801098e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801096a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801096c:	2b00      	cmp	r3, #0
 801096e:	d016      	beq.n	801099e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010972:	3324      	adds	r3, #36	; 0x24
 8010974:	4618      	mov	r0, r3
 8010976:	f000 ff55 	bl	8011824 <xTaskRemoveFromEventList>
 801097a:	4603      	mov	r3, r0
 801097c:	2b00      	cmp	r3, #0
 801097e:	d00e      	beq.n	801099e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010980:	683b      	ldr	r3, [r7, #0]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d00b      	beq.n	801099e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010986:	683b      	ldr	r3, [r7, #0]
 8010988:	2201      	movs	r2, #1
 801098a:	601a      	str	r2, [r3, #0]
 801098c:	e007      	b.n	801099e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801098e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010992:	3301      	adds	r3, #1
 8010994:	b2db      	uxtb	r3, r3
 8010996:	b25a      	sxtb	r2, r3
 8010998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801099a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801099e:	2301      	movs	r3, #1
 80109a0:	637b      	str	r3, [r7, #52]	; 0x34
 80109a2:	e001      	b.n	80109a8 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80109a4:	2300      	movs	r3, #0
 80109a6:	637b      	str	r3, [r7, #52]	; 0x34
 80109a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109aa:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80109b2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80109b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80109b6:	4618      	mov	r0, r3
 80109b8:	3738      	adds	r7, #56	; 0x38
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bd80      	pop	{r7, pc}
	...

080109c0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b08e      	sub	sp, #56	; 0x38
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
 80109c8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80109ca:	2300      	movs	r3, #0
 80109cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80109d2:	2300      	movs	r3, #0
 80109d4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80109d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d10a      	bne.n	80109f2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80109dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109e0:	f383 8811 	msr	BASEPRI, r3
 80109e4:	f3bf 8f6f 	isb	sy
 80109e8:	f3bf 8f4f 	dsb	sy
 80109ec:	623b      	str	r3, [r7, #32]
}
 80109ee:	bf00      	nop
 80109f0:	e7fe      	b.n	80109f0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80109f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d00a      	beq.n	8010a10 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80109fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109fe:	f383 8811 	msr	BASEPRI, r3
 8010a02:	f3bf 8f6f 	isb	sy
 8010a06:	f3bf 8f4f 	dsb	sy
 8010a0a:	61fb      	str	r3, [r7, #28]
}
 8010a0c:	bf00      	nop
 8010a0e:	e7fe      	b.n	8010a0e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010a10:	f001 f8c8 	bl	8011ba4 <xTaskGetSchedulerState>
 8010a14:	4603      	mov	r3, r0
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d102      	bne.n	8010a20 <xQueueSemaphoreTake+0x60>
 8010a1a:	683b      	ldr	r3, [r7, #0]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d101      	bne.n	8010a24 <xQueueSemaphoreTake+0x64>
 8010a20:	2301      	movs	r3, #1
 8010a22:	e000      	b.n	8010a26 <xQueueSemaphoreTake+0x66>
 8010a24:	2300      	movs	r3, #0
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d10a      	bne.n	8010a40 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8010a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a2e:	f383 8811 	msr	BASEPRI, r3
 8010a32:	f3bf 8f6f 	isb	sy
 8010a36:	f3bf 8f4f 	dsb	sy
 8010a3a:	61bb      	str	r3, [r7, #24]
}
 8010a3c:	bf00      	nop
 8010a3e:	e7fe      	b.n	8010a3e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010a40:	f001 fc00 	bl	8012244 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a48:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d024      	beq.n	8010a9a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a52:	1e5a      	subs	r2, r3, #1
 8010a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a56:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d104      	bne.n	8010a6a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010a60:	f001 fa48 	bl	8011ef4 <pvTaskIncrementMutexHeldCount>
 8010a64:	4602      	mov	r2, r0
 8010a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a68:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a6c:	691b      	ldr	r3, [r3, #16]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d00f      	beq.n	8010a92 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a74:	3310      	adds	r3, #16
 8010a76:	4618      	mov	r0, r3
 8010a78:	f000 fed4 	bl	8011824 <xTaskRemoveFromEventList>
 8010a7c:	4603      	mov	r3, r0
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d007      	beq.n	8010a92 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010a82:	4b54      	ldr	r3, [pc, #336]	; (8010bd4 <xQueueSemaphoreTake+0x214>)
 8010a84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a88:	601a      	str	r2, [r3, #0]
 8010a8a:	f3bf 8f4f 	dsb	sy
 8010a8e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010a92:	f001 fc07 	bl	80122a4 <vPortExitCritical>
				return pdPASS;
 8010a96:	2301      	movs	r3, #1
 8010a98:	e097      	b.n	8010bca <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010a9a:	683b      	ldr	r3, [r7, #0]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d111      	bne.n	8010ac4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d00a      	beq.n	8010abc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8010aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aaa:	f383 8811 	msr	BASEPRI, r3
 8010aae:	f3bf 8f6f 	isb	sy
 8010ab2:	f3bf 8f4f 	dsb	sy
 8010ab6:	617b      	str	r3, [r7, #20]
}
 8010ab8:	bf00      	nop
 8010aba:	e7fe      	b.n	8010aba <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010abc:	f001 fbf2 	bl	80122a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	e082      	b.n	8010bca <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d106      	bne.n	8010ad8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010aca:	f107 030c 	add.w	r3, r7, #12
 8010ace:	4618      	mov	r0, r3
 8010ad0:	f000 ff0a 	bl	80118e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010ad4:	2301      	movs	r3, #1
 8010ad6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010ad8:	f001 fbe4 	bl	80122a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010adc:	f000 fcba 	bl	8011454 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010ae0:	f001 fbb0 	bl	8012244 <vPortEnterCritical>
 8010ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ae6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010aea:	b25b      	sxtb	r3, r3
 8010aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010af0:	d103      	bne.n	8010afa <xQueueSemaphoreTake+0x13a>
 8010af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010af4:	2200      	movs	r2, #0
 8010af6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010afc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010b00:	b25b      	sxtb	r3, r3
 8010b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b06:	d103      	bne.n	8010b10 <xQueueSemaphoreTake+0x150>
 8010b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010b10:	f001 fbc8 	bl	80122a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010b14:	463a      	mov	r2, r7
 8010b16:	f107 030c 	add.w	r3, r7, #12
 8010b1a:	4611      	mov	r1, r2
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f000 fef9 	bl	8011914 <xTaskCheckForTimeOut>
 8010b22:	4603      	mov	r3, r0
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d132      	bne.n	8010b8e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010b28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010b2a:	f000 f9f2 	bl	8010f12 <prvIsQueueEmpty>
 8010b2e:	4603      	mov	r3, r0
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d026      	beq.n	8010b82 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d109      	bne.n	8010b50 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8010b3c:	f001 fb82 	bl	8012244 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b42:	689b      	ldr	r3, [r3, #8]
 8010b44:	4618      	mov	r0, r3
 8010b46:	f001 f84b 	bl	8011be0 <xTaskPriorityInherit>
 8010b4a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010b4c:	f001 fbaa 	bl	80122a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b52:	3324      	adds	r3, #36	; 0x24
 8010b54:	683a      	ldr	r2, [r7, #0]
 8010b56:	4611      	mov	r1, r2
 8010b58:	4618      	mov	r0, r3
 8010b5a:	f000 fe3f 	bl	80117dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010b5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010b60:	f000 f985 	bl	8010e6e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010b64:	f000 fc84 	bl	8011470 <xTaskResumeAll>
 8010b68:	4603      	mov	r3, r0
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	f47f af68 	bne.w	8010a40 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8010b70:	4b18      	ldr	r3, [pc, #96]	; (8010bd4 <xQueueSemaphoreTake+0x214>)
 8010b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b76:	601a      	str	r2, [r3, #0]
 8010b78:	f3bf 8f4f 	dsb	sy
 8010b7c:	f3bf 8f6f 	isb	sy
 8010b80:	e75e      	b.n	8010a40 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010b82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010b84:	f000 f973 	bl	8010e6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010b88:	f000 fc72 	bl	8011470 <xTaskResumeAll>
 8010b8c:	e758      	b.n	8010a40 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010b8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010b90:	f000 f96d 	bl	8010e6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010b94:	f000 fc6c 	bl	8011470 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010b98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010b9a:	f000 f9ba 	bl	8010f12 <prvIsQueueEmpty>
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	f43f af4d 	beq.w	8010a40 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d00d      	beq.n	8010bc8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8010bac:	f001 fb4a 	bl	8012244 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010bb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010bb2:	f000 f8b4 	bl	8010d1e <prvGetDisinheritPriorityAfterTimeout>
 8010bb6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bba:	689b      	ldr	r3, [r3, #8]
 8010bbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	f001 f90a 	bl	8011dd8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010bc4:	f001 fb6e 	bl	80122a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010bc8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010bca:	4618      	mov	r0, r3
 8010bcc:	3738      	adds	r7, #56	; 0x38
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	bd80      	pop	{r7, pc}
 8010bd2:	bf00      	nop
 8010bd4:	e000ed04 	.word	0xe000ed04

08010bd8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b08e      	sub	sp, #56	; 0x38
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	60f8      	str	r0, [r7, #12]
 8010be0:	60b9      	str	r1, [r7, #8]
 8010be2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d10a      	bne.n	8010c04 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8010bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bf2:	f383 8811 	msr	BASEPRI, r3
 8010bf6:	f3bf 8f6f 	isb	sy
 8010bfa:	f3bf 8f4f 	dsb	sy
 8010bfe:	623b      	str	r3, [r7, #32]
}
 8010c00:	bf00      	nop
 8010c02:	e7fe      	b.n	8010c02 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010c04:	68bb      	ldr	r3, [r7, #8]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d103      	bne.n	8010c12 <xQueueReceiveFromISR+0x3a>
 8010c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d101      	bne.n	8010c16 <xQueueReceiveFromISR+0x3e>
 8010c12:	2301      	movs	r3, #1
 8010c14:	e000      	b.n	8010c18 <xQueueReceiveFromISR+0x40>
 8010c16:	2300      	movs	r3, #0
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d10a      	bne.n	8010c32 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8010c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c20:	f383 8811 	msr	BASEPRI, r3
 8010c24:	f3bf 8f6f 	isb	sy
 8010c28:	f3bf 8f4f 	dsb	sy
 8010c2c:	61fb      	str	r3, [r7, #28]
}
 8010c2e:	bf00      	nop
 8010c30:	e7fe      	b.n	8010c30 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010c32:	f001 fbe9 	bl	8012408 <vPortValidateInterruptPriority>
	__asm volatile
 8010c36:	f3ef 8211 	mrs	r2, BASEPRI
 8010c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c3e:	f383 8811 	msr	BASEPRI, r3
 8010c42:	f3bf 8f6f 	isb	sy
 8010c46:	f3bf 8f4f 	dsb	sy
 8010c4a:	61ba      	str	r2, [r7, #24]
 8010c4c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010c4e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010c50:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c56:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d02f      	beq.n	8010cbe <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010c64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010c68:	68b9      	ldr	r1, [r7, #8]
 8010c6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c6c:	f000 f8d9 	bl	8010e22 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c72:	1e5a      	subs	r2, r3, #1
 8010c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c76:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010c78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c80:	d112      	bne.n	8010ca8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c84:	691b      	ldr	r3, [r3, #16]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d016      	beq.n	8010cb8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c8c:	3310      	adds	r3, #16
 8010c8e:	4618      	mov	r0, r3
 8010c90:	f000 fdc8 	bl	8011824 <xTaskRemoveFromEventList>
 8010c94:	4603      	mov	r3, r0
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d00e      	beq.n	8010cb8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d00b      	beq.n	8010cb8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	2201      	movs	r2, #1
 8010ca4:	601a      	str	r2, [r3, #0]
 8010ca6:	e007      	b.n	8010cb8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010ca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010cac:	3301      	adds	r3, #1
 8010cae:	b2db      	uxtb	r3, r3
 8010cb0:	b25a      	sxtb	r2, r3
 8010cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010cb8:	2301      	movs	r3, #1
 8010cba:	637b      	str	r3, [r7, #52]	; 0x34
 8010cbc:	e001      	b.n	8010cc2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8010cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cc4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010cc6:	693b      	ldr	r3, [r7, #16]
 8010cc8:	f383 8811 	msr	BASEPRI, r3
}
 8010ccc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	3738      	adds	r7, #56	; 0x38
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	bd80      	pop	{r7, pc}

08010cd8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b084      	sub	sp, #16
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d10a      	bne.n	8010d00 <vQueueDelete+0x28>
	__asm volatile
 8010cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cee:	f383 8811 	msr	BASEPRI, r3
 8010cf2:	f3bf 8f6f 	isb	sy
 8010cf6:	f3bf 8f4f 	dsb	sy
 8010cfa:	60bb      	str	r3, [r7, #8]
}
 8010cfc:	bf00      	nop
 8010cfe:	e7fe      	b.n	8010cfe <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010d00:	68f8      	ldr	r0, [r7, #12]
 8010d02:	f000 f935 	bl	8010f70 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d102      	bne.n	8010d16 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8010d10:	68f8      	ldr	r0, [r7, #12]
 8010d12:	f001 fc85 	bl	8012620 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010d16:	bf00      	nop
 8010d18:	3710      	adds	r7, #16
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	bd80      	pop	{r7, pc}

08010d1e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010d1e:	b480      	push	{r7}
 8010d20:	b085      	sub	sp, #20
 8010d22:	af00      	add	r7, sp, #0
 8010d24:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d006      	beq.n	8010d3c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	f1c3 0307 	rsb	r3, r3, #7
 8010d38:	60fb      	str	r3, [r7, #12]
 8010d3a:	e001      	b.n	8010d40 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010d40:	68fb      	ldr	r3, [r7, #12]
	}
 8010d42:	4618      	mov	r0, r3
 8010d44:	3714      	adds	r7, #20
 8010d46:	46bd      	mov	sp, r7
 8010d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4c:	4770      	bx	lr

08010d4e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010d4e:	b580      	push	{r7, lr}
 8010d50:	b086      	sub	sp, #24
 8010d52:	af00      	add	r7, sp, #0
 8010d54:	60f8      	str	r0, [r7, #12]
 8010d56:	60b9      	str	r1, [r7, #8]
 8010d58:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d62:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d10d      	bne.n	8010d88 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d14d      	bne.n	8010e10 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	689b      	ldr	r3, [r3, #8]
 8010d78:	4618      	mov	r0, r3
 8010d7a:	f000 ffa7 	bl	8011ccc <xTaskPriorityDisinherit>
 8010d7e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	2200      	movs	r2, #0
 8010d84:	609a      	str	r2, [r3, #8]
 8010d86:	e043      	b.n	8010e10 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d119      	bne.n	8010dc2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	6858      	ldr	r0, [r3, #4]
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d96:	461a      	mov	r2, r3
 8010d98:	68b9      	ldr	r1, [r7, #8]
 8010d9a:	f002 fcca 	bl	8013732 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	685a      	ldr	r2, [r3, #4]
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010da6:	441a      	add	r2, r3
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	685a      	ldr	r2, [r3, #4]
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	689b      	ldr	r3, [r3, #8]
 8010db4:	429a      	cmp	r2, r3
 8010db6:	d32b      	bcc.n	8010e10 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	681a      	ldr	r2, [r3, #0]
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	605a      	str	r2, [r3, #4]
 8010dc0:	e026      	b.n	8010e10 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	68d8      	ldr	r0, [r3, #12]
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dca:	461a      	mov	r2, r3
 8010dcc:	68b9      	ldr	r1, [r7, #8]
 8010dce:	f002 fcb0 	bl	8013732 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	68da      	ldr	r2, [r3, #12]
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dda:	425b      	negs	r3, r3
 8010ddc:	441a      	add	r2, r3
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	68da      	ldr	r2, [r3, #12]
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	429a      	cmp	r2, r3
 8010dec:	d207      	bcs.n	8010dfe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	689a      	ldr	r2, [r3, #8]
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010df6:	425b      	negs	r3, r3
 8010df8:	441a      	add	r2, r3
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	2b02      	cmp	r3, #2
 8010e02:	d105      	bne.n	8010e10 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010e04:	693b      	ldr	r3, [r7, #16]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d002      	beq.n	8010e10 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010e0a:	693b      	ldr	r3, [r7, #16]
 8010e0c:	3b01      	subs	r3, #1
 8010e0e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010e10:	693b      	ldr	r3, [r7, #16]
 8010e12:	1c5a      	adds	r2, r3, #1
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010e18:	697b      	ldr	r3, [r7, #20]
}
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	3718      	adds	r7, #24
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bd80      	pop	{r7, pc}

08010e22 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010e22:	b580      	push	{r7, lr}
 8010e24:	b082      	sub	sp, #8
 8010e26:	af00      	add	r7, sp, #0
 8010e28:	6078      	str	r0, [r7, #4]
 8010e2a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d018      	beq.n	8010e66 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	68da      	ldr	r2, [r3, #12]
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e3c:	441a      	add	r2, r3
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	68da      	ldr	r2, [r3, #12]
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	689b      	ldr	r3, [r3, #8]
 8010e4a:	429a      	cmp	r2, r3
 8010e4c:	d303      	bcc.n	8010e56 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	681a      	ldr	r2, [r3, #0]
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	68d9      	ldr	r1, [r3, #12]
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e5e:	461a      	mov	r2, r3
 8010e60:	6838      	ldr	r0, [r7, #0]
 8010e62:	f002 fc66 	bl	8013732 <memcpy>
	}
}
 8010e66:	bf00      	nop
 8010e68:	3708      	adds	r7, #8
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	bd80      	pop	{r7, pc}

08010e6e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010e6e:	b580      	push	{r7, lr}
 8010e70:	b084      	sub	sp, #16
 8010e72:	af00      	add	r7, sp, #0
 8010e74:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010e76:	f001 f9e5 	bl	8012244 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010e80:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010e82:	e011      	b.n	8010ea8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d012      	beq.n	8010eb2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	3324      	adds	r3, #36	; 0x24
 8010e90:	4618      	mov	r0, r3
 8010e92:	f000 fcc7 	bl	8011824 <xTaskRemoveFromEventList>
 8010e96:	4603      	mov	r3, r0
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d001      	beq.n	8010ea0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010e9c:	f000 fd9c 	bl	80119d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010ea0:	7bfb      	ldrb	r3, [r7, #15]
 8010ea2:	3b01      	subs	r3, #1
 8010ea4:	b2db      	uxtb	r3, r3
 8010ea6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010ea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	dce9      	bgt.n	8010e84 <prvUnlockQueue+0x16>
 8010eb0:	e000      	b.n	8010eb4 <prvUnlockQueue+0x46>
					break;
 8010eb2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	22ff      	movs	r2, #255	; 0xff
 8010eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010ebc:	f001 f9f2 	bl	80122a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010ec0:	f001 f9c0 	bl	8012244 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010eca:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010ecc:	e011      	b.n	8010ef2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	691b      	ldr	r3, [r3, #16]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d012      	beq.n	8010efc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	3310      	adds	r3, #16
 8010eda:	4618      	mov	r0, r3
 8010edc:	f000 fca2 	bl	8011824 <xTaskRemoveFromEventList>
 8010ee0:	4603      	mov	r3, r0
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d001      	beq.n	8010eea <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010ee6:	f000 fd77 	bl	80119d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010eea:	7bbb      	ldrb	r3, [r7, #14]
 8010eec:	3b01      	subs	r3, #1
 8010eee:	b2db      	uxtb	r3, r3
 8010ef0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010ef2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	dce9      	bgt.n	8010ece <prvUnlockQueue+0x60>
 8010efa:	e000      	b.n	8010efe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010efc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	22ff      	movs	r2, #255	; 0xff
 8010f02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010f06:	f001 f9cd 	bl	80122a4 <vPortExitCritical>
}
 8010f0a:	bf00      	nop
 8010f0c:	3710      	adds	r7, #16
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	bd80      	pop	{r7, pc}

08010f12 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010f12:	b580      	push	{r7, lr}
 8010f14:	b084      	sub	sp, #16
 8010f16:	af00      	add	r7, sp, #0
 8010f18:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010f1a:	f001 f993 	bl	8012244 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d102      	bne.n	8010f2c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010f26:	2301      	movs	r3, #1
 8010f28:	60fb      	str	r3, [r7, #12]
 8010f2a:	e001      	b.n	8010f30 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010f2c:	2300      	movs	r3, #0
 8010f2e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010f30:	f001 f9b8 	bl	80122a4 <vPortExitCritical>

	return xReturn;
 8010f34:	68fb      	ldr	r3, [r7, #12]
}
 8010f36:	4618      	mov	r0, r3
 8010f38:	3710      	adds	r7, #16
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	bd80      	pop	{r7, pc}

08010f3e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010f3e:	b580      	push	{r7, lr}
 8010f40:	b084      	sub	sp, #16
 8010f42:	af00      	add	r7, sp, #0
 8010f44:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010f46:	f001 f97d 	bl	8012244 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f52:	429a      	cmp	r2, r3
 8010f54:	d102      	bne.n	8010f5c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010f56:	2301      	movs	r3, #1
 8010f58:	60fb      	str	r3, [r7, #12]
 8010f5a:	e001      	b.n	8010f60 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010f60:	f001 f9a0 	bl	80122a4 <vPortExitCritical>

	return xReturn;
 8010f64:	68fb      	ldr	r3, [r7, #12]
}
 8010f66:	4618      	mov	r0, r3
 8010f68:	3710      	adds	r7, #16
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	bd80      	pop	{r7, pc}
	...

08010f70 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010f70:	b480      	push	{r7}
 8010f72:	b085      	sub	sp, #20
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010f78:	2300      	movs	r3, #0
 8010f7a:	60fb      	str	r3, [r7, #12]
 8010f7c:	e016      	b.n	8010fac <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010f7e:	4a10      	ldr	r2, [pc, #64]	; (8010fc0 <vQueueUnregisterQueue+0x50>)
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	00db      	lsls	r3, r3, #3
 8010f84:	4413      	add	r3, r2
 8010f86:	685b      	ldr	r3, [r3, #4]
 8010f88:	687a      	ldr	r2, [r7, #4]
 8010f8a:	429a      	cmp	r2, r3
 8010f8c:	d10b      	bne.n	8010fa6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010f8e:	4a0c      	ldr	r2, [pc, #48]	; (8010fc0 <vQueueUnregisterQueue+0x50>)
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	2100      	movs	r1, #0
 8010f94:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010f98:	4a09      	ldr	r2, [pc, #36]	; (8010fc0 <vQueueUnregisterQueue+0x50>)
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	00db      	lsls	r3, r3, #3
 8010f9e:	4413      	add	r3, r2
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	605a      	str	r2, [r3, #4]
				break;
 8010fa4:	e006      	b.n	8010fb4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	3301      	adds	r3, #1
 8010faa:	60fb      	str	r3, [r7, #12]
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	2b07      	cmp	r3, #7
 8010fb0:	d9e5      	bls.n	8010f7e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010fb2:	bf00      	nop
 8010fb4:	bf00      	nop
 8010fb6:	3714      	adds	r7, #20
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fbe:	4770      	bx	lr
 8010fc0:	20002aa0 	.word	0x20002aa0

08010fc4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010fc4:	b580      	push	{r7, lr}
 8010fc6:	b08e      	sub	sp, #56	; 0x38
 8010fc8:	af04      	add	r7, sp, #16
 8010fca:	60f8      	str	r0, [r7, #12]
 8010fcc:	60b9      	str	r1, [r7, #8]
 8010fce:	607a      	str	r2, [r7, #4]
 8010fd0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d10a      	bne.n	8010fee <xTaskCreateStatic+0x2a>
	__asm volatile
 8010fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fdc:	f383 8811 	msr	BASEPRI, r3
 8010fe0:	f3bf 8f6f 	isb	sy
 8010fe4:	f3bf 8f4f 	dsb	sy
 8010fe8:	623b      	str	r3, [r7, #32]
}
 8010fea:	bf00      	nop
 8010fec:	e7fe      	b.n	8010fec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d10a      	bne.n	801100a <xTaskCreateStatic+0x46>
	__asm volatile
 8010ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ff8:	f383 8811 	msr	BASEPRI, r3
 8010ffc:	f3bf 8f6f 	isb	sy
 8011000:	f3bf 8f4f 	dsb	sy
 8011004:	61fb      	str	r3, [r7, #28]
}
 8011006:	bf00      	nop
 8011008:	e7fe      	b.n	8011008 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801100a:	23a0      	movs	r3, #160	; 0xa0
 801100c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801100e:	693b      	ldr	r3, [r7, #16]
 8011010:	2ba0      	cmp	r3, #160	; 0xa0
 8011012:	d00a      	beq.n	801102a <xTaskCreateStatic+0x66>
	__asm volatile
 8011014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011018:	f383 8811 	msr	BASEPRI, r3
 801101c:	f3bf 8f6f 	isb	sy
 8011020:	f3bf 8f4f 	dsb	sy
 8011024:	61bb      	str	r3, [r7, #24]
}
 8011026:	bf00      	nop
 8011028:	e7fe      	b.n	8011028 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801102a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801102c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801102e:	2b00      	cmp	r3, #0
 8011030:	d01e      	beq.n	8011070 <xTaskCreateStatic+0xac>
 8011032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011034:	2b00      	cmp	r3, #0
 8011036:	d01b      	beq.n	8011070 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801103a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801103e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011040:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011044:	2202      	movs	r2, #2
 8011046:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801104a:	2300      	movs	r3, #0
 801104c:	9303      	str	r3, [sp, #12]
 801104e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011050:	9302      	str	r3, [sp, #8]
 8011052:	f107 0314 	add.w	r3, r7, #20
 8011056:	9301      	str	r3, [sp, #4]
 8011058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801105a:	9300      	str	r3, [sp, #0]
 801105c:	683b      	ldr	r3, [r7, #0]
 801105e:	687a      	ldr	r2, [r7, #4]
 8011060:	68b9      	ldr	r1, [r7, #8]
 8011062:	68f8      	ldr	r0, [r7, #12]
 8011064:	f000 f850 	bl	8011108 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011068:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801106a:	f000 f8eb 	bl	8011244 <prvAddNewTaskToReadyList>
 801106e:	e001      	b.n	8011074 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8011070:	2300      	movs	r3, #0
 8011072:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011074:	697b      	ldr	r3, [r7, #20]
	}
 8011076:	4618      	mov	r0, r3
 8011078:	3728      	adds	r7, #40	; 0x28
 801107a:	46bd      	mov	sp, r7
 801107c:	bd80      	pop	{r7, pc}

0801107e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801107e:	b580      	push	{r7, lr}
 8011080:	b08c      	sub	sp, #48	; 0x30
 8011082:	af04      	add	r7, sp, #16
 8011084:	60f8      	str	r0, [r7, #12]
 8011086:	60b9      	str	r1, [r7, #8]
 8011088:	603b      	str	r3, [r7, #0]
 801108a:	4613      	mov	r3, r2
 801108c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801108e:	88fb      	ldrh	r3, [r7, #6]
 8011090:	009b      	lsls	r3, r3, #2
 8011092:	4618      	mov	r0, r3
 8011094:	f001 f9f8 	bl	8012488 <pvPortMalloc>
 8011098:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801109a:	697b      	ldr	r3, [r7, #20]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d00e      	beq.n	80110be <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80110a0:	20a0      	movs	r0, #160	; 0xa0
 80110a2:	f001 f9f1 	bl	8012488 <pvPortMalloc>
 80110a6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80110a8:	69fb      	ldr	r3, [r7, #28]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d003      	beq.n	80110b6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80110ae:	69fb      	ldr	r3, [r7, #28]
 80110b0:	697a      	ldr	r2, [r7, #20]
 80110b2:	631a      	str	r2, [r3, #48]	; 0x30
 80110b4:	e005      	b.n	80110c2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80110b6:	6978      	ldr	r0, [r7, #20]
 80110b8:	f001 fab2 	bl	8012620 <vPortFree>
 80110bc:	e001      	b.n	80110c2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80110be:	2300      	movs	r3, #0
 80110c0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80110c2:	69fb      	ldr	r3, [r7, #28]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d017      	beq.n	80110f8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80110c8:	69fb      	ldr	r3, [r7, #28]
 80110ca:	2200      	movs	r2, #0
 80110cc:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80110d0:	88fa      	ldrh	r2, [r7, #6]
 80110d2:	2300      	movs	r3, #0
 80110d4:	9303      	str	r3, [sp, #12]
 80110d6:	69fb      	ldr	r3, [r7, #28]
 80110d8:	9302      	str	r3, [sp, #8]
 80110da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110dc:	9301      	str	r3, [sp, #4]
 80110de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110e0:	9300      	str	r3, [sp, #0]
 80110e2:	683b      	ldr	r3, [r7, #0]
 80110e4:	68b9      	ldr	r1, [r7, #8]
 80110e6:	68f8      	ldr	r0, [r7, #12]
 80110e8:	f000 f80e 	bl	8011108 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80110ec:	69f8      	ldr	r0, [r7, #28]
 80110ee:	f000 f8a9 	bl	8011244 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80110f2:	2301      	movs	r3, #1
 80110f4:	61bb      	str	r3, [r7, #24]
 80110f6:	e002      	b.n	80110fe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80110f8:	f04f 33ff 	mov.w	r3, #4294967295
 80110fc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80110fe:	69bb      	ldr	r3, [r7, #24]
	}
 8011100:	4618      	mov	r0, r3
 8011102:	3720      	adds	r7, #32
 8011104:	46bd      	mov	sp, r7
 8011106:	bd80      	pop	{r7, pc}

08011108 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b088      	sub	sp, #32
 801110c:	af00      	add	r7, sp, #0
 801110e:	60f8      	str	r0, [r7, #12]
 8011110:	60b9      	str	r1, [r7, #8]
 8011112:	607a      	str	r2, [r7, #4]
 8011114:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011120:	3b01      	subs	r3, #1
 8011122:	009b      	lsls	r3, r3, #2
 8011124:	4413      	add	r3, r2
 8011126:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011128:	69bb      	ldr	r3, [r7, #24]
 801112a:	f023 0307 	bic.w	r3, r3, #7
 801112e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011130:	69bb      	ldr	r3, [r7, #24]
 8011132:	f003 0307 	and.w	r3, r3, #7
 8011136:	2b00      	cmp	r3, #0
 8011138:	d00a      	beq.n	8011150 <prvInitialiseNewTask+0x48>
	__asm volatile
 801113a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801113e:	f383 8811 	msr	BASEPRI, r3
 8011142:	f3bf 8f6f 	isb	sy
 8011146:	f3bf 8f4f 	dsb	sy
 801114a:	617b      	str	r3, [r7, #20]
}
 801114c:	bf00      	nop
 801114e:	e7fe      	b.n	801114e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011150:	68bb      	ldr	r3, [r7, #8]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d01f      	beq.n	8011196 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011156:	2300      	movs	r3, #0
 8011158:	61fb      	str	r3, [r7, #28]
 801115a:	e012      	b.n	8011182 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801115c:	68ba      	ldr	r2, [r7, #8]
 801115e:	69fb      	ldr	r3, [r7, #28]
 8011160:	4413      	add	r3, r2
 8011162:	7819      	ldrb	r1, [r3, #0]
 8011164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011166:	69fb      	ldr	r3, [r7, #28]
 8011168:	4413      	add	r3, r2
 801116a:	3334      	adds	r3, #52	; 0x34
 801116c:	460a      	mov	r2, r1
 801116e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011170:	68ba      	ldr	r2, [r7, #8]
 8011172:	69fb      	ldr	r3, [r7, #28]
 8011174:	4413      	add	r3, r2
 8011176:	781b      	ldrb	r3, [r3, #0]
 8011178:	2b00      	cmp	r3, #0
 801117a:	d006      	beq.n	801118a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801117c:	69fb      	ldr	r3, [r7, #28]
 801117e:	3301      	adds	r3, #1
 8011180:	61fb      	str	r3, [r7, #28]
 8011182:	69fb      	ldr	r3, [r7, #28]
 8011184:	2b0f      	cmp	r3, #15
 8011186:	d9e9      	bls.n	801115c <prvInitialiseNewTask+0x54>
 8011188:	e000      	b.n	801118c <prvInitialiseNewTask+0x84>
			{
				break;
 801118a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801118c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801118e:	2200      	movs	r2, #0
 8011190:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011194:	e003      	b.n	801119e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011198:	2200      	movs	r2, #0
 801119a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801119e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111a0:	2b06      	cmp	r3, #6
 80111a2:	d901      	bls.n	80111a8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80111a4:	2306      	movs	r3, #6
 80111a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80111a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80111ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80111ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80111b2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80111b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111b6:	2200      	movs	r2, #0
 80111b8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80111ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111bc:	3304      	adds	r3, #4
 80111be:	4618      	mov	r0, r3
 80111c0:	f7ff f8a3 	bl	801030a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80111c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111c6:	3318      	adds	r3, #24
 80111c8:	4618      	mov	r0, r3
 80111ca:	f7ff f89e 	bl	801030a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80111ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80111d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80111d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111d6:	f1c3 0207 	rsb	r2, r3, #7
 80111da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80111de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80111e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80111e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111e6:	2200      	movs	r2, #0
 80111e8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80111ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111ee:	2200      	movs	r2, #0
 80111f0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80111f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111f6:	334c      	adds	r3, #76	; 0x4c
 80111f8:	224c      	movs	r2, #76	; 0x4c
 80111fa:	2100      	movs	r1, #0
 80111fc:	4618      	mov	r0, r3
 80111fe:	f002 f9c3 	bl	8013588 <memset>
 8011202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011204:	4a0c      	ldr	r2, [pc, #48]	; (8011238 <prvInitialiseNewTask+0x130>)
 8011206:	651a      	str	r2, [r3, #80]	; 0x50
 8011208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801120a:	4a0c      	ldr	r2, [pc, #48]	; (801123c <prvInitialiseNewTask+0x134>)
 801120c:	655a      	str	r2, [r3, #84]	; 0x54
 801120e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011210:	4a0b      	ldr	r2, [pc, #44]	; (8011240 <prvInitialiseNewTask+0x138>)
 8011212:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011214:	683a      	ldr	r2, [r7, #0]
 8011216:	68f9      	ldr	r1, [r7, #12]
 8011218:	69b8      	ldr	r0, [r7, #24]
 801121a:	f000 fee5 	bl	8011fe8 <pxPortInitialiseStack>
 801121e:	4602      	mov	r2, r0
 8011220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011222:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011226:	2b00      	cmp	r3, #0
 8011228:	d002      	beq.n	8011230 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801122a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801122c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801122e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011230:	bf00      	nop
 8011232:	3720      	adds	r7, #32
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}
 8011238:	20006834 	.word	0x20006834
 801123c:	2000689c 	.word	0x2000689c
 8011240:	20006904 	.word	0x20006904

08011244 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011244:	b580      	push	{r7, lr}
 8011246:	b082      	sub	sp, #8
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801124c:	f000 fffa 	bl	8012244 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011250:	4b2a      	ldr	r3, [pc, #168]	; (80112fc <prvAddNewTaskToReadyList+0xb8>)
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	3301      	adds	r3, #1
 8011256:	4a29      	ldr	r2, [pc, #164]	; (80112fc <prvAddNewTaskToReadyList+0xb8>)
 8011258:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801125a:	4b29      	ldr	r3, [pc, #164]	; (8011300 <prvAddNewTaskToReadyList+0xbc>)
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d109      	bne.n	8011276 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011262:	4a27      	ldr	r2, [pc, #156]	; (8011300 <prvAddNewTaskToReadyList+0xbc>)
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011268:	4b24      	ldr	r3, [pc, #144]	; (80112fc <prvAddNewTaskToReadyList+0xb8>)
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	2b01      	cmp	r3, #1
 801126e:	d110      	bne.n	8011292 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011270:	f000 fbd6 	bl	8011a20 <prvInitialiseTaskLists>
 8011274:	e00d      	b.n	8011292 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011276:	4b23      	ldr	r3, [pc, #140]	; (8011304 <prvAddNewTaskToReadyList+0xc0>)
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d109      	bne.n	8011292 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801127e:	4b20      	ldr	r3, [pc, #128]	; (8011300 <prvAddNewTaskToReadyList+0xbc>)
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011288:	429a      	cmp	r2, r3
 801128a:	d802      	bhi.n	8011292 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801128c:	4a1c      	ldr	r2, [pc, #112]	; (8011300 <prvAddNewTaskToReadyList+0xbc>)
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011292:	4b1d      	ldr	r3, [pc, #116]	; (8011308 <prvAddNewTaskToReadyList+0xc4>)
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	3301      	adds	r3, #1
 8011298:	4a1b      	ldr	r2, [pc, #108]	; (8011308 <prvAddNewTaskToReadyList+0xc4>)
 801129a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112a0:	2201      	movs	r2, #1
 80112a2:	409a      	lsls	r2, r3
 80112a4:	4b19      	ldr	r3, [pc, #100]	; (801130c <prvAddNewTaskToReadyList+0xc8>)
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	4313      	orrs	r3, r2
 80112aa:	4a18      	ldr	r2, [pc, #96]	; (801130c <prvAddNewTaskToReadyList+0xc8>)
 80112ac:	6013      	str	r3, [r2, #0]
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112b2:	4613      	mov	r3, r2
 80112b4:	009b      	lsls	r3, r3, #2
 80112b6:	4413      	add	r3, r2
 80112b8:	009b      	lsls	r3, r3, #2
 80112ba:	4a15      	ldr	r2, [pc, #84]	; (8011310 <prvAddNewTaskToReadyList+0xcc>)
 80112bc:	441a      	add	r2, r3
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	3304      	adds	r3, #4
 80112c2:	4619      	mov	r1, r3
 80112c4:	4610      	mov	r0, r2
 80112c6:	f7ff f82d 	bl	8010324 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80112ca:	f000 ffeb 	bl	80122a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80112ce:	4b0d      	ldr	r3, [pc, #52]	; (8011304 <prvAddNewTaskToReadyList+0xc0>)
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d00e      	beq.n	80112f4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80112d6:	4b0a      	ldr	r3, [pc, #40]	; (8011300 <prvAddNewTaskToReadyList+0xbc>)
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112e0:	429a      	cmp	r2, r3
 80112e2:	d207      	bcs.n	80112f4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80112e4:	4b0b      	ldr	r3, [pc, #44]	; (8011314 <prvAddNewTaskToReadyList+0xd0>)
 80112e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80112ea:	601a      	str	r2, [r3, #0]
 80112ec:	f3bf 8f4f 	dsb	sy
 80112f0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80112f4:	bf00      	nop
 80112f6:	3708      	adds	r7, #8
 80112f8:	46bd      	mov	sp, r7
 80112fa:	bd80      	pop	{r7, pc}
 80112fc:	20002be0 	.word	0x20002be0
 8011300:	20002ae0 	.word	0x20002ae0
 8011304:	20002bec 	.word	0x20002bec
 8011308:	20002bfc 	.word	0x20002bfc
 801130c:	20002be8 	.word	0x20002be8
 8011310:	20002ae4 	.word	0x20002ae4
 8011314:	e000ed04 	.word	0xe000ed04

08011318 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011318:	b580      	push	{r7, lr}
 801131a:	b084      	sub	sp, #16
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011320:	2300      	movs	r3, #0
 8011322:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d017      	beq.n	801135a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801132a:	4b13      	ldr	r3, [pc, #76]	; (8011378 <vTaskDelay+0x60>)
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d00a      	beq.n	8011348 <vTaskDelay+0x30>
	__asm volatile
 8011332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011336:	f383 8811 	msr	BASEPRI, r3
 801133a:	f3bf 8f6f 	isb	sy
 801133e:	f3bf 8f4f 	dsb	sy
 8011342:	60bb      	str	r3, [r7, #8]
}
 8011344:	bf00      	nop
 8011346:	e7fe      	b.n	8011346 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011348:	f000 f884 	bl	8011454 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801134c:	2100      	movs	r1, #0
 801134e:	6878      	ldr	r0, [r7, #4]
 8011350:	f000 fde4 	bl	8011f1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011354:	f000 f88c 	bl	8011470 <xTaskResumeAll>
 8011358:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d107      	bne.n	8011370 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8011360:	4b06      	ldr	r3, [pc, #24]	; (801137c <vTaskDelay+0x64>)
 8011362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011366:	601a      	str	r2, [r3, #0]
 8011368:	f3bf 8f4f 	dsb	sy
 801136c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011370:	bf00      	nop
 8011372:	3710      	adds	r7, #16
 8011374:	46bd      	mov	sp, r7
 8011376:	bd80      	pop	{r7, pc}
 8011378:	20002c08 	.word	0x20002c08
 801137c:	e000ed04 	.word	0xe000ed04

08011380 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011380:	b580      	push	{r7, lr}
 8011382:	b08a      	sub	sp, #40	; 0x28
 8011384:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011386:	2300      	movs	r3, #0
 8011388:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801138a:	2300      	movs	r3, #0
 801138c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801138e:	463a      	mov	r2, r7
 8011390:	1d39      	adds	r1, r7, #4
 8011392:	f107 0308 	add.w	r3, r7, #8
 8011396:	4618      	mov	r0, r3
 8011398:	f7f0 ff90 	bl	80022bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801139c:	6839      	ldr	r1, [r7, #0]
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	68ba      	ldr	r2, [r7, #8]
 80113a2:	9202      	str	r2, [sp, #8]
 80113a4:	9301      	str	r3, [sp, #4]
 80113a6:	2300      	movs	r3, #0
 80113a8:	9300      	str	r3, [sp, #0]
 80113aa:	2300      	movs	r3, #0
 80113ac:	460a      	mov	r2, r1
 80113ae:	4921      	ldr	r1, [pc, #132]	; (8011434 <vTaskStartScheduler+0xb4>)
 80113b0:	4821      	ldr	r0, [pc, #132]	; (8011438 <vTaskStartScheduler+0xb8>)
 80113b2:	f7ff fe07 	bl	8010fc4 <xTaskCreateStatic>
 80113b6:	4603      	mov	r3, r0
 80113b8:	4a20      	ldr	r2, [pc, #128]	; (801143c <vTaskStartScheduler+0xbc>)
 80113ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80113bc:	4b1f      	ldr	r3, [pc, #124]	; (801143c <vTaskStartScheduler+0xbc>)
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d002      	beq.n	80113ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80113c4:	2301      	movs	r3, #1
 80113c6:	617b      	str	r3, [r7, #20]
 80113c8:	e001      	b.n	80113ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80113ca:	2300      	movs	r3, #0
 80113cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80113ce:	697b      	ldr	r3, [r7, #20]
 80113d0:	2b01      	cmp	r3, #1
 80113d2:	d11b      	bne.n	801140c <vTaskStartScheduler+0x8c>
	__asm volatile
 80113d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113d8:	f383 8811 	msr	BASEPRI, r3
 80113dc:	f3bf 8f6f 	isb	sy
 80113e0:	f3bf 8f4f 	dsb	sy
 80113e4:	613b      	str	r3, [r7, #16]
}
 80113e6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80113e8:	4b15      	ldr	r3, [pc, #84]	; (8011440 <vTaskStartScheduler+0xc0>)
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	334c      	adds	r3, #76	; 0x4c
 80113ee:	4a15      	ldr	r2, [pc, #84]	; (8011444 <vTaskStartScheduler+0xc4>)
 80113f0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80113f2:	4b15      	ldr	r3, [pc, #84]	; (8011448 <vTaskStartScheduler+0xc8>)
 80113f4:	f04f 32ff 	mov.w	r2, #4294967295
 80113f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80113fa:	4b14      	ldr	r3, [pc, #80]	; (801144c <vTaskStartScheduler+0xcc>)
 80113fc:	2201      	movs	r2, #1
 80113fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011400:	4b13      	ldr	r3, [pc, #76]	; (8011450 <vTaskStartScheduler+0xd0>)
 8011402:	2200      	movs	r2, #0
 8011404:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011406:	f000 fe7b 	bl	8012100 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801140a:	e00e      	b.n	801142a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801140c:	697b      	ldr	r3, [r7, #20]
 801140e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011412:	d10a      	bne.n	801142a <vTaskStartScheduler+0xaa>
	__asm volatile
 8011414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011418:	f383 8811 	msr	BASEPRI, r3
 801141c:	f3bf 8f6f 	isb	sy
 8011420:	f3bf 8f4f 	dsb	sy
 8011424:	60fb      	str	r3, [r7, #12]
}
 8011426:	bf00      	nop
 8011428:	e7fe      	b.n	8011428 <vTaskStartScheduler+0xa8>
}
 801142a:	bf00      	nop
 801142c:	3718      	adds	r7, #24
 801142e:	46bd      	mov	sp, r7
 8011430:	bd80      	pop	{r7, pc}
 8011432:	bf00      	nop
 8011434:	08015aac 	.word	0x08015aac
 8011438:	080119f1 	.word	0x080119f1
 801143c:	20002c04 	.word	0x20002c04
 8011440:	20002ae0 	.word	0x20002ae0
 8011444:	20000088 	.word	0x20000088
 8011448:	20002c00 	.word	0x20002c00
 801144c:	20002bec 	.word	0x20002bec
 8011450:	20002be4 	.word	0x20002be4

08011454 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011454:	b480      	push	{r7}
 8011456:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011458:	4b04      	ldr	r3, [pc, #16]	; (801146c <vTaskSuspendAll+0x18>)
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	3301      	adds	r3, #1
 801145e:	4a03      	ldr	r2, [pc, #12]	; (801146c <vTaskSuspendAll+0x18>)
 8011460:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011462:	bf00      	nop
 8011464:	46bd      	mov	sp, r7
 8011466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146a:	4770      	bx	lr
 801146c:	20002c08 	.word	0x20002c08

08011470 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011470:	b580      	push	{r7, lr}
 8011472:	b084      	sub	sp, #16
 8011474:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011476:	2300      	movs	r3, #0
 8011478:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801147a:	2300      	movs	r3, #0
 801147c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801147e:	4b41      	ldr	r3, [pc, #260]	; (8011584 <xTaskResumeAll+0x114>)
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d10a      	bne.n	801149c <xTaskResumeAll+0x2c>
	__asm volatile
 8011486:	f04f 0350 	mov.w	r3, #80	; 0x50
 801148a:	f383 8811 	msr	BASEPRI, r3
 801148e:	f3bf 8f6f 	isb	sy
 8011492:	f3bf 8f4f 	dsb	sy
 8011496:	603b      	str	r3, [r7, #0]
}
 8011498:	bf00      	nop
 801149a:	e7fe      	b.n	801149a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801149c:	f000 fed2 	bl	8012244 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80114a0:	4b38      	ldr	r3, [pc, #224]	; (8011584 <xTaskResumeAll+0x114>)
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	3b01      	subs	r3, #1
 80114a6:	4a37      	ldr	r2, [pc, #220]	; (8011584 <xTaskResumeAll+0x114>)
 80114a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80114aa:	4b36      	ldr	r3, [pc, #216]	; (8011584 <xTaskResumeAll+0x114>)
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d161      	bne.n	8011576 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80114b2:	4b35      	ldr	r3, [pc, #212]	; (8011588 <xTaskResumeAll+0x118>)
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d05d      	beq.n	8011576 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80114ba:	e02e      	b.n	801151a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80114bc:	4b33      	ldr	r3, [pc, #204]	; (801158c <xTaskResumeAll+0x11c>)
 80114be:	68db      	ldr	r3, [r3, #12]
 80114c0:	68db      	ldr	r3, [r3, #12]
 80114c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	3318      	adds	r3, #24
 80114c8:	4618      	mov	r0, r3
 80114ca:	f7fe ff88 	bl	80103de <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	3304      	adds	r3, #4
 80114d2:	4618      	mov	r0, r3
 80114d4:	f7fe ff83 	bl	80103de <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114dc:	2201      	movs	r2, #1
 80114de:	409a      	lsls	r2, r3
 80114e0:	4b2b      	ldr	r3, [pc, #172]	; (8011590 <xTaskResumeAll+0x120>)
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	4313      	orrs	r3, r2
 80114e6:	4a2a      	ldr	r2, [pc, #168]	; (8011590 <xTaskResumeAll+0x120>)
 80114e8:	6013      	str	r3, [r2, #0]
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114ee:	4613      	mov	r3, r2
 80114f0:	009b      	lsls	r3, r3, #2
 80114f2:	4413      	add	r3, r2
 80114f4:	009b      	lsls	r3, r3, #2
 80114f6:	4a27      	ldr	r2, [pc, #156]	; (8011594 <xTaskResumeAll+0x124>)
 80114f8:	441a      	add	r2, r3
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	3304      	adds	r3, #4
 80114fe:	4619      	mov	r1, r3
 8011500:	4610      	mov	r0, r2
 8011502:	f7fe ff0f 	bl	8010324 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801150a:	4b23      	ldr	r3, [pc, #140]	; (8011598 <xTaskResumeAll+0x128>)
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011510:	429a      	cmp	r2, r3
 8011512:	d302      	bcc.n	801151a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8011514:	4b21      	ldr	r3, [pc, #132]	; (801159c <xTaskResumeAll+0x12c>)
 8011516:	2201      	movs	r2, #1
 8011518:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801151a:	4b1c      	ldr	r3, [pc, #112]	; (801158c <xTaskResumeAll+0x11c>)
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d1cc      	bne.n	80114bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	2b00      	cmp	r3, #0
 8011526:	d001      	beq.n	801152c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011528:	f000 fb1c 	bl	8011b64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801152c:	4b1c      	ldr	r3, [pc, #112]	; (80115a0 <xTaskResumeAll+0x130>)
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d010      	beq.n	801155a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011538:	f000 f836 	bl	80115a8 <xTaskIncrementTick>
 801153c:	4603      	mov	r3, r0
 801153e:	2b00      	cmp	r3, #0
 8011540:	d002      	beq.n	8011548 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8011542:	4b16      	ldr	r3, [pc, #88]	; (801159c <xTaskResumeAll+0x12c>)
 8011544:	2201      	movs	r2, #1
 8011546:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	3b01      	subs	r3, #1
 801154c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d1f1      	bne.n	8011538 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8011554:	4b12      	ldr	r3, [pc, #72]	; (80115a0 <xTaskResumeAll+0x130>)
 8011556:	2200      	movs	r2, #0
 8011558:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801155a:	4b10      	ldr	r3, [pc, #64]	; (801159c <xTaskResumeAll+0x12c>)
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	2b00      	cmp	r3, #0
 8011560:	d009      	beq.n	8011576 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011562:	2301      	movs	r3, #1
 8011564:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011566:	4b0f      	ldr	r3, [pc, #60]	; (80115a4 <xTaskResumeAll+0x134>)
 8011568:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801156c:	601a      	str	r2, [r3, #0]
 801156e:	f3bf 8f4f 	dsb	sy
 8011572:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011576:	f000 fe95 	bl	80122a4 <vPortExitCritical>

	return xAlreadyYielded;
 801157a:	68bb      	ldr	r3, [r7, #8]
}
 801157c:	4618      	mov	r0, r3
 801157e:	3710      	adds	r7, #16
 8011580:	46bd      	mov	sp, r7
 8011582:	bd80      	pop	{r7, pc}
 8011584:	20002c08 	.word	0x20002c08
 8011588:	20002be0 	.word	0x20002be0
 801158c:	20002ba0 	.word	0x20002ba0
 8011590:	20002be8 	.word	0x20002be8
 8011594:	20002ae4 	.word	0x20002ae4
 8011598:	20002ae0 	.word	0x20002ae0
 801159c:	20002bf4 	.word	0x20002bf4
 80115a0:	20002bf0 	.word	0x20002bf0
 80115a4:	e000ed04 	.word	0xe000ed04

080115a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80115a8:	b580      	push	{r7, lr}
 80115aa:	b086      	sub	sp, #24
 80115ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80115ae:	2300      	movs	r3, #0
 80115b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80115b2:	4b4e      	ldr	r3, [pc, #312]	; (80116ec <xTaskIncrementTick+0x144>)
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	f040 808e 	bne.w	80116d8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80115bc:	4b4c      	ldr	r3, [pc, #304]	; (80116f0 <xTaskIncrementTick+0x148>)
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	3301      	adds	r3, #1
 80115c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80115c4:	4a4a      	ldr	r2, [pc, #296]	; (80116f0 <xTaskIncrementTick+0x148>)
 80115c6:	693b      	ldr	r3, [r7, #16]
 80115c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80115ca:	693b      	ldr	r3, [r7, #16]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d120      	bne.n	8011612 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80115d0:	4b48      	ldr	r3, [pc, #288]	; (80116f4 <xTaskIncrementTick+0x14c>)
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d00a      	beq.n	80115f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80115da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115de:	f383 8811 	msr	BASEPRI, r3
 80115e2:	f3bf 8f6f 	isb	sy
 80115e6:	f3bf 8f4f 	dsb	sy
 80115ea:	603b      	str	r3, [r7, #0]
}
 80115ec:	bf00      	nop
 80115ee:	e7fe      	b.n	80115ee <xTaskIncrementTick+0x46>
 80115f0:	4b40      	ldr	r3, [pc, #256]	; (80116f4 <xTaskIncrementTick+0x14c>)
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	60fb      	str	r3, [r7, #12]
 80115f6:	4b40      	ldr	r3, [pc, #256]	; (80116f8 <xTaskIncrementTick+0x150>)
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	4a3e      	ldr	r2, [pc, #248]	; (80116f4 <xTaskIncrementTick+0x14c>)
 80115fc:	6013      	str	r3, [r2, #0]
 80115fe:	4a3e      	ldr	r2, [pc, #248]	; (80116f8 <xTaskIncrementTick+0x150>)
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	6013      	str	r3, [r2, #0]
 8011604:	4b3d      	ldr	r3, [pc, #244]	; (80116fc <xTaskIncrementTick+0x154>)
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	3301      	adds	r3, #1
 801160a:	4a3c      	ldr	r2, [pc, #240]	; (80116fc <xTaskIncrementTick+0x154>)
 801160c:	6013      	str	r3, [r2, #0]
 801160e:	f000 faa9 	bl	8011b64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011612:	4b3b      	ldr	r3, [pc, #236]	; (8011700 <xTaskIncrementTick+0x158>)
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	693a      	ldr	r2, [r7, #16]
 8011618:	429a      	cmp	r2, r3
 801161a:	d348      	bcc.n	80116ae <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801161c:	4b35      	ldr	r3, [pc, #212]	; (80116f4 <xTaskIncrementTick+0x14c>)
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d104      	bne.n	8011630 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011626:	4b36      	ldr	r3, [pc, #216]	; (8011700 <xTaskIncrementTick+0x158>)
 8011628:	f04f 32ff 	mov.w	r2, #4294967295
 801162c:	601a      	str	r2, [r3, #0]
					break;
 801162e:	e03e      	b.n	80116ae <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011630:	4b30      	ldr	r3, [pc, #192]	; (80116f4 <xTaskIncrementTick+0x14c>)
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	68db      	ldr	r3, [r3, #12]
 8011636:	68db      	ldr	r3, [r3, #12]
 8011638:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801163a:	68bb      	ldr	r3, [r7, #8]
 801163c:	685b      	ldr	r3, [r3, #4]
 801163e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011640:	693a      	ldr	r2, [r7, #16]
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	429a      	cmp	r2, r3
 8011646:	d203      	bcs.n	8011650 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011648:	4a2d      	ldr	r2, [pc, #180]	; (8011700 <xTaskIncrementTick+0x158>)
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801164e:	e02e      	b.n	80116ae <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011650:	68bb      	ldr	r3, [r7, #8]
 8011652:	3304      	adds	r3, #4
 8011654:	4618      	mov	r0, r3
 8011656:	f7fe fec2 	bl	80103de <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801165a:	68bb      	ldr	r3, [r7, #8]
 801165c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801165e:	2b00      	cmp	r3, #0
 8011660:	d004      	beq.n	801166c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011662:	68bb      	ldr	r3, [r7, #8]
 8011664:	3318      	adds	r3, #24
 8011666:	4618      	mov	r0, r3
 8011668:	f7fe feb9 	bl	80103de <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801166c:	68bb      	ldr	r3, [r7, #8]
 801166e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011670:	2201      	movs	r2, #1
 8011672:	409a      	lsls	r2, r3
 8011674:	4b23      	ldr	r3, [pc, #140]	; (8011704 <xTaskIncrementTick+0x15c>)
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	4313      	orrs	r3, r2
 801167a:	4a22      	ldr	r2, [pc, #136]	; (8011704 <xTaskIncrementTick+0x15c>)
 801167c:	6013      	str	r3, [r2, #0]
 801167e:	68bb      	ldr	r3, [r7, #8]
 8011680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011682:	4613      	mov	r3, r2
 8011684:	009b      	lsls	r3, r3, #2
 8011686:	4413      	add	r3, r2
 8011688:	009b      	lsls	r3, r3, #2
 801168a:	4a1f      	ldr	r2, [pc, #124]	; (8011708 <xTaskIncrementTick+0x160>)
 801168c:	441a      	add	r2, r3
 801168e:	68bb      	ldr	r3, [r7, #8]
 8011690:	3304      	adds	r3, #4
 8011692:	4619      	mov	r1, r3
 8011694:	4610      	mov	r0, r2
 8011696:	f7fe fe45 	bl	8010324 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801169a:	68bb      	ldr	r3, [r7, #8]
 801169c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801169e:	4b1b      	ldr	r3, [pc, #108]	; (801170c <xTaskIncrementTick+0x164>)
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116a4:	429a      	cmp	r2, r3
 80116a6:	d3b9      	bcc.n	801161c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80116a8:	2301      	movs	r3, #1
 80116aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80116ac:	e7b6      	b.n	801161c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80116ae:	4b17      	ldr	r3, [pc, #92]	; (801170c <xTaskIncrementTick+0x164>)
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116b4:	4914      	ldr	r1, [pc, #80]	; (8011708 <xTaskIncrementTick+0x160>)
 80116b6:	4613      	mov	r3, r2
 80116b8:	009b      	lsls	r3, r3, #2
 80116ba:	4413      	add	r3, r2
 80116bc:	009b      	lsls	r3, r3, #2
 80116be:	440b      	add	r3, r1
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	2b01      	cmp	r3, #1
 80116c4:	d901      	bls.n	80116ca <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80116c6:	2301      	movs	r3, #1
 80116c8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80116ca:	4b11      	ldr	r3, [pc, #68]	; (8011710 <xTaskIncrementTick+0x168>)
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d007      	beq.n	80116e2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80116d2:	2301      	movs	r3, #1
 80116d4:	617b      	str	r3, [r7, #20]
 80116d6:	e004      	b.n	80116e2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80116d8:	4b0e      	ldr	r3, [pc, #56]	; (8011714 <xTaskIncrementTick+0x16c>)
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	3301      	adds	r3, #1
 80116de:	4a0d      	ldr	r2, [pc, #52]	; (8011714 <xTaskIncrementTick+0x16c>)
 80116e0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80116e2:	697b      	ldr	r3, [r7, #20]
}
 80116e4:	4618      	mov	r0, r3
 80116e6:	3718      	adds	r7, #24
 80116e8:	46bd      	mov	sp, r7
 80116ea:	bd80      	pop	{r7, pc}
 80116ec:	20002c08 	.word	0x20002c08
 80116f0:	20002be4 	.word	0x20002be4
 80116f4:	20002b98 	.word	0x20002b98
 80116f8:	20002b9c 	.word	0x20002b9c
 80116fc:	20002bf8 	.word	0x20002bf8
 8011700:	20002c00 	.word	0x20002c00
 8011704:	20002be8 	.word	0x20002be8
 8011708:	20002ae4 	.word	0x20002ae4
 801170c:	20002ae0 	.word	0x20002ae0
 8011710:	20002bf4 	.word	0x20002bf4
 8011714:	20002bf0 	.word	0x20002bf0

08011718 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011718:	b480      	push	{r7}
 801171a:	b087      	sub	sp, #28
 801171c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801171e:	4b29      	ldr	r3, [pc, #164]	; (80117c4 <vTaskSwitchContext+0xac>)
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d003      	beq.n	801172e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011726:	4b28      	ldr	r3, [pc, #160]	; (80117c8 <vTaskSwitchContext+0xb0>)
 8011728:	2201      	movs	r2, #1
 801172a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801172c:	e044      	b.n	80117b8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 801172e:	4b26      	ldr	r3, [pc, #152]	; (80117c8 <vTaskSwitchContext+0xb0>)
 8011730:	2200      	movs	r2, #0
 8011732:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011734:	4b25      	ldr	r3, [pc, #148]	; (80117cc <vTaskSwitchContext+0xb4>)
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	fab3 f383 	clz	r3, r3
 8011740:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011742:	7afb      	ldrb	r3, [r7, #11]
 8011744:	f1c3 031f 	rsb	r3, r3, #31
 8011748:	617b      	str	r3, [r7, #20]
 801174a:	4921      	ldr	r1, [pc, #132]	; (80117d0 <vTaskSwitchContext+0xb8>)
 801174c:	697a      	ldr	r2, [r7, #20]
 801174e:	4613      	mov	r3, r2
 8011750:	009b      	lsls	r3, r3, #2
 8011752:	4413      	add	r3, r2
 8011754:	009b      	lsls	r3, r3, #2
 8011756:	440b      	add	r3, r1
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	2b00      	cmp	r3, #0
 801175c:	d10a      	bne.n	8011774 <vTaskSwitchContext+0x5c>
	__asm volatile
 801175e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011762:	f383 8811 	msr	BASEPRI, r3
 8011766:	f3bf 8f6f 	isb	sy
 801176a:	f3bf 8f4f 	dsb	sy
 801176e:	607b      	str	r3, [r7, #4]
}
 8011770:	bf00      	nop
 8011772:	e7fe      	b.n	8011772 <vTaskSwitchContext+0x5a>
 8011774:	697a      	ldr	r2, [r7, #20]
 8011776:	4613      	mov	r3, r2
 8011778:	009b      	lsls	r3, r3, #2
 801177a:	4413      	add	r3, r2
 801177c:	009b      	lsls	r3, r3, #2
 801177e:	4a14      	ldr	r2, [pc, #80]	; (80117d0 <vTaskSwitchContext+0xb8>)
 8011780:	4413      	add	r3, r2
 8011782:	613b      	str	r3, [r7, #16]
 8011784:	693b      	ldr	r3, [r7, #16]
 8011786:	685b      	ldr	r3, [r3, #4]
 8011788:	685a      	ldr	r2, [r3, #4]
 801178a:	693b      	ldr	r3, [r7, #16]
 801178c:	605a      	str	r2, [r3, #4]
 801178e:	693b      	ldr	r3, [r7, #16]
 8011790:	685a      	ldr	r2, [r3, #4]
 8011792:	693b      	ldr	r3, [r7, #16]
 8011794:	3308      	adds	r3, #8
 8011796:	429a      	cmp	r2, r3
 8011798:	d104      	bne.n	80117a4 <vTaskSwitchContext+0x8c>
 801179a:	693b      	ldr	r3, [r7, #16]
 801179c:	685b      	ldr	r3, [r3, #4]
 801179e:	685a      	ldr	r2, [r3, #4]
 80117a0:	693b      	ldr	r3, [r7, #16]
 80117a2:	605a      	str	r2, [r3, #4]
 80117a4:	693b      	ldr	r3, [r7, #16]
 80117a6:	685b      	ldr	r3, [r3, #4]
 80117a8:	68db      	ldr	r3, [r3, #12]
 80117aa:	4a0a      	ldr	r2, [pc, #40]	; (80117d4 <vTaskSwitchContext+0xbc>)
 80117ac:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80117ae:	4b09      	ldr	r3, [pc, #36]	; (80117d4 <vTaskSwitchContext+0xbc>)
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	334c      	adds	r3, #76	; 0x4c
 80117b4:	4a08      	ldr	r2, [pc, #32]	; (80117d8 <vTaskSwitchContext+0xc0>)
 80117b6:	6013      	str	r3, [r2, #0]
}
 80117b8:	bf00      	nop
 80117ba:	371c      	adds	r7, #28
 80117bc:	46bd      	mov	sp, r7
 80117be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c2:	4770      	bx	lr
 80117c4:	20002c08 	.word	0x20002c08
 80117c8:	20002bf4 	.word	0x20002bf4
 80117cc:	20002be8 	.word	0x20002be8
 80117d0:	20002ae4 	.word	0x20002ae4
 80117d4:	20002ae0 	.word	0x20002ae0
 80117d8:	20000088 	.word	0x20000088

080117dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b084      	sub	sp, #16
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	6078      	str	r0, [r7, #4]
 80117e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d10a      	bne.n	8011802 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80117ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117f0:	f383 8811 	msr	BASEPRI, r3
 80117f4:	f3bf 8f6f 	isb	sy
 80117f8:	f3bf 8f4f 	dsb	sy
 80117fc:	60fb      	str	r3, [r7, #12]
}
 80117fe:	bf00      	nop
 8011800:	e7fe      	b.n	8011800 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011802:	4b07      	ldr	r3, [pc, #28]	; (8011820 <vTaskPlaceOnEventList+0x44>)
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	3318      	adds	r3, #24
 8011808:	4619      	mov	r1, r3
 801180a:	6878      	ldr	r0, [r7, #4]
 801180c:	f7fe fdae 	bl	801036c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011810:	2101      	movs	r1, #1
 8011812:	6838      	ldr	r0, [r7, #0]
 8011814:	f000 fb82 	bl	8011f1c <prvAddCurrentTaskToDelayedList>
}
 8011818:	bf00      	nop
 801181a:	3710      	adds	r7, #16
 801181c:	46bd      	mov	sp, r7
 801181e:	bd80      	pop	{r7, pc}
 8011820:	20002ae0 	.word	0x20002ae0

08011824 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011824:	b580      	push	{r7, lr}
 8011826:	b086      	sub	sp, #24
 8011828:	af00      	add	r7, sp, #0
 801182a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	68db      	ldr	r3, [r3, #12]
 8011830:	68db      	ldr	r3, [r3, #12]
 8011832:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011834:	693b      	ldr	r3, [r7, #16]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d10a      	bne.n	8011850 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801183a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801183e:	f383 8811 	msr	BASEPRI, r3
 8011842:	f3bf 8f6f 	isb	sy
 8011846:	f3bf 8f4f 	dsb	sy
 801184a:	60fb      	str	r3, [r7, #12]
}
 801184c:	bf00      	nop
 801184e:	e7fe      	b.n	801184e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011850:	693b      	ldr	r3, [r7, #16]
 8011852:	3318      	adds	r3, #24
 8011854:	4618      	mov	r0, r3
 8011856:	f7fe fdc2 	bl	80103de <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801185a:	4b1d      	ldr	r3, [pc, #116]	; (80118d0 <xTaskRemoveFromEventList+0xac>)
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d11c      	bne.n	801189c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011862:	693b      	ldr	r3, [r7, #16]
 8011864:	3304      	adds	r3, #4
 8011866:	4618      	mov	r0, r3
 8011868:	f7fe fdb9 	bl	80103de <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801186c:	693b      	ldr	r3, [r7, #16]
 801186e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011870:	2201      	movs	r2, #1
 8011872:	409a      	lsls	r2, r3
 8011874:	4b17      	ldr	r3, [pc, #92]	; (80118d4 <xTaskRemoveFromEventList+0xb0>)
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	4313      	orrs	r3, r2
 801187a:	4a16      	ldr	r2, [pc, #88]	; (80118d4 <xTaskRemoveFromEventList+0xb0>)
 801187c:	6013      	str	r3, [r2, #0]
 801187e:	693b      	ldr	r3, [r7, #16]
 8011880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011882:	4613      	mov	r3, r2
 8011884:	009b      	lsls	r3, r3, #2
 8011886:	4413      	add	r3, r2
 8011888:	009b      	lsls	r3, r3, #2
 801188a:	4a13      	ldr	r2, [pc, #76]	; (80118d8 <xTaskRemoveFromEventList+0xb4>)
 801188c:	441a      	add	r2, r3
 801188e:	693b      	ldr	r3, [r7, #16]
 8011890:	3304      	adds	r3, #4
 8011892:	4619      	mov	r1, r3
 8011894:	4610      	mov	r0, r2
 8011896:	f7fe fd45 	bl	8010324 <vListInsertEnd>
 801189a:	e005      	b.n	80118a8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801189c:	693b      	ldr	r3, [r7, #16]
 801189e:	3318      	adds	r3, #24
 80118a0:	4619      	mov	r1, r3
 80118a2:	480e      	ldr	r0, [pc, #56]	; (80118dc <xTaskRemoveFromEventList+0xb8>)
 80118a4:	f7fe fd3e 	bl	8010324 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80118a8:	693b      	ldr	r3, [r7, #16]
 80118aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118ac:	4b0c      	ldr	r3, [pc, #48]	; (80118e0 <xTaskRemoveFromEventList+0xbc>)
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118b2:	429a      	cmp	r2, r3
 80118b4:	d905      	bls.n	80118c2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80118b6:	2301      	movs	r3, #1
 80118b8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80118ba:	4b0a      	ldr	r3, [pc, #40]	; (80118e4 <xTaskRemoveFromEventList+0xc0>)
 80118bc:	2201      	movs	r2, #1
 80118be:	601a      	str	r2, [r3, #0]
 80118c0:	e001      	b.n	80118c6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80118c2:	2300      	movs	r3, #0
 80118c4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80118c6:	697b      	ldr	r3, [r7, #20]
}
 80118c8:	4618      	mov	r0, r3
 80118ca:	3718      	adds	r7, #24
 80118cc:	46bd      	mov	sp, r7
 80118ce:	bd80      	pop	{r7, pc}
 80118d0:	20002c08 	.word	0x20002c08
 80118d4:	20002be8 	.word	0x20002be8
 80118d8:	20002ae4 	.word	0x20002ae4
 80118dc:	20002ba0 	.word	0x20002ba0
 80118e0:	20002ae0 	.word	0x20002ae0
 80118e4:	20002bf4 	.word	0x20002bf4

080118e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80118e8:	b480      	push	{r7}
 80118ea:	b083      	sub	sp, #12
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80118f0:	4b06      	ldr	r3, [pc, #24]	; (801190c <vTaskInternalSetTimeOutState+0x24>)
 80118f2:	681a      	ldr	r2, [r3, #0]
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80118f8:	4b05      	ldr	r3, [pc, #20]	; (8011910 <vTaskInternalSetTimeOutState+0x28>)
 80118fa:	681a      	ldr	r2, [r3, #0]
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	605a      	str	r2, [r3, #4]
}
 8011900:	bf00      	nop
 8011902:	370c      	adds	r7, #12
 8011904:	46bd      	mov	sp, r7
 8011906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801190a:	4770      	bx	lr
 801190c:	20002bf8 	.word	0x20002bf8
 8011910:	20002be4 	.word	0x20002be4

08011914 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011914:	b580      	push	{r7, lr}
 8011916:	b088      	sub	sp, #32
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
 801191c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d10a      	bne.n	801193a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011928:	f383 8811 	msr	BASEPRI, r3
 801192c:	f3bf 8f6f 	isb	sy
 8011930:	f3bf 8f4f 	dsb	sy
 8011934:	613b      	str	r3, [r7, #16]
}
 8011936:	bf00      	nop
 8011938:	e7fe      	b.n	8011938 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801193a:	683b      	ldr	r3, [r7, #0]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d10a      	bne.n	8011956 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011944:	f383 8811 	msr	BASEPRI, r3
 8011948:	f3bf 8f6f 	isb	sy
 801194c:	f3bf 8f4f 	dsb	sy
 8011950:	60fb      	str	r3, [r7, #12]
}
 8011952:	bf00      	nop
 8011954:	e7fe      	b.n	8011954 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011956:	f000 fc75 	bl	8012244 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801195a:	4b1d      	ldr	r3, [pc, #116]	; (80119d0 <xTaskCheckForTimeOut+0xbc>)
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	685b      	ldr	r3, [r3, #4]
 8011964:	69ba      	ldr	r2, [r7, #24]
 8011966:	1ad3      	subs	r3, r2, r3
 8011968:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801196a:	683b      	ldr	r3, [r7, #0]
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011972:	d102      	bne.n	801197a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011974:	2300      	movs	r3, #0
 8011976:	61fb      	str	r3, [r7, #28]
 8011978:	e023      	b.n	80119c2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	681a      	ldr	r2, [r3, #0]
 801197e:	4b15      	ldr	r3, [pc, #84]	; (80119d4 <xTaskCheckForTimeOut+0xc0>)
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	429a      	cmp	r2, r3
 8011984:	d007      	beq.n	8011996 <xTaskCheckForTimeOut+0x82>
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	685b      	ldr	r3, [r3, #4]
 801198a:	69ba      	ldr	r2, [r7, #24]
 801198c:	429a      	cmp	r2, r3
 801198e:	d302      	bcc.n	8011996 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011990:	2301      	movs	r3, #1
 8011992:	61fb      	str	r3, [r7, #28]
 8011994:	e015      	b.n	80119c2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011996:	683b      	ldr	r3, [r7, #0]
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	697a      	ldr	r2, [r7, #20]
 801199c:	429a      	cmp	r2, r3
 801199e:	d20b      	bcs.n	80119b8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80119a0:	683b      	ldr	r3, [r7, #0]
 80119a2:	681a      	ldr	r2, [r3, #0]
 80119a4:	697b      	ldr	r3, [r7, #20]
 80119a6:	1ad2      	subs	r2, r2, r3
 80119a8:	683b      	ldr	r3, [r7, #0]
 80119aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80119ac:	6878      	ldr	r0, [r7, #4]
 80119ae:	f7ff ff9b 	bl	80118e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80119b2:	2300      	movs	r3, #0
 80119b4:	61fb      	str	r3, [r7, #28]
 80119b6:	e004      	b.n	80119c2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80119b8:	683b      	ldr	r3, [r7, #0]
 80119ba:	2200      	movs	r2, #0
 80119bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80119be:	2301      	movs	r3, #1
 80119c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80119c2:	f000 fc6f 	bl	80122a4 <vPortExitCritical>

	return xReturn;
 80119c6:	69fb      	ldr	r3, [r7, #28]
}
 80119c8:	4618      	mov	r0, r3
 80119ca:	3720      	adds	r7, #32
 80119cc:	46bd      	mov	sp, r7
 80119ce:	bd80      	pop	{r7, pc}
 80119d0:	20002be4 	.word	0x20002be4
 80119d4:	20002bf8 	.word	0x20002bf8

080119d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80119d8:	b480      	push	{r7}
 80119da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80119dc:	4b03      	ldr	r3, [pc, #12]	; (80119ec <vTaskMissedYield+0x14>)
 80119de:	2201      	movs	r2, #1
 80119e0:	601a      	str	r2, [r3, #0]
}
 80119e2:	bf00      	nop
 80119e4:	46bd      	mov	sp, r7
 80119e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ea:	4770      	bx	lr
 80119ec:	20002bf4 	.word	0x20002bf4

080119f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b082      	sub	sp, #8
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80119f8:	f000 f852 	bl	8011aa0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80119fc:	4b06      	ldr	r3, [pc, #24]	; (8011a18 <prvIdleTask+0x28>)
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	2b01      	cmp	r3, #1
 8011a02:	d9f9      	bls.n	80119f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011a04:	4b05      	ldr	r3, [pc, #20]	; (8011a1c <prvIdleTask+0x2c>)
 8011a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a0a:	601a      	str	r2, [r3, #0]
 8011a0c:	f3bf 8f4f 	dsb	sy
 8011a10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011a14:	e7f0      	b.n	80119f8 <prvIdleTask+0x8>
 8011a16:	bf00      	nop
 8011a18:	20002ae4 	.word	0x20002ae4
 8011a1c:	e000ed04 	.word	0xe000ed04

08011a20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b082      	sub	sp, #8
 8011a24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011a26:	2300      	movs	r3, #0
 8011a28:	607b      	str	r3, [r7, #4]
 8011a2a:	e00c      	b.n	8011a46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011a2c:	687a      	ldr	r2, [r7, #4]
 8011a2e:	4613      	mov	r3, r2
 8011a30:	009b      	lsls	r3, r3, #2
 8011a32:	4413      	add	r3, r2
 8011a34:	009b      	lsls	r3, r3, #2
 8011a36:	4a12      	ldr	r2, [pc, #72]	; (8011a80 <prvInitialiseTaskLists+0x60>)
 8011a38:	4413      	add	r3, r2
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	f7fe fc45 	bl	80102ca <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	3301      	adds	r3, #1
 8011a44:	607b      	str	r3, [r7, #4]
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	2b06      	cmp	r3, #6
 8011a4a:	d9ef      	bls.n	8011a2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011a4c:	480d      	ldr	r0, [pc, #52]	; (8011a84 <prvInitialiseTaskLists+0x64>)
 8011a4e:	f7fe fc3c 	bl	80102ca <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011a52:	480d      	ldr	r0, [pc, #52]	; (8011a88 <prvInitialiseTaskLists+0x68>)
 8011a54:	f7fe fc39 	bl	80102ca <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011a58:	480c      	ldr	r0, [pc, #48]	; (8011a8c <prvInitialiseTaskLists+0x6c>)
 8011a5a:	f7fe fc36 	bl	80102ca <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011a5e:	480c      	ldr	r0, [pc, #48]	; (8011a90 <prvInitialiseTaskLists+0x70>)
 8011a60:	f7fe fc33 	bl	80102ca <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011a64:	480b      	ldr	r0, [pc, #44]	; (8011a94 <prvInitialiseTaskLists+0x74>)
 8011a66:	f7fe fc30 	bl	80102ca <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011a6a:	4b0b      	ldr	r3, [pc, #44]	; (8011a98 <prvInitialiseTaskLists+0x78>)
 8011a6c:	4a05      	ldr	r2, [pc, #20]	; (8011a84 <prvInitialiseTaskLists+0x64>)
 8011a6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011a70:	4b0a      	ldr	r3, [pc, #40]	; (8011a9c <prvInitialiseTaskLists+0x7c>)
 8011a72:	4a05      	ldr	r2, [pc, #20]	; (8011a88 <prvInitialiseTaskLists+0x68>)
 8011a74:	601a      	str	r2, [r3, #0]
}
 8011a76:	bf00      	nop
 8011a78:	3708      	adds	r7, #8
 8011a7a:	46bd      	mov	sp, r7
 8011a7c:	bd80      	pop	{r7, pc}
 8011a7e:	bf00      	nop
 8011a80:	20002ae4 	.word	0x20002ae4
 8011a84:	20002b70 	.word	0x20002b70
 8011a88:	20002b84 	.word	0x20002b84
 8011a8c:	20002ba0 	.word	0x20002ba0
 8011a90:	20002bb4 	.word	0x20002bb4
 8011a94:	20002bcc 	.word	0x20002bcc
 8011a98:	20002b98 	.word	0x20002b98
 8011a9c:	20002b9c 	.word	0x20002b9c

08011aa0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b082      	sub	sp, #8
 8011aa4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011aa6:	e019      	b.n	8011adc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011aa8:	f000 fbcc 	bl	8012244 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011aac:	4b10      	ldr	r3, [pc, #64]	; (8011af0 <prvCheckTasksWaitingTermination+0x50>)
 8011aae:	68db      	ldr	r3, [r3, #12]
 8011ab0:	68db      	ldr	r3, [r3, #12]
 8011ab2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	3304      	adds	r3, #4
 8011ab8:	4618      	mov	r0, r3
 8011aba:	f7fe fc90 	bl	80103de <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011abe:	4b0d      	ldr	r3, [pc, #52]	; (8011af4 <prvCheckTasksWaitingTermination+0x54>)
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	3b01      	subs	r3, #1
 8011ac4:	4a0b      	ldr	r2, [pc, #44]	; (8011af4 <prvCheckTasksWaitingTermination+0x54>)
 8011ac6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011ac8:	4b0b      	ldr	r3, [pc, #44]	; (8011af8 <prvCheckTasksWaitingTermination+0x58>)
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	3b01      	subs	r3, #1
 8011ace:	4a0a      	ldr	r2, [pc, #40]	; (8011af8 <prvCheckTasksWaitingTermination+0x58>)
 8011ad0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011ad2:	f000 fbe7 	bl	80122a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011ad6:	6878      	ldr	r0, [r7, #4]
 8011ad8:	f000 f810 	bl	8011afc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011adc:	4b06      	ldr	r3, [pc, #24]	; (8011af8 <prvCheckTasksWaitingTermination+0x58>)
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d1e1      	bne.n	8011aa8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011ae4:	bf00      	nop
 8011ae6:	bf00      	nop
 8011ae8:	3708      	adds	r7, #8
 8011aea:	46bd      	mov	sp, r7
 8011aec:	bd80      	pop	{r7, pc}
 8011aee:	bf00      	nop
 8011af0:	20002bb4 	.word	0x20002bb4
 8011af4:	20002be0 	.word	0x20002be0
 8011af8:	20002bc8 	.word	0x20002bc8

08011afc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011afc:	b580      	push	{r7, lr}
 8011afe:	b084      	sub	sp, #16
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	334c      	adds	r3, #76	; 0x4c
 8011b08:	4618      	mov	r0, r3
 8011b0a:	f001 fd59 	bl	80135c0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d108      	bne.n	8011b2a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	f000 fd7f 	bl	8012620 <vPortFree>
				vPortFree( pxTCB );
 8011b22:	6878      	ldr	r0, [r7, #4]
 8011b24:	f000 fd7c 	bl	8012620 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011b28:	e018      	b.n	8011b5c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8011b30:	2b01      	cmp	r3, #1
 8011b32:	d103      	bne.n	8011b3c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011b34:	6878      	ldr	r0, [r7, #4]
 8011b36:	f000 fd73 	bl	8012620 <vPortFree>
	}
 8011b3a:	e00f      	b.n	8011b5c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8011b42:	2b02      	cmp	r3, #2
 8011b44:	d00a      	beq.n	8011b5c <prvDeleteTCB+0x60>
	__asm volatile
 8011b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b4a:	f383 8811 	msr	BASEPRI, r3
 8011b4e:	f3bf 8f6f 	isb	sy
 8011b52:	f3bf 8f4f 	dsb	sy
 8011b56:	60fb      	str	r3, [r7, #12]
}
 8011b58:	bf00      	nop
 8011b5a:	e7fe      	b.n	8011b5a <prvDeleteTCB+0x5e>
	}
 8011b5c:	bf00      	nop
 8011b5e:	3710      	adds	r7, #16
 8011b60:	46bd      	mov	sp, r7
 8011b62:	bd80      	pop	{r7, pc}

08011b64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011b64:	b480      	push	{r7}
 8011b66:	b083      	sub	sp, #12
 8011b68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011b6a:	4b0c      	ldr	r3, [pc, #48]	; (8011b9c <prvResetNextTaskUnblockTime+0x38>)
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d104      	bne.n	8011b7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011b74:	4b0a      	ldr	r3, [pc, #40]	; (8011ba0 <prvResetNextTaskUnblockTime+0x3c>)
 8011b76:	f04f 32ff 	mov.w	r2, #4294967295
 8011b7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011b7c:	e008      	b.n	8011b90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b7e:	4b07      	ldr	r3, [pc, #28]	; (8011b9c <prvResetNextTaskUnblockTime+0x38>)
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	68db      	ldr	r3, [r3, #12]
 8011b84:	68db      	ldr	r3, [r3, #12]
 8011b86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	685b      	ldr	r3, [r3, #4]
 8011b8c:	4a04      	ldr	r2, [pc, #16]	; (8011ba0 <prvResetNextTaskUnblockTime+0x3c>)
 8011b8e:	6013      	str	r3, [r2, #0]
}
 8011b90:	bf00      	nop
 8011b92:	370c      	adds	r7, #12
 8011b94:	46bd      	mov	sp, r7
 8011b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9a:	4770      	bx	lr
 8011b9c:	20002b98 	.word	0x20002b98
 8011ba0:	20002c00 	.word	0x20002c00

08011ba4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011ba4:	b480      	push	{r7}
 8011ba6:	b083      	sub	sp, #12
 8011ba8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011baa:	4b0b      	ldr	r3, [pc, #44]	; (8011bd8 <xTaskGetSchedulerState+0x34>)
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d102      	bne.n	8011bb8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011bb2:	2301      	movs	r3, #1
 8011bb4:	607b      	str	r3, [r7, #4]
 8011bb6:	e008      	b.n	8011bca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011bb8:	4b08      	ldr	r3, [pc, #32]	; (8011bdc <xTaskGetSchedulerState+0x38>)
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d102      	bne.n	8011bc6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011bc0:	2302      	movs	r3, #2
 8011bc2:	607b      	str	r3, [r7, #4]
 8011bc4:	e001      	b.n	8011bca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011bca:	687b      	ldr	r3, [r7, #4]
	}
 8011bcc:	4618      	mov	r0, r3
 8011bce:	370c      	adds	r7, #12
 8011bd0:	46bd      	mov	sp, r7
 8011bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd6:	4770      	bx	lr
 8011bd8:	20002bec 	.word	0x20002bec
 8011bdc:	20002c08 	.word	0x20002c08

08011be0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011be0:	b580      	push	{r7, lr}
 8011be2:	b084      	sub	sp, #16
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011bec:	2300      	movs	r3, #0
 8011bee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d05e      	beq.n	8011cb4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011bf6:	68bb      	ldr	r3, [r7, #8]
 8011bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bfa:	4b31      	ldr	r3, [pc, #196]	; (8011cc0 <xTaskPriorityInherit+0xe0>)
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c00:	429a      	cmp	r2, r3
 8011c02:	d24e      	bcs.n	8011ca2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011c04:	68bb      	ldr	r3, [r7, #8]
 8011c06:	699b      	ldr	r3, [r3, #24]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	db06      	blt.n	8011c1a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011c0c:	4b2c      	ldr	r3, [pc, #176]	; (8011cc0 <xTaskPriorityInherit+0xe0>)
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c12:	f1c3 0207 	rsb	r2, r3, #7
 8011c16:	68bb      	ldr	r3, [r7, #8]
 8011c18:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011c1a:	68bb      	ldr	r3, [r7, #8]
 8011c1c:	6959      	ldr	r1, [r3, #20]
 8011c1e:	68bb      	ldr	r3, [r7, #8]
 8011c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c22:	4613      	mov	r3, r2
 8011c24:	009b      	lsls	r3, r3, #2
 8011c26:	4413      	add	r3, r2
 8011c28:	009b      	lsls	r3, r3, #2
 8011c2a:	4a26      	ldr	r2, [pc, #152]	; (8011cc4 <xTaskPriorityInherit+0xe4>)
 8011c2c:	4413      	add	r3, r2
 8011c2e:	4299      	cmp	r1, r3
 8011c30:	d12f      	bne.n	8011c92 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011c32:	68bb      	ldr	r3, [r7, #8]
 8011c34:	3304      	adds	r3, #4
 8011c36:	4618      	mov	r0, r3
 8011c38:	f7fe fbd1 	bl	80103de <uxListRemove>
 8011c3c:	4603      	mov	r3, r0
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d10a      	bne.n	8011c58 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8011c42:	68bb      	ldr	r3, [r7, #8]
 8011c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c46:	2201      	movs	r2, #1
 8011c48:	fa02 f303 	lsl.w	r3, r2, r3
 8011c4c:	43da      	mvns	r2, r3
 8011c4e:	4b1e      	ldr	r3, [pc, #120]	; (8011cc8 <xTaskPriorityInherit+0xe8>)
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	4013      	ands	r3, r2
 8011c54:	4a1c      	ldr	r2, [pc, #112]	; (8011cc8 <xTaskPriorityInherit+0xe8>)
 8011c56:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011c58:	4b19      	ldr	r3, [pc, #100]	; (8011cc0 <xTaskPriorityInherit+0xe0>)
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c5e:	68bb      	ldr	r3, [r7, #8]
 8011c60:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011c62:	68bb      	ldr	r3, [r7, #8]
 8011c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c66:	2201      	movs	r2, #1
 8011c68:	409a      	lsls	r2, r3
 8011c6a:	4b17      	ldr	r3, [pc, #92]	; (8011cc8 <xTaskPriorityInherit+0xe8>)
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	4313      	orrs	r3, r2
 8011c70:	4a15      	ldr	r2, [pc, #84]	; (8011cc8 <xTaskPriorityInherit+0xe8>)
 8011c72:	6013      	str	r3, [r2, #0]
 8011c74:	68bb      	ldr	r3, [r7, #8]
 8011c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c78:	4613      	mov	r3, r2
 8011c7a:	009b      	lsls	r3, r3, #2
 8011c7c:	4413      	add	r3, r2
 8011c7e:	009b      	lsls	r3, r3, #2
 8011c80:	4a10      	ldr	r2, [pc, #64]	; (8011cc4 <xTaskPriorityInherit+0xe4>)
 8011c82:	441a      	add	r2, r3
 8011c84:	68bb      	ldr	r3, [r7, #8]
 8011c86:	3304      	adds	r3, #4
 8011c88:	4619      	mov	r1, r3
 8011c8a:	4610      	mov	r0, r2
 8011c8c:	f7fe fb4a 	bl	8010324 <vListInsertEnd>
 8011c90:	e004      	b.n	8011c9c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011c92:	4b0b      	ldr	r3, [pc, #44]	; (8011cc0 <xTaskPriorityInherit+0xe0>)
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c98:	68bb      	ldr	r3, [r7, #8]
 8011c9a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011c9c:	2301      	movs	r3, #1
 8011c9e:	60fb      	str	r3, [r7, #12]
 8011ca0:	e008      	b.n	8011cb4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011ca2:	68bb      	ldr	r3, [r7, #8]
 8011ca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011ca6:	4b06      	ldr	r3, [pc, #24]	; (8011cc0 <xTaskPriorityInherit+0xe0>)
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cac:	429a      	cmp	r2, r3
 8011cae:	d201      	bcs.n	8011cb4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011cb0:	2301      	movs	r3, #1
 8011cb2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011cb4:	68fb      	ldr	r3, [r7, #12]
	}
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	3710      	adds	r7, #16
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bd80      	pop	{r7, pc}
 8011cbe:	bf00      	nop
 8011cc0:	20002ae0 	.word	0x20002ae0
 8011cc4:	20002ae4 	.word	0x20002ae4
 8011cc8:	20002be8 	.word	0x20002be8

08011ccc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b086      	sub	sp, #24
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011cd8:	2300      	movs	r3, #0
 8011cda:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d06e      	beq.n	8011dc0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011ce2:	4b3a      	ldr	r3, [pc, #232]	; (8011dcc <xTaskPriorityDisinherit+0x100>)
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	693a      	ldr	r2, [r7, #16]
 8011ce8:	429a      	cmp	r2, r3
 8011cea:	d00a      	beq.n	8011d02 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cf0:	f383 8811 	msr	BASEPRI, r3
 8011cf4:	f3bf 8f6f 	isb	sy
 8011cf8:	f3bf 8f4f 	dsb	sy
 8011cfc:	60fb      	str	r3, [r7, #12]
}
 8011cfe:	bf00      	nop
 8011d00:	e7fe      	b.n	8011d00 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011d02:	693b      	ldr	r3, [r7, #16]
 8011d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d10a      	bne.n	8011d20 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d0e:	f383 8811 	msr	BASEPRI, r3
 8011d12:	f3bf 8f6f 	isb	sy
 8011d16:	f3bf 8f4f 	dsb	sy
 8011d1a:	60bb      	str	r3, [r7, #8]
}
 8011d1c:	bf00      	nop
 8011d1e:	e7fe      	b.n	8011d1e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011d20:	693b      	ldr	r3, [r7, #16]
 8011d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011d24:	1e5a      	subs	r2, r3, #1
 8011d26:	693b      	ldr	r3, [r7, #16]
 8011d28:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011d2a:	693b      	ldr	r3, [r7, #16]
 8011d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d2e:	693b      	ldr	r3, [r7, #16]
 8011d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d32:	429a      	cmp	r2, r3
 8011d34:	d044      	beq.n	8011dc0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011d36:	693b      	ldr	r3, [r7, #16]
 8011d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d140      	bne.n	8011dc0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011d3e:	693b      	ldr	r3, [r7, #16]
 8011d40:	3304      	adds	r3, #4
 8011d42:	4618      	mov	r0, r3
 8011d44:	f7fe fb4b 	bl	80103de <uxListRemove>
 8011d48:	4603      	mov	r3, r0
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d115      	bne.n	8011d7a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011d4e:	693b      	ldr	r3, [r7, #16]
 8011d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d52:	491f      	ldr	r1, [pc, #124]	; (8011dd0 <xTaskPriorityDisinherit+0x104>)
 8011d54:	4613      	mov	r3, r2
 8011d56:	009b      	lsls	r3, r3, #2
 8011d58:	4413      	add	r3, r2
 8011d5a:	009b      	lsls	r3, r3, #2
 8011d5c:	440b      	add	r3, r1
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d10a      	bne.n	8011d7a <xTaskPriorityDisinherit+0xae>
 8011d64:	693b      	ldr	r3, [r7, #16]
 8011d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d68:	2201      	movs	r2, #1
 8011d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8011d6e:	43da      	mvns	r2, r3
 8011d70:	4b18      	ldr	r3, [pc, #96]	; (8011dd4 <xTaskPriorityDisinherit+0x108>)
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	4013      	ands	r3, r2
 8011d76:	4a17      	ldr	r2, [pc, #92]	; (8011dd4 <xTaskPriorityDisinherit+0x108>)
 8011d78:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011d7a:	693b      	ldr	r3, [r7, #16]
 8011d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011d7e:	693b      	ldr	r3, [r7, #16]
 8011d80:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011d82:	693b      	ldr	r3, [r7, #16]
 8011d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d86:	f1c3 0207 	rsb	r2, r3, #7
 8011d8a:	693b      	ldr	r3, [r7, #16]
 8011d8c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011d8e:	693b      	ldr	r3, [r7, #16]
 8011d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d92:	2201      	movs	r2, #1
 8011d94:	409a      	lsls	r2, r3
 8011d96:	4b0f      	ldr	r3, [pc, #60]	; (8011dd4 <xTaskPriorityDisinherit+0x108>)
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	4313      	orrs	r3, r2
 8011d9c:	4a0d      	ldr	r2, [pc, #52]	; (8011dd4 <xTaskPriorityDisinherit+0x108>)
 8011d9e:	6013      	str	r3, [r2, #0]
 8011da0:	693b      	ldr	r3, [r7, #16]
 8011da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011da4:	4613      	mov	r3, r2
 8011da6:	009b      	lsls	r3, r3, #2
 8011da8:	4413      	add	r3, r2
 8011daa:	009b      	lsls	r3, r3, #2
 8011dac:	4a08      	ldr	r2, [pc, #32]	; (8011dd0 <xTaskPriorityDisinherit+0x104>)
 8011dae:	441a      	add	r2, r3
 8011db0:	693b      	ldr	r3, [r7, #16]
 8011db2:	3304      	adds	r3, #4
 8011db4:	4619      	mov	r1, r3
 8011db6:	4610      	mov	r0, r2
 8011db8:	f7fe fab4 	bl	8010324 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011dbc:	2301      	movs	r3, #1
 8011dbe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011dc0:	697b      	ldr	r3, [r7, #20]
	}
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	3718      	adds	r7, #24
 8011dc6:	46bd      	mov	sp, r7
 8011dc8:	bd80      	pop	{r7, pc}
 8011dca:	bf00      	nop
 8011dcc:	20002ae0 	.word	0x20002ae0
 8011dd0:	20002ae4 	.word	0x20002ae4
 8011dd4:	20002be8 	.word	0x20002be8

08011dd8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011dd8:	b580      	push	{r7, lr}
 8011dda:	b088      	sub	sp, #32
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	6078      	str	r0, [r7, #4]
 8011de0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011de6:	2301      	movs	r3, #1
 8011de8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d077      	beq.n	8011ee0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011df0:	69bb      	ldr	r3, [r7, #24]
 8011df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d10a      	bne.n	8011e0e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8011df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dfc:	f383 8811 	msr	BASEPRI, r3
 8011e00:	f3bf 8f6f 	isb	sy
 8011e04:	f3bf 8f4f 	dsb	sy
 8011e08:	60fb      	str	r3, [r7, #12]
}
 8011e0a:	bf00      	nop
 8011e0c:	e7fe      	b.n	8011e0c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011e0e:	69bb      	ldr	r3, [r7, #24]
 8011e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e12:	683a      	ldr	r2, [r7, #0]
 8011e14:	429a      	cmp	r2, r3
 8011e16:	d902      	bls.n	8011e1e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011e18:	683b      	ldr	r3, [r7, #0]
 8011e1a:	61fb      	str	r3, [r7, #28]
 8011e1c:	e002      	b.n	8011e24 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011e1e:	69bb      	ldr	r3, [r7, #24]
 8011e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e22:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011e24:	69bb      	ldr	r3, [r7, #24]
 8011e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e28:	69fa      	ldr	r2, [r7, #28]
 8011e2a:	429a      	cmp	r2, r3
 8011e2c:	d058      	beq.n	8011ee0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011e2e:	69bb      	ldr	r3, [r7, #24]
 8011e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011e32:	697a      	ldr	r2, [r7, #20]
 8011e34:	429a      	cmp	r2, r3
 8011e36:	d153      	bne.n	8011ee0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011e38:	4b2b      	ldr	r3, [pc, #172]	; (8011ee8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	69ba      	ldr	r2, [r7, #24]
 8011e3e:	429a      	cmp	r2, r3
 8011e40:	d10a      	bne.n	8011e58 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8011e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e46:	f383 8811 	msr	BASEPRI, r3
 8011e4a:	f3bf 8f6f 	isb	sy
 8011e4e:	f3bf 8f4f 	dsb	sy
 8011e52:	60bb      	str	r3, [r7, #8]
}
 8011e54:	bf00      	nop
 8011e56:	e7fe      	b.n	8011e56 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011e58:	69bb      	ldr	r3, [r7, #24]
 8011e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e5c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011e5e:	69bb      	ldr	r3, [r7, #24]
 8011e60:	69fa      	ldr	r2, [r7, #28]
 8011e62:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011e64:	69bb      	ldr	r3, [r7, #24]
 8011e66:	699b      	ldr	r3, [r3, #24]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	db04      	blt.n	8011e76 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011e6c:	69fb      	ldr	r3, [r7, #28]
 8011e6e:	f1c3 0207 	rsb	r2, r3, #7
 8011e72:	69bb      	ldr	r3, [r7, #24]
 8011e74:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011e76:	69bb      	ldr	r3, [r7, #24]
 8011e78:	6959      	ldr	r1, [r3, #20]
 8011e7a:	693a      	ldr	r2, [r7, #16]
 8011e7c:	4613      	mov	r3, r2
 8011e7e:	009b      	lsls	r3, r3, #2
 8011e80:	4413      	add	r3, r2
 8011e82:	009b      	lsls	r3, r3, #2
 8011e84:	4a19      	ldr	r2, [pc, #100]	; (8011eec <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8011e86:	4413      	add	r3, r2
 8011e88:	4299      	cmp	r1, r3
 8011e8a:	d129      	bne.n	8011ee0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011e8c:	69bb      	ldr	r3, [r7, #24]
 8011e8e:	3304      	adds	r3, #4
 8011e90:	4618      	mov	r0, r3
 8011e92:	f7fe faa4 	bl	80103de <uxListRemove>
 8011e96:	4603      	mov	r3, r0
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d10a      	bne.n	8011eb2 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8011e9c:	69bb      	ldr	r3, [r7, #24]
 8011e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ea0:	2201      	movs	r2, #1
 8011ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8011ea6:	43da      	mvns	r2, r3
 8011ea8:	4b11      	ldr	r3, [pc, #68]	; (8011ef0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	4013      	ands	r3, r2
 8011eae:	4a10      	ldr	r2, [pc, #64]	; (8011ef0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011eb0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011eb2:	69bb      	ldr	r3, [r7, #24]
 8011eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011eb6:	2201      	movs	r2, #1
 8011eb8:	409a      	lsls	r2, r3
 8011eba:	4b0d      	ldr	r3, [pc, #52]	; (8011ef0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	4313      	orrs	r3, r2
 8011ec0:	4a0b      	ldr	r2, [pc, #44]	; (8011ef0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011ec2:	6013      	str	r3, [r2, #0]
 8011ec4:	69bb      	ldr	r3, [r7, #24]
 8011ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ec8:	4613      	mov	r3, r2
 8011eca:	009b      	lsls	r3, r3, #2
 8011ecc:	4413      	add	r3, r2
 8011ece:	009b      	lsls	r3, r3, #2
 8011ed0:	4a06      	ldr	r2, [pc, #24]	; (8011eec <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8011ed2:	441a      	add	r2, r3
 8011ed4:	69bb      	ldr	r3, [r7, #24]
 8011ed6:	3304      	adds	r3, #4
 8011ed8:	4619      	mov	r1, r3
 8011eda:	4610      	mov	r0, r2
 8011edc:	f7fe fa22 	bl	8010324 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011ee0:	bf00      	nop
 8011ee2:	3720      	adds	r7, #32
 8011ee4:	46bd      	mov	sp, r7
 8011ee6:	bd80      	pop	{r7, pc}
 8011ee8:	20002ae0 	.word	0x20002ae0
 8011eec:	20002ae4 	.word	0x20002ae4
 8011ef0:	20002be8 	.word	0x20002be8

08011ef4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011ef4:	b480      	push	{r7}
 8011ef6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011ef8:	4b07      	ldr	r3, [pc, #28]	; (8011f18 <pvTaskIncrementMutexHeldCount+0x24>)
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d004      	beq.n	8011f0a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011f00:	4b05      	ldr	r3, [pc, #20]	; (8011f18 <pvTaskIncrementMutexHeldCount+0x24>)
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011f06:	3201      	adds	r2, #1
 8011f08:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8011f0a:	4b03      	ldr	r3, [pc, #12]	; (8011f18 <pvTaskIncrementMutexHeldCount+0x24>)
 8011f0c:	681b      	ldr	r3, [r3, #0]
	}
 8011f0e:	4618      	mov	r0, r3
 8011f10:	46bd      	mov	sp, r7
 8011f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f16:	4770      	bx	lr
 8011f18:	20002ae0 	.word	0x20002ae0

08011f1c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b084      	sub	sp, #16
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
 8011f24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011f26:	4b29      	ldr	r3, [pc, #164]	; (8011fcc <prvAddCurrentTaskToDelayedList+0xb0>)
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011f2c:	4b28      	ldr	r3, [pc, #160]	; (8011fd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	3304      	adds	r3, #4
 8011f32:	4618      	mov	r0, r3
 8011f34:	f7fe fa53 	bl	80103de <uxListRemove>
 8011f38:	4603      	mov	r3, r0
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d10b      	bne.n	8011f56 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8011f3e:	4b24      	ldr	r3, [pc, #144]	; (8011fd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f44:	2201      	movs	r2, #1
 8011f46:	fa02 f303 	lsl.w	r3, r2, r3
 8011f4a:	43da      	mvns	r2, r3
 8011f4c:	4b21      	ldr	r3, [pc, #132]	; (8011fd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	4013      	ands	r3, r2
 8011f52:	4a20      	ldr	r2, [pc, #128]	; (8011fd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011f54:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f5c:	d10a      	bne.n	8011f74 <prvAddCurrentTaskToDelayedList+0x58>
 8011f5e:	683b      	ldr	r3, [r7, #0]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d007      	beq.n	8011f74 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011f64:	4b1a      	ldr	r3, [pc, #104]	; (8011fd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	3304      	adds	r3, #4
 8011f6a:	4619      	mov	r1, r3
 8011f6c:	481a      	ldr	r0, [pc, #104]	; (8011fd8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8011f6e:	f7fe f9d9 	bl	8010324 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011f72:	e026      	b.n	8011fc2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011f74:	68fa      	ldr	r2, [r7, #12]
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	4413      	add	r3, r2
 8011f7a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011f7c:	4b14      	ldr	r3, [pc, #80]	; (8011fd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	68ba      	ldr	r2, [r7, #8]
 8011f82:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011f84:	68ba      	ldr	r2, [r7, #8]
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	429a      	cmp	r2, r3
 8011f8a:	d209      	bcs.n	8011fa0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011f8c:	4b13      	ldr	r3, [pc, #76]	; (8011fdc <prvAddCurrentTaskToDelayedList+0xc0>)
 8011f8e:	681a      	ldr	r2, [r3, #0]
 8011f90:	4b0f      	ldr	r3, [pc, #60]	; (8011fd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	3304      	adds	r3, #4
 8011f96:	4619      	mov	r1, r3
 8011f98:	4610      	mov	r0, r2
 8011f9a:	f7fe f9e7 	bl	801036c <vListInsert>
}
 8011f9e:	e010      	b.n	8011fc2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011fa0:	4b0f      	ldr	r3, [pc, #60]	; (8011fe0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8011fa2:	681a      	ldr	r2, [r3, #0]
 8011fa4:	4b0a      	ldr	r3, [pc, #40]	; (8011fd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	3304      	adds	r3, #4
 8011faa:	4619      	mov	r1, r3
 8011fac:	4610      	mov	r0, r2
 8011fae:	f7fe f9dd 	bl	801036c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011fb2:	4b0c      	ldr	r3, [pc, #48]	; (8011fe4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	68ba      	ldr	r2, [r7, #8]
 8011fb8:	429a      	cmp	r2, r3
 8011fba:	d202      	bcs.n	8011fc2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011fbc:	4a09      	ldr	r2, [pc, #36]	; (8011fe4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011fbe:	68bb      	ldr	r3, [r7, #8]
 8011fc0:	6013      	str	r3, [r2, #0]
}
 8011fc2:	bf00      	nop
 8011fc4:	3710      	adds	r7, #16
 8011fc6:	46bd      	mov	sp, r7
 8011fc8:	bd80      	pop	{r7, pc}
 8011fca:	bf00      	nop
 8011fcc:	20002be4 	.word	0x20002be4
 8011fd0:	20002ae0 	.word	0x20002ae0
 8011fd4:	20002be8 	.word	0x20002be8
 8011fd8:	20002bcc 	.word	0x20002bcc
 8011fdc:	20002b9c 	.word	0x20002b9c
 8011fe0:	20002b98 	.word	0x20002b98
 8011fe4:	20002c00 	.word	0x20002c00

08011fe8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011fe8:	b480      	push	{r7}
 8011fea:	b085      	sub	sp, #20
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	60f8      	str	r0, [r7, #12]
 8011ff0:	60b9      	str	r1, [r7, #8]
 8011ff2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	3b04      	subs	r3, #4
 8011ff8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012000:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	3b04      	subs	r3, #4
 8012006:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012008:	68bb      	ldr	r3, [r7, #8]
 801200a:	f023 0201 	bic.w	r2, r3, #1
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	3b04      	subs	r3, #4
 8012016:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012018:	4a0c      	ldr	r2, [pc, #48]	; (801204c <pxPortInitialiseStack+0x64>)
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	3b14      	subs	r3, #20
 8012022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012024:	687a      	ldr	r2, [r7, #4]
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	3b04      	subs	r3, #4
 801202e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	f06f 0202 	mvn.w	r2, #2
 8012036:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	3b20      	subs	r3, #32
 801203c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801203e:	68fb      	ldr	r3, [r7, #12]
}
 8012040:	4618      	mov	r0, r3
 8012042:	3714      	adds	r7, #20
 8012044:	46bd      	mov	sp, r7
 8012046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801204a:	4770      	bx	lr
 801204c:	08012051 	.word	0x08012051

08012050 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012050:	b480      	push	{r7}
 8012052:	b085      	sub	sp, #20
 8012054:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012056:	2300      	movs	r3, #0
 8012058:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801205a:	4b12      	ldr	r3, [pc, #72]	; (80120a4 <prvTaskExitError+0x54>)
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012062:	d00a      	beq.n	801207a <prvTaskExitError+0x2a>
	__asm volatile
 8012064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012068:	f383 8811 	msr	BASEPRI, r3
 801206c:	f3bf 8f6f 	isb	sy
 8012070:	f3bf 8f4f 	dsb	sy
 8012074:	60fb      	str	r3, [r7, #12]
}
 8012076:	bf00      	nop
 8012078:	e7fe      	b.n	8012078 <prvTaskExitError+0x28>
	__asm volatile
 801207a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801207e:	f383 8811 	msr	BASEPRI, r3
 8012082:	f3bf 8f6f 	isb	sy
 8012086:	f3bf 8f4f 	dsb	sy
 801208a:	60bb      	str	r3, [r7, #8]
}
 801208c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801208e:	bf00      	nop
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d0fc      	beq.n	8012090 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012096:	bf00      	nop
 8012098:	bf00      	nop
 801209a:	3714      	adds	r7, #20
 801209c:	46bd      	mov	sp, r7
 801209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a2:	4770      	bx	lr
 80120a4:	2000002c 	.word	0x2000002c
	...

080120b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80120b0:	4b07      	ldr	r3, [pc, #28]	; (80120d0 <pxCurrentTCBConst2>)
 80120b2:	6819      	ldr	r1, [r3, #0]
 80120b4:	6808      	ldr	r0, [r1, #0]
 80120b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120ba:	f380 8809 	msr	PSP, r0
 80120be:	f3bf 8f6f 	isb	sy
 80120c2:	f04f 0000 	mov.w	r0, #0
 80120c6:	f380 8811 	msr	BASEPRI, r0
 80120ca:	4770      	bx	lr
 80120cc:	f3af 8000 	nop.w

080120d0 <pxCurrentTCBConst2>:
 80120d0:	20002ae0 	.word	0x20002ae0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80120d4:	bf00      	nop
 80120d6:	bf00      	nop

080120d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80120d8:	4808      	ldr	r0, [pc, #32]	; (80120fc <prvPortStartFirstTask+0x24>)
 80120da:	6800      	ldr	r0, [r0, #0]
 80120dc:	6800      	ldr	r0, [r0, #0]
 80120de:	f380 8808 	msr	MSP, r0
 80120e2:	f04f 0000 	mov.w	r0, #0
 80120e6:	f380 8814 	msr	CONTROL, r0
 80120ea:	b662      	cpsie	i
 80120ec:	b661      	cpsie	f
 80120ee:	f3bf 8f4f 	dsb	sy
 80120f2:	f3bf 8f6f 	isb	sy
 80120f6:	df00      	svc	0
 80120f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80120fa:	bf00      	nop
 80120fc:	e000ed08 	.word	0xe000ed08

08012100 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012100:	b580      	push	{r7, lr}
 8012102:	b086      	sub	sp, #24
 8012104:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012106:	4b46      	ldr	r3, [pc, #280]	; (8012220 <xPortStartScheduler+0x120>)
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	4a46      	ldr	r2, [pc, #280]	; (8012224 <xPortStartScheduler+0x124>)
 801210c:	4293      	cmp	r3, r2
 801210e:	d10a      	bne.n	8012126 <xPortStartScheduler+0x26>
	__asm volatile
 8012110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012114:	f383 8811 	msr	BASEPRI, r3
 8012118:	f3bf 8f6f 	isb	sy
 801211c:	f3bf 8f4f 	dsb	sy
 8012120:	613b      	str	r3, [r7, #16]
}
 8012122:	bf00      	nop
 8012124:	e7fe      	b.n	8012124 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012126:	4b3e      	ldr	r3, [pc, #248]	; (8012220 <xPortStartScheduler+0x120>)
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	4a3f      	ldr	r2, [pc, #252]	; (8012228 <xPortStartScheduler+0x128>)
 801212c:	4293      	cmp	r3, r2
 801212e:	d10a      	bne.n	8012146 <xPortStartScheduler+0x46>
	__asm volatile
 8012130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012134:	f383 8811 	msr	BASEPRI, r3
 8012138:	f3bf 8f6f 	isb	sy
 801213c:	f3bf 8f4f 	dsb	sy
 8012140:	60fb      	str	r3, [r7, #12]
}
 8012142:	bf00      	nop
 8012144:	e7fe      	b.n	8012144 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012146:	4b39      	ldr	r3, [pc, #228]	; (801222c <xPortStartScheduler+0x12c>)
 8012148:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801214a:	697b      	ldr	r3, [r7, #20]
 801214c:	781b      	ldrb	r3, [r3, #0]
 801214e:	b2db      	uxtb	r3, r3
 8012150:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012152:	697b      	ldr	r3, [r7, #20]
 8012154:	22ff      	movs	r2, #255	; 0xff
 8012156:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012158:	697b      	ldr	r3, [r7, #20]
 801215a:	781b      	ldrb	r3, [r3, #0]
 801215c:	b2db      	uxtb	r3, r3
 801215e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012160:	78fb      	ldrb	r3, [r7, #3]
 8012162:	b2db      	uxtb	r3, r3
 8012164:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012168:	b2da      	uxtb	r2, r3
 801216a:	4b31      	ldr	r3, [pc, #196]	; (8012230 <xPortStartScheduler+0x130>)
 801216c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801216e:	4b31      	ldr	r3, [pc, #196]	; (8012234 <xPortStartScheduler+0x134>)
 8012170:	2207      	movs	r2, #7
 8012172:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012174:	e009      	b.n	801218a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012176:	4b2f      	ldr	r3, [pc, #188]	; (8012234 <xPortStartScheduler+0x134>)
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	3b01      	subs	r3, #1
 801217c:	4a2d      	ldr	r2, [pc, #180]	; (8012234 <xPortStartScheduler+0x134>)
 801217e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012180:	78fb      	ldrb	r3, [r7, #3]
 8012182:	b2db      	uxtb	r3, r3
 8012184:	005b      	lsls	r3, r3, #1
 8012186:	b2db      	uxtb	r3, r3
 8012188:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801218a:	78fb      	ldrb	r3, [r7, #3]
 801218c:	b2db      	uxtb	r3, r3
 801218e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012192:	2b80      	cmp	r3, #128	; 0x80
 8012194:	d0ef      	beq.n	8012176 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012196:	4b27      	ldr	r3, [pc, #156]	; (8012234 <xPortStartScheduler+0x134>)
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	f1c3 0307 	rsb	r3, r3, #7
 801219e:	2b04      	cmp	r3, #4
 80121a0:	d00a      	beq.n	80121b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80121a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121a6:	f383 8811 	msr	BASEPRI, r3
 80121aa:	f3bf 8f6f 	isb	sy
 80121ae:	f3bf 8f4f 	dsb	sy
 80121b2:	60bb      	str	r3, [r7, #8]
}
 80121b4:	bf00      	nop
 80121b6:	e7fe      	b.n	80121b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80121b8:	4b1e      	ldr	r3, [pc, #120]	; (8012234 <xPortStartScheduler+0x134>)
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	021b      	lsls	r3, r3, #8
 80121be:	4a1d      	ldr	r2, [pc, #116]	; (8012234 <xPortStartScheduler+0x134>)
 80121c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80121c2:	4b1c      	ldr	r3, [pc, #112]	; (8012234 <xPortStartScheduler+0x134>)
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80121ca:	4a1a      	ldr	r2, [pc, #104]	; (8012234 <xPortStartScheduler+0x134>)
 80121cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	b2da      	uxtb	r2, r3
 80121d2:	697b      	ldr	r3, [r7, #20]
 80121d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80121d6:	4b18      	ldr	r3, [pc, #96]	; (8012238 <xPortStartScheduler+0x138>)
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	4a17      	ldr	r2, [pc, #92]	; (8012238 <xPortStartScheduler+0x138>)
 80121dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80121e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80121e2:	4b15      	ldr	r3, [pc, #84]	; (8012238 <xPortStartScheduler+0x138>)
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	4a14      	ldr	r2, [pc, #80]	; (8012238 <xPortStartScheduler+0x138>)
 80121e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80121ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80121ee:	f000 f8dd 	bl	80123ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80121f2:	4b12      	ldr	r3, [pc, #72]	; (801223c <xPortStartScheduler+0x13c>)
 80121f4:	2200      	movs	r2, #0
 80121f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80121f8:	f000 f8fc 	bl	80123f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80121fc:	4b10      	ldr	r3, [pc, #64]	; (8012240 <xPortStartScheduler+0x140>)
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	4a0f      	ldr	r2, [pc, #60]	; (8012240 <xPortStartScheduler+0x140>)
 8012202:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012206:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012208:	f7ff ff66 	bl	80120d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801220c:	f7ff fa84 	bl	8011718 <vTaskSwitchContext>
	prvTaskExitError();
 8012210:	f7ff ff1e 	bl	8012050 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012214:	2300      	movs	r3, #0
}
 8012216:	4618      	mov	r0, r3
 8012218:	3718      	adds	r7, #24
 801221a:	46bd      	mov	sp, r7
 801221c:	bd80      	pop	{r7, pc}
 801221e:	bf00      	nop
 8012220:	e000ed00 	.word	0xe000ed00
 8012224:	410fc271 	.word	0x410fc271
 8012228:	410fc270 	.word	0x410fc270
 801222c:	e000e400 	.word	0xe000e400
 8012230:	20002c0c 	.word	0x20002c0c
 8012234:	20002c10 	.word	0x20002c10
 8012238:	e000ed20 	.word	0xe000ed20
 801223c:	2000002c 	.word	0x2000002c
 8012240:	e000ef34 	.word	0xe000ef34

08012244 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012244:	b480      	push	{r7}
 8012246:	b083      	sub	sp, #12
 8012248:	af00      	add	r7, sp, #0
	__asm volatile
 801224a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801224e:	f383 8811 	msr	BASEPRI, r3
 8012252:	f3bf 8f6f 	isb	sy
 8012256:	f3bf 8f4f 	dsb	sy
 801225a:	607b      	str	r3, [r7, #4]
}
 801225c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801225e:	4b0f      	ldr	r3, [pc, #60]	; (801229c <vPortEnterCritical+0x58>)
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	3301      	adds	r3, #1
 8012264:	4a0d      	ldr	r2, [pc, #52]	; (801229c <vPortEnterCritical+0x58>)
 8012266:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012268:	4b0c      	ldr	r3, [pc, #48]	; (801229c <vPortEnterCritical+0x58>)
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	2b01      	cmp	r3, #1
 801226e:	d10f      	bne.n	8012290 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012270:	4b0b      	ldr	r3, [pc, #44]	; (80122a0 <vPortEnterCritical+0x5c>)
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	b2db      	uxtb	r3, r3
 8012276:	2b00      	cmp	r3, #0
 8012278:	d00a      	beq.n	8012290 <vPortEnterCritical+0x4c>
	__asm volatile
 801227a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801227e:	f383 8811 	msr	BASEPRI, r3
 8012282:	f3bf 8f6f 	isb	sy
 8012286:	f3bf 8f4f 	dsb	sy
 801228a:	603b      	str	r3, [r7, #0]
}
 801228c:	bf00      	nop
 801228e:	e7fe      	b.n	801228e <vPortEnterCritical+0x4a>
	}
}
 8012290:	bf00      	nop
 8012292:	370c      	adds	r7, #12
 8012294:	46bd      	mov	sp, r7
 8012296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801229a:	4770      	bx	lr
 801229c:	2000002c 	.word	0x2000002c
 80122a0:	e000ed04 	.word	0xe000ed04

080122a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80122a4:	b480      	push	{r7}
 80122a6:	b083      	sub	sp, #12
 80122a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80122aa:	4b12      	ldr	r3, [pc, #72]	; (80122f4 <vPortExitCritical+0x50>)
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d10a      	bne.n	80122c8 <vPortExitCritical+0x24>
	__asm volatile
 80122b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122b6:	f383 8811 	msr	BASEPRI, r3
 80122ba:	f3bf 8f6f 	isb	sy
 80122be:	f3bf 8f4f 	dsb	sy
 80122c2:	607b      	str	r3, [r7, #4]
}
 80122c4:	bf00      	nop
 80122c6:	e7fe      	b.n	80122c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80122c8:	4b0a      	ldr	r3, [pc, #40]	; (80122f4 <vPortExitCritical+0x50>)
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	3b01      	subs	r3, #1
 80122ce:	4a09      	ldr	r2, [pc, #36]	; (80122f4 <vPortExitCritical+0x50>)
 80122d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80122d2:	4b08      	ldr	r3, [pc, #32]	; (80122f4 <vPortExitCritical+0x50>)
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d105      	bne.n	80122e6 <vPortExitCritical+0x42>
 80122da:	2300      	movs	r3, #0
 80122dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80122de:	683b      	ldr	r3, [r7, #0]
 80122e0:	f383 8811 	msr	BASEPRI, r3
}
 80122e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80122e6:	bf00      	nop
 80122e8:	370c      	adds	r7, #12
 80122ea:	46bd      	mov	sp, r7
 80122ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f0:	4770      	bx	lr
 80122f2:	bf00      	nop
 80122f4:	2000002c 	.word	0x2000002c
	...

08012300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012300:	f3ef 8009 	mrs	r0, PSP
 8012304:	f3bf 8f6f 	isb	sy
 8012308:	4b15      	ldr	r3, [pc, #84]	; (8012360 <pxCurrentTCBConst>)
 801230a:	681a      	ldr	r2, [r3, #0]
 801230c:	f01e 0f10 	tst.w	lr, #16
 8012310:	bf08      	it	eq
 8012312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801231a:	6010      	str	r0, [r2, #0]
 801231c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012320:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012324:	f380 8811 	msr	BASEPRI, r0
 8012328:	f3bf 8f4f 	dsb	sy
 801232c:	f3bf 8f6f 	isb	sy
 8012330:	f7ff f9f2 	bl	8011718 <vTaskSwitchContext>
 8012334:	f04f 0000 	mov.w	r0, #0
 8012338:	f380 8811 	msr	BASEPRI, r0
 801233c:	bc09      	pop	{r0, r3}
 801233e:	6819      	ldr	r1, [r3, #0]
 8012340:	6808      	ldr	r0, [r1, #0]
 8012342:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012346:	f01e 0f10 	tst.w	lr, #16
 801234a:	bf08      	it	eq
 801234c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012350:	f380 8809 	msr	PSP, r0
 8012354:	f3bf 8f6f 	isb	sy
 8012358:	4770      	bx	lr
 801235a:	bf00      	nop
 801235c:	f3af 8000 	nop.w

08012360 <pxCurrentTCBConst>:
 8012360:	20002ae0 	.word	0x20002ae0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012364:	bf00      	nop
 8012366:	bf00      	nop

08012368 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012368:	b580      	push	{r7, lr}
 801236a:	b082      	sub	sp, #8
 801236c:	af00      	add	r7, sp, #0
	__asm volatile
 801236e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012372:	f383 8811 	msr	BASEPRI, r3
 8012376:	f3bf 8f6f 	isb	sy
 801237a:	f3bf 8f4f 	dsb	sy
 801237e:	607b      	str	r3, [r7, #4]
}
 8012380:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012382:	f7ff f911 	bl	80115a8 <xTaskIncrementTick>
 8012386:	4603      	mov	r3, r0
 8012388:	2b00      	cmp	r3, #0
 801238a:	d003      	beq.n	8012394 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801238c:	4b06      	ldr	r3, [pc, #24]	; (80123a8 <SysTick_Handler+0x40>)
 801238e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012392:	601a      	str	r2, [r3, #0]
 8012394:	2300      	movs	r3, #0
 8012396:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012398:	683b      	ldr	r3, [r7, #0]
 801239a:	f383 8811 	msr	BASEPRI, r3
}
 801239e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80123a0:	bf00      	nop
 80123a2:	3708      	adds	r7, #8
 80123a4:	46bd      	mov	sp, r7
 80123a6:	bd80      	pop	{r7, pc}
 80123a8:	e000ed04 	.word	0xe000ed04

080123ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80123ac:	b480      	push	{r7}
 80123ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80123b0:	4b0b      	ldr	r3, [pc, #44]	; (80123e0 <vPortSetupTimerInterrupt+0x34>)
 80123b2:	2200      	movs	r2, #0
 80123b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80123b6:	4b0b      	ldr	r3, [pc, #44]	; (80123e4 <vPortSetupTimerInterrupt+0x38>)
 80123b8:	2200      	movs	r2, #0
 80123ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80123bc:	4b0a      	ldr	r3, [pc, #40]	; (80123e8 <vPortSetupTimerInterrupt+0x3c>)
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	4a0a      	ldr	r2, [pc, #40]	; (80123ec <vPortSetupTimerInterrupt+0x40>)
 80123c2:	fba2 2303 	umull	r2, r3, r2, r3
 80123c6:	099b      	lsrs	r3, r3, #6
 80123c8:	4a09      	ldr	r2, [pc, #36]	; (80123f0 <vPortSetupTimerInterrupt+0x44>)
 80123ca:	3b01      	subs	r3, #1
 80123cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80123ce:	4b04      	ldr	r3, [pc, #16]	; (80123e0 <vPortSetupTimerInterrupt+0x34>)
 80123d0:	2207      	movs	r2, #7
 80123d2:	601a      	str	r2, [r3, #0]
}
 80123d4:	bf00      	nop
 80123d6:	46bd      	mov	sp, r7
 80123d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123dc:	4770      	bx	lr
 80123de:	bf00      	nop
 80123e0:	e000e010 	.word	0xe000e010
 80123e4:	e000e018 	.word	0xe000e018
 80123e8:	2000000c 	.word	0x2000000c
 80123ec:	10624dd3 	.word	0x10624dd3
 80123f0:	e000e014 	.word	0xe000e014

080123f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80123f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012404 <vPortEnableVFP+0x10>
 80123f8:	6801      	ldr	r1, [r0, #0]
 80123fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80123fe:	6001      	str	r1, [r0, #0]
 8012400:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012402:	bf00      	nop
 8012404:	e000ed88 	.word	0xe000ed88

08012408 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012408:	b480      	push	{r7}
 801240a:	b085      	sub	sp, #20
 801240c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801240e:	f3ef 8305 	mrs	r3, IPSR
 8012412:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	2b0f      	cmp	r3, #15
 8012418:	d914      	bls.n	8012444 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801241a:	4a17      	ldr	r2, [pc, #92]	; (8012478 <vPortValidateInterruptPriority+0x70>)
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	4413      	add	r3, r2
 8012420:	781b      	ldrb	r3, [r3, #0]
 8012422:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012424:	4b15      	ldr	r3, [pc, #84]	; (801247c <vPortValidateInterruptPriority+0x74>)
 8012426:	781b      	ldrb	r3, [r3, #0]
 8012428:	7afa      	ldrb	r2, [r7, #11]
 801242a:	429a      	cmp	r2, r3
 801242c:	d20a      	bcs.n	8012444 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801242e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012432:	f383 8811 	msr	BASEPRI, r3
 8012436:	f3bf 8f6f 	isb	sy
 801243a:	f3bf 8f4f 	dsb	sy
 801243e:	607b      	str	r3, [r7, #4]
}
 8012440:	bf00      	nop
 8012442:	e7fe      	b.n	8012442 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012444:	4b0e      	ldr	r3, [pc, #56]	; (8012480 <vPortValidateInterruptPriority+0x78>)
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801244c:	4b0d      	ldr	r3, [pc, #52]	; (8012484 <vPortValidateInterruptPriority+0x7c>)
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	429a      	cmp	r2, r3
 8012452:	d90a      	bls.n	801246a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012458:	f383 8811 	msr	BASEPRI, r3
 801245c:	f3bf 8f6f 	isb	sy
 8012460:	f3bf 8f4f 	dsb	sy
 8012464:	603b      	str	r3, [r7, #0]
}
 8012466:	bf00      	nop
 8012468:	e7fe      	b.n	8012468 <vPortValidateInterruptPriority+0x60>
	}
 801246a:	bf00      	nop
 801246c:	3714      	adds	r7, #20
 801246e:	46bd      	mov	sp, r7
 8012470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012474:	4770      	bx	lr
 8012476:	bf00      	nop
 8012478:	e000e3f0 	.word	0xe000e3f0
 801247c:	20002c0c 	.word	0x20002c0c
 8012480:	e000ed0c 	.word	0xe000ed0c
 8012484:	20002c10 	.word	0x20002c10

08012488 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012488:	b580      	push	{r7, lr}
 801248a:	b08a      	sub	sp, #40	; 0x28
 801248c:	af00      	add	r7, sp, #0
 801248e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012490:	2300      	movs	r3, #0
 8012492:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012494:	f7fe ffde 	bl	8011454 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012498:	4b5b      	ldr	r3, [pc, #364]	; (8012608 <pvPortMalloc+0x180>)
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d101      	bne.n	80124a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80124a0:	f000 f920 	bl	80126e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80124a4:	4b59      	ldr	r3, [pc, #356]	; (801260c <pvPortMalloc+0x184>)
 80124a6:	681a      	ldr	r2, [r3, #0]
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	4013      	ands	r3, r2
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	f040 8093 	bne.w	80125d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d01d      	beq.n	80124f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80124b8:	2208      	movs	r2, #8
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	4413      	add	r3, r2
 80124be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	f003 0307 	and.w	r3, r3, #7
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d014      	beq.n	80124f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	f023 0307 	bic.w	r3, r3, #7
 80124d0:	3308      	adds	r3, #8
 80124d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	f003 0307 	and.w	r3, r3, #7
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d00a      	beq.n	80124f4 <pvPortMalloc+0x6c>
	__asm volatile
 80124de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124e2:	f383 8811 	msr	BASEPRI, r3
 80124e6:	f3bf 8f6f 	isb	sy
 80124ea:	f3bf 8f4f 	dsb	sy
 80124ee:	617b      	str	r3, [r7, #20]
}
 80124f0:	bf00      	nop
 80124f2:	e7fe      	b.n	80124f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d06e      	beq.n	80125d8 <pvPortMalloc+0x150>
 80124fa:	4b45      	ldr	r3, [pc, #276]	; (8012610 <pvPortMalloc+0x188>)
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	687a      	ldr	r2, [r7, #4]
 8012500:	429a      	cmp	r2, r3
 8012502:	d869      	bhi.n	80125d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012504:	4b43      	ldr	r3, [pc, #268]	; (8012614 <pvPortMalloc+0x18c>)
 8012506:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012508:	4b42      	ldr	r3, [pc, #264]	; (8012614 <pvPortMalloc+0x18c>)
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801250e:	e004      	b.n	801251a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012512:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801251c:	685b      	ldr	r3, [r3, #4]
 801251e:	687a      	ldr	r2, [r7, #4]
 8012520:	429a      	cmp	r2, r3
 8012522:	d903      	bls.n	801252c <pvPortMalloc+0xa4>
 8012524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d1f1      	bne.n	8012510 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801252c:	4b36      	ldr	r3, [pc, #216]	; (8012608 <pvPortMalloc+0x180>)
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012532:	429a      	cmp	r2, r3
 8012534:	d050      	beq.n	80125d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012536:	6a3b      	ldr	r3, [r7, #32]
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	2208      	movs	r2, #8
 801253c:	4413      	add	r3, r2
 801253e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012542:	681a      	ldr	r2, [r3, #0]
 8012544:	6a3b      	ldr	r3, [r7, #32]
 8012546:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801254a:	685a      	ldr	r2, [r3, #4]
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	1ad2      	subs	r2, r2, r3
 8012550:	2308      	movs	r3, #8
 8012552:	005b      	lsls	r3, r3, #1
 8012554:	429a      	cmp	r2, r3
 8012556:	d91f      	bls.n	8012598 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	4413      	add	r3, r2
 801255e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012560:	69bb      	ldr	r3, [r7, #24]
 8012562:	f003 0307 	and.w	r3, r3, #7
 8012566:	2b00      	cmp	r3, #0
 8012568:	d00a      	beq.n	8012580 <pvPortMalloc+0xf8>
	__asm volatile
 801256a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801256e:	f383 8811 	msr	BASEPRI, r3
 8012572:	f3bf 8f6f 	isb	sy
 8012576:	f3bf 8f4f 	dsb	sy
 801257a:	613b      	str	r3, [r7, #16]
}
 801257c:	bf00      	nop
 801257e:	e7fe      	b.n	801257e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012582:	685a      	ldr	r2, [r3, #4]
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	1ad2      	subs	r2, r2, r3
 8012588:	69bb      	ldr	r3, [r7, #24]
 801258a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801258e:	687a      	ldr	r2, [r7, #4]
 8012590:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012592:	69b8      	ldr	r0, [r7, #24]
 8012594:	f000 f908 	bl	80127a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012598:	4b1d      	ldr	r3, [pc, #116]	; (8012610 <pvPortMalloc+0x188>)
 801259a:	681a      	ldr	r2, [r3, #0]
 801259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801259e:	685b      	ldr	r3, [r3, #4]
 80125a0:	1ad3      	subs	r3, r2, r3
 80125a2:	4a1b      	ldr	r2, [pc, #108]	; (8012610 <pvPortMalloc+0x188>)
 80125a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80125a6:	4b1a      	ldr	r3, [pc, #104]	; (8012610 <pvPortMalloc+0x188>)
 80125a8:	681a      	ldr	r2, [r3, #0]
 80125aa:	4b1b      	ldr	r3, [pc, #108]	; (8012618 <pvPortMalloc+0x190>)
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	429a      	cmp	r2, r3
 80125b0:	d203      	bcs.n	80125ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80125b2:	4b17      	ldr	r3, [pc, #92]	; (8012610 <pvPortMalloc+0x188>)
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	4a18      	ldr	r2, [pc, #96]	; (8012618 <pvPortMalloc+0x190>)
 80125b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80125ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125bc:	685a      	ldr	r2, [r3, #4]
 80125be:	4b13      	ldr	r3, [pc, #76]	; (801260c <pvPortMalloc+0x184>)
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	431a      	orrs	r2, r3
 80125c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80125c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125ca:	2200      	movs	r2, #0
 80125cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80125ce:	4b13      	ldr	r3, [pc, #76]	; (801261c <pvPortMalloc+0x194>)
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	3301      	adds	r3, #1
 80125d4:	4a11      	ldr	r2, [pc, #68]	; (801261c <pvPortMalloc+0x194>)
 80125d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80125d8:	f7fe ff4a 	bl	8011470 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80125dc:	69fb      	ldr	r3, [r7, #28]
 80125de:	f003 0307 	and.w	r3, r3, #7
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d00a      	beq.n	80125fc <pvPortMalloc+0x174>
	__asm volatile
 80125e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125ea:	f383 8811 	msr	BASEPRI, r3
 80125ee:	f3bf 8f6f 	isb	sy
 80125f2:	f3bf 8f4f 	dsb	sy
 80125f6:	60fb      	str	r3, [r7, #12]
}
 80125f8:	bf00      	nop
 80125fa:	e7fe      	b.n	80125fa <pvPortMalloc+0x172>
	return pvReturn;
 80125fc:	69fb      	ldr	r3, [r7, #28]
}
 80125fe:	4618      	mov	r0, r3
 8012600:	3728      	adds	r7, #40	; 0x28
 8012602:	46bd      	mov	sp, r7
 8012604:	bd80      	pop	{r7, pc}
 8012606:	bf00      	nop
 8012608:	2000681c 	.word	0x2000681c
 801260c:	20006830 	.word	0x20006830
 8012610:	20006820 	.word	0x20006820
 8012614:	20006814 	.word	0x20006814
 8012618:	20006824 	.word	0x20006824
 801261c:	20006828 	.word	0x20006828

08012620 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012620:	b580      	push	{r7, lr}
 8012622:	b086      	sub	sp, #24
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	2b00      	cmp	r3, #0
 8012630:	d04d      	beq.n	80126ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012632:	2308      	movs	r3, #8
 8012634:	425b      	negs	r3, r3
 8012636:	697a      	ldr	r2, [r7, #20]
 8012638:	4413      	add	r3, r2
 801263a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801263c:	697b      	ldr	r3, [r7, #20]
 801263e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012640:	693b      	ldr	r3, [r7, #16]
 8012642:	685a      	ldr	r2, [r3, #4]
 8012644:	4b24      	ldr	r3, [pc, #144]	; (80126d8 <vPortFree+0xb8>)
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	4013      	ands	r3, r2
 801264a:	2b00      	cmp	r3, #0
 801264c:	d10a      	bne.n	8012664 <vPortFree+0x44>
	__asm volatile
 801264e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012652:	f383 8811 	msr	BASEPRI, r3
 8012656:	f3bf 8f6f 	isb	sy
 801265a:	f3bf 8f4f 	dsb	sy
 801265e:	60fb      	str	r3, [r7, #12]
}
 8012660:	bf00      	nop
 8012662:	e7fe      	b.n	8012662 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012664:	693b      	ldr	r3, [r7, #16]
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d00a      	beq.n	8012682 <vPortFree+0x62>
	__asm volatile
 801266c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012670:	f383 8811 	msr	BASEPRI, r3
 8012674:	f3bf 8f6f 	isb	sy
 8012678:	f3bf 8f4f 	dsb	sy
 801267c:	60bb      	str	r3, [r7, #8]
}
 801267e:	bf00      	nop
 8012680:	e7fe      	b.n	8012680 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012682:	693b      	ldr	r3, [r7, #16]
 8012684:	685a      	ldr	r2, [r3, #4]
 8012686:	4b14      	ldr	r3, [pc, #80]	; (80126d8 <vPortFree+0xb8>)
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	4013      	ands	r3, r2
 801268c:	2b00      	cmp	r3, #0
 801268e:	d01e      	beq.n	80126ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012690:	693b      	ldr	r3, [r7, #16]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d11a      	bne.n	80126ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012698:	693b      	ldr	r3, [r7, #16]
 801269a:	685a      	ldr	r2, [r3, #4]
 801269c:	4b0e      	ldr	r3, [pc, #56]	; (80126d8 <vPortFree+0xb8>)
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	43db      	mvns	r3, r3
 80126a2:	401a      	ands	r2, r3
 80126a4:	693b      	ldr	r3, [r7, #16]
 80126a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80126a8:	f7fe fed4 	bl	8011454 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80126ac:	693b      	ldr	r3, [r7, #16]
 80126ae:	685a      	ldr	r2, [r3, #4]
 80126b0:	4b0a      	ldr	r3, [pc, #40]	; (80126dc <vPortFree+0xbc>)
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	4413      	add	r3, r2
 80126b6:	4a09      	ldr	r2, [pc, #36]	; (80126dc <vPortFree+0xbc>)
 80126b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80126ba:	6938      	ldr	r0, [r7, #16]
 80126bc:	f000 f874 	bl	80127a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80126c0:	4b07      	ldr	r3, [pc, #28]	; (80126e0 <vPortFree+0xc0>)
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	3301      	adds	r3, #1
 80126c6:	4a06      	ldr	r2, [pc, #24]	; (80126e0 <vPortFree+0xc0>)
 80126c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80126ca:	f7fe fed1 	bl	8011470 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80126ce:	bf00      	nop
 80126d0:	3718      	adds	r7, #24
 80126d2:	46bd      	mov	sp, r7
 80126d4:	bd80      	pop	{r7, pc}
 80126d6:	bf00      	nop
 80126d8:	20006830 	.word	0x20006830
 80126dc:	20006820 	.word	0x20006820
 80126e0:	2000682c 	.word	0x2000682c

080126e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80126e4:	b480      	push	{r7}
 80126e6:	b085      	sub	sp, #20
 80126e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80126ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80126ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80126f0:	4b27      	ldr	r3, [pc, #156]	; (8012790 <prvHeapInit+0xac>)
 80126f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	f003 0307 	and.w	r3, r3, #7
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d00c      	beq.n	8012718 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	3307      	adds	r3, #7
 8012702:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	f023 0307 	bic.w	r3, r3, #7
 801270a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801270c:	68ba      	ldr	r2, [r7, #8]
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	1ad3      	subs	r3, r2, r3
 8012712:	4a1f      	ldr	r2, [pc, #124]	; (8012790 <prvHeapInit+0xac>)
 8012714:	4413      	add	r3, r2
 8012716:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801271c:	4a1d      	ldr	r2, [pc, #116]	; (8012794 <prvHeapInit+0xb0>)
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012722:	4b1c      	ldr	r3, [pc, #112]	; (8012794 <prvHeapInit+0xb0>)
 8012724:	2200      	movs	r2, #0
 8012726:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	68ba      	ldr	r2, [r7, #8]
 801272c:	4413      	add	r3, r2
 801272e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012730:	2208      	movs	r2, #8
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	1a9b      	subs	r3, r3, r2
 8012736:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	f023 0307 	bic.w	r3, r3, #7
 801273e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	4a15      	ldr	r2, [pc, #84]	; (8012798 <prvHeapInit+0xb4>)
 8012744:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012746:	4b14      	ldr	r3, [pc, #80]	; (8012798 <prvHeapInit+0xb4>)
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	2200      	movs	r2, #0
 801274c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801274e:	4b12      	ldr	r3, [pc, #72]	; (8012798 <prvHeapInit+0xb4>)
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	2200      	movs	r2, #0
 8012754:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801275a:	683b      	ldr	r3, [r7, #0]
 801275c:	68fa      	ldr	r2, [r7, #12]
 801275e:	1ad2      	subs	r2, r2, r3
 8012760:	683b      	ldr	r3, [r7, #0]
 8012762:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012764:	4b0c      	ldr	r3, [pc, #48]	; (8012798 <prvHeapInit+0xb4>)
 8012766:	681a      	ldr	r2, [r3, #0]
 8012768:	683b      	ldr	r3, [r7, #0]
 801276a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801276c:	683b      	ldr	r3, [r7, #0]
 801276e:	685b      	ldr	r3, [r3, #4]
 8012770:	4a0a      	ldr	r2, [pc, #40]	; (801279c <prvHeapInit+0xb8>)
 8012772:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012774:	683b      	ldr	r3, [r7, #0]
 8012776:	685b      	ldr	r3, [r3, #4]
 8012778:	4a09      	ldr	r2, [pc, #36]	; (80127a0 <prvHeapInit+0xbc>)
 801277a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801277c:	4b09      	ldr	r3, [pc, #36]	; (80127a4 <prvHeapInit+0xc0>)
 801277e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012782:	601a      	str	r2, [r3, #0]
}
 8012784:	bf00      	nop
 8012786:	3714      	adds	r7, #20
 8012788:	46bd      	mov	sp, r7
 801278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278e:	4770      	bx	lr
 8012790:	20002c14 	.word	0x20002c14
 8012794:	20006814 	.word	0x20006814
 8012798:	2000681c 	.word	0x2000681c
 801279c:	20006824 	.word	0x20006824
 80127a0:	20006820 	.word	0x20006820
 80127a4:	20006830 	.word	0x20006830

080127a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80127a8:	b480      	push	{r7}
 80127aa:	b085      	sub	sp, #20
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80127b0:	4b28      	ldr	r3, [pc, #160]	; (8012854 <prvInsertBlockIntoFreeList+0xac>)
 80127b2:	60fb      	str	r3, [r7, #12]
 80127b4:	e002      	b.n	80127bc <prvInsertBlockIntoFreeList+0x14>
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	60fb      	str	r3, [r7, #12]
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	687a      	ldr	r2, [r7, #4]
 80127c2:	429a      	cmp	r2, r3
 80127c4:	d8f7      	bhi.n	80127b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	685b      	ldr	r3, [r3, #4]
 80127ce:	68ba      	ldr	r2, [r7, #8]
 80127d0:	4413      	add	r3, r2
 80127d2:	687a      	ldr	r2, [r7, #4]
 80127d4:	429a      	cmp	r2, r3
 80127d6:	d108      	bne.n	80127ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	685a      	ldr	r2, [r3, #4]
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	685b      	ldr	r3, [r3, #4]
 80127e0:	441a      	add	r2, r3
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	685b      	ldr	r3, [r3, #4]
 80127f2:	68ba      	ldr	r2, [r7, #8]
 80127f4:	441a      	add	r2, r3
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	429a      	cmp	r2, r3
 80127fc:	d118      	bne.n	8012830 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	681a      	ldr	r2, [r3, #0]
 8012802:	4b15      	ldr	r3, [pc, #84]	; (8012858 <prvInsertBlockIntoFreeList+0xb0>)
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	429a      	cmp	r2, r3
 8012808:	d00d      	beq.n	8012826 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	685a      	ldr	r2, [r3, #4]
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	685b      	ldr	r3, [r3, #4]
 8012814:	441a      	add	r2, r3
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	681a      	ldr	r2, [r3, #0]
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	601a      	str	r2, [r3, #0]
 8012824:	e008      	b.n	8012838 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012826:	4b0c      	ldr	r3, [pc, #48]	; (8012858 <prvInsertBlockIntoFreeList+0xb0>)
 8012828:	681a      	ldr	r2, [r3, #0]
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	601a      	str	r2, [r3, #0]
 801282e:	e003      	b.n	8012838 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	681a      	ldr	r2, [r3, #0]
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012838:	68fa      	ldr	r2, [r7, #12]
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	429a      	cmp	r2, r3
 801283e:	d002      	beq.n	8012846 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	687a      	ldr	r2, [r7, #4]
 8012844:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012846:	bf00      	nop
 8012848:	3714      	adds	r7, #20
 801284a:	46bd      	mov	sp, r7
 801284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012850:	4770      	bx	lr
 8012852:	bf00      	nop
 8012854:	20006814 	.word	0x20006814
 8012858:	2000681c 	.word	0x2000681c

0801285c <__cvt>:
 801285c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012860:	ec55 4b10 	vmov	r4, r5, d0
 8012864:	2d00      	cmp	r5, #0
 8012866:	460e      	mov	r6, r1
 8012868:	4619      	mov	r1, r3
 801286a:	462b      	mov	r3, r5
 801286c:	bfbb      	ittet	lt
 801286e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012872:	461d      	movlt	r5, r3
 8012874:	2300      	movge	r3, #0
 8012876:	232d      	movlt	r3, #45	; 0x2d
 8012878:	700b      	strb	r3, [r1, #0]
 801287a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801287c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012880:	4691      	mov	r9, r2
 8012882:	f023 0820 	bic.w	r8, r3, #32
 8012886:	bfbc      	itt	lt
 8012888:	4622      	movlt	r2, r4
 801288a:	4614      	movlt	r4, r2
 801288c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012890:	d005      	beq.n	801289e <__cvt+0x42>
 8012892:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8012896:	d100      	bne.n	801289a <__cvt+0x3e>
 8012898:	3601      	adds	r6, #1
 801289a:	2102      	movs	r1, #2
 801289c:	e000      	b.n	80128a0 <__cvt+0x44>
 801289e:	2103      	movs	r1, #3
 80128a0:	ab03      	add	r3, sp, #12
 80128a2:	9301      	str	r3, [sp, #4]
 80128a4:	ab02      	add	r3, sp, #8
 80128a6:	9300      	str	r3, [sp, #0]
 80128a8:	ec45 4b10 	vmov	d0, r4, r5
 80128ac:	4653      	mov	r3, sl
 80128ae:	4632      	mov	r2, r6
 80128b0:	f000 ffd6 	bl	8013860 <_dtoa_r>
 80128b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80128b8:	4607      	mov	r7, r0
 80128ba:	d102      	bne.n	80128c2 <__cvt+0x66>
 80128bc:	f019 0f01 	tst.w	r9, #1
 80128c0:	d022      	beq.n	8012908 <__cvt+0xac>
 80128c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80128c6:	eb07 0906 	add.w	r9, r7, r6
 80128ca:	d110      	bne.n	80128ee <__cvt+0x92>
 80128cc:	783b      	ldrb	r3, [r7, #0]
 80128ce:	2b30      	cmp	r3, #48	; 0x30
 80128d0:	d10a      	bne.n	80128e8 <__cvt+0x8c>
 80128d2:	2200      	movs	r2, #0
 80128d4:	2300      	movs	r3, #0
 80128d6:	4620      	mov	r0, r4
 80128d8:	4629      	mov	r1, r5
 80128da:	f7ee f915 	bl	8000b08 <__aeabi_dcmpeq>
 80128de:	b918      	cbnz	r0, 80128e8 <__cvt+0x8c>
 80128e0:	f1c6 0601 	rsb	r6, r6, #1
 80128e4:	f8ca 6000 	str.w	r6, [sl]
 80128e8:	f8da 3000 	ldr.w	r3, [sl]
 80128ec:	4499      	add	r9, r3
 80128ee:	2200      	movs	r2, #0
 80128f0:	2300      	movs	r3, #0
 80128f2:	4620      	mov	r0, r4
 80128f4:	4629      	mov	r1, r5
 80128f6:	f7ee f907 	bl	8000b08 <__aeabi_dcmpeq>
 80128fa:	b108      	cbz	r0, 8012900 <__cvt+0xa4>
 80128fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8012900:	2230      	movs	r2, #48	; 0x30
 8012902:	9b03      	ldr	r3, [sp, #12]
 8012904:	454b      	cmp	r3, r9
 8012906:	d307      	bcc.n	8012918 <__cvt+0xbc>
 8012908:	9b03      	ldr	r3, [sp, #12]
 801290a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801290c:	1bdb      	subs	r3, r3, r7
 801290e:	4638      	mov	r0, r7
 8012910:	6013      	str	r3, [r2, #0]
 8012912:	b004      	add	sp, #16
 8012914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012918:	1c59      	adds	r1, r3, #1
 801291a:	9103      	str	r1, [sp, #12]
 801291c:	701a      	strb	r2, [r3, #0]
 801291e:	e7f0      	b.n	8012902 <__cvt+0xa6>

08012920 <__exponent>:
 8012920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012922:	4603      	mov	r3, r0
 8012924:	2900      	cmp	r1, #0
 8012926:	bfb8      	it	lt
 8012928:	4249      	neglt	r1, r1
 801292a:	f803 2b02 	strb.w	r2, [r3], #2
 801292e:	bfb4      	ite	lt
 8012930:	222d      	movlt	r2, #45	; 0x2d
 8012932:	222b      	movge	r2, #43	; 0x2b
 8012934:	2909      	cmp	r1, #9
 8012936:	7042      	strb	r2, [r0, #1]
 8012938:	dd2a      	ble.n	8012990 <__exponent+0x70>
 801293a:	f10d 0207 	add.w	r2, sp, #7
 801293e:	4617      	mov	r7, r2
 8012940:	260a      	movs	r6, #10
 8012942:	4694      	mov	ip, r2
 8012944:	fb91 f5f6 	sdiv	r5, r1, r6
 8012948:	fb06 1415 	mls	r4, r6, r5, r1
 801294c:	3430      	adds	r4, #48	; 0x30
 801294e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8012952:	460c      	mov	r4, r1
 8012954:	2c63      	cmp	r4, #99	; 0x63
 8012956:	f102 32ff 	add.w	r2, r2, #4294967295
 801295a:	4629      	mov	r1, r5
 801295c:	dcf1      	bgt.n	8012942 <__exponent+0x22>
 801295e:	3130      	adds	r1, #48	; 0x30
 8012960:	f1ac 0402 	sub.w	r4, ip, #2
 8012964:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012968:	1c41      	adds	r1, r0, #1
 801296a:	4622      	mov	r2, r4
 801296c:	42ba      	cmp	r2, r7
 801296e:	d30a      	bcc.n	8012986 <__exponent+0x66>
 8012970:	f10d 0209 	add.w	r2, sp, #9
 8012974:	eba2 020c 	sub.w	r2, r2, ip
 8012978:	42bc      	cmp	r4, r7
 801297a:	bf88      	it	hi
 801297c:	2200      	movhi	r2, #0
 801297e:	4413      	add	r3, r2
 8012980:	1a18      	subs	r0, r3, r0
 8012982:	b003      	add	sp, #12
 8012984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012986:	f812 5b01 	ldrb.w	r5, [r2], #1
 801298a:	f801 5f01 	strb.w	r5, [r1, #1]!
 801298e:	e7ed      	b.n	801296c <__exponent+0x4c>
 8012990:	2330      	movs	r3, #48	; 0x30
 8012992:	3130      	adds	r1, #48	; 0x30
 8012994:	7083      	strb	r3, [r0, #2]
 8012996:	70c1      	strb	r1, [r0, #3]
 8012998:	1d03      	adds	r3, r0, #4
 801299a:	e7f1      	b.n	8012980 <__exponent+0x60>

0801299c <_printf_float>:
 801299c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129a0:	ed2d 8b02 	vpush	{d8}
 80129a4:	b08d      	sub	sp, #52	; 0x34
 80129a6:	460c      	mov	r4, r1
 80129a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80129ac:	4616      	mov	r6, r2
 80129ae:	461f      	mov	r7, r3
 80129b0:	4605      	mov	r5, r0
 80129b2:	f000 fdf1 	bl	8013598 <_localeconv_r>
 80129b6:	f8d0 a000 	ldr.w	sl, [r0]
 80129ba:	4650      	mov	r0, sl
 80129bc:	f7ed fc78 	bl	80002b0 <strlen>
 80129c0:	2300      	movs	r3, #0
 80129c2:	930a      	str	r3, [sp, #40]	; 0x28
 80129c4:	6823      	ldr	r3, [r4, #0]
 80129c6:	9305      	str	r3, [sp, #20]
 80129c8:	f8d8 3000 	ldr.w	r3, [r8]
 80129cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80129d0:	3307      	adds	r3, #7
 80129d2:	f023 0307 	bic.w	r3, r3, #7
 80129d6:	f103 0208 	add.w	r2, r3, #8
 80129da:	f8c8 2000 	str.w	r2, [r8]
 80129de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80129e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80129e6:	9307      	str	r3, [sp, #28]
 80129e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80129ec:	ee08 0a10 	vmov	s16, r0
 80129f0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80129f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80129f8:	4b9e      	ldr	r3, [pc, #632]	; (8012c74 <_printf_float+0x2d8>)
 80129fa:	f04f 32ff 	mov.w	r2, #4294967295
 80129fe:	f7ee f8b5 	bl	8000b6c <__aeabi_dcmpun>
 8012a02:	bb88      	cbnz	r0, 8012a68 <_printf_float+0xcc>
 8012a04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012a08:	4b9a      	ldr	r3, [pc, #616]	; (8012c74 <_printf_float+0x2d8>)
 8012a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8012a0e:	f7ee f88f 	bl	8000b30 <__aeabi_dcmple>
 8012a12:	bb48      	cbnz	r0, 8012a68 <_printf_float+0xcc>
 8012a14:	2200      	movs	r2, #0
 8012a16:	2300      	movs	r3, #0
 8012a18:	4640      	mov	r0, r8
 8012a1a:	4649      	mov	r1, r9
 8012a1c:	f7ee f87e 	bl	8000b1c <__aeabi_dcmplt>
 8012a20:	b110      	cbz	r0, 8012a28 <_printf_float+0x8c>
 8012a22:	232d      	movs	r3, #45	; 0x2d
 8012a24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012a28:	4a93      	ldr	r2, [pc, #588]	; (8012c78 <_printf_float+0x2dc>)
 8012a2a:	4b94      	ldr	r3, [pc, #592]	; (8012c7c <_printf_float+0x2e0>)
 8012a2c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012a30:	bf94      	ite	ls
 8012a32:	4690      	movls	r8, r2
 8012a34:	4698      	movhi	r8, r3
 8012a36:	2303      	movs	r3, #3
 8012a38:	6123      	str	r3, [r4, #16]
 8012a3a:	9b05      	ldr	r3, [sp, #20]
 8012a3c:	f023 0304 	bic.w	r3, r3, #4
 8012a40:	6023      	str	r3, [r4, #0]
 8012a42:	f04f 0900 	mov.w	r9, #0
 8012a46:	9700      	str	r7, [sp, #0]
 8012a48:	4633      	mov	r3, r6
 8012a4a:	aa0b      	add	r2, sp, #44	; 0x2c
 8012a4c:	4621      	mov	r1, r4
 8012a4e:	4628      	mov	r0, r5
 8012a50:	f000 f9da 	bl	8012e08 <_printf_common>
 8012a54:	3001      	adds	r0, #1
 8012a56:	f040 8090 	bne.w	8012b7a <_printf_float+0x1de>
 8012a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8012a5e:	b00d      	add	sp, #52	; 0x34
 8012a60:	ecbd 8b02 	vpop	{d8}
 8012a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a68:	4642      	mov	r2, r8
 8012a6a:	464b      	mov	r3, r9
 8012a6c:	4640      	mov	r0, r8
 8012a6e:	4649      	mov	r1, r9
 8012a70:	f7ee f87c 	bl	8000b6c <__aeabi_dcmpun>
 8012a74:	b140      	cbz	r0, 8012a88 <_printf_float+0xec>
 8012a76:	464b      	mov	r3, r9
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	bfbc      	itt	lt
 8012a7c:	232d      	movlt	r3, #45	; 0x2d
 8012a7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012a82:	4a7f      	ldr	r2, [pc, #508]	; (8012c80 <_printf_float+0x2e4>)
 8012a84:	4b7f      	ldr	r3, [pc, #508]	; (8012c84 <_printf_float+0x2e8>)
 8012a86:	e7d1      	b.n	8012a2c <_printf_float+0x90>
 8012a88:	6863      	ldr	r3, [r4, #4]
 8012a8a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8012a8e:	9206      	str	r2, [sp, #24]
 8012a90:	1c5a      	adds	r2, r3, #1
 8012a92:	d13f      	bne.n	8012b14 <_printf_float+0x178>
 8012a94:	2306      	movs	r3, #6
 8012a96:	6063      	str	r3, [r4, #4]
 8012a98:	9b05      	ldr	r3, [sp, #20]
 8012a9a:	6861      	ldr	r1, [r4, #4]
 8012a9c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012aa0:	2300      	movs	r3, #0
 8012aa2:	9303      	str	r3, [sp, #12]
 8012aa4:	ab0a      	add	r3, sp, #40	; 0x28
 8012aa6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8012aaa:	ab09      	add	r3, sp, #36	; 0x24
 8012aac:	ec49 8b10 	vmov	d0, r8, r9
 8012ab0:	9300      	str	r3, [sp, #0]
 8012ab2:	6022      	str	r2, [r4, #0]
 8012ab4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012ab8:	4628      	mov	r0, r5
 8012aba:	f7ff fecf 	bl	801285c <__cvt>
 8012abe:	9b06      	ldr	r3, [sp, #24]
 8012ac0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012ac2:	2b47      	cmp	r3, #71	; 0x47
 8012ac4:	4680      	mov	r8, r0
 8012ac6:	d108      	bne.n	8012ada <_printf_float+0x13e>
 8012ac8:	1cc8      	adds	r0, r1, #3
 8012aca:	db02      	blt.n	8012ad2 <_printf_float+0x136>
 8012acc:	6863      	ldr	r3, [r4, #4]
 8012ace:	4299      	cmp	r1, r3
 8012ad0:	dd41      	ble.n	8012b56 <_printf_float+0x1ba>
 8012ad2:	f1ab 0302 	sub.w	r3, fp, #2
 8012ad6:	fa5f fb83 	uxtb.w	fp, r3
 8012ada:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012ade:	d820      	bhi.n	8012b22 <_printf_float+0x186>
 8012ae0:	3901      	subs	r1, #1
 8012ae2:	465a      	mov	r2, fp
 8012ae4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012ae8:	9109      	str	r1, [sp, #36]	; 0x24
 8012aea:	f7ff ff19 	bl	8012920 <__exponent>
 8012aee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012af0:	1813      	adds	r3, r2, r0
 8012af2:	2a01      	cmp	r2, #1
 8012af4:	4681      	mov	r9, r0
 8012af6:	6123      	str	r3, [r4, #16]
 8012af8:	dc02      	bgt.n	8012b00 <_printf_float+0x164>
 8012afa:	6822      	ldr	r2, [r4, #0]
 8012afc:	07d2      	lsls	r2, r2, #31
 8012afe:	d501      	bpl.n	8012b04 <_printf_float+0x168>
 8012b00:	3301      	adds	r3, #1
 8012b02:	6123      	str	r3, [r4, #16]
 8012b04:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d09c      	beq.n	8012a46 <_printf_float+0xaa>
 8012b0c:	232d      	movs	r3, #45	; 0x2d
 8012b0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012b12:	e798      	b.n	8012a46 <_printf_float+0xaa>
 8012b14:	9a06      	ldr	r2, [sp, #24]
 8012b16:	2a47      	cmp	r2, #71	; 0x47
 8012b18:	d1be      	bne.n	8012a98 <_printf_float+0xfc>
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d1bc      	bne.n	8012a98 <_printf_float+0xfc>
 8012b1e:	2301      	movs	r3, #1
 8012b20:	e7b9      	b.n	8012a96 <_printf_float+0xfa>
 8012b22:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8012b26:	d118      	bne.n	8012b5a <_printf_float+0x1be>
 8012b28:	2900      	cmp	r1, #0
 8012b2a:	6863      	ldr	r3, [r4, #4]
 8012b2c:	dd0b      	ble.n	8012b46 <_printf_float+0x1aa>
 8012b2e:	6121      	str	r1, [r4, #16]
 8012b30:	b913      	cbnz	r3, 8012b38 <_printf_float+0x19c>
 8012b32:	6822      	ldr	r2, [r4, #0]
 8012b34:	07d0      	lsls	r0, r2, #31
 8012b36:	d502      	bpl.n	8012b3e <_printf_float+0x1a2>
 8012b38:	3301      	adds	r3, #1
 8012b3a:	440b      	add	r3, r1
 8012b3c:	6123      	str	r3, [r4, #16]
 8012b3e:	65a1      	str	r1, [r4, #88]	; 0x58
 8012b40:	f04f 0900 	mov.w	r9, #0
 8012b44:	e7de      	b.n	8012b04 <_printf_float+0x168>
 8012b46:	b913      	cbnz	r3, 8012b4e <_printf_float+0x1b2>
 8012b48:	6822      	ldr	r2, [r4, #0]
 8012b4a:	07d2      	lsls	r2, r2, #31
 8012b4c:	d501      	bpl.n	8012b52 <_printf_float+0x1b6>
 8012b4e:	3302      	adds	r3, #2
 8012b50:	e7f4      	b.n	8012b3c <_printf_float+0x1a0>
 8012b52:	2301      	movs	r3, #1
 8012b54:	e7f2      	b.n	8012b3c <_printf_float+0x1a0>
 8012b56:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8012b5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b5c:	4299      	cmp	r1, r3
 8012b5e:	db05      	blt.n	8012b6c <_printf_float+0x1d0>
 8012b60:	6823      	ldr	r3, [r4, #0]
 8012b62:	6121      	str	r1, [r4, #16]
 8012b64:	07d8      	lsls	r0, r3, #31
 8012b66:	d5ea      	bpl.n	8012b3e <_printf_float+0x1a2>
 8012b68:	1c4b      	adds	r3, r1, #1
 8012b6a:	e7e7      	b.n	8012b3c <_printf_float+0x1a0>
 8012b6c:	2900      	cmp	r1, #0
 8012b6e:	bfd4      	ite	le
 8012b70:	f1c1 0202 	rsble	r2, r1, #2
 8012b74:	2201      	movgt	r2, #1
 8012b76:	4413      	add	r3, r2
 8012b78:	e7e0      	b.n	8012b3c <_printf_float+0x1a0>
 8012b7a:	6823      	ldr	r3, [r4, #0]
 8012b7c:	055a      	lsls	r2, r3, #21
 8012b7e:	d407      	bmi.n	8012b90 <_printf_float+0x1f4>
 8012b80:	6923      	ldr	r3, [r4, #16]
 8012b82:	4642      	mov	r2, r8
 8012b84:	4631      	mov	r1, r6
 8012b86:	4628      	mov	r0, r5
 8012b88:	47b8      	blx	r7
 8012b8a:	3001      	adds	r0, #1
 8012b8c:	d12c      	bne.n	8012be8 <_printf_float+0x24c>
 8012b8e:	e764      	b.n	8012a5a <_printf_float+0xbe>
 8012b90:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012b94:	f240 80e0 	bls.w	8012d58 <_printf_float+0x3bc>
 8012b98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012b9c:	2200      	movs	r2, #0
 8012b9e:	2300      	movs	r3, #0
 8012ba0:	f7ed ffb2 	bl	8000b08 <__aeabi_dcmpeq>
 8012ba4:	2800      	cmp	r0, #0
 8012ba6:	d034      	beq.n	8012c12 <_printf_float+0x276>
 8012ba8:	4a37      	ldr	r2, [pc, #220]	; (8012c88 <_printf_float+0x2ec>)
 8012baa:	2301      	movs	r3, #1
 8012bac:	4631      	mov	r1, r6
 8012bae:	4628      	mov	r0, r5
 8012bb0:	47b8      	blx	r7
 8012bb2:	3001      	adds	r0, #1
 8012bb4:	f43f af51 	beq.w	8012a5a <_printf_float+0xbe>
 8012bb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012bbc:	429a      	cmp	r2, r3
 8012bbe:	db02      	blt.n	8012bc6 <_printf_float+0x22a>
 8012bc0:	6823      	ldr	r3, [r4, #0]
 8012bc2:	07d8      	lsls	r0, r3, #31
 8012bc4:	d510      	bpl.n	8012be8 <_printf_float+0x24c>
 8012bc6:	ee18 3a10 	vmov	r3, s16
 8012bca:	4652      	mov	r2, sl
 8012bcc:	4631      	mov	r1, r6
 8012bce:	4628      	mov	r0, r5
 8012bd0:	47b8      	blx	r7
 8012bd2:	3001      	adds	r0, #1
 8012bd4:	f43f af41 	beq.w	8012a5a <_printf_float+0xbe>
 8012bd8:	f04f 0800 	mov.w	r8, #0
 8012bdc:	f104 091a 	add.w	r9, r4, #26
 8012be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012be2:	3b01      	subs	r3, #1
 8012be4:	4543      	cmp	r3, r8
 8012be6:	dc09      	bgt.n	8012bfc <_printf_float+0x260>
 8012be8:	6823      	ldr	r3, [r4, #0]
 8012bea:	079b      	lsls	r3, r3, #30
 8012bec:	f100 8107 	bmi.w	8012dfe <_printf_float+0x462>
 8012bf0:	68e0      	ldr	r0, [r4, #12]
 8012bf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012bf4:	4298      	cmp	r0, r3
 8012bf6:	bfb8      	it	lt
 8012bf8:	4618      	movlt	r0, r3
 8012bfa:	e730      	b.n	8012a5e <_printf_float+0xc2>
 8012bfc:	2301      	movs	r3, #1
 8012bfe:	464a      	mov	r2, r9
 8012c00:	4631      	mov	r1, r6
 8012c02:	4628      	mov	r0, r5
 8012c04:	47b8      	blx	r7
 8012c06:	3001      	adds	r0, #1
 8012c08:	f43f af27 	beq.w	8012a5a <_printf_float+0xbe>
 8012c0c:	f108 0801 	add.w	r8, r8, #1
 8012c10:	e7e6      	b.n	8012be0 <_printf_float+0x244>
 8012c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	dc39      	bgt.n	8012c8c <_printf_float+0x2f0>
 8012c18:	4a1b      	ldr	r2, [pc, #108]	; (8012c88 <_printf_float+0x2ec>)
 8012c1a:	2301      	movs	r3, #1
 8012c1c:	4631      	mov	r1, r6
 8012c1e:	4628      	mov	r0, r5
 8012c20:	47b8      	blx	r7
 8012c22:	3001      	adds	r0, #1
 8012c24:	f43f af19 	beq.w	8012a5a <_printf_float+0xbe>
 8012c28:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012c2c:	4313      	orrs	r3, r2
 8012c2e:	d102      	bne.n	8012c36 <_printf_float+0x29a>
 8012c30:	6823      	ldr	r3, [r4, #0]
 8012c32:	07d9      	lsls	r1, r3, #31
 8012c34:	d5d8      	bpl.n	8012be8 <_printf_float+0x24c>
 8012c36:	ee18 3a10 	vmov	r3, s16
 8012c3a:	4652      	mov	r2, sl
 8012c3c:	4631      	mov	r1, r6
 8012c3e:	4628      	mov	r0, r5
 8012c40:	47b8      	blx	r7
 8012c42:	3001      	adds	r0, #1
 8012c44:	f43f af09 	beq.w	8012a5a <_printf_float+0xbe>
 8012c48:	f04f 0900 	mov.w	r9, #0
 8012c4c:	f104 0a1a 	add.w	sl, r4, #26
 8012c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c52:	425b      	negs	r3, r3
 8012c54:	454b      	cmp	r3, r9
 8012c56:	dc01      	bgt.n	8012c5c <_printf_float+0x2c0>
 8012c58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c5a:	e792      	b.n	8012b82 <_printf_float+0x1e6>
 8012c5c:	2301      	movs	r3, #1
 8012c5e:	4652      	mov	r2, sl
 8012c60:	4631      	mov	r1, r6
 8012c62:	4628      	mov	r0, r5
 8012c64:	47b8      	blx	r7
 8012c66:	3001      	adds	r0, #1
 8012c68:	f43f aef7 	beq.w	8012a5a <_printf_float+0xbe>
 8012c6c:	f109 0901 	add.w	r9, r9, #1
 8012c70:	e7ee      	b.n	8012c50 <_printf_float+0x2b4>
 8012c72:	bf00      	nop
 8012c74:	7fefffff 	.word	0x7fefffff
 8012c78:	08015f14 	.word	0x08015f14
 8012c7c:	08015f18 	.word	0x08015f18
 8012c80:	08015f1c 	.word	0x08015f1c
 8012c84:	08015f20 	.word	0x08015f20
 8012c88:	08015f24 	.word	0x08015f24
 8012c8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012c8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012c90:	429a      	cmp	r2, r3
 8012c92:	bfa8      	it	ge
 8012c94:	461a      	movge	r2, r3
 8012c96:	2a00      	cmp	r2, #0
 8012c98:	4691      	mov	r9, r2
 8012c9a:	dc37      	bgt.n	8012d0c <_printf_float+0x370>
 8012c9c:	f04f 0b00 	mov.w	fp, #0
 8012ca0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012ca4:	f104 021a 	add.w	r2, r4, #26
 8012ca8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012caa:	9305      	str	r3, [sp, #20]
 8012cac:	eba3 0309 	sub.w	r3, r3, r9
 8012cb0:	455b      	cmp	r3, fp
 8012cb2:	dc33      	bgt.n	8012d1c <_printf_float+0x380>
 8012cb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012cb8:	429a      	cmp	r2, r3
 8012cba:	db3b      	blt.n	8012d34 <_printf_float+0x398>
 8012cbc:	6823      	ldr	r3, [r4, #0]
 8012cbe:	07da      	lsls	r2, r3, #31
 8012cc0:	d438      	bmi.n	8012d34 <_printf_float+0x398>
 8012cc2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012cc6:	eba2 0903 	sub.w	r9, r2, r3
 8012cca:	9b05      	ldr	r3, [sp, #20]
 8012ccc:	1ad2      	subs	r2, r2, r3
 8012cce:	4591      	cmp	r9, r2
 8012cd0:	bfa8      	it	ge
 8012cd2:	4691      	movge	r9, r2
 8012cd4:	f1b9 0f00 	cmp.w	r9, #0
 8012cd8:	dc35      	bgt.n	8012d46 <_printf_float+0x3aa>
 8012cda:	f04f 0800 	mov.w	r8, #0
 8012cde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012ce2:	f104 0a1a 	add.w	sl, r4, #26
 8012ce6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012cea:	1a9b      	subs	r3, r3, r2
 8012cec:	eba3 0309 	sub.w	r3, r3, r9
 8012cf0:	4543      	cmp	r3, r8
 8012cf2:	f77f af79 	ble.w	8012be8 <_printf_float+0x24c>
 8012cf6:	2301      	movs	r3, #1
 8012cf8:	4652      	mov	r2, sl
 8012cfa:	4631      	mov	r1, r6
 8012cfc:	4628      	mov	r0, r5
 8012cfe:	47b8      	blx	r7
 8012d00:	3001      	adds	r0, #1
 8012d02:	f43f aeaa 	beq.w	8012a5a <_printf_float+0xbe>
 8012d06:	f108 0801 	add.w	r8, r8, #1
 8012d0a:	e7ec      	b.n	8012ce6 <_printf_float+0x34a>
 8012d0c:	4613      	mov	r3, r2
 8012d0e:	4631      	mov	r1, r6
 8012d10:	4642      	mov	r2, r8
 8012d12:	4628      	mov	r0, r5
 8012d14:	47b8      	blx	r7
 8012d16:	3001      	adds	r0, #1
 8012d18:	d1c0      	bne.n	8012c9c <_printf_float+0x300>
 8012d1a:	e69e      	b.n	8012a5a <_printf_float+0xbe>
 8012d1c:	2301      	movs	r3, #1
 8012d1e:	4631      	mov	r1, r6
 8012d20:	4628      	mov	r0, r5
 8012d22:	9205      	str	r2, [sp, #20]
 8012d24:	47b8      	blx	r7
 8012d26:	3001      	adds	r0, #1
 8012d28:	f43f ae97 	beq.w	8012a5a <_printf_float+0xbe>
 8012d2c:	9a05      	ldr	r2, [sp, #20]
 8012d2e:	f10b 0b01 	add.w	fp, fp, #1
 8012d32:	e7b9      	b.n	8012ca8 <_printf_float+0x30c>
 8012d34:	ee18 3a10 	vmov	r3, s16
 8012d38:	4652      	mov	r2, sl
 8012d3a:	4631      	mov	r1, r6
 8012d3c:	4628      	mov	r0, r5
 8012d3e:	47b8      	blx	r7
 8012d40:	3001      	adds	r0, #1
 8012d42:	d1be      	bne.n	8012cc2 <_printf_float+0x326>
 8012d44:	e689      	b.n	8012a5a <_printf_float+0xbe>
 8012d46:	9a05      	ldr	r2, [sp, #20]
 8012d48:	464b      	mov	r3, r9
 8012d4a:	4442      	add	r2, r8
 8012d4c:	4631      	mov	r1, r6
 8012d4e:	4628      	mov	r0, r5
 8012d50:	47b8      	blx	r7
 8012d52:	3001      	adds	r0, #1
 8012d54:	d1c1      	bne.n	8012cda <_printf_float+0x33e>
 8012d56:	e680      	b.n	8012a5a <_printf_float+0xbe>
 8012d58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012d5a:	2a01      	cmp	r2, #1
 8012d5c:	dc01      	bgt.n	8012d62 <_printf_float+0x3c6>
 8012d5e:	07db      	lsls	r3, r3, #31
 8012d60:	d53a      	bpl.n	8012dd8 <_printf_float+0x43c>
 8012d62:	2301      	movs	r3, #1
 8012d64:	4642      	mov	r2, r8
 8012d66:	4631      	mov	r1, r6
 8012d68:	4628      	mov	r0, r5
 8012d6a:	47b8      	blx	r7
 8012d6c:	3001      	adds	r0, #1
 8012d6e:	f43f ae74 	beq.w	8012a5a <_printf_float+0xbe>
 8012d72:	ee18 3a10 	vmov	r3, s16
 8012d76:	4652      	mov	r2, sl
 8012d78:	4631      	mov	r1, r6
 8012d7a:	4628      	mov	r0, r5
 8012d7c:	47b8      	blx	r7
 8012d7e:	3001      	adds	r0, #1
 8012d80:	f43f ae6b 	beq.w	8012a5a <_printf_float+0xbe>
 8012d84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012d88:	2200      	movs	r2, #0
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8012d90:	f7ed feba 	bl	8000b08 <__aeabi_dcmpeq>
 8012d94:	b9d8      	cbnz	r0, 8012dce <_printf_float+0x432>
 8012d96:	f10a 33ff 	add.w	r3, sl, #4294967295
 8012d9a:	f108 0201 	add.w	r2, r8, #1
 8012d9e:	4631      	mov	r1, r6
 8012da0:	4628      	mov	r0, r5
 8012da2:	47b8      	blx	r7
 8012da4:	3001      	adds	r0, #1
 8012da6:	d10e      	bne.n	8012dc6 <_printf_float+0x42a>
 8012da8:	e657      	b.n	8012a5a <_printf_float+0xbe>
 8012daa:	2301      	movs	r3, #1
 8012dac:	4652      	mov	r2, sl
 8012dae:	4631      	mov	r1, r6
 8012db0:	4628      	mov	r0, r5
 8012db2:	47b8      	blx	r7
 8012db4:	3001      	adds	r0, #1
 8012db6:	f43f ae50 	beq.w	8012a5a <_printf_float+0xbe>
 8012dba:	f108 0801 	add.w	r8, r8, #1
 8012dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012dc0:	3b01      	subs	r3, #1
 8012dc2:	4543      	cmp	r3, r8
 8012dc4:	dcf1      	bgt.n	8012daa <_printf_float+0x40e>
 8012dc6:	464b      	mov	r3, r9
 8012dc8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012dcc:	e6da      	b.n	8012b84 <_printf_float+0x1e8>
 8012dce:	f04f 0800 	mov.w	r8, #0
 8012dd2:	f104 0a1a 	add.w	sl, r4, #26
 8012dd6:	e7f2      	b.n	8012dbe <_printf_float+0x422>
 8012dd8:	2301      	movs	r3, #1
 8012dda:	4642      	mov	r2, r8
 8012ddc:	e7df      	b.n	8012d9e <_printf_float+0x402>
 8012dde:	2301      	movs	r3, #1
 8012de0:	464a      	mov	r2, r9
 8012de2:	4631      	mov	r1, r6
 8012de4:	4628      	mov	r0, r5
 8012de6:	47b8      	blx	r7
 8012de8:	3001      	adds	r0, #1
 8012dea:	f43f ae36 	beq.w	8012a5a <_printf_float+0xbe>
 8012dee:	f108 0801 	add.w	r8, r8, #1
 8012df2:	68e3      	ldr	r3, [r4, #12]
 8012df4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012df6:	1a5b      	subs	r3, r3, r1
 8012df8:	4543      	cmp	r3, r8
 8012dfa:	dcf0      	bgt.n	8012dde <_printf_float+0x442>
 8012dfc:	e6f8      	b.n	8012bf0 <_printf_float+0x254>
 8012dfe:	f04f 0800 	mov.w	r8, #0
 8012e02:	f104 0919 	add.w	r9, r4, #25
 8012e06:	e7f4      	b.n	8012df2 <_printf_float+0x456>

08012e08 <_printf_common>:
 8012e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e0c:	4616      	mov	r6, r2
 8012e0e:	4699      	mov	r9, r3
 8012e10:	688a      	ldr	r2, [r1, #8]
 8012e12:	690b      	ldr	r3, [r1, #16]
 8012e14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012e18:	4293      	cmp	r3, r2
 8012e1a:	bfb8      	it	lt
 8012e1c:	4613      	movlt	r3, r2
 8012e1e:	6033      	str	r3, [r6, #0]
 8012e20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012e24:	4607      	mov	r7, r0
 8012e26:	460c      	mov	r4, r1
 8012e28:	b10a      	cbz	r2, 8012e2e <_printf_common+0x26>
 8012e2a:	3301      	adds	r3, #1
 8012e2c:	6033      	str	r3, [r6, #0]
 8012e2e:	6823      	ldr	r3, [r4, #0]
 8012e30:	0699      	lsls	r1, r3, #26
 8012e32:	bf42      	ittt	mi
 8012e34:	6833      	ldrmi	r3, [r6, #0]
 8012e36:	3302      	addmi	r3, #2
 8012e38:	6033      	strmi	r3, [r6, #0]
 8012e3a:	6825      	ldr	r5, [r4, #0]
 8012e3c:	f015 0506 	ands.w	r5, r5, #6
 8012e40:	d106      	bne.n	8012e50 <_printf_common+0x48>
 8012e42:	f104 0a19 	add.w	sl, r4, #25
 8012e46:	68e3      	ldr	r3, [r4, #12]
 8012e48:	6832      	ldr	r2, [r6, #0]
 8012e4a:	1a9b      	subs	r3, r3, r2
 8012e4c:	42ab      	cmp	r3, r5
 8012e4e:	dc26      	bgt.n	8012e9e <_printf_common+0x96>
 8012e50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012e54:	1e13      	subs	r3, r2, #0
 8012e56:	6822      	ldr	r2, [r4, #0]
 8012e58:	bf18      	it	ne
 8012e5a:	2301      	movne	r3, #1
 8012e5c:	0692      	lsls	r2, r2, #26
 8012e5e:	d42b      	bmi.n	8012eb8 <_printf_common+0xb0>
 8012e60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012e64:	4649      	mov	r1, r9
 8012e66:	4638      	mov	r0, r7
 8012e68:	47c0      	blx	r8
 8012e6a:	3001      	adds	r0, #1
 8012e6c:	d01e      	beq.n	8012eac <_printf_common+0xa4>
 8012e6e:	6823      	ldr	r3, [r4, #0]
 8012e70:	6922      	ldr	r2, [r4, #16]
 8012e72:	f003 0306 	and.w	r3, r3, #6
 8012e76:	2b04      	cmp	r3, #4
 8012e78:	bf02      	ittt	eq
 8012e7a:	68e5      	ldreq	r5, [r4, #12]
 8012e7c:	6833      	ldreq	r3, [r6, #0]
 8012e7e:	1aed      	subeq	r5, r5, r3
 8012e80:	68a3      	ldr	r3, [r4, #8]
 8012e82:	bf0c      	ite	eq
 8012e84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012e88:	2500      	movne	r5, #0
 8012e8a:	4293      	cmp	r3, r2
 8012e8c:	bfc4      	itt	gt
 8012e8e:	1a9b      	subgt	r3, r3, r2
 8012e90:	18ed      	addgt	r5, r5, r3
 8012e92:	2600      	movs	r6, #0
 8012e94:	341a      	adds	r4, #26
 8012e96:	42b5      	cmp	r5, r6
 8012e98:	d11a      	bne.n	8012ed0 <_printf_common+0xc8>
 8012e9a:	2000      	movs	r0, #0
 8012e9c:	e008      	b.n	8012eb0 <_printf_common+0xa8>
 8012e9e:	2301      	movs	r3, #1
 8012ea0:	4652      	mov	r2, sl
 8012ea2:	4649      	mov	r1, r9
 8012ea4:	4638      	mov	r0, r7
 8012ea6:	47c0      	blx	r8
 8012ea8:	3001      	adds	r0, #1
 8012eaa:	d103      	bne.n	8012eb4 <_printf_common+0xac>
 8012eac:	f04f 30ff 	mov.w	r0, #4294967295
 8012eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012eb4:	3501      	adds	r5, #1
 8012eb6:	e7c6      	b.n	8012e46 <_printf_common+0x3e>
 8012eb8:	18e1      	adds	r1, r4, r3
 8012eba:	1c5a      	adds	r2, r3, #1
 8012ebc:	2030      	movs	r0, #48	; 0x30
 8012ebe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012ec2:	4422      	add	r2, r4
 8012ec4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012ec8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012ecc:	3302      	adds	r3, #2
 8012ece:	e7c7      	b.n	8012e60 <_printf_common+0x58>
 8012ed0:	2301      	movs	r3, #1
 8012ed2:	4622      	mov	r2, r4
 8012ed4:	4649      	mov	r1, r9
 8012ed6:	4638      	mov	r0, r7
 8012ed8:	47c0      	blx	r8
 8012eda:	3001      	adds	r0, #1
 8012edc:	d0e6      	beq.n	8012eac <_printf_common+0xa4>
 8012ede:	3601      	adds	r6, #1
 8012ee0:	e7d9      	b.n	8012e96 <_printf_common+0x8e>
	...

08012ee4 <_printf_i>:
 8012ee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012ee8:	7e0f      	ldrb	r7, [r1, #24]
 8012eea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012eec:	2f78      	cmp	r7, #120	; 0x78
 8012eee:	4691      	mov	r9, r2
 8012ef0:	4680      	mov	r8, r0
 8012ef2:	460c      	mov	r4, r1
 8012ef4:	469a      	mov	sl, r3
 8012ef6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012efa:	d807      	bhi.n	8012f0c <_printf_i+0x28>
 8012efc:	2f62      	cmp	r7, #98	; 0x62
 8012efe:	d80a      	bhi.n	8012f16 <_printf_i+0x32>
 8012f00:	2f00      	cmp	r7, #0
 8012f02:	f000 80d4 	beq.w	80130ae <_printf_i+0x1ca>
 8012f06:	2f58      	cmp	r7, #88	; 0x58
 8012f08:	f000 80c0 	beq.w	801308c <_printf_i+0x1a8>
 8012f0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012f10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012f14:	e03a      	b.n	8012f8c <_printf_i+0xa8>
 8012f16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012f1a:	2b15      	cmp	r3, #21
 8012f1c:	d8f6      	bhi.n	8012f0c <_printf_i+0x28>
 8012f1e:	a101      	add	r1, pc, #4	; (adr r1, 8012f24 <_printf_i+0x40>)
 8012f20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012f24:	08012f7d 	.word	0x08012f7d
 8012f28:	08012f91 	.word	0x08012f91
 8012f2c:	08012f0d 	.word	0x08012f0d
 8012f30:	08012f0d 	.word	0x08012f0d
 8012f34:	08012f0d 	.word	0x08012f0d
 8012f38:	08012f0d 	.word	0x08012f0d
 8012f3c:	08012f91 	.word	0x08012f91
 8012f40:	08012f0d 	.word	0x08012f0d
 8012f44:	08012f0d 	.word	0x08012f0d
 8012f48:	08012f0d 	.word	0x08012f0d
 8012f4c:	08012f0d 	.word	0x08012f0d
 8012f50:	08013095 	.word	0x08013095
 8012f54:	08012fbd 	.word	0x08012fbd
 8012f58:	0801304f 	.word	0x0801304f
 8012f5c:	08012f0d 	.word	0x08012f0d
 8012f60:	08012f0d 	.word	0x08012f0d
 8012f64:	080130b7 	.word	0x080130b7
 8012f68:	08012f0d 	.word	0x08012f0d
 8012f6c:	08012fbd 	.word	0x08012fbd
 8012f70:	08012f0d 	.word	0x08012f0d
 8012f74:	08012f0d 	.word	0x08012f0d
 8012f78:	08013057 	.word	0x08013057
 8012f7c:	682b      	ldr	r3, [r5, #0]
 8012f7e:	1d1a      	adds	r2, r3, #4
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	602a      	str	r2, [r5, #0]
 8012f84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012f88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012f8c:	2301      	movs	r3, #1
 8012f8e:	e09f      	b.n	80130d0 <_printf_i+0x1ec>
 8012f90:	6820      	ldr	r0, [r4, #0]
 8012f92:	682b      	ldr	r3, [r5, #0]
 8012f94:	0607      	lsls	r7, r0, #24
 8012f96:	f103 0104 	add.w	r1, r3, #4
 8012f9a:	6029      	str	r1, [r5, #0]
 8012f9c:	d501      	bpl.n	8012fa2 <_printf_i+0xbe>
 8012f9e:	681e      	ldr	r6, [r3, #0]
 8012fa0:	e003      	b.n	8012faa <_printf_i+0xc6>
 8012fa2:	0646      	lsls	r6, r0, #25
 8012fa4:	d5fb      	bpl.n	8012f9e <_printf_i+0xba>
 8012fa6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012faa:	2e00      	cmp	r6, #0
 8012fac:	da03      	bge.n	8012fb6 <_printf_i+0xd2>
 8012fae:	232d      	movs	r3, #45	; 0x2d
 8012fb0:	4276      	negs	r6, r6
 8012fb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012fb6:	485a      	ldr	r0, [pc, #360]	; (8013120 <_printf_i+0x23c>)
 8012fb8:	230a      	movs	r3, #10
 8012fba:	e012      	b.n	8012fe2 <_printf_i+0xfe>
 8012fbc:	682b      	ldr	r3, [r5, #0]
 8012fbe:	6820      	ldr	r0, [r4, #0]
 8012fc0:	1d19      	adds	r1, r3, #4
 8012fc2:	6029      	str	r1, [r5, #0]
 8012fc4:	0605      	lsls	r5, r0, #24
 8012fc6:	d501      	bpl.n	8012fcc <_printf_i+0xe8>
 8012fc8:	681e      	ldr	r6, [r3, #0]
 8012fca:	e002      	b.n	8012fd2 <_printf_i+0xee>
 8012fcc:	0641      	lsls	r1, r0, #25
 8012fce:	d5fb      	bpl.n	8012fc8 <_printf_i+0xe4>
 8012fd0:	881e      	ldrh	r6, [r3, #0]
 8012fd2:	4853      	ldr	r0, [pc, #332]	; (8013120 <_printf_i+0x23c>)
 8012fd4:	2f6f      	cmp	r7, #111	; 0x6f
 8012fd6:	bf0c      	ite	eq
 8012fd8:	2308      	moveq	r3, #8
 8012fda:	230a      	movne	r3, #10
 8012fdc:	2100      	movs	r1, #0
 8012fde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012fe2:	6865      	ldr	r5, [r4, #4]
 8012fe4:	60a5      	str	r5, [r4, #8]
 8012fe6:	2d00      	cmp	r5, #0
 8012fe8:	bfa2      	ittt	ge
 8012fea:	6821      	ldrge	r1, [r4, #0]
 8012fec:	f021 0104 	bicge.w	r1, r1, #4
 8012ff0:	6021      	strge	r1, [r4, #0]
 8012ff2:	b90e      	cbnz	r6, 8012ff8 <_printf_i+0x114>
 8012ff4:	2d00      	cmp	r5, #0
 8012ff6:	d04b      	beq.n	8013090 <_printf_i+0x1ac>
 8012ff8:	4615      	mov	r5, r2
 8012ffa:	fbb6 f1f3 	udiv	r1, r6, r3
 8012ffe:	fb03 6711 	mls	r7, r3, r1, r6
 8013002:	5dc7      	ldrb	r7, [r0, r7]
 8013004:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013008:	4637      	mov	r7, r6
 801300a:	42bb      	cmp	r3, r7
 801300c:	460e      	mov	r6, r1
 801300e:	d9f4      	bls.n	8012ffa <_printf_i+0x116>
 8013010:	2b08      	cmp	r3, #8
 8013012:	d10b      	bne.n	801302c <_printf_i+0x148>
 8013014:	6823      	ldr	r3, [r4, #0]
 8013016:	07de      	lsls	r6, r3, #31
 8013018:	d508      	bpl.n	801302c <_printf_i+0x148>
 801301a:	6923      	ldr	r3, [r4, #16]
 801301c:	6861      	ldr	r1, [r4, #4]
 801301e:	4299      	cmp	r1, r3
 8013020:	bfde      	ittt	le
 8013022:	2330      	movle	r3, #48	; 0x30
 8013024:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013028:	f105 35ff 	addle.w	r5, r5, #4294967295
 801302c:	1b52      	subs	r2, r2, r5
 801302e:	6122      	str	r2, [r4, #16]
 8013030:	f8cd a000 	str.w	sl, [sp]
 8013034:	464b      	mov	r3, r9
 8013036:	aa03      	add	r2, sp, #12
 8013038:	4621      	mov	r1, r4
 801303a:	4640      	mov	r0, r8
 801303c:	f7ff fee4 	bl	8012e08 <_printf_common>
 8013040:	3001      	adds	r0, #1
 8013042:	d14a      	bne.n	80130da <_printf_i+0x1f6>
 8013044:	f04f 30ff 	mov.w	r0, #4294967295
 8013048:	b004      	add	sp, #16
 801304a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801304e:	6823      	ldr	r3, [r4, #0]
 8013050:	f043 0320 	orr.w	r3, r3, #32
 8013054:	6023      	str	r3, [r4, #0]
 8013056:	4833      	ldr	r0, [pc, #204]	; (8013124 <_printf_i+0x240>)
 8013058:	2778      	movs	r7, #120	; 0x78
 801305a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801305e:	6823      	ldr	r3, [r4, #0]
 8013060:	6829      	ldr	r1, [r5, #0]
 8013062:	061f      	lsls	r7, r3, #24
 8013064:	f851 6b04 	ldr.w	r6, [r1], #4
 8013068:	d402      	bmi.n	8013070 <_printf_i+0x18c>
 801306a:	065f      	lsls	r7, r3, #25
 801306c:	bf48      	it	mi
 801306e:	b2b6      	uxthmi	r6, r6
 8013070:	07df      	lsls	r7, r3, #31
 8013072:	bf48      	it	mi
 8013074:	f043 0320 	orrmi.w	r3, r3, #32
 8013078:	6029      	str	r1, [r5, #0]
 801307a:	bf48      	it	mi
 801307c:	6023      	strmi	r3, [r4, #0]
 801307e:	b91e      	cbnz	r6, 8013088 <_printf_i+0x1a4>
 8013080:	6823      	ldr	r3, [r4, #0]
 8013082:	f023 0320 	bic.w	r3, r3, #32
 8013086:	6023      	str	r3, [r4, #0]
 8013088:	2310      	movs	r3, #16
 801308a:	e7a7      	b.n	8012fdc <_printf_i+0xf8>
 801308c:	4824      	ldr	r0, [pc, #144]	; (8013120 <_printf_i+0x23c>)
 801308e:	e7e4      	b.n	801305a <_printf_i+0x176>
 8013090:	4615      	mov	r5, r2
 8013092:	e7bd      	b.n	8013010 <_printf_i+0x12c>
 8013094:	682b      	ldr	r3, [r5, #0]
 8013096:	6826      	ldr	r6, [r4, #0]
 8013098:	6961      	ldr	r1, [r4, #20]
 801309a:	1d18      	adds	r0, r3, #4
 801309c:	6028      	str	r0, [r5, #0]
 801309e:	0635      	lsls	r5, r6, #24
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	d501      	bpl.n	80130a8 <_printf_i+0x1c4>
 80130a4:	6019      	str	r1, [r3, #0]
 80130a6:	e002      	b.n	80130ae <_printf_i+0x1ca>
 80130a8:	0670      	lsls	r0, r6, #25
 80130aa:	d5fb      	bpl.n	80130a4 <_printf_i+0x1c0>
 80130ac:	8019      	strh	r1, [r3, #0]
 80130ae:	2300      	movs	r3, #0
 80130b0:	6123      	str	r3, [r4, #16]
 80130b2:	4615      	mov	r5, r2
 80130b4:	e7bc      	b.n	8013030 <_printf_i+0x14c>
 80130b6:	682b      	ldr	r3, [r5, #0]
 80130b8:	1d1a      	adds	r2, r3, #4
 80130ba:	602a      	str	r2, [r5, #0]
 80130bc:	681d      	ldr	r5, [r3, #0]
 80130be:	6862      	ldr	r2, [r4, #4]
 80130c0:	2100      	movs	r1, #0
 80130c2:	4628      	mov	r0, r5
 80130c4:	f7ed f8a4 	bl	8000210 <memchr>
 80130c8:	b108      	cbz	r0, 80130ce <_printf_i+0x1ea>
 80130ca:	1b40      	subs	r0, r0, r5
 80130cc:	6060      	str	r0, [r4, #4]
 80130ce:	6863      	ldr	r3, [r4, #4]
 80130d0:	6123      	str	r3, [r4, #16]
 80130d2:	2300      	movs	r3, #0
 80130d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80130d8:	e7aa      	b.n	8013030 <_printf_i+0x14c>
 80130da:	6923      	ldr	r3, [r4, #16]
 80130dc:	462a      	mov	r2, r5
 80130de:	4649      	mov	r1, r9
 80130e0:	4640      	mov	r0, r8
 80130e2:	47d0      	blx	sl
 80130e4:	3001      	adds	r0, #1
 80130e6:	d0ad      	beq.n	8013044 <_printf_i+0x160>
 80130e8:	6823      	ldr	r3, [r4, #0]
 80130ea:	079b      	lsls	r3, r3, #30
 80130ec:	d413      	bmi.n	8013116 <_printf_i+0x232>
 80130ee:	68e0      	ldr	r0, [r4, #12]
 80130f0:	9b03      	ldr	r3, [sp, #12]
 80130f2:	4298      	cmp	r0, r3
 80130f4:	bfb8      	it	lt
 80130f6:	4618      	movlt	r0, r3
 80130f8:	e7a6      	b.n	8013048 <_printf_i+0x164>
 80130fa:	2301      	movs	r3, #1
 80130fc:	4632      	mov	r2, r6
 80130fe:	4649      	mov	r1, r9
 8013100:	4640      	mov	r0, r8
 8013102:	47d0      	blx	sl
 8013104:	3001      	adds	r0, #1
 8013106:	d09d      	beq.n	8013044 <_printf_i+0x160>
 8013108:	3501      	adds	r5, #1
 801310a:	68e3      	ldr	r3, [r4, #12]
 801310c:	9903      	ldr	r1, [sp, #12]
 801310e:	1a5b      	subs	r3, r3, r1
 8013110:	42ab      	cmp	r3, r5
 8013112:	dcf2      	bgt.n	80130fa <_printf_i+0x216>
 8013114:	e7eb      	b.n	80130ee <_printf_i+0x20a>
 8013116:	2500      	movs	r5, #0
 8013118:	f104 0619 	add.w	r6, r4, #25
 801311c:	e7f5      	b.n	801310a <_printf_i+0x226>
 801311e:	bf00      	nop
 8013120:	08015f26 	.word	0x08015f26
 8013124:	08015f37 	.word	0x08015f37

08013128 <std>:
 8013128:	2300      	movs	r3, #0
 801312a:	b510      	push	{r4, lr}
 801312c:	4604      	mov	r4, r0
 801312e:	e9c0 3300 	strd	r3, r3, [r0]
 8013132:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013136:	6083      	str	r3, [r0, #8]
 8013138:	8181      	strh	r1, [r0, #12]
 801313a:	6643      	str	r3, [r0, #100]	; 0x64
 801313c:	81c2      	strh	r2, [r0, #14]
 801313e:	6183      	str	r3, [r0, #24]
 8013140:	4619      	mov	r1, r3
 8013142:	2208      	movs	r2, #8
 8013144:	305c      	adds	r0, #92	; 0x5c
 8013146:	f000 fa1f 	bl	8013588 <memset>
 801314a:	4b0d      	ldr	r3, [pc, #52]	; (8013180 <std+0x58>)
 801314c:	6263      	str	r3, [r4, #36]	; 0x24
 801314e:	4b0d      	ldr	r3, [pc, #52]	; (8013184 <std+0x5c>)
 8013150:	62a3      	str	r3, [r4, #40]	; 0x28
 8013152:	4b0d      	ldr	r3, [pc, #52]	; (8013188 <std+0x60>)
 8013154:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013156:	4b0d      	ldr	r3, [pc, #52]	; (801318c <std+0x64>)
 8013158:	6323      	str	r3, [r4, #48]	; 0x30
 801315a:	4b0d      	ldr	r3, [pc, #52]	; (8013190 <std+0x68>)
 801315c:	6224      	str	r4, [r4, #32]
 801315e:	429c      	cmp	r4, r3
 8013160:	d006      	beq.n	8013170 <std+0x48>
 8013162:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8013166:	4294      	cmp	r4, r2
 8013168:	d002      	beq.n	8013170 <std+0x48>
 801316a:	33d0      	adds	r3, #208	; 0xd0
 801316c:	429c      	cmp	r4, r3
 801316e:	d105      	bne.n	801317c <std+0x54>
 8013170:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013178:	f000 bad8 	b.w	801372c <__retarget_lock_init_recursive>
 801317c:	bd10      	pop	{r4, pc}
 801317e:	bf00      	nop
 8013180:	080133d9 	.word	0x080133d9
 8013184:	080133fb 	.word	0x080133fb
 8013188:	08013433 	.word	0x08013433
 801318c:	08013457 	.word	0x08013457
 8013190:	20006834 	.word	0x20006834

08013194 <stdio_exit_handler>:
 8013194:	4a02      	ldr	r2, [pc, #8]	; (80131a0 <stdio_exit_handler+0xc>)
 8013196:	4903      	ldr	r1, [pc, #12]	; (80131a4 <stdio_exit_handler+0x10>)
 8013198:	4803      	ldr	r0, [pc, #12]	; (80131a8 <stdio_exit_handler+0x14>)
 801319a:	f000 b869 	b.w	8013270 <_fwalk_sglue>
 801319e:	bf00      	nop
 80131a0:	20000030 	.word	0x20000030
 80131a4:	08015381 	.word	0x08015381
 80131a8:	2000003c 	.word	0x2000003c

080131ac <cleanup_stdio>:
 80131ac:	6841      	ldr	r1, [r0, #4]
 80131ae:	4b0c      	ldr	r3, [pc, #48]	; (80131e0 <cleanup_stdio+0x34>)
 80131b0:	4299      	cmp	r1, r3
 80131b2:	b510      	push	{r4, lr}
 80131b4:	4604      	mov	r4, r0
 80131b6:	d001      	beq.n	80131bc <cleanup_stdio+0x10>
 80131b8:	f002 f8e2 	bl	8015380 <_fflush_r>
 80131bc:	68a1      	ldr	r1, [r4, #8]
 80131be:	4b09      	ldr	r3, [pc, #36]	; (80131e4 <cleanup_stdio+0x38>)
 80131c0:	4299      	cmp	r1, r3
 80131c2:	d002      	beq.n	80131ca <cleanup_stdio+0x1e>
 80131c4:	4620      	mov	r0, r4
 80131c6:	f002 f8db 	bl	8015380 <_fflush_r>
 80131ca:	68e1      	ldr	r1, [r4, #12]
 80131cc:	4b06      	ldr	r3, [pc, #24]	; (80131e8 <cleanup_stdio+0x3c>)
 80131ce:	4299      	cmp	r1, r3
 80131d0:	d004      	beq.n	80131dc <cleanup_stdio+0x30>
 80131d2:	4620      	mov	r0, r4
 80131d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80131d8:	f002 b8d2 	b.w	8015380 <_fflush_r>
 80131dc:	bd10      	pop	{r4, pc}
 80131de:	bf00      	nop
 80131e0:	20006834 	.word	0x20006834
 80131e4:	2000689c 	.word	0x2000689c
 80131e8:	20006904 	.word	0x20006904

080131ec <global_stdio_init.part.0>:
 80131ec:	b510      	push	{r4, lr}
 80131ee:	4b0b      	ldr	r3, [pc, #44]	; (801321c <global_stdio_init.part.0+0x30>)
 80131f0:	4c0b      	ldr	r4, [pc, #44]	; (8013220 <global_stdio_init.part.0+0x34>)
 80131f2:	4a0c      	ldr	r2, [pc, #48]	; (8013224 <global_stdio_init.part.0+0x38>)
 80131f4:	601a      	str	r2, [r3, #0]
 80131f6:	4620      	mov	r0, r4
 80131f8:	2200      	movs	r2, #0
 80131fa:	2104      	movs	r1, #4
 80131fc:	f7ff ff94 	bl	8013128 <std>
 8013200:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8013204:	2201      	movs	r2, #1
 8013206:	2109      	movs	r1, #9
 8013208:	f7ff ff8e 	bl	8013128 <std>
 801320c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8013210:	2202      	movs	r2, #2
 8013212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013216:	2112      	movs	r1, #18
 8013218:	f7ff bf86 	b.w	8013128 <std>
 801321c:	2000696c 	.word	0x2000696c
 8013220:	20006834 	.word	0x20006834
 8013224:	08013195 	.word	0x08013195

08013228 <__sfp_lock_acquire>:
 8013228:	4801      	ldr	r0, [pc, #4]	; (8013230 <__sfp_lock_acquire+0x8>)
 801322a:	f000 ba80 	b.w	801372e <__retarget_lock_acquire_recursive>
 801322e:	bf00      	nop
 8013230:	20006975 	.word	0x20006975

08013234 <__sfp_lock_release>:
 8013234:	4801      	ldr	r0, [pc, #4]	; (801323c <__sfp_lock_release+0x8>)
 8013236:	f000 ba7b 	b.w	8013730 <__retarget_lock_release_recursive>
 801323a:	bf00      	nop
 801323c:	20006975 	.word	0x20006975

08013240 <__sinit>:
 8013240:	b510      	push	{r4, lr}
 8013242:	4604      	mov	r4, r0
 8013244:	f7ff fff0 	bl	8013228 <__sfp_lock_acquire>
 8013248:	6a23      	ldr	r3, [r4, #32]
 801324a:	b11b      	cbz	r3, 8013254 <__sinit+0x14>
 801324c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013250:	f7ff bff0 	b.w	8013234 <__sfp_lock_release>
 8013254:	4b04      	ldr	r3, [pc, #16]	; (8013268 <__sinit+0x28>)
 8013256:	6223      	str	r3, [r4, #32]
 8013258:	4b04      	ldr	r3, [pc, #16]	; (801326c <__sinit+0x2c>)
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	2b00      	cmp	r3, #0
 801325e:	d1f5      	bne.n	801324c <__sinit+0xc>
 8013260:	f7ff ffc4 	bl	80131ec <global_stdio_init.part.0>
 8013264:	e7f2      	b.n	801324c <__sinit+0xc>
 8013266:	bf00      	nop
 8013268:	080131ad 	.word	0x080131ad
 801326c:	2000696c 	.word	0x2000696c

08013270 <_fwalk_sglue>:
 8013270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013274:	4607      	mov	r7, r0
 8013276:	4688      	mov	r8, r1
 8013278:	4614      	mov	r4, r2
 801327a:	2600      	movs	r6, #0
 801327c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013280:	f1b9 0901 	subs.w	r9, r9, #1
 8013284:	d505      	bpl.n	8013292 <_fwalk_sglue+0x22>
 8013286:	6824      	ldr	r4, [r4, #0]
 8013288:	2c00      	cmp	r4, #0
 801328a:	d1f7      	bne.n	801327c <_fwalk_sglue+0xc>
 801328c:	4630      	mov	r0, r6
 801328e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013292:	89ab      	ldrh	r3, [r5, #12]
 8013294:	2b01      	cmp	r3, #1
 8013296:	d907      	bls.n	80132a8 <_fwalk_sglue+0x38>
 8013298:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801329c:	3301      	adds	r3, #1
 801329e:	d003      	beq.n	80132a8 <_fwalk_sglue+0x38>
 80132a0:	4629      	mov	r1, r5
 80132a2:	4638      	mov	r0, r7
 80132a4:	47c0      	blx	r8
 80132a6:	4306      	orrs	r6, r0
 80132a8:	3568      	adds	r5, #104	; 0x68
 80132aa:	e7e9      	b.n	8013280 <_fwalk_sglue+0x10>

080132ac <iprintf>:
 80132ac:	b40f      	push	{r0, r1, r2, r3}
 80132ae:	b507      	push	{r0, r1, r2, lr}
 80132b0:	4906      	ldr	r1, [pc, #24]	; (80132cc <iprintf+0x20>)
 80132b2:	ab04      	add	r3, sp, #16
 80132b4:	6808      	ldr	r0, [r1, #0]
 80132b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80132ba:	6881      	ldr	r1, [r0, #8]
 80132bc:	9301      	str	r3, [sp, #4]
 80132be:	f001 febf 	bl	8015040 <_vfiprintf_r>
 80132c2:	b003      	add	sp, #12
 80132c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80132c8:	b004      	add	sp, #16
 80132ca:	4770      	bx	lr
 80132cc:	20000088 	.word	0x20000088

080132d0 <putchar>:
 80132d0:	4b02      	ldr	r3, [pc, #8]	; (80132dc <putchar+0xc>)
 80132d2:	4601      	mov	r1, r0
 80132d4:	6818      	ldr	r0, [r3, #0]
 80132d6:	6882      	ldr	r2, [r0, #8]
 80132d8:	f002 b8dc 	b.w	8015494 <_putc_r>
 80132dc:	20000088 	.word	0x20000088

080132e0 <_puts_r>:
 80132e0:	6a03      	ldr	r3, [r0, #32]
 80132e2:	b570      	push	{r4, r5, r6, lr}
 80132e4:	6884      	ldr	r4, [r0, #8]
 80132e6:	4605      	mov	r5, r0
 80132e8:	460e      	mov	r6, r1
 80132ea:	b90b      	cbnz	r3, 80132f0 <_puts_r+0x10>
 80132ec:	f7ff ffa8 	bl	8013240 <__sinit>
 80132f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80132f2:	07db      	lsls	r3, r3, #31
 80132f4:	d405      	bmi.n	8013302 <_puts_r+0x22>
 80132f6:	89a3      	ldrh	r3, [r4, #12]
 80132f8:	0598      	lsls	r0, r3, #22
 80132fa:	d402      	bmi.n	8013302 <_puts_r+0x22>
 80132fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80132fe:	f000 fa16 	bl	801372e <__retarget_lock_acquire_recursive>
 8013302:	89a3      	ldrh	r3, [r4, #12]
 8013304:	0719      	lsls	r1, r3, #28
 8013306:	d513      	bpl.n	8013330 <_puts_r+0x50>
 8013308:	6923      	ldr	r3, [r4, #16]
 801330a:	b18b      	cbz	r3, 8013330 <_puts_r+0x50>
 801330c:	3e01      	subs	r6, #1
 801330e:	68a3      	ldr	r3, [r4, #8]
 8013310:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013314:	3b01      	subs	r3, #1
 8013316:	60a3      	str	r3, [r4, #8]
 8013318:	b9e9      	cbnz	r1, 8013356 <_puts_r+0x76>
 801331a:	2b00      	cmp	r3, #0
 801331c:	da2e      	bge.n	801337c <_puts_r+0x9c>
 801331e:	4622      	mov	r2, r4
 8013320:	210a      	movs	r1, #10
 8013322:	4628      	mov	r0, r5
 8013324:	f000 f89b 	bl	801345e <__swbuf_r>
 8013328:	3001      	adds	r0, #1
 801332a:	d007      	beq.n	801333c <_puts_r+0x5c>
 801332c:	250a      	movs	r5, #10
 801332e:	e007      	b.n	8013340 <_puts_r+0x60>
 8013330:	4621      	mov	r1, r4
 8013332:	4628      	mov	r0, r5
 8013334:	f000 f8d0 	bl	80134d8 <__swsetup_r>
 8013338:	2800      	cmp	r0, #0
 801333a:	d0e7      	beq.n	801330c <_puts_r+0x2c>
 801333c:	f04f 35ff 	mov.w	r5, #4294967295
 8013340:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013342:	07da      	lsls	r2, r3, #31
 8013344:	d405      	bmi.n	8013352 <_puts_r+0x72>
 8013346:	89a3      	ldrh	r3, [r4, #12]
 8013348:	059b      	lsls	r3, r3, #22
 801334a:	d402      	bmi.n	8013352 <_puts_r+0x72>
 801334c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801334e:	f000 f9ef 	bl	8013730 <__retarget_lock_release_recursive>
 8013352:	4628      	mov	r0, r5
 8013354:	bd70      	pop	{r4, r5, r6, pc}
 8013356:	2b00      	cmp	r3, #0
 8013358:	da04      	bge.n	8013364 <_puts_r+0x84>
 801335a:	69a2      	ldr	r2, [r4, #24]
 801335c:	429a      	cmp	r2, r3
 801335e:	dc06      	bgt.n	801336e <_puts_r+0x8e>
 8013360:	290a      	cmp	r1, #10
 8013362:	d004      	beq.n	801336e <_puts_r+0x8e>
 8013364:	6823      	ldr	r3, [r4, #0]
 8013366:	1c5a      	adds	r2, r3, #1
 8013368:	6022      	str	r2, [r4, #0]
 801336a:	7019      	strb	r1, [r3, #0]
 801336c:	e7cf      	b.n	801330e <_puts_r+0x2e>
 801336e:	4622      	mov	r2, r4
 8013370:	4628      	mov	r0, r5
 8013372:	f000 f874 	bl	801345e <__swbuf_r>
 8013376:	3001      	adds	r0, #1
 8013378:	d1c9      	bne.n	801330e <_puts_r+0x2e>
 801337a:	e7df      	b.n	801333c <_puts_r+0x5c>
 801337c:	6823      	ldr	r3, [r4, #0]
 801337e:	250a      	movs	r5, #10
 8013380:	1c5a      	adds	r2, r3, #1
 8013382:	6022      	str	r2, [r4, #0]
 8013384:	701d      	strb	r5, [r3, #0]
 8013386:	e7db      	b.n	8013340 <_puts_r+0x60>

08013388 <puts>:
 8013388:	4b02      	ldr	r3, [pc, #8]	; (8013394 <puts+0xc>)
 801338a:	4601      	mov	r1, r0
 801338c:	6818      	ldr	r0, [r3, #0]
 801338e:	f7ff bfa7 	b.w	80132e0 <_puts_r>
 8013392:	bf00      	nop
 8013394:	20000088 	.word	0x20000088

08013398 <siprintf>:
 8013398:	b40e      	push	{r1, r2, r3}
 801339a:	b500      	push	{lr}
 801339c:	b09c      	sub	sp, #112	; 0x70
 801339e:	ab1d      	add	r3, sp, #116	; 0x74
 80133a0:	9002      	str	r0, [sp, #8]
 80133a2:	9006      	str	r0, [sp, #24]
 80133a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80133a8:	4809      	ldr	r0, [pc, #36]	; (80133d0 <siprintf+0x38>)
 80133aa:	9107      	str	r1, [sp, #28]
 80133ac:	9104      	str	r1, [sp, #16]
 80133ae:	4909      	ldr	r1, [pc, #36]	; (80133d4 <siprintf+0x3c>)
 80133b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80133b4:	9105      	str	r1, [sp, #20]
 80133b6:	6800      	ldr	r0, [r0, #0]
 80133b8:	9301      	str	r3, [sp, #4]
 80133ba:	a902      	add	r1, sp, #8
 80133bc:	f001 fd18 	bl	8014df0 <_svfiprintf_r>
 80133c0:	9b02      	ldr	r3, [sp, #8]
 80133c2:	2200      	movs	r2, #0
 80133c4:	701a      	strb	r2, [r3, #0]
 80133c6:	b01c      	add	sp, #112	; 0x70
 80133c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80133cc:	b003      	add	sp, #12
 80133ce:	4770      	bx	lr
 80133d0:	20000088 	.word	0x20000088
 80133d4:	ffff0208 	.word	0xffff0208

080133d8 <__sread>:
 80133d8:	b510      	push	{r4, lr}
 80133da:	460c      	mov	r4, r1
 80133dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133e0:	f000 f956 	bl	8013690 <_read_r>
 80133e4:	2800      	cmp	r0, #0
 80133e6:	bfab      	itete	ge
 80133e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80133ea:	89a3      	ldrhlt	r3, [r4, #12]
 80133ec:	181b      	addge	r3, r3, r0
 80133ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80133f2:	bfac      	ite	ge
 80133f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80133f6:	81a3      	strhlt	r3, [r4, #12]
 80133f8:	bd10      	pop	{r4, pc}

080133fa <__swrite>:
 80133fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133fe:	461f      	mov	r7, r3
 8013400:	898b      	ldrh	r3, [r1, #12]
 8013402:	05db      	lsls	r3, r3, #23
 8013404:	4605      	mov	r5, r0
 8013406:	460c      	mov	r4, r1
 8013408:	4616      	mov	r6, r2
 801340a:	d505      	bpl.n	8013418 <__swrite+0x1e>
 801340c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013410:	2302      	movs	r3, #2
 8013412:	2200      	movs	r2, #0
 8013414:	f000 f92a 	bl	801366c <_lseek_r>
 8013418:	89a3      	ldrh	r3, [r4, #12]
 801341a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801341e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013422:	81a3      	strh	r3, [r4, #12]
 8013424:	4632      	mov	r2, r6
 8013426:	463b      	mov	r3, r7
 8013428:	4628      	mov	r0, r5
 801342a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801342e:	f000 b941 	b.w	80136b4 <_write_r>

08013432 <__sseek>:
 8013432:	b510      	push	{r4, lr}
 8013434:	460c      	mov	r4, r1
 8013436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801343a:	f000 f917 	bl	801366c <_lseek_r>
 801343e:	1c43      	adds	r3, r0, #1
 8013440:	89a3      	ldrh	r3, [r4, #12]
 8013442:	bf15      	itete	ne
 8013444:	6560      	strne	r0, [r4, #84]	; 0x54
 8013446:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801344a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801344e:	81a3      	strheq	r3, [r4, #12]
 8013450:	bf18      	it	ne
 8013452:	81a3      	strhne	r3, [r4, #12]
 8013454:	bd10      	pop	{r4, pc}

08013456 <__sclose>:
 8013456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801345a:	f000 b8a1 	b.w	80135a0 <_close_r>

0801345e <__swbuf_r>:
 801345e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013460:	460e      	mov	r6, r1
 8013462:	4614      	mov	r4, r2
 8013464:	4605      	mov	r5, r0
 8013466:	b118      	cbz	r0, 8013470 <__swbuf_r+0x12>
 8013468:	6a03      	ldr	r3, [r0, #32]
 801346a:	b90b      	cbnz	r3, 8013470 <__swbuf_r+0x12>
 801346c:	f7ff fee8 	bl	8013240 <__sinit>
 8013470:	69a3      	ldr	r3, [r4, #24]
 8013472:	60a3      	str	r3, [r4, #8]
 8013474:	89a3      	ldrh	r3, [r4, #12]
 8013476:	071a      	lsls	r2, r3, #28
 8013478:	d525      	bpl.n	80134c6 <__swbuf_r+0x68>
 801347a:	6923      	ldr	r3, [r4, #16]
 801347c:	b31b      	cbz	r3, 80134c6 <__swbuf_r+0x68>
 801347e:	6823      	ldr	r3, [r4, #0]
 8013480:	6922      	ldr	r2, [r4, #16]
 8013482:	1a98      	subs	r0, r3, r2
 8013484:	6963      	ldr	r3, [r4, #20]
 8013486:	b2f6      	uxtb	r6, r6
 8013488:	4283      	cmp	r3, r0
 801348a:	4637      	mov	r7, r6
 801348c:	dc04      	bgt.n	8013498 <__swbuf_r+0x3a>
 801348e:	4621      	mov	r1, r4
 8013490:	4628      	mov	r0, r5
 8013492:	f001 ff75 	bl	8015380 <_fflush_r>
 8013496:	b9e0      	cbnz	r0, 80134d2 <__swbuf_r+0x74>
 8013498:	68a3      	ldr	r3, [r4, #8]
 801349a:	3b01      	subs	r3, #1
 801349c:	60a3      	str	r3, [r4, #8]
 801349e:	6823      	ldr	r3, [r4, #0]
 80134a0:	1c5a      	adds	r2, r3, #1
 80134a2:	6022      	str	r2, [r4, #0]
 80134a4:	701e      	strb	r6, [r3, #0]
 80134a6:	6962      	ldr	r2, [r4, #20]
 80134a8:	1c43      	adds	r3, r0, #1
 80134aa:	429a      	cmp	r2, r3
 80134ac:	d004      	beq.n	80134b8 <__swbuf_r+0x5a>
 80134ae:	89a3      	ldrh	r3, [r4, #12]
 80134b0:	07db      	lsls	r3, r3, #31
 80134b2:	d506      	bpl.n	80134c2 <__swbuf_r+0x64>
 80134b4:	2e0a      	cmp	r6, #10
 80134b6:	d104      	bne.n	80134c2 <__swbuf_r+0x64>
 80134b8:	4621      	mov	r1, r4
 80134ba:	4628      	mov	r0, r5
 80134bc:	f001 ff60 	bl	8015380 <_fflush_r>
 80134c0:	b938      	cbnz	r0, 80134d2 <__swbuf_r+0x74>
 80134c2:	4638      	mov	r0, r7
 80134c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134c6:	4621      	mov	r1, r4
 80134c8:	4628      	mov	r0, r5
 80134ca:	f000 f805 	bl	80134d8 <__swsetup_r>
 80134ce:	2800      	cmp	r0, #0
 80134d0:	d0d5      	beq.n	801347e <__swbuf_r+0x20>
 80134d2:	f04f 37ff 	mov.w	r7, #4294967295
 80134d6:	e7f4      	b.n	80134c2 <__swbuf_r+0x64>

080134d8 <__swsetup_r>:
 80134d8:	b538      	push	{r3, r4, r5, lr}
 80134da:	4b2a      	ldr	r3, [pc, #168]	; (8013584 <__swsetup_r+0xac>)
 80134dc:	4605      	mov	r5, r0
 80134de:	6818      	ldr	r0, [r3, #0]
 80134e0:	460c      	mov	r4, r1
 80134e2:	b118      	cbz	r0, 80134ec <__swsetup_r+0x14>
 80134e4:	6a03      	ldr	r3, [r0, #32]
 80134e6:	b90b      	cbnz	r3, 80134ec <__swsetup_r+0x14>
 80134e8:	f7ff feaa 	bl	8013240 <__sinit>
 80134ec:	89a3      	ldrh	r3, [r4, #12]
 80134ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80134f2:	0718      	lsls	r0, r3, #28
 80134f4:	d422      	bmi.n	801353c <__swsetup_r+0x64>
 80134f6:	06d9      	lsls	r1, r3, #27
 80134f8:	d407      	bmi.n	801350a <__swsetup_r+0x32>
 80134fa:	2309      	movs	r3, #9
 80134fc:	602b      	str	r3, [r5, #0]
 80134fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013502:	81a3      	strh	r3, [r4, #12]
 8013504:	f04f 30ff 	mov.w	r0, #4294967295
 8013508:	e034      	b.n	8013574 <__swsetup_r+0x9c>
 801350a:	0758      	lsls	r0, r3, #29
 801350c:	d512      	bpl.n	8013534 <__swsetup_r+0x5c>
 801350e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013510:	b141      	cbz	r1, 8013524 <__swsetup_r+0x4c>
 8013512:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013516:	4299      	cmp	r1, r3
 8013518:	d002      	beq.n	8013520 <__swsetup_r+0x48>
 801351a:	4628      	mov	r0, r5
 801351c:	f000 ff92 	bl	8014444 <_free_r>
 8013520:	2300      	movs	r3, #0
 8013522:	6363      	str	r3, [r4, #52]	; 0x34
 8013524:	89a3      	ldrh	r3, [r4, #12]
 8013526:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801352a:	81a3      	strh	r3, [r4, #12]
 801352c:	2300      	movs	r3, #0
 801352e:	6063      	str	r3, [r4, #4]
 8013530:	6923      	ldr	r3, [r4, #16]
 8013532:	6023      	str	r3, [r4, #0]
 8013534:	89a3      	ldrh	r3, [r4, #12]
 8013536:	f043 0308 	orr.w	r3, r3, #8
 801353a:	81a3      	strh	r3, [r4, #12]
 801353c:	6923      	ldr	r3, [r4, #16]
 801353e:	b94b      	cbnz	r3, 8013554 <__swsetup_r+0x7c>
 8013540:	89a3      	ldrh	r3, [r4, #12]
 8013542:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013546:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801354a:	d003      	beq.n	8013554 <__swsetup_r+0x7c>
 801354c:	4621      	mov	r1, r4
 801354e:	4628      	mov	r0, r5
 8013550:	f001 ff64 	bl	801541c <__smakebuf_r>
 8013554:	89a0      	ldrh	r0, [r4, #12]
 8013556:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801355a:	f010 0301 	ands.w	r3, r0, #1
 801355e:	d00a      	beq.n	8013576 <__swsetup_r+0x9e>
 8013560:	2300      	movs	r3, #0
 8013562:	60a3      	str	r3, [r4, #8]
 8013564:	6963      	ldr	r3, [r4, #20]
 8013566:	425b      	negs	r3, r3
 8013568:	61a3      	str	r3, [r4, #24]
 801356a:	6923      	ldr	r3, [r4, #16]
 801356c:	b943      	cbnz	r3, 8013580 <__swsetup_r+0xa8>
 801356e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013572:	d1c4      	bne.n	80134fe <__swsetup_r+0x26>
 8013574:	bd38      	pop	{r3, r4, r5, pc}
 8013576:	0781      	lsls	r1, r0, #30
 8013578:	bf58      	it	pl
 801357a:	6963      	ldrpl	r3, [r4, #20]
 801357c:	60a3      	str	r3, [r4, #8]
 801357e:	e7f4      	b.n	801356a <__swsetup_r+0x92>
 8013580:	2000      	movs	r0, #0
 8013582:	e7f7      	b.n	8013574 <__swsetup_r+0x9c>
 8013584:	20000088 	.word	0x20000088

08013588 <memset>:
 8013588:	4402      	add	r2, r0
 801358a:	4603      	mov	r3, r0
 801358c:	4293      	cmp	r3, r2
 801358e:	d100      	bne.n	8013592 <memset+0xa>
 8013590:	4770      	bx	lr
 8013592:	f803 1b01 	strb.w	r1, [r3], #1
 8013596:	e7f9      	b.n	801358c <memset+0x4>

08013598 <_localeconv_r>:
 8013598:	4800      	ldr	r0, [pc, #0]	; (801359c <_localeconv_r+0x4>)
 801359a:	4770      	bx	lr
 801359c:	2000017c 	.word	0x2000017c

080135a0 <_close_r>:
 80135a0:	b538      	push	{r3, r4, r5, lr}
 80135a2:	4d06      	ldr	r5, [pc, #24]	; (80135bc <_close_r+0x1c>)
 80135a4:	2300      	movs	r3, #0
 80135a6:	4604      	mov	r4, r0
 80135a8:	4608      	mov	r0, r1
 80135aa:	602b      	str	r3, [r5, #0]
 80135ac:	f7f0 fc7d 	bl	8003eaa <_close>
 80135b0:	1c43      	adds	r3, r0, #1
 80135b2:	d102      	bne.n	80135ba <_close_r+0x1a>
 80135b4:	682b      	ldr	r3, [r5, #0]
 80135b6:	b103      	cbz	r3, 80135ba <_close_r+0x1a>
 80135b8:	6023      	str	r3, [r4, #0]
 80135ba:	bd38      	pop	{r3, r4, r5, pc}
 80135bc:	20006970 	.word	0x20006970

080135c0 <_reclaim_reent>:
 80135c0:	4b29      	ldr	r3, [pc, #164]	; (8013668 <_reclaim_reent+0xa8>)
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	4283      	cmp	r3, r0
 80135c6:	b570      	push	{r4, r5, r6, lr}
 80135c8:	4604      	mov	r4, r0
 80135ca:	d04b      	beq.n	8013664 <_reclaim_reent+0xa4>
 80135cc:	69c3      	ldr	r3, [r0, #28]
 80135ce:	b143      	cbz	r3, 80135e2 <_reclaim_reent+0x22>
 80135d0:	68db      	ldr	r3, [r3, #12]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d144      	bne.n	8013660 <_reclaim_reent+0xa0>
 80135d6:	69e3      	ldr	r3, [r4, #28]
 80135d8:	6819      	ldr	r1, [r3, #0]
 80135da:	b111      	cbz	r1, 80135e2 <_reclaim_reent+0x22>
 80135dc:	4620      	mov	r0, r4
 80135de:	f000 ff31 	bl	8014444 <_free_r>
 80135e2:	6961      	ldr	r1, [r4, #20]
 80135e4:	b111      	cbz	r1, 80135ec <_reclaim_reent+0x2c>
 80135e6:	4620      	mov	r0, r4
 80135e8:	f000 ff2c 	bl	8014444 <_free_r>
 80135ec:	69e1      	ldr	r1, [r4, #28]
 80135ee:	b111      	cbz	r1, 80135f6 <_reclaim_reent+0x36>
 80135f0:	4620      	mov	r0, r4
 80135f2:	f000 ff27 	bl	8014444 <_free_r>
 80135f6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80135f8:	b111      	cbz	r1, 8013600 <_reclaim_reent+0x40>
 80135fa:	4620      	mov	r0, r4
 80135fc:	f000 ff22 	bl	8014444 <_free_r>
 8013600:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013602:	b111      	cbz	r1, 801360a <_reclaim_reent+0x4a>
 8013604:	4620      	mov	r0, r4
 8013606:	f000 ff1d 	bl	8014444 <_free_r>
 801360a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801360c:	b111      	cbz	r1, 8013614 <_reclaim_reent+0x54>
 801360e:	4620      	mov	r0, r4
 8013610:	f000 ff18 	bl	8014444 <_free_r>
 8013614:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8013616:	b111      	cbz	r1, 801361e <_reclaim_reent+0x5e>
 8013618:	4620      	mov	r0, r4
 801361a:	f000 ff13 	bl	8014444 <_free_r>
 801361e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8013620:	b111      	cbz	r1, 8013628 <_reclaim_reent+0x68>
 8013622:	4620      	mov	r0, r4
 8013624:	f000 ff0e 	bl	8014444 <_free_r>
 8013628:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801362a:	b111      	cbz	r1, 8013632 <_reclaim_reent+0x72>
 801362c:	4620      	mov	r0, r4
 801362e:	f000 ff09 	bl	8014444 <_free_r>
 8013632:	6a23      	ldr	r3, [r4, #32]
 8013634:	b1b3      	cbz	r3, 8013664 <_reclaim_reent+0xa4>
 8013636:	4620      	mov	r0, r4
 8013638:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801363c:	4718      	bx	r3
 801363e:	5949      	ldr	r1, [r1, r5]
 8013640:	b941      	cbnz	r1, 8013654 <_reclaim_reent+0x94>
 8013642:	3504      	adds	r5, #4
 8013644:	69e3      	ldr	r3, [r4, #28]
 8013646:	2d80      	cmp	r5, #128	; 0x80
 8013648:	68d9      	ldr	r1, [r3, #12]
 801364a:	d1f8      	bne.n	801363e <_reclaim_reent+0x7e>
 801364c:	4620      	mov	r0, r4
 801364e:	f000 fef9 	bl	8014444 <_free_r>
 8013652:	e7c0      	b.n	80135d6 <_reclaim_reent+0x16>
 8013654:	680e      	ldr	r6, [r1, #0]
 8013656:	4620      	mov	r0, r4
 8013658:	f000 fef4 	bl	8014444 <_free_r>
 801365c:	4631      	mov	r1, r6
 801365e:	e7ef      	b.n	8013640 <_reclaim_reent+0x80>
 8013660:	2500      	movs	r5, #0
 8013662:	e7ef      	b.n	8013644 <_reclaim_reent+0x84>
 8013664:	bd70      	pop	{r4, r5, r6, pc}
 8013666:	bf00      	nop
 8013668:	20000088 	.word	0x20000088

0801366c <_lseek_r>:
 801366c:	b538      	push	{r3, r4, r5, lr}
 801366e:	4d07      	ldr	r5, [pc, #28]	; (801368c <_lseek_r+0x20>)
 8013670:	4604      	mov	r4, r0
 8013672:	4608      	mov	r0, r1
 8013674:	4611      	mov	r1, r2
 8013676:	2200      	movs	r2, #0
 8013678:	602a      	str	r2, [r5, #0]
 801367a:	461a      	mov	r2, r3
 801367c:	f7f0 fc3c 	bl	8003ef8 <_lseek>
 8013680:	1c43      	adds	r3, r0, #1
 8013682:	d102      	bne.n	801368a <_lseek_r+0x1e>
 8013684:	682b      	ldr	r3, [r5, #0]
 8013686:	b103      	cbz	r3, 801368a <_lseek_r+0x1e>
 8013688:	6023      	str	r3, [r4, #0]
 801368a:	bd38      	pop	{r3, r4, r5, pc}
 801368c:	20006970 	.word	0x20006970

08013690 <_read_r>:
 8013690:	b538      	push	{r3, r4, r5, lr}
 8013692:	4d07      	ldr	r5, [pc, #28]	; (80136b0 <_read_r+0x20>)
 8013694:	4604      	mov	r4, r0
 8013696:	4608      	mov	r0, r1
 8013698:	4611      	mov	r1, r2
 801369a:	2200      	movs	r2, #0
 801369c:	602a      	str	r2, [r5, #0]
 801369e:	461a      	mov	r2, r3
 80136a0:	f7f0 fbe6 	bl	8003e70 <_read>
 80136a4:	1c43      	adds	r3, r0, #1
 80136a6:	d102      	bne.n	80136ae <_read_r+0x1e>
 80136a8:	682b      	ldr	r3, [r5, #0]
 80136aa:	b103      	cbz	r3, 80136ae <_read_r+0x1e>
 80136ac:	6023      	str	r3, [r4, #0]
 80136ae:	bd38      	pop	{r3, r4, r5, pc}
 80136b0:	20006970 	.word	0x20006970

080136b4 <_write_r>:
 80136b4:	b538      	push	{r3, r4, r5, lr}
 80136b6:	4d07      	ldr	r5, [pc, #28]	; (80136d4 <_write_r+0x20>)
 80136b8:	4604      	mov	r4, r0
 80136ba:	4608      	mov	r0, r1
 80136bc:	4611      	mov	r1, r2
 80136be:	2200      	movs	r2, #0
 80136c0:	602a      	str	r2, [r5, #0]
 80136c2:	461a      	mov	r2, r3
 80136c4:	f7ee ff14 	bl	80024f0 <_write>
 80136c8:	1c43      	adds	r3, r0, #1
 80136ca:	d102      	bne.n	80136d2 <_write_r+0x1e>
 80136cc:	682b      	ldr	r3, [r5, #0]
 80136ce:	b103      	cbz	r3, 80136d2 <_write_r+0x1e>
 80136d0:	6023      	str	r3, [r4, #0]
 80136d2:	bd38      	pop	{r3, r4, r5, pc}
 80136d4:	20006970 	.word	0x20006970

080136d8 <__errno>:
 80136d8:	4b01      	ldr	r3, [pc, #4]	; (80136e0 <__errno+0x8>)
 80136da:	6818      	ldr	r0, [r3, #0]
 80136dc:	4770      	bx	lr
 80136de:	bf00      	nop
 80136e0:	20000088 	.word	0x20000088

080136e4 <__libc_init_array>:
 80136e4:	b570      	push	{r4, r5, r6, lr}
 80136e6:	4d0d      	ldr	r5, [pc, #52]	; (801371c <__libc_init_array+0x38>)
 80136e8:	4c0d      	ldr	r4, [pc, #52]	; (8013720 <__libc_init_array+0x3c>)
 80136ea:	1b64      	subs	r4, r4, r5
 80136ec:	10a4      	asrs	r4, r4, #2
 80136ee:	2600      	movs	r6, #0
 80136f0:	42a6      	cmp	r6, r4
 80136f2:	d109      	bne.n	8013708 <__libc_init_array+0x24>
 80136f4:	4d0b      	ldr	r5, [pc, #44]	; (8013724 <__libc_init_array+0x40>)
 80136f6:	4c0c      	ldr	r4, [pc, #48]	; (8013728 <__libc_init_array+0x44>)
 80136f8:	f002 f834 	bl	8015764 <_init>
 80136fc:	1b64      	subs	r4, r4, r5
 80136fe:	10a4      	asrs	r4, r4, #2
 8013700:	2600      	movs	r6, #0
 8013702:	42a6      	cmp	r6, r4
 8013704:	d105      	bne.n	8013712 <__libc_init_array+0x2e>
 8013706:	bd70      	pop	{r4, r5, r6, pc}
 8013708:	f855 3b04 	ldr.w	r3, [r5], #4
 801370c:	4798      	blx	r3
 801370e:	3601      	adds	r6, #1
 8013710:	e7ee      	b.n	80136f0 <__libc_init_array+0xc>
 8013712:	f855 3b04 	ldr.w	r3, [r5], #4
 8013716:	4798      	blx	r3
 8013718:	3601      	adds	r6, #1
 801371a:	e7f2      	b.n	8013702 <__libc_init_array+0x1e>
 801371c:	0801628c 	.word	0x0801628c
 8013720:	0801628c 	.word	0x0801628c
 8013724:	0801628c 	.word	0x0801628c
 8013728:	08016290 	.word	0x08016290

0801372c <__retarget_lock_init_recursive>:
 801372c:	4770      	bx	lr

0801372e <__retarget_lock_acquire_recursive>:
 801372e:	4770      	bx	lr

08013730 <__retarget_lock_release_recursive>:
 8013730:	4770      	bx	lr

08013732 <memcpy>:
 8013732:	440a      	add	r2, r1
 8013734:	4291      	cmp	r1, r2
 8013736:	f100 33ff 	add.w	r3, r0, #4294967295
 801373a:	d100      	bne.n	801373e <memcpy+0xc>
 801373c:	4770      	bx	lr
 801373e:	b510      	push	{r4, lr}
 8013740:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013744:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013748:	4291      	cmp	r1, r2
 801374a:	d1f9      	bne.n	8013740 <memcpy+0xe>
 801374c:	bd10      	pop	{r4, pc}

0801374e <quorem>:
 801374e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013752:	6903      	ldr	r3, [r0, #16]
 8013754:	690c      	ldr	r4, [r1, #16]
 8013756:	42a3      	cmp	r3, r4
 8013758:	4607      	mov	r7, r0
 801375a:	db7e      	blt.n	801385a <quorem+0x10c>
 801375c:	3c01      	subs	r4, #1
 801375e:	f101 0814 	add.w	r8, r1, #20
 8013762:	f100 0514 	add.w	r5, r0, #20
 8013766:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801376a:	9301      	str	r3, [sp, #4]
 801376c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013770:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013774:	3301      	adds	r3, #1
 8013776:	429a      	cmp	r2, r3
 8013778:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801377c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013780:	fbb2 f6f3 	udiv	r6, r2, r3
 8013784:	d331      	bcc.n	80137ea <quorem+0x9c>
 8013786:	f04f 0e00 	mov.w	lr, #0
 801378a:	4640      	mov	r0, r8
 801378c:	46ac      	mov	ip, r5
 801378e:	46f2      	mov	sl, lr
 8013790:	f850 2b04 	ldr.w	r2, [r0], #4
 8013794:	b293      	uxth	r3, r2
 8013796:	fb06 e303 	mla	r3, r6, r3, lr
 801379a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801379e:	0c1a      	lsrs	r2, r3, #16
 80137a0:	b29b      	uxth	r3, r3
 80137a2:	ebaa 0303 	sub.w	r3, sl, r3
 80137a6:	f8dc a000 	ldr.w	sl, [ip]
 80137aa:	fa13 f38a 	uxtah	r3, r3, sl
 80137ae:	fb06 220e 	mla	r2, r6, lr, r2
 80137b2:	9300      	str	r3, [sp, #0]
 80137b4:	9b00      	ldr	r3, [sp, #0]
 80137b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80137ba:	b292      	uxth	r2, r2
 80137bc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80137c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80137c4:	f8bd 3000 	ldrh.w	r3, [sp]
 80137c8:	4581      	cmp	r9, r0
 80137ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80137ce:	f84c 3b04 	str.w	r3, [ip], #4
 80137d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80137d6:	d2db      	bcs.n	8013790 <quorem+0x42>
 80137d8:	f855 300b 	ldr.w	r3, [r5, fp]
 80137dc:	b92b      	cbnz	r3, 80137ea <quorem+0x9c>
 80137de:	9b01      	ldr	r3, [sp, #4]
 80137e0:	3b04      	subs	r3, #4
 80137e2:	429d      	cmp	r5, r3
 80137e4:	461a      	mov	r2, r3
 80137e6:	d32c      	bcc.n	8013842 <quorem+0xf4>
 80137e8:	613c      	str	r4, [r7, #16]
 80137ea:	4638      	mov	r0, r7
 80137ec:	f001 f9a6 	bl	8014b3c <__mcmp>
 80137f0:	2800      	cmp	r0, #0
 80137f2:	db22      	blt.n	801383a <quorem+0xec>
 80137f4:	3601      	adds	r6, #1
 80137f6:	4629      	mov	r1, r5
 80137f8:	2000      	movs	r0, #0
 80137fa:	f858 2b04 	ldr.w	r2, [r8], #4
 80137fe:	f8d1 c000 	ldr.w	ip, [r1]
 8013802:	b293      	uxth	r3, r2
 8013804:	1ac3      	subs	r3, r0, r3
 8013806:	0c12      	lsrs	r2, r2, #16
 8013808:	fa13 f38c 	uxtah	r3, r3, ip
 801380c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8013810:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013814:	b29b      	uxth	r3, r3
 8013816:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801381a:	45c1      	cmp	r9, r8
 801381c:	f841 3b04 	str.w	r3, [r1], #4
 8013820:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013824:	d2e9      	bcs.n	80137fa <quorem+0xac>
 8013826:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801382a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801382e:	b922      	cbnz	r2, 801383a <quorem+0xec>
 8013830:	3b04      	subs	r3, #4
 8013832:	429d      	cmp	r5, r3
 8013834:	461a      	mov	r2, r3
 8013836:	d30a      	bcc.n	801384e <quorem+0x100>
 8013838:	613c      	str	r4, [r7, #16]
 801383a:	4630      	mov	r0, r6
 801383c:	b003      	add	sp, #12
 801383e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013842:	6812      	ldr	r2, [r2, #0]
 8013844:	3b04      	subs	r3, #4
 8013846:	2a00      	cmp	r2, #0
 8013848:	d1ce      	bne.n	80137e8 <quorem+0x9a>
 801384a:	3c01      	subs	r4, #1
 801384c:	e7c9      	b.n	80137e2 <quorem+0x94>
 801384e:	6812      	ldr	r2, [r2, #0]
 8013850:	3b04      	subs	r3, #4
 8013852:	2a00      	cmp	r2, #0
 8013854:	d1f0      	bne.n	8013838 <quorem+0xea>
 8013856:	3c01      	subs	r4, #1
 8013858:	e7eb      	b.n	8013832 <quorem+0xe4>
 801385a:	2000      	movs	r0, #0
 801385c:	e7ee      	b.n	801383c <quorem+0xee>
	...

08013860 <_dtoa_r>:
 8013860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013864:	ed2d 8b04 	vpush	{d8-d9}
 8013868:	69c5      	ldr	r5, [r0, #28]
 801386a:	b093      	sub	sp, #76	; 0x4c
 801386c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013870:	ec57 6b10 	vmov	r6, r7, d0
 8013874:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013878:	9107      	str	r1, [sp, #28]
 801387a:	4604      	mov	r4, r0
 801387c:	920a      	str	r2, [sp, #40]	; 0x28
 801387e:	930d      	str	r3, [sp, #52]	; 0x34
 8013880:	b975      	cbnz	r5, 80138a0 <_dtoa_r+0x40>
 8013882:	2010      	movs	r0, #16
 8013884:	f000 fe2a 	bl	80144dc <malloc>
 8013888:	4602      	mov	r2, r0
 801388a:	61e0      	str	r0, [r4, #28]
 801388c:	b920      	cbnz	r0, 8013898 <_dtoa_r+0x38>
 801388e:	4bae      	ldr	r3, [pc, #696]	; (8013b48 <_dtoa_r+0x2e8>)
 8013890:	21ef      	movs	r1, #239	; 0xef
 8013892:	48ae      	ldr	r0, [pc, #696]	; (8013b4c <_dtoa_r+0x2ec>)
 8013894:	f001 fe7e 	bl	8015594 <__assert_func>
 8013898:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801389c:	6005      	str	r5, [r0, #0]
 801389e:	60c5      	str	r5, [r0, #12]
 80138a0:	69e3      	ldr	r3, [r4, #28]
 80138a2:	6819      	ldr	r1, [r3, #0]
 80138a4:	b151      	cbz	r1, 80138bc <_dtoa_r+0x5c>
 80138a6:	685a      	ldr	r2, [r3, #4]
 80138a8:	604a      	str	r2, [r1, #4]
 80138aa:	2301      	movs	r3, #1
 80138ac:	4093      	lsls	r3, r2
 80138ae:	608b      	str	r3, [r1, #8]
 80138b0:	4620      	mov	r0, r4
 80138b2:	f000 ff07 	bl	80146c4 <_Bfree>
 80138b6:	69e3      	ldr	r3, [r4, #28]
 80138b8:	2200      	movs	r2, #0
 80138ba:	601a      	str	r2, [r3, #0]
 80138bc:	1e3b      	subs	r3, r7, #0
 80138be:	bfbb      	ittet	lt
 80138c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80138c4:	9303      	strlt	r3, [sp, #12]
 80138c6:	2300      	movge	r3, #0
 80138c8:	2201      	movlt	r2, #1
 80138ca:	bfac      	ite	ge
 80138cc:	f8c8 3000 	strge.w	r3, [r8]
 80138d0:	f8c8 2000 	strlt.w	r2, [r8]
 80138d4:	4b9e      	ldr	r3, [pc, #632]	; (8013b50 <_dtoa_r+0x2f0>)
 80138d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80138da:	ea33 0308 	bics.w	r3, r3, r8
 80138de:	d11b      	bne.n	8013918 <_dtoa_r+0xb8>
 80138e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80138e2:	f242 730f 	movw	r3, #9999	; 0x270f
 80138e6:	6013      	str	r3, [r2, #0]
 80138e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80138ec:	4333      	orrs	r3, r6
 80138ee:	f000 8593 	beq.w	8014418 <_dtoa_r+0xbb8>
 80138f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80138f4:	b963      	cbnz	r3, 8013910 <_dtoa_r+0xb0>
 80138f6:	4b97      	ldr	r3, [pc, #604]	; (8013b54 <_dtoa_r+0x2f4>)
 80138f8:	e027      	b.n	801394a <_dtoa_r+0xea>
 80138fa:	4b97      	ldr	r3, [pc, #604]	; (8013b58 <_dtoa_r+0x2f8>)
 80138fc:	9300      	str	r3, [sp, #0]
 80138fe:	3308      	adds	r3, #8
 8013900:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013902:	6013      	str	r3, [r2, #0]
 8013904:	9800      	ldr	r0, [sp, #0]
 8013906:	b013      	add	sp, #76	; 0x4c
 8013908:	ecbd 8b04 	vpop	{d8-d9}
 801390c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013910:	4b90      	ldr	r3, [pc, #576]	; (8013b54 <_dtoa_r+0x2f4>)
 8013912:	9300      	str	r3, [sp, #0]
 8013914:	3303      	adds	r3, #3
 8013916:	e7f3      	b.n	8013900 <_dtoa_r+0xa0>
 8013918:	ed9d 7b02 	vldr	d7, [sp, #8]
 801391c:	2200      	movs	r2, #0
 801391e:	ec51 0b17 	vmov	r0, r1, d7
 8013922:	eeb0 8a47 	vmov.f32	s16, s14
 8013926:	eef0 8a67 	vmov.f32	s17, s15
 801392a:	2300      	movs	r3, #0
 801392c:	f7ed f8ec 	bl	8000b08 <__aeabi_dcmpeq>
 8013930:	4681      	mov	r9, r0
 8013932:	b160      	cbz	r0, 801394e <_dtoa_r+0xee>
 8013934:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013936:	2301      	movs	r3, #1
 8013938:	6013      	str	r3, [r2, #0]
 801393a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801393c:	2b00      	cmp	r3, #0
 801393e:	f000 8568 	beq.w	8014412 <_dtoa_r+0xbb2>
 8013942:	4b86      	ldr	r3, [pc, #536]	; (8013b5c <_dtoa_r+0x2fc>)
 8013944:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013946:	6013      	str	r3, [r2, #0]
 8013948:	3b01      	subs	r3, #1
 801394a:	9300      	str	r3, [sp, #0]
 801394c:	e7da      	b.n	8013904 <_dtoa_r+0xa4>
 801394e:	aa10      	add	r2, sp, #64	; 0x40
 8013950:	a911      	add	r1, sp, #68	; 0x44
 8013952:	4620      	mov	r0, r4
 8013954:	eeb0 0a48 	vmov.f32	s0, s16
 8013958:	eef0 0a68 	vmov.f32	s1, s17
 801395c:	f001 f994 	bl	8014c88 <__d2b>
 8013960:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8013964:	4682      	mov	sl, r0
 8013966:	2d00      	cmp	r5, #0
 8013968:	d07f      	beq.n	8013a6a <_dtoa_r+0x20a>
 801396a:	ee18 3a90 	vmov	r3, s17
 801396e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013972:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8013976:	ec51 0b18 	vmov	r0, r1, d8
 801397a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801397e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013982:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8013986:	4619      	mov	r1, r3
 8013988:	2200      	movs	r2, #0
 801398a:	4b75      	ldr	r3, [pc, #468]	; (8013b60 <_dtoa_r+0x300>)
 801398c:	f7ec fc9c 	bl	80002c8 <__aeabi_dsub>
 8013990:	a367      	add	r3, pc, #412	; (adr r3, 8013b30 <_dtoa_r+0x2d0>)
 8013992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013996:	f7ec fe4f 	bl	8000638 <__aeabi_dmul>
 801399a:	a367      	add	r3, pc, #412	; (adr r3, 8013b38 <_dtoa_r+0x2d8>)
 801399c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139a0:	f7ec fc94 	bl	80002cc <__adddf3>
 80139a4:	4606      	mov	r6, r0
 80139a6:	4628      	mov	r0, r5
 80139a8:	460f      	mov	r7, r1
 80139aa:	f7ec fddb 	bl	8000564 <__aeabi_i2d>
 80139ae:	a364      	add	r3, pc, #400	; (adr r3, 8013b40 <_dtoa_r+0x2e0>)
 80139b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139b4:	f7ec fe40 	bl	8000638 <__aeabi_dmul>
 80139b8:	4602      	mov	r2, r0
 80139ba:	460b      	mov	r3, r1
 80139bc:	4630      	mov	r0, r6
 80139be:	4639      	mov	r1, r7
 80139c0:	f7ec fc84 	bl	80002cc <__adddf3>
 80139c4:	4606      	mov	r6, r0
 80139c6:	460f      	mov	r7, r1
 80139c8:	f7ed f8e6 	bl	8000b98 <__aeabi_d2iz>
 80139cc:	2200      	movs	r2, #0
 80139ce:	4683      	mov	fp, r0
 80139d0:	2300      	movs	r3, #0
 80139d2:	4630      	mov	r0, r6
 80139d4:	4639      	mov	r1, r7
 80139d6:	f7ed f8a1 	bl	8000b1c <__aeabi_dcmplt>
 80139da:	b148      	cbz	r0, 80139f0 <_dtoa_r+0x190>
 80139dc:	4658      	mov	r0, fp
 80139de:	f7ec fdc1 	bl	8000564 <__aeabi_i2d>
 80139e2:	4632      	mov	r2, r6
 80139e4:	463b      	mov	r3, r7
 80139e6:	f7ed f88f 	bl	8000b08 <__aeabi_dcmpeq>
 80139ea:	b908      	cbnz	r0, 80139f0 <_dtoa_r+0x190>
 80139ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80139f0:	f1bb 0f16 	cmp.w	fp, #22
 80139f4:	d857      	bhi.n	8013aa6 <_dtoa_r+0x246>
 80139f6:	4b5b      	ldr	r3, [pc, #364]	; (8013b64 <_dtoa_r+0x304>)
 80139f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80139fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a00:	ec51 0b18 	vmov	r0, r1, d8
 8013a04:	f7ed f88a 	bl	8000b1c <__aeabi_dcmplt>
 8013a08:	2800      	cmp	r0, #0
 8013a0a:	d04e      	beq.n	8013aaa <_dtoa_r+0x24a>
 8013a0c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013a10:	2300      	movs	r3, #0
 8013a12:	930c      	str	r3, [sp, #48]	; 0x30
 8013a14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013a16:	1b5b      	subs	r3, r3, r5
 8013a18:	1e5a      	subs	r2, r3, #1
 8013a1a:	bf45      	ittet	mi
 8013a1c:	f1c3 0301 	rsbmi	r3, r3, #1
 8013a20:	9305      	strmi	r3, [sp, #20]
 8013a22:	2300      	movpl	r3, #0
 8013a24:	2300      	movmi	r3, #0
 8013a26:	9206      	str	r2, [sp, #24]
 8013a28:	bf54      	ite	pl
 8013a2a:	9305      	strpl	r3, [sp, #20]
 8013a2c:	9306      	strmi	r3, [sp, #24]
 8013a2e:	f1bb 0f00 	cmp.w	fp, #0
 8013a32:	db3c      	blt.n	8013aae <_dtoa_r+0x24e>
 8013a34:	9b06      	ldr	r3, [sp, #24]
 8013a36:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8013a3a:	445b      	add	r3, fp
 8013a3c:	9306      	str	r3, [sp, #24]
 8013a3e:	2300      	movs	r3, #0
 8013a40:	9308      	str	r3, [sp, #32]
 8013a42:	9b07      	ldr	r3, [sp, #28]
 8013a44:	2b09      	cmp	r3, #9
 8013a46:	d868      	bhi.n	8013b1a <_dtoa_r+0x2ba>
 8013a48:	2b05      	cmp	r3, #5
 8013a4a:	bfc4      	itt	gt
 8013a4c:	3b04      	subgt	r3, #4
 8013a4e:	9307      	strgt	r3, [sp, #28]
 8013a50:	9b07      	ldr	r3, [sp, #28]
 8013a52:	f1a3 0302 	sub.w	r3, r3, #2
 8013a56:	bfcc      	ite	gt
 8013a58:	2500      	movgt	r5, #0
 8013a5a:	2501      	movle	r5, #1
 8013a5c:	2b03      	cmp	r3, #3
 8013a5e:	f200 8085 	bhi.w	8013b6c <_dtoa_r+0x30c>
 8013a62:	e8df f003 	tbb	[pc, r3]
 8013a66:	3b2e      	.short	0x3b2e
 8013a68:	5839      	.short	0x5839
 8013a6a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8013a6e:	441d      	add	r5, r3
 8013a70:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8013a74:	2b20      	cmp	r3, #32
 8013a76:	bfc1      	itttt	gt
 8013a78:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013a7c:	fa08 f803 	lslgt.w	r8, r8, r3
 8013a80:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8013a84:	fa26 f303 	lsrgt.w	r3, r6, r3
 8013a88:	bfd6      	itet	le
 8013a8a:	f1c3 0320 	rsble	r3, r3, #32
 8013a8e:	ea48 0003 	orrgt.w	r0, r8, r3
 8013a92:	fa06 f003 	lslle.w	r0, r6, r3
 8013a96:	f7ec fd55 	bl	8000544 <__aeabi_ui2d>
 8013a9a:	2201      	movs	r2, #1
 8013a9c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8013aa0:	3d01      	subs	r5, #1
 8013aa2:	920e      	str	r2, [sp, #56]	; 0x38
 8013aa4:	e76f      	b.n	8013986 <_dtoa_r+0x126>
 8013aa6:	2301      	movs	r3, #1
 8013aa8:	e7b3      	b.n	8013a12 <_dtoa_r+0x1b2>
 8013aaa:	900c      	str	r0, [sp, #48]	; 0x30
 8013aac:	e7b2      	b.n	8013a14 <_dtoa_r+0x1b4>
 8013aae:	9b05      	ldr	r3, [sp, #20]
 8013ab0:	eba3 030b 	sub.w	r3, r3, fp
 8013ab4:	9305      	str	r3, [sp, #20]
 8013ab6:	f1cb 0300 	rsb	r3, fp, #0
 8013aba:	9308      	str	r3, [sp, #32]
 8013abc:	2300      	movs	r3, #0
 8013abe:	930b      	str	r3, [sp, #44]	; 0x2c
 8013ac0:	e7bf      	b.n	8013a42 <_dtoa_r+0x1e2>
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	9309      	str	r3, [sp, #36]	; 0x24
 8013ac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	dc52      	bgt.n	8013b72 <_dtoa_r+0x312>
 8013acc:	2301      	movs	r3, #1
 8013ace:	9301      	str	r3, [sp, #4]
 8013ad0:	9304      	str	r3, [sp, #16]
 8013ad2:	461a      	mov	r2, r3
 8013ad4:	920a      	str	r2, [sp, #40]	; 0x28
 8013ad6:	e00b      	b.n	8013af0 <_dtoa_r+0x290>
 8013ad8:	2301      	movs	r3, #1
 8013ada:	e7f3      	b.n	8013ac4 <_dtoa_r+0x264>
 8013adc:	2300      	movs	r3, #0
 8013ade:	9309      	str	r3, [sp, #36]	; 0x24
 8013ae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ae2:	445b      	add	r3, fp
 8013ae4:	9301      	str	r3, [sp, #4]
 8013ae6:	3301      	adds	r3, #1
 8013ae8:	2b01      	cmp	r3, #1
 8013aea:	9304      	str	r3, [sp, #16]
 8013aec:	bfb8      	it	lt
 8013aee:	2301      	movlt	r3, #1
 8013af0:	69e0      	ldr	r0, [r4, #28]
 8013af2:	2100      	movs	r1, #0
 8013af4:	2204      	movs	r2, #4
 8013af6:	f102 0614 	add.w	r6, r2, #20
 8013afa:	429e      	cmp	r6, r3
 8013afc:	d93d      	bls.n	8013b7a <_dtoa_r+0x31a>
 8013afe:	6041      	str	r1, [r0, #4]
 8013b00:	4620      	mov	r0, r4
 8013b02:	f000 fd9f 	bl	8014644 <_Balloc>
 8013b06:	9000      	str	r0, [sp, #0]
 8013b08:	2800      	cmp	r0, #0
 8013b0a:	d139      	bne.n	8013b80 <_dtoa_r+0x320>
 8013b0c:	4b16      	ldr	r3, [pc, #88]	; (8013b68 <_dtoa_r+0x308>)
 8013b0e:	4602      	mov	r2, r0
 8013b10:	f240 11af 	movw	r1, #431	; 0x1af
 8013b14:	e6bd      	b.n	8013892 <_dtoa_r+0x32>
 8013b16:	2301      	movs	r3, #1
 8013b18:	e7e1      	b.n	8013ade <_dtoa_r+0x27e>
 8013b1a:	2501      	movs	r5, #1
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	9307      	str	r3, [sp, #28]
 8013b20:	9509      	str	r5, [sp, #36]	; 0x24
 8013b22:	f04f 33ff 	mov.w	r3, #4294967295
 8013b26:	9301      	str	r3, [sp, #4]
 8013b28:	9304      	str	r3, [sp, #16]
 8013b2a:	2200      	movs	r2, #0
 8013b2c:	2312      	movs	r3, #18
 8013b2e:	e7d1      	b.n	8013ad4 <_dtoa_r+0x274>
 8013b30:	636f4361 	.word	0x636f4361
 8013b34:	3fd287a7 	.word	0x3fd287a7
 8013b38:	8b60c8b3 	.word	0x8b60c8b3
 8013b3c:	3fc68a28 	.word	0x3fc68a28
 8013b40:	509f79fb 	.word	0x509f79fb
 8013b44:	3fd34413 	.word	0x3fd34413
 8013b48:	08015f55 	.word	0x08015f55
 8013b4c:	08015f6c 	.word	0x08015f6c
 8013b50:	7ff00000 	.word	0x7ff00000
 8013b54:	08015f51 	.word	0x08015f51
 8013b58:	08015f48 	.word	0x08015f48
 8013b5c:	08015f25 	.word	0x08015f25
 8013b60:	3ff80000 	.word	0x3ff80000
 8013b64:	08016058 	.word	0x08016058
 8013b68:	08015fc4 	.word	0x08015fc4
 8013b6c:	2301      	movs	r3, #1
 8013b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8013b70:	e7d7      	b.n	8013b22 <_dtoa_r+0x2c2>
 8013b72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b74:	9301      	str	r3, [sp, #4]
 8013b76:	9304      	str	r3, [sp, #16]
 8013b78:	e7ba      	b.n	8013af0 <_dtoa_r+0x290>
 8013b7a:	3101      	adds	r1, #1
 8013b7c:	0052      	lsls	r2, r2, #1
 8013b7e:	e7ba      	b.n	8013af6 <_dtoa_r+0x296>
 8013b80:	69e3      	ldr	r3, [r4, #28]
 8013b82:	9a00      	ldr	r2, [sp, #0]
 8013b84:	601a      	str	r2, [r3, #0]
 8013b86:	9b04      	ldr	r3, [sp, #16]
 8013b88:	2b0e      	cmp	r3, #14
 8013b8a:	f200 80a8 	bhi.w	8013cde <_dtoa_r+0x47e>
 8013b8e:	2d00      	cmp	r5, #0
 8013b90:	f000 80a5 	beq.w	8013cde <_dtoa_r+0x47e>
 8013b94:	f1bb 0f00 	cmp.w	fp, #0
 8013b98:	dd38      	ble.n	8013c0c <_dtoa_r+0x3ac>
 8013b9a:	4bc0      	ldr	r3, [pc, #768]	; (8013e9c <_dtoa_r+0x63c>)
 8013b9c:	f00b 020f 	and.w	r2, fp, #15
 8013ba0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013ba4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8013ba8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8013bac:	ea4f 182b 	mov.w	r8, fp, asr #4
 8013bb0:	d019      	beq.n	8013be6 <_dtoa_r+0x386>
 8013bb2:	4bbb      	ldr	r3, [pc, #748]	; (8013ea0 <_dtoa_r+0x640>)
 8013bb4:	ec51 0b18 	vmov	r0, r1, d8
 8013bb8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013bbc:	f7ec fe66 	bl	800088c <__aeabi_ddiv>
 8013bc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013bc4:	f008 080f 	and.w	r8, r8, #15
 8013bc8:	2503      	movs	r5, #3
 8013bca:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8013ea0 <_dtoa_r+0x640>
 8013bce:	f1b8 0f00 	cmp.w	r8, #0
 8013bd2:	d10a      	bne.n	8013bea <_dtoa_r+0x38a>
 8013bd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013bd8:	4632      	mov	r2, r6
 8013bda:	463b      	mov	r3, r7
 8013bdc:	f7ec fe56 	bl	800088c <__aeabi_ddiv>
 8013be0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013be4:	e02b      	b.n	8013c3e <_dtoa_r+0x3de>
 8013be6:	2502      	movs	r5, #2
 8013be8:	e7ef      	b.n	8013bca <_dtoa_r+0x36a>
 8013bea:	f018 0f01 	tst.w	r8, #1
 8013bee:	d008      	beq.n	8013c02 <_dtoa_r+0x3a2>
 8013bf0:	4630      	mov	r0, r6
 8013bf2:	4639      	mov	r1, r7
 8013bf4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8013bf8:	f7ec fd1e 	bl	8000638 <__aeabi_dmul>
 8013bfc:	3501      	adds	r5, #1
 8013bfe:	4606      	mov	r6, r0
 8013c00:	460f      	mov	r7, r1
 8013c02:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013c06:	f109 0908 	add.w	r9, r9, #8
 8013c0a:	e7e0      	b.n	8013bce <_dtoa_r+0x36e>
 8013c0c:	f000 809f 	beq.w	8013d4e <_dtoa_r+0x4ee>
 8013c10:	f1cb 0600 	rsb	r6, fp, #0
 8013c14:	4ba1      	ldr	r3, [pc, #644]	; (8013e9c <_dtoa_r+0x63c>)
 8013c16:	4fa2      	ldr	r7, [pc, #648]	; (8013ea0 <_dtoa_r+0x640>)
 8013c18:	f006 020f 	and.w	r2, r6, #15
 8013c1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c24:	ec51 0b18 	vmov	r0, r1, d8
 8013c28:	f7ec fd06 	bl	8000638 <__aeabi_dmul>
 8013c2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013c30:	1136      	asrs	r6, r6, #4
 8013c32:	2300      	movs	r3, #0
 8013c34:	2502      	movs	r5, #2
 8013c36:	2e00      	cmp	r6, #0
 8013c38:	d17e      	bne.n	8013d38 <_dtoa_r+0x4d8>
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d1d0      	bne.n	8013be0 <_dtoa_r+0x380>
 8013c3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c40:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	f000 8084 	beq.w	8013d52 <_dtoa_r+0x4f2>
 8013c4a:	4b96      	ldr	r3, [pc, #600]	; (8013ea4 <_dtoa_r+0x644>)
 8013c4c:	2200      	movs	r2, #0
 8013c4e:	4640      	mov	r0, r8
 8013c50:	4649      	mov	r1, r9
 8013c52:	f7ec ff63 	bl	8000b1c <__aeabi_dcmplt>
 8013c56:	2800      	cmp	r0, #0
 8013c58:	d07b      	beq.n	8013d52 <_dtoa_r+0x4f2>
 8013c5a:	9b04      	ldr	r3, [sp, #16]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d078      	beq.n	8013d52 <_dtoa_r+0x4f2>
 8013c60:	9b01      	ldr	r3, [sp, #4]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	dd39      	ble.n	8013cda <_dtoa_r+0x47a>
 8013c66:	4b90      	ldr	r3, [pc, #576]	; (8013ea8 <_dtoa_r+0x648>)
 8013c68:	2200      	movs	r2, #0
 8013c6a:	4640      	mov	r0, r8
 8013c6c:	4649      	mov	r1, r9
 8013c6e:	f7ec fce3 	bl	8000638 <__aeabi_dmul>
 8013c72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013c76:	9e01      	ldr	r6, [sp, #4]
 8013c78:	f10b 37ff 	add.w	r7, fp, #4294967295
 8013c7c:	3501      	adds	r5, #1
 8013c7e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8013c82:	4628      	mov	r0, r5
 8013c84:	f7ec fc6e 	bl	8000564 <__aeabi_i2d>
 8013c88:	4642      	mov	r2, r8
 8013c8a:	464b      	mov	r3, r9
 8013c8c:	f7ec fcd4 	bl	8000638 <__aeabi_dmul>
 8013c90:	4b86      	ldr	r3, [pc, #536]	; (8013eac <_dtoa_r+0x64c>)
 8013c92:	2200      	movs	r2, #0
 8013c94:	f7ec fb1a 	bl	80002cc <__adddf3>
 8013c98:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8013c9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013ca0:	9303      	str	r3, [sp, #12]
 8013ca2:	2e00      	cmp	r6, #0
 8013ca4:	d158      	bne.n	8013d58 <_dtoa_r+0x4f8>
 8013ca6:	4b82      	ldr	r3, [pc, #520]	; (8013eb0 <_dtoa_r+0x650>)
 8013ca8:	2200      	movs	r2, #0
 8013caa:	4640      	mov	r0, r8
 8013cac:	4649      	mov	r1, r9
 8013cae:	f7ec fb0b 	bl	80002c8 <__aeabi_dsub>
 8013cb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013cb6:	4680      	mov	r8, r0
 8013cb8:	4689      	mov	r9, r1
 8013cba:	f7ec ff4d 	bl	8000b58 <__aeabi_dcmpgt>
 8013cbe:	2800      	cmp	r0, #0
 8013cc0:	f040 8296 	bne.w	80141f0 <_dtoa_r+0x990>
 8013cc4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013cc8:	4640      	mov	r0, r8
 8013cca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013cce:	4649      	mov	r1, r9
 8013cd0:	f7ec ff24 	bl	8000b1c <__aeabi_dcmplt>
 8013cd4:	2800      	cmp	r0, #0
 8013cd6:	f040 8289 	bne.w	80141ec <_dtoa_r+0x98c>
 8013cda:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013cde:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	f2c0 814e 	blt.w	8013f82 <_dtoa_r+0x722>
 8013ce6:	f1bb 0f0e 	cmp.w	fp, #14
 8013cea:	f300 814a 	bgt.w	8013f82 <_dtoa_r+0x722>
 8013cee:	4b6b      	ldr	r3, [pc, #428]	; (8013e9c <_dtoa_r+0x63c>)
 8013cf0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013cf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	f280 80dc 	bge.w	8013eb8 <_dtoa_r+0x658>
 8013d00:	9b04      	ldr	r3, [sp, #16]
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	f300 80d8 	bgt.w	8013eb8 <_dtoa_r+0x658>
 8013d08:	f040 826f 	bne.w	80141ea <_dtoa_r+0x98a>
 8013d0c:	4b68      	ldr	r3, [pc, #416]	; (8013eb0 <_dtoa_r+0x650>)
 8013d0e:	2200      	movs	r2, #0
 8013d10:	4640      	mov	r0, r8
 8013d12:	4649      	mov	r1, r9
 8013d14:	f7ec fc90 	bl	8000638 <__aeabi_dmul>
 8013d18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013d1c:	f7ec ff12 	bl	8000b44 <__aeabi_dcmpge>
 8013d20:	9e04      	ldr	r6, [sp, #16]
 8013d22:	4637      	mov	r7, r6
 8013d24:	2800      	cmp	r0, #0
 8013d26:	f040 8245 	bne.w	80141b4 <_dtoa_r+0x954>
 8013d2a:	9d00      	ldr	r5, [sp, #0]
 8013d2c:	2331      	movs	r3, #49	; 0x31
 8013d2e:	f805 3b01 	strb.w	r3, [r5], #1
 8013d32:	f10b 0b01 	add.w	fp, fp, #1
 8013d36:	e241      	b.n	80141bc <_dtoa_r+0x95c>
 8013d38:	07f2      	lsls	r2, r6, #31
 8013d3a:	d505      	bpl.n	8013d48 <_dtoa_r+0x4e8>
 8013d3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013d40:	f7ec fc7a 	bl	8000638 <__aeabi_dmul>
 8013d44:	3501      	adds	r5, #1
 8013d46:	2301      	movs	r3, #1
 8013d48:	1076      	asrs	r6, r6, #1
 8013d4a:	3708      	adds	r7, #8
 8013d4c:	e773      	b.n	8013c36 <_dtoa_r+0x3d6>
 8013d4e:	2502      	movs	r5, #2
 8013d50:	e775      	b.n	8013c3e <_dtoa_r+0x3de>
 8013d52:	9e04      	ldr	r6, [sp, #16]
 8013d54:	465f      	mov	r7, fp
 8013d56:	e792      	b.n	8013c7e <_dtoa_r+0x41e>
 8013d58:	9900      	ldr	r1, [sp, #0]
 8013d5a:	4b50      	ldr	r3, [pc, #320]	; (8013e9c <_dtoa_r+0x63c>)
 8013d5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013d60:	4431      	add	r1, r6
 8013d62:	9102      	str	r1, [sp, #8]
 8013d64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013d66:	eeb0 9a47 	vmov.f32	s18, s14
 8013d6a:	eef0 9a67 	vmov.f32	s19, s15
 8013d6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8013d72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013d76:	2900      	cmp	r1, #0
 8013d78:	d044      	beq.n	8013e04 <_dtoa_r+0x5a4>
 8013d7a:	494e      	ldr	r1, [pc, #312]	; (8013eb4 <_dtoa_r+0x654>)
 8013d7c:	2000      	movs	r0, #0
 8013d7e:	f7ec fd85 	bl	800088c <__aeabi_ddiv>
 8013d82:	ec53 2b19 	vmov	r2, r3, d9
 8013d86:	f7ec fa9f 	bl	80002c8 <__aeabi_dsub>
 8013d8a:	9d00      	ldr	r5, [sp, #0]
 8013d8c:	ec41 0b19 	vmov	d9, r0, r1
 8013d90:	4649      	mov	r1, r9
 8013d92:	4640      	mov	r0, r8
 8013d94:	f7ec ff00 	bl	8000b98 <__aeabi_d2iz>
 8013d98:	4606      	mov	r6, r0
 8013d9a:	f7ec fbe3 	bl	8000564 <__aeabi_i2d>
 8013d9e:	4602      	mov	r2, r0
 8013da0:	460b      	mov	r3, r1
 8013da2:	4640      	mov	r0, r8
 8013da4:	4649      	mov	r1, r9
 8013da6:	f7ec fa8f 	bl	80002c8 <__aeabi_dsub>
 8013daa:	3630      	adds	r6, #48	; 0x30
 8013dac:	f805 6b01 	strb.w	r6, [r5], #1
 8013db0:	ec53 2b19 	vmov	r2, r3, d9
 8013db4:	4680      	mov	r8, r0
 8013db6:	4689      	mov	r9, r1
 8013db8:	f7ec feb0 	bl	8000b1c <__aeabi_dcmplt>
 8013dbc:	2800      	cmp	r0, #0
 8013dbe:	d164      	bne.n	8013e8a <_dtoa_r+0x62a>
 8013dc0:	4642      	mov	r2, r8
 8013dc2:	464b      	mov	r3, r9
 8013dc4:	4937      	ldr	r1, [pc, #220]	; (8013ea4 <_dtoa_r+0x644>)
 8013dc6:	2000      	movs	r0, #0
 8013dc8:	f7ec fa7e 	bl	80002c8 <__aeabi_dsub>
 8013dcc:	ec53 2b19 	vmov	r2, r3, d9
 8013dd0:	f7ec fea4 	bl	8000b1c <__aeabi_dcmplt>
 8013dd4:	2800      	cmp	r0, #0
 8013dd6:	f040 80b6 	bne.w	8013f46 <_dtoa_r+0x6e6>
 8013dda:	9b02      	ldr	r3, [sp, #8]
 8013ddc:	429d      	cmp	r5, r3
 8013dde:	f43f af7c 	beq.w	8013cda <_dtoa_r+0x47a>
 8013de2:	4b31      	ldr	r3, [pc, #196]	; (8013ea8 <_dtoa_r+0x648>)
 8013de4:	ec51 0b19 	vmov	r0, r1, d9
 8013de8:	2200      	movs	r2, #0
 8013dea:	f7ec fc25 	bl	8000638 <__aeabi_dmul>
 8013dee:	4b2e      	ldr	r3, [pc, #184]	; (8013ea8 <_dtoa_r+0x648>)
 8013df0:	ec41 0b19 	vmov	d9, r0, r1
 8013df4:	2200      	movs	r2, #0
 8013df6:	4640      	mov	r0, r8
 8013df8:	4649      	mov	r1, r9
 8013dfa:	f7ec fc1d 	bl	8000638 <__aeabi_dmul>
 8013dfe:	4680      	mov	r8, r0
 8013e00:	4689      	mov	r9, r1
 8013e02:	e7c5      	b.n	8013d90 <_dtoa_r+0x530>
 8013e04:	ec51 0b17 	vmov	r0, r1, d7
 8013e08:	f7ec fc16 	bl	8000638 <__aeabi_dmul>
 8013e0c:	9b02      	ldr	r3, [sp, #8]
 8013e0e:	9d00      	ldr	r5, [sp, #0]
 8013e10:	930f      	str	r3, [sp, #60]	; 0x3c
 8013e12:	ec41 0b19 	vmov	d9, r0, r1
 8013e16:	4649      	mov	r1, r9
 8013e18:	4640      	mov	r0, r8
 8013e1a:	f7ec febd 	bl	8000b98 <__aeabi_d2iz>
 8013e1e:	4606      	mov	r6, r0
 8013e20:	f7ec fba0 	bl	8000564 <__aeabi_i2d>
 8013e24:	3630      	adds	r6, #48	; 0x30
 8013e26:	4602      	mov	r2, r0
 8013e28:	460b      	mov	r3, r1
 8013e2a:	4640      	mov	r0, r8
 8013e2c:	4649      	mov	r1, r9
 8013e2e:	f7ec fa4b 	bl	80002c8 <__aeabi_dsub>
 8013e32:	f805 6b01 	strb.w	r6, [r5], #1
 8013e36:	9b02      	ldr	r3, [sp, #8]
 8013e38:	429d      	cmp	r5, r3
 8013e3a:	4680      	mov	r8, r0
 8013e3c:	4689      	mov	r9, r1
 8013e3e:	f04f 0200 	mov.w	r2, #0
 8013e42:	d124      	bne.n	8013e8e <_dtoa_r+0x62e>
 8013e44:	4b1b      	ldr	r3, [pc, #108]	; (8013eb4 <_dtoa_r+0x654>)
 8013e46:	ec51 0b19 	vmov	r0, r1, d9
 8013e4a:	f7ec fa3f 	bl	80002cc <__adddf3>
 8013e4e:	4602      	mov	r2, r0
 8013e50:	460b      	mov	r3, r1
 8013e52:	4640      	mov	r0, r8
 8013e54:	4649      	mov	r1, r9
 8013e56:	f7ec fe7f 	bl	8000b58 <__aeabi_dcmpgt>
 8013e5a:	2800      	cmp	r0, #0
 8013e5c:	d173      	bne.n	8013f46 <_dtoa_r+0x6e6>
 8013e5e:	ec53 2b19 	vmov	r2, r3, d9
 8013e62:	4914      	ldr	r1, [pc, #80]	; (8013eb4 <_dtoa_r+0x654>)
 8013e64:	2000      	movs	r0, #0
 8013e66:	f7ec fa2f 	bl	80002c8 <__aeabi_dsub>
 8013e6a:	4602      	mov	r2, r0
 8013e6c:	460b      	mov	r3, r1
 8013e6e:	4640      	mov	r0, r8
 8013e70:	4649      	mov	r1, r9
 8013e72:	f7ec fe53 	bl	8000b1c <__aeabi_dcmplt>
 8013e76:	2800      	cmp	r0, #0
 8013e78:	f43f af2f 	beq.w	8013cda <_dtoa_r+0x47a>
 8013e7c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8013e7e:	1e6b      	subs	r3, r5, #1
 8013e80:	930f      	str	r3, [sp, #60]	; 0x3c
 8013e82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013e86:	2b30      	cmp	r3, #48	; 0x30
 8013e88:	d0f8      	beq.n	8013e7c <_dtoa_r+0x61c>
 8013e8a:	46bb      	mov	fp, r7
 8013e8c:	e04a      	b.n	8013f24 <_dtoa_r+0x6c4>
 8013e8e:	4b06      	ldr	r3, [pc, #24]	; (8013ea8 <_dtoa_r+0x648>)
 8013e90:	f7ec fbd2 	bl	8000638 <__aeabi_dmul>
 8013e94:	4680      	mov	r8, r0
 8013e96:	4689      	mov	r9, r1
 8013e98:	e7bd      	b.n	8013e16 <_dtoa_r+0x5b6>
 8013e9a:	bf00      	nop
 8013e9c:	08016058 	.word	0x08016058
 8013ea0:	08016030 	.word	0x08016030
 8013ea4:	3ff00000 	.word	0x3ff00000
 8013ea8:	40240000 	.word	0x40240000
 8013eac:	401c0000 	.word	0x401c0000
 8013eb0:	40140000 	.word	0x40140000
 8013eb4:	3fe00000 	.word	0x3fe00000
 8013eb8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013ebc:	9d00      	ldr	r5, [sp, #0]
 8013ebe:	4642      	mov	r2, r8
 8013ec0:	464b      	mov	r3, r9
 8013ec2:	4630      	mov	r0, r6
 8013ec4:	4639      	mov	r1, r7
 8013ec6:	f7ec fce1 	bl	800088c <__aeabi_ddiv>
 8013eca:	f7ec fe65 	bl	8000b98 <__aeabi_d2iz>
 8013ece:	9001      	str	r0, [sp, #4]
 8013ed0:	f7ec fb48 	bl	8000564 <__aeabi_i2d>
 8013ed4:	4642      	mov	r2, r8
 8013ed6:	464b      	mov	r3, r9
 8013ed8:	f7ec fbae 	bl	8000638 <__aeabi_dmul>
 8013edc:	4602      	mov	r2, r0
 8013ede:	460b      	mov	r3, r1
 8013ee0:	4630      	mov	r0, r6
 8013ee2:	4639      	mov	r1, r7
 8013ee4:	f7ec f9f0 	bl	80002c8 <__aeabi_dsub>
 8013ee8:	9e01      	ldr	r6, [sp, #4]
 8013eea:	9f04      	ldr	r7, [sp, #16]
 8013eec:	3630      	adds	r6, #48	; 0x30
 8013eee:	f805 6b01 	strb.w	r6, [r5], #1
 8013ef2:	9e00      	ldr	r6, [sp, #0]
 8013ef4:	1bae      	subs	r6, r5, r6
 8013ef6:	42b7      	cmp	r7, r6
 8013ef8:	4602      	mov	r2, r0
 8013efa:	460b      	mov	r3, r1
 8013efc:	d134      	bne.n	8013f68 <_dtoa_r+0x708>
 8013efe:	f7ec f9e5 	bl	80002cc <__adddf3>
 8013f02:	4642      	mov	r2, r8
 8013f04:	464b      	mov	r3, r9
 8013f06:	4606      	mov	r6, r0
 8013f08:	460f      	mov	r7, r1
 8013f0a:	f7ec fe25 	bl	8000b58 <__aeabi_dcmpgt>
 8013f0e:	b9c8      	cbnz	r0, 8013f44 <_dtoa_r+0x6e4>
 8013f10:	4642      	mov	r2, r8
 8013f12:	464b      	mov	r3, r9
 8013f14:	4630      	mov	r0, r6
 8013f16:	4639      	mov	r1, r7
 8013f18:	f7ec fdf6 	bl	8000b08 <__aeabi_dcmpeq>
 8013f1c:	b110      	cbz	r0, 8013f24 <_dtoa_r+0x6c4>
 8013f1e:	9b01      	ldr	r3, [sp, #4]
 8013f20:	07db      	lsls	r3, r3, #31
 8013f22:	d40f      	bmi.n	8013f44 <_dtoa_r+0x6e4>
 8013f24:	4651      	mov	r1, sl
 8013f26:	4620      	mov	r0, r4
 8013f28:	f000 fbcc 	bl	80146c4 <_Bfree>
 8013f2c:	2300      	movs	r3, #0
 8013f2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013f30:	702b      	strb	r3, [r5, #0]
 8013f32:	f10b 0301 	add.w	r3, fp, #1
 8013f36:	6013      	str	r3, [r2, #0]
 8013f38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	f43f ace2 	beq.w	8013904 <_dtoa_r+0xa4>
 8013f40:	601d      	str	r5, [r3, #0]
 8013f42:	e4df      	b.n	8013904 <_dtoa_r+0xa4>
 8013f44:	465f      	mov	r7, fp
 8013f46:	462b      	mov	r3, r5
 8013f48:	461d      	mov	r5, r3
 8013f4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013f4e:	2a39      	cmp	r2, #57	; 0x39
 8013f50:	d106      	bne.n	8013f60 <_dtoa_r+0x700>
 8013f52:	9a00      	ldr	r2, [sp, #0]
 8013f54:	429a      	cmp	r2, r3
 8013f56:	d1f7      	bne.n	8013f48 <_dtoa_r+0x6e8>
 8013f58:	9900      	ldr	r1, [sp, #0]
 8013f5a:	2230      	movs	r2, #48	; 0x30
 8013f5c:	3701      	adds	r7, #1
 8013f5e:	700a      	strb	r2, [r1, #0]
 8013f60:	781a      	ldrb	r2, [r3, #0]
 8013f62:	3201      	adds	r2, #1
 8013f64:	701a      	strb	r2, [r3, #0]
 8013f66:	e790      	b.n	8013e8a <_dtoa_r+0x62a>
 8013f68:	4ba3      	ldr	r3, [pc, #652]	; (80141f8 <_dtoa_r+0x998>)
 8013f6a:	2200      	movs	r2, #0
 8013f6c:	f7ec fb64 	bl	8000638 <__aeabi_dmul>
 8013f70:	2200      	movs	r2, #0
 8013f72:	2300      	movs	r3, #0
 8013f74:	4606      	mov	r6, r0
 8013f76:	460f      	mov	r7, r1
 8013f78:	f7ec fdc6 	bl	8000b08 <__aeabi_dcmpeq>
 8013f7c:	2800      	cmp	r0, #0
 8013f7e:	d09e      	beq.n	8013ebe <_dtoa_r+0x65e>
 8013f80:	e7d0      	b.n	8013f24 <_dtoa_r+0x6c4>
 8013f82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013f84:	2a00      	cmp	r2, #0
 8013f86:	f000 80ca 	beq.w	801411e <_dtoa_r+0x8be>
 8013f8a:	9a07      	ldr	r2, [sp, #28]
 8013f8c:	2a01      	cmp	r2, #1
 8013f8e:	f300 80ad 	bgt.w	80140ec <_dtoa_r+0x88c>
 8013f92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013f94:	2a00      	cmp	r2, #0
 8013f96:	f000 80a5 	beq.w	80140e4 <_dtoa_r+0x884>
 8013f9a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013f9e:	9e08      	ldr	r6, [sp, #32]
 8013fa0:	9d05      	ldr	r5, [sp, #20]
 8013fa2:	9a05      	ldr	r2, [sp, #20]
 8013fa4:	441a      	add	r2, r3
 8013fa6:	9205      	str	r2, [sp, #20]
 8013fa8:	9a06      	ldr	r2, [sp, #24]
 8013faa:	2101      	movs	r1, #1
 8013fac:	441a      	add	r2, r3
 8013fae:	4620      	mov	r0, r4
 8013fb0:	9206      	str	r2, [sp, #24]
 8013fb2:	f000 fc3d 	bl	8014830 <__i2b>
 8013fb6:	4607      	mov	r7, r0
 8013fb8:	b165      	cbz	r5, 8013fd4 <_dtoa_r+0x774>
 8013fba:	9b06      	ldr	r3, [sp, #24]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	dd09      	ble.n	8013fd4 <_dtoa_r+0x774>
 8013fc0:	42ab      	cmp	r3, r5
 8013fc2:	9a05      	ldr	r2, [sp, #20]
 8013fc4:	bfa8      	it	ge
 8013fc6:	462b      	movge	r3, r5
 8013fc8:	1ad2      	subs	r2, r2, r3
 8013fca:	9205      	str	r2, [sp, #20]
 8013fcc:	9a06      	ldr	r2, [sp, #24]
 8013fce:	1aed      	subs	r5, r5, r3
 8013fd0:	1ad3      	subs	r3, r2, r3
 8013fd2:	9306      	str	r3, [sp, #24]
 8013fd4:	9b08      	ldr	r3, [sp, #32]
 8013fd6:	b1f3      	cbz	r3, 8014016 <_dtoa_r+0x7b6>
 8013fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	f000 80a3 	beq.w	8014126 <_dtoa_r+0x8c6>
 8013fe0:	2e00      	cmp	r6, #0
 8013fe2:	dd10      	ble.n	8014006 <_dtoa_r+0x7a6>
 8013fe4:	4639      	mov	r1, r7
 8013fe6:	4632      	mov	r2, r6
 8013fe8:	4620      	mov	r0, r4
 8013fea:	f000 fce1 	bl	80149b0 <__pow5mult>
 8013fee:	4652      	mov	r2, sl
 8013ff0:	4601      	mov	r1, r0
 8013ff2:	4607      	mov	r7, r0
 8013ff4:	4620      	mov	r0, r4
 8013ff6:	f000 fc31 	bl	801485c <__multiply>
 8013ffa:	4651      	mov	r1, sl
 8013ffc:	4680      	mov	r8, r0
 8013ffe:	4620      	mov	r0, r4
 8014000:	f000 fb60 	bl	80146c4 <_Bfree>
 8014004:	46c2      	mov	sl, r8
 8014006:	9b08      	ldr	r3, [sp, #32]
 8014008:	1b9a      	subs	r2, r3, r6
 801400a:	d004      	beq.n	8014016 <_dtoa_r+0x7b6>
 801400c:	4651      	mov	r1, sl
 801400e:	4620      	mov	r0, r4
 8014010:	f000 fcce 	bl	80149b0 <__pow5mult>
 8014014:	4682      	mov	sl, r0
 8014016:	2101      	movs	r1, #1
 8014018:	4620      	mov	r0, r4
 801401a:	f000 fc09 	bl	8014830 <__i2b>
 801401e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014020:	2b00      	cmp	r3, #0
 8014022:	4606      	mov	r6, r0
 8014024:	f340 8081 	ble.w	801412a <_dtoa_r+0x8ca>
 8014028:	461a      	mov	r2, r3
 801402a:	4601      	mov	r1, r0
 801402c:	4620      	mov	r0, r4
 801402e:	f000 fcbf 	bl	80149b0 <__pow5mult>
 8014032:	9b07      	ldr	r3, [sp, #28]
 8014034:	2b01      	cmp	r3, #1
 8014036:	4606      	mov	r6, r0
 8014038:	dd7a      	ble.n	8014130 <_dtoa_r+0x8d0>
 801403a:	f04f 0800 	mov.w	r8, #0
 801403e:	6933      	ldr	r3, [r6, #16]
 8014040:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014044:	6918      	ldr	r0, [r3, #16]
 8014046:	f000 fba5 	bl	8014794 <__hi0bits>
 801404a:	f1c0 0020 	rsb	r0, r0, #32
 801404e:	9b06      	ldr	r3, [sp, #24]
 8014050:	4418      	add	r0, r3
 8014052:	f010 001f 	ands.w	r0, r0, #31
 8014056:	f000 8094 	beq.w	8014182 <_dtoa_r+0x922>
 801405a:	f1c0 0320 	rsb	r3, r0, #32
 801405e:	2b04      	cmp	r3, #4
 8014060:	f340 8085 	ble.w	801416e <_dtoa_r+0x90e>
 8014064:	9b05      	ldr	r3, [sp, #20]
 8014066:	f1c0 001c 	rsb	r0, r0, #28
 801406a:	4403      	add	r3, r0
 801406c:	9305      	str	r3, [sp, #20]
 801406e:	9b06      	ldr	r3, [sp, #24]
 8014070:	4403      	add	r3, r0
 8014072:	4405      	add	r5, r0
 8014074:	9306      	str	r3, [sp, #24]
 8014076:	9b05      	ldr	r3, [sp, #20]
 8014078:	2b00      	cmp	r3, #0
 801407a:	dd05      	ble.n	8014088 <_dtoa_r+0x828>
 801407c:	4651      	mov	r1, sl
 801407e:	461a      	mov	r2, r3
 8014080:	4620      	mov	r0, r4
 8014082:	f000 fcef 	bl	8014a64 <__lshift>
 8014086:	4682      	mov	sl, r0
 8014088:	9b06      	ldr	r3, [sp, #24]
 801408a:	2b00      	cmp	r3, #0
 801408c:	dd05      	ble.n	801409a <_dtoa_r+0x83a>
 801408e:	4631      	mov	r1, r6
 8014090:	461a      	mov	r2, r3
 8014092:	4620      	mov	r0, r4
 8014094:	f000 fce6 	bl	8014a64 <__lshift>
 8014098:	4606      	mov	r6, r0
 801409a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801409c:	2b00      	cmp	r3, #0
 801409e:	d072      	beq.n	8014186 <_dtoa_r+0x926>
 80140a0:	4631      	mov	r1, r6
 80140a2:	4650      	mov	r0, sl
 80140a4:	f000 fd4a 	bl	8014b3c <__mcmp>
 80140a8:	2800      	cmp	r0, #0
 80140aa:	da6c      	bge.n	8014186 <_dtoa_r+0x926>
 80140ac:	2300      	movs	r3, #0
 80140ae:	4651      	mov	r1, sl
 80140b0:	220a      	movs	r2, #10
 80140b2:	4620      	mov	r0, r4
 80140b4:	f000 fb28 	bl	8014708 <__multadd>
 80140b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 80140be:	4682      	mov	sl, r0
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	f000 81b0 	beq.w	8014426 <_dtoa_r+0xbc6>
 80140c6:	2300      	movs	r3, #0
 80140c8:	4639      	mov	r1, r7
 80140ca:	220a      	movs	r2, #10
 80140cc:	4620      	mov	r0, r4
 80140ce:	f000 fb1b 	bl	8014708 <__multadd>
 80140d2:	9b01      	ldr	r3, [sp, #4]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	4607      	mov	r7, r0
 80140d8:	f300 8096 	bgt.w	8014208 <_dtoa_r+0x9a8>
 80140dc:	9b07      	ldr	r3, [sp, #28]
 80140de:	2b02      	cmp	r3, #2
 80140e0:	dc59      	bgt.n	8014196 <_dtoa_r+0x936>
 80140e2:	e091      	b.n	8014208 <_dtoa_r+0x9a8>
 80140e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80140e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80140ea:	e758      	b.n	8013f9e <_dtoa_r+0x73e>
 80140ec:	9b04      	ldr	r3, [sp, #16]
 80140ee:	1e5e      	subs	r6, r3, #1
 80140f0:	9b08      	ldr	r3, [sp, #32]
 80140f2:	42b3      	cmp	r3, r6
 80140f4:	bfbf      	itttt	lt
 80140f6:	9b08      	ldrlt	r3, [sp, #32]
 80140f8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80140fa:	9608      	strlt	r6, [sp, #32]
 80140fc:	1af3      	sublt	r3, r6, r3
 80140fe:	bfb4      	ite	lt
 8014100:	18d2      	addlt	r2, r2, r3
 8014102:	1b9e      	subge	r6, r3, r6
 8014104:	9b04      	ldr	r3, [sp, #16]
 8014106:	bfbc      	itt	lt
 8014108:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801410a:	2600      	movlt	r6, #0
 801410c:	2b00      	cmp	r3, #0
 801410e:	bfb7      	itett	lt
 8014110:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8014114:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8014118:	1a9d      	sublt	r5, r3, r2
 801411a:	2300      	movlt	r3, #0
 801411c:	e741      	b.n	8013fa2 <_dtoa_r+0x742>
 801411e:	9e08      	ldr	r6, [sp, #32]
 8014120:	9d05      	ldr	r5, [sp, #20]
 8014122:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014124:	e748      	b.n	8013fb8 <_dtoa_r+0x758>
 8014126:	9a08      	ldr	r2, [sp, #32]
 8014128:	e770      	b.n	801400c <_dtoa_r+0x7ac>
 801412a:	9b07      	ldr	r3, [sp, #28]
 801412c:	2b01      	cmp	r3, #1
 801412e:	dc19      	bgt.n	8014164 <_dtoa_r+0x904>
 8014130:	9b02      	ldr	r3, [sp, #8]
 8014132:	b9bb      	cbnz	r3, 8014164 <_dtoa_r+0x904>
 8014134:	9b03      	ldr	r3, [sp, #12]
 8014136:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801413a:	b99b      	cbnz	r3, 8014164 <_dtoa_r+0x904>
 801413c:	9b03      	ldr	r3, [sp, #12]
 801413e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014142:	0d1b      	lsrs	r3, r3, #20
 8014144:	051b      	lsls	r3, r3, #20
 8014146:	b183      	cbz	r3, 801416a <_dtoa_r+0x90a>
 8014148:	9b05      	ldr	r3, [sp, #20]
 801414a:	3301      	adds	r3, #1
 801414c:	9305      	str	r3, [sp, #20]
 801414e:	9b06      	ldr	r3, [sp, #24]
 8014150:	3301      	adds	r3, #1
 8014152:	9306      	str	r3, [sp, #24]
 8014154:	f04f 0801 	mov.w	r8, #1
 8014158:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801415a:	2b00      	cmp	r3, #0
 801415c:	f47f af6f 	bne.w	801403e <_dtoa_r+0x7de>
 8014160:	2001      	movs	r0, #1
 8014162:	e774      	b.n	801404e <_dtoa_r+0x7ee>
 8014164:	f04f 0800 	mov.w	r8, #0
 8014168:	e7f6      	b.n	8014158 <_dtoa_r+0x8f8>
 801416a:	4698      	mov	r8, r3
 801416c:	e7f4      	b.n	8014158 <_dtoa_r+0x8f8>
 801416e:	d082      	beq.n	8014076 <_dtoa_r+0x816>
 8014170:	9a05      	ldr	r2, [sp, #20]
 8014172:	331c      	adds	r3, #28
 8014174:	441a      	add	r2, r3
 8014176:	9205      	str	r2, [sp, #20]
 8014178:	9a06      	ldr	r2, [sp, #24]
 801417a:	441a      	add	r2, r3
 801417c:	441d      	add	r5, r3
 801417e:	9206      	str	r2, [sp, #24]
 8014180:	e779      	b.n	8014076 <_dtoa_r+0x816>
 8014182:	4603      	mov	r3, r0
 8014184:	e7f4      	b.n	8014170 <_dtoa_r+0x910>
 8014186:	9b04      	ldr	r3, [sp, #16]
 8014188:	2b00      	cmp	r3, #0
 801418a:	dc37      	bgt.n	80141fc <_dtoa_r+0x99c>
 801418c:	9b07      	ldr	r3, [sp, #28]
 801418e:	2b02      	cmp	r3, #2
 8014190:	dd34      	ble.n	80141fc <_dtoa_r+0x99c>
 8014192:	9b04      	ldr	r3, [sp, #16]
 8014194:	9301      	str	r3, [sp, #4]
 8014196:	9b01      	ldr	r3, [sp, #4]
 8014198:	b963      	cbnz	r3, 80141b4 <_dtoa_r+0x954>
 801419a:	4631      	mov	r1, r6
 801419c:	2205      	movs	r2, #5
 801419e:	4620      	mov	r0, r4
 80141a0:	f000 fab2 	bl	8014708 <__multadd>
 80141a4:	4601      	mov	r1, r0
 80141a6:	4606      	mov	r6, r0
 80141a8:	4650      	mov	r0, sl
 80141aa:	f000 fcc7 	bl	8014b3c <__mcmp>
 80141ae:	2800      	cmp	r0, #0
 80141b0:	f73f adbb 	bgt.w	8013d2a <_dtoa_r+0x4ca>
 80141b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80141b6:	9d00      	ldr	r5, [sp, #0]
 80141b8:	ea6f 0b03 	mvn.w	fp, r3
 80141bc:	f04f 0800 	mov.w	r8, #0
 80141c0:	4631      	mov	r1, r6
 80141c2:	4620      	mov	r0, r4
 80141c4:	f000 fa7e 	bl	80146c4 <_Bfree>
 80141c8:	2f00      	cmp	r7, #0
 80141ca:	f43f aeab 	beq.w	8013f24 <_dtoa_r+0x6c4>
 80141ce:	f1b8 0f00 	cmp.w	r8, #0
 80141d2:	d005      	beq.n	80141e0 <_dtoa_r+0x980>
 80141d4:	45b8      	cmp	r8, r7
 80141d6:	d003      	beq.n	80141e0 <_dtoa_r+0x980>
 80141d8:	4641      	mov	r1, r8
 80141da:	4620      	mov	r0, r4
 80141dc:	f000 fa72 	bl	80146c4 <_Bfree>
 80141e0:	4639      	mov	r1, r7
 80141e2:	4620      	mov	r0, r4
 80141e4:	f000 fa6e 	bl	80146c4 <_Bfree>
 80141e8:	e69c      	b.n	8013f24 <_dtoa_r+0x6c4>
 80141ea:	2600      	movs	r6, #0
 80141ec:	4637      	mov	r7, r6
 80141ee:	e7e1      	b.n	80141b4 <_dtoa_r+0x954>
 80141f0:	46bb      	mov	fp, r7
 80141f2:	4637      	mov	r7, r6
 80141f4:	e599      	b.n	8013d2a <_dtoa_r+0x4ca>
 80141f6:	bf00      	nop
 80141f8:	40240000 	.word	0x40240000
 80141fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141fe:	2b00      	cmp	r3, #0
 8014200:	f000 80c8 	beq.w	8014394 <_dtoa_r+0xb34>
 8014204:	9b04      	ldr	r3, [sp, #16]
 8014206:	9301      	str	r3, [sp, #4]
 8014208:	2d00      	cmp	r5, #0
 801420a:	dd05      	ble.n	8014218 <_dtoa_r+0x9b8>
 801420c:	4639      	mov	r1, r7
 801420e:	462a      	mov	r2, r5
 8014210:	4620      	mov	r0, r4
 8014212:	f000 fc27 	bl	8014a64 <__lshift>
 8014216:	4607      	mov	r7, r0
 8014218:	f1b8 0f00 	cmp.w	r8, #0
 801421c:	d05b      	beq.n	80142d6 <_dtoa_r+0xa76>
 801421e:	6879      	ldr	r1, [r7, #4]
 8014220:	4620      	mov	r0, r4
 8014222:	f000 fa0f 	bl	8014644 <_Balloc>
 8014226:	4605      	mov	r5, r0
 8014228:	b928      	cbnz	r0, 8014236 <_dtoa_r+0x9d6>
 801422a:	4b83      	ldr	r3, [pc, #524]	; (8014438 <_dtoa_r+0xbd8>)
 801422c:	4602      	mov	r2, r0
 801422e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8014232:	f7ff bb2e 	b.w	8013892 <_dtoa_r+0x32>
 8014236:	693a      	ldr	r2, [r7, #16]
 8014238:	3202      	adds	r2, #2
 801423a:	0092      	lsls	r2, r2, #2
 801423c:	f107 010c 	add.w	r1, r7, #12
 8014240:	300c      	adds	r0, #12
 8014242:	f7ff fa76 	bl	8013732 <memcpy>
 8014246:	2201      	movs	r2, #1
 8014248:	4629      	mov	r1, r5
 801424a:	4620      	mov	r0, r4
 801424c:	f000 fc0a 	bl	8014a64 <__lshift>
 8014250:	9b00      	ldr	r3, [sp, #0]
 8014252:	3301      	adds	r3, #1
 8014254:	9304      	str	r3, [sp, #16]
 8014256:	e9dd 2300 	ldrd	r2, r3, [sp]
 801425a:	4413      	add	r3, r2
 801425c:	9308      	str	r3, [sp, #32]
 801425e:	9b02      	ldr	r3, [sp, #8]
 8014260:	f003 0301 	and.w	r3, r3, #1
 8014264:	46b8      	mov	r8, r7
 8014266:	9306      	str	r3, [sp, #24]
 8014268:	4607      	mov	r7, r0
 801426a:	9b04      	ldr	r3, [sp, #16]
 801426c:	4631      	mov	r1, r6
 801426e:	3b01      	subs	r3, #1
 8014270:	4650      	mov	r0, sl
 8014272:	9301      	str	r3, [sp, #4]
 8014274:	f7ff fa6b 	bl	801374e <quorem>
 8014278:	4641      	mov	r1, r8
 801427a:	9002      	str	r0, [sp, #8]
 801427c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8014280:	4650      	mov	r0, sl
 8014282:	f000 fc5b 	bl	8014b3c <__mcmp>
 8014286:	463a      	mov	r2, r7
 8014288:	9005      	str	r0, [sp, #20]
 801428a:	4631      	mov	r1, r6
 801428c:	4620      	mov	r0, r4
 801428e:	f000 fc71 	bl	8014b74 <__mdiff>
 8014292:	68c2      	ldr	r2, [r0, #12]
 8014294:	4605      	mov	r5, r0
 8014296:	bb02      	cbnz	r2, 80142da <_dtoa_r+0xa7a>
 8014298:	4601      	mov	r1, r0
 801429a:	4650      	mov	r0, sl
 801429c:	f000 fc4e 	bl	8014b3c <__mcmp>
 80142a0:	4602      	mov	r2, r0
 80142a2:	4629      	mov	r1, r5
 80142a4:	4620      	mov	r0, r4
 80142a6:	9209      	str	r2, [sp, #36]	; 0x24
 80142a8:	f000 fa0c 	bl	80146c4 <_Bfree>
 80142ac:	9b07      	ldr	r3, [sp, #28]
 80142ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80142b0:	9d04      	ldr	r5, [sp, #16]
 80142b2:	ea43 0102 	orr.w	r1, r3, r2
 80142b6:	9b06      	ldr	r3, [sp, #24]
 80142b8:	4319      	orrs	r1, r3
 80142ba:	d110      	bne.n	80142de <_dtoa_r+0xa7e>
 80142bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80142c0:	d029      	beq.n	8014316 <_dtoa_r+0xab6>
 80142c2:	9b05      	ldr	r3, [sp, #20]
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	dd02      	ble.n	80142ce <_dtoa_r+0xa6e>
 80142c8:	9b02      	ldr	r3, [sp, #8]
 80142ca:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80142ce:	9b01      	ldr	r3, [sp, #4]
 80142d0:	f883 9000 	strb.w	r9, [r3]
 80142d4:	e774      	b.n	80141c0 <_dtoa_r+0x960>
 80142d6:	4638      	mov	r0, r7
 80142d8:	e7ba      	b.n	8014250 <_dtoa_r+0x9f0>
 80142da:	2201      	movs	r2, #1
 80142dc:	e7e1      	b.n	80142a2 <_dtoa_r+0xa42>
 80142de:	9b05      	ldr	r3, [sp, #20]
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	db04      	blt.n	80142ee <_dtoa_r+0xa8e>
 80142e4:	9907      	ldr	r1, [sp, #28]
 80142e6:	430b      	orrs	r3, r1
 80142e8:	9906      	ldr	r1, [sp, #24]
 80142ea:	430b      	orrs	r3, r1
 80142ec:	d120      	bne.n	8014330 <_dtoa_r+0xad0>
 80142ee:	2a00      	cmp	r2, #0
 80142f0:	dded      	ble.n	80142ce <_dtoa_r+0xa6e>
 80142f2:	4651      	mov	r1, sl
 80142f4:	2201      	movs	r2, #1
 80142f6:	4620      	mov	r0, r4
 80142f8:	f000 fbb4 	bl	8014a64 <__lshift>
 80142fc:	4631      	mov	r1, r6
 80142fe:	4682      	mov	sl, r0
 8014300:	f000 fc1c 	bl	8014b3c <__mcmp>
 8014304:	2800      	cmp	r0, #0
 8014306:	dc03      	bgt.n	8014310 <_dtoa_r+0xab0>
 8014308:	d1e1      	bne.n	80142ce <_dtoa_r+0xa6e>
 801430a:	f019 0f01 	tst.w	r9, #1
 801430e:	d0de      	beq.n	80142ce <_dtoa_r+0xa6e>
 8014310:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8014314:	d1d8      	bne.n	80142c8 <_dtoa_r+0xa68>
 8014316:	9a01      	ldr	r2, [sp, #4]
 8014318:	2339      	movs	r3, #57	; 0x39
 801431a:	7013      	strb	r3, [r2, #0]
 801431c:	462b      	mov	r3, r5
 801431e:	461d      	mov	r5, r3
 8014320:	3b01      	subs	r3, #1
 8014322:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014326:	2a39      	cmp	r2, #57	; 0x39
 8014328:	d06c      	beq.n	8014404 <_dtoa_r+0xba4>
 801432a:	3201      	adds	r2, #1
 801432c:	701a      	strb	r2, [r3, #0]
 801432e:	e747      	b.n	80141c0 <_dtoa_r+0x960>
 8014330:	2a00      	cmp	r2, #0
 8014332:	dd07      	ble.n	8014344 <_dtoa_r+0xae4>
 8014334:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8014338:	d0ed      	beq.n	8014316 <_dtoa_r+0xab6>
 801433a:	9a01      	ldr	r2, [sp, #4]
 801433c:	f109 0301 	add.w	r3, r9, #1
 8014340:	7013      	strb	r3, [r2, #0]
 8014342:	e73d      	b.n	80141c0 <_dtoa_r+0x960>
 8014344:	9b04      	ldr	r3, [sp, #16]
 8014346:	9a08      	ldr	r2, [sp, #32]
 8014348:	f803 9c01 	strb.w	r9, [r3, #-1]
 801434c:	4293      	cmp	r3, r2
 801434e:	d043      	beq.n	80143d8 <_dtoa_r+0xb78>
 8014350:	4651      	mov	r1, sl
 8014352:	2300      	movs	r3, #0
 8014354:	220a      	movs	r2, #10
 8014356:	4620      	mov	r0, r4
 8014358:	f000 f9d6 	bl	8014708 <__multadd>
 801435c:	45b8      	cmp	r8, r7
 801435e:	4682      	mov	sl, r0
 8014360:	f04f 0300 	mov.w	r3, #0
 8014364:	f04f 020a 	mov.w	r2, #10
 8014368:	4641      	mov	r1, r8
 801436a:	4620      	mov	r0, r4
 801436c:	d107      	bne.n	801437e <_dtoa_r+0xb1e>
 801436e:	f000 f9cb 	bl	8014708 <__multadd>
 8014372:	4680      	mov	r8, r0
 8014374:	4607      	mov	r7, r0
 8014376:	9b04      	ldr	r3, [sp, #16]
 8014378:	3301      	adds	r3, #1
 801437a:	9304      	str	r3, [sp, #16]
 801437c:	e775      	b.n	801426a <_dtoa_r+0xa0a>
 801437e:	f000 f9c3 	bl	8014708 <__multadd>
 8014382:	4639      	mov	r1, r7
 8014384:	4680      	mov	r8, r0
 8014386:	2300      	movs	r3, #0
 8014388:	220a      	movs	r2, #10
 801438a:	4620      	mov	r0, r4
 801438c:	f000 f9bc 	bl	8014708 <__multadd>
 8014390:	4607      	mov	r7, r0
 8014392:	e7f0      	b.n	8014376 <_dtoa_r+0xb16>
 8014394:	9b04      	ldr	r3, [sp, #16]
 8014396:	9301      	str	r3, [sp, #4]
 8014398:	9d00      	ldr	r5, [sp, #0]
 801439a:	4631      	mov	r1, r6
 801439c:	4650      	mov	r0, sl
 801439e:	f7ff f9d6 	bl	801374e <quorem>
 80143a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80143a6:	9b00      	ldr	r3, [sp, #0]
 80143a8:	f805 9b01 	strb.w	r9, [r5], #1
 80143ac:	1aea      	subs	r2, r5, r3
 80143ae:	9b01      	ldr	r3, [sp, #4]
 80143b0:	4293      	cmp	r3, r2
 80143b2:	dd07      	ble.n	80143c4 <_dtoa_r+0xb64>
 80143b4:	4651      	mov	r1, sl
 80143b6:	2300      	movs	r3, #0
 80143b8:	220a      	movs	r2, #10
 80143ba:	4620      	mov	r0, r4
 80143bc:	f000 f9a4 	bl	8014708 <__multadd>
 80143c0:	4682      	mov	sl, r0
 80143c2:	e7ea      	b.n	801439a <_dtoa_r+0xb3a>
 80143c4:	9b01      	ldr	r3, [sp, #4]
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	bfc8      	it	gt
 80143ca:	461d      	movgt	r5, r3
 80143cc:	9b00      	ldr	r3, [sp, #0]
 80143ce:	bfd8      	it	le
 80143d0:	2501      	movle	r5, #1
 80143d2:	441d      	add	r5, r3
 80143d4:	f04f 0800 	mov.w	r8, #0
 80143d8:	4651      	mov	r1, sl
 80143da:	2201      	movs	r2, #1
 80143dc:	4620      	mov	r0, r4
 80143de:	f000 fb41 	bl	8014a64 <__lshift>
 80143e2:	4631      	mov	r1, r6
 80143e4:	4682      	mov	sl, r0
 80143e6:	f000 fba9 	bl	8014b3c <__mcmp>
 80143ea:	2800      	cmp	r0, #0
 80143ec:	dc96      	bgt.n	801431c <_dtoa_r+0xabc>
 80143ee:	d102      	bne.n	80143f6 <_dtoa_r+0xb96>
 80143f0:	f019 0f01 	tst.w	r9, #1
 80143f4:	d192      	bne.n	801431c <_dtoa_r+0xabc>
 80143f6:	462b      	mov	r3, r5
 80143f8:	461d      	mov	r5, r3
 80143fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80143fe:	2a30      	cmp	r2, #48	; 0x30
 8014400:	d0fa      	beq.n	80143f8 <_dtoa_r+0xb98>
 8014402:	e6dd      	b.n	80141c0 <_dtoa_r+0x960>
 8014404:	9a00      	ldr	r2, [sp, #0]
 8014406:	429a      	cmp	r2, r3
 8014408:	d189      	bne.n	801431e <_dtoa_r+0xabe>
 801440a:	f10b 0b01 	add.w	fp, fp, #1
 801440e:	2331      	movs	r3, #49	; 0x31
 8014410:	e796      	b.n	8014340 <_dtoa_r+0xae0>
 8014412:	4b0a      	ldr	r3, [pc, #40]	; (801443c <_dtoa_r+0xbdc>)
 8014414:	f7ff ba99 	b.w	801394a <_dtoa_r+0xea>
 8014418:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801441a:	2b00      	cmp	r3, #0
 801441c:	f47f aa6d 	bne.w	80138fa <_dtoa_r+0x9a>
 8014420:	4b07      	ldr	r3, [pc, #28]	; (8014440 <_dtoa_r+0xbe0>)
 8014422:	f7ff ba92 	b.w	801394a <_dtoa_r+0xea>
 8014426:	9b01      	ldr	r3, [sp, #4]
 8014428:	2b00      	cmp	r3, #0
 801442a:	dcb5      	bgt.n	8014398 <_dtoa_r+0xb38>
 801442c:	9b07      	ldr	r3, [sp, #28]
 801442e:	2b02      	cmp	r3, #2
 8014430:	f73f aeb1 	bgt.w	8014196 <_dtoa_r+0x936>
 8014434:	e7b0      	b.n	8014398 <_dtoa_r+0xb38>
 8014436:	bf00      	nop
 8014438:	08015fc4 	.word	0x08015fc4
 801443c:	08015f24 	.word	0x08015f24
 8014440:	08015f48 	.word	0x08015f48

08014444 <_free_r>:
 8014444:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014446:	2900      	cmp	r1, #0
 8014448:	d044      	beq.n	80144d4 <_free_r+0x90>
 801444a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801444e:	9001      	str	r0, [sp, #4]
 8014450:	2b00      	cmp	r3, #0
 8014452:	f1a1 0404 	sub.w	r4, r1, #4
 8014456:	bfb8      	it	lt
 8014458:	18e4      	addlt	r4, r4, r3
 801445a:	f000 f8e7 	bl	801462c <__malloc_lock>
 801445e:	4a1e      	ldr	r2, [pc, #120]	; (80144d8 <_free_r+0x94>)
 8014460:	9801      	ldr	r0, [sp, #4]
 8014462:	6813      	ldr	r3, [r2, #0]
 8014464:	b933      	cbnz	r3, 8014474 <_free_r+0x30>
 8014466:	6063      	str	r3, [r4, #4]
 8014468:	6014      	str	r4, [r2, #0]
 801446a:	b003      	add	sp, #12
 801446c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014470:	f000 b8e2 	b.w	8014638 <__malloc_unlock>
 8014474:	42a3      	cmp	r3, r4
 8014476:	d908      	bls.n	801448a <_free_r+0x46>
 8014478:	6825      	ldr	r5, [r4, #0]
 801447a:	1961      	adds	r1, r4, r5
 801447c:	428b      	cmp	r3, r1
 801447e:	bf01      	itttt	eq
 8014480:	6819      	ldreq	r1, [r3, #0]
 8014482:	685b      	ldreq	r3, [r3, #4]
 8014484:	1949      	addeq	r1, r1, r5
 8014486:	6021      	streq	r1, [r4, #0]
 8014488:	e7ed      	b.n	8014466 <_free_r+0x22>
 801448a:	461a      	mov	r2, r3
 801448c:	685b      	ldr	r3, [r3, #4]
 801448e:	b10b      	cbz	r3, 8014494 <_free_r+0x50>
 8014490:	42a3      	cmp	r3, r4
 8014492:	d9fa      	bls.n	801448a <_free_r+0x46>
 8014494:	6811      	ldr	r1, [r2, #0]
 8014496:	1855      	adds	r5, r2, r1
 8014498:	42a5      	cmp	r5, r4
 801449a:	d10b      	bne.n	80144b4 <_free_r+0x70>
 801449c:	6824      	ldr	r4, [r4, #0]
 801449e:	4421      	add	r1, r4
 80144a0:	1854      	adds	r4, r2, r1
 80144a2:	42a3      	cmp	r3, r4
 80144a4:	6011      	str	r1, [r2, #0]
 80144a6:	d1e0      	bne.n	801446a <_free_r+0x26>
 80144a8:	681c      	ldr	r4, [r3, #0]
 80144aa:	685b      	ldr	r3, [r3, #4]
 80144ac:	6053      	str	r3, [r2, #4]
 80144ae:	440c      	add	r4, r1
 80144b0:	6014      	str	r4, [r2, #0]
 80144b2:	e7da      	b.n	801446a <_free_r+0x26>
 80144b4:	d902      	bls.n	80144bc <_free_r+0x78>
 80144b6:	230c      	movs	r3, #12
 80144b8:	6003      	str	r3, [r0, #0]
 80144ba:	e7d6      	b.n	801446a <_free_r+0x26>
 80144bc:	6825      	ldr	r5, [r4, #0]
 80144be:	1961      	adds	r1, r4, r5
 80144c0:	428b      	cmp	r3, r1
 80144c2:	bf04      	itt	eq
 80144c4:	6819      	ldreq	r1, [r3, #0]
 80144c6:	685b      	ldreq	r3, [r3, #4]
 80144c8:	6063      	str	r3, [r4, #4]
 80144ca:	bf04      	itt	eq
 80144cc:	1949      	addeq	r1, r1, r5
 80144ce:	6021      	streq	r1, [r4, #0]
 80144d0:	6054      	str	r4, [r2, #4]
 80144d2:	e7ca      	b.n	801446a <_free_r+0x26>
 80144d4:	b003      	add	sp, #12
 80144d6:	bd30      	pop	{r4, r5, pc}
 80144d8:	20006978 	.word	0x20006978

080144dc <malloc>:
 80144dc:	4b02      	ldr	r3, [pc, #8]	; (80144e8 <malloc+0xc>)
 80144de:	4601      	mov	r1, r0
 80144e0:	6818      	ldr	r0, [r3, #0]
 80144e2:	f000 b823 	b.w	801452c <_malloc_r>
 80144e6:	bf00      	nop
 80144e8:	20000088 	.word	0x20000088

080144ec <sbrk_aligned>:
 80144ec:	b570      	push	{r4, r5, r6, lr}
 80144ee:	4e0e      	ldr	r6, [pc, #56]	; (8014528 <sbrk_aligned+0x3c>)
 80144f0:	460c      	mov	r4, r1
 80144f2:	6831      	ldr	r1, [r6, #0]
 80144f4:	4605      	mov	r5, r0
 80144f6:	b911      	cbnz	r1, 80144fe <sbrk_aligned+0x12>
 80144f8:	f001 f83c 	bl	8015574 <_sbrk_r>
 80144fc:	6030      	str	r0, [r6, #0]
 80144fe:	4621      	mov	r1, r4
 8014500:	4628      	mov	r0, r5
 8014502:	f001 f837 	bl	8015574 <_sbrk_r>
 8014506:	1c43      	adds	r3, r0, #1
 8014508:	d00a      	beq.n	8014520 <sbrk_aligned+0x34>
 801450a:	1cc4      	adds	r4, r0, #3
 801450c:	f024 0403 	bic.w	r4, r4, #3
 8014510:	42a0      	cmp	r0, r4
 8014512:	d007      	beq.n	8014524 <sbrk_aligned+0x38>
 8014514:	1a21      	subs	r1, r4, r0
 8014516:	4628      	mov	r0, r5
 8014518:	f001 f82c 	bl	8015574 <_sbrk_r>
 801451c:	3001      	adds	r0, #1
 801451e:	d101      	bne.n	8014524 <sbrk_aligned+0x38>
 8014520:	f04f 34ff 	mov.w	r4, #4294967295
 8014524:	4620      	mov	r0, r4
 8014526:	bd70      	pop	{r4, r5, r6, pc}
 8014528:	2000697c 	.word	0x2000697c

0801452c <_malloc_r>:
 801452c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014530:	1ccd      	adds	r5, r1, #3
 8014532:	f025 0503 	bic.w	r5, r5, #3
 8014536:	3508      	adds	r5, #8
 8014538:	2d0c      	cmp	r5, #12
 801453a:	bf38      	it	cc
 801453c:	250c      	movcc	r5, #12
 801453e:	2d00      	cmp	r5, #0
 8014540:	4607      	mov	r7, r0
 8014542:	db01      	blt.n	8014548 <_malloc_r+0x1c>
 8014544:	42a9      	cmp	r1, r5
 8014546:	d905      	bls.n	8014554 <_malloc_r+0x28>
 8014548:	230c      	movs	r3, #12
 801454a:	603b      	str	r3, [r7, #0]
 801454c:	2600      	movs	r6, #0
 801454e:	4630      	mov	r0, r6
 8014550:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014554:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8014628 <_malloc_r+0xfc>
 8014558:	f000 f868 	bl	801462c <__malloc_lock>
 801455c:	f8d8 3000 	ldr.w	r3, [r8]
 8014560:	461c      	mov	r4, r3
 8014562:	bb5c      	cbnz	r4, 80145bc <_malloc_r+0x90>
 8014564:	4629      	mov	r1, r5
 8014566:	4638      	mov	r0, r7
 8014568:	f7ff ffc0 	bl	80144ec <sbrk_aligned>
 801456c:	1c43      	adds	r3, r0, #1
 801456e:	4604      	mov	r4, r0
 8014570:	d155      	bne.n	801461e <_malloc_r+0xf2>
 8014572:	f8d8 4000 	ldr.w	r4, [r8]
 8014576:	4626      	mov	r6, r4
 8014578:	2e00      	cmp	r6, #0
 801457a:	d145      	bne.n	8014608 <_malloc_r+0xdc>
 801457c:	2c00      	cmp	r4, #0
 801457e:	d048      	beq.n	8014612 <_malloc_r+0xe6>
 8014580:	6823      	ldr	r3, [r4, #0]
 8014582:	4631      	mov	r1, r6
 8014584:	4638      	mov	r0, r7
 8014586:	eb04 0903 	add.w	r9, r4, r3
 801458a:	f000 fff3 	bl	8015574 <_sbrk_r>
 801458e:	4581      	cmp	r9, r0
 8014590:	d13f      	bne.n	8014612 <_malloc_r+0xe6>
 8014592:	6821      	ldr	r1, [r4, #0]
 8014594:	1a6d      	subs	r5, r5, r1
 8014596:	4629      	mov	r1, r5
 8014598:	4638      	mov	r0, r7
 801459a:	f7ff ffa7 	bl	80144ec <sbrk_aligned>
 801459e:	3001      	adds	r0, #1
 80145a0:	d037      	beq.n	8014612 <_malloc_r+0xe6>
 80145a2:	6823      	ldr	r3, [r4, #0]
 80145a4:	442b      	add	r3, r5
 80145a6:	6023      	str	r3, [r4, #0]
 80145a8:	f8d8 3000 	ldr.w	r3, [r8]
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d038      	beq.n	8014622 <_malloc_r+0xf6>
 80145b0:	685a      	ldr	r2, [r3, #4]
 80145b2:	42a2      	cmp	r2, r4
 80145b4:	d12b      	bne.n	801460e <_malloc_r+0xe2>
 80145b6:	2200      	movs	r2, #0
 80145b8:	605a      	str	r2, [r3, #4]
 80145ba:	e00f      	b.n	80145dc <_malloc_r+0xb0>
 80145bc:	6822      	ldr	r2, [r4, #0]
 80145be:	1b52      	subs	r2, r2, r5
 80145c0:	d41f      	bmi.n	8014602 <_malloc_r+0xd6>
 80145c2:	2a0b      	cmp	r2, #11
 80145c4:	d917      	bls.n	80145f6 <_malloc_r+0xca>
 80145c6:	1961      	adds	r1, r4, r5
 80145c8:	42a3      	cmp	r3, r4
 80145ca:	6025      	str	r5, [r4, #0]
 80145cc:	bf18      	it	ne
 80145ce:	6059      	strne	r1, [r3, #4]
 80145d0:	6863      	ldr	r3, [r4, #4]
 80145d2:	bf08      	it	eq
 80145d4:	f8c8 1000 	streq.w	r1, [r8]
 80145d8:	5162      	str	r2, [r4, r5]
 80145da:	604b      	str	r3, [r1, #4]
 80145dc:	4638      	mov	r0, r7
 80145de:	f104 060b 	add.w	r6, r4, #11
 80145e2:	f000 f829 	bl	8014638 <__malloc_unlock>
 80145e6:	f026 0607 	bic.w	r6, r6, #7
 80145ea:	1d23      	adds	r3, r4, #4
 80145ec:	1af2      	subs	r2, r6, r3
 80145ee:	d0ae      	beq.n	801454e <_malloc_r+0x22>
 80145f0:	1b9b      	subs	r3, r3, r6
 80145f2:	50a3      	str	r3, [r4, r2]
 80145f4:	e7ab      	b.n	801454e <_malloc_r+0x22>
 80145f6:	42a3      	cmp	r3, r4
 80145f8:	6862      	ldr	r2, [r4, #4]
 80145fa:	d1dd      	bne.n	80145b8 <_malloc_r+0x8c>
 80145fc:	f8c8 2000 	str.w	r2, [r8]
 8014600:	e7ec      	b.n	80145dc <_malloc_r+0xb0>
 8014602:	4623      	mov	r3, r4
 8014604:	6864      	ldr	r4, [r4, #4]
 8014606:	e7ac      	b.n	8014562 <_malloc_r+0x36>
 8014608:	4634      	mov	r4, r6
 801460a:	6876      	ldr	r6, [r6, #4]
 801460c:	e7b4      	b.n	8014578 <_malloc_r+0x4c>
 801460e:	4613      	mov	r3, r2
 8014610:	e7cc      	b.n	80145ac <_malloc_r+0x80>
 8014612:	230c      	movs	r3, #12
 8014614:	603b      	str	r3, [r7, #0]
 8014616:	4638      	mov	r0, r7
 8014618:	f000 f80e 	bl	8014638 <__malloc_unlock>
 801461c:	e797      	b.n	801454e <_malloc_r+0x22>
 801461e:	6025      	str	r5, [r4, #0]
 8014620:	e7dc      	b.n	80145dc <_malloc_r+0xb0>
 8014622:	605b      	str	r3, [r3, #4]
 8014624:	deff      	udf	#255	; 0xff
 8014626:	bf00      	nop
 8014628:	20006978 	.word	0x20006978

0801462c <__malloc_lock>:
 801462c:	4801      	ldr	r0, [pc, #4]	; (8014634 <__malloc_lock+0x8>)
 801462e:	f7ff b87e 	b.w	801372e <__retarget_lock_acquire_recursive>
 8014632:	bf00      	nop
 8014634:	20006974 	.word	0x20006974

08014638 <__malloc_unlock>:
 8014638:	4801      	ldr	r0, [pc, #4]	; (8014640 <__malloc_unlock+0x8>)
 801463a:	f7ff b879 	b.w	8013730 <__retarget_lock_release_recursive>
 801463e:	bf00      	nop
 8014640:	20006974 	.word	0x20006974

08014644 <_Balloc>:
 8014644:	b570      	push	{r4, r5, r6, lr}
 8014646:	69c6      	ldr	r6, [r0, #28]
 8014648:	4604      	mov	r4, r0
 801464a:	460d      	mov	r5, r1
 801464c:	b976      	cbnz	r6, 801466c <_Balloc+0x28>
 801464e:	2010      	movs	r0, #16
 8014650:	f7ff ff44 	bl	80144dc <malloc>
 8014654:	4602      	mov	r2, r0
 8014656:	61e0      	str	r0, [r4, #28]
 8014658:	b920      	cbnz	r0, 8014664 <_Balloc+0x20>
 801465a:	4b18      	ldr	r3, [pc, #96]	; (80146bc <_Balloc+0x78>)
 801465c:	4818      	ldr	r0, [pc, #96]	; (80146c0 <_Balloc+0x7c>)
 801465e:	216b      	movs	r1, #107	; 0x6b
 8014660:	f000 ff98 	bl	8015594 <__assert_func>
 8014664:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014668:	6006      	str	r6, [r0, #0]
 801466a:	60c6      	str	r6, [r0, #12]
 801466c:	69e6      	ldr	r6, [r4, #28]
 801466e:	68f3      	ldr	r3, [r6, #12]
 8014670:	b183      	cbz	r3, 8014694 <_Balloc+0x50>
 8014672:	69e3      	ldr	r3, [r4, #28]
 8014674:	68db      	ldr	r3, [r3, #12]
 8014676:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801467a:	b9b8      	cbnz	r0, 80146ac <_Balloc+0x68>
 801467c:	2101      	movs	r1, #1
 801467e:	fa01 f605 	lsl.w	r6, r1, r5
 8014682:	1d72      	adds	r2, r6, #5
 8014684:	0092      	lsls	r2, r2, #2
 8014686:	4620      	mov	r0, r4
 8014688:	f000 ffa2 	bl	80155d0 <_calloc_r>
 801468c:	b160      	cbz	r0, 80146a8 <_Balloc+0x64>
 801468e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014692:	e00e      	b.n	80146b2 <_Balloc+0x6e>
 8014694:	2221      	movs	r2, #33	; 0x21
 8014696:	2104      	movs	r1, #4
 8014698:	4620      	mov	r0, r4
 801469a:	f000 ff99 	bl	80155d0 <_calloc_r>
 801469e:	69e3      	ldr	r3, [r4, #28]
 80146a0:	60f0      	str	r0, [r6, #12]
 80146a2:	68db      	ldr	r3, [r3, #12]
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d1e4      	bne.n	8014672 <_Balloc+0x2e>
 80146a8:	2000      	movs	r0, #0
 80146aa:	bd70      	pop	{r4, r5, r6, pc}
 80146ac:	6802      	ldr	r2, [r0, #0]
 80146ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80146b2:	2300      	movs	r3, #0
 80146b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80146b8:	e7f7      	b.n	80146aa <_Balloc+0x66>
 80146ba:	bf00      	nop
 80146bc:	08015f55 	.word	0x08015f55
 80146c0:	08015fd5 	.word	0x08015fd5

080146c4 <_Bfree>:
 80146c4:	b570      	push	{r4, r5, r6, lr}
 80146c6:	69c6      	ldr	r6, [r0, #28]
 80146c8:	4605      	mov	r5, r0
 80146ca:	460c      	mov	r4, r1
 80146cc:	b976      	cbnz	r6, 80146ec <_Bfree+0x28>
 80146ce:	2010      	movs	r0, #16
 80146d0:	f7ff ff04 	bl	80144dc <malloc>
 80146d4:	4602      	mov	r2, r0
 80146d6:	61e8      	str	r0, [r5, #28]
 80146d8:	b920      	cbnz	r0, 80146e4 <_Bfree+0x20>
 80146da:	4b09      	ldr	r3, [pc, #36]	; (8014700 <_Bfree+0x3c>)
 80146dc:	4809      	ldr	r0, [pc, #36]	; (8014704 <_Bfree+0x40>)
 80146de:	218f      	movs	r1, #143	; 0x8f
 80146e0:	f000 ff58 	bl	8015594 <__assert_func>
 80146e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80146e8:	6006      	str	r6, [r0, #0]
 80146ea:	60c6      	str	r6, [r0, #12]
 80146ec:	b13c      	cbz	r4, 80146fe <_Bfree+0x3a>
 80146ee:	69eb      	ldr	r3, [r5, #28]
 80146f0:	6862      	ldr	r2, [r4, #4]
 80146f2:	68db      	ldr	r3, [r3, #12]
 80146f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80146f8:	6021      	str	r1, [r4, #0]
 80146fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80146fe:	bd70      	pop	{r4, r5, r6, pc}
 8014700:	08015f55 	.word	0x08015f55
 8014704:	08015fd5 	.word	0x08015fd5

08014708 <__multadd>:
 8014708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801470c:	690d      	ldr	r5, [r1, #16]
 801470e:	4607      	mov	r7, r0
 8014710:	460c      	mov	r4, r1
 8014712:	461e      	mov	r6, r3
 8014714:	f101 0c14 	add.w	ip, r1, #20
 8014718:	2000      	movs	r0, #0
 801471a:	f8dc 3000 	ldr.w	r3, [ip]
 801471e:	b299      	uxth	r1, r3
 8014720:	fb02 6101 	mla	r1, r2, r1, r6
 8014724:	0c1e      	lsrs	r6, r3, #16
 8014726:	0c0b      	lsrs	r3, r1, #16
 8014728:	fb02 3306 	mla	r3, r2, r6, r3
 801472c:	b289      	uxth	r1, r1
 801472e:	3001      	adds	r0, #1
 8014730:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014734:	4285      	cmp	r5, r0
 8014736:	f84c 1b04 	str.w	r1, [ip], #4
 801473a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801473e:	dcec      	bgt.n	801471a <__multadd+0x12>
 8014740:	b30e      	cbz	r6, 8014786 <__multadd+0x7e>
 8014742:	68a3      	ldr	r3, [r4, #8]
 8014744:	42ab      	cmp	r3, r5
 8014746:	dc19      	bgt.n	801477c <__multadd+0x74>
 8014748:	6861      	ldr	r1, [r4, #4]
 801474a:	4638      	mov	r0, r7
 801474c:	3101      	adds	r1, #1
 801474e:	f7ff ff79 	bl	8014644 <_Balloc>
 8014752:	4680      	mov	r8, r0
 8014754:	b928      	cbnz	r0, 8014762 <__multadd+0x5a>
 8014756:	4602      	mov	r2, r0
 8014758:	4b0c      	ldr	r3, [pc, #48]	; (801478c <__multadd+0x84>)
 801475a:	480d      	ldr	r0, [pc, #52]	; (8014790 <__multadd+0x88>)
 801475c:	21ba      	movs	r1, #186	; 0xba
 801475e:	f000 ff19 	bl	8015594 <__assert_func>
 8014762:	6922      	ldr	r2, [r4, #16]
 8014764:	3202      	adds	r2, #2
 8014766:	f104 010c 	add.w	r1, r4, #12
 801476a:	0092      	lsls	r2, r2, #2
 801476c:	300c      	adds	r0, #12
 801476e:	f7fe ffe0 	bl	8013732 <memcpy>
 8014772:	4621      	mov	r1, r4
 8014774:	4638      	mov	r0, r7
 8014776:	f7ff ffa5 	bl	80146c4 <_Bfree>
 801477a:	4644      	mov	r4, r8
 801477c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014780:	3501      	adds	r5, #1
 8014782:	615e      	str	r6, [r3, #20]
 8014784:	6125      	str	r5, [r4, #16]
 8014786:	4620      	mov	r0, r4
 8014788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801478c:	08015fc4 	.word	0x08015fc4
 8014790:	08015fd5 	.word	0x08015fd5

08014794 <__hi0bits>:
 8014794:	0c03      	lsrs	r3, r0, #16
 8014796:	041b      	lsls	r3, r3, #16
 8014798:	b9d3      	cbnz	r3, 80147d0 <__hi0bits+0x3c>
 801479a:	0400      	lsls	r0, r0, #16
 801479c:	2310      	movs	r3, #16
 801479e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80147a2:	bf04      	itt	eq
 80147a4:	0200      	lsleq	r0, r0, #8
 80147a6:	3308      	addeq	r3, #8
 80147a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80147ac:	bf04      	itt	eq
 80147ae:	0100      	lsleq	r0, r0, #4
 80147b0:	3304      	addeq	r3, #4
 80147b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80147b6:	bf04      	itt	eq
 80147b8:	0080      	lsleq	r0, r0, #2
 80147ba:	3302      	addeq	r3, #2
 80147bc:	2800      	cmp	r0, #0
 80147be:	db05      	blt.n	80147cc <__hi0bits+0x38>
 80147c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80147c4:	f103 0301 	add.w	r3, r3, #1
 80147c8:	bf08      	it	eq
 80147ca:	2320      	moveq	r3, #32
 80147cc:	4618      	mov	r0, r3
 80147ce:	4770      	bx	lr
 80147d0:	2300      	movs	r3, #0
 80147d2:	e7e4      	b.n	801479e <__hi0bits+0xa>

080147d4 <__lo0bits>:
 80147d4:	6803      	ldr	r3, [r0, #0]
 80147d6:	f013 0207 	ands.w	r2, r3, #7
 80147da:	d00c      	beq.n	80147f6 <__lo0bits+0x22>
 80147dc:	07d9      	lsls	r1, r3, #31
 80147de:	d422      	bmi.n	8014826 <__lo0bits+0x52>
 80147e0:	079a      	lsls	r2, r3, #30
 80147e2:	bf49      	itett	mi
 80147e4:	085b      	lsrmi	r3, r3, #1
 80147e6:	089b      	lsrpl	r3, r3, #2
 80147e8:	6003      	strmi	r3, [r0, #0]
 80147ea:	2201      	movmi	r2, #1
 80147ec:	bf5c      	itt	pl
 80147ee:	6003      	strpl	r3, [r0, #0]
 80147f0:	2202      	movpl	r2, #2
 80147f2:	4610      	mov	r0, r2
 80147f4:	4770      	bx	lr
 80147f6:	b299      	uxth	r1, r3
 80147f8:	b909      	cbnz	r1, 80147fe <__lo0bits+0x2a>
 80147fa:	0c1b      	lsrs	r3, r3, #16
 80147fc:	2210      	movs	r2, #16
 80147fe:	b2d9      	uxtb	r1, r3
 8014800:	b909      	cbnz	r1, 8014806 <__lo0bits+0x32>
 8014802:	3208      	adds	r2, #8
 8014804:	0a1b      	lsrs	r3, r3, #8
 8014806:	0719      	lsls	r1, r3, #28
 8014808:	bf04      	itt	eq
 801480a:	091b      	lsreq	r3, r3, #4
 801480c:	3204      	addeq	r2, #4
 801480e:	0799      	lsls	r1, r3, #30
 8014810:	bf04      	itt	eq
 8014812:	089b      	lsreq	r3, r3, #2
 8014814:	3202      	addeq	r2, #2
 8014816:	07d9      	lsls	r1, r3, #31
 8014818:	d403      	bmi.n	8014822 <__lo0bits+0x4e>
 801481a:	085b      	lsrs	r3, r3, #1
 801481c:	f102 0201 	add.w	r2, r2, #1
 8014820:	d003      	beq.n	801482a <__lo0bits+0x56>
 8014822:	6003      	str	r3, [r0, #0]
 8014824:	e7e5      	b.n	80147f2 <__lo0bits+0x1e>
 8014826:	2200      	movs	r2, #0
 8014828:	e7e3      	b.n	80147f2 <__lo0bits+0x1e>
 801482a:	2220      	movs	r2, #32
 801482c:	e7e1      	b.n	80147f2 <__lo0bits+0x1e>
	...

08014830 <__i2b>:
 8014830:	b510      	push	{r4, lr}
 8014832:	460c      	mov	r4, r1
 8014834:	2101      	movs	r1, #1
 8014836:	f7ff ff05 	bl	8014644 <_Balloc>
 801483a:	4602      	mov	r2, r0
 801483c:	b928      	cbnz	r0, 801484a <__i2b+0x1a>
 801483e:	4b05      	ldr	r3, [pc, #20]	; (8014854 <__i2b+0x24>)
 8014840:	4805      	ldr	r0, [pc, #20]	; (8014858 <__i2b+0x28>)
 8014842:	f240 1145 	movw	r1, #325	; 0x145
 8014846:	f000 fea5 	bl	8015594 <__assert_func>
 801484a:	2301      	movs	r3, #1
 801484c:	6144      	str	r4, [r0, #20]
 801484e:	6103      	str	r3, [r0, #16]
 8014850:	bd10      	pop	{r4, pc}
 8014852:	bf00      	nop
 8014854:	08015fc4 	.word	0x08015fc4
 8014858:	08015fd5 	.word	0x08015fd5

0801485c <__multiply>:
 801485c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014860:	4691      	mov	r9, r2
 8014862:	690a      	ldr	r2, [r1, #16]
 8014864:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014868:	429a      	cmp	r2, r3
 801486a:	bfb8      	it	lt
 801486c:	460b      	movlt	r3, r1
 801486e:	460c      	mov	r4, r1
 8014870:	bfbc      	itt	lt
 8014872:	464c      	movlt	r4, r9
 8014874:	4699      	movlt	r9, r3
 8014876:	6927      	ldr	r7, [r4, #16]
 8014878:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801487c:	68a3      	ldr	r3, [r4, #8]
 801487e:	6861      	ldr	r1, [r4, #4]
 8014880:	eb07 060a 	add.w	r6, r7, sl
 8014884:	42b3      	cmp	r3, r6
 8014886:	b085      	sub	sp, #20
 8014888:	bfb8      	it	lt
 801488a:	3101      	addlt	r1, #1
 801488c:	f7ff feda 	bl	8014644 <_Balloc>
 8014890:	b930      	cbnz	r0, 80148a0 <__multiply+0x44>
 8014892:	4602      	mov	r2, r0
 8014894:	4b44      	ldr	r3, [pc, #272]	; (80149a8 <__multiply+0x14c>)
 8014896:	4845      	ldr	r0, [pc, #276]	; (80149ac <__multiply+0x150>)
 8014898:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801489c:	f000 fe7a 	bl	8015594 <__assert_func>
 80148a0:	f100 0514 	add.w	r5, r0, #20
 80148a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80148a8:	462b      	mov	r3, r5
 80148aa:	2200      	movs	r2, #0
 80148ac:	4543      	cmp	r3, r8
 80148ae:	d321      	bcc.n	80148f4 <__multiply+0x98>
 80148b0:	f104 0314 	add.w	r3, r4, #20
 80148b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80148b8:	f109 0314 	add.w	r3, r9, #20
 80148bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80148c0:	9202      	str	r2, [sp, #8]
 80148c2:	1b3a      	subs	r2, r7, r4
 80148c4:	3a15      	subs	r2, #21
 80148c6:	f022 0203 	bic.w	r2, r2, #3
 80148ca:	3204      	adds	r2, #4
 80148cc:	f104 0115 	add.w	r1, r4, #21
 80148d0:	428f      	cmp	r7, r1
 80148d2:	bf38      	it	cc
 80148d4:	2204      	movcc	r2, #4
 80148d6:	9201      	str	r2, [sp, #4]
 80148d8:	9a02      	ldr	r2, [sp, #8]
 80148da:	9303      	str	r3, [sp, #12]
 80148dc:	429a      	cmp	r2, r3
 80148de:	d80c      	bhi.n	80148fa <__multiply+0x9e>
 80148e0:	2e00      	cmp	r6, #0
 80148e2:	dd03      	ble.n	80148ec <__multiply+0x90>
 80148e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d05b      	beq.n	80149a4 <__multiply+0x148>
 80148ec:	6106      	str	r6, [r0, #16]
 80148ee:	b005      	add	sp, #20
 80148f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148f4:	f843 2b04 	str.w	r2, [r3], #4
 80148f8:	e7d8      	b.n	80148ac <__multiply+0x50>
 80148fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80148fe:	f1ba 0f00 	cmp.w	sl, #0
 8014902:	d024      	beq.n	801494e <__multiply+0xf2>
 8014904:	f104 0e14 	add.w	lr, r4, #20
 8014908:	46a9      	mov	r9, r5
 801490a:	f04f 0c00 	mov.w	ip, #0
 801490e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8014912:	f8d9 1000 	ldr.w	r1, [r9]
 8014916:	fa1f fb82 	uxth.w	fp, r2
 801491a:	b289      	uxth	r1, r1
 801491c:	fb0a 110b 	mla	r1, sl, fp, r1
 8014920:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8014924:	f8d9 2000 	ldr.w	r2, [r9]
 8014928:	4461      	add	r1, ip
 801492a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801492e:	fb0a c20b 	mla	r2, sl, fp, ip
 8014932:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014936:	b289      	uxth	r1, r1
 8014938:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801493c:	4577      	cmp	r7, lr
 801493e:	f849 1b04 	str.w	r1, [r9], #4
 8014942:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014946:	d8e2      	bhi.n	801490e <__multiply+0xb2>
 8014948:	9a01      	ldr	r2, [sp, #4]
 801494a:	f845 c002 	str.w	ip, [r5, r2]
 801494e:	9a03      	ldr	r2, [sp, #12]
 8014950:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014954:	3304      	adds	r3, #4
 8014956:	f1b9 0f00 	cmp.w	r9, #0
 801495a:	d021      	beq.n	80149a0 <__multiply+0x144>
 801495c:	6829      	ldr	r1, [r5, #0]
 801495e:	f104 0c14 	add.w	ip, r4, #20
 8014962:	46ae      	mov	lr, r5
 8014964:	f04f 0a00 	mov.w	sl, #0
 8014968:	f8bc b000 	ldrh.w	fp, [ip]
 801496c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8014970:	fb09 220b 	mla	r2, r9, fp, r2
 8014974:	4452      	add	r2, sl
 8014976:	b289      	uxth	r1, r1
 8014978:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801497c:	f84e 1b04 	str.w	r1, [lr], #4
 8014980:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014984:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014988:	f8be 1000 	ldrh.w	r1, [lr]
 801498c:	fb09 110a 	mla	r1, r9, sl, r1
 8014990:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8014994:	4567      	cmp	r7, ip
 8014996:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801499a:	d8e5      	bhi.n	8014968 <__multiply+0x10c>
 801499c:	9a01      	ldr	r2, [sp, #4]
 801499e:	50a9      	str	r1, [r5, r2]
 80149a0:	3504      	adds	r5, #4
 80149a2:	e799      	b.n	80148d8 <__multiply+0x7c>
 80149a4:	3e01      	subs	r6, #1
 80149a6:	e79b      	b.n	80148e0 <__multiply+0x84>
 80149a8:	08015fc4 	.word	0x08015fc4
 80149ac:	08015fd5 	.word	0x08015fd5

080149b0 <__pow5mult>:
 80149b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80149b4:	4615      	mov	r5, r2
 80149b6:	f012 0203 	ands.w	r2, r2, #3
 80149ba:	4606      	mov	r6, r0
 80149bc:	460f      	mov	r7, r1
 80149be:	d007      	beq.n	80149d0 <__pow5mult+0x20>
 80149c0:	4c25      	ldr	r4, [pc, #148]	; (8014a58 <__pow5mult+0xa8>)
 80149c2:	3a01      	subs	r2, #1
 80149c4:	2300      	movs	r3, #0
 80149c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80149ca:	f7ff fe9d 	bl	8014708 <__multadd>
 80149ce:	4607      	mov	r7, r0
 80149d0:	10ad      	asrs	r5, r5, #2
 80149d2:	d03d      	beq.n	8014a50 <__pow5mult+0xa0>
 80149d4:	69f4      	ldr	r4, [r6, #28]
 80149d6:	b97c      	cbnz	r4, 80149f8 <__pow5mult+0x48>
 80149d8:	2010      	movs	r0, #16
 80149da:	f7ff fd7f 	bl	80144dc <malloc>
 80149de:	4602      	mov	r2, r0
 80149e0:	61f0      	str	r0, [r6, #28]
 80149e2:	b928      	cbnz	r0, 80149f0 <__pow5mult+0x40>
 80149e4:	4b1d      	ldr	r3, [pc, #116]	; (8014a5c <__pow5mult+0xac>)
 80149e6:	481e      	ldr	r0, [pc, #120]	; (8014a60 <__pow5mult+0xb0>)
 80149e8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80149ec:	f000 fdd2 	bl	8015594 <__assert_func>
 80149f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80149f4:	6004      	str	r4, [r0, #0]
 80149f6:	60c4      	str	r4, [r0, #12]
 80149f8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80149fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014a00:	b94c      	cbnz	r4, 8014a16 <__pow5mult+0x66>
 8014a02:	f240 2171 	movw	r1, #625	; 0x271
 8014a06:	4630      	mov	r0, r6
 8014a08:	f7ff ff12 	bl	8014830 <__i2b>
 8014a0c:	2300      	movs	r3, #0
 8014a0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8014a12:	4604      	mov	r4, r0
 8014a14:	6003      	str	r3, [r0, #0]
 8014a16:	f04f 0900 	mov.w	r9, #0
 8014a1a:	07eb      	lsls	r3, r5, #31
 8014a1c:	d50a      	bpl.n	8014a34 <__pow5mult+0x84>
 8014a1e:	4639      	mov	r1, r7
 8014a20:	4622      	mov	r2, r4
 8014a22:	4630      	mov	r0, r6
 8014a24:	f7ff ff1a 	bl	801485c <__multiply>
 8014a28:	4639      	mov	r1, r7
 8014a2a:	4680      	mov	r8, r0
 8014a2c:	4630      	mov	r0, r6
 8014a2e:	f7ff fe49 	bl	80146c4 <_Bfree>
 8014a32:	4647      	mov	r7, r8
 8014a34:	106d      	asrs	r5, r5, #1
 8014a36:	d00b      	beq.n	8014a50 <__pow5mult+0xa0>
 8014a38:	6820      	ldr	r0, [r4, #0]
 8014a3a:	b938      	cbnz	r0, 8014a4c <__pow5mult+0x9c>
 8014a3c:	4622      	mov	r2, r4
 8014a3e:	4621      	mov	r1, r4
 8014a40:	4630      	mov	r0, r6
 8014a42:	f7ff ff0b 	bl	801485c <__multiply>
 8014a46:	6020      	str	r0, [r4, #0]
 8014a48:	f8c0 9000 	str.w	r9, [r0]
 8014a4c:	4604      	mov	r4, r0
 8014a4e:	e7e4      	b.n	8014a1a <__pow5mult+0x6a>
 8014a50:	4638      	mov	r0, r7
 8014a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a56:	bf00      	nop
 8014a58:	08016120 	.word	0x08016120
 8014a5c:	08015f55 	.word	0x08015f55
 8014a60:	08015fd5 	.word	0x08015fd5

08014a64 <__lshift>:
 8014a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a68:	460c      	mov	r4, r1
 8014a6a:	6849      	ldr	r1, [r1, #4]
 8014a6c:	6923      	ldr	r3, [r4, #16]
 8014a6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014a72:	68a3      	ldr	r3, [r4, #8]
 8014a74:	4607      	mov	r7, r0
 8014a76:	4691      	mov	r9, r2
 8014a78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014a7c:	f108 0601 	add.w	r6, r8, #1
 8014a80:	42b3      	cmp	r3, r6
 8014a82:	db0b      	blt.n	8014a9c <__lshift+0x38>
 8014a84:	4638      	mov	r0, r7
 8014a86:	f7ff fddd 	bl	8014644 <_Balloc>
 8014a8a:	4605      	mov	r5, r0
 8014a8c:	b948      	cbnz	r0, 8014aa2 <__lshift+0x3e>
 8014a8e:	4602      	mov	r2, r0
 8014a90:	4b28      	ldr	r3, [pc, #160]	; (8014b34 <__lshift+0xd0>)
 8014a92:	4829      	ldr	r0, [pc, #164]	; (8014b38 <__lshift+0xd4>)
 8014a94:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8014a98:	f000 fd7c 	bl	8015594 <__assert_func>
 8014a9c:	3101      	adds	r1, #1
 8014a9e:	005b      	lsls	r3, r3, #1
 8014aa0:	e7ee      	b.n	8014a80 <__lshift+0x1c>
 8014aa2:	2300      	movs	r3, #0
 8014aa4:	f100 0114 	add.w	r1, r0, #20
 8014aa8:	f100 0210 	add.w	r2, r0, #16
 8014aac:	4618      	mov	r0, r3
 8014aae:	4553      	cmp	r3, sl
 8014ab0:	db33      	blt.n	8014b1a <__lshift+0xb6>
 8014ab2:	6920      	ldr	r0, [r4, #16]
 8014ab4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014ab8:	f104 0314 	add.w	r3, r4, #20
 8014abc:	f019 091f 	ands.w	r9, r9, #31
 8014ac0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014ac4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014ac8:	d02b      	beq.n	8014b22 <__lshift+0xbe>
 8014aca:	f1c9 0e20 	rsb	lr, r9, #32
 8014ace:	468a      	mov	sl, r1
 8014ad0:	2200      	movs	r2, #0
 8014ad2:	6818      	ldr	r0, [r3, #0]
 8014ad4:	fa00 f009 	lsl.w	r0, r0, r9
 8014ad8:	4310      	orrs	r0, r2
 8014ada:	f84a 0b04 	str.w	r0, [sl], #4
 8014ade:	f853 2b04 	ldr.w	r2, [r3], #4
 8014ae2:	459c      	cmp	ip, r3
 8014ae4:	fa22 f20e 	lsr.w	r2, r2, lr
 8014ae8:	d8f3      	bhi.n	8014ad2 <__lshift+0x6e>
 8014aea:	ebac 0304 	sub.w	r3, ip, r4
 8014aee:	3b15      	subs	r3, #21
 8014af0:	f023 0303 	bic.w	r3, r3, #3
 8014af4:	3304      	adds	r3, #4
 8014af6:	f104 0015 	add.w	r0, r4, #21
 8014afa:	4584      	cmp	ip, r0
 8014afc:	bf38      	it	cc
 8014afe:	2304      	movcc	r3, #4
 8014b00:	50ca      	str	r2, [r1, r3]
 8014b02:	b10a      	cbz	r2, 8014b08 <__lshift+0xa4>
 8014b04:	f108 0602 	add.w	r6, r8, #2
 8014b08:	3e01      	subs	r6, #1
 8014b0a:	4638      	mov	r0, r7
 8014b0c:	612e      	str	r6, [r5, #16]
 8014b0e:	4621      	mov	r1, r4
 8014b10:	f7ff fdd8 	bl	80146c4 <_Bfree>
 8014b14:	4628      	mov	r0, r5
 8014b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8014b1e:	3301      	adds	r3, #1
 8014b20:	e7c5      	b.n	8014aae <__lshift+0x4a>
 8014b22:	3904      	subs	r1, #4
 8014b24:	f853 2b04 	ldr.w	r2, [r3], #4
 8014b28:	f841 2f04 	str.w	r2, [r1, #4]!
 8014b2c:	459c      	cmp	ip, r3
 8014b2e:	d8f9      	bhi.n	8014b24 <__lshift+0xc0>
 8014b30:	e7ea      	b.n	8014b08 <__lshift+0xa4>
 8014b32:	bf00      	nop
 8014b34:	08015fc4 	.word	0x08015fc4
 8014b38:	08015fd5 	.word	0x08015fd5

08014b3c <__mcmp>:
 8014b3c:	b530      	push	{r4, r5, lr}
 8014b3e:	6902      	ldr	r2, [r0, #16]
 8014b40:	690c      	ldr	r4, [r1, #16]
 8014b42:	1b12      	subs	r2, r2, r4
 8014b44:	d10e      	bne.n	8014b64 <__mcmp+0x28>
 8014b46:	f100 0314 	add.w	r3, r0, #20
 8014b4a:	3114      	adds	r1, #20
 8014b4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014b50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014b54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014b58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014b5c:	42a5      	cmp	r5, r4
 8014b5e:	d003      	beq.n	8014b68 <__mcmp+0x2c>
 8014b60:	d305      	bcc.n	8014b6e <__mcmp+0x32>
 8014b62:	2201      	movs	r2, #1
 8014b64:	4610      	mov	r0, r2
 8014b66:	bd30      	pop	{r4, r5, pc}
 8014b68:	4283      	cmp	r3, r0
 8014b6a:	d3f3      	bcc.n	8014b54 <__mcmp+0x18>
 8014b6c:	e7fa      	b.n	8014b64 <__mcmp+0x28>
 8014b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8014b72:	e7f7      	b.n	8014b64 <__mcmp+0x28>

08014b74 <__mdiff>:
 8014b74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b78:	460c      	mov	r4, r1
 8014b7a:	4606      	mov	r6, r0
 8014b7c:	4611      	mov	r1, r2
 8014b7e:	4620      	mov	r0, r4
 8014b80:	4690      	mov	r8, r2
 8014b82:	f7ff ffdb 	bl	8014b3c <__mcmp>
 8014b86:	1e05      	subs	r5, r0, #0
 8014b88:	d110      	bne.n	8014bac <__mdiff+0x38>
 8014b8a:	4629      	mov	r1, r5
 8014b8c:	4630      	mov	r0, r6
 8014b8e:	f7ff fd59 	bl	8014644 <_Balloc>
 8014b92:	b930      	cbnz	r0, 8014ba2 <__mdiff+0x2e>
 8014b94:	4b3a      	ldr	r3, [pc, #232]	; (8014c80 <__mdiff+0x10c>)
 8014b96:	4602      	mov	r2, r0
 8014b98:	f240 2137 	movw	r1, #567	; 0x237
 8014b9c:	4839      	ldr	r0, [pc, #228]	; (8014c84 <__mdiff+0x110>)
 8014b9e:	f000 fcf9 	bl	8015594 <__assert_func>
 8014ba2:	2301      	movs	r3, #1
 8014ba4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014ba8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bac:	bfa4      	itt	ge
 8014bae:	4643      	movge	r3, r8
 8014bb0:	46a0      	movge	r8, r4
 8014bb2:	4630      	mov	r0, r6
 8014bb4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014bb8:	bfa6      	itte	ge
 8014bba:	461c      	movge	r4, r3
 8014bbc:	2500      	movge	r5, #0
 8014bbe:	2501      	movlt	r5, #1
 8014bc0:	f7ff fd40 	bl	8014644 <_Balloc>
 8014bc4:	b920      	cbnz	r0, 8014bd0 <__mdiff+0x5c>
 8014bc6:	4b2e      	ldr	r3, [pc, #184]	; (8014c80 <__mdiff+0x10c>)
 8014bc8:	4602      	mov	r2, r0
 8014bca:	f240 2145 	movw	r1, #581	; 0x245
 8014bce:	e7e5      	b.n	8014b9c <__mdiff+0x28>
 8014bd0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014bd4:	6926      	ldr	r6, [r4, #16]
 8014bd6:	60c5      	str	r5, [r0, #12]
 8014bd8:	f104 0914 	add.w	r9, r4, #20
 8014bdc:	f108 0514 	add.w	r5, r8, #20
 8014be0:	f100 0e14 	add.w	lr, r0, #20
 8014be4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014be8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014bec:	f108 0210 	add.w	r2, r8, #16
 8014bf0:	46f2      	mov	sl, lr
 8014bf2:	2100      	movs	r1, #0
 8014bf4:	f859 3b04 	ldr.w	r3, [r9], #4
 8014bf8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014bfc:	fa11 f88b 	uxtah	r8, r1, fp
 8014c00:	b299      	uxth	r1, r3
 8014c02:	0c1b      	lsrs	r3, r3, #16
 8014c04:	eba8 0801 	sub.w	r8, r8, r1
 8014c08:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014c0c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014c10:	fa1f f888 	uxth.w	r8, r8
 8014c14:	1419      	asrs	r1, r3, #16
 8014c16:	454e      	cmp	r6, r9
 8014c18:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014c1c:	f84a 3b04 	str.w	r3, [sl], #4
 8014c20:	d8e8      	bhi.n	8014bf4 <__mdiff+0x80>
 8014c22:	1b33      	subs	r3, r6, r4
 8014c24:	3b15      	subs	r3, #21
 8014c26:	f023 0303 	bic.w	r3, r3, #3
 8014c2a:	3304      	adds	r3, #4
 8014c2c:	3415      	adds	r4, #21
 8014c2e:	42a6      	cmp	r6, r4
 8014c30:	bf38      	it	cc
 8014c32:	2304      	movcc	r3, #4
 8014c34:	441d      	add	r5, r3
 8014c36:	4473      	add	r3, lr
 8014c38:	469e      	mov	lr, r3
 8014c3a:	462e      	mov	r6, r5
 8014c3c:	4566      	cmp	r6, ip
 8014c3e:	d30e      	bcc.n	8014c5e <__mdiff+0xea>
 8014c40:	f10c 0203 	add.w	r2, ip, #3
 8014c44:	1b52      	subs	r2, r2, r5
 8014c46:	f022 0203 	bic.w	r2, r2, #3
 8014c4a:	3d03      	subs	r5, #3
 8014c4c:	45ac      	cmp	ip, r5
 8014c4e:	bf38      	it	cc
 8014c50:	2200      	movcc	r2, #0
 8014c52:	4413      	add	r3, r2
 8014c54:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8014c58:	b17a      	cbz	r2, 8014c7a <__mdiff+0x106>
 8014c5a:	6107      	str	r7, [r0, #16]
 8014c5c:	e7a4      	b.n	8014ba8 <__mdiff+0x34>
 8014c5e:	f856 8b04 	ldr.w	r8, [r6], #4
 8014c62:	fa11 f288 	uxtah	r2, r1, r8
 8014c66:	1414      	asrs	r4, r2, #16
 8014c68:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014c6c:	b292      	uxth	r2, r2
 8014c6e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8014c72:	f84e 2b04 	str.w	r2, [lr], #4
 8014c76:	1421      	asrs	r1, r4, #16
 8014c78:	e7e0      	b.n	8014c3c <__mdiff+0xc8>
 8014c7a:	3f01      	subs	r7, #1
 8014c7c:	e7ea      	b.n	8014c54 <__mdiff+0xe0>
 8014c7e:	bf00      	nop
 8014c80:	08015fc4 	.word	0x08015fc4
 8014c84:	08015fd5 	.word	0x08015fd5

08014c88 <__d2b>:
 8014c88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014c8c:	460f      	mov	r7, r1
 8014c8e:	2101      	movs	r1, #1
 8014c90:	ec59 8b10 	vmov	r8, r9, d0
 8014c94:	4616      	mov	r6, r2
 8014c96:	f7ff fcd5 	bl	8014644 <_Balloc>
 8014c9a:	4604      	mov	r4, r0
 8014c9c:	b930      	cbnz	r0, 8014cac <__d2b+0x24>
 8014c9e:	4602      	mov	r2, r0
 8014ca0:	4b24      	ldr	r3, [pc, #144]	; (8014d34 <__d2b+0xac>)
 8014ca2:	4825      	ldr	r0, [pc, #148]	; (8014d38 <__d2b+0xb0>)
 8014ca4:	f240 310f 	movw	r1, #783	; 0x30f
 8014ca8:	f000 fc74 	bl	8015594 <__assert_func>
 8014cac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014cb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014cb4:	bb2d      	cbnz	r5, 8014d02 <__d2b+0x7a>
 8014cb6:	9301      	str	r3, [sp, #4]
 8014cb8:	f1b8 0300 	subs.w	r3, r8, #0
 8014cbc:	d026      	beq.n	8014d0c <__d2b+0x84>
 8014cbe:	4668      	mov	r0, sp
 8014cc0:	9300      	str	r3, [sp, #0]
 8014cc2:	f7ff fd87 	bl	80147d4 <__lo0bits>
 8014cc6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014cca:	b1e8      	cbz	r0, 8014d08 <__d2b+0x80>
 8014ccc:	f1c0 0320 	rsb	r3, r0, #32
 8014cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8014cd4:	430b      	orrs	r3, r1
 8014cd6:	40c2      	lsrs	r2, r0
 8014cd8:	6163      	str	r3, [r4, #20]
 8014cda:	9201      	str	r2, [sp, #4]
 8014cdc:	9b01      	ldr	r3, [sp, #4]
 8014cde:	61a3      	str	r3, [r4, #24]
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	bf14      	ite	ne
 8014ce4:	2202      	movne	r2, #2
 8014ce6:	2201      	moveq	r2, #1
 8014ce8:	6122      	str	r2, [r4, #16]
 8014cea:	b1bd      	cbz	r5, 8014d1c <__d2b+0x94>
 8014cec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014cf0:	4405      	add	r5, r0
 8014cf2:	603d      	str	r5, [r7, #0]
 8014cf4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014cf8:	6030      	str	r0, [r6, #0]
 8014cfa:	4620      	mov	r0, r4
 8014cfc:	b003      	add	sp, #12
 8014cfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014d06:	e7d6      	b.n	8014cb6 <__d2b+0x2e>
 8014d08:	6161      	str	r1, [r4, #20]
 8014d0a:	e7e7      	b.n	8014cdc <__d2b+0x54>
 8014d0c:	a801      	add	r0, sp, #4
 8014d0e:	f7ff fd61 	bl	80147d4 <__lo0bits>
 8014d12:	9b01      	ldr	r3, [sp, #4]
 8014d14:	6163      	str	r3, [r4, #20]
 8014d16:	3020      	adds	r0, #32
 8014d18:	2201      	movs	r2, #1
 8014d1a:	e7e5      	b.n	8014ce8 <__d2b+0x60>
 8014d1c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014d20:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014d24:	6038      	str	r0, [r7, #0]
 8014d26:	6918      	ldr	r0, [r3, #16]
 8014d28:	f7ff fd34 	bl	8014794 <__hi0bits>
 8014d2c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014d30:	e7e2      	b.n	8014cf8 <__d2b+0x70>
 8014d32:	bf00      	nop
 8014d34:	08015fc4 	.word	0x08015fc4
 8014d38:	08015fd5 	.word	0x08015fd5

08014d3c <__ssputs_r>:
 8014d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d40:	688e      	ldr	r6, [r1, #8]
 8014d42:	461f      	mov	r7, r3
 8014d44:	42be      	cmp	r6, r7
 8014d46:	680b      	ldr	r3, [r1, #0]
 8014d48:	4682      	mov	sl, r0
 8014d4a:	460c      	mov	r4, r1
 8014d4c:	4690      	mov	r8, r2
 8014d4e:	d82c      	bhi.n	8014daa <__ssputs_r+0x6e>
 8014d50:	898a      	ldrh	r2, [r1, #12]
 8014d52:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014d56:	d026      	beq.n	8014da6 <__ssputs_r+0x6a>
 8014d58:	6965      	ldr	r5, [r4, #20]
 8014d5a:	6909      	ldr	r1, [r1, #16]
 8014d5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014d60:	eba3 0901 	sub.w	r9, r3, r1
 8014d64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014d68:	1c7b      	adds	r3, r7, #1
 8014d6a:	444b      	add	r3, r9
 8014d6c:	106d      	asrs	r5, r5, #1
 8014d6e:	429d      	cmp	r5, r3
 8014d70:	bf38      	it	cc
 8014d72:	461d      	movcc	r5, r3
 8014d74:	0553      	lsls	r3, r2, #21
 8014d76:	d527      	bpl.n	8014dc8 <__ssputs_r+0x8c>
 8014d78:	4629      	mov	r1, r5
 8014d7a:	f7ff fbd7 	bl	801452c <_malloc_r>
 8014d7e:	4606      	mov	r6, r0
 8014d80:	b360      	cbz	r0, 8014ddc <__ssputs_r+0xa0>
 8014d82:	6921      	ldr	r1, [r4, #16]
 8014d84:	464a      	mov	r2, r9
 8014d86:	f7fe fcd4 	bl	8013732 <memcpy>
 8014d8a:	89a3      	ldrh	r3, [r4, #12]
 8014d8c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014d94:	81a3      	strh	r3, [r4, #12]
 8014d96:	6126      	str	r6, [r4, #16]
 8014d98:	6165      	str	r5, [r4, #20]
 8014d9a:	444e      	add	r6, r9
 8014d9c:	eba5 0509 	sub.w	r5, r5, r9
 8014da0:	6026      	str	r6, [r4, #0]
 8014da2:	60a5      	str	r5, [r4, #8]
 8014da4:	463e      	mov	r6, r7
 8014da6:	42be      	cmp	r6, r7
 8014da8:	d900      	bls.n	8014dac <__ssputs_r+0x70>
 8014daa:	463e      	mov	r6, r7
 8014dac:	6820      	ldr	r0, [r4, #0]
 8014dae:	4632      	mov	r2, r6
 8014db0:	4641      	mov	r1, r8
 8014db2:	f000 fba3 	bl	80154fc <memmove>
 8014db6:	68a3      	ldr	r3, [r4, #8]
 8014db8:	1b9b      	subs	r3, r3, r6
 8014dba:	60a3      	str	r3, [r4, #8]
 8014dbc:	6823      	ldr	r3, [r4, #0]
 8014dbe:	4433      	add	r3, r6
 8014dc0:	6023      	str	r3, [r4, #0]
 8014dc2:	2000      	movs	r0, #0
 8014dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014dc8:	462a      	mov	r2, r5
 8014dca:	f000 fc29 	bl	8015620 <_realloc_r>
 8014dce:	4606      	mov	r6, r0
 8014dd0:	2800      	cmp	r0, #0
 8014dd2:	d1e0      	bne.n	8014d96 <__ssputs_r+0x5a>
 8014dd4:	6921      	ldr	r1, [r4, #16]
 8014dd6:	4650      	mov	r0, sl
 8014dd8:	f7ff fb34 	bl	8014444 <_free_r>
 8014ddc:	230c      	movs	r3, #12
 8014dde:	f8ca 3000 	str.w	r3, [sl]
 8014de2:	89a3      	ldrh	r3, [r4, #12]
 8014de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014de8:	81a3      	strh	r3, [r4, #12]
 8014dea:	f04f 30ff 	mov.w	r0, #4294967295
 8014dee:	e7e9      	b.n	8014dc4 <__ssputs_r+0x88>

08014df0 <_svfiprintf_r>:
 8014df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014df4:	4698      	mov	r8, r3
 8014df6:	898b      	ldrh	r3, [r1, #12]
 8014df8:	061b      	lsls	r3, r3, #24
 8014dfa:	b09d      	sub	sp, #116	; 0x74
 8014dfc:	4607      	mov	r7, r0
 8014dfe:	460d      	mov	r5, r1
 8014e00:	4614      	mov	r4, r2
 8014e02:	d50e      	bpl.n	8014e22 <_svfiprintf_r+0x32>
 8014e04:	690b      	ldr	r3, [r1, #16]
 8014e06:	b963      	cbnz	r3, 8014e22 <_svfiprintf_r+0x32>
 8014e08:	2140      	movs	r1, #64	; 0x40
 8014e0a:	f7ff fb8f 	bl	801452c <_malloc_r>
 8014e0e:	6028      	str	r0, [r5, #0]
 8014e10:	6128      	str	r0, [r5, #16]
 8014e12:	b920      	cbnz	r0, 8014e1e <_svfiprintf_r+0x2e>
 8014e14:	230c      	movs	r3, #12
 8014e16:	603b      	str	r3, [r7, #0]
 8014e18:	f04f 30ff 	mov.w	r0, #4294967295
 8014e1c:	e0d0      	b.n	8014fc0 <_svfiprintf_r+0x1d0>
 8014e1e:	2340      	movs	r3, #64	; 0x40
 8014e20:	616b      	str	r3, [r5, #20]
 8014e22:	2300      	movs	r3, #0
 8014e24:	9309      	str	r3, [sp, #36]	; 0x24
 8014e26:	2320      	movs	r3, #32
 8014e28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014e2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014e30:	2330      	movs	r3, #48	; 0x30
 8014e32:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8014fd8 <_svfiprintf_r+0x1e8>
 8014e36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014e3a:	f04f 0901 	mov.w	r9, #1
 8014e3e:	4623      	mov	r3, r4
 8014e40:	469a      	mov	sl, r3
 8014e42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014e46:	b10a      	cbz	r2, 8014e4c <_svfiprintf_r+0x5c>
 8014e48:	2a25      	cmp	r2, #37	; 0x25
 8014e4a:	d1f9      	bne.n	8014e40 <_svfiprintf_r+0x50>
 8014e4c:	ebba 0b04 	subs.w	fp, sl, r4
 8014e50:	d00b      	beq.n	8014e6a <_svfiprintf_r+0x7a>
 8014e52:	465b      	mov	r3, fp
 8014e54:	4622      	mov	r2, r4
 8014e56:	4629      	mov	r1, r5
 8014e58:	4638      	mov	r0, r7
 8014e5a:	f7ff ff6f 	bl	8014d3c <__ssputs_r>
 8014e5e:	3001      	adds	r0, #1
 8014e60:	f000 80a9 	beq.w	8014fb6 <_svfiprintf_r+0x1c6>
 8014e64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014e66:	445a      	add	r2, fp
 8014e68:	9209      	str	r2, [sp, #36]	; 0x24
 8014e6a:	f89a 3000 	ldrb.w	r3, [sl]
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	f000 80a1 	beq.w	8014fb6 <_svfiprintf_r+0x1c6>
 8014e74:	2300      	movs	r3, #0
 8014e76:	f04f 32ff 	mov.w	r2, #4294967295
 8014e7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014e7e:	f10a 0a01 	add.w	sl, sl, #1
 8014e82:	9304      	str	r3, [sp, #16]
 8014e84:	9307      	str	r3, [sp, #28]
 8014e86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014e8a:	931a      	str	r3, [sp, #104]	; 0x68
 8014e8c:	4654      	mov	r4, sl
 8014e8e:	2205      	movs	r2, #5
 8014e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e94:	4850      	ldr	r0, [pc, #320]	; (8014fd8 <_svfiprintf_r+0x1e8>)
 8014e96:	f7eb f9bb 	bl	8000210 <memchr>
 8014e9a:	9a04      	ldr	r2, [sp, #16]
 8014e9c:	b9d8      	cbnz	r0, 8014ed6 <_svfiprintf_r+0xe6>
 8014e9e:	06d0      	lsls	r0, r2, #27
 8014ea0:	bf44      	itt	mi
 8014ea2:	2320      	movmi	r3, #32
 8014ea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014ea8:	0711      	lsls	r1, r2, #28
 8014eaa:	bf44      	itt	mi
 8014eac:	232b      	movmi	r3, #43	; 0x2b
 8014eae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014eb2:	f89a 3000 	ldrb.w	r3, [sl]
 8014eb6:	2b2a      	cmp	r3, #42	; 0x2a
 8014eb8:	d015      	beq.n	8014ee6 <_svfiprintf_r+0xf6>
 8014eba:	9a07      	ldr	r2, [sp, #28]
 8014ebc:	4654      	mov	r4, sl
 8014ebe:	2000      	movs	r0, #0
 8014ec0:	f04f 0c0a 	mov.w	ip, #10
 8014ec4:	4621      	mov	r1, r4
 8014ec6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014eca:	3b30      	subs	r3, #48	; 0x30
 8014ecc:	2b09      	cmp	r3, #9
 8014ece:	d94d      	bls.n	8014f6c <_svfiprintf_r+0x17c>
 8014ed0:	b1b0      	cbz	r0, 8014f00 <_svfiprintf_r+0x110>
 8014ed2:	9207      	str	r2, [sp, #28]
 8014ed4:	e014      	b.n	8014f00 <_svfiprintf_r+0x110>
 8014ed6:	eba0 0308 	sub.w	r3, r0, r8
 8014eda:	fa09 f303 	lsl.w	r3, r9, r3
 8014ede:	4313      	orrs	r3, r2
 8014ee0:	9304      	str	r3, [sp, #16]
 8014ee2:	46a2      	mov	sl, r4
 8014ee4:	e7d2      	b.n	8014e8c <_svfiprintf_r+0x9c>
 8014ee6:	9b03      	ldr	r3, [sp, #12]
 8014ee8:	1d19      	adds	r1, r3, #4
 8014eea:	681b      	ldr	r3, [r3, #0]
 8014eec:	9103      	str	r1, [sp, #12]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	bfbb      	ittet	lt
 8014ef2:	425b      	neglt	r3, r3
 8014ef4:	f042 0202 	orrlt.w	r2, r2, #2
 8014ef8:	9307      	strge	r3, [sp, #28]
 8014efa:	9307      	strlt	r3, [sp, #28]
 8014efc:	bfb8      	it	lt
 8014efe:	9204      	strlt	r2, [sp, #16]
 8014f00:	7823      	ldrb	r3, [r4, #0]
 8014f02:	2b2e      	cmp	r3, #46	; 0x2e
 8014f04:	d10c      	bne.n	8014f20 <_svfiprintf_r+0x130>
 8014f06:	7863      	ldrb	r3, [r4, #1]
 8014f08:	2b2a      	cmp	r3, #42	; 0x2a
 8014f0a:	d134      	bne.n	8014f76 <_svfiprintf_r+0x186>
 8014f0c:	9b03      	ldr	r3, [sp, #12]
 8014f0e:	1d1a      	adds	r2, r3, #4
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	9203      	str	r2, [sp, #12]
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	bfb8      	it	lt
 8014f18:	f04f 33ff 	movlt.w	r3, #4294967295
 8014f1c:	3402      	adds	r4, #2
 8014f1e:	9305      	str	r3, [sp, #20]
 8014f20:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8014fe8 <_svfiprintf_r+0x1f8>
 8014f24:	7821      	ldrb	r1, [r4, #0]
 8014f26:	2203      	movs	r2, #3
 8014f28:	4650      	mov	r0, sl
 8014f2a:	f7eb f971 	bl	8000210 <memchr>
 8014f2e:	b138      	cbz	r0, 8014f40 <_svfiprintf_r+0x150>
 8014f30:	9b04      	ldr	r3, [sp, #16]
 8014f32:	eba0 000a 	sub.w	r0, r0, sl
 8014f36:	2240      	movs	r2, #64	; 0x40
 8014f38:	4082      	lsls	r2, r0
 8014f3a:	4313      	orrs	r3, r2
 8014f3c:	3401      	adds	r4, #1
 8014f3e:	9304      	str	r3, [sp, #16]
 8014f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f44:	4825      	ldr	r0, [pc, #148]	; (8014fdc <_svfiprintf_r+0x1ec>)
 8014f46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014f4a:	2206      	movs	r2, #6
 8014f4c:	f7eb f960 	bl	8000210 <memchr>
 8014f50:	2800      	cmp	r0, #0
 8014f52:	d038      	beq.n	8014fc6 <_svfiprintf_r+0x1d6>
 8014f54:	4b22      	ldr	r3, [pc, #136]	; (8014fe0 <_svfiprintf_r+0x1f0>)
 8014f56:	bb1b      	cbnz	r3, 8014fa0 <_svfiprintf_r+0x1b0>
 8014f58:	9b03      	ldr	r3, [sp, #12]
 8014f5a:	3307      	adds	r3, #7
 8014f5c:	f023 0307 	bic.w	r3, r3, #7
 8014f60:	3308      	adds	r3, #8
 8014f62:	9303      	str	r3, [sp, #12]
 8014f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f66:	4433      	add	r3, r6
 8014f68:	9309      	str	r3, [sp, #36]	; 0x24
 8014f6a:	e768      	b.n	8014e3e <_svfiprintf_r+0x4e>
 8014f6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014f70:	460c      	mov	r4, r1
 8014f72:	2001      	movs	r0, #1
 8014f74:	e7a6      	b.n	8014ec4 <_svfiprintf_r+0xd4>
 8014f76:	2300      	movs	r3, #0
 8014f78:	3401      	adds	r4, #1
 8014f7a:	9305      	str	r3, [sp, #20]
 8014f7c:	4619      	mov	r1, r3
 8014f7e:	f04f 0c0a 	mov.w	ip, #10
 8014f82:	4620      	mov	r0, r4
 8014f84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014f88:	3a30      	subs	r2, #48	; 0x30
 8014f8a:	2a09      	cmp	r2, #9
 8014f8c:	d903      	bls.n	8014f96 <_svfiprintf_r+0x1a6>
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d0c6      	beq.n	8014f20 <_svfiprintf_r+0x130>
 8014f92:	9105      	str	r1, [sp, #20]
 8014f94:	e7c4      	b.n	8014f20 <_svfiprintf_r+0x130>
 8014f96:	fb0c 2101 	mla	r1, ip, r1, r2
 8014f9a:	4604      	mov	r4, r0
 8014f9c:	2301      	movs	r3, #1
 8014f9e:	e7f0      	b.n	8014f82 <_svfiprintf_r+0x192>
 8014fa0:	ab03      	add	r3, sp, #12
 8014fa2:	9300      	str	r3, [sp, #0]
 8014fa4:	462a      	mov	r2, r5
 8014fa6:	4b0f      	ldr	r3, [pc, #60]	; (8014fe4 <_svfiprintf_r+0x1f4>)
 8014fa8:	a904      	add	r1, sp, #16
 8014faa:	4638      	mov	r0, r7
 8014fac:	f7fd fcf6 	bl	801299c <_printf_float>
 8014fb0:	1c42      	adds	r2, r0, #1
 8014fb2:	4606      	mov	r6, r0
 8014fb4:	d1d6      	bne.n	8014f64 <_svfiprintf_r+0x174>
 8014fb6:	89ab      	ldrh	r3, [r5, #12]
 8014fb8:	065b      	lsls	r3, r3, #25
 8014fba:	f53f af2d 	bmi.w	8014e18 <_svfiprintf_r+0x28>
 8014fbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014fc0:	b01d      	add	sp, #116	; 0x74
 8014fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fc6:	ab03      	add	r3, sp, #12
 8014fc8:	9300      	str	r3, [sp, #0]
 8014fca:	462a      	mov	r2, r5
 8014fcc:	4b05      	ldr	r3, [pc, #20]	; (8014fe4 <_svfiprintf_r+0x1f4>)
 8014fce:	a904      	add	r1, sp, #16
 8014fd0:	4638      	mov	r0, r7
 8014fd2:	f7fd ff87 	bl	8012ee4 <_printf_i>
 8014fd6:	e7eb      	b.n	8014fb0 <_svfiprintf_r+0x1c0>
 8014fd8:	0801612c 	.word	0x0801612c
 8014fdc:	08016136 	.word	0x08016136
 8014fe0:	0801299d 	.word	0x0801299d
 8014fe4:	08014d3d 	.word	0x08014d3d
 8014fe8:	08016132 	.word	0x08016132

08014fec <__sfputc_r>:
 8014fec:	6893      	ldr	r3, [r2, #8]
 8014fee:	3b01      	subs	r3, #1
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	b410      	push	{r4}
 8014ff4:	6093      	str	r3, [r2, #8]
 8014ff6:	da08      	bge.n	801500a <__sfputc_r+0x1e>
 8014ff8:	6994      	ldr	r4, [r2, #24]
 8014ffa:	42a3      	cmp	r3, r4
 8014ffc:	db01      	blt.n	8015002 <__sfputc_r+0x16>
 8014ffe:	290a      	cmp	r1, #10
 8015000:	d103      	bne.n	801500a <__sfputc_r+0x1e>
 8015002:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015006:	f7fe ba2a 	b.w	801345e <__swbuf_r>
 801500a:	6813      	ldr	r3, [r2, #0]
 801500c:	1c58      	adds	r0, r3, #1
 801500e:	6010      	str	r0, [r2, #0]
 8015010:	7019      	strb	r1, [r3, #0]
 8015012:	4608      	mov	r0, r1
 8015014:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015018:	4770      	bx	lr

0801501a <__sfputs_r>:
 801501a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801501c:	4606      	mov	r6, r0
 801501e:	460f      	mov	r7, r1
 8015020:	4614      	mov	r4, r2
 8015022:	18d5      	adds	r5, r2, r3
 8015024:	42ac      	cmp	r4, r5
 8015026:	d101      	bne.n	801502c <__sfputs_r+0x12>
 8015028:	2000      	movs	r0, #0
 801502a:	e007      	b.n	801503c <__sfputs_r+0x22>
 801502c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015030:	463a      	mov	r2, r7
 8015032:	4630      	mov	r0, r6
 8015034:	f7ff ffda 	bl	8014fec <__sfputc_r>
 8015038:	1c43      	adds	r3, r0, #1
 801503a:	d1f3      	bne.n	8015024 <__sfputs_r+0xa>
 801503c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015040 <_vfiprintf_r>:
 8015040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015044:	460d      	mov	r5, r1
 8015046:	b09d      	sub	sp, #116	; 0x74
 8015048:	4614      	mov	r4, r2
 801504a:	4698      	mov	r8, r3
 801504c:	4606      	mov	r6, r0
 801504e:	b118      	cbz	r0, 8015058 <_vfiprintf_r+0x18>
 8015050:	6a03      	ldr	r3, [r0, #32]
 8015052:	b90b      	cbnz	r3, 8015058 <_vfiprintf_r+0x18>
 8015054:	f7fe f8f4 	bl	8013240 <__sinit>
 8015058:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801505a:	07d9      	lsls	r1, r3, #31
 801505c:	d405      	bmi.n	801506a <_vfiprintf_r+0x2a>
 801505e:	89ab      	ldrh	r3, [r5, #12]
 8015060:	059a      	lsls	r2, r3, #22
 8015062:	d402      	bmi.n	801506a <_vfiprintf_r+0x2a>
 8015064:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015066:	f7fe fb62 	bl	801372e <__retarget_lock_acquire_recursive>
 801506a:	89ab      	ldrh	r3, [r5, #12]
 801506c:	071b      	lsls	r3, r3, #28
 801506e:	d501      	bpl.n	8015074 <_vfiprintf_r+0x34>
 8015070:	692b      	ldr	r3, [r5, #16]
 8015072:	b99b      	cbnz	r3, 801509c <_vfiprintf_r+0x5c>
 8015074:	4629      	mov	r1, r5
 8015076:	4630      	mov	r0, r6
 8015078:	f7fe fa2e 	bl	80134d8 <__swsetup_r>
 801507c:	b170      	cbz	r0, 801509c <_vfiprintf_r+0x5c>
 801507e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015080:	07dc      	lsls	r4, r3, #31
 8015082:	d504      	bpl.n	801508e <_vfiprintf_r+0x4e>
 8015084:	f04f 30ff 	mov.w	r0, #4294967295
 8015088:	b01d      	add	sp, #116	; 0x74
 801508a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801508e:	89ab      	ldrh	r3, [r5, #12]
 8015090:	0598      	lsls	r0, r3, #22
 8015092:	d4f7      	bmi.n	8015084 <_vfiprintf_r+0x44>
 8015094:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015096:	f7fe fb4b 	bl	8013730 <__retarget_lock_release_recursive>
 801509a:	e7f3      	b.n	8015084 <_vfiprintf_r+0x44>
 801509c:	2300      	movs	r3, #0
 801509e:	9309      	str	r3, [sp, #36]	; 0x24
 80150a0:	2320      	movs	r3, #32
 80150a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80150a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80150aa:	2330      	movs	r3, #48	; 0x30
 80150ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8015260 <_vfiprintf_r+0x220>
 80150b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80150b4:	f04f 0901 	mov.w	r9, #1
 80150b8:	4623      	mov	r3, r4
 80150ba:	469a      	mov	sl, r3
 80150bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80150c0:	b10a      	cbz	r2, 80150c6 <_vfiprintf_r+0x86>
 80150c2:	2a25      	cmp	r2, #37	; 0x25
 80150c4:	d1f9      	bne.n	80150ba <_vfiprintf_r+0x7a>
 80150c6:	ebba 0b04 	subs.w	fp, sl, r4
 80150ca:	d00b      	beq.n	80150e4 <_vfiprintf_r+0xa4>
 80150cc:	465b      	mov	r3, fp
 80150ce:	4622      	mov	r2, r4
 80150d0:	4629      	mov	r1, r5
 80150d2:	4630      	mov	r0, r6
 80150d4:	f7ff ffa1 	bl	801501a <__sfputs_r>
 80150d8:	3001      	adds	r0, #1
 80150da:	f000 80a9 	beq.w	8015230 <_vfiprintf_r+0x1f0>
 80150de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80150e0:	445a      	add	r2, fp
 80150e2:	9209      	str	r2, [sp, #36]	; 0x24
 80150e4:	f89a 3000 	ldrb.w	r3, [sl]
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	f000 80a1 	beq.w	8015230 <_vfiprintf_r+0x1f0>
 80150ee:	2300      	movs	r3, #0
 80150f0:	f04f 32ff 	mov.w	r2, #4294967295
 80150f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80150f8:	f10a 0a01 	add.w	sl, sl, #1
 80150fc:	9304      	str	r3, [sp, #16]
 80150fe:	9307      	str	r3, [sp, #28]
 8015100:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015104:	931a      	str	r3, [sp, #104]	; 0x68
 8015106:	4654      	mov	r4, sl
 8015108:	2205      	movs	r2, #5
 801510a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801510e:	4854      	ldr	r0, [pc, #336]	; (8015260 <_vfiprintf_r+0x220>)
 8015110:	f7eb f87e 	bl	8000210 <memchr>
 8015114:	9a04      	ldr	r2, [sp, #16]
 8015116:	b9d8      	cbnz	r0, 8015150 <_vfiprintf_r+0x110>
 8015118:	06d1      	lsls	r1, r2, #27
 801511a:	bf44      	itt	mi
 801511c:	2320      	movmi	r3, #32
 801511e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015122:	0713      	lsls	r3, r2, #28
 8015124:	bf44      	itt	mi
 8015126:	232b      	movmi	r3, #43	; 0x2b
 8015128:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801512c:	f89a 3000 	ldrb.w	r3, [sl]
 8015130:	2b2a      	cmp	r3, #42	; 0x2a
 8015132:	d015      	beq.n	8015160 <_vfiprintf_r+0x120>
 8015134:	9a07      	ldr	r2, [sp, #28]
 8015136:	4654      	mov	r4, sl
 8015138:	2000      	movs	r0, #0
 801513a:	f04f 0c0a 	mov.w	ip, #10
 801513e:	4621      	mov	r1, r4
 8015140:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015144:	3b30      	subs	r3, #48	; 0x30
 8015146:	2b09      	cmp	r3, #9
 8015148:	d94d      	bls.n	80151e6 <_vfiprintf_r+0x1a6>
 801514a:	b1b0      	cbz	r0, 801517a <_vfiprintf_r+0x13a>
 801514c:	9207      	str	r2, [sp, #28]
 801514e:	e014      	b.n	801517a <_vfiprintf_r+0x13a>
 8015150:	eba0 0308 	sub.w	r3, r0, r8
 8015154:	fa09 f303 	lsl.w	r3, r9, r3
 8015158:	4313      	orrs	r3, r2
 801515a:	9304      	str	r3, [sp, #16]
 801515c:	46a2      	mov	sl, r4
 801515e:	e7d2      	b.n	8015106 <_vfiprintf_r+0xc6>
 8015160:	9b03      	ldr	r3, [sp, #12]
 8015162:	1d19      	adds	r1, r3, #4
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	9103      	str	r1, [sp, #12]
 8015168:	2b00      	cmp	r3, #0
 801516a:	bfbb      	ittet	lt
 801516c:	425b      	neglt	r3, r3
 801516e:	f042 0202 	orrlt.w	r2, r2, #2
 8015172:	9307      	strge	r3, [sp, #28]
 8015174:	9307      	strlt	r3, [sp, #28]
 8015176:	bfb8      	it	lt
 8015178:	9204      	strlt	r2, [sp, #16]
 801517a:	7823      	ldrb	r3, [r4, #0]
 801517c:	2b2e      	cmp	r3, #46	; 0x2e
 801517e:	d10c      	bne.n	801519a <_vfiprintf_r+0x15a>
 8015180:	7863      	ldrb	r3, [r4, #1]
 8015182:	2b2a      	cmp	r3, #42	; 0x2a
 8015184:	d134      	bne.n	80151f0 <_vfiprintf_r+0x1b0>
 8015186:	9b03      	ldr	r3, [sp, #12]
 8015188:	1d1a      	adds	r2, r3, #4
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	9203      	str	r2, [sp, #12]
 801518e:	2b00      	cmp	r3, #0
 8015190:	bfb8      	it	lt
 8015192:	f04f 33ff 	movlt.w	r3, #4294967295
 8015196:	3402      	adds	r4, #2
 8015198:	9305      	str	r3, [sp, #20]
 801519a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8015270 <_vfiprintf_r+0x230>
 801519e:	7821      	ldrb	r1, [r4, #0]
 80151a0:	2203      	movs	r2, #3
 80151a2:	4650      	mov	r0, sl
 80151a4:	f7eb f834 	bl	8000210 <memchr>
 80151a8:	b138      	cbz	r0, 80151ba <_vfiprintf_r+0x17a>
 80151aa:	9b04      	ldr	r3, [sp, #16]
 80151ac:	eba0 000a 	sub.w	r0, r0, sl
 80151b0:	2240      	movs	r2, #64	; 0x40
 80151b2:	4082      	lsls	r2, r0
 80151b4:	4313      	orrs	r3, r2
 80151b6:	3401      	adds	r4, #1
 80151b8:	9304      	str	r3, [sp, #16]
 80151ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80151be:	4829      	ldr	r0, [pc, #164]	; (8015264 <_vfiprintf_r+0x224>)
 80151c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80151c4:	2206      	movs	r2, #6
 80151c6:	f7eb f823 	bl	8000210 <memchr>
 80151ca:	2800      	cmp	r0, #0
 80151cc:	d03f      	beq.n	801524e <_vfiprintf_r+0x20e>
 80151ce:	4b26      	ldr	r3, [pc, #152]	; (8015268 <_vfiprintf_r+0x228>)
 80151d0:	bb1b      	cbnz	r3, 801521a <_vfiprintf_r+0x1da>
 80151d2:	9b03      	ldr	r3, [sp, #12]
 80151d4:	3307      	adds	r3, #7
 80151d6:	f023 0307 	bic.w	r3, r3, #7
 80151da:	3308      	adds	r3, #8
 80151dc:	9303      	str	r3, [sp, #12]
 80151de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80151e0:	443b      	add	r3, r7
 80151e2:	9309      	str	r3, [sp, #36]	; 0x24
 80151e4:	e768      	b.n	80150b8 <_vfiprintf_r+0x78>
 80151e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80151ea:	460c      	mov	r4, r1
 80151ec:	2001      	movs	r0, #1
 80151ee:	e7a6      	b.n	801513e <_vfiprintf_r+0xfe>
 80151f0:	2300      	movs	r3, #0
 80151f2:	3401      	adds	r4, #1
 80151f4:	9305      	str	r3, [sp, #20]
 80151f6:	4619      	mov	r1, r3
 80151f8:	f04f 0c0a 	mov.w	ip, #10
 80151fc:	4620      	mov	r0, r4
 80151fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015202:	3a30      	subs	r2, #48	; 0x30
 8015204:	2a09      	cmp	r2, #9
 8015206:	d903      	bls.n	8015210 <_vfiprintf_r+0x1d0>
 8015208:	2b00      	cmp	r3, #0
 801520a:	d0c6      	beq.n	801519a <_vfiprintf_r+0x15a>
 801520c:	9105      	str	r1, [sp, #20]
 801520e:	e7c4      	b.n	801519a <_vfiprintf_r+0x15a>
 8015210:	fb0c 2101 	mla	r1, ip, r1, r2
 8015214:	4604      	mov	r4, r0
 8015216:	2301      	movs	r3, #1
 8015218:	e7f0      	b.n	80151fc <_vfiprintf_r+0x1bc>
 801521a:	ab03      	add	r3, sp, #12
 801521c:	9300      	str	r3, [sp, #0]
 801521e:	462a      	mov	r2, r5
 8015220:	4b12      	ldr	r3, [pc, #72]	; (801526c <_vfiprintf_r+0x22c>)
 8015222:	a904      	add	r1, sp, #16
 8015224:	4630      	mov	r0, r6
 8015226:	f7fd fbb9 	bl	801299c <_printf_float>
 801522a:	4607      	mov	r7, r0
 801522c:	1c78      	adds	r0, r7, #1
 801522e:	d1d6      	bne.n	80151de <_vfiprintf_r+0x19e>
 8015230:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015232:	07d9      	lsls	r1, r3, #31
 8015234:	d405      	bmi.n	8015242 <_vfiprintf_r+0x202>
 8015236:	89ab      	ldrh	r3, [r5, #12]
 8015238:	059a      	lsls	r2, r3, #22
 801523a:	d402      	bmi.n	8015242 <_vfiprintf_r+0x202>
 801523c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801523e:	f7fe fa77 	bl	8013730 <__retarget_lock_release_recursive>
 8015242:	89ab      	ldrh	r3, [r5, #12]
 8015244:	065b      	lsls	r3, r3, #25
 8015246:	f53f af1d 	bmi.w	8015084 <_vfiprintf_r+0x44>
 801524a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801524c:	e71c      	b.n	8015088 <_vfiprintf_r+0x48>
 801524e:	ab03      	add	r3, sp, #12
 8015250:	9300      	str	r3, [sp, #0]
 8015252:	462a      	mov	r2, r5
 8015254:	4b05      	ldr	r3, [pc, #20]	; (801526c <_vfiprintf_r+0x22c>)
 8015256:	a904      	add	r1, sp, #16
 8015258:	4630      	mov	r0, r6
 801525a:	f7fd fe43 	bl	8012ee4 <_printf_i>
 801525e:	e7e4      	b.n	801522a <_vfiprintf_r+0x1ea>
 8015260:	0801612c 	.word	0x0801612c
 8015264:	08016136 	.word	0x08016136
 8015268:	0801299d 	.word	0x0801299d
 801526c:	0801501b 	.word	0x0801501b
 8015270:	08016132 	.word	0x08016132

08015274 <__sflush_r>:
 8015274:	898a      	ldrh	r2, [r1, #12]
 8015276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801527a:	4605      	mov	r5, r0
 801527c:	0710      	lsls	r0, r2, #28
 801527e:	460c      	mov	r4, r1
 8015280:	d458      	bmi.n	8015334 <__sflush_r+0xc0>
 8015282:	684b      	ldr	r3, [r1, #4]
 8015284:	2b00      	cmp	r3, #0
 8015286:	dc05      	bgt.n	8015294 <__sflush_r+0x20>
 8015288:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801528a:	2b00      	cmp	r3, #0
 801528c:	dc02      	bgt.n	8015294 <__sflush_r+0x20>
 801528e:	2000      	movs	r0, #0
 8015290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015294:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015296:	2e00      	cmp	r6, #0
 8015298:	d0f9      	beq.n	801528e <__sflush_r+0x1a>
 801529a:	2300      	movs	r3, #0
 801529c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80152a0:	682f      	ldr	r7, [r5, #0]
 80152a2:	6a21      	ldr	r1, [r4, #32]
 80152a4:	602b      	str	r3, [r5, #0]
 80152a6:	d032      	beq.n	801530e <__sflush_r+0x9a>
 80152a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80152aa:	89a3      	ldrh	r3, [r4, #12]
 80152ac:	075a      	lsls	r2, r3, #29
 80152ae:	d505      	bpl.n	80152bc <__sflush_r+0x48>
 80152b0:	6863      	ldr	r3, [r4, #4]
 80152b2:	1ac0      	subs	r0, r0, r3
 80152b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80152b6:	b10b      	cbz	r3, 80152bc <__sflush_r+0x48>
 80152b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80152ba:	1ac0      	subs	r0, r0, r3
 80152bc:	2300      	movs	r3, #0
 80152be:	4602      	mov	r2, r0
 80152c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80152c2:	6a21      	ldr	r1, [r4, #32]
 80152c4:	4628      	mov	r0, r5
 80152c6:	47b0      	blx	r6
 80152c8:	1c43      	adds	r3, r0, #1
 80152ca:	89a3      	ldrh	r3, [r4, #12]
 80152cc:	d106      	bne.n	80152dc <__sflush_r+0x68>
 80152ce:	6829      	ldr	r1, [r5, #0]
 80152d0:	291d      	cmp	r1, #29
 80152d2:	d82b      	bhi.n	801532c <__sflush_r+0xb8>
 80152d4:	4a29      	ldr	r2, [pc, #164]	; (801537c <__sflush_r+0x108>)
 80152d6:	410a      	asrs	r2, r1
 80152d8:	07d6      	lsls	r6, r2, #31
 80152da:	d427      	bmi.n	801532c <__sflush_r+0xb8>
 80152dc:	2200      	movs	r2, #0
 80152de:	6062      	str	r2, [r4, #4]
 80152e0:	04d9      	lsls	r1, r3, #19
 80152e2:	6922      	ldr	r2, [r4, #16]
 80152e4:	6022      	str	r2, [r4, #0]
 80152e6:	d504      	bpl.n	80152f2 <__sflush_r+0x7e>
 80152e8:	1c42      	adds	r2, r0, #1
 80152ea:	d101      	bne.n	80152f0 <__sflush_r+0x7c>
 80152ec:	682b      	ldr	r3, [r5, #0]
 80152ee:	b903      	cbnz	r3, 80152f2 <__sflush_r+0x7e>
 80152f0:	6560      	str	r0, [r4, #84]	; 0x54
 80152f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80152f4:	602f      	str	r7, [r5, #0]
 80152f6:	2900      	cmp	r1, #0
 80152f8:	d0c9      	beq.n	801528e <__sflush_r+0x1a>
 80152fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80152fe:	4299      	cmp	r1, r3
 8015300:	d002      	beq.n	8015308 <__sflush_r+0x94>
 8015302:	4628      	mov	r0, r5
 8015304:	f7ff f89e 	bl	8014444 <_free_r>
 8015308:	2000      	movs	r0, #0
 801530a:	6360      	str	r0, [r4, #52]	; 0x34
 801530c:	e7c0      	b.n	8015290 <__sflush_r+0x1c>
 801530e:	2301      	movs	r3, #1
 8015310:	4628      	mov	r0, r5
 8015312:	47b0      	blx	r6
 8015314:	1c41      	adds	r1, r0, #1
 8015316:	d1c8      	bne.n	80152aa <__sflush_r+0x36>
 8015318:	682b      	ldr	r3, [r5, #0]
 801531a:	2b00      	cmp	r3, #0
 801531c:	d0c5      	beq.n	80152aa <__sflush_r+0x36>
 801531e:	2b1d      	cmp	r3, #29
 8015320:	d001      	beq.n	8015326 <__sflush_r+0xb2>
 8015322:	2b16      	cmp	r3, #22
 8015324:	d101      	bne.n	801532a <__sflush_r+0xb6>
 8015326:	602f      	str	r7, [r5, #0]
 8015328:	e7b1      	b.n	801528e <__sflush_r+0x1a>
 801532a:	89a3      	ldrh	r3, [r4, #12]
 801532c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015330:	81a3      	strh	r3, [r4, #12]
 8015332:	e7ad      	b.n	8015290 <__sflush_r+0x1c>
 8015334:	690f      	ldr	r7, [r1, #16]
 8015336:	2f00      	cmp	r7, #0
 8015338:	d0a9      	beq.n	801528e <__sflush_r+0x1a>
 801533a:	0793      	lsls	r3, r2, #30
 801533c:	680e      	ldr	r6, [r1, #0]
 801533e:	bf08      	it	eq
 8015340:	694b      	ldreq	r3, [r1, #20]
 8015342:	600f      	str	r7, [r1, #0]
 8015344:	bf18      	it	ne
 8015346:	2300      	movne	r3, #0
 8015348:	eba6 0807 	sub.w	r8, r6, r7
 801534c:	608b      	str	r3, [r1, #8]
 801534e:	f1b8 0f00 	cmp.w	r8, #0
 8015352:	dd9c      	ble.n	801528e <__sflush_r+0x1a>
 8015354:	6a21      	ldr	r1, [r4, #32]
 8015356:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015358:	4643      	mov	r3, r8
 801535a:	463a      	mov	r2, r7
 801535c:	4628      	mov	r0, r5
 801535e:	47b0      	blx	r6
 8015360:	2800      	cmp	r0, #0
 8015362:	dc06      	bgt.n	8015372 <__sflush_r+0xfe>
 8015364:	89a3      	ldrh	r3, [r4, #12]
 8015366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801536a:	81a3      	strh	r3, [r4, #12]
 801536c:	f04f 30ff 	mov.w	r0, #4294967295
 8015370:	e78e      	b.n	8015290 <__sflush_r+0x1c>
 8015372:	4407      	add	r7, r0
 8015374:	eba8 0800 	sub.w	r8, r8, r0
 8015378:	e7e9      	b.n	801534e <__sflush_r+0xda>
 801537a:	bf00      	nop
 801537c:	dfbffffe 	.word	0xdfbffffe

08015380 <_fflush_r>:
 8015380:	b538      	push	{r3, r4, r5, lr}
 8015382:	690b      	ldr	r3, [r1, #16]
 8015384:	4605      	mov	r5, r0
 8015386:	460c      	mov	r4, r1
 8015388:	b913      	cbnz	r3, 8015390 <_fflush_r+0x10>
 801538a:	2500      	movs	r5, #0
 801538c:	4628      	mov	r0, r5
 801538e:	bd38      	pop	{r3, r4, r5, pc}
 8015390:	b118      	cbz	r0, 801539a <_fflush_r+0x1a>
 8015392:	6a03      	ldr	r3, [r0, #32]
 8015394:	b90b      	cbnz	r3, 801539a <_fflush_r+0x1a>
 8015396:	f7fd ff53 	bl	8013240 <__sinit>
 801539a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d0f3      	beq.n	801538a <_fflush_r+0xa>
 80153a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80153a4:	07d0      	lsls	r0, r2, #31
 80153a6:	d404      	bmi.n	80153b2 <_fflush_r+0x32>
 80153a8:	0599      	lsls	r1, r3, #22
 80153aa:	d402      	bmi.n	80153b2 <_fflush_r+0x32>
 80153ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80153ae:	f7fe f9be 	bl	801372e <__retarget_lock_acquire_recursive>
 80153b2:	4628      	mov	r0, r5
 80153b4:	4621      	mov	r1, r4
 80153b6:	f7ff ff5d 	bl	8015274 <__sflush_r>
 80153ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80153bc:	07da      	lsls	r2, r3, #31
 80153be:	4605      	mov	r5, r0
 80153c0:	d4e4      	bmi.n	801538c <_fflush_r+0xc>
 80153c2:	89a3      	ldrh	r3, [r4, #12]
 80153c4:	059b      	lsls	r3, r3, #22
 80153c6:	d4e1      	bmi.n	801538c <_fflush_r+0xc>
 80153c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80153ca:	f7fe f9b1 	bl	8013730 <__retarget_lock_release_recursive>
 80153ce:	e7dd      	b.n	801538c <_fflush_r+0xc>

080153d0 <__swhatbuf_r>:
 80153d0:	b570      	push	{r4, r5, r6, lr}
 80153d2:	460c      	mov	r4, r1
 80153d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153d8:	2900      	cmp	r1, #0
 80153da:	b096      	sub	sp, #88	; 0x58
 80153dc:	4615      	mov	r5, r2
 80153de:	461e      	mov	r6, r3
 80153e0:	da0d      	bge.n	80153fe <__swhatbuf_r+0x2e>
 80153e2:	89a3      	ldrh	r3, [r4, #12]
 80153e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80153e8:	f04f 0100 	mov.w	r1, #0
 80153ec:	bf0c      	ite	eq
 80153ee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80153f2:	2340      	movne	r3, #64	; 0x40
 80153f4:	2000      	movs	r0, #0
 80153f6:	6031      	str	r1, [r6, #0]
 80153f8:	602b      	str	r3, [r5, #0]
 80153fa:	b016      	add	sp, #88	; 0x58
 80153fc:	bd70      	pop	{r4, r5, r6, pc}
 80153fe:	466a      	mov	r2, sp
 8015400:	f000 f896 	bl	8015530 <_fstat_r>
 8015404:	2800      	cmp	r0, #0
 8015406:	dbec      	blt.n	80153e2 <__swhatbuf_r+0x12>
 8015408:	9901      	ldr	r1, [sp, #4]
 801540a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801540e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8015412:	4259      	negs	r1, r3
 8015414:	4159      	adcs	r1, r3
 8015416:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801541a:	e7eb      	b.n	80153f4 <__swhatbuf_r+0x24>

0801541c <__smakebuf_r>:
 801541c:	898b      	ldrh	r3, [r1, #12]
 801541e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015420:	079d      	lsls	r5, r3, #30
 8015422:	4606      	mov	r6, r0
 8015424:	460c      	mov	r4, r1
 8015426:	d507      	bpl.n	8015438 <__smakebuf_r+0x1c>
 8015428:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801542c:	6023      	str	r3, [r4, #0]
 801542e:	6123      	str	r3, [r4, #16]
 8015430:	2301      	movs	r3, #1
 8015432:	6163      	str	r3, [r4, #20]
 8015434:	b002      	add	sp, #8
 8015436:	bd70      	pop	{r4, r5, r6, pc}
 8015438:	ab01      	add	r3, sp, #4
 801543a:	466a      	mov	r2, sp
 801543c:	f7ff ffc8 	bl	80153d0 <__swhatbuf_r>
 8015440:	9900      	ldr	r1, [sp, #0]
 8015442:	4605      	mov	r5, r0
 8015444:	4630      	mov	r0, r6
 8015446:	f7ff f871 	bl	801452c <_malloc_r>
 801544a:	b948      	cbnz	r0, 8015460 <__smakebuf_r+0x44>
 801544c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015450:	059a      	lsls	r2, r3, #22
 8015452:	d4ef      	bmi.n	8015434 <__smakebuf_r+0x18>
 8015454:	f023 0303 	bic.w	r3, r3, #3
 8015458:	f043 0302 	orr.w	r3, r3, #2
 801545c:	81a3      	strh	r3, [r4, #12]
 801545e:	e7e3      	b.n	8015428 <__smakebuf_r+0xc>
 8015460:	89a3      	ldrh	r3, [r4, #12]
 8015462:	6020      	str	r0, [r4, #0]
 8015464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015468:	81a3      	strh	r3, [r4, #12]
 801546a:	9b00      	ldr	r3, [sp, #0]
 801546c:	6163      	str	r3, [r4, #20]
 801546e:	9b01      	ldr	r3, [sp, #4]
 8015470:	6120      	str	r0, [r4, #16]
 8015472:	b15b      	cbz	r3, 801548c <__smakebuf_r+0x70>
 8015474:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015478:	4630      	mov	r0, r6
 801547a:	f000 f86b 	bl	8015554 <_isatty_r>
 801547e:	b128      	cbz	r0, 801548c <__smakebuf_r+0x70>
 8015480:	89a3      	ldrh	r3, [r4, #12]
 8015482:	f023 0303 	bic.w	r3, r3, #3
 8015486:	f043 0301 	orr.w	r3, r3, #1
 801548a:	81a3      	strh	r3, [r4, #12]
 801548c:	89a3      	ldrh	r3, [r4, #12]
 801548e:	431d      	orrs	r5, r3
 8015490:	81a5      	strh	r5, [r4, #12]
 8015492:	e7cf      	b.n	8015434 <__smakebuf_r+0x18>

08015494 <_putc_r>:
 8015494:	b570      	push	{r4, r5, r6, lr}
 8015496:	460d      	mov	r5, r1
 8015498:	4614      	mov	r4, r2
 801549a:	4606      	mov	r6, r0
 801549c:	b118      	cbz	r0, 80154a6 <_putc_r+0x12>
 801549e:	6a03      	ldr	r3, [r0, #32]
 80154a0:	b90b      	cbnz	r3, 80154a6 <_putc_r+0x12>
 80154a2:	f7fd fecd 	bl	8013240 <__sinit>
 80154a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80154a8:	07d8      	lsls	r0, r3, #31
 80154aa:	d405      	bmi.n	80154b8 <_putc_r+0x24>
 80154ac:	89a3      	ldrh	r3, [r4, #12]
 80154ae:	0599      	lsls	r1, r3, #22
 80154b0:	d402      	bmi.n	80154b8 <_putc_r+0x24>
 80154b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80154b4:	f7fe f93b 	bl	801372e <__retarget_lock_acquire_recursive>
 80154b8:	68a3      	ldr	r3, [r4, #8]
 80154ba:	3b01      	subs	r3, #1
 80154bc:	2b00      	cmp	r3, #0
 80154be:	60a3      	str	r3, [r4, #8]
 80154c0:	da05      	bge.n	80154ce <_putc_r+0x3a>
 80154c2:	69a2      	ldr	r2, [r4, #24]
 80154c4:	4293      	cmp	r3, r2
 80154c6:	db12      	blt.n	80154ee <_putc_r+0x5a>
 80154c8:	b2eb      	uxtb	r3, r5
 80154ca:	2b0a      	cmp	r3, #10
 80154cc:	d00f      	beq.n	80154ee <_putc_r+0x5a>
 80154ce:	6823      	ldr	r3, [r4, #0]
 80154d0:	1c5a      	adds	r2, r3, #1
 80154d2:	6022      	str	r2, [r4, #0]
 80154d4:	701d      	strb	r5, [r3, #0]
 80154d6:	b2ed      	uxtb	r5, r5
 80154d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80154da:	07da      	lsls	r2, r3, #31
 80154dc:	d405      	bmi.n	80154ea <_putc_r+0x56>
 80154de:	89a3      	ldrh	r3, [r4, #12]
 80154e0:	059b      	lsls	r3, r3, #22
 80154e2:	d402      	bmi.n	80154ea <_putc_r+0x56>
 80154e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80154e6:	f7fe f923 	bl	8013730 <__retarget_lock_release_recursive>
 80154ea:	4628      	mov	r0, r5
 80154ec:	bd70      	pop	{r4, r5, r6, pc}
 80154ee:	4629      	mov	r1, r5
 80154f0:	4622      	mov	r2, r4
 80154f2:	4630      	mov	r0, r6
 80154f4:	f7fd ffb3 	bl	801345e <__swbuf_r>
 80154f8:	4605      	mov	r5, r0
 80154fa:	e7ed      	b.n	80154d8 <_putc_r+0x44>

080154fc <memmove>:
 80154fc:	4288      	cmp	r0, r1
 80154fe:	b510      	push	{r4, lr}
 8015500:	eb01 0402 	add.w	r4, r1, r2
 8015504:	d902      	bls.n	801550c <memmove+0x10>
 8015506:	4284      	cmp	r4, r0
 8015508:	4623      	mov	r3, r4
 801550a:	d807      	bhi.n	801551c <memmove+0x20>
 801550c:	1e43      	subs	r3, r0, #1
 801550e:	42a1      	cmp	r1, r4
 8015510:	d008      	beq.n	8015524 <memmove+0x28>
 8015512:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015516:	f803 2f01 	strb.w	r2, [r3, #1]!
 801551a:	e7f8      	b.n	801550e <memmove+0x12>
 801551c:	4402      	add	r2, r0
 801551e:	4601      	mov	r1, r0
 8015520:	428a      	cmp	r2, r1
 8015522:	d100      	bne.n	8015526 <memmove+0x2a>
 8015524:	bd10      	pop	{r4, pc}
 8015526:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801552a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801552e:	e7f7      	b.n	8015520 <memmove+0x24>

08015530 <_fstat_r>:
 8015530:	b538      	push	{r3, r4, r5, lr}
 8015532:	4d07      	ldr	r5, [pc, #28]	; (8015550 <_fstat_r+0x20>)
 8015534:	2300      	movs	r3, #0
 8015536:	4604      	mov	r4, r0
 8015538:	4608      	mov	r0, r1
 801553a:	4611      	mov	r1, r2
 801553c:	602b      	str	r3, [r5, #0]
 801553e:	f7ee fcc0 	bl	8003ec2 <_fstat>
 8015542:	1c43      	adds	r3, r0, #1
 8015544:	d102      	bne.n	801554c <_fstat_r+0x1c>
 8015546:	682b      	ldr	r3, [r5, #0]
 8015548:	b103      	cbz	r3, 801554c <_fstat_r+0x1c>
 801554a:	6023      	str	r3, [r4, #0]
 801554c:	bd38      	pop	{r3, r4, r5, pc}
 801554e:	bf00      	nop
 8015550:	20006970 	.word	0x20006970

08015554 <_isatty_r>:
 8015554:	b538      	push	{r3, r4, r5, lr}
 8015556:	4d06      	ldr	r5, [pc, #24]	; (8015570 <_isatty_r+0x1c>)
 8015558:	2300      	movs	r3, #0
 801555a:	4604      	mov	r4, r0
 801555c:	4608      	mov	r0, r1
 801555e:	602b      	str	r3, [r5, #0]
 8015560:	f7ee fcbf 	bl	8003ee2 <_isatty>
 8015564:	1c43      	adds	r3, r0, #1
 8015566:	d102      	bne.n	801556e <_isatty_r+0x1a>
 8015568:	682b      	ldr	r3, [r5, #0]
 801556a:	b103      	cbz	r3, 801556e <_isatty_r+0x1a>
 801556c:	6023      	str	r3, [r4, #0]
 801556e:	bd38      	pop	{r3, r4, r5, pc}
 8015570:	20006970 	.word	0x20006970

08015574 <_sbrk_r>:
 8015574:	b538      	push	{r3, r4, r5, lr}
 8015576:	4d06      	ldr	r5, [pc, #24]	; (8015590 <_sbrk_r+0x1c>)
 8015578:	2300      	movs	r3, #0
 801557a:	4604      	mov	r4, r0
 801557c:	4608      	mov	r0, r1
 801557e:	602b      	str	r3, [r5, #0]
 8015580:	f7ee fcc8 	bl	8003f14 <_sbrk>
 8015584:	1c43      	adds	r3, r0, #1
 8015586:	d102      	bne.n	801558e <_sbrk_r+0x1a>
 8015588:	682b      	ldr	r3, [r5, #0]
 801558a:	b103      	cbz	r3, 801558e <_sbrk_r+0x1a>
 801558c:	6023      	str	r3, [r4, #0]
 801558e:	bd38      	pop	{r3, r4, r5, pc}
 8015590:	20006970 	.word	0x20006970

08015594 <__assert_func>:
 8015594:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015596:	4614      	mov	r4, r2
 8015598:	461a      	mov	r2, r3
 801559a:	4b09      	ldr	r3, [pc, #36]	; (80155c0 <__assert_func+0x2c>)
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	4605      	mov	r5, r0
 80155a0:	68d8      	ldr	r0, [r3, #12]
 80155a2:	b14c      	cbz	r4, 80155b8 <__assert_func+0x24>
 80155a4:	4b07      	ldr	r3, [pc, #28]	; (80155c4 <__assert_func+0x30>)
 80155a6:	9100      	str	r1, [sp, #0]
 80155a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80155ac:	4906      	ldr	r1, [pc, #24]	; (80155c8 <__assert_func+0x34>)
 80155ae:	462b      	mov	r3, r5
 80155b0:	f000 f872 	bl	8015698 <fiprintf>
 80155b4:	f000 f882 	bl	80156bc <abort>
 80155b8:	4b04      	ldr	r3, [pc, #16]	; (80155cc <__assert_func+0x38>)
 80155ba:	461c      	mov	r4, r3
 80155bc:	e7f3      	b.n	80155a6 <__assert_func+0x12>
 80155be:	bf00      	nop
 80155c0:	20000088 	.word	0x20000088
 80155c4:	08016147 	.word	0x08016147
 80155c8:	08016154 	.word	0x08016154
 80155cc:	08016182 	.word	0x08016182

080155d0 <_calloc_r>:
 80155d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80155d2:	fba1 2402 	umull	r2, r4, r1, r2
 80155d6:	b94c      	cbnz	r4, 80155ec <_calloc_r+0x1c>
 80155d8:	4611      	mov	r1, r2
 80155da:	9201      	str	r2, [sp, #4]
 80155dc:	f7fe ffa6 	bl	801452c <_malloc_r>
 80155e0:	9a01      	ldr	r2, [sp, #4]
 80155e2:	4605      	mov	r5, r0
 80155e4:	b930      	cbnz	r0, 80155f4 <_calloc_r+0x24>
 80155e6:	4628      	mov	r0, r5
 80155e8:	b003      	add	sp, #12
 80155ea:	bd30      	pop	{r4, r5, pc}
 80155ec:	220c      	movs	r2, #12
 80155ee:	6002      	str	r2, [r0, #0]
 80155f0:	2500      	movs	r5, #0
 80155f2:	e7f8      	b.n	80155e6 <_calloc_r+0x16>
 80155f4:	4621      	mov	r1, r4
 80155f6:	f7fd ffc7 	bl	8013588 <memset>
 80155fa:	e7f4      	b.n	80155e6 <_calloc_r+0x16>

080155fc <__ascii_mbtowc>:
 80155fc:	b082      	sub	sp, #8
 80155fe:	b901      	cbnz	r1, 8015602 <__ascii_mbtowc+0x6>
 8015600:	a901      	add	r1, sp, #4
 8015602:	b142      	cbz	r2, 8015616 <__ascii_mbtowc+0x1a>
 8015604:	b14b      	cbz	r3, 801561a <__ascii_mbtowc+0x1e>
 8015606:	7813      	ldrb	r3, [r2, #0]
 8015608:	600b      	str	r3, [r1, #0]
 801560a:	7812      	ldrb	r2, [r2, #0]
 801560c:	1e10      	subs	r0, r2, #0
 801560e:	bf18      	it	ne
 8015610:	2001      	movne	r0, #1
 8015612:	b002      	add	sp, #8
 8015614:	4770      	bx	lr
 8015616:	4610      	mov	r0, r2
 8015618:	e7fb      	b.n	8015612 <__ascii_mbtowc+0x16>
 801561a:	f06f 0001 	mvn.w	r0, #1
 801561e:	e7f8      	b.n	8015612 <__ascii_mbtowc+0x16>

08015620 <_realloc_r>:
 8015620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015624:	4680      	mov	r8, r0
 8015626:	4614      	mov	r4, r2
 8015628:	460e      	mov	r6, r1
 801562a:	b921      	cbnz	r1, 8015636 <_realloc_r+0x16>
 801562c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015630:	4611      	mov	r1, r2
 8015632:	f7fe bf7b 	b.w	801452c <_malloc_r>
 8015636:	b92a      	cbnz	r2, 8015644 <_realloc_r+0x24>
 8015638:	f7fe ff04 	bl	8014444 <_free_r>
 801563c:	4625      	mov	r5, r4
 801563e:	4628      	mov	r0, r5
 8015640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015644:	f000 f841 	bl	80156ca <_malloc_usable_size_r>
 8015648:	4284      	cmp	r4, r0
 801564a:	4607      	mov	r7, r0
 801564c:	d802      	bhi.n	8015654 <_realloc_r+0x34>
 801564e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015652:	d812      	bhi.n	801567a <_realloc_r+0x5a>
 8015654:	4621      	mov	r1, r4
 8015656:	4640      	mov	r0, r8
 8015658:	f7fe ff68 	bl	801452c <_malloc_r>
 801565c:	4605      	mov	r5, r0
 801565e:	2800      	cmp	r0, #0
 8015660:	d0ed      	beq.n	801563e <_realloc_r+0x1e>
 8015662:	42bc      	cmp	r4, r7
 8015664:	4622      	mov	r2, r4
 8015666:	4631      	mov	r1, r6
 8015668:	bf28      	it	cs
 801566a:	463a      	movcs	r2, r7
 801566c:	f7fe f861 	bl	8013732 <memcpy>
 8015670:	4631      	mov	r1, r6
 8015672:	4640      	mov	r0, r8
 8015674:	f7fe fee6 	bl	8014444 <_free_r>
 8015678:	e7e1      	b.n	801563e <_realloc_r+0x1e>
 801567a:	4635      	mov	r5, r6
 801567c:	e7df      	b.n	801563e <_realloc_r+0x1e>

0801567e <__ascii_wctomb>:
 801567e:	b149      	cbz	r1, 8015694 <__ascii_wctomb+0x16>
 8015680:	2aff      	cmp	r2, #255	; 0xff
 8015682:	bf85      	ittet	hi
 8015684:	238a      	movhi	r3, #138	; 0x8a
 8015686:	6003      	strhi	r3, [r0, #0]
 8015688:	700a      	strbls	r2, [r1, #0]
 801568a:	f04f 30ff 	movhi.w	r0, #4294967295
 801568e:	bf98      	it	ls
 8015690:	2001      	movls	r0, #1
 8015692:	4770      	bx	lr
 8015694:	4608      	mov	r0, r1
 8015696:	4770      	bx	lr

08015698 <fiprintf>:
 8015698:	b40e      	push	{r1, r2, r3}
 801569a:	b503      	push	{r0, r1, lr}
 801569c:	4601      	mov	r1, r0
 801569e:	ab03      	add	r3, sp, #12
 80156a0:	4805      	ldr	r0, [pc, #20]	; (80156b8 <fiprintf+0x20>)
 80156a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80156a6:	6800      	ldr	r0, [r0, #0]
 80156a8:	9301      	str	r3, [sp, #4]
 80156aa:	f7ff fcc9 	bl	8015040 <_vfiprintf_r>
 80156ae:	b002      	add	sp, #8
 80156b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80156b4:	b003      	add	sp, #12
 80156b6:	4770      	bx	lr
 80156b8:	20000088 	.word	0x20000088

080156bc <abort>:
 80156bc:	b508      	push	{r3, lr}
 80156be:	2006      	movs	r0, #6
 80156c0:	f000 f834 	bl	801572c <raise>
 80156c4:	2001      	movs	r0, #1
 80156c6:	f7ee fbc9 	bl	8003e5c <_exit>

080156ca <_malloc_usable_size_r>:
 80156ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80156ce:	1f18      	subs	r0, r3, #4
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	bfbc      	itt	lt
 80156d4:	580b      	ldrlt	r3, [r1, r0]
 80156d6:	18c0      	addlt	r0, r0, r3
 80156d8:	4770      	bx	lr

080156da <_raise_r>:
 80156da:	291f      	cmp	r1, #31
 80156dc:	b538      	push	{r3, r4, r5, lr}
 80156de:	4604      	mov	r4, r0
 80156e0:	460d      	mov	r5, r1
 80156e2:	d904      	bls.n	80156ee <_raise_r+0x14>
 80156e4:	2316      	movs	r3, #22
 80156e6:	6003      	str	r3, [r0, #0]
 80156e8:	f04f 30ff 	mov.w	r0, #4294967295
 80156ec:	bd38      	pop	{r3, r4, r5, pc}
 80156ee:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80156f0:	b112      	cbz	r2, 80156f8 <_raise_r+0x1e>
 80156f2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80156f6:	b94b      	cbnz	r3, 801570c <_raise_r+0x32>
 80156f8:	4620      	mov	r0, r4
 80156fa:	f000 f831 	bl	8015760 <_getpid_r>
 80156fe:	462a      	mov	r2, r5
 8015700:	4601      	mov	r1, r0
 8015702:	4620      	mov	r0, r4
 8015704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015708:	f000 b818 	b.w	801573c <_kill_r>
 801570c:	2b01      	cmp	r3, #1
 801570e:	d00a      	beq.n	8015726 <_raise_r+0x4c>
 8015710:	1c59      	adds	r1, r3, #1
 8015712:	d103      	bne.n	801571c <_raise_r+0x42>
 8015714:	2316      	movs	r3, #22
 8015716:	6003      	str	r3, [r0, #0]
 8015718:	2001      	movs	r0, #1
 801571a:	e7e7      	b.n	80156ec <_raise_r+0x12>
 801571c:	2400      	movs	r4, #0
 801571e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015722:	4628      	mov	r0, r5
 8015724:	4798      	blx	r3
 8015726:	2000      	movs	r0, #0
 8015728:	e7e0      	b.n	80156ec <_raise_r+0x12>
	...

0801572c <raise>:
 801572c:	4b02      	ldr	r3, [pc, #8]	; (8015738 <raise+0xc>)
 801572e:	4601      	mov	r1, r0
 8015730:	6818      	ldr	r0, [r3, #0]
 8015732:	f7ff bfd2 	b.w	80156da <_raise_r>
 8015736:	bf00      	nop
 8015738:	20000088 	.word	0x20000088

0801573c <_kill_r>:
 801573c:	b538      	push	{r3, r4, r5, lr}
 801573e:	4d07      	ldr	r5, [pc, #28]	; (801575c <_kill_r+0x20>)
 8015740:	2300      	movs	r3, #0
 8015742:	4604      	mov	r4, r0
 8015744:	4608      	mov	r0, r1
 8015746:	4611      	mov	r1, r2
 8015748:	602b      	str	r3, [r5, #0]
 801574a:	f7ee fb77 	bl	8003e3c <_kill>
 801574e:	1c43      	adds	r3, r0, #1
 8015750:	d102      	bne.n	8015758 <_kill_r+0x1c>
 8015752:	682b      	ldr	r3, [r5, #0]
 8015754:	b103      	cbz	r3, 8015758 <_kill_r+0x1c>
 8015756:	6023      	str	r3, [r4, #0]
 8015758:	bd38      	pop	{r3, r4, r5, pc}
 801575a:	bf00      	nop
 801575c:	20006970 	.word	0x20006970

08015760 <_getpid_r>:
 8015760:	f7ee bb64 	b.w	8003e2c <_getpid>

08015764 <_init>:
 8015764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015766:	bf00      	nop
 8015768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801576a:	bc08      	pop	{r3}
 801576c:	469e      	mov	lr, r3
 801576e:	4770      	bx	lr

08015770 <_fini>:
 8015770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015772:	bf00      	nop
 8015774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015776:	bc08      	pop	{r3}
 8015778:	469e      	mov	lr, r3
 801577a:	4770      	bx	lr
