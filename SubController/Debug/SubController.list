
SubController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016b84  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e50  08016d58  08016d58  00017d58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017ba8  08017ba8  000191f0  2**0
                  CONTENTS
  4 .ARM          00000008  08017ba8  08017ba8  00018ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017bb0  08017bb0  000191f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017bb0  08017bb0  00018bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017bb4  08017bb4  00018bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08017bb8  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006914  200001f0  08017da8  000191f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  20006b04  08017da8  00019b04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000191f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025100  00000000  00000000  00019220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000054af  00000000  00000000  0003e320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fc0  00000000  00000000  000437d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018c3  00000000  00000000  00045790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000294a9  00000000  00000000  00047053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b766  00000000  00000000  000704fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efdac  00000000  00000000  0009bc62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018ba0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000999c  00000000  00000000  0018ba54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  001953f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08016d3c 	.word	0x08016d3c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	08016d3c 	.word	0x08016d3c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <Bar30init>:
#include "Bar30.h"
#include "stm32f4xx.h"
extern I2C_HandleTypeDef hi2c2;
HAL_StatusTypeDef halStatus;
void Bar30init(Bar30* sensor, I2C_HandleTypeDef* i2cHandle)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
	sensor->i2cHandle=i2cHandle;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	683a      	ldr	r2, [r7, #0]
 8000f86:	601a      	str	r2, [r3, #0]

	for(int i=0; i<7;i++)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	e009      	b.n	8000fa2 <Bar30init+0x2a>
	{
		sensor->calibrationResult[i]=0;
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	3308      	adds	r3, #8
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	4413      	add	r3, r2
 8000f98:	2200      	movs	r2, #0
 8000f9a:	809a      	strh	r2, [r3, #4]
	for(int i=0; i<7;i++)
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2b06      	cmp	r3, #6
 8000fa6:	ddf2      	ble.n	8000f8e <Bar30init+0x16>
	}
	sensor->rxFlag=0;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	sensor->conversionCompleteFlag=0;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	sensor->dT=0;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	625a      	str	r2, [r3, #36]	@ 0x24
	sensor->actualPressure=0;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	60da      	str	r2, [r3, #12]
	sensor->actualTemperature=0;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]
	sensor->rawPressure=0;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	605a      	str	r2, [r3, #4]
	sensor->rawTemperature=0;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
}
 8000fd6:	bf00      	nop
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <Bar30reset>:



uint8_t Bar30reset(Bar30* sensor)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af02      	add	r7, sp, #8
 8000fea:	6078      	str	r0, [r7, #4]
	uint8_t cmdByte=RESET_CMD;
 8000fec:	231e      	movs	r3, #30
 8000fee:	73bb      	strb	r3, [r7, #14]
	uint8_t numBytes=1;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	73fb      	strb	r3, [r7, #15]
	halStatus=(HAL_I2C_Master_Transmit(sensor->i2cHandle, BAR30_I2C_ADD, &cmdByte, numBytes, HAL_MAX_DELAY));
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	f107 020e 	add.w	r2, r7, #14
 8001000:	f04f 31ff 	mov.w	r1, #4294967295
 8001004:	9100      	str	r1, [sp, #0]
 8001006:	21ec      	movs	r1, #236	@ 0xec
 8001008:	f005 fa32 	bl	8006470 <HAL_I2C_Master_Transmit>
 800100c:	4603      	mov	r3, r0
 800100e:	461a      	mov	r2, r3
 8001010:	4b06      	ldr	r3, [pc, #24]	@ (800102c <Bar30reset+0x48>)
 8001012:	701a      	strb	r2, [r3, #0]
	return halStatus==HAL_OK;
 8001014:	4b05      	ldr	r3, [pc, #20]	@ (800102c <Bar30reset+0x48>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	bf0c      	ite	eq
 800101c:	2301      	moveq	r3, #1
 800101e:	2300      	movne	r3, #0
 8001020:	b2db      	uxtb	r3, r3
}
 8001022:	4618      	mov	r0, r3
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	2000020c 	.word	0x2000020c

08001030 <Bar30getCalibration>:



uint8_t Bar30getCalibration(Bar30* sensor)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af02      	add	r7, sp, #8
 8001036:	6078      	str	r0, [r7, #4]
	uint8_t errorCount=0;
 8001038:	2300      	movs	r3, #0
 800103a:	75fb      	strb	r3, [r7, #23]
	uint8_t numTxBytes=1;
 800103c:	2301      	movs	r3, #1
 800103e:	73fb      	strb	r3, [r7, #15]
	uint8_t numRxBytes=2;
 8001040:	2302      	movs	r3, #2
 8001042:	73bb      	strb	r3, [r7, #14]
	uint8_t rxBuffer[2];
	uint8_t cmdByte;

	for (int i=0;i<7;i++)
 8001044:	2300      	movs	r3, #0
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	e041      	b.n	80010ce <Bar30getCalibration+0x9e>
	{
		cmdByte=READ_PROM_CMD_1+2*i;
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	3350      	adds	r3, #80	@ 0x50
 800104e:	b2db      	uxtb	r3, r3
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	b2db      	uxtb	r3, r3
 8001054:	72fb      	strb	r3, [r7, #11]
		halStatus=HAL_I2C_Master_Transmit(sensor->i2cHandle, BAR30_I2C_ADD, &cmdByte, numTxBytes, HAL_MAX_DELAY);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6818      	ldr	r0, [r3, #0]
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	b29b      	uxth	r3, r3
 800105e:	f107 020b 	add.w	r2, r7, #11
 8001062:	f04f 31ff 	mov.w	r1, #4294967295
 8001066:	9100      	str	r1, [sp, #0]
 8001068:	21ec      	movs	r1, #236	@ 0xec
 800106a:	f005 fa01 	bl	8006470 <HAL_I2C_Master_Transmit>
 800106e:	4603      	mov	r3, r0
 8001070:	461a      	mov	r2, r3
 8001072:	4b1d      	ldr	r3, [pc, #116]	@ (80010e8 <Bar30getCalibration+0xb8>)
 8001074:	701a      	strb	r2, [r3, #0]
		if(halStatus!=HAL_OK)
 8001076:	4b1c      	ldr	r3, [pc, #112]	@ (80010e8 <Bar30getCalibration+0xb8>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d002      	beq.n	8001084 <Bar30getCalibration+0x54>
		{
			errorCount+=1;
 800107e:	7dfb      	ldrb	r3, [r7, #23]
 8001080:	3301      	adds	r3, #1
 8001082:	75fb      	strb	r3, [r7, #23]
		}
		halStatus==HAL_I2C_Master_Receive(sensor->i2cHandle, BAR30_I2C_ADD, &rxBuffer[0], numRxBytes, HAL_MAX_DELAY);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6818      	ldr	r0, [r3, #0]
 8001088:	7bbb      	ldrb	r3, [r7, #14]
 800108a:	b29b      	uxth	r3, r3
 800108c:	f107 020c 	add.w	r2, r7, #12
 8001090:	f04f 31ff 	mov.w	r1, #4294967295
 8001094:	9100      	str	r1, [sp, #0]
 8001096:	21ec      	movs	r1, #236	@ 0xec
 8001098:	f005 fae8 	bl	800666c <HAL_I2C_Master_Receive>
		if(halStatus!=HAL_OK)
 800109c:	4b12      	ldr	r3, [pc, #72]	@ (80010e8 <Bar30getCalibration+0xb8>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d002      	beq.n	80010aa <Bar30getCalibration+0x7a>
		{
			errorCount+=1;
 80010a4:	7dfb      	ldrb	r3, [r7, #23]
 80010a6:	3301      	adds	r3, #1
 80010a8:	75fb      	strb	r3, [r7, #23]
		}
		sensor->calibrationResult[i]=(uint16_t)((rxBuffer[0] << 8) | rxBuffer[1]);
 80010aa:	7b3b      	ldrb	r3, [r7, #12]
 80010ac:	021b      	lsls	r3, r3, #8
 80010ae:	b21a      	sxth	r2, r3
 80010b0:	7b7b      	ldrb	r3, [r7, #13]
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	4313      	orrs	r3, r2
 80010b6:	b21b      	sxth	r3, r3
 80010b8:	b299      	uxth	r1, r3
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	3308      	adds	r3, #8
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	4413      	add	r3, r2
 80010c4:	460a      	mov	r2, r1
 80010c6:	809a      	strh	r2, [r3, #4]
	for (int i=0;i<7;i++)
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	3301      	adds	r3, #1
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	2b06      	cmp	r3, #6
 80010d2:	ddba      	ble.n	800104a <Bar30getCalibration+0x1a>
	}
	return errorCount==0;
 80010d4:	7dfb      	ldrb	r3, [r7, #23]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	bf0c      	ite	eq
 80010da:	2301      	moveq	r3, #1
 80010dc:	2300      	movne	r3, #0
 80010de:	b2db      	uxtb	r3, r3

}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	2000020c 	.word	0x2000020c

080010ec <Bar30getData>:



uint8_t Bar30getData(Bar30* sensor)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	uint8_t conversionGood=1;
 80010f4:	2301      	movs	r3, #1
 80010f6:	73fb      	strb	r3, [r7, #15]
	halStatus=initiatePressureConversion(sensor);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f000 f847 	bl	800118c <initiatePressureConversion>
 80010fe:	4603      	mov	r3, r0
 8001100:	461a      	mov	r2, r3
 8001102:	4b21      	ldr	r3, [pc, #132]	@ (8001188 <Bar30getData+0x9c>)
 8001104:	701a      	strb	r2, [r3, #0]
	if(halStatus!=HAL_OK)
 8001106:	4b20      	ldr	r3, [pc, #128]	@ (8001188 <Bar30getData+0x9c>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <Bar30getData+0x26>
		conversionGood=0;
 800110e:	2300      	movs	r3, #0
 8001110:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(3);
 8001112:	2003      	movs	r0, #3
 8001114:	f003 fc44 	bl	80049a0 <HAL_Delay>
	halStatus=readPressureData(sensor);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f000 f873 	bl	8001204 <readPressureData>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	4b19      	ldr	r3, [pc, #100]	@ (8001188 <Bar30getData+0x9c>)
 8001124:	701a      	strb	r2, [r3, #0]
	if(halStatus!=HAL_OK)
 8001126:	4b18      	ldr	r3, [pc, #96]	@ (8001188 <Bar30getData+0x9c>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <Bar30getData+0x46>
		conversionGood=0;
 800112e:	2300      	movs	r3, #0
 8001130:	73fb      	strb	r3, [r7, #15]

	halStatus=initiateTemperatureConversion(sensor);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f000 f848 	bl	80011c8 <initiateTemperatureConversion>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	4b12      	ldr	r3, [pc, #72]	@ (8001188 <Bar30getData+0x9c>)
 800113e:	701a      	strb	r2, [r3, #0]
	if(halStatus!=HAL_OK)
 8001140:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <Bar30getData+0x9c>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <Bar30getData+0x60>
		conversionGood=0;
 8001148:	2300      	movs	r3, #0
 800114a:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(3);
 800114c:	2003      	movs	r0, #3
 800114e:	f003 fc27 	bl	80049a0 <HAL_Delay>
	halStatus=readTemperatureData(sensor);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f000 f896 	bl	8001284 <readTemperatureData>
 8001158:	4603      	mov	r3, r0
 800115a:	461a      	mov	r2, r3
 800115c:	4b0a      	ldr	r3, [pc, #40]	@ (8001188 <Bar30getData+0x9c>)
 800115e:	701a      	strb	r2, [r3, #0]
	if(halStatus!=HAL_OK)
 8001160:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <Bar30getData+0x9c>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <Bar30getData+0x80>
		conversionGood=0;
 8001168:	2300      	movs	r3, #0
 800116a:	73fb      	strb	r3, [r7, #15]
	calculateTemperature(sensor);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f000 f923 	bl	80013b8 <calculateTemperature>
	calculatePressure(sensor);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f000 f966 	bl	8001444 <calculatePressure>
	calculateDepth(sensor);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f000 fa2d 	bl	80015d8 <calculateDepth>
	return conversionGood;
 800117e:	7bfb      	ldrb	r3, [r7, #15]

}
 8001180:	4618      	mov	r0, r3
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	2000020c 	.word	0x2000020c

0800118c <initiatePressureConversion>:

HAL_StatusTypeDef initiatePressureConversion(Bar30* sensor)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af02      	add	r7, sp, #8
 8001192:	6078      	str	r0, [r7, #4]
	uint8_t cmdByte=PRESSURE_CONVERSION_CMD;
 8001194:	2344      	movs	r3, #68	@ 0x44
 8001196:	73fb      	strb	r3, [r7, #15]
	halStatus=HAL_I2C_Master_Transmit(sensor->i2cHandle,BAR30_I2C_ADD,&cmdByte,1,HAL_MAX_DELAY);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	f107 020f 	add.w	r2, r7, #15
 80011a0:	f04f 33ff 	mov.w	r3, #4294967295
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	2301      	movs	r3, #1
 80011a8:	21ec      	movs	r1, #236	@ 0xec
 80011aa:	f005 f961 	bl	8006470 <HAL_I2C_Master_Transmit>
 80011ae:	4603      	mov	r3, r0
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b04      	ldr	r3, [pc, #16]	@ (80011c4 <initiatePressureConversion+0x38>)
 80011b4:	701a      	strb	r2, [r3, #0]
	return halStatus;
 80011b6:	4b03      	ldr	r3, [pc, #12]	@ (80011c4 <initiatePressureConversion+0x38>)
 80011b8:	781b      	ldrb	r3, [r3, #0]


}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	2000020c 	.word	0x2000020c

080011c8 <initiateTemperatureConversion>:
HAL_StatusTypeDef initiateTemperatureConversion(Bar30* sensor)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af02      	add	r7, sp, #8
 80011ce:	6078      	str	r0, [r7, #4]
	uint8_t cmdByte=TEMP_CONVERSION_CMD;
 80011d0:	2354      	movs	r3, #84	@ 0x54
 80011d2:	73fb      	strb	r3, [r7, #15]
	halStatus= HAL_I2C_Master_Transmit(sensor->i2cHandle,BAR30_I2C_ADD,&cmdByte,1,HAL_MAX_DELAY);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6818      	ldr	r0, [r3, #0]
 80011d8:	f107 020f 	add.w	r2, r7, #15
 80011dc:	f04f 33ff 	mov.w	r3, #4294967295
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	2301      	movs	r3, #1
 80011e4:	21ec      	movs	r1, #236	@ 0xec
 80011e6:	f005 f943 	bl	8006470 <HAL_I2C_Master_Transmit>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b04      	ldr	r3, [pc, #16]	@ (8001200 <initiateTemperatureConversion+0x38>)
 80011f0:	701a      	strb	r2, [r3, #0]
	return halStatus;
 80011f2:	4b03      	ldr	r3, [pc, #12]	@ (8001200 <initiateTemperatureConversion+0x38>)
 80011f4:	781b      	ldrb	r3, [r3, #0]

}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	2000020c 	.word	0x2000020c

08001204 <readPressureData>:
HAL_StatusTypeDef readPressureData(Bar30* sensor){
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af02      	add	r7, sp, #8
 800120a:	6078      	str	r0, [r7, #4]
	uint8_t cmdByte=READ_RESULT_CMD;
 800120c:	2300      	movs	r3, #0
 800120e:	73fb      	strb	r3, [r7, #15]
	uint8_t rxBuffer[3];
	halStatus= HAL_I2C_Master_Transmit(sensor->i2cHandle,BAR30_I2C_ADD,&cmdByte,1,HAL_MAX_DELAY);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6818      	ldr	r0, [r3, #0]
 8001214:	f107 020f 	add.w	r2, r7, #15
 8001218:	f04f 33ff 	mov.w	r3, #4294967295
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	2301      	movs	r3, #1
 8001220:	21ec      	movs	r1, #236	@ 0xec
 8001222:	f005 f925 	bl	8006470 <HAL_I2C_Master_Transmit>
 8001226:	4603      	mov	r3, r0
 8001228:	461a      	mov	r2, r3
 800122a:	4b15      	ldr	r3, [pc, #84]	@ (8001280 <readPressureData+0x7c>)
 800122c:	701a      	strb	r2, [r3, #0]
	halStatus=HAL_I2C_Master_Receive(sensor->i2cHandle, BAR30_I2C_ADD, rxBuffer, 3, HAL_MAX_DELAY);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6818      	ldr	r0, [r3, #0]
 8001232:	f107 020c 	add.w	r2, r7, #12
 8001236:	f04f 33ff 	mov.w	r3, #4294967295
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	2303      	movs	r3, #3
 800123e:	21ec      	movs	r1, #236	@ 0xec
 8001240:	f005 fa14 	bl	800666c <HAL_I2C_Master_Receive>
 8001244:	4603      	mov	r3, r0
 8001246:	461a      	mov	r2, r3
 8001248:	4b0d      	ldr	r3, [pc, #52]	@ (8001280 <readPressureData+0x7c>)
 800124a:	701a      	strb	r2, [r3, #0]
	sensor->rawPressure|=((uint32_t)rxBuffer[0]<<16);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685a      	ldr	r2, [r3, #4]
 8001250:	7b3b      	ldrb	r3, [r7, #12]
 8001252:	041b      	lsls	r3, r3, #16
 8001254:	431a      	orrs	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	605a      	str	r2, [r3, #4]
	sensor->rawPressure|=((uint32_t)rxBuffer[1]<<8);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	7b7b      	ldrb	r3, [r7, #13]
 8001260:	021b      	lsls	r3, r3, #8
 8001262:	431a      	orrs	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	605a      	str	r2, [r3, #4]
	sensor->rawPressure|=rxBuffer[2];
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	7bba      	ldrb	r2, [r7, #14]
 800126e:	431a      	orrs	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	605a      	str	r2, [r3, #4]
	return halStatus;
 8001274:	4b02      	ldr	r3, [pc, #8]	@ (8001280 <readPressureData+0x7c>)
 8001276:	781b      	ldrb	r3, [r3, #0]

}
 8001278:	4618      	mov	r0, r3
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	2000020c 	.word	0x2000020c

08001284 <readTemperatureData>:

HAL_StatusTypeDef readTemperatureData(Bar30* sensor)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af02      	add	r7, sp, #8
 800128a:	6078      	str	r0, [r7, #4]
	uint8_t cmdByte=READ_RESULT_CMD;
 800128c:	2300      	movs	r3, #0
 800128e:	73fb      	strb	r3, [r7, #15]
	uint8_t rxBuffer[3];
	halStatus= HAL_I2C_Master_Transmit(sensor->i2cHandle,BAR30_I2C_ADD,&cmdByte,1,HAL_MAX_DELAY);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6818      	ldr	r0, [r3, #0]
 8001294:	f107 020f 	add.w	r2, r7, #15
 8001298:	f04f 33ff 	mov.w	r3, #4294967295
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	2301      	movs	r3, #1
 80012a0:	21ec      	movs	r1, #236	@ 0xec
 80012a2:	f005 f8e5 	bl	8006470 <HAL_I2C_Master_Transmit>
 80012a6:	4603      	mov	r3, r0
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b15      	ldr	r3, [pc, #84]	@ (8001300 <readTemperatureData+0x7c>)
 80012ac:	701a      	strb	r2, [r3, #0]
	halStatus=HAL_I2C_Master_Receive(sensor->i2cHandle, BAR30_I2C_ADD, rxBuffer, 3, HAL_MAX_DELAY);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6818      	ldr	r0, [r3, #0]
 80012b2:	f107 020c 	add.w	r2, r7, #12
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	2303      	movs	r3, #3
 80012be:	21ec      	movs	r1, #236	@ 0xec
 80012c0:	f005 f9d4 	bl	800666c <HAL_I2C_Master_Receive>
 80012c4:	4603      	mov	r3, r0
 80012c6:	461a      	mov	r2, r3
 80012c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001300 <readTemperatureData+0x7c>)
 80012ca:	701a      	strb	r2, [r3, #0]
	sensor->rawTemperature|=((uint32_t)rxBuffer[0]<<16);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	7b3b      	ldrb	r3, [r7, #12]
 80012d2:	041b      	lsls	r3, r3, #16
 80012d4:	431a      	orrs	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	609a      	str	r2, [r3, #8]
	sensor->rawTemperature|=((uint32_t)rxBuffer[1]<<8);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689a      	ldr	r2, [r3, #8]
 80012de:	7b7b      	ldrb	r3, [r7, #13]
 80012e0:	021b      	lsls	r3, r3, #8
 80012e2:	431a      	orrs	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	609a      	str	r2, [r3, #8]
	sensor->rawTemperature|=rxBuffer[2];
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	7bba      	ldrb	r2, [r7, #14]
 80012ee:	431a      	orrs	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	609a      	str	r2, [r3, #8]


	return halStatus;
 80012f4:	4b02      	ldr	r3, [pc, #8]	@ (8001300 <readTemperatureData+0x7c>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	2000020c 	.word	0x2000020c

08001304 <Bar30CRCcheck>:


uint8_t Bar30CRCcheck(uint16_t* promData)
{
 8001304:	b480      	push	{r7}
 8001306:	b087      	sub	sp, #28
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	uint8_t cnt;
	uint32_t remainder=0;
 800130c:	2300      	movs	r3, #0
 800130e:	613b      	str	r3, [r7, #16]
	uint8_t nbit;
	promData[0]=((promData[0])&0x0FFF);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	881b      	ldrh	r3, [r3, #0]
 8001314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001318:	b29a      	uxth	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	801a      	strh	r2, [r3, #0]
	for(cnt=0;cnt<16;cnt++)
 800131e:	2300      	movs	r3, #0
 8001320:	75fb      	strb	r3, [r7, #23]
 8001322:	e035      	b.n	8001390 <Bar30CRCcheck+0x8c>
	{
		if(cnt%2==1)
 8001324:	7dfb      	ldrb	r3, [r7, #23]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d00b      	beq.n	8001348 <Bar30CRCcheck+0x44>
			remainder^=(uint16_t)((promData[cnt>>1])& 0x00FF);
 8001330:	7dfb      	ldrb	r3, [r7, #23]
 8001332:	085b      	lsrs	r3, r3, #1
 8001334:	b2db      	uxtb	r3, r3
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	4413      	add	r3, r2
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	b2db      	uxtb	r3, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4053      	eors	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	e009      	b.n	800135c <Bar30CRCcheck+0x58>
		else
			remainder=(uint16_t)(promData[cnt>>1]>>8);
 8001348:	7dfb      	ldrb	r3, [r7, #23]
 800134a:	085b      	lsrs	r3, r3, #1
 800134c:	b2db      	uxtb	r3, r3
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	4413      	add	r3, r2
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	0a1b      	lsrs	r3, r3, #8
 8001358:	b29b      	uxth	r3, r3
 800135a:	613b      	str	r3, [r7, #16]
		for(nbit=8;nbit>0;nbit--)
 800135c:	2308      	movs	r3, #8
 800135e:	73fb      	strb	r3, [r7, #15]
 8001360:	e010      	b.n	8001384 <Bar30CRCcheck+0x80>
		{
			if(remainder&(0x8000))
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d005      	beq.n	8001378 <Bar30CRCcheck+0x74>
				remainder=(remainder<<1)^0x3000;
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	e002      	b.n	800137e <Bar30CRCcheck+0x7a>
			else
				remainder=(remainder<<1);
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	613b      	str	r3, [r7, #16]
		for(nbit=8;nbit>0;nbit--)
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	3b01      	subs	r3, #1
 8001382:	73fb      	strb	r3, [r7, #15]
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1eb      	bne.n	8001362 <Bar30CRCcheck+0x5e>
	for(cnt=0;cnt<16;cnt++)
 800138a:	7dfb      	ldrb	r3, [r7, #23]
 800138c:	3301      	adds	r3, #1
 800138e:	75fb      	strb	r3, [r7, #23]
 8001390:	7dfb      	ldrb	r3, [r7, #23]
 8001392:	2b0f      	cmp	r3, #15
 8001394:	d9c6      	bls.n	8001324 <Bar30CRCcheck+0x20>
		}
	}
	remainder=((remainder>>12)&0x000F);
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	0b1b      	lsrs	r3, r3, #12
 800139a:	f003 030f 	and.w	r3, r3, #15
 800139e:	613b      	str	r3, [r7, #16]
	return ((remainder^0x00)==0);
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	bf0c      	ite	eq
 80013a6:	2301      	moveq	r3, #1
 80013a8:	2300      	movne	r3, #0
 80013aa:	b2db      	uxtb	r3, r3



}
 80013ac:	4618      	mov	r0, r3
 80013ae:	371c      	adds	r7, #28
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <calculateTemperature>:

void calculateTemperature(Bar30* sensor)
{
 80013b8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80013bc:	b085      	sub	sp, #20
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
	int32_t temperature=0;
 80013c2:	2100      	movs	r1, #0
 80013c4:	60f9      	str	r1, [r7, #12]
	sensor->dT=sensor->rawTemperature-((uint32_t)(sensor->calibrationResult[5])*256l);
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	6888      	ldr	r0, [r1, #8]
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	8bc9      	ldrh	r1, [r1, #30]
 80013ce:	0209      	lsls	r1, r1, #8
 80013d0:	1a41      	subs	r1, r0, r1
 80013d2:	4608      	mov	r0, r1
 80013d4:	6879      	ldr	r1, [r7, #4]
 80013d6:	6248      	str	r0, [r1, #36]	@ 0x24
	temperature=2000l+(int64_t)(sensor->dT)*sensor->calibrationResult[6]/8388608LL;
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 80013dc:	17c8      	asrs	r0, r1, #31
 80013de:	4688      	mov	r8, r1
 80013e0:	4681      	mov	r9, r0
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	8c09      	ldrh	r1, [r1, #32]
 80013e6:	b289      	uxth	r1, r1
 80013e8:	2000      	movs	r0, #0
 80013ea:	460c      	mov	r4, r1
 80013ec:	4605      	mov	r5, r0
 80013ee:	fb04 f009 	mul.w	r0, r4, r9
 80013f2:	fb08 f105 	mul.w	r1, r8, r5
 80013f6:	4401      	add	r1, r0
 80013f8:	fba8 2304 	umull	r2, r3, r8, r4
 80013fc:	4419      	add	r1, r3
 80013fe:	460b      	mov	r3, r1
 8001400:	2b00      	cmp	r3, #0
 8001402:	da06      	bge.n	8001412 <calculateTemperature+0x5a>
 8001404:	490e      	ldr	r1, [pc, #56]	@ (8001440 <calculateTemperature+0x88>)
 8001406:	eb12 0a01 	adds.w	sl, r2, r1
 800140a:	f143 0b00 	adc.w	fp, r3, #0
 800140e:	4652      	mov	r2, sl
 8001410:	465b      	mov	r3, fp
 8001412:	f04f 0000 	mov.w	r0, #0
 8001416:	f04f 0100 	mov.w	r1, #0
 800141a:	0dd0      	lsrs	r0, r2, #23
 800141c:	ea40 2043 	orr.w	r0, r0, r3, lsl #9
 8001420:	15d9      	asrs	r1, r3, #23
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	4613      	mov	r3, r2
 8001428:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800142c:	60fb      	str	r3, [r7, #12]
	sensor->actualTemperature=temperature;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	611a      	str	r2, [r3, #16]


}
 8001434:	bf00      	nop
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800143e:	4770      	bx	lr
 8001440:	007fffff 	.word	0x007fffff

08001444 <calculatePressure>:

void calculatePressure(Bar30* sensor)
{
 8001444:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001448:	b099      	sub	sp, #100	@ 0x64
 800144a:	af00      	add	r7, sp, #0
 800144c:	6478      	str	r0, [r7, #68]	@ 0x44
	int32_t dT=sensor->dT;
 800144e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001452:	65fb      	str	r3, [r7, #92]	@ 0x5c
	int64_t offset=0;
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	f04f 0300 	mov.w	r3, #0
 800145c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	int64_t sensitivity=0;
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	f04f 0300 	mov.w	r3, #0
 8001468:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	offset=((int64_t)sensor->calibrationResult[2]*65536l) + ((int64_t)(sensor->calibrationResult[4] * dT)/128l);
 800146c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800146e:	8b1b      	ldrh	r3, [r3, #24]
 8001470:	b29b      	uxth	r3, r3
 8001472:	2200      	movs	r2, #0
 8001474:	461c      	mov	r4, r3
 8001476:	4615      	mov	r5, r2
 8001478:	f04f 0000 	mov.w	r0, #0
 800147c:	f04f 0100 	mov.w	r1, #0
 8001480:	0429      	lsls	r1, r5, #16
 8001482:	ea41 4114 	orr.w	r1, r1, r4, lsr #16
 8001486:	0420      	lsls	r0, r4, #16
 8001488:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800148a:	8b9b      	ldrh	r3, [r3, #28]
 800148c:	461a      	mov	r2, r3
 800148e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001490:	fb02 f303 	mul.w	r3, r2, r3
 8001494:	2b00      	cmp	r3, #0
 8001496:	da00      	bge.n	800149a <calculatePressure+0x56>
 8001498:	337f      	adds	r3, #127	@ 0x7f
 800149a:	11db      	asrs	r3, r3, #7
 800149c:	17da      	asrs	r2, r3, #31
 800149e:	469a      	mov	sl, r3
 80014a0:	4693      	mov	fp, r2
 80014a2:	eb10 030a 	adds.w	r3, r0, sl
 80014a6:	61bb      	str	r3, [r7, #24]
 80014a8:	eb41 030b 	adc.w	r3, r1, fp
 80014ac:	61fb      	str	r3, [r7, #28]
 80014ae:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80014b2:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
	sensitivity = (((int64_t)sensor->calibrationResult[1]*32768l)) + (((int64_t)(dT * sensor->calibrationResult[3]))/256l);
 80014b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014b8:	8adb      	ldrh	r3, [r3, #22]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	2200      	movs	r2, #0
 80014be:	4698      	mov	r8, r3
 80014c0:	4691      	mov	r9, r2
 80014c2:	f04f 0000 	mov.w	r0, #0
 80014c6:	f04f 0100 	mov.w	r1, #0
 80014ca:	ea4f 31c9 	mov.w	r1, r9, lsl #15
 80014ce:	ea41 4158 	orr.w	r1, r1, r8, lsr #17
 80014d2:	ea4f 30c8 	mov.w	r0, r8, lsl #15
 80014d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014d8:	8b5b      	ldrh	r3, [r3, #26]
 80014da:	461a      	mov	r2, r3
 80014dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014de:	fb02 f303 	mul.w	r3, r2, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	da00      	bge.n	80014e8 <calculatePressure+0xa4>
 80014e6:	33ff      	adds	r3, #255	@ 0xff
 80014e8:	121b      	asrs	r3, r3, #8
 80014ea:	17da      	asrs	r2, r3, #31
 80014ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80014ee:	637a      	str	r2, [r7, #52]	@ 0x34
 80014f0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80014f4:	4623      	mov	r3, r4
 80014f6:	18c3      	adds	r3, r0, r3
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	462b      	mov	r3, r5
 80014fc:	eb41 0303 	adc.w	r3, r1, r3
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001506:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
	sensor->actualPressure=(sensor->rawPressure*sensitivity/(2097152l)-offset)/(8192l);
 800150a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001512:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001514:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001516:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800151a:	462a      	mov	r2, r5
 800151c:	fb02 f203 	mul.w	r2, r2, r3
 8001520:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001522:	4621      	mov	r1, r4
 8001524:	fb01 f303 	mul.w	r3, r1, r3
 8001528:	4413      	add	r3, r2
 800152a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800152c:	4621      	mov	r1, r4
 800152e:	fba2 1201 	umull	r1, r2, r2, r1
 8001532:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001534:	460a      	mov	r2, r1
 8001536:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001538:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800153a:	4413      	add	r3, r2
 800153c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800153e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001542:	2b00      	cmp	r3, #0
 8001544:	da07      	bge.n	8001556 <calculatePressure+0x112>
 8001546:	4923      	ldr	r1, [pc, #140]	@ (80015d4 <calculatePressure+0x190>)
 8001548:	1851      	adds	r1, r2, r1
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	f143 0300 	adc.w	r3, r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001556:	f04f 0000 	mov.w	r0, #0
 800155a:	f04f 0100 	mov.w	r1, #0
 800155e:	0d50      	lsrs	r0, r2, #21
 8001560:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 8001564:	1559      	asrs	r1, r3, #21
 8001566:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800156a:	1a84      	subs	r4, r0, r2
 800156c:	623c      	str	r4, [r7, #32]
 800156e:	eb61 0303 	sbc.w	r3, r1, r3
 8001572:	627b      	str	r3, [r7, #36]	@ 0x24
 8001574:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001578:	2b00      	cmp	r3, #0
 800157a:	da08      	bge.n	800158e <calculatePressure+0x14a>
 800157c:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 8001580:	1851      	adds	r1, r2, r1
 8001582:	6039      	str	r1, [r7, #0]
 8001584:	f143 0300 	adc.w	r3, r3, #0
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800158e:	f04f 0000 	mov.w	r0, #0
 8001592:	f04f 0100 	mov.w	r1, #0
 8001596:	0b50      	lsrs	r0, r2, #13
 8001598:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800159c:	1359      	asrs	r1, r3, #13
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015a4:	60da      	str	r2, [r3, #12]
	sensor->actualPressure=sensor->actualPressure/10.0f; // result in millibar
 80015a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	ee07 3a90 	vmov	s15, r3
 80015ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015b2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80015b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015be:	ee17 2a90 	vmov	r2, s15
 80015c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015c4:	60da      	str	r2, [r3, #12]


}
 80015c6:	bf00      	nop
 80015c8:	3764      	adds	r7, #100	@ 0x64
 80015ca:	46bd      	mov	sp, r7
 80015cc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	001fffff 	.word	0x001fffff

080015d8 <calculateDepth>:
float calculateDepth(Bar30* sensor)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	sensor->depth=(sensor->actualPressure-1013.0f)/(FLUID_DENSITY*9.80665f);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	ee07 3a90 	vmov	s15, r3
 80015e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ec:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001618 <calculateDepth+0x40>
 80015f0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80015f4:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800161c <calculateDepth+0x44>
 80015f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	return sensor->depth;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001606:	ee07 3a90 	vmov	s15, r3
}
 800160a:	eeb0 0a67 	vmov.f32	s0, s15
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	447d4000 	.word	0x447d4000
 800161c:	46181d08 	.word	0x46181d08

08001620 <checkMPU6050Ready>:
#include "MPU6050.h"
extern I2C_HandleTypeDef hi2c1;

uint8_t checkMPU6050Ready()
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
	if((HAL_I2C_IsDeviceReady(&hi2c1,MPU6050ADDR+0,1,100)==HAL_OK))
 8001624:	2364      	movs	r3, #100	@ 0x64
 8001626:	2201      	movs	r2, #1
 8001628:	21d0      	movs	r1, #208	@ 0xd0
 800162a:	4805      	ldr	r0, [pc, #20]	@ (8001640 <checkMPU6050Ready+0x20>)
 800162c:	f005 fef8 	bl	8007420 <HAL_I2C_IsDeviceReady>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <checkMPU6050Ready+0x1a>
	{
		return 1;
 8001636:	2301      	movs	r3, #1
 8001638:	e000      	b.n	800163c <checkMPU6050Ready+0x1c>
	}
	return 0;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20002704 	.word	0x20002704

08001644 <i2cWriteRegMPU6050>:
uint8_t i2cWriteRegMPU6050(uint16_t devAddr, uint16_t RegAddr, uint8_t* data){
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af04      	add	r7, sp, #16
 800164a:	4603      	mov	r3, r0
 800164c:	603a      	str	r2, [r7, #0]
 800164e:	80fb      	strh	r3, [r7, #6]
 8001650:	460b      	mov	r3, r1
 8001652:	80bb      	strh	r3, [r7, #4]

	return(HAL_I2C_Mem_Write(&hi2c1,devAddr,RegAddr, 1, data ,1,HAL_MAX_DELAY)==HAL_OK);
 8001654:	88ba      	ldrh	r2, [r7, #4]
 8001656:	88f9      	ldrh	r1, [r7, #6]
 8001658:	f04f 33ff 	mov.w	r3, #4294967295
 800165c:	9302      	str	r3, [sp, #8]
 800165e:	2301      	movs	r3, #1
 8001660:	9301      	str	r3, [sp, #4]
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	2301      	movs	r3, #1
 8001668:	4806      	ldr	r0, [pc, #24]	@ (8001684 <i2cWriteRegMPU6050+0x40>)
 800166a:	f005 fa25 	bl	8006ab8 <HAL_I2C_Mem_Write>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	bf0c      	ite	eq
 8001674:	2301      	moveq	r3, #1
 8001676:	2300      	movne	r3, #0
 8001678:	b2db      	uxtb	r3, r3

}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20002704 	.word	0x20002704

08001688 <MPU6050init>:

uint8_t MPU6050init(MPU6050* imu, I2C_HandleTypeDef* i2cHandle)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
	imu->i2cHandle=i2cHandle;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	601a      	str	r2, [r3, #0]

	for(int i=0;i<3;i++)
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	e013      	b.n	80016c6 <MPU6050init+0x3e>
	{
		imu->acc_mps2[i]=0;
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	3304      	adds	r3, #4
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
		imu->accelOffsets[i]=0;
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	330e      	adds	r3, #14
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	3304      	adds	r3, #4
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
	for(int i=0;i<3;i++)
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	3301      	adds	r3, #1
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	dde8      	ble.n	800169e <MPU6050init+0x16>
	}


	for(int i=0;i<3;i++)
 80016cc:	2300      	movs	r3, #0
 80016ce:	613b      	str	r3, [r7, #16]
 80016d0:	e012      	b.n	80016f8 <MPU6050init+0x70>
	{
		imu->gyr_rps[i]=0;
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	3304      	adds	r3, #4
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
		imu->gyroOffsets[i]=0;
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	330c      	adds	r3, #12
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
	for(int i=0;i<3;i++)
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	3301      	adds	r3, #1
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	dde9      	ble.n	80016d2 <MPU6050init+0x4a>
	}

	for(int i=0; i<14;i++)
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	e008      	b.n	8001716 <MPU6050init+0x8e>
		imu->rxData[i]=0;
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4413      	add	r3, r2
 800170a:	3320      	adds	r3, #32
 800170c:	2200      	movs	r2, #0
 800170e:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<14;i++)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	3301      	adds	r3, #1
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2b0d      	cmp	r3, #13
 800171a:	ddf3      	ble.n	8001704 <MPU6050init+0x7c>

	imu->rxFlag=0;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	imu->dataReadyFlag=0;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	imu->temp_degC=0;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	61da      	str	r2, [r3, #28]
	imu->numCalibrationMeas=0;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48



	uint8_t numErrors=0;
 800173c:	2300      	movs	r3, #0
 800173e:	72fb      	strb	r3, [r7, #11]
	//Disable FSYNC, enable digital LPF ( fs=1kHz, bandwidth: acc=94 Hz, gyr=98Hz )
	uint8_t data=0x02;
 8001740:	2302      	movs	r3, #2
 8001742:	72bb      	strb	r3, [r7, #10]
	if(i2cWriteRegMPU6050(MPU6050ADDR,MPU6050_CONFIG_REG,&data)==0)
 8001744:	f107 030a 	add.w	r3, r7, #10
 8001748:	461a      	mov	r2, r3
 800174a:	211a      	movs	r1, #26
 800174c:	20d0      	movs	r0, #208	@ 0xd0
 800174e:	f7ff ff79 	bl	8001644 <i2cWriteRegMPU6050>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d102      	bne.n	800175e <MPU6050init+0xd6>
		numErrors+=1;
 8001758:	7afb      	ldrb	r3, [r7, #11]
 800175a:	3301      	adds	r3, #1
 800175c:	72fb      	strb	r3, [r7, #11]

	// Enable Interrupt, clear status bits on any read operation
	data=0x10;
 800175e:	2310      	movs	r3, #16
 8001760:	72bb      	strb	r3, [r7, #10]
	if(i2cWriteRegMPU6050(MPU6050ADDR,MPU6050_INT_PIN_CFG_REG,&data)==0)
 8001762:	f107 030a 	add.w	r3, r7, #10
 8001766:	461a      	mov	r2, r3
 8001768:	2137      	movs	r1, #55	@ 0x37
 800176a:	20d0      	movs	r0, #208	@ 0xd0
 800176c:	f7ff ff6a 	bl	8001644 <i2cWriteRegMPU6050>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d102      	bne.n	800177c <MPU6050init+0xf4>
		numErrors+=1;
 8001776:	7afb      	ldrb	r3, [r7, #11]
 8001778:	3301      	adds	r3, #1
 800177a:	72fb      	strb	r3, [r7, #11]

	data=0x01;
 800177c:	2301      	movs	r3, #1
 800177e:	72bb      	strb	r3, [r7, #10]
	if(i2cWriteRegMPU6050(MPU6050ADDR,MPU6050_INT_ENABLE_REG,&data)==0)
 8001780:	f107 030a 	add.w	r3, r7, #10
 8001784:	461a      	mov	r2, r3
 8001786:	2138      	movs	r1, #56	@ 0x38
 8001788:	20d0      	movs	r0, #208	@ 0xd0
 800178a:	f7ff ff5b 	bl	8001644 <i2cWriteRegMPU6050>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d102      	bne.n	800179a <MPU6050init+0x112>
		numErrors+=1;
 8001794:	7afb      	ldrb	r3, [r7, #11]
 8001796:	3301      	adds	r3, #1
 8001798:	72fb      	strb	r3, [r7, #11]

	// Wake-up MPU6050
	data=0x00;
 800179a:	2300      	movs	r3, #0
 800179c:	72bb      	strb	r3, [r7, #10]
	if(i2cWriteRegMPU6050(MPU6050ADDR,MPU6050_PWR_MGMT_1_REG,&data)==0)
 800179e:	f107 030a 	add.w	r3, r7, #10
 80017a2:	461a      	mov	r2, r3
 80017a4:	216b      	movs	r1, #107	@ 0x6b
 80017a6:	20d0      	movs	r0, #208	@ 0xd0
 80017a8:	f7ff ff4c 	bl	8001644 <i2cWriteRegMPU6050>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d102      	bne.n	80017b8 <MPU6050init+0x130>
		numErrors+=1;
 80017b2:	7afb      	ldrb	r3, [r7, #11]
 80017b4:	3301      	adds	r3, #1
 80017b6:	72fb      	strb	r3, [r7, #11]

	return numErrors==0;
 80017b8:	7afb      	ldrb	r3, [r7, #11]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	bf0c      	ite	eq
 80017be:	2301      	moveq	r3, #1
 80017c0:	2300      	movne	r3, #0
 80017c2:	b2db      	uxtb	r3, r3

}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <MPU6050readDataDMA>:

uint8_t MPU6050readDataDMA(MPU6050* imu)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af02      	add	r7, sp, #8
 80017d2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef readStatus;
	readStatus=HAL_I2C_Mem_Read_DMA(imu->i2cHandle,MPU6050ADDR,MPU6050_DATA_START_ADD,1,imu->rxData,14);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6818      	ldr	r0, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3320      	adds	r3, #32
 80017dc:	220e      	movs	r2, #14
 80017de:	9201      	str	r2, [sp, #4]
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	2301      	movs	r3, #1
 80017e4:	223b      	movs	r2, #59	@ 0x3b
 80017e6:	21d0      	movs	r1, #208	@ 0xd0
 80017e8:	f005 fc86 	bl	80070f8 <HAL_I2C_Mem_Read_DMA>
 80017ec:	4603      	mov	r3, r0
 80017ee:	73fb      	strb	r3, [r7, #15]
	imu->dataReadyFlag=0;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	if(readStatus==HAL_OK)return 1;
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <MPU6050readDataDMA+0x36>
 80017fe:	2301      	movs	r3, #1
 8001800:	e00a      	b.n	8001818 <MPU6050readDataDMA+0x4c>
	else if(readStatus==HAL_ERROR)return 2;
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d101      	bne.n	800180c <MPU6050readDataDMA+0x40>
 8001808:	2302      	movs	r3, #2
 800180a:	e005      	b.n	8001818 <MPU6050readDataDMA+0x4c>
	else if (readStatus==HAL_BUSY)return 3;
 800180c:	7bfb      	ldrb	r3, [r7, #15]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d101      	bne.n	8001816 <MPU6050readDataDMA+0x4a>
 8001812:	2303      	movs	r3, #3
 8001814:	e000      	b.n	8001818 <MPU6050readDataDMA+0x4c>
	else return 0;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <MPU6050convertRawData>:

void MPU6050convertRawData(MPU6050* imu)
{
 8001820:	b480      	push	{r7}
 8001822:	b087      	sub	sp, #28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	int16_t acc[3]={( (imu->rxData[0]<<8)|imu->rxData[1] ),( (imu->rxData[2]<<8)|imu->rxData[3] ),( (imu->rxData[4]<<8)|imu->rxData[5] )};
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800182e:	021b      	lsls	r3, r3, #8
 8001830:	b21a      	sxth	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001838:	b21b      	sxth	r3, r3
 800183a:	4313      	orrs	r3, r2
 800183c:	b21b      	sxth	r3, r3
 800183e:	823b      	strh	r3, [r7, #16]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8001846:	021b      	lsls	r3, r3, #8
 8001848:	b21a      	sxth	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001850:	b21b      	sxth	r3, r3
 8001852:	4313      	orrs	r3, r2
 8001854:	b21b      	sxth	r3, r3
 8001856:	827b      	strh	r3, [r7, #18]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800185e:	021b      	lsls	r3, r3, #8
 8001860:	b21a      	sxth	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001868:	b21b      	sxth	r3, r3
 800186a:	4313      	orrs	r3, r2
 800186c:	b21b      	sxth	r3, r3
 800186e:	82bb      	strh	r3, [r7, #20]
	//int16_t temperature=(imu->rxData[6]<<8)|imu->rxData[7];
	int16_t gyr[3]={( (imu->rxData[8]<<8)|imu->rxData[9] ),( (imu->rxData[10]<<8)|imu->rxData[11] ),( (imu->rxData[12]<<8)|imu->rxData[13] )};
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001876:	021b      	lsls	r3, r3, #8
 8001878:	b21a      	sxth	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001880:	b21b      	sxth	r3, r3
 8001882:	4313      	orrs	r3, r2
 8001884:	b21b      	sxth	r3, r3
 8001886:	813b      	strh	r3, [r7, #8]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800188e:	021b      	lsls	r3, r3, #8
 8001890:	b21a      	sxth	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001898:	b21b      	sxth	r3, r3
 800189a:	4313      	orrs	r3, r2
 800189c:	b21b      	sxth	r3, r3
 800189e:	817b      	strh	r3, [r7, #10]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80018a6:	021b      	lsls	r3, r3, #8
 80018a8:	b21a      	sxth	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80018b0:	b21b      	sxth	r3, r3
 80018b2:	4313      	orrs	r3, r2
 80018b4:	b21b      	sxth	r3, r3
 80018b6:	81bb      	strh	r3, [r7, #12]

	// Before accel calibration
	imu->acc_mps2[0]=MPU6050_ACC_RAW_TO_MPS2*acc[0];
 80018b8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80018bc:	ee07 3a90 	vmov	s15, r3
 80018c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018c4:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 80019f8 <MPU6050convertRawData+0x1d8>
 80018c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	edc3 7a01 	vstr	s15, [r3, #4]
	imu->acc_mps2[1]=MPU6050_ACC_RAW_TO_MPS2*acc[1];
 80018d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018d6:	ee07 3a90 	vmov	s15, r3
 80018da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018de:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80019f8 <MPU6050convertRawData+0x1d8>
 80018e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	edc3 7a02 	vstr	s15, [r3, #8]
	imu->acc_mps2[2]=MPU6050_ACC_RAW_TO_MPS2*acc[2];
 80018ec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80018f0:	ee07 3a90 	vmov	s15, r3
 80018f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018f8:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80019f8 <MPU6050convertRawData+0x1d8>
 80018fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	edc3 7a03 	vstr	s15, [r3, #12]

	// After accel calibration
	imu->accelOffsets[0]=ACCEL_CALI_SLOPE_X*imu->acc_mps2[0]+CALI_INTERCEPT_X; // offset calculated from linear regression
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	edd3 7a01 	vldr	s15, [r3, #4]
 800190c:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80019fc <MPU6050convertRawData+0x1dc>
 8001910:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001914:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001a00 <MPU6050convertRawData+0x1e0>
 8001918:	ee77 7a87 	vadd.f32	s15, s15, s14
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	imu->acc_mps2[0]=imu->acc_mps2[0]-imu->accelOffsets[0];
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	ed93 7a01 	vldr	s14, [r3, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800192e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	edc3 7a01 	vstr	s15, [r3, #4]

	imu->accelOffsets[1]=ACCEL_CALI_SLOPE_Y*imu->acc_mps2[1]+CALI_INTERCEPT_Y; // offset calculated from linear regression
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	edd3 7a02 	vldr	s15, [r3, #8]
 800193e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001a04 <MPU6050convertRawData+0x1e4>
 8001942:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001946:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001a08 <MPU6050convertRawData+0x1e8>
 800194a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	imu->acc_mps2[1]=imu->acc_mps2[1]-imu->accelOffsets[1];
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	ed93 7a02 	vldr	s14, [r3, #8]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001960:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	edc3 7a02 	vstr	s15, [r3, #8]

	imu->accelOffsets[2]=ACCEL_CALI_SLOPE_Z*imu->acc_mps2[2]+CALI_INTERCEPT_Z; // offset calculated from linear regression
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001970:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001a0c <MPU6050convertRawData+0x1ec>
 8001974:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001978:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001a10 <MPU6050convertRawData+0x1f0>
 800197c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	imu->acc_mps2[2]=imu->acc_mps2[2]-imu->accelOffsets[2];
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	ed93 7a03 	vldr	s14, [r3, #12]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001992:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	edc3 7a03 	vstr	s15, [r3, #12]


	imu->gyr_rps[0]=MPU6050_GYR_RAW_TO_RPS*gyr[0];
 800199c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80019a0:	ee07 3a90 	vmov	s15, r3
 80019a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019a8:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001a14 <MPU6050convertRawData+0x1f4>
 80019ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	edc3 7a04 	vstr	s15, [r3, #16]
	imu->gyr_rps[1]=MPU6050_GYR_RAW_TO_RPS*gyr[1];
 80019b6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80019ba:	ee07 3a90 	vmov	s15, r3
 80019be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019c2:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001a14 <MPU6050convertRawData+0x1f4>
 80019c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	edc3 7a05 	vstr	s15, [r3, #20]
	imu->gyr_rps[2]=MPU6050_GYR_RAW_TO_RPS*gyr[2];
 80019d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019d4:	ee07 3a90 	vmov	s15, r3
 80019d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019dc:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001a14 <MPU6050convertRawData+0x1f4>
 80019e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	edc3 7a06 	vstr	s15, [r3, #24]

}
 80019ea:	bf00      	nop
 80019ec:	371c      	adds	r7, #28
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	3a1cf5c1 	.word	0x3a1cf5c1
 80019fc:	3beb09e6 	.word	0x3beb09e6
 8001a00:	3f09de24 	.word	0x3f09de24
 8001a04:	3bb0e4ed 	.word	0x3bb0e4ed
 8001a08:	3dc39596 	.word	0x3dc39596
 8001a0c:	3b35da35 	.word	0x3b35da35
 8001a10:	3ee24051 	.word	0x3ee24051
 8001a14:	390bb3fd 	.word	0x390bb3fd

08001a18 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a22:	4804      	ldr	r0, [pc, #16]	@ (8001a34 <SELECT+0x1c>)
 8001a24:	f004 fbae 	bl	8006184 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001a28:	2001      	movs	r0, #1
 8001a2a:	f002 ffb9 	bl	80049a0 <HAL_Delay>
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40020400 	.word	0x40020400

08001a38 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a42:	4804      	ldr	r0, [pc, #16]	@ (8001a54 <DESELECT+0x1c>)
 8001a44:	f004 fb9e 	bl	8006184 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001a48:	2001      	movs	r0, #1
 8001a4a:	f002 ffa9 	bl	80049a0 <HAL_Delay>
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40020400 	.word	0x40020400

08001a58 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001a62:	bf00      	nop
 8001a64:	4b08      	ldr	r3, [pc, #32]	@ (8001a88 <SPI_TxByte+0x30>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d1f8      	bne.n	8001a64 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001a72:	1df9      	adds	r1, r7, #7
 8001a74:	2364      	movs	r3, #100	@ 0x64
 8001a76:	2201      	movs	r2, #1
 8001a78:	4803      	ldr	r0, [pc, #12]	@ (8001a88 <SPI_TxByte+0x30>)
 8001a7a:	f008 fdf8 	bl	800a66e <HAL_SPI_Transmit>
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	200004b4 	.word	0x200004b4

08001a8c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001a98:	bf00      	nop
 8001a9a:	4b08      	ldr	r3, [pc, #32]	@ (8001abc <SPI_TxBuffer+0x30>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d1f8      	bne.n	8001a9a <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001aa8:	887a      	ldrh	r2, [r7, #2]
 8001aaa:	2364      	movs	r3, #100	@ 0x64
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	4803      	ldr	r0, [pc, #12]	@ (8001abc <SPI_TxBuffer+0x30>)
 8001ab0:	f008 fddd 	bl	800a66e <HAL_SPI_Transmit>
}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	200004b4 	.word	0x200004b4

08001ac0 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8001ac6:	23ff      	movs	r3, #255	@ 0xff
 8001ac8:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001aca:	bf00      	nop
 8001acc:	4b09      	ldr	r3, [pc, #36]	@ (8001af4 <SPI_RxByte+0x34>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d1f8      	bne.n	8001acc <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001ada:	1dba      	adds	r2, r7, #6
 8001adc:	1df9      	adds	r1, r7, #7
 8001ade:	2364      	movs	r3, #100	@ 0x64
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	4803      	ldr	r0, [pc, #12]	@ (8001af4 <SPI_RxByte+0x34>)
 8001ae6:	f008 fefe 	bl	800a8e6 <HAL_SPI_TransmitReceive>

	return data;
 8001aea:	79bb      	ldrb	r3, [r7, #6]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	200004b4 	.word	0x200004b4

08001af8 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8001b00:	f7ff ffde 	bl	8001ac0 <SPI_RxByte>
 8001b04:	4603      	mov	r3, r0
 8001b06:	461a      	mov	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	701a      	strb	r2, [r3, #0]
}
 8001b0c:	bf00      	nop
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b44 <SD_ReadyWait+0x30>)
 8001b1c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001b20:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8001b22:	f7ff ffcd 	bl	8001ac0 <SPI_RxByte>
 8001b26:	4603      	mov	r3, r0
 8001b28:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	2bff      	cmp	r3, #255	@ 0xff
 8001b2e:	d003      	beq.n	8001b38 <SD_ReadyWait+0x24>
 8001b30:	4b04      	ldr	r3, [pc, #16]	@ (8001b44 <SD_ReadyWait+0x30>)
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1f4      	bne.n	8001b22 <SD_ReadyWait+0xe>

	return res;
 8001b38:	79fb      	ldrb	r3, [r7, #7]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000210 	.word	0x20000210

08001b48 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001b4e:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8001b52:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001b54:	f7ff ff70 	bl	8001a38 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	e005      	b.n	8001b6a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001b5e:	20ff      	movs	r0, #255	@ 0xff
 8001b60:	f7ff ff7a 	bl	8001a58 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	3301      	adds	r3, #1
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2b09      	cmp	r3, #9
 8001b6e:	ddf6      	ble.n	8001b5e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001b70:	f7ff ff52 	bl	8001a18 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001b74:	2340      	movs	r3, #64	@ 0x40
 8001b76:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001b88:	2395      	movs	r3, #149	@ 0x95
 8001b8a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001b8c:	463b      	mov	r3, r7
 8001b8e:	2106      	movs	r1, #6
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff7b 	bl	8001a8c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001b96:	e002      	b.n	8001b9e <SD_PowerOn+0x56>
	{
		cnt--;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001b9e:	f7ff ff8f 	bl	8001ac0 <SPI_RxByte>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d002      	beq.n	8001bae <SD_PowerOn+0x66>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f4      	bne.n	8001b98 <SD_PowerOn+0x50>
	}

	DESELECT();
 8001bae:	f7ff ff43 	bl	8001a38 <DESELECT>
	SPI_TxByte(0XFF);
 8001bb2:	20ff      	movs	r0, #255	@ 0xff
 8001bb4:	f7ff ff50 	bl	8001a58 <SPI_TxByte>

	PowerFlag = 1;
 8001bb8:	4b03      	ldr	r3, [pc, #12]	@ (8001bc8 <SD_PowerOn+0x80>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	701a      	strb	r2, [r3, #0]
}
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000213 	.word	0x20000213

08001bcc <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001bd0:	4b03      	ldr	r3, [pc, #12]	@ (8001be0 <SD_PowerOff+0x14>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	701a      	strb	r2, [r3, #0]
}
 8001bd6:	bf00      	nop
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	20000213 	.word	0x20000213

08001be4 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001be8:	4b03      	ldr	r3, [pc, #12]	@ (8001bf8 <SD_CheckPower+0x14>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	20000213 	.word	0x20000213

08001bfc <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001c06:	4b13      	ldr	r3, [pc, #76]	@ (8001c54 <SD_RxDataBlock+0x58>)
 8001c08:	22c8      	movs	r2, #200	@ 0xc8
 8001c0a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001c0c:	f7ff ff58 	bl	8001ac0 <SPI_RxByte>
 8001c10:	4603      	mov	r3, r0
 8001c12:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
 8001c16:	2bff      	cmp	r3, #255	@ 0xff
 8001c18:	d103      	bne.n	8001c22 <SD_RxDataBlock+0x26>
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c54 <SD_RxDataBlock+0x58>)
 8001c1c:	881b      	ldrh	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f4      	bne.n	8001c0c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	2bfe      	cmp	r3, #254	@ 0xfe
 8001c26:	d001      	beq.n	8001c2c <SD_RxDataBlock+0x30>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	e00f      	b.n	8001c4c <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	607a      	str	r2, [r7, #4]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff ff60 	bl	8001af8 <SPI_RxBytePtr>
	} while(len--);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	1e5a      	subs	r2, r3, #1
 8001c3c:	603a      	str	r2, [r7, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f4      	bne.n	8001c2c <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8001c42:	f7ff ff3d 	bl	8001ac0 <SPI_RxByte>
	SPI_RxByte();
 8001c46:	f7ff ff3b 	bl	8001ac0 <SPI_RxByte>

	return TRUE;
 8001c4a:	2301      	movs	r3, #1
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3710      	adds	r7, #16
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	2000020e 	.word	0x2000020e

08001c58 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001c68:	f7ff ff54 	bl	8001b14 <SD_ReadyWait>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2bff      	cmp	r3, #255	@ 0xff
 8001c70:	d001      	beq.n	8001c76 <SD_TxDataBlock+0x1e>
 8001c72:	2300      	movs	r3, #0
 8001c74:	e02f      	b.n	8001cd6 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001c76:	78fb      	ldrb	r3, [r7, #3]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff feed 	bl	8001a58 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001c7e:	78fb      	ldrb	r3, [r7, #3]
 8001c80:	2bfd      	cmp	r3, #253	@ 0xfd
 8001c82:	d020      	beq.n	8001cc6 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001c84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff feff 	bl	8001a8c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001c8e:	f7ff ff17 	bl	8001ac0 <SPI_RxByte>
		SPI_RxByte();
 8001c92:	f7ff ff15 	bl	8001ac0 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8001c96:	e00b      	b.n	8001cb0 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001c98:	f7ff ff12 	bl	8001ac0 <SPI_RxByte>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
 8001ca2:	f003 031f 	and.w	r3, r3, #31
 8001ca6:	2b05      	cmp	r3, #5
 8001ca8:	d006      	beq.n	8001cb8 <SD_TxDataBlock+0x60>
			i++;
 8001caa:	7bbb      	ldrb	r3, [r7, #14]
 8001cac:	3301      	adds	r3, #1
 8001cae:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001cb0:	7bbb      	ldrb	r3, [r7, #14]
 8001cb2:	2b40      	cmp	r3, #64	@ 0x40
 8001cb4:	d9f0      	bls.n	8001c98 <SD_TxDataBlock+0x40>
 8001cb6:	e000      	b.n	8001cba <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001cb8:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001cba:	bf00      	nop
 8001cbc:	f7ff ff00 	bl	8001ac0 <SPI_RxByte>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0fa      	beq.n	8001cbc <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
 8001cc8:	f003 031f 	and.w	r3, r3, #31
 8001ccc:	2b05      	cmp	r3, #5
 8001cce:	d101      	bne.n	8001cd4 <SD_TxDataBlock+0x7c>
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e000      	b.n	8001cd6 <SD_TxDataBlock+0x7e>

	return FALSE;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b084      	sub	sp, #16
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	6039      	str	r1, [r7, #0]
 8001ce8:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001cea:	f7ff ff13 	bl	8001b14 <SD_ReadyWait>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2bff      	cmp	r3, #255	@ 0xff
 8001cf2:	d001      	beq.n	8001cf8 <SD_SendCmd+0x1a>
 8001cf4:	23ff      	movs	r3, #255	@ 0xff
 8001cf6:	e042      	b.n	8001d7e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff feac 	bl	8001a58 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	0e1b      	lsrs	r3, r3, #24
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff fea6 	bl	8001a58 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	0c1b      	lsrs	r3, r3, #16
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff fea0 	bl	8001a58 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	0a1b      	lsrs	r3, r3, #8
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff fe9a 	bl	8001a58 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff fe95 	bl	8001a58 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	2b40      	cmp	r3, #64	@ 0x40
 8001d32:	d102      	bne.n	8001d3a <SD_SendCmd+0x5c>
 8001d34:	2395      	movs	r3, #149	@ 0x95
 8001d36:	73fb      	strb	r3, [r7, #15]
 8001d38:	e007      	b.n	8001d4a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	2b48      	cmp	r3, #72	@ 0x48
 8001d3e:	d102      	bne.n	8001d46 <SD_SendCmd+0x68>
 8001d40:	2387      	movs	r3, #135	@ 0x87
 8001d42:	73fb      	strb	r3, [r7, #15]
 8001d44:	e001      	b.n	8001d4a <SD_SendCmd+0x6c>
	else crc = 1;
 8001d46:	2301      	movs	r3, #1
 8001d48:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff fe83 	bl	8001a58 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	2b4c      	cmp	r3, #76	@ 0x4c
 8001d56:	d101      	bne.n	8001d5c <SD_SendCmd+0x7e>
 8001d58:	f7ff feb2 	bl	8001ac0 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001d5c:	230a      	movs	r3, #10
 8001d5e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001d60:	f7ff feae 	bl	8001ac0 <SPI_RxByte>
 8001d64:	4603      	mov	r3, r0
 8001d66:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001d68:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	da05      	bge.n	8001d7c <SD_SendCmd+0x9e>
 8001d70:	7bbb      	ldrb	r3, [r7, #14]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	73bb      	strb	r3, [r7, #14]
 8001d76:	7bbb      	ldrb	r3, [r7, #14]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1f1      	bne.n	8001d60 <SD_SendCmd+0x82>

	return res;
 8001d7c:	7b7b      	ldrb	r3, [r7, #13]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001d88:	b590      	push	{r4, r7, lr}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <SD_disk_initialize+0x14>
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e0d1      	b.n	8001f40 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001d9c:	4b6a      	ldr	r3, [pc, #424]	@ (8001f48 <SD_disk_initialize+0x1c0>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <SD_disk_initialize+0x2a>
 8001daa:	4b67      	ldr	r3, [pc, #412]	@ (8001f48 <SD_disk_initialize+0x1c0>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	e0c6      	b.n	8001f40 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8001db2:	f7ff fec9 	bl	8001b48 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001db6:	f7ff fe2f 	bl	8001a18 <SELECT>

	/* check disk type */
	type = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	2040      	movs	r0, #64	@ 0x40
 8001dc2:	f7ff ff8c 	bl	8001cde <SD_SendCmd>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	f040 80a1 	bne.w	8001f10 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001dce:	4b5f      	ldr	r3, [pc, #380]	@ (8001f4c <SD_disk_initialize+0x1c4>)
 8001dd0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001dd4:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001dd6:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001dda:	2048      	movs	r0, #72	@ 0x48
 8001ddc:	f7ff ff7f 	bl	8001cde <SD_SendCmd>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d155      	bne.n	8001e92 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001de6:	2300      	movs	r3, #0
 8001de8:	73fb      	strb	r3, [r7, #15]
 8001dea:	e00c      	b.n	8001e06 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001dec:	7bfc      	ldrb	r4, [r7, #15]
 8001dee:	f7ff fe67 	bl	8001ac0 <SPI_RxByte>
 8001df2:	4603      	mov	r3, r0
 8001df4:	461a      	mov	r2, r3
 8001df6:	f104 0310 	add.w	r3, r4, #16
 8001dfa:	443b      	add	r3, r7
 8001dfc:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
 8001e02:	3301      	adds	r3, #1
 8001e04:	73fb      	strb	r3, [r7, #15]
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	2b03      	cmp	r3, #3
 8001e0a:	d9ef      	bls.n	8001dec <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001e0c:	7abb      	ldrb	r3, [r7, #10]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d17e      	bne.n	8001f10 <SD_disk_initialize+0x188>
 8001e12:	7afb      	ldrb	r3, [r7, #11]
 8001e14:	2baa      	cmp	r3, #170	@ 0xaa
 8001e16:	d17b      	bne.n	8001f10 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001e18:	2100      	movs	r1, #0
 8001e1a:	2077      	movs	r0, #119	@ 0x77
 8001e1c:	f7ff ff5f 	bl	8001cde <SD_SendCmd>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d807      	bhi.n	8001e36 <SD_disk_initialize+0xae>
 8001e26:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001e2a:	2069      	movs	r0, #105	@ 0x69
 8001e2c:	f7ff ff57 	bl	8001cde <SD_SendCmd>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d004      	beq.n	8001e40 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8001e36:	4b45      	ldr	r3, [pc, #276]	@ (8001f4c <SD_disk_initialize+0x1c4>)
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1ec      	bne.n	8001e18 <SD_disk_initialize+0x90>
 8001e3e:	e000      	b.n	8001e42 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001e40:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001e42:	4b42      	ldr	r3, [pc, #264]	@ (8001f4c <SD_disk_initialize+0x1c4>)
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d062      	beq.n	8001f10 <SD_disk_initialize+0x188>
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	207a      	movs	r0, #122	@ 0x7a
 8001e4e:	f7ff ff46 	bl	8001cde <SD_SendCmd>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d15b      	bne.n	8001f10 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001e58:	2300      	movs	r3, #0
 8001e5a:	73fb      	strb	r3, [r7, #15]
 8001e5c:	e00c      	b.n	8001e78 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8001e5e:	7bfc      	ldrb	r4, [r7, #15]
 8001e60:	f7ff fe2e 	bl	8001ac0 <SPI_RxByte>
 8001e64:	4603      	mov	r3, r0
 8001e66:	461a      	mov	r2, r3
 8001e68:	f104 0310 	add.w	r3, r4, #16
 8001e6c:	443b      	add	r3, r7
 8001e6e:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
 8001e74:	3301      	adds	r3, #1
 8001e76:	73fb      	strb	r3, [r7, #15]
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	d9ef      	bls.n	8001e5e <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001e7e:	7a3b      	ldrb	r3, [r7, #8]
 8001e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <SD_disk_initialize+0x104>
 8001e88:	230c      	movs	r3, #12
 8001e8a:	e000      	b.n	8001e8e <SD_disk_initialize+0x106>
 8001e8c:	2304      	movs	r3, #4
 8001e8e:	73bb      	strb	r3, [r7, #14]
 8001e90:	e03e      	b.n	8001f10 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001e92:	2100      	movs	r1, #0
 8001e94:	2077      	movs	r0, #119	@ 0x77
 8001e96:	f7ff ff22 	bl	8001cde <SD_SendCmd>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d808      	bhi.n	8001eb2 <SD_disk_initialize+0x12a>
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	2069      	movs	r0, #105	@ 0x69
 8001ea4:	f7ff ff1b 	bl	8001cde <SD_SendCmd>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d801      	bhi.n	8001eb2 <SD_disk_initialize+0x12a>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e000      	b.n	8001eb4 <SD_disk_initialize+0x12c>
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001eb6:	7bbb      	ldrb	r3, [r7, #14]
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d10e      	bne.n	8001eda <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	2077      	movs	r0, #119	@ 0x77
 8001ec0:	f7ff ff0d 	bl	8001cde <SD_SendCmd>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d80e      	bhi.n	8001ee8 <SD_disk_initialize+0x160>
 8001eca:	2100      	movs	r1, #0
 8001ecc:	2069      	movs	r0, #105	@ 0x69
 8001ece:	f7ff ff06 	bl	8001cde <SD_SendCmd>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d107      	bne.n	8001ee8 <SD_disk_initialize+0x160>
 8001ed8:	e00c      	b.n	8001ef4 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001eda:	2100      	movs	r1, #0
 8001edc:	2041      	movs	r0, #65	@ 0x41
 8001ede:	f7ff fefe 	bl	8001cde <SD_SendCmd>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d004      	beq.n	8001ef2 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001ee8:	4b18      	ldr	r3, [pc, #96]	@ (8001f4c <SD_disk_initialize+0x1c4>)
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1e2      	bne.n	8001eb6 <SD_disk_initialize+0x12e>
 8001ef0:	e000      	b.n	8001ef4 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001ef2:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001ef4:	4b15      	ldr	r3, [pc, #84]	@ (8001f4c <SD_disk_initialize+0x1c4>)
 8001ef6:	881b      	ldrh	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d007      	beq.n	8001f0c <SD_disk_initialize+0x184>
 8001efc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f00:	2050      	movs	r0, #80	@ 0x50
 8001f02:	f7ff feec 	bl	8001cde <SD_SendCmd>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <SD_disk_initialize+0x188>
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001f10:	4a0f      	ldr	r2, [pc, #60]	@ (8001f50 <SD_disk_initialize+0x1c8>)
 8001f12:	7bbb      	ldrb	r3, [r7, #14]
 8001f14:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001f16:	f7ff fd8f 	bl	8001a38 <DESELECT>
	SPI_RxByte();
 8001f1a:	f7ff fdd1 	bl	8001ac0 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001f1e:	7bbb      	ldrb	r3, [r7, #14]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d008      	beq.n	8001f36 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001f24:	4b08      	ldr	r3, [pc, #32]	@ (8001f48 <SD_disk_initialize+0x1c0>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	f023 0301 	bic.w	r3, r3, #1
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	4b05      	ldr	r3, [pc, #20]	@ (8001f48 <SD_disk_initialize+0x1c0>)
 8001f32:	701a      	strb	r2, [r3, #0]
 8001f34:	e001      	b.n	8001f3a <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001f36:	f7ff fe49 	bl	8001bcc <SD_PowerOff>
	}

	return Stat;
 8001f3a:	4b03      	ldr	r3, [pc, #12]	@ (8001f48 <SD_disk_initialize+0x1c0>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	b2db      	uxtb	r3, r3
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd90      	pop	{r4, r7, pc}
 8001f48:	20000000 	.word	0x20000000
 8001f4c:	2000020e 	.word	0x2000020e
 8001f50:	20000212 	.word	0x20000212

08001f54 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <SD_disk_status+0x14>
 8001f64:	2301      	movs	r3, #1
 8001f66:	e002      	b.n	8001f6e <SD_disk_status+0x1a>
	return Stat;
 8001f68:	4b04      	ldr	r3, [pc, #16]	@ (8001f7c <SD_disk_status+0x28>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	b2db      	uxtb	r3, r3
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	20000000 	.word	0x20000000

08001f80 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60b9      	str	r1, [r7, #8]
 8001f88:	607a      	str	r2, [r7, #4]
 8001f8a:	603b      	str	r3, [r7, #0]
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001f90:	7bfb      	ldrb	r3, [r7, #15]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d102      	bne.n	8001f9c <SD_disk_read+0x1c>
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <SD_disk_read+0x20>
 8001f9c:	2304      	movs	r3, #4
 8001f9e:	e051      	b.n	8002044 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001fa0:	4b2a      	ldr	r3, [pc, #168]	@ (800204c <SD_disk_read+0xcc>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <SD_disk_read+0x32>
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e048      	b.n	8002044 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001fb2:	4b27      	ldr	r3, [pc, #156]	@ (8002050 <SD_disk_read+0xd0>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	f003 0304 	and.w	r3, r3, #4
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d102      	bne.n	8001fc4 <SD_disk_read+0x44>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	025b      	lsls	r3, r3, #9
 8001fc2:	607b      	str	r3, [r7, #4]

	SELECT();
 8001fc4:	f7ff fd28 	bl	8001a18 <SELECT>

	if (count == 1)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d111      	bne.n	8001ff2 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	2051      	movs	r0, #81	@ 0x51
 8001fd2:	f7ff fe84 	bl	8001cde <SD_SendCmd>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d129      	bne.n	8002030 <SD_disk_read+0xb0>
 8001fdc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001fe0:	68b8      	ldr	r0, [r7, #8]
 8001fe2:	f7ff fe0b 	bl	8001bfc <SD_RxDataBlock>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d021      	beq.n	8002030 <SD_disk_read+0xb0>
 8001fec:	2300      	movs	r3, #0
 8001fee:	603b      	str	r3, [r7, #0]
 8001ff0:	e01e      	b.n	8002030 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	2052      	movs	r0, #82	@ 0x52
 8001ff6:	f7ff fe72 	bl	8001cde <SD_SendCmd>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d117      	bne.n	8002030 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8002000:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002004:	68b8      	ldr	r0, [r7, #8]
 8002006:	f7ff fdf9 	bl	8001bfc <SD_RxDataBlock>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00a      	beq.n	8002026 <SD_disk_read+0xa6>
				buff += 512;
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002016:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	3b01      	subs	r3, #1
 800201c:	603b      	str	r3, [r7, #0]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1ed      	bne.n	8002000 <SD_disk_read+0x80>
 8002024:	e000      	b.n	8002028 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8002026:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8002028:	2100      	movs	r1, #0
 800202a:	204c      	movs	r0, #76	@ 0x4c
 800202c:	f7ff fe57 	bl	8001cde <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8002030:	f7ff fd02 	bl	8001a38 <DESELECT>
	SPI_RxByte();
 8002034:	f7ff fd44 	bl	8001ac0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	bf14      	ite	ne
 800203e:	2301      	movne	r3, #1
 8002040:	2300      	moveq	r3, #0
 8002042:	b2db      	uxtb	r3, r3
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	20000000 	.word	0x20000000
 8002050:	20000212 	.word	0x20000212

08002054 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607a      	str	r2, [r7, #4]
 800205e:	603b      	str	r3, [r7, #0]
 8002060:	4603      	mov	r3, r0
 8002062:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8002064:	7bfb      	ldrb	r3, [r7, #15]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d102      	bne.n	8002070 <SD_disk_write+0x1c>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <SD_disk_write+0x20>
 8002070:	2304      	movs	r3, #4
 8002072:	e06b      	b.n	800214c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002074:	4b37      	ldr	r3, [pc, #220]	@ (8002154 <SD_disk_write+0x100>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	b2db      	uxtb	r3, r3
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <SD_disk_write+0x32>
 8002082:	2303      	movs	r3, #3
 8002084:	e062      	b.n	800214c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8002086:	4b33      	ldr	r3, [pc, #204]	@ (8002154 <SD_disk_write+0x100>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <SD_disk_write+0x44>
 8002094:	2302      	movs	r3, #2
 8002096:	e059      	b.n	800214c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8002098:	4b2f      	ldr	r3, [pc, #188]	@ (8002158 <SD_disk_write+0x104>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d102      	bne.n	80020aa <SD_disk_write+0x56>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	025b      	lsls	r3, r3, #9
 80020a8:	607b      	str	r3, [r7, #4]

	SELECT();
 80020aa:	f7ff fcb5 	bl	8001a18 <SELECT>

	if (count == 1)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d110      	bne.n	80020d6 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	2058      	movs	r0, #88	@ 0x58
 80020b8:	f7ff fe11 	bl	8001cde <SD_SendCmd>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d13a      	bne.n	8002138 <SD_disk_write+0xe4>
 80020c2:	21fe      	movs	r1, #254	@ 0xfe
 80020c4:	68b8      	ldr	r0, [r7, #8]
 80020c6:	f7ff fdc7 	bl	8001c58 <SD_TxDataBlock>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d033      	beq.n	8002138 <SD_disk_write+0xe4>
			count = 0;
 80020d0:	2300      	movs	r3, #0
 80020d2:	603b      	str	r3, [r7, #0]
 80020d4:	e030      	b.n	8002138 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80020d6:	4b20      	ldr	r3, [pc, #128]	@ (8002158 <SD_disk_write+0x104>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d007      	beq.n	80020f2 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80020e2:	2100      	movs	r1, #0
 80020e4:	2077      	movs	r0, #119	@ 0x77
 80020e6:	f7ff fdfa 	bl	8001cde <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80020ea:	6839      	ldr	r1, [r7, #0]
 80020ec:	2057      	movs	r0, #87	@ 0x57
 80020ee:	f7ff fdf6 	bl	8001cde <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	2059      	movs	r0, #89	@ 0x59
 80020f6:	f7ff fdf2 	bl	8001cde <SD_SendCmd>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d11b      	bne.n	8002138 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002100:	21fc      	movs	r1, #252	@ 0xfc
 8002102:	68b8      	ldr	r0, [r7, #8]
 8002104:	f7ff fda8 	bl	8001c58 <SD_TxDataBlock>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00a      	beq.n	8002124 <SD_disk_write+0xd0>
				buff += 512;
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002114:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	3b01      	subs	r3, #1
 800211a:	603b      	str	r3, [r7, #0]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1ee      	bne.n	8002100 <SD_disk_write+0xac>
 8002122:	e000      	b.n	8002126 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002124:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8002126:	21fd      	movs	r1, #253	@ 0xfd
 8002128:	2000      	movs	r0, #0
 800212a:	f7ff fd95 	bl	8001c58 <SD_TxDataBlock>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <SD_disk_write+0xe4>
			{
				count = 1;
 8002134:	2301      	movs	r3, #1
 8002136:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8002138:	f7ff fc7e 	bl	8001a38 <DESELECT>
	SPI_RxByte();
 800213c:	f7ff fcc0 	bl	8001ac0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	bf14      	ite	ne
 8002146:	2301      	movne	r3, #1
 8002148:	2300      	moveq	r3, #0
 800214a:	b2db      	uxtb	r3, r3
}
 800214c:	4618      	mov	r0, r3
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20000000 	.word	0x20000000
 8002158:	20000212 	.word	0x20000212

0800215c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800215c:	b590      	push	{r4, r7, lr}
 800215e:	b08b      	sub	sp, #44	@ 0x2c
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	603a      	str	r2, [r7, #0]
 8002166:	71fb      	strb	r3, [r7, #7]
 8002168:	460b      	mov	r3, r1
 800216a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8002170:	79fb      	ldrb	r3, [r7, #7]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <SD_disk_ioctl+0x1e>
 8002176:	2304      	movs	r3, #4
 8002178:	e113      	b.n	80023a2 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8002180:	79bb      	ldrb	r3, [r7, #6]
 8002182:	2b05      	cmp	r3, #5
 8002184:	d124      	bne.n	80021d0 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8002186:	6a3b      	ldr	r3, [r7, #32]
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b02      	cmp	r3, #2
 800218c:	d012      	beq.n	80021b4 <SD_disk_ioctl+0x58>
 800218e:	2b02      	cmp	r3, #2
 8002190:	dc1a      	bgt.n	80021c8 <SD_disk_ioctl+0x6c>
 8002192:	2b00      	cmp	r3, #0
 8002194:	d002      	beq.n	800219c <SD_disk_ioctl+0x40>
 8002196:	2b01      	cmp	r3, #1
 8002198:	d006      	beq.n	80021a8 <SD_disk_ioctl+0x4c>
 800219a:	e015      	b.n	80021c8 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 800219c:	f7ff fd16 	bl	8001bcc <SD_PowerOff>
			res = RES_OK;
 80021a0:	2300      	movs	r3, #0
 80021a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80021a6:	e0fa      	b.n	800239e <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 80021a8:	f7ff fcce 	bl	8001b48 <SD_PowerOn>
			res = RES_OK;
 80021ac:	2300      	movs	r3, #0
 80021ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80021b2:	e0f4      	b.n	800239e <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80021b4:	6a3b      	ldr	r3, [r7, #32]
 80021b6:	1c5c      	adds	r4, r3, #1
 80021b8:	f7ff fd14 	bl	8001be4 <SD_CheckPower>
 80021bc:	4603      	mov	r3, r0
 80021be:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80021c0:	2300      	movs	r3, #0
 80021c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80021c6:	e0ea      	b.n	800239e <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 80021c8:	2304      	movs	r3, #4
 80021ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80021ce:	e0e6      	b.n	800239e <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80021d0:	4b76      	ldr	r3, [pc, #472]	@ (80023ac <SD_disk_ioctl+0x250>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <SD_disk_ioctl+0x86>
 80021de:	2303      	movs	r3, #3
 80021e0:	e0df      	b.n	80023a2 <SD_disk_ioctl+0x246>

		SELECT();
 80021e2:	f7ff fc19 	bl	8001a18 <SELECT>

		switch (ctrl)
 80021e6:	79bb      	ldrb	r3, [r7, #6]
 80021e8:	2b0d      	cmp	r3, #13
 80021ea:	f200 80c9 	bhi.w	8002380 <SD_disk_ioctl+0x224>
 80021ee:	a201      	add	r2, pc, #4	@ (adr r2, 80021f4 <SD_disk_ioctl+0x98>)
 80021f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f4:	080022eb 	.word	0x080022eb
 80021f8:	0800222d 	.word	0x0800222d
 80021fc:	080022db 	.word	0x080022db
 8002200:	08002381 	.word	0x08002381
 8002204:	08002381 	.word	0x08002381
 8002208:	08002381 	.word	0x08002381
 800220c:	08002381 	.word	0x08002381
 8002210:	08002381 	.word	0x08002381
 8002214:	08002381 	.word	0x08002381
 8002218:	08002381 	.word	0x08002381
 800221c:	08002381 	.word	0x08002381
 8002220:	080022fd 	.word	0x080022fd
 8002224:	08002321 	.word	0x08002321
 8002228:	08002345 	.word	0x08002345
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800222c:	2100      	movs	r1, #0
 800222e:	2049      	movs	r0, #73	@ 0x49
 8002230:	f7ff fd55 	bl	8001cde <SD_SendCmd>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	f040 80a6 	bne.w	8002388 <SD_disk_ioctl+0x22c>
 800223c:	f107 030c 	add.w	r3, r7, #12
 8002240:	2110      	movs	r1, #16
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff fcda 	bl	8001bfc <SD_RxDataBlock>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 809c 	beq.w	8002388 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8002250:	7b3b      	ldrb	r3, [r7, #12]
 8002252:	099b      	lsrs	r3, r3, #6
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b01      	cmp	r3, #1
 8002258:	d10d      	bne.n	8002276 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800225a:	7d7b      	ldrb	r3, [r7, #21]
 800225c:	461a      	mov	r2, r3
 800225e:	7d3b      	ldrb	r3, [r7, #20]
 8002260:	021b      	lsls	r3, r3, #8
 8002262:	b29b      	uxth	r3, r3
 8002264:	4413      	add	r3, r2
 8002266:	b29b      	uxth	r3, r3
 8002268:	3301      	adds	r3, #1
 800226a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800226c:	8bfb      	ldrh	r3, [r7, #30]
 800226e:	029a      	lsls	r2, r3, #10
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	e02d      	b.n	80022d2 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002276:	7c7b      	ldrb	r3, [r7, #17]
 8002278:	f003 030f 	and.w	r3, r3, #15
 800227c:	b2da      	uxtb	r2, r3
 800227e:	7dbb      	ldrb	r3, [r7, #22]
 8002280:	09db      	lsrs	r3, r3, #7
 8002282:	b2db      	uxtb	r3, r3
 8002284:	4413      	add	r3, r2
 8002286:	b2da      	uxtb	r2, r3
 8002288:	7d7b      	ldrb	r3, [r7, #21]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	b2db      	uxtb	r3, r3
 800228e:	f003 0306 	and.w	r3, r3, #6
 8002292:	b2db      	uxtb	r3, r3
 8002294:	4413      	add	r3, r2
 8002296:	b2db      	uxtb	r3, r3
 8002298:	3302      	adds	r3, #2
 800229a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800229e:	7d3b      	ldrb	r3, [r7, #20]
 80022a0:	099b      	lsrs	r3, r3, #6
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	461a      	mov	r2, r3
 80022a6:	7cfb      	ldrb	r3, [r7, #19]
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	4413      	add	r3, r2
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	7cbb      	ldrb	r3, [r7, #18]
 80022b2:	029b      	lsls	r3, r3, #10
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	4413      	add	r3, r2
 80022be:	b29b      	uxth	r3, r3
 80022c0:	3301      	adds	r3, #1
 80022c2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80022c4:	8bfa      	ldrh	r2, [r7, #30]
 80022c6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80022ca:	3b09      	subs	r3, #9
 80022cc:	409a      	lsls	r2, r3
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80022d2:	2300      	movs	r3, #0
 80022d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 80022d8:	e056      	b.n	8002388 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022e0:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80022e2:	2300      	movs	r3, #0
 80022e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80022e8:	e055      	b.n	8002396 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80022ea:	f7ff fc13 	bl	8001b14 <SD_ReadyWait>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2bff      	cmp	r3, #255	@ 0xff
 80022f2:	d14b      	bne.n	800238c <SD_disk_ioctl+0x230>
 80022f4:	2300      	movs	r3, #0
 80022f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80022fa:	e047      	b.n	800238c <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80022fc:	2100      	movs	r1, #0
 80022fe:	2049      	movs	r0, #73	@ 0x49
 8002300:	f7ff fced 	bl	8001cde <SD_SendCmd>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d142      	bne.n	8002390 <SD_disk_ioctl+0x234>
 800230a:	2110      	movs	r1, #16
 800230c:	6a38      	ldr	r0, [r7, #32]
 800230e:	f7ff fc75 	bl	8001bfc <SD_RxDataBlock>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d03b      	beq.n	8002390 <SD_disk_ioctl+0x234>
 8002318:	2300      	movs	r3, #0
 800231a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800231e:	e037      	b.n	8002390 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002320:	2100      	movs	r1, #0
 8002322:	204a      	movs	r0, #74	@ 0x4a
 8002324:	f7ff fcdb 	bl	8001cde <SD_SendCmd>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d132      	bne.n	8002394 <SD_disk_ioctl+0x238>
 800232e:	2110      	movs	r1, #16
 8002330:	6a38      	ldr	r0, [r7, #32]
 8002332:	f7ff fc63 	bl	8001bfc <SD_RxDataBlock>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d02b      	beq.n	8002394 <SD_disk_ioctl+0x238>
 800233c:	2300      	movs	r3, #0
 800233e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002342:	e027      	b.n	8002394 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8002344:	2100      	movs	r1, #0
 8002346:	207a      	movs	r0, #122	@ 0x7a
 8002348:	f7ff fcc9 	bl	8001cde <SD_SendCmd>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d116      	bne.n	8002380 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8002352:	2300      	movs	r3, #0
 8002354:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002358:	e00b      	b.n	8002372 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 800235a:	6a3c      	ldr	r4, [r7, #32]
 800235c:	1c63      	adds	r3, r4, #1
 800235e:	623b      	str	r3, [r7, #32]
 8002360:	f7ff fbae 	bl	8001ac0 <SPI_RxByte>
 8002364:	4603      	mov	r3, r0
 8002366:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8002368:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800236c:	3301      	adds	r3, #1
 800236e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002372:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002376:	2b03      	cmp	r3, #3
 8002378:	d9ef      	bls.n	800235a <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 800237a:	2300      	movs	r3, #0
 800237c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8002380:	2304      	movs	r3, #4
 8002382:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002386:	e006      	b.n	8002396 <SD_disk_ioctl+0x23a>
			break;
 8002388:	bf00      	nop
 800238a:	e004      	b.n	8002396 <SD_disk_ioctl+0x23a>
			break;
 800238c:	bf00      	nop
 800238e:	e002      	b.n	8002396 <SD_disk_ioctl+0x23a>
			break;
 8002390:	bf00      	nop
 8002392:	e000      	b.n	8002396 <SD_disk_ioctl+0x23a>
			break;
 8002394:	bf00      	nop
		}

		DESELECT();
 8002396:	f7ff fb4f 	bl	8001a38 <DESELECT>
		SPI_RxByte();
 800239a:	f7ff fb91 	bl	8001ac0 <SPI_RxByte>
	}

	return res;
 800239e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	372c      	adds	r7, #44	@ 0x2c
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd90      	pop	{r4, r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000000 	.word	0x20000000

080023b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4a07      	ldr	r2, [pc, #28]	@ (80023dc <vApplicationGetIdleTaskMemory+0x2c>)
 80023c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	4a06      	ldr	r2, [pc, #24]	@ (80023e0 <vApplicationGetIdleTaskMemory+0x30>)
 80023c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2280      	movs	r2, #128	@ 0x80
 80023cc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80023ce:	bf00      	nop
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	20000214 	.word	0x20000214
 80023e0:	200002b4 	.word	0x200002b4

080023e4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80023ec:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80023f0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d013      	beq.n	8002424 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80023fc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002400:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8002404:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00b      	beq.n	8002424 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800240c:	e000      	b.n	8002410 <ITM_SendChar+0x2c>
    {
      __NOP();
 800240e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002410:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0f9      	beq.n	800240e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800241a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002424:	687b      	ldr	r3, [r7, #4]
}
 8002426:	4618      	mov	r0, r3
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
	...

08002434 <HAL_GPIO_EXTI_Callback>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin==INT_MPU6050_Pin) //interrupt called at 1kHz
 800243e:	88fb      	ldrh	r3, [r7, #6]
 8002440:	2b02      	cmp	r3, #2
 8002442:	d113      	bne.n	800246c <HAL_GPIO_EXTI_Callback+0x38>
	{
		mpuIntCount=mpuIntCount+1;
 8002444:	4b0b      	ldr	r3, [pc, #44]	@ (8002474 <HAL_GPIO_EXTI_Callback+0x40>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	3301      	adds	r3, #1
 800244a:	b2da      	uxtb	r2, r3
 800244c:	4b09      	ldr	r3, [pc, #36]	@ (8002474 <HAL_GPIO_EXTI_Callback+0x40>)
 800244e:	701a      	strb	r2, [r3, #0]
		if(mpuIntCount==20){ // downsample MPU6050 data at 50 Hz
 8002450:	4b08      	ldr	r3, [pc, #32]	@ (8002474 <HAL_GPIO_EXTI_Callback+0x40>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b14      	cmp	r3, #20
 8002456:	d109      	bne.n	800246c <HAL_GPIO_EXTI_Callback+0x38>
			message=MPU6050readDataDMA(&mpu6050);
 8002458:	4807      	ldr	r0, [pc, #28]	@ (8002478 <HAL_GPIO_EXTI_Callback+0x44>)
 800245a:	f7ff f9b7 	bl	80017cc <MPU6050readDataDMA>
 800245e:	4603      	mov	r3, r0
 8002460:	461a      	mov	r2, r3
 8002462:	4b06      	ldr	r3, [pc, #24]	@ (800247c <HAL_GPIO_EXTI_Callback+0x48>)
 8002464:	701a      	strb	r2, [r3, #0]
			//printf("error message: %i\r\n:",message);
			mpuIntCount=0;
 8002466:	4b03      	ldr	r3, [pc, #12]	@ (8002474 <HAL_GPIO_EXTI_Callback+0x40>)
 8002468:	2200      	movs	r2, #0
 800246a:	701a      	strb	r2, [r3, #0]
			//mpu6050.numCalibrationMeas=mpu6050.numCalibrationMeas+1;
		}
	}
}
 800246c:	bf00      	nop
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20002b95 	.word	0x20002b95
 8002478:	20002b1c 	.word	0x20002b1c
 800247c:	20002b94 	.word	0x20002b94

08002480 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef* hi2c)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance==mpu6050.i2cHandle->Instance)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	4b07      	ldr	r3, [pc, #28]	@ (80024ac <HAL_I2C_MemRxCpltCallback+0x2c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d106      	bne.n	80024a4 <HAL_I2C_MemRxCpltCallback+0x24>
	{
		mpu6050.rxFlag=0;
 8002496:	4b05      	ldr	r3, [pc, #20]	@ (80024ac <HAL_I2C_MemRxCpltCallback+0x2c>)
 8002498:	2200      	movs	r2, #0
 800249a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		MPU6050convertRawData(&mpu6050);
 800249e:	4803      	ldr	r0, [pc, #12]	@ (80024ac <HAL_I2C_MemRxCpltCallback+0x2c>)
 80024a0:	f7ff f9be 	bl	8001820 <MPU6050convertRawData>
		//MPU6050filterRawData(&mpu6050);

	}

}
 80024a4:	bf00      	nop
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	20002b1c 	.word	0x20002b1c

080024b0 <HAL_ADC_ConvCpltCallback>:
	uint8_t len=strlen(string);
	HAL_UART_Transmit(&huart2,(uint8_t*)string,len,200);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
	if(hadc->Instance==ADC1){
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a2e      	ldr	r2, [pc, #184]	@ (8002578 <HAL_ADC_ConvCpltCallback+0xc8>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d124      	bne.n	800250c <HAL_ADC_ConvCpltCallback+0x5c>
		joystick.joystickData[0]=adc1Data;
 80024c2:	4b2e      	ldr	r3, [pc, #184]	@ (800257c <HAL_ADC_ConvCpltCallback+0xcc>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a2e      	ldr	r2, [pc, #184]	@ (8002580 <HAL_ADC_ConvCpltCallback+0xd0>)
 80024c8:	6013      	str	r3, [r2, #0]
		joystick.joystickVoltage[0]=(float)joystick.joystickData[0]*3.3/4095.0f;
 80024ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002580 <HAL_ADC_ConvCpltCallback+0xd0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	ee07 3a90 	vmov	s15, r3
 80024d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024d6:	ee17 0a90 	vmov	r0, s15
 80024da:	f7fe f855 	bl	8000588 <__aeabi_f2d>
 80024de:	a322      	add	r3, pc, #136	@ (adr r3, 8002568 <HAL_ADC_ConvCpltCallback+0xb8>)
 80024e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e4:	f7fe f8a8 	bl	8000638 <__aeabi_dmul>
 80024e8:	4602      	mov	r2, r0
 80024ea:	460b      	mov	r3, r1
 80024ec:	4610      	mov	r0, r2
 80024ee:	4619      	mov	r1, r3
 80024f0:	a31f      	add	r3, pc, #124	@ (adr r3, 8002570 <HAL_ADC_ConvCpltCallback+0xc0>)
 80024f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f6:	f7fe f9c9 	bl	800088c <__aeabi_ddiv>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4610      	mov	r0, r2
 8002500:	4619      	mov	r1, r3
 8002502:	f7fe fb71 	bl	8000be8 <__aeabi_d2f>
 8002506:	4603      	mov	r3, r0
 8002508:	4a1d      	ldr	r2, [pc, #116]	@ (8002580 <HAL_ADC_ConvCpltCallback+0xd0>)
 800250a:	6093      	str	r3, [r2, #8]

	}
	if(hadc->Instance==ADC2){
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a1c      	ldr	r2, [pc, #112]	@ (8002584 <HAL_ADC_ConvCpltCallback+0xd4>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d124      	bne.n	8002560 <HAL_ADC_ConvCpltCallback+0xb0>
		joystick.joystickData[1]=adc2Data;
 8002516:	4b1c      	ldr	r3, [pc, #112]	@ (8002588 <HAL_ADC_ConvCpltCallback+0xd8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a19      	ldr	r2, [pc, #100]	@ (8002580 <HAL_ADC_ConvCpltCallback+0xd0>)
 800251c:	6053      	str	r3, [r2, #4]
		joystick.joystickVoltage[1]=(float)joystick.joystickData[1]*3.3/4095.0f;
 800251e:	4b18      	ldr	r3, [pc, #96]	@ (8002580 <HAL_ADC_ConvCpltCallback+0xd0>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	ee07 3a90 	vmov	s15, r3
 8002526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800252a:	ee17 0a90 	vmov	r0, s15
 800252e:	f7fe f82b 	bl	8000588 <__aeabi_f2d>
 8002532:	a30d      	add	r3, pc, #52	@ (adr r3, 8002568 <HAL_ADC_ConvCpltCallback+0xb8>)
 8002534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002538:	f7fe f87e 	bl	8000638 <__aeabi_dmul>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4610      	mov	r0, r2
 8002542:	4619      	mov	r1, r3
 8002544:	a30a      	add	r3, pc, #40	@ (adr r3, 8002570 <HAL_ADC_ConvCpltCallback+0xc0>)
 8002546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254a:	f7fe f99f 	bl	800088c <__aeabi_ddiv>
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	4610      	mov	r0, r2
 8002554:	4619      	mov	r1, r3
 8002556:	f7fe fb47 	bl	8000be8 <__aeabi_d2f>
 800255a:	4603      	mov	r3, r0
 800255c:	4a08      	ldr	r2, [pc, #32]	@ (8002580 <HAL_ADC_ConvCpltCallback+0xd0>)
 800255e:	60d3      	str	r3, [r2, #12]

	}
}
 8002560:	bf00      	nop
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	66666666 	.word	0x66666666
 800256c:	400a6666 	.word	0x400a6666
 8002570:	00000000 	.word	0x00000000
 8002574:	40affe00 	.word	0x40affe00
 8002578:	40012000 	.word	0x40012000
 800257c:	20002b14 	.word	0x20002b14
 8002580:	20002b04 	.word	0x20002b04
 8002584:	40012100 	.word	0x40012100
 8002588:	20002b18 	.word	0x20002b18

0800258c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]


}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]


}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <_write>:

int _write(int file, char *ptr, int len)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	e009      	b.n	80025da <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	60ba      	str	r2, [r7, #8]
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff ff08 	bl	80023e4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	3301      	adds	r3, #1
 80025d8:	617b      	str	r3, [r7, #20]
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	429a      	cmp	r2, r3
 80025e0:	dbf1      	blt.n	80025c6 <_write+0x12>
  }
  return len;
 80025e2:	687b      	ldr	r3, [r7, #4]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025ec:	b5b0      	push	{r4, r5, r7, lr}
 80025ee:	b0b0      	sub	sp, #192	@ 0xc0
 80025f0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025f2:	f002 f993 	bl	800491c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025f6:	f000 f939 	bl	800286c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025fa:	f000 fd1f 	bl	800303c <MX_GPIO_Init>
  MX_DMA_Init();
 80025fe:	f000 fcbf 	bl	8002f80 <MX_DMA_Init>
  MX_ADC1_Init();
 8002602:	f000 f99f 	bl	8002944 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002606:	f000 fa41 	bl	8002a8c <MX_I2C1_Init>
  MX_TIM3_Init();
 800260a:	f000 fb45 	bl	8002c98 <MX_TIM3_Init>
  MX_I2C2_Init();
 800260e:	f000 fa6b 	bl	8002ae8 <MX_I2C2_Init>
  MX_SPI2_Init();
 8002612:	f000 fa97 	bl	8002b44 <MX_SPI2_Init>
  MX_FATFS_Init();
 8002616:	f00a fd15 	bl	800d044 <MX_FATFS_Init>
  MX_TIM2_Init();
 800261a:	f000 fac9 	bl	8002bb0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800261e:	f000 fc53 	bl	8002ec8 <MX_USART2_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8002622:	f000 fca5 	bl	8002f70 <MX_USB_OTG_FS_USB_Init>
  MX_USART3_UART_Init();
 8002626:	f000 fc79 	bl	8002f1c <MX_USART3_UART_Init>
  MX_ADC2_Init();
 800262a:	f000 f9dd 	bl	80029e8 <MX_ADC2_Init>
  MX_TIM8_Init();
 800262e:	f000 fbad 	bl	8002d8c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  // Start servo PWM ( pulse duration from 0.9ms to 2.1ms with 1.5 as center ) duty cycle varies from 4.5% to 7.5%
  //( CCR can go from 425 to 1175 )
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8002632:	2100      	movs	r1, #0
 8002634:	4873      	ldr	r0, [pc, #460]	@ (8002804 <main+0x218>)
 8002636:	f008 fd3b 	bl	800b0b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 800263a:	2104      	movs	r1, #4
 800263c:	4871      	ldr	r0, [pc, #452]	@ (8002804 <main+0x218>)
 800263e:	f008 fd37 	bl	800b0b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8002642:	2108      	movs	r1, #8
 8002644:	486f      	ldr	r0, [pc, #444]	@ (8002804 <main+0x218>)
 8002646:	f008 fd33 	bl	800b0b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 800264a:	210c      	movs	r1, #12
 800264c:	486d      	ldr	r0, [pc, #436]	@ (8002804 <main+0x218>)
 800264e:	f008 fd2f 	bl	800b0b0 <HAL_TIM_PWM_Start>

  htim3.Instance->CCR1=SERVO_CENTER_PWM;
 8002652:	4b6c      	ldr	r3, [pc, #432]	@ (8002804 <main+0x218>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800265a:	635a      	str	r2, [r3, #52]	@ 0x34
  htim3.Instance->CCR2=SERVO_CENTER_PWM;
 800265c:	4b69      	ldr	r3, [pc, #420]	@ (8002804 <main+0x218>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002664:	639a      	str	r2, [r3, #56]	@ 0x38
  htim3.Instance->CCR3=SERVO_CENTER_PWM;
 8002666:	4b67      	ldr	r3, [pc, #412]	@ (8002804 <main+0x218>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800266e:	63da      	str	r2, [r3, #60]	@ 0x3c
  htim3.Instance->CCR4=SERVO_CENTER_PWM;
 8002670:	4b64      	ldr	r3, [pc, #400]	@ (8002804 <main+0x218>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002678:	641a      	str	r2, [r3, #64]	@ 0x40



  // Start DMA streams

  HAL_ADC_Start_DMA(&hadc1,&adc1Data,1);
 800267a:	2201      	movs	r2, #1
 800267c:	4962      	ldr	r1, [pc, #392]	@ (8002808 <main+0x21c>)
 800267e:	4863      	ldr	r0, [pc, #396]	@ (800280c <main+0x220>)
 8002680:	f002 fb06 	bl	8004c90 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2,&adc2Data,1);
 8002684:	2201      	movs	r2, #1
 8002686:	4962      	ldr	r1, [pc, #392]	@ (8002810 <main+0x224>)
 8002688:	4862      	ldr	r0, [pc, #392]	@ (8002814 <main+0x228>)
 800268a:	f002 fb01 	bl	8004c90 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim2);
 800268e:	4862      	ldr	r0, [pc, #392]	@ (8002818 <main+0x22c>)
 8002690:	f008 fbe6 	bl	800ae60 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim8);
 8002694:	4861      	ldr	r0, [pc, #388]	@ (800281c <main+0x230>)
 8002696:	f008 fbe3 	bl	800ae60 <HAL_TIM_Base_Start>


  // sensor initialization
  uint8_t deviceReady;
  deviceReady=checkMPU6050Ready();
 800269a:	f7fe ffc1 	bl	8001620 <checkMPU6050Ready>
 800269e:	4603      	mov	r3, r0
 80026a0:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
  uint8_t configGood=MPU6050init(&mpu6050,&hi2c1);
 80026a4:	495e      	ldr	r1, [pc, #376]	@ (8002820 <main+0x234>)
 80026a6:	485f      	ldr	r0, [pc, #380]	@ (8002824 <main+0x238>)
 80026a8:	f7fe ffee 	bl	8001688 <MPU6050init>
 80026ac:	4603      	mov	r3, r0
 80026ae:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
  uint8_t rec;
  HAL_StatusTypeDef stat;
  stat=HAL_I2C_Mem_Read (&hi2c1,MPU6050ADDR,WHO_AM_I_REG,I2C_MEMADD_SIZE_8BIT,&rec,1,100);
 80026b2:	2364      	movs	r3, #100	@ 0x64
 80026b4:	9302      	str	r3, [sp, #8]
 80026b6:	2301      	movs	r3, #1
 80026b8:	9301      	str	r3, [sp, #4]
 80026ba:	f107 03ab 	add.w	r3, r7, #171	@ 0xab
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	2301      	movs	r3, #1
 80026c2:	2275      	movs	r2, #117	@ 0x75
 80026c4:	21d0      	movs	r1, #208	@ 0xd0
 80026c6:	4856      	ldr	r0, [pc, #344]	@ (8002820 <main+0x234>)
 80026c8:	f004 faf0 	bl	8006cac <HAL_I2C_Mem_Read>
 80026cc:	4603      	mov	r3, r0
 80026ce:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad

  Bar30init(&pressureSensor, &hi2c2);
 80026d2:	4955      	ldr	r1, [pc, #340]	@ (8002828 <main+0x23c>)
 80026d4:	4855      	ldr	r0, [pc, #340]	@ (800282c <main+0x240>)
 80026d6:	f7fe fc4f 	bl	8000f78 <Bar30init>
  uint8_t i2cGood=0;
 80026da:	2300      	movs	r3, #0
 80026dc:	f887 30ac 	strb.w	r3, [r7, #172]	@ 0xac
  i2cGood=Bar30reset(&pressureSensor);
 80026e0:	4852      	ldr	r0, [pc, #328]	@ (800282c <main+0x240>)
 80026e2:	f7fe fc7f 	bl	8000fe4 <Bar30reset>
 80026e6:	4603      	mov	r3, r0
 80026e8:	f887 30ac 	strb.w	r3, [r7, #172]	@ 0xac
  printf("Reset Command Result : %i\r\n",i2cGood );
 80026ec:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 80026f0:	4619      	mov	r1, r3
 80026f2:	484f      	ldr	r0, [pc, #316]	@ (8002830 <main+0x244>)
 80026f4:	f011 f912 	bl	801391c <iprintf>
  i2cGood=Bar30getCalibration(&pressureSensor);
 80026f8:	484c      	ldr	r0, [pc, #304]	@ (800282c <main+0x240>)
 80026fa:	f7fe fc99 	bl	8001030 <Bar30getCalibration>
 80026fe:	4603      	mov	r3, r0
 8002700:	f887 30ac 	strb.w	r3, [r7, #172]	@ 0xac
  printf("Calibration phase result : %i\r\n",i2cGood );
 8002704:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 8002708:	4619      	mov	r1, r3
 800270a:	484a      	ldr	r0, [pc, #296]	@ (8002834 <main+0x248>)
 800270c:	f011 f906 	bl	801391c <iprintf>
  i2cGood=Bar30CRCcheck(pressureSensor.calibrationResult);
 8002710:	4849      	ldr	r0, [pc, #292]	@ (8002838 <main+0x24c>)
 8002712:	f7fe fdf7 	bl	8001304 <Bar30CRCcheck>
 8002716:	4603      	mov	r3, r0
 8002718:	f887 30ac 	strb.w	r3, [r7, #172]	@ 0xac
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of DefaultTask */
  osThreadDef(DefaultTask, defaultTask, osPriorityIdle, 0, 128);
 800271c:	4b47      	ldr	r3, [pc, #284]	@ (800283c <main+0x250>)
 800271e:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8002722:	461d      	mov	r5, r3
 8002724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002728:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800272c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DefaultTaskHandle = osThreadCreate(osThread(DefaultTask), NULL);
 8002730:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002734:	2100      	movs	r1, #0
 8002736:	4618      	mov	r0, r3
 8002738:	f00d ffb1 	bl	801069e <osThreadCreate>
 800273c:	4603      	mov	r3, r0
 800273e:	4a40      	ldr	r2, [pc, #256]	@ (8002840 <main+0x254>)
 8002740:	6013      	str	r3, [r2, #0]

  /* definition and creation of LEDscreenTask */
  osThreadDef(LEDscreenTask, sendDataToScreen, osPriorityNormal, 0, 512);
 8002742:	4b40      	ldr	r3, [pc, #256]	@ (8002844 <main+0x258>)
 8002744:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8002748:	461d      	mov	r5, r3
 800274a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800274c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800274e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002752:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LEDscreenTaskHandle = osThreadCreate(osThread(LEDscreenTask), NULL);
 8002756:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800275a:	2100      	movs	r1, #0
 800275c:	4618      	mov	r0, r3
 800275e:	f00d ff9e 	bl	801069e <osThreadCreate>
 8002762:	4603      	mov	r3, r0
 8002764:	4a38      	ldr	r2, [pc, #224]	@ (8002848 <main+0x25c>)
 8002766:	6013      	str	r3, [r2, #0]

  /* definition and creation of controlLoopTask */
  osThreadDef(controlLoopTask, updateControlLoop, osPriorityHigh, 0, 128);
 8002768:	4b38      	ldr	r3, [pc, #224]	@ (800284c <main+0x260>)
 800276a:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 800276e:	461d      	mov	r5, r3
 8002770:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002774:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002778:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  controlLoopTaskHandle = osThreadCreate(osThread(controlLoopTask), NULL);
 800277c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002780:	2100      	movs	r1, #0
 8002782:	4618      	mov	r0, r3
 8002784:	f00d ff8b 	bl	801069e <osThreadCreate>
 8002788:	4603      	mov	r3, r0
 800278a:	4a31      	ldr	r2, [pc, #196]	@ (8002850 <main+0x264>)
 800278c:	6013      	str	r3, [r2, #0]

  /* definition and creation of SDcardTask */
  osThreadDef(SDcardTask, recordSDdata, osPriorityNormal, 0, 2048);
 800278e:	4b31      	ldr	r3, [pc, #196]	@ (8002854 <main+0x268>)
 8002790:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8002794:	461d      	mov	r5, r3
 8002796:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002798:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800279a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800279e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SDcardTaskHandle = osThreadCreate(osThread(SDcardTask), NULL);
 80027a2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80027a6:	2100      	movs	r1, #0
 80027a8:	4618      	mov	r0, r3
 80027aa:	f00d ff78 	bl	801069e <osThreadCreate>
 80027ae:	4603      	mov	r3, r0
 80027b0:	4a29      	ldr	r2, [pc, #164]	@ (8002858 <main+0x26c>)
 80027b2:	6013      	str	r3, [r2, #0]

  /* definition and creation of pressureSensorT */
  osThreadDef(pressureSensorT, getBar30Data, osPriorityNormal, 0, 128);
 80027b4:	4b29      	ldr	r3, [pc, #164]	@ (800285c <main+0x270>)
 80027b6:	f107 041c 	add.w	r4, r7, #28
 80027ba:	461d      	mov	r5, r3
 80027bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pressureSensorTHandle = osThreadCreate(osThread(pressureSensorT), NULL);
 80027c8:	f107 031c 	add.w	r3, r7, #28
 80027cc:	2100      	movs	r1, #0
 80027ce:	4618      	mov	r0, r3
 80027d0:	f00d ff65 	bl	801069e <osThreadCreate>
 80027d4:	4603      	mov	r3, r0
 80027d6:	4a22      	ldr	r2, [pc, #136]	@ (8002860 <main+0x274>)
 80027d8:	6013      	str	r3, [r2, #0]

  /* definition and creation of KalmanPredict */
  osThreadDef(KalmanPredict, EKFpredict, osPriorityNormal, 0, 128);
 80027da:	4b22      	ldr	r3, [pc, #136]	@ (8002864 <main+0x278>)
 80027dc:	463c      	mov	r4, r7
 80027de:	461d      	mov	r5, r3
 80027e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  KalmanPredictHandle = osThreadCreate(osThread(KalmanPredict), NULL);
 80027ec:	463b      	mov	r3, r7
 80027ee:	2100      	movs	r1, #0
 80027f0:	4618      	mov	r0, r3
 80027f2:	f00d ff54 	bl	801069e <osThreadCreate>
 80027f6:	4603      	mov	r3, r0
 80027f8:	4a1b      	ldr	r2, [pc, #108]	@ (8002868 <main+0x27c>)
 80027fa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80027fc:	f00d ff48 	bl	8010690 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  while (1)
 8002800:	bf00      	nop
 8002802:	e7fd      	b.n	8002800 <main+0x214>
 8002804:	200028b4 	.word	0x200028b4
 8002808:	20002b14 	.word	0x20002b14
 800280c:	200025b4 	.word	0x200025b4
 8002810:	20002b18 	.word	0x20002b18
 8002814:	200025fc 	.word	0x200025fc
 8002818:	2000286c 	.word	0x2000286c
 800281c:	200028fc 	.word	0x200028fc
 8002820:	20002704 	.word	0x20002704
 8002824:	20002b1c 	.word	0x20002b1c
 8002828:	20002758 	.word	0x20002758
 800282c:	20002b68 	.word	0x20002b68
 8002830:	08016d58 	.word	0x08016d58
 8002834:	08016d74 	.word	0x08016d74
 8002838:	20002b7c 	.word	0x20002b7c
 800283c:	08016da0 	.word	0x08016da0
 8002840:	20002aec 	.word	0x20002aec
 8002844:	08016dcc 	.word	0x08016dcc
 8002848:	20002af0 	.word	0x20002af0
 800284c:	08016df8 	.word	0x08016df8
 8002850:	20002af4 	.word	0x20002af4
 8002854:	08016e20 	.word	0x08016e20
 8002858:	20002af8 	.word	0x20002af8
 800285c:	08016e4c 	.word	0x08016e4c
 8002860:	20002afc 	.word	0x20002afc
 8002864:	08016e78 	.word	0x08016e78
 8002868:	20002b00 	.word	0x20002b00

0800286c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b094      	sub	sp, #80	@ 0x50
 8002870:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002872:	f107 031c 	add.w	r3, r7, #28
 8002876:	2234      	movs	r2, #52	@ 0x34
 8002878:	2100      	movs	r1, #0
 800287a:	4618      	mov	r0, r3
 800287c:	f011 f8c3 	bl	8013a06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002880:	f107 0308 	add.w	r3, r7, #8
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	605a      	str	r2, [r3, #4]
 800288a:	609a      	str	r2, [r3, #8]
 800288c:	60da      	str	r2, [r3, #12]
 800288e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002890:	2300      	movs	r3, #0
 8002892:	607b      	str	r3, [r7, #4]
 8002894:	4b29      	ldr	r3, [pc, #164]	@ (800293c <SystemClock_Config+0xd0>)
 8002896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002898:	4a28      	ldr	r2, [pc, #160]	@ (800293c <SystemClock_Config+0xd0>)
 800289a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800289e:	6413      	str	r3, [r2, #64]	@ 0x40
 80028a0:	4b26      	ldr	r3, [pc, #152]	@ (800293c <SystemClock_Config+0xd0>)
 80028a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a8:	607b      	str	r3, [r7, #4]
 80028aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028ac:	2300      	movs	r3, #0
 80028ae:	603b      	str	r3, [r7, #0]
 80028b0:	4b23      	ldr	r3, [pc, #140]	@ (8002940 <SystemClock_Config+0xd4>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a22      	ldr	r2, [pc, #136]	@ (8002940 <SystemClock_Config+0xd4>)
 80028b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028ba:	6013      	str	r3, [r2, #0]
 80028bc:	4b20      	ldr	r3, [pc, #128]	@ (8002940 <SystemClock_Config+0xd4>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80028c4:	603b      	str	r3, [r7, #0]
 80028c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028c8:	2301      	movs	r3, #1
 80028ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028d2:	2302      	movs	r3, #2
 80028d4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80028da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80028dc:	2308      	movs	r3, #8
 80028de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80028e0:	23a8      	movs	r3, #168	@ 0xa8
 80028e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028e4:	2302      	movs	r3, #2
 80028e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80028e8:	2307      	movs	r3, #7
 80028ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80028ec:	2302      	movs	r3, #2
 80028ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028f0:	f107 031c 	add.w	r3, r7, #28
 80028f4:	4618      	mov	r0, r3
 80028f6:	f007 fb93 	bl	800a020 <HAL_RCC_OscConfig>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002900:	f001 f89a 	bl	8003a38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002904:	230f      	movs	r3, #15
 8002906:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002908:	2302      	movs	r3, #2
 800290a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800290c:	2300      	movs	r3, #0
 800290e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002910:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002914:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002916:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800291a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800291c:	f107 0308 	add.w	r3, r7, #8
 8002920:	2105      	movs	r1, #5
 8002922:	4618      	mov	r0, r3
 8002924:	f007 f802 	bl	800992c <HAL_RCC_ClockConfig>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800292e:	f001 f883 	bl	8003a38 <Error_Handler>
  }
}
 8002932:	bf00      	nop
 8002934:	3750      	adds	r7, #80	@ 0x50
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40023800 	.word	0x40023800
 8002940:	40007000 	.word	0x40007000

08002944 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800294a:	463b      	mov	r3, r7
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002956:	4b22      	ldr	r3, [pc, #136]	@ (80029e0 <MX_ADC1_Init+0x9c>)
 8002958:	4a22      	ldr	r2, [pc, #136]	@ (80029e4 <MX_ADC1_Init+0xa0>)
 800295a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800295c:	4b20      	ldr	r3, [pc, #128]	@ (80029e0 <MX_ADC1_Init+0x9c>)
 800295e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002962:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002964:	4b1e      	ldr	r3, [pc, #120]	@ (80029e0 <MX_ADC1_Init+0x9c>)
 8002966:	2200      	movs	r2, #0
 8002968:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800296a:	4b1d      	ldr	r3, [pc, #116]	@ (80029e0 <MX_ADC1_Init+0x9c>)
 800296c:	2201      	movs	r2, #1
 800296e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002970:	4b1b      	ldr	r3, [pc, #108]	@ (80029e0 <MX_ADC1_Init+0x9c>)
 8002972:	2200      	movs	r2, #0
 8002974:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002976:	4b1a      	ldr	r3, [pc, #104]	@ (80029e0 <MX_ADC1_Init+0x9c>)
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800297e:	4b18      	ldr	r3, [pc, #96]	@ (80029e0 <MX_ADC1_Init+0x9c>)
 8002980:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002984:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8002986:	4b16      	ldr	r3, [pc, #88]	@ (80029e0 <MX_ADC1_Init+0x9c>)
 8002988:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800298c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800298e:	4b14      	ldr	r3, [pc, #80]	@ (80029e0 <MX_ADC1_Init+0x9c>)
 8002990:	2200      	movs	r2, #0
 8002992:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002994:	4b12      	ldr	r3, [pc, #72]	@ (80029e0 <MX_ADC1_Init+0x9c>)
 8002996:	2201      	movs	r2, #1
 8002998:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800299a:	4b11      	ldr	r3, [pc, #68]	@ (80029e0 <MX_ADC1_Init+0x9c>)
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80029a2:	4b0f      	ldr	r3, [pc, #60]	@ (80029e0 <MX_ADC1_Init+0x9c>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029a8:	480d      	ldr	r0, [pc, #52]	@ (80029e0 <MX_ADC1_Init+0x9c>)
 80029aa:	f002 f81d 	bl	80049e8 <HAL_ADC_Init>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80029b4:	f001 f840 	bl	8003a38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80029b8:	2300      	movs	r3, #0
 80029ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80029bc:	2301      	movs	r3, #1
 80029be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80029c0:	2306      	movs	r3, #6
 80029c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029c4:	463b      	mov	r3, r7
 80029c6:	4619      	mov	r1, r3
 80029c8:	4805      	ldr	r0, [pc, #20]	@ (80029e0 <MX_ADC1_Init+0x9c>)
 80029ca:	f002 fa8f 	bl	8004eec <HAL_ADC_ConfigChannel>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80029d4:	f001 f830 	bl	8003a38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80029d8:	bf00      	nop
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	200025b4 	.word	0x200025b4
 80029e4:	40012000 	.word	0x40012000

080029e8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80029ee:	463b      	mov	r3, r7
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80029fa:	4b22      	ldr	r3, [pc, #136]	@ (8002a84 <MX_ADC2_Init+0x9c>)
 80029fc:	4a22      	ldr	r2, [pc, #136]	@ (8002a88 <MX_ADC2_Init+0xa0>)
 80029fe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002a00:	4b20      	ldr	r3, [pc, #128]	@ (8002a84 <MX_ADC2_Init+0x9c>)
 8002a02:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002a06:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002a08:	4b1e      	ldr	r3, [pc, #120]	@ (8002a84 <MX_ADC2_Init+0x9c>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8002a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8002a84 <MX_ADC2_Init+0x9c>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002a14:	4b1b      	ldr	r3, [pc, #108]	@ (8002a84 <MX_ADC2_Init+0x9c>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8002a84 <MX_ADC2_Init+0x9c>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 8002a22:	4b18      	ldr	r3, [pc, #96]	@ (8002a84 <MX_ADC2_Init+0x9c>)
 8002a24:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002a28:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8002a2a:	4b16      	ldr	r3, [pc, #88]	@ (8002a84 <MX_ADC2_Init+0x9c>)
 8002a2c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002a30:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a32:	4b14      	ldr	r3, [pc, #80]	@ (8002a84 <MX_ADC2_Init+0x9c>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002a38:	4b12      	ldr	r3, [pc, #72]	@ (8002a84 <MX_ADC2_Init+0x9c>)
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8002a3e:	4b11      	ldr	r3, [pc, #68]	@ (8002a84 <MX_ADC2_Init+0x9c>)
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a46:	4b0f      	ldr	r3, [pc, #60]	@ (8002a84 <MX_ADC2_Init+0x9c>)
 8002a48:	2201      	movs	r2, #1
 8002a4a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002a4c:	480d      	ldr	r0, [pc, #52]	@ (8002a84 <MX_ADC2_Init+0x9c>)
 8002a4e:	f001 ffcb 	bl	80049e8 <HAL_ADC_Init>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8002a58:	f000 ffee 	bl	8003a38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002a60:	2301      	movs	r3, #1
 8002a62:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002a68:	463b      	mov	r3, r7
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4805      	ldr	r0, [pc, #20]	@ (8002a84 <MX_ADC2_Init+0x9c>)
 8002a6e:	f002 fa3d 	bl	8004eec <HAL_ADC_ConfigChannel>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8002a78:	f000 ffde 	bl	8003a38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002a7c:	bf00      	nop
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	200025fc 	.word	0x200025fc
 8002a88:	40012100 	.word	0x40012100

08002a8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a90:	4b12      	ldr	r3, [pc, #72]	@ (8002adc <MX_I2C1_Init+0x50>)
 8002a92:	4a13      	ldr	r2, [pc, #76]	@ (8002ae0 <MX_I2C1_Init+0x54>)
 8002a94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002a96:	4b11      	ldr	r3, [pc, #68]	@ (8002adc <MX_I2C1_Init+0x50>)
 8002a98:	4a12      	ldr	r2, [pc, #72]	@ (8002ae4 <MX_I2C1_Init+0x58>)
 8002a9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002adc <MX_I2C1_Init+0x50>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8002adc <MX_I2C1_Init+0x50>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8002adc <MX_I2C1_Init+0x50>)
 8002aaa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002aae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8002adc <MX_I2C1_Init+0x50>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002ab6:	4b09      	ldr	r3, [pc, #36]	@ (8002adc <MX_I2C1_Init+0x50>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002abc:	4b07      	ldr	r3, [pc, #28]	@ (8002adc <MX_I2C1_Init+0x50>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ac2:	4b06      	ldr	r3, [pc, #24]	@ (8002adc <MX_I2C1_Init+0x50>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ac8:	4804      	ldr	r0, [pc, #16]	@ (8002adc <MX_I2C1_Init+0x50>)
 8002aca:	f003 fb8d 	bl	80061e8 <HAL_I2C_Init>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002ad4:	f000 ffb0 	bl	8003a38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ad8:	bf00      	nop
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	20002704 	.word	0x20002704
 8002ae0:	40005400 	.word	0x40005400
 8002ae4:	00061a80 	.word	0x00061a80

08002ae8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002aec:	4b12      	ldr	r3, [pc, #72]	@ (8002b38 <MX_I2C2_Init+0x50>)
 8002aee:	4a13      	ldr	r2, [pc, #76]	@ (8002b3c <MX_I2C2_Init+0x54>)
 8002af0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002af2:	4b11      	ldr	r3, [pc, #68]	@ (8002b38 <MX_I2C2_Init+0x50>)
 8002af4:	4a12      	ldr	r2, [pc, #72]	@ (8002b40 <MX_I2C2_Init+0x58>)
 8002af6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002af8:	4b0f      	ldr	r3, [pc, #60]	@ (8002b38 <MX_I2C2_Init+0x50>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002afe:	4b0e      	ldr	r3, [pc, #56]	@ (8002b38 <MX_I2C2_Init+0x50>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b04:	4b0c      	ldr	r3, [pc, #48]	@ (8002b38 <MX_I2C2_Init+0x50>)
 8002b06:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b0a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b38 <MX_I2C2_Init+0x50>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002b12:	4b09      	ldr	r3, [pc, #36]	@ (8002b38 <MX_I2C2_Init+0x50>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b18:	4b07      	ldr	r3, [pc, #28]	@ (8002b38 <MX_I2C2_Init+0x50>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b1e:	4b06      	ldr	r3, [pc, #24]	@ (8002b38 <MX_I2C2_Init+0x50>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002b24:	4804      	ldr	r0, [pc, #16]	@ (8002b38 <MX_I2C2_Init+0x50>)
 8002b26:	f003 fb5f 	bl	80061e8 <HAL_I2C_Init>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002b30:	f000 ff82 	bl	8003a38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002b34:	bf00      	nop
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	20002758 	.word	0x20002758
 8002b3c:	40005800 	.word	0x40005800
 8002b40:	000186a0 	.word	0x000186a0

08002b44 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002b48:	4b17      	ldr	r3, [pc, #92]	@ (8002ba8 <MX_SPI2_Init+0x64>)
 8002b4a:	4a18      	ldr	r2, [pc, #96]	@ (8002bac <MX_SPI2_Init+0x68>)
 8002b4c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002b4e:	4b16      	ldr	r3, [pc, #88]	@ (8002ba8 <MX_SPI2_Init+0x64>)
 8002b50:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002b54:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002b56:	4b14      	ldr	r3, [pc, #80]	@ (8002ba8 <MX_SPI2_Init+0x64>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b5c:	4b12      	ldr	r3, [pc, #72]	@ (8002ba8 <MX_SPI2_Init+0x64>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b62:	4b11      	ldr	r3, [pc, #68]	@ (8002ba8 <MX_SPI2_Init+0x64>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b68:	4b0f      	ldr	r3, [pc, #60]	@ (8002ba8 <MX_SPI2_Init+0x64>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ba8 <MX_SPI2_Init+0x64>)
 8002b70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b74:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002b76:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba8 <MX_SPI2_Init+0x64>)
 8002b78:	2208      	movs	r2, #8
 8002b7a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ba8 <MX_SPI2_Init+0x64>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b82:	4b09      	ldr	r3, [pc, #36]	@ (8002ba8 <MX_SPI2_Init+0x64>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b88:	4b07      	ldr	r3, [pc, #28]	@ (8002ba8 <MX_SPI2_Init+0x64>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002b8e:	4b06      	ldr	r3, [pc, #24]	@ (8002ba8 <MX_SPI2_Init+0x64>)
 8002b90:	220a      	movs	r2, #10
 8002b92:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b94:	4804      	ldr	r0, [pc, #16]	@ (8002ba8 <MX_SPI2_Init+0x64>)
 8002b96:	f007 fce1 	bl	800a55c <HAL_SPI_Init>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002ba0:	f000 ff4a 	bl	8003a38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002ba4:	bf00      	nop
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	200004b4 	.word	0x200004b4
 8002bac:	40003800 	.word	0x40003800

08002bb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b08e      	sub	sp, #56	@ 0x38
 8002bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bb6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	605a      	str	r2, [r3, #4]
 8002bc0:	609a      	str	r2, [r3, #8]
 8002bc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bc4:	f107 0320 	add.w	r3, r7, #32
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bce:	1d3b      	adds	r3, r7, #4
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	609a      	str	r2, [r3, #8]
 8002bd8:	60da      	str	r2, [r3, #12]
 8002bda:	611a      	str	r2, [r3, #16]
 8002bdc:	615a      	str	r2, [r3, #20]
 8002bde:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002be0:	4b2c      	ldr	r3, [pc, #176]	@ (8002c94 <MX_TIM2_Init+0xe4>)
 8002be2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002be6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8002be8:	4b2a      	ldr	r3, [pc, #168]	@ (8002c94 <MX_TIM2_Init+0xe4>)
 8002bea:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8002bee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bf0:	4b28      	ldr	r3, [pc, #160]	@ (8002c94 <MX_TIM2_Init+0xe4>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8002bf6:	4b27      	ldr	r3, [pc, #156]	@ (8002c94 <MX_TIM2_Init+0xe4>)
 8002bf8:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002bfc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bfe:	4b25      	ldr	r3, [pc, #148]	@ (8002c94 <MX_TIM2_Init+0xe4>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c04:	4b23      	ldr	r3, [pc, #140]	@ (8002c94 <MX_TIM2_Init+0xe4>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c0a:	4822      	ldr	r0, [pc, #136]	@ (8002c94 <MX_TIM2_Init+0xe4>)
 8002c0c:	f008 f8d8 	bl	800adc0 <HAL_TIM_Base_Init>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002c16:	f000 ff0f 	bl	8003a38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c20:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002c24:	4619      	mov	r1, r3
 8002c26:	481b      	ldr	r0, [pc, #108]	@ (8002c94 <MX_TIM2_Init+0xe4>)
 8002c28:	f008 fcd4 	bl	800b5d4 <HAL_TIM_ConfigClockSource>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002c32:	f000 ff01 	bl	8003a38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002c36:	4817      	ldr	r0, [pc, #92]	@ (8002c94 <MX_TIM2_Init+0xe4>)
 8002c38:	f008 f9ea 	bl	800b010 <HAL_TIM_PWM_Init>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002c42:	f000 fef9 	bl	8003a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002c46:	2320      	movs	r3, #32
 8002c48:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c4e:	f107 0320 	add.w	r3, r7, #32
 8002c52:	4619      	mov	r1, r3
 8002c54:	480f      	ldr	r0, [pc, #60]	@ (8002c94 <MX_TIM2_Init+0xe4>)
 8002c56:	f009 f8bd 	bl	800bdd4 <HAL_TIMEx_MasterConfigSynchronization>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002c60:	f000 feea 	bl	8003a38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c64:	2360      	movs	r3, #96	@ 0x60
 8002c66:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c74:	1d3b      	adds	r3, r7, #4
 8002c76:	2200      	movs	r2, #0
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4806      	ldr	r0, [pc, #24]	@ (8002c94 <MX_TIM2_Init+0xe4>)
 8002c7c:	f008 fbe8 	bl	800b450 <HAL_TIM_PWM_ConfigChannel>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002c86:	f000 fed7 	bl	8003a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c8a:	bf00      	nop
 8002c8c:	3738      	adds	r7, #56	@ 0x38
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	2000286c 	.word	0x2000286c

08002c98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08a      	sub	sp, #40	@ 0x28
 8002c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c9e:	f107 0320 	add.w	r3, r7, #32
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ca8:	1d3b      	adds	r3, r7, #4
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	605a      	str	r2, [r3, #4]
 8002cb0:	609a      	str	r2, [r3, #8]
 8002cb2:	60da      	str	r2, [r3, #12]
 8002cb4:	611a      	str	r2, [r3, #16]
 8002cb6:	615a      	str	r2, [r3, #20]
 8002cb8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002cba:	4b32      	ldr	r3, [pc, #200]	@ (8002d84 <MX_TIM3_Init+0xec>)
 8002cbc:	4a32      	ldr	r2, [pc, #200]	@ (8002d88 <MX_TIM3_Init+0xf0>)
 8002cbe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 168;
 8002cc0:	4b30      	ldr	r3, [pc, #192]	@ (8002d84 <MX_TIM3_Init+0xec>)
 8002cc2:	22a8      	movs	r2, #168	@ 0xa8
 8002cc4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cc6:	4b2f      	ldr	r3, [pc, #188]	@ (8002d84 <MX_TIM3_Init+0xec>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8002ccc:	4b2d      	ldr	r3, [pc, #180]	@ (8002d84 <MX_TIM3_Init+0xec>)
 8002cce:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002cd2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8002d84 <MX_TIM3_Init+0xec>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cda:	4b2a      	ldr	r3, [pc, #168]	@ (8002d84 <MX_TIM3_Init+0xec>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002ce0:	4828      	ldr	r0, [pc, #160]	@ (8002d84 <MX_TIM3_Init+0xec>)
 8002ce2:	f008 f995 	bl	800b010 <HAL_TIM_PWM_Init>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002cec:	f000 fea4 	bl	8003a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002cf8:	f107 0320 	add.w	r3, r7, #32
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4821      	ldr	r0, [pc, #132]	@ (8002d84 <MX_TIM3_Init+0xec>)
 8002d00:	f009 f868 	bl	800bdd4 <HAL_TIMEx_MasterConfigSynchronization>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002d0a:	f000 fe95 	bl	8003a38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d0e:	2360      	movs	r3, #96	@ 0x60
 8002d10:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d16:	2300      	movs	r3, #0
 8002d18:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d1e:	1d3b      	adds	r3, r7, #4
 8002d20:	2200      	movs	r2, #0
 8002d22:	4619      	mov	r1, r3
 8002d24:	4817      	ldr	r0, [pc, #92]	@ (8002d84 <MX_TIM3_Init+0xec>)
 8002d26:	f008 fb93 	bl	800b450 <HAL_TIM_PWM_ConfigChannel>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002d30:	f000 fe82 	bl	8003a38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d34:	1d3b      	adds	r3, r7, #4
 8002d36:	2204      	movs	r2, #4
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4812      	ldr	r0, [pc, #72]	@ (8002d84 <MX_TIM3_Init+0xec>)
 8002d3c:	f008 fb88 	bl	800b450 <HAL_TIM_PWM_ConfigChannel>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002d46:	f000 fe77 	bl	8003a38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d4a:	1d3b      	adds	r3, r7, #4
 8002d4c:	2208      	movs	r2, #8
 8002d4e:	4619      	mov	r1, r3
 8002d50:	480c      	ldr	r0, [pc, #48]	@ (8002d84 <MX_TIM3_Init+0xec>)
 8002d52:	f008 fb7d 	bl	800b450 <HAL_TIM_PWM_ConfigChannel>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8002d5c:	f000 fe6c 	bl	8003a38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d60:	1d3b      	adds	r3, r7, #4
 8002d62:	220c      	movs	r2, #12
 8002d64:	4619      	mov	r1, r3
 8002d66:	4807      	ldr	r0, [pc, #28]	@ (8002d84 <MX_TIM3_Init+0xec>)
 8002d68:	f008 fb72 	bl	800b450 <HAL_TIM_PWM_ConfigChannel>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8002d72:	f000 fe61 	bl	8003a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002d76:	4803      	ldr	r0, [pc, #12]	@ (8002d84 <MX_TIM3_Init+0xec>)
 8002d78:	f001 fa60 	bl	800423c <HAL_TIM_MspPostInit>

}
 8002d7c:	bf00      	nop
 8002d7e:	3728      	adds	r7, #40	@ 0x28
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	200028b4 	.word	0x200028b4
 8002d88:	40000400 	.word	0x40000400

08002d8c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b096      	sub	sp, #88	@ 0x58
 8002d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d92:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002d96:	2200      	movs	r2, #0
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	605a      	str	r2, [r3, #4]
 8002d9c:	609a      	str	r2, [r3, #8]
 8002d9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002da0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002daa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	605a      	str	r2, [r3, #4]
 8002db4:	609a      	str	r2, [r3, #8]
 8002db6:	60da      	str	r2, [r3, #12]
 8002db8:	611a      	str	r2, [r3, #16]
 8002dba:	615a      	str	r2, [r3, #20]
 8002dbc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002dbe:	1d3b      	adds	r3, r7, #4
 8002dc0:	2220      	movs	r2, #32
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f010 fe1e 	bl	8013a06 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002dca:	4b3d      	ldr	r3, [pc, #244]	@ (8002ec0 <MX_TIM8_Init+0x134>)
 8002dcc:	4a3d      	ldr	r2, [pc, #244]	@ (8002ec4 <MX_TIM8_Init+0x138>)
 8002dce:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 8400-1;
 8002dd0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ec0 <MX_TIM8_Init+0x134>)
 8002dd2:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8002dd6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dd8:	4b39      	ldr	r3, [pc, #228]	@ (8002ec0 <MX_TIM8_Init+0x134>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2000-1;
 8002dde:	4b38      	ldr	r3, [pc, #224]	@ (8002ec0 <MX_TIM8_Init+0x134>)
 8002de0:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002de4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002de6:	4b36      	ldr	r3, [pc, #216]	@ (8002ec0 <MX_TIM8_Init+0x134>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002dec:	4b34      	ldr	r3, [pc, #208]	@ (8002ec0 <MX_TIM8_Init+0x134>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002df2:	4b33      	ldr	r3, [pc, #204]	@ (8002ec0 <MX_TIM8_Init+0x134>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002df8:	4831      	ldr	r0, [pc, #196]	@ (8002ec0 <MX_TIM8_Init+0x134>)
 8002dfa:	f007 ffe1 	bl	800adc0 <HAL_TIM_Base_Init>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8002e04:	f000 fe18 	bl	8003a38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002e0e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002e12:	4619      	mov	r1, r3
 8002e14:	482a      	ldr	r0, [pc, #168]	@ (8002ec0 <MX_TIM8_Init+0x134>)
 8002e16:	f008 fbdd 	bl	800b5d4 <HAL_TIM_ConfigClockSource>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8002e20:	f000 fe0a 	bl	8003a38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002e24:	4826      	ldr	r0, [pc, #152]	@ (8002ec0 <MX_TIM8_Init+0x134>)
 8002e26:	f008 f8f3 	bl	800b010 <HAL_TIM_PWM_Init>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8002e30:	f000 fe02 	bl	8003a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002e34:	2320      	movs	r3, #32
 8002e36:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002e3c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002e40:	4619      	mov	r1, r3
 8002e42:	481f      	ldr	r0, [pc, #124]	@ (8002ec0 <MX_TIM8_Init+0x134>)
 8002e44:	f008 ffc6 	bl	800bdd4 <HAL_TIMEx_MasterConfigSynchronization>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8002e4e:	f000 fdf3 	bl	8003a38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e52:	2360      	movs	r3, #96	@ 0x60
 8002e54:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002e56:	2300      	movs	r3, #0
 8002e58:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e62:	2300      	movs	r3, #0
 8002e64:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e66:	2300      	movs	r3, #0
 8002e68:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e72:	2200      	movs	r2, #0
 8002e74:	4619      	mov	r1, r3
 8002e76:	4812      	ldr	r0, [pc, #72]	@ (8002ec0 <MX_TIM8_Init+0x134>)
 8002e78:	f008 faea 	bl	800b450 <HAL_TIM_PWM_ConfigChannel>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8002e82:	f000 fdd9 	bl	8003a38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e86:	2300      	movs	r3, #0
 8002e88:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e92:	2300      	movs	r3, #0
 8002e94:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e96:	2300      	movs	r3, #0
 8002e98:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e9e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002ea4:	1d3b      	adds	r3, r7, #4
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4805      	ldr	r0, [pc, #20]	@ (8002ec0 <MX_TIM8_Init+0x134>)
 8002eaa:	f009 f80f 	bl	800becc <HAL_TIMEx_ConfigBreakDeadTime>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 8002eb4:	f000 fdc0 	bl	8003a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002eb8:	bf00      	nop
 8002eba:	3758      	adds	r7, #88	@ 0x58
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	200028fc 	.word	0x200028fc
 8002ec4:	40010400 	.word	0x40010400

08002ec8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ecc:	4b11      	ldr	r3, [pc, #68]	@ (8002f14 <MX_USART2_UART_Init+0x4c>)
 8002ece:	4a12      	ldr	r2, [pc, #72]	@ (8002f18 <MX_USART2_UART_Init+0x50>)
 8002ed0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ed2:	4b10      	ldr	r3, [pc, #64]	@ (8002f14 <MX_USART2_UART_Init+0x4c>)
 8002ed4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ed8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002eda:	4b0e      	ldr	r3, [pc, #56]	@ (8002f14 <MX_USART2_UART_Init+0x4c>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f14 <MX_USART2_UART_Init+0x4c>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8002f14 <MX_USART2_UART_Init+0x4c>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002eec:	4b09      	ldr	r3, [pc, #36]	@ (8002f14 <MX_USART2_UART_Init+0x4c>)
 8002eee:	220c      	movs	r2, #12
 8002ef0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ef2:	4b08      	ldr	r3, [pc, #32]	@ (8002f14 <MX_USART2_UART_Init+0x4c>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ef8:	4b06      	ldr	r3, [pc, #24]	@ (8002f14 <MX_USART2_UART_Init+0x4c>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002efe:	4805      	ldr	r0, [pc, #20]	@ (8002f14 <MX_USART2_UART_Init+0x4c>)
 8002f00:	f009 f84a 	bl	800bf98 <HAL_UART_Init>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f0a:	f000 fd95 	bl	8003a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f0e:	bf00      	nop
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	20002944 	.word	0x20002944
 8002f18:	40004400 	.word	0x40004400

08002f1c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002f20:	4b11      	ldr	r3, [pc, #68]	@ (8002f68 <MX_USART3_UART_Init+0x4c>)
 8002f22:	4a12      	ldr	r2, [pc, #72]	@ (8002f6c <MX_USART3_UART_Init+0x50>)
 8002f24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002f26:	4b10      	ldr	r3, [pc, #64]	@ (8002f68 <MX_USART3_UART_Init+0x4c>)
 8002f28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f68 <MX_USART3_UART_Init+0x4c>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f34:	4b0c      	ldr	r3, [pc, #48]	@ (8002f68 <MX_USART3_UART_Init+0x4c>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f68 <MX_USART3_UART_Init+0x4c>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f40:	4b09      	ldr	r3, [pc, #36]	@ (8002f68 <MX_USART3_UART_Init+0x4c>)
 8002f42:	220c      	movs	r2, #12
 8002f44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f46:	4b08      	ldr	r3, [pc, #32]	@ (8002f68 <MX_USART3_UART_Init+0x4c>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f4c:	4b06      	ldr	r3, [pc, #24]	@ (8002f68 <MX_USART3_UART_Init+0x4c>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f52:	4805      	ldr	r0, [pc, #20]	@ (8002f68 <MX_USART3_UART_Init+0x4c>)
 8002f54:	f009 f820 	bl	800bf98 <HAL_UART_Init>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002f5e:	f000 fd6b 	bl	8003a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f62:	bf00      	nop
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20002988 	.word	0x20002988
 8002f6c:	40004800 	.word	0x40004800

08002f70 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002f74:	bf00      	nop
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
	...

08002f80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	607b      	str	r3, [r7, #4]
 8002f8a:	4b2b      	ldr	r3, [pc, #172]	@ (8003038 <MX_DMA_Init+0xb8>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8e:	4a2a      	ldr	r2, [pc, #168]	@ (8003038 <MX_DMA_Init+0xb8>)
 8002f90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f96:	4b28      	ldr	r3, [pc, #160]	@ (8003038 <MX_DMA_Init+0xb8>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f9e:	607b      	str	r3, [r7, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	603b      	str	r3, [r7, #0]
 8002fa6:	4b24      	ldr	r3, [pc, #144]	@ (8003038 <MX_DMA_Init+0xb8>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002faa:	4a23      	ldr	r2, [pc, #140]	@ (8003038 <MX_DMA_Init+0xb8>)
 8002fac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fb2:	4b21      	ldr	r3, [pc, #132]	@ (8003038 <MX_DMA_Init+0xb8>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fba:	603b      	str	r3, [r7, #0]
 8002fbc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2105      	movs	r1, #5
 8002fc2:	200b      	movs	r0, #11
 8002fc4:	f002 fb04 	bl	80055d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002fc8:	200b      	movs	r0, #11
 8002fca:	f002 fb1d 	bl	8005608 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002fce:	2200      	movs	r2, #0
 8002fd0:	2105      	movs	r1, #5
 8002fd2:	200c      	movs	r0, #12
 8002fd4:	f002 fafc 	bl	80055d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002fd8:	200c      	movs	r0, #12
 8002fda:	f002 fb15 	bl	8005608 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002fde:	2200      	movs	r2, #0
 8002fe0:	2105      	movs	r1, #5
 8002fe2:	200e      	movs	r0, #14
 8002fe4:	f002 faf4 	bl	80055d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002fe8:	200e      	movs	r0, #14
 8002fea:	f002 fb0d 	bl	8005608 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002fee:	2200      	movs	r2, #0
 8002ff0:	2105      	movs	r1, #5
 8002ff2:	2011      	movs	r0, #17
 8002ff4:	f002 faec 	bl	80055d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002ff8:	2011      	movs	r0, #17
 8002ffa:	f002 fb05 	bl	8005608 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8002ffe:	2200      	movs	r2, #0
 8003000:	2105      	movs	r1, #5
 8003002:	202f      	movs	r0, #47	@ 0x2f
 8003004:	f002 fae4 	bl	80055d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8003008:	202f      	movs	r0, #47	@ 0x2f
 800300a:	f002 fafd 	bl	8005608 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800300e:	2200      	movs	r2, #0
 8003010:	2105      	movs	r1, #5
 8003012:	2038      	movs	r0, #56	@ 0x38
 8003014:	f002 fadc 	bl	80055d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003018:	2038      	movs	r0, #56	@ 0x38
 800301a:	f002 faf5 	bl	8005608 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800301e:	2200      	movs	r2, #0
 8003020:	2105      	movs	r1, #5
 8003022:	203a      	movs	r0, #58	@ 0x3a
 8003024:	f002 fad4 	bl	80055d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003028:	203a      	movs	r0, #58	@ 0x3a
 800302a:	f002 faed 	bl	8005608 <HAL_NVIC_EnableIRQ>

}
 800302e:	bf00      	nop
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40023800 	.word	0x40023800

0800303c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08a      	sub	sp, #40	@ 0x28
 8003040:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003042:	f107 0314 	add.w	r3, r7, #20
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	605a      	str	r2, [r3, #4]
 800304c:	609a      	str	r2, [r3, #8]
 800304e:	60da      	str	r2, [r3, #12]
 8003050:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003052:	2300      	movs	r3, #0
 8003054:	613b      	str	r3, [r7, #16]
 8003056:	4b5c      	ldr	r3, [pc, #368]	@ (80031c8 <MX_GPIO_Init+0x18c>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305a:	4a5b      	ldr	r2, [pc, #364]	@ (80031c8 <MX_GPIO_Init+0x18c>)
 800305c:	f043 0304 	orr.w	r3, r3, #4
 8003060:	6313      	str	r3, [r2, #48]	@ 0x30
 8003062:	4b59      	ldr	r3, [pc, #356]	@ (80031c8 <MX_GPIO_Init+0x18c>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	613b      	str	r3, [r7, #16]
 800306c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	4b55      	ldr	r3, [pc, #340]	@ (80031c8 <MX_GPIO_Init+0x18c>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003076:	4a54      	ldr	r2, [pc, #336]	@ (80031c8 <MX_GPIO_Init+0x18c>)
 8003078:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800307c:	6313      	str	r3, [r2, #48]	@ 0x30
 800307e:	4b52      	ldr	r3, [pc, #328]	@ (80031c8 <MX_GPIO_Init+0x18c>)
 8003080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800308a:	2300      	movs	r3, #0
 800308c:	60bb      	str	r3, [r7, #8]
 800308e:	4b4e      	ldr	r3, [pc, #312]	@ (80031c8 <MX_GPIO_Init+0x18c>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003092:	4a4d      	ldr	r2, [pc, #308]	@ (80031c8 <MX_GPIO_Init+0x18c>)
 8003094:	f043 0301 	orr.w	r3, r3, #1
 8003098:	6313      	str	r3, [r2, #48]	@ 0x30
 800309a:	4b4b      	ldr	r3, [pc, #300]	@ (80031c8 <MX_GPIO_Init+0x18c>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	60bb      	str	r3, [r7, #8]
 80030a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030a6:	2300      	movs	r3, #0
 80030a8:	607b      	str	r3, [r7, #4]
 80030aa:	4b47      	ldr	r3, [pc, #284]	@ (80031c8 <MX_GPIO_Init+0x18c>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ae:	4a46      	ldr	r2, [pc, #280]	@ (80031c8 <MX_GPIO_Init+0x18c>)
 80030b0:	f043 0302 	orr.w	r3, r3, #2
 80030b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80030b6:	4b44      	ldr	r3, [pc, #272]	@ (80031c8 <MX_GPIO_Init+0x18c>)
 80030b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	607b      	str	r3, [r7, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);
 80030c2:	2200      	movs	r2, #0
 80030c4:	f248 1160 	movw	r1, #33120	@ 0x8160
 80030c8:	4840      	ldr	r0, [pc, #256]	@ (80031cc <MX_GPIO_Init+0x190>)
 80030ca:	f003 f85b 	bl	8006184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80030ce:	2200      	movs	r2, #0
 80030d0:	2101      	movs	r1, #1
 80030d2:	483f      	ldr	r0, [pc, #252]	@ (80031d0 <MX_GPIO_Init+0x194>)
 80030d4:	f003 f856 	bl	8006184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 80030d8:	2201      	movs	r2, #1
 80030da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80030de:	483c      	ldr	r0, [pc, #240]	@ (80031d0 <MX_GPIO_Init+0x194>)
 80030e0:	f003 f850 	bl	8006184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80030e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80030e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80030ea:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80030ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f0:	2300      	movs	r3, #0
 80030f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80030f4:	f107 0314 	add.w	r3, r7, #20
 80030f8:	4619      	mov	r1, r3
 80030fa:	4836      	ldr	r0, [pc, #216]	@ (80031d4 <MX_GPIO_Init+0x198>)
 80030fc:	f002 feae 	bl	8005e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_MPU6050_Pin */
  GPIO_InitStruct.Pin = INT_MPU6050_Pin;
 8003100:	2302      	movs	r3, #2
 8003102:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003104:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003108:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310a:	2300      	movs	r3, #0
 800310c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_MPU6050_GPIO_Port, &GPIO_InitStruct);
 800310e:	f107 0314 	add.w	r3, r7, #20
 8003112:	4619      	mov	r1, r3
 8003114:	482f      	ldr	r0, [pc, #188]	@ (80031d4 <MX_GPIO_Init+0x198>)
 8003116:	f002 fea1 	bl	8005e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_15;
 800311a:	f248 1360 	movw	r3, #33120	@ 0x8160
 800311e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003120:	2301      	movs	r3, #1
 8003122:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003124:	2300      	movs	r3, #0
 8003126:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003128:	2300      	movs	r3, #0
 800312a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800312c:	f107 0314 	add.w	r3, r7, #20
 8003130:	4619      	mov	r1, r3
 8003132:	4826      	ldr	r0, [pc, #152]	@ (80031cc <MX_GPIO_Init+0x190>)
 8003134:	f002 fe92 	bl	8005e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003138:	2301      	movs	r3, #1
 800313a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800313c:	2301      	movs	r3, #1
 800313e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003140:	2300      	movs	r3, #0
 8003142:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003144:	2300      	movs	r3, #0
 8003146:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003148:	f107 0314 	add.w	r3, r7, #20
 800314c:	4619      	mov	r1, r3
 800314e:	4820      	ldr	r0, [pc, #128]	@ (80031d0 <MX_GPIO_Init+0x194>)
 8003150:	f002 fe84 	bl	8005e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8003154:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003158:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800315a:	2301      	movs	r3, #1
 800315c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315e:	2300      	movs	r3, #0
 8003160:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003162:	2301      	movs	r3, #1
 8003164:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8003166:	f107 0314 	add.w	r3, r7, #20
 800316a:	4619      	mov	r1, r3
 800316c:	4818      	ldr	r0, [pc, #96]	@ (80031d0 <MX_GPIO_Init+0x194>)
 800316e:	f002 fe75 	bl	8005e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003172:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003176:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003178:	2300      	movs	r3, #0
 800317a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317c:	2300      	movs	r3, #0
 800317e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003180:	f107 0314 	add.w	r3, r7, #20
 8003184:	4619      	mov	r1, r3
 8003186:	4811      	ldr	r0, [pc, #68]	@ (80031cc <MX_GPIO_Init+0x190>)
 8003188:	f002 fe68 	bl	8005e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800318c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8003190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003192:	2302      	movs	r3, #2
 8003194:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003196:	2300      	movs	r3, #0
 8003198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800319a:	2303      	movs	r3, #3
 800319c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800319e:	230a      	movs	r3, #10
 80031a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a2:	f107 0314 	add.w	r3, r7, #20
 80031a6:	4619      	mov	r1, r3
 80031a8:	4808      	ldr	r0, [pc, #32]	@ (80031cc <MX_GPIO_Init+0x190>)
 80031aa:	f002 fe57 	bl	8005e5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80031ae:	2200      	movs	r2, #0
 80031b0:	2105      	movs	r1, #5
 80031b2:	2007      	movs	r0, #7
 80031b4:	f002 fa0c 	bl	80055d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80031b8:	2007      	movs	r0, #7
 80031ba:	f002 fa25 	bl	8005608 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80031be:	bf00      	nop
 80031c0:	3728      	adds	r7, #40	@ 0x28
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	40023800 	.word	0x40023800
 80031cc:	40020000 	.word	0x40020000
 80031d0:	40020400 	.word	0x40020400
 80031d4:	40020800 	.word	0x40020800

080031d8 <defaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_defaultTask */
void defaultTask(void const * argument)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80031e0:	2001      	movs	r0, #1
 80031e2:	f00d faa8 	bl	8010736 <osDelay>
 80031e6:	e7fb      	b.n	80031e0 <defaultTask+0x8>

080031e8 <sendDataToScreen>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sendDataToScreen */
void sendDataToScreen(void const * argument)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b092      	sub	sp, #72	@ 0x48
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

	 uint32_t depth_as_uint = *((uint32_t*)&pressureSensor.depth);
 80031f0:	4b6a      	ldr	r3, [pc, #424]	@ (800339c <sendDataToScreen+0x1b4>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	 uint8_t depthBytes[4];
	 uint32_t roll_as_uint=*((uint32_t*)&phiHat_deg);
 80031f6:	4b6a      	ldr	r3, [pc, #424]	@ (80033a0 <sendDataToScreen+0x1b8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	62bb      	str	r3, [r7, #40]	@ 0x28
	 uint8_t rollBytes[4];
	 uint32_t pitch_as_uint=*((uint32_t*)&thetaHat_deg);
 80031fc:	4b69      	ldr	r3, [pc, #420]	@ (80033a4 <sendDataToScreen+0x1bc>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	627b      	str	r3, [r7, #36]	@ 0x24
	 uint8_t pitchBytes[4];
	 uint32_t velocity_as_uint=*((uint32_t*)&velocity);
 8003202:	4b69      	ldr	r3, [pc, #420]	@ (80033a8 <sendDataToScreen+0x1c0>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	623b      	str	r3, [r7, #32]
	 uint8_t velocityBytes[4];
	 uint32_t yaw_as_uint=*((uint32_t*)&mpu6050.gyr_rps[2]);
 8003208:	4b68      	ldr	r3, [pc, #416]	@ (80033ac <sendDataToScreen+0x1c4>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	61fb      	str	r3, [r7, #28]
	 uint8_t yawBytes[4];

	 for(int i=0;i<NUM_BYTES;i++)
 800320e:	2300      	movs	r3, #0
 8003210:	647b      	str	r3, [r7, #68]	@ 0x44
 8003212:	e03e      	b.n	8003292 <sendDataToScreen+0xaa>
	 {
		 depthBytes[i]=(depth_as_uint>>(8*i))&0xFF;  // Low Byte -> High Byte
 8003214:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800321a:	fa22 f303 	lsr.w	r3, r2, r3
 800321e:	b2d9      	uxtb	r1, r3
 8003220:	f107 0218 	add.w	r2, r7, #24
 8003224:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003226:	4413      	add	r3, r2
 8003228:	460a      	mov	r2, r1
 800322a:	701a      	strb	r2, [r3, #0]
		 rollBytes[i]=(roll_as_uint>>(8*i))&0xFF;
 800322c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003232:	fa22 f303 	lsr.w	r3, r2, r3
 8003236:	b2d9      	uxtb	r1, r3
 8003238:	f107 0214 	add.w	r2, r7, #20
 800323c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800323e:	4413      	add	r3, r2
 8003240:	460a      	mov	r2, r1
 8003242:	701a      	strb	r2, [r3, #0]
		 pitchBytes[i]=(pitch_as_uint>>(8*i))&0xFF;
 8003244:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800324a:	fa22 f303 	lsr.w	r3, r2, r3
 800324e:	b2d9      	uxtb	r1, r3
 8003250:	f107 0210 	add.w	r2, r7, #16
 8003254:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003256:	4413      	add	r3, r2
 8003258:	460a      	mov	r2, r1
 800325a:	701a      	strb	r2, [r3, #0]
		 velocityBytes[i]=(velocity_as_uint>>(8*i))&0xFF;
 800325c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	6a3a      	ldr	r2, [r7, #32]
 8003262:	fa22 f303 	lsr.w	r3, r2, r3
 8003266:	b2d9      	uxtb	r1, r3
 8003268:	f107 020c 	add.w	r2, r7, #12
 800326c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800326e:	4413      	add	r3, r2
 8003270:	460a      	mov	r2, r1
 8003272:	701a      	strb	r2, [r3, #0]
		 yawBytes[i]=(yaw_as_uint>>(8*i))&0xFF;
 8003274:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	69fa      	ldr	r2, [r7, #28]
 800327a:	fa22 f303 	lsr.w	r3, r2, r3
 800327e:	b2d9      	uxtb	r1, r3
 8003280:	f107 0208 	add.w	r2, r7, #8
 8003284:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003286:	4413      	add	r3, r2
 8003288:	460a      	mov	r2, r1
 800328a:	701a      	strb	r2, [r3, #0]
	 for(int i=0;i<NUM_BYTES;i++)
 800328c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800328e:	3301      	adds	r3, #1
 8003290:	647b      	str	r3, [r7, #68]	@ 0x44
 8003292:	4b47      	ldr	r3, [pc, #284]	@ (80033b0 <sendDataToScreen+0x1c8>)
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	461a      	mov	r2, r3
 8003298:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800329a:	4293      	cmp	r3, r2
 800329c:	dbba      	blt.n	8003214 <sendDataToScreen+0x2c>
	 }
	 Txbuf[0]='D';
 800329e:	4b45      	ldr	r3, [pc, #276]	@ (80033b4 <sendDataToScreen+0x1cc>)
 80032a0:	2244      	movs	r2, #68	@ 0x44
 80032a2:	701a      	strb	r2, [r3, #0]
	 for(int i=1;i<5;i++)
 80032a4:	2301      	movs	r3, #1
 80032a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80032a8:	e00d      	b.n	80032c6 <sendDataToScreen+0xde>
		 Txbuf[i]=depthBytes[i-1];
 80032aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032ac:	3b01      	subs	r3, #1
 80032ae:	3348      	adds	r3, #72	@ 0x48
 80032b0:	443b      	add	r3, r7
 80032b2:	f813 1c30 	ldrb.w	r1, [r3, #-48]
 80032b6:	4a3f      	ldr	r2, [pc, #252]	@ (80033b4 <sendDataToScreen+0x1cc>)
 80032b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032ba:	4413      	add	r3, r2
 80032bc:	460a      	mov	r2, r1
 80032be:	701a      	strb	r2, [r3, #0]
	 for(int i=1;i<5;i++)
 80032c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032c2:	3301      	adds	r3, #1
 80032c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80032c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	ddee      	ble.n	80032aa <sendDataToScreen+0xc2>
	 Txbuf[5]='R';
 80032cc:	4b39      	ldr	r3, [pc, #228]	@ (80033b4 <sendDataToScreen+0x1cc>)
 80032ce:	2252      	movs	r2, #82	@ 0x52
 80032d0:	715a      	strb	r2, [r3, #5]
	 for(int i=6;i<10;i++)
 80032d2:	2306      	movs	r3, #6
 80032d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032d6:	e00d      	b.n	80032f4 <sendDataToScreen+0x10c>
		 Txbuf[i]=rollBytes[i-6];
 80032d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032da:	3b06      	subs	r3, #6
 80032dc:	3348      	adds	r3, #72	@ 0x48
 80032de:	443b      	add	r3, r7
 80032e0:	f813 1c34 	ldrb.w	r1, [r3, #-52]
 80032e4:	4a33      	ldr	r2, [pc, #204]	@ (80033b4 <sendDataToScreen+0x1cc>)
 80032e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032e8:	4413      	add	r3, r2
 80032ea:	460a      	mov	r2, r1
 80032ec:	701a      	strb	r2, [r3, #0]
	 for(int i=6;i<10;i++)
 80032ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032f0:	3301      	adds	r3, #1
 80032f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032f6:	2b09      	cmp	r3, #9
 80032f8:	ddee      	ble.n	80032d8 <sendDataToScreen+0xf0>
	 Txbuf[10]='P';
 80032fa:	4b2e      	ldr	r3, [pc, #184]	@ (80033b4 <sendDataToScreen+0x1cc>)
 80032fc:	2250      	movs	r2, #80	@ 0x50
 80032fe:	729a      	strb	r2, [r3, #10]
	 for(int i=11;i<15;i++)
 8003300:	230b      	movs	r3, #11
 8003302:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003304:	e00d      	b.n	8003322 <sendDataToScreen+0x13a>
		 Txbuf[i]=pitchBytes[i-11];
 8003306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003308:	3b0b      	subs	r3, #11
 800330a:	3348      	adds	r3, #72	@ 0x48
 800330c:	443b      	add	r3, r7
 800330e:	f813 1c38 	ldrb.w	r1, [r3, #-56]
 8003312:	4a28      	ldr	r2, [pc, #160]	@ (80033b4 <sendDataToScreen+0x1cc>)
 8003314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003316:	4413      	add	r3, r2
 8003318:	460a      	mov	r2, r1
 800331a:	701a      	strb	r2, [r3, #0]
	 for(int i=11;i<15;i++)
 800331c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800331e:	3301      	adds	r3, #1
 8003320:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003324:	2b0e      	cmp	r3, #14
 8003326:	ddee      	ble.n	8003306 <sendDataToScreen+0x11e>
	 Txbuf[15]='V';
 8003328:	4b22      	ldr	r3, [pc, #136]	@ (80033b4 <sendDataToScreen+0x1cc>)
 800332a:	2256      	movs	r2, #86	@ 0x56
 800332c:	73da      	strb	r2, [r3, #15]
	 for(int i=16;i<20;i++)
 800332e:	2310      	movs	r3, #16
 8003330:	637b      	str	r3, [r7, #52]	@ 0x34
 8003332:	e00d      	b.n	8003350 <sendDataToScreen+0x168>
		 Txbuf[i]=velocityBytes[i-16];
 8003334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003336:	3b10      	subs	r3, #16
 8003338:	3348      	adds	r3, #72	@ 0x48
 800333a:	443b      	add	r3, r7
 800333c:	f813 1c3c 	ldrb.w	r1, [r3, #-60]
 8003340:	4a1c      	ldr	r2, [pc, #112]	@ (80033b4 <sendDataToScreen+0x1cc>)
 8003342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003344:	4413      	add	r3, r2
 8003346:	460a      	mov	r2, r1
 8003348:	701a      	strb	r2, [r3, #0]
	 for(int i=16;i<20;i++)
 800334a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800334c:	3301      	adds	r3, #1
 800334e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003352:	2b13      	cmp	r3, #19
 8003354:	ddee      	ble.n	8003334 <sendDataToScreen+0x14c>
	 Txbuf[20]='Y';
 8003356:	4b17      	ldr	r3, [pc, #92]	@ (80033b4 <sendDataToScreen+0x1cc>)
 8003358:	2259      	movs	r2, #89	@ 0x59
 800335a:	751a      	strb	r2, [r3, #20]
	 for(int i=21;i<25;i++)
 800335c:	2315      	movs	r3, #21
 800335e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003360:	e00d      	b.n	800337e <sendDataToScreen+0x196>
		 Txbuf[i]=yawBytes[i-21];
 8003362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003364:	3b15      	subs	r3, #21
 8003366:	3348      	adds	r3, #72	@ 0x48
 8003368:	443b      	add	r3, r7
 800336a:	f813 1c40 	ldrb.w	r1, [r3, #-64]
 800336e:	4a11      	ldr	r2, [pc, #68]	@ (80033b4 <sendDataToScreen+0x1cc>)
 8003370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003372:	4413      	add	r3, r2
 8003374:	460a      	mov	r2, r1
 8003376:	701a      	strb	r2, [r3, #0]
	 for(int i=21;i<25;i++)
 8003378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800337a:	3301      	adds	r3, #1
 800337c:	633b      	str	r3, [r7, #48]	@ 0x30
 800337e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003380:	2b18      	cmp	r3, #24
 8003382:	ddee      	ble.n	8003362 <sendDataToScreen+0x17a>


	 HAL_UART_Transmit_DMA(&huart2,Txbuf,TOTAL_BYTES); // attention: Data is sent LSB first
 8003384:	4b0c      	ldr	r3, [pc, #48]	@ (80033b8 <sendDataToScreen+0x1d0>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	461a      	mov	r2, r3
 800338a:	490a      	ldr	r1, [pc, #40]	@ (80033b4 <sendDataToScreen+0x1cc>)
 800338c:	480b      	ldr	r0, [pc, #44]	@ (80033bc <sendDataToScreen+0x1d4>)
 800338e:	f008 fe51 	bl	800c034 <HAL_UART_Transmit_DMA>




	  osDelay(900); // Screen should update roughly every 1 second
 8003392:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8003396:	f00d f9ce 	bl	8010736 <osDelay>
  {
 800339a:	e729      	b.n	80031f0 <sendDataToScreen+0x8>
 800339c:	20002b90 	.word	0x20002b90
 80033a0:	200025ac 	.word	0x200025ac
 80033a4:	200025b0 	.word	0x200025b0
 80033a8:	200025a0 	.word	0x200025a0
 80033ac:	20002b34 	.word	0x20002b34
 80033b0:	08016fe5 	.word	0x08016fe5
 80033b4:	20002584 	.word	0x20002584
 80033b8:	08016fe6 	.word	0x08016fe6
 80033bc:	20002944 	.word	0x20002944

080033c0 <updateControlLoop>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_updateControlLoop */
void updateControlLoop(void const * argument)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]

	  /* Infinite loop */
	  for(;;)
	  {

		if(joystick.joystickVoltage[0]<JOYSTICK_MIN_THRESHOLD ) // go Right
 80033c8:	4b34      	ldr	r3, [pc, #208]	@ (800349c <updateControlLoop+0xdc>)
 80033ca:	edd3 7a02 	vldr	s15, [r3, #8]
 80033ce:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80034a0 <updateControlLoop+0xe0>
 80033d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033da:	d50e      	bpl.n	80033fa <updateControlLoop+0x3a>
		{
			if(verticalCommand==1)
 80033dc:	4b31      	ldr	r3, [pc, #196]	@ (80034a4 <updateControlLoop+0xe4>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d101      	bne.n	80033e8 <updateControlLoop+0x28>
				neutralRudders();
 80033e4:	f000 fc36 	bl	8003c54 <neutralRudders>
			turnRight();
 80033e8:	f000 fb6e 	bl	8003ac8 <turnRight>
			horizontalCommand=1;
 80033ec:	4b2e      	ldr	r3, [pc, #184]	@ (80034a8 <updateControlLoop+0xe8>)
 80033ee:	2201      	movs	r2, #1
 80033f0:	701a      	strb	r2, [r3, #0]
			verticalCommand=0;
 80033f2:	4b2c      	ldr	r3, [pc, #176]	@ (80034a4 <updateControlLoop+0xe4>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	701a      	strb	r2, [r3, #0]
 80033f8:	e04c      	b.n	8003494 <updateControlLoop+0xd4>

		}
		else if(joystick.joystickVoltage[0]>JOYSTICK_MAX_THRESHOLD)//go Left
 80033fa:	4b28      	ldr	r3, [pc, #160]	@ (800349c <updateControlLoop+0xdc>)
 80033fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8003400:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 8003404:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800340c:	dd0e      	ble.n	800342c <updateControlLoop+0x6c>
		{
			if(verticalCommand==1)
 800340e:	4b25      	ldr	r3, [pc, #148]	@ (80034a4 <updateControlLoop+0xe4>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d101      	bne.n	800341a <updateControlLoop+0x5a>
				neutralRudders();
 8003416:	f000 fc1d 	bl	8003c54 <neutralRudders>
			turnLeft();
 800341a:	f000 fb13 	bl	8003a44 <turnLeft>
			horizontalCommand=1;
 800341e:	4b22      	ldr	r3, [pc, #136]	@ (80034a8 <updateControlLoop+0xe8>)
 8003420:	2201      	movs	r2, #1
 8003422:	701a      	strb	r2, [r3, #0]
			verticalCommand=0;
 8003424:	4b1f      	ldr	r3, [pc, #124]	@ (80034a4 <updateControlLoop+0xe4>)
 8003426:	2200      	movs	r2, #0
 8003428:	701a      	strb	r2, [r3, #0]
 800342a:	e033      	b.n	8003494 <updateControlLoop+0xd4>
		}

		else if (joystick.joystickVoltage[1]<JOYSTICK_MIN_THRESHOLD)//dive
 800342c:	4b1b      	ldr	r3, [pc, #108]	@ (800349c <updateControlLoop+0xdc>)
 800342e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003432:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80034a0 <updateControlLoop+0xe0>
 8003436:	eef4 7ac7 	vcmpe.f32	s15, s14
 800343a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800343e:	d50e      	bpl.n	800345e <updateControlLoop+0x9e>
		{
			if(horizontalCommand==1)
 8003440:	4b19      	ldr	r3, [pc, #100]	@ (80034a8 <updateControlLoop+0xe8>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d101      	bne.n	800344c <updateControlLoop+0x8c>
				neutralRudders();
 8003448:	f000 fc04 	bl	8003c54 <neutralRudders>
			dive();
 800344c:	f000 fbc0 	bl	8003bd0 <dive>
			verticalCommand=1;
 8003450:	4b14      	ldr	r3, [pc, #80]	@ (80034a4 <updateControlLoop+0xe4>)
 8003452:	2201      	movs	r2, #1
 8003454:	701a      	strb	r2, [r3, #0]
			horizontalCommand=0;
 8003456:	4b14      	ldr	r3, [pc, #80]	@ (80034a8 <updateControlLoop+0xe8>)
 8003458:	2200      	movs	r2, #0
 800345a:	701a      	strb	r2, [r3, #0]
 800345c:	e01a      	b.n	8003494 <updateControlLoop+0xd4>
		}
		else if(joystick.joystickVoltage[1]>JOYSTICK_MAX_THRESHOLD)//surface
 800345e:	4b0f      	ldr	r3, [pc, #60]	@ (800349c <updateControlLoop+0xdc>)
 8003460:	edd3 7a03 	vldr	s15, [r3, #12]
 8003464:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 8003468:	eef4 7ac7 	vcmpe.f32	s15, s14
 800346c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003470:	dd0e      	ble.n	8003490 <updateControlLoop+0xd0>
		{
			if(horizontalCommand==1)
 8003472:	4b0d      	ldr	r3, [pc, #52]	@ (80034a8 <updateControlLoop+0xe8>)
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d101      	bne.n	800347e <updateControlLoop+0xbe>
				neutralRudders();
 800347a:	f000 fbeb 	bl	8003c54 <neutralRudders>
			surface();
 800347e:	f000 fb65 	bl	8003b4c <surface>
			verticalCommand=1;
 8003482:	4b08      	ldr	r3, [pc, #32]	@ (80034a4 <updateControlLoop+0xe4>)
 8003484:	2201      	movs	r2, #1
 8003486:	701a      	strb	r2, [r3, #0]
			horizontalCommand=0;
 8003488:	4b07      	ldr	r3, [pc, #28]	@ (80034a8 <updateControlLoop+0xe8>)
 800348a:	2200      	movs	r2, #0
 800348c:	701a      	strb	r2, [r3, #0]
 800348e:	e001      	b.n	8003494 <updateControlLoop+0xd4>
		}
		else
			neutralRudders();
 8003490:	f000 fbe0 	bl	8003c54 <neutralRudders>



	    osDelay(100); // update control loop every 100 ms
 8003494:	2064      	movs	r0, #100	@ 0x64
 8003496:	f00d f94e 	bl	8010736 <osDelay>
		if(joystick.joystickVoltage[0]<JOYSTICK_MIN_THRESHOLD ) // go Right
 800349a:	e795      	b.n	80033c8 <updateControlLoop+0x8>
 800349c:	20002b04 	.word	0x20002b04
 80034a0:	3f19999a 	.word	0x3f19999a
 80034a4:	20002b96 	.word	0x20002b96
 80034a8:	20002b97 	.word	0x20002b97

080034ac <recordSDdata>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_recordSDdata */
void recordSDdata(void const * argument)
{
 80034ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034b0:	b0bc      	sub	sp, #240	@ 0xf0
 80034b2:	af04      	add	r7, sp, #16
 80034b4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN recordSDdata */
  /* Infinite loop */
  for(;;)
  {
		fres = f_mount(&fs, "", 0);
 80034b6:	2200      	movs	r2, #0
 80034b8:	499e      	ldr	r1, [pc, #632]	@ (8003734 <recordSDdata+0x288>)
 80034ba:	489f      	ldr	r0, [pc, #636]	@ (8003738 <recordSDdata+0x28c>)
 80034bc:	f00c f84e 	bl	800f55c <f_mount>
 80034c0:	4603      	mov	r3, r0
 80034c2:	461a      	mov	r2, r3
 80034c4:	4b9d      	ldr	r3, [pc, #628]	@ (800373c <recordSDdata+0x290>)
 80034c6:	701a      	strb	r2, [r3, #0]
	  	// Write accelerometer Data
	  	fres = f_mount(&fs, "", 0);
 80034c8:	2200      	movs	r2, #0
 80034ca:	499a      	ldr	r1, [pc, #616]	@ (8003734 <recordSDdata+0x288>)
 80034cc:	489a      	ldr	r0, [pc, #616]	@ (8003738 <recordSDdata+0x28c>)
 80034ce:	f00c f845 	bl	800f55c <f_mount>
 80034d2:	4603      	mov	r3, r0
 80034d4:	461a      	mov	r2, r3
 80034d6:	4b99      	ldr	r3, [pc, #612]	@ (800373c <recordSDdata+0x290>)
 80034d8:	701a      	strb	r2, [r3, #0]
	  	fres = f_open(&fil, "accel.csv", FA_OPEN_APPEND | FA_WRITE | FA_READ);
 80034da:	2233      	movs	r2, #51	@ 0x33
 80034dc:	4998      	ldr	r1, [pc, #608]	@ (8003740 <recordSDdata+0x294>)
 80034de:	4899      	ldr	r0, [pc, #612]	@ (8003744 <recordSDdata+0x298>)
 80034e0:	f00c f8a0 	bl	800f624 <f_open>
 80034e4:	4603      	mov	r3, r0
 80034e6:	461a      	mov	r2, r3
 80034e8:	4b94      	ldr	r3, [pc, #592]	@ (800373c <recordSDdata+0x290>)
 80034ea:	701a      	strb	r2, [r3, #0]
	  	fres = f_getfree("", &fre_clust, &pfs);
 80034ec:	4a96      	ldr	r2, [pc, #600]	@ (8003748 <recordSDdata+0x29c>)
 80034ee:	4997      	ldr	r1, [pc, #604]	@ (800374c <recordSDdata+0x2a0>)
 80034f0:	4890      	ldr	r0, [pc, #576]	@ (8003734 <recordSDdata+0x288>)
 80034f2:	f00c fdde 	bl	80100b2 <f_getfree>
 80034f6:	4603      	mov	r3, r0
 80034f8:	461a      	mov	r2, r3
 80034fa:	4b90      	ldr	r3, [pc, #576]	@ (800373c <recordSDdata+0x290>)
 80034fc:	701a      	strb	r2, [r3, #0]
	  	char header[50];
	  	sprintf(header,"NEW SET OF ACC. DATA (m/s^2)\n");
 80034fe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003502:	4993      	ldr	r1, [pc, #588]	@ (8003750 <recordSDdata+0x2a4>)
 8003504:	4618      	mov	r0, r3
 8003506:	f010 fa1b 	bl	8013940 <siprintf>
	  	char accDataString[50];
	  	sprintf(accDataString, "ax=%3f, ay=%3f, az=%3f\n", mpu6050.acc_mps2[0],  mpu6050.acc_mps2[1],  mpu6050.acc_mps2[2]);
 800350a:	4b92      	ldr	r3, [pc, #584]	@ (8003754 <recordSDdata+0x2a8>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	4618      	mov	r0, r3
 8003510:	f7fd f83a 	bl	8000588 <__aeabi_f2d>
 8003514:	4680      	mov	r8, r0
 8003516:	4689      	mov	r9, r1
 8003518:	4b8e      	ldr	r3, [pc, #568]	@ (8003754 <recordSDdata+0x2a8>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	4618      	mov	r0, r3
 800351e:	f7fd f833 	bl	8000588 <__aeabi_f2d>
 8003522:	4604      	mov	r4, r0
 8003524:	460d      	mov	r5, r1
 8003526:	4b8b      	ldr	r3, [pc, #556]	@ (8003754 <recordSDdata+0x2a8>)
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	4618      	mov	r0, r3
 800352c:	f7fd f82c 	bl	8000588 <__aeabi_f2d>
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8003538:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800353c:	e9cd 4500 	strd	r4, r5, [sp]
 8003540:	4642      	mov	r2, r8
 8003542:	464b      	mov	r3, r9
 8003544:	4984      	ldr	r1, [pc, #528]	@ (8003758 <recordSDdata+0x2ac>)
 8003546:	f010 f9fb 	bl	8013940 <siprintf>
	  	if (firstWrite==1)
 800354a:	4b84      	ldr	r3, [pc, #528]	@ (800375c <recordSDdata+0x2b0>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d105      	bne.n	800355e <recordSDdata+0xb2>
	  		f_puts(header,&fil);
 8003552:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003556:	497b      	ldr	r1, [pc, #492]	@ (8003744 <recordSDdata+0x298>)
 8003558:	4618      	mov	r0, r3
 800355a:	f00c fedd 	bl	8010318 <f_puts>
	  	f_puts(accDataString, &fil);
 800355e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003562:	4978      	ldr	r1, [pc, #480]	@ (8003744 <recordSDdata+0x298>)
 8003564:	4618      	mov	r0, r3
 8003566:	f00c fed7 	bl	8010318 <f_puts>
	  	fres = f_close(&fil);
 800356a:	4876      	ldr	r0, [pc, #472]	@ (8003744 <recordSDdata+0x298>)
 800356c:	f00c fd72 	bl	8010054 <f_close>
 8003570:	4603      	mov	r3, r0
 8003572:	461a      	mov	r2, r3
 8003574:	4b71      	ldr	r3, [pc, #452]	@ (800373c <recordSDdata+0x290>)
 8003576:	701a      	strb	r2, [r3, #0]

	  	// Write Gyro Data
	  	fres = f_open(&fil, "gyro.csv", FA_OPEN_APPEND | FA_WRITE | FA_READ);
 8003578:	2233      	movs	r2, #51	@ 0x33
 800357a:	4979      	ldr	r1, [pc, #484]	@ (8003760 <recordSDdata+0x2b4>)
 800357c:	4871      	ldr	r0, [pc, #452]	@ (8003744 <recordSDdata+0x298>)
 800357e:	f00c f851 	bl	800f624 <f_open>
 8003582:	4603      	mov	r3, r0
 8003584:	461a      	mov	r2, r3
 8003586:	4b6d      	ldr	r3, [pc, #436]	@ (800373c <recordSDdata+0x290>)
 8003588:	701a      	strb	r2, [r3, #0]
	  	fres = f_getfree("", &fre_clust, &pfs);
 800358a:	4a6f      	ldr	r2, [pc, #444]	@ (8003748 <recordSDdata+0x29c>)
 800358c:	496f      	ldr	r1, [pc, #444]	@ (800374c <recordSDdata+0x2a0>)
 800358e:	4869      	ldr	r0, [pc, #420]	@ (8003734 <recordSDdata+0x288>)
 8003590:	f00c fd8f 	bl	80100b2 <f_getfree>
 8003594:	4603      	mov	r3, r0
 8003596:	461a      	mov	r2, r3
 8003598:	4b68      	ldr	r3, [pc, #416]	@ (800373c <recordSDdata+0x290>)
 800359a:	701a      	strb	r2, [r3, #0]
		sprintf(header,"NEW SET OF GYRO DATA (m/s)\n");
 800359c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80035a0:	4970      	ldr	r1, [pc, #448]	@ (8003764 <recordSDdata+0x2b8>)
 80035a2:	4618      	mov	r0, r3
 80035a4:	f010 f9cc 	bl	8013940 <siprintf>
		char gyroDataString[50];
		if (firstWrite==1)
 80035a8:	4b6c      	ldr	r3, [pc, #432]	@ (800375c <recordSDdata+0x2b0>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d105      	bne.n	80035bc <recordSDdata+0x110>
			f_puts(header,&fil);
 80035b0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80035b4:	4963      	ldr	r1, [pc, #396]	@ (8003744 <recordSDdata+0x298>)
 80035b6:	4618      	mov	r0, r3
 80035b8:	f00c feae 	bl	8010318 <f_puts>
		sprintf(gyroDataString, "gx=%3f, gy=%3f, gz=%3f\n", mpu6050.gyr_rps[0],  mpu6050.gyr_rps[1],  mpu6050.gyr_rps[2]);
 80035bc:	4b65      	ldr	r3, [pc, #404]	@ (8003754 <recordSDdata+0x2a8>)
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fc ffe1 	bl	8000588 <__aeabi_f2d>
 80035c6:	4680      	mov	r8, r0
 80035c8:	4689      	mov	r9, r1
 80035ca:	4b62      	ldr	r3, [pc, #392]	@ (8003754 <recordSDdata+0x2a8>)
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fc ffda 	bl	8000588 <__aeabi_f2d>
 80035d4:	4604      	mov	r4, r0
 80035d6:	460d      	mov	r5, r1
 80035d8:	4b5e      	ldr	r3, [pc, #376]	@ (8003754 <recordSDdata+0x2a8>)
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fc ffd3 	bl	8000588 <__aeabi_f2d>
 80035e2:	4602      	mov	r2, r0
 80035e4:	460b      	mov	r3, r1
 80035e6:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 80035ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80035ee:	e9cd 4500 	strd	r4, r5, [sp]
 80035f2:	4642      	mov	r2, r8
 80035f4:	464b      	mov	r3, r9
 80035f6:	495c      	ldr	r1, [pc, #368]	@ (8003768 <recordSDdata+0x2bc>)
 80035f8:	f010 f9a2 	bl	8013940 <siprintf>
		f_puts(gyroDataString, &fil);
 80035fc:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8003600:	4950      	ldr	r1, [pc, #320]	@ (8003744 <recordSDdata+0x298>)
 8003602:	4618      	mov	r0, r3
 8003604:	f00c fe88 	bl	8010318 <f_puts>
		fres = f_close(&fil);
 8003608:	484e      	ldr	r0, [pc, #312]	@ (8003744 <recordSDdata+0x298>)
 800360a:	f00c fd23 	bl	8010054 <f_close>
 800360e:	4603      	mov	r3, r0
 8003610:	461a      	mov	r2, r3
 8003612:	4b4a      	ldr	r3, [pc, #296]	@ (800373c <recordSDdata+0x290>)
 8003614:	701a      	strb	r2, [r3, #0]

		// Write Bar30  data
		fres = f_open(&fil, "Bar30.csv", FA_OPEN_APPEND | FA_WRITE | FA_READ);
 8003616:	2233      	movs	r2, #51	@ 0x33
 8003618:	4954      	ldr	r1, [pc, #336]	@ (800376c <recordSDdata+0x2c0>)
 800361a:	484a      	ldr	r0, [pc, #296]	@ (8003744 <recordSDdata+0x298>)
 800361c:	f00c f802 	bl	800f624 <f_open>
 8003620:	4603      	mov	r3, r0
 8003622:	461a      	mov	r2, r3
 8003624:	4b45      	ldr	r3, [pc, #276]	@ (800373c <recordSDdata+0x290>)
 8003626:	701a      	strb	r2, [r3, #0]
		fres = f_getfree("", &fre_clust, &pfs);
 8003628:	4a47      	ldr	r2, [pc, #284]	@ (8003748 <recordSDdata+0x29c>)
 800362a:	4948      	ldr	r1, [pc, #288]	@ (800374c <recordSDdata+0x2a0>)
 800362c:	4841      	ldr	r0, [pc, #260]	@ (8003734 <recordSDdata+0x288>)
 800362e:	f00c fd40 	bl	80100b2 <f_getfree>
 8003632:	4603      	mov	r3, r0
 8003634:	461a      	mov	r2, r3
 8003636:	4b41      	ldr	r3, [pc, #260]	@ (800373c <recordSDdata+0x290>)
 8003638:	701a      	strb	r2, [r3, #0]
		sprintf(header,"NEW SET OF BAR30 DEPTH DATA (m)\n");
 800363a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800363e:	494c      	ldr	r1, [pc, #304]	@ (8003770 <recordSDdata+0x2c4>)
 8003640:	4618      	mov	r0, r3
 8003642:	f010 f97d 	bl	8013940 <siprintf>
		char Bar30DataString[20];
		if (firstWrite==1)
 8003646:	4b45      	ldr	r3, [pc, #276]	@ (800375c <recordSDdata+0x2b0>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d105      	bne.n	800365a <recordSDdata+0x1ae>
			f_puts(header,&fil);
 800364e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003652:	493c      	ldr	r1, [pc, #240]	@ (8003744 <recordSDdata+0x298>)
 8003654:	4618      	mov	r0, r3
 8003656:	f00c fe5f 	bl	8010318 <f_puts>
		sprintf(Bar30DataString, "Depth=%2f\n",pressureSensor.depth);
 800365a:	4b46      	ldr	r3, [pc, #280]	@ (8003774 <recordSDdata+0x2c8>)
 800365c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800365e:	4618      	mov	r0, r3
 8003660:	f7fc ff92 	bl	8000588 <__aeabi_f2d>
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 800366c:	4942      	ldr	r1, [pc, #264]	@ (8003778 <recordSDdata+0x2cc>)
 800366e:	f010 f967 	bl	8013940 <siprintf>
		f_puts(Bar30DataString, &fil);
 8003672:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003676:	4933      	ldr	r1, [pc, #204]	@ (8003744 <recordSDdata+0x298>)
 8003678:	4618      	mov	r0, r3
 800367a:	f00c fe4d 	bl	8010318 <f_puts>
		fres = f_close(&fil);
 800367e:	4831      	ldr	r0, [pc, #196]	@ (8003744 <recordSDdata+0x298>)
 8003680:	f00c fce8 	bl	8010054 <f_close>
 8003684:	4603      	mov	r3, r0
 8003686:	461a      	mov	r2, r3
 8003688:	4b2c      	ldr	r3, [pc, #176]	@ (800373c <recordSDdata+0x290>)
 800368a:	701a      	strb	r2, [r3, #0]

		// Write roll pitch data
		fres = f_open(&fil, "RP.csv", FA_OPEN_APPEND | FA_WRITE | FA_READ);
 800368c:	2233      	movs	r2, #51	@ 0x33
 800368e:	493b      	ldr	r1, [pc, #236]	@ (800377c <recordSDdata+0x2d0>)
 8003690:	482c      	ldr	r0, [pc, #176]	@ (8003744 <recordSDdata+0x298>)
 8003692:	f00b ffc7 	bl	800f624 <f_open>
 8003696:	4603      	mov	r3, r0
 8003698:	461a      	mov	r2, r3
 800369a:	4b28      	ldr	r3, [pc, #160]	@ (800373c <recordSDdata+0x290>)
 800369c:	701a      	strb	r2, [r3, #0]
		fres = f_getfree("", &fre_clust, &pfs);
 800369e:	4a2a      	ldr	r2, [pc, #168]	@ (8003748 <recordSDdata+0x29c>)
 80036a0:	492a      	ldr	r1, [pc, #168]	@ (800374c <recordSDdata+0x2a0>)
 80036a2:	4824      	ldr	r0, [pc, #144]	@ (8003734 <recordSDdata+0x288>)
 80036a4:	f00c fd05 	bl	80100b2 <f_getfree>
 80036a8:	4603      	mov	r3, r0
 80036aa:	461a      	mov	r2, r3
 80036ac:	4b23      	ldr	r3, [pc, #140]	@ (800373c <recordSDdata+0x290>)
 80036ae:	701a      	strb	r2, [r3, #0]
		sprintf(header,"NEW SET OF ROLL PITCH DATA (deg)\n");
 80036b0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80036b4:	4932      	ldr	r1, [pc, #200]	@ (8003780 <recordSDdata+0x2d4>)
 80036b6:	4618      	mov	r0, r3
 80036b8:	f010 f942 	bl	8013940 <siprintf>
		char RPDataString[40];
		if (firstWrite==1)
 80036bc:	4b27      	ldr	r3, [pc, #156]	@ (800375c <recordSDdata+0x2b0>)
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d105      	bne.n	80036d0 <recordSDdata+0x224>
			f_puts(header,&fil);
 80036c4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80036c8:	491e      	ldr	r1, [pc, #120]	@ (8003744 <recordSDdata+0x298>)
 80036ca:	4618      	mov	r0, r3
 80036cc:	f00c fe24 	bl	8010318 <f_puts>
		sprintf(RPDataString, "Roll=%3f Pitch=%3f\n",phiHat_deg,thetaHat_deg);
 80036d0:	4b2c      	ldr	r3, [pc, #176]	@ (8003784 <recordSDdata+0x2d8>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7fc ff57 	bl	8000588 <__aeabi_f2d>
 80036da:	4604      	mov	r4, r0
 80036dc:	460d      	mov	r5, r1
 80036de:	4b2a      	ldr	r3, [pc, #168]	@ (8003788 <recordSDdata+0x2dc>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7fc ff50 	bl	8000588 <__aeabi_f2d>
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	f107 0008 	add.w	r0, r7, #8
 80036f0:	e9cd 2300 	strd	r2, r3, [sp]
 80036f4:	4622      	mov	r2, r4
 80036f6:	462b      	mov	r3, r5
 80036f8:	4924      	ldr	r1, [pc, #144]	@ (800378c <recordSDdata+0x2e0>)
 80036fa:	f010 f921 	bl	8013940 <siprintf>
		f_puts(RPDataString, &fil);
 80036fe:	f107 0308 	add.w	r3, r7, #8
 8003702:	4910      	ldr	r1, [pc, #64]	@ (8003744 <recordSDdata+0x298>)
 8003704:	4618      	mov	r0, r3
 8003706:	f00c fe07 	bl	8010318 <f_puts>
		fres = f_close(&fil);
 800370a:	480e      	ldr	r0, [pc, #56]	@ (8003744 <recordSDdata+0x298>)
 800370c:	f00c fca2 	bl	8010054 <f_close>
 8003710:	4603      	mov	r3, r0
 8003712:	461a      	mov	r2, r3
 8003714:	4b09      	ldr	r3, [pc, #36]	@ (800373c <recordSDdata+0x290>)
 8003716:	701a      	strb	r2, [r3, #0]

//
	  	f_mount(NULL, "", 1);
 8003718:	2201      	movs	r2, #1
 800371a:	4906      	ldr	r1, [pc, #24]	@ (8003734 <recordSDdata+0x288>)
 800371c:	2000      	movs	r0, #0
 800371e:	f00b ff1d 	bl	800f55c <f_mount>
	  	firstWrite=0;
 8003722:	4b0e      	ldr	r3, [pc, #56]	@ (800375c <recordSDdata+0x2b0>)
 8003724:	2200      	movs	r2, #0
 8003726:	701a      	strb	r2, [r3, #0]

    osDelay(2000); // write SD card data every 2 seconds
 8003728:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800372c:	f00d f803 	bl	8010736 <osDelay>
  {
 8003730:	e6c1      	b.n	80034b6 <recordSDdata+0xa>
 8003732:	bf00      	nop
 8003734:	08016e94 	.word	0x08016e94
 8003738:	2000050c 	.word	0x2000050c
 800373c:	2000257c 	.word	0x2000257c
 8003740:	08016e98 	.word	0x08016e98
 8003744:	2000154c 	.word	0x2000154c
 8003748:	20001548 	.word	0x20001548
 800374c:	20002580 	.word	0x20002580
 8003750:	08016ea4 	.word	0x08016ea4
 8003754:	20002b1c 	.word	0x20002b1c
 8003758:	08016ec4 	.word	0x08016ec4
 800375c:	20000001 	.word	0x20000001
 8003760:	08016edc 	.word	0x08016edc
 8003764:	08016ee8 	.word	0x08016ee8
 8003768:	08016f04 	.word	0x08016f04
 800376c:	08016f1c 	.word	0x08016f1c
 8003770:	08016f28 	.word	0x08016f28
 8003774:	20002b68 	.word	0x20002b68
 8003778:	08016f4c 	.word	0x08016f4c
 800377c:	08016f58 	.word	0x08016f58
 8003780:	08016f60 	.word	0x08016f60
 8003784:	200025ac 	.word	0x200025ac
 8003788:	200025b0 	.word	0x200025b0
 800378c:	08016f84 	.word	0x08016f84

08003790 <getBar30Data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_getBar30Data */
void getBar30Data(void const * argument)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN getBar30Data */
  /* Infinite loop */
	static uint8_t i2cGood=1;
  for(;;)
  {
	i2cGood=Bar30getData(&pressureSensor);
 8003798:	4805      	ldr	r0, [pc, #20]	@ (80037b0 <getBar30Data+0x20>)
 800379a:	f7fd fca7 	bl	80010ec <Bar30getData>
 800379e:	4603      	mov	r3, r0
 80037a0:	461a      	mov	r2, r3
 80037a2:	4b04      	ldr	r3, [pc, #16]	@ (80037b4 <getBar30Data+0x24>)
 80037a4:	701a      	strb	r2, [r3, #0]
    osDelay(250);
 80037a6:	20fa      	movs	r0, #250	@ 0xfa
 80037a8:	f00c ffc5 	bl	8010736 <osDelay>
	i2cGood=Bar30getData(&pressureSensor);
 80037ac:	bf00      	nop
 80037ae:	e7f3      	b.n	8003798 <getBar30Data+0x8>
 80037b0:	20002b68 	.word	0x20002b68
 80037b4:	20000002 	.word	0x20000002

080037b8 <EKFpredict>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_EKFpredict */
void EKFpredict(void const * argument)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	ed2d 8b02 	vpush	{d8}
 80037be:	b090      	sub	sp, #64	@ 0x40
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 for(;;)
  {
//	if(mpu6050.gyr_rps[0]!=0.0f && mpu6050.gyr_rps[1]!=0.0f&& mpu6050.gyr_rps[2]!=0.0f)
//		EKF_Predict(&ekf,mpu6050.gyr_rps[0], mpu6050.gyr_rps[1], mpu6050.gyr_rps[2], (float)KALMAN_PREDICT_PERIOD_MS/1000.0f);
//    osDelay(KALMAN_PREDICT_PERIOD_MS);
	 const float G_MPS2=9.8100000f;
 80037c4:	4b87      	ldr	r3, [pc, #540]	@ (80039e4 <EKFpredict+0x22c>)
 80037c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	 const float SAMPLE_TIME_MS = 50;
 80037c8:	4b87      	ldr	r3, [pc, #540]	@ (80039e8 <EKFpredict+0x230>)
 80037ca:	63bb      	str	r3, [r7, #56]	@ 0x38
	 const float COMP_FILT_ALPHA = 0.05000000f;
 80037cc:	4b87      	ldr	r3, [pc, #540]	@ (80039ec <EKFpredict+0x234>)
 80037ce:	637b      	str	r3, [r7, #52]	@ 0x34

	 //accelerometer measurements
	 float ax_mps2=mpu6050.acc_mps2[0];
 80037d0:	4b87      	ldr	r3, [pc, #540]	@ (80039f0 <EKFpredict+0x238>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	633b      	str	r3, [r7, #48]	@ 0x30
	 float ay_mps2=mpu6050.acc_mps2[1];
 80037d6:	4b86      	ldr	r3, [pc, #536]	@ (80039f0 <EKFpredict+0x238>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	62fb      	str	r3, [r7, #44]	@ 0x2c
	 float az_mps2=mpu6050.acc_mps2[2];
 80037dc:	4b84      	ldr	r3, [pc, #528]	@ (80039f0 <EKFpredict+0x238>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	62bb      	str	r3, [r7, #40]	@ 0x28

	 // estimate angles with accelero measurements
	 if( ax_mps2!=0 && ay_mps2!=0 && az_mps2!=0){
 80037e2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80037e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80037ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ee:	f000 80ef 	beq.w	80039d0 <EKFpredict+0x218>
 80037f2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80037f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80037fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037fe:	f000 80e7 	beq.w	80039d0 <EKFpredict+0x218>
 8003802:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003806:	eef5 7a40 	vcmp.f32	s15, #0.0
 800380a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800380e:	f000 80df 	beq.w	80039d0 <EKFpredict+0x218>
		 float phiHat_acc_rad=atanf(ay_mps2/az_mps2);
 8003812:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003816:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800381a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800381e:	eeb0 0a66 	vmov.f32	s0, s13
 8003822:	f012 fa3d 	bl	8015ca0 <atanf>
 8003826:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
		 float thetaHat_acc_rad=asinf(ax_mps2/G_MPS2);
 800382a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800382e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003832:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003836:	eeb0 0a66 	vmov.f32	s0, s13
 800383a:	f012 fa05 	bl	8015c48 <asinf>
 800383e:	ed87 0a08 	vstr	s0, [r7, #32]


		 // gyro measurements
		 float p_rps=mpu6050.gyr_rps[0];
 8003842:	4b6b      	ldr	r3, [pc, #428]	@ (80039f0 <EKFpredict+0x238>)
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	61fb      	str	r3, [r7, #28]
		 float q_rps=mpu6050.gyr_rps[1];
 8003848:	4b69      	ldr	r3, [pc, #420]	@ (80039f0 <EKFpredict+0x238>)
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	61bb      	str	r3, [r7, #24]
		 float r_rps=mpu6050.gyr_rps[2];
 800384e:	4b68      	ldr	r3, [pc, #416]	@ (80039f0 <EKFpredict+0x238>)
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	617b      	str	r3, [r7, #20]

		 // Body to Euler rates
		 float phiDot_rps=p_rps+tanf(thetaHat_rad)*(sinf(phiHat_rad)*q_rps + cosf(phiHat_rad)*r_rps);
 8003854:	4b67      	ldr	r3, [pc, #412]	@ (80039f4 <EKFpredict+0x23c>)
 8003856:	edd3 7a00 	vldr	s15, [r3]
 800385a:	eeb0 0a67 	vmov.f32	s0, s15
 800385e:	f012 fb85 	bl	8015f6c <tanf>
 8003862:	eef0 8a40 	vmov.f32	s17, s0
 8003866:	4b64      	ldr	r3, [pc, #400]	@ (80039f8 <EKFpredict+0x240>)
 8003868:	edd3 7a00 	vldr	s15, [r3]
 800386c:	eeb0 0a67 	vmov.f32	s0, s15
 8003870:	f012 fb36 	bl	8015ee0 <sinf>
 8003874:	eeb0 7a40 	vmov.f32	s14, s0
 8003878:	edd7 7a06 	vldr	s15, [r7, #24]
 800387c:	ee27 8a27 	vmul.f32	s16, s14, s15
 8003880:	4b5d      	ldr	r3, [pc, #372]	@ (80039f8 <EKFpredict+0x240>)
 8003882:	edd3 7a00 	vldr	s15, [r3]
 8003886:	eeb0 0a67 	vmov.f32	s0, s15
 800388a:	f012 fadd 	bl	8015e48 <cosf>
 800388e:	eeb0 7a40 	vmov.f32	s14, s0
 8003892:	edd7 7a05 	vldr	s15, [r7, #20]
 8003896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800389a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800389e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80038a2:	ed97 7a07 	vldr	s14, [r7, #28]
 80038a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038aa:	edc7 7a04 	vstr	s15, [r7, #16]
		 float thetaDot_rps = cosf(phiHat_rad)*q_rps - sinf(phiHat_rad) * r_rps;
 80038ae:	4b52      	ldr	r3, [pc, #328]	@ (80039f8 <EKFpredict+0x240>)
 80038b0:	edd3 7a00 	vldr	s15, [r3]
 80038b4:	eeb0 0a67 	vmov.f32	s0, s15
 80038b8:	f012 fac6 	bl	8015e48 <cosf>
 80038bc:	eeb0 7a40 	vmov.f32	s14, s0
 80038c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80038c4:	ee27 8a27 	vmul.f32	s16, s14, s15
 80038c8:	4b4b      	ldr	r3, [pc, #300]	@ (80039f8 <EKFpredict+0x240>)
 80038ca:	edd3 7a00 	vldr	s15, [r3]
 80038ce:	eeb0 0a67 	vmov.f32	s0, s15
 80038d2:	f012 fb05 	bl	8015ee0 <sinf>
 80038d6:	eeb0 7a40 	vmov.f32	s14, s0
 80038da:	edd7 7a05 	vldr	s15, [r7, #20]
 80038de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038e2:	ee78 7a67 	vsub.f32	s15, s16, s15
 80038e6:	edc7 7a03 	vstr	s15, [r7, #12]

		 // Combine accelerometer and gyro readings to get better estimate of roll and pitch

		 phiHat_rad= COMP_FILT_ALPHA*phiHat_acc_rad+(1.0f - COMP_FILT_ALPHA)*(phiHat_rad + (SAMPLE_TIME_MS/1000.0f)*phiDot_rps);
 80038ea:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80038ee:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80038f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038fa:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80038fe:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003902:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003906:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80039fc <EKFpredict+0x244>
 800390a:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800390e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003912:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003916:	4b38      	ldr	r3, [pc, #224]	@ (80039f8 <EKFpredict+0x240>)
 8003918:	edd3 7a00 	vldr	s15, [r3]
 800391c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8003920:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003928:	4b33      	ldr	r3, [pc, #204]	@ (80039f8 <EKFpredict+0x240>)
 800392a:	edc3 7a00 	vstr	s15, [r3]

		 thetaHat_rad=COMP_FILT_ALPHA*thetaHat_acc_rad+(1.0f-COMP_FILT_ALPHA)*(thetaHat_rad+(SAMPLE_TIME_MS/1000.0f)*thetaDot_rps);
 800392e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003932:	edd7 7a08 	vldr	s15, [r7, #32]
 8003936:	ee27 7a27 	vmul.f32	s14, s14, s15
 800393a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800393e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003942:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003946:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800394a:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80039fc <EKFpredict+0x244>
 800394e:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8003952:	edd7 7a03 	vldr	s15, [r7, #12]
 8003956:	ee26 6a27 	vmul.f32	s12, s12, s15
 800395a:	4b26      	ldr	r3, [pc, #152]	@ (80039f4 <EKFpredict+0x23c>)
 800395c:	edd3 7a00 	vldr	s15, [r3]
 8003960:	ee76 7a27 	vadd.f32	s15, s12, s15
 8003964:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003968:	ee77 7a27 	vadd.f32	s15, s14, s15
 800396c:	4b21      	ldr	r3, [pc, #132]	@ (80039f4 <EKFpredict+0x23c>)
 800396e:	edc3 7a00 	vstr	s15, [r3]

		 phiHat_deg=phiHat_rad*RAD_TO_DEG;
 8003972:	4b21      	ldr	r3, [pc, #132]	@ (80039f8 <EKFpredict+0x240>)
 8003974:	edd3 7a00 	vldr	s15, [r3]
 8003978:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8003a00 <EKFpredict+0x248>
 800397c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003980:	4b20      	ldr	r3, [pc, #128]	@ (8003a04 <EKFpredict+0x24c>)
 8003982:	edc3 7a00 	vstr	s15, [r3]
		 thetaHat_deg=thetaHat_rad*RAD_TO_DEG;
 8003986:	4b1b      	ldr	r3, [pc, #108]	@ (80039f4 <EKFpredict+0x23c>)
 8003988:	edd3 7a00 	vldr	s15, [r3]
 800398c:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8003a00 <EKFpredict+0x248>
 8003990:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003994:	4b1c      	ldr	r3, [pc, #112]	@ (8003a08 <EKFpredict+0x250>)
 8003996:	edc3 7a00 	vstr	s15, [r3]

		 if(ax_mps2>0.07f)
 800399a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800399e:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8003a0c <EKFpredict+0x254>
 80039a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039aa:	dd11      	ble.n	80039d0 <EKFpredict+0x218>
			 velocity=velocity+(SAMPLE_TIME_MS/1000.0f)*ax_mps2;
 80039ac:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80039b0:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80039fc <EKFpredict+0x244>
 80039b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80039b8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80039bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039c0:	4b13      	ldr	r3, [pc, #76]	@ (8003a10 <EKFpredict+0x258>)
 80039c2:	edd3 7a00 	vldr	s15, [r3]
 80039c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039ca:	4b11      	ldr	r3, [pc, #68]	@ (8003a10 <EKFpredict+0x258>)
 80039cc:	edc3 7a00 	vstr	s15, [r3]

	 }

	 osDelay(SAMPLE_TIME_MS);
 80039d0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80039d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039d8:	ee17 0a90 	vmov	r0, s15
 80039dc:	f00c feab 	bl	8010736 <osDelay>
  {
 80039e0:	e6f0      	b.n	80037c4 <EKFpredict+0xc>
 80039e2:	bf00      	nop
 80039e4:	411cf5c3 	.word	0x411cf5c3
 80039e8:	42480000 	.word	0x42480000
 80039ec:	3d4ccccd 	.word	0x3d4ccccd
 80039f0:	20002b1c 	.word	0x20002b1c
 80039f4:	200025a8 	.word	0x200025a8
 80039f8:	200025a4 	.word	0x200025a4
 80039fc:	447a0000 	.word	0x447a0000
 8003a00:	42652ee1 	.word	0x42652ee1
 8003a04:	200025ac 	.word	0x200025ac
 8003a08:	200025b0 	.word	0x200025b0
 8003a0c:	3d8f5c29 	.word	0x3d8f5c29
 8003a10:	200025a0 	.word	0x200025a0

08003a14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a04      	ldr	r2, [pc, #16]	@ (8003a34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d101      	bne.n	8003a2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003a26:	f000 ff9b 	bl	8004960 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40010000 	.word	0x40010000

08003a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a3c:	b672      	cpsid	i
}
 8003a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a40:	bf00      	nop
 8003a42:	e7fd      	b.n	8003a40 <Error_Handler+0x8>

08003a44 <turnLeft>:
typedef enum {LEFT,RIGHT,SURFACE,DIVE} COMMAND;



void turnLeft()
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
	if(htim3.Instance->CCR1>=SERVO_MIN_PWM+SERVO_ANGLE_VARIATION)
 8003a48:	4b1e      	ldr	r3, [pc, #120]	@ (8003ac4 <turnLeft+0x80>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a4e:	f240 2225 	movw	r2, #549	@ 0x225
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d906      	bls.n	8003a64 <turnLeft+0x20>
		htim3.Instance->CCR1-=SERVO_ANGLE_VARIATION;
 8003a56:	4b1b      	ldr	r3, [pc, #108]	@ (8003ac4 <turnLeft+0x80>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a5c:	4b19      	ldr	r3, [pc, #100]	@ (8003ac4 <turnLeft+0x80>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3a7d      	subs	r2, #125	@ 0x7d
 8003a62:	635a      	str	r2, [r3, #52]	@ 0x34

	if(htim3.Instance->CCR2>=SERVO_MIN_PWM+SERVO_ANGLE_VARIATION)
 8003a64:	4b17      	ldr	r3, [pc, #92]	@ (8003ac4 <turnLeft+0x80>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a6a:	f240 2225 	movw	r2, #549	@ 0x225
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d906      	bls.n	8003a80 <turnLeft+0x3c>
		htim3.Instance->CCR2-=SERVO_ANGLE_VARIATION;
 8003a72:	4b14      	ldr	r3, [pc, #80]	@ (8003ac4 <turnLeft+0x80>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a78:	4b12      	ldr	r3, [pc, #72]	@ (8003ac4 <turnLeft+0x80>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	3a7d      	subs	r2, #125	@ 0x7d
 8003a7e:	639a      	str	r2, [r3, #56]	@ 0x38

	if(htim3.Instance->CCR3<=SERVO_MAX_PWM-SERVO_ANGLE_VARIATION)
 8003a80:	4b10      	ldr	r3, [pc, #64]	@ (8003ac4 <turnLeft+0x80>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a86:	f240 421a 	movw	r2, #1050	@ 0x41a
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d806      	bhi.n	8003a9c <turnLeft+0x58>
		htim3.Instance->CCR3+=SERVO_ANGLE_VARIATION;
 8003a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac4 <turnLeft+0x80>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a94:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac4 <turnLeft+0x80>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	327d      	adds	r2, #125	@ 0x7d
 8003a9a:	63da      	str	r2, [r3, #60]	@ 0x3c

	if(htim3.Instance->CCR4<=SERVO_MAX_PWM-SERVO_ANGLE_VARIATION)
 8003a9c:	4b09      	ldr	r3, [pc, #36]	@ (8003ac4 <turnLeft+0x80>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa2:	f240 421a 	movw	r2, #1050	@ 0x41a
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d806      	bhi.n	8003ab8 <turnLeft+0x74>
		htim3.Instance->CCR4+=SERVO_ANGLE_VARIATION;
 8003aaa:	4b06      	ldr	r3, [pc, #24]	@ (8003ac4 <turnLeft+0x80>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ab0:	4b04      	ldr	r3, [pc, #16]	@ (8003ac4 <turnLeft+0x80>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	327d      	adds	r2, #125	@ 0x7d
 8003ab6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003ab8:	bf00      	nop
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	200028b4 	.word	0x200028b4

08003ac8 <turnRight>:

void turnRight()
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
	if(htim3.Instance->CCR1<=SERVO_MAX_PWM-SERVO_ANGLE_VARIATION)
 8003acc:	4b1e      	ldr	r3, [pc, #120]	@ (8003b48 <turnRight+0x80>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ad2:	f240 421a 	movw	r2, #1050	@ 0x41a
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d806      	bhi.n	8003ae8 <turnRight+0x20>
		htim3.Instance->CCR1+=SERVO_ANGLE_VARIATION;
 8003ada:	4b1b      	ldr	r3, [pc, #108]	@ (8003b48 <turnRight+0x80>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ae0:	4b19      	ldr	r3, [pc, #100]	@ (8003b48 <turnRight+0x80>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	327d      	adds	r2, #125	@ 0x7d
 8003ae6:	635a      	str	r2, [r3, #52]	@ 0x34

	if(htim3.Instance->CCR2<=SERVO_MAX_PWM-SERVO_ANGLE_VARIATION)
 8003ae8:	4b17      	ldr	r3, [pc, #92]	@ (8003b48 <turnRight+0x80>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aee:	f240 421a 	movw	r2, #1050	@ 0x41a
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d806      	bhi.n	8003b04 <turnRight+0x3c>
		htim3.Instance->CCR2+=SERVO_ANGLE_VARIATION;
 8003af6:	4b14      	ldr	r3, [pc, #80]	@ (8003b48 <turnRight+0x80>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003afc:	4b12      	ldr	r3, [pc, #72]	@ (8003b48 <turnRight+0x80>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	327d      	adds	r2, #125	@ 0x7d
 8003b02:	639a      	str	r2, [r3, #56]	@ 0x38

	if(htim3.Instance->CCR3>=SERVO_MIN_PWM+SERVO_ANGLE_VARIATION)
 8003b04:	4b10      	ldr	r3, [pc, #64]	@ (8003b48 <turnRight+0x80>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b0a:	f240 2225 	movw	r2, #549	@ 0x225
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d906      	bls.n	8003b20 <turnRight+0x58>
		htim3.Instance->CCR3-=SERVO_ANGLE_VARIATION;
 8003b12:	4b0d      	ldr	r3, [pc, #52]	@ (8003b48 <turnRight+0x80>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b18:	4b0b      	ldr	r3, [pc, #44]	@ (8003b48 <turnRight+0x80>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	3a7d      	subs	r2, #125	@ 0x7d
 8003b1e:	63da      	str	r2, [r3, #60]	@ 0x3c

	if(htim3.Instance->CCR4>=SERVO_MIN_PWM+SERVO_ANGLE_VARIATION)
 8003b20:	4b09      	ldr	r3, [pc, #36]	@ (8003b48 <turnRight+0x80>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b26:	f240 2225 	movw	r2, #549	@ 0x225
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d906      	bls.n	8003b3c <turnRight+0x74>
		htim3.Instance->CCR4-=SERVO_ANGLE_VARIATION;
 8003b2e:	4b06      	ldr	r3, [pc, #24]	@ (8003b48 <turnRight+0x80>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b34:	4b04      	ldr	r3, [pc, #16]	@ (8003b48 <turnRight+0x80>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	3a7d      	subs	r2, #125	@ 0x7d
 8003b3a:	641a      	str	r2, [r3, #64]	@ 0x40

}
 8003b3c:	bf00      	nop
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	200028b4 	.word	0x200028b4

08003b4c <surface>:
void surface()
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
	if(htim3.Instance->CCR1>=SERVO_MIN_PWM+SERVO_ANGLE_VARIATION)
 8003b50:	4b1e      	ldr	r3, [pc, #120]	@ (8003bcc <surface+0x80>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b56:	f240 2225 	movw	r2, #549	@ 0x225
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d906      	bls.n	8003b6c <surface+0x20>
		htim3.Instance->CCR1-=SERVO_ANGLE_VARIATION;
 8003b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8003bcc <surface+0x80>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b64:	4b19      	ldr	r3, [pc, #100]	@ (8003bcc <surface+0x80>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3a7d      	subs	r2, #125	@ 0x7d
 8003b6a:	635a      	str	r2, [r3, #52]	@ 0x34
	if(htim3.Instance->CCR2<=SERVO_MAX_PWM-SERVO_ANGLE_VARIATION)
 8003b6c:	4b17      	ldr	r3, [pc, #92]	@ (8003bcc <surface+0x80>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b72:	f240 421a 	movw	r2, #1050	@ 0x41a
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d806      	bhi.n	8003b88 <surface+0x3c>
		htim3.Instance->CCR2+=SERVO_ANGLE_VARIATION;
 8003b7a:	4b14      	ldr	r3, [pc, #80]	@ (8003bcc <surface+0x80>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b80:	4b12      	ldr	r3, [pc, #72]	@ (8003bcc <surface+0x80>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	327d      	adds	r2, #125	@ 0x7d
 8003b86:	639a      	str	r2, [r3, #56]	@ 0x38
	if(htim3.Instance->CCR3>=SERVO_MIN_PWM+SERVO_ANGLE_VARIATION)
 8003b88:	4b10      	ldr	r3, [pc, #64]	@ (8003bcc <surface+0x80>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b8e:	f240 2225 	movw	r2, #549	@ 0x225
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d906      	bls.n	8003ba4 <surface+0x58>
		htim3.Instance->CCR3-=SERVO_ANGLE_VARIATION;
 8003b96:	4b0d      	ldr	r3, [pc, #52]	@ (8003bcc <surface+0x80>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003bcc <surface+0x80>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	3a7d      	subs	r2, #125	@ 0x7d
 8003ba2:	63da      	str	r2, [r3, #60]	@ 0x3c
	if(htim3.Instance->CCR4<=SERVO_MAX_PWM-SERVO_ANGLE_VARIATION)
 8003ba4:	4b09      	ldr	r3, [pc, #36]	@ (8003bcc <surface+0x80>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003baa:	f240 421a 	movw	r2, #1050	@ 0x41a
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d806      	bhi.n	8003bc0 <surface+0x74>
		htim3.Instance->CCR4+=SERVO_ANGLE_VARIATION;
 8003bb2:	4b06      	ldr	r3, [pc, #24]	@ (8003bcc <surface+0x80>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003bb8:	4b04      	ldr	r3, [pc, #16]	@ (8003bcc <surface+0x80>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	327d      	adds	r2, #125	@ 0x7d
 8003bbe:	641a      	str	r2, [r3, #64]	@ 0x40

}
 8003bc0:	bf00      	nop
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	200028b4 	.word	0x200028b4

08003bd0 <dive>:
void dive()
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
	if(htim3.Instance->CCR1<=SERVO_MAX_PWM-SERVO_ANGLE_VARIATION)
 8003bd4:	4b1e      	ldr	r3, [pc, #120]	@ (8003c50 <dive+0x80>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bda:	f240 421a 	movw	r2, #1050	@ 0x41a
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d806      	bhi.n	8003bf0 <dive+0x20>
		htim3.Instance->CCR1+=SERVO_ANGLE_VARIATION;
 8003be2:	4b1b      	ldr	r3, [pc, #108]	@ (8003c50 <dive+0x80>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003be8:	4b19      	ldr	r3, [pc, #100]	@ (8003c50 <dive+0x80>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	327d      	adds	r2, #125	@ 0x7d
 8003bee:	635a      	str	r2, [r3, #52]	@ 0x34
	if(htim3.Instance->CCR2>=SERVO_MIN_PWM+SERVO_ANGLE_VARIATION)
 8003bf0:	4b17      	ldr	r3, [pc, #92]	@ (8003c50 <dive+0x80>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf6:	f240 2225 	movw	r2, #549	@ 0x225
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d906      	bls.n	8003c0c <dive+0x3c>
		htim3.Instance->CCR2-=SERVO_ANGLE_VARIATION;
 8003bfe:	4b14      	ldr	r3, [pc, #80]	@ (8003c50 <dive+0x80>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c04:	4b12      	ldr	r3, [pc, #72]	@ (8003c50 <dive+0x80>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	3a7d      	subs	r2, #125	@ 0x7d
 8003c0a:	639a      	str	r2, [r3, #56]	@ 0x38
	if(htim3.Instance->CCR3<=SERVO_MAX_PWM-SERVO_ANGLE_VARIATION)
 8003c0c:	4b10      	ldr	r3, [pc, #64]	@ (8003c50 <dive+0x80>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c12:	f240 421a 	movw	r2, #1050	@ 0x41a
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d806      	bhi.n	8003c28 <dive+0x58>
		htim3.Instance->CCR3+=SERVO_ANGLE_VARIATION;
 8003c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c50 <dive+0x80>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c20:	4b0b      	ldr	r3, [pc, #44]	@ (8003c50 <dive+0x80>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	327d      	adds	r2, #125	@ 0x7d
 8003c26:	63da      	str	r2, [r3, #60]	@ 0x3c
	if(htim3.Instance->CCR4>=SERVO_MIN_PWM+SERVO_ANGLE_VARIATION)
 8003c28:	4b09      	ldr	r3, [pc, #36]	@ (8003c50 <dive+0x80>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2e:	f240 2225 	movw	r2, #549	@ 0x225
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d906      	bls.n	8003c44 <dive+0x74>
		htim3.Instance->CCR4-=SERVO_ANGLE_VARIATION;
 8003c36:	4b06      	ldr	r3, [pc, #24]	@ (8003c50 <dive+0x80>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c3c:	4b04      	ldr	r3, [pc, #16]	@ (8003c50 <dive+0x80>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	3a7d      	subs	r2, #125	@ 0x7d
 8003c42:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003c44:	bf00      	nop
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	200028b4 	.word	0x200028b4

08003c54 <neutralRudders>:
void neutralRudders()
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
	htim3.Instance->CCR1=SERVO_CENTER_PWM;
 8003c58:	4b0c      	ldr	r3, [pc, #48]	@ (8003c8c <neutralRudders+0x38>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003c60:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3.Instance->CCR2=SERVO_CENTER_PWM;
 8003c62:	4b0a      	ldr	r3, [pc, #40]	@ (8003c8c <neutralRudders+0x38>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003c6a:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3.Instance->CCR3=SERVO_CENTER_PWM;
 8003c6c:	4b07      	ldr	r3, [pc, #28]	@ (8003c8c <neutralRudders+0x38>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003c74:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim3.Instance->CCR4=SERVO_CENTER_PWM;
 8003c76:	4b05      	ldr	r3, [pc, #20]	@ (8003c8c <neutralRudders+0x38>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003c7e:	641a      	str	r2, [r3, #64]	@ 0x40

}
 8003c80:	bf00      	nop
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	200028b4 	.word	0x200028b4

08003c90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c96:	2300      	movs	r3, #0
 8003c98:	607b      	str	r3, [r7, #4]
 8003c9a:	4b12      	ldr	r3, [pc, #72]	@ (8003ce4 <HAL_MspInit+0x54>)
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c9e:	4a11      	ldr	r2, [pc, #68]	@ (8003ce4 <HAL_MspInit+0x54>)
 8003ca0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ca4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8003ce4 <HAL_MspInit+0x54>)
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003caa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cae:	607b      	str	r3, [r7, #4]
 8003cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	603b      	str	r3, [r7, #0]
 8003cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce4 <HAL_MspInit+0x54>)
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cba:	4a0a      	ldr	r2, [pc, #40]	@ (8003ce4 <HAL_MspInit+0x54>)
 8003cbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cc2:	4b08      	ldr	r3, [pc, #32]	@ (8003ce4 <HAL_MspInit+0x54>)
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cca:	603b      	str	r3, [r7, #0]
 8003ccc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003cce:	2200      	movs	r2, #0
 8003cd0:	210f      	movs	r1, #15
 8003cd2:	f06f 0001 	mvn.w	r0, #1
 8003cd6:	f001 fc7b 	bl	80055d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cda:	bf00      	nop
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40023800 	.word	0x40023800

08003ce8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08c      	sub	sp, #48	@ 0x30
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cf0:	f107 031c 	add.w	r3, r7, #28
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	605a      	str	r2, [r3, #4]
 8003cfa:	609a      	str	r2, [r3, #8]
 8003cfc:	60da      	str	r2, [r3, #12]
 8003cfe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a67      	ldr	r2, [pc, #412]	@ (8003ea4 <HAL_ADC_MspInit+0x1bc>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d161      	bne.n	8003dce <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	61bb      	str	r3, [r7, #24]
 8003d0e:	4b66      	ldr	r3, [pc, #408]	@ (8003ea8 <HAL_ADC_MspInit+0x1c0>)
 8003d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d12:	4a65      	ldr	r2, [pc, #404]	@ (8003ea8 <HAL_ADC_MspInit+0x1c0>)
 8003d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d18:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d1a:	4b63      	ldr	r3, [pc, #396]	@ (8003ea8 <HAL_ADC_MspInit+0x1c0>)
 8003d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d22:	61bb      	str	r3, [r7, #24]
 8003d24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d26:	2300      	movs	r3, #0
 8003d28:	617b      	str	r3, [r7, #20]
 8003d2a:	4b5f      	ldr	r3, [pc, #380]	@ (8003ea8 <HAL_ADC_MspInit+0x1c0>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2e:	4a5e      	ldr	r2, [pc, #376]	@ (8003ea8 <HAL_ADC_MspInit+0x1c0>)
 8003d30:	f043 0301 	orr.w	r3, r3, #1
 8003d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d36:	4b5c      	ldr	r3, [pc, #368]	@ (8003ea8 <HAL_ADC_MspInit+0x1c0>)
 8003d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003d42:	2301      	movs	r3, #1
 8003d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d46:	2303      	movs	r3, #3
 8003d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d4e:	f107 031c 	add.w	r3, r7, #28
 8003d52:	4619      	mov	r1, r3
 8003d54:	4855      	ldr	r0, [pc, #340]	@ (8003eac <HAL_ADC_MspInit+0x1c4>)
 8003d56:	f002 f881 	bl	8005e5c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003d5a:	4b55      	ldr	r3, [pc, #340]	@ (8003eb0 <HAL_ADC_MspInit+0x1c8>)
 8003d5c:	4a55      	ldr	r2, [pc, #340]	@ (8003eb4 <HAL_ADC_MspInit+0x1cc>)
 8003d5e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003d60:	4b53      	ldr	r3, [pc, #332]	@ (8003eb0 <HAL_ADC_MspInit+0x1c8>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d66:	4b52      	ldr	r3, [pc, #328]	@ (8003eb0 <HAL_ADC_MspInit+0x1c8>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d6c:	4b50      	ldr	r3, [pc, #320]	@ (8003eb0 <HAL_ADC_MspInit+0x1c8>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003d72:	4b4f      	ldr	r3, [pc, #316]	@ (8003eb0 <HAL_ADC_MspInit+0x1c8>)
 8003d74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d78:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003d7a:	4b4d      	ldr	r3, [pc, #308]	@ (8003eb0 <HAL_ADC_MspInit+0x1c8>)
 8003d7c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d80:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003d82:	4b4b      	ldr	r3, [pc, #300]	@ (8003eb0 <HAL_ADC_MspInit+0x1c8>)
 8003d84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003d88:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003d8a:	4b49      	ldr	r3, [pc, #292]	@ (8003eb0 <HAL_ADC_MspInit+0x1c8>)
 8003d8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d90:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8003d92:	4b47      	ldr	r3, [pc, #284]	@ (8003eb0 <HAL_ADC_MspInit+0x1c8>)
 8003d94:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003d98:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d9a:	4b45      	ldr	r3, [pc, #276]	@ (8003eb0 <HAL_ADC_MspInit+0x1c8>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003da0:	4843      	ldr	r0, [pc, #268]	@ (8003eb0 <HAL_ADC_MspInit+0x1c8>)
 8003da2:	f001 fc3f 	bl	8005624 <HAL_DMA_Init>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8003dac:	f7ff fe44 	bl	8003a38 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a3f      	ldr	r2, [pc, #252]	@ (8003eb0 <HAL_ADC_MspInit+0x1c8>)
 8003db4:	639a      	str	r2, [r3, #56]	@ 0x38
 8003db6:	4a3e      	ldr	r2, [pc, #248]	@ (8003eb0 <HAL_ADC_MspInit+0x1c8>)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	2105      	movs	r1, #5
 8003dc0:	2012      	movs	r0, #18
 8003dc2:	f001 fc05 	bl	80055d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003dc6:	2012      	movs	r0, #18
 8003dc8:	f001 fc1e 	bl	8005608 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003dcc:	e066      	b.n	8003e9c <HAL_ADC_MspInit+0x1b4>
  else if(hadc->Instance==ADC2)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a39      	ldr	r2, [pc, #228]	@ (8003eb8 <HAL_ADC_MspInit+0x1d0>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d161      	bne.n	8003e9c <HAL_ADC_MspInit+0x1b4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003dd8:	2300      	movs	r3, #0
 8003dda:	613b      	str	r3, [r7, #16]
 8003ddc:	4b32      	ldr	r3, [pc, #200]	@ (8003ea8 <HAL_ADC_MspInit+0x1c0>)
 8003dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de0:	4a31      	ldr	r2, [pc, #196]	@ (8003ea8 <HAL_ADC_MspInit+0x1c0>)
 8003de2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003de6:	6453      	str	r3, [r2, #68]	@ 0x44
 8003de8:	4b2f      	ldr	r3, [pc, #188]	@ (8003ea8 <HAL_ADC_MspInit+0x1c0>)
 8003dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003df0:	613b      	str	r3, [r7, #16]
 8003df2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003df4:	2300      	movs	r3, #0
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	4b2b      	ldr	r3, [pc, #172]	@ (8003ea8 <HAL_ADC_MspInit+0x1c0>)
 8003dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfc:	4a2a      	ldr	r2, [pc, #168]	@ (8003ea8 <HAL_ADC_MspInit+0x1c0>)
 8003dfe:	f043 0301 	orr.w	r3, r3, #1
 8003e02:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e04:	4b28      	ldr	r3, [pc, #160]	@ (8003ea8 <HAL_ADC_MspInit+0x1c0>)
 8003e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	60fb      	str	r3, [r7, #12]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003e10:	2302      	movs	r3, #2
 8003e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e14:	2303      	movs	r3, #3
 8003e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e1c:	f107 031c 	add.w	r3, r7, #28
 8003e20:	4619      	mov	r1, r3
 8003e22:	4822      	ldr	r0, [pc, #136]	@ (8003eac <HAL_ADC_MspInit+0x1c4>)
 8003e24:	f002 f81a 	bl	8005e5c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8003e28:	4b24      	ldr	r3, [pc, #144]	@ (8003ebc <HAL_ADC_MspInit+0x1d4>)
 8003e2a:	4a25      	ldr	r2, [pc, #148]	@ (8003ec0 <HAL_ADC_MspInit+0x1d8>)
 8003e2c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8003e2e:	4b23      	ldr	r3, [pc, #140]	@ (8003ebc <HAL_ADC_MspInit+0x1d4>)
 8003e30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e34:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e36:	4b21      	ldr	r3, [pc, #132]	@ (8003ebc <HAL_ADC_MspInit+0x1d4>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e3c:	4b1f      	ldr	r3, [pc, #124]	@ (8003ebc <HAL_ADC_MspInit+0x1d4>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003e42:	4b1e      	ldr	r3, [pc, #120]	@ (8003ebc <HAL_ADC_MspInit+0x1d4>)
 8003e44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e48:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8003ebc <HAL_ADC_MspInit+0x1d4>)
 8003e4c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e50:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003e52:	4b1a      	ldr	r3, [pc, #104]	@ (8003ebc <HAL_ADC_MspInit+0x1d4>)
 8003e54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e58:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003e5a:	4b18      	ldr	r3, [pc, #96]	@ (8003ebc <HAL_ADC_MspInit+0x1d4>)
 8003e5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e60:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8003e62:	4b16      	ldr	r3, [pc, #88]	@ (8003ebc <HAL_ADC_MspInit+0x1d4>)
 8003e64:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003e68:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e6a:	4b14      	ldr	r3, [pc, #80]	@ (8003ebc <HAL_ADC_MspInit+0x1d4>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003e70:	4812      	ldr	r0, [pc, #72]	@ (8003ebc <HAL_ADC_MspInit+0x1d4>)
 8003e72:	f001 fbd7 	bl	8005624 <HAL_DMA_Init>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <HAL_ADC_MspInit+0x198>
      Error_Handler();
 8003e7c:	f7ff fddc 	bl	8003a38 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a0e      	ldr	r2, [pc, #56]	@ (8003ebc <HAL_ADC_MspInit+0x1d4>)
 8003e84:	639a      	str	r2, [r3, #56]	@ 0x38
 8003e86:	4a0d      	ldr	r2, [pc, #52]	@ (8003ebc <HAL_ADC_MspInit+0x1d4>)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	2105      	movs	r1, #5
 8003e90:	2012      	movs	r0, #18
 8003e92:	f001 fb9d 	bl	80055d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003e96:	2012      	movs	r0, #18
 8003e98:	f001 fbb6 	bl	8005608 <HAL_NVIC_EnableIRQ>
}
 8003e9c:	bf00      	nop
 8003e9e:	3730      	adds	r7, #48	@ 0x30
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40012000 	.word	0x40012000
 8003ea8:	40023800 	.word	0x40023800
 8003eac:	40020000 	.word	0x40020000
 8003eb0:	20002644 	.word	0x20002644
 8003eb4:	40026410 	.word	0x40026410
 8003eb8:	40012100 	.word	0x40012100
 8003ebc:	200026a4 	.word	0x200026a4
 8003ec0:	40026440 	.word	0x40026440

08003ec4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b08c      	sub	sp, #48	@ 0x30
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ecc:	f107 031c 	add.w	r3, r7, #28
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	605a      	str	r2, [r3, #4]
 8003ed6:	609a      	str	r2, [r3, #8]
 8003ed8:	60da      	str	r2, [r3, #12]
 8003eda:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a7a      	ldr	r2, [pc, #488]	@ (80040cc <HAL_I2C_MspInit+0x208>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	f040 8094 	bne.w	8004010 <HAL_I2C_MspInit+0x14c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ee8:	2300      	movs	r3, #0
 8003eea:	61bb      	str	r3, [r7, #24]
 8003eec:	4b78      	ldr	r3, [pc, #480]	@ (80040d0 <HAL_I2C_MspInit+0x20c>)
 8003eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef0:	4a77      	ldr	r2, [pc, #476]	@ (80040d0 <HAL_I2C_MspInit+0x20c>)
 8003ef2:	f043 0302 	orr.w	r3, r3, #2
 8003ef6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ef8:	4b75      	ldr	r3, [pc, #468]	@ (80040d0 <HAL_I2C_MspInit+0x20c>)
 8003efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	61bb      	str	r3, [r7, #24]
 8003f02:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003f04:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f0a:	2312      	movs	r3, #18
 8003f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f12:	2303      	movs	r3, #3
 8003f14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003f16:	2304      	movs	r3, #4
 8003f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f1a:	f107 031c 	add.w	r3, r7, #28
 8003f1e:	4619      	mov	r1, r3
 8003f20:	486c      	ldr	r0, [pc, #432]	@ (80040d4 <HAL_I2C_MspInit+0x210>)
 8003f22:	f001 ff9b 	bl	8005e5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003f26:	2300      	movs	r3, #0
 8003f28:	617b      	str	r3, [r7, #20]
 8003f2a:	4b69      	ldr	r3, [pc, #420]	@ (80040d0 <HAL_I2C_MspInit+0x20c>)
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2e:	4a68      	ldr	r2, [pc, #416]	@ (80040d0 <HAL_I2C_MspInit+0x20c>)
 8003f30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003f34:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f36:	4b66      	ldr	r3, [pc, #408]	@ (80040d0 <HAL_I2C_MspInit+0x20c>)
 8003f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8003f42:	4b65      	ldr	r3, [pc, #404]	@ (80040d8 <HAL_I2C_MspInit+0x214>)
 8003f44:	4a65      	ldr	r2, [pc, #404]	@ (80040dc <HAL_I2C_MspInit+0x218>)
 8003f46:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8003f48:	4b63      	ldr	r3, [pc, #396]	@ (80040d8 <HAL_I2C_MspInit+0x214>)
 8003f4a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f4e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f50:	4b61      	ldr	r3, [pc, #388]	@ (80040d8 <HAL_I2C_MspInit+0x214>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f56:	4b60      	ldr	r3, [pc, #384]	@ (80040d8 <HAL_I2C_MspInit+0x214>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f5c:	4b5e      	ldr	r3, [pc, #376]	@ (80040d8 <HAL_I2C_MspInit+0x214>)
 8003f5e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f62:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f64:	4b5c      	ldr	r3, [pc, #368]	@ (80040d8 <HAL_I2C_MspInit+0x214>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f6a:	4b5b      	ldr	r3, [pc, #364]	@ (80040d8 <HAL_I2C_MspInit+0x214>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003f70:	4b59      	ldr	r3, [pc, #356]	@ (80040d8 <HAL_I2C_MspInit+0x214>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003f76:	4b58      	ldr	r3, [pc, #352]	@ (80040d8 <HAL_I2C_MspInit+0x214>)
 8003f78:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003f7c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f7e:	4b56      	ldr	r3, [pc, #344]	@ (80040d8 <HAL_I2C_MspInit+0x214>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003f84:	4854      	ldr	r0, [pc, #336]	@ (80040d8 <HAL_I2C_MspInit+0x214>)
 8003f86:	f001 fb4d 	bl	8005624 <HAL_DMA_Init>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 8003f90:	f7ff fd52 	bl	8003a38 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a50      	ldr	r2, [pc, #320]	@ (80040d8 <HAL_I2C_MspInit+0x214>)
 8003f98:	639a      	str	r2, [r3, #56]	@ 0x38
 8003f9a:	4a4f      	ldr	r2, [pc, #316]	@ (80040d8 <HAL_I2C_MspInit+0x214>)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8003fa0:	4b4f      	ldr	r3, [pc, #316]	@ (80040e0 <HAL_I2C_MspInit+0x21c>)
 8003fa2:	4a50      	ldr	r2, [pc, #320]	@ (80040e4 <HAL_I2C_MspInit+0x220>)
 8003fa4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8003fa6:	4b4e      	ldr	r3, [pc, #312]	@ (80040e0 <HAL_I2C_MspInit+0x21c>)
 8003fa8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003fac:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003fae:	4b4c      	ldr	r3, [pc, #304]	@ (80040e0 <HAL_I2C_MspInit+0x21c>)
 8003fb0:	2240      	movs	r2, #64	@ 0x40
 8003fb2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fb4:	4b4a      	ldr	r3, [pc, #296]	@ (80040e0 <HAL_I2C_MspInit+0x21c>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003fba:	4b49      	ldr	r3, [pc, #292]	@ (80040e0 <HAL_I2C_MspInit+0x21c>)
 8003fbc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003fc0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003fc2:	4b47      	ldr	r3, [pc, #284]	@ (80040e0 <HAL_I2C_MspInit+0x21c>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003fc8:	4b45      	ldr	r3, [pc, #276]	@ (80040e0 <HAL_I2C_MspInit+0x21c>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003fce:	4b44      	ldr	r3, [pc, #272]	@ (80040e0 <HAL_I2C_MspInit+0x21c>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003fd4:	4b42      	ldr	r3, [pc, #264]	@ (80040e0 <HAL_I2C_MspInit+0x21c>)
 8003fd6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003fda:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003fdc:	4b40      	ldr	r3, [pc, #256]	@ (80040e0 <HAL_I2C_MspInit+0x21c>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003fe2:	483f      	ldr	r0, [pc, #252]	@ (80040e0 <HAL_I2C_MspInit+0x21c>)
 8003fe4:	f001 fb1e 	bl	8005624 <HAL_DMA_Init>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_I2C_MspInit+0x12e>
    {
      Error_Handler();
 8003fee:	f7ff fd23 	bl	8003a38 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a3a      	ldr	r2, [pc, #232]	@ (80040e0 <HAL_I2C_MspInit+0x21c>)
 8003ff6:	635a      	str	r2, [r3, #52]	@ 0x34
 8003ff8:	4a39      	ldr	r2, [pc, #228]	@ (80040e0 <HAL_I2C_MspInit+0x21c>)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8003ffe:	2200      	movs	r2, #0
 8004000:	2105      	movs	r1, #5
 8004002:	201f      	movs	r0, #31
 8004004:	f001 fae4 	bl	80055d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004008:	201f      	movs	r0, #31
 800400a:	f001 fafd 	bl	8005608 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800400e:	e058      	b.n	80040c2 <HAL_I2C_MspInit+0x1fe>
  else if(hi2c->Instance==I2C2)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a34      	ldr	r2, [pc, #208]	@ (80040e8 <HAL_I2C_MspInit+0x224>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d153      	bne.n	80040c2 <HAL_I2C_MspInit+0x1fe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800401a:	2300      	movs	r3, #0
 800401c:	613b      	str	r3, [r7, #16]
 800401e:	4b2c      	ldr	r3, [pc, #176]	@ (80040d0 <HAL_I2C_MspInit+0x20c>)
 8004020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004022:	4a2b      	ldr	r2, [pc, #172]	@ (80040d0 <HAL_I2C_MspInit+0x20c>)
 8004024:	f043 0302 	orr.w	r3, r3, #2
 8004028:	6313      	str	r3, [r2, #48]	@ 0x30
 800402a:	4b29      	ldr	r3, [pc, #164]	@ (80040d0 <HAL_I2C_MspInit+0x20c>)
 800402c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	613b      	str	r3, [r7, #16]
 8004034:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004036:	2300      	movs	r3, #0
 8004038:	60fb      	str	r3, [r7, #12]
 800403a:	4b25      	ldr	r3, [pc, #148]	@ (80040d0 <HAL_I2C_MspInit+0x20c>)
 800403c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403e:	4a24      	ldr	r2, [pc, #144]	@ (80040d0 <HAL_I2C_MspInit+0x20c>)
 8004040:	f043 0304 	orr.w	r3, r3, #4
 8004044:	6313      	str	r3, [r2, #48]	@ 0x30
 8004046:	4b22      	ldr	r3, [pc, #136]	@ (80040d0 <HAL_I2C_MspInit+0x20c>)
 8004048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800404a:	f003 0304 	and.w	r3, r3, #4
 800404e:	60fb      	str	r3, [r7, #12]
 8004050:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004052:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004058:	2312      	movs	r3, #18
 800405a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800405c:	2300      	movs	r3, #0
 800405e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004060:	2303      	movs	r3, #3
 8004062:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004064:	2304      	movs	r3, #4
 8004066:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004068:	f107 031c 	add.w	r3, r7, #28
 800406c:	4619      	mov	r1, r3
 800406e:	4819      	ldr	r0, [pc, #100]	@ (80040d4 <HAL_I2C_MspInit+0x210>)
 8004070:	f001 fef4 	bl	8005e5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004074:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800407a:	2312      	movs	r3, #18
 800407c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800407e:	2300      	movs	r3, #0
 8004080:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004082:	2303      	movs	r3, #3
 8004084:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004086:	2304      	movs	r3, #4
 8004088:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800408a:	f107 031c 	add.w	r3, r7, #28
 800408e:	4619      	mov	r1, r3
 8004090:	4816      	ldr	r0, [pc, #88]	@ (80040ec <HAL_I2C_MspInit+0x228>)
 8004092:	f001 fee3 	bl	8005e5c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004096:	2300      	movs	r3, #0
 8004098:	60bb      	str	r3, [r7, #8]
 800409a:	4b0d      	ldr	r3, [pc, #52]	@ (80040d0 <HAL_I2C_MspInit+0x20c>)
 800409c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409e:	4a0c      	ldr	r2, [pc, #48]	@ (80040d0 <HAL_I2C_MspInit+0x20c>)
 80040a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80040a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80040a6:	4b0a      	ldr	r3, [pc, #40]	@ (80040d0 <HAL_I2C_MspInit+0x20c>)
 80040a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040ae:	60bb      	str	r3, [r7, #8]
 80040b0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 80040b2:	2200      	movs	r2, #0
 80040b4:	2105      	movs	r1, #5
 80040b6:	2021      	movs	r0, #33	@ 0x21
 80040b8:	f001 fa8a 	bl	80055d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80040bc:	2021      	movs	r0, #33	@ 0x21
 80040be:	f001 faa3 	bl	8005608 <HAL_NVIC_EnableIRQ>
}
 80040c2:	bf00      	nop
 80040c4:	3730      	adds	r7, #48	@ 0x30
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	40005400 	.word	0x40005400
 80040d0:	40023800 	.word	0x40023800
 80040d4:	40020400 	.word	0x40020400
 80040d8:	200027ac 	.word	0x200027ac
 80040dc:	40026010 	.word	0x40026010
 80040e0:	2000280c 	.word	0x2000280c
 80040e4:	400260b8 	.word	0x400260b8
 80040e8:	40005800 	.word	0x40005800
 80040ec:	40020800 	.word	0x40020800

080040f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b08a      	sub	sp, #40	@ 0x28
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f8:	f107 0314 	add.w	r3, r7, #20
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	605a      	str	r2, [r3, #4]
 8004102:	609a      	str	r2, [r3, #8]
 8004104:	60da      	str	r2, [r3, #12]
 8004106:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a19      	ldr	r2, [pc, #100]	@ (8004174 <HAL_SPI_MspInit+0x84>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d12c      	bne.n	800416c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004112:	2300      	movs	r3, #0
 8004114:	613b      	str	r3, [r7, #16]
 8004116:	4b18      	ldr	r3, [pc, #96]	@ (8004178 <HAL_SPI_MspInit+0x88>)
 8004118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411a:	4a17      	ldr	r2, [pc, #92]	@ (8004178 <HAL_SPI_MspInit+0x88>)
 800411c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004120:	6413      	str	r3, [r2, #64]	@ 0x40
 8004122:	4b15      	ldr	r3, [pc, #84]	@ (8004178 <HAL_SPI_MspInit+0x88>)
 8004124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004126:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800412a:	613b      	str	r3, [r7, #16]
 800412c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800412e:	2300      	movs	r3, #0
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	4b11      	ldr	r3, [pc, #68]	@ (8004178 <HAL_SPI_MspInit+0x88>)
 8004134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004136:	4a10      	ldr	r2, [pc, #64]	@ (8004178 <HAL_SPI_MspInit+0x88>)
 8004138:	f043 0302 	orr.w	r3, r3, #2
 800413c:	6313      	str	r3, [r2, #48]	@ 0x30
 800413e:	4b0e      	ldr	r3, [pc, #56]	@ (8004178 <HAL_SPI_MspInit+0x88>)
 8004140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800414a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800414e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004150:	2302      	movs	r3, #2
 8004152:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004154:	2300      	movs	r3, #0
 8004156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004158:	2303      	movs	r3, #3
 800415a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800415c:	2305      	movs	r3, #5
 800415e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004160:	f107 0314 	add.w	r3, r7, #20
 8004164:	4619      	mov	r1, r3
 8004166:	4805      	ldr	r0, [pc, #20]	@ (800417c <HAL_SPI_MspInit+0x8c>)
 8004168:	f001 fe78 	bl	8005e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800416c:	bf00      	nop
 800416e:	3728      	adds	r7, #40	@ 0x28
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40003800 	.word	0x40003800
 8004178:	40023800 	.word	0x40023800
 800417c:	40020400 	.word	0x40020400

08004180 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004190:	d10e      	bne.n	80041b0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004192:	2300      	movs	r3, #0
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	4b13      	ldr	r3, [pc, #76]	@ (80041e4 <HAL_TIM_Base_MspInit+0x64>)
 8004198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419a:	4a12      	ldr	r2, [pc, #72]	@ (80041e4 <HAL_TIM_Base_MspInit+0x64>)
 800419c:	f043 0301 	orr.w	r3, r3, #1
 80041a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80041a2:	4b10      	ldr	r3, [pc, #64]	@ (80041e4 <HAL_TIM_Base_MspInit+0x64>)
 80041a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80041ae:	e012      	b.n	80041d6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM8)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a0c      	ldr	r2, [pc, #48]	@ (80041e8 <HAL_TIM_Base_MspInit+0x68>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d10d      	bne.n	80041d6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80041ba:	2300      	movs	r3, #0
 80041bc:	60bb      	str	r3, [r7, #8]
 80041be:	4b09      	ldr	r3, [pc, #36]	@ (80041e4 <HAL_TIM_Base_MspInit+0x64>)
 80041c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041c2:	4a08      	ldr	r2, [pc, #32]	@ (80041e4 <HAL_TIM_Base_MspInit+0x64>)
 80041c4:	f043 0302 	orr.w	r3, r3, #2
 80041c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80041ca:	4b06      	ldr	r3, [pc, #24]	@ (80041e4 <HAL_TIM_Base_MspInit+0x64>)
 80041cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	60bb      	str	r3, [r7, #8]
 80041d4:	68bb      	ldr	r3, [r7, #8]
}
 80041d6:	bf00      	nop
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	40023800 	.word	0x40023800
 80041e8:	40010400 	.word	0x40010400

080041ec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a0e      	ldr	r2, [pc, #56]	@ (8004234 <HAL_TIM_PWM_MspInit+0x48>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d115      	bne.n	800422a <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80041fe:	2300      	movs	r3, #0
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	4b0d      	ldr	r3, [pc, #52]	@ (8004238 <HAL_TIM_PWM_MspInit+0x4c>)
 8004204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004206:	4a0c      	ldr	r2, [pc, #48]	@ (8004238 <HAL_TIM_PWM_MspInit+0x4c>)
 8004208:	f043 0302 	orr.w	r3, r3, #2
 800420c:	6413      	str	r3, [r2, #64]	@ 0x40
 800420e:	4b0a      	ldr	r3, [pc, #40]	@ (8004238 <HAL_TIM_PWM_MspInit+0x4c>)
 8004210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800421a:	2200      	movs	r2, #0
 800421c:	2105      	movs	r1, #5
 800421e:	201d      	movs	r0, #29
 8004220:	f001 f9d6 	bl	80055d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004224:	201d      	movs	r0, #29
 8004226:	f001 f9ef 	bl	8005608 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800422a:	bf00      	nop
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40000400 	.word	0x40000400
 8004238:	40023800 	.word	0x40023800

0800423c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b088      	sub	sp, #32
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004244:	f107 030c 	add.w	r3, r7, #12
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	605a      	str	r2, [r3, #4]
 800424e:	609a      	str	r2, [r3, #8]
 8004250:	60da      	str	r2, [r3, #12]
 8004252:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a12      	ldr	r2, [pc, #72]	@ (80042a4 <HAL_TIM_MspPostInit+0x68>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d11e      	bne.n	800429c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800425e:	2300      	movs	r3, #0
 8004260:	60bb      	str	r3, [r7, #8]
 8004262:	4b11      	ldr	r3, [pc, #68]	@ (80042a8 <HAL_TIM_MspPostInit+0x6c>)
 8004264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004266:	4a10      	ldr	r2, [pc, #64]	@ (80042a8 <HAL_TIM_MspPostInit+0x6c>)
 8004268:	f043 0304 	orr.w	r3, r3, #4
 800426c:	6313      	str	r3, [r2, #48]	@ 0x30
 800426e:	4b0e      	ldr	r3, [pc, #56]	@ (80042a8 <HAL_TIM_MspPostInit+0x6c>)
 8004270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004272:	f003 0304 	and.w	r3, r3, #4
 8004276:	60bb      	str	r3, [r7, #8]
 8004278:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800427a:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800427e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004280:	2302      	movs	r3, #2
 8004282:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004284:	2300      	movs	r3, #0
 8004286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004288:	2300      	movs	r3, #0
 800428a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800428c:	2302      	movs	r3, #2
 800428e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004290:	f107 030c 	add.w	r3, r7, #12
 8004294:	4619      	mov	r1, r3
 8004296:	4805      	ldr	r0, [pc, #20]	@ (80042ac <HAL_TIM_MspPostInit+0x70>)
 8004298:	f001 fde0 	bl	8005e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800429c:	bf00      	nop
 800429e:	3720      	adds	r7, #32
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	40000400 	.word	0x40000400
 80042a8:	40023800 	.word	0x40023800
 80042ac:	40020800 	.word	0x40020800

080042b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b08c      	sub	sp, #48	@ 0x30
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042b8:	f107 031c 	add.w	r3, r7, #28
 80042bc:	2200      	movs	r2, #0
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	605a      	str	r2, [r3, #4]
 80042c2:	609a      	str	r2, [r3, #8]
 80042c4:	60da      	str	r2, [r3, #12]
 80042c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a82      	ldr	r2, [pc, #520]	@ (80044d8 <HAL_UART_MspInit+0x228>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d163      	bne.n	800439a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80042d2:	2300      	movs	r3, #0
 80042d4:	61bb      	str	r3, [r7, #24]
 80042d6:	4b81      	ldr	r3, [pc, #516]	@ (80044dc <HAL_UART_MspInit+0x22c>)
 80042d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042da:	4a80      	ldr	r2, [pc, #512]	@ (80044dc <HAL_UART_MspInit+0x22c>)
 80042dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80042e2:	4b7e      	ldr	r3, [pc, #504]	@ (80044dc <HAL_UART_MspInit+0x22c>)
 80042e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ea:	61bb      	str	r3, [r7, #24]
 80042ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ee:	2300      	movs	r3, #0
 80042f0:	617b      	str	r3, [r7, #20]
 80042f2:	4b7a      	ldr	r3, [pc, #488]	@ (80044dc <HAL_UART_MspInit+0x22c>)
 80042f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f6:	4a79      	ldr	r2, [pc, #484]	@ (80044dc <HAL_UART_MspInit+0x22c>)
 80042f8:	f043 0301 	orr.w	r3, r3, #1
 80042fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80042fe:	4b77      	ldr	r3, [pc, #476]	@ (80044dc <HAL_UART_MspInit+0x22c>)
 8004300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	617b      	str	r3, [r7, #20]
 8004308:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800430a:	230c      	movs	r3, #12
 800430c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800430e:	2302      	movs	r3, #2
 8004310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004312:	2300      	movs	r3, #0
 8004314:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004316:	2303      	movs	r3, #3
 8004318:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800431a:	2307      	movs	r3, #7
 800431c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800431e:	f107 031c 	add.w	r3, r7, #28
 8004322:	4619      	mov	r1, r3
 8004324:	486e      	ldr	r0, [pc, #440]	@ (80044e0 <HAL_UART_MspInit+0x230>)
 8004326:	f001 fd99 	bl	8005e5c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800432a:	4b6e      	ldr	r3, [pc, #440]	@ (80044e4 <HAL_UART_MspInit+0x234>)
 800432c:	4a6e      	ldr	r2, [pc, #440]	@ (80044e8 <HAL_UART_MspInit+0x238>)
 800432e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004330:	4b6c      	ldr	r3, [pc, #432]	@ (80044e4 <HAL_UART_MspInit+0x234>)
 8004332:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004336:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004338:	4b6a      	ldr	r3, [pc, #424]	@ (80044e4 <HAL_UART_MspInit+0x234>)
 800433a:	2240      	movs	r2, #64	@ 0x40
 800433c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800433e:	4b69      	ldr	r3, [pc, #420]	@ (80044e4 <HAL_UART_MspInit+0x234>)
 8004340:	2200      	movs	r2, #0
 8004342:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004344:	4b67      	ldr	r3, [pc, #412]	@ (80044e4 <HAL_UART_MspInit+0x234>)
 8004346:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800434a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800434c:	4b65      	ldr	r3, [pc, #404]	@ (80044e4 <HAL_UART_MspInit+0x234>)
 800434e:	2200      	movs	r2, #0
 8004350:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004352:	4b64      	ldr	r3, [pc, #400]	@ (80044e4 <HAL_UART_MspInit+0x234>)
 8004354:	2200      	movs	r2, #0
 8004356:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004358:	4b62      	ldr	r3, [pc, #392]	@ (80044e4 <HAL_UART_MspInit+0x234>)
 800435a:	2200      	movs	r2, #0
 800435c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800435e:	4b61      	ldr	r3, [pc, #388]	@ (80044e4 <HAL_UART_MspInit+0x234>)
 8004360:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004364:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004366:	4b5f      	ldr	r3, [pc, #380]	@ (80044e4 <HAL_UART_MspInit+0x234>)
 8004368:	2200      	movs	r2, #0
 800436a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800436c:	485d      	ldr	r0, [pc, #372]	@ (80044e4 <HAL_UART_MspInit+0x234>)
 800436e:	f001 f959 	bl	8005624 <HAL_DMA_Init>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8004378:	f7ff fb5e 	bl	8003a38 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a59      	ldr	r2, [pc, #356]	@ (80044e4 <HAL_UART_MspInit+0x234>)
 8004380:	635a      	str	r2, [r3, #52]	@ 0x34
 8004382:	4a58      	ldr	r2, [pc, #352]	@ (80044e4 <HAL_UART_MspInit+0x234>)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004388:	2200      	movs	r2, #0
 800438a:	2105      	movs	r1, #5
 800438c:	2026      	movs	r0, #38	@ 0x26
 800438e:	f001 f91f 	bl	80055d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004392:	2026      	movs	r0, #38	@ 0x26
 8004394:	f001 f938 	bl	8005608 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004398:	e09a      	b.n	80044d0 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART3)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a53      	ldr	r2, [pc, #332]	@ (80044ec <HAL_UART_MspInit+0x23c>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	f040 8095 	bne.w	80044d0 <HAL_UART_MspInit+0x220>
    __HAL_RCC_USART3_CLK_ENABLE();
 80043a6:	2300      	movs	r3, #0
 80043a8:	613b      	str	r3, [r7, #16]
 80043aa:	4b4c      	ldr	r3, [pc, #304]	@ (80044dc <HAL_UART_MspInit+0x22c>)
 80043ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ae:	4a4b      	ldr	r2, [pc, #300]	@ (80044dc <HAL_UART_MspInit+0x22c>)
 80043b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80043b6:	4b49      	ldr	r3, [pc, #292]	@ (80044dc <HAL_UART_MspInit+0x22c>)
 80043b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043be:	613b      	str	r3, [r7, #16]
 80043c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043c2:	2300      	movs	r3, #0
 80043c4:	60fb      	str	r3, [r7, #12]
 80043c6:	4b45      	ldr	r3, [pc, #276]	@ (80044dc <HAL_UART_MspInit+0x22c>)
 80043c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ca:	4a44      	ldr	r2, [pc, #272]	@ (80044dc <HAL_UART_MspInit+0x22c>)
 80043cc:	f043 0304 	orr.w	r3, r3, #4
 80043d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80043d2:	4b42      	ldr	r3, [pc, #264]	@ (80044dc <HAL_UART_MspInit+0x22c>)
 80043d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d6:	f003 0304 	and.w	r3, r3, #4
 80043da:	60fb      	str	r3, [r7, #12]
 80043dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80043de:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80043e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043e4:	2302      	movs	r3, #2
 80043e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e8:	2300      	movs	r3, #0
 80043ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043ec:	2303      	movs	r3, #3
 80043ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80043f0:	2307      	movs	r3, #7
 80043f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043f4:	f107 031c 	add.w	r3, r7, #28
 80043f8:	4619      	mov	r1, r3
 80043fa:	483d      	ldr	r0, [pc, #244]	@ (80044f0 <HAL_UART_MspInit+0x240>)
 80043fc:	f001 fd2e 	bl	8005e5c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004400:	4b3c      	ldr	r3, [pc, #240]	@ (80044f4 <HAL_UART_MspInit+0x244>)
 8004402:	4a3d      	ldr	r2, [pc, #244]	@ (80044f8 <HAL_UART_MspInit+0x248>)
 8004404:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004406:	4b3b      	ldr	r3, [pc, #236]	@ (80044f4 <HAL_UART_MspInit+0x244>)
 8004408:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800440c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800440e:	4b39      	ldr	r3, [pc, #228]	@ (80044f4 <HAL_UART_MspInit+0x244>)
 8004410:	2200      	movs	r2, #0
 8004412:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004414:	4b37      	ldr	r3, [pc, #220]	@ (80044f4 <HAL_UART_MspInit+0x244>)
 8004416:	2200      	movs	r2, #0
 8004418:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800441a:	4b36      	ldr	r3, [pc, #216]	@ (80044f4 <HAL_UART_MspInit+0x244>)
 800441c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004420:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004422:	4b34      	ldr	r3, [pc, #208]	@ (80044f4 <HAL_UART_MspInit+0x244>)
 8004424:	2200      	movs	r2, #0
 8004426:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004428:	4b32      	ldr	r3, [pc, #200]	@ (80044f4 <HAL_UART_MspInit+0x244>)
 800442a:	2200      	movs	r2, #0
 800442c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800442e:	4b31      	ldr	r3, [pc, #196]	@ (80044f4 <HAL_UART_MspInit+0x244>)
 8004430:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004434:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004436:	4b2f      	ldr	r3, [pc, #188]	@ (80044f4 <HAL_UART_MspInit+0x244>)
 8004438:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800443c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800443e:	4b2d      	ldr	r3, [pc, #180]	@ (80044f4 <HAL_UART_MspInit+0x244>)
 8004440:	2200      	movs	r2, #0
 8004442:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004444:	482b      	ldr	r0, [pc, #172]	@ (80044f4 <HAL_UART_MspInit+0x244>)
 8004446:	f001 f8ed 	bl	8005624 <HAL_DMA_Init>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d001      	beq.n	8004454 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 8004450:	f7ff faf2 	bl	8003a38 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a27      	ldr	r2, [pc, #156]	@ (80044f4 <HAL_UART_MspInit+0x244>)
 8004458:	639a      	str	r2, [r3, #56]	@ 0x38
 800445a:	4a26      	ldr	r2, [pc, #152]	@ (80044f4 <HAL_UART_MspInit+0x244>)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8004460:	4b26      	ldr	r3, [pc, #152]	@ (80044fc <HAL_UART_MspInit+0x24c>)
 8004462:	4a27      	ldr	r2, [pc, #156]	@ (8004500 <HAL_UART_MspInit+0x250>)
 8004464:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8004466:	4b25      	ldr	r3, [pc, #148]	@ (80044fc <HAL_UART_MspInit+0x24c>)
 8004468:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800446c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800446e:	4b23      	ldr	r3, [pc, #140]	@ (80044fc <HAL_UART_MspInit+0x24c>)
 8004470:	2240      	movs	r2, #64	@ 0x40
 8004472:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004474:	4b21      	ldr	r3, [pc, #132]	@ (80044fc <HAL_UART_MspInit+0x24c>)
 8004476:	2200      	movs	r2, #0
 8004478:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800447a:	4b20      	ldr	r3, [pc, #128]	@ (80044fc <HAL_UART_MspInit+0x24c>)
 800447c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004480:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004482:	4b1e      	ldr	r3, [pc, #120]	@ (80044fc <HAL_UART_MspInit+0x24c>)
 8004484:	2200      	movs	r2, #0
 8004486:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004488:	4b1c      	ldr	r3, [pc, #112]	@ (80044fc <HAL_UART_MspInit+0x24c>)
 800448a:	2200      	movs	r2, #0
 800448c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
 800448e:	4b1b      	ldr	r3, [pc, #108]	@ (80044fc <HAL_UART_MspInit+0x24c>)
 8004490:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004494:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004496:	4b19      	ldr	r3, [pc, #100]	@ (80044fc <HAL_UART_MspInit+0x24c>)
 8004498:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800449c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800449e:	4b17      	ldr	r3, [pc, #92]	@ (80044fc <HAL_UART_MspInit+0x24c>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80044a4:	4815      	ldr	r0, [pc, #84]	@ (80044fc <HAL_UART_MspInit+0x24c>)
 80044a6:	f001 f8bd 	bl	8005624 <HAL_DMA_Init>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <HAL_UART_MspInit+0x204>
      Error_Handler();
 80044b0:	f7ff fac2 	bl	8003a38 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a11      	ldr	r2, [pc, #68]	@ (80044fc <HAL_UART_MspInit+0x24c>)
 80044b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80044ba:	4a10      	ldr	r2, [pc, #64]	@ (80044fc <HAL_UART_MspInit+0x24c>)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80044c0:	2200      	movs	r2, #0
 80044c2:	2105      	movs	r1, #5
 80044c4:	2027      	movs	r0, #39	@ 0x27
 80044c6:	f001 f883 	bl	80055d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80044ca:	2027      	movs	r0, #39	@ 0x27
 80044cc:	f001 f89c 	bl	8005608 <HAL_NVIC_EnableIRQ>
}
 80044d0:	bf00      	nop
 80044d2:	3730      	adds	r7, #48	@ 0x30
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40004400 	.word	0x40004400
 80044dc:	40023800 	.word	0x40023800
 80044e0:	40020000 	.word	0x40020000
 80044e4:	200029cc 	.word	0x200029cc
 80044e8:	400260a0 	.word	0x400260a0
 80044ec:	40004800 	.word	0x40004800
 80044f0:	40020800 	.word	0x40020800
 80044f4:	20002a2c 	.word	0x20002a2c
 80044f8:	40026028 	.word	0x40026028
 80044fc:	20002a8c 	.word	0x20002a8c
 8004500:	40026058 	.word	0x40026058

08004504 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b08c      	sub	sp, #48	@ 0x30
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800450c:	2300      	movs	r3, #0
 800450e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004514:	2300      	movs	r3, #0
 8004516:	60bb      	str	r3, [r7, #8]
 8004518:	4b2f      	ldr	r3, [pc, #188]	@ (80045d8 <HAL_InitTick+0xd4>)
 800451a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800451c:	4a2e      	ldr	r2, [pc, #184]	@ (80045d8 <HAL_InitTick+0xd4>)
 800451e:	f043 0301 	orr.w	r3, r3, #1
 8004522:	6453      	str	r3, [r2, #68]	@ 0x44
 8004524:	4b2c      	ldr	r3, [pc, #176]	@ (80045d8 <HAL_InitTick+0xd4>)
 8004526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	60bb      	str	r3, [r7, #8]
 800452e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004530:	f107 020c 	add.w	r2, r7, #12
 8004534:	f107 0310 	add.w	r3, r7, #16
 8004538:	4611      	mov	r1, r2
 800453a:	4618      	mov	r0, r3
 800453c:	f005 fb10 	bl	8009b60 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8004540:	f005 fafa 	bl	8009b38 <HAL_RCC_GetPCLK2Freq>
 8004544:	4603      	mov	r3, r0
 8004546:	005b      	lsls	r3, r3, #1
 8004548:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800454a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800454c:	4a23      	ldr	r2, [pc, #140]	@ (80045dc <HAL_InitTick+0xd8>)
 800454e:	fba2 2303 	umull	r2, r3, r2, r3
 8004552:	0c9b      	lsrs	r3, r3, #18
 8004554:	3b01      	subs	r3, #1
 8004556:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004558:	4b21      	ldr	r3, [pc, #132]	@ (80045e0 <HAL_InitTick+0xdc>)
 800455a:	4a22      	ldr	r2, [pc, #136]	@ (80045e4 <HAL_InitTick+0xe0>)
 800455c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800455e:	4b20      	ldr	r3, [pc, #128]	@ (80045e0 <HAL_InitTick+0xdc>)
 8004560:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004564:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004566:	4a1e      	ldr	r2, [pc, #120]	@ (80045e0 <HAL_InitTick+0xdc>)
 8004568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800456c:	4b1c      	ldr	r3, [pc, #112]	@ (80045e0 <HAL_InitTick+0xdc>)
 800456e:	2200      	movs	r2, #0
 8004570:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004572:	4b1b      	ldr	r3, [pc, #108]	@ (80045e0 <HAL_InitTick+0xdc>)
 8004574:	2200      	movs	r2, #0
 8004576:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004578:	4b19      	ldr	r3, [pc, #100]	@ (80045e0 <HAL_InitTick+0xdc>)
 800457a:	2200      	movs	r2, #0
 800457c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800457e:	4818      	ldr	r0, [pc, #96]	@ (80045e0 <HAL_InitTick+0xdc>)
 8004580:	f006 fc1e 	bl	800adc0 <HAL_TIM_Base_Init>
 8004584:	4603      	mov	r3, r0
 8004586:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800458a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800458e:	2b00      	cmp	r3, #0
 8004590:	d11b      	bne.n	80045ca <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8004592:	4813      	ldr	r0, [pc, #76]	@ (80045e0 <HAL_InitTick+0xdc>)
 8004594:	f006 fccc 	bl	800af30 <HAL_TIM_Base_Start_IT>
 8004598:	4603      	mov	r3, r0
 800459a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800459e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d111      	bne.n	80045ca <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80045a6:	2019      	movs	r0, #25
 80045a8:	f001 f82e 	bl	8005608 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b0f      	cmp	r3, #15
 80045b0:	d808      	bhi.n	80045c4 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80045b2:	2200      	movs	r2, #0
 80045b4:	6879      	ldr	r1, [r7, #4]
 80045b6:	2019      	movs	r0, #25
 80045b8:	f001 f80a 	bl	80055d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80045bc:	4a0a      	ldr	r2, [pc, #40]	@ (80045e8 <HAL_InitTick+0xe4>)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6013      	str	r3, [r2, #0]
 80045c2:	e002      	b.n	80045ca <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80045ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3730      	adds	r7, #48	@ 0x30
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	40023800 	.word	0x40023800
 80045dc:	431bde83 	.word	0x431bde83
 80045e0:	20002b98 	.word	0x20002b98
 80045e4:	40010000 	.word	0x40010000
 80045e8:	20000008 	.word	0x20000008

080045ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80045f0:	bf00      	nop
 80045f2:	e7fd      	b.n	80045f0 <NMI_Handler+0x4>

080045f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045f4:	b480      	push	{r7}
 80045f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045f8:	bf00      	nop
 80045fa:	e7fd      	b.n	80045f8 <HardFault_Handler+0x4>

080045fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004600:	bf00      	nop
 8004602:	e7fd      	b.n	8004600 <MemManage_Handler+0x4>

08004604 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004604:	b480      	push	{r7}
 8004606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004608:	bf00      	nop
 800460a:	e7fd      	b.n	8004608 <BusFault_Handler+0x4>

0800460c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004610:	bf00      	nop
 8004612:	e7fd      	b.n	8004610 <UsageFault_Handler+0x4>

08004614 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004614:	b480      	push	{r7}
 8004616:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004618:	bf00      	nop
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_MPU6050_Pin);
 8004626:	2002      	movs	r0, #2
 8004628:	f001 fdc6 	bl	80061b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800462c:	bf00      	nop
 800462e:	bd80      	pop	{r7, pc}

08004630 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004634:	4802      	ldr	r0, [pc, #8]	@ (8004640 <DMA1_Stream0_IRQHandler+0x10>)
 8004636:	f001 f98d 	bl	8005954 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800463a:	bf00      	nop
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	200027ac 	.word	0x200027ac

08004644 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004648:	4802      	ldr	r0, [pc, #8]	@ (8004654 <DMA1_Stream1_IRQHandler+0x10>)
 800464a:	f001 f983 	bl	8005954 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800464e:	bf00      	nop
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	20002a2c 	.word	0x20002a2c

08004658 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800465c:	4802      	ldr	r0, [pc, #8]	@ (8004668 <DMA1_Stream3_IRQHandler+0x10>)
 800465e:	f001 f979 	bl	8005954 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004662:	bf00      	nop
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	20002a8c 	.word	0x20002a8c

0800466c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004670:	4802      	ldr	r0, [pc, #8]	@ (800467c <DMA1_Stream6_IRQHandler+0x10>)
 8004672:	f001 f96f 	bl	8005954 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004676:	bf00      	nop
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	200029cc 	.word	0x200029cc

08004680 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004684:	4803      	ldr	r0, [pc, #12]	@ (8004694 <ADC_IRQHandler+0x14>)
 8004686:	f000 f9f2 	bl	8004a6e <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800468a:	4803      	ldr	r0, [pc, #12]	@ (8004698 <ADC_IRQHandler+0x18>)
 800468c:	f000 f9ef 	bl	8004a6e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8004690:	bf00      	nop
 8004692:	bd80      	pop	{r7, pc}
 8004694:	200025b4 	.word	0x200025b4
 8004698:	200025fc 	.word	0x200025fc

0800469c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80046a0:	4802      	ldr	r0, [pc, #8]	@ (80046ac <TIM1_UP_TIM10_IRQHandler+0x10>)
 80046a2:	f006 fdcd 	bl	800b240 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80046a6:	bf00      	nop
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	20002b98 	.word	0x20002b98

080046b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80046b4:	4802      	ldr	r0, [pc, #8]	@ (80046c0 <TIM3_IRQHandler+0x10>)
 80046b6:	f006 fdc3 	bl	800b240 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80046ba:	bf00      	nop
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	200028b4 	.word	0x200028b4

080046c4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80046c8:	4802      	ldr	r0, [pc, #8]	@ (80046d4 <I2C1_EV_IRQHandler+0x10>)
 80046ca:	f002 ffd7 	bl	800767c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80046ce:	bf00      	nop
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	20002704 	.word	0x20002704

080046d8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80046dc:	4802      	ldr	r0, [pc, #8]	@ (80046e8 <I2C2_EV_IRQHandler+0x10>)
 80046de:	f002 ffcd 	bl	800767c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80046e2:	bf00      	nop
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	20002758 	.word	0x20002758

080046ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80046f0:	4802      	ldr	r0, [pc, #8]	@ (80046fc <USART2_IRQHandler+0x10>)
 80046f2:	f007 fd1d 	bl	800c130 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80046f6:	bf00      	nop
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	20002944 	.word	0x20002944

08004700 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004704:	4802      	ldr	r0, [pc, #8]	@ (8004710 <USART3_IRQHandler+0x10>)
 8004706:	f007 fd13 	bl	800c130 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800470a:	bf00      	nop
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	20002988 	.word	0x20002988

08004714 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004718:	4802      	ldr	r0, [pc, #8]	@ (8004724 <DMA1_Stream7_IRQHandler+0x10>)
 800471a:	f001 f91b 	bl	8005954 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800471e:	bf00      	nop
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	2000280c 	.word	0x2000280c

08004728 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800472c:	4802      	ldr	r0, [pc, #8]	@ (8004738 <DMA2_Stream0_IRQHandler+0x10>)
 800472e:	f001 f911 	bl	8005954 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004732:	bf00      	nop
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	20002644 	.word	0x20002644

0800473c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004740:	4802      	ldr	r0, [pc, #8]	@ (800474c <DMA2_Stream2_IRQHandler+0x10>)
 8004742:	f001 f907 	bl	8005954 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004746:	bf00      	nop
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	200026a4 	.word	0x200026a4

08004750 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
  return 1;
 8004754:	2301      	movs	r3, #1
}
 8004756:	4618      	mov	r0, r3
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <_kill>:

int _kill(int pid, int sig)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800476a:	f00f f9f5 	bl	8013b58 <__errno>
 800476e:	4603      	mov	r3, r0
 8004770:	2216      	movs	r2, #22
 8004772:	601a      	str	r2, [r3, #0]
  return -1;
 8004774:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004778:	4618      	mov	r0, r3
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <_exit>:

void _exit (int status)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004788:	f04f 31ff 	mov.w	r1, #4294967295
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7ff ffe7 	bl	8004760 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004792:	bf00      	nop
 8004794:	e7fd      	b.n	8004792 <_exit+0x12>

08004796 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b086      	sub	sp, #24
 800479a:	af00      	add	r7, sp, #0
 800479c:	60f8      	str	r0, [r7, #12]
 800479e:	60b9      	str	r1, [r7, #8]
 80047a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047a2:	2300      	movs	r3, #0
 80047a4:	617b      	str	r3, [r7, #20]
 80047a6:	e00a      	b.n	80047be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80047a8:	f3af 8000 	nop.w
 80047ac:	4601      	mov	r1, r0
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	60ba      	str	r2, [r7, #8]
 80047b4:	b2ca      	uxtb	r2, r1
 80047b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	3301      	adds	r3, #1
 80047bc:	617b      	str	r3, [r7, #20]
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	dbf0      	blt.n	80047a8 <_read+0x12>
  }

  return len;
 80047c6:	687b      	ldr	r3, [r7, #4]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3718      	adds	r7, #24
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80047d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047dc:	4618      	mov	r0, r3
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80047f8:	605a      	str	r2, [r3, #4]
  return 0;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <_isatty>:

int _isatty(int file)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004810:	2301      	movs	r3, #1
}
 8004812:	4618      	mov	r0, r3
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800481e:	b480      	push	{r7}
 8004820:	b085      	sub	sp, #20
 8004822:	af00      	add	r7, sp, #0
 8004824:	60f8      	str	r0, [r7, #12]
 8004826:	60b9      	str	r1, [r7, #8]
 8004828:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004840:	4a14      	ldr	r2, [pc, #80]	@ (8004894 <_sbrk+0x5c>)
 8004842:	4b15      	ldr	r3, [pc, #84]	@ (8004898 <_sbrk+0x60>)
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800484c:	4b13      	ldr	r3, [pc, #76]	@ (800489c <_sbrk+0x64>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d102      	bne.n	800485a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004854:	4b11      	ldr	r3, [pc, #68]	@ (800489c <_sbrk+0x64>)
 8004856:	4a12      	ldr	r2, [pc, #72]	@ (80048a0 <_sbrk+0x68>)
 8004858:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800485a:	4b10      	ldr	r3, [pc, #64]	@ (800489c <_sbrk+0x64>)
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4413      	add	r3, r2
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	429a      	cmp	r2, r3
 8004866:	d207      	bcs.n	8004878 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004868:	f00f f976 	bl	8013b58 <__errno>
 800486c:	4603      	mov	r3, r0
 800486e:	220c      	movs	r2, #12
 8004870:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004872:	f04f 33ff 	mov.w	r3, #4294967295
 8004876:	e009      	b.n	800488c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004878:	4b08      	ldr	r3, [pc, #32]	@ (800489c <_sbrk+0x64>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800487e:	4b07      	ldr	r3, [pc, #28]	@ (800489c <_sbrk+0x64>)
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4413      	add	r3, r2
 8004886:	4a05      	ldr	r2, [pc, #20]	@ (800489c <_sbrk+0x64>)
 8004888:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800488a:	68fb      	ldr	r3, [r7, #12]
}
 800488c:	4618      	mov	r0, r3
 800488e:	3718      	adds	r7, #24
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	20020000 	.word	0x20020000
 8004898:	00000400 	.word	0x00000400
 800489c:	20002be0 	.word	0x20002be0
 80048a0:	20006b08 	.word	0x20006b08

080048a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80048a4:	b480      	push	{r7}
 80048a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80048a8:	4b06      	ldr	r3, [pc, #24]	@ (80048c4 <SystemInit+0x20>)
 80048aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ae:	4a05      	ldr	r2, [pc, #20]	@ (80048c4 <SystemInit+0x20>)
 80048b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80048b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80048b8:	bf00      	nop
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	e000ed00 	.word	0xe000ed00

080048c8 <Reset_Handler>:
 80048c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004900 <LoopFillZerobss+0x12>
 80048cc:	480d      	ldr	r0, [pc, #52]	@ (8004904 <LoopFillZerobss+0x16>)
 80048ce:	490e      	ldr	r1, [pc, #56]	@ (8004908 <LoopFillZerobss+0x1a>)
 80048d0:	4a0e      	ldr	r2, [pc, #56]	@ (800490c <LoopFillZerobss+0x1e>)
 80048d2:	2300      	movs	r3, #0
 80048d4:	e002      	b.n	80048dc <LoopCopyDataInit>

080048d6 <CopyDataInit>:
 80048d6:	58d4      	ldr	r4, [r2, r3]
 80048d8:	50c4      	str	r4, [r0, r3]
 80048da:	3304      	adds	r3, #4

080048dc <LoopCopyDataInit>:
 80048dc:	18c4      	adds	r4, r0, r3
 80048de:	428c      	cmp	r4, r1
 80048e0:	d3f9      	bcc.n	80048d6 <CopyDataInit>
 80048e2:	4a0b      	ldr	r2, [pc, #44]	@ (8004910 <LoopFillZerobss+0x22>)
 80048e4:	4c0b      	ldr	r4, [pc, #44]	@ (8004914 <LoopFillZerobss+0x26>)
 80048e6:	2300      	movs	r3, #0
 80048e8:	e001      	b.n	80048ee <LoopFillZerobss>

080048ea <FillZerobss>:
 80048ea:	6013      	str	r3, [r2, #0]
 80048ec:	3204      	adds	r2, #4

080048ee <LoopFillZerobss>:
 80048ee:	42a2      	cmp	r2, r4
 80048f0:	d3fb      	bcc.n	80048ea <FillZerobss>
 80048f2:	f7ff ffd7 	bl	80048a4 <SystemInit>
 80048f6:	f00f f935 	bl	8013b64 <__libc_init_array>
 80048fa:	f7fd fe77 	bl	80025ec <main>
 80048fe:	4770      	bx	lr
 8004900:	20020000 	.word	0x20020000
 8004904:	20000000 	.word	0x20000000
 8004908:	200001f0 	.word	0x200001f0
 800490c:	08017bb8 	.word	0x08017bb8
 8004910:	200001f0 	.word	0x200001f0
 8004914:	20006b04 	.word	0x20006b04

08004918 <CAN1_RX0_IRQHandler>:
 8004918:	e7fe      	b.n	8004918 <CAN1_RX0_IRQHandler>
	...

0800491c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004920:	4b0e      	ldr	r3, [pc, #56]	@ (800495c <HAL_Init+0x40>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a0d      	ldr	r2, [pc, #52]	@ (800495c <HAL_Init+0x40>)
 8004926:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800492a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800492c:	4b0b      	ldr	r3, [pc, #44]	@ (800495c <HAL_Init+0x40>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a0a      	ldr	r2, [pc, #40]	@ (800495c <HAL_Init+0x40>)
 8004932:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004936:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004938:	4b08      	ldr	r3, [pc, #32]	@ (800495c <HAL_Init+0x40>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a07      	ldr	r2, [pc, #28]	@ (800495c <HAL_Init+0x40>)
 800493e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004942:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004944:	2003      	movs	r0, #3
 8004946:	f000 fe38 	bl	80055ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800494a:	200f      	movs	r0, #15
 800494c:	f7ff fdda 	bl	8004504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004950:	f7ff f99e 	bl	8003c90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	40023c00 	.word	0x40023c00

08004960 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004960:	b480      	push	{r7}
 8004962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004964:	4b06      	ldr	r3, [pc, #24]	@ (8004980 <HAL_IncTick+0x20>)
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	461a      	mov	r2, r3
 800496a:	4b06      	ldr	r3, [pc, #24]	@ (8004984 <HAL_IncTick+0x24>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4413      	add	r3, r2
 8004970:	4a04      	ldr	r2, [pc, #16]	@ (8004984 <HAL_IncTick+0x24>)
 8004972:	6013      	str	r3, [r2, #0]
}
 8004974:	bf00      	nop
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	2000000c 	.word	0x2000000c
 8004984:	20002be4 	.word	0x20002be4

08004988 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0
  return uwTick;
 800498c:	4b03      	ldr	r3, [pc, #12]	@ (800499c <HAL_GetTick+0x14>)
 800498e:	681b      	ldr	r3, [r3, #0]
}
 8004990:	4618      	mov	r0, r3
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	20002be4 	.word	0x20002be4

080049a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80049a8:	f7ff ffee 	bl	8004988 <HAL_GetTick>
 80049ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b8:	d005      	beq.n	80049c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80049ba:	4b0a      	ldr	r3, [pc, #40]	@ (80049e4 <HAL_Delay+0x44>)
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	461a      	mov	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4413      	add	r3, r2
 80049c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80049c6:	bf00      	nop
 80049c8:	f7ff ffde 	bl	8004988 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d8f7      	bhi.n	80049c8 <HAL_Delay+0x28>
  {
  }
}
 80049d8:	bf00      	nop
 80049da:	bf00      	nop
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	2000000c 	.word	0x2000000c

080049e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049f0:	2300      	movs	r3, #0
 80049f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e033      	b.n	8004a66 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d109      	bne.n	8004a1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7ff f96e 	bl	8003ce8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1e:	f003 0310 	and.w	r3, r3, #16
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d118      	bne.n	8004a58 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004a2e:	f023 0302 	bic.w	r3, r3, #2
 8004a32:	f043 0202 	orr.w	r2, r3, #2
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 fb88 	bl	8005150 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4a:	f023 0303 	bic.w	r3, r3, #3
 8004a4e:	f043 0201 	orr.w	r2, r3, #1
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	641a      	str	r2, [r3, #64]	@ 0x40
 8004a56:	e001      	b.n	8004a5c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b086      	sub	sp, #24
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	617b      	str	r3, [r7, #20]
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	f003 0320 	and.w	r3, r3, #32
 8004a9c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d049      	beq.n	8004b38 <HAL_ADC_IRQHandler+0xca>
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d046      	beq.n	8004b38 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aae:	f003 0310 	and.w	r3, r3, #16
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d105      	bne.n	8004ac2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aba:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d12b      	bne.n	8004b28 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d127      	bne.n	8004b28 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ade:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d006      	beq.n	8004af4 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d119      	bne.n	8004b28 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0220 	bic.w	r2, r2, #32
 8004b02:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d105      	bne.n	8004b28 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b20:	f043 0201 	orr.w	r2, r3, #1
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f7fd fcc1 	bl	80024b0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f06f 0212 	mvn.w	r2, #18
 8004b36:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f003 0304 	and.w	r3, r3, #4
 8004b3e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b46:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d057      	beq.n	8004bfe <HAL_ADC_IRQHandler+0x190>
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d054      	beq.n	8004bfe <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b58:	f003 0310 	and.w	r3, r3, #16
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d105      	bne.n	8004b6c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b64:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d139      	bne.n	8004bee <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b80:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d006      	beq.n	8004b96 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d12b      	bne.n	8004bee <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d124      	bne.n	8004bee <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d11d      	bne.n	8004bee <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d119      	bne.n	8004bee <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004bc8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d105      	bne.n	8004bee <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be6:	f043 0201 	orr.w	r2, r3, #1
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 fc2c 	bl	800544c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f06f 020c 	mvn.w	r2, #12
 8004bfc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c0c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d017      	beq.n	8004c44 <HAL_ADC_IRQHandler+0x1d6>
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d014      	beq.n	8004c44 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d10d      	bne.n	8004c44 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f945 	bl	8004ec4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f06f 0201 	mvn.w	r2, #1
 8004c42:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f003 0320 	and.w	r3, r3, #32
 8004c4a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004c52:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d015      	beq.n	8004c86 <HAL_ADC_IRQHandler+0x218>
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d012      	beq.n	8004c86 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c64:	f043 0202 	orr.w	r2, r3, #2
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f06f 0220 	mvn.w	r2, #32
 8004c74:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f92e 	bl	8004ed8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f06f 0220 	mvn.w	r2, #32
 8004c84:	601a      	str	r2, [r3, #0]
  }
}
 8004c86:	bf00      	nop
 8004c88:	3718      	adds	r7, #24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
	...

08004c90 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d101      	bne.n	8004cae <HAL_ADC_Start_DMA+0x1e>
 8004caa:	2302      	movs	r3, #2
 8004cac:	e0e9      	b.n	8004e82 <HAL_ADC_Start_DMA+0x1f2>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d018      	beq.n	8004cf6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689a      	ldr	r2, [r3, #8]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f042 0201 	orr.w	r2, r2, #1
 8004cd2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004cd4:	4b6d      	ldr	r3, [pc, #436]	@ (8004e8c <HAL_ADC_Start_DMA+0x1fc>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a6d      	ldr	r2, [pc, #436]	@ (8004e90 <HAL_ADC_Start_DMA+0x200>)
 8004cda:	fba2 2303 	umull	r2, r3, r2, r3
 8004cde:	0c9a      	lsrs	r2, r3, #18
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	4413      	add	r3, r2
 8004ce6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004ce8:	e002      	b.n	8004cf0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	3b01      	subs	r3, #1
 8004cee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1f9      	bne.n	8004cea <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d04:	d107      	bne.n	8004d16 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d14:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f003 0301 	and.w	r3, r3, #1
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	f040 80a1 	bne.w	8004e68 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004d2e:	f023 0301 	bic.w	r3, r3, #1
 8004d32:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d007      	beq.n	8004d58 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004d50:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d64:	d106      	bne.n	8004d74 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d6a:	f023 0206 	bic.w	r2, r3, #6
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	645a      	str	r2, [r3, #68]	@ 0x44
 8004d72:	e002      	b.n	8004d7a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d82:	4b44      	ldr	r3, [pc, #272]	@ (8004e94 <HAL_ADC_Start_DMA+0x204>)
 8004d84:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d8a:	4a43      	ldr	r2, [pc, #268]	@ (8004e98 <HAL_ADC_Start_DMA+0x208>)
 8004d8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d92:	4a42      	ldr	r2, [pc, #264]	@ (8004e9c <HAL_ADC_Start_DMA+0x20c>)
 8004d94:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d9a:	4a41      	ldr	r2, [pc, #260]	@ (8004ea0 <HAL_ADC_Start_DMA+0x210>)
 8004d9c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004da6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8004db6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689a      	ldr	r2, [r3, #8]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004dc6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	334c      	adds	r3, #76	@ 0x4c
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f000 fcd2 	bl	8005780 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f003 031f 	and.w	r3, r3, #31
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d12a      	bne.n	8004e3e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a2d      	ldr	r2, [pc, #180]	@ (8004ea4 <HAL_ADC_Start_DMA+0x214>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d015      	beq.n	8004e1e <HAL_ADC_Start_DMA+0x18e>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a2c      	ldr	r2, [pc, #176]	@ (8004ea8 <HAL_ADC_Start_DMA+0x218>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d105      	bne.n	8004e08 <HAL_ADC_Start_DMA+0x178>
 8004dfc:	4b25      	ldr	r3, [pc, #148]	@ (8004e94 <HAL_ADC_Start_DMA+0x204>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f003 031f 	and.w	r3, r3, #31
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00a      	beq.n	8004e1e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a27      	ldr	r2, [pc, #156]	@ (8004eac <HAL_ADC_Start_DMA+0x21c>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d136      	bne.n	8004e80 <HAL_ADC_Start_DMA+0x1f0>
 8004e12:	4b20      	ldr	r3, [pc, #128]	@ (8004e94 <HAL_ADC_Start_DMA+0x204>)
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f003 0310 	and.w	r3, r3, #16
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d130      	bne.n	8004e80 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d129      	bne.n	8004e80 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	689a      	ldr	r2, [r3, #8]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004e3a:	609a      	str	r2, [r3, #8]
 8004e3c:	e020      	b.n	8004e80 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a18      	ldr	r2, [pc, #96]	@ (8004ea4 <HAL_ADC_Start_DMA+0x214>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d11b      	bne.n	8004e80 <HAL_ADC_Start_DMA+0x1f0>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d114      	bne.n	8004e80 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689a      	ldr	r2, [r3, #8]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004e64:	609a      	str	r2, [r3, #8]
 8004e66:	e00b      	b.n	8004e80 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6c:	f043 0210 	orr.w	r2, r3, #16
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e78:	f043 0201 	orr.w	r2, r3, #1
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3718      	adds	r7, #24
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	20000004 	.word	0x20000004
 8004e90:	431bde83 	.word	0x431bde83
 8004e94:	40012300 	.word	0x40012300
 8004e98:	08005349 	.word	0x08005349
 8004e9c:	08005403 	.word	0x08005403
 8004ea0:	0800541f 	.word	0x0800541f
 8004ea4:	40012000 	.word	0x40012000
 8004ea8:	40012100 	.word	0x40012100
 8004eac:	40012200 	.word	0x40012200

08004eb0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d101      	bne.n	8004f08 <HAL_ADC_ConfigChannel+0x1c>
 8004f04:	2302      	movs	r3, #2
 8004f06:	e113      	b.n	8005130 <HAL_ADC_ConfigChannel+0x244>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2b09      	cmp	r3, #9
 8004f16:	d925      	bls.n	8004f64 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68d9      	ldr	r1, [r3, #12]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	461a      	mov	r2, r3
 8004f26:	4613      	mov	r3, r2
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	4413      	add	r3, r2
 8004f2c:	3b1e      	subs	r3, #30
 8004f2e:	2207      	movs	r2, #7
 8004f30:	fa02 f303 	lsl.w	r3, r2, r3
 8004f34:	43da      	mvns	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	400a      	ands	r2, r1
 8004f3c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68d9      	ldr	r1, [r3, #12]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	689a      	ldr	r2, [r3, #8]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	4618      	mov	r0, r3
 8004f50:	4603      	mov	r3, r0
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	4403      	add	r3, r0
 8004f56:	3b1e      	subs	r3, #30
 8004f58:	409a      	lsls	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	60da      	str	r2, [r3, #12]
 8004f62:	e022      	b.n	8004faa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6919      	ldr	r1, [r3, #16]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	461a      	mov	r2, r3
 8004f72:	4613      	mov	r3, r2
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	4413      	add	r3, r2
 8004f78:	2207      	movs	r2, #7
 8004f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7e:	43da      	mvns	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	400a      	ands	r2, r1
 8004f86:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6919      	ldr	r1, [r3, #16]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	689a      	ldr	r2, [r3, #8]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	4618      	mov	r0, r3
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	4403      	add	r3, r0
 8004fa0:	409a      	lsls	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	2b06      	cmp	r3, #6
 8004fb0:	d824      	bhi.n	8004ffc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	3b05      	subs	r3, #5
 8004fc4:	221f      	movs	r2, #31
 8004fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fca:	43da      	mvns	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	400a      	ands	r2, r1
 8004fd2:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	685a      	ldr	r2, [r3, #4]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	3b05      	subs	r3, #5
 8004fee:	fa00 f203 	lsl.w	r2, r0, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	635a      	str	r2, [r3, #52]	@ 0x34
 8004ffa:	e04c      	b.n	8005096 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	2b0c      	cmp	r3, #12
 8005002:	d824      	bhi.n	800504e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	4613      	mov	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	3b23      	subs	r3, #35	@ 0x23
 8005016:	221f      	movs	r2, #31
 8005018:	fa02 f303 	lsl.w	r3, r2, r3
 800501c:	43da      	mvns	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	400a      	ands	r2, r1
 8005024:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	b29b      	uxth	r3, r3
 8005032:	4618      	mov	r0, r3
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	4613      	mov	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4413      	add	r3, r2
 800503e:	3b23      	subs	r3, #35	@ 0x23
 8005040:	fa00 f203 	lsl.w	r2, r0, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	430a      	orrs	r2, r1
 800504a:	631a      	str	r2, [r3, #48]	@ 0x30
 800504c:	e023      	b.n	8005096 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	4613      	mov	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	3b41      	subs	r3, #65	@ 0x41
 8005060:	221f      	movs	r2, #31
 8005062:	fa02 f303 	lsl.w	r3, r2, r3
 8005066:	43da      	mvns	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	400a      	ands	r2, r1
 800506e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	b29b      	uxth	r3, r3
 800507c:	4618      	mov	r0, r3
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	4613      	mov	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	3b41      	subs	r3, #65	@ 0x41
 800508a:	fa00 f203 	lsl.w	r2, r0, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005096:	4b29      	ldr	r3, [pc, #164]	@ (800513c <HAL_ADC_ConfigChannel+0x250>)
 8005098:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a28      	ldr	r2, [pc, #160]	@ (8005140 <HAL_ADC_ConfigChannel+0x254>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d10f      	bne.n	80050c4 <HAL_ADC_ConfigChannel+0x1d8>
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2b12      	cmp	r3, #18
 80050aa:	d10b      	bne.n	80050c4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a1d      	ldr	r2, [pc, #116]	@ (8005140 <HAL_ADC_ConfigChannel+0x254>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d12b      	bne.n	8005126 <HAL_ADC_ConfigChannel+0x23a>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a1c      	ldr	r2, [pc, #112]	@ (8005144 <HAL_ADC_ConfigChannel+0x258>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d003      	beq.n	80050e0 <HAL_ADC_ConfigChannel+0x1f4>
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2b11      	cmp	r3, #17
 80050de:	d122      	bne.n	8005126 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a11      	ldr	r2, [pc, #68]	@ (8005144 <HAL_ADC_ConfigChannel+0x258>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d111      	bne.n	8005126 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005102:	4b11      	ldr	r3, [pc, #68]	@ (8005148 <HAL_ADC_ConfigChannel+0x25c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a11      	ldr	r2, [pc, #68]	@ (800514c <HAL_ADC_ConfigChannel+0x260>)
 8005108:	fba2 2303 	umull	r2, r3, r2, r3
 800510c:	0c9a      	lsrs	r2, r3, #18
 800510e:	4613      	mov	r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005118:	e002      	b.n	8005120 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	3b01      	subs	r3, #1
 800511e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1f9      	bne.n	800511a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3714      	adds	r7, #20
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	40012300 	.word	0x40012300
 8005140:	40012000 	.word	0x40012000
 8005144:	10000012 	.word	0x10000012
 8005148:	20000004 	.word	0x20000004
 800514c:	431bde83 	.word	0x431bde83

08005150 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005158:	4b79      	ldr	r3, [pc, #484]	@ (8005340 <ADC_Init+0x1f0>)
 800515a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	431a      	orrs	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005184:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	6859      	ldr	r1, [r3, #4]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	021a      	lsls	r2, r3, #8
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80051a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	6859      	ldr	r1, [r3, #4]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689a      	ldr	r2, [r3, #8]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689a      	ldr	r2, [r3, #8]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6899      	ldr	r1, [r3, #8]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e2:	4a58      	ldr	r2, [pc, #352]	@ (8005344 <ADC_Init+0x1f4>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d022      	beq.n	800522e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689a      	ldr	r2, [r3, #8]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80051f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6899      	ldr	r1, [r3, #8]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	689a      	ldr	r2, [r3, #8]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005218:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6899      	ldr	r1, [r3, #8]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	430a      	orrs	r2, r1
 800522a:	609a      	str	r2, [r3, #8]
 800522c:	e00f      	b.n	800524e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689a      	ldr	r2, [r3, #8]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800523c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800524c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	689a      	ldr	r2, [r3, #8]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 0202 	bic.w	r2, r2, #2
 800525c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	6899      	ldr	r1, [r3, #8]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	7e1b      	ldrb	r3, [r3, #24]
 8005268:	005a      	lsls	r2, r3, #1
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d01b      	beq.n	80052b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800528a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800529a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6859      	ldr	r1, [r3, #4]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a6:	3b01      	subs	r3, #1
 80052a8:	035a      	lsls	r2, r3, #13
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	605a      	str	r2, [r3, #4]
 80052b2:	e007      	b.n	80052c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80052d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	3b01      	subs	r3, #1
 80052e0:	051a      	lsls	r2, r3, #20
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	689a      	ldr	r2, [r3, #8]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80052f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	6899      	ldr	r1, [r3, #8]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005306:	025a      	lsls	r2, r3, #9
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689a      	ldr	r2, [r3, #8]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800531e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6899      	ldr	r1, [r3, #8]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	029a      	lsls	r2, r3, #10
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	430a      	orrs	r2, r1
 8005332:	609a      	str	r2, [r3, #8]
}
 8005334:	bf00      	nop
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	40012300 	.word	0x40012300
 8005344:	0f000001 	.word	0x0f000001

08005348 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005354:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800535e:	2b00      	cmp	r3, #0
 8005360:	d13c      	bne.n	80053dc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005366:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d12b      	bne.n	80053d4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005380:	2b00      	cmp	r3, #0
 8005382:	d127      	bne.n	80053d4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800538a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800538e:	2b00      	cmp	r3, #0
 8005390:	d006      	beq.n	80053a0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800539c:	2b00      	cmp	r3, #0
 800539e:	d119      	bne.n	80053d4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 0220 	bic.w	r2, r2, #32
 80053ae:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d105      	bne.n	80053d4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053cc:	f043 0201 	orr.w	r2, r3, #1
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f7fd f86b 	bl	80024b0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80053da:	e00e      	b.n	80053fa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e0:	f003 0310 	and.w	r3, r3, #16
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d003      	beq.n	80053f0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f7ff fd75 	bl	8004ed8 <HAL_ADC_ErrorCallback>
}
 80053ee:	e004      	b.n	80053fa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	4798      	blx	r3
}
 80053fa:	bf00      	nop
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b084      	sub	sp, #16
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800540e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f7ff fd4d 	bl	8004eb0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005416:	bf00      	nop
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b084      	sub	sp, #16
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800542a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2240      	movs	r2, #64	@ 0x40
 8005430:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005436:	f043 0204 	orr.w	r2, r3, #4
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f7ff fd4a 	bl	8004ed8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005444:	bf00      	nop
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <__NVIC_SetPriorityGrouping>:
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f003 0307 	and.w	r3, r3, #7
 800546e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005470:	4b0c      	ldr	r3, [pc, #48]	@ (80054a4 <__NVIC_SetPriorityGrouping+0x44>)
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800547c:	4013      	ands	r3, r2
 800547e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005488:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800548c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005492:	4a04      	ldr	r2, [pc, #16]	@ (80054a4 <__NVIC_SetPriorityGrouping+0x44>)
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	60d3      	str	r3, [r2, #12]
}
 8005498:	bf00      	nop
 800549a:	3714      	adds	r7, #20
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr
 80054a4:	e000ed00 	.word	0xe000ed00

080054a8 <__NVIC_GetPriorityGrouping>:
{
 80054a8:	b480      	push	{r7}
 80054aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054ac:	4b04      	ldr	r3, [pc, #16]	@ (80054c0 <__NVIC_GetPriorityGrouping+0x18>)
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	0a1b      	lsrs	r3, r3, #8
 80054b2:	f003 0307 	and.w	r3, r3, #7
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr
 80054c0:	e000ed00 	.word	0xe000ed00

080054c4 <__NVIC_EnableIRQ>:
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	4603      	mov	r3, r0
 80054cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	db0b      	blt.n	80054ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054d6:	79fb      	ldrb	r3, [r7, #7]
 80054d8:	f003 021f 	and.w	r2, r3, #31
 80054dc:	4907      	ldr	r1, [pc, #28]	@ (80054fc <__NVIC_EnableIRQ+0x38>)
 80054de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054e2:	095b      	lsrs	r3, r3, #5
 80054e4:	2001      	movs	r0, #1
 80054e6:	fa00 f202 	lsl.w	r2, r0, r2
 80054ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80054ee:	bf00      	nop
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	e000e100 	.word	0xe000e100

08005500 <__NVIC_SetPriority>:
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	4603      	mov	r3, r0
 8005508:	6039      	str	r1, [r7, #0]
 800550a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800550c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005510:	2b00      	cmp	r3, #0
 8005512:	db0a      	blt.n	800552a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	b2da      	uxtb	r2, r3
 8005518:	490c      	ldr	r1, [pc, #48]	@ (800554c <__NVIC_SetPriority+0x4c>)
 800551a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800551e:	0112      	lsls	r2, r2, #4
 8005520:	b2d2      	uxtb	r2, r2
 8005522:	440b      	add	r3, r1
 8005524:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005528:	e00a      	b.n	8005540 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	b2da      	uxtb	r2, r3
 800552e:	4908      	ldr	r1, [pc, #32]	@ (8005550 <__NVIC_SetPriority+0x50>)
 8005530:	79fb      	ldrb	r3, [r7, #7]
 8005532:	f003 030f 	and.w	r3, r3, #15
 8005536:	3b04      	subs	r3, #4
 8005538:	0112      	lsls	r2, r2, #4
 800553a:	b2d2      	uxtb	r2, r2
 800553c:	440b      	add	r3, r1
 800553e:	761a      	strb	r2, [r3, #24]
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	e000e100 	.word	0xe000e100
 8005550:	e000ed00 	.word	0xe000ed00

08005554 <NVIC_EncodePriority>:
{
 8005554:	b480      	push	{r7}
 8005556:	b089      	sub	sp, #36	@ 0x24
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f003 0307 	and.w	r3, r3, #7
 8005566:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	f1c3 0307 	rsb	r3, r3, #7
 800556e:	2b04      	cmp	r3, #4
 8005570:	bf28      	it	cs
 8005572:	2304      	movcs	r3, #4
 8005574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	3304      	adds	r3, #4
 800557a:	2b06      	cmp	r3, #6
 800557c:	d902      	bls.n	8005584 <NVIC_EncodePriority+0x30>
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	3b03      	subs	r3, #3
 8005582:	e000      	b.n	8005586 <NVIC_EncodePriority+0x32>
 8005584:	2300      	movs	r3, #0
 8005586:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005588:	f04f 32ff 	mov.w	r2, #4294967295
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	fa02 f303 	lsl.w	r3, r2, r3
 8005592:	43da      	mvns	r2, r3
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	401a      	ands	r2, r3
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800559c:	f04f 31ff 	mov.w	r1, #4294967295
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	fa01 f303 	lsl.w	r3, r1, r3
 80055a6:	43d9      	mvns	r1, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055ac:	4313      	orrs	r3, r2
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3724      	adds	r7, #36	@ 0x24
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b082      	sub	sp, #8
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7ff ff4c 	bl	8005460 <__NVIC_SetPriorityGrouping>
}
 80055c8:	bf00      	nop
 80055ca:	3708      	adds	r7, #8
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	4603      	mov	r3, r0
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
 80055dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80055de:	2300      	movs	r3, #0
 80055e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80055e2:	f7ff ff61 	bl	80054a8 <__NVIC_GetPriorityGrouping>
 80055e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	68b9      	ldr	r1, [r7, #8]
 80055ec:	6978      	ldr	r0, [r7, #20]
 80055ee:	f7ff ffb1 	bl	8005554 <NVIC_EncodePriority>
 80055f2:	4602      	mov	r2, r0
 80055f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055f8:	4611      	mov	r1, r2
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7ff ff80 	bl	8005500 <__NVIC_SetPriority>
}
 8005600:	bf00      	nop
 8005602:	3718      	adds	r7, #24
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	4603      	mov	r3, r0
 8005610:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005616:	4618      	mov	r0, r3
 8005618:	f7ff ff54 	bl	80054c4 <__NVIC_EnableIRQ>
}
 800561c:	bf00      	nop
 800561e:	3708      	adds	r7, #8
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800562c:	2300      	movs	r3, #0
 800562e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005630:	f7ff f9aa 	bl	8004988 <HAL_GetTick>
 8005634:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d101      	bne.n	8005640 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e099      	b.n	8005774 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2202      	movs	r2, #2
 8005644:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f022 0201 	bic.w	r2, r2, #1
 800565e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005660:	e00f      	b.n	8005682 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005662:	f7ff f991 	bl	8004988 <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	2b05      	cmp	r3, #5
 800566e:	d908      	bls.n	8005682 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2220      	movs	r2, #32
 8005674:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2203      	movs	r2, #3
 800567a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e078      	b.n	8005774 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1e8      	bne.n	8005662 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	4b38      	ldr	r3, [pc, #224]	@ (800577c <HAL_DMA_Init+0x158>)
 800569c:	4013      	ands	r3, r2
 800569e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d8:	2b04      	cmp	r3, #4
 80056da:	d107      	bne.n	80056ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056e4:	4313      	orrs	r3, r2
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	f023 0307 	bic.w	r3, r3, #7
 8005702:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	4313      	orrs	r3, r2
 800570c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005712:	2b04      	cmp	r3, #4
 8005714:	d117      	bne.n	8005746 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	4313      	orrs	r3, r2
 800571e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00e      	beq.n	8005746 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 fb1b 	bl	8005d64 <DMA_CheckFifoParam>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d008      	beq.n	8005746 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2240      	movs	r2, #64	@ 0x40
 8005738:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005742:	2301      	movs	r3, #1
 8005744:	e016      	b.n	8005774 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 fad2 	bl	8005cf8 <DMA_CalcBaseAndBitshift>
 8005754:	4603      	mov	r3, r0
 8005756:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800575c:	223f      	movs	r2, #63	@ 0x3f
 800575e:	409a      	lsls	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3718      	adds	r7, #24
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	f010803f 	.word	0xf010803f

08005780 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
 800578c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800578e:	2300      	movs	r3, #0
 8005790:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005796:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d101      	bne.n	80057a6 <HAL_DMA_Start_IT+0x26>
 80057a2:	2302      	movs	r3, #2
 80057a4:	e040      	b.n	8005828 <HAL_DMA_Start_IT+0xa8>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d12f      	bne.n	800581a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2202      	movs	r2, #2
 80057be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	68b9      	ldr	r1, [r7, #8]
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f000 fa64 	bl	8005c9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057d8:	223f      	movs	r2, #63	@ 0x3f
 80057da:	409a      	lsls	r2, r3
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f042 0216 	orr.w	r2, r2, #22
 80057ee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d007      	beq.n	8005808 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f042 0208 	orr.w	r2, r2, #8
 8005806:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f042 0201 	orr.w	r2, r2, #1
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	e005      	b.n	8005826 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005822:	2302      	movs	r3, #2
 8005824:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005826:	7dfb      	ldrb	r3, [r7, #23]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3718      	adds	r7, #24
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800583c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800583e:	f7ff f8a3 	bl	8004988 <HAL_GetTick>
 8005842:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b02      	cmp	r3, #2
 800584e:	d008      	beq.n	8005862 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2280      	movs	r2, #128	@ 0x80
 8005854:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e052      	b.n	8005908 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f022 0216 	bic.w	r2, r2, #22
 8005870:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	695a      	ldr	r2, [r3, #20]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005880:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005886:	2b00      	cmp	r3, #0
 8005888:	d103      	bne.n	8005892 <HAL_DMA_Abort+0x62>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800588e:	2b00      	cmp	r3, #0
 8005890:	d007      	beq.n	80058a2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 0208 	bic.w	r2, r2, #8
 80058a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f022 0201 	bic.w	r2, r2, #1
 80058b0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058b2:	e013      	b.n	80058dc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058b4:	f7ff f868 	bl	8004988 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b05      	cmp	r3, #5
 80058c0:	d90c      	bls.n	80058dc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2220      	movs	r2, #32
 80058c6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2203      	movs	r2, #3
 80058cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e015      	b.n	8005908 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1e4      	bne.n	80058b4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058ee:	223f      	movs	r2, #63	@ 0x3f
 80058f0:	409a      	lsls	r2, r3
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2b02      	cmp	r3, #2
 8005922:	d004      	beq.n	800592e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2280      	movs	r2, #128	@ 0x80
 8005928:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e00c      	b.n	8005948 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2205      	movs	r2, #5
 8005932:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f022 0201 	bic.w	r2, r2, #1
 8005944:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800595c:	2300      	movs	r3, #0
 800595e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005960:	4b8e      	ldr	r3, [pc, #568]	@ (8005b9c <HAL_DMA_IRQHandler+0x248>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a8e      	ldr	r2, [pc, #568]	@ (8005ba0 <HAL_DMA_IRQHandler+0x24c>)
 8005966:	fba2 2303 	umull	r2, r3, r2, r3
 800596a:	0a9b      	lsrs	r3, r3, #10
 800596c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005972:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800597e:	2208      	movs	r2, #8
 8005980:	409a      	lsls	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	4013      	ands	r3, r2
 8005986:	2b00      	cmp	r3, #0
 8005988:	d01a      	beq.n	80059c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0304 	and.w	r3, r3, #4
 8005994:	2b00      	cmp	r3, #0
 8005996:	d013      	beq.n	80059c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f022 0204 	bic.w	r2, r2, #4
 80059a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059ac:	2208      	movs	r2, #8
 80059ae:	409a      	lsls	r2, r3
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059b8:	f043 0201 	orr.w	r2, r3, #1
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059c4:	2201      	movs	r2, #1
 80059c6:	409a      	lsls	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4013      	ands	r3, r2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d012      	beq.n	80059f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00b      	beq.n	80059f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059e2:	2201      	movs	r2, #1
 80059e4:	409a      	lsls	r2, r3
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ee:	f043 0202 	orr.w	r2, r3, #2
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059fa:	2204      	movs	r2, #4
 80059fc:	409a      	lsls	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	4013      	ands	r3, r2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d012      	beq.n	8005a2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0302 	and.w	r3, r3, #2
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00b      	beq.n	8005a2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a18:	2204      	movs	r2, #4
 8005a1a:	409a      	lsls	r2, r3
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a24:	f043 0204 	orr.w	r2, r3, #4
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a30:	2210      	movs	r2, #16
 8005a32:	409a      	lsls	r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	4013      	ands	r3, r2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d043      	beq.n	8005ac4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0308 	and.w	r3, r3, #8
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d03c      	beq.n	8005ac4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a4e:	2210      	movs	r2, #16
 8005a50:	409a      	lsls	r2, r3
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d018      	beq.n	8005a96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d108      	bne.n	8005a84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d024      	beq.n	8005ac4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	4798      	blx	r3
 8005a82:	e01f      	b.n	8005ac4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d01b      	beq.n	8005ac4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	4798      	blx	r3
 8005a94:	e016      	b.n	8005ac4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d107      	bne.n	8005ab4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f022 0208 	bic.w	r2, r2, #8
 8005ab2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d003      	beq.n	8005ac4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ac8:	2220      	movs	r2, #32
 8005aca:	409a      	lsls	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	4013      	ands	r3, r2
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f000 808f 	beq.w	8005bf4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0310 	and.w	r3, r3, #16
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 8087 	beq.w	8005bf4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005aea:	2220      	movs	r2, #32
 8005aec:	409a      	lsls	r2, r3
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b05      	cmp	r3, #5
 8005afc:	d136      	bne.n	8005b6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f022 0216 	bic.w	r2, r2, #22
 8005b0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	695a      	ldr	r2, [r3, #20]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d103      	bne.n	8005b2e <HAL_DMA_IRQHandler+0x1da>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d007      	beq.n	8005b3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f022 0208 	bic.w	r2, r2, #8
 8005b3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b42:	223f      	movs	r2, #63	@ 0x3f
 8005b44:	409a      	lsls	r2, r3
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d07e      	beq.n	8005c60 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	4798      	blx	r3
        }
        return;
 8005b6a:	e079      	b.n	8005c60 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d01d      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10d      	bne.n	8005ba4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d031      	beq.n	8005bf4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	4798      	blx	r3
 8005b98:	e02c      	b.n	8005bf4 <HAL_DMA_IRQHandler+0x2a0>
 8005b9a:	bf00      	nop
 8005b9c:	20000004 	.word	0x20000004
 8005ba0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d023      	beq.n	8005bf4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	4798      	blx	r3
 8005bb4:	e01e      	b.n	8005bf4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10f      	bne.n	8005be4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 0210 	bic.w	r2, r2, #16
 8005bd2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d003      	beq.n	8005bf4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d032      	beq.n	8005c62 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d022      	beq.n	8005c4e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2205      	movs	r2, #5
 8005c0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f022 0201 	bic.w	r2, r2, #1
 8005c1e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	3301      	adds	r3, #1
 8005c24:	60bb      	str	r3, [r7, #8]
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d307      	bcc.n	8005c3c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1f2      	bne.n	8005c20 <HAL_DMA_IRQHandler+0x2cc>
 8005c3a:	e000      	b.n	8005c3e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005c3c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d005      	beq.n	8005c62 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	4798      	blx	r3
 8005c5e:	e000      	b.n	8005c62 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005c60:	bf00      	nop
    }
  }
}
 8005c62:	3718      	adds	r7, #24
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c76:	b2db      	uxtb	r3, r3
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
 8005ca8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005cb8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	2b40      	cmp	r3, #64	@ 0x40
 8005cc8:	d108      	bne.n	8005cdc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005cda:	e007      	b.n	8005cec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68ba      	ldr	r2, [r7, #8]
 8005ce2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	60da      	str	r2, [r3, #12]
}
 8005cec:	bf00      	nop
 8005cee:	3714      	adds	r7, #20
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	3b10      	subs	r3, #16
 8005d08:	4a14      	ldr	r2, [pc, #80]	@ (8005d5c <DMA_CalcBaseAndBitshift+0x64>)
 8005d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d0e:	091b      	lsrs	r3, r3, #4
 8005d10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005d12:	4a13      	ldr	r2, [pc, #76]	@ (8005d60 <DMA_CalcBaseAndBitshift+0x68>)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	4413      	add	r3, r2
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2b03      	cmp	r3, #3
 8005d24:	d909      	bls.n	8005d3a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005d2e:	f023 0303 	bic.w	r3, r3, #3
 8005d32:	1d1a      	adds	r2, r3, #4
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	659a      	str	r2, [r3, #88]	@ 0x58
 8005d38:	e007      	b.n	8005d4a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005d42:	f023 0303 	bic.w	r3, r3, #3
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3714      	adds	r7, #20
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	aaaaaaab 	.word	0xaaaaaaab
 8005d60:	08017000 	.word	0x08017000

08005d64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d11f      	bne.n	8005dbe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	2b03      	cmp	r3, #3
 8005d82:	d856      	bhi.n	8005e32 <DMA_CheckFifoParam+0xce>
 8005d84:	a201      	add	r2, pc, #4	@ (adr r2, 8005d8c <DMA_CheckFifoParam+0x28>)
 8005d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d8a:	bf00      	nop
 8005d8c:	08005d9d 	.word	0x08005d9d
 8005d90:	08005daf 	.word	0x08005daf
 8005d94:	08005d9d 	.word	0x08005d9d
 8005d98:	08005e33 	.word	0x08005e33
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d046      	beq.n	8005e36 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005dac:	e043      	b.n	8005e36 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005db6:	d140      	bne.n	8005e3a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005dbc:	e03d      	b.n	8005e3a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dc6:	d121      	bne.n	8005e0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	2b03      	cmp	r3, #3
 8005dcc:	d837      	bhi.n	8005e3e <DMA_CheckFifoParam+0xda>
 8005dce:	a201      	add	r2, pc, #4	@ (adr r2, 8005dd4 <DMA_CheckFifoParam+0x70>)
 8005dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd4:	08005de5 	.word	0x08005de5
 8005dd8:	08005deb 	.word	0x08005deb
 8005ddc:	08005de5 	.word	0x08005de5
 8005de0:	08005dfd 	.word	0x08005dfd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	73fb      	strb	r3, [r7, #15]
      break;
 8005de8:	e030      	b.n	8005e4c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d025      	beq.n	8005e42 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005dfa:	e022      	b.n	8005e42 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e00:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005e04:	d11f      	bne.n	8005e46 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005e0a:	e01c      	b.n	8005e46 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d903      	bls.n	8005e1a <DMA_CheckFifoParam+0xb6>
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	2b03      	cmp	r3, #3
 8005e16:	d003      	beq.n	8005e20 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005e18:	e018      	b.n	8005e4c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	73fb      	strb	r3, [r7, #15]
      break;
 8005e1e:	e015      	b.n	8005e4c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00e      	beq.n	8005e4a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e30:	e00b      	b.n	8005e4a <DMA_CheckFifoParam+0xe6>
      break;
 8005e32:	bf00      	nop
 8005e34:	e00a      	b.n	8005e4c <DMA_CheckFifoParam+0xe8>
      break;
 8005e36:	bf00      	nop
 8005e38:	e008      	b.n	8005e4c <DMA_CheckFifoParam+0xe8>
      break;
 8005e3a:	bf00      	nop
 8005e3c:	e006      	b.n	8005e4c <DMA_CheckFifoParam+0xe8>
      break;
 8005e3e:	bf00      	nop
 8005e40:	e004      	b.n	8005e4c <DMA_CheckFifoParam+0xe8>
      break;
 8005e42:	bf00      	nop
 8005e44:	e002      	b.n	8005e4c <DMA_CheckFifoParam+0xe8>
      break;   
 8005e46:	bf00      	nop
 8005e48:	e000      	b.n	8005e4c <DMA_CheckFifoParam+0xe8>
      break;
 8005e4a:	bf00      	nop
    }
  } 
  
  return status; 
 8005e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3714      	adds	r7, #20
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop

08005e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b089      	sub	sp, #36	@ 0x24
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005e66:	2300      	movs	r3, #0
 8005e68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e72:	2300      	movs	r3, #0
 8005e74:	61fb      	str	r3, [r7, #28]
 8005e76:	e165      	b.n	8006144 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005e78:	2201      	movs	r2, #1
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	4013      	ands	r3, r2
 8005e8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	f040 8154 	bne.w	800613e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f003 0303 	and.w	r3, r3, #3
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d005      	beq.n	8005eae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d130      	bne.n	8005f10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	005b      	lsls	r3, r3, #1
 8005eb8:	2203      	movs	r2, #3
 8005eba:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebe:	43db      	mvns	r3, r3
 8005ec0:	69ba      	ldr	r2, [r7, #24]
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	68da      	ldr	r2, [r3, #12]
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	005b      	lsls	r3, r3, #1
 8005ece:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed2:	69ba      	ldr	r2, [r7, #24]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8005eec:	43db      	mvns	r3, r3
 8005eee:	69ba      	ldr	r2, [r7, #24]
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	091b      	lsrs	r3, r3, #4
 8005efa:	f003 0201 	and.w	r2, r3, #1
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	fa02 f303 	lsl.w	r3, r2, r3
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	69ba      	ldr	r2, [r7, #24]
 8005f0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f003 0303 	and.w	r3, r3, #3
 8005f18:	2b03      	cmp	r3, #3
 8005f1a:	d017      	beq.n	8005f4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	005b      	lsls	r3, r3, #1
 8005f26:	2203      	movs	r2, #3
 8005f28:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2c:	43db      	mvns	r3, r3
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	4013      	ands	r3, r2
 8005f32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	689a      	ldr	r2, [r3, #8]
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	005b      	lsls	r3, r3, #1
 8005f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f003 0303 	and.w	r3, r3, #3
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d123      	bne.n	8005fa0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	08da      	lsrs	r2, r3, #3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	3208      	adds	r2, #8
 8005f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	f003 0307 	and.w	r3, r3, #7
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	220f      	movs	r2, #15
 8005f70:	fa02 f303 	lsl.w	r3, r2, r3
 8005f74:	43db      	mvns	r3, r3
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	4013      	ands	r3, r2
 8005f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	691a      	ldr	r2, [r3, #16]
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	f003 0307 	and.w	r3, r3, #7
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	08da      	lsrs	r2, r3, #3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	3208      	adds	r2, #8
 8005f9a:	69b9      	ldr	r1, [r7, #24]
 8005f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	005b      	lsls	r3, r3, #1
 8005faa:	2203      	movs	r2, #3
 8005fac:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb0:	43db      	mvns	r3, r3
 8005fb2:	69ba      	ldr	r2, [r7, #24]
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f003 0203 	and.w	r2, r3, #3
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	005b      	lsls	r3, r3, #1
 8005fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f000 80ae 	beq.w	800613e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	60fb      	str	r3, [r7, #12]
 8005fe6:	4b5d      	ldr	r3, [pc, #372]	@ (800615c <HAL_GPIO_Init+0x300>)
 8005fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fea:	4a5c      	ldr	r2, [pc, #368]	@ (800615c <HAL_GPIO_Init+0x300>)
 8005fec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005ff0:	6453      	str	r3, [r2, #68]	@ 0x44
 8005ff2:	4b5a      	ldr	r3, [pc, #360]	@ (800615c <HAL_GPIO_Init+0x300>)
 8005ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ff6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ffa:	60fb      	str	r3, [r7, #12]
 8005ffc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ffe:	4a58      	ldr	r2, [pc, #352]	@ (8006160 <HAL_GPIO_Init+0x304>)
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	089b      	lsrs	r3, r3, #2
 8006004:	3302      	adds	r3, #2
 8006006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800600a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	f003 0303 	and.w	r3, r3, #3
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	220f      	movs	r2, #15
 8006016:	fa02 f303 	lsl.w	r3, r2, r3
 800601a:	43db      	mvns	r3, r3
 800601c:	69ba      	ldr	r2, [r7, #24]
 800601e:	4013      	ands	r3, r2
 8006020:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a4f      	ldr	r2, [pc, #316]	@ (8006164 <HAL_GPIO_Init+0x308>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d025      	beq.n	8006076 <HAL_GPIO_Init+0x21a>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a4e      	ldr	r2, [pc, #312]	@ (8006168 <HAL_GPIO_Init+0x30c>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d01f      	beq.n	8006072 <HAL_GPIO_Init+0x216>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a4d      	ldr	r2, [pc, #308]	@ (800616c <HAL_GPIO_Init+0x310>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d019      	beq.n	800606e <HAL_GPIO_Init+0x212>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a4c      	ldr	r2, [pc, #304]	@ (8006170 <HAL_GPIO_Init+0x314>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d013      	beq.n	800606a <HAL_GPIO_Init+0x20e>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a4b      	ldr	r2, [pc, #300]	@ (8006174 <HAL_GPIO_Init+0x318>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d00d      	beq.n	8006066 <HAL_GPIO_Init+0x20a>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a4a      	ldr	r2, [pc, #296]	@ (8006178 <HAL_GPIO_Init+0x31c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d007      	beq.n	8006062 <HAL_GPIO_Init+0x206>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a49      	ldr	r2, [pc, #292]	@ (800617c <HAL_GPIO_Init+0x320>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d101      	bne.n	800605e <HAL_GPIO_Init+0x202>
 800605a:	2306      	movs	r3, #6
 800605c:	e00c      	b.n	8006078 <HAL_GPIO_Init+0x21c>
 800605e:	2307      	movs	r3, #7
 8006060:	e00a      	b.n	8006078 <HAL_GPIO_Init+0x21c>
 8006062:	2305      	movs	r3, #5
 8006064:	e008      	b.n	8006078 <HAL_GPIO_Init+0x21c>
 8006066:	2304      	movs	r3, #4
 8006068:	e006      	b.n	8006078 <HAL_GPIO_Init+0x21c>
 800606a:	2303      	movs	r3, #3
 800606c:	e004      	b.n	8006078 <HAL_GPIO_Init+0x21c>
 800606e:	2302      	movs	r3, #2
 8006070:	e002      	b.n	8006078 <HAL_GPIO_Init+0x21c>
 8006072:	2301      	movs	r3, #1
 8006074:	e000      	b.n	8006078 <HAL_GPIO_Init+0x21c>
 8006076:	2300      	movs	r3, #0
 8006078:	69fa      	ldr	r2, [r7, #28]
 800607a:	f002 0203 	and.w	r2, r2, #3
 800607e:	0092      	lsls	r2, r2, #2
 8006080:	4093      	lsls	r3, r2
 8006082:	69ba      	ldr	r2, [r7, #24]
 8006084:	4313      	orrs	r3, r2
 8006086:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006088:	4935      	ldr	r1, [pc, #212]	@ (8006160 <HAL_GPIO_Init+0x304>)
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	089b      	lsrs	r3, r3, #2
 800608e:	3302      	adds	r3, #2
 8006090:	69ba      	ldr	r2, [r7, #24]
 8006092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006096:	4b3a      	ldr	r3, [pc, #232]	@ (8006180 <HAL_GPIO_Init+0x324>)
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	43db      	mvns	r3, r3
 80060a0:	69ba      	ldr	r2, [r7, #24]
 80060a2:	4013      	ands	r3, r2
 80060a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80060b2:	69ba      	ldr	r2, [r7, #24]
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80060ba:	4a31      	ldr	r2, [pc, #196]	@ (8006180 <HAL_GPIO_Init+0x324>)
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80060c0:	4b2f      	ldr	r3, [pc, #188]	@ (8006180 <HAL_GPIO_Init+0x324>)
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	43db      	mvns	r3, r3
 80060ca:	69ba      	ldr	r2, [r7, #24]
 80060cc:	4013      	ands	r3, r2
 80060ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d003      	beq.n	80060e4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80060dc:	69ba      	ldr	r2, [r7, #24]
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80060e4:	4a26      	ldr	r2, [pc, #152]	@ (8006180 <HAL_GPIO_Init+0x324>)
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80060ea:	4b25      	ldr	r3, [pc, #148]	@ (8006180 <HAL_GPIO_Init+0x324>)
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	43db      	mvns	r3, r3
 80060f4:	69ba      	ldr	r2, [r7, #24]
 80060f6:	4013      	ands	r3, r2
 80060f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d003      	beq.n	800610e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	4313      	orrs	r3, r2
 800610c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800610e:	4a1c      	ldr	r2, [pc, #112]	@ (8006180 <HAL_GPIO_Init+0x324>)
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006114:	4b1a      	ldr	r3, [pc, #104]	@ (8006180 <HAL_GPIO_Init+0x324>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	43db      	mvns	r3, r3
 800611e:	69ba      	ldr	r2, [r7, #24]
 8006120:	4013      	ands	r3, r2
 8006122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d003      	beq.n	8006138 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006130:	69ba      	ldr	r2, [r7, #24]
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	4313      	orrs	r3, r2
 8006136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006138:	4a11      	ldr	r2, [pc, #68]	@ (8006180 <HAL_GPIO_Init+0x324>)
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	3301      	adds	r3, #1
 8006142:	61fb      	str	r3, [r7, #28]
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	2b0f      	cmp	r3, #15
 8006148:	f67f ae96 	bls.w	8005e78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800614c:	bf00      	nop
 800614e:	bf00      	nop
 8006150:	3724      	adds	r7, #36	@ 0x24
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	40023800 	.word	0x40023800
 8006160:	40013800 	.word	0x40013800
 8006164:	40020000 	.word	0x40020000
 8006168:	40020400 	.word	0x40020400
 800616c:	40020800 	.word	0x40020800
 8006170:	40020c00 	.word	0x40020c00
 8006174:	40021000 	.word	0x40021000
 8006178:	40021400 	.word	0x40021400
 800617c:	40021800 	.word	0x40021800
 8006180:	40013c00 	.word	0x40013c00

08006184 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	460b      	mov	r3, r1
 800618e:	807b      	strh	r3, [r7, #2]
 8006190:	4613      	mov	r3, r2
 8006192:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006194:	787b      	ldrb	r3, [r7, #1]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d003      	beq.n	80061a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800619a:	887a      	ldrh	r2, [r7, #2]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80061a0:	e003      	b.n	80061aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80061a2:	887b      	ldrh	r3, [r7, #2]
 80061a4:	041a      	lsls	r2, r3, #16
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	619a      	str	r2, [r3, #24]
}
 80061aa:	bf00      	nop
 80061ac:	370c      	adds	r7, #12
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
	...

080061b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	4603      	mov	r3, r0
 80061c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80061c2:	4b08      	ldr	r3, [pc, #32]	@ (80061e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80061c4:	695a      	ldr	r2, [r3, #20]
 80061c6:	88fb      	ldrh	r3, [r7, #6]
 80061c8:	4013      	ands	r3, r2
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d006      	beq.n	80061dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80061ce:	4a05      	ldr	r2, [pc, #20]	@ (80061e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80061d0:	88fb      	ldrh	r3, [r7, #6]
 80061d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80061d4:	88fb      	ldrh	r3, [r7, #6]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7fc f92c 	bl	8002434 <HAL_GPIO_EXTI_Callback>
  }
}
 80061dc:	bf00      	nop
 80061de:	3708      	adds	r7, #8
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	40013c00 	.word	0x40013c00

080061e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d101      	bne.n	80061fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e12b      	b.n	8006452 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d106      	bne.n	8006214 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7fd fe58 	bl	8003ec4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2224      	movs	r2, #36	@ 0x24
 8006218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 0201 	bic.w	r2, r2, #1
 800622a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800623a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800624a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800624c:	f003 fc60 	bl	8009b10 <HAL_RCC_GetPCLK1Freq>
 8006250:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	4a81      	ldr	r2, [pc, #516]	@ (800645c <HAL_I2C_Init+0x274>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d807      	bhi.n	800626c <HAL_I2C_Init+0x84>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	4a80      	ldr	r2, [pc, #512]	@ (8006460 <HAL_I2C_Init+0x278>)
 8006260:	4293      	cmp	r3, r2
 8006262:	bf94      	ite	ls
 8006264:	2301      	movls	r3, #1
 8006266:	2300      	movhi	r3, #0
 8006268:	b2db      	uxtb	r3, r3
 800626a:	e006      	b.n	800627a <HAL_I2C_Init+0x92>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	4a7d      	ldr	r2, [pc, #500]	@ (8006464 <HAL_I2C_Init+0x27c>)
 8006270:	4293      	cmp	r3, r2
 8006272:	bf94      	ite	ls
 8006274:	2301      	movls	r3, #1
 8006276:	2300      	movhi	r3, #0
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d001      	beq.n	8006282 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e0e7      	b.n	8006452 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	4a78      	ldr	r2, [pc, #480]	@ (8006468 <HAL_I2C_Init+0x280>)
 8006286:	fba2 2303 	umull	r2, r3, r2, r3
 800628a:	0c9b      	lsrs	r3, r3, #18
 800628c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	430a      	orrs	r2, r1
 80062a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	6a1b      	ldr	r3, [r3, #32]
 80062a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	4a6a      	ldr	r2, [pc, #424]	@ (800645c <HAL_I2C_Init+0x274>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d802      	bhi.n	80062bc <HAL_I2C_Init+0xd4>
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	3301      	adds	r3, #1
 80062ba:	e009      	b.n	80062d0 <HAL_I2C_Init+0xe8>
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80062c2:	fb02 f303 	mul.w	r3, r2, r3
 80062c6:	4a69      	ldr	r2, [pc, #420]	@ (800646c <HAL_I2C_Init+0x284>)
 80062c8:	fba2 2303 	umull	r2, r3, r2, r3
 80062cc:	099b      	lsrs	r3, r3, #6
 80062ce:	3301      	adds	r3, #1
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	6812      	ldr	r2, [r2, #0]
 80062d4:	430b      	orrs	r3, r1
 80062d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	69db      	ldr	r3, [r3, #28]
 80062de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80062e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	495c      	ldr	r1, [pc, #368]	@ (800645c <HAL_I2C_Init+0x274>)
 80062ec:	428b      	cmp	r3, r1
 80062ee:	d819      	bhi.n	8006324 <HAL_I2C_Init+0x13c>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	1e59      	subs	r1, r3, #1
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	005b      	lsls	r3, r3, #1
 80062fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80062fe:	1c59      	adds	r1, r3, #1
 8006300:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006304:	400b      	ands	r3, r1
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00a      	beq.n	8006320 <HAL_I2C_Init+0x138>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	1e59      	subs	r1, r3, #1
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	005b      	lsls	r3, r3, #1
 8006314:	fbb1 f3f3 	udiv	r3, r1, r3
 8006318:	3301      	adds	r3, #1
 800631a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800631e:	e051      	b.n	80063c4 <HAL_I2C_Init+0x1dc>
 8006320:	2304      	movs	r3, #4
 8006322:	e04f      	b.n	80063c4 <HAL_I2C_Init+0x1dc>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d111      	bne.n	8006350 <HAL_I2C_Init+0x168>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	1e58      	subs	r0, r3, #1
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6859      	ldr	r1, [r3, #4]
 8006334:	460b      	mov	r3, r1
 8006336:	005b      	lsls	r3, r3, #1
 8006338:	440b      	add	r3, r1
 800633a:	fbb0 f3f3 	udiv	r3, r0, r3
 800633e:	3301      	adds	r3, #1
 8006340:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006344:	2b00      	cmp	r3, #0
 8006346:	bf0c      	ite	eq
 8006348:	2301      	moveq	r3, #1
 800634a:	2300      	movne	r3, #0
 800634c:	b2db      	uxtb	r3, r3
 800634e:	e012      	b.n	8006376 <HAL_I2C_Init+0x18e>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	1e58      	subs	r0, r3, #1
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6859      	ldr	r1, [r3, #4]
 8006358:	460b      	mov	r3, r1
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	440b      	add	r3, r1
 800635e:	0099      	lsls	r1, r3, #2
 8006360:	440b      	add	r3, r1
 8006362:	fbb0 f3f3 	udiv	r3, r0, r3
 8006366:	3301      	adds	r3, #1
 8006368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800636c:	2b00      	cmp	r3, #0
 800636e:	bf0c      	ite	eq
 8006370:	2301      	moveq	r3, #1
 8006372:	2300      	movne	r3, #0
 8006374:	b2db      	uxtb	r3, r3
 8006376:	2b00      	cmp	r3, #0
 8006378:	d001      	beq.n	800637e <HAL_I2C_Init+0x196>
 800637a:	2301      	movs	r3, #1
 800637c:	e022      	b.n	80063c4 <HAL_I2C_Init+0x1dc>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10e      	bne.n	80063a4 <HAL_I2C_Init+0x1bc>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	1e58      	subs	r0, r3, #1
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6859      	ldr	r1, [r3, #4]
 800638e:	460b      	mov	r3, r1
 8006390:	005b      	lsls	r3, r3, #1
 8006392:	440b      	add	r3, r1
 8006394:	fbb0 f3f3 	udiv	r3, r0, r3
 8006398:	3301      	adds	r3, #1
 800639a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800639e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063a2:	e00f      	b.n	80063c4 <HAL_I2C_Init+0x1dc>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	1e58      	subs	r0, r3, #1
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6859      	ldr	r1, [r3, #4]
 80063ac:	460b      	mov	r3, r1
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	440b      	add	r3, r1
 80063b2:	0099      	lsls	r1, r3, #2
 80063b4:	440b      	add	r3, r1
 80063b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80063ba:	3301      	adds	r3, #1
 80063bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80063c4:	6879      	ldr	r1, [r7, #4]
 80063c6:	6809      	ldr	r1, [r1, #0]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	69da      	ldr	r2, [r3, #28]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	431a      	orrs	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	430a      	orrs	r2, r1
 80063e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80063f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	6911      	ldr	r1, [r2, #16]
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	68d2      	ldr	r2, [r2, #12]
 80063fe:	4311      	orrs	r1, r2
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	6812      	ldr	r2, [r2, #0]
 8006404:	430b      	orrs	r3, r1
 8006406:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	695a      	ldr	r2, [r3, #20]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	431a      	orrs	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	430a      	orrs	r2, r1
 8006422:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f042 0201 	orr.w	r2, r2, #1
 8006432:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2220      	movs	r2, #32
 800643e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	000186a0 	.word	0x000186a0
 8006460:	001e847f 	.word	0x001e847f
 8006464:	003d08ff 	.word	0x003d08ff
 8006468:	431bde83 	.word	0x431bde83
 800646c:	10624dd3 	.word	0x10624dd3

08006470 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b088      	sub	sp, #32
 8006474:	af02      	add	r7, sp, #8
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	607a      	str	r2, [r7, #4]
 800647a:	461a      	mov	r2, r3
 800647c:	460b      	mov	r3, r1
 800647e:	817b      	strh	r3, [r7, #10]
 8006480:	4613      	mov	r3, r2
 8006482:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006484:	f7fe fa80 	bl	8004988 <HAL_GetTick>
 8006488:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b20      	cmp	r3, #32
 8006494:	f040 80e0 	bne.w	8006658 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	2319      	movs	r3, #25
 800649e:	2201      	movs	r2, #1
 80064a0:	4970      	ldr	r1, [pc, #448]	@ (8006664 <HAL_I2C_Master_Transmit+0x1f4>)
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f003 f818 	bl	80094d8 <I2C_WaitOnFlagUntilTimeout>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80064ae:	2302      	movs	r3, #2
 80064b0:	e0d3      	b.n	800665a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d101      	bne.n	80064c0 <HAL_I2C_Master_Transmit+0x50>
 80064bc:	2302      	movs	r3, #2
 80064be:	e0cc      	b.n	800665a <HAL_I2C_Master_Transmit+0x1ea>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d007      	beq.n	80064e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f042 0201 	orr.w	r2, r2, #1
 80064e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2221      	movs	r2, #33	@ 0x21
 80064fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2210      	movs	r2, #16
 8006502:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	893a      	ldrh	r2, [r7, #8]
 8006516:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800651c:	b29a      	uxth	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	4a50      	ldr	r2, [pc, #320]	@ (8006668 <HAL_I2C_Master_Transmit+0x1f8>)
 8006526:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006528:	8979      	ldrh	r1, [r7, #10]
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	6a3a      	ldr	r2, [r7, #32]
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	f002 fb4a 	bl	8008bc8 <I2C_MasterRequestWrite>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d001      	beq.n	800653e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e08d      	b.n	800665a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800653e:	2300      	movs	r3, #0
 8006540:	613b      	str	r3, [r7, #16]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	613b      	str	r3, [r7, #16]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	613b      	str	r3, [r7, #16]
 8006552:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006554:	e066      	b.n	8006624 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	6a39      	ldr	r1, [r7, #32]
 800655a:	68f8      	ldr	r0, [r7, #12]
 800655c:	f003 f892 	bl	8009684 <I2C_WaitOnTXEFlagUntilTimeout>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00d      	beq.n	8006582 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800656a:	2b04      	cmp	r3, #4
 800656c:	d107      	bne.n	800657e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800657c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e06b      	b.n	800665a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006586:	781a      	ldrb	r2, [r3, #0]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006592:	1c5a      	adds	r2, r3, #1
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800659c:	b29b      	uxth	r3, r3
 800659e:	3b01      	subs	r3, #1
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065aa:	3b01      	subs	r3, #1
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	695b      	ldr	r3, [r3, #20]
 80065b8:	f003 0304 	and.w	r3, r3, #4
 80065bc:	2b04      	cmp	r3, #4
 80065be:	d11b      	bne.n	80065f8 <HAL_I2C_Master_Transmit+0x188>
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d017      	beq.n	80065f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065cc:	781a      	ldrb	r2, [r3, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065d8:	1c5a      	adds	r2, r3, #1
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	3b01      	subs	r3, #1
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065f0:	3b01      	subs	r3, #1
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	6a39      	ldr	r1, [r7, #32]
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f003 f882 	bl	8009706 <I2C_WaitOnBTFFlagUntilTimeout>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00d      	beq.n	8006624 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800660c:	2b04      	cmp	r3, #4
 800660e:	d107      	bne.n	8006620 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800661e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e01a      	b.n	800665a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006628:	2b00      	cmp	r3, #0
 800662a:	d194      	bne.n	8006556 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800663a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2220      	movs	r2, #32
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2200      	movs	r2, #0
 8006648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006654:	2300      	movs	r3, #0
 8006656:	e000      	b.n	800665a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006658:	2302      	movs	r3, #2
  }
}
 800665a:	4618      	mov	r0, r3
 800665c:	3718      	adds	r7, #24
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	00100002 	.word	0x00100002
 8006668:	ffff0000 	.word	0xffff0000

0800666c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b08c      	sub	sp, #48	@ 0x30
 8006670:	af02      	add	r7, sp, #8
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	607a      	str	r2, [r7, #4]
 8006676:	461a      	mov	r2, r3
 8006678:	460b      	mov	r3, r1
 800667a:	817b      	strh	r3, [r7, #10]
 800667c:	4613      	mov	r3, r2
 800667e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006680:	f7fe f982 	bl	8004988 <HAL_GetTick>
 8006684:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800668c:	b2db      	uxtb	r3, r3
 800668e:	2b20      	cmp	r3, #32
 8006690:	f040 820b 	bne.w	8006aaa <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006696:	9300      	str	r3, [sp, #0]
 8006698:	2319      	movs	r3, #25
 800669a:	2201      	movs	r2, #1
 800669c:	497c      	ldr	r1, [pc, #496]	@ (8006890 <HAL_I2C_Master_Receive+0x224>)
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f002 ff1a 	bl	80094d8 <I2C_WaitOnFlagUntilTimeout>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d001      	beq.n	80066ae <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80066aa:	2302      	movs	r3, #2
 80066ac:	e1fe      	b.n	8006aac <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d101      	bne.n	80066bc <HAL_I2C_Master_Receive+0x50>
 80066b8:	2302      	movs	r3, #2
 80066ba:	e1f7      	b.n	8006aac <HAL_I2C_Master_Receive+0x440>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d007      	beq.n	80066e2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f042 0201 	orr.w	r2, r2, #1
 80066e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80066f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2222      	movs	r2, #34	@ 0x22
 80066f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2210      	movs	r2, #16
 80066fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	893a      	ldrh	r2, [r7, #8]
 8006712:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006718:	b29a      	uxth	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	4a5c      	ldr	r2, [pc, #368]	@ (8006894 <HAL_I2C_Master_Receive+0x228>)
 8006722:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006724:	8979      	ldrh	r1, [r7, #10]
 8006726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006728:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f002 face 	bl	8008ccc <I2C_MasterRequestRead>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d001      	beq.n	800673a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e1b8      	b.n	8006aac <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800673e:	2b00      	cmp	r3, #0
 8006740:	d113      	bne.n	800676a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006742:	2300      	movs	r3, #0
 8006744:	623b      	str	r3, [r7, #32]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	623b      	str	r3, [r7, #32]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	623b      	str	r3, [r7, #32]
 8006756:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006766:	601a      	str	r2, [r3, #0]
 8006768:	e18c      	b.n	8006a84 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800676e:	2b01      	cmp	r3, #1
 8006770:	d11b      	bne.n	80067aa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006780:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006782:	2300      	movs	r3, #0
 8006784:	61fb      	str	r3, [r7, #28]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	61fb      	str	r3, [r7, #28]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	61fb      	str	r3, [r7, #28]
 8006796:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067a6:	601a      	str	r2, [r3, #0]
 80067a8:	e16c      	b.n	8006a84 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d11b      	bne.n	80067ea <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067d2:	2300      	movs	r3, #0
 80067d4:	61bb      	str	r3, [r7, #24]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	695b      	ldr	r3, [r3, #20]
 80067dc:	61bb      	str	r3, [r7, #24]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	699b      	ldr	r3, [r3, #24]
 80067e4:	61bb      	str	r3, [r7, #24]
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	e14c      	b.n	8006a84 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80067f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067fa:	2300      	movs	r3, #0
 80067fc:	617b      	str	r3, [r7, #20]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	695b      	ldr	r3, [r3, #20]
 8006804:	617b      	str	r3, [r7, #20]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	617b      	str	r3, [r7, #20]
 800680e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006810:	e138      	b.n	8006a84 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006816:	2b03      	cmp	r3, #3
 8006818:	f200 80f1 	bhi.w	80069fe <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006820:	2b01      	cmp	r3, #1
 8006822:	d123      	bne.n	800686c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006824:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006826:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006828:	68f8      	ldr	r0, [r7, #12]
 800682a:	f002 ffdf 	bl	80097ec <I2C_WaitOnRXNEFlagUntilTimeout>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d001      	beq.n	8006838 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e139      	b.n	8006aac <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	691a      	ldr	r2, [r3, #16]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006842:	b2d2      	uxtb	r2, r2
 8006844:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800684a:	1c5a      	adds	r2, r3, #1
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006854:	3b01      	subs	r3, #1
 8006856:	b29a      	uxth	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006860:	b29b      	uxth	r3, r3
 8006862:	3b01      	subs	r3, #1
 8006864:	b29a      	uxth	r2, r3
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800686a:	e10b      	b.n	8006a84 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006870:	2b02      	cmp	r3, #2
 8006872:	d14e      	bne.n	8006912 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006876:	9300      	str	r3, [sp, #0]
 8006878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800687a:	2200      	movs	r2, #0
 800687c:	4906      	ldr	r1, [pc, #24]	@ (8006898 <HAL_I2C_Master_Receive+0x22c>)
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	f002 fe2a 	bl	80094d8 <I2C_WaitOnFlagUntilTimeout>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d008      	beq.n	800689c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e10e      	b.n	8006aac <HAL_I2C_Master_Receive+0x440>
 800688e:	bf00      	nop
 8006890:	00100002 	.word	0x00100002
 8006894:	ffff0000 	.word	0xffff0000
 8006898:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	691a      	ldr	r2, [r3, #16]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b6:	b2d2      	uxtb	r2, r2
 80068b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068be:	1c5a      	adds	r2, r3, #1
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068c8:	3b01      	subs	r3, #1
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	3b01      	subs	r3, #1
 80068d8:	b29a      	uxth	r2, r3
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	691a      	ldr	r2, [r3, #16]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e8:	b2d2      	uxtb	r2, r2
 80068ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f0:	1c5a      	adds	r2, r3, #1
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068fa:	3b01      	subs	r3, #1
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006906:	b29b      	uxth	r3, r3
 8006908:	3b01      	subs	r3, #1
 800690a:	b29a      	uxth	r2, r3
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006910:	e0b8      	b.n	8006a84 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006914:	9300      	str	r3, [sp, #0]
 8006916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006918:	2200      	movs	r2, #0
 800691a:	4966      	ldr	r1, [pc, #408]	@ (8006ab4 <HAL_I2C_Master_Receive+0x448>)
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f002 fddb 	bl	80094d8 <I2C_WaitOnFlagUntilTimeout>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d001      	beq.n	800692c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e0bf      	b.n	8006aac <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800693a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	691a      	ldr	r2, [r3, #16]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006946:	b2d2      	uxtb	r2, r2
 8006948:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800694e:	1c5a      	adds	r2, r3, #1
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006958:	3b01      	subs	r3, #1
 800695a:	b29a      	uxth	r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006964:	b29b      	uxth	r3, r3
 8006966:	3b01      	subs	r3, #1
 8006968:	b29a      	uxth	r2, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800696e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006974:	2200      	movs	r2, #0
 8006976:	494f      	ldr	r1, [pc, #316]	@ (8006ab4 <HAL_I2C_Master_Receive+0x448>)
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f002 fdad 	bl	80094d8 <I2C_WaitOnFlagUntilTimeout>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d001      	beq.n	8006988 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e091      	b.n	8006aac <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006996:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	691a      	ldr	r2, [r3, #16]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a2:	b2d2      	uxtb	r2, r2
 80069a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069aa:	1c5a      	adds	r2, r3, #1
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069b4:	3b01      	subs	r3, #1
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	3b01      	subs	r3, #1
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	691a      	ldr	r2, [r3, #16]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d4:	b2d2      	uxtb	r2, r2
 80069d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069dc:	1c5a      	adds	r2, r3, #1
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069e6:	3b01      	subs	r3, #1
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	3b01      	subs	r3, #1
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80069fc:	e042      	b.n	8006a84 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a00:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f002 fef2 	bl	80097ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d001      	beq.n	8006a12 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e04c      	b.n	8006aac <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	691a      	ldr	r2, [r3, #16]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a1c:	b2d2      	uxtb	r2, r2
 8006a1e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a24:	1c5a      	adds	r2, r3, #1
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	f003 0304 	and.w	r3, r3, #4
 8006a4e:	2b04      	cmp	r3, #4
 8006a50:	d118      	bne.n	8006a84 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	691a      	ldr	r2, [r3, #16]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a5c:	b2d2      	uxtb	r2, r2
 8006a5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a64:	1c5a      	adds	r2, r3, #1
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f47f aec2 	bne.w	8006812 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2220      	movs	r2, #32
 8006a92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	e000      	b.n	8006aac <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006aaa:	2302      	movs	r3, #2
  }
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3728      	adds	r7, #40	@ 0x28
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	00010004 	.word	0x00010004

08006ab8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b088      	sub	sp, #32
 8006abc:	af02      	add	r7, sp, #8
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	4608      	mov	r0, r1
 8006ac2:	4611      	mov	r1, r2
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	817b      	strh	r3, [r7, #10]
 8006aca:	460b      	mov	r3, r1
 8006acc:	813b      	strh	r3, [r7, #8]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006ad2:	f7fd ff59 	bl	8004988 <HAL_GetTick>
 8006ad6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	2b20      	cmp	r3, #32
 8006ae2:	f040 80d9 	bne.w	8006c98 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	9300      	str	r3, [sp, #0]
 8006aea:	2319      	movs	r3, #25
 8006aec:	2201      	movs	r2, #1
 8006aee:	496d      	ldr	r1, [pc, #436]	@ (8006ca4 <HAL_I2C_Mem_Write+0x1ec>)
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f002 fcf1 	bl	80094d8 <I2C_WaitOnFlagUntilTimeout>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d001      	beq.n	8006b00 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006afc:	2302      	movs	r3, #2
 8006afe:	e0cc      	b.n	8006c9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d101      	bne.n	8006b0e <HAL_I2C_Mem_Write+0x56>
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	e0c5      	b.n	8006c9a <HAL_I2C_Mem_Write+0x1e2>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0301 	and.w	r3, r3, #1
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d007      	beq.n	8006b34 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f042 0201 	orr.w	r2, r2, #1
 8006b32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2221      	movs	r2, #33	@ 0x21
 8006b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2240      	movs	r2, #64	@ 0x40
 8006b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2200      	movs	r2, #0
 8006b58:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6a3a      	ldr	r2, [r7, #32]
 8006b5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006b64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	4a4d      	ldr	r2, [pc, #308]	@ (8006ca8 <HAL_I2C_Mem_Write+0x1f0>)
 8006b74:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b76:	88f8      	ldrh	r0, [r7, #6]
 8006b78:	893a      	ldrh	r2, [r7, #8]
 8006b7a:	8979      	ldrh	r1, [r7, #10]
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	9301      	str	r3, [sp, #4]
 8006b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b82:	9300      	str	r3, [sp, #0]
 8006b84:	4603      	mov	r3, r0
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f002 f96e 	bl	8008e68 <I2C_RequestMemoryWrite>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d052      	beq.n	8006c38 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e081      	b.n	8006c9a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b96:	697a      	ldr	r2, [r7, #20]
 8006b98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f002 fd72 	bl	8009684 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00d      	beq.n	8006bc2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006baa:	2b04      	cmp	r3, #4
 8006bac:	d107      	bne.n	8006bbe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bbc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e06b      	b.n	8006c9a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc6:	781a      	ldrb	r2, [r3, #0]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd2:	1c5a      	adds	r2, r3, #1
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	3b01      	subs	r3, #1
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	695b      	ldr	r3, [r3, #20]
 8006bf8:	f003 0304 	and.w	r3, r3, #4
 8006bfc:	2b04      	cmp	r3, #4
 8006bfe:	d11b      	bne.n	8006c38 <HAL_I2C_Mem_Write+0x180>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d017      	beq.n	8006c38 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c0c:	781a      	ldrb	r2, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c18:	1c5a      	adds	r2, r3, #1
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c22:	3b01      	subs	r3, #1
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	3b01      	subs	r3, #1
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1aa      	bne.n	8006b96 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c40:	697a      	ldr	r2, [r7, #20]
 8006c42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c44:	68f8      	ldr	r0, [r7, #12]
 8006c46:	f002 fd5e 	bl	8009706 <I2C_WaitOnBTFFlagUntilTimeout>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00d      	beq.n	8006c6c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c54:	2b04      	cmp	r3, #4
 8006c56:	d107      	bne.n	8006c68 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c66:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e016      	b.n	8006c9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2220      	movs	r2, #32
 8006c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006c94:	2300      	movs	r3, #0
 8006c96:	e000      	b.n	8006c9a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006c98:	2302      	movs	r3, #2
  }
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3718      	adds	r7, #24
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	00100002 	.word	0x00100002
 8006ca8:	ffff0000 	.word	0xffff0000

08006cac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b08c      	sub	sp, #48	@ 0x30
 8006cb0:	af02      	add	r7, sp, #8
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	4608      	mov	r0, r1
 8006cb6:	4611      	mov	r1, r2
 8006cb8:	461a      	mov	r2, r3
 8006cba:	4603      	mov	r3, r0
 8006cbc:	817b      	strh	r3, [r7, #10]
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	813b      	strh	r3, [r7, #8]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006cc6:	f7fd fe5f 	bl	8004988 <HAL_GetTick>
 8006cca:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	2b20      	cmp	r3, #32
 8006cd6:	f040 8208 	bne.w	80070ea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	2319      	movs	r3, #25
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	497b      	ldr	r1, [pc, #492]	@ (8006ed0 <HAL_I2C_Mem_Read+0x224>)
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f002 fbf7 	bl	80094d8 <I2C_WaitOnFlagUntilTimeout>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d001      	beq.n	8006cf4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006cf0:	2302      	movs	r3, #2
 8006cf2:	e1fb      	b.n	80070ec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d101      	bne.n	8006d02 <HAL_I2C_Mem_Read+0x56>
 8006cfe:	2302      	movs	r3, #2
 8006d00:	e1f4      	b.n	80070ec <HAL_I2C_Mem_Read+0x440>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2201      	movs	r2, #1
 8006d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0301 	and.w	r3, r3, #1
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d007      	beq.n	8006d28 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f042 0201 	orr.w	r2, r2, #1
 8006d26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2222      	movs	r2, #34	@ 0x22
 8006d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2240      	movs	r2, #64	@ 0x40
 8006d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d52:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006d58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	4a5b      	ldr	r2, [pc, #364]	@ (8006ed4 <HAL_I2C_Mem_Read+0x228>)
 8006d68:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d6a:	88f8      	ldrh	r0, [r7, #6]
 8006d6c:	893a      	ldrh	r2, [r7, #8]
 8006d6e:	8979      	ldrh	r1, [r7, #10]
 8006d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d72:	9301      	str	r3, [sp, #4]
 8006d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d76:	9300      	str	r3, [sp, #0]
 8006d78:	4603      	mov	r3, r0
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f002 f90a 	bl	8008f94 <I2C_RequestMemoryRead>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d001      	beq.n	8006d8a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e1b0      	b.n	80070ec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d113      	bne.n	8006dba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d92:	2300      	movs	r3, #0
 8006d94:	623b      	str	r3, [r7, #32]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	623b      	str	r3, [r7, #32]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	623b      	str	r3, [r7, #32]
 8006da6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006db6:	601a      	str	r2, [r3, #0]
 8006db8:	e184      	b.n	80070c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d11b      	bne.n	8006dfa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006dd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	61fb      	str	r3, [r7, #28]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	695b      	ldr	r3, [r3, #20]
 8006ddc:	61fb      	str	r3, [r7, #28]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	699b      	ldr	r3, [r3, #24]
 8006de4:	61fb      	str	r3, [r7, #28]
 8006de6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006df6:	601a      	str	r2, [r3, #0]
 8006df8:	e164      	b.n	80070c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d11b      	bne.n	8006e3a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e10:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e22:	2300      	movs	r3, #0
 8006e24:	61bb      	str	r3, [r7, #24]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	695b      	ldr	r3, [r3, #20]
 8006e2c:	61bb      	str	r3, [r7, #24]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	61bb      	str	r3, [r7, #24]
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	e144      	b.n	80070c4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	617b      	str	r3, [r7, #20]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	617b      	str	r3, [r7, #20]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	699b      	ldr	r3, [r3, #24]
 8006e4c:	617b      	str	r3, [r7, #20]
 8006e4e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006e50:	e138      	b.n	80070c4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e56:	2b03      	cmp	r3, #3
 8006e58:	f200 80f1 	bhi.w	800703e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d123      	bne.n	8006eac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e66:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f002 fcbf 	bl	80097ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d001      	beq.n	8006e78 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e139      	b.n	80070ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	691a      	ldr	r2, [r3, #16]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e82:	b2d2      	uxtb	r2, r2
 8006e84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e8a:	1c5a      	adds	r2, r3, #1
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e94:	3b01      	subs	r3, #1
 8006e96:	b29a      	uxth	r2, r3
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006eaa:	e10b      	b.n	80070c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d14e      	bne.n	8006f52 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb6:	9300      	str	r3, [sp, #0]
 8006eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eba:	2200      	movs	r2, #0
 8006ebc:	4906      	ldr	r1, [pc, #24]	@ (8006ed8 <HAL_I2C_Mem_Read+0x22c>)
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f002 fb0a 	bl	80094d8 <I2C_WaitOnFlagUntilTimeout>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d008      	beq.n	8006edc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e10e      	b.n	80070ec <HAL_I2C_Mem_Read+0x440>
 8006ece:	bf00      	nop
 8006ed0:	00100002 	.word	0x00100002
 8006ed4:	ffff0000 	.word	0xffff0000
 8006ed8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006eea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	691a      	ldr	r2, [r3, #16]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef6:	b2d2      	uxtb	r2, r2
 8006ef8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006efe:	1c5a      	adds	r2, r3, #1
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	b29a      	uxth	r2, r3
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	3b01      	subs	r3, #1
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	691a      	ldr	r2, [r3, #16]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f28:	b2d2      	uxtb	r2, r2
 8006f2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f30:	1c5a      	adds	r2, r3, #1
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006f50:	e0b8      	b.n	80070c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f54:	9300      	str	r3, [sp, #0]
 8006f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f58:	2200      	movs	r2, #0
 8006f5a:	4966      	ldr	r1, [pc, #408]	@ (80070f4 <HAL_I2C_Mem_Read+0x448>)
 8006f5c:	68f8      	ldr	r0, [r7, #12]
 8006f5e:	f002 fabb 	bl	80094d8 <I2C_WaitOnFlagUntilTimeout>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d001      	beq.n	8006f6c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e0bf      	b.n	80070ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	691a      	ldr	r2, [r3, #16]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f86:	b2d2      	uxtb	r2, r2
 8006f88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f8e:	1c5a      	adds	r2, r3, #1
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb0:	9300      	str	r3, [sp, #0]
 8006fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	494f      	ldr	r1, [pc, #316]	@ (80070f4 <HAL_I2C_Mem_Read+0x448>)
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f002 fa8d 	bl	80094d8 <I2C_WaitOnFlagUntilTimeout>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d001      	beq.n	8006fc8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e091      	b.n	80070ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	691a      	ldr	r2, [r3, #16]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe2:	b2d2      	uxtb	r2, r2
 8006fe4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fea:	1c5a      	adds	r2, r3, #1
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	b29a      	uxth	r2, r3
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007000:	b29b      	uxth	r3, r3
 8007002:	3b01      	subs	r3, #1
 8007004:	b29a      	uxth	r2, r3
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	691a      	ldr	r2, [r3, #16]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007014:	b2d2      	uxtb	r2, r2
 8007016:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800701c:	1c5a      	adds	r2, r3, #1
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007026:	3b01      	subs	r3, #1
 8007028:	b29a      	uxth	r2, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007032:	b29b      	uxth	r3, r3
 8007034:	3b01      	subs	r3, #1
 8007036:	b29a      	uxth	r2, r3
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800703c:	e042      	b.n	80070c4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800703e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007040:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f002 fbd2 	bl	80097ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d001      	beq.n	8007052 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e04c      	b.n	80070ec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	691a      	ldr	r2, [r3, #16]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800705c:	b2d2      	uxtb	r2, r2
 800705e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007064:	1c5a      	adds	r2, r3, #1
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800706e:	3b01      	subs	r3, #1
 8007070:	b29a      	uxth	r2, r3
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800707a:	b29b      	uxth	r3, r3
 800707c:	3b01      	subs	r3, #1
 800707e:	b29a      	uxth	r2, r3
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	695b      	ldr	r3, [r3, #20]
 800708a:	f003 0304 	and.w	r3, r3, #4
 800708e:	2b04      	cmp	r3, #4
 8007090:	d118      	bne.n	80070c4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	691a      	ldr	r2, [r3, #16]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709c:	b2d2      	uxtb	r2, r2
 800709e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a4:	1c5a      	adds	r2, r3, #1
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070ae:	3b01      	subs	r3, #1
 80070b0:	b29a      	uxth	r2, r3
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	3b01      	subs	r3, #1
 80070be:	b29a      	uxth	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f47f aec2 	bne.w	8006e52 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2220      	movs	r2, #32
 80070d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80070e6:	2300      	movs	r3, #0
 80070e8:	e000      	b.n	80070ec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80070ea:	2302      	movs	r3, #2
  }
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3728      	adds	r7, #40	@ 0x28
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	00010004 	.word	0x00010004

080070f8 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b08c      	sub	sp, #48	@ 0x30
 80070fc:	af02      	add	r7, sp, #8
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	4608      	mov	r0, r1
 8007102:	4611      	mov	r1, r2
 8007104:	461a      	mov	r2, r3
 8007106:	4603      	mov	r3, r0
 8007108:	817b      	strh	r3, [r7, #10]
 800710a:	460b      	mov	r3, r1
 800710c:	813b      	strh	r3, [r7, #8]
 800710e:	4613      	mov	r3, r2
 8007110:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007112:	f7fd fc39 	bl	8004988 <HAL_GetTick>
 8007116:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8007118:	2300      	movs	r3, #0
 800711a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007122:	b2db      	uxtb	r3, r3
 8007124:	2b20      	cmp	r3, #32
 8007126:	f040 8176 	bne.w	8007416 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800712a:	4b95      	ldr	r3, [pc, #596]	@ (8007380 <HAL_I2C_Mem_Read_DMA+0x288>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	08db      	lsrs	r3, r3, #3
 8007130:	4a94      	ldr	r2, [pc, #592]	@ (8007384 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8007132:	fba2 2303 	umull	r2, r3, r2, r3
 8007136:	0a1a      	lsrs	r2, r3, #8
 8007138:	4613      	mov	r3, r2
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	4413      	add	r3, r2
 800713e:	009a      	lsls	r2, r3, #2
 8007140:	4413      	add	r3, r2
 8007142:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	3b01      	subs	r3, #1
 8007148:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d116      	bne.n	800717e <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2200      	movs	r2, #0
 8007154:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2220      	movs	r2, #32
 800715a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800716a:	f043 0220 	orr.w	r2, r3, #32
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e14c      	b.n	8007418 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	f003 0302 	and.w	r3, r3, #2
 8007188:	2b02      	cmp	r3, #2
 800718a:	d0db      	beq.n	8007144 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007192:	2b01      	cmp	r3, #1
 8007194:	d101      	bne.n	800719a <HAL_I2C_Mem_Read_DMA+0xa2>
 8007196:	2302      	movs	r3, #2
 8007198:	e13e      	b.n	8007418 <HAL_I2C_Mem_Read_DMA+0x320>
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2201      	movs	r2, #1
 800719e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 0301 	and.w	r3, r3, #1
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d007      	beq.n	80071c0 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f042 0201 	orr.w	r2, r2, #1
 80071be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80071ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2222      	movs	r2, #34	@ 0x22
 80071d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2240      	movs	r2, #64	@ 0x40
 80071dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80071f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	4a62      	ldr	r2, [pc, #392]	@ (8007388 <HAL_I2C_Mem_Read_DMA+0x290>)
 8007200:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8007202:	897a      	ldrh	r2, [r7, #10]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8007208:	893a      	ldrh	r2, [r7, #8]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800720e:	88fa      	ldrh	r2, [r7, #6]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800721e:	2b00      	cmp	r3, #0
 8007220:	f000 80cc 	beq.w	80073bc <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007228:	2b00      	cmp	r3, #0
 800722a:	d02d      	beq.n	8007288 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007230:	4a56      	ldr	r2, [pc, #344]	@ (800738c <HAL_I2C_Mem_Read_DMA+0x294>)
 8007232:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007238:	4a55      	ldr	r2, [pc, #340]	@ (8007390 <HAL_I2C_Mem_Read_DMA+0x298>)
 800723a:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007240:	2200      	movs	r2, #0
 8007242:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007248:	2200      	movs	r2, #0
 800724a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007250:	2200      	movs	r2, #0
 8007252:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007258:	2200      	movs	r2, #0
 800725a:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	3310      	adds	r3, #16
 8007266:	4619      	mov	r1, r3
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800726c:	461a      	mov	r2, r3
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007272:	f7fe fa85 	bl	8005780 <HAL_DMA_Start_IT>
 8007276:	4603      	mov	r3, r0
 8007278:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800727c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007280:	2b00      	cmp	r3, #0
 8007282:	f040 8087 	bne.w	8007394 <HAL_I2C_Mem_Read_DMA+0x29c>
 8007286:	e013      	b.n	80072b0 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2220      	movs	r2, #32
 800728c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800729c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	e0b3      	b.n	8007418 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80072b0:	88f8      	ldrh	r0, [r7, #6]
 80072b2:	893a      	ldrh	r2, [r7, #8]
 80072b4:	8979      	ldrh	r1, [r7, #10]
 80072b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b8:	9301      	str	r3, [sp, #4]
 80072ba:	2323      	movs	r3, #35	@ 0x23
 80072bc:	9300      	str	r3, [sp, #0]
 80072be:	4603      	mov	r3, r0
 80072c0:	68f8      	ldr	r0, [r7, #12]
 80072c2:	f001 fe67 	bl	8008f94 <I2C_RequestMemoryRead>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d023      	beq.n	8007314 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7fe fb1d 	bl	8005910 <HAL_DMA_Abort_IT>
 80072d6:	4603      	mov	r3, r0
 80072d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072e0:	2200      	movs	r2, #0
 80072e2:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072f2:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2200      	movs	r2, #0
 80072f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2200      	movs	r2, #0
 80072fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f022 0201 	bic.w	r2, r2, #1
 800730e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e081      	b.n	8007418 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007318:	2b01      	cmp	r3, #1
 800731a:	d108      	bne.n	800732e <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800732a:	601a      	str	r2, [r3, #0]
 800732c:	e007      	b.n	800733e <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	685a      	ldr	r2, [r3, #4]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800733c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800733e:	2300      	movs	r3, #0
 8007340:	61bb      	str	r3, [r7, #24]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	695b      	ldr	r3, [r3, #20]
 8007348:	61bb      	str	r3, [r7, #24]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	61bb      	str	r3, [r7, #24]
 8007352:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	685a      	ldr	r2, [r3, #4]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800736a:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	685a      	ldr	r2, [r3, #4]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800737a:	605a      	str	r2, [r3, #4]
 800737c:	e049      	b.n	8007412 <HAL_I2C_Mem_Read_DMA+0x31a>
 800737e:	bf00      	nop
 8007380:	20000004 	.word	0x20000004
 8007384:	14f8b589 	.word	0x14f8b589
 8007388:	ffff0000 	.word	0xffff0000
 800738c:	08009165 	.word	0x08009165
 8007390:	0800930f 	.word	0x0800930f
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2220      	movs	r2, #32
 8007398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073a8:	f043 0210 	orr.w	r2, r3, #16
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	e02d      	b.n	8007418 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80073bc:	88f8      	ldrh	r0, [r7, #6]
 80073be:	893a      	ldrh	r2, [r7, #8]
 80073c0:	8979      	ldrh	r1, [r7, #10]
 80073c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c4:	9301      	str	r3, [sp, #4]
 80073c6:	2323      	movs	r3, #35	@ 0x23
 80073c8:	9300      	str	r3, [sp, #0]
 80073ca:	4603      	mov	r3, r0
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f001 fde1 	bl	8008f94 <I2C_RequestMemoryRead>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d001      	beq.n	80073dc <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	e01d      	b.n	8007418 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073dc:	2300      	movs	r3, #0
 80073de:	617b      	str	r3, [r7, #20]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	695b      	ldr	r3, [r3, #20]
 80073e6:	617b      	str	r3, [r7, #20]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	617b      	str	r3, [r7, #20]
 80073f0:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007400:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2220      	movs	r2, #32
 8007406:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8007412:	2300      	movs	r3, #0
 8007414:	e000      	b.n	8007418 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 8007416:	2302      	movs	r3, #2
  }
}
 8007418:	4618      	mov	r0, r3
 800741a:	3728      	adds	r7, #40	@ 0x28
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b08a      	sub	sp, #40	@ 0x28
 8007424:	af02      	add	r7, sp, #8
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	607a      	str	r2, [r7, #4]
 800742a:	603b      	str	r3, [r7, #0]
 800742c:	460b      	mov	r3, r1
 800742e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8007430:	f7fd faaa 	bl	8004988 <HAL_GetTick>
 8007434:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8007436:	2300      	movs	r3, #0
 8007438:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007440:	b2db      	uxtb	r3, r3
 8007442:	2b20      	cmp	r3, #32
 8007444:	f040 8111 	bne.w	800766a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	9300      	str	r3, [sp, #0]
 800744c:	2319      	movs	r3, #25
 800744e:	2201      	movs	r2, #1
 8007450:	4988      	ldr	r1, [pc, #544]	@ (8007674 <HAL_I2C_IsDeviceReady+0x254>)
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f002 f840 	bl	80094d8 <I2C_WaitOnFlagUntilTimeout>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d001      	beq.n	8007462 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800745e:	2302      	movs	r3, #2
 8007460:	e104      	b.n	800766c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007468:	2b01      	cmp	r3, #1
 800746a:	d101      	bne.n	8007470 <HAL_I2C_IsDeviceReady+0x50>
 800746c:	2302      	movs	r3, #2
 800746e:	e0fd      	b.n	800766c <HAL_I2C_IsDeviceReady+0x24c>
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 0301 	and.w	r3, r3, #1
 8007482:	2b01      	cmp	r3, #1
 8007484:	d007      	beq.n	8007496 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f042 0201 	orr.w	r2, r2, #1
 8007494:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80074a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2224      	movs	r2, #36	@ 0x24
 80074aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2200      	movs	r2, #0
 80074b2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	4a70      	ldr	r2, [pc, #448]	@ (8007678 <HAL_I2C_IsDeviceReady+0x258>)
 80074b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80074c8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f001 fffe 	bl	80094d8 <I2C_WaitOnFlagUntilTimeout>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00d      	beq.n	80074fe <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074f0:	d103      	bne.n	80074fa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80074f8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80074fa:	2303      	movs	r3, #3
 80074fc:	e0b6      	b.n	800766c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80074fe:	897b      	ldrh	r3, [r7, #10]
 8007500:	b2db      	uxtb	r3, r3
 8007502:	461a      	mov	r2, r3
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800750c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800750e:	f7fd fa3b 	bl	8004988 <HAL_GetTick>
 8007512:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	695b      	ldr	r3, [r3, #20]
 800751a:	f003 0302 	and.w	r3, r3, #2
 800751e:	2b02      	cmp	r3, #2
 8007520:	bf0c      	ite	eq
 8007522:	2301      	moveq	r3, #1
 8007524:	2300      	movne	r3, #0
 8007526:	b2db      	uxtb	r3, r3
 8007528:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	695b      	ldr	r3, [r3, #20]
 8007530:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007534:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007538:	bf0c      	ite	eq
 800753a:	2301      	moveq	r3, #1
 800753c:	2300      	movne	r3, #0
 800753e:	b2db      	uxtb	r3, r3
 8007540:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007542:	e025      	b.n	8007590 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007544:	f7fd fa20 	bl	8004988 <HAL_GetTick>
 8007548:	4602      	mov	r2, r0
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	683a      	ldr	r2, [r7, #0]
 8007550:	429a      	cmp	r2, r3
 8007552:	d302      	bcc.n	800755a <HAL_I2C_IsDeviceReady+0x13a>
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d103      	bne.n	8007562 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	22a0      	movs	r2, #160	@ 0xa0
 800755e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	695b      	ldr	r3, [r3, #20]
 8007568:	f003 0302 	and.w	r3, r3, #2
 800756c:	2b02      	cmp	r3, #2
 800756e:	bf0c      	ite	eq
 8007570:	2301      	moveq	r3, #1
 8007572:	2300      	movne	r3, #0
 8007574:	b2db      	uxtb	r3, r3
 8007576:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	695b      	ldr	r3, [r3, #20]
 800757e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007582:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007586:	bf0c      	ite	eq
 8007588:	2301      	moveq	r3, #1
 800758a:	2300      	movne	r3, #0
 800758c:	b2db      	uxtb	r3, r3
 800758e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007596:	b2db      	uxtb	r3, r3
 8007598:	2ba0      	cmp	r3, #160	@ 0xa0
 800759a:	d005      	beq.n	80075a8 <HAL_I2C_IsDeviceReady+0x188>
 800759c:	7dfb      	ldrb	r3, [r7, #23]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d102      	bne.n	80075a8 <HAL_I2C_IsDeviceReady+0x188>
 80075a2:	7dbb      	ldrb	r3, [r7, #22]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d0cd      	beq.n	8007544 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2220      	movs	r2, #32
 80075ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	695b      	ldr	r3, [r3, #20]
 80075b6:	f003 0302 	and.w	r3, r3, #2
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	d129      	bne.n	8007612 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075cc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075ce:	2300      	movs	r3, #0
 80075d0:	613b      	str	r3, [r7, #16]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	695b      	ldr	r3, [r3, #20]
 80075d8:	613b      	str	r3, [r7, #16]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	613b      	str	r3, [r7, #16]
 80075e2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	9300      	str	r3, [sp, #0]
 80075e8:	2319      	movs	r3, #25
 80075ea:	2201      	movs	r2, #1
 80075ec:	4921      	ldr	r1, [pc, #132]	@ (8007674 <HAL_I2C_IsDeviceReady+0x254>)
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f001 ff72 	bl	80094d8 <I2C_WaitOnFlagUntilTimeout>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d001      	beq.n	80075fe <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e036      	b.n	800766c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2220      	movs	r2, #32
 8007602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800760e:	2300      	movs	r3, #0
 8007610:	e02c      	b.n	800766c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007620:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800762a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	2319      	movs	r3, #25
 8007632:	2201      	movs	r2, #1
 8007634:	490f      	ldr	r1, [pc, #60]	@ (8007674 <HAL_I2C_IsDeviceReady+0x254>)
 8007636:	68f8      	ldr	r0, [r7, #12]
 8007638:	f001 ff4e 	bl	80094d8 <I2C_WaitOnFlagUntilTimeout>
 800763c:	4603      	mov	r3, r0
 800763e:	2b00      	cmp	r3, #0
 8007640:	d001      	beq.n	8007646 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e012      	b.n	800766c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	3301      	adds	r3, #1
 800764a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800764c:	69ba      	ldr	r2, [r7, #24]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	429a      	cmp	r2, r3
 8007652:	f4ff af32 	bcc.w	80074ba <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2220      	movs	r2, #32
 800765a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2200      	movs	r2, #0
 8007662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e000      	b.n	800766c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800766a:	2302      	movs	r3, #2
  }
}
 800766c:	4618      	mov	r0, r3
 800766e:	3720      	adds	r7, #32
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	00100002 	.word	0x00100002
 8007678:	ffff0000 	.word	0xffff0000

0800767c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b088      	sub	sp, #32
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007684:	2300      	movs	r3, #0
 8007686:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007694:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800769c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076a4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80076a6:	7bfb      	ldrb	r3, [r7, #15]
 80076a8:	2b10      	cmp	r3, #16
 80076aa:	d003      	beq.n	80076b4 <HAL_I2C_EV_IRQHandler+0x38>
 80076ac:	7bfb      	ldrb	r3, [r7, #15]
 80076ae:	2b40      	cmp	r3, #64	@ 0x40
 80076b0:	f040 80b1 	bne.w	8007816 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	699b      	ldr	r3, [r3, #24]
 80076ba:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	695b      	ldr	r3, [r3, #20]
 80076c2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	f003 0301 	and.w	r3, r3, #1
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d10d      	bne.n	80076ea <HAL_I2C_EV_IRQHandler+0x6e>
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80076d4:	d003      	beq.n	80076de <HAL_I2C_EV_IRQHandler+0x62>
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80076dc:	d101      	bne.n	80076e2 <HAL_I2C_EV_IRQHandler+0x66>
 80076de:	2301      	movs	r3, #1
 80076e0:	e000      	b.n	80076e4 <HAL_I2C_EV_IRQHandler+0x68>
 80076e2:	2300      	movs	r3, #0
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	f000 8114 	beq.w	8007912 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	f003 0301 	and.w	r3, r3, #1
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00b      	beq.n	800770c <HAL_I2C_EV_IRQHandler+0x90>
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d006      	beq.n	800770c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f002 f8f9 	bl	80098f6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fcb5 	bl	8008074 <I2C_Master_SB>
 800770a:	e083      	b.n	8007814 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	f003 0308 	and.w	r3, r3, #8
 8007712:	2b00      	cmp	r3, #0
 8007714:	d008      	beq.n	8007728 <HAL_I2C_EV_IRQHandler+0xac>
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800771c:	2b00      	cmp	r3, #0
 800771e:	d003      	beq.n	8007728 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fd2d 	bl	8008180 <I2C_Master_ADD10>
 8007726:	e075      	b.n	8007814 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	f003 0302 	and.w	r3, r3, #2
 800772e:	2b00      	cmp	r3, #0
 8007730:	d008      	beq.n	8007744 <HAL_I2C_EV_IRQHandler+0xc8>
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007738:	2b00      	cmp	r3, #0
 800773a:	d003      	beq.n	8007744 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 fd49 	bl	80081d4 <I2C_Master_ADDR>
 8007742:	e067      	b.n	8007814 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	f003 0304 	and.w	r3, r3, #4
 800774a:	2b00      	cmp	r3, #0
 800774c:	d036      	beq.n	80077bc <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007758:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800775c:	f000 80db 	beq.w	8007916 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00d      	beq.n	8007786 <HAL_I2C_EV_IRQHandler+0x10a>
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007770:	2b00      	cmp	r3, #0
 8007772:	d008      	beq.n	8007786 <HAL_I2C_EV_IRQHandler+0x10a>
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	f003 0304 	and.w	r3, r3, #4
 800777a:	2b00      	cmp	r3, #0
 800777c:	d103      	bne.n	8007786 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f92d 	bl	80079de <I2C_MasterTransmit_TXE>
 8007784:	e046      	b.n	8007814 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	f003 0304 	and.w	r3, r3, #4
 800778c:	2b00      	cmp	r3, #0
 800778e:	f000 80c2 	beq.w	8007916 <HAL_I2C_EV_IRQHandler+0x29a>
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007798:	2b00      	cmp	r3, #0
 800779a:	f000 80bc 	beq.w	8007916 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800779e:	7bbb      	ldrb	r3, [r7, #14]
 80077a0:	2b21      	cmp	r3, #33	@ 0x21
 80077a2:	d103      	bne.n	80077ac <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 f9b6 	bl	8007b16 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80077aa:	e0b4      	b.n	8007916 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80077ac:	7bfb      	ldrb	r3, [r7, #15]
 80077ae:	2b40      	cmp	r3, #64	@ 0x40
 80077b0:	f040 80b1 	bne.w	8007916 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 fa24 	bl	8007c02 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80077ba:	e0ac      	b.n	8007916 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077ca:	f000 80a4 	beq.w	8007916 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80077ce:	69fb      	ldr	r3, [r7, #28]
 80077d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00d      	beq.n	80077f4 <HAL_I2C_EV_IRQHandler+0x178>
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d008      	beq.n	80077f4 <HAL_I2C_EV_IRQHandler+0x178>
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	f003 0304 	and.w	r3, r3, #4
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d103      	bne.n	80077f4 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fa9c 	bl	8007d2a <I2C_MasterReceive_RXNE>
 80077f2:	e00f      	b.n	8007814 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	f003 0304 	and.w	r3, r3, #4
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f000 808b 	beq.w	8007916 <HAL_I2C_EV_IRQHandler+0x29a>
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007806:	2b00      	cmp	r3, #0
 8007808:	f000 8085 	beq.w	8007916 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 fb47 	bl	8007ea0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007812:	e080      	b.n	8007916 <HAL_I2C_EV_IRQHandler+0x29a>
 8007814:	e07f      	b.n	8007916 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800781a:	2b00      	cmp	r3, #0
 800781c:	d004      	beq.n	8007828 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	695b      	ldr	r3, [r3, #20]
 8007824:	61fb      	str	r3, [r7, #28]
 8007826:	e007      	b.n	8007838 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	699b      	ldr	r3, [r3, #24]
 800782e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	f003 0302 	and.w	r3, r3, #2
 800783e:	2b00      	cmp	r3, #0
 8007840:	d011      	beq.n	8007866 <HAL_I2C_EV_IRQHandler+0x1ea>
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00c      	beq.n	8007866 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007850:	2b00      	cmp	r3, #0
 8007852:	d003      	beq.n	800785c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800785c:	69b9      	ldr	r1, [r7, #24]
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 ff07 	bl	8008672 <I2C_Slave_ADDR>
 8007864:	e05a      	b.n	800791c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	f003 0310 	and.w	r3, r3, #16
 800786c:	2b00      	cmp	r3, #0
 800786e:	d008      	beq.n	8007882 <HAL_I2C_EV_IRQHandler+0x206>
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007876:	2b00      	cmp	r3, #0
 8007878:	d003      	beq.n	8007882 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 ff42 	bl	8008704 <I2C_Slave_STOPF>
 8007880:	e04c      	b.n	800791c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007882:	7bbb      	ldrb	r3, [r7, #14]
 8007884:	2b21      	cmp	r3, #33	@ 0x21
 8007886:	d002      	beq.n	800788e <HAL_I2C_EV_IRQHandler+0x212>
 8007888:	7bbb      	ldrb	r3, [r7, #14]
 800788a:	2b29      	cmp	r3, #41	@ 0x29
 800788c:	d120      	bne.n	80078d0 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007894:	2b00      	cmp	r3, #0
 8007896:	d00d      	beq.n	80078b4 <HAL_I2C_EV_IRQHandler+0x238>
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d008      	beq.n	80078b4 <HAL_I2C_EV_IRQHandler+0x238>
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	f003 0304 	and.w	r3, r3, #4
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d103      	bne.n	80078b4 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 fe22 	bl	80084f6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80078b2:	e032      	b.n	800791a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	f003 0304 	and.w	r3, r3, #4
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d02d      	beq.n	800791a <HAL_I2C_EV_IRQHandler+0x29e>
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d028      	beq.n	800791a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fe51 	bl	8008570 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80078ce:	e024      	b.n	800791a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00d      	beq.n	80078f6 <HAL_I2C_EV_IRQHandler+0x27a>
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d008      	beq.n	80078f6 <HAL_I2C_EV_IRQHandler+0x27a>
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	f003 0304 	and.w	r3, r3, #4
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d103      	bne.n	80078f6 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 fe5f 	bl	80085b2 <I2C_SlaveReceive_RXNE>
 80078f4:	e012      	b.n	800791c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	f003 0304 	and.w	r3, r3, #4
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00d      	beq.n	800791c <HAL_I2C_EV_IRQHandler+0x2a0>
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007906:	2b00      	cmp	r3, #0
 8007908:	d008      	beq.n	800791c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 fe8f 	bl	800862e <I2C_SlaveReceive_BTF>
 8007910:	e004      	b.n	800791c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8007912:	bf00      	nop
 8007914:	e002      	b.n	800791c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007916:	bf00      	nop
 8007918:	e000      	b.n	800791c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800791a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800791c:	3720      	adds	r7, #32
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007922:	b480      	push	{r7}
 8007924:	b083      	sub	sp, #12
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800792a:	bf00      	nop
 800792c:	370c      	adds	r7, #12
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr

08007936 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007936:	b480      	push	{r7}
 8007938:	b083      	sub	sp, #12
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800793e:	bf00      	nop
 8007940:	370c      	adds	r7, #12
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr

0800794a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800794a:	b480      	push	{r7}
 800794c:	b083      	sub	sp, #12
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007952:	bf00      	nop
 8007954:	370c      	adds	r7, #12
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr

0800795e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800795e:	b480      	push	{r7}
 8007960:	b083      	sub	sp, #12
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007966:	bf00      	nop
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007972:	b480      	push	{r7}
 8007974:	b083      	sub	sp, #12
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
 800797a:	460b      	mov	r3, r1
 800797c:	70fb      	strb	r3, [r7, #3]
 800797e:	4613      	mov	r3, r2
 8007980:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007982:	bf00      	nop
 8007984:	370c      	adds	r7, #12
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr

0800798e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800798e:	b480      	push	{r7}
 8007990:	b083      	sub	sp, #12
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007996:	bf00      	nop
 8007998:	370c      	adds	r7, #12
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr

080079a2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80079a2:	b480      	push	{r7}
 80079a4:	b083      	sub	sp, #12
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80079aa:	bf00      	nop
 80079ac:	370c      	adds	r7, #12
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr

080079b6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80079b6:	b480      	push	{r7}
 80079b8:	b083      	sub	sp, #12
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80079be:	bf00      	nop
 80079c0:	370c      	adds	r7, #12
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr

080079ca <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80079ca:	b480      	push	{r7}
 80079cc:	b083      	sub	sp, #12
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80079d2:	bf00      	nop
 80079d4:	370c      	adds	r7, #12
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr

080079de <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b084      	sub	sp, #16
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079ec:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80079f4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079fa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d150      	bne.n	8007aa6 <I2C_MasterTransmit_TXE+0xc8>
 8007a04:	7bfb      	ldrb	r3, [r7, #15]
 8007a06:	2b21      	cmp	r3, #33	@ 0x21
 8007a08:	d14d      	bne.n	8007aa6 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	2b08      	cmp	r3, #8
 8007a0e:	d01d      	beq.n	8007a4c <I2C_MasterTransmit_TXE+0x6e>
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	2b20      	cmp	r3, #32
 8007a14:	d01a      	beq.n	8007a4c <I2C_MasterTransmit_TXE+0x6e>
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007a1c:	d016      	beq.n	8007a4c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	685a      	ldr	r2, [r3, #4]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007a2c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2211      	movs	r2, #17
 8007a32:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2220      	movs	r2, #32
 8007a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f7ff ff6c 	bl	8007922 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007a4a:	e060      	b.n	8007b0e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	685a      	ldr	r2, [r3, #4]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007a5a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a6a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2220      	movs	r2, #32
 8007a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	2b40      	cmp	r3, #64	@ 0x40
 8007a84:	d107      	bne.n	8007a96 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f7ff ff87 	bl	80079a2 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007a94:	e03b      	b.n	8007b0e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f7ff ff3f 	bl	8007922 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007aa4:	e033      	b.n	8007b0e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007aa6:	7bfb      	ldrb	r3, [r7, #15]
 8007aa8:	2b21      	cmp	r3, #33	@ 0x21
 8007aaa:	d005      	beq.n	8007ab8 <I2C_MasterTransmit_TXE+0xda>
 8007aac:	7bbb      	ldrb	r3, [r7, #14]
 8007aae:	2b40      	cmp	r3, #64	@ 0x40
 8007ab0:	d12d      	bne.n	8007b0e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007ab2:	7bfb      	ldrb	r3, [r7, #15]
 8007ab4:	2b22      	cmp	r3, #34	@ 0x22
 8007ab6:	d12a      	bne.n	8007b0e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d108      	bne.n	8007ad4 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	685a      	ldr	r2, [r3, #4]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ad0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007ad2:	e01c      	b.n	8007b0e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	2b40      	cmp	r3, #64	@ 0x40
 8007ade:	d103      	bne.n	8007ae8 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f88e 	bl	8007c02 <I2C_MemoryTransmit_TXE_BTF>
}
 8007ae6:	e012      	b.n	8007b0e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aec:	781a      	ldrb	r2, [r3, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007af8:	1c5a      	adds	r2, r3, #1
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	3b01      	subs	r3, #1
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007b0c:	e7ff      	b.n	8007b0e <I2C_MasterTransmit_TXE+0x130>
 8007b0e:	bf00      	nop
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}

08007b16 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007b16:	b580      	push	{r7, lr}
 8007b18:	b084      	sub	sp, #16
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b22:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	2b21      	cmp	r3, #33	@ 0x21
 8007b2e:	d164      	bne.n	8007bfa <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d012      	beq.n	8007b60 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b3e:	781a      	ldrb	r2, [r3, #0]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b4a:	1c5a      	adds	r2, r3, #1
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	3b01      	subs	r3, #1
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007b5e:	e04c      	b.n	8007bfa <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2b08      	cmp	r3, #8
 8007b64:	d01d      	beq.n	8007ba2 <I2C_MasterTransmit_BTF+0x8c>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2b20      	cmp	r3, #32
 8007b6a:	d01a      	beq.n	8007ba2 <I2C_MasterTransmit_BTF+0x8c>
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007b72:	d016      	beq.n	8007ba2 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	685a      	ldr	r2, [r3, #4]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007b82:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2211      	movs	r2, #17
 8007b88:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2220      	movs	r2, #32
 8007b96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f7ff fec1 	bl	8007922 <HAL_I2C_MasterTxCpltCallback>
}
 8007ba0:	e02b      	b.n	8007bfa <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	685a      	ldr	r2, [r3, #4]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007bb0:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007bc0:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2220      	movs	r2, #32
 8007bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	2b40      	cmp	r3, #64	@ 0x40
 8007bda:	d107      	bne.n	8007bec <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f7ff fedc 	bl	80079a2 <HAL_I2C_MemTxCpltCallback>
}
 8007bea:	e006      	b.n	8007bfa <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f7ff fe94 	bl	8007922 <HAL_I2C_MasterTxCpltCallback>
}
 8007bfa:	bf00      	nop
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b084      	sub	sp, #16
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c10:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d11d      	bne.n	8007c56 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d10b      	bne.n	8007c3a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c26:	b2da      	uxtb	r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c32:	1c9a      	adds	r2, r3, #2
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007c38:	e073      	b.n	8007d22 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	121b      	asrs	r3, r3, #8
 8007c42:	b2da      	uxtb	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c4e:	1c5a      	adds	r2, r3, #1
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007c54:	e065      	b.n	8007d22 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d10b      	bne.n	8007c76 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c62:	b2da      	uxtb	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c6e:	1c5a      	adds	r2, r3, #1
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007c74:	e055      	b.n	8007d22 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d151      	bne.n	8007d22 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007c7e:	7bfb      	ldrb	r3, [r7, #15]
 8007c80:	2b22      	cmp	r3, #34	@ 0x22
 8007c82:	d10d      	bne.n	8007ca0 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c92:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c98:	1c5a      	adds	r2, r3, #1
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007c9e:	e040      	b.n	8007d22 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d015      	beq.n	8007cd6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007caa:	7bfb      	ldrb	r3, [r7, #15]
 8007cac:	2b21      	cmp	r3, #33	@ 0x21
 8007cae:	d112      	bne.n	8007cd6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cb4:	781a      	ldrb	r2, [r3, #0]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cc0:	1c5a      	adds	r2, r3, #1
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007cd4:	e025      	b.n	8007d22 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d120      	bne.n	8007d22 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007ce0:	7bfb      	ldrb	r3, [r7, #15]
 8007ce2:	2b21      	cmp	r3, #33	@ 0x21
 8007ce4:	d11d      	bne.n	8007d22 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	685a      	ldr	r2, [r3, #4]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007cf4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d04:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2220      	movs	r2, #32
 8007d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f7ff fe40 	bl	80079a2 <HAL_I2C_MemTxCpltCallback>
}
 8007d22:	bf00      	nop
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b084      	sub	sp, #16
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	2b22      	cmp	r3, #34	@ 0x22
 8007d3c:	f040 80ac 	bne.w	8007e98 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2b03      	cmp	r3, #3
 8007d4c:	d921      	bls.n	8007d92 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	691a      	ldr	r2, [r3, #16]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d58:	b2d2      	uxtb	r2, r2
 8007d5a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d60:	1c5a      	adds	r2, r3, #1
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	3b01      	subs	r3, #1
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	2b03      	cmp	r3, #3
 8007d7c:	f040 808c 	bne.w	8007e98 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	685a      	ldr	r2, [r3, #4]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d8e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8007d90:	e082      	b.n	8007e98 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d96:	2b02      	cmp	r3, #2
 8007d98:	d075      	beq.n	8007e86 <I2C_MasterReceive_RXNE+0x15c>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d002      	beq.n	8007da6 <I2C_MasterReceive_RXNE+0x7c>
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d16f      	bne.n	8007e86 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f001 fcee 	bl	8009788 <I2C_WaitOnSTOPRequestThroughIT>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d142      	bne.n	8007e38 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007dc0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	685a      	ldr	r2, [r3, #4]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007dd0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	691a      	ldr	r2, [r3, #16]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ddc:	b2d2      	uxtb	r2, r2
 8007dde:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007de4:	1c5a      	adds	r2, r3, #1
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	3b01      	subs	r3, #1
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2220      	movs	r2, #32
 8007dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	2b40      	cmp	r3, #64	@ 0x40
 8007e0a:	d10a      	bne.n	8007e22 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f7fa fb30 	bl	8002480 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007e20:	e03a      	b.n	8007e98 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2212      	movs	r2, #18
 8007e2e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f7ff fd80 	bl	8007936 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007e36:	e02f      	b.n	8007e98 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	685a      	ldr	r2, [r3, #4]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007e46:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	691a      	ldr	r2, [r3, #16]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e52:	b2d2      	uxtb	r2, r2
 8007e54:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e5a:	1c5a      	adds	r2, r3, #1
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	3b01      	subs	r3, #1
 8007e68:	b29a      	uxth	r2, r3
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2220      	movs	r2, #32
 8007e72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f7ff fd99 	bl	80079b6 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007e84:	e008      	b.n	8007e98 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	685a      	ldr	r2, [r3, #4]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e94:	605a      	str	r2, [r3, #4]
}
 8007e96:	e7ff      	b.n	8007e98 <I2C_MasterReceive_RXNE+0x16e>
 8007e98:	bf00      	nop
 8007e9a:	3710      	adds	r7, #16
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eac:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	2b04      	cmp	r3, #4
 8007eb6:	d11b      	bne.n	8007ef0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	685a      	ldr	r2, [r3, #4]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ec6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	691a      	ldr	r2, [r3, #16]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed2:	b2d2      	uxtb	r2, r2
 8007ed4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eda:	1c5a      	adds	r2, r3, #1
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	b29a      	uxth	r2, r3
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007eee:	e0bd      	b.n	800806c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	2b03      	cmp	r3, #3
 8007ef8:	d129      	bne.n	8007f4e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	685a      	ldr	r2, [r3, #4]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f08:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2b04      	cmp	r3, #4
 8007f0e:	d00a      	beq.n	8007f26 <I2C_MasterReceive_BTF+0x86>
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d007      	beq.n	8007f26 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f24:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	691a      	ldr	r2, [r3, #16]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f30:	b2d2      	uxtb	r2, r2
 8007f32:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f38:	1c5a      	adds	r2, r3, #1
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	3b01      	subs	r3, #1
 8007f46:	b29a      	uxth	r2, r3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007f4c:	e08e      	b.n	800806c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d176      	bne.n	8008046 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d002      	beq.n	8007f64 <I2C_MasterReceive_BTF+0xc4>
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2b10      	cmp	r3, #16
 8007f62:	d108      	bne.n	8007f76 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f72:	601a      	str	r2, [r3, #0]
 8007f74:	e019      	b.n	8007faa <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2b04      	cmp	r3, #4
 8007f7a:	d002      	beq.n	8007f82 <I2C_MasterReceive_BTF+0xe2>
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d108      	bne.n	8007f94 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007f90:	601a      	str	r2, [r3, #0]
 8007f92:	e00a      	b.n	8007faa <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2b10      	cmp	r3, #16
 8007f98:	d007      	beq.n	8007faa <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007fa8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	691a      	ldr	r2, [r3, #16]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fb4:	b2d2      	uxtb	r2, r2
 8007fb6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fbc:	1c5a      	adds	r2, r3, #1
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	b29a      	uxth	r2, r3
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	691a      	ldr	r2, [r3, #16]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fda:	b2d2      	uxtb	r2, r2
 8007fdc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fe2:	1c5a      	adds	r2, r3, #1
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	b29a      	uxth	r2, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	685a      	ldr	r2, [r3, #4]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8008004:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2220      	movs	r2, #32
 800800a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008014:	b2db      	uxtb	r3, r3
 8008016:	2b40      	cmp	r3, #64	@ 0x40
 8008018:	d10a      	bne.n	8008030 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f7fa fa29 	bl	8002480 <HAL_I2C_MemRxCpltCallback>
}
 800802e:	e01d      	b.n	800806c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2212      	movs	r2, #18
 800803c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f7ff fc79 	bl	8007936 <HAL_I2C_MasterRxCpltCallback>
}
 8008044:	e012      	b.n	800806c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	691a      	ldr	r2, [r3, #16]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008050:	b2d2      	uxtb	r2, r2
 8008052:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008058:	1c5a      	adds	r2, r3, #1
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008062:	b29b      	uxth	r3, r3
 8008064:	3b01      	subs	r3, #1
 8008066:	b29a      	uxth	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800806c:	bf00      	nop
 800806e:	3710      	adds	r7, #16
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008082:	b2db      	uxtb	r3, r3
 8008084:	2b40      	cmp	r3, #64	@ 0x40
 8008086:	d117      	bne.n	80080b8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800808c:	2b00      	cmp	r3, #0
 800808e:	d109      	bne.n	80080a4 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008094:	b2db      	uxtb	r3, r3
 8008096:	461a      	mov	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80080a0:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80080a2:	e067      	b.n	8008174 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	f043 0301 	orr.w	r3, r3, #1
 80080ae:	b2da      	uxtb	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	611a      	str	r2, [r3, #16]
}
 80080b6:	e05d      	b.n	8008174 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080c0:	d133      	bne.n	800812a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	2b21      	cmp	r3, #33	@ 0x21
 80080cc:	d109      	bne.n	80080e2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	461a      	mov	r2, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80080de:	611a      	str	r2, [r3, #16]
 80080e0:	e008      	b.n	80080f4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	f043 0301 	orr.w	r3, r3, #1
 80080ec:	b2da      	uxtb	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d004      	beq.n	8008106 <I2C_Master_SB+0x92>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008102:	2b00      	cmp	r3, #0
 8008104:	d108      	bne.n	8008118 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800810a:	2b00      	cmp	r3, #0
 800810c:	d032      	beq.n	8008174 <I2C_Master_SB+0x100>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008114:	2b00      	cmp	r3, #0
 8008116:	d02d      	beq.n	8008174 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	685a      	ldr	r2, [r3, #4]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008126:	605a      	str	r2, [r3, #4]
}
 8008128:	e024      	b.n	8008174 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800812e:	2b00      	cmp	r3, #0
 8008130:	d10e      	bne.n	8008150 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008136:	b29b      	uxth	r3, r3
 8008138:	11db      	asrs	r3, r3, #7
 800813a:	b2db      	uxtb	r3, r3
 800813c:	f003 0306 	and.w	r3, r3, #6
 8008140:	b2db      	uxtb	r3, r3
 8008142:	f063 030f 	orn	r3, r3, #15
 8008146:	b2da      	uxtb	r2, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	611a      	str	r2, [r3, #16]
}
 800814e:	e011      	b.n	8008174 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008154:	2b01      	cmp	r3, #1
 8008156:	d10d      	bne.n	8008174 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800815c:	b29b      	uxth	r3, r3
 800815e:	11db      	asrs	r3, r3, #7
 8008160:	b2db      	uxtb	r3, r3
 8008162:	f003 0306 	and.w	r3, r3, #6
 8008166:	b2db      	uxtb	r3, r3
 8008168:	f063 030e 	orn	r3, r3, #14
 800816c:	b2da      	uxtb	r2, r3
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	611a      	str	r2, [r3, #16]
}
 8008174:	bf00      	nop
 8008176:	370c      	adds	r7, #12
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800818c:	b2da      	uxtb	r2, r3
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008198:	2b00      	cmp	r3, #0
 800819a:	d004      	beq.n	80081a6 <I2C_Master_ADD10+0x26>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d108      	bne.n	80081b8 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00c      	beq.n	80081c8 <I2C_Master_ADD10+0x48>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d007      	beq.n	80081c8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	685a      	ldr	r2, [r3, #4]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80081c6:	605a      	str	r2, [r3, #4]
  }
}
 80081c8:	bf00      	nop
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b091      	sub	sp, #68	@ 0x44
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80081e2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081f0:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	2b22      	cmp	r3, #34	@ 0x22
 80081fc:	f040 8169 	bne.w	80084d2 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008204:	2b00      	cmp	r3, #0
 8008206:	d10f      	bne.n	8008228 <I2C_Master_ADDR+0x54>
 8008208:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800820c:	2b40      	cmp	r3, #64	@ 0x40
 800820e:	d10b      	bne.n	8008228 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008210:	2300      	movs	r3, #0
 8008212:	633b      	str	r3, [r7, #48]	@ 0x30
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	695b      	ldr	r3, [r3, #20]
 800821a:	633b      	str	r3, [r7, #48]	@ 0x30
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	699b      	ldr	r3, [r3, #24]
 8008222:	633b      	str	r3, [r7, #48]	@ 0x30
 8008224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008226:	e160      	b.n	80084ea <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800822c:	2b00      	cmp	r3, #0
 800822e:	d11d      	bne.n	800826c <I2C_Master_ADDR+0x98>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	691b      	ldr	r3, [r3, #16]
 8008234:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008238:	d118      	bne.n	800826c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800823a:	2300      	movs	r3, #0
 800823c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	695b      	ldr	r3, [r3, #20]
 8008244:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	699b      	ldr	r3, [r3, #24]
 800824c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800824e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800825e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008264:	1c5a      	adds	r2, r3, #1
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	651a      	str	r2, [r3, #80]	@ 0x50
 800826a:	e13e      	b.n	80084ea <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008270:	b29b      	uxth	r3, r3
 8008272:	2b00      	cmp	r3, #0
 8008274:	d113      	bne.n	800829e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008276:	2300      	movs	r3, #0
 8008278:	62bb      	str	r3, [r7, #40]	@ 0x28
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	695b      	ldr	r3, [r3, #20]
 8008280:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	699b      	ldr	r3, [r3, #24]
 8008288:	62bb      	str	r3, [r7, #40]	@ 0x28
 800828a:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800829a:	601a      	str	r2, [r3, #0]
 800829c:	e115      	b.n	80084ca <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	f040 808a 	bne.w	80083be <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80082aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80082b0:	d137      	bne.n	8008322 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082c0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80082cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80082d0:	d113      	bne.n	80082fa <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082e0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082e2:	2300      	movs	r3, #0
 80082e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	695b      	ldr	r3, [r3, #20]
 80082ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	699b      	ldr	r3, [r3, #24]
 80082f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80082f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f8:	e0e7      	b.n	80084ca <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082fa:	2300      	movs	r3, #0
 80082fc:	623b      	str	r3, [r7, #32]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	695b      	ldr	r3, [r3, #20]
 8008304:	623b      	str	r3, [r7, #32]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	699b      	ldr	r3, [r3, #24]
 800830c:	623b      	str	r3, [r7, #32]
 800830e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800831e:	601a      	str	r2, [r3, #0]
 8008320:	e0d3      	b.n	80084ca <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8008322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008324:	2b08      	cmp	r3, #8
 8008326:	d02e      	beq.n	8008386 <I2C_Master_ADDR+0x1b2>
 8008328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800832a:	2b20      	cmp	r3, #32
 800832c:	d02b      	beq.n	8008386 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800832e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008330:	2b12      	cmp	r3, #18
 8008332:	d102      	bne.n	800833a <I2C_Master_ADDR+0x166>
 8008334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008336:	2b01      	cmp	r3, #1
 8008338:	d125      	bne.n	8008386 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800833a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800833c:	2b04      	cmp	r3, #4
 800833e:	d00e      	beq.n	800835e <I2C_Master_ADDR+0x18a>
 8008340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008342:	2b02      	cmp	r3, #2
 8008344:	d00b      	beq.n	800835e <I2C_Master_ADDR+0x18a>
 8008346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008348:	2b10      	cmp	r3, #16
 800834a:	d008      	beq.n	800835e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800835a:	601a      	str	r2, [r3, #0]
 800835c:	e007      	b.n	800836e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800836c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800836e:	2300      	movs	r3, #0
 8008370:	61fb      	str	r3, [r7, #28]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	695b      	ldr	r3, [r3, #20]
 8008378:	61fb      	str	r3, [r7, #28]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	699b      	ldr	r3, [r3, #24]
 8008380:	61fb      	str	r3, [r7, #28]
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	e0a1      	b.n	80084ca <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008394:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008396:	2300      	movs	r3, #0
 8008398:	61bb      	str	r3, [r7, #24]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	695b      	ldr	r3, [r3, #20]
 80083a0:	61bb      	str	r3, [r7, #24]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	699b      	ldr	r3, [r3, #24]
 80083a8:	61bb      	str	r3, [r7, #24]
 80083aa:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80083ba:	601a      	str	r2, [r3, #0]
 80083bc:	e085      	b.n	80084ca <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	d14d      	bne.n	8008464 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80083c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ca:	2b04      	cmp	r3, #4
 80083cc:	d016      	beq.n	80083fc <I2C_Master_ADDR+0x228>
 80083ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083d0:	2b02      	cmp	r3, #2
 80083d2:	d013      	beq.n	80083fc <I2C_Master_ADDR+0x228>
 80083d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083d6:	2b10      	cmp	r3, #16
 80083d8:	d010      	beq.n	80083fc <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083e8:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80083f8:	601a      	str	r2, [r3, #0]
 80083fa:	e007      	b.n	800840c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800840a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008416:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800841a:	d117      	bne.n	800844c <I2C_Master_ADDR+0x278>
 800841c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800841e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008422:	d00b      	beq.n	800843c <I2C_Master_ADDR+0x268>
 8008424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008426:	2b01      	cmp	r3, #1
 8008428:	d008      	beq.n	800843c <I2C_Master_ADDR+0x268>
 800842a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800842c:	2b08      	cmp	r3, #8
 800842e:	d005      	beq.n	800843c <I2C_Master_ADDR+0x268>
 8008430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008432:	2b10      	cmp	r3, #16
 8008434:	d002      	beq.n	800843c <I2C_Master_ADDR+0x268>
 8008436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008438:	2b20      	cmp	r3, #32
 800843a:	d107      	bne.n	800844c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	685a      	ldr	r2, [r3, #4]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800844a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800844c:	2300      	movs	r3, #0
 800844e:	617b      	str	r3, [r7, #20]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	695b      	ldr	r3, [r3, #20]
 8008456:	617b      	str	r3, [r7, #20]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	699b      	ldr	r3, [r3, #24]
 800845e:	617b      	str	r3, [r7, #20]
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	e032      	b.n	80084ca <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008472:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800847e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008482:	d117      	bne.n	80084b4 <I2C_Master_ADDR+0x2e0>
 8008484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008486:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800848a:	d00b      	beq.n	80084a4 <I2C_Master_ADDR+0x2d0>
 800848c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800848e:	2b01      	cmp	r3, #1
 8008490:	d008      	beq.n	80084a4 <I2C_Master_ADDR+0x2d0>
 8008492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008494:	2b08      	cmp	r3, #8
 8008496:	d005      	beq.n	80084a4 <I2C_Master_ADDR+0x2d0>
 8008498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800849a:	2b10      	cmp	r3, #16
 800849c:	d002      	beq.n	80084a4 <I2C_Master_ADDR+0x2d0>
 800849e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a0:	2b20      	cmp	r3, #32
 80084a2:	d107      	bne.n	80084b4 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	685a      	ldr	r2, [r3, #4]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80084b2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084b4:	2300      	movs	r3, #0
 80084b6:	613b      	str	r3, [r7, #16]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	695b      	ldr	r3, [r3, #20]
 80084be:	613b      	str	r3, [r7, #16]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	699b      	ldr	r3, [r3, #24]
 80084c6:	613b      	str	r3, [r7, #16]
 80084c8:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80084d0:	e00b      	b.n	80084ea <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084d2:	2300      	movs	r3, #0
 80084d4:	60fb      	str	r3, [r7, #12]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	695b      	ldr	r3, [r3, #20]
 80084dc:	60fb      	str	r3, [r7, #12]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	699b      	ldr	r3, [r3, #24]
 80084e4:	60fb      	str	r3, [r7, #12]
 80084e6:	68fb      	ldr	r3, [r7, #12]
}
 80084e8:	e7ff      	b.n	80084ea <I2C_Master_ADDR+0x316>
 80084ea:	bf00      	nop
 80084ec:	3744      	adds	r7, #68	@ 0x44
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr

080084f6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b084      	sub	sp, #16
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008504:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800850a:	b29b      	uxth	r3, r3
 800850c:	2b00      	cmp	r3, #0
 800850e:	d02b      	beq.n	8008568 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008514:	781a      	ldrb	r2, [r3, #0]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008520:	1c5a      	adds	r2, r3, #1
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800852a:	b29b      	uxth	r3, r3
 800852c:	3b01      	subs	r3, #1
 800852e:	b29a      	uxth	r2, r3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008538:	b29b      	uxth	r3, r3
 800853a:	2b00      	cmp	r3, #0
 800853c:	d114      	bne.n	8008568 <I2C_SlaveTransmit_TXE+0x72>
 800853e:	7bfb      	ldrb	r3, [r7, #15]
 8008540:	2b29      	cmp	r3, #41	@ 0x29
 8008542:	d111      	bne.n	8008568 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	685a      	ldr	r2, [r3, #4]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008552:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2221      	movs	r2, #33	@ 0x21
 8008558:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2228      	movs	r2, #40	@ 0x28
 800855e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f7ff f9f1 	bl	800794a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008568:	bf00      	nop
 800856a:	3710      	adds	r7, #16
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800857c:	b29b      	uxth	r3, r3
 800857e:	2b00      	cmp	r3, #0
 8008580:	d011      	beq.n	80085a6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008586:	781a      	ldrb	r2, [r3, #0]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008592:	1c5a      	adds	r2, r3, #1
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800859c:	b29b      	uxth	r3, r3
 800859e:	3b01      	subs	r3, #1
 80085a0:	b29a      	uxth	r2, r3
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80085a6:	bf00      	nop
 80085a8:	370c      	adds	r7, #12
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr

080085b2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80085b2:	b580      	push	{r7, lr}
 80085b4:	b084      	sub	sp, #16
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085c0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d02c      	beq.n	8008626 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	691a      	ldr	r2, [r3, #16]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085d6:	b2d2      	uxtb	r2, r2
 80085d8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085de:	1c5a      	adds	r2, r3, #1
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	3b01      	subs	r3, #1
 80085ec:	b29a      	uxth	r2, r3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d114      	bne.n	8008626 <I2C_SlaveReceive_RXNE+0x74>
 80085fc:	7bfb      	ldrb	r3, [r7, #15]
 80085fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8008600:	d111      	bne.n	8008626 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	685a      	ldr	r2, [r3, #4]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008610:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2222      	movs	r2, #34	@ 0x22
 8008616:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2228      	movs	r2, #40	@ 0x28
 800861c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f7ff f99c 	bl	800795e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008626:	bf00      	nop
 8008628:	3710      	adds	r7, #16
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}

0800862e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800862e:	b480      	push	{r7}
 8008630:	b083      	sub	sp, #12
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800863a:	b29b      	uxth	r3, r3
 800863c:	2b00      	cmp	r3, #0
 800863e:	d012      	beq.n	8008666 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	691a      	ldr	r2, [r3, #16]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800864a:	b2d2      	uxtb	r2, r2
 800864c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008652:	1c5a      	adds	r2, r3, #1
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800865c:	b29b      	uxth	r3, r3
 800865e:	3b01      	subs	r3, #1
 8008660:	b29a      	uxth	r2, r3
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8008666:	bf00      	nop
 8008668:	370c      	adds	r7, #12
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr

08008672 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008672:	b580      	push	{r7, lr}
 8008674:	b084      	sub	sp, #16
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
 800867a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800867c:	2300      	movs	r3, #0
 800867e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008686:	b2db      	uxtb	r3, r3
 8008688:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800868c:	2b28      	cmp	r3, #40	@ 0x28
 800868e:	d125      	bne.n	80086dc <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	685a      	ldr	r2, [r3, #4]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800869e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	f003 0304 	and.w	r3, r3, #4
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d101      	bne.n	80086ae <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80086aa:	2301      	movs	r3, #1
 80086ac:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d103      	bne.n	80086c0 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	81bb      	strh	r3, [r7, #12]
 80086be:	e002      	b.n	80086c6 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	699b      	ldr	r3, [r3, #24]
 80086c4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80086ce:	89ba      	ldrh	r2, [r7, #12]
 80086d0:	7bfb      	ldrb	r3, [r7, #15]
 80086d2:	4619      	mov	r1, r3
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f7ff f94c 	bl	8007972 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80086da:	e00e      	b.n	80086fa <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086dc:	2300      	movs	r3, #0
 80086de:	60bb      	str	r3, [r7, #8]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	695b      	ldr	r3, [r3, #20]
 80086e6:	60bb      	str	r3, [r7, #8]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	699b      	ldr	r3, [r3, #24]
 80086ee:	60bb      	str	r3, [r7, #8]
 80086f0:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80086fa:	bf00      	nop
 80086fc:	3710      	adds	r7, #16
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
	...

08008704 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008712:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	685a      	ldr	r2, [r3, #4]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008722:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008724:	2300      	movs	r3, #0
 8008726:	60bb      	str	r3, [r7, #8]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	695b      	ldr	r3, [r3, #20]
 800872e:	60bb      	str	r3, [r7, #8]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f042 0201 	orr.w	r2, r2, #1
 800873e:	601a      	str	r2, [r3, #0]
 8008740:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008750:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800875c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008760:	d172      	bne.n	8008848 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008762:	7bfb      	ldrb	r3, [r7, #15]
 8008764:	2b22      	cmp	r3, #34	@ 0x22
 8008766:	d002      	beq.n	800876e <I2C_Slave_STOPF+0x6a>
 8008768:	7bfb      	ldrb	r3, [r7, #15]
 800876a:	2b2a      	cmp	r3, #42	@ 0x2a
 800876c:	d135      	bne.n	80087da <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	b29a      	uxth	r2, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008780:	b29b      	uxth	r3, r3
 8008782:	2b00      	cmp	r3, #0
 8008784:	d005      	beq.n	8008792 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800878a:	f043 0204 	orr.w	r2, r3, #4
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	685a      	ldr	r2, [r3, #4]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80087a0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7fd fa5e 	bl	8005c68 <HAL_DMA_GetState>
 80087ac:	4603      	mov	r3, r0
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d049      	beq.n	8008846 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087b6:	4a69      	ldr	r2, [pc, #420]	@ (800895c <I2C_Slave_STOPF+0x258>)
 80087b8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087be:	4618      	mov	r0, r3
 80087c0:	f7fd f8a6 	bl	8005910 <HAL_DMA_Abort_IT>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d03d      	beq.n	8008846 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80087d4:	4610      	mov	r0, r2
 80087d6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80087d8:	e035      	b.n	8008846 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	b29a      	uxth	r2, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d005      	beq.n	80087fe <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087f6:	f043 0204 	orr.w	r2, r3, #4
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	685a      	ldr	r2, [r3, #4]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800880c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008812:	4618      	mov	r0, r3
 8008814:	f7fd fa28 	bl	8005c68 <HAL_DMA_GetState>
 8008818:	4603      	mov	r3, r0
 800881a:	2b01      	cmp	r3, #1
 800881c:	d014      	beq.n	8008848 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008822:	4a4e      	ldr	r2, [pc, #312]	@ (800895c <I2C_Slave_STOPF+0x258>)
 8008824:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800882a:	4618      	mov	r0, r3
 800882c:	f7fd f870 	bl	8005910 <HAL_DMA_Abort_IT>
 8008830:	4603      	mov	r3, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	d008      	beq.n	8008848 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800883a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008840:	4610      	mov	r0, r2
 8008842:	4798      	blx	r3
 8008844:	e000      	b.n	8008848 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008846:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800884c:	b29b      	uxth	r3, r3
 800884e:	2b00      	cmp	r3, #0
 8008850:	d03e      	beq.n	80088d0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	695b      	ldr	r3, [r3, #20]
 8008858:	f003 0304 	and.w	r3, r3, #4
 800885c:	2b04      	cmp	r3, #4
 800885e:	d112      	bne.n	8008886 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	691a      	ldr	r2, [r3, #16]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800886a:	b2d2      	uxtb	r2, r2
 800886c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008872:	1c5a      	adds	r2, r3, #1
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800887c:	b29b      	uxth	r3, r3
 800887e:	3b01      	subs	r3, #1
 8008880:	b29a      	uxth	r2, r3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	695b      	ldr	r3, [r3, #20]
 800888c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008890:	2b40      	cmp	r3, #64	@ 0x40
 8008892:	d112      	bne.n	80088ba <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	691a      	ldr	r2, [r3, #16]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800889e:	b2d2      	uxtb	r2, r2
 80088a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088a6:	1c5a      	adds	r2, r3, #1
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	3b01      	subs	r3, #1
 80088b4:	b29a      	uxth	r2, r3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088be:	b29b      	uxth	r3, r3
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d005      	beq.n	80088d0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088c8:	f043 0204 	orr.w	r2, r3, #4
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d003      	beq.n	80088e0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 f843 	bl	8008964 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80088de:	e039      	b.n	8008954 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80088e0:	7bfb      	ldrb	r3, [r7, #15]
 80088e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80088e4:	d109      	bne.n	80088fa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2228      	movs	r2, #40	@ 0x28
 80088f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f7ff f832 	bl	800795e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008900:	b2db      	uxtb	r3, r3
 8008902:	2b28      	cmp	r3, #40	@ 0x28
 8008904:	d111      	bne.n	800892a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	4a15      	ldr	r2, [pc, #84]	@ (8008960 <I2C_Slave_STOPF+0x25c>)
 800890a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2220      	movs	r2, #32
 8008916:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f7ff f833 	bl	800798e <HAL_I2C_ListenCpltCallback>
}
 8008928:	e014      	b.n	8008954 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800892e:	2b22      	cmp	r3, #34	@ 0x22
 8008930:	d002      	beq.n	8008938 <I2C_Slave_STOPF+0x234>
 8008932:	7bfb      	ldrb	r3, [r7, #15]
 8008934:	2b22      	cmp	r3, #34	@ 0x22
 8008936:	d10d      	bne.n	8008954 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2220      	movs	r2, #32
 8008942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f7ff f805 	bl	800795e <HAL_I2C_SlaveRxCpltCallback>
}
 8008954:	bf00      	nop
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}
 800895c:	08009389 	.word	0x08009389
 8008960:	ffff0000 	.word	0xffff0000

08008964 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008972:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800897a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800897c:	7bbb      	ldrb	r3, [r7, #14]
 800897e:	2b10      	cmp	r3, #16
 8008980:	d002      	beq.n	8008988 <I2C_ITError+0x24>
 8008982:	7bbb      	ldrb	r3, [r7, #14]
 8008984:	2b40      	cmp	r3, #64	@ 0x40
 8008986:	d10a      	bne.n	800899e <I2C_ITError+0x3a>
 8008988:	7bfb      	ldrb	r3, [r7, #15]
 800898a:	2b22      	cmp	r3, #34	@ 0x22
 800898c:	d107      	bne.n	800899e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800899c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800899e:	7bfb      	ldrb	r3, [r7, #15]
 80089a0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80089a4:	2b28      	cmp	r3, #40	@ 0x28
 80089a6:	d107      	bne.n	80089b8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2228      	movs	r2, #40	@ 0x28
 80089b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80089b6:	e015      	b.n	80089e4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80089c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80089c6:	d00a      	beq.n	80089de <I2C_ITError+0x7a>
 80089c8:	7bfb      	ldrb	r3, [r7, #15]
 80089ca:	2b60      	cmp	r3, #96	@ 0x60
 80089cc:	d007      	beq.n	80089de <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2220      	movs	r2, #32
 80089d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80089ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80089f2:	d162      	bne.n	8008aba <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	685a      	ldr	r2, [r3, #4]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008a02:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d020      	beq.n	8008a54 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a16:	4a6a      	ldr	r2, [pc, #424]	@ (8008bc0 <I2C_ITError+0x25c>)
 8008a18:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7fc ff76 	bl	8005910 <HAL_DMA_Abort_IT>
 8008a24:	4603      	mov	r3, r0
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	f000 8089 	beq.w	8008b3e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f022 0201 	bic.w	r2, r2, #1
 8008a3a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2220      	movs	r2, #32
 8008a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008a4e:	4610      	mov	r0, r2
 8008a50:	4798      	blx	r3
 8008a52:	e074      	b.n	8008b3e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a58:	4a59      	ldr	r2, [pc, #356]	@ (8008bc0 <I2C_ITError+0x25c>)
 8008a5a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7fc ff55 	bl	8005910 <HAL_DMA_Abort_IT>
 8008a66:	4603      	mov	r3, r0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d068      	beq.n	8008b3e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	695b      	ldr	r3, [r3, #20]
 8008a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a76:	2b40      	cmp	r3, #64	@ 0x40
 8008a78:	d10b      	bne.n	8008a92 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	691a      	ldr	r2, [r3, #16]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a84:	b2d2      	uxtb	r2, r2
 8008a86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a8c:	1c5a      	adds	r2, r3, #1
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f022 0201 	bic.w	r2, r2, #1
 8008aa0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2220      	movs	r2, #32
 8008aa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008ab4:	4610      	mov	r0, r2
 8008ab6:	4798      	blx	r3
 8008ab8:	e041      	b.n	8008b3e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	2b60      	cmp	r3, #96	@ 0x60
 8008ac4:	d125      	bne.n	8008b12 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2220      	movs	r2, #32
 8008aca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	695b      	ldr	r3, [r3, #20]
 8008ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ade:	2b40      	cmp	r3, #64	@ 0x40
 8008ae0:	d10b      	bne.n	8008afa <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	691a      	ldr	r2, [r3, #16]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aec:	b2d2      	uxtb	r2, r2
 8008aee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008af4:	1c5a      	adds	r2, r3, #1
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f022 0201 	bic.w	r2, r2, #1
 8008b08:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f7fe ff5d 	bl	80079ca <HAL_I2C_AbortCpltCallback>
 8008b10:	e015      	b.n	8008b3e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	695b      	ldr	r3, [r3, #20]
 8008b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b1c:	2b40      	cmp	r3, #64	@ 0x40
 8008b1e:	d10b      	bne.n	8008b38 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	691a      	ldr	r2, [r3, #16]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b2a:	b2d2      	uxtb	r2, r2
 8008b2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b32:	1c5a      	adds	r2, r3, #1
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f7fe ff3c 	bl	80079b6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b42:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	f003 0301 	and.w	r3, r3, #1
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d10e      	bne.n	8008b6c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d109      	bne.n	8008b6c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d104      	bne.n	8008b6c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d007      	beq.n	8008b7c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	685a      	ldr	r2, [r3, #4]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008b7a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b82:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b88:	f003 0304 	and.w	r3, r3, #4
 8008b8c:	2b04      	cmp	r3, #4
 8008b8e:	d113      	bne.n	8008bb8 <I2C_ITError+0x254>
 8008b90:	7bfb      	ldrb	r3, [r7, #15]
 8008b92:	2b28      	cmp	r3, #40	@ 0x28
 8008b94:	d110      	bne.n	8008bb8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4a0a      	ldr	r2, [pc, #40]	@ (8008bc4 <I2C_ITError+0x260>)
 8008b9a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2220      	movs	r2, #32
 8008ba6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f7fe feeb 	bl	800798e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008bb8:	bf00      	nop
 8008bba:	3710      	adds	r7, #16
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	08009389 	.word	0x08009389
 8008bc4:	ffff0000 	.word	0xffff0000

08008bc8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b088      	sub	sp, #32
 8008bcc:	af02      	add	r7, sp, #8
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	607a      	str	r2, [r7, #4]
 8008bd2:	603b      	str	r3, [r7, #0]
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bdc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	2b08      	cmp	r3, #8
 8008be2:	d006      	beq.n	8008bf2 <I2C_MasterRequestWrite+0x2a>
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d003      	beq.n	8008bf2 <I2C_MasterRequestWrite+0x2a>
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008bf0:	d108      	bne.n	8008c04 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008c00:	601a      	str	r2, [r3, #0]
 8008c02:	e00b      	b.n	8008c1c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c08:	2b12      	cmp	r3, #18
 8008c0a:	d107      	bne.n	8008c1c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	681a      	ldr	r2, [r3, #0]
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008c1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	9300      	str	r3, [sp, #0]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008c28:	68f8      	ldr	r0, [r7, #12]
 8008c2a:	f000 fc55 	bl	80094d8 <I2C_WaitOnFlagUntilTimeout>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00d      	beq.n	8008c50 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c42:	d103      	bne.n	8008c4c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c4a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008c4c:	2303      	movs	r3, #3
 8008c4e:	e035      	b.n	8008cbc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	691b      	ldr	r3, [r3, #16]
 8008c54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c58:	d108      	bne.n	8008c6c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008c5a:	897b      	ldrh	r3, [r7, #10]
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	461a      	mov	r2, r3
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008c68:	611a      	str	r2, [r3, #16]
 8008c6a:	e01b      	b.n	8008ca4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008c6c:	897b      	ldrh	r3, [r7, #10]
 8008c6e:	11db      	asrs	r3, r3, #7
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	f003 0306 	and.w	r3, r3, #6
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	f063 030f 	orn	r3, r3, #15
 8008c7c:	b2da      	uxtb	r2, r3
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	490e      	ldr	r1, [pc, #56]	@ (8008cc4 <I2C_MasterRequestWrite+0xfc>)
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	f000 fc7b 	bl	8009586 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d001      	beq.n	8008c9a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008c96:	2301      	movs	r3, #1
 8008c98:	e010      	b.n	8008cbc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008c9a:	897b      	ldrh	r3, [r7, #10]
 8008c9c:	b2da      	uxtb	r2, r3
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	4907      	ldr	r1, [pc, #28]	@ (8008cc8 <I2C_MasterRequestWrite+0x100>)
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	f000 fc6b 	bl	8009586 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d001      	beq.n	8008cba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e000      	b.n	8008cbc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008cba:	2300      	movs	r3, #0
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3718      	adds	r7, #24
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	00010008 	.word	0x00010008
 8008cc8:	00010002 	.word	0x00010002

08008ccc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b088      	sub	sp, #32
 8008cd0:	af02      	add	r7, sp, #8
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	607a      	str	r2, [r7, #4]
 8008cd6:	603b      	str	r3, [r7, #0]
 8008cd8:	460b      	mov	r3, r1
 8008cda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ce0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008cf0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	2b08      	cmp	r3, #8
 8008cf6:	d006      	beq.n	8008d06 <I2C_MasterRequestRead+0x3a>
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d003      	beq.n	8008d06 <I2C_MasterRequestRead+0x3a>
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008d04:	d108      	bne.n	8008d18 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008d14:	601a      	str	r2, [r3, #0]
 8008d16:	e00b      	b.n	8008d30 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d1c:	2b11      	cmp	r3, #17
 8008d1e:	d107      	bne.n	8008d30 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008d2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	9300      	str	r3, [sp, #0]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008d3c:	68f8      	ldr	r0, [r7, #12]
 8008d3e:	f000 fbcb 	bl	80094d8 <I2C_WaitOnFlagUntilTimeout>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d00d      	beq.n	8008d64 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d56:	d103      	bne.n	8008d60 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008d5e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008d60:	2303      	movs	r3, #3
 8008d62:	e079      	b.n	8008e58 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	691b      	ldr	r3, [r3, #16]
 8008d68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008d6c:	d108      	bne.n	8008d80 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008d6e:	897b      	ldrh	r3, [r7, #10]
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	f043 0301 	orr.w	r3, r3, #1
 8008d76:	b2da      	uxtb	r2, r3
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	611a      	str	r2, [r3, #16]
 8008d7e:	e05f      	b.n	8008e40 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008d80:	897b      	ldrh	r3, [r7, #10]
 8008d82:	11db      	asrs	r3, r3, #7
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	f003 0306 	and.w	r3, r3, #6
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	f063 030f 	orn	r3, r3, #15
 8008d90:	b2da      	uxtb	r2, r3
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	4930      	ldr	r1, [pc, #192]	@ (8008e60 <I2C_MasterRequestRead+0x194>)
 8008d9e:	68f8      	ldr	r0, [r7, #12]
 8008da0:	f000 fbf1 	bl	8009586 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d001      	beq.n	8008dae <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	e054      	b.n	8008e58 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008dae:	897b      	ldrh	r3, [r7, #10]
 8008db0:	b2da      	uxtb	r2, r3
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	4929      	ldr	r1, [pc, #164]	@ (8008e64 <I2C_MasterRequestRead+0x198>)
 8008dbe:	68f8      	ldr	r0, [r7, #12]
 8008dc0:	f000 fbe1 	bl	8009586 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d001      	beq.n	8008dce <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e044      	b.n	8008e58 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008dce:	2300      	movs	r3, #0
 8008dd0:	613b      	str	r3, [r7, #16]
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	695b      	ldr	r3, [r3, #20]
 8008dd8:	613b      	str	r3, [r7, #16]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	699b      	ldr	r3, [r3, #24]
 8008de0:	613b      	str	r3, [r7, #16]
 8008de2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008df2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	9300      	str	r3, [sp, #0]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008e00:	68f8      	ldr	r0, [r7, #12]
 8008e02:	f000 fb69 	bl	80094d8 <I2C_WaitOnFlagUntilTimeout>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d00d      	beq.n	8008e28 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e1a:	d103      	bne.n	8008e24 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008e22:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8008e24:	2303      	movs	r3, #3
 8008e26:	e017      	b.n	8008e58 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008e28:	897b      	ldrh	r3, [r7, #10]
 8008e2a:	11db      	asrs	r3, r3, #7
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	f003 0306 	and.w	r3, r3, #6
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	f063 030e 	orn	r3, r3, #14
 8008e38:	b2da      	uxtb	r2, r3
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	4907      	ldr	r1, [pc, #28]	@ (8008e64 <I2C_MasterRequestRead+0x198>)
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	f000 fb9d 	bl	8009586 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d001      	beq.n	8008e56 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8008e52:	2301      	movs	r3, #1
 8008e54:	e000      	b.n	8008e58 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8008e56:	2300      	movs	r3, #0
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3718      	adds	r7, #24
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	00010008 	.word	0x00010008
 8008e64:	00010002 	.word	0x00010002

08008e68 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b088      	sub	sp, #32
 8008e6c:	af02      	add	r7, sp, #8
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	4608      	mov	r0, r1
 8008e72:	4611      	mov	r1, r2
 8008e74:	461a      	mov	r2, r3
 8008e76:	4603      	mov	r3, r0
 8008e78:	817b      	strh	r3, [r7, #10]
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	813b      	strh	r3, [r7, #8]
 8008e7e:	4613      	mov	r3, r2
 8008e80:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008e90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e94:	9300      	str	r3, [sp, #0]
 8008e96:	6a3b      	ldr	r3, [r7, #32]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008e9e:	68f8      	ldr	r0, [r7, #12]
 8008ea0:	f000 fb1a 	bl	80094d8 <I2C_WaitOnFlagUntilTimeout>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d00d      	beq.n	8008ec6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008eb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008eb8:	d103      	bne.n	8008ec2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008ec0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008ec2:	2303      	movs	r3, #3
 8008ec4:	e05f      	b.n	8008f86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008ec6:	897b      	ldrh	r3, [r7, #10]
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	461a      	mov	r2, r3
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008ed4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed8:	6a3a      	ldr	r2, [r7, #32]
 8008eda:	492d      	ldr	r1, [pc, #180]	@ (8008f90 <I2C_RequestMemoryWrite+0x128>)
 8008edc:	68f8      	ldr	r0, [r7, #12]
 8008ede:	f000 fb52 	bl	8009586 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d001      	beq.n	8008eec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	e04c      	b.n	8008f86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008eec:	2300      	movs	r3, #0
 8008eee:	617b      	str	r3, [r7, #20]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	695b      	ldr	r3, [r3, #20]
 8008ef6:	617b      	str	r3, [r7, #20]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	699b      	ldr	r3, [r3, #24]
 8008efe:	617b      	str	r3, [r7, #20]
 8008f00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f04:	6a39      	ldr	r1, [r7, #32]
 8008f06:	68f8      	ldr	r0, [r7, #12]
 8008f08:	f000 fbbc 	bl	8009684 <I2C_WaitOnTXEFlagUntilTimeout>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d00d      	beq.n	8008f2e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f16:	2b04      	cmp	r3, #4
 8008f18:	d107      	bne.n	8008f2a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	e02b      	b.n	8008f86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008f2e:	88fb      	ldrh	r3, [r7, #6]
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d105      	bne.n	8008f40 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008f34:	893b      	ldrh	r3, [r7, #8]
 8008f36:	b2da      	uxtb	r2, r3
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	611a      	str	r2, [r3, #16]
 8008f3e:	e021      	b.n	8008f84 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008f40:	893b      	ldrh	r3, [r7, #8]
 8008f42:	0a1b      	lsrs	r3, r3, #8
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	b2da      	uxtb	r2, r3
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f50:	6a39      	ldr	r1, [r7, #32]
 8008f52:	68f8      	ldr	r0, [r7, #12]
 8008f54:	f000 fb96 	bl	8009684 <I2C_WaitOnTXEFlagUntilTimeout>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00d      	beq.n	8008f7a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f62:	2b04      	cmp	r3, #4
 8008f64:	d107      	bne.n	8008f76 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008f76:	2301      	movs	r3, #1
 8008f78:	e005      	b.n	8008f86 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008f7a:	893b      	ldrh	r3, [r7, #8]
 8008f7c:	b2da      	uxtb	r2, r3
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3718      	adds	r7, #24
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	00010002 	.word	0x00010002

08008f94 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b088      	sub	sp, #32
 8008f98:	af02      	add	r7, sp, #8
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	4608      	mov	r0, r1
 8008f9e:	4611      	mov	r1, r2
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	817b      	strh	r3, [r7, #10]
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	813b      	strh	r3, [r7, #8]
 8008faa:	4613      	mov	r3, r2
 8008fac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008fbc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008fcc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd0:	9300      	str	r3, [sp, #0]
 8008fd2:	6a3b      	ldr	r3, [r7, #32]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008fda:	68f8      	ldr	r0, [r7, #12]
 8008fdc:	f000 fa7c 	bl	80094d8 <I2C_WaitOnFlagUntilTimeout>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00d      	beq.n	8009002 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ff0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ff4:	d103      	bne.n	8008ffe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008ffc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008ffe:	2303      	movs	r3, #3
 8009000:	e0aa      	b.n	8009158 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009002:	897b      	ldrh	r3, [r7, #10]
 8009004:	b2db      	uxtb	r3, r3
 8009006:	461a      	mov	r2, r3
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009010:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009014:	6a3a      	ldr	r2, [r7, #32]
 8009016:	4952      	ldr	r1, [pc, #328]	@ (8009160 <I2C_RequestMemoryRead+0x1cc>)
 8009018:	68f8      	ldr	r0, [r7, #12]
 800901a:	f000 fab4 	bl	8009586 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800901e:	4603      	mov	r3, r0
 8009020:	2b00      	cmp	r3, #0
 8009022:	d001      	beq.n	8009028 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009024:	2301      	movs	r3, #1
 8009026:	e097      	b.n	8009158 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009028:	2300      	movs	r3, #0
 800902a:	617b      	str	r3, [r7, #20]
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	695b      	ldr	r3, [r3, #20]
 8009032:	617b      	str	r3, [r7, #20]
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	699b      	ldr	r3, [r3, #24]
 800903a:	617b      	str	r3, [r7, #20]
 800903c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800903e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009040:	6a39      	ldr	r1, [r7, #32]
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f000 fb1e 	bl	8009684 <I2C_WaitOnTXEFlagUntilTimeout>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00d      	beq.n	800906a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009052:	2b04      	cmp	r3, #4
 8009054:	d107      	bne.n	8009066 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009064:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009066:	2301      	movs	r3, #1
 8009068:	e076      	b.n	8009158 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800906a:	88fb      	ldrh	r3, [r7, #6]
 800906c:	2b01      	cmp	r3, #1
 800906e:	d105      	bne.n	800907c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009070:	893b      	ldrh	r3, [r7, #8]
 8009072:	b2da      	uxtb	r2, r3
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	611a      	str	r2, [r3, #16]
 800907a:	e021      	b.n	80090c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800907c:	893b      	ldrh	r3, [r7, #8]
 800907e:	0a1b      	lsrs	r3, r3, #8
 8009080:	b29b      	uxth	r3, r3
 8009082:	b2da      	uxtb	r2, r3
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800908a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800908c:	6a39      	ldr	r1, [r7, #32]
 800908e:	68f8      	ldr	r0, [r7, #12]
 8009090:	f000 faf8 	bl	8009684 <I2C_WaitOnTXEFlagUntilTimeout>
 8009094:	4603      	mov	r3, r0
 8009096:	2b00      	cmp	r3, #0
 8009098:	d00d      	beq.n	80090b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800909e:	2b04      	cmp	r3, #4
 80090a0:	d107      	bne.n	80090b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80090b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80090b2:	2301      	movs	r3, #1
 80090b4:	e050      	b.n	8009158 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80090b6:	893b      	ldrh	r3, [r7, #8]
 80090b8:	b2da      	uxtb	r2, r3
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80090c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090c2:	6a39      	ldr	r1, [r7, #32]
 80090c4:	68f8      	ldr	r0, [r7, #12]
 80090c6:	f000 fadd 	bl	8009684 <I2C_WaitOnTXEFlagUntilTimeout>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d00d      	beq.n	80090ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090d4:	2b04      	cmp	r3, #4
 80090d6:	d107      	bne.n	80090e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80090e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	e035      	b.n	8009158 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80090fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80090fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090fe:	9300      	str	r3, [sp, #0]
 8009100:	6a3b      	ldr	r3, [r7, #32]
 8009102:	2200      	movs	r2, #0
 8009104:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f000 f9e5 	bl	80094d8 <I2C_WaitOnFlagUntilTimeout>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	d00d      	beq.n	8009130 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800911e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009122:	d103      	bne.n	800912c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800912a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800912c:	2303      	movs	r3, #3
 800912e:	e013      	b.n	8009158 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009130:	897b      	ldrh	r3, [r7, #10]
 8009132:	b2db      	uxtb	r3, r3
 8009134:	f043 0301 	orr.w	r3, r3, #1
 8009138:	b2da      	uxtb	r2, r3
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009142:	6a3a      	ldr	r2, [r7, #32]
 8009144:	4906      	ldr	r1, [pc, #24]	@ (8009160 <I2C_RequestMemoryRead+0x1cc>)
 8009146:	68f8      	ldr	r0, [r7, #12]
 8009148:	f000 fa1d 	bl	8009586 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800914c:	4603      	mov	r3, r0
 800914e:	2b00      	cmp	r3, #0
 8009150:	d001      	beq.n	8009156 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	e000      	b.n	8009158 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	3718      	adds	r7, #24
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}
 8009160:	00010002 	.word	0x00010002

08009164 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b086      	sub	sp, #24
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009170:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009178:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009180:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009186:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	685a      	ldr	r2, [r3, #4]
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8009196:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800919c:	2b00      	cmp	r3, #0
 800919e:	d003      	beq.n	80091a8 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091a4:	2200      	movs	r2, #0
 80091a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d003      	beq.n	80091b8 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091b4:	2200      	movs	r2, #0
 80091b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80091b8:	7cfb      	ldrb	r3, [r7, #19]
 80091ba:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80091be:	2b21      	cmp	r3, #33	@ 0x21
 80091c0:	d007      	beq.n	80091d2 <I2C_DMAXferCplt+0x6e>
 80091c2:	7cfb      	ldrb	r3, [r7, #19]
 80091c4:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80091c8:	2b22      	cmp	r3, #34	@ 0x22
 80091ca:	d131      	bne.n	8009230 <I2C_DMAXferCplt+0xcc>
 80091cc:	7cbb      	ldrb	r3, [r7, #18]
 80091ce:	2b20      	cmp	r3, #32
 80091d0:	d12e      	bne.n	8009230 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	685a      	ldr	r2, [r3, #4]
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80091e0:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	2200      	movs	r2, #0
 80091e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80091e8:	7cfb      	ldrb	r3, [r7, #19]
 80091ea:	2b29      	cmp	r3, #41	@ 0x29
 80091ec:	d10a      	bne.n	8009204 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	2221      	movs	r2, #33	@ 0x21
 80091f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	2228      	movs	r2, #40	@ 0x28
 80091f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80091fc:	6978      	ldr	r0, [r7, #20]
 80091fe:	f7fe fba4 	bl	800794a <HAL_I2C_SlaveTxCpltCallback>
 8009202:	e00c      	b.n	800921e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009204:	7cfb      	ldrb	r3, [r7, #19]
 8009206:	2b2a      	cmp	r3, #42	@ 0x2a
 8009208:	d109      	bne.n	800921e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	2222      	movs	r2, #34	@ 0x22
 800920e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	2228      	movs	r2, #40	@ 0x28
 8009214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009218:	6978      	ldr	r0, [r7, #20]
 800921a:	f7fe fba0 	bl	800795e <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	685a      	ldr	r2, [r3, #4]
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800922c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800922e:	e06a      	b.n	8009306 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009236:	b2db      	uxtb	r3, r3
 8009238:	2b00      	cmp	r3, #0
 800923a:	d064      	beq.n	8009306 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009240:	b29b      	uxth	r3, r3
 8009242:	2b01      	cmp	r3, #1
 8009244:	d107      	bne.n	8009256 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009254:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	685a      	ldr	r2, [r3, #4]
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8009264:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800926c:	d009      	beq.n	8009282 <I2C_DMAXferCplt+0x11e>
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2b08      	cmp	r3, #8
 8009272:	d006      	beq.n	8009282 <I2C_DMAXferCplt+0x11e>
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800927a:	d002      	beq.n	8009282 <I2C_DMAXferCplt+0x11e>
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2b20      	cmp	r3, #32
 8009280:	d107      	bne.n	8009292 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009290:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	685a      	ldr	r2, [r3, #4]
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80092a0:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	685a      	ldr	r2, [r3, #4]
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80092b0:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	2200      	movs	r2, #0
 80092b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d003      	beq.n	80092c8 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80092c0:	6978      	ldr	r0, [r7, #20]
 80092c2:	f7fe fb78 	bl	80079b6 <HAL_I2C_ErrorCallback>
}
 80092c6:	e01e      	b.n	8009306 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	2220      	movs	r2, #32
 80092cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	2b40      	cmp	r3, #64	@ 0x40
 80092da:	d10a      	bne.n	80092f2 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	2200      	movs	r2, #0
 80092e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	2200      	movs	r2, #0
 80092e8:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80092ea:	6978      	ldr	r0, [r7, #20]
 80092ec:	f7f9 f8c8 	bl	8002480 <HAL_I2C_MemRxCpltCallback>
}
 80092f0:	e009      	b.n	8009306 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	2200      	movs	r2, #0
 80092f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	2212      	movs	r2, #18
 80092fe:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8009300:	6978      	ldr	r0, [r7, #20]
 8009302:	f7fe fb18 	bl	8007936 <HAL_I2C_MasterRxCpltCallback>
}
 8009306:	bf00      	nop
 8009308:	3718      	adds	r7, #24
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b084      	sub	sp, #16
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800931a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009320:	2b00      	cmp	r3, #0
 8009322:	d003      	beq.n	800932c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009328:	2200      	movs	r2, #0
 800932a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009330:	2b00      	cmp	r3, #0
 8009332:	d003      	beq.n	800933c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009338:	2200      	movs	r2, #0
 800933a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f7fc fca1 	bl	8005c84 <HAL_DMA_GetError>
 8009342:	4603      	mov	r3, r0
 8009344:	2b02      	cmp	r3, #2
 8009346:	d01b      	beq.n	8009380 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009356:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2200      	movs	r2, #0
 800935c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2220      	movs	r2, #32
 8009362:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2200      	movs	r2, #0
 800936a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009372:	f043 0210 	orr.w	r2, r3, #16
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	f7fe fb1b 	bl	80079b6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009380:	bf00      	nop
 8009382:	3710      	adds	r7, #16
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b086      	sub	sp, #24
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009390:	2300      	movs	r3, #0
 8009392:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009398:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093a0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80093a2:	4b4b      	ldr	r3, [pc, #300]	@ (80094d0 <I2C_DMAAbort+0x148>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	08db      	lsrs	r3, r3, #3
 80093a8:	4a4a      	ldr	r2, [pc, #296]	@ (80094d4 <I2C_DMAAbort+0x14c>)
 80093aa:	fba2 2303 	umull	r2, r3, r2, r3
 80093ae:	0a1a      	lsrs	r2, r3, #8
 80093b0:	4613      	mov	r3, r2
 80093b2:	009b      	lsls	r3, r3, #2
 80093b4:	4413      	add	r3, r2
 80093b6:	00da      	lsls	r2, r3, #3
 80093b8:	1ad3      	subs	r3, r2, r3
 80093ba:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d106      	bne.n	80093d0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093c6:	f043 0220 	orr.w	r2, r3, #32
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80093ce:	e00a      	b.n	80093e6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	3b01      	subs	r3, #1
 80093d4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80093e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093e4:	d0ea      	beq.n	80093bc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d003      	beq.n	80093f6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093f2:	2200      	movs	r2, #0
 80093f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d003      	beq.n	8009406 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009402:	2200      	movs	r2, #0
 8009404:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009414:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	2200      	movs	r2, #0
 800941a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009420:	2b00      	cmp	r3, #0
 8009422:	d003      	beq.n	800942c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009428:	2200      	movs	r2, #0
 800942a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009430:	2b00      	cmp	r3, #0
 8009432:	d003      	beq.n	800943c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009438:	2200      	movs	r2, #0
 800943a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f022 0201 	bic.w	r2, r2, #1
 800944a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009452:	b2db      	uxtb	r3, r3
 8009454:	2b60      	cmp	r3, #96	@ 0x60
 8009456:	d10e      	bne.n	8009476 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	2220      	movs	r2, #32
 800945c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	2200      	movs	r2, #0
 8009464:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	2200      	movs	r2, #0
 800946c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800946e:	6978      	ldr	r0, [r7, #20]
 8009470:	f7fe faab 	bl	80079ca <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009474:	e027      	b.n	80094c6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009476:	7cfb      	ldrb	r3, [r7, #19]
 8009478:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800947c:	2b28      	cmp	r3, #40	@ 0x28
 800947e:	d117      	bne.n	80094b0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f042 0201 	orr.w	r2, r2, #1
 800948e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800949e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	2200      	movs	r2, #0
 80094a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	2228      	movs	r2, #40	@ 0x28
 80094aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80094ae:	e007      	b.n	80094c0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	2220      	movs	r2, #32
 80094b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	2200      	movs	r2, #0
 80094bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80094c0:	6978      	ldr	r0, [r7, #20]
 80094c2:	f7fe fa78 	bl	80079b6 <HAL_I2C_ErrorCallback>
}
 80094c6:	bf00      	nop
 80094c8:	3718      	adds	r7, #24
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop
 80094d0:	20000004 	.word	0x20000004
 80094d4:	14f8b589 	.word	0x14f8b589

080094d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	603b      	str	r3, [r7, #0]
 80094e4:	4613      	mov	r3, r2
 80094e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80094e8:	e025      	b.n	8009536 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094f0:	d021      	beq.n	8009536 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094f2:	f7fb fa49 	bl	8004988 <HAL_GetTick>
 80094f6:	4602      	mov	r2, r0
 80094f8:	69bb      	ldr	r3, [r7, #24]
 80094fa:	1ad3      	subs	r3, r2, r3
 80094fc:	683a      	ldr	r2, [r7, #0]
 80094fe:	429a      	cmp	r2, r3
 8009500:	d302      	bcc.n	8009508 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d116      	bne.n	8009536 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2200      	movs	r2, #0
 800950c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2220      	movs	r2, #32
 8009512:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2200      	movs	r2, #0
 800951a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009522:	f043 0220 	orr.w	r2, r3, #32
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2200      	movs	r2, #0
 800952e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009532:	2301      	movs	r3, #1
 8009534:	e023      	b.n	800957e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	0c1b      	lsrs	r3, r3, #16
 800953a:	b2db      	uxtb	r3, r3
 800953c:	2b01      	cmp	r3, #1
 800953e:	d10d      	bne.n	800955c <I2C_WaitOnFlagUntilTimeout+0x84>
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	695b      	ldr	r3, [r3, #20]
 8009546:	43da      	mvns	r2, r3
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	4013      	ands	r3, r2
 800954c:	b29b      	uxth	r3, r3
 800954e:	2b00      	cmp	r3, #0
 8009550:	bf0c      	ite	eq
 8009552:	2301      	moveq	r3, #1
 8009554:	2300      	movne	r3, #0
 8009556:	b2db      	uxtb	r3, r3
 8009558:	461a      	mov	r2, r3
 800955a:	e00c      	b.n	8009576 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	699b      	ldr	r3, [r3, #24]
 8009562:	43da      	mvns	r2, r3
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	4013      	ands	r3, r2
 8009568:	b29b      	uxth	r3, r3
 800956a:	2b00      	cmp	r3, #0
 800956c:	bf0c      	ite	eq
 800956e:	2301      	moveq	r3, #1
 8009570:	2300      	movne	r3, #0
 8009572:	b2db      	uxtb	r3, r3
 8009574:	461a      	mov	r2, r3
 8009576:	79fb      	ldrb	r3, [r7, #7]
 8009578:	429a      	cmp	r2, r3
 800957a:	d0b6      	beq.n	80094ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800957c:	2300      	movs	r3, #0
}
 800957e:	4618      	mov	r0, r3
 8009580:	3710      	adds	r7, #16
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}

08009586 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009586:	b580      	push	{r7, lr}
 8009588:	b084      	sub	sp, #16
 800958a:	af00      	add	r7, sp, #0
 800958c:	60f8      	str	r0, [r7, #12]
 800958e:	60b9      	str	r1, [r7, #8]
 8009590:	607a      	str	r2, [r7, #4]
 8009592:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009594:	e051      	b.n	800963a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	695b      	ldr	r3, [r3, #20]
 800959c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095a4:	d123      	bne.n	80095ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80095b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80095be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2200      	movs	r2, #0
 80095c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2220      	movs	r2, #32
 80095ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2200      	movs	r2, #0
 80095d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095da:	f043 0204 	orr.w	r2, r3, #4
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2200      	movs	r2, #0
 80095e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80095ea:	2301      	movs	r3, #1
 80095ec:	e046      	b.n	800967c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095f4:	d021      	beq.n	800963a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095f6:	f7fb f9c7 	bl	8004988 <HAL_GetTick>
 80095fa:	4602      	mov	r2, r0
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	1ad3      	subs	r3, r2, r3
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	429a      	cmp	r2, r3
 8009604:	d302      	bcc.n	800960c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d116      	bne.n	800963a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2200      	movs	r2, #0
 8009610:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2220      	movs	r2, #32
 8009616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2200      	movs	r2, #0
 800961e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009626:	f043 0220 	orr.w	r2, r3, #32
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2200      	movs	r2, #0
 8009632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009636:	2301      	movs	r3, #1
 8009638:	e020      	b.n	800967c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	0c1b      	lsrs	r3, r3, #16
 800963e:	b2db      	uxtb	r3, r3
 8009640:	2b01      	cmp	r3, #1
 8009642:	d10c      	bne.n	800965e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	695b      	ldr	r3, [r3, #20]
 800964a:	43da      	mvns	r2, r3
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	4013      	ands	r3, r2
 8009650:	b29b      	uxth	r3, r3
 8009652:	2b00      	cmp	r3, #0
 8009654:	bf14      	ite	ne
 8009656:	2301      	movne	r3, #1
 8009658:	2300      	moveq	r3, #0
 800965a:	b2db      	uxtb	r3, r3
 800965c:	e00b      	b.n	8009676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	699b      	ldr	r3, [r3, #24]
 8009664:	43da      	mvns	r2, r3
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	4013      	ands	r3, r2
 800966a:	b29b      	uxth	r3, r3
 800966c:	2b00      	cmp	r3, #0
 800966e:	bf14      	ite	ne
 8009670:	2301      	movne	r3, #1
 8009672:	2300      	moveq	r3, #0
 8009674:	b2db      	uxtb	r3, r3
 8009676:	2b00      	cmp	r3, #0
 8009678:	d18d      	bne.n	8009596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	3710      	adds	r7, #16
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	60f8      	str	r0, [r7, #12]
 800968c:	60b9      	str	r1, [r7, #8]
 800968e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009690:	e02d      	b.n	80096ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009692:	68f8      	ldr	r0, [r7, #12]
 8009694:	f000 f900 	bl	8009898 <I2C_IsAcknowledgeFailed>
 8009698:	4603      	mov	r3, r0
 800969a:	2b00      	cmp	r3, #0
 800969c:	d001      	beq.n	80096a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800969e:	2301      	movs	r3, #1
 80096a0:	e02d      	b.n	80096fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096a8:	d021      	beq.n	80096ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096aa:	f7fb f96d 	bl	8004988 <HAL_GetTick>
 80096ae:	4602      	mov	r2, r0
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	1ad3      	subs	r3, r2, r3
 80096b4:	68ba      	ldr	r2, [r7, #8]
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d302      	bcc.n	80096c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d116      	bne.n	80096ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2200      	movs	r2, #0
 80096c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2220      	movs	r2, #32
 80096ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2200      	movs	r2, #0
 80096d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096da:	f043 0220 	orr.w	r2, r3, #32
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	e007      	b.n	80096fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	695b      	ldr	r3, [r3, #20]
 80096f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096f8:	2b80      	cmp	r3, #128	@ 0x80
 80096fa:	d1ca      	bne.n	8009692 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80096fc:	2300      	movs	r3, #0
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3710      	adds	r7, #16
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}

08009706 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009706:	b580      	push	{r7, lr}
 8009708:	b084      	sub	sp, #16
 800970a:	af00      	add	r7, sp, #0
 800970c:	60f8      	str	r0, [r7, #12]
 800970e:	60b9      	str	r1, [r7, #8]
 8009710:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009712:	e02d      	b.n	8009770 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009714:	68f8      	ldr	r0, [r7, #12]
 8009716:	f000 f8bf 	bl	8009898 <I2C_IsAcknowledgeFailed>
 800971a:	4603      	mov	r3, r0
 800971c:	2b00      	cmp	r3, #0
 800971e:	d001      	beq.n	8009724 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009720:	2301      	movs	r3, #1
 8009722:	e02d      	b.n	8009780 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800972a:	d021      	beq.n	8009770 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800972c:	f7fb f92c 	bl	8004988 <HAL_GetTick>
 8009730:	4602      	mov	r2, r0
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	1ad3      	subs	r3, r2, r3
 8009736:	68ba      	ldr	r2, [r7, #8]
 8009738:	429a      	cmp	r2, r3
 800973a:	d302      	bcc.n	8009742 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d116      	bne.n	8009770 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2200      	movs	r2, #0
 8009746:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2220      	movs	r2, #32
 800974c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2200      	movs	r2, #0
 8009754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800975c:	f043 0220 	orr.w	r2, r3, #32
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2200      	movs	r2, #0
 8009768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800976c:	2301      	movs	r3, #1
 800976e:	e007      	b.n	8009780 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	695b      	ldr	r3, [r3, #20]
 8009776:	f003 0304 	and.w	r3, r3, #4
 800977a:	2b04      	cmp	r3, #4
 800977c:	d1ca      	bne.n	8009714 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800977e:	2300      	movs	r3, #0
}
 8009780:	4618      	mov	r0, r3
 8009782:	3710      	adds	r7, #16
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8009788:	b480      	push	{r7}
 800978a:	b085      	sub	sp, #20
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009790:	2300      	movs	r3, #0
 8009792:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8009794:	4b13      	ldr	r3, [pc, #76]	@ (80097e4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	08db      	lsrs	r3, r3, #3
 800979a:	4a13      	ldr	r2, [pc, #76]	@ (80097e8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800979c:	fba2 2303 	umull	r2, r3, r2, r3
 80097a0:	0a1a      	lsrs	r2, r3, #8
 80097a2:	4613      	mov	r3, r2
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	4413      	add	r3, r2
 80097a8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	3b01      	subs	r3, #1
 80097ae:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d107      	bne.n	80097c6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097ba:	f043 0220 	orr.w	r2, r3, #32
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80097c2:	2301      	movs	r3, #1
 80097c4:	e008      	b.n	80097d8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80097d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097d4:	d0e9      	beq.n	80097aa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80097d6:	2300      	movs	r3, #0
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3714      	adds	r7, #20
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr
 80097e4:	20000004 	.word	0x20000004
 80097e8:	14f8b589 	.word	0x14f8b589

080097ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	60f8      	str	r0, [r7, #12]
 80097f4:	60b9      	str	r1, [r7, #8]
 80097f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80097f8:	e042      	b.n	8009880 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	695b      	ldr	r3, [r3, #20]
 8009800:	f003 0310 	and.w	r3, r3, #16
 8009804:	2b10      	cmp	r3, #16
 8009806:	d119      	bne.n	800983c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f06f 0210 	mvn.w	r2, #16
 8009810:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2200      	movs	r2, #0
 8009816:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2220      	movs	r2, #32
 800981c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2200      	movs	r2, #0
 8009824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2200      	movs	r2, #0
 8009834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009838:	2301      	movs	r3, #1
 800983a:	e029      	b.n	8009890 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800983c:	f7fb f8a4 	bl	8004988 <HAL_GetTick>
 8009840:	4602      	mov	r2, r0
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	1ad3      	subs	r3, r2, r3
 8009846:	68ba      	ldr	r2, [r7, #8]
 8009848:	429a      	cmp	r2, r3
 800984a:	d302      	bcc.n	8009852 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d116      	bne.n	8009880 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2200      	movs	r2, #0
 8009856:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2220      	movs	r2, #32
 800985c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2200      	movs	r2, #0
 8009864:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800986c:	f043 0220 	orr.w	r2, r3, #32
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2200      	movs	r2, #0
 8009878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800987c:	2301      	movs	r3, #1
 800987e:	e007      	b.n	8009890 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	695b      	ldr	r3, [r3, #20]
 8009886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800988a:	2b40      	cmp	r3, #64	@ 0x40
 800988c:	d1b5      	bne.n	80097fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800988e:	2300      	movs	r3, #0
}
 8009890:	4618      	mov	r0, r3
 8009892:	3710      	adds	r7, #16
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	695b      	ldr	r3, [r3, #20]
 80098a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80098aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098ae:	d11b      	bne.n	80098e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80098b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2200      	movs	r2, #0
 80098be:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2220      	movs	r2, #32
 80098c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098d4:	f043 0204 	orr.w	r2, r3, #4
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2200      	movs	r2, #0
 80098e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80098e4:	2301      	movs	r3, #1
 80098e6:	e000      	b.n	80098ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80098e8:	2300      	movs	r3, #0
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	370c      	adds	r7, #12
 80098ee:	46bd      	mov	sp, r7
 80098f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f4:	4770      	bx	lr

080098f6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80098f6:	b480      	push	{r7}
 80098f8:	b083      	sub	sp, #12
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009902:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8009906:	d103      	bne.n	8009910 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2201      	movs	r2, #1
 800990c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800990e:	e007      	b.n	8009920 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009914:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8009918:	d102      	bne.n	8009920 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2208      	movs	r2, #8
 800991e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8009920:	bf00      	nop
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr

0800992c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d101      	bne.n	8009940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800993c:	2301      	movs	r3, #1
 800993e:	e0cc      	b.n	8009ada <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009940:	4b68      	ldr	r3, [pc, #416]	@ (8009ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f003 030f 	and.w	r3, r3, #15
 8009948:	683a      	ldr	r2, [r7, #0]
 800994a:	429a      	cmp	r2, r3
 800994c:	d90c      	bls.n	8009968 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800994e:	4b65      	ldr	r3, [pc, #404]	@ (8009ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8009950:	683a      	ldr	r2, [r7, #0]
 8009952:	b2d2      	uxtb	r2, r2
 8009954:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009956:	4b63      	ldr	r3, [pc, #396]	@ (8009ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f003 030f 	and.w	r3, r3, #15
 800995e:	683a      	ldr	r2, [r7, #0]
 8009960:	429a      	cmp	r2, r3
 8009962:	d001      	beq.n	8009968 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009964:	2301      	movs	r3, #1
 8009966:	e0b8      	b.n	8009ada <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f003 0302 	and.w	r3, r3, #2
 8009970:	2b00      	cmp	r3, #0
 8009972:	d020      	beq.n	80099b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f003 0304 	and.w	r3, r3, #4
 800997c:	2b00      	cmp	r3, #0
 800997e:	d005      	beq.n	800998c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009980:	4b59      	ldr	r3, [pc, #356]	@ (8009ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8009982:	689b      	ldr	r3, [r3, #8]
 8009984:	4a58      	ldr	r2, [pc, #352]	@ (8009ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8009986:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800998a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f003 0308 	and.w	r3, r3, #8
 8009994:	2b00      	cmp	r3, #0
 8009996:	d005      	beq.n	80099a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009998:	4b53      	ldr	r3, [pc, #332]	@ (8009ae8 <HAL_RCC_ClockConfig+0x1bc>)
 800999a:	689b      	ldr	r3, [r3, #8]
 800999c:	4a52      	ldr	r2, [pc, #328]	@ (8009ae8 <HAL_RCC_ClockConfig+0x1bc>)
 800999e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80099a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80099a4:	4b50      	ldr	r3, [pc, #320]	@ (8009ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	494d      	ldr	r1, [pc, #308]	@ (8009ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80099b2:	4313      	orrs	r3, r2
 80099b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f003 0301 	and.w	r3, r3, #1
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d044      	beq.n	8009a4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d107      	bne.n	80099da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80099ca:	4b47      	ldr	r3, [pc, #284]	@ (8009ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d119      	bne.n	8009a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80099d6:	2301      	movs	r3, #1
 80099d8:	e07f      	b.n	8009ada <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	2b02      	cmp	r3, #2
 80099e0:	d003      	beq.n	80099ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80099e6:	2b03      	cmp	r3, #3
 80099e8:	d107      	bne.n	80099fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80099ea:	4b3f      	ldr	r3, [pc, #252]	@ (8009ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d109      	bne.n	8009a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80099f6:	2301      	movs	r3, #1
 80099f8:	e06f      	b.n	8009ada <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099fa:	4b3b      	ldr	r3, [pc, #236]	@ (8009ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f003 0302 	and.w	r3, r3, #2
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d101      	bne.n	8009a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009a06:	2301      	movs	r3, #1
 8009a08:	e067      	b.n	8009ada <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009a0a:	4b37      	ldr	r3, [pc, #220]	@ (8009ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8009a0c:	689b      	ldr	r3, [r3, #8]
 8009a0e:	f023 0203 	bic.w	r2, r3, #3
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	4934      	ldr	r1, [pc, #208]	@ (8009ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009a1c:	f7fa ffb4 	bl	8004988 <HAL_GetTick>
 8009a20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a22:	e00a      	b.n	8009a3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a24:	f7fa ffb0 	bl	8004988 <HAL_GetTick>
 8009a28:	4602      	mov	r2, r0
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	1ad3      	subs	r3, r2, r3
 8009a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d901      	bls.n	8009a3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009a36:	2303      	movs	r3, #3
 8009a38:	e04f      	b.n	8009ada <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a3a:	4b2b      	ldr	r3, [pc, #172]	@ (8009ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8009a3c:	689b      	ldr	r3, [r3, #8]
 8009a3e:	f003 020c 	and.w	r2, r3, #12
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d1eb      	bne.n	8009a24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009a4c:	4b25      	ldr	r3, [pc, #148]	@ (8009ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f003 030f 	and.w	r3, r3, #15
 8009a54:	683a      	ldr	r2, [r7, #0]
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d20c      	bcs.n	8009a74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a5a:	4b22      	ldr	r3, [pc, #136]	@ (8009ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8009a5c:	683a      	ldr	r2, [r7, #0]
 8009a5e:	b2d2      	uxtb	r2, r2
 8009a60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a62:	4b20      	ldr	r3, [pc, #128]	@ (8009ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f003 030f 	and.w	r3, r3, #15
 8009a6a:	683a      	ldr	r2, [r7, #0]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d001      	beq.n	8009a74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009a70:	2301      	movs	r3, #1
 8009a72:	e032      	b.n	8009ada <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f003 0304 	and.w	r3, r3, #4
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d008      	beq.n	8009a92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009a80:	4b19      	ldr	r3, [pc, #100]	@ (8009ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	4916      	ldr	r1, [pc, #88]	@ (8009ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f003 0308 	and.w	r3, r3, #8
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d009      	beq.n	8009ab2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009a9e:	4b12      	ldr	r3, [pc, #72]	@ (8009ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	691b      	ldr	r3, [r3, #16]
 8009aaa:	00db      	lsls	r3, r3, #3
 8009aac:	490e      	ldr	r1, [pc, #56]	@ (8009ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009ab2:	f000 f887 	bl	8009bc4 <HAL_RCC_GetSysClockFreq>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8009ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	091b      	lsrs	r3, r3, #4
 8009abe:	f003 030f 	and.w	r3, r3, #15
 8009ac2:	490a      	ldr	r1, [pc, #40]	@ (8009aec <HAL_RCC_ClockConfig+0x1c0>)
 8009ac4:	5ccb      	ldrb	r3, [r1, r3]
 8009ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8009aca:	4a09      	ldr	r2, [pc, #36]	@ (8009af0 <HAL_RCC_ClockConfig+0x1c4>)
 8009acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009ace:	4b09      	ldr	r3, [pc, #36]	@ (8009af4 <HAL_RCC_ClockConfig+0x1c8>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7fa fd16 	bl	8004504 <HAL_InitTick>

  return HAL_OK;
 8009ad8:	2300      	movs	r3, #0
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3710      	adds	r7, #16
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	40023c00 	.word	0x40023c00
 8009ae8:	40023800 	.word	0x40023800
 8009aec:	08016fe8 	.word	0x08016fe8
 8009af0:	20000004 	.word	0x20000004
 8009af4:	20000008 	.word	0x20000008

08009af8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009af8:	b480      	push	{r7}
 8009afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009afc:	4b03      	ldr	r3, [pc, #12]	@ (8009b0c <HAL_RCC_GetHCLKFreq+0x14>)
 8009afe:	681b      	ldr	r3, [r3, #0]
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr
 8009b0a:	bf00      	nop
 8009b0c:	20000004 	.word	0x20000004

08009b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009b14:	f7ff fff0 	bl	8009af8 <HAL_RCC_GetHCLKFreq>
 8009b18:	4602      	mov	r2, r0
 8009b1a:	4b05      	ldr	r3, [pc, #20]	@ (8009b30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009b1c:	689b      	ldr	r3, [r3, #8]
 8009b1e:	0a9b      	lsrs	r3, r3, #10
 8009b20:	f003 0307 	and.w	r3, r3, #7
 8009b24:	4903      	ldr	r1, [pc, #12]	@ (8009b34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009b26:	5ccb      	ldrb	r3, [r1, r3]
 8009b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	bd80      	pop	{r7, pc}
 8009b30:	40023800 	.word	0x40023800
 8009b34:	08016ff8 	.word	0x08016ff8

08009b38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009b3c:	f7ff ffdc 	bl	8009af8 <HAL_RCC_GetHCLKFreq>
 8009b40:	4602      	mov	r2, r0
 8009b42:	4b05      	ldr	r3, [pc, #20]	@ (8009b58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	0b5b      	lsrs	r3, r3, #13
 8009b48:	f003 0307 	and.w	r3, r3, #7
 8009b4c:	4903      	ldr	r1, [pc, #12]	@ (8009b5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009b4e:	5ccb      	ldrb	r3, [r1, r3]
 8009b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	40023800 	.word	0x40023800
 8009b5c:	08016ff8 	.word	0x08016ff8

08009b60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b083      	sub	sp, #12
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	220f      	movs	r2, #15
 8009b6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009b70:	4b12      	ldr	r3, [pc, #72]	@ (8009bbc <HAL_RCC_GetClockConfig+0x5c>)
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	f003 0203 	and.w	r2, r3, #3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8009bbc <HAL_RCC_GetClockConfig+0x5c>)
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009b88:	4b0c      	ldr	r3, [pc, #48]	@ (8009bbc <HAL_RCC_GetClockConfig+0x5c>)
 8009b8a:	689b      	ldr	r3, [r3, #8]
 8009b8c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009b94:	4b09      	ldr	r3, [pc, #36]	@ (8009bbc <HAL_RCC_GetClockConfig+0x5c>)
 8009b96:	689b      	ldr	r3, [r3, #8]
 8009b98:	08db      	lsrs	r3, r3, #3
 8009b9a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009ba2:	4b07      	ldr	r3, [pc, #28]	@ (8009bc0 <HAL_RCC_GetClockConfig+0x60>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f003 020f 	and.w	r2, r3, #15
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	601a      	str	r2, [r3, #0]
}
 8009bae:	bf00      	nop
 8009bb0:	370c      	adds	r7, #12
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr
 8009bba:	bf00      	nop
 8009bbc:	40023800 	.word	0x40023800
 8009bc0:	40023c00 	.word	0x40023c00

08009bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009bc8:	b0ae      	sub	sp, #184	@ 0xb8
 8009bca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8009bde:	2300      	movs	r3, #0
 8009be0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8009be4:	2300      	movs	r3, #0
 8009be6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009bea:	4bcb      	ldr	r3, [pc, #812]	@ (8009f18 <HAL_RCC_GetSysClockFreq+0x354>)
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	f003 030c 	and.w	r3, r3, #12
 8009bf2:	2b0c      	cmp	r3, #12
 8009bf4:	f200 8204 	bhi.w	800a000 <HAL_RCC_GetSysClockFreq+0x43c>
 8009bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8009c00 <HAL_RCC_GetSysClockFreq+0x3c>)
 8009bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bfe:	bf00      	nop
 8009c00:	08009c35 	.word	0x08009c35
 8009c04:	0800a001 	.word	0x0800a001
 8009c08:	0800a001 	.word	0x0800a001
 8009c0c:	0800a001 	.word	0x0800a001
 8009c10:	08009c3d 	.word	0x08009c3d
 8009c14:	0800a001 	.word	0x0800a001
 8009c18:	0800a001 	.word	0x0800a001
 8009c1c:	0800a001 	.word	0x0800a001
 8009c20:	08009c45 	.word	0x08009c45
 8009c24:	0800a001 	.word	0x0800a001
 8009c28:	0800a001 	.word	0x0800a001
 8009c2c:	0800a001 	.word	0x0800a001
 8009c30:	08009e35 	.word	0x08009e35
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009c34:	4bb9      	ldr	r3, [pc, #740]	@ (8009f1c <HAL_RCC_GetSysClockFreq+0x358>)
 8009c36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8009c3a:	e1e5      	b.n	800a008 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009c3c:	4bb7      	ldr	r3, [pc, #732]	@ (8009f1c <HAL_RCC_GetSysClockFreq+0x358>)
 8009c3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009c42:	e1e1      	b.n	800a008 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009c44:	4bb4      	ldr	r3, [pc, #720]	@ (8009f18 <HAL_RCC_GetSysClockFreq+0x354>)
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009c4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009c50:	4bb1      	ldr	r3, [pc, #708]	@ (8009f18 <HAL_RCC_GetSysClockFreq+0x354>)
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d071      	beq.n	8009d40 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009c5c:	4bae      	ldr	r3, [pc, #696]	@ (8009f18 <HAL_RCC_GetSysClockFreq+0x354>)
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	099b      	lsrs	r3, r3, #6
 8009c62:	2200      	movs	r2, #0
 8009c64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009c68:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8009c6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009c70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c74:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009c78:	2300      	movs	r3, #0
 8009c7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009c7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009c82:	4622      	mov	r2, r4
 8009c84:	462b      	mov	r3, r5
 8009c86:	f04f 0000 	mov.w	r0, #0
 8009c8a:	f04f 0100 	mov.w	r1, #0
 8009c8e:	0159      	lsls	r1, r3, #5
 8009c90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009c94:	0150      	lsls	r0, r2, #5
 8009c96:	4602      	mov	r2, r0
 8009c98:	460b      	mov	r3, r1
 8009c9a:	4621      	mov	r1, r4
 8009c9c:	1a51      	subs	r1, r2, r1
 8009c9e:	6439      	str	r1, [r7, #64]	@ 0x40
 8009ca0:	4629      	mov	r1, r5
 8009ca2:	eb63 0301 	sbc.w	r3, r3, r1
 8009ca6:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ca8:	f04f 0200 	mov.w	r2, #0
 8009cac:	f04f 0300 	mov.w	r3, #0
 8009cb0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8009cb4:	4649      	mov	r1, r9
 8009cb6:	018b      	lsls	r3, r1, #6
 8009cb8:	4641      	mov	r1, r8
 8009cba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009cbe:	4641      	mov	r1, r8
 8009cc0:	018a      	lsls	r2, r1, #6
 8009cc2:	4641      	mov	r1, r8
 8009cc4:	1a51      	subs	r1, r2, r1
 8009cc6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009cc8:	4649      	mov	r1, r9
 8009cca:	eb63 0301 	sbc.w	r3, r3, r1
 8009cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009cd0:	f04f 0200 	mov.w	r2, #0
 8009cd4:	f04f 0300 	mov.w	r3, #0
 8009cd8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8009cdc:	4649      	mov	r1, r9
 8009cde:	00cb      	lsls	r3, r1, #3
 8009ce0:	4641      	mov	r1, r8
 8009ce2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ce6:	4641      	mov	r1, r8
 8009ce8:	00ca      	lsls	r2, r1, #3
 8009cea:	4610      	mov	r0, r2
 8009cec:	4619      	mov	r1, r3
 8009cee:	4603      	mov	r3, r0
 8009cf0:	4622      	mov	r2, r4
 8009cf2:	189b      	adds	r3, r3, r2
 8009cf4:	633b      	str	r3, [r7, #48]	@ 0x30
 8009cf6:	462b      	mov	r3, r5
 8009cf8:	460a      	mov	r2, r1
 8009cfa:	eb42 0303 	adc.w	r3, r2, r3
 8009cfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d00:	f04f 0200 	mov.w	r2, #0
 8009d04:	f04f 0300 	mov.w	r3, #0
 8009d08:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009d0c:	4629      	mov	r1, r5
 8009d0e:	028b      	lsls	r3, r1, #10
 8009d10:	4621      	mov	r1, r4
 8009d12:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009d16:	4621      	mov	r1, r4
 8009d18:	028a      	lsls	r2, r1, #10
 8009d1a:	4610      	mov	r0, r2
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d22:	2200      	movs	r2, #0
 8009d24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009d28:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009d2c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8009d30:	f7f6 ffaa 	bl	8000c88 <__aeabi_uldivmod>
 8009d34:	4602      	mov	r2, r0
 8009d36:	460b      	mov	r3, r1
 8009d38:	4613      	mov	r3, r2
 8009d3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009d3e:	e067      	b.n	8009e10 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009d40:	4b75      	ldr	r3, [pc, #468]	@ (8009f18 <HAL_RCC_GetSysClockFreq+0x354>)
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	099b      	lsrs	r3, r3, #6
 8009d46:	2200      	movs	r2, #0
 8009d48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009d4c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8009d50:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009d54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d58:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009d5e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8009d62:	4622      	mov	r2, r4
 8009d64:	462b      	mov	r3, r5
 8009d66:	f04f 0000 	mov.w	r0, #0
 8009d6a:	f04f 0100 	mov.w	r1, #0
 8009d6e:	0159      	lsls	r1, r3, #5
 8009d70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009d74:	0150      	lsls	r0, r2, #5
 8009d76:	4602      	mov	r2, r0
 8009d78:	460b      	mov	r3, r1
 8009d7a:	4621      	mov	r1, r4
 8009d7c:	1a51      	subs	r1, r2, r1
 8009d7e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009d80:	4629      	mov	r1, r5
 8009d82:	eb63 0301 	sbc.w	r3, r3, r1
 8009d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d88:	f04f 0200 	mov.w	r2, #0
 8009d8c:	f04f 0300 	mov.w	r3, #0
 8009d90:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8009d94:	4649      	mov	r1, r9
 8009d96:	018b      	lsls	r3, r1, #6
 8009d98:	4641      	mov	r1, r8
 8009d9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009d9e:	4641      	mov	r1, r8
 8009da0:	018a      	lsls	r2, r1, #6
 8009da2:	4641      	mov	r1, r8
 8009da4:	ebb2 0a01 	subs.w	sl, r2, r1
 8009da8:	4649      	mov	r1, r9
 8009daa:	eb63 0b01 	sbc.w	fp, r3, r1
 8009dae:	f04f 0200 	mov.w	r2, #0
 8009db2:	f04f 0300 	mov.w	r3, #0
 8009db6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009dba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009dbe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009dc2:	4692      	mov	sl, r2
 8009dc4:	469b      	mov	fp, r3
 8009dc6:	4623      	mov	r3, r4
 8009dc8:	eb1a 0303 	adds.w	r3, sl, r3
 8009dcc:	623b      	str	r3, [r7, #32]
 8009dce:	462b      	mov	r3, r5
 8009dd0:	eb4b 0303 	adc.w	r3, fp, r3
 8009dd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8009dd6:	f04f 0200 	mov.w	r2, #0
 8009dda:	f04f 0300 	mov.w	r3, #0
 8009dde:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8009de2:	4629      	mov	r1, r5
 8009de4:	028b      	lsls	r3, r1, #10
 8009de6:	4621      	mov	r1, r4
 8009de8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009dec:	4621      	mov	r1, r4
 8009dee:	028a      	lsls	r2, r1, #10
 8009df0:	4610      	mov	r0, r2
 8009df2:	4619      	mov	r1, r3
 8009df4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009df8:	2200      	movs	r2, #0
 8009dfa:	673b      	str	r3, [r7, #112]	@ 0x70
 8009dfc:	677a      	str	r2, [r7, #116]	@ 0x74
 8009dfe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8009e02:	f7f6 ff41 	bl	8000c88 <__aeabi_uldivmod>
 8009e06:	4602      	mov	r2, r0
 8009e08:	460b      	mov	r3, r1
 8009e0a:	4613      	mov	r3, r2
 8009e0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009e10:	4b41      	ldr	r3, [pc, #260]	@ (8009f18 <HAL_RCC_GetSysClockFreq+0x354>)
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	0c1b      	lsrs	r3, r3, #16
 8009e16:	f003 0303 	and.w	r3, r3, #3
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	005b      	lsls	r3, r3, #1
 8009e1e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8009e22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009e26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009e32:	e0e9      	b.n	800a008 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009e34:	4b38      	ldr	r3, [pc, #224]	@ (8009f18 <HAL_RCC_GetSysClockFreq+0x354>)
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009e3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009e40:	4b35      	ldr	r3, [pc, #212]	@ (8009f18 <HAL_RCC_GetSysClockFreq+0x354>)
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d069      	beq.n	8009f20 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009e4c:	4b32      	ldr	r3, [pc, #200]	@ (8009f18 <HAL_RCC_GetSysClockFreq+0x354>)
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	099b      	lsrs	r3, r3, #6
 8009e52:	2200      	movs	r2, #0
 8009e54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009e58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e5e:	663b      	str	r3, [r7, #96]	@ 0x60
 8009e60:	2300      	movs	r3, #0
 8009e62:	667b      	str	r3, [r7, #100]	@ 0x64
 8009e64:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8009e68:	4622      	mov	r2, r4
 8009e6a:	462b      	mov	r3, r5
 8009e6c:	f04f 0000 	mov.w	r0, #0
 8009e70:	f04f 0100 	mov.w	r1, #0
 8009e74:	0159      	lsls	r1, r3, #5
 8009e76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009e7a:	0150      	lsls	r0, r2, #5
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	460b      	mov	r3, r1
 8009e80:	4621      	mov	r1, r4
 8009e82:	1a51      	subs	r1, r2, r1
 8009e84:	61b9      	str	r1, [r7, #24]
 8009e86:	4629      	mov	r1, r5
 8009e88:	eb63 0301 	sbc.w	r3, r3, r1
 8009e8c:	61fb      	str	r3, [r7, #28]
 8009e8e:	f04f 0200 	mov.w	r2, #0
 8009e92:	f04f 0300 	mov.w	r3, #0
 8009e96:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8009e9a:	4659      	mov	r1, fp
 8009e9c:	018b      	lsls	r3, r1, #6
 8009e9e:	4651      	mov	r1, sl
 8009ea0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009ea4:	4651      	mov	r1, sl
 8009ea6:	018a      	lsls	r2, r1, #6
 8009ea8:	4651      	mov	r1, sl
 8009eaa:	ebb2 0801 	subs.w	r8, r2, r1
 8009eae:	4659      	mov	r1, fp
 8009eb0:	eb63 0901 	sbc.w	r9, r3, r1
 8009eb4:	f04f 0200 	mov.w	r2, #0
 8009eb8:	f04f 0300 	mov.w	r3, #0
 8009ebc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009ec0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009ec4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009ec8:	4690      	mov	r8, r2
 8009eca:	4699      	mov	r9, r3
 8009ecc:	4623      	mov	r3, r4
 8009ece:	eb18 0303 	adds.w	r3, r8, r3
 8009ed2:	613b      	str	r3, [r7, #16]
 8009ed4:	462b      	mov	r3, r5
 8009ed6:	eb49 0303 	adc.w	r3, r9, r3
 8009eda:	617b      	str	r3, [r7, #20]
 8009edc:	f04f 0200 	mov.w	r2, #0
 8009ee0:	f04f 0300 	mov.w	r3, #0
 8009ee4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8009ee8:	4629      	mov	r1, r5
 8009eea:	028b      	lsls	r3, r1, #10
 8009eec:	4621      	mov	r1, r4
 8009eee:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009ef2:	4621      	mov	r1, r4
 8009ef4:	028a      	lsls	r2, r1, #10
 8009ef6:	4610      	mov	r0, r2
 8009ef8:	4619      	mov	r1, r3
 8009efa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009efe:	2200      	movs	r2, #0
 8009f00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009f02:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8009f04:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009f08:	f7f6 febe 	bl	8000c88 <__aeabi_uldivmod>
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	460b      	mov	r3, r1
 8009f10:	4613      	mov	r3, r2
 8009f12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009f16:	e063      	b.n	8009fe0 <HAL_RCC_GetSysClockFreq+0x41c>
 8009f18:	40023800 	.word	0x40023800
 8009f1c:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009f20:	4b3d      	ldr	r3, [pc, #244]	@ (800a018 <HAL_RCC_GetSysClockFreq+0x454>)
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	099b      	lsrs	r3, r3, #6
 8009f26:	2200      	movs	r2, #0
 8009f28:	4618      	mov	r0, r3
 8009f2a:	4611      	mov	r1, r2
 8009f2c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009f30:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f32:	2300      	movs	r3, #0
 8009f34:	657b      	str	r3, [r7, #84]	@ 0x54
 8009f36:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8009f3a:	4642      	mov	r2, r8
 8009f3c:	464b      	mov	r3, r9
 8009f3e:	f04f 0000 	mov.w	r0, #0
 8009f42:	f04f 0100 	mov.w	r1, #0
 8009f46:	0159      	lsls	r1, r3, #5
 8009f48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009f4c:	0150      	lsls	r0, r2, #5
 8009f4e:	4602      	mov	r2, r0
 8009f50:	460b      	mov	r3, r1
 8009f52:	4641      	mov	r1, r8
 8009f54:	1a51      	subs	r1, r2, r1
 8009f56:	60b9      	str	r1, [r7, #8]
 8009f58:	4649      	mov	r1, r9
 8009f5a:	eb63 0301 	sbc.w	r3, r3, r1
 8009f5e:	60fb      	str	r3, [r7, #12]
 8009f60:	f04f 0200 	mov.w	r2, #0
 8009f64:	f04f 0300 	mov.w	r3, #0
 8009f68:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8009f6c:	4659      	mov	r1, fp
 8009f6e:	018b      	lsls	r3, r1, #6
 8009f70:	4651      	mov	r1, sl
 8009f72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009f76:	4651      	mov	r1, sl
 8009f78:	018a      	lsls	r2, r1, #6
 8009f7a:	4651      	mov	r1, sl
 8009f7c:	1a54      	subs	r4, r2, r1
 8009f7e:	4659      	mov	r1, fp
 8009f80:	eb63 0501 	sbc.w	r5, r3, r1
 8009f84:	f04f 0200 	mov.w	r2, #0
 8009f88:	f04f 0300 	mov.w	r3, #0
 8009f8c:	00eb      	lsls	r3, r5, #3
 8009f8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009f92:	00e2      	lsls	r2, r4, #3
 8009f94:	4614      	mov	r4, r2
 8009f96:	461d      	mov	r5, r3
 8009f98:	4643      	mov	r3, r8
 8009f9a:	18e3      	adds	r3, r4, r3
 8009f9c:	603b      	str	r3, [r7, #0]
 8009f9e:	464b      	mov	r3, r9
 8009fa0:	eb45 0303 	adc.w	r3, r5, r3
 8009fa4:	607b      	str	r3, [r7, #4]
 8009fa6:	f04f 0200 	mov.w	r2, #0
 8009faa:	f04f 0300 	mov.w	r3, #0
 8009fae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009fb2:	4629      	mov	r1, r5
 8009fb4:	028b      	lsls	r3, r1, #10
 8009fb6:	4621      	mov	r1, r4
 8009fb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009fbc:	4621      	mov	r1, r4
 8009fbe:	028a      	lsls	r2, r1, #10
 8009fc0:	4610      	mov	r0, r2
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009fc8:	2200      	movs	r2, #0
 8009fca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009fcc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009fce:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009fd2:	f7f6 fe59 	bl	8000c88 <__aeabi_uldivmod>
 8009fd6:	4602      	mov	r2, r0
 8009fd8:	460b      	mov	r3, r1
 8009fda:	4613      	mov	r3, r2
 8009fdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8009fe0:	4b0d      	ldr	r3, [pc, #52]	@ (800a018 <HAL_RCC_GetSysClockFreq+0x454>)
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	0f1b      	lsrs	r3, r3, #28
 8009fe6:	f003 0307 	and.w	r3, r3, #7
 8009fea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8009fee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009ff2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ffa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009ffe:	e003      	b.n	800a008 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a000:	4b06      	ldr	r3, [pc, #24]	@ (800a01c <HAL_RCC_GetSysClockFreq+0x458>)
 800a002:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800a006:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a008:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	37b8      	adds	r7, #184	@ 0xb8
 800a010:	46bd      	mov	sp, r7
 800a012:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a016:	bf00      	nop
 800a018:	40023800 	.word	0x40023800
 800a01c:	00f42400 	.word	0x00f42400

0800a020 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b086      	sub	sp, #24
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d101      	bne.n	800a032 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a02e:	2301      	movs	r3, #1
 800a030:	e28d      	b.n	800a54e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f003 0301 	and.w	r3, r3, #1
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	f000 8083 	beq.w	800a146 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a040:	4b94      	ldr	r3, [pc, #592]	@ (800a294 <HAL_RCC_OscConfig+0x274>)
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	f003 030c 	and.w	r3, r3, #12
 800a048:	2b04      	cmp	r3, #4
 800a04a:	d019      	beq.n	800a080 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800a04c:	4b91      	ldr	r3, [pc, #580]	@ (800a294 <HAL_RCC_OscConfig+0x274>)
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a054:	2b08      	cmp	r3, #8
 800a056:	d106      	bne.n	800a066 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800a058:	4b8e      	ldr	r3, [pc, #568]	@ (800a294 <HAL_RCC_OscConfig+0x274>)
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a060:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a064:	d00c      	beq.n	800a080 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a066:	4b8b      	ldr	r3, [pc, #556]	@ (800a294 <HAL_RCC_OscConfig+0x274>)
 800a068:	689b      	ldr	r3, [r3, #8]
 800a06a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800a06e:	2b0c      	cmp	r3, #12
 800a070:	d112      	bne.n	800a098 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a072:	4b88      	ldr	r3, [pc, #544]	@ (800a294 <HAL_RCC_OscConfig+0x274>)
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a07a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a07e:	d10b      	bne.n	800a098 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a080:	4b84      	ldr	r3, [pc, #528]	@ (800a294 <HAL_RCC_OscConfig+0x274>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d05b      	beq.n	800a144 <HAL_RCC_OscConfig+0x124>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d157      	bne.n	800a144 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800a094:	2301      	movs	r3, #1
 800a096:	e25a      	b.n	800a54e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0a0:	d106      	bne.n	800a0b0 <HAL_RCC_OscConfig+0x90>
 800a0a2:	4b7c      	ldr	r3, [pc, #496]	@ (800a294 <HAL_RCC_OscConfig+0x274>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4a7b      	ldr	r2, [pc, #492]	@ (800a294 <HAL_RCC_OscConfig+0x274>)
 800a0a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a0ac:	6013      	str	r3, [r2, #0]
 800a0ae:	e01d      	b.n	800a0ec <HAL_RCC_OscConfig+0xcc>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a0b8:	d10c      	bne.n	800a0d4 <HAL_RCC_OscConfig+0xb4>
 800a0ba:	4b76      	ldr	r3, [pc, #472]	@ (800a294 <HAL_RCC_OscConfig+0x274>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4a75      	ldr	r2, [pc, #468]	@ (800a294 <HAL_RCC_OscConfig+0x274>)
 800a0c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a0c4:	6013      	str	r3, [r2, #0]
 800a0c6:	4b73      	ldr	r3, [pc, #460]	@ (800a294 <HAL_RCC_OscConfig+0x274>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4a72      	ldr	r2, [pc, #456]	@ (800a294 <HAL_RCC_OscConfig+0x274>)
 800a0cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a0d0:	6013      	str	r3, [r2, #0]
 800a0d2:	e00b      	b.n	800a0ec <HAL_RCC_OscConfig+0xcc>
 800a0d4:	4b6f      	ldr	r3, [pc, #444]	@ (800a294 <HAL_RCC_OscConfig+0x274>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4a6e      	ldr	r2, [pc, #440]	@ (800a294 <HAL_RCC_OscConfig+0x274>)
 800a0da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a0de:	6013      	str	r3, [r2, #0]
 800a0e0:	4b6c      	ldr	r3, [pc, #432]	@ (800a294 <HAL_RCC_OscConfig+0x274>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a6b      	ldr	r2, [pc, #428]	@ (800a294 <HAL_RCC_OscConfig+0x274>)
 800a0e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a0ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d013      	beq.n	800a11c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0f4:	f7fa fc48 	bl	8004988 <HAL_GetTick>
 800a0f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a0fa:	e008      	b.n	800a10e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a0fc:	f7fa fc44 	bl	8004988 <HAL_GetTick>
 800a100:	4602      	mov	r2, r0
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	1ad3      	subs	r3, r2, r3
 800a106:	2b64      	cmp	r3, #100	@ 0x64
 800a108:	d901      	bls.n	800a10e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800a10a:	2303      	movs	r3, #3
 800a10c:	e21f      	b.n	800a54e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a10e:	4b61      	ldr	r3, [pc, #388]	@ (800a294 <HAL_RCC_OscConfig+0x274>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a116:	2b00      	cmp	r3, #0
 800a118:	d0f0      	beq.n	800a0fc <HAL_RCC_OscConfig+0xdc>
 800a11a:	e014      	b.n	800a146 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a11c:	f7fa fc34 	bl	8004988 <HAL_GetTick>
 800a120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a122:	e008      	b.n	800a136 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a124:	f7fa fc30 	bl	8004988 <HAL_GetTick>
 800a128:	4602      	mov	r2, r0
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	1ad3      	subs	r3, r2, r3
 800a12e:	2b64      	cmp	r3, #100	@ 0x64
 800a130:	d901      	bls.n	800a136 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800a132:	2303      	movs	r3, #3
 800a134:	e20b      	b.n	800a54e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a136:	4b57      	ldr	r3, [pc, #348]	@ (800a294 <HAL_RCC_OscConfig+0x274>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d1f0      	bne.n	800a124 <HAL_RCC_OscConfig+0x104>
 800a142:	e000      	b.n	800a146 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a144:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f003 0302 	and.w	r3, r3, #2
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d06f      	beq.n	800a232 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a152:	4b50      	ldr	r3, [pc, #320]	@ (800a294 <HAL_RCC_OscConfig+0x274>)
 800a154:	689b      	ldr	r3, [r3, #8]
 800a156:	f003 030c 	and.w	r3, r3, #12
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d017      	beq.n	800a18e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800a15e:	4b4d      	ldr	r3, [pc, #308]	@ (800a294 <HAL_RCC_OscConfig+0x274>)
 800a160:	689b      	ldr	r3, [r3, #8]
 800a162:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a166:	2b08      	cmp	r3, #8
 800a168:	d105      	bne.n	800a176 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800a16a:	4b4a      	ldr	r3, [pc, #296]	@ (800a294 <HAL_RCC_OscConfig+0x274>)
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a172:	2b00      	cmp	r3, #0
 800a174:	d00b      	beq.n	800a18e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a176:	4b47      	ldr	r3, [pc, #284]	@ (800a294 <HAL_RCC_OscConfig+0x274>)
 800a178:	689b      	ldr	r3, [r3, #8]
 800a17a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800a17e:	2b0c      	cmp	r3, #12
 800a180:	d11c      	bne.n	800a1bc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a182:	4b44      	ldr	r3, [pc, #272]	@ (800a294 <HAL_RCC_OscConfig+0x274>)
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d116      	bne.n	800a1bc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a18e:	4b41      	ldr	r3, [pc, #260]	@ (800a294 <HAL_RCC_OscConfig+0x274>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f003 0302 	and.w	r3, r3, #2
 800a196:	2b00      	cmp	r3, #0
 800a198:	d005      	beq.n	800a1a6 <HAL_RCC_OscConfig+0x186>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d001      	beq.n	800a1a6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	e1d3      	b.n	800a54e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1a6:	4b3b      	ldr	r3, [pc, #236]	@ (800a294 <HAL_RCC_OscConfig+0x274>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	691b      	ldr	r3, [r3, #16]
 800a1b2:	00db      	lsls	r3, r3, #3
 800a1b4:	4937      	ldr	r1, [pc, #220]	@ (800a294 <HAL_RCC_OscConfig+0x274>)
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a1ba:	e03a      	b.n	800a232 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	68db      	ldr	r3, [r3, #12]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d020      	beq.n	800a206 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a1c4:	4b34      	ldr	r3, [pc, #208]	@ (800a298 <HAL_RCC_OscConfig+0x278>)
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1ca:	f7fa fbdd 	bl	8004988 <HAL_GetTick>
 800a1ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a1d0:	e008      	b.n	800a1e4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a1d2:	f7fa fbd9 	bl	8004988 <HAL_GetTick>
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	1ad3      	subs	r3, r2, r3
 800a1dc:	2b02      	cmp	r3, #2
 800a1de:	d901      	bls.n	800a1e4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800a1e0:	2303      	movs	r3, #3
 800a1e2:	e1b4      	b.n	800a54e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a1e4:	4b2b      	ldr	r3, [pc, #172]	@ (800a294 <HAL_RCC_OscConfig+0x274>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f003 0302 	and.w	r3, r3, #2
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d0f0      	beq.n	800a1d2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1f0:	4b28      	ldr	r3, [pc, #160]	@ (800a294 <HAL_RCC_OscConfig+0x274>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	691b      	ldr	r3, [r3, #16]
 800a1fc:	00db      	lsls	r3, r3, #3
 800a1fe:	4925      	ldr	r1, [pc, #148]	@ (800a294 <HAL_RCC_OscConfig+0x274>)
 800a200:	4313      	orrs	r3, r2
 800a202:	600b      	str	r3, [r1, #0]
 800a204:	e015      	b.n	800a232 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a206:	4b24      	ldr	r3, [pc, #144]	@ (800a298 <HAL_RCC_OscConfig+0x278>)
 800a208:	2200      	movs	r2, #0
 800a20a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a20c:	f7fa fbbc 	bl	8004988 <HAL_GetTick>
 800a210:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a212:	e008      	b.n	800a226 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a214:	f7fa fbb8 	bl	8004988 <HAL_GetTick>
 800a218:	4602      	mov	r2, r0
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	1ad3      	subs	r3, r2, r3
 800a21e:	2b02      	cmp	r3, #2
 800a220:	d901      	bls.n	800a226 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a222:	2303      	movs	r3, #3
 800a224:	e193      	b.n	800a54e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a226:	4b1b      	ldr	r3, [pc, #108]	@ (800a294 <HAL_RCC_OscConfig+0x274>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f003 0302 	and.w	r3, r3, #2
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d1f0      	bne.n	800a214 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f003 0308 	and.w	r3, r3, #8
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d036      	beq.n	800a2ac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	695b      	ldr	r3, [r3, #20]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d016      	beq.n	800a274 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a246:	4b15      	ldr	r3, [pc, #84]	@ (800a29c <HAL_RCC_OscConfig+0x27c>)
 800a248:	2201      	movs	r2, #1
 800a24a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a24c:	f7fa fb9c 	bl	8004988 <HAL_GetTick>
 800a250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a252:	e008      	b.n	800a266 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a254:	f7fa fb98 	bl	8004988 <HAL_GetTick>
 800a258:	4602      	mov	r2, r0
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	1ad3      	subs	r3, r2, r3
 800a25e:	2b02      	cmp	r3, #2
 800a260:	d901      	bls.n	800a266 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800a262:	2303      	movs	r3, #3
 800a264:	e173      	b.n	800a54e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a266:	4b0b      	ldr	r3, [pc, #44]	@ (800a294 <HAL_RCC_OscConfig+0x274>)
 800a268:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a26a:	f003 0302 	and.w	r3, r3, #2
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d0f0      	beq.n	800a254 <HAL_RCC_OscConfig+0x234>
 800a272:	e01b      	b.n	800a2ac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a274:	4b09      	ldr	r3, [pc, #36]	@ (800a29c <HAL_RCC_OscConfig+0x27c>)
 800a276:	2200      	movs	r2, #0
 800a278:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a27a:	f7fa fb85 	bl	8004988 <HAL_GetTick>
 800a27e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a280:	e00e      	b.n	800a2a0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a282:	f7fa fb81 	bl	8004988 <HAL_GetTick>
 800a286:	4602      	mov	r2, r0
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	1ad3      	subs	r3, r2, r3
 800a28c:	2b02      	cmp	r3, #2
 800a28e:	d907      	bls.n	800a2a0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800a290:	2303      	movs	r3, #3
 800a292:	e15c      	b.n	800a54e <HAL_RCC_OscConfig+0x52e>
 800a294:	40023800 	.word	0x40023800
 800a298:	42470000 	.word	0x42470000
 800a29c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a2a0:	4b8a      	ldr	r3, [pc, #552]	@ (800a4cc <HAL_RCC_OscConfig+0x4ac>)
 800a2a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2a4:	f003 0302 	and.w	r3, r3, #2
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d1ea      	bne.n	800a282 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f003 0304 	and.w	r3, r3, #4
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	f000 8097 	beq.w	800a3e8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a2be:	4b83      	ldr	r3, [pc, #524]	@ (800a4cc <HAL_RCC_OscConfig+0x4ac>)
 800a2c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d10f      	bne.n	800a2ea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	60bb      	str	r3, [r7, #8]
 800a2ce:	4b7f      	ldr	r3, [pc, #508]	@ (800a4cc <HAL_RCC_OscConfig+0x4ac>)
 800a2d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2d2:	4a7e      	ldr	r2, [pc, #504]	@ (800a4cc <HAL_RCC_OscConfig+0x4ac>)
 800a2d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a2d8:	6413      	str	r3, [r2, #64]	@ 0x40
 800a2da:	4b7c      	ldr	r3, [pc, #496]	@ (800a4cc <HAL_RCC_OscConfig+0x4ac>)
 800a2dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a2e2:	60bb      	str	r3, [r7, #8]
 800a2e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a2ea:	4b79      	ldr	r3, [pc, #484]	@ (800a4d0 <HAL_RCC_OscConfig+0x4b0>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d118      	bne.n	800a328 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a2f6:	4b76      	ldr	r3, [pc, #472]	@ (800a4d0 <HAL_RCC_OscConfig+0x4b0>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4a75      	ldr	r2, [pc, #468]	@ (800a4d0 <HAL_RCC_OscConfig+0x4b0>)
 800a2fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a300:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a302:	f7fa fb41 	bl	8004988 <HAL_GetTick>
 800a306:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a308:	e008      	b.n	800a31c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a30a:	f7fa fb3d 	bl	8004988 <HAL_GetTick>
 800a30e:	4602      	mov	r2, r0
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	1ad3      	subs	r3, r2, r3
 800a314:	2b02      	cmp	r3, #2
 800a316:	d901      	bls.n	800a31c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800a318:	2303      	movs	r3, #3
 800a31a:	e118      	b.n	800a54e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a31c:	4b6c      	ldr	r3, [pc, #432]	@ (800a4d0 <HAL_RCC_OscConfig+0x4b0>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a324:	2b00      	cmp	r3, #0
 800a326:	d0f0      	beq.n	800a30a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	689b      	ldr	r3, [r3, #8]
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d106      	bne.n	800a33e <HAL_RCC_OscConfig+0x31e>
 800a330:	4b66      	ldr	r3, [pc, #408]	@ (800a4cc <HAL_RCC_OscConfig+0x4ac>)
 800a332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a334:	4a65      	ldr	r2, [pc, #404]	@ (800a4cc <HAL_RCC_OscConfig+0x4ac>)
 800a336:	f043 0301 	orr.w	r3, r3, #1
 800a33a:	6713      	str	r3, [r2, #112]	@ 0x70
 800a33c:	e01c      	b.n	800a378 <HAL_RCC_OscConfig+0x358>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	689b      	ldr	r3, [r3, #8]
 800a342:	2b05      	cmp	r3, #5
 800a344:	d10c      	bne.n	800a360 <HAL_RCC_OscConfig+0x340>
 800a346:	4b61      	ldr	r3, [pc, #388]	@ (800a4cc <HAL_RCC_OscConfig+0x4ac>)
 800a348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a34a:	4a60      	ldr	r2, [pc, #384]	@ (800a4cc <HAL_RCC_OscConfig+0x4ac>)
 800a34c:	f043 0304 	orr.w	r3, r3, #4
 800a350:	6713      	str	r3, [r2, #112]	@ 0x70
 800a352:	4b5e      	ldr	r3, [pc, #376]	@ (800a4cc <HAL_RCC_OscConfig+0x4ac>)
 800a354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a356:	4a5d      	ldr	r2, [pc, #372]	@ (800a4cc <HAL_RCC_OscConfig+0x4ac>)
 800a358:	f043 0301 	orr.w	r3, r3, #1
 800a35c:	6713      	str	r3, [r2, #112]	@ 0x70
 800a35e:	e00b      	b.n	800a378 <HAL_RCC_OscConfig+0x358>
 800a360:	4b5a      	ldr	r3, [pc, #360]	@ (800a4cc <HAL_RCC_OscConfig+0x4ac>)
 800a362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a364:	4a59      	ldr	r2, [pc, #356]	@ (800a4cc <HAL_RCC_OscConfig+0x4ac>)
 800a366:	f023 0301 	bic.w	r3, r3, #1
 800a36a:	6713      	str	r3, [r2, #112]	@ 0x70
 800a36c:	4b57      	ldr	r3, [pc, #348]	@ (800a4cc <HAL_RCC_OscConfig+0x4ac>)
 800a36e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a370:	4a56      	ldr	r2, [pc, #344]	@ (800a4cc <HAL_RCC_OscConfig+0x4ac>)
 800a372:	f023 0304 	bic.w	r3, r3, #4
 800a376:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	689b      	ldr	r3, [r3, #8]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d015      	beq.n	800a3ac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a380:	f7fa fb02 	bl	8004988 <HAL_GetTick>
 800a384:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a386:	e00a      	b.n	800a39e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a388:	f7fa fafe 	bl	8004988 <HAL_GetTick>
 800a38c:	4602      	mov	r2, r0
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	1ad3      	subs	r3, r2, r3
 800a392:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a396:	4293      	cmp	r3, r2
 800a398:	d901      	bls.n	800a39e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800a39a:	2303      	movs	r3, #3
 800a39c:	e0d7      	b.n	800a54e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a39e:	4b4b      	ldr	r3, [pc, #300]	@ (800a4cc <HAL_RCC_OscConfig+0x4ac>)
 800a3a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3a2:	f003 0302 	and.w	r3, r3, #2
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d0ee      	beq.n	800a388 <HAL_RCC_OscConfig+0x368>
 800a3aa:	e014      	b.n	800a3d6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3ac:	f7fa faec 	bl	8004988 <HAL_GetTick>
 800a3b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a3b2:	e00a      	b.n	800a3ca <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a3b4:	f7fa fae8 	bl	8004988 <HAL_GetTick>
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	1ad3      	subs	r3, r2, r3
 800a3be:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d901      	bls.n	800a3ca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800a3c6:	2303      	movs	r3, #3
 800a3c8:	e0c1      	b.n	800a54e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a3ca:	4b40      	ldr	r3, [pc, #256]	@ (800a4cc <HAL_RCC_OscConfig+0x4ac>)
 800a3cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3ce:	f003 0302 	and.w	r3, r3, #2
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d1ee      	bne.n	800a3b4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a3d6:	7dfb      	ldrb	r3, [r7, #23]
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	d105      	bne.n	800a3e8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a3dc:	4b3b      	ldr	r3, [pc, #236]	@ (800a4cc <HAL_RCC_OscConfig+0x4ac>)
 800a3de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3e0:	4a3a      	ldr	r2, [pc, #232]	@ (800a4cc <HAL_RCC_OscConfig+0x4ac>)
 800a3e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a3e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	699b      	ldr	r3, [r3, #24]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	f000 80ad 	beq.w	800a54c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a3f2:	4b36      	ldr	r3, [pc, #216]	@ (800a4cc <HAL_RCC_OscConfig+0x4ac>)
 800a3f4:	689b      	ldr	r3, [r3, #8]
 800a3f6:	f003 030c 	and.w	r3, r3, #12
 800a3fa:	2b08      	cmp	r3, #8
 800a3fc:	d060      	beq.n	800a4c0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	699b      	ldr	r3, [r3, #24]
 800a402:	2b02      	cmp	r3, #2
 800a404:	d145      	bne.n	800a492 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a406:	4b33      	ldr	r3, [pc, #204]	@ (800a4d4 <HAL_RCC_OscConfig+0x4b4>)
 800a408:	2200      	movs	r2, #0
 800a40a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a40c:	f7fa fabc 	bl	8004988 <HAL_GetTick>
 800a410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a412:	e008      	b.n	800a426 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a414:	f7fa fab8 	bl	8004988 <HAL_GetTick>
 800a418:	4602      	mov	r2, r0
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	1ad3      	subs	r3, r2, r3
 800a41e:	2b02      	cmp	r3, #2
 800a420:	d901      	bls.n	800a426 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800a422:	2303      	movs	r3, #3
 800a424:	e093      	b.n	800a54e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a426:	4b29      	ldr	r3, [pc, #164]	@ (800a4cc <HAL_RCC_OscConfig+0x4ac>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d1f0      	bne.n	800a414 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	69da      	ldr	r2, [r3, #28]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6a1b      	ldr	r3, [r3, #32]
 800a43a:	431a      	orrs	r2, r3
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a440:	019b      	lsls	r3, r3, #6
 800a442:	431a      	orrs	r2, r3
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a448:	085b      	lsrs	r3, r3, #1
 800a44a:	3b01      	subs	r3, #1
 800a44c:	041b      	lsls	r3, r3, #16
 800a44e:	431a      	orrs	r2, r3
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a454:	061b      	lsls	r3, r3, #24
 800a456:	431a      	orrs	r2, r3
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a45c:	071b      	lsls	r3, r3, #28
 800a45e:	491b      	ldr	r1, [pc, #108]	@ (800a4cc <HAL_RCC_OscConfig+0x4ac>)
 800a460:	4313      	orrs	r3, r2
 800a462:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a464:	4b1b      	ldr	r3, [pc, #108]	@ (800a4d4 <HAL_RCC_OscConfig+0x4b4>)
 800a466:	2201      	movs	r2, #1
 800a468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a46a:	f7fa fa8d 	bl	8004988 <HAL_GetTick>
 800a46e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a470:	e008      	b.n	800a484 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a472:	f7fa fa89 	bl	8004988 <HAL_GetTick>
 800a476:	4602      	mov	r2, r0
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	1ad3      	subs	r3, r2, r3
 800a47c:	2b02      	cmp	r3, #2
 800a47e:	d901      	bls.n	800a484 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800a480:	2303      	movs	r3, #3
 800a482:	e064      	b.n	800a54e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a484:	4b11      	ldr	r3, [pc, #68]	@ (800a4cc <HAL_RCC_OscConfig+0x4ac>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d0f0      	beq.n	800a472 <HAL_RCC_OscConfig+0x452>
 800a490:	e05c      	b.n	800a54c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a492:	4b10      	ldr	r3, [pc, #64]	@ (800a4d4 <HAL_RCC_OscConfig+0x4b4>)
 800a494:	2200      	movs	r2, #0
 800a496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a498:	f7fa fa76 	bl	8004988 <HAL_GetTick>
 800a49c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a49e:	e008      	b.n	800a4b2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a4a0:	f7fa fa72 	bl	8004988 <HAL_GetTick>
 800a4a4:	4602      	mov	r2, r0
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	1ad3      	subs	r3, r2, r3
 800a4aa:	2b02      	cmp	r3, #2
 800a4ac:	d901      	bls.n	800a4b2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800a4ae:	2303      	movs	r3, #3
 800a4b0:	e04d      	b.n	800a54e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a4b2:	4b06      	ldr	r3, [pc, #24]	@ (800a4cc <HAL_RCC_OscConfig+0x4ac>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d1f0      	bne.n	800a4a0 <HAL_RCC_OscConfig+0x480>
 800a4be:	e045      	b.n	800a54c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	699b      	ldr	r3, [r3, #24]
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	d107      	bne.n	800a4d8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	e040      	b.n	800a54e <HAL_RCC_OscConfig+0x52e>
 800a4cc:	40023800 	.word	0x40023800
 800a4d0:	40007000 	.word	0x40007000
 800a4d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a4d8:	4b1f      	ldr	r3, [pc, #124]	@ (800a558 <HAL_RCC_OscConfig+0x538>)
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	699b      	ldr	r3, [r3, #24]
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d030      	beq.n	800a548 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d129      	bne.n	800a548 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d122      	bne.n	800a548 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a502:	68fa      	ldr	r2, [r7, #12]
 800a504:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a508:	4013      	ands	r3, r2
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a50e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a510:	4293      	cmp	r3, r2
 800a512:	d119      	bne.n	800a548 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a51e:	085b      	lsrs	r3, r3, #1
 800a520:	3b01      	subs	r3, #1
 800a522:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a524:	429a      	cmp	r2, r3
 800a526:	d10f      	bne.n	800a548 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a532:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a534:	429a      	cmp	r2, r3
 800a536:	d107      	bne.n	800a548 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a542:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a544:	429a      	cmp	r2, r3
 800a546:	d001      	beq.n	800a54c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800a548:	2301      	movs	r3, #1
 800a54a:	e000      	b.n	800a54e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800a54c:	2300      	movs	r3, #0
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3718      	adds	r7, #24
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
 800a556:	bf00      	nop
 800a558:	40023800 	.word	0x40023800

0800a55c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b082      	sub	sp, #8
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d101      	bne.n	800a56e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a56a:	2301      	movs	r3, #1
 800a56c:	e07b      	b.n	800a666 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a572:	2b00      	cmp	r3, #0
 800a574:	d108      	bne.n	800a588 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a57e:	d009      	beq.n	800a594 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2200      	movs	r2, #0
 800a584:	61da      	str	r2, [r3, #28]
 800a586:	e005      	b.n	800a594 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2200      	movs	r2, #0
 800a58c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2200      	movs	r2, #0
 800a592:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2200      	movs	r2, #0
 800a598:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d106      	bne.n	800a5b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f7f9 fd9e 	bl	80040f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2202      	movs	r2, #2
 800a5b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	681a      	ldr	r2, [r3, #0]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a5ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	689b      	ldr	r3, [r3, #8]
 800a5d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a5dc:	431a      	orrs	r2, r3
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a5e6:	431a      	orrs	r2, r3
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	691b      	ldr	r3, [r3, #16]
 800a5ec:	f003 0302 	and.w	r3, r3, #2
 800a5f0:	431a      	orrs	r2, r3
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	695b      	ldr	r3, [r3, #20]
 800a5f6:	f003 0301 	and.w	r3, r3, #1
 800a5fa:	431a      	orrs	r2, r3
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	699b      	ldr	r3, [r3, #24]
 800a600:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a604:	431a      	orrs	r2, r3
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	69db      	ldr	r3, [r3, #28]
 800a60a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a60e:	431a      	orrs	r2, r3
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6a1b      	ldr	r3, [r3, #32]
 800a614:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a618:	ea42 0103 	orr.w	r1, r2, r3
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a620:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	430a      	orrs	r2, r1
 800a62a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	699b      	ldr	r3, [r3, #24]
 800a630:	0c1b      	lsrs	r3, r3, #16
 800a632:	f003 0104 	and.w	r1, r3, #4
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a63a:	f003 0210 	and.w	r2, r3, #16
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	430a      	orrs	r2, r1
 800a644:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	69da      	ldr	r2, [r3, #28]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a654:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2200      	movs	r2, #0
 800a65a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2201      	movs	r2, #1
 800a660:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800a664:	2300      	movs	r3, #0
}
 800a666:	4618      	mov	r0, r3
 800a668:	3708      	adds	r7, #8
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}

0800a66e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a66e:	b580      	push	{r7, lr}
 800a670:	b088      	sub	sp, #32
 800a672:	af00      	add	r7, sp, #0
 800a674:	60f8      	str	r0, [r7, #12]
 800a676:	60b9      	str	r1, [r7, #8]
 800a678:	603b      	str	r3, [r7, #0]
 800a67a:	4613      	mov	r3, r2
 800a67c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a67e:	2300      	movs	r3, #0
 800a680:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a688:	2b01      	cmp	r3, #1
 800a68a:	d101      	bne.n	800a690 <HAL_SPI_Transmit+0x22>
 800a68c:	2302      	movs	r3, #2
 800a68e:	e126      	b.n	800a8de <HAL_SPI_Transmit+0x270>
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2201      	movs	r2, #1
 800a694:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a698:	f7fa f976 	bl	8004988 <HAL_GetTick>
 800a69c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a69e:	88fb      	ldrh	r3, [r7, #6]
 800a6a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	2b01      	cmp	r3, #1
 800a6ac:	d002      	beq.n	800a6b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a6ae:	2302      	movs	r3, #2
 800a6b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a6b2:	e10b      	b.n	800a8cc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d002      	beq.n	800a6c0 <HAL_SPI_Transmit+0x52>
 800a6ba:	88fb      	ldrh	r3, [r7, #6]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d102      	bne.n	800a6c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a6c4:	e102      	b.n	800a8cc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2203      	movs	r2, #3
 800a6ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	68ba      	ldr	r2, [r7, #8]
 800a6d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	88fa      	ldrh	r2, [r7, #6]
 800a6de:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	88fa      	ldrh	r2, [r7, #6]
 800a6e4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2200      	movs	r2, #0
 800a702:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	689b      	ldr	r3, [r3, #8]
 800a708:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a70c:	d10f      	bne.n	800a72e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	681a      	ldr	r2, [r3, #0]
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a71c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a72c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a738:	2b40      	cmp	r3, #64	@ 0x40
 800a73a:	d007      	beq.n	800a74c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	681a      	ldr	r2, [r3, #0]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a74a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a754:	d14b      	bne.n	800a7ee <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d002      	beq.n	800a764 <HAL_SPI_Transmit+0xf6>
 800a75e:	8afb      	ldrh	r3, [r7, #22]
 800a760:	2b01      	cmp	r3, #1
 800a762:	d13e      	bne.n	800a7e2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a768:	881a      	ldrh	r2, [r3, #0]
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a774:	1c9a      	adds	r2, r3, #2
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a77e:	b29b      	uxth	r3, r3
 800a780:	3b01      	subs	r3, #1
 800a782:	b29a      	uxth	r2, r3
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a788:	e02b      	b.n	800a7e2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	689b      	ldr	r3, [r3, #8]
 800a790:	f003 0302 	and.w	r3, r3, #2
 800a794:	2b02      	cmp	r3, #2
 800a796:	d112      	bne.n	800a7be <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a79c:	881a      	ldrh	r2, [r3, #0]
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7a8:	1c9a      	adds	r2, r3, #2
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	3b01      	subs	r3, #1
 800a7b6:	b29a      	uxth	r2, r3
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	86da      	strh	r2, [r3, #54]	@ 0x36
 800a7bc:	e011      	b.n	800a7e2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a7be:	f7fa f8e3 	bl	8004988 <HAL_GetTick>
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	69bb      	ldr	r3, [r7, #24]
 800a7c6:	1ad3      	subs	r3, r2, r3
 800a7c8:	683a      	ldr	r2, [r7, #0]
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d803      	bhi.n	800a7d6 <HAL_SPI_Transmit+0x168>
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7d4:	d102      	bne.n	800a7dc <HAL_SPI_Transmit+0x16e>
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d102      	bne.n	800a7e2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800a7dc:	2303      	movs	r3, #3
 800a7de:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a7e0:	e074      	b.n	800a8cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d1ce      	bne.n	800a78a <HAL_SPI_Transmit+0x11c>
 800a7ec:	e04c      	b.n	800a888 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d002      	beq.n	800a7fc <HAL_SPI_Transmit+0x18e>
 800a7f6:	8afb      	ldrh	r3, [r7, #22]
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d140      	bne.n	800a87e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	330c      	adds	r3, #12
 800a806:	7812      	ldrb	r2, [r2, #0]
 800a808:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a80e:	1c5a      	adds	r2, r3, #1
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a818:	b29b      	uxth	r3, r3
 800a81a:	3b01      	subs	r3, #1
 800a81c:	b29a      	uxth	r2, r3
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a822:	e02c      	b.n	800a87e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	689b      	ldr	r3, [r3, #8]
 800a82a:	f003 0302 	and.w	r3, r3, #2
 800a82e:	2b02      	cmp	r3, #2
 800a830:	d113      	bne.n	800a85a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	330c      	adds	r3, #12
 800a83c:	7812      	ldrb	r2, [r2, #0]
 800a83e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a844:	1c5a      	adds	r2, r3, #1
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a84e:	b29b      	uxth	r3, r3
 800a850:	3b01      	subs	r3, #1
 800a852:	b29a      	uxth	r2, r3
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	86da      	strh	r2, [r3, #54]	@ 0x36
 800a858:	e011      	b.n	800a87e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a85a:	f7fa f895 	bl	8004988 <HAL_GetTick>
 800a85e:	4602      	mov	r2, r0
 800a860:	69bb      	ldr	r3, [r7, #24]
 800a862:	1ad3      	subs	r3, r2, r3
 800a864:	683a      	ldr	r2, [r7, #0]
 800a866:	429a      	cmp	r2, r3
 800a868:	d803      	bhi.n	800a872 <HAL_SPI_Transmit+0x204>
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a870:	d102      	bne.n	800a878 <HAL_SPI_Transmit+0x20a>
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d102      	bne.n	800a87e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800a878:	2303      	movs	r3, #3
 800a87a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a87c:	e026      	b.n	800a8cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a882:	b29b      	uxth	r3, r3
 800a884:	2b00      	cmp	r3, #0
 800a886:	d1cd      	bne.n	800a824 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a888:	69ba      	ldr	r2, [r7, #24]
 800a88a:	6839      	ldr	r1, [r7, #0]
 800a88c:	68f8      	ldr	r0, [r7, #12]
 800a88e:	f000 fa55 	bl	800ad3c <SPI_EndRxTxTransaction>
 800a892:	4603      	mov	r3, r0
 800a894:	2b00      	cmp	r3, #0
 800a896:	d002      	beq.n	800a89e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	2220      	movs	r2, #32
 800a89c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	689b      	ldr	r3, [r3, #8]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d10a      	bne.n	800a8bc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	613b      	str	r3, [r7, #16]
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	68db      	ldr	r3, [r3, #12]
 800a8b0:	613b      	str	r3, [r7, #16]
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	689b      	ldr	r3, [r3, #8]
 800a8b8:	613b      	str	r3, [r7, #16]
 800a8ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d002      	beq.n	800a8ca <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	77fb      	strb	r3, [r7, #31]
 800a8c8:	e000      	b.n	800a8cc <HAL_SPI_Transmit+0x25e>
  }

error:
 800a8ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800a8dc:	7ffb      	ldrb	r3, [r7, #31]
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3720      	adds	r7, #32
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}

0800a8e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a8e6:	b580      	push	{r7, lr}
 800a8e8:	b08c      	sub	sp, #48	@ 0x30
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	60f8      	str	r0, [r7, #12]
 800a8ee:	60b9      	str	r1, [r7, #8]
 800a8f0:	607a      	str	r2, [r7, #4]
 800a8f2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a904:	2b01      	cmp	r3, #1
 800a906:	d101      	bne.n	800a90c <HAL_SPI_TransmitReceive+0x26>
 800a908:	2302      	movs	r3, #2
 800a90a:	e18a      	b.n	800ac22 <HAL_SPI_TransmitReceive+0x33c>
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	2201      	movs	r2, #1
 800a910:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a914:	f7fa f838 	bl	8004988 <HAL_GetTick>
 800a918:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a920:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a92a:	887b      	ldrh	r3, [r7, #2]
 800a92c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a92e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a932:	2b01      	cmp	r3, #1
 800a934:	d00f      	beq.n	800a956 <HAL_SPI_TransmitReceive+0x70>
 800a936:	69fb      	ldr	r3, [r7, #28]
 800a938:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a93c:	d107      	bne.n	800a94e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	689b      	ldr	r3, [r3, #8]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d103      	bne.n	800a94e <HAL_SPI_TransmitReceive+0x68>
 800a946:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a94a:	2b04      	cmp	r3, #4
 800a94c:	d003      	beq.n	800a956 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a94e:	2302      	movs	r3, #2
 800a950:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800a954:	e15b      	b.n	800ac0e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d005      	beq.n	800a968 <HAL_SPI_TransmitReceive+0x82>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d002      	beq.n	800a968 <HAL_SPI_TransmitReceive+0x82>
 800a962:	887b      	ldrh	r3, [r7, #2]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d103      	bne.n	800a970 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a968:	2301      	movs	r3, #1
 800a96a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800a96e:	e14e      	b.n	800ac0e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a976:	b2db      	uxtb	r3, r3
 800a978:	2b04      	cmp	r3, #4
 800a97a:	d003      	beq.n	800a984 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2205      	movs	r2, #5
 800a980:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2200      	movs	r2, #0
 800a988:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	687a      	ldr	r2, [r7, #4]
 800a98e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	887a      	ldrh	r2, [r7, #2]
 800a994:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	887a      	ldrh	r2, [r7, #2]
 800a99a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	68ba      	ldr	r2, [r7, #8]
 800a9a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	887a      	ldrh	r2, [r7, #2]
 800a9a6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	887a      	ldrh	r2, [r7, #2]
 800a9ac:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9c4:	2b40      	cmp	r3, #64	@ 0x40
 800a9c6:	d007      	beq.n	800a9d8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	681a      	ldr	r2, [r3, #0]
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a9d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a9e0:	d178      	bne.n	800aad4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d002      	beq.n	800a9f0 <HAL_SPI_TransmitReceive+0x10a>
 800a9ea:	8b7b      	ldrh	r3, [r7, #26]
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d166      	bne.n	800aabe <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9f4:	881a      	ldrh	r2, [r3, #0]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa00:	1c9a      	adds	r2, r3, #2
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aa0a:	b29b      	uxth	r3, r3
 800aa0c:	3b01      	subs	r3, #1
 800aa0e:	b29a      	uxth	r2, r3
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aa14:	e053      	b.n	800aabe <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	689b      	ldr	r3, [r3, #8]
 800aa1c:	f003 0302 	and.w	r3, r3, #2
 800aa20:	2b02      	cmp	r3, #2
 800aa22:	d11b      	bne.n	800aa5c <HAL_SPI_TransmitReceive+0x176>
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aa28:	b29b      	uxth	r3, r3
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d016      	beq.n	800aa5c <HAL_SPI_TransmitReceive+0x176>
 800aa2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d113      	bne.n	800aa5c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa38:	881a      	ldrh	r2, [r3, #0]
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa44:	1c9a      	adds	r2, r3, #2
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	3b01      	subs	r3, #1
 800aa52:	b29a      	uxth	r2, r3
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	689b      	ldr	r3, [r3, #8]
 800aa62:	f003 0301 	and.w	r3, r3, #1
 800aa66:	2b01      	cmp	r3, #1
 800aa68:	d119      	bne.n	800aa9e <HAL_SPI_TransmitReceive+0x1b8>
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d014      	beq.n	800aa9e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	68da      	ldr	r2, [r3, #12]
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa7e:	b292      	uxth	r2, r2
 800aa80:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa86:	1c9a      	adds	r2, r3, #2
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aa90:	b29b      	uxth	r3, r3
 800aa92:	3b01      	subs	r3, #1
 800aa94:	b29a      	uxth	r2, r3
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800aa9e:	f7f9 ff73 	bl	8004988 <HAL_GetTick>
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaa6:	1ad3      	subs	r3, r2, r3
 800aaa8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d807      	bhi.n	800aabe <HAL_SPI_TransmitReceive+0x1d8>
 800aaae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aab4:	d003      	beq.n	800aabe <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800aab6:	2303      	movs	r3, #3
 800aab8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800aabc:	e0a7      	b.n	800ac0e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d1a6      	bne.n	800aa16 <HAL_SPI_TransmitReceive+0x130>
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aacc:	b29b      	uxth	r3, r3
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d1a1      	bne.n	800aa16 <HAL_SPI_TransmitReceive+0x130>
 800aad2:	e07c      	b.n	800abce <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d002      	beq.n	800aae2 <HAL_SPI_TransmitReceive+0x1fc>
 800aadc:	8b7b      	ldrh	r3, [r7, #26]
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d16b      	bne.n	800abba <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	330c      	adds	r3, #12
 800aaec:	7812      	ldrb	r2, [r2, #0]
 800aaee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aaf4:	1c5a      	adds	r2, r3, #1
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	3b01      	subs	r3, #1
 800ab02:	b29a      	uxth	r2, r3
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ab08:	e057      	b.n	800abba <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	f003 0302 	and.w	r3, r3, #2
 800ab14:	2b02      	cmp	r3, #2
 800ab16:	d11c      	bne.n	800ab52 <HAL_SPI_TransmitReceive+0x26c>
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d017      	beq.n	800ab52 <HAL_SPI_TransmitReceive+0x26c>
 800ab22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d114      	bne.n	800ab52 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	330c      	adds	r3, #12
 800ab32:	7812      	ldrb	r2, [r2, #0]
 800ab34:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab3a:	1c5a      	adds	r2, r3, #1
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ab44:	b29b      	uxth	r3, r3
 800ab46:	3b01      	subs	r3, #1
 800ab48:	b29a      	uxth	r2, r3
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	689b      	ldr	r3, [r3, #8]
 800ab58:	f003 0301 	and.w	r3, r3, #1
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d119      	bne.n	800ab94 <HAL_SPI_TransmitReceive+0x2ae>
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ab64:	b29b      	uxth	r3, r3
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d014      	beq.n	800ab94 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	68da      	ldr	r2, [r3, #12]
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab74:	b2d2      	uxtb	r2, r2
 800ab76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab7c:	1c5a      	adds	r2, r3, #1
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	3b01      	subs	r3, #1
 800ab8a:	b29a      	uxth	r2, r3
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ab90:	2301      	movs	r3, #1
 800ab92:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ab94:	f7f9 fef8 	bl	8004988 <HAL_GetTick>
 800ab98:	4602      	mov	r2, r0
 800ab9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab9c:	1ad3      	subs	r3, r2, r3
 800ab9e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d803      	bhi.n	800abac <HAL_SPI_TransmitReceive+0x2c6>
 800aba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abaa:	d102      	bne.n	800abb2 <HAL_SPI_TransmitReceive+0x2cc>
 800abac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d103      	bne.n	800abba <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800abb2:	2303      	movs	r3, #3
 800abb4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800abb8:	e029      	b.n	800ac0e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d1a2      	bne.n	800ab0a <HAL_SPI_TransmitReceive+0x224>
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800abc8:	b29b      	uxth	r3, r3
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d19d      	bne.n	800ab0a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800abce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abd0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800abd2:	68f8      	ldr	r0, [r7, #12]
 800abd4:	f000 f8b2 	bl	800ad3c <SPI_EndRxTxTransaction>
 800abd8:	4603      	mov	r3, r0
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d006      	beq.n	800abec <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800abde:	2301      	movs	r3, #1
 800abe0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2220      	movs	r2, #32
 800abe8:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800abea:	e010      	b.n	800ac0e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	689b      	ldr	r3, [r3, #8]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d10b      	bne.n	800ac0c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800abf4:	2300      	movs	r3, #0
 800abf6:	617b      	str	r3, [r7, #20]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	68db      	ldr	r3, [r3, #12]
 800abfe:	617b      	str	r3, [r7, #20]
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	689b      	ldr	r3, [r3, #8]
 800ac06:	617b      	str	r3, [r7, #20]
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	e000      	b.n	800ac0e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ac0c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2201      	movs	r2, #1
 800ac12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800ac1e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3730      	adds	r7, #48	@ 0x30
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
	...

0800ac2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b088      	sub	sp, #32
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	60f8      	str	r0, [r7, #12]
 800ac34:	60b9      	str	r1, [r7, #8]
 800ac36:	603b      	str	r3, [r7, #0]
 800ac38:	4613      	mov	r3, r2
 800ac3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ac3c:	f7f9 fea4 	bl	8004988 <HAL_GetTick>
 800ac40:	4602      	mov	r2, r0
 800ac42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac44:	1a9b      	subs	r3, r3, r2
 800ac46:	683a      	ldr	r2, [r7, #0]
 800ac48:	4413      	add	r3, r2
 800ac4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ac4c:	f7f9 fe9c 	bl	8004988 <HAL_GetTick>
 800ac50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ac52:	4b39      	ldr	r3, [pc, #228]	@ (800ad38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	015b      	lsls	r3, r3, #5
 800ac58:	0d1b      	lsrs	r3, r3, #20
 800ac5a:	69fa      	ldr	r2, [r7, #28]
 800ac5c:	fb02 f303 	mul.w	r3, r2, r3
 800ac60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ac62:	e054      	b.n	800ad0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac6a:	d050      	beq.n	800ad0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ac6c:	f7f9 fe8c 	bl	8004988 <HAL_GetTick>
 800ac70:	4602      	mov	r2, r0
 800ac72:	69bb      	ldr	r3, [r7, #24]
 800ac74:	1ad3      	subs	r3, r2, r3
 800ac76:	69fa      	ldr	r2, [r7, #28]
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d902      	bls.n	800ac82 <SPI_WaitFlagStateUntilTimeout+0x56>
 800ac7c:	69fb      	ldr	r3, [r7, #28]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d13d      	bne.n	800acfe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	685a      	ldr	r2, [r3, #4]
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800ac90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ac9a:	d111      	bne.n	800acc0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	689b      	ldr	r3, [r3, #8]
 800aca0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aca4:	d004      	beq.n	800acb0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	689b      	ldr	r3, [r3, #8]
 800acaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800acae:	d107      	bne.n	800acc0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	681a      	ldr	r2, [r3, #0]
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800acbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800acc8:	d10f      	bne.n	800acea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	681a      	ldr	r2, [r3, #0]
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800acd8:	601a      	str	r2, [r3, #0]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	681a      	ldr	r2, [r3, #0]
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ace8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2201      	movs	r2, #1
 800acee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2200      	movs	r2, #0
 800acf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800acfa:	2303      	movs	r3, #3
 800acfc:	e017      	b.n	800ad2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d101      	bne.n	800ad08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ad04:	2300      	movs	r3, #0
 800ad06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	3b01      	subs	r3, #1
 800ad0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	689a      	ldr	r2, [r3, #8]
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	4013      	ands	r3, r2
 800ad18:	68ba      	ldr	r2, [r7, #8]
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	bf0c      	ite	eq
 800ad1e:	2301      	moveq	r3, #1
 800ad20:	2300      	movne	r3, #0
 800ad22:	b2db      	uxtb	r3, r3
 800ad24:	461a      	mov	r2, r3
 800ad26:	79fb      	ldrb	r3, [r7, #7]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d19b      	bne.n	800ac64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ad2c:	2300      	movs	r3, #0
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3720      	adds	r7, #32
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop
 800ad38:	20000004 	.word	0x20000004

0800ad3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b088      	sub	sp, #32
 800ad40:	af02      	add	r7, sp, #8
 800ad42:	60f8      	str	r0, [r7, #12]
 800ad44:	60b9      	str	r1, [r7, #8]
 800ad46:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ad48:	4b1b      	ldr	r3, [pc, #108]	@ (800adb8 <SPI_EndRxTxTransaction+0x7c>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4a1b      	ldr	r2, [pc, #108]	@ (800adbc <SPI_EndRxTxTransaction+0x80>)
 800ad4e:	fba2 2303 	umull	r2, r3, r2, r3
 800ad52:	0d5b      	lsrs	r3, r3, #21
 800ad54:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ad58:	fb02 f303 	mul.w	r3, r2, r3
 800ad5c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ad66:	d112      	bne.n	800ad8e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	9300      	str	r3, [sp, #0]
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	2180      	movs	r1, #128	@ 0x80
 800ad72:	68f8      	ldr	r0, [r7, #12]
 800ad74:	f7ff ff5a 	bl	800ac2c <SPI_WaitFlagStateUntilTimeout>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d016      	beq.n	800adac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad82:	f043 0220 	orr.w	r2, r3, #32
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800ad8a:	2303      	movs	r3, #3
 800ad8c:	e00f      	b.n	800adae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d00a      	beq.n	800adaa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	3b01      	subs	r3, #1
 800ad98:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	689b      	ldr	r3, [r3, #8]
 800ada0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ada4:	2b80      	cmp	r3, #128	@ 0x80
 800ada6:	d0f2      	beq.n	800ad8e <SPI_EndRxTxTransaction+0x52>
 800ada8:	e000      	b.n	800adac <SPI_EndRxTxTransaction+0x70>
        break;
 800adaa:	bf00      	nop
  }

  return HAL_OK;
 800adac:	2300      	movs	r3, #0
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3718      	adds	r7, #24
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop
 800adb8:	20000004 	.word	0x20000004
 800adbc:	165e9f81 	.word	0x165e9f81

0800adc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b082      	sub	sp, #8
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d101      	bne.n	800add2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800adce:	2301      	movs	r3, #1
 800add0:	e041      	b.n	800ae56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800add8:	b2db      	uxtb	r3, r3
 800adda:	2b00      	cmp	r3, #0
 800addc:	d106      	bne.n	800adec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2200      	movs	r2, #0
 800ade2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f7f9 f9ca 	bl	8004180 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2202      	movs	r2, #2
 800adf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681a      	ldr	r2, [r3, #0]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	3304      	adds	r3, #4
 800adfc:	4619      	mov	r1, r3
 800adfe:	4610      	mov	r0, r2
 800ae00:	f000 fcd8 	bl	800b7b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2201      	movs	r2, #1
 800ae08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2201      	movs	r2, #1
 800ae10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2201      	movs	r2, #1
 800ae18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2201      	movs	r2, #1
 800ae20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2201      	movs	r2, #1
 800ae28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2201      	movs	r2, #1
 800ae30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2201      	movs	r2, #1
 800ae38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2201      	movs	r2, #1
 800ae40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2201      	movs	r2, #1
 800ae48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2201      	movs	r2, #1
 800ae50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ae54:	2300      	movs	r3, #0
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3708      	adds	r7, #8
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}
	...

0800ae60 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b085      	sub	sp, #20
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae6e:	b2db      	uxtb	r3, r3
 800ae70:	2b01      	cmp	r3, #1
 800ae72:	d001      	beq.n	800ae78 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ae74:	2301      	movs	r3, #1
 800ae76:	e046      	b.n	800af06 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2202      	movs	r2, #2
 800ae7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	4a23      	ldr	r2, [pc, #140]	@ (800af14 <HAL_TIM_Base_Start+0xb4>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d022      	beq.n	800aed0 <HAL_TIM_Base_Start+0x70>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae92:	d01d      	beq.n	800aed0 <HAL_TIM_Base_Start+0x70>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	4a1f      	ldr	r2, [pc, #124]	@ (800af18 <HAL_TIM_Base_Start+0xb8>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d018      	beq.n	800aed0 <HAL_TIM_Base_Start+0x70>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	4a1e      	ldr	r2, [pc, #120]	@ (800af1c <HAL_TIM_Base_Start+0xbc>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d013      	beq.n	800aed0 <HAL_TIM_Base_Start+0x70>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	4a1c      	ldr	r2, [pc, #112]	@ (800af20 <HAL_TIM_Base_Start+0xc0>)
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	d00e      	beq.n	800aed0 <HAL_TIM_Base_Start+0x70>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	4a1b      	ldr	r2, [pc, #108]	@ (800af24 <HAL_TIM_Base_Start+0xc4>)
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	d009      	beq.n	800aed0 <HAL_TIM_Base_Start+0x70>
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	4a19      	ldr	r2, [pc, #100]	@ (800af28 <HAL_TIM_Base_Start+0xc8>)
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d004      	beq.n	800aed0 <HAL_TIM_Base_Start+0x70>
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	4a18      	ldr	r2, [pc, #96]	@ (800af2c <HAL_TIM_Base_Start+0xcc>)
 800aecc:	4293      	cmp	r3, r2
 800aece:	d111      	bne.n	800aef4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	689b      	ldr	r3, [r3, #8]
 800aed6:	f003 0307 	and.w	r3, r3, #7
 800aeda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2b06      	cmp	r3, #6
 800aee0:	d010      	beq.n	800af04 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	681a      	ldr	r2, [r3, #0]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f042 0201 	orr.w	r2, r2, #1
 800aef0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aef2:	e007      	b.n	800af04 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	681a      	ldr	r2, [r3, #0]
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f042 0201 	orr.w	r2, r2, #1
 800af02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800af04:	2300      	movs	r3, #0
}
 800af06:	4618      	mov	r0, r3
 800af08:	3714      	adds	r7, #20
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr
 800af12:	bf00      	nop
 800af14:	40010000 	.word	0x40010000
 800af18:	40000400 	.word	0x40000400
 800af1c:	40000800 	.word	0x40000800
 800af20:	40000c00 	.word	0x40000c00
 800af24:	40010400 	.word	0x40010400
 800af28:	40014000 	.word	0x40014000
 800af2c:	40001800 	.word	0x40001800

0800af30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800af30:	b480      	push	{r7}
 800af32:	b085      	sub	sp, #20
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800af3e:	b2db      	uxtb	r3, r3
 800af40:	2b01      	cmp	r3, #1
 800af42:	d001      	beq.n	800af48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800af44:	2301      	movs	r3, #1
 800af46:	e04e      	b.n	800afe6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2202      	movs	r2, #2
 800af4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	68da      	ldr	r2, [r3, #12]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f042 0201 	orr.w	r2, r2, #1
 800af5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	4a23      	ldr	r2, [pc, #140]	@ (800aff4 <HAL_TIM_Base_Start_IT+0xc4>)
 800af66:	4293      	cmp	r3, r2
 800af68:	d022      	beq.n	800afb0 <HAL_TIM_Base_Start_IT+0x80>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af72:	d01d      	beq.n	800afb0 <HAL_TIM_Base_Start_IT+0x80>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	4a1f      	ldr	r2, [pc, #124]	@ (800aff8 <HAL_TIM_Base_Start_IT+0xc8>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d018      	beq.n	800afb0 <HAL_TIM_Base_Start_IT+0x80>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	4a1e      	ldr	r2, [pc, #120]	@ (800affc <HAL_TIM_Base_Start_IT+0xcc>)
 800af84:	4293      	cmp	r3, r2
 800af86:	d013      	beq.n	800afb0 <HAL_TIM_Base_Start_IT+0x80>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4a1c      	ldr	r2, [pc, #112]	@ (800b000 <HAL_TIM_Base_Start_IT+0xd0>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	d00e      	beq.n	800afb0 <HAL_TIM_Base_Start_IT+0x80>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	4a1b      	ldr	r2, [pc, #108]	@ (800b004 <HAL_TIM_Base_Start_IT+0xd4>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d009      	beq.n	800afb0 <HAL_TIM_Base_Start_IT+0x80>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	4a19      	ldr	r2, [pc, #100]	@ (800b008 <HAL_TIM_Base_Start_IT+0xd8>)
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d004      	beq.n	800afb0 <HAL_TIM_Base_Start_IT+0x80>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4a18      	ldr	r2, [pc, #96]	@ (800b00c <HAL_TIM_Base_Start_IT+0xdc>)
 800afac:	4293      	cmp	r3, r2
 800afae:	d111      	bne.n	800afd4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	689b      	ldr	r3, [r3, #8]
 800afb6:	f003 0307 	and.w	r3, r3, #7
 800afba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	2b06      	cmp	r3, #6
 800afc0:	d010      	beq.n	800afe4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	681a      	ldr	r2, [r3, #0]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f042 0201 	orr.w	r2, r2, #1
 800afd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afd2:	e007      	b.n	800afe4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	681a      	ldr	r2, [r3, #0]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f042 0201 	orr.w	r2, r2, #1
 800afe2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800afe4:	2300      	movs	r3, #0
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3714      	adds	r7, #20
 800afea:	46bd      	mov	sp, r7
 800afec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff0:	4770      	bx	lr
 800aff2:	bf00      	nop
 800aff4:	40010000 	.word	0x40010000
 800aff8:	40000400 	.word	0x40000400
 800affc:	40000800 	.word	0x40000800
 800b000:	40000c00 	.word	0x40000c00
 800b004:	40010400 	.word	0x40010400
 800b008:	40014000 	.word	0x40014000
 800b00c:	40001800 	.word	0x40001800

0800b010 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b082      	sub	sp, #8
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d101      	bne.n	800b022 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b01e:	2301      	movs	r3, #1
 800b020:	e041      	b.n	800b0a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b028:	b2db      	uxtb	r3, r3
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d106      	bne.n	800b03c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2200      	movs	r2, #0
 800b032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f7f9 f8d8 	bl	80041ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2202      	movs	r2, #2
 800b040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	3304      	adds	r3, #4
 800b04c:	4619      	mov	r1, r3
 800b04e:	4610      	mov	r0, r2
 800b050:	f000 fbb0 	bl	800b7b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2201      	movs	r2, #1
 800b058:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2201      	movs	r2, #1
 800b060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2201      	movs	r2, #1
 800b068:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2201      	movs	r2, #1
 800b070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2201      	movs	r2, #1
 800b078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2201      	movs	r2, #1
 800b080:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2201      	movs	r2, #1
 800b088:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2201      	movs	r2, #1
 800b090:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2201      	movs	r2, #1
 800b098:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2201      	movs	r2, #1
 800b0a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b0a4:	2300      	movs	r3, #0
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3708      	adds	r7, #8
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
	...

0800b0b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b084      	sub	sp, #16
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d109      	bne.n	800b0d4 <HAL_TIM_PWM_Start+0x24>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b0c6:	b2db      	uxtb	r3, r3
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	bf14      	ite	ne
 800b0cc:	2301      	movne	r3, #1
 800b0ce:	2300      	moveq	r3, #0
 800b0d0:	b2db      	uxtb	r3, r3
 800b0d2:	e022      	b.n	800b11a <HAL_TIM_PWM_Start+0x6a>
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	2b04      	cmp	r3, #4
 800b0d8:	d109      	bne.n	800b0ee <HAL_TIM_PWM_Start+0x3e>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b0e0:	b2db      	uxtb	r3, r3
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	bf14      	ite	ne
 800b0e6:	2301      	movne	r3, #1
 800b0e8:	2300      	moveq	r3, #0
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	e015      	b.n	800b11a <HAL_TIM_PWM_Start+0x6a>
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	2b08      	cmp	r3, #8
 800b0f2:	d109      	bne.n	800b108 <HAL_TIM_PWM_Start+0x58>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b0fa:	b2db      	uxtb	r3, r3
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	bf14      	ite	ne
 800b100:	2301      	movne	r3, #1
 800b102:	2300      	moveq	r3, #0
 800b104:	b2db      	uxtb	r3, r3
 800b106:	e008      	b.n	800b11a <HAL_TIM_PWM_Start+0x6a>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b10e:	b2db      	uxtb	r3, r3
 800b110:	2b01      	cmp	r3, #1
 800b112:	bf14      	ite	ne
 800b114:	2301      	movne	r3, #1
 800b116:	2300      	moveq	r3, #0
 800b118:	b2db      	uxtb	r3, r3
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d001      	beq.n	800b122 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b11e:	2301      	movs	r3, #1
 800b120:	e07c      	b.n	800b21c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d104      	bne.n	800b132 <HAL_TIM_PWM_Start+0x82>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2202      	movs	r2, #2
 800b12c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b130:	e013      	b.n	800b15a <HAL_TIM_PWM_Start+0xaa>
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	2b04      	cmp	r3, #4
 800b136:	d104      	bne.n	800b142 <HAL_TIM_PWM_Start+0x92>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2202      	movs	r2, #2
 800b13c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b140:	e00b      	b.n	800b15a <HAL_TIM_PWM_Start+0xaa>
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	2b08      	cmp	r3, #8
 800b146:	d104      	bne.n	800b152 <HAL_TIM_PWM_Start+0xa2>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2202      	movs	r2, #2
 800b14c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b150:	e003      	b.n	800b15a <HAL_TIM_PWM_Start+0xaa>
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2202      	movs	r2, #2
 800b156:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	2201      	movs	r2, #1
 800b160:	6839      	ldr	r1, [r7, #0]
 800b162:	4618      	mov	r0, r3
 800b164:	f000 fe10 	bl	800bd88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4a2d      	ldr	r2, [pc, #180]	@ (800b224 <HAL_TIM_PWM_Start+0x174>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d004      	beq.n	800b17c <HAL_TIM_PWM_Start+0xcc>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	4a2c      	ldr	r2, [pc, #176]	@ (800b228 <HAL_TIM_PWM_Start+0x178>)
 800b178:	4293      	cmp	r3, r2
 800b17a:	d101      	bne.n	800b180 <HAL_TIM_PWM_Start+0xd0>
 800b17c:	2301      	movs	r3, #1
 800b17e:	e000      	b.n	800b182 <HAL_TIM_PWM_Start+0xd2>
 800b180:	2300      	movs	r3, #0
 800b182:	2b00      	cmp	r3, #0
 800b184:	d007      	beq.n	800b196 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b194:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	4a22      	ldr	r2, [pc, #136]	@ (800b224 <HAL_TIM_PWM_Start+0x174>)
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d022      	beq.n	800b1e6 <HAL_TIM_PWM_Start+0x136>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1a8:	d01d      	beq.n	800b1e6 <HAL_TIM_PWM_Start+0x136>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	4a1f      	ldr	r2, [pc, #124]	@ (800b22c <HAL_TIM_PWM_Start+0x17c>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d018      	beq.n	800b1e6 <HAL_TIM_PWM_Start+0x136>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4a1d      	ldr	r2, [pc, #116]	@ (800b230 <HAL_TIM_PWM_Start+0x180>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d013      	beq.n	800b1e6 <HAL_TIM_PWM_Start+0x136>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	4a1c      	ldr	r2, [pc, #112]	@ (800b234 <HAL_TIM_PWM_Start+0x184>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d00e      	beq.n	800b1e6 <HAL_TIM_PWM_Start+0x136>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	4a16      	ldr	r2, [pc, #88]	@ (800b228 <HAL_TIM_PWM_Start+0x178>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d009      	beq.n	800b1e6 <HAL_TIM_PWM_Start+0x136>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	4a18      	ldr	r2, [pc, #96]	@ (800b238 <HAL_TIM_PWM_Start+0x188>)
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d004      	beq.n	800b1e6 <HAL_TIM_PWM_Start+0x136>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	4a16      	ldr	r2, [pc, #88]	@ (800b23c <HAL_TIM_PWM_Start+0x18c>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d111      	bne.n	800b20a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	689b      	ldr	r3, [r3, #8]
 800b1ec:	f003 0307 	and.w	r3, r3, #7
 800b1f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2b06      	cmp	r3, #6
 800b1f6:	d010      	beq.n	800b21a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	681a      	ldr	r2, [r3, #0]
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	f042 0201 	orr.w	r2, r2, #1
 800b206:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b208:	e007      	b.n	800b21a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	681a      	ldr	r2, [r3, #0]
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f042 0201 	orr.w	r2, r2, #1
 800b218:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b21a:	2300      	movs	r3, #0
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3710      	adds	r7, #16
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}
 800b224:	40010000 	.word	0x40010000
 800b228:	40010400 	.word	0x40010400
 800b22c:	40000400 	.word	0x40000400
 800b230:	40000800 	.word	0x40000800
 800b234:	40000c00 	.word	0x40000c00
 800b238:	40014000 	.word	0x40014000
 800b23c:	40001800 	.word	0x40001800

0800b240 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b082      	sub	sp, #8
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	691b      	ldr	r3, [r3, #16]
 800b24e:	f003 0302 	and.w	r3, r3, #2
 800b252:	2b02      	cmp	r3, #2
 800b254:	d122      	bne.n	800b29c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	68db      	ldr	r3, [r3, #12]
 800b25c:	f003 0302 	and.w	r3, r3, #2
 800b260:	2b02      	cmp	r3, #2
 800b262:	d11b      	bne.n	800b29c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f06f 0202 	mvn.w	r2, #2
 800b26c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2201      	movs	r2, #1
 800b272:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	699b      	ldr	r3, [r3, #24]
 800b27a:	f003 0303 	and.w	r3, r3, #3
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d003      	beq.n	800b28a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f000 fa77 	bl	800b776 <HAL_TIM_IC_CaptureCallback>
 800b288:	e005      	b.n	800b296 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 fa69 	bl	800b762 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f000 fa7a 	bl	800b78a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2200      	movs	r2, #0
 800b29a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	691b      	ldr	r3, [r3, #16]
 800b2a2:	f003 0304 	and.w	r3, r3, #4
 800b2a6:	2b04      	cmp	r3, #4
 800b2a8:	d122      	bne.n	800b2f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	68db      	ldr	r3, [r3, #12]
 800b2b0:	f003 0304 	and.w	r3, r3, #4
 800b2b4:	2b04      	cmp	r3, #4
 800b2b6:	d11b      	bne.n	800b2f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f06f 0204 	mvn.w	r2, #4
 800b2c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2202      	movs	r2, #2
 800b2c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	699b      	ldr	r3, [r3, #24]
 800b2ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d003      	beq.n	800b2de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 fa4d 	bl	800b776 <HAL_TIM_IC_CaptureCallback>
 800b2dc:	e005      	b.n	800b2ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 fa3f 	bl	800b762 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f000 fa50 	bl	800b78a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	691b      	ldr	r3, [r3, #16]
 800b2f6:	f003 0308 	and.w	r3, r3, #8
 800b2fa:	2b08      	cmp	r3, #8
 800b2fc:	d122      	bne.n	800b344 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	68db      	ldr	r3, [r3, #12]
 800b304:	f003 0308 	and.w	r3, r3, #8
 800b308:	2b08      	cmp	r3, #8
 800b30a:	d11b      	bne.n	800b344 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f06f 0208 	mvn.w	r2, #8
 800b314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2204      	movs	r2, #4
 800b31a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	69db      	ldr	r3, [r3, #28]
 800b322:	f003 0303 	and.w	r3, r3, #3
 800b326:	2b00      	cmp	r3, #0
 800b328:	d003      	beq.n	800b332 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 fa23 	bl	800b776 <HAL_TIM_IC_CaptureCallback>
 800b330:	e005      	b.n	800b33e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f000 fa15 	bl	800b762 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 fa26 	bl	800b78a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2200      	movs	r2, #0
 800b342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	691b      	ldr	r3, [r3, #16]
 800b34a:	f003 0310 	and.w	r3, r3, #16
 800b34e:	2b10      	cmp	r3, #16
 800b350:	d122      	bne.n	800b398 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	68db      	ldr	r3, [r3, #12]
 800b358:	f003 0310 	and.w	r3, r3, #16
 800b35c:	2b10      	cmp	r3, #16
 800b35e:	d11b      	bne.n	800b398 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f06f 0210 	mvn.w	r2, #16
 800b368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2208      	movs	r2, #8
 800b36e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	69db      	ldr	r3, [r3, #28]
 800b376:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d003      	beq.n	800b386 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f000 f9f9 	bl	800b776 <HAL_TIM_IC_CaptureCallback>
 800b384:	e005      	b.n	800b392 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f000 f9eb 	bl	800b762 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f000 f9fc 	bl	800b78a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2200      	movs	r2, #0
 800b396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	691b      	ldr	r3, [r3, #16]
 800b39e:	f003 0301 	and.w	r3, r3, #1
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	d10e      	bne.n	800b3c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	68db      	ldr	r3, [r3, #12]
 800b3ac:	f003 0301 	and.w	r3, r3, #1
 800b3b0:	2b01      	cmp	r3, #1
 800b3b2:	d107      	bne.n	800b3c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f06f 0201 	mvn.w	r2, #1
 800b3bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f7f8 fb28 	bl	8003a14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	691b      	ldr	r3, [r3, #16]
 800b3ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3ce:	2b80      	cmp	r3, #128	@ 0x80
 800b3d0:	d10e      	bne.n	800b3f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	68db      	ldr	r3, [r3, #12]
 800b3d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3dc:	2b80      	cmp	r3, #128	@ 0x80
 800b3de:	d107      	bne.n	800b3f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800b3e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f000 fdca 	bl	800bf84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	691b      	ldr	r3, [r3, #16]
 800b3f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3fa:	2b40      	cmp	r3, #64	@ 0x40
 800b3fc:	d10e      	bne.n	800b41c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	68db      	ldr	r3, [r3, #12]
 800b404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b408:	2b40      	cmp	r3, #64	@ 0x40
 800b40a:	d107      	bne.n	800b41c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f000 f9c1 	bl	800b79e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	691b      	ldr	r3, [r3, #16]
 800b422:	f003 0320 	and.w	r3, r3, #32
 800b426:	2b20      	cmp	r3, #32
 800b428:	d10e      	bne.n	800b448 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	68db      	ldr	r3, [r3, #12]
 800b430:	f003 0320 	and.w	r3, r3, #32
 800b434:	2b20      	cmp	r3, #32
 800b436:	d107      	bne.n	800b448 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f06f 0220 	mvn.w	r2, #32
 800b440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f000 fd94 	bl	800bf70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b448:	bf00      	nop
 800b44a:	3708      	adds	r7, #8
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}

0800b450 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b086      	sub	sp, #24
 800b454:	af00      	add	r7, sp, #0
 800b456:	60f8      	str	r0, [r7, #12]
 800b458:	60b9      	str	r1, [r7, #8]
 800b45a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b45c:	2300      	movs	r3, #0
 800b45e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b466:	2b01      	cmp	r3, #1
 800b468:	d101      	bne.n	800b46e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b46a:	2302      	movs	r3, #2
 800b46c:	e0ae      	b.n	800b5cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	2201      	movs	r2, #1
 800b472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2b0c      	cmp	r3, #12
 800b47a:	f200 809f 	bhi.w	800b5bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b47e:	a201      	add	r2, pc, #4	@ (adr r2, 800b484 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b484:	0800b4b9 	.word	0x0800b4b9
 800b488:	0800b5bd 	.word	0x0800b5bd
 800b48c:	0800b5bd 	.word	0x0800b5bd
 800b490:	0800b5bd 	.word	0x0800b5bd
 800b494:	0800b4f9 	.word	0x0800b4f9
 800b498:	0800b5bd 	.word	0x0800b5bd
 800b49c:	0800b5bd 	.word	0x0800b5bd
 800b4a0:	0800b5bd 	.word	0x0800b5bd
 800b4a4:	0800b53b 	.word	0x0800b53b
 800b4a8:	0800b5bd 	.word	0x0800b5bd
 800b4ac:	0800b5bd 	.word	0x0800b5bd
 800b4b0:	0800b5bd 	.word	0x0800b5bd
 800b4b4:	0800b57b 	.word	0x0800b57b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	68b9      	ldr	r1, [r7, #8]
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f000 fa18 	bl	800b8f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	699a      	ldr	r2, [r3, #24]
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f042 0208 	orr.w	r2, r2, #8
 800b4d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	699a      	ldr	r2, [r3, #24]
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f022 0204 	bic.w	r2, r2, #4
 800b4e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	6999      	ldr	r1, [r3, #24]
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	691a      	ldr	r2, [r3, #16]
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	430a      	orrs	r2, r1
 800b4f4:	619a      	str	r2, [r3, #24]
      break;
 800b4f6:	e064      	b.n	800b5c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	68b9      	ldr	r1, [r7, #8]
 800b4fe:	4618      	mov	r0, r3
 800b500:	f000 fa68 	bl	800b9d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	699a      	ldr	r2, [r3, #24]
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b512:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	699a      	ldr	r2, [r3, #24]
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b522:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	6999      	ldr	r1, [r3, #24]
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	691b      	ldr	r3, [r3, #16]
 800b52e:	021a      	lsls	r2, r3, #8
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	430a      	orrs	r2, r1
 800b536:	619a      	str	r2, [r3, #24]
      break;
 800b538:	e043      	b.n	800b5c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	68b9      	ldr	r1, [r7, #8]
 800b540:	4618      	mov	r0, r3
 800b542:	f000 fabd 	bl	800bac0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	69da      	ldr	r2, [r3, #28]
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f042 0208 	orr.w	r2, r2, #8
 800b554:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	69da      	ldr	r2, [r3, #28]
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f022 0204 	bic.w	r2, r2, #4
 800b564:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	69d9      	ldr	r1, [r3, #28]
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	691a      	ldr	r2, [r3, #16]
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	430a      	orrs	r2, r1
 800b576:	61da      	str	r2, [r3, #28]
      break;
 800b578:	e023      	b.n	800b5c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	68b9      	ldr	r1, [r7, #8]
 800b580:	4618      	mov	r0, r3
 800b582:	f000 fb11 	bl	800bba8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	69da      	ldr	r2, [r3, #28]
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b594:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	69da      	ldr	r2, [r3, #28]
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b5a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	69d9      	ldr	r1, [r3, #28]
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	691b      	ldr	r3, [r3, #16]
 800b5b0:	021a      	lsls	r2, r3, #8
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	430a      	orrs	r2, r1
 800b5b8:	61da      	str	r2, [r3, #28]
      break;
 800b5ba:	e002      	b.n	800b5c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b5bc:	2301      	movs	r3, #1
 800b5be:	75fb      	strb	r3, [r7, #23]
      break;
 800b5c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b5ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3718      	adds	r7, #24
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}

0800b5d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b5e8:	2b01      	cmp	r3, #1
 800b5ea:	d101      	bne.n	800b5f0 <HAL_TIM_ConfigClockSource+0x1c>
 800b5ec:	2302      	movs	r3, #2
 800b5ee:	e0b4      	b.n	800b75a <HAL_TIM_ConfigClockSource+0x186>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2202      	movs	r2, #2
 800b5fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	689b      	ldr	r3, [r3, #8]
 800b606:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b60e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b616:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	68ba      	ldr	r2, [r7, #8]
 800b61e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b628:	d03e      	beq.n	800b6a8 <HAL_TIM_ConfigClockSource+0xd4>
 800b62a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b62e:	f200 8087 	bhi.w	800b740 <HAL_TIM_ConfigClockSource+0x16c>
 800b632:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b636:	f000 8086 	beq.w	800b746 <HAL_TIM_ConfigClockSource+0x172>
 800b63a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b63e:	d87f      	bhi.n	800b740 <HAL_TIM_ConfigClockSource+0x16c>
 800b640:	2b70      	cmp	r3, #112	@ 0x70
 800b642:	d01a      	beq.n	800b67a <HAL_TIM_ConfigClockSource+0xa6>
 800b644:	2b70      	cmp	r3, #112	@ 0x70
 800b646:	d87b      	bhi.n	800b740 <HAL_TIM_ConfigClockSource+0x16c>
 800b648:	2b60      	cmp	r3, #96	@ 0x60
 800b64a:	d050      	beq.n	800b6ee <HAL_TIM_ConfigClockSource+0x11a>
 800b64c:	2b60      	cmp	r3, #96	@ 0x60
 800b64e:	d877      	bhi.n	800b740 <HAL_TIM_ConfigClockSource+0x16c>
 800b650:	2b50      	cmp	r3, #80	@ 0x50
 800b652:	d03c      	beq.n	800b6ce <HAL_TIM_ConfigClockSource+0xfa>
 800b654:	2b50      	cmp	r3, #80	@ 0x50
 800b656:	d873      	bhi.n	800b740 <HAL_TIM_ConfigClockSource+0x16c>
 800b658:	2b40      	cmp	r3, #64	@ 0x40
 800b65a:	d058      	beq.n	800b70e <HAL_TIM_ConfigClockSource+0x13a>
 800b65c:	2b40      	cmp	r3, #64	@ 0x40
 800b65e:	d86f      	bhi.n	800b740 <HAL_TIM_ConfigClockSource+0x16c>
 800b660:	2b30      	cmp	r3, #48	@ 0x30
 800b662:	d064      	beq.n	800b72e <HAL_TIM_ConfigClockSource+0x15a>
 800b664:	2b30      	cmp	r3, #48	@ 0x30
 800b666:	d86b      	bhi.n	800b740 <HAL_TIM_ConfigClockSource+0x16c>
 800b668:	2b20      	cmp	r3, #32
 800b66a:	d060      	beq.n	800b72e <HAL_TIM_ConfigClockSource+0x15a>
 800b66c:	2b20      	cmp	r3, #32
 800b66e:	d867      	bhi.n	800b740 <HAL_TIM_ConfigClockSource+0x16c>
 800b670:	2b00      	cmp	r3, #0
 800b672:	d05c      	beq.n	800b72e <HAL_TIM_ConfigClockSource+0x15a>
 800b674:	2b10      	cmp	r3, #16
 800b676:	d05a      	beq.n	800b72e <HAL_TIM_ConfigClockSource+0x15a>
 800b678:	e062      	b.n	800b740 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6818      	ldr	r0, [r3, #0]
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	6899      	ldr	r1, [r3, #8]
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	685a      	ldr	r2, [r3, #4]
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	68db      	ldr	r3, [r3, #12]
 800b68a:	f000 fb5d 	bl	800bd48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	689b      	ldr	r3, [r3, #8]
 800b694:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b69c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	68ba      	ldr	r2, [r7, #8]
 800b6a4:	609a      	str	r2, [r3, #8]
      break;
 800b6a6:	e04f      	b.n	800b748 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	6818      	ldr	r0, [r3, #0]
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	6899      	ldr	r1, [r3, #8]
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	685a      	ldr	r2, [r3, #4]
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	68db      	ldr	r3, [r3, #12]
 800b6b8:	f000 fb46 	bl	800bd48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	689a      	ldr	r2, [r3, #8]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b6ca:	609a      	str	r2, [r3, #8]
      break;
 800b6cc:	e03c      	b.n	800b748 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6818      	ldr	r0, [r3, #0]
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	6859      	ldr	r1, [r3, #4]
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	68db      	ldr	r3, [r3, #12]
 800b6da:	461a      	mov	r2, r3
 800b6dc:	f000 faba 	bl	800bc54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	2150      	movs	r1, #80	@ 0x50
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f000 fb13 	bl	800bd12 <TIM_ITRx_SetConfig>
      break;
 800b6ec:	e02c      	b.n	800b748 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6818      	ldr	r0, [r3, #0]
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	6859      	ldr	r1, [r3, #4]
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	68db      	ldr	r3, [r3, #12]
 800b6fa:	461a      	mov	r2, r3
 800b6fc:	f000 fad9 	bl	800bcb2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	2160      	movs	r1, #96	@ 0x60
 800b706:	4618      	mov	r0, r3
 800b708:	f000 fb03 	bl	800bd12 <TIM_ITRx_SetConfig>
      break;
 800b70c:	e01c      	b.n	800b748 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6818      	ldr	r0, [r3, #0]
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	6859      	ldr	r1, [r3, #4]
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	68db      	ldr	r3, [r3, #12]
 800b71a:	461a      	mov	r2, r3
 800b71c:	f000 fa9a 	bl	800bc54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	2140      	movs	r1, #64	@ 0x40
 800b726:	4618      	mov	r0, r3
 800b728:	f000 faf3 	bl	800bd12 <TIM_ITRx_SetConfig>
      break;
 800b72c:	e00c      	b.n	800b748 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681a      	ldr	r2, [r3, #0]
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	4619      	mov	r1, r3
 800b738:	4610      	mov	r0, r2
 800b73a:	f000 faea 	bl	800bd12 <TIM_ITRx_SetConfig>
      break;
 800b73e:	e003      	b.n	800b748 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b740:	2301      	movs	r3, #1
 800b742:	73fb      	strb	r3, [r7, #15]
      break;
 800b744:	e000      	b.n	800b748 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b746:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2201      	movs	r2, #1
 800b74c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2200      	movs	r2, #0
 800b754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b758:	7bfb      	ldrb	r3, [r7, #15]
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3710      	adds	r7, #16
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}

0800b762 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b762:	b480      	push	{r7}
 800b764:	b083      	sub	sp, #12
 800b766:	af00      	add	r7, sp, #0
 800b768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b76a:	bf00      	nop
 800b76c:	370c      	adds	r7, #12
 800b76e:	46bd      	mov	sp, r7
 800b770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b774:	4770      	bx	lr

0800b776 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b776:	b480      	push	{r7}
 800b778:	b083      	sub	sp, #12
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b77e:	bf00      	nop
 800b780:	370c      	adds	r7, #12
 800b782:	46bd      	mov	sp, r7
 800b784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b788:	4770      	bx	lr

0800b78a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b78a:	b480      	push	{r7}
 800b78c:	b083      	sub	sp, #12
 800b78e:	af00      	add	r7, sp, #0
 800b790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b792:	bf00      	nop
 800b794:	370c      	adds	r7, #12
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr

0800b79e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b79e:	b480      	push	{r7}
 800b7a0:	b083      	sub	sp, #12
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b7a6:	bf00      	nop
 800b7a8:	370c      	adds	r7, #12
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b0:	4770      	bx	lr
	...

0800b7b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b085      	sub	sp, #20
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	4a40      	ldr	r2, [pc, #256]	@ (800b8c8 <TIM_Base_SetConfig+0x114>)
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d013      	beq.n	800b7f4 <TIM_Base_SetConfig+0x40>
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b7d2:	d00f      	beq.n	800b7f4 <TIM_Base_SetConfig+0x40>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	4a3d      	ldr	r2, [pc, #244]	@ (800b8cc <TIM_Base_SetConfig+0x118>)
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d00b      	beq.n	800b7f4 <TIM_Base_SetConfig+0x40>
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	4a3c      	ldr	r2, [pc, #240]	@ (800b8d0 <TIM_Base_SetConfig+0x11c>)
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	d007      	beq.n	800b7f4 <TIM_Base_SetConfig+0x40>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	4a3b      	ldr	r2, [pc, #236]	@ (800b8d4 <TIM_Base_SetConfig+0x120>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d003      	beq.n	800b7f4 <TIM_Base_SetConfig+0x40>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	4a3a      	ldr	r2, [pc, #232]	@ (800b8d8 <TIM_Base_SetConfig+0x124>)
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d108      	bne.n	800b806 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b7fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	685b      	ldr	r3, [r3, #4]
 800b800:	68fa      	ldr	r2, [r7, #12]
 800b802:	4313      	orrs	r3, r2
 800b804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	4a2f      	ldr	r2, [pc, #188]	@ (800b8c8 <TIM_Base_SetConfig+0x114>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d02b      	beq.n	800b866 <TIM_Base_SetConfig+0xb2>
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b814:	d027      	beq.n	800b866 <TIM_Base_SetConfig+0xb2>
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	4a2c      	ldr	r2, [pc, #176]	@ (800b8cc <TIM_Base_SetConfig+0x118>)
 800b81a:	4293      	cmp	r3, r2
 800b81c:	d023      	beq.n	800b866 <TIM_Base_SetConfig+0xb2>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	4a2b      	ldr	r2, [pc, #172]	@ (800b8d0 <TIM_Base_SetConfig+0x11c>)
 800b822:	4293      	cmp	r3, r2
 800b824:	d01f      	beq.n	800b866 <TIM_Base_SetConfig+0xb2>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	4a2a      	ldr	r2, [pc, #168]	@ (800b8d4 <TIM_Base_SetConfig+0x120>)
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d01b      	beq.n	800b866 <TIM_Base_SetConfig+0xb2>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	4a29      	ldr	r2, [pc, #164]	@ (800b8d8 <TIM_Base_SetConfig+0x124>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d017      	beq.n	800b866 <TIM_Base_SetConfig+0xb2>
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	4a28      	ldr	r2, [pc, #160]	@ (800b8dc <TIM_Base_SetConfig+0x128>)
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d013      	beq.n	800b866 <TIM_Base_SetConfig+0xb2>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	4a27      	ldr	r2, [pc, #156]	@ (800b8e0 <TIM_Base_SetConfig+0x12c>)
 800b842:	4293      	cmp	r3, r2
 800b844:	d00f      	beq.n	800b866 <TIM_Base_SetConfig+0xb2>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	4a26      	ldr	r2, [pc, #152]	@ (800b8e4 <TIM_Base_SetConfig+0x130>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d00b      	beq.n	800b866 <TIM_Base_SetConfig+0xb2>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	4a25      	ldr	r2, [pc, #148]	@ (800b8e8 <TIM_Base_SetConfig+0x134>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d007      	beq.n	800b866 <TIM_Base_SetConfig+0xb2>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	4a24      	ldr	r2, [pc, #144]	@ (800b8ec <TIM_Base_SetConfig+0x138>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d003      	beq.n	800b866 <TIM_Base_SetConfig+0xb2>
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	4a23      	ldr	r2, [pc, #140]	@ (800b8f0 <TIM_Base_SetConfig+0x13c>)
 800b862:	4293      	cmp	r3, r2
 800b864:	d108      	bne.n	800b878 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b86c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	68db      	ldr	r3, [r3, #12]
 800b872:	68fa      	ldr	r2, [r7, #12]
 800b874:	4313      	orrs	r3, r2
 800b876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	695b      	ldr	r3, [r3, #20]
 800b882:	4313      	orrs	r3, r2
 800b884:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	68fa      	ldr	r2, [r7, #12]
 800b88a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	689a      	ldr	r2, [r3, #8]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	681a      	ldr	r2, [r3, #0]
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	4a0a      	ldr	r2, [pc, #40]	@ (800b8c8 <TIM_Base_SetConfig+0x114>)
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d003      	beq.n	800b8ac <TIM_Base_SetConfig+0xf8>
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	4a0c      	ldr	r2, [pc, #48]	@ (800b8d8 <TIM_Base_SetConfig+0x124>)
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d103      	bne.n	800b8b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	691a      	ldr	r2, [r3, #16]
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	615a      	str	r2, [r3, #20]
}
 800b8ba:	bf00      	nop
 800b8bc:	3714      	adds	r7, #20
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr
 800b8c6:	bf00      	nop
 800b8c8:	40010000 	.word	0x40010000
 800b8cc:	40000400 	.word	0x40000400
 800b8d0:	40000800 	.word	0x40000800
 800b8d4:	40000c00 	.word	0x40000c00
 800b8d8:	40010400 	.word	0x40010400
 800b8dc:	40014000 	.word	0x40014000
 800b8e0:	40014400 	.word	0x40014400
 800b8e4:	40014800 	.word	0x40014800
 800b8e8:	40001800 	.word	0x40001800
 800b8ec:	40001c00 	.word	0x40001c00
 800b8f0:	40002000 	.word	0x40002000

0800b8f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b087      	sub	sp, #28
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6a1b      	ldr	r3, [r3, #32]
 800b902:	f023 0201 	bic.w	r2, r3, #1
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6a1b      	ldr	r3, [r3, #32]
 800b90e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	685b      	ldr	r3, [r3, #4]
 800b914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	699b      	ldr	r3, [r3, #24]
 800b91a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	f023 0303 	bic.w	r3, r3, #3
 800b92a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	68fa      	ldr	r2, [r7, #12]
 800b932:	4313      	orrs	r3, r2
 800b934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	f023 0302 	bic.w	r3, r3, #2
 800b93c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	689b      	ldr	r3, [r3, #8]
 800b942:	697a      	ldr	r2, [r7, #20]
 800b944:	4313      	orrs	r3, r2
 800b946:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	4a20      	ldr	r2, [pc, #128]	@ (800b9cc <TIM_OC1_SetConfig+0xd8>)
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d003      	beq.n	800b958 <TIM_OC1_SetConfig+0x64>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	4a1f      	ldr	r2, [pc, #124]	@ (800b9d0 <TIM_OC1_SetConfig+0xdc>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d10c      	bne.n	800b972 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	f023 0308 	bic.w	r3, r3, #8
 800b95e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	68db      	ldr	r3, [r3, #12]
 800b964:	697a      	ldr	r2, [r7, #20]
 800b966:	4313      	orrs	r3, r2
 800b968:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	f023 0304 	bic.w	r3, r3, #4
 800b970:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	4a15      	ldr	r2, [pc, #84]	@ (800b9cc <TIM_OC1_SetConfig+0xd8>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d003      	beq.n	800b982 <TIM_OC1_SetConfig+0x8e>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	4a14      	ldr	r2, [pc, #80]	@ (800b9d0 <TIM_OC1_SetConfig+0xdc>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d111      	bne.n	800b9a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b988:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b98a:	693b      	ldr	r3, [r7, #16]
 800b98c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b990:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	695b      	ldr	r3, [r3, #20]
 800b996:	693a      	ldr	r2, [r7, #16]
 800b998:	4313      	orrs	r3, r2
 800b99a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	699b      	ldr	r3, [r3, #24]
 800b9a0:	693a      	ldr	r2, [r7, #16]
 800b9a2:	4313      	orrs	r3, r2
 800b9a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	693a      	ldr	r2, [r7, #16]
 800b9aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	68fa      	ldr	r2, [r7, #12]
 800b9b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	685a      	ldr	r2, [r3, #4]
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	697a      	ldr	r2, [r7, #20]
 800b9be:	621a      	str	r2, [r3, #32]
}
 800b9c0:	bf00      	nop
 800b9c2:	371c      	adds	r7, #28
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr
 800b9cc:	40010000 	.word	0x40010000
 800b9d0:	40010400 	.word	0x40010400

0800b9d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b087      	sub	sp, #28
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6a1b      	ldr	r3, [r3, #32]
 800b9e2:	f023 0210 	bic.w	r2, r3, #16
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6a1b      	ldr	r3, [r3, #32]
 800b9ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	685b      	ldr	r3, [r3, #4]
 800b9f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	699b      	ldr	r3, [r3, #24]
 800b9fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ba02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ba0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	021b      	lsls	r3, r3, #8
 800ba12:	68fa      	ldr	r2, [r7, #12]
 800ba14:	4313      	orrs	r3, r2
 800ba16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	f023 0320 	bic.w	r3, r3, #32
 800ba1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	689b      	ldr	r3, [r3, #8]
 800ba24:	011b      	lsls	r3, r3, #4
 800ba26:	697a      	ldr	r2, [r7, #20]
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	4a22      	ldr	r2, [pc, #136]	@ (800bab8 <TIM_OC2_SetConfig+0xe4>)
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d003      	beq.n	800ba3c <TIM_OC2_SetConfig+0x68>
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	4a21      	ldr	r2, [pc, #132]	@ (800babc <TIM_OC2_SetConfig+0xe8>)
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d10d      	bne.n	800ba58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	68db      	ldr	r3, [r3, #12]
 800ba48:	011b      	lsls	r3, r3, #4
 800ba4a:	697a      	ldr	r2, [r7, #20]
 800ba4c:	4313      	orrs	r3, r2
 800ba4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	4a17      	ldr	r2, [pc, #92]	@ (800bab8 <TIM_OC2_SetConfig+0xe4>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d003      	beq.n	800ba68 <TIM_OC2_SetConfig+0x94>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	4a16      	ldr	r2, [pc, #88]	@ (800babc <TIM_OC2_SetConfig+0xe8>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d113      	bne.n	800ba90 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ba6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ba76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	695b      	ldr	r3, [r3, #20]
 800ba7c:	009b      	lsls	r3, r3, #2
 800ba7e:	693a      	ldr	r2, [r7, #16]
 800ba80:	4313      	orrs	r3, r2
 800ba82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	699b      	ldr	r3, [r3, #24]
 800ba88:	009b      	lsls	r3, r3, #2
 800ba8a:	693a      	ldr	r2, [r7, #16]
 800ba8c:	4313      	orrs	r3, r2
 800ba8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	693a      	ldr	r2, [r7, #16]
 800ba94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	68fa      	ldr	r2, [r7, #12]
 800ba9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	685a      	ldr	r2, [r3, #4]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	697a      	ldr	r2, [r7, #20]
 800baa8:	621a      	str	r2, [r3, #32]
}
 800baaa:	bf00      	nop
 800baac:	371c      	adds	r7, #28
 800baae:	46bd      	mov	sp, r7
 800bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab4:	4770      	bx	lr
 800bab6:	bf00      	nop
 800bab8:	40010000 	.word	0x40010000
 800babc:	40010400 	.word	0x40010400

0800bac0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bac0:	b480      	push	{r7}
 800bac2:	b087      	sub	sp, #28
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6a1b      	ldr	r3, [r3, #32]
 800bace:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6a1b      	ldr	r3, [r3, #32]
 800bada:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	69db      	ldr	r3, [r3, #28]
 800bae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800baee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	f023 0303 	bic.w	r3, r3, #3
 800baf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	68fa      	ldr	r2, [r7, #12]
 800bafe:	4313      	orrs	r3, r2
 800bb00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bb08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	689b      	ldr	r3, [r3, #8]
 800bb0e:	021b      	lsls	r3, r3, #8
 800bb10:	697a      	ldr	r2, [r7, #20]
 800bb12:	4313      	orrs	r3, r2
 800bb14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	4a21      	ldr	r2, [pc, #132]	@ (800bba0 <TIM_OC3_SetConfig+0xe0>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d003      	beq.n	800bb26 <TIM_OC3_SetConfig+0x66>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	4a20      	ldr	r2, [pc, #128]	@ (800bba4 <TIM_OC3_SetConfig+0xe4>)
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d10d      	bne.n	800bb42 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bb2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	68db      	ldr	r3, [r3, #12]
 800bb32:	021b      	lsls	r3, r3, #8
 800bb34:	697a      	ldr	r2, [r7, #20]
 800bb36:	4313      	orrs	r3, r2
 800bb38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bb40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	4a16      	ldr	r2, [pc, #88]	@ (800bba0 <TIM_OC3_SetConfig+0xe0>)
 800bb46:	4293      	cmp	r3, r2
 800bb48:	d003      	beq.n	800bb52 <TIM_OC3_SetConfig+0x92>
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	4a15      	ldr	r2, [pc, #84]	@ (800bba4 <TIM_OC3_SetConfig+0xe4>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d113      	bne.n	800bb7a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bb58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bb60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	695b      	ldr	r3, [r3, #20]
 800bb66:	011b      	lsls	r3, r3, #4
 800bb68:	693a      	ldr	r2, [r7, #16]
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	699b      	ldr	r3, [r3, #24]
 800bb72:	011b      	lsls	r3, r3, #4
 800bb74:	693a      	ldr	r2, [r7, #16]
 800bb76:	4313      	orrs	r3, r2
 800bb78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	693a      	ldr	r2, [r7, #16]
 800bb7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	68fa      	ldr	r2, [r7, #12]
 800bb84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	685a      	ldr	r2, [r3, #4]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	697a      	ldr	r2, [r7, #20]
 800bb92:	621a      	str	r2, [r3, #32]
}
 800bb94:	bf00      	nop
 800bb96:	371c      	adds	r7, #28
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr
 800bba0:	40010000 	.word	0x40010000
 800bba4:	40010400 	.word	0x40010400

0800bba8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b087      	sub	sp, #28
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
 800bbb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6a1b      	ldr	r3, [r3, #32]
 800bbb6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6a1b      	ldr	r3, [r3, #32]
 800bbc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	685b      	ldr	r3, [r3, #4]
 800bbc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	69db      	ldr	r3, [r3, #28]
 800bbce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bbd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bbde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	021b      	lsls	r3, r3, #8
 800bbe6:	68fa      	ldr	r2, [r7, #12]
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bbf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	689b      	ldr	r3, [r3, #8]
 800bbf8:	031b      	lsls	r3, r3, #12
 800bbfa:	693a      	ldr	r2, [r7, #16]
 800bbfc:	4313      	orrs	r3, r2
 800bbfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	4a12      	ldr	r2, [pc, #72]	@ (800bc4c <TIM_OC4_SetConfig+0xa4>)
 800bc04:	4293      	cmp	r3, r2
 800bc06:	d003      	beq.n	800bc10 <TIM_OC4_SetConfig+0x68>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	4a11      	ldr	r2, [pc, #68]	@ (800bc50 <TIM_OC4_SetConfig+0xa8>)
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	d109      	bne.n	800bc24 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bc16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	695b      	ldr	r3, [r3, #20]
 800bc1c:	019b      	lsls	r3, r3, #6
 800bc1e:	697a      	ldr	r2, [r7, #20]
 800bc20:	4313      	orrs	r3, r2
 800bc22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	697a      	ldr	r2, [r7, #20]
 800bc28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	68fa      	ldr	r2, [r7, #12]
 800bc2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	685a      	ldr	r2, [r3, #4]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	693a      	ldr	r2, [r7, #16]
 800bc3c:	621a      	str	r2, [r3, #32]
}
 800bc3e:	bf00      	nop
 800bc40:	371c      	adds	r7, #28
 800bc42:	46bd      	mov	sp, r7
 800bc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc48:	4770      	bx	lr
 800bc4a:	bf00      	nop
 800bc4c:	40010000 	.word	0x40010000
 800bc50:	40010400 	.word	0x40010400

0800bc54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bc54:	b480      	push	{r7}
 800bc56:	b087      	sub	sp, #28
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	60f8      	str	r0, [r7, #12]
 800bc5c:	60b9      	str	r1, [r7, #8]
 800bc5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	6a1b      	ldr	r3, [r3, #32]
 800bc64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	6a1b      	ldr	r3, [r3, #32]
 800bc6a:	f023 0201 	bic.w	r2, r3, #1
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	699b      	ldr	r3, [r3, #24]
 800bc76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bc7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	011b      	lsls	r3, r3, #4
 800bc84:	693a      	ldr	r2, [r7, #16]
 800bc86:	4313      	orrs	r3, r2
 800bc88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	f023 030a 	bic.w	r3, r3, #10
 800bc90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bc92:	697a      	ldr	r2, [r7, #20]
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	4313      	orrs	r3, r2
 800bc98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	693a      	ldr	r2, [r7, #16]
 800bc9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	697a      	ldr	r2, [r7, #20]
 800bca4:	621a      	str	r2, [r3, #32]
}
 800bca6:	bf00      	nop
 800bca8:	371c      	adds	r7, #28
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb0:	4770      	bx	lr

0800bcb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bcb2:	b480      	push	{r7}
 800bcb4:	b087      	sub	sp, #28
 800bcb6:	af00      	add	r7, sp, #0
 800bcb8:	60f8      	str	r0, [r7, #12]
 800bcba:	60b9      	str	r1, [r7, #8]
 800bcbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	6a1b      	ldr	r3, [r3, #32]
 800bcc2:	f023 0210 	bic.w	r2, r3, #16
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	699b      	ldr	r3, [r3, #24]
 800bcce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	6a1b      	ldr	r3, [r3, #32]
 800bcd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bcdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	031b      	lsls	r3, r3, #12
 800bce2:	697a      	ldr	r2, [r7, #20]
 800bce4:	4313      	orrs	r3, r2
 800bce6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bcee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	011b      	lsls	r3, r3, #4
 800bcf4:	693a      	ldr	r2, [r7, #16]
 800bcf6:	4313      	orrs	r3, r2
 800bcf8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	697a      	ldr	r2, [r7, #20]
 800bcfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	693a      	ldr	r2, [r7, #16]
 800bd04:	621a      	str	r2, [r3, #32]
}
 800bd06:	bf00      	nop
 800bd08:	371c      	adds	r7, #28
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd10:	4770      	bx	lr

0800bd12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bd12:	b480      	push	{r7}
 800bd14:	b085      	sub	sp, #20
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	6078      	str	r0, [r7, #4]
 800bd1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	689b      	ldr	r3, [r3, #8]
 800bd20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bd2a:	683a      	ldr	r2, [r7, #0]
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	4313      	orrs	r3, r2
 800bd30:	f043 0307 	orr.w	r3, r3, #7
 800bd34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	68fa      	ldr	r2, [r7, #12]
 800bd3a:	609a      	str	r2, [r3, #8]
}
 800bd3c:	bf00      	nop
 800bd3e:	3714      	adds	r7, #20
 800bd40:	46bd      	mov	sp, r7
 800bd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd46:	4770      	bx	lr

0800bd48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b087      	sub	sp, #28
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	60f8      	str	r0, [r7, #12]
 800bd50:	60b9      	str	r1, [r7, #8]
 800bd52:	607a      	str	r2, [r7, #4]
 800bd54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	689b      	ldr	r3, [r3, #8]
 800bd5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bd62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	021a      	lsls	r2, r3, #8
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	431a      	orrs	r2, r3
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	4313      	orrs	r3, r2
 800bd70:	697a      	ldr	r2, [r7, #20]
 800bd72:	4313      	orrs	r3, r2
 800bd74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	697a      	ldr	r2, [r7, #20]
 800bd7a:	609a      	str	r2, [r3, #8]
}
 800bd7c:	bf00      	nop
 800bd7e:	371c      	adds	r7, #28
 800bd80:	46bd      	mov	sp, r7
 800bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd86:	4770      	bx	lr

0800bd88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b087      	sub	sp, #28
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	60f8      	str	r0, [r7, #12]
 800bd90:	60b9      	str	r1, [r7, #8]
 800bd92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	f003 031f 	and.w	r3, r3, #31
 800bd9a:	2201      	movs	r2, #1
 800bd9c:	fa02 f303 	lsl.w	r3, r2, r3
 800bda0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	6a1a      	ldr	r2, [r3, #32]
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	43db      	mvns	r3, r3
 800bdaa:	401a      	ands	r2, r3
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	6a1a      	ldr	r2, [r3, #32]
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	f003 031f 	and.w	r3, r3, #31
 800bdba:	6879      	ldr	r1, [r7, #4]
 800bdbc:	fa01 f303 	lsl.w	r3, r1, r3
 800bdc0:	431a      	orrs	r2, r3
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	621a      	str	r2, [r3, #32]
}
 800bdc6:	bf00      	nop
 800bdc8:	371c      	adds	r7, #28
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd0:	4770      	bx	lr
	...

0800bdd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b085      	sub	sp, #20
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bde4:	2b01      	cmp	r3, #1
 800bde6:	d101      	bne.n	800bdec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bde8:	2302      	movs	r3, #2
 800bdea:	e05a      	b.n	800bea2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2201      	movs	r2, #1
 800bdf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2202      	movs	r2, #2
 800bdf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	689b      	ldr	r3, [r3, #8]
 800be0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	68fa      	ldr	r2, [r7, #12]
 800be1a:	4313      	orrs	r3, r2
 800be1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	68fa      	ldr	r2, [r7, #12]
 800be24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	4a21      	ldr	r2, [pc, #132]	@ (800beb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800be2c:	4293      	cmp	r3, r2
 800be2e:	d022      	beq.n	800be76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be38:	d01d      	beq.n	800be76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	4a1d      	ldr	r2, [pc, #116]	@ (800beb4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800be40:	4293      	cmp	r3, r2
 800be42:	d018      	beq.n	800be76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	4a1b      	ldr	r2, [pc, #108]	@ (800beb8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800be4a:	4293      	cmp	r3, r2
 800be4c:	d013      	beq.n	800be76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	4a1a      	ldr	r2, [pc, #104]	@ (800bebc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800be54:	4293      	cmp	r3, r2
 800be56:	d00e      	beq.n	800be76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	4a18      	ldr	r2, [pc, #96]	@ (800bec0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800be5e:	4293      	cmp	r3, r2
 800be60:	d009      	beq.n	800be76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	4a17      	ldr	r2, [pc, #92]	@ (800bec4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800be68:	4293      	cmp	r3, r2
 800be6a:	d004      	beq.n	800be76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	4a15      	ldr	r2, [pc, #84]	@ (800bec8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800be72:	4293      	cmp	r3, r2
 800be74:	d10c      	bne.n	800be90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800be7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	685b      	ldr	r3, [r3, #4]
 800be82:	68ba      	ldr	r2, [r7, #8]
 800be84:	4313      	orrs	r3, r2
 800be86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	68ba      	ldr	r2, [r7, #8]
 800be8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2201      	movs	r2, #1
 800be94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2200      	movs	r2, #0
 800be9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bea0:	2300      	movs	r3, #0
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3714      	adds	r7, #20
 800bea6:	46bd      	mov	sp, r7
 800bea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beac:	4770      	bx	lr
 800beae:	bf00      	nop
 800beb0:	40010000 	.word	0x40010000
 800beb4:	40000400 	.word	0x40000400
 800beb8:	40000800 	.word	0x40000800
 800bebc:	40000c00 	.word	0x40000c00
 800bec0:	40010400 	.word	0x40010400
 800bec4:	40014000 	.word	0x40014000
 800bec8:	40001800 	.word	0x40001800

0800becc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800becc:	b480      	push	{r7}
 800bece:	b085      	sub	sp, #20
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
 800bed4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bed6:	2300      	movs	r3, #0
 800bed8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bee0:	2b01      	cmp	r3, #1
 800bee2:	d101      	bne.n	800bee8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bee4:	2302      	movs	r3, #2
 800bee6:	e03d      	b.n	800bf64 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2201      	movs	r2, #1
 800beec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	68db      	ldr	r3, [r3, #12]
 800befa:	4313      	orrs	r3, r2
 800befc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	689b      	ldr	r3, [r3, #8]
 800bf08:	4313      	orrs	r3, r2
 800bf0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	685b      	ldr	r3, [r3, #4]
 800bf16:	4313      	orrs	r3, r2
 800bf18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	4313      	orrs	r3, r2
 800bf26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	691b      	ldr	r3, [r3, #16]
 800bf32:	4313      	orrs	r3, r2
 800bf34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	695b      	ldr	r3, [r3, #20]
 800bf40:	4313      	orrs	r3, r2
 800bf42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	69db      	ldr	r3, [r3, #28]
 800bf4e:	4313      	orrs	r3, r2
 800bf50:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	68fa      	ldr	r2, [r7, #12]
 800bf58:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bf62:	2300      	movs	r3, #0
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3714      	adds	r7, #20
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6e:	4770      	bx	lr

0800bf70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b083      	sub	sp, #12
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bf78:	bf00      	nop
 800bf7a:	370c      	adds	r7, #12
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr

0800bf84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b083      	sub	sp, #12
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bf8c:	bf00      	nop
 800bf8e:	370c      	adds	r7, #12
 800bf90:	46bd      	mov	sp, r7
 800bf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf96:	4770      	bx	lr

0800bf98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b082      	sub	sp, #8
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d101      	bne.n	800bfaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	e03f      	b.n	800c02a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bfb0:	b2db      	uxtb	r3, r3
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d106      	bne.n	800bfc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f7f8 f976 	bl	80042b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2224      	movs	r2, #36	@ 0x24
 800bfc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	68da      	ldr	r2, [r3, #12]
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bfda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f000 fdbd 	bl	800cb5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	691a      	ldr	r2, [r3, #16]
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bff0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	695a      	ldr	r2, [r3, #20]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c000:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	68da      	ldr	r2, [r3, #12]
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c010:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2200      	movs	r2, #0
 800c016:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2220      	movs	r2, #32
 800c01c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2220      	movs	r2, #32
 800c024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800c028:	2300      	movs	r3, #0
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3708      	adds	r7, #8
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
	...

0800c034 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b08c      	sub	sp, #48	@ 0x30
 800c038:	af00      	add	r7, sp, #0
 800c03a:	60f8      	str	r0, [r7, #12]
 800c03c:	60b9      	str	r1, [r7, #8]
 800c03e:	4613      	mov	r3, r2
 800c040:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c048:	b2db      	uxtb	r3, r3
 800c04a:	2b20      	cmp	r3, #32
 800c04c:	d165      	bne.n	800c11a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800c04e:	68bb      	ldr	r3, [r7, #8]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d002      	beq.n	800c05a <HAL_UART_Transmit_DMA+0x26>
 800c054:	88fb      	ldrh	r3, [r7, #6]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d101      	bne.n	800c05e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800c05a:	2301      	movs	r3, #1
 800c05c:	e05e      	b.n	800c11c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c064:	2b01      	cmp	r3, #1
 800c066:	d101      	bne.n	800c06c <HAL_UART_Transmit_DMA+0x38>
 800c068:	2302      	movs	r3, #2
 800c06a:	e057      	b.n	800c11c <HAL_UART_Transmit_DMA+0xe8>
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	2201      	movs	r2, #1
 800c070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 800c074:	68ba      	ldr	r2, [r7, #8]
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	88fa      	ldrh	r2, [r7, #6]
 800c07e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	88fa      	ldrh	r2, [r7, #6]
 800c084:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	2200      	movs	r2, #0
 800c08a:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	2221      	movs	r2, #33	@ 0x21
 800c090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c098:	4a22      	ldr	r2, [pc, #136]	@ (800c124 <HAL_UART_Transmit_DMA+0xf0>)
 800c09a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0a0:	4a21      	ldr	r2, [pc, #132]	@ (800c128 <HAL_UART_Transmit_DMA+0xf4>)
 800c0a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0a8:	4a20      	ldr	r2, [pc, #128]	@ (800c12c <HAL_UART_Transmit_DMA+0xf8>)
 800c0aa:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800c0b4:	f107 0308 	add.w	r3, r7, #8
 800c0b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800c0be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0c0:	6819      	ldr	r1, [r3, #0]
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	3304      	adds	r3, #4
 800c0c8:	461a      	mov	r2, r3
 800c0ca:	88fb      	ldrh	r3, [r7, #6]
 800c0cc:	f7f9 fb58 	bl	8005780 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c0d8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	3314      	adds	r3, #20
 800c0e8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ea:	69bb      	ldr	r3, [r7, #24]
 800c0ec:	e853 3f00 	ldrex	r3, [r3]
 800c0f0:	617b      	str	r3, [r7, #20]
   return(result);
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	3314      	adds	r3, #20
 800c100:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c102:	627a      	str	r2, [r7, #36]	@ 0x24
 800c104:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c106:	6a39      	ldr	r1, [r7, #32]
 800c108:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c10a:	e841 2300 	strex	r3, r2, [r1]
 800c10e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c110:	69fb      	ldr	r3, [r7, #28]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d1e5      	bne.n	800c0e2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800c116:	2300      	movs	r3, #0
 800c118:	e000      	b.n	800c11c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800c11a:	2302      	movs	r3, #2
  }
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3730      	adds	r7, #48	@ 0x30
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}
 800c124:	0800c68d 	.word	0x0800c68d
 800c128:	0800c727 	.word	0x0800c727
 800c12c:	0800c743 	.word	0x0800c743

0800c130 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b0ba      	sub	sp, #232	@ 0xe8
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	68db      	ldr	r3, [r3, #12]
 800c148:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	695b      	ldr	r3, [r3, #20]
 800c152:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800c156:	2300      	movs	r3, #0
 800c158:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800c15c:	2300      	movs	r3, #0
 800c15e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c166:	f003 030f 	and.w	r3, r3, #15
 800c16a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800c16e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c172:	2b00      	cmp	r3, #0
 800c174:	d10f      	bne.n	800c196 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c17a:	f003 0320 	and.w	r3, r3, #32
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d009      	beq.n	800c196 <HAL_UART_IRQHandler+0x66>
 800c182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c186:	f003 0320 	and.w	r3, r3, #32
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d003      	beq.n	800c196 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f000 fc28 	bl	800c9e4 <UART_Receive_IT>
      return;
 800c194:	e256      	b.n	800c644 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c196:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	f000 80de 	beq.w	800c35c <HAL_UART_IRQHandler+0x22c>
 800c1a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c1a4:	f003 0301 	and.w	r3, r3, #1
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d106      	bne.n	800c1ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c1ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c1b0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	f000 80d1 	beq.w	800c35c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c1ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c1be:	f003 0301 	and.w	r3, r3, #1
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d00b      	beq.n	800c1de <HAL_UART_IRQHandler+0xae>
 800c1c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c1ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d005      	beq.n	800c1de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1d6:	f043 0201 	orr.w	r2, r3, #1
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c1de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c1e2:	f003 0304 	and.w	r3, r3, #4
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d00b      	beq.n	800c202 <HAL_UART_IRQHandler+0xd2>
 800c1ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c1ee:	f003 0301 	and.w	r3, r3, #1
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d005      	beq.n	800c202 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1fa:	f043 0202 	orr.w	r2, r3, #2
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c206:	f003 0302 	and.w	r3, r3, #2
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d00b      	beq.n	800c226 <HAL_UART_IRQHandler+0xf6>
 800c20e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c212:	f003 0301 	and.w	r3, r3, #1
 800c216:	2b00      	cmp	r3, #0
 800c218:	d005      	beq.n	800c226 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c21e:	f043 0204 	orr.w	r2, r3, #4
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c22a:	f003 0308 	and.w	r3, r3, #8
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d011      	beq.n	800c256 <HAL_UART_IRQHandler+0x126>
 800c232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c236:	f003 0320 	and.w	r3, r3, #32
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d105      	bne.n	800c24a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c23e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c242:	f003 0301 	and.w	r3, r3, #1
 800c246:	2b00      	cmp	r3, #0
 800c248:	d005      	beq.n	800c256 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c24e:	f043 0208 	orr.w	r2, r3, #8
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	f000 81ed 	beq.w	800c63a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c264:	f003 0320 	and.w	r3, r3, #32
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d008      	beq.n	800c27e <HAL_UART_IRQHandler+0x14e>
 800c26c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c270:	f003 0320 	and.w	r3, r3, #32
 800c274:	2b00      	cmp	r3, #0
 800c276:	d002      	beq.n	800c27e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f000 fbb3 	bl	800c9e4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	695b      	ldr	r3, [r3, #20]
 800c284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c288:	2b40      	cmp	r3, #64	@ 0x40
 800c28a:	bf0c      	ite	eq
 800c28c:	2301      	moveq	r3, #1
 800c28e:	2300      	movne	r3, #0
 800c290:	b2db      	uxtb	r3, r3
 800c292:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c29a:	f003 0308 	and.w	r3, r3, #8
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d103      	bne.n	800c2aa <HAL_UART_IRQHandler+0x17a>
 800c2a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d04f      	beq.n	800c34a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f000 fabb 	bl	800c826 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	695b      	ldr	r3, [r3, #20]
 800c2b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2ba:	2b40      	cmp	r3, #64	@ 0x40
 800c2bc:	d141      	bne.n	800c342 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	3314      	adds	r3, #20
 800c2c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c2cc:	e853 3f00 	ldrex	r3, [r3]
 800c2d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c2d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c2d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c2dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	3314      	adds	r3, #20
 800c2e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c2ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c2ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c2f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c2fa:	e841 2300 	strex	r3, r2, [r1]
 800c2fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c302:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c306:	2b00      	cmp	r3, #0
 800c308:	d1d9      	bne.n	800c2be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d013      	beq.n	800c33a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c316:	4a7d      	ldr	r2, [pc, #500]	@ (800c50c <HAL_UART_IRQHandler+0x3dc>)
 800c318:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c31e:	4618      	mov	r0, r3
 800c320:	f7f9 faf6 	bl	8005910 <HAL_DMA_Abort_IT>
 800c324:	4603      	mov	r3, r0
 800c326:	2b00      	cmp	r3, #0
 800c328:	d016      	beq.n	800c358 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c32e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c330:	687a      	ldr	r2, [r7, #4]
 800c332:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c334:	4610      	mov	r0, r2
 800c336:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c338:	e00e      	b.n	800c358 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f000 f990 	bl	800c660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c340:	e00a      	b.n	800c358 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 f98c 	bl	800c660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c348:	e006      	b.n	800c358 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f000 f988 	bl	800c660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2200      	movs	r2, #0
 800c354:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800c356:	e170      	b.n	800c63a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c358:	bf00      	nop
    return;
 800c35a:	e16e      	b.n	800c63a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c360:	2b01      	cmp	r3, #1
 800c362:	f040 814a 	bne.w	800c5fa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c36a:	f003 0310 	and.w	r3, r3, #16
 800c36e:	2b00      	cmp	r3, #0
 800c370:	f000 8143 	beq.w	800c5fa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c378:	f003 0310 	and.w	r3, r3, #16
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	f000 813c 	beq.w	800c5fa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c382:	2300      	movs	r3, #0
 800c384:	60bb      	str	r3, [r7, #8]
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	60bb      	str	r3, [r7, #8]
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	685b      	ldr	r3, [r3, #4]
 800c394:	60bb      	str	r3, [r7, #8]
 800c396:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	695b      	ldr	r3, [r3, #20]
 800c39e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3a2:	2b40      	cmp	r3, #64	@ 0x40
 800c3a4:	f040 80b4 	bne.w	800c510 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	685b      	ldr	r3, [r3, #4]
 800c3b0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c3b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	f000 8140 	beq.w	800c63e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c3c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	f080 8139 	bcs.w	800c63e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c3d2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3d8:	69db      	ldr	r3, [r3, #28]
 800c3da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c3de:	f000 8088 	beq.w	800c4f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	330c      	adds	r3, #12
 800c3e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c3f0:	e853 3f00 	ldrex	r3, [r3]
 800c3f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c3f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c3fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c400:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	330c      	adds	r3, #12
 800c40a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c40e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c412:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c416:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c41a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c41e:	e841 2300 	strex	r3, r2, [r1]
 800c422:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c426:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d1d9      	bne.n	800c3e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	3314      	adds	r3, #20
 800c434:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c436:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c438:	e853 3f00 	ldrex	r3, [r3]
 800c43c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c43e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c440:	f023 0301 	bic.w	r3, r3, #1
 800c444:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	3314      	adds	r3, #20
 800c44e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c452:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c456:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c458:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c45a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c45e:	e841 2300 	strex	r3, r2, [r1]
 800c462:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c464:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c466:	2b00      	cmp	r3, #0
 800c468:	d1e1      	bne.n	800c42e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	3314      	adds	r3, #20
 800c470:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c472:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c474:	e853 3f00 	ldrex	r3, [r3]
 800c478:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c47a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c47c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c480:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	3314      	adds	r3, #20
 800c48a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c48e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c490:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c492:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c494:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c496:	e841 2300 	strex	r3, r2, [r1]
 800c49a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c49c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d1e3      	bne.n	800c46a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2220      	movs	r2, #32
 800c4a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	330c      	adds	r3, #12
 800c4b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c4ba:	e853 3f00 	ldrex	r3, [r3]
 800c4be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c4c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c4c2:	f023 0310 	bic.w	r3, r3, #16
 800c4c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	330c      	adds	r3, #12
 800c4d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c4d4:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c4d6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c4da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c4dc:	e841 2300 	strex	r3, r2, [r1]
 800c4e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c4e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d1e3      	bne.n	800c4b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	f7f9 f99f 	bl	8005830 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c4fa:	b29b      	uxth	r3, r3
 800c4fc:	1ad3      	subs	r3, r2, r3
 800c4fe:	b29b      	uxth	r3, r3
 800c500:	4619      	mov	r1, r3
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f000 f8b6 	bl	800c674 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c508:	e099      	b.n	800c63e <HAL_UART_IRQHandler+0x50e>
 800c50a:	bf00      	nop
 800c50c:	0800c8ed 	.word	0x0800c8ed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c518:	b29b      	uxth	r3, r3
 800c51a:	1ad3      	subs	r3, r2, r3
 800c51c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c524:	b29b      	uxth	r3, r3
 800c526:	2b00      	cmp	r3, #0
 800c528:	f000 808b 	beq.w	800c642 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c52c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c530:	2b00      	cmp	r3, #0
 800c532:	f000 8086 	beq.w	800c642 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	330c      	adds	r3, #12
 800c53c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c53e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c540:	e853 3f00 	ldrex	r3, [r3]
 800c544:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c548:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c54c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	330c      	adds	r3, #12
 800c556:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800c55a:	647a      	str	r2, [r7, #68]	@ 0x44
 800c55c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c55e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c560:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c562:	e841 2300 	strex	r3, r2, [r1]
 800c566:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d1e3      	bne.n	800c536 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	3314      	adds	r3, #20
 800c574:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c578:	e853 3f00 	ldrex	r3, [r3]
 800c57c:	623b      	str	r3, [r7, #32]
   return(result);
 800c57e:	6a3b      	ldr	r3, [r7, #32]
 800c580:	f023 0301 	bic.w	r3, r3, #1
 800c584:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	3314      	adds	r3, #20
 800c58e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c592:	633a      	str	r2, [r7, #48]	@ 0x30
 800c594:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c596:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c598:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c59a:	e841 2300 	strex	r3, r2, [r1]
 800c59e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c5a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d1e3      	bne.n	800c56e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2220      	movs	r2, #32
 800c5aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	330c      	adds	r3, #12
 800c5ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	e853 3f00 	ldrex	r3, [r3]
 800c5c2:	60fb      	str	r3, [r7, #12]
   return(result);
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f023 0310 	bic.w	r3, r3, #16
 800c5ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	330c      	adds	r3, #12
 800c5d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800c5d8:	61fa      	str	r2, [r7, #28]
 800c5da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5dc:	69b9      	ldr	r1, [r7, #24]
 800c5de:	69fa      	ldr	r2, [r7, #28]
 800c5e0:	e841 2300 	strex	r3, r2, [r1]
 800c5e4:	617b      	str	r3, [r7, #20]
   return(result);
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d1e3      	bne.n	800c5b4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c5ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c5f0:	4619      	mov	r1, r3
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f000 f83e 	bl	800c674 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c5f8:	e023      	b.n	800c642 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c5fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c602:	2b00      	cmp	r3, #0
 800c604:	d009      	beq.n	800c61a <HAL_UART_IRQHandler+0x4ea>
 800c606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c60a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d003      	beq.n	800c61a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f000 f97e 	bl	800c914 <UART_Transmit_IT>
    return;
 800c618:	e014      	b.n	800c644 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c61a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c61e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c622:	2b00      	cmp	r3, #0
 800c624:	d00e      	beq.n	800c644 <HAL_UART_IRQHandler+0x514>
 800c626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c62a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d008      	beq.n	800c644 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f000 f9be 	bl	800c9b4 <UART_EndTransmit_IT>
    return;
 800c638:	e004      	b.n	800c644 <HAL_UART_IRQHandler+0x514>
    return;
 800c63a:	bf00      	nop
 800c63c:	e002      	b.n	800c644 <HAL_UART_IRQHandler+0x514>
      return;
 800c63e:	bf00      	nop
 800c640:	e000      	b.n	800c644 <HAL_UART_IRQHandler+0x514>
      return;
 800c642:	bf00      	nop
  }
}
 800c644:	37e8      	adds	r7, #232	@ 0xe8
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
 800c64a:	bf00      	nop

0800c64c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c64c:	b480      	push	{r7}
 800c64e:	b083      	sub	sp, #12
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800c654:	bf00      	nop
 800c656:	370c      	adds	r7, #12
 800c658:	46bd      	mov	sp, r7
 800c65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65e:	4770      	bx	lr

0800c660 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c660:	b480      	push	{r7}
 800c662:	b083      	sub	sp, #12
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c668:	bf00      	nop
 800c66a:	370c      	adds	r7, #12
 800c66c:	46bd      	mov	sp, r7
 800c66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c672:	4770      	bx	lr

0800c674 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c674:	b480      	push	{r7}
 800c676:	b083      	sub	sp, #12
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	460b      	mov	r3, r1
 800c67e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c680:	bf00      	nop
 800c682:	370c      	adds	r7, #12
 800c684:	46bd      	mov	sp, r7
 800c686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68a:	4770      	bx	lr

0800c68c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b090      	sub	sp, #64	@ 0x40
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c698:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d137      	bne.n	800c718 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800c6a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c6ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	3314      	adds	r3, #20
 800c6b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6b8:	e853 3f00 	ldrex	r3, [r3]
 800c6bc:	623b      	str	r3, [r7, #32]
   return(result);
 800c6be:	6a3b      	ldr	r3, [r7, #32]
 800c6c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c6c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c6c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	3314      	adds	r3, #20
 800c6cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c6ce:	633a      	str	r2, [r7, #48]	@ 0x30
 800c6d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c6d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6d6:	e841 2300 	strex	r3, r2, [r1]
 800c6da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c6dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d1e5      	bne.n	800c6ae <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c6e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	330c      	adds	r3, #12
 800c6e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ea:	693b      	ldr	r3, [r7, #16]
 800c6ec:	e853 3f00 	ldrex	r3, [r3]
 800c6f0:	60fb      	str	r3, [r7, #12]
   return(result);
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c6f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	330c      	adds	r3, #12
 800c700:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c702:	61fa      	str	r2, [r7, #28]
 800c704:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c706:	69b9      	ldr	r1, [r7, #24]
 800c708:	69fa      	ldr	r2, [r7, #28]
 800c70a:	e841 2300 	strex	r3, r2, [r1]
 800c70e:	617b      	str	r3, [r7, #20]
   return(result);
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d1e5      	bne.n	800c6e2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c716:	e002      	b.n	800c71e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c718:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c71a:	f7f5 ff41 	bl	80025a0 <HAL_UART_TxCpltCallback>
}
 800c71e:	bf00      	nop
 800c720:	3740      	adds	r7, #64	@ 0x40
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}

0800c726 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c726:	b580      	push	{r7, lr}
 800c728:	b084      	sub	sp, #16
 800c72a:	af00      	add	r7, sp, #0
 800c72c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c732:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c734:	68f8      	ldr	r0, [r7, #12]
 800c736:	f7ff ff89 	bl	800c64c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c73a:	bf00      	nop
 800c73c:	3710      	adds	r7, #16
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}

0800c742 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c742:	b580      	push	{r7, lr}
 800c744:	b084      	sub	sp, #16
 800c746:	af00      	add	r7, sp, #0
 800c748:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c74a:	2300      	movs	r3, #0
 800c74c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c752:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	695b      	ldr	r3, [r3, #20]
 800c75a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c75e:	2b80      	cmp	r3, #128	@ 0x80
 800c760:	bf0c      	ite	eq
 800c762:	2301      	moveq	r3, #1
 800c764:	2300      	movne	r3, #0
 800c766:	b2db      	uxtb	r3, r3
 800c768:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c770:	b2db      	uxtb	r3, r3
 800c772:	2b21      	cmp	r3, #33	@ 0x21
 800c774:	d108      	bne.n	800c788 <UART_DMAError+0x46>
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d005      	beq.n	800c788 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	2200      	movs	r2, #0
 800c780:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800c782:	68b8      	ldr	r0, [r7, #8]
 800c784:	f000 f827 	bl	800c7d6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	695b      	ldr	r3, [r3, #20]
 800c78e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c792:	2b40      	cmp	r3, #64	@ 0x40
 800c794:	bf0c      	ite	eq
 800c796:	2301      	moveq	r3, #1
 800c798:	2300      	movne	r3, #0
 800c79a:	b2db      	uxtb	r3, r3
 800c79c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c7a4:	b2db      	uxtb	r3, r3
 800c7a6:	2b22      	cmp	r3, #34	@ 0x22
 800c7a8:	d108      	bne.n	800c7bc <UART_DMAError+0x7a>
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d005      	beq.n	800c7bc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800c7b6:	68b8      	ldr	r0, [r7, #8]
 800c7b8:	f000 f835 	bl	800c826 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7c0:	f043 0210 	orr.w	r2, r3, #16
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c7c8:	68b8      	ldr	r0, [r7, #8]
 800c7ca:	f7ff ff49 	bl	800c660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c7ce:	bf00      	nop
 800c7d0:	3710      	adds	r7, #16
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}

0800c7d6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c7d6:	b480      	push	{r7}
 800c7d8:	b089      	sub	sp, #36	@ 0x24
 800c7da:	af00      	add	r7, sp, #0
 800c7dc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	330c      	adds	r3, #12
 800c7e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	e853 3f00 	ldrex	r3, [r3]
 800c7ec:	60bb      	str	r3, [r7, #8]
   return(result);
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c7f4:	61fb      	str	r3, [r7, #28]
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	330c      	adds	r3, #12
 800c7fc:	69fa      	ldr	r2, [r7, #28]
 800c7fe:	61ba      	str	r2, [r7, #24]
 800c800:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c802:	6979      	ldr	r1, [r7, #20]
 800c804:	69ba      	ldr	r2, [r7, #24]
 800c806:	e841 2300 	strex	r3, r2, [r1]
 800c80a:	613b      	str	r3, [r7, #16]
   return(result);
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d1e5      	bne.n	800c7de <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2220      	movs	r2, #32
 800c816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 800c81a:	bf00      	nop
 800c81c:	3724      	adds	r7, #36	@ 0x24
 800c81e:	46bd      	mov	sp, r7
 800c820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c824:	4770      	bx	lr

0800c826 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c826:	b480      	push	{r7}
 800c828:	b095      	sub	sp, #84	@ 0x54
 800c82a:	af00      	add	r7, sp, #0
 800c82c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	330c      	adds	r3, #12
 800c834:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c838:	e853 3f00 	ldrex	r3, [r3]
 800c83c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c83e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c840:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c844:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	330c      	adds	r3, #12
 800c84c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c84e:	643a      	str	r2, [r7, #64]	@ 0x40
 800c850:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c852:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c854:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c856:	e841 2300 	strex	r3, r2, [r1]
 800c85a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c85c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d1e5      	bne.n	800c82e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	3314      	adds	r3, #20
 800c868:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c86a:	6a3b      	ldr	r3, [r7, #32]
 800c86c:	e853 3f00 	ldrex	r3, [r3]
 800c870:	61fb      	str	r3, [r7, #28]
   return(result);
 800c872:	69fb      	ldr	r3, [r7, #28]
 800c874:	f023 0301 	bic.w	r3, r3, #1
 800c878:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	3314      	adds	r3, #20
 800c880:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c882:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c884:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c886:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c888:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c88a:	e841 2300 	strex	r3, r2, [r1]
 800c88e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c892:	2b00      	cmp	r3, #0
 800c894:	d1e5      	bne.n	800c862 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c89a:	2b01      	cmp	r3, #1
 800c89c:	d119      	bne.n	800c8d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	330c      	adds	r3, #12
 800c8a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	e853 3f00 	ldrex	r3, [r3]
 800c8ac:	60bb      	str	r3, [r7, #8]
   return(result);
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	f023 0310 	bic.w	r3, r3, #16
 800c8b4:	647b      	str	r3, [r7, #68]	@ 0x44
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	330c      	adds	r3, #12
 800c8bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c8be:	61ba      	str	r2, [r7, #24]
 800c8c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8c2:	6979      	ldr	r1, [r7, #20]
 800c8c4:	69ba      	ldr	r2, [r7, #24]
 800c8c6:	e841 2300 	strex	r3, r2, [r1]
 800c8ca:	613b      	str	r3, [r7, #16]
   return(result);
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d1e5      	bne.n	800c89e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2220      	movs	r2, #32
 800c8d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2200      	movs	r2, #0
 800c8de:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800c8e0:	bf00      	nop
 800c8e2:	3754      	adds	r7, #84	@ 0x54
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ea:	4770      	bx	lr

0800c8ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b084      	sub	sp, #16
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	2200      	movs	r2, #0
 800c904:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c906:	68f8      	ldr	r0, [r7, #12]
 800c908:	f7ff feaa 	bl	800c660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c90c:	bf00      	nop
 800c90e:	3710      	adds	r7, #16
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}

0800c914 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c914:	b480      	push	{r7}
 800c916:	b085      	sub	sp, #20
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c922:	b2db      	uxtb	r3, r3
 800c924:	2b21      	cmp	r3, #33	@ 0x21
 800c926:	d13e      	bne.n	800c9a6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	689b      	ldr	r3, [r3, #8]
 800c92c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c930:	d114      	bne.n	800c95c <UART_Transmit_IT+0x48>
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	691b      	ldr	r3, [r3, #16]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d110      	bne.n	800c95c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6a1b      	ldr	r3, [r3, #32]
 800c93e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	881b      	ldrh	r3, [r3, #0]
 800c944:	461a      	mov	r2, r3
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c94e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	6a1b      	ldr	r3, [r3, #32]
 800c954:	1c9a      	adds	r2, r3, #2
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	621a      	str	r2, [r3, #32]
 800c95a:	e008      	b.n	800c96e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6a1b      	ldr	r3, [r3, #32]
 800c960:	1c59      	adds	r1, r3, #1
 800c962:	687a      	ldr	r2, [r7, #4]
 800c964:	6211      	str	r1, [r2, #32]
 800c966:	781a      	ldrb	r2, [r3, #0]
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c972:	b29b      	uxth	r3, r3
 800c974:	3b01      	subs	r3, #1
 800c976:	b29b      	uxth	r3, r3
 800c978:	687a      	ldr	r2, [r7, #4]
 800c97a:	4619      	mov	r1, r3
 800c97c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d10f      	bne.n	800c9a2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	68da      	ldr	r2, [r3, #12]
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c990:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	68da      	ldr	r2, [r3, #12]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c9a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	e000      	b.n	800c9a8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c9a6:	2302      	movs	r3, #2
  }
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3714      	adds	r7, #20
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b2:	4770      	bx	lr

0800c9b4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b082      	sub	sp, #8
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	68da      	ldr	r2, [r3, #12]
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c9ca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2220      	movs	r2, #32
 800c9d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f7f5 fde3 	bl	80025a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c9da:	2300      	movs	r3, #0
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3708      	adds	r7, #8
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}

0800c9e4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b08c      	sub	sp, #48	@ 0x30
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c9f2:	b2db      	uxtb	r3, r3
 800c9f4:	2b22      	cmp	r3, #34	@ 0x22
 800c9f6:	f040 80ab 	bne.w	800cb50 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	689b      	ldr	r3, [r3, #8]
 800c9fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca02:	d117      	bne.n	800ca34 <UART_Receive_IT+0x50>
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	691b      	ldr	r3, [r3, #16]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d113      	bne.n	800ca34 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca14:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	685b      	ldr	r3, [r3, #4]
 800ca1c:	b29b      	uxth	r3, r3
 800ca1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca22:	b29a      	uxth	r2, r3
 800ca24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca26:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca2c:	1c9a      	adds	r2, r3, #2
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	629a      	str	r2, [r3, #40]	@ 0x28
 800ca32:	e026      	b.n	800ca82 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	689b      	ldr	r3, [r3, #8]
 800ca42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca46:	d007      	beq.n	800ca58 <UART_Receive_IT+0x74>
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	689b      	ldr	r3, [r3, #8]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d10a      	bne.n	800ca66 <UART_Receive_IT+0x82>
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	691b      	ldr	r3, [r3, #16]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d106      	bne.n	800ca66 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	685b      	ldr	r3, [r3, #4]
 800ca5e:	b2da      	uxtb	r2, r3
 800ca60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca62:	701a      	strb	r2, [r3, #0]
 800ca64:	e008      	b.n	800ca78 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	b2db      	uxtb	r3, r3
 800ca6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca72:	b2da      	uxtb	r2, r3
 800ca74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca76:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca7c:	1c5a      	adds	r2, r3, #1
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ca86:	b29b      	uxth	r3, r3
 800ca88:	3b01      	subs	r3, #1
 800ca8a:	b29b      	uxth	r3, r3
 800ca8c:	687a      	ldr	r2, [r7, #4]
 800ca8e:	4619      	mov	r1, r3
 800ca90:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d15a      	bne.n	800cb4c <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	68da      	ldr	r2, [r3, #12]
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	f022 0220 	bic.w	r2, r2, #32
 800caa4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	68da      	ldr	r2, [r3, #12]
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cab4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	695a      	ldr	r2, [r3, #20]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	f022 0201 	bic.w	r2, r2, #1
 800cac4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2220      	movs	r2, #32
 800caca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cad2:	2b01      	cmp	r3, #1
 800cad4:	d135      	bne.n	800cb42 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2200      	movs	r2, #0
 800cada:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	330c      	adds	r3, #12
 800cae2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cae4:	697b      	ldr	r3, [r7, #20]
 800cae6:	e853 3f00 	ldrex	r3, [r3]
 800caea:	613b      	str	r3, [r7, #16]
   return(result);
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	f023 0310 	bic.w	r3, r3, #16
 800caf2:	627b      	str	r3, [r7, #36]	@ 0x24
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	330c      	adds	r3, #12
 800cafa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cafc:	623a      	str	r2, [r7, #32]
 800cafe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb00:	69f9      	ldr	r1, [r7, #28]
 800cb02:	6a3a      	ldr	r2, [r7, #32]
 800cb04:	e841 2300 	strex	r3, r2, [r1]
 800cb08:	61bb      	str	r3, [r7, #24]
   return(result);
 800cb0a:	69bb      	ldr	r3, [r7, #24]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d1e5      	bne.n	800cadc <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f003 0310 	and.w	r3, r3, #16
 800cb1a:	2b10      	cmp	r3, #16
 800cb1c:	d10a      	bne.n	800cb34 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cb1e:	2300      	movs	r3, #0
 800cb20:	60fb      	str	r3, [r7, #12]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	60fb      	str	r3, [r7, #12]
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	685b      	ldr	r3, [r3, #4]
 800cb30:	60fb      	str	r3, [r7, #12]
 800cb32:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cb38:	4619      	mov	r1, r3
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f7ff fd9a 	bl	800c674 <HAL_UARTEx_RxEventCallback>
 800cb40:	e002      	b.n	800cb48 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f7f5 fd22 	bl	800258c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	e002      	b.n	800cb52 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	e000      	b.n	800cb52 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800cb50:	2302      	movs	r3, #2
  }
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3730      	adds	r7, #48	@ 0x30
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}
	...

0800cb5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cb5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cb60:	b0c0      	sub	sp, #256	@ 0x100
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cb68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	691b      	ldr	r3, [r3, #16]
 800cb70:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800cb74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cb78:	68d9      	ldr	r1, [r3, #12]
 800cb7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cb7e:	681a      	ldr	r2, [r3, #0]
 800cb80:	ea40 0301 	orr.w	r3, r0, r1
 800cb84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cb86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cb8a:	689a      	ldr	r2, [r3, #8]
 800cb8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cb90:	691b      	ldr	r3, [r3, #16]
 800cb92:	431a      	orrs	r2, r3
 800cb94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cb98:	695b      	ldr	r3, [r3, #20]
 800cb9a:	431a      	orrs	r2, r3
 800cb9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cba0:	69db      	ldr	r3, [r3, #28]
 800cba2:	4313      	orrs	r3, r2
 800cba4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800cba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	68db      	ldr	r3, [r3, #12]
 800cbb0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800cbb4:	f021 010c 	bic.w	r1, r1, #12
 800cbb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cbbc:	681a      	ldr	r2, [r3, #0]
 800cbbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cbc2:	430b      	orrs	r3, r1
 800cbc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cbc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	695b      	ldr	r3, [r3, #20]
 800cbce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800cbd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cbd6:	6999      	ldr	r1, [r3, #24]
 800cbd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cbdc:	681a      	ldr	r2, [r3, #0]
 800cbde:	ea40 0301 	orr.w	r3, r0, r1
 800cbe2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cbe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cbe8:	681a      	ldr	r2, [r3, #0]
 800cbea:	4b8f      	ldr	r3, [pc, #572]	@ (800ce28 <UART_SetConfig+0x2cc>)
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d005      	beq.n	800cbfc <UART_SetConfig+0xa0>
 800cbf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cbf4:	681a      	ldr	r2, [r3, #0]
 800cbf6:	4b8d      	ldr	r3, [pc, #564]	@ (800ce2c <UART_SetConfig+0x2d0>)
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	d104      	bne.n	800cc06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cbfc:	f7fc ff9c 	bl	8009b38 <HAL_RCC_GetPCLK2Freq>
 800cc00:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800cc04:	e003      	b.n	800cc0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cc06:	f7fc ff83 	bl	8009b10 <HAL_RCC_GetPCLK1Freq>
 800cc0a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cc0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cc12:	69db      	ldr	r3, [r3, #28]
 800cc14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cc18:	f040 810c 	bne.w	800ce34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cc1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cc20:	2200      	movs	r2, #0
 800cc22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800cc26:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800cc2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800cc2e:	4622      	mov	r2, r4
 800cc30:	462b      	mov	r3, r5
 800cc32:	1891      	adds	r1, r2, r2
 800cc34:	65b9      	str	r1, [r7, #88]	@ 0x58
 800cc36:	415b      	adcs	r3, r3
 800cc38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cc3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800cc3e:	4621      	mov	r1, r4
 800cc40:	eb12 0801 	adds.w	r8, r2, r1
 800cc44:	4629      	mov	r1, r5
 800cc46:	eb43 0901 	adc.w	r9, r3, r1
 800cc4a:	f04f 0200 	mov.w	r2, #0
 800cc4e:	f04f 0300 	mov.w	r3, #0
 800cc52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cc56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cc5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cc5e:	4690      	mov	r8, r2
 800cc60:	4699      	mov	r9, r3
 800cc62:	4623      	mov	r3, r4
 800cc64:	eb18 0303 	adds.w	r3, r8, r3
 800cc68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800cc6c:	462b      	mov	r3, r5
 800cc6e:	eb49 0303 	adc.w	r3, r9, r3
 800cc72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cc76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cc82:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800cc86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800cc8a:	460b      	mov	r3, r1
 800cc8c:	18db      	adds	r3, r3, r3
 800cc8e:	653b      	str	r3, [r7, #80]	@ 0x50
 800cc90:	4613      	mov	r3, r2
 800cc92:	eb42 0303 	adc.w	r3, r2, r3
 800cc96:	657b      	str	r3, [r7, #84]	@ 0x54
 800cc98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800cc9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800cca0:	f7f3 fff2 	bl	8000c88 <__aeabi_uldivmod>
 800cca4:	4602      	mov	r2, r0
 800cca6:	460b      	mov	r3, r1
 800cca8:	4b61      	ldr	r3, [pc, #388]	@ (800ce30 <UART_SetConfig+0x2d4>)
 800ccaa:	fba3 2302 	umull	r2, r3, r3, r2
 800ccae:	095b      	lsrs	r3, r3, #5
 800ccb0:	011c      	lsls	r4, r3, #4
 800ccb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ccbc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800ccc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800ccc4:	4642      	mov	r2, r8
 800ccc6:	464b      	mov	r3, r9
 800ccc8:	1891      	adds	r1, r2, r2
 800ccca:	64b9      	str	r1, [r7, #72]	@ 0x48
 800cccc:	415b      	adcs	r3, r3
 800ccce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ccd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800ccd4:	4641      	mov	r1, r8
 800ccd6:	eb12 0a01 	adds.w	sl, r2, r1
 800ccda:	4649      	mov	r1, r9
 800ccdc:	eb43 0b01 	adc.w	fp, r3, r1
 800cce0:	f04f 0200 	mov.w	r2, #0
 800cce4:	f04f 0300 	mov.w	r3, #0
 800cce8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ccec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ccf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ccf4:	4692      	mov	sl, r2
 800ccf6:	469b      	mov	fp, r3
 800ccf8:	4643      	mov	r3, r8
 800ccfa:	eb1a 0303 	adds.w	r3, sl, r3
 800ccfe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cd02:	464b      	mov	r3, r9
 800cd04:	eb4b 0303 	adc.w	r3, fp, r3
 800cd08:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800cd0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd10:	685b      	ldr	r3, [r3, #4]
 800cd12:	2200      	movs	r2, #0
 800cd14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cd18:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800cd1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800cd20:	460b      	mov	r3, r1
 800cd22:	18db      	adds	r3, r3, r3
 800cd24:	643b      	str	r3, [r7, #64]	@ 0x40
 800cd26:	4613      	mov	r3, r2
 800cd28:	eb42 0303 	adc.w	r3, r2, r3
 800cd2c:	647b      	str	r3, [r7, #68]	@ 0x44
 800cd2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800cd32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800cd36:	f7f3 ffa7 	bl	8000c88 <__aeabi_uldivmod>
 800cd3a:	4602      	mov	r2, r0
 800cd3c:	460b      	mov	r3, r1
 800cd3e:	4611      	mov	r1, r2
 800cd40:	4b3b      	ldr	r3, [pc, #236]	@ (800ce30 <UART_SetConfig+0x2d4>)
 800cd42:	fba3 2301 	umull	r2, r3, r3, r1
 800cd46:	095b      	lsrs	r3, r3, #5
 800cd48:	2264      	movs	r2, #100	@ 0x64
 800cd4a:	fb02 f303 	mul.w	r3, r2, r3
 800cd4e:	1acb      	subs	r3, r1, r3
 800cd50:	00db      	lsls	r3, r3, #3
 800cd52:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800cd56:	4b36      	ldr	r3, [pc, #216]	@ (800ce30 <UART_SetConfig+0x2d4>)
 800cd58:	fba3 2302 	umull	r2, r3, r3, r2
 800cd5c:	095b      	lsrs	r3, r3, #5
 800cd5e:	005b      	lsls	r3, r3, #1
 800cd60:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800cd64:	441c      	add	r4, r3
 800cd66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cd70:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800cd74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800cd78:	4642      	mov	r2, r8
 800cd7a:	464b      	mov	r3, r9
 800cd7c:	1891      	adds	r1, r2, r2
 800cd7e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800cd80:	415b      	adcs	r3, r3
 800cd82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cd84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800cd88:	4641      	mov	r1, r8
 800cd8a:	1851      	adds	r1, r2, r1
 800cd8c:	6339      	str	r1, [r7, #48]	@ 0x30
 800cd8e:	4649      	mov	r1, r9
 800cd90:	414b      	adcs	r3, r1
 800cd92:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd94:	f04f 0200 	mov.w	r2, #0
 800cd98:	f04f 0300 	mov.w	r3, #0
 800cd9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800cda0:	4659      	mov	r1, fp
 800cda2:	00cb      	lsls	r3, r1, #3
 800cda4:	4651      	mov	r1, sl
 800cda6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cdaa:	4651      	mov	r1, sl
 800cdac:	00ca      	lsls	r2, r1, #3
 800cdae:	4610      	mov	r0, r2
 800cdb0:	4619      	mov	r1, r3
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	4642      	mov	r2, r8
 800cdb6:	189b      	adds	r3, r3, r2
 800cdb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cdbc:	464b      	mov	r3, r9
 800cdbe:	460a      	mov	r2, r1
 800cdc0:	eb42 0303 	adc.w	r3, r2, r3
 800cdc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cdc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cdcc:	685b      	ldr	r3, [r3, #4]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cdd4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800cdd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800cddc:	460b      	mov	r3, r1
 800cdde:	18db      	adds	r3, r3, r3
 800cde0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cde2:	4613      	mov	r3, r2
 800cde4:	eb42 0303 	adc.w	r3, r2, r3
 800cde8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cdea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800cdee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800cdf2:	f7f3 ff49 	bl	8000c88 <__aeabi_uldivmod>
 800cdf6:	4602      	mov	r2, r0
 800cdf8:	460b      	mov	r3, r1
 800cdfa:	4b0d      	ldr	r3, [pc, #52]	@ (800ce30 <UART_SetConfig+0x2d4>)
 800cdfc:	fba3 1302 	umull	r1, r3, r3, r2
 800ce00:	095b      	lsrs	r3, r3, #5
 800ce02:	2164      	movs	r1, #100	@ 0x64
 800ce04:	fb01 f303 	mul.w	r3, r1, r3
 800ce08:	1ad3      	subs	r3, r2, r3
 800ce0a:	00db      	lsls	r3, r3, #3
 800ce0c:	3332      	adds	r3, #50	@ 0x32
 800ce0e:	4a08      	ldr	r2, [pc, #32]	@ (800ce30 <UART_SetConfig+0x2d4>)
 800ce10:	fba2 2303 	umull	r2, r3, r2, r3
 800ce14:	095b      	lsrs	r3, r3, #5
 800ce16:	f003 0207 	and.w	r2, r3, #7
 800ce1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	4422      	add	r2, r4
 800ce22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ce24:	e106      	b.n	800d034 <UART_SetConfig+0x4d8>
 800ce26:	bf00      	nop
 800ce28:	40011000 	.word	0x40011000
 800ce2c:	40011400 	.word	0x40011400
 800ce30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ce34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ce38:	2200      	movs	r2, #0
 800ce3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ce3e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800ce42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800ce46:	4642      	mov	r2, r8
 800ce48:	464b      	mov	r3, r9
 800ce4a:	1891      	adds	r1, r2, r2
 800ce4c:	6239      	str	r1, [r7, #32]
 800ce4e:	415b      	adcs	r3, r3
 800ce50:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ce56:	4641      	mov	r1, r8
 800ce58:	1854      	adds	r4, r2, r1
 800ce5a:	4649      	mov	r1, r9
 800ce5c:	eb43 0501 	adc.w	r5, r3, r1
 800ce60:	f04f 0200 	mov.w	r2, #0
 800ce64:	f04f 0300 	mov.w	r3, #0
 800ce68:	00eb      	lsls	r3, r5, #3
 800ce6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ce6e:	00e2      	lsls	r2, r4, #3
 800ce70:	4614      	mov	r4, r2
 800ce72:	461d      	mov	r5, r3
 800ce74:	4643      	mov	r3, r8
 800ce76:	18e3      	adds	r3, r4, r3
 800ce78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ce7c:	464b      	mov	r3, r9
 800ce7e:	eb45 0303 	adc.w	r3, r5, r3
 800ce82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ce86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce8a:	685b      	ldr	r3, [r3, #4]
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ce92:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800ce96:	f04f 0200 	mov.w	r2, #0
 800ce9a:	f04f 0300 	mov.w	r3, #0
 800ce9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800cea2:	4629      	mov	r1, r5
 800cea4:	008b      	lsls	r3, r1, #2
 800cea6:	4621      	mov	r1, r4
 800cea8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ceac:	4621      	mov	r1, r4
 800ceae:	008a      	lsls	r2, r1, #2
 800ceb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800ceb4:	f7f3 fee8 	bl	8000c88 <__aeabi_uldivmod>
 800ceb8:	4602      	mov	r2, r0
 800ceba:	460b      	mov	r3, r1
 800cebc:	4b60      	ldr	r3, [pc, #384]	@ (800d040 <UART_SetConfig+0x4e4>)
 800cebe:	fba3 2302 	umull	r2, r3, r3, r2
 800cec2:	095b      	lsrs	r3, r3, #5
 800cec4:	011c      	lsls	r4, r3, #4
 800cec6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ceca:	2200      	movs	r2, #0
 800cecc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ced0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ced4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800ced8:	4642      	mov	r2, r8
 800ceda:	464b      	mov	r3, r9
 800cedc:	1891      	adds	r1, r2, r2
 800cede:	61b9      	str	r1, [r7, #24]
 800cee0:	415b      	adcs	r3, r3
 800cee2:	61fb      	str	r3, [r7, #28]
 800cee4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cee8:	4641      	mov	r1, r8
 800ceea:	1851      	adds	r1, r2, r1
 800ceec:	6139      	str	r1, [r7, #16]
 800ceee:	4649      	mov	r1, r9
 800cef0:	414b      	adcs	r3, r1
 800cef2:	617b      	str	r3, [r7, #20]
 800cef4:	f04f 0200 	mov.w	r2, #0
 800cef8:	f04f 0300 	mov.w	r3, #0
 800cefc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cf00:	4659      	mov	r1, fp
 800cf02:	00cb      	lsls	r3, r1, #3
 800cf04:	4651      	mov	r1, sl
 800cf06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cf0a:	4651      	mov	r1, sl
 800cf0c:	00ca      	lsls	r2, r1, #3
 800cf0e:	4610      	mov	r0, r2
 800cf10:	4619      	mov	r1, r3
 800cf12:	4603      	mov	r3, r0
 800cf14:	4642      	mov	r2, r8
 800cf16:	189b      	adds	r3, r3, r2
 800cf18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cf1c:	464b      	mov	r3, r9
 800cf1e:	460a      	mov	r2, r1
 800cf20:	eb42 0303 	adc.w	r3, r2, r3
 800cf24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cf28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf2c:	685b      	ldr	r3, [r3, #4]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cf32:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800cf34:	f04f 0200 	mov.w	r2, #0
 800cf38:	f04f 0300 	mov.w	r3, #0
 800cf3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800cf40:	4649      	mov	r1, r9
 800cf42:	008b      	lsls	r3, r1, #2
 800cf44:	4641      	mov	r1, r8
 800cf46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cf4a:	4641      	mov	r1, r8
 800cf4c:	008a      	lsls	r2, r1, #2
 800cf4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800cf52:	f7f3 fe99 	bl	8000c88 <__aeabi_uldivmod>
 800cf56:	4602      	mov	r2, r0
 800cf58:	460b      	mov	r3, r1
 800cf5a:	4611      	mov	r1, r2
 800cf5c:	4b38      	ldr	r3, [pc, #224]	@ (800d040 <UART_SetConfig+0x4e4>)
 800cf5e:	fba3 2301 	umull	r2, r3, r3, r1
 800cf62:	095b      	lsrs	r3, r3, #5
 800cf64:	2264      	movs	r2, #100	@ 0x64
 800cf66:	fb02 f303 	mul.w	r3, r2, r3
 800cf6a:	1acb      	subs	r3, r1, r3
 800cf6c:	011b      	lsls	r3, r3, #4
 800cf6e:	3332      	adds	r3, #50	@ 0x32
 800cf70:	4a33      	ldr	r2, [pc, #204]	@ (800d040 <UART_SetConfig+0x4e4>)
 800cf72:	fba2 2303 	umull	r2, r3, r2, r3
 800cf76:	095b      	lsrs	r3, r3, #5
 800cf78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cf7c:	441c      	add	r4, r3
 800cf7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cf82:	2200      	movs	r2, #0
 800cf84:	673b      	str	r3, [r7, #112]	@ 0x70
 800cf86:	677a      	str	r2, [r7, #116]	@ 0x74
 800cf88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800cf8c:	4642      	mov	r2, r8
 800cf8e:	464b      	mov	r3, r9
 800cf90:	1891      	adds	r1, r2, r2
 800cf92:	60b9      	str	r1, [r7, #8]
 800cf94:	415b      	adcs	r3, r3
 800cf96:	60fb      	str	r3, [r7, #12]
 800cf98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cf9c:	4641      	mov	r1, r8
 800cf9e:	1851      	adds	r1, r2, r1
 800cfa0:	6039      	str	r1, [r7, #0]
 800cfa2:	4649      	mov	r1, r9
 800cfa4:	414b      	adcs	r3, r1
 800cfa6:	607b      	str	r3, [r7, #4]
 800cfa8:	f04f 0200 	mov.w	r2, #0
 800cfac:	f04f 0300 	mov.w	r3, #0
 800cfb0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cfb4:	4659      	mov	r1, fp
 800cfb6:	00cb      	lsls	r3, r1, #3
 800cfb8:	4651      	mov	r1, sl
 800cfba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cfbe:	4651      	mov	r1, sl
 800cfc0:	00ca      	lsls	r2, r1, #3
 800cfc2:	4610      	mov	r0, r2
 800cfc4:	4619      	mov	r1, r3
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	4642      	mov	r2, r8
 800cfca:	189b      	adds	r3, r3, r2
 800cfcc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cfce:	464b      	mov	r3, r9
 800cfd0:	460a      	mov	r2, r1
 800cfd2:	eb42 0303 	adc.w	r3, r2, r3
 800cfd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cfd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cfdc:	685b      	ldr	r3, [r3, #4]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	663b      	str	r3, [r7, #96]	@ 0x60
 800cfe2:	667a      	str	r2, [r7, #100]	@ 0x64
 800cfe4:	f04f 0200 	mov.w	r2, #0
 800cfe8:	f04f 0300 	mov.w	r3, #0
 800cfec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800cff0:	4649      	mov	r1, r9
 800cff2:	008b      	lsls	r3, r1, #2
 800cff4:	4641      	mov	r1, r8
 800cff6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cffa:	4641      	mov	r1, r8
 800cffc:	008a      	lsls	r2, r1, #2
 800cffe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800d002:	f7f3 fe41 	bl	8000c88 <__aeabi_uldivmod>
 800d006:	4602      	mov	r2, r0
 800d008:	460b      	mov	r3, r1
 800d00a:	4b0d      	ldr	r3, [pc, #52]	@ (800d040 <UART_SetConfig+0x4e4>)
 800d00c:	fba3 1302 	umull	r1, r3, r3, r2
 800d010:	095b      	lsrs	r3, r3, #5
 800d012:	2164      	movs	r1, #100	@ 0x64
 800d014:	fb01 f303 	mul.w	r3, r1, r3
 800d018:	1ad3      	subs	r3, r2, r3
 800d01a:	011b      	lsls	r3, r3, #4
 800d01c:	3332      	adds	r3, #50	@ 0x32
 800d01e:	4a08      	ldr	r2, [pc, #32]	@ (800d040 <UART_SetConfig+0x4e4>)
 800d020:	fba2 2303 	umull	r2, r3, r2, r3
 800d024:	095b      	lsrs	r3, r3, #5
 800d026:	f003 020f 	and.w	r2, r3, #15
 800d02a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	4422      	add	r2, r4
 800d032:	609a      	str	r2, [r3, #8]
}
 800d034:	bf00      	nop
 800d036:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800d03a:	46bd      	mov	sp, r7
 800d03c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d040:	51eb851f 	.word	0x51eb851f

0800d044 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800d048:	4904      	ldr	r1, [pc, #16]	@ (800d05c <MX_FATFS_Init+0x18>)
 800d04a:	4805      	ldr	r0, [pc, #20]	@ (800d060 <MX_FATFS_Init+0x1c>)
 800d04c:	f003 f9d4 	bl	80103f8 <FATFS_LinkDriver>
 800d050:	4603      	mov	r3, r0
 800d052:	461a      	mov	r2, r3
 800d054:	4b03      	ldr	r3, [pc, #12]	@ (800d064 <MX_FATFS_Init+0x20>)
 800d056:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d058:	bf00      	nop
 800d05a:	bd80      	pop	{r7, pc}
 800d05c:	20002bec 	.word	0x20002bec
 800d060:	20000010 	.word	0x20000010
 800d064:	20002be8 	.word	0x20002be8

0800d068 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d068:	b480      	push	{r7}
 800d06a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d06c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d06e:	4618      	mov	r0, r3
 800d070:	46bd      	mov	sp, r7
 800d072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d076:	4770      	bx	lr

0800d078 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b082      	sub	sp, #8
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	4603      	mov	r3, r0
 800d080:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	SD_disk_initialize (pdrv);
 800d082:	79fb      	ldrb	r3, [r7, #7]
 800d084:	4618      	mov	r0, r3
 800d086:	f7f4 fe7f 	bl	8001d88 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 800d08a:	bf00      	nop
 800d08c:	4618      	mov	r0, r3
 800d08e:	3708      	adds	r7, #8
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}

0800d094 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b082      	sub	sp, #8
 800d098:	af00      	add	r7, sp, #0
 800d09a:	4603      	mov	r3, r0
 800d09c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
   // Stat = STA_NOINIT;
   // return Stat;
	SD_disk_status ( pdrv);
 800d09e:	79fb      	ldrb	r3, [r7, #7]
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f7f4 ff57 	bl	8001f54 <SD_disk_status>
  /* USER CODE END STATUS */
}
 800d0a6:	bf00      	nop
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3708      	adds	r7, #8
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}

0800d0b0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b084      	sub	sp, #16
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	60b9      	str	r1, [r7, #8]
 800d0b8:	607a      	str	r2, [r7, #4]
 800d0ba:	603b      	str	r3, [r7, #0]
 800d0bc:	4603      	mov	r3, r0
 800d0be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	SD_disk_read ( pdrv,  buff,  sector,  count);
 800d0c0:	7bf8      	ldrb	r0, [r7, #15]
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	687a      	ldr	r2, [r7, #4]
 800d0c6:	68b9      	ldr	r1, [r7, #8]
 800d0c8:	f7f4 ff5a 	bl	8001f80 <SD_disk_read>
  /* USER CODE END READ */
}
 800d0cc:	bf00      	nop
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3710      	adds	r7, #16
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}

0800d0d6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800d0d6:	b580      	push	{r7, lr}
 800d0d8:	b084      	sub	sp, #16
 800d0da:	af00      	add	r7, sp, #0
 800d0dc:	60b9      	str	r1, [r7, #8]
 800d0de:	607a      	str	r2, [r7, #4]
 800d0e0:	603b      	str	r3, [r7, #0]
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
   // return RES_OK;
	SD_disk_write (pdrv,buff,sector,count);
 800d0e6:	7bf8      	ldrb	r0, [r7, #15]
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	687a      	ldr	r2, [r7, #4]
 800d0ec:	68b9      	ldr	r1, [r7, #8]
 800d0ee:	f7f4 ffb1 	bl	8002054 <SD_disk_write>
  /* USER CODE END WRITE */
}
 800d0f2:	bf00      	nop
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3710      	adds	r7, #16
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}

0800d0fc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b082      	sub	sp, #8
 800d100:	af00      	add	r7, sp, #0
 800d102:	4603      	mov	r3, r0
 800d104:	603a      	str	r2, [r7, #0]
 800d106:	71fb      	strb	r3, [r7, #7]
 800d108:	460b      	mov	r3, r1
 800d10a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	SD_disk_ioctl ( pdrv,  cmd,  buff);
 800d10c:	79fb      	ldrb	r3, [r7, #7]
 800d10e:	79b9      	ldrb	r1, [r7, #6]
 800d110:	683a      	ldr	r2, [r7, #0]
 800d112:	4618      	mov	r0, r3
 800d114:	f7f5 f822 	bl	800215c <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 800d118:	bf00      	nop
 800d11a:	4618      	mov	r0, r3
 800d11c:	3708      	adds	r7, #8
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}
	...

0800d124 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b084      	sub	sp, #16
 800d128:	af00      	add	r7, sp, #0
 800d12a:	4603      	mov	r3, r0
 800d12c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d12e:	79fb      	ldrb	r3, [r7, #7]
 800d130:	4a08      	ldr	r2, [pc, #32]	@ (800d154 <disk_status+0x30>)
 800d132:	009b      	lsls	r3, r3, #2
 800d134:	4413      	add	r3, r2
 800d136:	685b      	ldr	r3, [r3, #4]
 800d138:	685b      	ldr	r3, [r3, #4]
 800d13a:	79fa      	ldrb	r2, [r7, #7]
 800d13c:	4905      	ldr	r1, [pc, #20]	@ (800d154 <disk_status+0x30>)
 800d13e:	440a      	add	r2, r1
 800d140:	7a12      	ldrb	r2, [r2, #8]
 800d142:	4610      	mov	r0, r2
 800d144:	4798      	blx	r3
 800d146:	4603      	mov	r3, r0
 800d148:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d14a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3710      	adds	r7, #16
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}
 800d154:	20002c18 	.word	0x20002c18

0800d158 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b084      	sub	sp, #16
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	4603      	mov	r3, r0
 800d160:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d162:	2300      	movs	r3, #0
 800d164:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d166:	79fb      	ldrb	r3, [r7, #7]
 800d168:	4a0d      	ldr	r2, [pc, #52]	@ (800d1a0 <disk_initialize+0x48>)
 800d16a:	5cd3      	ldrb	r3, [r2, r3]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d111      	bne.n	800d194 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d170:	79fb      	ldrb	r3, [r7, #7]
 800d172:	4a0b      	ldr	r2, [pc, #44]	@ (800d1a0 <disk_initialize+0x48>)
 800d174:	2101      	movs	r1, #1
 800d176:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d178:	79fb      	ldrb	r3, [r7, #7]
 800d17a:	4a09      	ldr	r2, [pc, #36]	@ (800d1a0 <disk_initialize+0x48>)
 800d17c:	009b      	lsls	r3, r3, #2
 800d17e:	4413      	add	r3, r2
 800d180:	685b      	ldr	r3, [r3, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	79fa      	ldrb	r2, [r7, #7]
 800d186:	4906      	ldr	r1, [pc, #24]	@ (800d1a0 <disk_initialize+0x48>)
 800d188:	440a      	add	r2, r1
 800d18a:	7a12      	ldrb	r2, [r2, #8]
 800d18c:	4610      	mov	r0, r2
 800d18e:	4798      	blx	r3
 800d190:	4603      	mov	r3, r0
 800d192:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d194:	7bfb      	ldrb	r3, [r7, #15]
}
 800d196:	4618      	mov	r0, r3
 800d198:	3710      	adds	r7, #16
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}
 800d19e:	bf00      	nop
 800d1a0:	20002c18 	.word	0x20002c18

0800d1a4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d1a4:	b590      	push	{r4, r7, lr}
 800d1a6:	b087      	sub	sp, #28
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	60b9      	str	r1, [r7, #8]
 800d1ac:	607a      	str	r2, [r7, #4]
 800d1ae:	603b      	str	r3, [r7, #0]
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d1b4:	7bfb      	ldrb	r3, [r7, #15]
 800d1b6:	4a0a      	ldr	r2, [pc, #40]	@ (800d1e0 <disk_read+0x3c>)
 800d1b8:	009b      	lsls	r3, r3, #2
 800d1ba:	4413      	add	r3, r2
 800d1bc:	685b      	ldr	r3, [r3, #4]
 800d1be:	689c      	ldr	r4, [r3, #8]
 800d1c0:	7bfb      	ldrb	r3, [r7, #15]
 800d1c2:	4a07      	ldr	r2, [pc, #28]	@ (800d1e0 <disk_read+0x3c>)
 800d1c4:	4413      	add	r3, r2
 800d1c6:	7a18      	ldrb	r0, [r3, #8]
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	687a      	ldr	r2, [r7, #4]
 800d1cc:	68b9      	ldr	r1, [r7, #8]
 800d1ce:	47a0      	blx	r4
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	75fb      	strb	r3, [r7, #23]
  return res;
 800d1d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	371c      	adds	r7, #28
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd90      	pop	{r4, r7, pc}
 800d1de:	bf00      	nop
 800d1e0:	20002c18 	.word	0x20002c18

0800d1e4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d1e4:	b590      	push	{r4, r7, lr}
 800d1e6:	b087      	sub	sp, #28
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	60b9      	str	r1, [r7, #8]
 800d1ec:	607a      	str	r2, [r7, #4]
 800d1ee:	603b      	str	r3, [r7, #0]
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d1f4:	7bfb      	ldrb	r3, [r7, #15]
 800d1f6:	4a0a      	ldr	r2, [pc, #40]	@ (800d220 <disk_write+0x3c>)
 800d1f8:	009b      	lsls	r3, r3, #2
 800d1fa:	4413      	add	r3, r2
 800d1fc:	685b      	ldr	r3, [r3, #4]
 800d1fe:	68dc      	ldr	r4, [r3, #12]
 800d200:	7bfb      	ldrb	r3, [r7, #15]
 800d202:	4a07      	ldr	r2, [pc, #28]	@ (800d220 <disk_write+0x3c>)
 800d204:	4413      	add	r3, r2
 800d206:	7a18      	ldrb	r0, [r3, #8]
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	687a      	ldr	r2, [r7, #4]
 800d20c:	68b9      	ldr	r1, [r7, #8]
 800d20e:	47a0      	blx	r4
 800d210:	4603      	mov	r3, r0
 800d212:	75fb      	strb	r3, [r7, #23]
  return res;
 800d214:	7dfb      	ldrb	r3, [r7, #23]
}
 800d216:	4618      	mov	r0, r3
 800d218:	371c      	adds	r7, #28
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd90      	pop	{r4, r7, pc}
 800d21e:	bf00      	nop
 800d220:	20002c18 	.word	0x20002c18

0800d224 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b084      	sub	sp, #16
 800d228:	af00      	add	r7, sp, #0
 800d22a:	4603      	mov	r3, r0
 800d22c:	603a      	str	r2, [r7, #0]
 800d22e:	71fb      	strb	r3, [r7, #7]
 800d230:	460b      	mov	r3, r1
 800d232:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d234:	79fb      	ldrb	r3, [r7, #7]
 800d236:	4a09      	ldr	r2, [pc, #36]	@ (800d25c <disk_ioctl+0x38>)
 800d238:	009b      	lsls	r3, r3, #2
 800d23a:	4413      	add	r3, r2
 800d23c:	685b      	ldr	r3, [r3, #4]
 800d23e:	691b      	ldr	r3, [r3, #16]
 800d240:	79fa      	ldrb	r2, [r7, #7]
 800d242:	4906      	ldr	r1, [pc, #24]	@ (800d25c <disk_ioctl+0x38>)
 800d244:	440a      	add	r2, r1
 800d246:	7a10      	ldrb	r0, [r2, #8]
 800d248:	79b9      	ldrb	r1, [r7, #6]
 800d24a:	683a      	ldr	r2, [r7, #0]
 800d24c:	4798      	blx	r3
 800d24e:	4603      	mov	r3, r0
 800d250:	73fb      	strb	r3, [r7, #15]
  return res;
 800d252:	7bfb      	ldrb	r3, [r7, #15]
}
 800d254:	4618      	mov	r0, r3
 800d256:	3710      	adds	r7, #16
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}
 800d25c:	20002c18 	.word	0x20002c18

0800d260 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d260:	b480      	push	{r7}
 800d262:	b085      	sub	sp, #20
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	3301      	adds	r3, #1
 800d26c:	781b      	ldrb	r3, [r3, #0]
 800d26e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d270:	89fb      	ldrh	r3, [r7, #14]
 800d272:	021b      	lsls	r3, r3, #8
 800d274:	b21a      	sxth	r2, r3
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	781b      	ldrb	r3, [r3, #0]
 800d27a:	b21b      	sxth	r3, r3
 800d27c:	4313      	orrs	r3, r2
 800d27e:	b21b      	sxth	r3, r3
 800d280:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d282:	89fb      	ldrh	r3, [r7, #14]
}
 800d284:	4618      	mov	r0, r3
 800d286:	3714      	adds	r7, #20
 800d288:	46bd      	mov	sp, r7
 800d28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28e:	4770      	bx	lr

0800d290 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d290:	b480      	push	{r7}
 800d292:	b085      	sub	sp, #20
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	3303      	adds	r3, #3
 800d29c:	781b      	ldrb	r3, [r3, #0]
 800d29e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	021b      	lsls	r3, r3, #8
 800d2a4:	687a      	ldr	r2, [r7, #4]
 800d2a6:	3202      	adds	r2, #2
 800d2a8:	7812      	ldrb	r2, [r2, #0]
 800d2aa:	4313      	orrs	r3, r2
 800d2ac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	021b      	lsls	r3, r3, #8
 800d2b2:	687a      	ldr	r2, [r7, #4]
 800d2b4:	3201      	adds	r2, #1
 800d2b6:	7812      	ldrb	r2, [r2, #0]
 800d2b8:	4313      	orrs	r3, r2
 800d2ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	021b      	lsls	r3, r3, #8
 800d2c0:	687a      	ldr	r2, [r7, #4]
 800d2c2:	7812      	ldrb	r2, [r2, #0]
 800d2c4:	4313      	orrs	r3, r2
 800d2c6:	60fb      	str	r3, [r7, #12]
	return rv;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	3714      	adds	r7, #20
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d4:	4770      	bx	lr

0800d2d6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d2d6:	b480      	push	{r7}
 800d2d8:	b083      	sub	sp, #12
 800d2da:	af00      	add	r7, sp, #0
 800d2dc:	6078      	str	r0, [r7, #4]
 800d2de:	460b      	mov	r3, r1
 800d2e0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	1c5a      	adds	r2, r3, #1
 800d2e6:	607a      	str	r2, [r7, #4]
 800d2e8:	887a      	ldrh	r2, [r7, #2]
 800d2ea:	b2d2      	uxtb	r2, r2
 800d2ec:	701a      	strb	r2, [r3, #0]
 800d2ee:	887b      	ldrh	r3, [r7, #2]
 800d2f0:	0a1b      	lsrs	r3, r3, #8
 800d2f2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	1c5a      	adds	r2, r3, #1
 800d2f8:	607a      	str	r2, [r7, #4]
 800d2fa:	887a      	ldrh	r2, [r7, #2]
 800d2fc:	b2d2      	uxtb	r2, r2
 800d2fe:	701a      	strb	r2, [r3, #0]
}
 800d300:	bf00      	nop
 800d302:	370c      	adds	r7, #12
 800d304:	46bd      	mov	sp, r7
 800d306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30a:	4770      	bx	lr

0800d30c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d30c:	b480      	push	{r7}
 800d30e:	b083      	sub	sp, #12
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
 800d314:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	1c5a      	adds	r2, r3, #1
 800d31a:	607a      	str	r2, [r7, #4]
 800d31c:	683a      	ldr	r2, [r7, #0]
 800d31e:	b2d2      	uxtb	r2, r2
 800d320:	701a      	strb	r2, [r3, #0]
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	0a1b      	lsrs	r3, r3, #8
 800d326:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	1c5a      	adds	r2, r3, #1
 800d32c:	607a      	str	r2, [r7, #4]
 800d32e:	683a      	ldr	r2, [r7, #0]
 800d330:	b2d2      	uxtb	r2, r2
 800d332:	701a      	strb	r2, [r3, #0]
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	0a1b      	lsrs	r3, r3, #8
 800d338:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	1c5a      	adds	r2, r3, #1
 800d33e:	607a      	str	r2, [r7, #4]
 800d340:	683a      	ldr	r2, [r7, #0]
 800d342:	b2d2      	uxtb	r2, r2
 800d344:	701a      	strb	r2, [r3, #0]
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	0a1b      	lsrs	r3, r3, #8
 800d34a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	1c5a      	adds	r2, r3, #1
 800d350:	607a      	str	r2, [r7, #4]
 800d352:	683a      	ldr	r2, [r7, #0]
 800d354:	b2d2      	uxtb	r2, r2
 800d356:	701a      	strb	r2, [r3, #0]
}
 800d358:	bf00      	nop
 800d35a:	370c      	adds	r7, #12
 800d35c:	46bd      	mov	sp, r7
 800d35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d362:	4770      	bx	lr

0800d364 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d364:	b480      	push	{r7}
 800d366:	b087      	sub	sp, #28
 800d368:	af00      	add	r7, sp, #0
 800d36a:	60f8      	str	r0, [r7, #12]
 800d36c:	60b9      	str	r1, [r7, #8]
 800d36e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d00d      	beq.n	800d39a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d37e:	693a      	ldr	r2, [r7, #16]
 800d380:	1c53      	adds	r3, r2, #1
 800d382:	613b      	str	r3, [r7, #16]
 800d384:	697b      	ldr	r3, [r7, #20]
 800d386:	1c59      	adds	r1, r3, #1
 800d388:	6179      	str	r1, [r7, #20]
 800d38a:	7812      	ldrb	r2, [r2, #0]
 800d38c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	3b01      	subs	r3, #1
 800d392:	607b      	str	r3, [r7, #4]
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d1f1      	bne.n	800d37e <mem_cpy+0x1a>
	}
}
 800d39a:	bf00      	nop
 800d39c:	371c      	adds	r7, #28
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a4:	4770      	bx	lr

0800d3a6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d3a6:	b480      	push	{r7}
 800d3a8:	b087      	sub	sp, #28
 800d3aa:	af00      	add	r7, sp, #0
 800d3ac:	60f8      	str	r0, [r7, #12]
 800d3ae:	60b9      	str	r1, [r7, #8]
 800d3b0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d3b6:	697b      	ldr	r3, [r7, #20]
 800d3b8:	1c5a      	adds	r2, r3, #1
 800d3ba:	617a      	str	r2, [r7, #20]
 800d3bc:	68ba      	ldr	r2, [r7, #8]
 800d3be:	b2d2      	uxtb	r2, r2
 800d3c0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	3b01      	subs	r3, #1
 800d3c6:	607b      	str	r3, [r7, #4]
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d1f3      	bne.n	800d3b6 <mem_set+0x10>
}
 800d3ce:	bf00      	nop
 800d3d0:	bf00      	nop
 800d3d2:	371c      	adds	r7, #28
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3da:	4770      	bx	lr

0800d3dc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d3dc:	b480      	push	{r7}
 800d3de:	b089      	sub	sp, #36	@ 0x24
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	60f8      	str	r0, [r7, #12]
 800d3e4:	60b9      	str	r1, [r7, #8]
 800d3e6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	61fb      	str	r3, [r7, #28]
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d3f4:	69fb      	ldr	r3, [r7, #28]
 800d3f6:	1c5a      	adds	r2, r3, #1
 800d3f8:	61fa      	str	r2, [r7, #28]
 800d3fa:	781b      	ldrb	r3, [r3, #0]
 800d3fc:	4619      	mov	r1, r3
 800d3fe:	69bb      	ldr	r3, [r7, #24]
 800d400:	1c5a      	adds	r2, r3, #1
 800d402:	61ba      	str	r2, [r7, #24]
 800d404:	781b      	ldrb	r3, [r3, #0]
 800d406:	1acb      	subs	r3, r1, r3
 800d408:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	3b01      	subs	r3, #1
 800d40e:	607b      	str	r3, [r7, #4]
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d002      	beq.n	800d41c <mem_cmp+0x40>
 800d416:	697b      	ldr	r3, [r7, #20]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d0eb      	beq.n	800d3f4 <mem_cmp+0x18>

	return r;
 800d41c:	697b      	ldr	r3, [r7, #20]
}
 800d41e:	4618      	mov	r0, r3
 800d420:	3724      	adds	r7, #36	@ 0x24
 800d422:	46bd      	mov	sp, r7
 800d424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d428:	4770      	bx	lr

0800d42a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d42a:	b480      	push	{r7}
 800d42c:	b083      	sub	sp, #12
 800d42e:	af00      	add	r7, sp, #0
 800d430:	6078      	str	r0, [r7, #4]
 800d432:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d434:	e002      	b.n	800d43c <chk_chr+0x12>
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	3301      	adds	r3, #1
 800d43a:	607b      	str	r3, [r7, #4]
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	781b      	ldrb	r3, [r3, #0]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d005      	beq.n	800d450 <chk_chr+0x26>
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	781b      	ldrb	r3, [r3, #0]
 800d448:	461a      	mov	r2, r3
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	4293      	cmp	r3, r2
 800d44e:	d1f2      	bne.n	800d436 <chk_chr+0xc>
	return *str;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	781b      	ldrb	r3, [r3, #0]
}
 800d454:	4618      	mov	r0, r3
 800d456:	370c      	adds	r7, #12
 800d458:	46bd      	mov	sp, r7
 800d45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45e:	4770      	bx	lr

0800d460 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b082      	sub	sp, #8
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d009      	beq.n	800d482 <lock_fs+0x22>
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	695b      	ldr	r3, [r3, #20]
 800d472:	4618      	mov	r0, r3
 800d474:	f003 f8c2 	bl	80105fc <ff_req_grant>
 800d478:	4603      	mov	r3, r0
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d001      	beq.n	800d482 <lock_fs+0x22>
 800d47e:	2301      	movs	r3, #1
 800d480:	e000      	b.n	800d484 <lock_fs+0x24>
 800d482:	2300      	movs	r3, #0
}
 800d484:	4618      	mov	r0, r3
 800d486:	3708      	adds	r7, #8
 800d488:	46bd      	mov	sp, r7
 800d48a:	bd80      	pop	{r7, pc}

0800d48c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b082      	sub	sp, #8
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
 800d494:	460b      	mov	r3, r1
 800d496:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d00d      	beq.n	800d4ba <unlock_fs+0x2e>
 800d49e:	78fb      	ldrb	r3, [r7, #3]
 800d4a0:	2b0c      	cmp	r3, #12
 800d4a2:	d00a      	beq.n	800d4ba <unlock_fs+0x2e>
 800d4a4:	78fb      	ldrb	r3, [r7, #3]
 800d4a6:	2b0b      	cmp	r3, #11
 800d4a8:	d007      	beq.n	800d4ba <unlock_fs+0x2e>
 800d4aa:	78fb      	ldrb	r3, [r7, #3]
 800d4ac:	2b0f      	cmp	r3, #15
 800d4ae:	d004      	beq.n	800d4ba <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	695b      	ldr	r3, [r3, #20]
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f003 f8b6 	bl	8010626 <ff_rel_grant>
	}
}
 800d4ba:	bf00      	nop
 800d4bc:	3708      	adds	r7, #8
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bd80      	pop	{r7, pc}
	...

0800d4c4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b085      	sub	sp, #20
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
 800d4cc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	60bb      	str	r3, [r7, #8]
 800d4d2:	68bb      	ldr	r3, [r7, #8]
 800d4d4:	60fb      	str	r3, [r7, #12]
 800d4d6:	e029      	b.n	800d52c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d4d8:	4a27      	ldr	r2, [pc, #156]	@ (800d578 <chk_lock+0xb4>)
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	011b      	lsls	r3, r3, #4
 800d4de:	4413      	add	r3, r2
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d01d      	beq.n	800d522 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d4e6:	4a24      	ldr	r2, [pc, #144]	@ (800d578 <chk_lock+0xb4>)
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	011b      	lsls	r3, r3, #4
 800d4ec:	4413      	add	r3, r2
 800d4ee:	681a      	ldr	r2, [r3, #0]
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	d116      	bne.n	800d526 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d4f8:	4a1f      	ldr	r2, [pc, #124]	@ (800d578 <chk_lock+0xb4>)
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	011b      	lsls	r3, r3, #4
 800d4fe:	4413      	add	r3, r2
 800d500:	3304      	adds	r3, #4
 800d502:	681a      	ldr	r2, [r3, #0]
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d508:	429a      	cmp	r2, r3
 800d50a:	d10c      	bne.n	800d526 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d50c:	4a1a      	ldr	r2, [pc, #104]	@ (800d578 <chk_lock+0xb4>)
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	011b      	lsls	r3, r3, #4
 800d512:	4413      	add	r3, r2
 800d514:	3308      	adds	r3, #8
 800d516:	681a      	ldr	r2, [r3, #0]
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d51c:	429a      	cmp	r2, r3
 800d51e:	d102      	bne.n	800d526 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d520:	e007      	b.n	800d532 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d522:	2301      	movs	r3, #1
 800d524:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	3301      	adds	r3, #1
 800d52a:	60fb      	str	r3, [r7, #12]
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	2b01      	cmp	r3, #1
 800d530:	d9d2      	bls.n	800d4d8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	2b02      	cmp	r3, #2
 800d536:	d109      	bne.n	800d54c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d102      	bne.n	800d544 <chk_lock+0x80>
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	2b02      	cmp	r3, #2
 800d542:	d101      	bne.n	800d548 <chk_lock+0x84>
 800d544:	2300      	movs	r3, #0
 800d546:	e010      	b.n	800d56a <chk_lock+0xa6>
 800d548:	2312      	movs	r3, #18
 800d54a:	e00e      	b.n	800d56a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d108      	bne.n	800d564 <chk_lock+0xa0>
 800d552:	4a09      	ldr	r2, [pc, #36]	@ (800d578 <chk_lock+0xb4>)
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	011b      	lsls	r3, r3, #4
 800d558:	4413      	add	r3, r2
 800d55a:	330c      	adds	r3, #12
 800d55c:	881b      	ldrh	r3, [r3, #0]
 800d55e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d562:	d101      	bne.n	800d568 <chk_lock+0xa4>
 800d564:	2310      	movs	r3, #16
 800d566:	e000      	b.n	800d56a <chk_lock+0xa6>
 800d568:	2300      	movs	r3, #0
}
 800d56a:	4618      	mov	r0, r3
 800d56c:	3714      	adds	r7, #20
 800d56e:	46bd      	mov	sp, r7
 800d570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d574:	4770      	bx	lr
 800d576:	bf00      	nop
 800d578:	20002bf8 	.word	0x20002bf8

0800d57c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d57c:	b480      	push	{r7}
 800d57e:	b083      	sub	sp, #12
 800d580:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d582:	2300      	movs	r3, #0
 800d584:	607b      	str	r3, [r7, #4]
 800d586:	e002      	b.n	800d58e <enq_lock+0x12>
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	3301      	adds	r3, #1
 800d58c:	607b      	str	r3, [r7, #4]
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2b01      	cmp	r3, #1
 800d592:	d806      	bhi.n	800d5a2 <enq_lock+0x26>
 800d594:	4a09      	ldr	r2, [pc, #36]	@ (800d5bc <enq_lock+0x40>)
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	011b      	lsls	r3, r3, #4
 800d59a:	4413      	add	r3, r2
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d1f2      	bne.n	800d588 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	2b02      	cmp	r3, #2
 800d5a6:	bf14      	ite	ne
 800d5a8:	2301      	movne	r3, #1
 800d5aa:	2300      	moveq	r3, #0
 800d5ac:	b2db      	uxtb	r3, r3
}
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	370c      	adds	r7, #12
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b8:	4770      	bx	lr
 800d5ba:	bf00      	nop
 800d5bc:	20002bf8 	.word	0x20002bf8

0800d5c0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d5c0:	b480      	push	{r7}
 800d5c2:	b085      	sub	sp, #20
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
 800d5c8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	60fb      	str	r3, [r7, #12]
 800d5ce:	e01f      	b.n	800d610 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d5d0:	4a41      	ldr	r2, [pc, #260]	@ (800d6d8 <inc_lock+0x118>)
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	011b      	lsls	r3, r3, #4
 800d5d6:	4413      	add	r3, r2
 800d5d8:	681a      	ldr	r2, [r3, #0]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	429a      	cmp	r2, r3
 800d5e0:	d113      	bne.n	800d60a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d5e2:	4a3d      	ldr	r2, [pc, #244]	@ (800d6d8 <inc_lock+0x118>)
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	011b      	lsls	r3, r3, #4
 800d5e8:	4413      	add	r3, r2
 800d5ea:	3304      	adds	r3, #4
 800d5ec:	681a      	ldr	r2, [r3, #0]
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d109      	bne.n	800d60a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d5f6:	4a38      	ldr	r2, [pc, #224]	@ (800d6d8 <inc_lock+0x118>)
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	011b      	lsls	r3, r3, #4
 800d5fc:	4413      	add	r3, r2
 800d5fe:	3308      	adds	r3, #8
 800d600:	681a      	ldr	r2, [r3, #0]
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d606:	429a      	cmp	r2, r3
 800d608:	d006      	beq.n	800d618 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	3301      	adds	r3, #1
 800d60e:	60fb      	str	r3, [r7, #12]
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	2b01      	cmp	r3, #1
 800d614:	d9dc      	bls.n	800d5d0 <inc_lock+0x10>
 800d616:	e000      	b.n	800d61a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d618:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	2b02      	cmp	r3, #2
 800d61e:	d132      	bne.n	800d686 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d620:	2300      	movs	r3, #0
 800d622:	60fb      	str	r3, [r7, #12]
 800d624:	e002      	b.n	800d62c <inc_lock+0x6c>
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	3301      	adds	r3, #1
 800d62a:	60fb      	str	r3, [r7, #12]
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2b01      	cmp	r3, #1
 800d630:	d806      	bhi.n	800d640 <inc_lock+0x80>
 800d632:	4a29      	ldr	r2, [pc, #164]	@ (800d6d8 <inc_lock+0x118>)
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	011b      	lsls	r3, r3, #4
 800d638:	4413      	add	r3, r2
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d1f2      	bne.n	800d626 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	2b02      	cmp	r3, #2
 800d644:	d101      	bne.n	800d64a <inc_lock+0x8a>
 800d646:	2300      	movs	r3, #0
 800d648:	e040      	b.n	800d6cc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681a      	ldr	r2, [r3, #0]
 800d64e:	4922      	ldr	r1, [pc, #136]	@ (800d6d8 <inc_lock+0x118>)
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	011b      	lsls	r3, r3, #4
 800d654:	440b      	add	r3, r1
 800d656:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	689a      	ldr	r2, [r3, #8]
 800d65c:	491e      	ldr	r1, [pc, #120]	@ (800d6d8 <inc_lock+0x118>)
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	011b      	lsls	r3, r3, #4
 800d662:	440b      	add	r3, r1
 800d664:	3304      	adds	r3, #4
 800d666:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	695a      	ldr	r2, [r3, #20]
 800d66c:	491a      	ldr	r1, [pc, #104]	@ (800d6d8 <inc_lock+0x118>)
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	011b      	lsls	r3, r3, #4
 800d672:	440b      	add	r3, r1
 800d674:	3308      	adds	r3, #8
 800d676:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d678:	4a17      	ldr	r2, [pc, #92]	@ (800d6d8 <inc_lock+0x118>)
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	011b      	lsls	r3, r3, #4
 800d67e:	4413      	add	r3, r2
 800d680:	330c      	adds	r3, #12
 800d682:	2200      	movs	r2, #0
 800d684:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d009      	beq.n	800d6a0 <inc_lock+0xe0>
 800d68c:	4a12      	ldr	r2, [pc, #72]	@ (800d6d8 <inc_lock+0x118>)
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	011b      	lsls	r3, r3, #4
 800d692:	4413      	add	r3, r2
 800d694:	330c      	adds	r3, #12
 800d696:	881b      	ldrh	r3, [r3, #0]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d001      	beq.n	800d6a0 <inc_lock+0xe0>
 800d69c:	2300      	movs	r3, #0
 800d69e:	e015      	b.n	800d6cc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d108      	bne.n	800d6b8 <inc_lock+0xf8>
 800d6a6:	4a0c      	ldr	r2, [pc, #48]	@ (800d6d8 <inc_lock+0x118>)
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	011b      	lsls	r3, r3, #4
 800d6ac:	4413      	add	r3, r2
 800d6ae:	330c      	adds	r3, #12
 800d6b0:	881b      	ldrh	r3, [r3, #0]
 800d6b2:	3301      	adds	r3, #1
 800d6b4:	b29a      	uxth	r2, r3
 800d6b6:	e001      	b.n	800d6bc <inc_lock+0xfc>
 800d6b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d6bc:	4906      	ldr	r1, [pc, #24]	@ (800d6d8 <inc_lock+0x118>)
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	011b      	lsls	r3, r3, #4
 800d6c2:	440b      	add	r3, r1
 800d6c4:	330c      	adds	r3, #12
 800d6c6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	3301      	adds	r3, #1
}
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	3714      	adds	r7, #20
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d6:	4770      	bx	lr
 800d6d8:	20002bf8 	.word	0x20002bf8

0800d6dc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b085      	sub	sp, #20
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	3b01      	subs	r3, #1
 800d6e8:	607b      	str	r3, [r7, #4]
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2b01      	cmp	r3, #1
 800d6ee:	d825      	bhi.n	800d73c <dec_lock+0x60>
		n = Files[i].ctr;
 800d6f0:	4a17      	ldr	r2, [pc, #92]	@ (800d750 <dec_lock+0x74>)
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	011b      	lsls	r3, r3, #4
 800d6f6:	4413      	add	r3, r2
 800d6f8:	330c      	adds	r3, #12
 800d6fa:	881b      	ldrh	r3, [r3, #0]
 800d6fc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d6fe:	89fb      	ldrh	r3, [r7, #14]
 800d700:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d704:	d101      	bne.n	800d70a <dec_lock+0x2e>
 800d706:	2300      	movs	r3, #0
 800d708:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d70a:	89fb      	ldrh	r3, [r7, #14]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d002      	beq.n	800d716 <dec_lock+0x3a>
 800d710:	89fb      	ldrh	r3, [r7, #14]
 800d712:	3b01      	subs	r3, #1
 800d714:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d716:	4a0e      	ldr	r2, [pc, #56]	@ (800d750 <dec_lock+0x74>)
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	011b      	lsls	r3, r3, #4
 800d71c:	4413      	add	r3, r2
 800d71e:	330c      	adds	r3, #12
 800d720:	89fa      	ldrh	r2, [r7, #14]
 800d722:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d724:	89fb      	ldrh	r3, [r7, #14]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d105      	bne.n	800d736 <dec_lock+0x5a>
 800d72a:	4a09      	ldr	r2, [pc, #36]	@ (800d750 <dec_lock+0x74>)
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	011b      	lsls	r3, r3, #4
 800d730:	4413      	add	r3, r2
 800d732:	2200      	movs	r2, #0
 800d734:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d736:	2300      	movs	r3, #0
 800d738:	737b      	strb	r3, [r7, #13]
 800d73a:	e001      	b.n	800d740 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d73c:	2302      	movs	r3, #2
 800d73e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d740:	7b7b      	ldrb	r3, [r7, #13]
}
 800d742:	4618      	mov	r0, r3
 800d744:	3714      	adds	r7, #20
 800d746:	46bd      	mov	sp, r7
 800d748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74c:	4770      	bx	lr
 800d74e:	bf00      	nop
 800d750:	20002bf8 	.word	0x20002bf8

0800d754 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d754:	b480      	push	{r7}
 800d756:	b085      	sub	sp, #20
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d75c:	2300      	movs	r3, #0
 800d75e:	60fb      	str	r3, [r7, #12]
 800d760:	e010      	b.n	800d784 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d762:	4a0d      	ldr	r2, [pc, #52]	@ (800d798 <clear_lock+0x44>)
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	011b      	lsls	r3, r3, #4
 800d768:	4413      	add	r3, r2
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	687a      	ldr	r2, [r7, #4]
 800d76e:	429a      	cmp	r2, r3
 800d770:	d105      	bne.n	800d77e <clear_lock+0x2a>
 800d772:	4a09      	ldr	r2, [pc, #36]	@ (800d798 <clear_lock+0x44>)
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	011b      	lsls	r3, r3, #4
 800d778:	4413      	add	r3, r2
 800d77a:	2200      	movs	r2, #0
 800d77c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	3301      	adds	r3, #1
 800d782:	60fb      	str	r3, [r7, #12]
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	2b01      	cmp	r3, #1
 800d788:	d9eb      	bls.n	800d762 <clear_lock+0xe>
	}
}
 800d78a:	bf00      	nop
 800d78c:	bf00      	nop
 800d78e:	3714      	adds	r7, #20
 800d790:	46bd      	mov	sp, r7
 800d792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d796:	4770      	bx	lr
 800d798:	20002bf8 	.word	0x20002bf8

0800d79c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b086      	sub	sp, #24
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	78db      	ldrb	r3, [r3, #3]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d034      	beq.n	800d81a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7b4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	7858      	ldrb	r0, [r3, #1]
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	697a      	ldr	r2, [r7, #20]
 800d7c4:	f7ff fd0e 	bl	800d1e4 <disk_write>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d002      	beq.n	800d7d4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	73fb      	strb	r3, [r7, #15]
 800d7d2:	e022      	b.n	800d81a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7de:	697a      	ldr	r2, [r7, #20]
 800d7e0:	1ad2      	subs	r2, r2, r3
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7e6:	429a      	cmp	r2, r3
 800d7e8:	d217      	bcs.n	800d81a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	789b      	ldrb	r3, [r3, #2]
 800d7ee:	613b      	str	r3, [r7, #16]
 800d7f0:	e010      	b.n	800d814 <sync_window+0x78>
					wsect += fs->fsize;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7f6:	697a      	ldr	r2, [r7, #20]
 800d7f8:	4413      	add	r3, r2
 800d7fa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	7858      	ldrb	r0, [r3, #1]
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800d806:	2301      	movs	r3, #1
 800d808:	697a      	ldr	r2, [r7, #20]
 800d80a:	f7ff fceb 	bl	800d1e4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	3b01      	subs	r3, #1
 800d812:	613b      	str	r3, [r7, #16]
 800d814:	693b      	ldr	r3, [r7, #16]
 800d816:	2b01      	cmp	r3, #1
 800d818:	d8eb      	bhi.n	800d7f2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d81a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	3718      	adds	r7, #24
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}

0800d824 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b084      	sub	sp, #16
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
 800d82c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d82e:	2300      	movs	r3, #0
 800d830:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d836:	683a      	ldr	r2, [r7, #0]
 800d838:	429a      	cmp	r2, r3
 800d83a:	d01b      	beq.n	800d874 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f7ff ffad 	bl	800d79c <sync_window>
 800d842:	4603      	mov	r3, r0
 800d844:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d846:	7bfb      	ldrb	r3, [r7, #15]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d113      	bne.n	800d874 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	7858      	ldrb	r0, [r3, #1]
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800d856:	2301      	movs	r3, #1
 800d858:	683a      	ldr	r2, [r7, #0]
 800d85a:	f7ff fca3 	bl	800d1a4 <disk_read>
 800d85e:	4603      	mov	r3, r0
 800d860:	2b00      	cmp	r3, #0
 800d862:	d004      	beq.n	800d86e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d864:	f04f 33ff 	mov.w	r3, #4294967295
 800d868:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d86a:	2301      	movs	r3, #1
 800d86c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	683a      	ldr	r2, [r7, #0]
 800d872:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 800d874:	7bfb      	ldrb	r3, [r7, #15]
}
 800d876:	4618      	mov	r0, r3
 800d878:	3710      	adds	r7, #16
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
	...

0800d880 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b084      	sub	sp, #16
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f7ff ff87 	bl	800d79c <sync_window>
 800d88e:	4603      	mov	r3, r0
 800d890:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d892:	7bfb      	ldrb	r3, [r7, #15]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d159      	bne.n	800d94c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	781b      	ldrb	r3, [r3, #0]
 800d89c:	2b03      	cmp	r3, #3
 800d89e:	d149      	bne.n	800d934 <sync_fs+0xb4>
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	791b      	ldrb	r3, [r3, #4]
 800d8a4:	2b01      	cmp	r3, #1
 800d8a6:	d145      	bne.n	800d934 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	899b      	ldrh	r3, [r3, #12]
 800d8b2:	461a      	mov	r2, r3
 800d8b4:	2100      	movs	r1, #0
 800d8b6:	f7ff fd76 	bl	800d3a6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	333c      	adds	r3, #60	@ 0x3c
 800d8be:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d8c2:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f7ff fd05 	bl	800d2d6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	333c      	adds	r3, #60	@ 0x3c
 800d8d0:	4921      	ldr	r1, [pc, #132]	@ (800d958 <sync_fs+0xd8>)
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f7ff fd1a 	bl	800d30c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	333c      	adds	r3, #60	@ 0x3c
 800d8dc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d8e0:	491e      	ldr	r1, [pc, #120]	@ (800d95c <sync_fs+0xdc>)
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7ff fd12 	bl	800d30c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	333c      	adds	r3, #60	@ 0x3c
 800d8ec:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	69db      	ldr	r3, [r3, #28]
 800d8f4:	4619      	mov	r1, r3
 800d8f6:	4610      	mov	r0, r2
 800d8f8:	f7ff fd08 	bl	800d30c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	333c      	adds	r3, #60	@ 0x3c
 800d900:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	699b      	ldr	r3, [r3, #24]
 800d908:	4619      	mov	r1, r3
 800d90a:	4610      	mov	r0, r2
 800d90c:	f7ff fcfe 	bl	800d30c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d914:	1c5a      	adds	r2, r3, #1
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	7858      	ldrb	r0, [r3, #1]
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d928:	2301      	movs	r3, #1
 800d92a:	f7ff fc5b 	bl	800d1e4 <disk_write>
			fs->fsi_flag = 0;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2200      	movs	r2, #0
 800d932:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	785b      	ldrb	r3, [r3, #1]
 800d938:	2200      	movs	r2, #0
 800d93a:	2100      	movs	r1, #0
 800d93c:	4618      	mov	r0, r3
 800d93e:	f7ff fc71 	bl	800d224 <disk_ioctl>
 800d942:	4603      	mov	r3, r0
 800d944:	2b00      	cmp	r3, #0
 800d946:	d001      	beq.n	800d94c <sync_fs+0xcc>
 800d948:	2301      	movs	r3, #1
 800d94a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d94c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d94e:	4618      	mov	r0, r3
 800d950:	3710      	adds	r7, #16
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}
 800d956:	bf00      	nop
 800d958:	41615252 	.word	0x41615252
 800d95c:	61417272 	.word	0x61417272

0800d960 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d960:	b480      	push	{r7}
 800d962:	b083      	sub	sp, #12
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
 800d968:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	3b02      	subs	r3, #2
 800d96e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	6a1b      	ldr	r3, [r3, #32]
 800d974:	3b02      	subs	r3, #2
 800d976:	683a      	ldr	r2, [r7, #0]
 800d978:	429a      	cmp	r2, r3
 800d97a:	d301      	bcc.n	800d980 <clust2sect+0x20>
 800d97c:	2300      	movs	r3, #0
 800d97e:	e008      	b.n	800d992 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	895b      	ldrh	r3, [r3, #10]
 800d984:	461a      	mov	r2, r3
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	fb03 f202 	mul.w	r2, r3, r2
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d990:	4413      	add	r3, r2
}
 800d992:	4618      	mov	r0, r3
 800d994:	370c      	adds	r7, #12
 800d996:	46bd      	mov	sp, r7
 800d998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99c:	4770      	bx	lr

0800d99e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d99e:	b580      	push	{r7, lr}
 800d9a0:	b086      	sub	sp, #24
 800d9a2:	af00      	add	r7, sp, #0
 800d9a4:	6078      	str	r0, [r7, #4]
 800d9a6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	2b01      	cmp	r3, #1
 800d9b2:	d904      	bls.n	800d9be <get_fat+0x20>
 800d9b4:	693b      	ldr	r3, [r7, #16]
 800d9b6:	6a1b      	ldr	r3, [r3, #32]
 800d9b8:	683a      	ldr	r2, [r7, #0]
 800d9ba:	429a      	cmp	r2, r3
 800d9bc:	d302      	bcc.n	800d9c4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d9be:	2301      	movs	r3, #1
 800d9c0:	617b      	str	r3, [r7, #20]
 800d9c2:	e0ba      	b.n	800db3a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d9c4:	f04f 33ff 	mov.w	r3, #4294967295
 800d9c8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d9ca:	693b      	ldr	r3, [r7, #16]
 800d9cc:	781b      	ldrb	r3, [r3, #0]
 800d9ce:	2b03      	cmp	r3, #3
 800d9d0:	f000 8082 	beq.w	800dad8 <get_fat+0x13a>
 800d9d4:	2b03      	cmp	r3, #3
 800d9d6:	f300 80a6 	bgt.w	800db26 <get_fat+0x188>
 800d9da:	2b01      	cmp	r3, #1
 800d9dc:	d002      	beq.n	800d9e4 <get_fat+0x46>
 800d9de:	2b02      	cmp	r3, #2
 800d9e0:	d055      	beq.n	800da8e <get_fat+0xf0>
 800d9e2:	e0a0      	b.n	800db26 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	60fb      	str	r3, [r7, #12]
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	085b      	lsrs	r3, r3, #1
 800d9ec:	68fa      	ldr	r2, [r7, #12]
 800d9ee:	4413      	add	r3, r2
 800d9f0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d9f2:	693b      	ldr	r3, [r7, #16]
 800d9f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9f6:	693b      	ldr	r3, [r7, #16]
 800d9f8:	899b      	ldrh	r3, [r3, #12]
 800d9fa:	4619      	mov	r1, r3
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	fbb3 f3f1 	udiv	r3, r3, r1
 800da02:	4413      	add	r3, r2
 800da04:	4619      	mov	r1, r3
 800da06:	6938      	ldr	r0, [r7, #16]
 800da08:	f7ff ff0c 	bl	800d824 <move_window>
 800da0c:	4603      	mov	r3, r0
 800da0e:	2b00      	cmp	r3, #0
 800da10:	f040 808c 	bne.w	800db2c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	1c5a      	adds	r2, r3, #1
 800da18:	60fa      	str	r2, [r7, #12]
 800da1a:	693a      	ldr	r2, [r7, #16]
 800da1c:	8992      	ldrh	r2, [r2, #12]
 800da1e:	fbb3 f1f2 	udiv	r1, r3, r2
 800da22:	fb01 f202 	mul.w	r2, r1, r2
 800da26:	1a9b      	subs	r3, r3, r2
 800da28:	693a      	ldr	r2, [r7, #16]
 800da2a:	4413      	add	r3, r2
 800da2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800da30:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800da32:	693b      	ldr	r3, [r7, #16]
 800da34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	899b      	ldrh	r3, [r3, #12]
 800da3a:	4619      	mov	r1, r3
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	fbb3 f3f1 	udiv	r3, r3, r1
 800da42:	4413      	add	r3, r2
 800da44:	4619      	mov	r1, r3
 800da46:	6938      	ldr	r0, [r7, #16]
 800da48:	f7ff feec 	bl	800d824 <move_window>
 800da4c:	4603      	mov	r3, r0
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d16e      	bne.n	800db30 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800da52:	693b      	ldr	r3, [r7, #16]
 800da54:	899b      	ldrh	r3, [r3, #12]
 800da56:	461a      	mov	r2, r3
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	fbb3 f1f2 	udiv	r1, r3, r2
 800da5e:	fb01 f202 	mul.w	r2, r1, r2
 800da62:	1a9b      	subs	r3, r3, r2
 800da64:	693a      	ldr	r2, [r7, #16]
 800da66:	4413      	add	r3, r2
 800da68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800da6c:	021b      	lsls	r3, r3, #8
 800da6e:	68ba      	ldr	r2, [r7, #8]
 800da70:	4313      	orrs	r3, r2
 800da72:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	f003 0301 	and.w	r3, r3, #1
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d002      	beq.n	800da84 <get_fat+0xe6>
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	091b      	lsrs	r3, r3, #4
 800da82:	e002      	b.n	800da8a <get_fat+0xec>
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800da8a:	617b      	str	r3, [r7, #20]
			break;
 800da8c:	e055      	b.n	800db3a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800da8e:	693b      	ldr	r3, [r7, #16]
 800da90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da92:	693b      	ldr	r3, [r7, #16]
 800da94:	899b      	ldrh	r3, [r3, #12]
 800da96:	085b      	lsrs	r3, r3, #1
 800da98:	b29b      	uxth	r3, r3
 800da9a:	4619      	mov	r1, r3
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	fbb3 f3f1 	udiv	r3, r3, r1
 800daa2:	4413      	add	r3, r2
 800daa4:	4619      	mov	r1, r3
 800daa6:	6938      	ldr	r0, [r7, #16]
 800daa8:	f7ff febc 	bl	800d824 <move_window>
 800daac:	4603      	mov	r3, r0
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d140      	bne.n	800db34 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800dab2:	693b      	ldr	r3, [r7, #16]
 800dab4:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	005b      	lsls	r3, r3, #1
 800dabc:	693a      	ldr	r2, [r7, #16]
 800dabe:	8992      	ldrh	r2, [r2, #12]
 800dac0:	fbb3 f0f2 	udiv	r0, r3, r2
 800dac4:	fb00 f202 	mul.w	r2, r0, r2
 800dac8:	1a9b      	subs	r3, r3, r2
 800daca:	440b      	add	r3, r1
 800dacc:	4618      	mov	r0, r3
 800dace:	f7ff fbc7 	bl	800d260 <ld_word>
 800dad2:	4603      	mov	r3, r0
 800dad4:	617b      	str	r3, [r7, #20]
			break;
 800dad6:	e030      	b.n	800db3a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dad8:	693b      	ldr	r3, [r7, #16]
 800dada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dadc:	693b      	ldr	r3, [r7, #16]
 800dade:	899b      	ldrh	r3, [r3, #12]
 800dae0:	089b      	lsrs	r3, r3, #2
 800dae2:	b29b      	uxth	r3, r3
 800dae4:	4619      	mov	r1, r3
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	fbb3 f3f1 	udiv	r3, r3, r1
 800daec:	4413      	add	r3, r2
 800daee:	4619      	mov	r1, r3
 800daf0:	6938      	ldr	r0, [r7, #16]
 800daf2:	f7ff fe97 	bl	800d824 <move_window>
 800daf6:	4603      	mov	r3, r0
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d11d      	bne.n	800db38 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800dafc:	693b      	ldr	r3, [r7, #16]
 800dafe:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	009b      	lsls	r3, r3, #2
 800db06:	693a      	ldr	r2, [r7, #16]
 800db08:	8992      	ldrh	r2, [r2, #12]
 800db0a:	fbb3 f0f2 	udiv	r0, r3, r2
 800db0e:	fb00 f202 	mul.w	r2, r0, r2
 800db12:	1a9b      	subs	r3, r3, r2
 800db14:	440b      	add	r3, r1
 800db16:	4618      	mov	r0, r3
 800db18:	f7ff fbba 	bl	800d290 <ld_dword>
 800db1c:	4603      	mov	r3, r0
 800db1e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800db22:	617b      	str	r3, [r7, #20]
			break;
 800db24:	e009      	b.n	800db3a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800db26:	2301      	movs	r3, #1
 800db28:	617b      	str	r3, [r7, #20]
 800db2a:	e006      	b.n	800db3a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800db2c:	bf00      	nop
 800db2e:	e004      	b.n	800db3a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800db30:	bf00      	nop
 800db32:	e002      	b.n	800db3a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800db34:	bf00      	nop
 800db36:	e000      	b.n	800db3a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800db38:	bf00      	nop
		}
	}

	return val;
 800db3a:	697b      	ldr	r3, [r7, #20]
}
 800db3c:	4618      	mov	r0, r3
 800db3e:	3718      	adds	r7, #24
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}

0800db44 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800db44:	b590      	push	{r4, r7, lr}
 800db46:	b089      	sub	sp, #36	@ 0x24
 800db48:	af00      	add	r7, sp, #0
 800db4a:	60f8      	str	r0, [r7, #12]
 800db4c:	60b9      	str	r1, [r7, #8]
 800db4e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800db50:	2302      	movs	r3, #2
 800db52:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	2b01      	cmp	r3, #1
 800db58:	f240 8109 	bls.w	800dd6e <put_fat+0x22a>
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	6a1b      	ldr	r3, [r3, #32]
 800db60:	68ba      	ldr	r2, [r7, #8]
 800db62:	429a      	cmp	r2, r3
 800db64:	f080 8103 	bcs.w	800dd6e <put_fat+0x22a>
		switch (fs->fs_type) {
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	781b      	ldrb	r3, [r3, #0]
 800db6c:	2b03      	cmp	r3, #3
 800db6e:	f000 80b6 	beq.w	800dcde <put_fat+0x19a>
 800db72:	2b03      	cmp	r3, #3
 800db74:	f300 80fb 	bgt.w	800dd6e <put_fat+0x22a>
 800db78:	2b01      	cmp	r3, #1
 800db7a:	d003      	beq.n	800db84 <put_fat+0x40>
 800db7c:	2b02      	cmp	r3, #2
 800db7e:	f000 8083 	beq.w	800dc88 <put_fat+0x144>
 800db82:	e0f4      	b.n	800dd6e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	61bb      	str	r3, [r7, #24]
 800db88:	69bb      	ldr	r3, [r7, #24]
 800db8a:	085b      	lsrs	r3, r3, #1
 800db8c:	69ba      	ldr	r2, [r7, #24]
 800db8e:	4413      	add	r3, r2
 800db90:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	899b      	ldrh	r3, [r3, #12]
 800db9a:	4619      	mov	r1, r3
 800db9c:	69bb      	ldr	r3, [r7, #24]
 800db9e:	fbb3 f3f1 	udiv	r3, r3, r1
 800dba2:	4413      	add	r3, r2
 800dba4:	4619      	mov	r1, r3
 800dba6:	68f8      	ldr	r0, [r7, #12]
 800dba8:	f7ff fe3c 	bl	800d824 <move_window>
 800dbac:	4603      	mov	r3, r0
 800dbae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dbb0:	7ffb      	ldrb	r3, [r7, #31]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	f040 80d4 	bne.w	800dd60 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800dbbe:	69bb      	ldr	r3, [r7, #24]
 800dbc0:	1c5a      	adds	r2, r3, #1
 800dbc2:	61ba      	str	r2, [r7, #24]
 800dbc4:	68fa      	ldr	r2, [r7, #12]
 800dbc6:	8992      	ldrh	r2, [r2, #12]
 800dbc8:	fbb3 f0f2 	udiv	r0, r3, r2
 800dbcc:	fb00 f202 	mul.w	r2, r0, r2
 800dbd0:	1a9b      	subs	r3, r3, r2
 800dbd2:	440b      	add	r3, r1
 800dbd4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	f003 0301 	and.w	r3, r3, #1
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d00d      	beq.n	800dbfc <put_fat+0xb8>
 800dbe0:	697b      	ldr	r3, [r7, #20]
 800dbe2:	781b      	ldrb	r3, [r3, #0]
 800dbe4:	b25b      	sxtb	r3, r3
 800dbe6:	f003 030f 	and.w	r3, r3, #15
 800dbea:	b25a      	sxtb	r2, r3
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	b2db      	uxtb	r3, r3
 800dbf0:	011b      	lsls	r3, r3, #4
 800dbf2:	b25b      	sxtb	r3, r3
 800dbf4:	4313      	orrs	r3, r2
 800dbf6:	b25b      	sxtb	r3, r3
 800dbf8:	b2db      	uxtb	r3, r3
 800dbfa:	e001      	b.n	800dc00 <put_fat+0xbc>
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	b2db      	uxtb	r3, r3
 800dc00:	697a      	ldr	r2, [r7, #20]
 800dc02:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	2201      	movs	r2, #1
 800dc08:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	899b      	ldrh	r3, [r3, #12]
 800dc12:	4619      	mov	r1, r3
 800dc14:	69bb      	ldr	r3, [r7, #24]
 800dc16:	fbb3 f3f1 	udiv	r3, r3, r1
 800dc1a:	4413      	add	r3, r2
 800dc1c:	4619      	mov	r1, r3
 800dc1e:	68f8      	ldr	r0, [r7, #12]
 800dc20:	f7ff fe00 	bl	800d824 <move_window>
 800dc24:	4603      	mov	r3, r0
 800dc26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dc28:	7ffb      	ldrb	r3, [r7, #31]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	f040 809a 	bne.w	800dd64 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	899b      	ldrh	r3, [r3, #12]
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	69bb      	ldr	r3, [r7, #24]
 800dc3e:	fbb3 f0f2 	udiv	r0, r3, r2
 800dc42:	fb00 f202 	mul.w	r2, r0, r2
 800dc46:	1a9b      	subs	r3, r3, r2
 800dc48:	440b      	add	r3, r1
 800dc4a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	f003 0301 	and.w	r3, r3, #1
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d003      	beq.n	800dc5e <put_fat+0x11a>
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	091b      	lsrs	r3, r3, #4
 800dc5a:	b2db      	uxtb	r3, r3
 800dc5c:	e00e      	b.n	800dc7c <put_fat+0x138>
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	781b      	ldrb	r3, [r3, #0]
 800dc62:	b25b      	sxtb	r3, r3
 800dc64:	f023 030f 	bic.w	r3, r3, #15
 800dc68:	b25a      	sxtb	r2, r3
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	0a1b      	lsrs	r3, r3, #8
 800dc6e:	b25b      	sxtb	r3, r3
 800dc70:	f003 030f 	and.w	r3, r3, #15
 800dc74:	b25b      	sxtb	r3, r3
 800dc76:	4313      	orrs	r3, r2
 800dc78:	b25b      	sxtb	r3, r3
 800dc7a:	b2db      	uxtb	r3, r3
 800dc7c:	697a      	ldr	r2, [r7, #20]
 800dc7e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	2201      	movs	r2, #1
 800dc84:	70da      	strb	r2, [r3, #3]
			break;
 800dc86:	e072      	b.n	800dd6e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	899b      	ldrh	r3, [r3, #12]
 800dc90:	085b      	lsrs	r3, r3, #1
 800dc92:	b29b      	uxth	r3, r3
 800dc94:	4619      	mov	r1, r3
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	fbb3 f3f1 	udiv	r3, r3, r1
 800dc9c:	4413      	add	r3, r2
 800dc9e:	4619      	mov	r1, r3
 800dca0:	68f8      	ldr	r0, [r7, #12]
 800dca2:	f7ff fdbf 	bl	800d824 <move_window>
 800dca6:	4603      	mov	r3, r0
 800dca8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dcaa:	7ffb      	ldrb	r3, [r7, #31]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d15b      	bne.n	800dd68 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800dcb6:	68bb      	ldr	r3, [r7, #8]
 800dcb8:	005b      	lsls	r3, r3, #1
 800dcba:	68fa      	ldr	r2, [r7, #12]
 800dcbc:	8992      	ldrh	r2, [r2, #12]
 800dcbe:	fbb3 f0f2 	udiv	r0, r3, r2
 800dcc2:	fb00 f202 	mul.w	r2, r0, r2
 800dcc6:	1a9b      	subs	r3, r3, r2
 800dcc8:	440b      	add	r3, r1
 800dcca:	687a      	ldr	r2, [r7, #4]
 800dccc:	b292      	uxth	r2, r2
 800dcce:	4611      	mov	r1, r2
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f7ff fb00 	bl	800d2d6 <st_word>
			fs->wflag = 1;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	2201      	movs	r2, #1
 800dcda:	70da      	strb	r2, [r3, #3]
			break;
 800dcdc:	e047      	b.n	800dd6e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	899b      	ldrh	r3, [r3, #12]
 800dce6:	089b      	lsrs	r3, r3, #2
 800dce8:	b29b      	uxth	r3, r3
 800dcea:	4619      	mov	r1, r3
 800dcec:	68bb      	ldr	r3, [r7, #8]
 800dcee:	fbb3 f3f1 	udiv	r3, r3, r1
 800dcf2:	4413      	add	r3, r2
 800dcf4:	4619      	mov	r1, r3
 800dcf6:	68f8      	ldr	r0, [r7, #12]
 800dcf8:	f7ff fd94 	bl	800d824 <move_window>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dd00:	7ffb      	ldrb	r3, [r7, #31]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d132      	bne.n	800dd6c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	009b      	lsls	r3, r3, #2
 800dd16:	68fa      	ldr	r2, [r7, #12]
 800dd18:	8992      	ldrh	r2, [r2, #12]
 800dd1a:	fbb3 f0f2 	udiv	r0, r3, r2
 800dd1e:	fb00 f202 	mul.w	r2, r0, r2
 800dd22:	1a9b      	subs	r3, r3, r2
 800dd24:	440b      	add	r3, r1
 800dd26:	4618      	mov	r0, r3
 800dd28:	f7ff fab2 	bl	800d290 <ld_dword>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800dd32:	4323      	orrs	r3, r4
 800dd34:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	009b      	lsls	r3, r3, #2
 800dd40:	68fa      	ldr	r2, [r7, #12]
 800dd42:	8992      	ldrh	r2, [r2, #12]
 800dd44:	fbb3 f0f2 	udiv	r0, r3, r2
 800dd48:	fb00 f202 	mul.w	r2, r0, r2
 800dd4c:	1a9b      	subs	r3, r3, r2
 800dd4e:	440b      	add	r3, r1
 800dd50:	6879      	ldr	r1, [r7, #4]
 800dd52:	4618      	mov	r0, r3
 800dd54:	f7ff fada 	bl	800d30c <st_dword>
			fs->wflag = 1;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	2201      	movs	r2, #1
 800dd5c:	70da      	strb	r2, [r3, #3]
			break;
 800dd5e:	e006      	b.n	800dd6e <put_fat+0x22a>
			if (res != FR_OK) break;
 800dd60:	bf00      	nop
 800dd62:	e004      	b.n	800dd6e <put_fat+0x22a>
			if (res != FR_OK) break;
 800dd64:	bf00      	nop
 800dd66:	e002      	b.n	800dd6e <put_fat+0x22a>
			if (res != FR_OK) break;
 800dd68:	bf00      	nop
 800dd6a:	e000      	b.n	800dd6e <put_fat+0x22a>
			if (res != FR_OK) break;
 800dd6c:	bf00      	nop
		}
	}
	return res;
 800dd6e:	7ffb      	ldrb	r3, [r7, #31]
}
 800dd70:	4618      	mov	r0, r3
 800dd72:	3724      	adds	r7, #36	@ 0x24
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd90      	pop	{r4, r7, pc}

0800dd78 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b088      	sub	sp, #32
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	60f8      	str	r0, [r7, #12]
 800dd80:	60b9      	str	r1, [r7, #8]
 800dd82:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800dd84:	2300      	movs	r3, #0
 800dd86:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800dd8e:	68bb      	ldr	r3, [r7, #8]
 800dd90:	2b01      	cmp	r3, #1
 800dd92:	d904      	bls.n	800dd9e <remove_chain+0x26>
 800dd94:	69bb      	ldr	r3, [r7, #24]
 800dd96:	6a1b      	ldr	r3, [r3, #32]
 800dd98:	68ba      	ldr	r2, [r7, #8]
 800dd9a:	429a      	cmp	r2, r3
 800dd9c:	d301      	bcc.n	800dda2 <remove_chain+0x2a>
 800dd9e:	2302      	movs	r3, #2
 800dda0:	e04b      	b.n	800de3a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d00c      	beq.n	800ddc2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800dda8:	f04f 32ff 	mov.w	r2, #4294967295
 800ddac:	6879      	ldr	r1, [r7, #4]
 800ddae:	69b8      	ldr	r0, [r7, #24]
 800ddb0:	f7ff fec8 	bl	800db44 <put_fat>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ddb8:	7ffb      	ldrb	r3, [r7, #31]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d001      	beq.n	800ddc2 <remove_chain+0x4a>
 800ddbe:	7ffb      	ldrb	r3, [r7, #31]
 800ddc0:	e03b      	b.n	800de3a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ddc2:	68b9      	ldr	r1, [r7, #8]
 800ddc4:	68f8      	ldr	r0, [r7, #12]
 800ddc6:	f7ff fdea 	bl	800d99e <get_fat>
 800ddca:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ddcc:	697b      	ldr	r3, [r7, #20]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d031      	beq.n	800de36 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	2b01      	cmp	r3, #1
 800ddd6:	d101      	bne.n	800dddc <remove_chain+0x64>
 800ddd8:	2302      	movs	r3, #2
 800ddda:	e02e      	b.n	800de3a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800dddc:	697b      	ldr	r3, [r7, #20]
 800ddde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dde2:	d101      	bne.n	800dde8 <remove_chain+0x70>
 800dde4:	2301      	movs	r3, #1
 800dde6:	e028      	b.n	800de3a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800dde8:	2200      	movs	r2, #0
 800ddea:	68b9      	ldr	r1, [r7, #8]
 800ddec:	69b8      	ldr	r0, [r7, #24]
 800ddee:	f7ff fea9 	bl	800db44 <put_fat>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ddf6:	7ffb      	ldrb	r3, [r7, #31]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d001      	beq.n	800de00 <remove_chain+0x88>
 800ddfc:	7ffb      	ldrb	r3, [r7, #31]
 800ddfe:	e01c      	b.n	800de3a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800de00:	69bb      	ldr	r3, [r7, #24]
 800de02:	69da      	ldr	r2, [r3, #28]
 800de04:	69bb      	ldr	r3, [r7, #24]
 800de06:	6a1b      	ldr	r3, [r3, #32]
 800de08:	3b02      	subs	r3, #2
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d20b      	bcs.n	800de26 <remove_chain+0xae>
			fs->free_clst++;
 800de0e:	69bb      	ldr	r3, [r7, #24]
 800de10:	69db      	ldr	r3, [r3, #28]
 800de12:	1c5a      	adds	r2, r3, #1
 800de14:	69bb      	ldr	r3, [r7, #24]
 800de16:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800de18:	69bb      	ldr	r3, [r7, #24]
 800de1a:	791b      	ldrb	r3, [r3, #4]
 800de1c:	f043 0301 	orr.w	r3, r3, #1
 800de20:	b2da      	uxtb	r2, r3
 800de22:	69bb      	ldr	r3, [r7, #24]
 800de24:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800de26:	697b      	ldr	r3, [r7, #20]
 800de28:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800de2a:	69bb      	ldr	r3, [r7, #24]
 800de2c:	6a1b      	ldr	r3, [r3, #32]
 800de2e:	68ba      	ldr	r2, [r7, #8]
 800de30:	429a      	cmp	r2, r3
 800de32:	d3c6      	bcc.n	800ddc2 <remove_chain+0x4a>
 800de34:	e000      	b.n	800de38 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800de36:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800de38:	2300      	movs	r3, #0
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	3720      	adds	r7, #32
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}

0800de42 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800de42:	b580      	push	{r7, lr}
 800de44:	b088      	sub	sp, #32
 800de46:	af00      	add	r7, sp, #0
 800de48:	6078      	str	r0, [r7, #4]
 800de4a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d10d      	bne.n	800de74 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800de58:	693b      	ldr	r3, [r7, #16]
 800de5a:	699b      	ldr	r3, [r3, #24]
 800de5c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800de5e:	69bb      	ldr	r3, [r7, #24]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d004      	beq.n	800de6e <create_chain+0x2c>
 800de64:	693b      	ldr	r3, [r7, #16]
 800de66:	6a1b      	ldr	r3, [r3, #32]
 800de68:	69ba      	ldr	r2, [r7, #24]
 800de6a:	429a      	cmp	r2, r3
 800de6c:	d31b      	bcc.n	800dea6 <create_chain+0x64>
 800de6e:	2301      	movs	r3, #1
 800de70:	61bb      	str	r3, [r7, #24]
 800de72:	e018      	b.n	800dea6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800de74:	6839      	ldr	r1, [r7, #0]
 800de76:	6878      	ldr	r0, [r7, #4]
 800de78:	f7ff fd91 	bl	800d99e <get_fat>
 800de7c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	2b01      	cmp	r3, #1
 800de82:	d801      	bhi.n	800de88 <create_chain+0x46>
 800de84:	2301      	movs	r3, #1
 800de86:	e070      	b.n	800df6a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de8e:	d101      	bne.n	800de94 <create_chain+0x52>
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	e06a      	b.n	800df6a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800de94:	693b      	ldr	r3, [r7, #16]
 800de96:	6a1b      	ldr	r3, [r3, #32]
 800de98:	68fa      	ldr	r2, [r7, #12]
 800de9a:	429a      	cmp	r2, r3
 800de9c:	d201      	bcs.n	800dea2 <create_chain+0x60>
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	e063      	b.n	800df6a <create_chain+0x128>
		scl = clst;
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800dea6:	69bb      	ldr	r3, [r7, #24]
 800dea8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800deaa:	69fb      	ldr	r3, [r7, #28]
 800deac:	3301      	adds	r3, #1
 800deae:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800deb0:	693b      	ldr	r3, [r7, #16]
 800deb2:	6a1b      	ldr	r3, [r3, #32]
 800deb4:	69fa      	ldr	r2, [r7, #28]
 800deb6:	429a      	cmp	r2, r3
 800deb8:	d307      	bcc.n	800deca <create_chain+0x88>
				ncl = 2;
 800deba:	2302      	movs	r3, #2
 800debc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800debe:	69fa      	ldr	r2, [r7, #28]
 800dec0:	69bb      	ldr	r3, [r7, #24]
 800dec2:	429a      	cmp	r2, r3
 800dec4:	d901      	bls.n	800deca <create_chain+0x88>
 800dec6:	2300      	movs	r3, #0
 800dec8:	e04f      	b.n	800df6a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800deca:	69f9      	ldr	r1, [r7, #28]
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f7ff fd66 	bl	800d99e <get_fat>
 800ded2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d00e      	beq.n	800def8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	2b01      	cmp	r3, #1
 800dede:	d003      	beq.n	800dee8 <create_chain+0xa6>
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dee6:	d101      	bne.n	800deec <create_chain+0xaa>
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	e03e      	b.n	800df6a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800deec:	69fa      	ldr	r2, [r7, #28]
 800deee:	69bb      	ldr	r3, [r7, #24]
 800def0:	429a      	cmp	r2, r3
 800def2:	d1da      	bne.n	800deaa <create_chain+0x68>
 800def4:	2300      	movs	r3, #0
 800def6:	e038      	b.n	800df6a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800def8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800defa:	f04f 32ff 	mov.w	r2, #4294967295
 800defe:	69f9      	ldr	r1, [r7, #28]
 800df00:	6938      	ldr	r0, [r7, #16]
 800df02:	f7ff fe1f 	bl	800db44 <put_fat>
 800df06:	4603      	mov	r3, r0
 800df08:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800df0a:	7dfb      	ldrb	r3, [r7, #23]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d109      	bne.n	800df24 <create_chain+0xe2>
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d006      	beq.n	800df24 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800df16:	69fa      	ldr	r2, [r7, #28]
 800df18:	6839      	ldr	r1, [r7, #0]
 800df1a:	6938      	ldr	r0, [r7, #16]
 800df1c:	f7ff fe12 	bl	800db44 <put_fat>
 800df20:	4603      	mov	r3, r0
 800df22:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800df24:	7dfb      	ldrb	r3, [r7, #23]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d116      	bne.n	800df58 <create_chain+0x116>
		fs->last_clst = ncl;
 800df2a:	693b      	ldr	r3, [r7, #16]
 800df2c:	69fa      	ldr	r2, [r7, #28]
 800df2e:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800df30:	693b      	ldr	r3, [r7, #16]
 800df32:	69da      	ldr	r2, [r3, #28]
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	6a1b      	ldr	r3, [r3, #32]
 800df38:	3b02      	subs	r3, #2
 800df3a:	429a      	cmp	r2, r3
 800df3c:	d804      	bhi.n	800df48 <create_chain+0x106>
 800df3e:	693b      	ldr	r3, [r7, #16]
 800df40:	69db      	ldr	r3, [r3, #28]
 800df42:	1e5a      	subs	r2, r3, #1
 800df44:	693b      	ldr	r3, [r7, #16]
 800df46:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800df48:	693b      	ldr	r3, [r7, #16]
 800df4a:	791b      	ldrb	r3, [r3, #4]
 800df4c:	f043 0301 	orr.w	r3, r3, #1
 800df50:	b2da      	uxtb	r2, r3
 800df52:	693b      	ldr	r3, [r7, #16]
 800df54:	711a      	strb	r2, [r3, #4]
 800df56:	e007      	b.n	800df68 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800df58:	7dfb      	ldrb	r3, [r7, #23]
 800df5a:	2b01      	cmp	r3, #1
 800df5c:	d102      	bne.n	800df64 <create_chain+0x122>
 800df5e:	f04f 33ff 	mov.w	r3, #4294967295
 800df62:	e000      	b.n	800df66 <create_chain+0x124>
 800df64:	2301      	movs	r3, #1
 800df66:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800df68:	69fb      	ldr	r3, [r7, #28]
}
 800df6a:	4618      	mov	r0, r3
 800df6c:	3720      	adds	r7, #32
 800df6e:	46bd      	mov	sp, r7
 800df70:	bd80      	pop	{r7, pc}

0800df72 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800df72:	b480      	push	{r7}
 800df74:	b087      	sub	sp, #28
 800df76:	af00      	add	r7, sp, #0
 800df78:	6078      	str	r0, [r7, #4]
 800df7a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df86:	3304      	adds	r3, #4
 800df88:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	899b      	ldrh	r3, [r3, #12]
 800df8e:	461a      	mov	r2, r3
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	fbb3 f3f2 	udiv	r3, r3, r2
 800df96:	68fa      	ldr	r2, [r7, #12]
 800df98:	8952      	ldrh	r2, [r2, #10]
 800df9a:	fbb3 f3f2 	udiv	r3, r3, r2
 800df9e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dfa0:	693b      	ldr	r3, [r7, #16]
 800dfa2:	1d1a      	adds	r2, r3, #4
 800dfa4:	613a      	str	r2, [r7, #16]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d101      	bne.n	800dfb4 <clmt_clust+0x42>
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	e010      	b.n	800dfd6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800dfb4:	697a      	ldr	r2, [r7, #20]
 800dfb6:	68bb      	ldr	r3, [r7, #8]
 800dfb8:	429a      	cmp	r2, r3
 800dfba:	d307      	bcc.n	800dfcc <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800dfbc:	697a      	ldr	r2, [r7, #20]
 800dfbe:	68bb      	ldr	r3, [r7, #8]
 800dfc0:	1ad3      	subs	r3, r2, r3
 800dfc2:	617b      	str	r3, [r7, #20]
 800dfc4:	693b      	ldr	r3, [r7, #16]
 800dfc6:	3304      	adds	r3, #4
 800dfc8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dfca:	e7e9      	b.n	800dfa0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800dfcc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800dfce:	693b      	ldr	r3, [r7, #16]
 800dfd0:	681a      	ldr	r2, [r3, #0]
 800dfd2:	697b      	ldr	r3, [r7, #20]
 800dfd4:	4413      	add	r3, r2
}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	371c      	adds	r7, #28
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe0:	4770      	bx	lr

0800dfe2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800dfe2:	b580      	push	{r7, lr}
 800dfe4:	b086      	sub	sp, #24
 800dfe6:	af00      	add	r7, sp, #0
 800dfe8:	6078      	str	r0, [r7, #4]
 800dfea:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dff8:	d204      	bcs.n	800e004 <dir_sdi+0x22>
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	f003 031f 	and.w	r3, r3, #31
 800e000:	2b00      	cmp	r3, #0
 800e002:	d001      	beq.n	800e008 <dir_sdi+0x26>
		return FR_INT_ERR;
 800e004:	2302      	movs	r3, #2
 800e006:	e071      	b.n	800e0ec <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	683a      	ldr	r2, [r7, #0]
 800e00c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	689b      	ldr	r3, [r3, #8]
 800e012:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e014:	697b      	ldr	r3, [r7, #20]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d106      	bne.n	800e028 <dir_sdi+0x46>
 800e01a:	693b      	ldr	r3, [r7, #16]
 800e01c:	781b      	ldrb	r3, [r3, #0]
 800e01e:	2b02      	cmp	r3, #2
 800e020:	d902      	bls.n	800e028 <dir_sdi+0x46>
		clst = fs->dirbase;
 800e022:	693b      	ldr	r3, [r7, #16]
 800e024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e026:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d10c      	bne.n	800e048 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e02e:	683b      	ldr	r3, [r7, #0]
 800e030:	095b      	lsrs	r3, r3, #5
 800e032:	693a      	ldr	r2, [r7, #16]
 800e034:	8912      	ldrh	r2, [r2, #8]
 800e036:	4293      	cmp	r3, r2
 800e038:	d301      	bcc.n	800e03e <dir_sdi+0x5c>
 800e03a:	2302      	movs	r3, #2
 800e03c:	e056      	b.n	800e0ec <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	61da      	str	r2, [r3, #28]
 800e046:	e02d      	b.n	800e0a4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e048:	693b      	ldr	r3, [r7, #16]
 800e04a:	895b      	ldrh	r3, [r3, #10]
 800e04c:	461a      	mov	r2, r3
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	899b      	ldrh	r3, [r3, #12]
 800e052:	fb02 f303 	mul.w	r3, r2, r3
 800e056:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e058:	e019      	b.n	800e08e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6979      	ldr	r1, [r7, #20]
 800e05e:	4618      	mov	r0, r3
 800e060:	f7ff fc9d 	bl	800d99e <get_fat>
 800e064:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e066:	697b      	ldr	r3, [r7, #20]
 800e068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e06c:	d101      	bne.n	800e072 <dir_sdi+0x90>
 800e06e:	2301      	movs	r3, #1
 800e070:	e03c      	b.n	800e0ec <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	2b01      	cmp	r3, #1
 800e076:	d904      	bls.n	800e082 <dir_sdi+0xa0>
 800e078:	693b      	ldr	r3, [r7, #16]
 800e07a:	6a1b      	ldr	r3, [r3, #32]
 800e07c:	697a      	ldr	r2, [r7, #20]
 800e07e:	429a      	cmp	r2, r3
 800e080:	d301      	bcc.n	800e086 <dir_sdi+0xa4>
 800e082:	2302      	movs	r3, #2
 800e084:	e032      	b.n	800e0ec <dir_sdi+0x10a>
			ofs -= csz;
 800e086:	683a      	ldr	r2, [r7, #0]
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	1ad3      	subs	r3, r2, r3
 800e08c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e08e:	683a      	ldr	r2, [r7, #0]
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	429a      	cmp	r2, r3
 800e094:	d2e1      	bcs.n	800e05a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800e096:	6979      	ldr	r1, [r7, #20]
 800e098:	6938      	ldr	r0, [r7, #16]
 800e09a:	f7ff fc61 	bl	800d960 <clust2sect>
 800e09e:	4602      	mov	r2, r0
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	697a      	ldr	r2, [r7, #20]
 800e0a8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	69db      	ldr	r3, [r3, #28]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d101      	bne.n	800e0b6 <dir_sdi+0xd4>
 800e0b2:	2302      	movs	r3, #2
 800e0b4:	e01a      	b.n	800e0ec <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	69da      	ldr	r2, [r3, #28]
 800e0ba:	693b      	ldr	r3, [r7, #16]
 800e0bc:	899b      	ldrh	r3, [r3, #12]
 800e0be:	4619      	mov	r1, r3
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	fbb3 f3f1 	udiv	r3, r3, r1
 800e0c6:	441a      	add	r2, r3
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e0cc:	693b      	ldr	r3, [r7, #16]
 800e0ce:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800e0d2:	693b      	ldr	r3, [r7, #16]
 800e0d4:	899b      	ldrh	r3, [r3, #12]
 800e0d6:	461a      	mov	r2, r3
 800e0d8:	683b      	ldr	r3, [r7, #0]
 800e0da:	fbb3 f0f2 	udiv	r0, r3, r2
 800e0de:	fb00 f202 	mul.w	r2, r0, r2
 800e0e2:	1a9b      	subs	r3, r3, r2
 800e0e4:	18ca      	adds	r2, r1, r3
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e0ea:	2300      	movs	r3, #0
}
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	3718      	adds	r7, #24
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd80      	pop	{r7, pc}

0800e0f4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b086      	sub	sp, #24
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
 800e0fc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	695b      	ldr	r3, [r3, #20]
 800e108:	3320      	adds	r3, #32
 800e10a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	69db      	ldr	r3, [r3, #28]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d003      	beq.n	800e11c <dir_next+0x28>
 800e114:	68bb      	ldr	r3, [r7, #8]
 800e116:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e11a:	d301      	bcc.n	800e120 <dir_next+0x2c>
 800e11c:	2304      	movs	r3, #4
 800e11e:	e0bb      	b.n	800e298 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	899b      	ldrh	r3, [r3, #12]
 800e124:	461a      	mov	r2, r3
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	fbb3 f1f2 	udiv	r1, r3, r2
 800e12c:	fb01 f202 	mul.w	r2, r1, r2
 800e130:	1a9b      	subs	r3, r3, r2
 800e132:	2b00      	cmp	r3, #0
 800e134:	f040 809d 	bne.w	800e272 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	69db      	ldr	r3, [r3, #28]
 800e13c:	1c5a      	adds	r2, r3, #1
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	699b      	ldr	r3, [r3, #24]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d10b      	bne.n	800e162 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	095b      	lsrs	r3, r3, #5
 800e14e:	68fa      	ldr	r2, [r7, #12]
 800e150:	8912      	ldrh	r2, [r2, #8]
 800e152:	4293      	cmp	r3, r2
 800e154:	f0c0 808d 	bcc.w	800e272 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2200      	movs	r2, #0
 800e15c:	61da      	str	r2, [r3, #28]
 800e15e:	2304      	movs	r3, #4
 800e160:	e09a      	b.n	800e298 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	899b      	ldrh	r3, [r3, #12]
 800e166:	461a      	mov	r2, r3
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e16e:	68fa      	ldr	r2, [r7, #12]
 800e170:	8952      	ldrh	r2, [r2, #10]
 800e172:	3a01      	subs	r2, #1
 800e174:	4013      	ands	r3, r2
 800e176:	2b00      	cmp	r3, #0
 800e178:	d17b      	bne.n	800e272 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e17a:	687a      	ldr	r2, [r7, #4]
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	699b      	ldr	r3, [r3, #24]
 800e180:	4619      	mov	r1, r3
 800e182:	4610      	mov	r0, r2
 800e184:	f7ff fc0b 	bl	800d99e <get_fat>
 800e188:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	2b01      	cmp	r3, #1
 800e18e:	d801      	bhi.n	800e194 <dir_next+0xa0>
 800e190:	2302      	movs	r3, #2
 800e192:	e081      	b.n	800e298 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e194:	697b      	ldr	r3, [r7, #20]
 800e196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e19a:	d101      	bne.n	800e1a0 <dir_next+0xac>
 800e19c:	2301      	movs	r3, #1
 800e19e:	e07b      	b.n	800e298 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	6a1b      	ldr	r3, [r3, #32]
 800e1a4:	697a      	ldr	r2, [r7, #20]
 800e1a6:	429a      	cmp	r2, r3
 800e1a8:	d359      	bcc.n	800e25e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d104      	bne.n	800e1ba <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	61da      	str	r2, [r3, #28]
 800e1b6:	2304      	movs	r3, #4
 800e1b8:	e06e      	b.n	800e298 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e1ba:	687a      	ldr	r2, [r7, #4]
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	699b      	ldr	r3, [r3, #24]
 800e1c0:	4619      	mov	r1, r3
 800e1c2:	4610      	mov	r0, r2
 800e1c4:	f7ff fe3d 	bl	800de42 <create_chain>
 800e1c8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e1ca:	697b      	ldr	r3, [r7, #20]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d101      	bne.n	800e1d4 <dir_next+0xe0>
 800e1d0:	2307      	movs	r3, #7
 800e1d2:	e061      	b.n	800e298 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e1d4:	697b      	ldr	r3, [r7, #20]
 800e1d6:	2b01      	cmp	r3, #1
 800e1d8:	d101      	bne.n	800e1de <dir_next+0xea>
 800e1da:	2302      	movs	r3, #2
 800e1dc:	e05c      	b.n	800e298 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1e4:	d101      	bne.n	800e1ea <dir_next+0xf6>
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	e056      	b.n	800e298 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e1ea:	68f8      	ldr	r0, [r7, #12]
 800e1ec:	f7ff fad6 	bl	800d79c <sync_window>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d001      	beq.n	800e1fa <dir_next+0x106>
 800e1f6:	2301      	movs	r3, #1
 800e1f8:	e04e      	b.n	800e298 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	899b      	ldrh	r3, [r3, #12]
 800e204:	461a      	mov	r2, r3
 800e206:	2100      	movs	r1, #0
 800e208:	f7ff f8cd 	bl	800d3a6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e20c:	2300      	movs	r3, #0
 800e20e:	613b      	str	r3, [r7, #16]
 800e210:	6979      	ldr	r1, [r7, #20]
 800e212:	68f8      	ldr	r0, [r7, #12]
 800e214:	f7ff fba4 	bl	800d960 <clust2sect>
 800e218:	4602      	mov	r2, r0
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	639a      	str	r2, [r3, #56]	@ 0x38
 800e21e:	e012      	b.n	800e246 <dir_next+0x152>
						fs->wflag = 1;
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	2201      	movs	r2, #1
 800e224:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e226:	68f8      	ldr	r0, [r7, #12]
 800e228:	f7ff fab8 	bl	800d79c <sync_window>
 800e22c:	4603      	mov	r3, r0
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d001      	beq.n	800e236 <dir_next+0x142>
 800e232:	2301      	movs	r3, #1
 800e234:	e030      	b.n	800e298 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e236:	693b      	ldr	r3, [r7, #16]
 800e238:	3301      	adds	r3, #1
 800e23a:	613b      	str	r3, [r7, #16]
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e240:	1c5a      	adds	r2, r3, #1
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	639a      	str	r2, [r3, #56]	@ 0x38
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	895b      	ldrh	r3, [r3, #10]
 800e24a:	461a      	mov	r2, r3
 800e24c:	693b      	ldr	r3, [r7, #16]
 800e24e:	4293      	cmp	r3, r2
 800e250:	d3e6      	bcc.n	800e220 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e256:	693b      	ldr	r3, [r7, #16]
 800e258:	1ad2      	subs	r2, r2, r3
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	697a      	ldr	r2, [r7, #20]
 800e262:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e264:	6979      	ldr	r1, [r7, #20]
 800e266:	68f8      	ldr	r0, [r7, #12]
 800e268:	f7ff fb7a 	bl	800d960 <clust2sect>
 800e26c:	4602      	mov	r2, r0
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	68ba      	ldr	r2, [r7, #8]
 800e276:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	899b      	ldrh	r3, [r3, #12]
 800e282:	461a      	mov	r2, r3
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	fbb3 f0f2 	udiv	r0, r3, r2
 800e28a:	fb00 f202 	mul.w	r2, r0, r2
 800e28e:	1a9b      	subs	r3, r3, r2
 800e290:	18ca      	adds	r2, r1, r3
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e296:	2300      	movs	r3, #0
}
 800e298:	4618      	mov	r0, r3
 800e29a:	3718      	adds	r7, #24
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}

0800e2a0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b086      	sub	sp, #24
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
 800e2a8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e2b0:	2100      	movs	r1, #0
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	f7ff fe95 	bl	800dfe2 <dir_sdi>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e2bc:	7dfb      	ldrb	r3, [r7, #23]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d12b      	bne.n	800e31a <dir_alloc+0x7a>
		n = 0;
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	69db      	ldr	r3, [r3, #28]
 800e2ca:	4619      	mov	r1, r3
 800e2cc:	68f8      	ldr	r0, [r7, #12]
 800e2ce:	f7ff faa9 	bl	800d824 <move_window>
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e2d6:	7dfb      	ldrb	r3, [r7, #23]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d11d      	bne.n	800e318 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	6a1b      	ldr	r3, [r3, #32]
 800e2e0:	781b      	ldrb	r3, [r3, #0]
 800e2e2:	2be5      	cmp	r3, #229	@ 0xe5
 800e2e4:	d004      	beq.n	800e2f0 <dir_alloc+0x50>
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	6a1b      	ldr	r3, [r3, #32]
 800e2ea:	781b      	ldrb	r3, [r3, #0]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d107      	bne.n	800e300 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e2f0:	693b      	ldr	r3, [r7, #16]
 800e2f2:	3301      	adds	r3, #1
 800e2f4:	613b      	str	r3, [r7, #16]
 800e2f6:	693a      	ldr	r2, [r7, #16]
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	429a      	cmp	r2, r3
 800e2fc:	d102      	bne.n	800e304 <dir_alloc+0x64>
 800e2fe:	e00c      	b.n	800e31a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e300:	2300      	movs	r3, #0
 800e302:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e304:	2101      	movs	r1, #1
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f7ff fef4 	bl	800e0f4 <dir_next>
 800e30c:	4603      	mov	r3, r0
 800e30e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e310:	7dfb      	ldrb	r3, [r7, #23]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d0d7      	beq.n	800e2c6 <dir_alloc+0x26>
 800e316:	e000      	b.n	800e31a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e318:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e31a:	7dfb      	ldrb	r3, [r7, #23]
 800e31c:	2b04      	cmp	r3, #4
 800e31e:	d101      	bne.n	800e324 <dir_alloc+0x84>
 800e320:	2307      	movs	r3, #7
 800e322:	75fb      	strb	r3, [r7, #23]
	return res;
 800e324:	7dfb      	ldrb	r3, [r7, #23]
}
 800e326:	4618      	mov	r0, r3
 800e328:	3718      	adds	r7, #24
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}

0800e32e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e32e:	b580      	push	{r7, lr}
 800e330:	b084      	sub	sp, #16
 800e332:	af00      	add	r7, sp, #0
 800e334:	6078      	str	r0, [r7, #4]
 800e336:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	331a      	adds	r3, #26
 800e33c:	4618      	mov	r0, r3
 800e33e:	f7fe ff8f 	bl	800d260 <ld_word>
 800e342:	4603      	mov	r3, r0
 800e344:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	781b      	ldrb	r3, [r3, #0]
 800e34a:	2b03      	cmp	r3, #3
 800e34c:	d109      	bne.n	800e362 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	3314      	adds	r3, #20
 800e352:	4618      	mov	r0, r3
 800e354:	f7fe ff84 	bl	800d260 <ld_word>
 800e358:	4603      	mov	r3, r0
 800e35a:	041b      	lsls	r3, r3, #16
 800e35c:	68fa      	ldr	r2, [r7, #12]
 800e35e:	4313      	orrs	r3, r2
 800e360:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e362:	68fb      	ldr	r3, [r7, #12]
}
 800e364:	4618      	mov	r0, r3
 800e366:	3710      	adds	r7, #16
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}

0800e36c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b084      	sub	sp, #16
 800e370:	af00      	add	r7, sp, #0
 800e372:	60f8      	str	r0, [r7, #12]
 800e374:	60b9      	str	r1, [r7, #8]
 800e376:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	331a      	adds	r3, #26
 800e37c:	687a      	ldr	r2, [r7, #4]
 800e37e:	b292      	uxth	r2, r2
 800e380:	4611      	mov	r1, r2
 800e382:	4618      	mov	r0, r3
 800e384:	f7fe ffa7 	bl	800d2d6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	781b      	ldrb	r3, [r3, #0]
 800e38c:	2b03      	cmp	r3, #3
 800e38e:	d109      	bne.n	800e3a4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e390:	68bb      	ldr	r3, [r7, #8]
 800e392:	f103 0214 	add.w	r2, r3, #20
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	0c1b      	lsrs	r3, r3, #16
 800e39a:	b29b      	uxth	r3, r3
 800e39c:	4619      	mov	r1, r3
 800e39e:	4610      	mov	r0, r2
 800e3a0:	f7fe ff99 	bl	800d2d6 <st_word>
	}
}
 800e3a4:	bf00      	nop
 800e3a6:	3710      	adds	r7, #16
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bd80      	pop	{r7, pc}

0800e3ac <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e3ac:	b590      	push	{r4, r7, lr}
 800e3ae:	b087      	sub	sp, #28
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
 800e3b4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	331a      	adds	r3, #26
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	f7fe ff50 	bl	800d260 <ld_word>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d001      	beq.n	800e3ca <cmp_lfn+0x1e>
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	e059      	b.n	800e47e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	781b      	ldrb	r3, [r3, #0]
 800e3ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e3d2:	1e5a      	subs	r2, r3, #1
 800e3d4:	4613      	mov	r3, r2
 800e3d6:	005b      	lsls	r3, r3, #1
 800e3d8:	4413      	add	r3, r2
 800e3da:	009b      	lsls	r3, r3, #2
 800e3dc:	4413      	add	r3, r2
 800e3de:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	81fb      	strh	r3, [r7, #14]
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	613b      	str	r3, [r7, #16]
 800e3e8:	e033      	b.n	800e452 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e3ea:	4a27      	ldr	r2, [pc, #156]	@ (800e488 <cmp_lfn+0xdc>)
 800e3ec:	693b      	ldr	r3, [r7, #16]
 800e3ee:	4413      	add	r3, r2
 800e3f0:	781b      	ldrb	r3, [r3, #0]
 800e3f2:	461a      	mov	r2, r3
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	4413      	add	r3, r2
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	f7fe ff31 	bl	800d260 <ld_word>
 800e3fe:	4603      	mov	r3, r0
 800e400:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e402:	89fb      	ldrh	r3, [r7, #14]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d01a      	beq.n	800e43e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e408:	697b      	ldr	r3, [r7, #20]
 800e40a:	2bfe      	cmp	r3, #254	@ 0xfe
 800e40c:	d812      	bhi.n	800e434 <cmp_lfn+0x88>
 800e40e:	89bb      	ldrh	r3, [r7, #12]
 800e410:	4618      	mov	r0, r3
 800e412:	f002 f83d 	bl	8010490 <ff_wtoupper>
 800e416:	4603      	mov	r3, r0
 800e418:	461c      	mov	r4, r3
 800e41a:	697b      	ldr	r3, [r7, #20]
 800e41c:	1c5a      	adds	r2, r3, #1
 800e41e:	617a      	str	r2, [r7, #20]
 800e420:	005b      	lsls	r3, r3, #1
 800e422:	687a      	ldr	r2, [r7, #4]
 800e424:	4413      	add	r3, r2
 800e426:	881b      	ldrh	r3, [r3, #0]
 800e428:	4618      	mov	r0, r3
 800e42a:	f002 f831 	bl	8010490 <ff_wtoupper>
 800e42e:	4603      	mov	r3, r0
 800e430:	429c      	cmp	r4, r3
 800e432:	d001      	beq.n	800e438 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e434:	2300      	movs	r3, #0
 800e436:	e022      	b.n	800e47e <cmp_lfn+0xd2>
			}
			wc = uc;
 800e438:	89bb      	ldrh	r3, [r7, #12]
 800e43a:	81fb      	strh	r3, [r7, #14]
 800e43c:	e006      	b.n	800e44c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e43e:	89bb      	ldrh	r3, [r7, #12]
 800e440:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e444:	4293      	cmp	r3, r2
 800e446:	d001      	beq.n	800e44c <cmp_lfn+0xa0>
 800e448:	2300      	movs	r3, #0
 800e44a:	e018      	b.n	800e47e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e44c:	693b      	ldr	r3, [r7, #16]
 800e44e:	3301      	adds	r3, #1
 800e450:	613b      	str	r3, [r7, #16]
 800e452:	693b      	ldr	r3, [r7, #16]
 800e454:	2b0c      	cmp	r3, #12
 800e456:	d9c8      	bls.n	800e3ea <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	781b      	ldrb	r3, [r3, #0]
 800e45c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e460:	2b00      	cmp	r3, #0
 800e462:	d00b      	beq.n	800e47c <cmp_lfn+0xd0>
 800e464:	89fb      	ldrh	r3, [r7, #14]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d008      	beq.n	800e47c <cmp_lfn+0xd0>
 800e46a:	697b      	ldr	r3, [r7, #20]
 800e46c:	005b      	lsls	r3, r3, #1
 800e46e:	687a      	ldr	r2, [r7, #4]
 800e470:	4413      	add	r3, r2
 800e472:	881b      	ldrh	r3, [r3, #0]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d001      	beq.n	800e47c <cmp_lfn+0xd0>
 800e478:	2300      	movs	r3, #0
 800e47a:	e000      	b.n	800e47e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e47c:	2301      	movs	r3, #1
}
 800e47e:	4618      	mov	r0, r3
 800e480:	371c      	adds	r7, #28
 800e482:	46bd      	mov	sp, r7
 800e484:	bd90      	pop	{r4, r7, pc}
 800e486:	bf00      	nop
 800e488:	08017088 	.word	0x08017088

0800e48c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b088      	sub	sp, #32
 800e490:	af00      	add	r7, sp, #0
 800e492:	60f8      	str	r0, [r7, #12]
 800e494:	60b9      	str	r1, [r7, #8]
 800e496:	4611      	mov	r1, r2
 800e498:	461a      	mov	r2, r3
 800e49a:	460b      	mov	r3, r1
 800e49c:	71fb      	strb	r3, [r7, #7]
 800e49e:	4613      	mov	r3, r2
 800e4a0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	330d      	adds	r3, #13
 800e4a6:	79ba      	ldrb	r2, [r7, #6]
 800e4a8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	330b      	adds	r3, #11
 800e4ae:	220f      	movs	r2, #15
 800e4b0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	330c      	adds	r3, #12
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e4ba:	68bb      	ldr	r3, [r7, #8]
 800e4bc:	331a      	adds	r3, #26
 800e4be:	2100      	movs	r1, #0
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f7fe ff08 	bl	800d2d6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e4c6:	79fb      	ldrb	r3, [r7, #7]
 800e4c8:	1e5a      	subs	r2, r3, #1
 800e4ca:	4613      	mov	r3, r2
 800e4cc:	005b      	lsls	r3, r3, #1
 800e4ce:	4413      	add	r3, r2
 800e4d0:	009b      	lsls	r3, r3, #2
 800e4d2:	4413      	add	r3, r2
 800e4d4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	82fb      	strh	r3, [r7, #22]
 800e4da:	2300      	movs	r3, #0
 800e4dc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e4de:	8afb      	ldrh	r3, [r7, #22]
 800e4e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e4e4:	4293      	cmp	r3, r2
 800e4e6:	d007      	beq.n	800e4f8 <put_lfn+0x6c>
 800e4e8:	69fb      	ldr	r3, [r7, #28]
 800e4ea:	1c5a      	adds	r2, r3, #1
 800e4ec:	61fa      	str	r2, [r7, #28]
 800e4ee:	005b      	lsls	r3, r3, #1
 800e4f0:	68fa      	ldr	r2, [r7, #12]
 800e4f2:	4413      	add	r3, r2
 800e4f4:	881b      	ldrh	r3, [r3, #0]
 800e4f6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e4f8:	4a17      	ldr	r2, [pc, #92]	@ (800e558 <put_lfn+0xcc>)
 800e4fa:	69bb      	ldr	r3, [r7, #24]
 800e4fc:	4413      	add	r3, r2
 800e4fe:	781b      	ldrb	r3, [r3, #0]
 800e500:	461a      	mov	r2, r3
 800e502:	68bb      	ldr	r3, [r7, #8]
 800e504:	4413      	add	r3, r2
 800e506:	8afa      	ldrh	r2, [r7, #22]
 800e508:	4611      	mov	r1, r2
 800e50a:	4618      	mov	r0, r3
 800e50c:	f7fe fee3 	bl	800d2d6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e510:	8afb      	ldrh	r3, [r7, #22]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d102      	bne.n	800e51c <put_lfn+0x90>
 800e516:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e51a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e51c:	69bb      	ldr	r3, [r7, #24]
 800e51e:	3301      	adds	r3, #1
 800e520:	61bb      	str	r3, [r7, #24]
 800e522:	69bb      	ldr	r3, [r7, #24]
 800e524:	2b0c      	cmp	r3, #12
 800e526:	d9da      	bls.n	800e4de <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e528:	8afb      	ldrh	r3, [r7, #22]
 800e52a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e52e:	4293      	cmp	r3, r2
 800e530:	d006      	beq.n	800e540 <put_lfn+0xb4>
 800e532:	69fb      	ldr	r3, [r7, #28]
 800e534:	005b      	lsls	r3, r3, #1
 800e536:	68fa      	ldr	r2, [r7, #12]
 800e538:	4413      	add	r3, r2
 800e53a:	881b      	ldrh	r3, [r3, #0]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d103      	bne.n	800e548 <put_lfn+0xbc>
 800e540:	79fb      	ldrb	r3, [r7, #7]
 800e542:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e546:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	79fa      	ldrb	r2, [r7, #7]
 800e54c:	701a      	strb	r2, [r3, #0]
}
 800e54e:	bf00      	nop
 800e550:	3720      	adds	r7, #32
 800e552:	46bd      	mov	sp, r7
 800e554:	bd80      	pop	{r7, pc}
 800e556:	bf00      	nop
 800e558:	08017088 	.word	0x08017088

0800e55c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b08c      	sub	sp, #48	@ 0x30
 800e560:	af00      	add	r7, sp, #0
 800e562:	60f8      	str	r0, [r7, #12]
 800e564:	60b9      	str	r1, [r7, #8]
 800e566:	607a      	str	r2, [r7, #4]
 800e568:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e56a:	220b      	movs	r2, #11
 800e56c:	68b9      	ldr	r1, [r7, #8]
 800e56e:	68f8      	ldr	r0, [r7, #12]
 800e570:	f7fe fef8 	bl	800d364 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	2b05      	cmp	r3, #5
 800e578:	d92b      	bls.n	800e5d2 <gen_numname+0x76>
		sr = seq;
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e57e:	e022      	b.n	800e5c6 <gen_numname+0x6a>
			wc = *lfn++;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	1c9a      	adds	r2, r3, #2
 800e584:	607a      	str	r2, [r7, #4]
 800e586:	881b      	ldrh	r3, [r3, #0]
 800e588:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800e58a:	2300      	movs	r3, #0
 800e58c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e58e:	e017      	b.n	800e5c0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800e590:	69fb      	ldr	r3, [r7, #28]
 800e592:	005a      	lsls	r2, r3, #1
 800e594:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e596:	f003 0301 	and.w	r3, r3, #1
 800e59a:	4413      	add	r3, r2
 800e59c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e59e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e5a0:	085b      	lsrs	r3, r3, #1
 800e5a2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e5a4:	69fb      	ldr	r3, [r7, #28]
 800e5a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d005      	beq.n	800e5ba <gen_numname+0x5e>
 800e5ae:	69fb      	ldr	r3, [r7, #28]
 800e5b0:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800e5b4:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800e5b8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e5ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5bc:	3301      	adds	r3, #1
 800e5be:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e5c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5c2:	2b0f      	cmp	r3, #15
 800e5c4:	d9e4      	bls.n	800e590 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	881b      	ldrh	r3, [r3, #0]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d1d8      	bne.n	800e580 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e5ce:	69fb      	ldr	r3, [r7, #28]
 800e5d0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e5d2:	2307      	movs	r3, #7
 800e5d4:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	b2db      	uxtb	r3, r3
 800e5da:	f003 030f 	and.w	r3, r3, #15
 800e5de:	b2db      	uxtb	r3, r3
 800e5e0:	3330      	adds	r3, #48	@ 0x30
 800e5e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800e5e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e5ea:	2b39      	cmp	r3, #57	@ 0x39
 800e5ec:	d904      	bls.n	800e5f8 <gen_numname+0x9c>
 800e5ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e5f2:	3307      	adds	r3, #7
 800e5f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800e5f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5fa:	1e5a      	subs	r2, r3, #1
 800e5fc:	62ba      	str	r2, [r7, #40]	@ 0x28
 800e5fe:	3330      	adds	r3, #48	@ 0x30
 800e600:	443b      	add	r3, r7
 800e602:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800e606:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	091b      	lsrs	r3, r3, #4
 800e60e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d1df      	bne.n	800e5d6 <gen_numname+0x7a>
	ns[i] = '~';
 800e616:	f107 0214 	add.w	r2, r7, #20
 800e61a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e61c:	4413      	add	r3, r2
 800e61e:	227e      	movs	r2, #126	@ 0x7e
 800e620:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e622:	2300      	movs	r3, #0
 800e624:	627b      	str	r3, [r7, #36]	@ 0x24
 800e626:	e002      	b.n	800e62e <gen_numname+0xd2>
 800e628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e62a:	3301      	adds	r3, #1
 800e62c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e62e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e632:	429a      	cmp	r2, r3
 800e634:	d205      	bcs.n	800e642 <gen_numname+0xe6>
 800e636:	68fa      	ldr	r2, [r7, #12]
 800e638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e63a:	4413      	add	r3, r2
 800e63c:	781b      	ldrb	r3, [r3, #0]
 800e63e:	2b20      	cmp	r3, #32
 800e640:	d1f2      	bne.n	800e628 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e644:	2b07      	cmp	r3, #7
 800e646:	d807      	bhi.n	800e658 <gen_numname+0xfc>
 800e648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e64a:	1c5a      	adds	r2, r3, #1
 800e64c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800e64e:	3330      	adds	r3, #48	@ 0x30
 800e650:	443b      	add	r3, r7
 800e652:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e656:	e000      	b.n	800e65a <gen_numname+0xfe>
 800e658:	2120      	movs	r1, #32
 800e65a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e65c:	1c5a      	adds	r2, r3, #1
 800e65e:	627a      	str	r2, [r7, #36]	@ 0x24
 800e660:	68fa      	ldr	r2, [r7, #12]
 800e662:	4413      	add	r3, r2
 800e664:	460a      	mov	r2, r1
 800e666:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e66a:	2b07      	cmp	r3, #7
 800e66c:	d9e9      	bls.n	800e642 <gen_numname+0xe6>
}
 800e66e:	bf00      	nop
 800e670:	bf00      	nop
 800e672:	3730      	adds	r7, #48	@ 0x30
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}

0800e678 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e678:	b480      	push	{r7}
 800e67a:	b085      	sub	sp, #20
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e680:	2300      	movs	r3, #0
 800e682:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e684:	230b      	movs	r3, #11
 800e686:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e688:	7bfb      	ldrb	r3, [r7, #15]
 800e68a:	b2da      	uxtb	r2, r3
 800e68c:	0852      	lsrs	r2, r2, #1
 800e68e:	01db      	lsls	r3, r3, #7
 800e690:	4313      	orrs	r3, r2
 800e692:	b2da      	uxtb	r2, r3
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	1c59      	adds	r1, r3, #1
 800e698:	6079      	str	r1, [r7, #4]
 800e69a:	781b      	ldrb	r3, [r3, #0]
 800e69c:	4413      	add	r3, r2
 800e69e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	3b01      	subs	r3, #1
 800e6a4:	60bb      	str	r3, [r7, #8]
 800e6a6:	68bb      	ldr	r3, [r7, #8]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d1ed      	bne.n	800e688 <sum_sfn+0x10>
	return sum;
 800e6ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3714      	adds	r7, #20
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b8:	4770      	bx	lr

0800e6ba <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e6ba:	b580      	push	{r7, lr}
 800e6bc:	b086      	sub	sp, #24
 800e6be:	af00      	add	r7, sp, #0
 800e6c0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e6c8:	2100      	movs	r1, #0
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	f7ff fc89 	bl	800dfe2 <dir_sdi>
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e6d4:	7dfb      	ldrb	r3, [r7, #23]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d001      	beq.n	800e6de <dir_find+0x24>
 800e6da:	7dfb      	ldrb	r3, [r7, #23]
 800e6dc:	e0a9      	b.n	800e832 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e6de:	23ff      	movs	r3, #255	@ 0xff
 800e6e0:	753b      	strb	r3, [r7, #20]
 800e6e2:	7d3b      	ldrb	r3, [r7, #20]
 800e6e4:	757b      	strb	r3, [r7, #21]
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f04f 32ff 	mov.w	r2, #4294967295
 800e6ec:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	69db      	ldr	r3, [r3, #28]
 800e6f2:	4619      	mov	r1, r3
 800e6f4:	6938      	ldr	r0, [r7, #16]
 800e6f6:	f7ff f895 	bl	800d824 <move_window>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e6fe:	7dfb      	ldrb	r3, [r7, #23]
 800e700:	2b00      	cmp	r3, #0
 800e702:	f040 8090 	bne.w	800e826 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	6a1b      	ldr	r3, [r3, #32]
 800e70a:	781b      	ldrb	r3, [r3, #0]
 800e70c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e70e:	7dbb      	ldrb	r3, [r7, #22]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d102      	bne.n	800e71a <dir_find+0x60>
 800e714:	2304      	movs	r3, #4
 800e716:	75fb      	strb	r3, [r7, #23]
 800e718:	e08a      	b.n	800e830 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	6a1b      	ldr	r3, [r3, #32]
 800e71e:	330b      	adds	r3, #11
 800e720:	781b      	ldrb	r3, [r3, #0]
 800e722:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e726:	73fb      	strb	r3, [r7, #15]
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	7bfa      	ldrb	r2, [r7, #15]
 800e72c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e72e:	7dbb      	ldrb	r3, [r7, #22]
 800e730:	2be5      	cmp	r3, #229	@ 0xe5
 800e732:	d007      	beq.n	800e744 <dir_find+0x8a>
 800e734:	7bfb      	ldrb	r3, [r7, #15]
 800e736:	f003 0308 	and.w	r3, r3, #8
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d009      	beq.n	800e752 <dir_find+0x98>
 800e73e:	7bfb      	ldrb	r3, [r7, #15]
 800e740:	2b0f      	cmp	r3, #15
 800e742:	d006      	beq.n	800e752 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e744:	23ff      	movs	r3, #255	@ 0xff
 800e746:	757b      	strb	r3, [r7, #21]
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f04f 32ff 	mov.w	r2, #4294967295
 800e74e:	631a      	str	r2, [r3, #48]	@ 0x30
 800e750:	e05e      	b.n	800e810 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e752:	7bfb      	ldrb	r3, [r7, #15]
 800e754:	2b0f      	cmp	r3, #15
 800e756:	d136      	bne.n	800e7c6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e75e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e762:	2b00      	cmp	r3, #0
 800e764:	d154      	bne.n	800e810 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e766:	7dbb      	ldrb	r3, [r7, #22]
 800e768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d00d      	beq.n	800e78c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	6a1b      	ldr	r3, [r3, #32]
 800e774:	7b5b      	ldrb	r3, [r3, #13]
 800e776:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e778:	7dbb      	ldrb	r3, [r7, #22]
 800e77a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e77e:	75bb      	strb	r3, [r7, #22]
 800e780:	7dbb      	ldrb	r3, [r7, #22]
 800e782:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	695a      	ldr	r2, [r3, #20]
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e78c:	7dba      	ldrb	r2, [r7, #22]
 800e78e:	7d7b      	ldrb	r3, [r7, #21]
 800e790:	429a      	cmp	r2, r3
 800e792:	d115      	bne.n	800e7c0 <dir_find+0x106>
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	6a1b      	ldr	r3, [r3, #32]
 800e798:	330d      	adds	r3, #13
 800e79a:	781b      	ldrb	r3, [r3, #0]
 800e79c:	7d3a      	ldrb	r2, [r7, #20]
 800e79e:	429a      	cmp	r2, r3
 800e7a0:	d10e      	bne.n	800e7c0 <dir_find+0x106>
 800e7a2:	693b      	ldr	r3, [r7, #16]
 800e7a4:	691a      	ldr	r2, [r3, #16]
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	6a1b      	ldr	r3, [r3, #32]
 800e7aa:	4619      	mov	r1, r3
 800e7ac:	4610      	mov	r0, r2
 800e7ae:	f7ff fdfd 	bl	800e3ac <cmp_lfn>
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d003      	beq.n	800e7c0 <dir_find+0x106>
 800e7b8:	7d7b      	ldrb	r3, [r7, #21]
 800e7ba:	3b01      	subs	r3, #1
 800e7bc:	b2db      	uxtb	r3, r3
 800e7be:	e000      	b.n	800e7c2 <dir_find+0x108>
 800e7c0:	23ff      	movs	r3, #255	@ 0xff
 800e7c2:	757b      	strb	r3, [r7, #21]
 800e7c4:	e024      	b.n	800e810 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e7c6:	7d7b      	ldrb	r3, [r7, #21]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d109      	bne.n	800e7e0 <dir_find+0x126>
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	6a1b      	ldr	r3, [r3, #32]
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	f7ff ff51 	bl	800e678 <sum_sfn>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	461a      	mov	r2, r3
 800e7da:	7d3b      	ldrb	r3, [r7, #20]
 800e7dc:	4293      	cmp	r3, r2
 800e7de:	d024      	beq.n	800e82a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e7e6:	f003 0301 	and.w	r3, r3, #1
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d10a      	bne.n	800e804 <dir_find+0x14a>
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	6a18      	ldr	r0, [r3, #32]
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	3324      	adds	r3, #36	@ 0x24
 800e7f6:	220b      	movs	r2, #11
 800e7f8:	4619      	mov	r1, r3
 800e7fa:	f7fe fdef 	bl	800d3dc <mem_cmp>
 800e7fe:	4603      	mov	r3, r0
 800e800:	2b00      	cmp	r3, #0
 800e802:	d014      	beq.n	800e82e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e804:	23ff      	movs	r3, #255	@ 0xff
 800e806:	757b      	strb	r3, [r7, #21]
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f04f 32ff 	mov.w	r2, #4294967295
 800e80e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e810:	2100      	movs	r1, #0
 800e812:	6878      	ldr	r0, [r7, #4]
 800e814:	f7ff fc6e 	bl	800e0f4 <dir_next>
 800e818:	4603      	mov	r3, r0
 800e81a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e81c:	7dfb      	ldrb	r3, [r7, #23]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	f43f af65 	beq.w	800e6ee <dir_find+0x34>
 800e824:	e004      	b.n	800e830 <dir_find+0x176>
		if (res != FR_OK) break;
 800e826:	bf00      	nop
 800e828:	e002      	b.n	800e830 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e82a:	bf00      	nop
 800e82c:	e000      	b.n	800e830 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e82e:	bf00      	nop

	return res;
 800e830:	7dfb      	ldrb	r3, [r7, #23]
}
 800e832:	4618      	mov	r0, r3
 800e834:	3718      	adds	r7, #24
 800e836:	46bd      	mov	sp, r7
 800e838:	bd80      	pop	{r7, pc}
	...

0800e83c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b08c      	sub	sp, #48	@ 0x30
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e850:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800e854:	2b00      	cmp	r3, #0
 800e856:	d001      	beq.n	800e85c <dir_register+0x20>
 800e858:	2306      	movs	r3, #6
 800e85a:	e0e0      	b.n	800ea1e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e85c:	2300      	movs	r3, #0
 800e85e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e860:	e002      	b.n	800e868 <dir_register+0x2c>
 800e862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e864:	3301      	adds	r3, #1
 800e866:	627b      	str	r3, [r7, #36]	@ 0x24
 800e868:	69fb      	ldr	r3, [r7, #28]
 800e86a:	691a      	ldr	r2, [r3, #16]
 800e86c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e86e:	005b      	lsls	r3, r3, #1
 800e870:	4413      	add	r3, r2
 800e872:	881b      	ldrh	r3, [r3, #0]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d1f4      	bne.n	800e862 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800e87e:	f107 030c 	add.w	r3, r7, #12
 800e882:	220c      	movs	r2, #12
 800e884:	4618      	mov	r0, r3
 800e886:	f7fe fd6d 	bl	800d364 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e88a:	7dfb      	ldrb	r3, [r7, #23]
 800e88c:	f003 0301 	and.w	r3, r3, #1
 800e890:	2b00      	cmp	r3, #0
 800e892:	d032      	beq.n	800e8fa <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2240      	movs	r2, #64	@ 0x40
 800e898:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800e89c:	2301      	movs	r3, #1
 800e89e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e8a0:	e016      	b.n	800e8d0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800e8a8:	69fb      	ldr	r3, [r7, #28]
 800e8aa:	691a      	ldr	r2, [r3, #16]
 800e8ac:	f107 010c 	add.w	r1, r7, #12
 800e8b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8b2:	f7ff fe53 	bl	800e55c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e8b6:	6878      	ldr	r0, [r7, #4]
 800e8b8:	f7ff feff 	bl	800e6ba <dir_find>
 800e8bc:	4603      	mov	r3, r0
 800e8be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800e8c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d106      	bne.n	800e8d8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800e8ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8cc:	3301      	adds	r3, #1
 800e8ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e8d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8d2:	2b63      	cmp	r3, #99	@ 0x63
 800e8d4:	d9e5      	bls.n	800e8a2 <dir_register+0x66>
 800e8d6:	e000      	b.n	800e8da <dir_register+0x9e>
			if (res != FR_OK) break;
 800e8d8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e8da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8dc:	2b64      	cmp	r3, #100	@ 0x64
 800e8de:	d101      	bne.n	800e8e4 <dir_register+0xa8>
 800e8e0:	2307      	movs	r3, #7
 800e8e2:	e09c      	b.n	800ea1e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e8e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e8e8:	2b04      	cmp	r3, #4
 800e8ea:	d002      	beq.n	800e8f2 <dir_register+0xb6>
 800e8ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e8f0:	e095      	b.n	800ea1e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e8f2:	7dfa      	ldrb	r2, [r7, #23]
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e8fa:	7dfb      	ldrb	r3, [r7, #23]
 800e8fc:	f003 0302 	and.w	r3, r3, #2
 800e900:	2b00      	cmp	r3, #0
 800e902:	d007      	beq.n	800e914 <dir_register+0xd8>
 800e904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e906:	330c      	adds	r3, #12
 800e908:	4a47      	ldr	r2, [pc, #284]	@ (800ea28 <dir_register+0x1ec>)
 800e90a:	fba2 2303 	umull	r2, r3, r2, r3
 800e90e:	089b      	lsrs	r3, r3, #2
 800e910:	3301      	adds	r3, #1
 800e912:	e000      	b.n	800e916 <dir_register+0xda>
 800e914:	2301      	movs	r3, #1
 800e916:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e918:	6a39      	ldr	r1, [r7, #32]
 800e91a:	6878      	ldr	r0, [r7, #4]
 800e91c:	f7ff fcc0 	bl	800e2a0 <dir_alloc>
 800e920:	4603      	mov	r3, r0
 800e922:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e926:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d148      	bne.n	800e9c0 <dir_register+0x184>
 800e92e:	6a3b      	ldr	r3, [r7, #32]
 800e930:	3b01      	subs	r3, #1
 800e932:	623b      	str	r3, [r7, #32]
 800e934:	6a3b      	ldr	r3, [r7, #32]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d042      	beq.n	800e9c0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	695a      	ldr	r2, [r3, #20]
 800e93e:	6a3b      	ldr	r3, [r7, #32]
 800e940:	015b      	lsls	r3, r3, #5
 800e942:	1ad3      	subs	r3, r2, r3
 800e944:	4619      	mov	r1, r3
 800e946:	6878      	ldr	r0, [r7, #4]
 800e948:	f7ff fb4b 	bl	800dfe2 <dir_sdi>
 800e94c:	4603      	mov	r3, r0
 800e94e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800e952:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e956:	2b00      	cmp	r3, #0
 800e958:	d132      	bne.n	800e9c0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	3324      	adds	r3, #36	@ 0x24
 800e95e:	4618      	mov	r0, r3
 800e960:	f7ff fe8a 	bl	800e678 <sum_sfn>
 800e964:	4603      	mov	r3, r0
 800e966:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	69db      	ldr	r3, [r3, #28]
 800e96c:	4619      	mov	r1, r3
 800e96e:	69f8      	ldr	r0, [r7, #28]
 800e970:	f7fe ff58 	bl	800d824 <move_window>
 800e974:	4603      	mov	r3, r0
 800e976:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800e97a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d11d      	bne.n	800e9be <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e982:	69fb      	ldr	r3, [r7, #28]
 800e984:	6918      	ldr	r0, [r3, #16]
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	6a19      	ldr	r1, [r3, #32]
 800e98a:	6a3b      	ldr	r3, [r7, #32]
 800e98c:	b2da      	uxtb	r2, r3
 800e98e:	7efb      	ldrb	r3, [r7, #27]
 800e990:	f7ff fd7c 	bl	800e48c <put_lfn>
				fs->wflag = 1;
 800e994:	69fb      	ldr	r3, [r7, #28]
 800e996:	2201      	movs	r2, #1
 800e998:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e99a:	2100      	movs	r1, #0
 800e99c:	6878      	ldr	r0, [r7, #4]
 800e99e:	f7ff fba9 	bl	800e0f4 <dir_next>
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800e9a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d107      	bne.n	800e9c0 <dir_register+0x184>
 800e9b0:	6a3b      	ldr	r3, [r7, #32]
 800e9b2:	3b01      	subs	r3, #1
 800e9b4:	623b      	str	r3, [r7, #32]
 800e9b6:	6a3b      	ldr	r3, [r7, #32]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d1d5      	bne.n	800e968 <dir_register+0x12c>
 800e9bc:	e000      	b.n	800e9c0 <dir_register+0x184>
				if (res != FR_OK) break;
 800e9be:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e9c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d128      	bne.n	800ea1a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	69db      	ldr	r3, [r3, #28]
 800e9cc:	4619      	mov	r1, r3
 800e9ce:	69f8      	ldr	r0, [r7, #28]
 800e9d0:	f7fe ff28 	bl	800d824 <move_window>
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800e9da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d11b      	bne.n	800ea1a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	6a1b      	ldr	r3, [r3, #32]
 800e9e6:	2220      	movs	r2, #32
 800e9e8:	2100      	movs	r1, #0
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	f7fe fcdb 	bl	800d3a6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	6a18      	ldr	r0, [r3, #32]
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	3324      	adds	r3, #36	@ 0x24
 800e9f8:	220b      	movs	r2, #11
 800e9fa:	4619      	mov	r1, r3
 800e9fc:	f7fe fcb2 	bl	800d364 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	6a1b      	ldr	r3, [r3, #32]
 800ea0a:	330c      	adds	r3, #12
 800ea0c:	f002 0218 	and.w	r2, r2, #24
 800ea10:	b2d2      	uxtb	r2, r2
 800ea12:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800ea14:	69fb      	ldr	r3, [r7, #28]
 800ea16:	2201      	movs	r2, #1
 800ea18:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ea1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800ea1e:	4618      	mov	r0, r3
 800ea20:	3730      	adds	r7, #48	@ 0x30
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd80      	pop	{r7, pc}
 800ea26:	bf00      	nop
 800ea28:	4ec4ec4f 	.word	0x4ec4ec4f

0800ea2c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b08a      	sub	sp, #40	@ 0x28
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
 800ea34:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	613b      	str	r3, [r7, #16]
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	691b      	ldr	r3, [r3, #16]
 800ea42:	60fb      	str	r3, [r7, #12]
 800ea44:	2300      	movs	r3, #0
 800ea46:	617b      	str	r3, [r7, #20]
 800ea48:	697b      	ldr	r3, [r7, #20]
 800ea4a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800ea4c:	69bb      	ldr	r3, [r7, #24]
 800ea4e:	1c5a      	adds	r2, r3, #1
 800ea50:	61ba      	str	r2, [r7, #24]
 800ea52:	693a      	ldr	r2, [r7, #16]
 800ea54:	4413      	add	r3, r2
 800ea56:	781b      	ldrb	r3, [r3, #0]
 800ea58:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800ea5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ea5c:	2b1f      	cmp	r3, #31
 800ea5e:	d940      	bls.n	800eae2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800ea60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ea62:	2b2f      	cmp	r3, #47	@ 0x2f
 800ea64:	d006      	beq.n	800ea74 <create_name+0x48>
 800ea66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ea68:	2b5c      	cmp	r3, #92	@ 0x5c
 800ea6a:	d110      	bne.n	800ea8e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ea6c:	e002      	b.n	800ea74 <create_name+0x48>
 800ea6e:	69bb      	ldr	r3, [r7, #24]
 800ea70:	3301      	adds	r3, #1
 800ea72:	61bb      	str	r3, [r7, #24]
 800ea74:	693a      	ldr	r2, [r7, #16]
 800ea76:	69bb      	ldr	r3, [r7, #24]
 800ea78:	4413      	add	r3, r2
 800ea7a:	781b      	ldrb	r3, [r3, #0]
 800ea7c:	2b2f      	cmp	r3, #47	@ 0x2f
 800ea7e:	d0f6      	beq.n	800ea6e <create_name+0x42>
 800ea80:	693a      	ldr	r2, [r7, #16]
 800ea82:	69bb      	ldr	r3, [r7, #24]
 800ea84:	4413      	add	r3, r2
 800ea86:	781b      	ldrb	r3, [r3, #0]
 800ea88:	2b5c      	cmp	r3, #92	@ 0x5c
 800ea8a:	d0f0      	beq.n	800ea6e <create_name+0x42>
			break;
 800ea8c:	e02a      	b.n	800eae4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	2bfe      	cmp	r3, #254	@ 0xfe
 800ea92:	d901      	bls.n	800ea98 <create_name+0x6c>
 800ea94:	2306      	movs	r3, #6
 800ea96:	e17d      	b.n	800ed94 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ea98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ea9a:	b2db      	uxtb	r3, r3
 800ea9c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ea9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eaa0:	2101      	movs	r1, #1
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	f001 fcb8 	bl	8010418 <ff_convert>
 800eaa8:	4603      	mov	r3, r0
 800eaaa:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800eaac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d101      	bne.n	800eab6 <create_name+0x8a>
 800eab2:	2306      	movs	r3, #6
 800eab4:	e16e      	b.n	800ed94 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800eab6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eab8:	2b7f      	cmp	r3, #127	@ 0x7f
 800eaba:	d809      	bhi.n	800ead0 <create_name+0xa4>
 800eabc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eabe:	4619      	mov	r1, r3
 800eac0:	488d      	ldr	r0, [pc, #564]	@ (800ecf8 <create_name+0x2cc>)
 800eac2:	f7fe fcb2 	bl	800d42a <chk_chr>
 800eac6:	4603      	mov	r3, r0
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d001      	beq.n	800ead0 <create_name+0xa4>
 800eacc:	2306      	movs	r3, #6
 800eace:	e161      	b.n	800ed94 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800ead0:	697b      	ldr	r3, [r7, #20]
 800ead2:	1c5a      	adds	r2, r3, #1
 800ead4:	617a      	str	r2, [r7, #20]
 800ead6:	005b      	lsls	r3, r3, #1
 800ead8:	68fa      	ldr	r2, [r7, #12]
 800eada:	4413      	add	r3, r2
 800eadc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800eade:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800eae0:	e7b4      	b.n	800ea4c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800eae2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800eae4:	693a      	ldr	r2, [r7, #16]
 800eae6:	69bb      	ldr	r3, [r7, #24]
 800eae8:	441a      	add	r2, r3
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800eaee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eaf0:	2b1f      	cmp	r3, #31
 800eaf2:	d801      	bhi.n	800eaf8 <create_name+0xcc>
 800eaf4:	2304      	movs	r3, #4
 800eaf6:	e000      	b.n	800eafa <create_name+0xce>
 800eaf8:	2300      	movs	r3, #0
 800eafa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800eafe:	e011      	b.n	800eb24 <create_name+0xf8>
		w = lfn[di - 1];
 800eb00:	697b      	ldr	r3, [r7, #20]
 800eb02:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800eb06:	3b01      	subs	r3, #1
 800eb08:	005b      	lsls	r3, r3, #1
 800eb0a:	68fa      	ldr	r2, [r7, #12]
 800eb0c:	4413      	add	r3, r2
 800eb0e:	881b      	ldrh	r3, [r3, #0]
 800eb10:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800eb12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eb14:	2b20      	cmp	r3, #32
 800eb16:	d002      	beq.n	800eb1e <create_name+0xf2>
 800eb18:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eb1a:	2b2e      	cmp	r3, #46	@ 0x2e
 800eb1c:	d106      	bne.n	800eb2c <create_name+0x100>
		di--;
 800eb1e:	697b      	ldr	r3, [r7, #20]
 800eb20:	3b01      	subs	r3, #1
 800eb22:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800eb24:	697b      	ldr	r3, [r7, #20]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d1ea      	bne.n	800eb00 <create_name+0xd4>
 800eb2a:	e000      	b.n	800eb2e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800eb2c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800eb2e:	697b      	ldr	r3, [r7, #20]
 800eb30:	005b      	lsls	r3, r3, #1
 800eb32:	68fa      	ldr	r2, [r7, #12]
 800eb34:	4413      	add	r3, r2
 800eb36:	2200      	movs	r2, #0
 800eb38:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d101      	bne.n	800eb44 <create_name+0x118>
 800eb40:	2306      	movs	r3, #6
 800eb42:	e127      	b.n	800ed94 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	3324      	adds	r3, #36	@ 0x24
 800eb48:	220b      	movs	r2, #11
 800eb4a:	2120      	movs	r1, #32
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f7fe fc2a 	bl	800d3a6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800eb52:	2300      	movs	r3, #0
 800eb54:	61bb      	str	r3, [r7, #24]
 800eb56:	e002      	b.n	800eb5e <create_name+0x132>
 800eb58:	69bb      	ldr	r3, [r7, #24]
 800eb5a:	3301      	adds	r3, #1
 800eb5c:	61bb      	str	r3, [r7, #24]
 800eb5e:	69bb      	ldr	r3, [r7, #24]
 800eb60:	005b      	lsls	r3, r3, #1
 800eb62:	68fa      	ldr	r2, [r7, #12]
 800eb64:	4413      	add	r3, r2
 800eb66:	881b      	ldrh	r3, [r3, #0]
 800eb68:	2b20      	cmp	r3, #32
 800eb6a:	d0f5      	beq.n	800eb58 <create_name+0x12c>
 800eb6c:	69bb      	ldr	r3, [r7, #24]
 800eb6e:	005b      	lsls	r3, r3, #1
 800eb70:	68fa      	ldr	r2, [r7, #12]
 800eb72:	4413      	add	r3, r2
 800eb74:	881b      	ldrh	r3, [r3, #0]
 800eb76:	2b2e      	cmp	r3, #46	@ 0x2e
 800eb78:	d0ee      	beq.n	800eb58 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800eb7a:	69bb      	ldr	r3, [r7, #24]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d009      	beq.n	800eb94 <create_name+0x168>
 800eb80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eb84:	f043 0303 	orr.w	r3, r3, #3
 800eb88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800eb8c:	e002      	b.n	800eb94 <create_name+0x168>
 800eb8e:	697b      	ldr	r3, [r7, #20]
 800eb90:	3b01      	subs	r3, #1
 800eb92:	617b      	str	r3, [r7, #20]
 800eb94:	697b      	ldr	r3, [r7, #20]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d009      	beq.n	800ebae <create_name+0x182>
 800eb9a:	697b      	ldr	r3, [r7, #20]
 800eb9c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800eba0:	3b01      	subs	r3, #1
 800eba2:	005b      	lsls	r3, r3, #1
 800eba4:	68fa      	ldr	r2, [r7, #12]
 800eba6:	4413      	add	r3, r2
 800eba8:	881b      	ldrh	r3, [r3, #0]
 800ebaa:	2b2e      	cmp	r3, #46	@ 0x2e
 800ebac:	d1ef      	bne.n	800eb8e <create_name+0x162>

	i = b = 0; ni = 8;
 800ebae:	2300      	movs	r3, #0
 800ebb0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	623b      	str	r3, [r7, #32]
 800ebb8:	2308      	movs	r3, #8
 800ebba:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800ebbc:	69bb      	ldr	r3, [r7, #24]
 800ebbe:	1c5a      	adds	r2, r3, #1
 800ebc0:	61ba      	str	r2, [r7, #24]
 800ebc2:	005b      	lsls	r3, r3, #1
 800ebc4:	68fa      	ldr	r2, [r7, #12]
 800ebc6:	4413      	add	r3, r2
 800ebc8:	881b      	ldrh	r3, [r3, #0]
 800ebca:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800ebcc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	f000 8090 	beq.w	800ecf4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800ebd4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ebd6:	2b20      	cmp	r3, #32
 800ebd8:	d006      	beq.n	800ebe8 <create_name+0x1bc>
 800ebda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ebdc:	2b2e      	cmp	r3, #46	@ 0x2e
 800ebde:	d10a      	bne.n	800ebf6 <create_name+0x1ca>
 800ebe0:	69ba      	ldr	r2, [r7, #24]
 800ebe2:	697b      	ldr	r3, [r7, #20]
 800ebe4:	429a      	cmp	r2, r3
 800ebe6:	d006      	beq.n	800ebf6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800ebe8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ebec:	f043 0303 	orr.w	r3, r3, #3
 800ebf0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ebf4:	e07d      	b.n	800ecf2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800ebf6:	6a3a      	ldr	r2, [r7, #32]
 800ebf8:	69fb      	ldr	r3, [r7, #28]
 800ebfa:	429a      	cmp	r2, r3
 800ebfc:	d203      	bcs.n	800ec06 <create_name+0x1da>
 800ebfe:	69ba      	ldr	r2, [r7, #24]
 800ec00:	697b      	ldr	r3, [r7, #20]
 800ec02:	429a      	cmp	r2, r3
 800ec04:	d123      	bne.n	800ec4e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800ec06:	69fb      	ldr	r3, [r7, #28]
 800ec08:	2b0b      	cmp	r3, #11
 800ec0a:	d106      	bne.n	800ec1a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800ec0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ec10:	f043 0303 	orr.w	r3, r3, #3
 800ec14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ec18:	e075      	b.n	800ed06 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800ec1a:	69ba      	ldr	r2, [r7, #24]
 800ec1c:	697b      	ldr	r3, [r7, #20]
 800ec1e:	429a      	cmp	r2, r3
 800ec20:	d005      	beq.n	800ec2e <create_name+0x202>
 800ec22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ec26:	f043 0303 	orr.w	r3, r3, #3
 800ec2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800ec2e:	69ba      	ldr	r2, [r7, #24]
 800ec30:	697b      	ldr	r3, [r7, #20]
 800ec32:	429a      	cmp	r2, r3
 800ec34:	d866      	bhi.n	800ed04 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800ec36:	697b      	ldr	r3, [r7, #20]
 800ec38:	61bb      	str	r3, [r7, #24]
 800ec3a:	2308      	movs	r3, #8
 800ec3c:	623b      	str	r3, [r7, #32]
 800ec3e:	230b      	movs	r3, #11
 800ec40:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800ec42:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ec46:	009b      	lsls	r3, r3, #2
 800ec48:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ec4c:	e051      	b.n	800ecf2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800ec4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ec50:	2b7f      	cmp	r3, #127	@ 0x7f
 800ec52:	d914      	bls.n	800ec7e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800ec54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ec56:	2100      	movs	r1, #0
 800ec58:	4618      	mov	r0, r3
 800ec5a:	f001 fbdd 	bl	8010418 <ff_convert>
 800ec5e:	4603      	mov	r3, r0
 800ec60:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800ec62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d004      	beq.n	800ec72 <create_name+0x246>
 800ec68:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ec6a:	3b80      	subs	r3, #128	@ 0x80
 800ec6c:	4a23      	ldr	r2, [pc, #140]	@ (800ecfc <create_name+0x2d0>)
 800ec6e:	5cd3      	ldrb	r3, [r2, r3]
 800ec70:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800ec72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ec76:	f043 0302 	orr.w	r3, r3, #2
 800ec7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800ec7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d007      	beq.n	800ec94 <create_name+0x268>
 800ec84:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ec86:	4619      	mov	r1, r3
 800ec88:	481d      	ldr	r0, [pc, #116]	@ (800ed00 <create_name+0x2d4>)
 800ec8a:	f7fe fbce 	bl	800d42a <chk_chr>
 800ec8e:	4603      	mov	r3, r0
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d008      	beq.n	800eca6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ec94:	235f      	movs	r3, #95	@ 0x5f
 800ec96:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800ec98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ec9c:	f043 0303 	orr.w	r3, r3, #3
 800eca0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800eca4:	e01b      	b.n	800ecde <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800eca6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eca8:	2b40      	cmp	r3, #64	@ 0x40
 800ecaa:	d909      	bls.n	800ecc0 <create_name+0x294>
 800ecac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ecae:	2b5a      	cmp	r3, #90	@ 0x5a
 800ecb0:	d806      	bhi.n	800ecc0 <create_name+0x294>
					b |= 2;
 800ecb2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ecb6:	f043 0302 	orr.w	r3, r3, #2
 800ecba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ecbe:	e00e      	b.n	800ecde <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800ecc0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ecc2:	2b60      	cmp	r3, #96	@ 0x60
 800ecc4:	d90b      	bls.n	800ecde <create_name+0x2b2>
 800ecc6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ecc8:	2b7a      	cmp	r3, #122	@ 0x7a
 800ecca:	d808      	bhi.n	800ecde <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800eccc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ecd0:	f043 0301 	orr.w	r3, r3, #1
 800ecd4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ecd8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ecda:	3b20      	subs	r3, #32
 800ecdc:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800ecde:	6a3b      	ldr	r3, [r7, #32]
 800ece0:	1c5a      	adds	r2, r3, #1
 800ece2:	623a      	str	r2, [r7, #32]
 800ece4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ece6:	b2d1      	uxtb	r1, r2
 800ece8:	687a      	ldr	r2, [r7, #4]
 800ecea:	4413      	add	r3, r2
 800ecec:	460a      	mov	r2, r1
 800ecee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800ecf2:	e763      	b.n	800ebbc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800ecf4:	bf00      	nop
 800ecf6:	e006      	b.n	800ed06 <create_name+0x2da>
 800ecf8:	08016f98 	.word	0x08016f98
 800ecfc:	08017008 	.word	0x08017008
 800ed00:	08016fa4 	.word	0x08016fa4
			if (si > di) break;			/* No extension */
 800ed04:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ed0c:	2be5      	cmp	r3, #229	@ 0xe5
 800ed0e:	d103      	bne.n	800ed18 <create_name+0x2ec>
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2205      	movs	r2, #5
 800ed14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800ed18:	69fb      	ldr	r3, [r7, #28]
 800ed1a:	2b08      	cmp	r3, #8
 800ed1c:	d104      	bne.n	800ed28 <create_name+0x2fc>
 800ed1e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ed22:	009b      	lsls	r3, r3, #2
 800ed24:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800ed28:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ed2c:	f003 030c 	and.w	r3, r3, #12
 800ed30:	2b0c      	cmp	r3, #12
 800ed32:	d005      	beq.n	800ed40 <create_name+0x314>
 800ed34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ed38:	f003 0303 	and.w	r3, r3, #3
 800ed3c:	2b03      	cmp	r3, #3
 800ed3e:	d105      	bne.n	800ed4c <create_name+0x320>
 800ed40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ed44:	f043 0302 	orr.w	r3, r3, #2
 800ed48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ed4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ed50:	f003 0302 	and.w	r3, r3, #2
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d117      	bne.n	800ed88 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ed58:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ed5c:	f003 0303 	and.w	r3, r3, #3
 800ed60:	2b01      	cmp	r3, #1
 800ed62:	d105      	bne.n	800ed70 <create_name+0x344>
 800ed64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ed68:	f043 0310 	orr.w	r3, r3, #16
 800ed6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ed70:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ed74:	f003 030c 	and.w	r3, r3, #12
 800ed78:	2b04      	cmp	r3, #4
 800ed7a:	d105      	bne.n	800ed88 <create_name+0x35c>
 800ed7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ed80:	f043 0308 	orr.w	r3, r3, #8
 800ed84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ed8e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800ed92:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800ed94:	4618      	mov	r0, r3
 800ed96:	3728      	adds	r7, #40	@ 0x28
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}

0800ed9c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b086      	sub	sp, #24
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
 800eda4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800edaa:	693b      	ldr	r3, [r7, #16]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800edb0:	e002      	b.n	800edb8 <follow_path+0x1c>
 800edb2:	683b      	ldr	r3, [r7, #0]
 800edb4:	3301      	adds	r3, #1
 800edb6:	603b      	str	r3, [r7, #0]
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	781b      	ldrb	r3, [r3, #0]
 800edbc:	2b2f      	cmp	r3, #47	@ 0x2f
 800edbe:	d0f8      	beq.n	800edb2 <follow_path+0x16>
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	781b      	ldrb	r3, [r3, #0]
 800edc4:	2b5c      	cmp	r3, #92	@ 0x5c
 800edc6:	d0f4      	beq.n	800edb2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800edc8:	693b      	ldr	r3, [r7, #16]
 800edca:	2200      	movs	r2, #0
 800edcc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800edce:	683b      	ldr	r3, [r7, #0]
 800edd0:	781b      	ldrb	r3, [r3, #0]
 800edd2:	2b1f      	cmp	r3, #31
 800edd4:	d80a      	bhi.n	800edec <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2280      	movs	r2, #128	@ 0x80
 800edda:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800edde:	2100      	movs	r1, #0
 800ede0:	6878      	ldr	r0, [r7, #4]
 800ede2:	f7ff f8fe 	bl	800dfe2 <dir_sdi>
 800ede6:	4603      	mov	r3, r0
 800ede8:	75fb      	strb	r3, [r7, #23]
 800edea:	e048      	b.n	800ee7e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800edec:	463b      	mov	r3, r7
 800edee:	4619      	mov	r1, r3
 800edf0:	6878      	ldr	r0, [r7, #4]
 800edf2:	f7ff fe1b 	bl	800ea2c <create_name>
 800edf6:	4603      	mov	r3, r0
 800edf8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800edfa:	7dfb      	ldrb	r3, [r7, #23]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d139      	bne.n	800ee74 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ee00:	6878      	ldr	r0, [r7, #4]
 800ee02:	f7ff fc5a 	bl	800e6ba <dir_find>
 800ee06:	4603      	mov	r3, r0
 800ee08:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ee10:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ee12:	7dfb      	ldrb	r3, [r7, #23]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d00a      	beq.n	800ee2e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ee18:	7dfb      	ldrb	r3, [r7, #23]
 800ee1a:	2b04      	cmp	r3, #4
 800ee1c:	d12c      	bne.n	800ee78 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ee1e:	7afb      	ldrb	r3, [r7, #11]
 800ee20:	f003 0304 	and.w	r3, r3, #4
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d127      	bne.n	800ee78 <follow_path+0xdc>
 800ee28:	2305      	movs	r3, #5
 800ee2a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ee2c:	e024      	b.n	800ee78 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ee2e:	7afb      	ldrb	r3, [r7, #11]
 800ee30:	f003 0304 	and.w	r3, r3, #4
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d121      	bne.n	800ee7c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ee38:	693b      	ldr	r3, [r7, #16]
 800ee3a:	799b      	ldrb	r3, [r3, #6]
 800ee3c:	f003 0310 	and.w	r3, r3, #16
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d102      	bne.n	800ee4a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ee44:	2305      	movs	r3, #5
 800ee46:	75fb      	strb	r3, [r7, #23]
 800ee48:	e019      	b.n	800ee7e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	695b      	ldr	r3, [r3, #20]
 800ee54:	68fa      	ldr	r2, [r7, #12]
 800ee56:	8992      	ldrh	r2, [r2, #12]
 800ee58:	fbb3 f0f2 	udiv	r0, r3, r2
 800ee5c:	fb00 f202 	mul.w	r2, r0, r2
 800ee60:	1a9b      	subs	r3, r3, r2
 800ee62:	440b      	add	r3, r1
 800ee64:	4619      	mov	r1, r3
 800ee66:	68f8      	ldr	r0, [r7, #12]
 800ee68:	f7ff fa61 	bl	800e32e <ld_clust>
 800ee6c:	4602      	mov	r2, r0
 800ee6e:	693b      	ldr	r3, [r7, #16]
 800ee70:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ee72:	e7bb      	b.n	800edec <follow_path+0x50>
			if (res != FR_OK) break;
 800ee74:	bf00      	nop
 800ee76:	e002      	b.n	800ee7e <follow_path+0xe2>
				break;
 800ee78:	bf00      	nop
 800ee7a:	e000      	b.n	800ee7e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ee7c:	bf00      	nop
			}
		}
	}

	return res;
 800ee7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee80:	4618      	mov	r0, r3
 800ee82:	3718      	adds	r7, #24
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bd80      	pop	{r7, pc}

0800ee88 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ee88:	b480      	push	{r7}
 800ee8a:	b087      	sub	sp, #28
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ee90:	f04f 33ff 	mov.w	r3, #4294967295
 800ee94:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d031      	beq.n	800ef02 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	617b      	str	r3, [r7, #20]
 800eea4:	e002      	b.n	800eeac <get_ldnumber+0x24>
 800eea6:	697b      	ldr	r3, [r7, #20]
 800eea8:	3301      	adds	r3, #1
 800eeaa:	617b      	str	r3, [r7, #20]
 800eeac:	697b      	ldr	r3, [r7, #20]
 800eeae:	781b      	ldrb	r3, [r3, #0]
 800eeb0:	2b1f      	cmp	r3, #31
 800eeb2:	d903      	bls.n	800eebc <get_ldnumber+0x34>
 800eeb4:	697b      	ldr	r3, [r7, #20]
 800eeb6:	781b      	ldrb	r3, [r3, #0]
 800eeb8:	2b3a      	cmp	r3, #58	@ 0x3a
 800eeba:	d1f4      	bne.n	800eea6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800eebc:	697b      	ldr	r3, [r7, #20]
 800eebe:	781b      	ldrb	r3, [r3, #0]
 800eec0:	2b3a      	cmp	r3, #58	@ 0x3a
 800eec2:	d11c      	bne.n	800eefe <get_ldnumber+0x76>
			tp = *path;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	1c5a      	adds	r2, r3, #1
 800eece:	60fa      	str	r2, [r7, #12]
 800eed0:	781b      	ldrb	r3, [r3, #0]
 800eed2:	3b30      	subs	r3, #48	@ 0x30
 800eed4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800eed6:	68bb      	ldr	r3, [r7, #8]
 800eed8:	2b09      	cmp	r3, #9
 800eeda:	d80e      	bhi.n	800eefa <get_ldnumber+0x72>
 800eedc:	68fa      	ldr	r2, [r7, #12]
 800eede:	697b      	ldr	r3, [r7, #20]
 800eee0:	429a      	cmp	r2, r3
 800eee2:	d10a      	bne.n	800eefa <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800eee4:	68bb      	ldr	r3, [r7, #8]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d107      	bne.n	800eefa <get_ldnumber+0x72>
					vol = (int)i;
 800eeea:	68bb      	ldr	r3, [r7, #8]
 800eeec:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800eeee:	697b      	ldr	r3, [r7, #20]
 800eef0:	3301      	adds	r3, #1
 800eef2:	617b      	str	r3, [r7, #20]
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	697a      	ldr	r2, [r7, #20]
 800eef8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800eefa:	693b      	ldr	r3, [r7, #16]
 800eefc:	e002      	b.n	800ef04 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800eefe:	2300      	movs	r3, #0
 800ef00:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ef02:	693b      	ldr	r3, [r7, #16]
}
 800ef04:	4618      	mov	r0, r3
 800ef06:	371c      	adds	r7, #28
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0e:	4770      	bx	lr

0800ef10 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b082      	sub	sp, #8
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
 800ef18:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	70da      	strb	r2, [r3, #3]
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f04f 32ff 	mov.w	r2, #4294967295
 800ef26:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ef28:	6839      	ldr	r1, [r7, #0]
 800ef2a:	6878      	ldr	r0, [r7, #4]
 800ef2c:	f7fe fc7a 	bl	800d824 <move_window>
 800ef30:	4603      	mov	r3, r0
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d001      	beq.n	800ef3a <check_fs+0x2a>
 800ef36:	2304      	movs	r3, #4
 800ef38:	e038      	b.n	800efac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	333c      	adds	r3, #60	@ 0x3c
 800ef3e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ef42:	4618      	mov	r0, r3
 800ef44:	f7fe f98c 	bl	800d260 <ld_word>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	461a      	mov	r2, r3
 800ef4c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ef50:	429a      	cmp	r2, r3
 800ef52:	d001      	beq.n	800ef58 <check_fs+0x48>
 800ef54:	2303      	movs	r3, #3
 800ef56:	e029      	b.n	800efac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ef5e:	2be9      	cmp	r3, #233	@ 0xe9
 800ef60:	d009      	beq.n	800ef76 <check_fs+0x66>
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ef68:	2beb      	cmp	r3, #235	@ 0xeb
 800ef6a:	d11e      	bne.n	800efaa <check_fs+0x9a>
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ef72:	2b90      	cmp	r3, #144	@ 0x90
 800ef74:	d119      	bne.n	800efaa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	333c      	adds	r3, #60	@ 0x3c
 800ef7a:	3336      	adds	r3, #54	@ 0x36
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	f7fe f987 	bl	800d290 <ld_dword>
 800ef82:	4603      	mov	r3, r0
 800ef84:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ef88:	4a0a      	ldr	r2, [pc, #40]	@ (800efb4 <check_fs+0xa4>)
 800ef8a:	4293      	cmp	r3, r2
 800ef8c:	d101      	bne.n	800ef92 <check_fs+0x82>
 800ef8e:	2300      	movs	r3, #0
 800ef90:	e00c      	b.n	800efac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	333c      	adds	r3, #60	@ 0x3c
 800ef96:	3352      	adds	r3, #82	@ 0x52
 800ef98:	4618      	mov	r0, r3
 800ef9a:	f7fe f979 	bl	800d290 <ld_dword>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	4a05      	ldr	r2, [pc, #20]	@ (800efb8 <check_fs+0xa8>)
 800efa2:	4293      	cmp	r3, r2
 800efa4:	d101      	bne.n	800efaa <check_fs+0x9a>
 800efa6:	2300      	movs	r3, #0
 800efa8:	e000      	b.n	800efac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800efaa:	2302      	movs	r3, #2
}
 800efac:	4618      	mov	r0, r3
 800efae:	3708      	adds	r7, #8
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd80      	pop	{r7, pc}
 800efb4:	00544146 	.word	0x00544146
 800efb8:	33544146 	.word	0x33544146

0800efbc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b096      	sub	sp, #88	@ 0x58
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	60f8      	str	r0, [r7, #12]
 800efc4:	60b9      	str	r1, [r7, #8]
 800efc6:	4613      	mov	r3, r2
 800efc8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800efca:	68bb      	ldr	r3, [r7, #8]
 800efcc:	2200      	movs	r2, #0
 800efce:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800efd0:	68f8      	ldr	r0, [r7, #12]
 800efd2:	f7ff ff59 	bl	800ee88 <get_ldnumber>
 800efd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800efd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800efda:	2b00      	cmp	r3, #0
 800efdc:	da01      	bge.n	800efe2 <find_volume+0x26>
 800efde:	230b      	movs	r3, #11
 800efe0:	e26a      	b.n	800f4b8 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800efe2:	4aa3      	ldr	r2, [pc, #652]	@ (800f270 <find_volume+0x2b4>)
 800efe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800efe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800efea:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800efec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d101      	bne.n	800eff6 <find_volume+0x3a>
 800eff2:	230c      	movs	r3, #12
 800eff4:	e260      	b.n	800f4b8 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 800eff6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800eff8:	f7fe fa32 	bl	800d460 <lock_fs>
 800effc:	4603      	mov	r3, r0
 800effe:	2b00      	cmp	r3, #0
 800f000:	d101      	bne.n	800f006 <find_volume+0x4a>
 800f002:	230f      	movs	r3, #15
 800f004:	e258      	b.n	800f4b8 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 800f006:	68bb      	ldr	r3, [r7, #8]
 800f008:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f00a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f00c:	79fb      	ldrb	r3, [r7, #7]
 800f00e:	f023 0301 	bic.w	r3, r3, #1
 800f012:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f016:	781b      	ldrb	r3, [r3, #0]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d01a      	beq.n	800f052 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800f01c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f01e:	785b      	ldrb	r3, [r3, #1]
 800f020:	4618      	mov	r0, r3
 800f022:	f7fe f87f 	bl	800d124 <disk_status>
 800f026:	4603      	mov	r3, r0
 800f028:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f02c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f030:	f003 0301 	and.w	r3, r3, #1
 800f034:	2b00      	cmp	r3, #0
 800f036:	d10c      	bne.n	800f052 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f038:	79fb      	ldrb	r3, [r7, #7]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d007      	beq.n	800f04e <find_volume+0x92>
 800f03e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f042:	f003 0304 	and.w	r3, r3, #4
 800f046:	2b00      	cmp	r3, #0
 800f048:	d001      	beq.n	800f04e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800f04a:	230a      	movs	r3, #10
 800f04c:	e234      	b.n	800f4b8 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 800f04e:	2300      	movs	r3, #0
 800f050:	e232      	b.n	800f4b8 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f054:	2200      	movs	r2, #0
 800f056:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f058:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f05a:	b2da      	uxtb	r2, r3
 800f05c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f05e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f062:	785b      	ldrb	r3, [r3, #1]
 800f064:	4618      	mov	r0, r3
 800f066:	f7fe f877 	bl	800d158 <disk_initialize>
 800f06a:	4603      	mov	r3, r0
 800f06c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f070:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f074:	f003 0301 	and.w	r3, r3, #1
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d001      	beq.n	800f080 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f07c:	2303      	movs	r3, #3
 800f07e:	e21b      	b.n	800f4b8 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f080:	79fb      	ldrb	r3, [r7, #7]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d007      	beq.n	800f096 <find_volume+0xda>
 800f086:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f08a:	f003 0304 	and.w	r3, r3, #4
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d001      	beq.n	800f096 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800f092:	230a      	movs	r3, #10
 800f094:	e210      	b.n	800f4b8 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800f096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f098:	7858      	ldrb	r0, [r3, #1]
 800f09a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f09c:	330c      	adds	r3, #12
 800f09e:	461a      	mov	r2, r3
 800f0a0:	2102      	movs	r1, #2
 800f0a2:	f7fe f8bf 	bl	800d224 <disk_ioctl>
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d001      	beq.n	800f0b0 <find_volume+0xf4>
 800f0ac:	2301      	movs	r3, #1
 800f0ae:	e203      	b.n	800f4b8 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800f0b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0b2:	899b      	ldrh	r3, [r3, #12]
 800f0b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f0b8:	d80d      	bhi.n	800f0d6 <find_volume+0x11a>
 800f0ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0bc:	899b      	ldrh	r3, [r3, #12]
 800f0be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f0c2:	d308      	bcc.n	800f0d6 <find_volume+0x11a>
 800f0c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0c6:	899b      	ldrh	r3, [r3, #12]
 800f0c8:	461a      	mov	r2, r3
 800f0ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0cc:	899b      	ldrh	r3, [r3, #12]
 800f0ce:	3b01      	subs	r3, #1
 800f0d0:	4013      	ands	r3, r2
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d001      	beq.n	800f0da <find_volume+0x11e>
 800f0d6:	2301      	movs	r3, #1
 800f0d8:	e1ee      	b.n	800f4b8 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f0de:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f0e0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f0e2:	f7ff ff15 	bl	800ef10 <check_fs>
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f0ec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f0f0:	2b02      	cmp	r3, #2
 800f0f2:	d149      	bne.n	800f188 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	643b      	str	r3, [r7, #64]	@ 0x40
 800f0f8:	e01e      	b.n	800f138 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f0fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0fc:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800f100:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f102:	011b      	lsls	r3, r3, #4
 800f104:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800f108:	4413      	add	r3, r2
 800f10a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f10c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f10e:	3304      	adds	r3, #4
 800f110:	781b      	ldrb	r3, [r3, #0]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d006      	beq.n	800f124 <find_volume+0x168>
 800f116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f118:	3308      	adds	r3, #8
 800f11a:	4618      	mov	r0, r3
 800f11c:	f7fe f8b8 	bl	800d290 <ld_dword>
 800f120:	4602      	mov	r2, r0
 800f122:	e000      	b.n	800f126 <find_volume+0x16a>
 800f124:	2200      	movs	r2, #0
 800f126:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f128:	009b      	lsls	r3, r3, #2
 800f12a:	3358      	adds	r3, #88	@ 0x58
 800f12c:	443b      	add	r3, r7
 800f12e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f132:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f134:	3301      	adds	r3, #1
 800f136:	643b      	str	r3, [r7, #64]	@ 0x40
 800f138:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f13a:	2b03      	cmp	r3, #3
 800f13c:	d9dd      	bls.n	800f0fa <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f13e:	2300      	movs	r3, #0
 800f140:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800f142:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f144:	2b00      	cmp	r3, #0
 800f146:	d002      	beq.n	800f14e <find_volume+0x192>
 800f148:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f14a:	3b01      	subs	r3, #1
 800f14c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f14e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f150:	009b      	lsls	r3, r3, #2
 800f152:	3358      	adds	r3, #88	@ 0x58
 800f154:	443b      	add	r3, r7
 800f156:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f15a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f15c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d005      	beq.n	800f16e <find_volume+0x1b2>
 800f162:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f164:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f166:	f7ff fed3 	bl	800ef10 <check_fs>
 800f16a:	4603      	mov	r3, r0
 800f16c:	e000      	b.n	800f170 <find_volume+0x1b4>
 800f16e:	2303      	movs	r3, #3
 800f170:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f174:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f178:	2b01      	cmp	r3, #1
 800f17a:	d905      	bls.n	800f188 <find_volume+0x1cc>
 800f17c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f17e:	3301      	adds	r3, #1
 800f180:	643b      	str	r3, [r7, #64]	@ 0x40
 800f182:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f184:	2b03      	cmp	r3, #3
 800f186:	d9e2      	bls.n	800f14e <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f188:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f18c:	2b04      	cmp	r3, #4
 800f18e:	d101      	bne.n	800f194 <find_volume+0x1d8>
 800f190:	2301      	movs	r3, #1
 800f192:	e191      	b.n	800f4b8 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f194:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f198:	2b01      	cmp	r3, #1
 800f19a:	d901      	bls.n	800f1a0 <find_volume+0x1e4>
 800f19c:	230d      	movs	r3, #13
 800f19e:	e18b      	b.n	800f4b8 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f1a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1a2:	333c      	adds	r3, #60	@ 0x3c
 800f1a4:	330b      	adds	r3, #11
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	f7fe f85a 	bl	800d260 <ld_word>
 800f1ac:	4603      	mov	r3, r0
 800f1ae:	461a      	mov	r2, r3
 800f1b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1b2:	899b      	ldrh	r3, [r3, #12]
 800f1b4:	429a      	cmp	r2, r3
 800f1b6:	d001      	beq.n	800f1bc <find_volume+0x200>
 800f1b8:	230d      	movs	r3, #13
 800f1ba:	e17d      	b.n	800f4b8 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f1bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1be:	333c      	adds	r3, #60	@ 0x3c
 800f1c0:	3316      	adds	r3, #22
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f7fe f84c 	bl	800d260 <ld_word>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f1cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d106      	bne.n	800f1e0 <find_volume+0x224>
 800f1d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1d4:	333c      	adds	r3, #60	@ 0x3c
 800f1d6:	3324      	adds	r3, #36	@ 0x24
 800f1d8:	4618      	mov	r0, r3
 800f1da:	f7fe f859 	bl	800d290 <ld_dword>
 800f1de:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800f1e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f1e4:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f1e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1e8:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 800f1ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1ee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f1f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1f2:	789b      	ldrb	r3, [r3, #2]
 800f1f4:	2b01      	cmp	r3, #1
 800f1f6:	d005      	beq.n	800f204 <find_volume+0x248>
 800f1f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1fa:	789b      	ldrb	r3, [r3, #2]
 800f1fc:	2b02      	cmp	r3, #2
 800f1fe:	d001      	beq.n	800f204 <find_volume+0x248>
 800f200:	230d      	movs	r3, #13
 800f202:	e159      	b.n	800f4b8 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f206:	789b      	ldrb	r3, [r3, #2]
 800f208:	461a      	mov	r2, r3
 800f20a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f20c:	fb02 f303 	mul.w	r3, r2, r3
 800f210:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f214:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800f218:	461a      	mov	r2, r3
 800f21a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f21c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f21e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f220:	895b      	ldrh	r3, [r3, #10]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d008      	beq.n	800f238 <find_volume+0x27c>
 800f226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f228:	895b      	ldrh	r3, [r3, #10]
 800f22a:	461a      	mov	r2, r3
 800f22c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f22e:	895b      	ldrh	r3, [r3, #10]
 800f230:	3b01      	subs	r3, #1
 800f232:	4013      	ands	r3, r2
 800f234:	2b00      	cmp	r3, #0
 800f236:	d001      	beq.n	800f23c <find_volume+0x280>
 800f238:	230d      	movs	r3, #13
 800f23a:	e13d      	b.n	800f4b8 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f23c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f23e:	333c      	adds	r3, #60	@ 0x3c
 800f240:	3311      	adds	r3, #17
 800f242:	4618      	mov	r0, r3
 800f244:	f7fe f80c 	bl	800d260 <ld_word>
 800f248:	4603      	mov	r3, r0
 800f24a:	461a      	mov	r2, r3
 800f24c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f24e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f252:	891b      	ldrh	r3, [r3, #8]
 800f254:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f256:	8992      	ldrh	r2, [r2, #12]
 800f258:	0952      	lsrs	r2, r2, #5
 800f25a:	b292      	uxth	r2, r2
 800f25c:	fbb3 f1f2 	udiv	r1, r3, r2
 800f260:	fb01 f202 	mul.w	r2, r1, r2
 800f264:	1a9b      	subs	r3, r3, r2
 800f266:	b29b      	uxth	r3, r3
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d003      	beq.n	800f274 <find_volume+0x2b8>
 800f26c:	230d      	movs	r3, #13
 800f26e:	e123      	b.n	800f4b8 <find_volume+0x4fc>
 800f270:	20002bf0 	.word	0x20002bf0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f276:	333c      	adds	r3, #60	@ 0x3c
 800f278:	3313      	adds	r3, #19
 800f27a:	4618      	mov	r0, r3
 800f27c:	f7fd fff0 	bl	800d260 <ld_word>
 800f280:	4603      	mov	r3, r0
 800f282:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f284:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f286:	2b00      	cmp	r3, #0
 800f288:	d106      	bne.n	800f298 <find_volume+0x2dc>
 800f28a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f28c:	333c      	adds	r3, #60	@ 0x3c
 800f28e:	3320      	adds	r3, #32
 800f290:	4618      	mov	r0, r3
 800f292:	f7fd fffd 	bl	800d290 <ld_dword>
 800f296:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f29a:	333c      	adds	r3, #60	@ 0x3c
 800f29c:	330e      	adds	r3, #14
 800f29e:	4618      	mov	r0, r3
 800f2a0:	f7fd ffde 	bl	800d260 <ld_word>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f2a8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d101      	bne.n	800f2b2 <find_volume+0x2f6>
 800f2ae:	230d      	movs	r3, #13
 800f2b0:	e102      	b.n	800f4b8 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f2b2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f2b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f2b6:	4413      	add	r3, r2
 800f2b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f2ba:	8911      	ldrh	r1, [r2, #8]
 800f2bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f2be:	8992      	ldrh	r2, [r2, #12]
 800f2c0:	0952      	lsrs	r2, r2, #5
 800f2c2:	b292      	uxth	r2, r2
 800f2c4:	fbb1 f2f2 	udiv	r2, r1, r2
 800f2c8:	b292      	uxth	r2, r2
 800f2ca:	4413      	add	r3, r2
 800f2cc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f2ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f2d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2d2:	429a      	cmp	r2, r3
 800f2d4:	d201      	bcs.n	800f2da <find_volume+0x31e>
 800f2d6:	230d      	movs	r3, #13
 800f2d8:	e0ee      	b.n	800f4b8 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f2da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f2dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2de:	1ad3      	subs	r3, r2, r3
 800f2e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f2e2:	8952      	ldrh	r2, [r2, #10]
 800f2e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800f2e8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d101      	bne.n	800f2f4 <find_volume+0x338>
 800f2f0:	230d      	movs	r3, #13
 800f2f2:	e0e1      	b.n	800f4b8 <find_volume+0x4fc>
		fmt = FS_FAT32;
 800f2f4:	2303      	movs	r3, #3
 800f2f6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f2fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2fc:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800f300:	4293      	cmp	r3, r2
 800f302:	d802      	bhi.n	800f30a <find_volume+0x34e>
 800f304:	2302      	movs	r3, #2
 800f306:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f30c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800f310:	4293      	cmp	r3, r2
 800f312:	d802      	bhi.n	800f31a <find_volume+0x35e>
 800f314:	2301      	movs	r3, #1
 800f316:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f31a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f31c:	1c9a      	adds	r2, r3, #2
 800f31e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f320:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800f322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f324:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f326:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f328:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f32a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f32c:	441a      	add	r2, r3
 800f32e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f330:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800f332:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f336:	441a      	add	r2, r3
 800f338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f33a:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 800f33c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f340:	2b03      	cmp	r3, #3
 800f342:	d11e      	bne.n	800f382 <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f346:	333c      	adds	r3, #60	@ 0x3c
 800f348:	332a      	adds	r3, #42	@ 0x2a
 800f34a:	4618      	mov	r0, r3
 800f34c:	f7fd ff88 	bl	800d260 <ld_word>
 800f350:	4603      	mov	r3, r0
 800f352:	2b00      	cmp	r3, #0
 800f354:	d001      	beq.n	800f35a <find_volume+0x39e>
 800f356:	230d      	movs	r3, #13
 800f358:	e0ae      	b.n	800f4b8 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f35a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f35c:	891b      	ldrh	r3, [r3, #8]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d001      	beq.n	800f366 <find_volume+0x3aa>
 800f362:	230d      	movs	r3, #13
 800f364:	e0a8      	b.n	800f4b8 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f368:	333c      	adds	r3, #60	@ 0x3c
 800f36a:	332c      	adds	r3, #44	@ 0x2c
 800f36c:	4618      	mov	r0, r3
 800f36e:	f7fd ff8f 	bl	800d290 <ld_dword>
 800f372:	4602      	mov	r2, r0
 800f374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f376:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f37a:	6a1b      	ldr	r3, [r3, #32]
 800f37c:	009b      	lsls	r3, r3, #2
 800f37e:	647b      	str	r3, [r7, #68]	@ 0x44
 800f380:	e01f      	b.n	800f3c2 <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f384:	891b      	ldrh	r3, [r3, #8]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d101      	bne.n	800f38e <find_volume+0x3d2>
 800f38a:	230d      	movs	r3, #13
 800f38c:	e094      	b.n	800f4b8 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f38e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f392:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f394:	441a      	add	r2, r3
 800f396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f398:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f39a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f39e:	2b02      	cmp	r3, #2
 800f3a0:	d103      	bne.n	800f3aa <find_volume+0x3ee>
 800f3a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3a4:	6a1b      	ldr	r3, [r3, #32]
 800f3a6:	005b      	lsls	r3, r3, #1
 800f3a8:	e00a      	b.n	800f3c0 <find_volume+0x404>
 800f3aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3ac:	6a1a      	ldr	r2, [r3, #32]
 800f3ae:	4613      	mov	r3, r2
 800f3b0:	005b      	lsls	r3, r3, #1
 800f3b2:	4413      	add	r3, r2
 800f3b4:	085a      	lsrs	r2, r3, #1
 800f3b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3b8:	6a1b      	ldr	r3, [r3, #32]
 800f3ba:	f003 0301 	and.w	r3, r3, #1
 800f3be:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f3c0:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f3c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f3c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3c8:	899b      	ldrh	r3, [r3, #12]
 800f3ca:	4619      	mov	r1, r3
 800f3cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f3ce:	440b      	add	r3, r1
 800f3d0:	3b01      	subs	r3, #1
 800f3d2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f3d4:	8989      	ldrh	r1, [r1, #12]
 800f3d6:	fbb3 f3f1 	udiv	r3, r3, r1
 800f3da:	429a      	cmp	r2, r3
 800f3dc:	d201      	bcs.n	800f3e2 <find_volume+0x426>
 800f3de:	230d      	movs	r3, #13
 800f3e0:	e06a      	b.n	800f4b8 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f3e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3e4:	f04f 32ff 	mov.w	r2, #4294967295
 800f3e8:	61da      	str	r2, [r3, #28]
 800f3ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3ec:	69da      	ldr	r2, [r3, #28]
 800f3ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3f0:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800f3f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3f4:	2280      	movs	r2, #128	@ 0x80
 800f3f6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f3f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f3fc:	2b03      	cmp	r3, #3
 800f3fe:	d149      	bne.n	800f494 <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f402:	333c      	adds	r3, #60	@ 0x3c
 800f404:	3330      	adds	r3, #48	@ 0x30
 800f406:	4618      	mov	r0, r3
 800f408:	f7fd ff2a 	bl	800d260 <ld_word>
 800f40c:	4603      	mov	r3, r0
 800f40e:	2b01      	cmp	r3, #1
 800f410:	d140      	bne.n	800f494 <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f412:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f414:	3301      	adds	r3, #1
 800f416:	4619      	mov	r1, r3
 800f418:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f41a:	f7fe fa03 	bl	800d824 <move_window>
 800f41e:	4603      	mov	r3, r0
 800f420:	2b00      	cmp	r3, #0
 800f422:	d137      	bne.n	800f494 <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 800f424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f426:	2200      	movs	r2, #0
 800f428:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f42a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f42c:	333c      	adds	r3, #60	@ 0x3c
 800f42e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f432:	4618      	mov	r0, r3
 800f434:	f7fd ff14 	bl	800d260 <ld_word>
 800f438:	4603      	mov	r3, r0
 800f43a:	461a      	mov	r2, r3
 800f43c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f440:	429a      	cmp	r2, r3
 800f442:	d127      	bne.n	800f494 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f446:	333c      	adds	r3, #60	@ 0x3c
 800f448:	4618      	mov	r0, r3
 800f44a:	f7fd ff21 	bl	800d290 <ld_dword>
 800f44e:	4603      	mov	r3, r0
 800f450:	4a1b      	ldr	r2, [pc, #108]	@ (800f4c0 <find_volume+0x504>)
 800f452:	4293      	cmp	r3, r2
 800f454:	d11e      	bne.n	800f494 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f458:	333c      	adds	r3, #60	@ 0x3c
 800f45a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f45e:	4618      	mov	r0, r3
 800f460:	f7fd ff16 	bl	800d290 <ld_dword>
 800f464:	4603      	mov	r3, r0
 800f466:	4a17      	ldr	r2, [pc, #92]	@ (800f4c4 <find_volume+0x508>)
 800f468:	4293      	cmp	r3, r2
 800f46a:	d113      	bne.n	800f494 <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f46c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f46e:	333c      	adds	r3, #60	@ 0x3c
 800f470:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800f474:	4618      	mov	r0, r3
 800f476:	f7fd ff0b 	bl	800d290 <ld_dword>
 800f47a:	4602      	mov	r2, r0
 800f47c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f47e:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f482:	333c      	adds	r3, #60	@ 0x3c
 800f484:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800f488:	4618      	mov	r0, r3
 800f48a:	f7fd ff01 	bl	800d290 <ld_dword>
 800f48e:	4602      	mov	r2, r0
 800f490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f492:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f496:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800f49a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f49c:	4b0a      	ldr	r3, [pc, #40]	@ (800f4c8 <find_volume+0x50c>)
 800f49e:	881b      	ldrh	r3, [r3, #0]
 800f4a0:	3301      	adds	r3, #1
 800f4a2:	b29a      	uxth	r2, r3
 800f4a4:	4b08      	ldr	r3, [pc, #32]	@ (800f4c8 <find_volume+0x50c>)
 800f4a6:	801a      	strh	r2, [r3, #0]
 800f4a8:	4b07      	ldr	r3, [pc, #28]	@ (800f4c8 <find_volume+0x50c>)
 800f4aa:	881a      	ldrh	r2, [r3, #0]
 800f4ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4ae:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f4b0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f4b2:	f7fe f94f 	bl	800d754 <clear_lock>
#endif
	return FR_OK;
 800f4b6:	2300      	movs	r3, #0
}
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	3758      	adds	r7, #88	@ 0x58
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	bd80      	pop	{r7, pc}
 800f4c0:	41615252 	.word	0x41615252
 800f4c4:	61417272 	.word	0x61417272
 800f4c8:	20002bf4 	.word	0x20002bf4

0800f4cc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b084      	sub	sp, #16
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
 800f4d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f4d6:	2309      	movs	r3, #9
 800f4d8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d02e      	beq.n	800f53e <validate+0x72>
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d02a      	beq.n	800f53e <validate+0x72>
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	781b      	ldrb	r3, [r3, #0]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d025      	beq.n	800f53e <validate+0x72>
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	889a      	ldrh	r2, [r3, #4]
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	88db      	ldrh	r3, [r3, #6]
 800f4fc:	429a      	cmp	r2, r3
 800f4fe:	d11e      	bne.n	800f53e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	4618      	mov	r0, r3
 800f506:	f7fd ffab 	bl	800d460 <lock_fs>
 800f50a:	4603      	mov	r3, r0
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d014      	beq.n	800f53a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	785b      	ldrb	r3, [r3, #1]
 800f516:	4618      	mov	r0, r3
 800f518:	f7fd fe04 	bl	800d124 <disk_status>
 800f51c:	4603      	mov	r3, r0
 800f51e:	f003 0301 	and.w	r3, r3, #1
 800f522:	2b00      	cmp	r3, #0
 800f524:	d102      	bne.n	800f52c <validate+0x60>
				res = FR_OK;
 800f526:	2300      	movs	r3, #0
 800f528:	73fb      	strb	r3, [r7, #15]
 800f52a:	e008      	b.n	800f53e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	2100      	movs	r1, #0
 800f532:	4618      	mov	r0, r3
 800f534:	f7fd ffaa 	bl	800d48c <unlock_fs>
 800f538:	e001      	b.n	800f53e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800f53a:	230f      	movs	r3, #15
 800f53c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f53e:	7bfb      	ldrb	r3, [r7, #15]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d102      	bne.n	800f54a <validate+0x7e>
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	e000      	b.n	800f54c <validate+0x80>
 800f54a:	2300      	movs	r3, #0
 800f54c:	683a      	ldr	r2, [r7, #0]
 800f54e:	6013      	str	r3, [r2, #0]
	return res;
 800f550:	7bfb      	ldrb	r3, [r7, #15]
}
 800f552:	4618      	mov	r0, r3
 800f554:	3710      	adds	r7, #16
 800f556:	46bd      	mov	sp, r7
 800f558:	bd80      	pop	{r7, pc}
	...

0800f55c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b088      	sub	sp, #32
 800f560:	af00      	add	r7, sp, #0
 800f562:	60f8      	str	r0, [r7, #12]
 800f564:	60b9      	str	r1, [r7, #8]
 800f566:	4613      	mov	r3, r2
 800f568:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f56a:	68bb      	ldr	r3, [r7, #8]
 800f56c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f56e:	f107 0310 	add.w	r3, r7, #16
 800f572:	4618      	mov	r0, r3
 800f574:	f7ff fc88 	bl	800ee88 <get_ldnumber>
 800f578:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f57a:	69fb      	ldr	r3, [r7, #28]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	da01      	bge.n	800f584 <f_mount+0x28>
 800f580:	230b      	movs	r3, #11
 800f582:	e048      	b.n	800f616 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f584:	4a26      	ldr	r2, [pc, #152]	@ (800f620 <f_mount+0xc4>)
 800f586:	69fb      	ldr	r3, [r7, #28]
 800f588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f58c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f58e:	69bb      	ldr	r3, [r7, #24]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d00f      	beq.n	800f5b4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f594:	69b8      	ldr	r0, [r7, #24]
 800f596:	f7fe f8dd 	bl	800d754 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800f59a:	69bb      	ldr	r3, [r7, #24]
 800f59c:	695b      	ldr	r3, [r3, #20]
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f001 f820 	bl	80105e4 <ff_del_syncobj>
 800f5a4:	4603      	mov	r3, r0
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d101      	bne.n	800f5ae <f_mount+0x52>
 800f5aa:	2302      	movs	r3, #2
 800f5ac:	e033      	b.n	800f616 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f5ae:	69bb      	ldr	r3, [r7, #24]
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d00f      	beq.n	800f5da <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	2200      	movs	r2, #0
 800f5be:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800f5c0:	69fb      	ldr	r3, [r7, #28]
 800f5c2:	b2da      	uxtb	r2, r3
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	3314      	adds	r3, #20
 800f5c8:	4619      	mov	r1, r3
 800f5ca:	4610      	mov	r0, r2
 800f5cc:	f000 ffea 	bl	80105a4 <ff_cre_syncobj>
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d101      	bne.n	800f5da <f_mount+0x7e>
 800f5d6:	2302      	movs	r3, #2
 800f5d8:	e01d      	b.n	800f616 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f5da:	68fa      	ldr	r2, [r7, #12]
 800f5dc:	4910      	ldr	r1, [pc, #64]	@ (800f620 <f_mount+0xc4>)
 800f5de:	69fb      	ldr	r3, [r7, #28]
 800f5e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d002      	beq.n	800f5f0 <f_mount+0x94>
 800f5ea:	79fb      	ldrb	r3, [r7, #7]
 800f5ec:	2b01      	cmp	r3, #1
 800f5ee:	d001      	beq.n	800f5f4 <f_mount+0x98>
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	e010      	b.n	800f616 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f5f4:	f107 010c 	add.w	r1, r7, #12
 800f5f8:	f107 0308 	add.w	r3, r7, #8
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	4618      	mov	r0, r3
 800f600:	f7ff fcdc 	bl	800efbc <find_volume>
 800f604:	4603      	mov	r3, r0
 800f606:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	7dfa      	ldrb	r2, [r7, #23]
 800f60c:	4611      	mov	r1, r2
 800f60e:	4618      	mov	r0, r3
 800f610:	f7fd ff3c 	bl	800d48c <unlock_fs>
 800f614:	7dfb      	ldrb	r3, [r7, #23]
}
 800f616:	4618      	mov	r0, r3
 800f618:	3720      	adds	r7, #32
 800f61a:	46bd      	mov	sp, r7
 800f61c:	bd80      	pop	{r7, pc}
 800f61e:	bf00      	nop
 800f620:	20002bf0 	.word	0x20002bf0

0800f624 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f624:	b580      	push	{r7, lr}
 800f626:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 800f62a:	af00      	add	r7, sp, #0
 800f62c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f630:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f634:	6018      	str	r0, [r3, #0]
 800f636:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f63a:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800f63e:	6019      	str	r1, [r3, #0]
 800f640:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f644:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f648:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f64a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f64e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d101      	bne.n	800f65c <f_open+0x38>
 800f658:	2309      	movs	r3, #9
 800f65a:	e2aa      	b.n	800fbb2 <f_open+0x58e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f65c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f660:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f664:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800f668:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 800f66c:	7812      	ldrb	r2, [r2, #0]
 800f66e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800f672:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800f674:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f678:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f67c:	781a      	ldrb	r2, [r3, #0]
 800f67e:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 800f682:	f107 0308 	add.w	r3, r7, #8
 800f686:	4618      	mov	r0, r3
 800f688:	f7ff fc98 	bl	800efbc <find_volume>
 800f68c:	4603      	mov	r3, r0
 800f68e:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
	if (res == FR_OK) {
 800f692:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f696:	2b00      	cmp	r3, #0
 800f698:	f040 8276 	bne.w	800fb88 <f_open+0x564>
		dj.obj.fs = fs;
 800f69c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f6a0:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
		INIT_NAMBUF(fs);
 800f6a4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f6a8:	f107 0214 	add.w	r2, r7, #20
 800f6ac:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800f6ae:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f6b2:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800f6b6:	681a      	ldr	r2, [r3, #0]
 800f6b8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f6bc:	4611      	mov	r1, r2
 800f6be:	4618      	mov	r0, r3
 800f6c0:	f7ff fb6c 	bl	800ed9c <follow_path>
 800f6c4:	4603      	mov	r3, r0
 800f6c6:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f6ca:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d11c      	bne.n	800f70c <f_open+0xe8>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f6d2:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 800f6d6:	b25b      	sxtb	r3, r3
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	da03      	bge.n	800f6e4 <f_open+0xc0>
				res = FR_INVALID_NAME;
 800f6dc:	2306      	movs	r3, #6
 800f6de:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 800f6e2:	e013      	b.n	800f70c <f_open+0xe8>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f6e4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f6e8:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f6ec:	781b      	ldrb	r3, [r3, #0]
 800f6ee:	2b01      	cmp	r3, #1
 800f6f0:	bf8c      	ite	hi
 800f6f2:	2301      	movhi	r3, #1
 800f6f4:	2300      	movls	r3, #0
 800f6f6:	b2db      	uxtb	r3, r3
 800f6f8:	461a      	mov	r2, r3
 800f6fa:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f6fe:	4611      	mov	r1, r2
 800f700:	4618      	mov	r0, r3
 800f702:	f7fd fedf 	bl	800d4c4 <chk_lock>
 800f706:	4603      	mov	r3, r0
 800f708:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f70c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f710:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f714:	781b      	ldrb	r3, [r3, #0]
 800f716:	f003 031c 	and.w	r3, r3, #28
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	f000 80a7 	beq.w	800f86e <f_open+0x24a>
			if (res != FR_OK) {					/* No file, create new */
 800f720:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f724:	2b00      	cmp	r3, #0
 800f726:	d01f      	beq.n	800f768 <f_open+0x144>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f728:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f72c:	2b04      	cmp	r3, #4
 800f72e:	d10e      	bne.n	800f74e <f_open+0x12a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f730:	f7fd ff24 	bl	800d57c <enq_lock>
 800f734:	4603      	mov	r3, r0
 800f736:	2b00      	cmp	r3, #0
 800f738:	d006      	beq.n	800f748 <f_open+0x124>
 800f73a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f73e:	4618      	mov	r0, r3
 800f740:	f7ff f87c 	bl	800e83c <dir_register>
 800f744:	4603      	mov	r3, r0
 800f746:	e000      	b.n	800f74a <f_open+0x126>
 800f748:	2312      	movs	r3, #18
 800f74a:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f74e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f752:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f756:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800f75a:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 800f75e:	7812      	ldrb	r2, [r2, #0]
 800f760:	f042 0208 	orr.w	r2, r2, #8
 800f764:	701a      	strb	r2, [r3, #0]
 800f766:	e015      	b.n	800f794 <f_open+0x170>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f768:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 800f76c:	f003 0311 	and.w	r3, r3, #17
 800f770:	2b00      	cmp	r3, #0
 800f772:	d003      	beq.n	800f77c <f_open+0x158>
					res = FR_DENIED;
 800f774:	2307      	movs	r3, #7
 800f776:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 800f77a:	e00b      	b.n	800f794 <f_open+0x170>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f77c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f780:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f784:	781b      	ldrb	r3, [r3, #0]
 800f786:	f003 0304 	and.w	r3, r3, #4
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d002      	beq.n	800f794 <f_open+0x170>
 800f78e:	2308      	movs	r3, #8
 800f790:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f794:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f798:	2b00      	cmp	r3, #0
 800f79a:	f040 8088 	bne.w	800f8ae <f_open+0x28a>
 800f79e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f7a2:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f7a6:	781b      	ldrb	r3, [r3, #0]
 800f7a8:	f003 0308 	and.w	r3, r3, #8
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d07e      	beq.n	800f8ae <f_open+0x28a>
				dw = GET_FATTIME();
 800f7b0:	f7fd fc5a 	bl	800d068 <get_fattime>
 800f7b4:	f8c7 0258 	str.w	r0, [r7, #600]	@ 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f7b8:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800f7bc:	330e      	adds	r3, #14
 800f7be:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	f7fd fda2 	bl	800d30c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f7c8:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800f7cc:	3316      	adds	r3, #22
 800f7ce:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	f7fd fd9a 	bl	800d30c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f7d8:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800f7dc:	330b      	adds	r3, #11
 800f7de:	2220      	movs	r2, #32
 800f7e0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f7e2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f7e6:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800f7ea:	4611      	mov	r1, r2
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	f7fe fd9e 	bl	800e32e <ld_clust>
 800f7f2:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f7f6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f7fa:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 800f7fe:	2200      	movs	r2, #0
 800f800:	4618      	mov	r0, r3
 800f802:	f7fe fdb3 	bl	800e36c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f806:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800f80a:	331c      	adds	r3, #28
 800f80c:	2100      	movs	r1, #0
 800f80e:	4618      	mov	r0, r3
 800f810:	f7fd fd7c 	bl	800d30c <st_dword>
					fs->wflag = 1;
 800f814:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f818:	2201      	movs	r2, #1
 800f81a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f81c:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800f820:	2b00      	cmp	r3, #0
 800f822:	d044      	beq.n	800f8ae <f_open+0x28a>
						dw = fs->winsect;
 800f824:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f82a:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
						res = remove_chain(&dj.obj, cl, 0);
 800f82e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f832:	2200      	movs	r2, #0
 800f834:	f8d7 1254 	ldr.w	r1, [r7, #596]	@ 0x254
 800f838:	4618      	mov	r0, r3
 800f83a:	f7fe fa9d 	bl	800dd78 <remove_chain>
 800f83e:	4603      	mov	r3, r0
 800f840:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
						if (res == FR_OK) {
 800f844:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d130      	bne.n	800f8ae <f_open+0x28a>
							res = move_window(fs, dw);
 800f84c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f850:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 800f854:	4618      	mov	r0, r3
 800f856:	f7fd ffe5 	bl	800d824 <move_window>
 800f85a:	4603      	mov	r3, r0
 800f85c:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f860:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f864:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 800f868:	3a01      	subs	r2, #1
 800f86a:	619a      	str	r2, [r3, #24]
 800f86c:	e01f      	b.n	800f8ae <f_open+0x28a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f86e:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f872:	2b00      	cmp	r3, #0
 800f874:	d11b      	bne.n	800f8ae <f_open+0x28a>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f876:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 800f87a:	f003 0310 	and.w	r3, r3, #16
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d003      	beq.n	800f88a <f_open+0x266>
					res = FR_NO_FILE;
 800f882:	2304      	movs	r3, #4
 800f884:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 800f888:	e011      	b.n	800f8ae <f_open+0x28a>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f88a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f88e:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f892:	781b      	ldrb	r3, [r3, #0]
 800f894:	f003 0302 	and.w	r3, r3, #2
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d008      	beq.n	800f8ae <f_open+0x28a>
 800f89c:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 800f8a0:	f003 0301 	and.w	r3, r3, #1
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d002      	beq.n	800f8ae <f_open+0x28a>
						res = FR_DENIED;
 800f8a8:	2307      	movs	r3, #7
 800f8aa:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 800f8ae:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d148      	bne.n	800f948 <f_open+0x324>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f8b6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f8ba:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f8be:	781b      	ldrb	r3, [r3, #0]
 800f8c0:	f003 0308 	and.w	r3, r3, #8
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d00b      	beq.n	800f8e0 <f_open+0x2bc>
				mode |= FA_MODIFIED;
 800f8c8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f8cc:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f8d0:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800f8d4:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 800f8d8:	7812      	ldrb	r2, [r2, #0]
 800f8da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f8de:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f8e0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f8e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f8e6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f8ea:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800f8f2:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800f8f6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f8fa:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f902:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f906:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f90a:	781b      	ldrb	r3, [r3, #0]
 800f90c:	2b01      	cmp	r3, #1
 800f90e:	bf8c      	ite	hi
 800f910:	2301      	movhi	r3, #1
 800f912:	2300      	movls	r3, #0
 800f914:	b2db      	uxtb	r3, r3
 800f916:	461a      	mov	r2, r3
 800f918:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f91c:	4611      	mov	r1, r2
 800f91e:	4618      	mov	r0, r3
 800f920:	f7fd fe4e 	bl	800d5c0 <inc_lock>
 800f924:	4602      	mov	r2, r0
 800f926:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f92a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f932:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f936:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	691b      	ldr	r3, [r3, #16]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d102      	bne.n	800f948 <f_open+0x324>
 800f942:	2302      	movs	r3, #2
 800f944:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f948:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	f040 811b 	bne.w	800fb88 <f_open+0x564>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f952:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f956:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800f95a:	4611      	mov	r1, r2
 800f95c:	4618      	mov	r0, r3
 800f95e:	f7fe fce6 	bl	800e32e <ld_clust>
 800f962:	4602      	mov	r2, r0
 800f964:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f968:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f970:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800f974:	331c      	adds	r3, #28
 800f976:	4618      	mov	r0, r3
 800f978:	f7fd fc8a 	bl	800d290 <ld_dword>
 800f97c:	4602      	mov	r2, r0
 800f97e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f982:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f98a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f98e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	2200      	movs	r2, #0
 800f996:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f998:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 800f99c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f9a0:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f9a8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f9ac:	88da      	ldrh	r2, [r3, #6]
 800f9ae:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f9b2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f9ba:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f9be:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800f9c8:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 800f9cc:	7812      	ldrb	r2, [r2, #0]
 800f9ce:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f9d0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f9d4:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	2200      	movs	r2, #0
 800f9dc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f9de:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f9e2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f9ec:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f9f0:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f9fa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f9fe:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	3330      	adds	r3, #48	@ 0x30
 800fa06:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800fa0a:	2100      	movs	r1, #0
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f7fd fcca 	bl	800d3a6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800fa12:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800fa16:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800fa1a:	781b      	ldrb	r3, [r3, #0]
 800fa1c:	f003 0320 	and.w	r3, r3, #32
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	f000 80b1 	beq.w	800fb88 <f_open+0x564>
 800fa26:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800fa2a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	68db      	ldr	r3, [r3, #12]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	f000 80a8 	beq.w	800fb88 <f_open+0x564>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800fa38:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800fa3c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	68da      	ldr	r2, [r3, #12]
 800fa44:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800fa48:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800fa50:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800fa54:	895b      	ldrh	r3, [r3, #10]
 800fa56:	461a      	mov	r2, r3
 800fa58:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800fa5c:	899b      	ldrh	r3, [r3, #12]
 800fa5e:	fb02 f303 	mul.w	r3, r2, r3
 800fa62:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800fa66:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800fa6a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	689b      	ldr	r3, [r3, #8]
 800fa72:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fa76:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800fa7a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	68db      	ldr	r3, [r3, #12]
 800fa82:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 800fa86:	e021      	b.n	800facc <f_open+0x4a8>
					clst = get_fat(&fp->obj, clst);
 800fa88:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800fa8c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 800fa96:	4618      	mov	r0, r3
 800fa98:	f7fd ff81 	bl	800d99e <get_fat>
 800fa9c:	f8c7 0260 	str.w	r0, [r7, #608]	@ 0x260
					if (clst <= 1) res = FR_INT_ERR;
 800faa0:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 800faa4:	2b01      	cmp	r3, #1
 800faa6:	d802      	bhi.n	800faae <f_open+0x48a>
 800faa8:	2302      	movs	r3, #2
 800faaa:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800faae:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 800fab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fab6:	d102      	bne.n	800fabe <f_open+0x49a>
 800fab8:	2301      	movs	r3, #1
 800faba:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fabe:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800fac2:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 800fac6:	1ad3      	subs	r3, r2, r3
 800fac8:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 800facc:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d105      	bne.n	800fae0 <f_open+0x4bc>
 800fad4:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800fad8:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 800fadc:	429a      	cmp	r2, r3
 800fade:	d8d3      	bhi.n	800fa88 <f_open+0x464>
				}
				fp->clust = clst;
 800fae0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800fae4:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 800faee:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800faf0:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d147      	bne.n	800fb88 <f_open+0x564>
 800faf8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800fafc:	899b      	ldrh	r3, [r3, #12]
 800fafe:	461a      	mov	r2, r3
 800fb00:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800fb04:	fbb3 f1f2 	udiv	r1, r3, r2
 800fb08:	fb01 f202 	mul.w	r2, r1, r2
 800fb0c:	1a9b      	subs	r3, r3, r2
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d03a      	beq.n	800fb88 <f_open+0x564>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fb12:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800fb16:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f7fd ff20 	bl	800d960 <clust2sect>
 800fb20:	f8c7 024c 	str.w	r0, [r7, #588]	@ 0x24c
 800fb24:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d103      	bne.n	800fb34 <f_open+0x510>
						res = FR_INT_ERR;
 800fb2c:	2302      	movs	r3, #2
 800fb2e:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 800fb32:	e029      	b.n	800fb88 <f_open+0x564>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fb34:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800fb38:	899b      	ldrh	r3, [r3, #12]
 800fb3a:	461a      	mov	r2, r3
 800fb3c:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800fb40:	fbb3 f2f2 	udiv	r2, r3, r2
 800fb44:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800fb48:	441a      	add	r2, r3
 800fb4a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800fb4e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fb56:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800fb5a:	7858      	ldrb	r0, [r3, #1]
 800fb5c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800fb60:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fb6a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800fb6e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	6a1a      	ldr	r2, [r3, #32]
 800fb76:	2301      	movs	r3, #1
 800fb78:	f7fd fb14 	bl	800d1a4 <disk_read>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d002      	beq.n	800fb88 <f_open+0x564>
 800fb82:	2301      	movs	r3, #1
 800fb84:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800fb88:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d006      	beq.n	800fb9e <f_open+0x57a>
 800fb90:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800fb94:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fb9e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800fba2:	f897 2267 	ldrb.w	r2, [r7, #615]	@ 0x267
 800fba6:	4611      	mov	r1, r2
 800fba8:	4618      	mov	r0, r3
 800fbaa:	f7fd fc6f 	bl	800d48c <unlock_fs>
 800fbae:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
}
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f507 771a 	add.w	r7, r7, #616	@ 0x268
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	bd80      	pop	{r7, pc}

0800fbbc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b08c      	sub	sp, #48	@ 0x30
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	60f8      	str	r0, [r7, #12]
 800fbc4:	60b9      	str	r1, [r7, #8]
 800fbc6:	607a      	str	r2, [r7, #4]
 800fbc8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800fbca:	68bb      	ldr	r3, [r7, #8]
 800fbcc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	f107 0210 	add.w	r2, r7, #16
 800fbda:	4611      	mov	r1, r2
 800fbdc:	4618      	mov	r0, r3
 800fbde:	f7ff fc75 	bl	800f4cc <validate>
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fbe8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d107      	bne.n	800fc00 <f_write+0x44>
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	7d5b      	ldrb	r3, [r3, #21]
 800fbf4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800fbf8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d009      	beq.n	800fc14 <f_write+0x58>
 800fc00:	693b      	ldr	r3, [r7, #16]
 800fc02:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800fc06:	4611      	mov	r1, r2
 800fc08:	4618      	mov	r0, r3
 800fc0a:	f7fd fc3f 	bl	800d48c <unlock_fs>
 800fc0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fc12:	e192      	b.n	800ff3a <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	7d1b      	ldrb	r3, [r3, #20]
 800fc18:	f003 0302 	and.w	r3, r3, #2
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d106      	bne.n	800fc2e <f_write+0x72>
 800fc20:	693b      	ldr	r3, [r7, #16]
 800fc22:	2107      	movs	r1, #7
 800fc24:	4618      	mov	r0, r3
 800fc26:	f7fd fc31 	bl	800d48c <unlock_fs>
 800fc2a:	2307      	movs	r3, #7
 800fc2c:	e185      	b.n	800ff3a <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	699a      	ldr	r2, [r3, #24]
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	441a      	add	r2, r3
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	699b      	ldr	r3, [r3, #24]
 800fc3a:	429a      	cmp	r2, r3
 800fc3c:	f080 816a 	bcs.w	800ff14 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	699b      	ldr	r3, [r3, #24]
 800fc44:	43db      	mvns	r3, r3
 800fc46:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800fc48:	e164      	b.n	800ff14 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	699b      	ldr	r3, [r3, #24]
 800fc4e:	693a      	ldr	r2, [r7, #16]
 800fc50:	8992      	ldrh	r2, [r2, #12]
 800fc52:	fbb3 f1f2 	udiv	r1, r3, r2
 800fc56:	fb01 f202 	mul.w	r2, r1, r2
 800fc5a:	1a9b      	subs	r3, r3, r2
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	f040 810f 	bne.w	800fe80 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	699b      	ldr	r3, [r3, #24]
 800fc66:	693a      	ldr	r2, [r7, #16]
 800fc68:	8992      	ldrh	r2, [r2, #12]
 800fc6a:	fbb3 f3f2 	udiv	r3, r3, r2
 800fc6e:	693a      	ldr	r2, [r7, #16]
 800fc70:	8952      	ldrh	r2, [r2, #10]
 800fc72:	3a01      	subs	r2, #1
 800fc74:	4013      	ands	r3, r2
 800fc76:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800fc78:	69bb      	ldr	r3, [r7, #24]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d14d      	bne.n	800fd1a <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	699b      	ldr	r3, [r3, #24]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d10c      	bne.n	800fca0 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	689b      	ldr	r3, [r3, #8]
 800fc8a:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800fc8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d11a      	bne.n	800fcc8 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	2100      	movs	r1, #0
 800fc96:	4618      	mov	r0, r3
 800fc98:	f7fe f8d3 	bl	800de42 <create_chain>
 800fc9c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800fc9e:	e013      	b.n	800fcc8 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d007      	beq.n	800fcb8 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	699b      	ldr	r3, [r3, #24]
 800fcac:	4619      	mov	r1, r3
 800fcae:	68f8      	ldr	r0, [r7, #12]
 800fcb0:	f7fe f95f 	bl	800df72 <clmt_clust>
 800fcb4:	62b8      	str	r0, [r7, #40]	@ 0x28
 800fcb6:	e007      	b.n	800fcc8 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800fcb8:	68fa      	ldr	r2, [r7, #12]
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	69db      	ldr	r3, [r3, #28]
 800fcbe:	4619      	mov	r1, r3
 800fcc0:	4610      	mov	r0, r2
 800fcc2:	f7fe f8be 	bl	800de42 <create_chain>
 800fcc6:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fcc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	f000 8127 	beq.w	800ff1e <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fcd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcd2:	2b01      	cmp	r3, #1
 800fcd4:	d109      	bne.n	800fcea <f_write+0x12e>
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	2202      	movs	r2, #2
 800fcda:	755a      	strb	r2, [r3, #21]
 800fcdc:	693b      	ldr	r3, [r7, #16]
 800fcde:	2102      	movs	r1, #2
 800fce0:	4618      	mov	r0, r3
 800fce2:	f7fd fbd3 	bl	800d48c <unlock_fs>
 800fce6:	2302      	movs	r3, #2
 800fce8:	e127      	b.n	800ff3a <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fcea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcf0:	d109      	bne.n	800fd06 <f_write+0x14a>
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	2201      	movs	r2, #1
 800fcf6:	755a      	strb	r2, [r3, #21]
 800fcf8:	693b      	ldr	r3, [r7, #16]
 800fcfa:	2101      	movs	r1, #1
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f7fd fbc5 	bl	800d48c <unlock_fs>
 800fd02:	2301      	movs	r3, #1
 800fd04:	e119      	b.n	800ff3a <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fd0a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	689b      	ldr	r3, [r3, #8]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d102      	bne.n	800fd1a <f_write+0x15e>
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fd18:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	7d1b      	ldrb	r3, [r3, #20]
 800fd1e:	b25b      	sxtb	r3, r3
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	da1d      	bge.n	800fd60 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fd24:	693b      	ldr	r3, [r7, #16]
 800fd26:	7858      	ldrb	r0, [r3, #1]
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	6a1a      	ldr	r2, [r3, #32]
 800fd32:	2301      	movs	r3, #1
 800fd34:	f7fd fa56 	bl	800d1e4 <disk_write>
 800fd38:	4603      	mov	r3, r0
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d009      	beq.n	800fd52 <f_write+0x196>
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	2201      	movs	r2, #1
 800fd42:	755a      	strb	r2, [r3, #21]
 800fd44:	693b      	ldr	r3, [r7, #16]
 800fd46:	2101      	movs	r1, #1
 800fd48:	4618      	mov	r0, r3
 800fd4a:	f7fd fb9f 	bl	800d48c <unlock_fs>
 800fd4e:	2301      	movs	r3, #1
 800fd50:	e0f3      	b.n	800ff3a <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	7d1b      	ldrb	r3, [r3, #20]
 800fd56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fd5a:	b2da      	uxtb	r2, r3
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fd60:	693a      	ldr	r2, [r7, #16]
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	69db      	ldr	r3, [r3, #28]
 800fd66:	4619      	mov	r1, r3
 800fd68:	4610      	mov	r0, r2
 800fd6a:	f7fd fdf9 	bl	800d960 <clust2sect>
 800fd6e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fd70:	697b      	ldr	r3, [r7, #20]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d109      	bne.n	800fd8a <f_write+0x1ce>
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	2202      	movs	r2, #2
 800fd7a:	755a      	strb	r2, [r3, #21]
 800fd7c:	693b      	ldr	r3, [r7, #16]
 800fd7e:	2102      	movs	r1, #2
 800fd80:	4618      	mov	r0, r3
 800fd82:	f7fd fb83 	bl	800d48c <unlock_fs>
 800fd86:	2302      	movs	r3, #2
 800fd88:	e0d7      	b.n	800ff3a <f_write+0x37e>
			sect += csect;
 800fd8a:	697a      	ldr	r2, [r7, #20]
 800fd8c:	69bb      	ldr	r3, [r7, #24]
 800fd8e:	4413      	add	r3, r2
 800fd90:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800fd92:	693b      	ldr	r3, [r7, #16]
 800fd94:	899b      	ldrh	r3, [r3, #12]
 800fd96:	461a      	mov	r2, r3
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	fbb3 f3f2 	udiv	r3, r3, r2
 800fd9e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800fda0:	6a3b      	ldr	r3, [r7, #32]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d048      	beq.n	800fe38 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fda6:	69ba      	ldr	r2, [r7, #24]
 800fda8:	6a3b      	ldr	r3, [r7, #32]
 800fdaa:	4413      	add	r3, r2
 800fdac:	693a      	ldr	r2, [r7, #16]
 800fdae:	8952      	ldrh	r2, [r2, #10]
 800fdb0:	4293      	cmp	r3, r2
 800fdb2:	d905      	bls.n	800fdc0 <f_write+0x204>
					cc = fs->csize - csect;
 800fdb4:	693b      	ldr	r3, [r7, #16]
 800fdb6:	895b      	ldrh	r3, [r3, #10]
 800fdb8:	461a      	mov	r2, r3
 800fdba:	69bb      	ldr	r3, [r7, #24]
 800fdbc:	1ad3      	subs	r3, r2, r3
 800fdbe:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fdc0:	693b      	ldr	r3, [r7, #16]
 800fdc2:	7858      	ldrb	r0, [r3, #1]
 800fdc4:	6a3b      	ldr	r3, [r7, #32]
 800fdc6:	697a      	ldr	r2, [r7, #20]
 800fdc8:	69f9      	ldr	r1, [r7, #28]
 800fdca:	f7fd fa0b 	bl	800d1e4 <disk_write>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d009      	beq.n	800fde8 <f_write+0x22c>
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	2201      	movs	r2, #1
 800fdd8:	755a      	strb	r2, [r3, #21]
 800fdda:	693b      	ldr	r3, [r7, #16]
 800fddc:	2101      	movs	r1, #1
 800fdde:	4618      	mov	r0, r3
 800fde0:	f7fd fb54 	bl	800d48c <unlock_fs>
 800fde4:	2301      	movs	r3, #1
 800fde6:	e0a8      	b.n	800ff3a <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	6a1a      	ldr	r2, [r3, #32]
 800fdec:	697b      	ldr	r3, [r7, #20]
 800fdee:	1ad3      	subs	r3, r2, r3
 800fdf0:	6a3a      	ldr	r2, [r7, #32]
 800fdf2:	429a      	cmp	r2, r3
 800fdf4:	d918      	bls.n	800fe28 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	6a1a      	ldr	r2, [r3, #32]
 800fe00:	697b      	ldr	r3, [r7, #20]
 800fe02:	1ad3      	subs	r3, r2, r3
 800fe04:	693a      	ldr	r2, [r7, #16]
 800fe06:	8992      	ldrh	r2, [r2, #12]
 800fe08:	fb02 f303 	mul.w	r3, r2, r3
 800fe0c:	69fa      	ldr	r2, [r7, #28]
 800fe0e:	18d1      	adds	r1, r2, r3
 800fe10:	693b      	ldr	r3, [r7, #16]
 800fe12:	899b      	ldrh	r3, [r3, #12]
 800fe14:	461a      	mov	r2, r3
 800fe16:	f7fd faa5 	bl	800d364 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	7d1b      	ldrb	r3, [r3, #20]
 800fe1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fe22:	b2da      	uxtb	r2, r3
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800fe28:	693b      	ldr	r3, [r7, #16]
 800fe2a:	899b      	ldrh	r3, [r3, #12]
 800fe2c:	461a      	mov	r2, r3
 800fe2e:	6a3b      	ldr	r3, [r7, #32]
 800fe30:	fb02 f303 	mul.w	r3, r2, r3
 800fe34:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800fe36:	e050      	b.n	800feda <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	6a1b      	ldr	r3, [r3, #32]
 800fe3c:	697a      	ldr	r2, [r7, #20]
 800fe3e:	429a      	cmp	r2, r3
 800fe40:	d01b      	beq.n	800fe7a <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	699a      	ldr	r2, [r3, #24]
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fe4a:	429a      	cmp	r2, r3
 800fe4c:	d215      	bcs.n	800fe7a <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800fe4e:	693b      	ldr	r3, [r7, #16]
 800fe50:	7858      	ldrb	r0, [r3, #1]
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fe58:	2301      	movs	r3, #1
 800fe5a:	697a      	ldr	r2, [r7, #20]
 800fe5c:	f7fd f9a2 	bl	800d1a4 <disk_read>
 800fe60:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d009      	beq.n	800fe7a <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	2201      	movs	r2, #1
 800fe6a:	755a      	strb	r2, [r3, #21]
 800fe6c:	693b      	ldr	r3, [r7, #16]
 800fe6e:	2101      	movs	r1, #1
 800fe70:	4618      	mov	r0, r3
 800fe72:	f7fd fb0b 	bl	800d48c <unlock_fs>
 800fe76:	2301      	movs	r3, #1
 800fe78:	e05f      	b.n	800ff3a <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	697a      	ldr	r2, [r7, #20]
 800fe7e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800fe80:	693b      	ldr	r3, [r7, #16]
 800fe82:	899b      	ldrh	r3, [r3, #12]
 800fe84:	4618      	mov	r0, r3
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	699b      	ldr	r3, [r3, #24]
 800fe8a:	693a      	ldr	r2, [r7, #16]
 800fe8c:	8992      	ldrh	r2, [r2, #12]
 800fe8e:	fbb3 f1f2 	udiv	r1, r3, r2
 800fe92:	fb01 f202 	mul.w	r2, r1, r2
 800fe96:	1a9b      	subs	r3, r3, r2
 800fe98:	1ac3      	subs	r3, r0, r3
 800fe9a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800fe9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	429a      	cmp	r2, r3
 800fea2:	d901      	bls.n	800fea8 <f_write+0x2ec>
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	699b      	ldr	r3, [r3, #24]
 800feb2:	693a      	ldr	r2, [r7, #16]
 800feb4:	8992      	ldrh	r2, [r2, #12]
 800feb6:	fbb3 f0f2 	udiv	r0, r3, r2
 800feba:	fb00 f202 	mul.w	r2, r0, r2
 800febe:	1a9b      	subs	r3, r3, r2
 800fec0:	440b      	add	r3, r1
 800fec2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fec4:	69f9      	ldr	r1, [r7, #28]
 800fec6:	4618      	mov	r0, r3
 800fec8:	f7fd fa4c 	bl	800d364 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	7d1b      	ldrb	r3, [r3, #20]
 800fed0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800fed4:	b2da      	uxtb	r2, r3
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800feda:	69fa      	ldr	r2, [r7, #28]
 800fedc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fede:	4413      	add	r3, r2
 800fee0:	61fb      	str	r3, [r7, #28]
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	699a      	ldr	r2, [r3, #24]
 800fee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fee8:	441a      	add	r2, r3
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	619a      	str	r2, [r3, #24]
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	68da      	ldr	r2, [r3, #12]
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	699b      	ldr	r3, [r3, #24]
 800fef6:	429a      	cmp	r2, r3
 800fef8:	bf38      	it	cc
 800fefa:	461a      	movcc	r2, r3
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	60da      	str	r2, [r3, #12]
 800ff00:	683b      	ldr	r3, [r7, #0]
 800ff02:	681a      	ldr	r2, [r3, #0]
 800ff04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff06:	441a      	add	r2, r3
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	601a      	str	r2, [r3, #0]
 800ff0c:	687a      	ldr	r2, [r7, #4]
 800ff0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff10:	1ad3      	subs	r3, r2, r3
 800ff12:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	f47f ae97 	bne.w	800fc4a <f_write+0x8e>
 800ff1c:	e000      	b.n	800ff20 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ff1e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	7d1b      	ldrb	r3, [r3, #20]
 800ff24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff28:	b2da      	uxtb	r2, r3
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ff2e:	693b      	ldr	r3, [r7, #16]
 800ff30:	2100      	movs	r1, #0
 800ff32:	4618      	mov	r0, r3
 800ff34:	f7fd faaa 	bl	800d48c <unlock_fs>
 800ff38:	2300      	movs	r3, #0
}
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	3730      	adds	r7, #48	@ 0x30
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}

0800ff42 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ff42:	b580      	push	{r7, lr}
 800ff44:	b086      	sub	sp, #24
 800ff46:	af00      	add	r7, sp, #0
 800ff48:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	f107 0208 	add.w	r2, r7, #8
 800ff50:	4611      	mov	r1, r2
 800ff52:	4618      	mov	r0, r3
 800ff54:	f7ff faba 	bl	800f4cc <validate>
 800ff58:	4603      	mov	r3, r0
 800ff5a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ff5c:	7dfb      	ldrb	r3, [r7, #23]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d16d      	bne.n	801003e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	7d1b      	ldrb	r3, [r3, #20]
 800ff66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d067      	beq.n	801003e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	7d1b      	ldrb	r3, [r3, #20]
 800ff72:	b25b      	sxtb	r3, r3
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	da1a      	bge.n	800ffae <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ff78:	68bb      	ldr	r3, [r7, #8]
 800ff7a:	7858      	ldrb	r0, [r3, #1]
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	6a1a      	ldr	r2, [r3, #32]
 800ff86:	2301      	movs	r3, #1
 800ff88:	f7fd f92c 	bl	800d1e4 <disk_write>
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d006      	beq.n	800ffa0 <f_sync+0x5e>
 800ff92:	68bb      	ldr	r3, [r7, #8]
 800ff94:	2101      	movs	r1, #1
 800ff96:	4618      	mov	r0, r3
 800ff98:	f7fd fa78 	bl	800d48c <unlock_fs>
 800ff9c:	2301      	movs	r3, #1
 800ff9e:	e055      	b.n	801004c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	7d1b      	ldrb	r3, [r3, #20]
 800ffa4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ffa8:	b2da      	uxtb	r2, r3
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ffae:	f7fd f85b 	bl	800d068 <get_fattime>
 800ffb2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ffb4:	68ba      	ldr	r2, [r7, #8]
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffba:	4619      	mov	r1, r3
 800ffbc:	4610      	mov	r0, r2
 800ffbe:	f7fd fc31 	bl	800d824 <move_window>
 800ffc2:	4603      	mov	r3, r0
 800ffc4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ffc6:	7dfb      	ldrb	r3, [r7, #23]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d138      	bne.n	801003e <f_sync+0xfc>
					dir = fp->dir_ptr;
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ffd0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	330b      	adds	r3, #11
 800ffd6:	781a      	ldrb	r2, [r3, #0]
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	330b      	adds	r3, #11
 800ffdc:	f042 0220 	orr.w	r2, r2, #32
 800ffe0:	b2d2      	uxtb	r2, r2
 800ffe2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	6818      	ldr	r0, [r3, #0]
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	689b      	ldr	r3, [r3, #8]
 800ffec:	461a      	mov	r2, r3
 800ffee:	68f9      	ldr	r1, [r7, #12]
 800fff0:	f7fe f9bc 	bl	800e36c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	f103 021c 	add.w	r2, r3, #28
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	68db      	ldr	r3, [r3, #12]
 800fffe:	4619      	mov	r1, r3
 8010000:	4610      	mov	r0, r2
 8010002:	f7fd f983 	bl	800d30c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	3316      	adds	r3, #22
 801000a:	6939      	ldr	r1, [r7, #16]
 801000c:	4618      	mov	r0, r3
 801000e:	f7fd f97d 	bl	800d30c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	3312      	adds	r3, #18
 8010016:	2100      	movs	r1, #0
 8010018:	4618      	mov	r0, r3
 801001a:	f7fd f95c 	bl	800d2d6 <st_word>
					fs->wflag = 1;
 801001e:	68bb      	ldr	r3, [r7, #8]
 8010020:	2201      	movs	r2, #1
 8010022:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010024:	68bb      	ldr	r3, [r7, #8]
 8010026:	4618      	mov	r0, r3
 8010028:	f7fd fc2a 	bl	800d880 <sync_fs>
 801002c:	4603      	mov	r3, r0
 801002e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	7d1b      	ldrb	r3, [r3, #20]
 8010034:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010038:	b2da      	uxtb	r2, r3
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801003e:	68bb      	ldr	r3, [r7, #8]
 8010040:	7dfa      	ldrb	r2, [r7, #23]
 8010042:	4611      	mov	r1, r2
 8010044:	4618      	mov	r0, r3
 8010046:	f7fd fa21 	bl	800d48c <unlock_fs>
 801004a:	7dfb      	ldrb	r3, [r7, #23]
}
 801004c:	4618      	mov	r0, r3
 801004e:	3718      	adds	r7, #24
 8010050:	46bd      	mov	sp, r7
 8010052:	bd80      	pop	{r7, pc}

08010054 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b084      	sub	sp, #16
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801005c:	6878      	ldr	r0, [r7, #4]
 801005e:	f7ff ff70 	bl	800ff42 <f_sync>
 8010062:	4603      	mov	r3, r0
 8010064:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010066:	7bfb      	ldrb	r3, [r7, #15]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d11d      	bne.n	80100a8 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	f107 0208 	add.w	r2, r7, #8
 8010072:	4611      	mov	r1, r2
 8010074:	4618      	mov	r0, r3
 8010076:	f7ff fa29 	bl	800f4cc <validate>
 801007a:	4603      	mov	r3, r0
 801007c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801007e:	7bfb      	ldrb	r3, [r7, #15]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d111      	bne.n	80100a8 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	691b      	ldr	r3, [r3, #16]
 8010088:	4618      	mov	r0, r3
 801008a:	f7fd fb27 	bl	800d6dc <dec_lock>
 801008e:	4603      	mov	r3, r0
 8010090:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010092:	7bfb      	ldrb	r3, [r7, #15]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d102      	bne.n	801009e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	2200      	movs	r2, #0
 801009c:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 801009e:	68bb      	ldr	r3, [r7, #8]
 80100a0:	2100      	movs	r1, #0
 80100a2:	4618      	mov	r0, r3
 80100a4:	f7fd f9f2 	bl	800d48c <unlock_fs>
#endif
		}
	}
	return res;
 80100a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80100aa:	4618      	mov	r0, r3
 80100ac:	3710      	adds	r7, #16
 80100ae:	46bd      	mov	sp, r7
 80100b0:	bd80      	pop	{r7, pc}

080100b2 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80100b2:	b580      	push	{r7, lr}
 80100b4:	b092      	sub	sp, #72	@ 0x48
 80100b6:	af00      	add	r7, sp, #0
 80100b8:	60f8      	str	r0, [r7, #12]
 80100ba:	60b9      	str	r1, [r7, #8]
 80100bc:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80100be:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80100c2:	f107 030c 	add.w	r3, r7, #12
 80100c6:	2200      	movs	r2, #0
 80100c8:	4618      	mov	r0, r3
 80100ca:	f7fe ff77 	bl	800efbc <find_volume>
 80100ce:	4603      	mov	r3, r0
 80100d0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 80100d4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80100d8:	2b00      	cmp	r3, #0
 80100da:	f040 8099 	bne.w	8010210 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80100de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80100e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100e6:	69da      	ldr	r2, [r3, #28]
 80100e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100ea:	6a1b      	ldr	r3, [r3, #32]
 80100ec:	3b02      	subs	r3, #2
 80100ee:	429a      	cmp	r2, r3
 80100f0:	d804      	bhi.n	80100fc <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80100f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100f4:	69da      	ldr	r2, [r3, #28]
 80100f6:	68bb      	ldr	r3, [r7, #8]
 80100f8:	601a      	str	r2, [r3, #0]
 80100fa:	e089      	b.n	8010210 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80100fc:	2300      	movs	r3, #0
 80100fe:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8010100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010102:	781b      	ldrb	r3, [r3, #0]
 8010104:	2b01      	cmp	r3, #1
 8010106:	d128      	bne.n	801015a <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8010108:	2302      	movs	r3, #2
 801010a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801010c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801010e:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8010110:	f107 0314 	add.w	r3, r7, #20
 8010114:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010116:	4618      	mov	r0, r3
 8010118:	f7fd fc41 	bl	800d99e <get_fat>
 801011c:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 801011e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010124:	d103      	bne.n	801012e <f_getfree+0x7c>
 8010126:	2301      	movs	r3, #1
 8010128:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801012c:	e063      	b.n	80101f6 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 801012e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010130:	2b01      	cmp	r3, #1
 8010132:	d103      	bne.n	801013c <f_getfree+0x8a>
 8010134:	2302      	movs	r3, #2
 8010136:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801013a:	e05c      	b.n	80101f6 <f_getfree+0x144>
					if (stat == 0) nfree++;
 801013c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801013e:	2b00      	cmp	r3, #0
 8010140:	d102      	bne.n	8010148 <f_getfree+0x96>
 8010142:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010144:	3301      	adds	r3, #1
 8010146:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8010148:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801014a:	3301      	adds	r3, #1
 801014c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801014e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010150:	6a1b      	ldr	r3, [r3, #32]
 8010152:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010154:	429a      	cmp	r2, r3
 8010156:	d3db      	bcc.n	8010110 <f_getfree+0x5e>
 8010158:	e04d      	b.n	80101f6 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 801015a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801015c:	6a1b      	ldr	r3, [r3, #32]
 801015e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010164:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8010166:	2300      	movs	r3, #0
 8010168:	637b      	str	r3, [r7, #52]	@ 0x34
 801016a:	2300      	movs	r3, #0
 801016c:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 801016e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010170:	2b00      	cmp	r3, #0
 8010172:	d113      	bne.n	801019c <f_getfree+0xea>
							res = move_window(fs, sect++);
 8010174:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010178:	1c5a      	adds	r2, r3, #1
 801017a:	63ba      	str	r2, [r7, #56]	@ 0x38
 801017c:	4619      	mov	r1, r3
 801017e:	f7fd fb51 	bl	800d824 <move_window>
 8010182:	4603      	mov	r3, r0
 8010184:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8010188:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801018c:	2b00      	cmp	r3, #0
 801018e:	d131      	bne.n	80101f4 <f_getfree+0x142>
							p = fs->win;
 8010190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010192:	333c      	adds	r3, #60	@ 0x3c
 8010194:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8010196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010198:	899b      	ldrh	r3, [r3, #12]
 801019a:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 801019c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801019e:	781b      	ldrb	r3, [r3, #0]
 80101a0:	2b02      	cmp	r3, #2
 80101a2:	d10f      	bne.n	80101c4 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80101a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80101a6:	f7fd f85b 	bl	800d260 <ld_word>
 80101aa:	4603      	mov	r3, r0
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d102      	bne.n	80101b6 <f_getfree+0x104>
 80101b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80101b2:	3301      	adds	r3, #1
 80101b4:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 80101b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101b8:	3302      	adds	r3, #2
 80101ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80101bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80101be:	3b02      	subs	r3, #2
 80101c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80101c2:	e010      	b.n	80101e6 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80101c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80101c6:	f7fd f863 	bl	800d290 <ld_dword>
 80101ca:	4603      	mov	r3, r0
 80101cc:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d102      	bne.n	80101da <f_getfree+0x128>
 80101d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80101d6:	3301      	adds	r3, #1
 80101d8:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 80101da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101dc:	3304      	adds	r3, #4
 80101de:	633b      	str	r3, [r7, #48]	@ 0x30
 80101e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80101e2:	3b04      	subs	r3, #4
 80101e4:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 80101e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80101e8:	3b01      	subs	r3, #1
 80101ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80101ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d1bd      	bne.n	801016e <f_getfree+0xbc>
 80101f2:	e000      	b.n	80101f6 <f_getfree+0x144>
							if (res != FR_OK) break;
 80101f4:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80101f6:	68bb      	ldr	r3, [r7, #8]
 80101f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80101fa:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80101fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010200:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8010202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010204:	791a      	ldrb	r2, [r3, #4]
 8010206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010208:	f042 0201 	orr.w	r2, r2, #1
 801020c:	b2d2      	uxtb	r2, r2
 801020e:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8010210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010212:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8010216:	4611      	mov	r1, r2
 8010218:	4618      	mov	r0, r3
 801021a:	f7fd f937 	bl	800d48c <unlock_fs>
 801021e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8010222:	4618      	mov	r0, r3
 8010224:	3748      	adds	r7, #72	@ 0x48
 8010226:	46bd      	mov	sp, r7
 8010228:	bd80      	pop	{r7, pc}

0801022a <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 801022a:	b580      	push	{r7, lr}
 801022c:	b084      	sub	sp, #16
 801022e:	af00      	add	r7, sp, #0
 8010230:	6078      	str	r0, [r7, #4]
 8010232:	460b      	mov	r3, r1
 8010234:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8010236:	78fb      	ldrb	r3, [r7, #3]
 8010238:	2b0a      	cmp	r3, #10
 801023a:	d103      	bne.n	8010244 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 801023c:	210d      	movs	r1, #13
 801023e:	6878      	ldr	r0, [r7, #4]
 8010240:	f7ff fff3 	bl	801022a <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	685b      	ldr	r3, [r3, #4]
 8010248:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	2b00      	cmp	r3, #0
 801024e:	db25      	blt.n	801029c <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	1c5a      	adds	r2, r3, #1
 8010254:	60fa      	str	r2, [r7, #12]
 8010256:	687a      	ldr	r2, [r7, #4]
 8010258:	4413      	add	r3, r2
 801025a:	78fa      	ldrb	r2, [r7, #3]
 801025c:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	2b3c      	cmp	r3, #60	@ 0x3c
 8010262:	dd12      	ble.n	801028a <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	6818      	ldr	r0, [r3, #0]
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	f103 010c 	add.w	r1, r3, #12
 801026e:	68fa      	ldr	r2, [r7, #12]
 8010270:	f107 0308 	add.w	r3, r7, #8
 8010274:	f7ff fca2 	bl	800fbbc <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8010278:	68ba      	ldr	r2, [r7, #8]
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	429a      	cmp	r2, r3
 801027e:	d101      	bne.n	8010284 <putc_bfd+0x5a>
 8010280:	2300      	movs	r3, #0
 8010282:	e001      	b.n	8010288 <putc_bfd+0x5e>
 8010284:	f04f 33ff 	mov.w	r3, #4294967295
 8010288:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	68fa      	ldr	r2, [r7, #12]
 801028e:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	689b      	ldr	r3, [r3, #8]
 8010294:	1c5a      	adds	r2, r3, #1
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	609a      	str	r2, [r3, #8]
 801029a:	e000      	b.n	801029e <putc_bfd+0x74>
	if (i < 0) return;
 801029c:	bf00      	nop
}
 801029e:	3710      	adds	r7, #16
 80102a0:	46bd      	mov	sp, r7
 80102a2:	bd80      	pop	{r7, pc}

080102a4 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b084      	sub	sp, #16
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	685b      	ldr	r3, [r3, #4]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	db16      	blt.n	80102e2 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	6818      	ldr	r0, [r3, #0]
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	f103 010c 	add.w	r1, r3, #12
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	685b      	ldr	r3, [r3, #4]
 80102c2:	461a      	mov	r2, r3
 80102c4:	f107 030c 	add.w	r3, r7, #12
 80102c8:	f7ff fc78 	bl	800fbbc <f_write>
 80102cc:	4603      	mov	r3, r0
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d107      	bne.n	80102e2 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	685b      	ldr	r3, [r3, #4]
 80102d6:	68fa      	ldr	r2, [r7, #12]
 80102d8:	4293      	cmp	r3, r2
 80102da:	d102      	bne.n	80102e2 <putc_flush+0x3e>
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	689b      	ldr	r3, [r3, #8]
 80102e0:	e001      	b.n	80102e6 <putc_flush+0x42>
	return EOF;
 80102e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80102e6:	4618      	mov	r0, r3
 80102e8:	3710      	adds	r7, #16
 80102ea:	46bd      	mov	sp, r7
 80102ec:	bd80      	pop	{r7, pc}

080102ee <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80102ee:	b480      	push	{r7}
 80102f0:	b083      	sub	sp, #12
 80102f2:	af00      	add	r7, sp, #0
 80102f4:	6078      	str	r0, [r7, #4]
 80102f6:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	683a      	ldr	r2, [r7, #0]
 80102fc:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	2200      	movs	r2, #0
 8010302:	605a      	str	r2, [r3, #4]
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	685a      	ldr	r2, [r3, #4]
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	609a      	str	r2, [r3, #8]
}
 801030c:	bf00      	nop
 801030e:	370c      	adds	r7, #12
 8010310:	46bd      	mov	sp, r7
 8010312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010316:	4770      	bx	lr

08010318 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8010318:	b580      	push	{r7, lr}
 801031a:	b096      	sub	sp, #88	@ 0x58
 801031c:	af00      	add	r7, sp, #0
 801031e:	6078      	str	r0, [r7, #4]
 8010320:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8010322:	f107 030c 	add.w	r3, r7, #12
 8010326:	6839      	ldr	r1, [r7, #0]
 8010328:	4618      	mov	r0, r3
 801032a:	f7ff ffe0 	bl	80102ee <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 801032e:	e009      	b.n	8010344 <f_puts+0x2c>
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	1c5a      	adds	r2, r3, #1
 8010334:	607a      	str	r2, [r7, #4]
 8010336:	781a      	ldrb	r2, [r3, #0]
 8010338:	f107 030c 	add.w	r3, r7, #12
 801033c:	4611      	mov	r1, r2
 801033e:	4618      	mov	r0, r3
 8010340:	f7ff ff73 	bl	801022a <putc_bfd>
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	781b      	ldrb	r3, [r3, #0]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d1f1      	bne.n	8010330 <f_puts+0x18>
	return putc_flush(&pb);
 801034c:	f107 030c 	add.w	r3, r7, #12
 8010350:	4618      	mov	r0, r3
 8010352:	f7ff ffa7 	bl	80102a4 <putc_flush>
 8010356:	4603      	mov	r3, r0
}
 8010358:	4618      	mov	r0, r3
 801035a:	3758      	adds	r7, #88	@ 0x58
 801035c:	46bd      	mov	sp, r7
 801035e:	bd80      	pop	{r7, pc}

08010360 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010360:	b480      	push	{r7}
 8010362:	b087      	sub	sp, #28
 8010364:	af00      	add	r7, sp, #0
 8010366:	60f8      	str	r0, [r7, #12]
 8010368:	60b9      	str	r1, [r7, #8]
 801036a:	4613      	mov	r3, r2
 801036c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801036e:	2301      	movs	r3, #1
 8010370:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010372:	2300      	movs	r3, #0
 8010374:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010376:	4b1f      	ldr	r3, [pc, #124]	@ (80103f4 <FATFS_LinkDriverEx+0x94>)
 8010378:	7a5b      	ldrb	r3, [r3, #9]
 801037a:	b2db      	uxtb	r3, r3
 801037c:	2b00      	cmp	r3, #0
 801037e:	d131      	bne.n	80103e4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010380:	4b1c      	ldr	r3, [pc, #112]	@ (80103f4 <FATFS_LinkDriverEx+0x94>)
 8010382:	7a5b      	ldrb	r3, [r3, #9]
 8010384:	b2db      	uxtb	r3, r3
 8010386:	461a      	mov	r2, r3
 8010388:	4b1a      	ldr	r3, [pc, #104]	@ (80103f4 <FATFS_LinkDriverEx+0x94>)
 801038a:	2100      	movs	r1, #0
 801038c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801038e:	4b19      	ldr	r3, [pc, #100]	@ (80103f4 <FATFS_LinkDriverEx+0x94>)
 8010390:	7a5b      	ldrb	r3, [r3, #9]
 8010392:	b2db      	uxtb	r3, r3
 8010394:	4a17      	ldr	r2, [pc, #92]	@ (80103f4 <FATFS_LinkDriverEx+0x94>)
 8010396:	009b      	lsls	r3, r3, #2
 8010398:	4413      	add	r3, r2
 801039a:	68fa      	ldr	r2, [r7, #12]
 801039c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801039e:	4b15      	ldr	r3, [pc, #84]	@ (80103f4 <FATFS_LinkDriverEx+0x94>)
 80103a0:	7a5b      	ldrb	r3, [r3, #9]
 80103a2:	b2db      	uxtb	r3, r3
 80103a4:	461a      	mov	r2, r3
 80103a6:	4b13      	ldr	r3, [pc, #76]	@ (80103f4 <FATFS_LinkDriverEx+0x94>)
 80103a8:	4413      	add	r3, r2
 80103aa:	79fa      	ldrb	r2, [r7, #7]
 80103ac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80103ae:	4b11      	ldr	r3, [pc, #68]	@ (80103f4 <FATFS_LinkDriverEx+0x94>)
 80103b0:	7a5b      	ldrb	r3, [r3, #9]
 80103b2:	b2db      	uxtb	r3, r3
 80103b4:	1c5a      	adds	r2, r3, #1
 80103b6:	b2d1      	uxtb	r1, r2
 80103b8:	4a0e      	ldr	r2, [pc, #56]	@ (80103f4 <FATFS_LinkDriverEx+0x94>)
 80103ba:	7251      	strb	r1, [r2, #9]
 80103bc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80103be:	7dbb      	ldrb	r3, [r7, #22]
 80103c0:	3330      	adds	r3, #48	@ 0x30
 80103c2:	b2da      	uxtb	r2, r3
 80103c4:	68bb      	ldr	r3, [r7, #8]
 80103c6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80103c8:	68bb      	ldr	r3, [r7, #8]
 80103ca:	3301      	adds	r3, #1
 80103cc:	223a      	movs	r2, #58	@ 0x3a
 80103ce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80103d0:	68bb      	ldr	r3, [r7, #8]
 80103d2:	3302      	adds	r3, #2
 80103d4:	222f      	movs	r2, #47	@ 0x2f
 80103d6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80103d8:	68bb      	ldr	r3, [r7, #8]
 80103da:	3303      	adds	r3, #3
 80103dc:	2200      	movs	r2, #0
 80103de:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80103e0:	2300      	movs	r3, #0
 80103e2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80103e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80103e6:	4618      	mov	r0, r3
 80103e8:	371c      	adds	r7, #28
 80103ea:	46bd      	mov	sp, r7
 80103ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f0:	4770      	bx	lr
 80103f2:	bf00      	nop
 80103f4:	20002c18 	.word	0x20002c18

080103f8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b082      	sub	sp, #8
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
 8010400:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010402:	2200      	movs	r2, #0
 8010404:	6839      	ldr	r1, [r7, #0]
 8010406:	6878      	ldr	r0, [r7, #4]
 8010408:	f7ff ffaa 	bl	8010360 <FATFS_LinkDriverEx>
 801040c:	4603      	mov	r3, r0
}
 801040e:	4618      	mov	r0, r3
 8010410:	3708      	adds	r7, #8
 8010412:	46bd      	mov	sp, r7
 8010414:	bd80      	pop	{r7, pc}
	...

08010418 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8010418:	b480      	push	{r7}
 801041a:	b085      	sub	sp, #20
 801041c:	af00      	add	r7, sp, #0
 801041e:	4603      	mov	r3, r0
 8010420:	6039      	str	r1, [r7, #0]
 8010422:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8010424:	88fb      	ldrh	r3, [r7, #6]
 8010426:	2b7f      	cmp	r3, #127	@ 0x7f
 8010428:	d802      	bhi.n	8010430 <ff_convert+0x18>
		c = chr;
 801042a:	88fb      	ldrh	r3, [r7, #6]
 801042c:	81fb      	strh	r3, [r7, #14]
 801042e:	e025      	b.n	801047c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010430:	683b      	ldr	r3, [r7, #0]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d00b      	beq.n	801044e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8010436:	88fb      	ldrh	r3, [r7, #6]
 8010438:	2bff      	cmp	r3, #255	@ 0xff
 801043a:	d805      	bhi.n	8010448 <ff_convert+0x30>
 801043c:	88fb      	ldrh	r3, [r7, #6]
 801043e:	3b80      	subs	r3, #128	@ 0x80
 8010440:	4a12      	ldr	r2, [pc, #72]	@ (801048c <ff_convert+0x74>)
 8010442:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010446:	e000      	b.n	801044a <ff_convert+0x32>
 8010448:	2300      	movs	r3, #0
 801044a:	81fb      	strh	r3, [r7, #14]
 801044c:	e016      	b.n	801047c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801044e:	2300      	movs	r3, #0
 8010450:	81fb      	strh	r3, [r7, #14]
 8010452:	e009      	b.n	8010468 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010454:	89fb      	ldrh	r3, [r7, #14]
 8010456:	4a0d      	ldr	r2, [pc, #52]	@ (801048c <ff_convert+0x74>)
 8010458:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801045c:	88fa      	ldrh	r2, [r7, #6]
 801045e:	429a      	cmp	r2, r3
 8010460:	d006      	beq.n	8010470 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010462:	89fb      	ldrh	r3, [r7, #14]
 8010464:	3301      	adds	r3, #1
 8010466:	81fb      	strh	r3, [r7, #14]
 8010468:	89fb      	ldrh	r3, [r7, #14]
 801046a:	2b7f      	cmp	r3, #127	@ 0x7f
 801046c:	d9f2      	bls.n	8010454 <ff_convert+0x3c>
 801046e:	e000      	b.n	8010472 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010470:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010472:	89fb      	ldrh	r3, [r7, #14]
 8010474:	3380      	adds	r3, #128	@ 0x80
 8010476:	b29b      	uxth	r3, r3
 8010478:	b2db      	uxtb	r3, r3
 801047a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801047c:	89fb      	ldrh	r3, [r7, #14]
}
 801047e:	4618      	mov	r0, r3
 8010480:	3714      	adds	r7, #20
 8010482:	46bd      	mov	sp, r7
 8010484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010488:	4770      	bx	lr
 801048a:	bf00      	nop
 801048c:	08017098 	.word	0x08017098

08010490 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010490:	b480      	push	{r7}
 8010492:	b087      	sub	sp, #28
 8010494:	af00      	add	r7, sp, #0
 8010496:	4603      	mov	r3, r0
 8010498:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801049a:	88fb      	ldrh	r3, [r7, #6]
 801049c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80104a0:	d201      	bcs.n	80104a6 <ff_wtoupper+0x16>
 80104a2:	4b3e      	ldr	r3, [pc, #248]	@ (801059c <ff_wtoupper+0x10c>)
 80104a4:	e000      	b.n	80104a8 <ff_wtoupper+0x18>
 80104a6:	4b3e      	ldr	r3, [pc, #248]	@ (80105a0 <ff_wtoupper+0x110>)
 80104a8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80104aa:	697b      	ldr	r3, [r7, #20]
 80104ac:	1c9a      	adds	r2, r3, #2
 80104ae:	617a      	str	r2, [r7, #20]
 80104b0:	881b      	ldrh	r3, [r3, #0]
 80104b2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80104b4:	8a7b      	ldrh	r3, [r7, #18]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d068      	beq.n	801058c <ff_wtoupper+0xfc>
 80104ba:	88fa      	ldrh	r2, [r7, #6]
 80104bc:	8a7b      	ldrh	r3, [r7, #18]
 80104be:	429a      	cmp	r2, r3
 80104c0:	d364      	bcc.n	801058c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80104c2:	697b      	ldr	r3, [r7, #20]
 80104c4:	1c9a      	adds	r2, r3, #2
 80104c6:	617a      	str	r2, [r7, #20]
 80104c8:	881b      	ldrh	r3, [r3, #0]
 80104ca:	823b      	strh	r3, [r7, #16]
 80104cc:	8a3b      	ldrh	r3, [r7, #16]
 80104ce:	0a1b      	lsrs	r3, r3, #8
 80104d0:	81fb      	strh	r3, [r7, #14]
 80104d2:	8a3b      	ldrh	r3, [r7, #16]
 80104d4:	b2db      	uxtb	r3, r3
 80104d6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80104d8:	88fa      	ldrh	r2, [r7, #6]
 80104da:	8a79      	ldrh	r1, [r7, #18]
 80104dc:	8a3b      	ldrh	r3, [r7, #16]
 80104de:	440b      	add	r3, r1
 80104e0:	429a      	cmp	r2, r3
 80104e2:	da49      	bge.n	8010578 <ff_wtoupper+0xe8>
			switch (cmd) {
 80104e4:	89fb      	ldrh	r3, [r7, #14]
 80104e6:	2b08      	cmp	r3, #8
 80104e8:	d84f      	bhi.n	801058a <ff_wtoupper+0xfa>
 80104ea:	a201      	add	r2, pc, #4	@ (adr r2, 80104f0 <ff_wtoupper+0x60>)
 80104ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104f0:	08010515 	.word	0x08010515
 80104f4:	08010527 	.word	0x08010527
 80104f8:	0801053d 	.word	0x0801053d
 80104fc:	08010545 	.word	0x08010545
 8010500:	0801054d 	.word	0x0801054d
 8010504:	08010555 	.word	0x08010555
 8010508:	0801055d 	.word	0x0801055d
 801050c:	08010565 	.word	0x08010565
 8010510:	0801056d 	.word	0x0801056d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010514:	88fa      	ldrh	r2, [r7, #6]
 8010516:	8a7b      	ldrh	r3, [r7, #18]
 8010518:	1ad3      	subs	r3, r2, r3
 801051a:	005b      	lsls	r3, r3, #1
 801051c:	697a      	ldr	r2, [r7, #20]
 801051e:	4413      	add	r3, r2
 8010520:	881b      	ldrh	r3, [r3, #0]
 8010522:	80fb      	strh	r3, [r7, #6]
 8010524:	e027      	b.n	8010576 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8010526:	88fa      	ldrh	r2, [r7, #6]
 8010528:	8a7b      	ldrh	r3, [r7, #18]
 801052a:	1ad3      	subs	r3, r2, r3
 801052c:	b29b      	uxth	r3, r3
 801052e:	f003 0301 	and.w	r3, r3, #1
 8010532:	b29b      	uxth	r3, r3
 8010534:	88fa      	ldrh	r2, [r7, #6]
 8010536:	1ad3      	subs	r3, r2, r3
 8010538:	80fb      	strh	r3, [r7, #6]
 801053a:	e01c      	b.n	8010576 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801053c:	88fb      	ldrh	r3, [r7, #6]
 801053e:	3b10      	subs	r3, #16
 8010540:	80fb      	strh	r3, [r7, #6]
 8010542:	e018      	b.n	8010576 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010544:	88fb      	ldrh	r3, [r7, #6]
 8010546:	3b20      	subs	r3, #32
 8010548:	80fb      	strh	r3, [r7, #6]
 801054a:	e014      	b.n	8010576 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801054c:	88fb      	ldrh	r3, [r7, #6]
 801054e:	3b30      	subs	r3, #48	@ 0x30
 8010550:	80fb      	strh	r3, [r7, #6]
 8010552:	e010      	b.n	8010576 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010554:	88fb      	ldrh	r3, [r7, #6]
 8010556:	3b1a      	subs	r3, #26
 8010558:	80fb      	strh	r3, [r7, #6]
 801055a:	e00c      	b.n	8010576 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801055c:	88fb      	ldrh	r3, [r7, #6]
 801055e:	3308      	adds	r3, #8
 8010560:	80fb      	strh	r3, [r7, #6]
 8010562:	e008      	b.n	8010576 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010564:	88fb      	ldrh	r3, [r7, #6]
 8010566:	3b50      	subs	r3, #80	@ 0x50
 8010568:	80fb      	strh	r3, [r7, #6]
 801056a:	e004      	b.n	8010576 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801056c:	88fb      	ldrh	r3, [r7, #6]
 801056e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8010572:	80fb      	strh	r3, [r7, #6]
 8010574:	bf00      	nop
			}
			break;
 8010576:	e008      	b.n	801058a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010578:	89fb      	ldrh	r3, [r7, #14]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d195      	bne.n	80104aa <ff_wtoupper+0x1a>
 801057e:	8a3b      	ldrh	r3, [r7, #16]
 8010580:	005b      	lsls	r3, r3, #1
 8010582:	697a      	ldr	r2, [r7, #20]
 8010584:	4413      	add	r3, r2
 8010586:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010588:	e78f      	b.n	80104aa <ff_wtoupper+0x1a>
			break;
 801058a:	bf00      	nop
	}

	return chr;
 801058c:	88fb      	ldrh	r3, [r7, #6]
}
 801058e:	4618      	mov	r0, r3
 8010590:	371c      	adds	r7, #28
 8010592:	46bd      	mov	sp, r7
 8010594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010598:	4770      	bx	lr
 801059a:	bf00      	nop
 801059c:	08017198 	.word	0x08017198
 80105a0:	0801738c 	.word	0x0801738c

080105a4 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b086      	sub	sp, #24
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	4603      	mov	r3, r0
 80105ac:	6039      	str	r1, [r7, #0]
 80105ae:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 80105b0:	2300      	movs	r3, #0
 80105b2:	60fb      	str	r3, [r7, #12]
 80105b4:	2300      	movs	r3, #0
 80105b6:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 80105b8:	f107 030c 	add.w	r3, r7, #12
 80105bc:	2101      	movs	r1, #1
 80105be:	4618      	mov	r0, r3
 80105c0:	f000 f8cd 	bl	801075e <osSemaphoreCreate>
 80105c4:	4602      	mov	r2, r0
 80105c6:	683b      	ldr	r3, [r7, #0]
 80105c8:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 80105ca:	683b      	ldr	r3, [r7, #0]
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	bf14      	ite	ne
 80105d2:	2301      	movne	r3, #1
 80105d4:	2300      	moveq	r3, #0
 80105d6:	b2db      	uxtb	r3, r3
 80105d8:	617b      	str	r3, [r7, #20]

    return ret;
 80105da:	697b      	ldr	r3, [r7, #20]
}
 80105dc:	4618      	mov	r0, r3
 80105de:	3718      	adds	r7, #24
 80105e0:	46bd      	mov	sp, r7
 80105e2:	bd80      	pop	{r7, pc}

080105e4 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b082      	sub	sp, #8
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80105ec:	6878      	ldr	r0, [r7, #4]
 80105ee:	f000 f96d 	bl	80108cc <osSemaphoreDelete>
#endif
    return 1;
 80105f2:	2301      	movs	r3, #1
}
 80105f4:	4618      	mov	r0, r3
 80105f6:	3708      	adds	r7, #8
 80105f8:	46bd      	mov	sp, r7
 80105fa:	bd80      	pop	{r7, pc}

080105fc <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b084      	sub	sp, #16
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8010604:	2300      	movs	r3, #0
 8010606:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8010608:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801060c:	6878      	ldr	r0, [r7, #4]
 801060e:	f000 f8d9 	bl	80107c4 <osSemaphoreWait>
 8010612:	4603      	mov	r3, r0
 8010614:	2b00      	cmp	r3, #0
 8010616:	d101      	bne.n	801061c <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8010618:	2301      	movs	r3, #1
 801061a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801061c:	68fb      	ldr	r3, [r7, #12]
}
 801061e:	4618      	mov	r0, r3
 8010620:	3710      	adds	r7, #16
 8010622:	46bd      	mov	sp, r7
 8010624:	bd80      	pop	{r7, pc}

08010626 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8010626:	b580      	push	{r7, lr}
 8010628:	b082      	sub	sp, #8
 801062a:	af00      	add	r7, sp, #0
 801062c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 801062e:	6878      	ldr	r0, [r7, #4]
 8010630:	f000 f916 	bl	8010860 <osSemaphoreRelease>
#endif
}
 8010634:	bf00      	nop
 8010636:	3708      	adds	r7, #8
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}

0801063c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801063c:	b480      	push	{r7}
 801063e:	b085      	sub	sp, #20
 8010640:	af00      	add	r7, sp, #0
 8010642:	4603      	mov	r3, r0
 8010644:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8010646:	2300      	movs	r3, #0
 8010648:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801064a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801064e:	2b84      	cmp	r3, #132	@ 0x84
 8010650:	d005      	beq.n	801065e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8010652:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	4413      	add	r3, r2
 801065a:	3303      	adds	r3, #3
 801065c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801065e:	68fb      	ldr	r3, [r7, #12]
}
 8010660:	4618      	mov	r0, r3
 8010662:	3714      	adds	r7, #20
 8010664:	46bd      	mov	sp, r7
 8010666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066a:	4770      	bx	lr

0801066c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801066c:	b480      	push	{r7}
 801066e:	b083      	sub	sp, #12
 8010670:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010672:	f3ef 8305 	mrs	r3, IPSR
 8010676:	607b      	str	r3, [r7, #4]
  return(result);
 8010678:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 801067a:	2b00      	cmp	r3, #0
 801067c:	bf14      	ite	ne
 801067e:	2301      	movne	r3, #1
 8010680:	2300      	moveq	r3, #0
 8010682:	b2db      	uxtb	r3, r3
}
 8010684:	4618      	mov	r0, r3
 8010686:	370c      	adds	r7, #12
 8010688:	46bd      	mov	sp, r7
 801068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068e:	4770      	bx	lr

08010690 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8010690:	b580      	push	{r7, lr}
 8010692:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8010694:	f001 f9a4 	bl	80119e0 <vTaskStartScheduler>
  
  return osOK;
 8010698:	2300      	movs	r3, #0
}
 801069a:	4618      	mov	r0, r3
 801069c:	bd80      	pop	{r7, pc}

0801069e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801069e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106a0:	b089      	sub	sp, #36	@ 0x24
 80106a2:	af04      	add	r7, sp, #16
 80106a4:	6078      	str	r0, [r7, #4]
 80106a6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	695b      	ldr	r3, [r3, #20]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d020      	beq.n	80106f2 <osThreadCreate+0x54>
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	699b      	ldr	r3, [r3, #24]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d01c      	beq.n	80106f2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	685c      	ldr	r4, [r3, #4]
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	691e      	ldr	r6, [r3, #16]
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80106ca:	4618      	mov	r0, r3
 80106cc:	f7ff ffb6 	bl	801063c <makeFreeRtosPriority>
 80106d0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	695b      	ldr	r3, [r3, #20]
 80106d6:	687a      	ldr	r2, [r7, #4]
 80106d8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80106da:	9202      	str	r2, [sp, #8]
 80106dc:	9301      	str	r3, [sp, #4]
 80106de:	9100      	str	r1, [sp, #0]
 80106e0:	683b      	ldr	r3, [r7, #0]
 80106e2:	4632      	mov	r2, r6
 80106e4:	4629      	mov	r1, r5
 80106e6:	4620      	mov	r0, r4
 80106e8:	f000 ff94 	bl	8011614 <xTaskCreateStatic>
 80106ec:	4603      	mov	r3, r0
 80106ee:	60fb      	str	r3, [r7, #12]
 80106f0:	e01c      	b.n	801072c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	685c      	ldr	r4, [r3, #4]
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80106fe:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010706:	4618      	mov	r0, r3
 8010708:	f7ff ff98 	bl	801063c <makeFreeRtosPriority>
 801070c:	4602      	mov	r2, r0
 801070e:	f107 030c 	add.w	r3, r7, #12
 8010712:	9301      	str	r3, [sp, #4]
 8010714:	9200      	str	r2, [sp, #0]
 8010716:	683b      	ldr	r3, [r7, #0]
 8010718:	4632      	mov	r2, r6
 801071a:	4629      	mov	r1, r5
 801071c:	4620      	mov	r0, r4
 801071e:	f000 ffd9 	bl	80116d4 <xTaskCreate>
 8010722:	4603      	mov	r3, r0
 8010724:	2b01      	cmp	r3, #1
 8010726:	d001      	beq.n	801072c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8010728:	2300      	movs	r3, #0
 801072a:	e000      	b.n	801072e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801072c:	68fb      	ldr	r3, [r7, #12]
}
 801072e:	4618      	mov	r0, r3
 8010730:	3714      	adds	r7, #20
 8010732:	46bd      	mov	sp, r7
 8010734:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010736 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8010736:	b580      	push	{r7, lr}
 8010738:	b084      	sub	sp, #16
 801073a:	af00      	add	r7, sp, #0
 801073c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d001      	beq.n	801074c <osDelay+0x16>
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	e000      	b.n	801074e <osDelay+0x18>
 801074c:	2301      	movs	r3, #1
 801074e:	4618      	mov	r0, r3
 8010750:	f001 f910 	bl	8011974 <vTaskDelay>
  
  return osOK;
 8010754:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8010756:	4618      	mov	r0, r3
 8010758:	3710      	adds	r7, #16
 801075a:	46bd      	mov	sp, r7
 801075c:	bd80      	pop	{r7, pc}

0801075e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 801075e:	b580      	push	{r7, lr}
 8010760:	b086      	sub	sp, #24
 8010762:	af02      	add	r7, sp, #8
 8010764:	6078      	str	r0, [r7, #4]
 8010766:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	685b      	ldr	r3, [r3, #4]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d00f      	beq.n	8010790 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8010770:	683b      	ldr	r3, [r7, #0]
 8010772:	2b01      	cmp	r3, #1
 8010774:	d10a      	bne.n	801078c <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	685b      	ldr	r3, [r3, #4]
 801077a:	2203      	movs	r2, #3
 801077c:	9200      	str	r2, [sp, #0]
 801077e:	2200      	movs	r2, #0
 8010780:	2100      	movs	r1, #0
 8010782:	2001      	movs	r0, #1
 8010784:	f000 f9d4 	bl	8010b30 <xQueueGenericCreateStatic>
 8010788:	4603      	mov	r3, r0
 801078a:	e016      	b.n	80107ba <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 801078c:	2300      	movs	r3, #0
 801078e:	e014      	b.n	80107ba <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8010790:	683b      	ldr	r3, [r7, #0]
 8010792:	2b01      	cmp	r3, #1
 8010794:	d110      	bne.n	80107b8 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8010796:	2203      	movs	r2, #3
 8010798:	2100      	movs	r1, #0
 801079a:	2001      	movs	r0, #1
 801079c:	f000 fa45 	bl	8010c2a <xQueueGenericCreate>
 80107a0:	60f8      	str	r0, [r7, #12]
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d005      	beq.n	80107b4 <osSemaphoreCreate+0x56>
 80107a8:	2300      	movs	r3, #0
 80107aa:	2200      	movs	r2, #0
 80107ac:	2100      	movs	r1, #0
 80107ae:	68f8      	ldr	r0, [r7, #12]
 80107b0:	f000 fa96 	bl	8010ce0 <xQueueGenericSend>
      return sema;
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	e000      	b.n	80107ba <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80107b8:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80107ba:	4618      	mov	r0, r3
 80107bc:	3710      	adds	r7, #16
 80107be:	46bd      	mov	sp, r7
 80107c0:	bd80      	pop	{r7, pc}
	...

080107c4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b084      	sub	sp, #16
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
 80107cc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80107ce:	2300      	movs	r3, #0
 80107d0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d101      	bne.n	80107dc <osSemaphoreWait+0x18>
    return osErrorParameter;
 80107d8:	2380      	movs	r3, #128	@ 0x80
 80107da:	e03a      	b.n	8010852 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80107dc:	2300      	movs	r3, #0
 80107de:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80107e0:	683b      	ldr	r3, [r7, #0]
 80107e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107e6:	d103      	bne.n	80107f0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80107e8:	f04f 33ff 	mov.w	r3, #4294967295
 80107ec:	60fb      	str	r3, [r7, #12]
 80107ee:	e009      	b.n	8010804 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80107f0:	683b      	ldr	r3, [r7, #0]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d006      	beq.n	8010804 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d101      	bne.n	8010804 <osSemaphoreWait+0x40>
      ticks = 1;
 8010800:	2301      	movs	r3, #1
 8010802:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8010804:	f7ff ff32 	bl	801066c <inHandlerMode>
 8010808:	4603      	mov	r3, r0
 801080a:	2b00      	cmp	r3, #0
 801080c:	d017      	beq.n	801083e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801080e:	f107 0308 	add.w	r3, r7, #8
 8010812:	461a      	mov	r2, r3
 8010814:	2100      	movs	r1, #0
 8010816:	6878      	ldr	r0, [r7, #4]
 8010818:	f000 fd04 	bl	8011224 <xQueueReceiveFromISR>
 801081c:	4603      	mov	r3, r0
 801081e:	2b01      	cmp	r3, #1
 8010820:	d001      	beq.n	8010826 <osSemaphoreWait+0x62>
      return osErrorOS;
 8010822:	23ff      	movs	r3, #255	@ 0xff
 8010824:	e015      	b.n	8010852 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8010826:	68bb      	ldr	r3, [r7, #8]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d011      	beq.n	8010850 <osSemaphoreWait+0x8c>
 801082c:	4b0b      	ldr	r3, [pc, #44]	@ (801085c <osSemaphoreWait+0x98>)
 801082e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010832:	601a      	str	r2, [r3, #0]
 8010834:	f3bf 8f4f 	dsb	sy
 8010838:	f3bf 8f6f 	isb	sy
 801083c:	e008      	b.n	8010850 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 801083e:	68f9      	ldr	r1, [r7, #12]
 8010840:	6878      	ldr	r0, [r7, #4]
 8010842:	f000 fbdf 	bl	8011004 <xQueueSemaphoreTake>
 8010846:	4603      	mov	r3, r0
 8010848:	2b01      	cmp	r3, #1
 801084a:	d001      	beq.n	8010850 <osSemaphoreWait+0x8c>
    return osErrorOS;
 801084c:	23ff      	movs	r3, #255	@ 0xff
 801084e:	e000      	b.n	8010852 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8010850:	2300      	movs	r3, #0
}
 8010852:	4618      	mov	r0, r3
 8010854:	3710      	adds	r7, #16
 8010856:	46bd      	mov	sp, r7
 8010858:	bd80      	pop	{r7, pc}
 801085a:	bf00      	nop
 801085c:	e000ed04 	.word	0xe000ed04

08010860 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b084      	sub	sp, #16
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8010868:	2300      	movs	r3, #0
 801086a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 801086c:	2300      	movs	r3, #0
 801086e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8010870:	f7ff fefc 	bl	801066c <inHandlerMode>
 8010874:	4603      	mov	r3, r0
 8010876:	2b00      	cmp	r3, #0
 8010878:	d016      	beq.n	80108a8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801087a:	f107 0308 	add.w	r3, r7, #8
 801087e:	4619      	mov	r1, r3
 8010880:	6878      	ldr	r0, [r7, #4]
 8010882:	f000 fb2f 	bl	8010ee4 <xQueueGiveFromISR>
 8010886:	4603      	mov	r3, r0
 8010888:	2b01      	cmp	r3, #1
 801088a:	d001      	beq.n	8010890 <osSemaphoreRelease+0x30>
      return osErrorOS;
 801088c:	23ff      	movs	r3, #255	@ 0xff
 801088e:	e017      	b.n	80108c0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010890:	68bb      	ldr	r3, [r7, #8]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d013      	beq.n	80108be <osSemaphoreRelease+0x5e>
 8010896:	4b0c      	ldr	r3, [pc, #48]	@ (80108c8 <osSemaphoreRelease+0x68>)
 8010898:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801089c:	601a      	str	r2, [r3, #0]
 801089e:	f3bf 8f4f 	dsb	sy
 80108a2:	f3bf 8f6f 	isb	sy
 80108a6:	e00a      	b.n	80108be <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80108a8:	2300      	movs	r3, #0
 80108aa:	2200      	movs	r2, #0
 80108ac:	2100      	movs	r1, #0
 80108ae:	6878      	ldr	r0, [r7, #4]
 80108b0:	f000 fa16 	bl	8010ce0 <xQueueGenericSend>
 80108b4:	4603      	mov	r3, r0
 80108b6:	2b01      	cmp	r3, #1
 80108b8:	d001      	beq.n	80108be <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80108ba:	23ff      	movs	r3, #255	@ 0xff
 80108bc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80108be:	68fb      	ldr	r3, [r7, #12]
}
 80108c0:	4618      	mov	r0, r3
 80108c2:	3710      	adds	r7, #16
 80108c4:	46bd      	mov	sp, r7
 80108c6:	bd80      	pop	{r7, pc}
 80108c8:	e000ed04 	.word	0xe000ed04

080108cc <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b082      	sub	sp, #8
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80108d4:	f7ff feca 	bl	801066c <inHandlerMode>
 80108d8:	4603      	mov	r3, r0
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d001      	beq.n	80108e2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 80108de:	2382      	movs	r3, #130	@ 0x82
 80108e0:	e003      	b.n	80108ea <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80108e2:	6878      	ldr	r0, [r7, #4]
 80108e4:	f000 fd20 	bl	8011328 <vQueueDelete>

  return osOK; 
 80108e8:	2300      	movs	r3, #0
}
 80108ea:	4618      	mov	r0, r3
 80108ec:	3708      	adds	r7, #8
 80108ee:	46bd      	mov	sp, r7
 80108f0:	bd80      	pop	{r7, pc}

080108f2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80108f2:	b480      	push	{r7}
 80108f4:	b083      	sub	sp, #12
 80108f6:	af00      	add	r7, sp, #0
 80108f8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	f103 0208 	add.w	r2, r3, #8
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	f04f 32ff 	mov.w	r2, #4294967295
 801090a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	f103 0208 	add.w	r2, r3, #8
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	f103 0208 	add.w	r2, r3, #8
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	2200      	movs	r2, #0
 8010924:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010926:	bf00      	nop
 8010928:	370c      	adds	r7, #12
 801092a:	46bd      	mov	sp, r7
 801092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010930:	4770      	bx	lr

08010932 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010932:	b480      	push	{r7}
 8010934:	b083      	sub	sp, #12
 8010936:	af00      	add	r7, sp, #0
 8010938:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	2200      	movs	r2, #0
 801093e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010940:	bf00      	nop
 8010942:	370c      	adds	r7, #12
 8010944:	46bd      	mov	sp, r7
 8010946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094a:	4770      	bx	lr

0801094c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801094c:	b480      	push	{r7}
 801094e:	b085      	sub	sp, #20
 8010950:	af00      	add	r7, sp, #0
 8010952:	6078      	str	r0, [r7, #4]
 8010954:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	685b      	ldr	r3, [r3, #4]
 801095a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801095c:	683b      	ldr	r3, [r7, #0]
 801095e:	68fa      	ldr	r2, [r7, #12]
 8010960:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	689a      	ldr	r2, [r3, #8]
 8010966:	683b      	ldr	r3, [r7, #0]
 8010968:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	689b      	ldr	r3, [r3, #8]
 801096e:	683a      	ldr	r2, [r7, #0]
 8010970:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	683a      	ldr	r2, [r7, #0]
 8010976:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010978:	683b      	ldr	r3, [r7, #0]
 801097a:	687a      	ldr	r2, [r7, #4]
 801097c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	1c5a      	adds	r2, r3, #1
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	601a      	str	r2, [r3, #0]
}
 8010988:	bf00      	nop
 801098a:	3714      	adds	r7, #20
 801098c:	46bd      	mov	sp, r7
 801098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010992:	4770      	bx	lr

08010994 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010994:	b480      	push	{r7}
 8010996:	b085      	sub	sp, #20
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
 801099c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801099e:	683b      	ldr	r3, [r7, #0]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80109a4:	68bb      	ldr	r3, [r7, #8]
 80109a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109aa:	d103      	bne.n	80109b4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	691b      	ldr	r3, [r3, #16]
 80109b0:	60fb      	str	r3, [r7, #12]
 80109b2:	e00c      	b.n	80109ce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	3308      	adds	r3, #8
 80109b8:	60fb      	str	r3, [r7, #12]
 80109ba:	e002      	b.n	80109c2 <vListInsert+0x2e>
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	685b      	ldr	r3, [r3, #4]
 80109c0:	60fb      	str	r3, [r7, #12]
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	685b      	ldr	r3, [r3, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	68ba      	ldr	r2, [r7, #8]
 80109ca:	429a      	cmp	r2, r3
 80109cc:	d2f6      	bcs.n	80109bc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	685a      	ldr	r2, [r3, #4]
 80109d2:	683b      	ldr	r3, [r7, #0]
 80109d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80109d6:	683b      	ldr	r3, [r7, #0]
 80109d8:	685b      	ldr	r3, [r3, #4]
 80109da:	683a      	ldr	r2, [r7, #0]
 80109dc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80109de:	683b      	ldr	r3, [r7, #0]
 80109e0:	68fa      	ldr	r2, [r7, #12]
 80109e2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	683a      	ldr	r2, [r7, #0]
 80109e8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80109ea:	683b      	ldr	r3, [r7, #0]
 80109ec:	687a      	ldr	r2, [r7, #4]
 80109ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	1c5a      	adds	r2, r3, #1
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	601a      	str	r2, [r3, #0]
}
 80109fa:	bf00      	nop
 80109fc:	3714      	adds	r7, #20
 80109fe:	46bd      	mov	sp, r7
 8010a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a04:	4770      	bx	lr

08010a06 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010a06:	b480      	push	{r7}
 8010a08:	b085      	sub	sp, #20
 8010a0a:	af00      	add	r7, sp, #0
 8010a0c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	691b      	ldr	r3, [r3, #16]
 8010a12:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	685b      	ldr	r3, [r3, #4]
 8010a18:	687a      	ldr	r2, [r7, #4]
 8010a1a:	6892      	ldr	r2, [r2, #8]
 8010a1c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	689b      	ldr	r3, [r3, #8]
 8010a22:	687a      	ldr	r2, [r7, #4]
 8010a24:	6852      	ldr	r2, [r2, #4]
 8010a26:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	685b      	ldr	r3, [r3, #4]
 8010a2c:	687a      	ldr	r2, [r7, #4]
 8010a2e:	429a      	cmp	r2, r3
 8010a30:	d103      	bne.n	8010a3a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	689a      	ldr	r2, [r3, #8]
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	1e5a      	subs	r2, r3, #1
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	681b      	ldr	r3, [r3, #0]
}
 8010a4e:	4618      	mov	r0, r3
 8010a50:	3714      	adds	r7, #20
 8010a52:	46bd      	mov	sp, r7
 8010a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a58:	4770      	bx	lr
	...

08010a5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b084      	sub	sp, #16
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
 8010a64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d10b      	bne.n	8010a88 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a74:	f383 8811 	msr	BASEPRI, r3
 8010a78:	f3bf 8f6f 	isb	sy
 8010a7c:	f3bf 8f4f 	dsb	sy
 8010a80:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010a82:	bf00      	nop
 8010a84:	bf00      	nop
 8010a86:	e7fd      	b.n	8010a84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010a88:	f001 ff1e 	bl	80128c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	681a      	ldr	r2, [r3, #0]
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a94:	68f9      	ldr	r1, [r7, #12]
 8010a96:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8010a98:	fb01 f303 	mul.w	r3, r1, r3
 8010a9c:	441a      	add	r2, r3
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	2200      	movs	r2, #0
 8010aa6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	681a      	ldr	r2, [r3, #0]
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	681a      	ldr	r2, [r3, #0]
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010ab8:	3b01      	subs	r3, #1
 8010aba:	68f9      	ldr	r1, [r7, #12]
 8010abc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8010abe:	fb01 f303 	mul.w	r3, r1, r3
 8010ac2:	441a      	add	r2, r3
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	22ff      	movs	r2, #255	@ 0xff
 8010acc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	22ff      	movs	r2, #255	@ 0xff
 8010ad4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8010ad8:	683b      	ldr	r3, [r7, #0]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d114      	bne.n	8010b08 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	691b      	ldr	r3, [r3, #16]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d01a      	beq.n	8010b1c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	3310      	adds	r3, #16
 8010aea:	4618      	mov	r0, r3
 8010aec:	f001 f9d2 	bl	8011e94 <xTaskRemoveFromEventList>
 8010af0:	4603      	mov	r3, r0
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d012      	beq.n	8010b1c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010af6:	4b0d      	ldr	r3, [pc, #52]	@ (8010b2c <xQueueGenericReset+0xd0>)
 8010af8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010afc:	601a      	str	r2, [r3, #0]
 8010afe:	f3bf 8f4f 	dsb	sy
 8010b02:	f3bf 8f6f 	isb	sy
 8010b06:	e009      	b.n	8010b1c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	3310      	adds	r3, #16
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	f7ff fef0 	bl	80108f2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	3324      	adds	r3, #36	@ 0x24
 8010b16:	4618      	mov	r0, r3
 8010b18:	f7ff feeb 	bl	80108f2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010b1c:	f001 ff06 	bl	801292c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010b20:	2301      	movs	r3, #1
}
 8010b22:	4618      	mov	r0, r3
 8010b24:	3710      	adds	r7, #16
 8010b26:	46bd      	mov	sp, r7
 8010b28:	bd80      	pop	{r7, pc}
 8010b2a:	bf00      	nop
 8010b2c:	e000ed04 	.word	0xe000ed04

08010b30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010b30:	b580      	push	{r7, lr}
 8010b32:	b08e      	sub	sp, #56	@ 0x38
 8010b34:	af02      	add	r7, sp, #8
 8010b36:	60f8      	str	r0, [r7, #12]
 8010b38:	60b9      	str	r1, [r7, #8]
 8010b3a:	607a      	str	r2, [r7, #4]
 8010b3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d10b      	bne.n	8010b5c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8010b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b48:	f383 8811 	msr	BASEPRI, r3
 8010b4c:	f3bf 8f6f 	isb	sy
 8010b50:	f3bf 8f4f 	dsb	sy
 8010b54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010b56:	bf00      	nop
 8010b58:	bf00      	nop
 8010b5a:	e7fd      	b.n	8010b58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010b5c:	683b      	ldr	r3, [r7, #0]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d10b      	bne.n	8010b7a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8010b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b66:	f383 8811 	msr	BASEPRI, r3
 8010b6a:	f3bf 8f6f 	isb	sy
 8010b6e:	f3bf 8f4f 	dsb	sy
 8010b72:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010b74:	bf00      	nop
 8010b76:	bf00      	nop
 8010b78:	e7fd      	b.n	8010b76 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d002      	beq.n	8010b86 <xQueueGenericCreateStatic+0x56>
 8010b80:	68bb      	ldr	r3, [r7, #8]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d001      	beq.n	8010b8a <xQueueGenericCreateStatic+0x5a>
 8010b86:	2301      	movs	r3, #1
 8010b88:	e000      	b.n	8010b8c <xQueueGenericCreateStatic+0x5c>
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d10b      	bne.n	8010ba8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8010b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b94:	f383 8811 	msr	BASEPRI, r3
 8010b98:	f3bf 8f6f 	isb	sy
 8010b9c:	f3bf 8f4f 	dsb	sy
 8010ba0:	623b      	str	r3, [r7, #32]
}
 8010ba2:	bf00      	nop
 8010ba4:	bf00      	nop
 8010ba6:	e7fd      	b.n	8010ba4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d102      	bne.n	8010bb4 <xQueueGenericCreateStatic+0x84>
 8010bae:	68bb      	ldr	r3, [r7, #8]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d101      	bne.n	8010bb8 <xQueueGenericCreateStatic+0x88>
 8010bb4:	2301      	movs	r3, #1
 8010bb6:	e000      	b.n	8010bba <xQueueGenericCreateStatic+0x8a>
 8010bb8:	2300      	movs	r3, #0
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d10b      	bne.n	8010bd6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8010bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bc2:	f383 8811 	msr	BASEPRI, r3
 8010bc6:	f3bf 8f6f 	isb	sy
 8010bca:	f3bf 8f4f 	dsb	sy
 8010bce:	61fb      	str	r3, [r7, #28]
}
 8010bd0:	bf00      	nop
 8010bd2:	bf00      	nop
 8010bd4:	e7fd      	b.n	8010bd2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010bd6:	2348      	movs	r3, #72	@ 0x48
 8010bd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010bda:	697b      	ldr	r3, [r7, #20]
 8010bdc:	2b48      	cmp	r3, #72	@ 0x48
 8010bde:	d00b      	beq.n	8010bf8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8010be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010be4:	f383 8811 	msr	BASEPRI, r3
 8010be8:	f3bf 8f6f 	isb	sy
 8010bec:	f3bf 8f4f 	dsb	sy
 8010bf0:	61bb      	str	r3, [r7, #24]
}
 8010bf2:	bf00      	nop
 8010bf4:	bf00      	nop
 8010bf6:	e7fd      	b.n	8010bf4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010bf8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010bfa:	683b      	ldr	r3, [r7, #0]
 8010bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8010bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d00d      	beq.n	8010c20 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c06:	2201      	movs	r2, #1
 8010c08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010c0c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8010c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c12:	9300      	str	r3, [sp, #0]
 8010c14:	4613      	mov	r3, r2
 8010c16:	687a      	ldr	r2, [r7, #4]
 8010c18:	68b9      	ldr	r1, [r7, #8]
 8010c1a:	68f8      	ldr	r0, [r7, #12]
 8010c1c:	f000 f840 	bl	8010ca0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8010c22:	4618      	mov	r0, r3
 8010c24:	3730      	adds	r7, #48	@ 0x30
 8010c26:	46bd      	mov	sp, r7
 8010c28:	bd80      	pop	{r7, pc}

08010c2a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010c2a:	b580      	push	{r7, lr}
 8010c2c:	b08a      	sub	sp, #40	@ 0x28
 8010c2e:	af02      	add	r7, sp, #8
 8010c30:	60f8      	str	r0, [r7, #12]
 8010c32:	60b9      	str	r1, [r7, #8]
 8010c34:	4613      	mov	r3, r2
 8010c36:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d10b      	bne.n	8010c56 <xQueueGenericCreate+0x2c>
	__asm volatile
 8010c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c42:	f383 8811 	msr	BASEPRI, r3
 8010c46:	f3bf 8f6f 	isb	sy
 8010c4a:	f3bf 8f4f 	dsb	sy
 8010c4e:	613b      	str	r3, [r7, #16]
}
 8010c50:	bf00      	nop
 8010c52:	bf00      	nop
 8010c54:	e7fd      	b.n	8010c52 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	68ba      	ldr	r2, [r7, #8]
 8010c5a:	fb02 f303 	mul.w	r3, r2, r3
 8010c5e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010c60:	69fb      	ldr	r3, [r7, #28]
 8010c62:	3348      	adds	r3, #72	@ 0x48
 8010c64:	4618      	mov	r0, r3
 8010c66:	f001 ff51 	bl	8012b0c <pvPortMalloc>
 8010c6a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010c6c:	69bb      	ldr	r3, [r7, #24]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d011      	beq.n	8010c96 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010c72:	69bb      	ldr	r3, [r7, #24]
 8010c74:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010c76:	697b      	ldr	r3, [r7, #20]
 8010c78:	3348      	adds	r3, #72	@ 0x48
 8010c7a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010c7c:	69bb      	ldr	r3, [r7, #24]
 8010c7e:	2200      	movs	r2, #0
 8010c80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010c84:	79fa      	ldrb	r2, [r7, #7]
 8010c86:	69bb      	ldr	r3, [r7, #24]
 8010c88:	9300      	str	r3, [sp, #0]
 8010c8a:	4613      	mov	r3, r2
 8010c8c:	697a      	ldr	r2, [r7, #20]
 8010c8e:	68b9      	ldr	r1, [r7, #8]
 8010c90:	68f8      	ldr	r0, [r7, #12]
 8010c92:	f000 f805 	bl	8010ca0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010c96:	69bb      	ldr	r3, [r7, #24]
	}
 8010c98:	4618      	mov	r0, r3
 8010c9a:	3720      	adds	r7, #32
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	bd80      	pop	{r7, pc}

08010ca0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b084      	sub	sp, #16
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	60f8      	str	r0, [r7, #12]
 8010ca8:	60b9      	str	r1, [r7, #8]
 8010caa:	607a      	str	r2, [r7, #4]
 8010cac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010cae:	68bb      	ldr	r3, [r7, #8]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d103      	bne.n	8010cbc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010cb4:	69bb      	ldr	r3, [r7, #24]
 8010cb6:	69ba      	ldr	r2, [r7, #24]
 8010cb8:	601a      	str	r2, [r3, #0]
 8010cba:	e002      	b.n	8010cc2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010cbc:	69bb      	ldr	r3, [r7, #24]
 8010cbe:	687a      	ldr	r2, [r7, #4]
 8010cc0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010cc2:	69bb      	ldr	r3, [r7, #24]
 8010cc4:	68fa      	ldr	r2, [r7, #12]
 8010cc6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010cc8:	69bb      	ldr	r3, [r7, #24]
 8010cca:	68ba      	ldr	r2, [r7, #8]
 8010ccc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010cce:	2101      	movs	r1, #1
 8010cd0:	69b8      	ldr	r0, [r7, #24]
 8010cd2:	f7ff fec3 	bl	8010a5c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010cd6:	bf00      	nop
 8010cd8:	3710      	adds	r7, #16
 8010cda:	46bd      	mov	sp, r7
 8010cdc:	bd80      	pop	{r7, pc}
	...

08010ce0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b08e      	sub	sp, #56	@ 0x38
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	60f8      	str	r0, [r7, #12]
 8010ce8:	60b9      	str	r1, [r7, #8]
 8010cea:	607a      	str	r2, [r7, #4]
 8010cec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010cee:	2300      	movs	r3, #0
 8010cf0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8010cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d10b      	bne.n	8010d14 <xQueueGenericSend+0x34>
	__asm volatile
 8010cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d00:	f383 8811 	msr	BASEPRI, r3
 8010d04:	f3bf 8f6f 	isb	sy
 8010d08:	f3bf 8f4f 	dsb	sy
 8010d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010d0e:	bf00      	nop
 8010d10:	bf00      	nop
 8010d12:	e7fd      	b.n	8010d10 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010d14:	68bb      	ldr	r3, [r7, #8]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d103      	bne.n	8010d22 <xQueueGenericSend+0x42>
 8010d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d101      	bne.n	8010d26 <xQueueGenericSend+0x46>
 8010d22:	2301      	movs	r3, #1
 8010d24:	e000      	b.n	8010d28 <xQueueGenericSend+0x48>
 8010d26:	2300      	movs	r3, #0
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d10b      	bne.n	8010d44 <xQueueGenericSend+0x64>
	__asm volatile
 8010d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d30:	f383 8811 	msr	BASEPRI, r3
 8010d34:	f3bf 8f6f 	isb	sy
 8010d38:	f3bf 8f4f 	dsb	sy
 8010d3c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010d3e:	bf00      	nop
 8010d40:	bf00      	nop
 8010d42:	e7fd      	b.n	8010d40 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010d44:	683b      	ldr	r3, [r7, #0]
 8010d46:	2b02      	cmp	r3, #2
 8010d48:	d103      	bne.n	8010d52 <xQueueGenericSend+0x72>
 8010d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010d4e:	2b01      	cmp	r3, #1
 8010d50:	d101      	bne.n	8010d56 <xQueueGenericSend+0x76>
 8010d52:	2301      	movs	r3, #1
 8010d54:	e000      	b.n	8010d58 <xQueueGenericSend+0x78>
 8010d56:	2300      	movs	r3, #0
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d10b      	bne.n	8010d74 <xQueueGenericSend+0x94>
	__asm volatile
 8010d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d60:	f383 8811 	msr	BASEPRI, r3
 8010d64:	f3bf 8f6f 	isb	sy
 8010d68:	f3bf 8f4f 	dsb	sy
 8010d6c:	623b      	str	r3, [r7, #32]
}
 8010d6e:	bf00      	nop
 8010d70:	bf00      	nop
 8010d72:	e7fd      	b.n	8010d70 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010d74:	f001 fa54 	bl	8012220 <xTaskGetSchedulerState>
 8010d78:	4603      	mov	r3, r0
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d102      	bne.n	8010d84 <xQueueGenericSend+0xa4>
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d101      	bne.n	8010d88 <xQueueGenericSend+0xa8>
 8010d84:	2301      	movs	r3, #1
 8010d86:	e000      	b.n	8010d8a <xQueueGenericSend+0xaa>
 8010d88:	2300      	movs	r3, #0
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d10b      	bne.n	8010da6 <xQueueGenericSend+0xc6>
	__asm volatile
 8010d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d92:	f383 8811 	msr	BASEPRI, r3
 8010d96:	f3bf 8f6f 	isb	sy
 8010d9a:	f3bf 8f4f 	dsb	sy
 8010d9e:	61fb      	str	r3, [r7, #28]
}
 8010da0:	bf00      	nop
 8010da2:	bf00      	nop
 8010da4:	e7fd      	b.n	8010da2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010da6:	f001 fd8f 	bl	80128c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010db2:	429a      	cmp	r2, r3
 8010db4:	d302      	bcc.n	8010dbc <xQueueGenericSend+0xdc>
 8010db6:	683b      	ldr	r3, [r7, #0]
 8010db8:	2b02      	cmp	r3, #2
 8010dba:	d129      	bne.n	8010e10 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010dbc:	683a      	ldr	r2, [r7, #0]
 8010dbe:	68b9      	ldr	r1, [r7, #8]
 8010dc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010dc2:	f000 faed 	bl	80113a0 <prvCopyDataToQueue>
 8010dc6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d010      	beq.n	8010df2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dd2:	3324      	adds	r3, #36	@ 0x24
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f001 f85d 	bl	8011e94 <xTaskRemoveFromEventList>
 8010dda:	4603      	mov	r3, r0
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d013      	beq.n	8010e08 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010de0:	4b3f      	ldr	r3, [pc, #252]	@ (8010ee0 <xQueueGenericSend+0x200>)
 8010de2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010de6:	601a      	str	r2, [r3, #0]
 8010de8:	f3bf 8f4f 	dsb	sy
 8010dec:	f3bf 8f6f 	isb	sy
 8010df0:	e00a      	b.n	8010e08 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d007      	beq.n	8010e08 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010df8:	4b39      	ldr	r3, [pc, #228]	@ (8010ee0 <xQueueGenericSend+0x200>)
 8010dfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010dfe:	601a      	str	r2, [r3, #0]
 8010e00:	f3bf 8f4f 	dsb	sy
 8010e04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010e08:	f001 fd90 	bl	801292c <vPortExitCritical>
				return pdPASS;
 8010e0c:	2301      	movs	r3, #1
 8010e0e:	e063      	b.n	8010ed8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d103      	bne.n	8010e1e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010e16:	f001 fd89 	bl	801292c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	e05c      	b.n	8010ed8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010e1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d106      	bne.n	8010e32 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010e24:	f107 0314 	add.w	r3, r7, #20
 8010e28:	4618      	mov	r0, r3
 8010e2a:	f001 f897 	bl	8011f5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010e2e:	2301      	movs	r3, #1
 8010e30:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010e32:	f001 fd7b 	bl	801292c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010e36:	f000 fe3d 	bl	8011ab4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010e3a:	f001 fd45 	bl	80128c8 <vPortEnterCritical>
 8010e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010e44:	b25b      	sxtb	r3, r3
 8010e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e4a:	d103      	bne.n	8010e54 <xQueueGenericSend+0x174>
 8010e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e4e:	2200      	movs	r2, #0
 8010e50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010e5a:	b25b      	sxtb	r3, r3
 8010e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e60:	d103      	bne.n	8010e6a <xQueueGenericSend+0x18a>
 8010e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e64:	2200      	movs	r2, #0
 8010e66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010e6a:	f001 fd5f 	bl	801292c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010e6e:	1d3a      	adds	r2, r7, #4
 8010e70:	f107 0314 	add.w	r3, r7, #20
 8010e74:	4611      	mov	r1, r2
 8010e76:	4618      	mov	r0, r3
 8010e78:	f001 f886 	bl	8011f88 <xTaskCheckForTimeOut>
 8010e7c:	4603      	mov	r3, r0
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d124      	bne.n	8010ecc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010e82:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010e84:	f000 fb84 	bl	8011590 <prvIsQueueFull>
 8010e88:	4603      	mov	r3, r0
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d018      	beq.n	8010ec0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e90:	3310      	adds	r3, #16
 8010e92:	687a      	ldr	r2, [r7, #4]
 8010e94:	4611      	mov	r1, r2
 8010e96:	4618      	mov	r0, r3
 8010e98:	f000 ffd6 	bl	8011e48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010e9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010e9e:	f000 fb0f 	bl	80114c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010ea2:	f000 fe15 	bl	8011ad0 <xTaskResumeAll>
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	f47f af7c 	bne.w	8010da6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8010eae:	4b0c      	ldr	r3, [pc, #48]	@ (8010ee0 <xQueueGenericSend+0x200>)
 8010eb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010eb4:	601a      	str	r2, [r3, #0]
 8010eb6:	f3bf 8f4f 	dsb	sy
 8010eba:	f3bf 8f6f 	isb	sy
 8010ebe:	e772      	b.n	8010da6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010ec0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010ec2:	f000 fafd 	bl	80114c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010ec6:	f000 fe03 	bl	8011ad0 <xTaskResumeAll>
 8010eca:	e76c      	b.n	8010da6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010ecc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010ece:	f000 faf7 	bl	80114c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010ed2:	f000 fdfd 	bl	8011ad0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010ed6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010ed8:	4618      	mov	r0, r3
 8010eda:	3738      	adds	r7, #56	@ 0x38
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bd80      	pop	{r7, pc}
 8010ee0:	e000ed04 	.word	0xe000ed04

08010ee4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b08e      	sub	sp, #56	@ 0x38
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	6078      	str	r0, [r7, #4]
 8010eec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d10b      	bne.n	8010f10 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8010ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010efc:	f383 8811 	msr	BASEPRI, r3
 8010f00:	f3bf 8f6f 	isb	sy
 8010f04:	f3bf 8f4f 	dsb	sy
 8010f08:	623b      	str	r3, [r7, #32]
}
 8010f0a:	bf00      	nop
 8010f0c:	bf00      	nop
 8010f0e:	e7fd      	b.n	8010f0c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d00b      	beq.n	8010f30 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8010f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f1c:	f383 8811 	msr	BASEPRI, r3
 8010f20:	f3bf 8f6f 	isb	sy
 8010f24:	f3bf 8f4f 	dsb	sy
 8010f28:	61fb      	str	r3, [r7, #28]
}
 8010f2a:	bf00      	nop
 8010f2c:	bf00      	nop
 8010f2e:	e7fd      	b.n	8010f2c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d103      	bne.n	8010f40 <xQueueGiveFromISR+0x5c>
 8010f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f3a:	689b      	ldr	r3, [r3, #8]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d101      	bne.n	8010f44 <xQueueGiveFromISR+0x60>
 8010f40:	2301      	movs	r3, #1
 8010f42:	e000      	b.n	8010f46 <xQueueGiveFromISR+0x62>
 8010f44:	2300      	movs	r3, #0
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d10b      	bne.n	8010f62 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8010f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f4e:	f383 8811 	msr	BASEPRI, r3
 8010f52:	f3bf 8f6f 	isb	sy
 8010f56:	f3bf 8f4f 	dsb	sy
 8010f5a:	61bb      	str	r3, [r7, #24]
}
 8010f5c:	bf00      	nop
 8010f5e:	bf00      	nop
 8010f60:	e7fd      	b.n	8010f5e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010f62:	f001 fd91 	bl	8012a88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010f66:	f3ef 8211 	mrs	r2, BASEPRI
 8010f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f6e:	f383 8811 	msr	BASEPRI, r3
 8010f72:	f3bf 8f6f 	isb	sy
 8010f76:	f3bf 8f4f 	dsb	sy
 8010f7a:	617a      	str	r2, [r7, #20]
 8010f7c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010f7e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f86:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010f8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010f8e:	429a      	cmp	r2, r3
 8010f90:	d22b      	bcs.n	8010fea <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010f98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f9e:	1c5a      	adds	r2, r3, #1
 8010fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fa2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010fa4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8010fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fac:	d112      	bne.n	8010fd4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d016      	beq.n	8010fe4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fb8:	3324      	adds	r3, #36	@ 0x24
 8010fba:	4618      	mov	r0, r3
 8010fbc:	f000 ff6a 	bl	8011e94 <xTaskRemoveFromEventList>
 8010fc0:	4603      	mov	r3, r0
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d00e      	beq.n	8010fe4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010fc6:	683b      	ldr	r3, [r7, #0]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d00b      	beq.n	8010fe4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010fcc:	683b      	ldr	r3, [r7, #0]
 8010fce:	2201      	movs	r2, #1
 8010fd0:	601a      	str	r2, [r3, #0]
 8010fd2:	e007      	b.n	8010fe4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010fd8:	3301      	adds	r3, #1
 8010fda:	b2db      	uxtb	r3, r3
 8010fdc:	b25a      	sxtb	r2, r3
 8010fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fe0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8010fe4:	2301      	movs	r3, #1
 8010fe6:	637b      	str	r3, [r7, #52]	@ 0x34
 8010fe8:	e001      	b.n	8010fee <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010fea:	2300      	movs	r3, #0
 8010fec:	637b      	str	r3, [r7, #52]	@ 0x34
 8010fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ff0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010ff8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	3738      	adds	r7, #56	@ 0x38
 8011000:	46bd      	mov	sp, r7
 8011002:	bd80      	pop	{r7, pc}

08011004 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011004:	b580      	push	{r7, lr}
 8011006:	b08e      	sub	sp, #56	@ 0x38
 8011008:	af00      	add	r7, sp, #0
 801100a:	6078      	str	r0, [r7, #4]
 801100c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801100e:	2300      	movs	r3, #0
 8011010:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8011016:	2300      	movs	r3, #0
 8011018:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801101a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801101c:	2b00      	cmp	r3, #0
 801101e:	d10b      	bne.n	8011038 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8011020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011024:	f383 8811 	msr	BASEPRI, r3
 8011028:	f3bf 8f6f 	isb	sy
 801102c:	f3bf 8f4f 	dsb	sy
 8011030:	623b      	str	r3, [r7, #32]
}
 8011032:	bf00      	nop
 8011034:	bf00      	nop
 8011036:	e7fd      	b.n	8011034 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801103a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801103c:	2b00      	cmp	r3, #0
 801103e:	d00b      	beq.n	8011058 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8011040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011044:	f383 8811 	msr	BASEPRI, r3
 8011048:	f3bf 8f6f 	isb	sy
 801104c:	f3bf 8f4f 	dsb	sy
 8011050:	61fb      	str	r3, [r7, #28]
}
 8011052:	bf00      	nop
 8011054:	bf00      	nop
 8011056:	e7fd      	b.n	8011054 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011058:	f001 f8e2 	bl	8012220 <xTaskGetSchedulerState>
 801105c:	4603      	mov	r3, r0
 801105e:	2b00      	cmp	r3, #0
 8011060:	d102      	bne.n	8011068 <xQueueSemaphoreTake+0x64>
 8011062:	683b      	ldr	r3, [r7, #0]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d101      	bne.n	801106c <xQueueSemaphoreTake+0x68>
 8011068:	2301      	movs	r3, #1
 801106a:	e000      	b.n	801106e <xQueueSemaphoreTake+0x6a>
 801106c:	2300      	movs	r3, #0
 801106e:	2b00      	cmp	r3, #0
 8011070:	d10b      	bne.n	801108a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8011072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011076:	f383 8811 	msr	BASEPRI, r3
 801107a:	f3bf 8f6f 	isb	sy
 801107e:	f3bf 8f4f 	dsb	sy
 8011082:	61bb      	str	r3, [r7, #24]
}
 8011084:	bf00      	nop
 8011086:	bf00      	nop
 8011088:	e7fd      	b.n	8011086 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801108a:	f001 fc1d 	bl	80128c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801108e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011092:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011096:	2b00      	cmp	r3, #0
 8011098:	d024      	beq.n	80110e4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801109a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801109c:	1e5a      	subs	r2, r3, #1
 801109e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110a0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80110a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d104      	bne.n	80110b4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80110aa:	f001 fa65 	bl	8012578 <pvTaskIncrementMutexHeldCount>
 80110ae:	4602      	mov	r2, r0
 80110b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110b2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80110b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110b6:	691b      	ldr	r3, [r3, #16]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d00f      	beq.n	80110dc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80110bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110be:	3310      	adds	r3, #16
 80110c0:	4618      	mov	r0, r3
 80110c2:	f000 fee7 	bl	8011e94 <xTaskRemoveFromEventList>
 80110c6:	4603      	mov	r3, r0
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d007      	beq.n	80110dc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80110cc:	4b54      	ldr	r3, [pc, #336]	@ (8011220 <xQueueSemaphoreTake+0x21c>)
 80110ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80110d2:	601a      	str	r2, [r3, #0]
 80110d4:	f3bf 8f4f 	dsb	sy
 80110d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80110dc:	f001 fc26 	bl	801292c <vPortExitCritical>
				return pdPASS;
 80110e0:	2301      	movs	r3, #1
 80110e2:	e098      	b.n	8011216 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80110e4:	683b      	ldr	r3, [r7, #0]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d112      	bne.n	8011110 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80110ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d00b      	beq.n	8011108 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80110f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110f4:	f383 8811 	msr	BASEPRI, r3
 80110f8:	f3bf 8f6f 	isb	sy
 80110fc:	f3bf 8f4f 	dsb	sy
 8011100:	617b      	str	r3, [r7, #20]
}
 8011102:	bf00      	nop
 8011104:	bf00      	nop
 8011106:	e7fd      	b.n	8011104 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011108:	f001 fc10 	bl	801292c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801110c:	2300      	movs	r3, #0
 801110e:	e082      	b.n	8011216 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011112:	2b00      	cmp	r3, #0
 8011114:	d106      	bne.n	8011124 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011116:	f107 030c 	add.w	r3, r7, #12
 801111a:	4618      	mov	r0, r3
 801111c:	f000 ff1e 	bl	8011f5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011120:	2301      	movs	r3, #1
 8011122:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011124:	f001 fc02 	bl	801292c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011128:	f000 fcc4 	bl	8011ab4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801112c:	f001 fbcc 	bl	80128c8 <vPortEnterCritical>
 8011130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011132:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011136:	b25b      	sxtb	r3, r3
 8011138:	f1b3 3fff 	cmp.w	r3, #4294967295
 801113c:	d103      	bne.n	8011146 <xQueueSemaphoreTake+0x142>
 801113e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011140:	2200      	movs	r2, #0
 8011142:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011148:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801114c:	b25b      	sxtb	r3, r3
 801114e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011152:	d103      	bne.n	801115c <xQueueSemaphoreTake+0x158>
 8011154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011156:	2200      	movs	r2, #0
 8011158:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801115c:	f001 fbe6 	bl	801292c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011160:	463a      	mov	r2, r7
 8011162:	f107 030c 	add.w	r3, r7, #12
 8011166:	4611      	mov	r1, r2
 8011168:	4618      	mov	r0, r3
 801116a:	f000 ff0d 	bl	8011f88 <xTaskCheckForTimeOut>
 801116e:	4603      	mov	r3, r0
 8011170:	2b00      	cmp	r3, #0
 8011172:	d132      	bne.n	80111da <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011174:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011176:	f000 f9f5 	bl	8011564 <prvIsQueueEmpty>
 801117a:	4603      	mov	r3, r0
 801117c:	2b00      	cmp	r3, #0
 801117e:	d026      	beq.n	80111ce <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	2b00      	cmp	r3, #0
 8011186:	d109      	bne.n	801119c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8011188:	f001 fb9e 	bl	80128c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801118c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801118e:	689b      	ldr	r3, [r3, #8]
 8011190:	4618      	mov	r0, r3
 8011192:	f001 f863 	bl	801225c <xTaskPriorityInherit>
 8011196:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8011198:	f001 fbc8 	bl	801292c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801119c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801119e:	3324      	adds	r3, #36	@ 0x24
 80111a0:	683a      	ldr	r2, [r7, #0]
 80111a2:	4611      	mov	r1, r2
 80111a4:	4618      	mov	r0, r3
 80111a6:	f000 fe4f 	bl	8011e48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80111aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80111ac:	f000 f988 	bl	80114c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80111b0:	f000 fc8e 	bl	8011ad0 <xTaskResumeAll>
 80111b4:	4603      	mov	r3, r0
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	f47f af67 	bne.w	801108a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80111bc:	4b18      	ldr	r3, [pc, #96]	@ (8011220 <xQueueSemaphoreTake+0x21c>)
 80111be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80111c2:	601a      	str	r2, [r3, #0]
 80111c4:	f3bf 8f4f 	dsb	sy
 80111c8:	f3bf 8f6f 	isb	sy
 80111cc:	e75d      	b.n	801108a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80111ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80111d0:	f000 f976 	bl	80114c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80111d4:	f000 fc7c 	bl	8011ad0 <xTaskResumeAll>
 80111d8:	e757      	b.n	801108a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80111da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80111dc:	f000 f970 	bl	80114c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80111e0:	f000 fc76 	bl	8011ad0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80111e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80111e6:	f000 f9bd 	bl	8011564 <prvIsQueueEmpty>
 80111ea:	4603      	mov	r3, r0
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	f43f af4c 	beq.w	801108a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80111f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d00d      	beq.n	8011214 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80111f8:	f001 fb66 	bl	80128c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80111fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80111fe:	f000 f8b7 	bl	8011370 <prvGetDisinheritPriorityAfterTimeout>
 8011202:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011206:	689b      	ldr	r3, [r3, #8]
 8011208:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801120a:	4618      	mov	r0, r3
 801120c:	f001 f924 	bl	8012458 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011210:	f001 fb8c 	bl	801292c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011214:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011216:	4618      	mov	r0, r3
 8011218:	3738      	adds	r7, #56	@ 0x38
 801121a:	46bd      	mov	sp, r7
 801121c:	bd80      	pop	{r7, pc}
 801121e:	bf00      	nop
 8011220:	e000ed04 	.word	0xe000ed04

08011224 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b08e      	sub	sp, #56	@ 0x38
 8011228:	af00      	add	r7, sp, #0
 801122a:	60f8      	str	r0, [r7, #12]
 801122c:	60b9      	str	r1, [r7, #8]
 801122e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8011234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011236:	2b00      	cmp	r3, #0
 8011238:	d10b      	bne.n	8011252 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 801123a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801123e:	f383 8811 	msr	BASEPRI, r3
 8011242:	f3bf 8f6f 	isb	sy
 8011246:	f3bf 8f4f 	dsb	sy
 801124a:	623b      	str	r3, [r7, #32]
}
 801124c:	bf00      	nop
 801124e:	bf00      	nop
 8011250:	e7fd      	b.n	801124e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011252:	68bb      	ldr	r3, [r7, #8]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d103      	bne.n	8011260 <xQueueReceiveFromISR+0x3c>
 8011258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801125a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801125c:	2b00      	cmp	r3, #0
 801125e:	d101      	bne.n	8011264 <xQueueReceiveFromISR+0x40>
 8011260:	2301      	movs	r3, #1
 8011262:	e000      	b.n	8011266 <xQueueReceiveFromISR+0x42>
 8011264:	2300      	movs	r3, #0
 8011266:	2b00      	cmp	r3, #0
 8011268:	d10b      	bne.n	8011282 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 801126a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801126e:	f383 8811 	msr	BASEPRI, r3
 8011272:	f3bf 8f6f 	isb	sy
 8011276:	f3bf 8f4f 	dsb	sy
 801127a:	61fb      	str	r3, [r7, #28]
}
 801127c:	bf00      	nop
 801127e:	bf00      	nop
 8011280:	e7fd      	b.n	801127e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011282:	f001 fc01 	bl	8012a88 <vPortValidateInterruptPriority>
	__asm volatile
 8011286:	f3ef 8211 	mrs	r2, BASEPRI
 801128a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801128e:	f383 8811 	msr	BASEPRI, r3
 8011292:	f3bf 8f6f 	isb	sy
 8011296:	f3bf 8f4f 	dsb	sy
 801129a:	61ba      	str	r2, [r7, #24]
 801129c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801129e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80112a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80112a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80112a6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80112a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d02f      	beq.n	801130e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80112ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80112b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80112b8:	68b9      	ldr	r1, [r7, #8]
 80112ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80112bc:	f000 f8da 	bl	8011474 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80112c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112c2:	1e5a      	subs	r2, r3, #1
 80112c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112c6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80112c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80112cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112d0:	d112      	bne.n	80112f8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80112d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112d4:	691b      	ldr	r3, [r3, #16]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d016      	beq.n	8011308 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80112da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112dc:	3310      	adds	r3, #16
 80112de:	4618      	mov	r0, r3
 80112e0:	f000 fdd8 	bl	8011e94 <xTaskRemoveFromEventList>
 80112e4:	4603      	mov	r3, r0
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d00e      	beq.n	8011308 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d00b      	beq.n	8011308 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	2201      	movs	r2, #1
 80112f4:	601a      	str	r2, [r3, #0]
 80112f6:	e007      	b.n	8011308 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80112f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80112fc:	3301      	adds	r3, #1
 80112fe:	b2db      	uxtb	r3, r3
 8011300:	b25a      	sxtb	r2, r3
 8011302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011304:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8011308:	2301      	movs	r3, #1
 801130a:	637b      	str	r3, [r7, #52]	@ 0x34
 801130c:	e001      	b.n	8011312 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 801130e:	2300      	movs	r3, #0
 8011310:	637b      	str	r3, [r7, #52]	@ 0x34
 8011312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011314:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011316:	693b      	ldr	r3, [r7, #16]
 8011318:	f383 8811 	msr	BASEPRI, r3
}
 801131c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801131e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8011320:	4618      	mov	r0, r3
 8011322:	3738      	adds	r7, #56	@ 0x38
 8011324:	46bd      	mov	sp, r7
 8011326:	bd80      	pop	{r7, pc}

08011328 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8011328:	b580      	push	{r7, lr}
 801132a:	b084      	sub	sp, #16
 801132c:	af00      	add	r7, sp, #0
 801132e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d10b      	bne.n	8011352 <vQueueDelete+0x2a>
	__asm volatile
 801133a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801133e:	f383 8811 	msr	BASEPRI, r3
 8011342:	f3bf 8f6f 	isb	sy
 8011346:	f3bf 8f4f 	dsb	sy
 801134a:	60bb      	str	r3, [r7, #8]
}
 801134c:	bf00      	nop
 801134e:	bf00      	nop
 8011350:	e7fd      	b.n	801134e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8011352:	68f8      	ldr	r0, [r7, #12]
 8011354:	f000 f934 	bl	80115c0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 801135e:	2b00      	cmp	r3, #0
 8011360:	d102      	bne.n	8011368 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8011362:	68f8      	ldr	r0, [r7, #12]
 8011364:	f001 fca0 	bl	8012ca8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8011368:	bf00      	nop
 801136a:	3710      	adds	r7, #16
 801136c:	46bd      	mov	sp, r7
 801136e:	bd80      	pop	{r7, pc}

08011370 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011370:	b480      	push	{r7}
 8011372:	b085      	sub	sp, #20
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801137c:	2b00      	cmp	r3, #0
 801137e:	d006      	beq.n	801138e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	f1c3 0307 	rsb	r3, r3, #7
 801138a:	60fb      	str	r3, [r7, #12]
 801138c:	e001      	b.n	8011392 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801138e:	2300      	movs	r3, #0
 8011390:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011392:	68fb      	ldr	r3, [r7, #12]
	}
 8011394:	4618      	mov	r0, r3
 8011396:	3714      	adds	r7, #20
 8011398:	46bd      	mov	sp, r7
 801139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801139e:	4770      	bx	lr

080113a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b086      	sub	sp, #24
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	60f8      	str	r0, [r7, #12]
 80113a8:	60b9      	str	r1, [r7, #8]
 80113aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80113ac:	2300      	movs	r3, #0
 80113ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80113b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d10d      	bne.n	80113da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d14d      	bne.n	8011462 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	689b      	ldr	r3, [r3, #8]
 80113ca:	4618      	mov	r0, r3
 80113cc:	f000 ffbc 	bl	8012348 <xTaskPriorityDisinherit>
 80113d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	2200      	movs	r2, #0
 80113d6:	609a      	str	r2, [r3, #8]
 80113d8:	e043      	b.n	8011462 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d119      	bne.n	8011414 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	6858      	ldr	r0, [r3, #4]
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80113e8:	461a      	mov	r2, r3
 80113ea:	68b9      	ldr	r1, [r7, #8]
 80113ec:	f002 fbe1 	bl	8013bb2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	685a      	ldr	r2, [r3, #4]
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80113f8:	441a      	add	r2, r3
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	685a      	ldr	r2, [r3, #4]
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	689b      	ldr	r3, [r3, #8]
 8011406:	429a      	cmp	r2, r3
 8011408:	d32b      	bcc.n	8011462 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	681a      	ldr	r2, [r3, #0]
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	605a      	str	r2, [r3, #4]
 8011412:	e026      	b.n	8011462 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	68d8      	ldr	r0, [r3, #12]
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801141c:	461a      	mov	r2, r3
 801141e:	68b9      	ldr	r1, [r7, #8]
 8011420:	f002 fbc7 	bl	8013bb2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	68da      	ldr	r2, [r3, #12]
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801142c:	425b      	negs	r3, r3
 801142e:	441a      	add	r2, r3
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	68da      	ldr	r2, [r3, #12]
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	429a      	cmp	r2, r3
 801143e:	d207      	bcs.n	8011450 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	689a      	ldr	r2, [r3, #8]
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011448:	425b      	negs	r3, r3
 801144a:	441a      	add	r2, r3
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	2b02      	cmp	r3, #2
 8011454:	d105      	bne.n	8011462 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011456:	693b      	ldr	r3, [r7, #16]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d002      	beq.n	8011462 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801145c:	693b      	ldr	r3, [r7, #16]
 801145e:	3b01      	subs	r3, #1
 8011460:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011462:	693b      	ldr	r3, [r7, #16]
 8011464:	1c5a      	adds	r2, r3, #1
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801146a:	697b      	ldr	r3, [r7, #20]
}
 801146c:	4618      	mov	r0, r3
 801146e:	3718      	adds	r7, #24
 8011470:	46bd      	mov	sp, r7
 8011472:	bd80      	pop	{r7, pc}

08011474 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011474:	b580      	push	{r7, lr}
 8011476:	b082      	sub	sp, #8
 8011478:	af00      	add	r7, sp, #0
 801147a:	6078      	str	r0, [r7, #4]
 801147c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011482:	2b00      	cmp	r3, #0
 8011484:	d018      	beq.n	80114b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	68da      	ldr	r2, [r3, #12]
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801148e:	441a      	add	r2, r3
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	68da      	ldr	r2, [r3, #12]
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	689b      	ldr	r3, [r3, #8]
 801149c:	429a      	cmp	r2, r3
 801149e:	d303      	bcc.n	80114a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	681a      	ldr	r2, [r3, #0]
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	68d9      	ldr	r1, [r3, #12]
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80114b0:	461a      	mov	r2, r3
 80114b2:	6838      	ldr	r0, [r7, #0]
 80114b4:	f002 fb7d 	bl	8013bb2 <memcpy>
	}
}
 80114b8:	bf00      	nop
 80114ba:	3708      	adds	r7, #8
 80114bc:	46bd      	mov	sp, r7
 80114be:	bd80      	pop	{r7, pc}

080114c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80114c0:	b580      	push	{r7, lr}
 80114c2:	b084      	sub	sp, #16
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80114c8:	f001 f9fe 	bl	80128c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80114d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80114d4:	e011      	b.n	80114fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d012      	beq.n	8011504 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	3324      	adds	r3, #36	@ 0x24
 80114e2:	4618      	mov	r0, r3
 80114e4:	f000 fcd6 	bl	8011e94 <xTaskRemoveFromEventList>
 80114e8:	4603      	mov	r3, r0
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d001      	beq.n	80114f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80114ee:	f000 fdaf 	bl	8012050 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80114f2:	7bfb      	ldrb	r3, [r7, #15]
 80114f4:	3b01      	subs	r3, #1
 80114f6:	b2db      	uxtb	r3, r3
 80114f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80114fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	dce9      	bgt.n	80114d6 <prvUnlockQueue+0x16>
 8011502:	e000      	b.n	8011506 <prvUnlockQueue+0x46>
					break;
 8011504:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	22ff      	movs	r2, #255	@ 0xff
 801150a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801150e:	f001 fa0d 	bl	801292c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011512:	f001 f9d9 	bl	80128c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801151c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801151e:	e011      	b.n	8011544 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	691b      	ldr	r3, [r3, #16]
 8011524:	2b00      	cmp	r3, #0
 8011526:	d012      	beq.n	801154e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	3310      	adds	r3, #16
 801152c:	4618      	mov	r0, r3
 801152e:	f000 fcb1 	bl	8011e94 <xTaskRemoveFromEventList>
 8011532:	4603      	mov	r3, r0
 8011534:	2b00      	cmp	r3, #0
 8011536:	d001      	beq.n	801153c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011538:	f000 fd8a 	bl	8012050 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801153c:	7bbb      	ldrb	r3, [r7, #14]
 801153e:	3b01      	subs	r3, #1
 8011540:	b2db      	uxtb	r3, r3
 8011542:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011544:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011548:	2b00      	cmp	r3, #0
 801154a:	dce9      	bgt.n	8011520 <prvUnlockQueue+0x60>
 801154c:	e000      	b.n	8011550 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801154e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	22ff      	movs	r2, #255	@ 0xff
 8011554:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8011558:	f001 f9e8 	bl	801292c <vPortExitCritical>
}
 801155c:	bf00      	nop
 801155e:	3710      	adds	r7, #16
 8011560:	46bd      	mov	sp, r7
 8011562:	bd80      	pop	{r7, pc}

08011564 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011564:	b580      	push	{r7, lr}
 8011566:	b084      	sub	sp, #16
 8011568:	af00      	add	r7, sp, #0
 801156a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801156c:	f001 f9ac 	bl	80128c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011574:	2b00      	cmp	r3, #0
 8011576:	d102      	bne.n	801157e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011578:	2301      	movs	r3, #1
 801157a:	60fb      	str	r3, [r7, #12]
 801157c:	e001      	b.n	8011582 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801157e:	2300      	movs	r3, #0
 8011580:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011582:	f001 f9d3 	bl	801292c <vPortExitCritical>

	return xReturn;
 8011586:	68fb      	ldr	r3, [r7, #12]
}
 8011588:	4618      	mov	r0, r3
 801158a:	3710      	adds	r7, #16
 801158c:	46bd      	mov	sp, r7
 801158e:	bd80      	pop	{r7, pc}

08011590 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b084      	sub	sp, #16
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011598:	f001 f996 	bl	80128c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80115a4:	429a      	cmp	r2, r3
 80115a6:	d102      	bne.n	80115ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80115a8:	2301      	movs	r3, #1
 80115aa:	60fb      	str	r3, [r7, #12]
 80115ac:	e001      	b.n	80115b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80115ae:	2300      	movs	r3, #0
 80115b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80115b2:	f001 f9bb 	bl	801292c <vPortExitCritical>

	return xReturn;
 80115b6:	68fb      	ldr	r3, [r7, #12]
}
 80115b8:	4618      	mov	r0, r3
 80115ba:	3710      	adds	r7, #16
 80115bc:	46bd      	mov	sp, r7
 80115be:	bd80      	pop	{r7, pc}

080115c0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80115c0:	b480      	push	{r7}
 80115c2:	b085      	sub	sp, #20
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80115c8:	2300      	movs	r3, #0
 80115ca:	60fb      	str	r3, [r7, #12]
 80115cc:	e016      	b.n	80115fc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80115ce:	4a10      	ldr	r2, [pc, #64]	@ (8011610 <vQueueUnregisterQueue+0x50>)
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	00db      	lsls	r3, r3, #3
 80115d4:	4413      	add	r3, r2
 80115d6:	685b      	ldr	r3, [r3, #4]
 80115d8:	687a      	ldr	r2, [r7, #4]
 80115da:	429a      	cmp	r2, r3
 80115dc:	d10b      	bne.n	80115f6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80115de:	4a0c      	ldr	r2, [pc, #48]	@ (8011610 <vQueueUnregisterQueue+0x50>)
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	2100      	movs	r1, #0
 80115e4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80115e8:	4a09      	ldr	r2, [pc, #36]	@ (8011610 <vQueueUnregisterQueue+0x50>)
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	00db      	lsls	r3, r3, #3
 80115ee:	4413      	add	r3, r2
 80115f0:	2200      	movs	r2, #0
 80115f2:	605a      	str	r2, [r3, #4]
				break;
 80115f4:	e006      	b.n	8011604 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	3301      	adds	r3, #1
 80115fa:	60fb      	str	r3, [r7, #12]
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	2b07      	cmp	r3, #7
 8011600:	d9e5      	bls.n	80115ce <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8011602:	bf00      	nop
 8011604:	bf00      	nop
 8011606:	3714      	adds	r7, #20
 8011608:	46bd      	mov	sp, r7
 801160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801160e:	4770      	bx	lr
 8011610:	20002c24 	.word	0x20002c24

08011614 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011614:	b580      	push	{r7, lr}
 8011616:	b08e      	sub	sp, #56	@ 0x38
 8011618:	af04      	add	r7, sp, #16
 801161a:	60f8      	str	r0, [r7, #12]
 801161c:	60b9      	str	r1, [r7, #8]
 801161e:	607a      	str	r2, [r7, #4]
 8011620:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011624:	2b00      	cmp	r3, #0
 8011626:	d10b      	bne.n	8011640 <xTaskCreateStatic+0x2c>
	__asm volatile
 8011628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801162c:	f383 8811 	msr	BASEPRI, r3
 8011630:	f3bf 8f6f 	isb	sy
 8011634:	f3bf 8f4f 	dsb	sy
 8011638:	623b      	str	r3, [r7, #32]
}
 801163a:	bf00      	nop
 801163c:	bf00      	nop
 801163e:	e7fd      	b.n	801163c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8011640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011642:	2b00      	cmp	r3, #0
 8011644:	d10b      	bne.n	801165e <xTaskCreateStatic+0x4a>
	__asm volatile
 8011646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801164a:	f383 8811 	msr	BASEPRI, r3
 801164e:	f3bf 8f6f 	isb	sy
 8011652:	f3bf 8f4f 	dsb	sy
 8011656:	61fb      	str	r3, [r7, #28]
}
 8011658:	bf00      	nop
 801165a:	bf00      	nop
 801165c:	e7fd      	b.n	801165a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801165e:	23a0      	movs	r3, #160	@ 0xa0
 8011660:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011662:	693b      	ldr	r3, [r7, #16]
 8011664:	2ba0      	cmp	r3, #160	@ 0xa0
 8011666:	d00b      	beq.n	8011680 <xTaskCreateStatic+0x6c>
	__asm volatile
 8011668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801166c:	f383 8811 	msr	BASEPRI, r3
 8011670:	f3bf 8f6f 	isb	sy
 8011674:	f3bf 8f4f 	dsb	sy
 8011678:	61bb      	str	r3, [r7, #24]
}
 801167a:	bf00      	nop
 801167c:	bf00      	nop
 801167e:	e7fd      	b.n	801167c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011680:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011684:	2b00      	cmp	r3, #0
 8011686:	d01e      	beq.n	80116c6 <xTaskCreateStatic+0xb2>
 8011688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801168a:	2b00      	cmp	r3, #0
 801168c:	d01b      	beq.n	80116c6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801168e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011690:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011694:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011696:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801169a:	2202      	movs	r2, #2
 801169c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80116a0:	2300      	movs	r3, #0
 80116a2:	9303      	str	r3, [sp, #12]
 80116a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116a6:	9302      	str	r3, [sp, #8]
 80116a8:	f107 0314 	add.w	r3, r7, #20
 80116ac:	9301      	str	r3, [sp, #4]
 80116ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116b0:	9300      	str	r3, [sp, #0]
 80116b2:	683b      	ldr	r3, [r7, #0]
 80116b4:	687a      	ldr	r2, [r7, #4]
 80116b6:	68b9      	ldr	r1, [r7, #8]
 80116b8:	68f8      	ldr	r0, [r7, #12]
 80116ba:	f000 f851 	bl	8011760 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80116be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80116c0:	f000 f8ee 	bl	80118a0 <prvAddNewTaskToReadyList>
 80116c4:	e001      	b.n	80116ca <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80116c6:	2300      	movs	r3, #0
 80116c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80116ca:	697b      	ldr	r3, [r7, #20]
	}
 80116cc:	4618      	mov	r0, r3
 80116ce:	3728      	adds	r7, #40	@ 0x28
 80116d0:	46bd      	mov	sp, r7
 80116d2:	bd80      	pop	{r7, pc}

080116d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80116d4:	b580      	push	{r7, lr}
 80116d6:	b08c      	sub	sp, #48	@ 0x30
 80116d8:	af04      	add	r7, sp, #16
 80116da:	60f8      	str	r0, [r7, #12]
 80116dc:	60b9      	str	r1, [r7, #8]
 80116de:	603b      	str	r3, [r7, #0]
 80116e0:	4613      	mov	r3, r2
 80116e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80116e4:	88fb      	ldrh	r3, [r7, #6]
 80116e6:	009b      	lsls	r3, r3, #2
 80116e8:	4618      	mov	r0, r3
 80116ea:	f001 fa0f 	bl	8012b0c <pvPortMalloc>
 80116ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80116f0:	697b      	ldr	r3, [r7, #20]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d00e      	beq.n	8011714 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80116f6:	20a0      	movs	r0, #160	@ 0xa0
 80116f8:	f001 fa08 	bl	8012b0c <pvPortMalloc>
 80116fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80116fe:	69fb      	ldr	r3, [r7, #28]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d003      	beq.n	801170c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011704:	69fb      	ldr	r3, [r7, #28]
 8011706:	697a      	ldr	r2, [r7, #20]
 8011708:	631a      	str	r2, [r3, #48]	@ 0x30
 801170a:	e005      	b.n	8011718 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801170c:	6978      	ldr	r0, [r7, #20]
 801170e:	f001 facb 	bl	8012ca8 <vPortFree>
 8011712:	e001      	b.n	8011718 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011714:	2300      	movs	r3, #0
 8011716:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011718:	69fb      	ldr	r3, [r7, #28]
 801171a:	2b00      	cmp	r3, #0
 801171c:	d017      	beq.n	801174e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801171e:	69fb      	ldr	r3, [r7, #28]
 8011720:	2200      	movs	r2, #0
 8011722:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011726:	88fa      	ldrh	r2, [r7, #6]
 8011728:	2300      	movs	r3, #0
 801172a:	9303      	str	r3, [sp, #12]
 801172c:	69fb      	ldr	r3, [r7, #28]
 801172e:	9302      	str	r3, [sp, #8]
 8011730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011732:	9301      	str	r3, [sp, #4]
 8011734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011736:	9300      	str	r3, [sp, #0]
 8011738:	683b      	ldr	r3, [r7, #0]
 801173a:	68b9      	ldr	r1, [r7, #8]
 801173c:	68f8      	ldr	r0, [r7, #12]
 801173e:	f000 f80f 	bl	8011760 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011742:	69f8      	ldr	r0, [r7, #28]
 8011744:	f000 f8ac 	bl	80118a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011748:	2301      	movs	r3, #1
 801174a:	61bb      	str	r3, [r7, #24]
 801174c:	e002      	b.n	8011754 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801174e:	f04f 33ff 	mov.w	r3, #4294967295
 8011752:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011754:	69bb      	ldr	r3, [r7, #24]
	}
 8011756:	4618      	mov	r0, r3
 8011758:	3720      	adds	r7, #32
 801175a:	46bd      	mov	sp, r7
 801175c:	bd80      	pop	{r7, pc}
	...

08011760 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011760:	b580      	push	{r7, lr}
 8011762:	b088      	sub	sp, #32
 8011764:	af00      	add	r7, sp, #0
 8011766:	60f8      	str	r0, [r7, #12]
 8011768:	60b9      	str	r1, [r7, #8]
 801176a:	607a      	str	r2, [r7, #4]
 801176c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801176e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011770:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011778:	3b01      	subs	r3, #1
 801177a:	009b      	lsls	r3, r3, #2
 801177c:	4413      	add	r3, r2
 801177e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011780:	69bb      	ldr	r3, [r7, #24]
 8011782:	f023 0307 	bic.w	r3, r3, #7
 8011786:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011788:	69bb      	ldr	r3, [r7, #24]
 801178a:	f003 0307 	and.w	r3, r3, #7
 801178e:	2b00      	cmp	r3, #0
 8011790:	d00b      	beq.n	80117aa <prvInitialiseNewTask+0x4a>
	__asm volatile
 8011792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011796:	f383 8811 	msr	BASEPRI, r3
 801179a:	f3bf 8f6f 	isb	sy
 801179e:	f3bf 8f4f 	dsb	sy
 80117a2:	617b      	str	r3, [r7, #20]
}
 80117a4:	bf00      	nop
 80117a6:	bf00      	nop
 80117a8:	e7fd      	b.n	80117a6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80117aa:	68bb      	ldr	r3, [r7, #8]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d01f      	beq.n	80117f0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80117b0:	2300      	movs	r3, #0
 80117b2:	61fb      	str	r3, [r7, #28]
 80117b4:	e012      	b.n	80117dc <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80117b6:	68ba      	ldr	r2, [r7, #8]
 80117b8:	69fb      	ldr	r3, [r7, #28]
 80117ba:	4413      	add	r3, r2
 80117bc:	7819      	ldrb	r1, [r3, #0]
 80117be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80117c0:	69fb      	ldr	r3, [r7, #28]
 80117c2:	4413      	add	r3, r2
 80117c4:	3334      	adds	r3, #52	@ 0x34
 80117c6:	460a      	mov	r2, r1
 80117c8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80117ca:	68ba      	ldr	r2, [r7, #8]
 80117cc:	69fb      	ldr	r3, [r7, #28]
 80117ce:	4413      	add	r3, r2
 80117d0:	781b      	ldrb	r3, [r3, #0]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d006      	beq.n	80117e4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80117d6:	69fb      	ldr	r3, [r7, #28]
 80117d8:	3301      	adds	r3, #1
 80117da:	61fb      	str	r3, [r7, #28]
 80117dc:	69fb      	ldr	r3, [r7, #28]
 80117de:	2b0f      	cmp	r3, #15
 80117e0:	d9e9      	bls.n	80117b6 <prvInitialiseNewTask+0x56>
 80117e2:	e000      	b.n	80117e6 <prvInitialiseNewTask+0x86>
			{
				break;
 80117e4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80117e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117e8:	2200      	movs	r2, #0
 80117ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80117ee:	e003      	b.n	80117f8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80117f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117f2:	2200      	movs	r2, #0
 80117f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80117f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117fa:	2b06      	cmp	r3, #6
 80117fc:	d901      	bls.n	8011802 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80117fe:	2306      	movs	r3, #6
 8011800:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011804:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011806:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801180a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801180c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801180e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011810:	2200      	movs	r2, #0
 8011812:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011816:	3304      	adds	r3, #4
 8011818:	4618      	mov	r0, r3
 801181a:	f7ff f88a 	bl	8010932 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801181e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011820:	3318      	adds	r3, #24
 8011822:	4618      	mov	r0, r3
 8011824:	f7ff f885 	bl	8010932 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801182a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801182c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801182e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011830:	f1c3 0207 	rsb	r2, r3, #7
 8011834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011836:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801183a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801183c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801183e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011840:	2200      	movs	r2, #0
 8011842:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011848:	2200      	movs	r2, #0
 801184a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801184e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011850:	334c      	adds	r3, #76	@ 0x4c
 8011852:	224c      	movs	r2, #76	@ 0x4c
 8011854:	2100      	movs	r1, #0
 8011856:	4618      	mov	r0, r3
 8011858:	f002 f8d5 	bl	8013a06 <memset>
 801185c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801185e:	4a0d      	ldr	r2, [pc, #52]	@ (8011894 <prvInitialiseNewTask+0x134>)
 8011860:	651a      	str	r2, [r3, #80]	@ 0x50
 8011862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011864:	4a0c      	ldr	r2, [pc, #48]	@ (8011898 <prvInitialiseNewTask+0x138>)
 8011866:	655a      	str	r2, [r3, #84]	@ 0x54
 8011868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801186a:	4a0c      	ldr	r2, [pc, #48]	@ (801189c <prvInitialiseNewTask+0x13c>)
 801186c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801186e:	683a      	ldr	r2, [r7, #0]
 8011870:	68f9      	ldr	r1, [r7, #12]
 8011872:	69b8      	ldr	r0, [r7, #24]
 8011874:	f000 fefa 	bl	801266c <pxPortInitialiseStack>
 8011878:	4602      	mov	r2, r0
 801187a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801187c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801187e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011880:	2b00      	cmp	r3, #0
 8011882:	d002      	beq.n	801188a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011886:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011888:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801188a:	bf00      	nop
 801188c:	3720      	adds	r7, #32
 801188e:	46bd      	mov	sp, r7
 8011890:	bd80      	pop	{r7, pc}
 8011892:	bf00      	nop
 8011894:	200069b8 	.word	0x200069b8
 8011898:	20006a20 	.word	0x20006a20
 801189c:	20006a88 	.word	0x20006a88

080118a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80118a0:	b580      	push	{r7, lr}
 80118a2:	b082      	sub	sp, #8
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80118a8:	f001 f80e 	bl	80128c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80118ac:	4b2a      	ldr	r3, [pc, #168]	@ (8011958 <prvAddNewTaskToReadyList+0xb8>)
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	3301      	adds	r3, #1
 80118b2:	4a29      	ldr	r2, [pc, #164]	@ (8011958 <prvAddNewTaskToReadyList+0xb8>)
 80118b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80118b6:	4b29      	ldr	r3, [pc, #164]	@ (801195c <prvAddNewTaskToReadyList+0xbc>)
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d109      	bne.n	80118d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80118be:	4a27      	ldr	r2, [pc, #156]	@ (801195c <prvAddNewTaskToReadyList+0xbc>)
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80118c4:	4b24      	ldr	r3, [pc, #144]	@ (8011958 <prvAddNewTaskToReadyList+0xb8>)
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	2b01      	cmp	r3, #1
 80118ca:	d110      	bne.n	80118ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80118cc:	f000 fbe4 	bl	8012098 <prvInitialiseTaskLists>
 80118d0:	e00d      	b.n	80118ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80118d2:	4b23      	ldr	r3, [pc, #140]	@ (8011960 <prvAddNewTaskToReadyList+0xc0>)
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d109      	bne.n	80118ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80118da:	4b20      	ldr	r3, [pc, #128]	@ (801195c <prvAddNewTaskToReadyList+0xbc>)
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118e4:	429a      	cmp	r2, r3
 80118e6:	d802      	bhi.n	80118ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80118e8:	4a1c      	ldr	r2, [pc, #112]	@ (801195c <prvAddNewTaskToReadyList+0xbc>)
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80118ee:	4b1d      	ldr	r3, [pc, #116]	@ (8011964 <prvAddNewTaskToReadyList+0xc4>)
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	3301      	adds	r3, #1
 80118f4:	4a1b      	ldr	r2, [pc, #108]	@ (8011964 <prvAddNewTaskToReadyList+0xc4>)
 80118f6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118fc:	2201      	movs	r2, #1
 80118fe:	409a      	lsls	r2, r3
 8011900:	4b19      	ldr	r3, [pc, #100]	@ (8011968 <prvAddNewTaskToReadyList+0xc8>)
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	4313      	orrs	r3, r2
 8011906:	4a18      	ldr	r2, [pc, #96]	@ (8011968 <prvAddNewTaskToReadyList+0xc8>)
 8011908:	6013      	str	r3, [r2, #0]
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801190e:	4613      	mov	r3, r2
 8011910:	009b      	lsls	r3, r3, #2
 8011912:	4413      	add	r3, r2
 8011914:	009b      	lsls	r3, r3, #2
 8011916:	4a15      	ldr	r2, [pc, #84]	@ (801196c <prvAddNewTaskToReadyList+0xcc>)
 8011918:	441a      	add	r2, r3
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	3304      	adds	r3, #4
 801191e:	4619      	mov	r1, r3
 8011920:	4610      	mov	r0, r2
 8011922:	f7ff f813 	bl	801094c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011926:	f001 f801 	bl	801292c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801192a:	4b0d      	ldr	r3, [pc, #52]	@ (8011960 <prvAddNewTaskToReadyList+0xc0>)
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d00e      	beq.n	8011950 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011932:	4b0a      	ldr	r3, [pc, #40]	@ (801195c <prvAddNewTaskToReadyList+0xbc>)
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801193c:	429a      	cmp	r2, r3
 801193e:	d207      	bcs.n	8011950 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011940:	4b0b      	ldr	r3, [pc, #44]	@ (8011970 <prvAddNewTaskToReadyList+0xd0>)
 8011942:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011946:	601a      	str	r2, [r3, #0]
 8011948:	f3bf 8f4f 	dsb	sy
 801194c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011950:	bf00      	nop
 8011952:	3708      	adds	r7, #8
 8011954:	46bd      	mov	sp, r7
 8011956:	bd80      	pop	{r7, pc}
 8011958:	20002d64 	.word	0x20002d64
 801195c:	20002c64 	.word	0x20002c64
 8011960:	20002d70 	.word	0x20002d70
 8011964:	20002d80 	.word	0x20002d80
 8011968:	20002d6c 	.word	0x20002d6c
 801196c:	20002c68 	.word	0x20002c68
 8011970:	e000ed04 	.word	0xe000ed04

08011974 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011974:	b580      	push	{r7, lr}
 8011976:	b084      	sub	sp, #16
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801197c:	2300      	movs	r3, #0
 801197e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	2b00      	cmp	r3, #0
 8011984:	d018      	beq.n	80119b8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011986:	4b14      	ldr	r3, [pc, #80]	@ (80119d8 <vTaskDelay+0x64>)
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d00b      	beq.n	80119a6 <vTaskDelay+0x32>
	__asm volatile
 801198e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011992:	f383 8811 	msr	BASEPRI, r3
 8011996:	f3bf 8f6f 	isb	sy
 801199a:	f3bf 8f4f 	dsb	sy
 801199e:	60bb      	str	r3, [r7, #8]
}
 80119a0:	bf00      	nop
 80119a2:	bf00      	nop
 80119a4:	e7fd      	b.n	80119a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80119a6:	f000 f885 	bl	8011ab4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80119aa:	2100      	movs	r1, #0
 80119ac:	6878      	ldr	r0, [r7, #4]
 80119ae:	f000 fdf7 	bl	80125a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80119b2:	f000 f88d 	bl	8011ad0 <xTaskResumeAll>
 80119b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d107      	bne.n	80119ce <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80119be:	4b07      	ldr	r3, [pc, #28]	@ (80119dc <vTaskDelay+0x68>)
 80119c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80119c4:	601a      	str	r2, [r3, #0]
 80119c6:	f3bf 8f4f 	dsb	sy
 80119ca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80119ce:	bf00      	nop
 80119d0:	3710      	adds	r7, #16
 80119d2:	46bd      	mov	sp, r7
 80119d4:	bd80      	pop	{r7, pc}
 80119d6:	bf00      	nop
 80119d8:	20002d8c 	.word	0x20002d8c
 80119dc:	e000ed04 	.word	0xe000ed04

080119e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b08a      	sub	sp, #40	@ 0x28
 80119e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80119e6:	2300      	movs	r3, #0
 80119e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80119ea:	2300      	movs	r3, #0
 80119ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80119ee:	463a      	mov	r2, r7
 80119f0:	1d39      	adds	r1, r7, #4
 80119f2:	f107 0308 	add.w	r3, r7, #8
 80119f6:	4618      	mov	r0, r3
 80119f8:	f7f0 fcda 	bl	80023b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80119fc:	6839      	ldr	r1, [r7, #0]
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	68ba      	ldr	r2, [r7, #8]
 8011a02:	9202      	str	r2, [sp, #8]
 8011a04:	9301      	str	r3, [sp, #4]
 8011a06:	2300      	movs	r3, #0
 8011a08:	9300      	str	r3, [sp, #0]
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	460a      	mov	r2, r1
 8011a0e:	4921      	ldr	r1, [pc, #132]	@ (8011a94 <vTaskStartScheduler+0xb4>)
 8011a10:	4821      	ldr	r0, [pc, #132]	@ (8011a98 <vTaskStartScheduler+0xb8>)
 8011a12:	f7ff fdff 	bl	8011614 <xTaskCreateStatic>
 8011a16:	4603      	mov	r3, r0
 8011a18:	4a20      	ldr	r2, [pc, #128]	@ (8011a9c <vTaskStartScheduler+0xbc>)
 8011a1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011a1c:	4b1f      	ldr	r3, [pc, #124]	@ (8011a9c <vTaskStartScheduler+0xbc>)
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d002      	beq.n	8011a2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011a24:	2301      	movs	r3, #1
 8011a26:	617b      	str	r3, [r7, #20]
 8011a28:	e001      	b.n	8011a2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011a2e:	697b      	ldr	r3, [r7, #20]
 8011a30:	2b01      	cmp	r3, #1
 8011a32:	d11b      	bne.n	8011a6c <vTaskStartScheduler+0x8c>
	__asm volatile
 8011a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a38:	f383 8811 	msr	BASEPRI, r3
 8011a3c:	f3bf 8f6f 	isb	sy
 8011a40:	f3bf 8f4f 	dsb	sy
 8011a44:	613b      	str	r3, [r7, #16]
}
 8011a46:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011a48:	4b15      	ldr	r3, [pc, #84]	@ (8011aa0 <vTaskStartScheduler+0xc0>)
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	334c      	adds	r3, #76	@ 0x4c
 8011a4e:	4a15      	ldr	r2, [pc, #84]	@ (8011aa4 <vTaskStartScheduler+0xc4>)
 8011a50:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011a52:	4b15      	ldr	r3, [pc, #84]	@ (8011aa8 <vTaskStartScheduler+0xc8>)
 8011a54:	f04f 32ff 	mov.w	r2, #4294967295
 8011a58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011a5a:	4b14      	ldr	r3, [pc, #80]	@ (8011aac <vTaskStartScheduler+0xcc>)
 8011a5c:	2201      	movs	r2, #1
 8011a5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011a60:	4b13      	ldr	r3, [pc, #76]	@ (8011ab0 <vTaskStartScheduler+0xd0>)
 8011a62:	2200      	movs	r2, #0
 8011a64:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011a66:	f000 fe8b 	bl	8012780 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011a6a:	e00f      	b.n	8011a8c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011a6c:	697b      	ldr	r3, [r7, #20]
 8011a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a72:	d10b      	bne.n	8011a8c <vTaskStartScheduler+0xac>
	__asm volatile
 8011a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a78:	f383 8811 	msr	BASEPRI, r3
 8011a7c:	f3bf 8f6f 	isb	sy
 8011a80:	f3bf 8f4f 	dsb	sy
 8011a84:	60fb      	str	r3, [r7, #12]
}
 8011a86:	bf00      	nop
 8011a88:	bf00      	nop
 8011a8a:	e7fd      	b.n	8011a88 <vTaskStartScheduler+0xa8>
}
 8011a8c:	bf00      	nop
 8011a8e:	3718      	adds	r7, #24
 8011a90:	46bd      	mov	sp, r7
 8011a92:	bd80      	pop	{r7, pc}
 8011a94:	08016fe0 	.word	0x08016fe0
 8011a98:	08012069 	.word	0x08012069
 8011a9c:	20002d88 	.word	0x20002d88
 8011aa0:	20002c64 	.word	0x20002c64
 8011aa4:	20000034 	.word	0x20000034
 8011aa8:	20002d84 	.word	0x20002d84
 8011aac:	20002d70 	.word	0x20002d70
 8011ab0:	20002d68 	.word	0x20002d68

08011ab4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011ab4:	b480      	push	{r7}
 8011ab6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011ab8:	4b04      	ldr	r3, [pc, #16]	@ (8011acc <vTaskSuspendAll+0x18>)
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	3301      	adds	r3, #1
 8011abe:	4a03      	ldr	r2, [pc, #12]	@ (8011acc <vTaskSuspendAll+0x18>)
 8011ac0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011ac2:	bf00      	nop
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aca:	4770      	bx	lr
 8011acc:	20002d8c 	.word	0x20002d8c

08011ad0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	b084      	sub	sp, #16
 8011ad4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011ada:	2300      	movs	r3, #0
 8011adc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011ade:	4b42      	ldr	r3, [pc, #264]	@ (8011be8 <xTaskResumeAll+0x118>)
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d10b      	bne.n	8011afe <xTaskResumeAll+0x2e>
	__asm volatile
 8011ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011aea:	f383 8811 	msr	BASEPRI, r3
 8011aee:	f3bf 8f6f 	isb	sy
 8011af2:	f3bf 8f4f 	dsb	sy
 8011af6:	603b      	str	r3, [r7, #0]
}
 8011af8:	bf00      	nop
 8011afa:	bf00      	nop
 8011afc:	e7fd      	b.n	8011afa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011afe:	f000 fee3 	bl	80128c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011b02:	4b39      	ldr	r3, [pc, #228]	@ (8011be8 <xTaskResumeAll+0x118>)
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	3b01      	subs	r3, #1
 8011b08:	4a37      	ldr	r2, [pc, #220]	@ (8011be8 <xTaskResumeAll+0x118>)
 8011b0a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011b0c:	4b36      	ldr	r3, [pc, #216]	@ (8011be8 <xTaskResumeAll+0x118>)
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d161      	bne.n	8011bd8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011b14:	4b35      	ldr	r3, [pc, #212]	@ (8011bec <xTaskResumeAll+0x11c>)
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d05d      	beq.n	8011bd8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011b1c:	e02e      	b.n	8011b7c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b1e:	4b34      	ldr	r3, [pc, #208]	@ (8011bf0 <xTaskResumeAll+0x120>)
 8011b20:	68db      	ldr	r3, [r3, #12]
 8011b22:	68db      	ldr	r3, [r3, #12]
 8011b24:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	3318      	adds	r3, #24
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	f7fe ff6b 	bl	8010a06 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	3304      	adds	r3, #4
 8011b34:	4618      	mov	r0, r3
 8011b36:	f7fe ff66 	bl	8010a06 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b3e:	2201      	movs	r2, #1
 8011b40:	409a      	lsls	r2, r3
 8011b42:	4b2c      	ldr	r3, [pc, #176]	@ (8011bf4 <xTaskResumeAll+0x124>)
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	4313      	orrs	r3, r2
 8011b48:	4a2a      	ldr	r2, [pc, #168]	@ (8011bf4 <xTaskResumeAll+0x124>)
 8011b4a:	6013      	str	r3, [r2, #0]
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011b50:	4613      	mov	r3, r2
 8011b52:	009b      	lsls	r3, r3, #2
 8011b54:	4413      	add	r3, r2
 8011b56:	009b      	lsls	r3, r3, #2
 8011b58:	4a27      	ldr	r2, [pc, #156]	@ (8011bf8 <xTaskResumeAll+0x128>)
 8011b5a:	441a      	add	r2, r3
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	3304      	adds	r3, #4
 8011b60:	4619      	mov	r1, r3
 8011b62:	4610      	mov	r0, r2
 8011b64:	f7fe fef2 	bl	801094c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011b6c:	4b23      	ldr	r3, [pc, #140]	@ (8011bfc <xTaskResumeAll+0x12c>)
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b72:	429a      	cmp	r2, r3
 8011b74:	d302      	bcc.n	8011b7c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8011b76:	4b22      	ldr	r3, [pc, #136]	@ (8011c00 <xTaskResumeAll+0x130>)
 8011b78:	2201      	movs	r2, #1
 8011b7a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8011bf0 <xTaskResumeAll+0x120>)
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d1cc      	bne.n	8011b1e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d001      	beq.n	8011b8e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011b8a:	f000 fb29 	bl	80121e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8011c04 <xTaskResumeAll+0x134>)
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d010      	beq.n	8011bbc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011b9a:	f000 f837 	bl	8011c0c <xTaskIncrementTick>
 8011b9e:	4603      	mov	r3, r0
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d002      	beq.n	8011baa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011ba4:	4b16      	ldr	r3, [pc, #88]	@ (8011c00 <xTaskResumeAll+0x130>)
 8011ba6:	2201      	movs	r2, #1
 8011ba8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	3b01      	subs	r3, #1
 8011bae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d1f1      	bne.n	8011b9a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8011bb6:	4b13      	ldr	r3, [pc, #76]	@ (8011c04 <xTaskResumeAll+0x134>)
 8011bb8:	2200      	movs	r2, #0
 8011bba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011bbc:	4b10      	ldr	r3, [pc, #64]	@ (8011c00 <xTaskResumeAll+0x130>)
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d009      	beq.n	8011bd8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011bc4:	2301      	movs	r3, #1
 8011bc6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8011c08 <xTaskResumeAll+0x138>)
 8011bca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011bce:	601a      	str	r2, [r3, #0]
 8011bd0:	f3bf 8f4f 	dsb	sy
 8011bd4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011bd8:	f000 fea8 	bl	801292c <vPortExitCritical>

	return xAlreadyYielded;
 8011bdc:	68bb      	ldr	r3, [r7, #8]
}
 8011bde:	4618      	mov	r0, r3
 8011be0:	3710      	adds	r7, #16
 8011be2:	46bd      	mov	sp, r7
 8011be4:	bd80      	pop	{r7, pc}
 8011be6:	bf00      	nop
 8011be8:	20002d8c 	.word	0x20002d8c
 8011bec:	20002d64 	.word	0x20002d64
 8011bf0:	20002d24 	.word	0x20002d24
 8011bf4:	20002d6c 	.word	0x20002d6c
 8011bf8:	20002c68 	.word	0x20002c68
 8011bfc:	20002c64 	.word	0x20002c64
 8011c00:	20002d78 	.word	0x20002d78
 8011c04:	20002d74 	.word	0x20002d74
 8011c08:	e000ed04 	.word	0xe000ed04

08011c0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b086      	sub	sp, #24
 8011c10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011c12:	2300      	movs	r3, #0
 8011c14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011c16:	4b4f      	ldr	r3, [pc, #316]	@ (8011d54 <xTaskIncrementTick+0x148>)
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	f040 808f 	bne.w	8011d3e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011c20:	4b4d      	ldr	r3, [pc, #308]	@ (8011d58 <xTaskIncrementTick+0x14c>)
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	3301      	adds	r3, #1
 8011c26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011c28:	4a4b      	ldr	r2, [pc, #300]	@ (8011d58 <xTaskIncrementTick+0x14c>)
 8011c2a:	693b      	ldr	r3, [r7, #16]
 8011c2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011c2e:	693b      	ldr	r3, [r7, #16]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d121      	bne.n	8011c78 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8011c34:	4b49      	ldr	r3, [pc, #292]	@ (8011d5c <xTaskIncrementTick+0x150>)
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d00b      	beq.n	8011c56 <xTaskIncrementTick+0x4a>
	__asm volatile
 8011c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c42:	f383 8811 	msr	BASEPRI, r3
 8011c46:	f3bf 8f6f 	isb	sy
 8011c4a:	f3bf 8f4f 	dsb	sy
 8011c4e:	603b      	str	r3, [r7, #0]
}
 8011c50:	bf00      	nop
 8011c52:	bf00      	nop
 8011c54:	e7fd      	b.n	8011c52 <xTaskIncrementTick+0x46>
 8011c56:	4b41      	ldr	r3, [pc, #260]	@ (8011d5c <xTaskIncrementTick+0x150>)
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	60fb      	str	r3, [r7, #12]
 8011c5c:	4b40      	ldr	r3, [pc, #256]	@ (8011d60 <xTaskIncrementTick+0x154>)
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	4a3e      	ldr	r2, [pc, #248]	@ (8011d5c <xTaskIncrementTick+0x150>)
 8011c62:	6013      	str	r3, [r2, #0]
 8011c64:	4a3e      	ldr	r2, [pc, #248]	@ (8011d60 <xTaskIncrementTick+0x154>)
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	6013      	str	r3, [r2, #0]
 8011c6a:	4b3e      	ldr	r3, [pc, #248]	@ (8011d64 <xTaskIncrementTick+0x158>)
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	3301      	adds	r3, #1
 8011c70:	4a3c      	ldr	r2, [pc, #240]	@ (8011d64 <xTaskIncrementTick+0x158>)
 8011c72:	6013      	str	r3, [r2, #0]
 8011c74:	f000 fab4 	bl	80121e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011c78:	4b3b      	ldr	r3, [pc, #236]	@ (8011d68 <xTaskIncrementTick+0x15c>)
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	693a      	ldr	r2, [r7, #16]
 8011c7e:	429a      	cmp	r2, r3
 8011c80:	d348      	bcc.n	8011d14 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011c82:	4b36      	ldr	r3, [pc, #216]	@ (8011d5c <xTaskIncrementTick+0x150>)
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d104      	bne.n	8011c96 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011c8c:	4b36      	ldr	r3, [pc, #216]	@ (8011d68 <xTaskIncrementTick+0x15c>)
 8011c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8011c92:	601a      	str	r2, [r3, #0]
					break;
 8011c94:	e03e      	b.n	8011d14 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c96:	4b31      	ldr	r3, [pc, #196]	@ (8011d5c <xTaskIncrementTick+0x150>)
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	68db      	ldr	r3, [r3, #12]
 8011c9c:	68db      	ldr	r3, [r3, #12]
 8011c9e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011ca0:	68bb      	ldr	r3, [r7, #8]
 8011ca2:	685b      	ldr	r3, [r3, #4]
 8011ca4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011ca6:	693a      	ldr	r2, [r7, #16]
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	429a      	cmp	r2, r3
 8011cac:	d203      	bcs.n	8011cb6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011cae:	4a2e      	ldr	r2, [pc, #184]	@ (8011d68 <xTaskIncrementTick+0x15c>)
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011cb4:	e02e      	b.n	8011d14 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011cb6:	68bb      	ldr	r3, [r7, #8]
 8011cb8:	3304      	adds	r3, #4
 8011cba:	4618      	mov	r0, r3
 8011cbc:	f7fe fea3 	bl	8010a06 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011cc0:	68bb      	ldr	r3, [r7, #8]
 8011cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d004      	beq.n	8011cd2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011cc8:	68bb      	ldr	r3, [r7, #8]
 8011cca:	3318      	adds	r3, #24
 8011ccc:	4618      	mov	r0, r3
 8011cce:	f7fe fe9a 	bl	8010a06 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011cd2:	68bb      	ldr	r3, [r7, #8]
 8011cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011cd6:	2201      	movs	r2, #1
 8011cd8:	409a      	lsls	r2, r3
 8011cda:	4b24      	ldr	r3, [pc, #144]	@ (8011d6c <xTaskIncrementTick+0x160>)
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	4313      	orrs	r3, r2
 8011ce0:	4a22      	ldr	r2, [pc, #136]	@ (8011d6c <xTaskIncrementTick+0x160>)
 8011ce2:	6013      	str	r3, [r2, #0]
 8011ce4:	68bb      	ldr	r3, [r7, #8]
 8011ce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011ce8:	4613      	mov	r3, r2
 8011cea:	009b      	lsls	r3, r3, #2
 8011cec:	4413      	add	r3, r2
 8011cee:	009b      	lsls	r3, r3, #2
 8011cf0:	4a1f      	ldr	r2, [pc, #124]	@ (8011d70 <xTaskIncrementTick+0x164>)
 8011cf2:	441a      	add	r2, r3
 8011cf4:	68bb      	ldr	r3, [r7, #8]
 8011cf6:	3304      	adds	r3, #4
 8011cf8:	4619      	mov	r1, r3
 8011cfa:	4610      	mov	r0, r2
 8011cfc:	f7fe fe26 	bl	801094c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011d00:	68bb      	ldr	r3, [r7, #8]
 8011d02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011d04:	4b1b      	ldr	r3, [pc, #108]	@ (8011d74 <xTaskIncrementTick+0x168>)
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d0a:	429a      	cmp	r2, r3
 8011d0c:	d3b9      	bcc.n	8011c82 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8011d0e:	2301      	movs	r3, #1
 8011d10:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011d12:	e7b6      	b.n	8011c82 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011d14:	4b17      	ldr	r3, [pc, #92]	@ (8011d74 <xTaskIncrementTick+0x168>)
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011d1a:	4915      	ldr	r1, [pc, #84]	@ (8011d70 <xTaskIncrementTick+0x164>)
 8011d1c:	4613      	mov	r3, r2
 8011d1e:	009b      	lsls	r3, r3, #2
 8011d20:	4413      	add	r3, r2
 8011d22:	009b      	lsls	r3, r3, #2
 8011d24:	440b      	add	r3, r1
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	2b01      	cmp	r3, #1
 8011d2a:	d901      	bls.n	8011d30 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8011d2c:	2301      	movs	r3, #1
 8011d2e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011d30:	4b11      	ldr	r3, [pc, #68]	@ (8011d78 <xTaskIncrementTick+0x16c>)
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d007      	beq.n	8011d48 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8011d38:	2301      	movs	r3, #1
 8011d3a:	617b      	str	r3, [r7, #20]
 8011d3c:	e004      	b.n	8011d48 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8011d7c <xTaskIncrementTick+0x170>)
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	3301      	adds	r3, #1
 8011d44:	4a0d      	ldr	r2, [pc, #52]	@ (8011d7c <xTaskIncrementTick+0x170>)
 8011d46:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011d48:	697b      	ldr	r3, [r7, #20]
}
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	3718      	adds	r7, #24
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	bd80      	pop	{r7, pc}
 8011d52:	bf00      	nop
 8011d54:	20002d8c 	.word	0x20002d8c
 8011d58:	20002d68 	.word	0x20002d68
 8011d5c:	20002d1c 	.word	0x20002d1c
 8011d60:	20002d20 	.word	0x20002d20
 8011d64:	20002d7c 	.word	0x20002d7c
 8011d68:	20002d84 	.word	0x20002d84
 8011d6c:	20002d6c 	.word	0x20002d6c
 8011d70:	20002c68 	.word	0x20002c68
 8011d74:	20002c64 	.word	0x20002c64
 8011d78:	20002d78 	.word	0x20002d78
 8011d7c:	20002d74 	.word	0x20002d74

08011d80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011d80:	b480      	push	{r7}
 8011d82:	b087      	sub	sp, #28
 8011d84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011d86:	4b2a      	ldr	r3, [pc, #168]	@ (8011e30 <vTaskSwitchContext+0xb0>)
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d003      	beq.n	8011d96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011d8e:	4b29      	ldr	r3, [pc, #164]	@ (8011e34 <vTaskSwitchContext+0xb4>)
 8011d90:	2201      	movs	r2, #1
 8011d92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011d94:	e045      	b.n	8011e22 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8011d96:	4b27      	ldr	r3, [pc, #156]	@ (8011e34 <vTaskSwitchContext+0xb4>)
 8011d98:	2200      	movs	r2, #0
 8011d9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d9c:	4b26      	ldr	r3, [pc, #152]	@ (8011e38 <vTaskSwitchContext+0xb8>)
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	fab3 f383 	clz	r3, r3
 8011da8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011daa:	7afb      	ldrb	r3, [r7, #11]
 8011dac:	f1c3 031f 	rsb	r3, r3, #31
 8011db0:	617b      	str	r3, [r7, #20]
 8011db2:	4922      	ldr	r1, [pc, #136]	@ (8011e3c <vTaskSwitchContext+0xbc>)
 8011db4:	697a      	ldr	r2, [r7, #20]
 8011db6:	4613      	mov	r3, r2
 8011db8:	009b      	lsls	r3, r3, #2
 8011dba:	4413      	add	r3, r2
 8011dbc:	009b      	lsls	r3, r3, #2
 8011dbe:	440b      	add	r3, r1
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d10b      	bne.n	8011dde <vTaskSwitchContext+0x5e>
	__asm volatile
 8011dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011dca:	f383 8811 	msr	BASEPRI, r3
 8011dce:	f3bf 8f6f 	isb	sy
 8011dd2:	f3bf 8f4f 	dsb	sy
 8011dd6:	607b      	str	r3, [r7, #4]
}
 8011dd8:	bf00      	nop
 8011dda:	bf00      	nop
 8011ddc:	e7fd      	b.n	8011dda <vTaskSwitchContext+0x5a>
 8011dde:	697a      	ldr	r2, [r7, #20]
 8011de0:	4613      	mov	r3, r2
 8011de2:	009b      	lsls	r3, r3, #2
 8011de4:	4413      	add	r3, r2
 8011de6:	009b      	lsls	r3, r3, #2
 8011de8:	4a14      	ldr	r2, [pc, #80]	@ (8011e3c <vTaskSwitchContext+0xbc>)
 8011dea:	4413      	add	r3, r2
 8011dec:	613b      	str	r3, [r7, #16]
 8011dee:	693b      	ldr	r3, [r7, #16]
 8011df0:	685b      	ldr	r3, [r3, #4]
 8011df2:	685a      	ldr	r2, [r3, #4]
 8011df4:	693b      	ldr	r3, [r7, #16]
 8011df6:	605a      	str	r2, [r3, #4]
 8011df8:	693b      	ldr	r3, [r7, #16]
 8011dfa:	685a      	ldr	r2, [r3, #4]
 8011dfc:	693b      	ldr	r3, [r7, #16]
 8011dfe:	3308      	adds	r3, #8
 8011e00:	429a      	cmp	r2, r3
 8011e02:	d104      	bne.n	8011e0e <vTaskSwitchContext+0x8e>
 8011e04:	693b      	ldr	r3, [r7, #16]
 8011e06:	685b      	ldr	r3, [r3, #4]
 8011e08:	685a      	ldr	r2, [r3, #4]
 8011e0a:	693b      	ldr	r3, [r7, #16]
 8011e0c:	605a      	str	r2, [r3, #4]
 8011e0e:	693b      	ldr	r3, [r7, #16]
 8011e10:	685b      	ldr	r3, [r3, #4]
 8011e12:	68db      	ldr	r3, [r3, #12]
 8011e14:	4a0a      	ldr	r2, [pc, #40]	@ (8011e40 <vTaskSwitchContext+0xc0>)
 8011e16:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011e18:	4b09      	ldr	r3, [pc, #36]	@ (8011e40 <vTaskSwitchContext+0xc0>)
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	334c      	adds	r3, #76	@ 0x4c
 8011e1e:	4a09      	ldr	r2, [pc, #36]	@ (8011e44 <vTaskSwitchContext+0xc4>)
 8011e20:	6013      	str	r3, [r2, #0]
}
 8011e22:	bf00      	nop
 8011e24:	371c      	adds	r7, #28
 8011e26:	46bd      	mov	sp, r7
 8011e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e2c:	4770      	bx	lr
 8011e2e:	bf00      	nop
 8011e30:	20002d8c 	.word	0x20002d8c
 8011e34:	20002d78 	.word	0x20002d78
 8011e38:	20002d6c 	.word	0x20002d6c
 8011e3c:	20002c68 	.word	0x20002c68
 8011e40:	20002c64 	.word	0x20002c64
 8011e44:	20000034 	.word	0x20000034

08011e48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b084      	sub	sp, #16
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	6078      	str	r0, [r7, #4]
 8011e50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d10b      	bne.n	8011e70 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8011e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e5c:	f383 8811 	msr	BASEPRI, r3
 8011e60:	f3bf 8f6f 	isb	sy
 8011e64:	f3bf 8f4f 	dsb	sy
 8011e68:	60fb      	str	r3, [r7, #12]
}
 8011e6a:	bf00      	nop
 8011e6c:	bf00      	nop
 8011e6e:	e7fd      	b.n	8011e6c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011e70:	4b07      	ldr	r3, [pc, #28]	@ (8011e90 <vTaskPlaceOnEventList+0x48>)
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	3318      	adds	r3, #24
 8011e76:	4619      	mov	r1, r3
 8011e78:	6878      	ldr	r0, [r7, #4]
 8011e7a:	f7fe fd8b 	bl	8010994 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011e7e:	2101      	movs	r1, #1
 8011e80:	6838      	ldr	r0, [r7, #0]
 8011e82:	f000 fb8d 	bl	80125a0 <prvAddCurrentTaskToDelayedList>
}
 8011e86:	bf00      	nop
 8011e88:	3710      	adds	r7, #16
 8011e8a:	46bd      	mov	sp, r7
 8011e8c:	bd80      	pop	{r7, pc}
 8011e8e:	bf00      	nop
 8011e90:	20002c64 	.word	0x20002c64

08011e94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011e94:	b580      	push	{r7, lr}
 8011e96:	b086      	sub	sp, #24
 8011e98:	af00      	add	r7, sp, #0
 8011e9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	68db      	ldr	r3, [r3, #12]
 8011ea0:	68db      	ldr	r3, [r3, #12]
 8011ea2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011ea4:	693b      	ldr	r3, [r7, #16]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d10b      	bne.n	8011ec2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8011eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011eae:	f383 8811 	msr	BASEPRI, r3
 8011eb2:	f3bf 8f6f 	isb	sy
 8011eb6:	f3bf 8f4f 	dsb	sy
 8011eba:	60fb      	str	r3, [r7, #12]
}
 8011ebc:	bf00      	nop
 8011ebe:	bf00      	nop
 8011ec0:	e7fd      	b.n	8011ebe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011ec2:	693b      	ldr	r3, [r7, #16]
 8011ec4:	3318      	adds	r3, #24
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	f7fe fd9d 	bl	8010a06 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011ecc:	4b1d      	ldr	r3, [pc, #116]	@ (8011f44 <xTaskRemoveFromEventList+0xb0>)
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d11c      	bne.n	8011f0e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011ed4:	693b      	ldr	r3, [r7, #16]
 8011ed6:	3304      	adds	r3, #4
 8011ed8:	4618      	mov	r0, r3
 8011eda:	f7fe fd94 	bl	8010a06 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011ede:	693b      	ldr	r3, [r7, #16]
 8011ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ee2:	2201      	movs	r2, #1
 8011ee4:	409a      	lsls	r2, r3
 8011ee6:	4b18      	ldr	r3, [pc, #96]	@ (8011f48 <xTaskRemoveFromEventList+0xb4>)
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	4313      	orrs	r3, r2
 8011eec:	4a16      	ldr	r2, [pc, #88]	@ (8011f48 <xTaskRemoveFromEventList+0xb4>)
 8011eee:	6013      	str	r3, [r2, #0]
 8011ef0:	693b      	ldr	r3, [r7, #16]
 8011ef2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011ef4:	4613      	mov	r3, r2
 8011ef6:	009b      	lsls	r3, r3, #2
 8011ef8:	4413      	add	r3, r2
 8011efa:	009b      	lsls	r3, r3, #2
 8011efc:	4a13      	ldr	r2, [pc, #76]	@ (8011f4c <xTaskRemoveFromEventList+0xb8>)
 8011efe:	441a      	add	r2, r3
 8011f00:	693b      	ldr	r3, [r7, #16]
 8011f02:	3304      	adds	r3, #4
 8011f04:	4619      	mov	r1, r3
 8011f06:	4610      	mov	r0, r2
 8011f08:	f7fe fd20 	bl	801094c <vListInsertEnd>
 8011f0c:	e005      	b.n	8011f1a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011f0e:	693b      	ldr	r3, [r7, #16]
 8011f10:	3318      	adds	r3, #24
 8011f12:	4619      	mov	r1, r3
 8011f14:	480e      	ldr	r0, [pc, #56]	@ (8011f50 <xTaskRemoveFromEventList+0xbc>)
 8011f16:	f7fe fd19 	bl	801094c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011f1a:	693b      	ldr	r3, [r7, #16]
 8011f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8011f54 <xTaskRemoveFromEventList+0xc0>)
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f24:	429a      	cmp	r2, r3
 8011f26:	d905      	bls.n	8011f34 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011f28:	2301      	movs	r3, #1
 8011f2a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8011f58 <xTaskRemoveFromEventList+0xc4>)
 8011f2e:	2201      	movs	r2, #1
 8011f30:	601a      	str	r2, [r3, #0]
 8011f32:	e001      	b.n	8011f38 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011f34:	2300      	movs	r3, #0
 8011f36:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011f38:	697b      	ldr	r3, [r7, #20]
}
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	3718      	adds	r7, #24
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	bd80      	pop	{r7, pc}
 8011f42:	bf00      	nop
 8011f44:	20002d8c 	.word	0x20002d8c
 8011f48:	20002d6c 	.word	0x20002d6c
 8011f4c:	20002c68 	.word	0x20002c68
 8011f50:	20002d24 	.word	0x20002d24
 8011f54:	20002c64 	.word	0x20002c64
 8011f58:	20002d78 	.word	0x20002d78

08011f5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011f5c:	b480      	push	{r7}
 8011f5e:	b083      	sub	sp, #12
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011f64:	4b06      	ldr	r3, [pc, #24]	@ (8011f80 <vTaskInternalSetTimeOutState+0x24>)
 8011f66:	681a      	ldr	r2, [r3, #0]
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011f6c:	4b05      	ldr	r3, [pc, #20]	@ (8011f84 <vTaskInternalSetTimeOutState+0x28>)
 8011f6e:	681a      	ldr	r2, [r3, #0]
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	605a      	str	r2, [r3, #4]
}
 8011f74:	bf00      	nop
 8011f76:	370c      	adds	r7, #12
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f7e:	4770      	bx	lr
 8011f80:	20002d7c 	.word	0x20002d7c
 8011f84:	20002d68 	.word	0x20002d68

08011f88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b088      	sub	sp, #32
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
 8011f90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d10b      	bne.n	8011fb0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8011f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f9c:	f383 8811 	msr	BASEPRI, r3
 8011fa0:	f3bf 8f6f 	isb	sy
 8011fa4:	f3bf 8f4f 	dsb	sy
 8011fa8:	613b      	str	r3, [r7, #16]
}
 8011faa:	bf00      	nop
 8011fac:	bf00      	nop
 8011fae:	e7fd      	b.n	8011fac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011fb0:	683b      	ldr	r3, [r7, #0]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d10b      	bne.n	8011fce <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8011fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011fba:	f383 8811 	msr	BASEPRI, r3
 8011fbe:	f3bf 8f6f 	isb	sy
 8011fc2:	f3bf 8f4f 	dsb	sy
 8011fc6:	60fb      	str	r3, [r7, #12]
}
 8011fc8:	bf00      	nop
 8011fca:	bf00      	nop
 8011fcc:	e7fd      	b.n	8011fca <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8011fce:	f000 fc7b 	bl	80128c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011fd2:	4b1d      	ldr	r3, [pc, #116]	@ (8012048 <xTaskCheckForTimeOut+0xc0>)
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	685b      	ldr	r3, [r3, #4]
 8011fdc:	69ba      	ldr	r2, [r7, #24]
 8011fde:	1ad3      	subs	r3, r2, r3
 8011fe0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011fe2:	683b      	ldr	r3, [r7, #0]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fea:	d102      	bne.n	8011ff2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011fec:	2300      	movs	r3, #0
 8011fee:	61fb      	str	r3, [r7, #28]
 8011ff0:	e023      	b.n	801203a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	681a      	ldr	r2, [r3, #0]
 8011ff6:	4b15      	ldr	r3, [pc, #84]	@ (801204c <xTaskCheckForTimeOut+0xc4>)
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	429a      	cmp	r2, r3
 8011ffc:	d007      	beq.n	801200e <xTaskCheckForTimeOut+0x86>
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	685b      	ldr	r3, [r3, #4]
 8012002:	69ba      	ldr	r2, [r7, #24]
 8012004:	429a      	cmp	r2, r3
 8012006:	d302      	bcc.n	801200e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012008:	2301      	movs	r3, #1
 801200a:	61fb      	str	r3, [r7, #28]
 801200c:	e015      	b.n	801203a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801200e:	683b      	ldr	r3, [r7, #0]
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	697a      	ldr	r2, [r7, #20]
 8012014:	429a      	cmp	r2, r3
 8012016:	d20b      	bcs.n	8012030 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012018:	683b      	ldr	r3, [r7, #0]
 801201a:	681a      	ldr	r2, [r3, #0]
 801201c:	697b      	ldr	r3, [r7, #20]
 801201e:	1ad2      	subs	r2, r2, r3
 8012020:	683b      	ldr	r3, [r7, #0]
 8012022:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012024:	6878      	ldr	r0, [r7, #4]
 8012026:	f7ff ff99 	bl	8011f5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801202a:	2300      	movs	r3, #0
 801202c:	61fb      	str	r3, [r7, #28]
 801202e:	e004      	b.n	801203a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8012030:	683b      	ldr	r3, [r7, #0]
 8012032:	2200      	movs	r2, #0
 8012034:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012036:	2301      	movs	r3, #1
 8012038:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801203a:	f000 fc77 	bl	801292c <vPortExitCritical>

	return xReturn;
 801203e:	69fb      	ldr	r3, [r7, #28]
}
 8012040:	4618      	mov	r0, r3
 8012042:	3720      	adds	r7, #32
 8012044:	46bd      	mov	sp, r7
 8012046:	bd80      	pop	{r7, pc}
 8012048:	20002d68 	.word	0x20002d68
 801204c:	20002d7c 	.word	0x20002d7c

08012050 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012050:	b480      	push	{r7}
 8012052:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012054:	4b03      	ldr	r3, [pc, #12]	@ (8012064 <vTaskMissedYield+0x14>)
 8012056:	2201      	movs	r2, #1
 8012058:	601a      	str	r2, [r3, #0]
}
 801205a:	bf00      	nop
 801205c:	46bd      	mov	sp, r7
 801205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012062:	4770      	bx	lr
 8012064:	20002d78 	.word	0x20002d78

08012068 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012068:	b580      	push	{r7, lr}
 801206a:	b082      	sub	sp, #8
 801206c:	af00      	add	r7, sp, #0
 801206e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012070:	f000 f852 	bl	8012118 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012074:	4b06      	ldr	r3, [pc, #24]	@ (8012090 <prvIdleTask+0x28>)
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	2b01      	cmp	r3, #1
 801207a:	d9f9      	bls.n	8012070 <prvIdleTask+0x8>
			{
				taskYIELD();
 801207c:	4b05      	ldr	r3, [pc, #20]	@ (8012094 <prvIdleTask+0x2c>)
 801207e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012082:	601a      	str	r2, [r3, #0]
 8012084:	f3bf 8f4f 	dsb	sy
 8012088:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801208c:	e7f0      	b.n	8012070 <prvIdleTask+0x8>
 801208e:	bf00      	nop
 8012090:	20002c68 	.word	0x20002c68
 8012094:	e000ed04 	.word	0xe000ed04

08012098 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012098:	b580      	push	{r7, lr}
 801209a:	b082      	sub	sp, #8
 801209c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801209e:	2300      	movs	r3, #0
 80120a0:	607b      	str	r3, [r7, #4]
 80120a2:	e00c      	b.n	80120be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80120a4:	687a      	ldr	r2, [r7, #4]
 80120a6:	4613      	mov	r3, r2
 80120a8:	009b      	lsls	r3, r3, #2
 80120aa:	4413      	add	r3, r2
 80120ac:	009b      	lsls	r3, r3, #2
 80120ae:	4a12      	ldr	r2, [pc, #72]	@ (80120f8 <prvInitialiseTaskLists+0x60>)
 80120b0:	4413      	add	r3, r2
 80120b2:	4618      	mov	r0, r3
 80120b4:	f7fe fc1d 	bl	80108f2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	3301      	adds	r3, #1
 80120bc:	607b      	str	r3, [r7, #4]
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	2b06      	cmp	r3, #6
 80120c2:	d9ef      	bls.n	80120a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80120c4:	480d      	ldr	r0, [pc, #52]	@ (80120fc <prvInitialiseTaskLists+0x64>)
 80120c6:	f7fe fc14 	bl	80108f2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80120ca:	480d      	ldr	r0, [pc, #52]	@ (8012100 <prvInitialiseTaskLists+0x68>)
 80120cc:	f7fe fc11 	bl	80108f2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80120d0:	480c      	ldr	r0, [pc, #48]	@ (8012104 <prvInitialiseTaskLists+0x6c>)
 80120d2:	f7fe fc0e 	bl	80108f2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80120d6:	480c      	ldr	r0, [pc, #48]	@ (8012108 <prvInitialiseTaskLists+0x70>)
 80120d8:	f7fe fc0b 	bl	80108f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80120dc:	480b      	ldr	r0, [pc, #44]	@ (801210c <prvInitialiseTaskLists+0x74>)
 80120de:	f7fe fc08 	bl	80108f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80120e2:	4b0b      	ldr	r3, [pc, #44]	@ (8012110 <prvInitialiseTaskLists+0x78>)
 80120e4:	4a05      	ldr	r2, [pc, #20]	@ (80120fc <prvInitialiseTaskLists+0x64>)
 80120e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80120e8:	4b0a      	ldr	r3, [pc, #40]	@ (8012114 <prvInitialiseTaskLists+0x7c>)
 80120ea:	4a05      	ldr	r2, [pc, #20]	@ (8012100 <prvInitialiseTaskLists+0x68>)
 80120ec:	601a      	str	r2, [r3, #0]
}
 80120ee:	bf00      	nop
 80120f0:	3708      	adds	r7, #8
 80120f2:	46bd      	mov	sp, r7
 80120f4:	bd80      	pop	{r7, pc}
 80120f6:	bf00      	nop
 80120f8:	20002c68 	.word	0x20002c68
 80120fc:	20002cf4 	.word	0x20002cf4
 8012100:	20002d08 	.word	0x20002d08
 8012104:	20002d24 	.word	0x20002d24
 8012108:	20002d38 	.word	0x20002d38
 801210c:	20002d50 	.word	0x20002d50
 8012110:	20002d1c 	.word	0x20002d1c
 8012114:	20002d20 	.word	0x20002d20

08012118 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012118:	b580      	push	{r7, lr}
 801211a:	b082      	sub	sp, #8
 801211c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801211e:	e019      	b.n	8012154 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012120:	f000 fbd2 	bl	80128c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012124:	4b10      	ldr	r3, [pc, #64]	@ (8012168 <prvCheckTasksWaitingTermination+0x50>)
 8012126:	68db      	ldr	r3, [r3, #12]
 8012128:	68db      	ldr	r3, [r3, #12]
 801212a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	3304      	adds	r3, #4
 8012130:	4618      	mov	r0, r3
 8012132:	f7fe fc68 	bl	8010a06 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012136:	4b0d      	ldr	r3, [pc, #52]	@ (801216c <prvCheckTasksWaitingTermination+0x54>)
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	3b01      	subs	r3, #1
 801213c:	4a0b      	ldr	r2, [pc, #44]	@ (801216c <prvCheckTasksWaitingTermination+0x54>)
 801213e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012140:	4b0b      	ldr	r3, [pc, #44]	@ (8012170 <prvCheckTasksWaitingTermination+0x58>)
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	3b01      	subs	r3, #1
 8012146:	4a0a      	ldr	r2, [pc, #40]	@ (8012170 <prvCheckTasksWaitingTermination+0x58>)
 8012148:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801214a:	f000 fbef 	bl	801292c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801214e:	6878      	ldr	r0, [r7, #4]
 8012150:	f000 f810 	bl	8012174 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012154:	4b06      	ldr	r3, [pc, #24]	@ (8012170 <prvCheckTasksWaitingTermination+0x58>)
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	2b00      	cmp	r3, #0
 801215a:	d1e1      	bne.n	8012120 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801215c:	bf00      	nop
 801215e:	bf00      	nop
 8012160:	3708      	adds	r7, #8
 8012162:	46bd      	mov	sp, r7
 8012164:	bd80      	pop	{r7, pc}
 8012166:	bf00      	nop
 8012168:	20002d38 	.word	0x20002d38
 801216c:	20002d64 	.word	0x20002d64
 8012170:	20002d4c 	.word	0x20002d4c

08012174 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012174:	b580      	push	{r7, lr}
 8012176:	b084      	sub	sp, #16
 8012178:	af00      	add	r7, sp, #0
 801217a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	334c      	adds	r3, #76	@ 0x4c
 8012180:	4618      	mov	r0, r3
 8012182:	f001 fc5d 	bl	8013a40 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 801218c:	2b00      	cmp	r3, #0
 801218e:	d108      	bne.n	80121a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012194:	4618      	mov	r0, r3
 8012196:	f000 fd87 	bl	8012ca8 <vPortFree>
				vPortFree( pxTCB );
 801219a:	6878      	ldr	r0, [r7, #4]
 801219c:	f000 fd84 	bl	8012ca8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80121a0:	e019      	b.n	80121d6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80121a8:	2b01      	cmp	r3, #1
 80121aa:	d103      	bne.n	80121b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80121ac:	6878      	ldr	r0, [r7, #4]
 80121ae:	f000 fd7b 	bl	8012ca8 <vPortFree>
	}
 80121b2:	e010      	b.n	80121d6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80121ba:	2b02      	cmp	r3, #2
 80121bc:	d00b      	beq.n	80121d6 <prvDeleteTCB+0x62>
	__asm volatile
 80121be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121c2:	f383 8811 	msr	BASEPRI, r3
 80121c6:	f3bf 8f6f 	isb	sy
 80121ca:	f3bf 8f4f 	dsb	sy
 80121ce:	60fb      	str	r3, [r7, #12]
}
 80121d0:	bf00      	nop
 80121d2:	bf00      	nop
 80121d4:	e7fd      	b.n	80121d2 <prvDeleteTCB+0x5e>
	}
 80121d6:	bf00      	nop
 80121d8:	3710      	adds	r7, #16
 80121da:	46bd      	mov	sp, r7
 80121dc:	bd80      	pop	{r7, pc}
	...

080121e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80121e0:	b480      	push	{r7}
 80121e2:	b083      	sub	sp, #12
 80121e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80121e6:	4b0c      	ldr	r3, [pc, #48]	@ (8012218 <prvResetNextTaskUnblockTime+0x38>)
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d104      	bne.n	80121fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80121f0:	4b0a      	ldr	r3, [pc, #40]	@ (801221c <prvResetNextTaskUnblockTime+0x3c>)
 80121f2:	f04f 32ff 	mov.w	r2, #4294967295
 80121f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80121f8:	e008      	b.n	801220c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80121fa:	4b07      	ldr	r3, [pc, #28]	@ (8012218 <prvResetNextTaskUnblockTime+0x38>)
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	68db      	ldr	r3, [r3, #12]
 8012200:	68db      	ldr	r3, [r3, #12]
 8012202:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	685b      	ldr	r3, [r3, #4]
 8012208:	4a04      	ldr	r2, [pc, #16]	@ (801221c <prvResetNextTaskUnblockTime+0x3c>)
 801220a:	6013      	str	r3, [r2, #0]
}
 801220c:	bf00      	nop
 801220e:	370c      	adds	r7, #12
 8012210:	46bd      	mov	sp, r7
 8012212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012216:	4770      	bx	lr
 8012218:	20002d1c 	.word	0x20002d1c
 801221c:	20002d84 	.word	0x20002d84

08012220 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012220:	b480      	push	{r7}
 8012222:	b083      	sub	sp, #12
 8012224:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012226:	4b0b      	ldr	r3, [pc, #44]	@ (8012254 <xTaskGetSchedulerState+0x34>)
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	2b00      	cmp	r3, #0
 801222c:	d102      	bne.n	8012234 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801222e:	2301      	movs	r3, #1
 8012230:	607b      	str	r3, [r7, #4]
 8012232:	e008      	b.n	8012246 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012234:	4b08      	ldr	r3, [pc, #32]	@ (8012258 <xTaskGetSchedulerState+0x38>)
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d102      	bne.n	8012242 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801223c:	2302      	movs	r3, #2
 801223e:	607b      	str	r3, [r7, #4]
 8012240:	e001      	b.n	8012246 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012242:	2300      	movs	r3, #0
 8012244:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012246:	687b      	ldr	r3, [r7, #4]
	}
 8012248:	4618      	mov	r0, r3
 801224a:	370c      	adds	r7, #12
 801224c:	46bd      	mov	sp, r7
 801224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012252:	4770      	bx	lr
 8012254:	20002d70 	.word	0x20002d70
 8012258:	20002d8c 	.word	0x20002d8c

0801225c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801225c:	b580      	push	{r7, lr}
 801225e:	b084      	sub	sp, #16
 8012260:	af00      	add	r7, sp, #0
 8012262:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012268:	2300      	movs	r3, #0
 801226a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d05e      	beq.n	8012330 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012272:	68bb      	ldr	r3, [r7, #8]
 8012274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012276:	4b31      	ldr	r3, [pc, #196]	@ (801233c <xTaskPriorityInherit+0xe0>)
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801227c:	429a      	cmp	r2, r3
 801227e:	d24e      	bcs.n	801231e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012280:	68bb      	ldr	r3, [r7, #8]
 8012282:	699b      	ldr	r3, [r3, #24]
 8012284:	2b00      	cmp	r3, #0
 8012286:	db06      	blt.n	8012296 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012288:	4b2c      	ldr	r3, [pc, #176]	@ (801233c <xTaskPriorityInherit+0xe0>)
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801228e:	f1c3 0207 	rsb	r2, r3, #7
 8012292:	68bb      	ldr	r3, [r7, #8]
 8012294:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012296:	68bb      	ldr	r3, [r7, #8]
 8012298:	6959      	ldr	r1, [r3, #20]
 801229a:	68bb      	ldr	r3, [r7, #8]
 801229c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801229e:	4613      	mov	r3, r2
 80122a0:	009b      	lsls	r3, r3, #2
 80122a2:	4413      	add	r3, r2
 80122a4:	009b      	lsls	r3, r3, #2
 80122a6:	4a26      	ldr	r2, [pc, #152]	@ (8012340 <xTaskPriorityInherit+0xe4>)
 80122a8:	4413      	add	r3, r2
 80122aa:	4299      	cmp	r1, r3
 80122ac:	d12f      	bne.n	801230e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80122ae:	68bb      	ldr	r3, [r7, #8]
 80122b0:	3304      	adds	r3, #4
 80122b2:	4618      	mov	r0, r3
 80122b4:	f7fe fba7 	bl	8010a06 <uxListRemove>
 80122b8:	4603      	mov	r3, r0
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d10a      	bne.n	80122d4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80122be:	68bb      	ldr	r3, [r7, #8]
 80122c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122c2:	2201      	movs	r2, #1
 80122c4:	fa02 f303 	lsl.w	r3, r2, r3
 80122c8:	43da      	mvns	r2, r3
 80122ca:	4b1e      	ldr	r3, [pc, #120]	@ (8012344 <xTaskPriorityInherit+0xe8>)
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	4013      	ands	r3, r2
 80122d0:	4a1c      	ldr	r2, [pc, #112]	@ (8012344 <xTaskPriorityInherit+0xe8>)
 80122d2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80122d4:	4b19      	ldr	r3, [pc, #100]	@ (801233c <xTaskPriorityInherit+0xe0>)
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80122da:	68bb      	ldr	r3, [r7, #8]
 80122dc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80122de:	68bb      	ldr	r3, [r7, #8]
 80122e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122e2:	2201      	movs	r2, #1
 80122e4:	409a      	lsls	r2, r3
 80122e6:	4b17      	ldr	r3, [pc, #92]	@ (8012344 <xTaskPriorityInherit+0xe8>)
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	4313      	orrs	r3, r2
 80122ec:	4a15      	ldr	r2, [pc, #84]	@ (8012344 <xTaskPriorityInherit+0xe8>)
 80122ee:	6013      	str	r3, [r2, #0]
 80122f0:	68bb      	ldr	r3, [r7, #8]
 80122f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80122f4:	4613      	mov	r3, r2
 80122f6:	009b      	lsls	r3, r3, #2
 80122f8:	4413      	add	r3, r2
 80122fa:	009b      	lsls	r3, r3, #2
 80122fc:	4a10      	ldr	r2, [pc, #64]	@ (8012340 <xTaskPriorityInherit+0xe4>)
 80122fe:	441a      	add	r2, r3
 8012300:	68bb      	ldr	r3, [r7, #8]
 8012302:	3304      	adds	r3, #4
 8012304:	4619      	mov	r1, r3
 8012306:	4610      	mov	r0, r2
 8012308:	f7fe fb20 	bl	801094c <vListInsertEnd>
 801230c:	e004      	b.n	8012318 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801230e:	4b0b      	ldr	r3, [pc, #44]	@ (801233c <xTaskPriorityInherit+0xe0>)
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012314:	68bb      	ldr	r3, [r7, #8]
 8012316:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012318:	2301      	movs	r3, #1
 801231a:	60fb      	str	r3, [r7, #12]
 801231c:	e008      	b.n	8012330 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801231e:	68bb      	ldr	r3, [r7, #8]
 8012320:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012322:	4b06      	ldr	r3, [pc, #24]	@ (801233c <xTaskPriorityInherit+0xe0>)
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012328:	429a      	cmp	r2, r3
 801232a:	d201      	bcs.n	8012330 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801232c:	2301      	movs	r3, #1
 801232e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012330:	68fb      	ldr	r3, [r7, #12]
	}
 8012332:	4618      	mov	r0, r3
 8012334:	3710      	adds	r7, #16
 8012336:	46bd      	mov	sp, r7
 8012338:	bd80      	pop	{r7, pc}
 801233a:	bf00      	nop
 801233c:	20002c64 	.word	0x20002c64
 8012340:	20002c68 	.word	0x20002c68
 8012344:	20002d6c 	.word	0x20002d6c

08012348 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012348:	b580      	push	{r7, lr}
 801234a:	b086      	sub	sp, #24
 801234c:	af00      	add	r7, sp, #0
 801234e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012354:	2300      	movs	r3, #0
 8012356:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	2b00      	cmp	r3, #0
 801235c:	d070      	beq.n	8012440 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801235e:	4b3b      	ldr	r3, [pc, #236]	@ (801244c <xTaskPriorityDisinherit+0x104>)
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	693a      	ldr	r2, [r7, #16]
 8012364:	429a      	cmp	r2, r3
 8012366:	d00b      	beq.n	8012380 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8012368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801236c:	f383 8811 	msr	BASEPRI, r3
 8012370:	f3bf 8f6f 	isb	sy
 8012374:	f3bf 8f4f 	dsb	sy
 8012378:	60fb      	str	r3, [r7, #12]
}
 801237a:	bf00      	nop
 801237c:	bf00      	nop
 801237e:	e7fd      	b.n	801237c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8012380:	693b      	ldr	r3, [r7, #16]
 8012382:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012384:	2b00      	cmp	r3, #0
 8012386:	d10b      	bne.n	80123a0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8012388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801238c:	f383 8811 	msr	BASEPRI, r3
 8012390:	f3bf 8f6f 	isb	sy
 8012394:	f3bf 8f4f 	dsb	sy
 8012398:	60bb      	str	r3, [r7, #8]
}
 801239a:	bf00      	nop
 801239c:	bf00      	nop
 801239e:	e7fd      	b.n	801239c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80123a0:	693b      	ldr	r3, [r7, #16]
 80123a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80123a4:	1e5a      	subs	r2, r3, #1
 80123a6:	693b      	ldr	r3, [r7, #16]
 80123a8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80123aa:	693b      	ldr	r3, [r7, #16]
 80123ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80123ae:	693b      	ldr	r3, [r7, #16]
 80123b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80123b2:	429a      	cmp	r2, r3
 80123b4:	d044      	beq.n	8012440 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80123b6:	693b      	ldr	r3, [r7, #16]
 80123b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d140      	bne.n	8012440 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80123be:	693b      	ldr	r3, [r7, #16]
 80123c0:	3304      	adds	r3, #4
 80123c2:	4618      	mov	r0, r3
 80123c4:	f7fe fb1f 	bl	8010a06 <uxListRemove>
 80123c8:	4603      	mov	r3, r0
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d115      	bne.n	80123fa <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80123ce:	693b      	ldr	r3, [r7, #16]
 80123d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80123d2:	491f      	ldr	r1, [pc, #124]	@ (8012450 <xTaskPriorityDisinherit+0x108>)
 80123d4:	4613      	mov	r3, r2
 80123d6:	009b      	lsls	r3, r3, #2
 80123d8:	4413      	add	r3, r2
 80123da:	009b      	lsls	r3, r3, #2
 80123dc:	440b      	add	r3, r1
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d10a      	bne.n	80123fa <xTaskPriorityDisinherit+0xb2>
 80123e4:	693b      	ldr	r3, [r7, #16]
 80123e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80123e8:	2201      	movs	r2, #1
 80123ea:	fa02 f303 	lsl.w	r3, r2, r3
 80123ee:	43da      	mvns	r2, r3
 80123f0:	4b18      	ldr	r3, [pc, #96]	@ (8012454 <xTaskPriorityDisinherit+0x10c>)
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	4013      	ands	r3, r2
 80123f6:	4a17      	ldr	r2, [pc, #92]	@ (8012454 <xTaskPriorityDisinherit+0x10c>)
 80123f8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80123fa:	693b      	ldr	r3, [r7, #16]
 80123fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80123fe:	693b      	ldr	r3, [r7, #16]
 8012400:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012402:	693b      	ldr	r3, [r7, #16]
 8012404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012406:	f1c3 0207 	rsb	r2, r3, #7
 801240a:	693b      	ldr	r3, [r7, #16]
 801240c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801240e:	693b      	ldr	r3, [r7, #16]
 8012410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012412:	2201      	movs	r2, #1
 8012414:	409a      	lsls	r2, r3
 8012416:	4b0f      	ldr	r3, [pc, #60]	@ (8012454 <xTaskPriorityDisinherit+0x10c>)
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	4313      	orrs	r3, r2
 801241c:	4a0d      	ldr	r2, [pc, #52]	@ (8012454 <xTaskPriorityDisinherit+0x10c>)
 801241e:	6013      	str	r3, [r2, #0]
 8012420:	693b      	ldr	r3, [r7, #16]
 8012422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012424:	4613      	mov	r3, r2
 8012426:	009b      	lsls	r3, r3, #2
 8012428:	4413      	add	r3, r2
 801242a:	009b      	lsls	r3, r3, #2
 801242c:	4a08      	ldr	r2, [pc, #32]	@ (8012450 <xTaskPriorityDisinherit+0x108>)
 801242e:	441a      	add	r2, r3
 8012430:	693b      	ldr	r3, [r7, #16]
 8012432:	3304      	adds	r3, #4
 8012434:	4619      	mov	r1, r3
 8012436:	4610      	mov	r0, r2
 8012438:	f7fe fa88 	bl	801094c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801243c:	2301      	movs	r3, #1
 801243e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012440:	697b      	ldr	r3, [r7, #20]
	}
 8012442:	4618      	mov	r0, r3
 8012444:	3718      	adds	r7, #24
 8012446:	46bd      	mov	sp, r7
 8012448:	bd80      	pop	{r7, pc}
 801244a:	bf00      	nop
 801244c:	20002c64 	.word	0x20002c64
 8012450:	20002c68 	.word	0x20002c68
 8012454:	20002d6c 	.word	0x20002d6c

08012458 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012458:	b580      	push	{r7, lr}
 801245a:	b088      	sub	sp, #32
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
 8012460:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8012466:	2301      	movs	r3, #1
 8012468:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d079      	beq.n	8012564 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012470:	69bb      	ldr	r3, [r7, #24]
 8012472:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012474:	2b00      	cmp	r3, #0
 8012476:	d10b      	bne.n	8012490 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8012478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801247c:	f383 8811 	msr	BASEPRI, r3
 8012480:	f3bf 8f6f 	isb	sy
 8012484:	f3bf 8f4f 	dsb	sy
 8012488:	60fb      	str	r3, [r7, #12]
}
 801248a:	bf00      	nop
 801248c:	bf00      	nop
 801248e:	e7fd      	b.n	801248c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012490:	69bb      	ldr	r3, [r7, #24]
 8012492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012494:	683a      	ldr	r2, [r7, #0]
 8012496:	429a      	cmp	r2, r3
 8012498:	d902      	bls.n	80124a0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801249a:	683b      	ldr	r3, [r7, #0]
 801249c:	61fb      	str	r3, [r7, #28]
 801249e:	e002      	b.n	80124a6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80124a0:	69bb      	ldr	r3, [r7, #24]
 80124a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80124a4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80124a6:	69bb      	ldr	r3, [r7, #24]
 80124a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80124aa:	69fa      	ldr	r2, [r7, #28]
 80124ac:	429a      	cmp	r2, r3
 80124ae:	d059      	beq.n	8012564 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80124b0:	69bb      	ldr	r3, [r7, #24]
 80124b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80124b4:	697a      	ldr	r2, [r7, #20]
 80124b6:	429a      	cmp	r2, r3
 80124b8:	d154      	bne.n	8012564 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80124ba:	4b2c      	ldr	r3, [pc, #176]	@ (801256c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	69ba      	ldr	r2, [r7, #24]
 80124c0:	429a      	cmp	r2, r3
 80124c2:	d10b      	bne.n	80124dc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80124c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124c8:	f383 8811 	msr	BASEPRI, r3
 80124cc:	f3bf 8f6f 	isb	sy
 80124d0:	f3bf 8f4f 	dsb	sy
 80124d4:	60bb      	str	r3, [r7, #8]
}
 80124d6:	bf00      	nop
 80124d8:	bf00      	nop
 80124da:	e7fd      	b.n	80124d8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80124dc:	69bb      	ldr	r3, [r7, #24]
 80124de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80124e0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80124e2:	69bb      	ldr	r3, [r7, #24]
 80124e4:	69fa      	ldr	r2, [r7, #28]
 80124e6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80124e8:	69bb      	ldr	r3, [r7, #24]
 80124ea:	699b      	ldr	r3, [r3, #24]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	db04      	blt.n	80124fa <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80124f0:	69fb      	ldr	r3, [r7, #28]
 80124f2:	f1c3 0207 	rsb	r2, r3, #7
 80124f6:	69bb      	ldr	r3, [r7, #24]
 80124f8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80124fa:	69bb      	ldr	r3, [r7, #24]
 80124fc:	6959      	ldr	r1, [r3, #20]
 80124fe:	693a      	ldr	r2, [r7, #16]
 8012500:	4613      	mov	r3, r2
 8012502:	009b      	lsls	r3, r3, #2
 8012504:	4413      	add	r3, r2
 8012506:	009b      	lsls	r3, r3, #2
 8012508:	4a19      	ldr	r2, [pc, #100]	@ (8012570 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801250a:	4413      	add	r3, r2
 801250c:	4299      	cmp	r1, r3
 801250e:	d129      	bne.n	8012564 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012510:	69bb      	ldr	r3, [r7, #24]
 8012512:	3304      	adds	r3, #4
 8012514:	4618      	mov	r0, r3
 8012516:	f7fe fa76 	bl	8010a06 <uxListRemove>
 801251a:	4603      	mov	r3, r0
 801251c:	2b00      	cmp	r3, #0
 801251e:	d10a      	bne.n	8012536 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8012520:	69bb      	ldr	r3, [r7, #24]
 8012522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012524:	2201      	movs	r2, #1
 8012526:	fa02 f303 	lsl.w	r3, r2, r3
 801252a:	43da      	mvns	r2, r3
 801252c:	4b11      	ldr	r3, [pc, #68]	@ (8012574 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	4013      	ands	r3, r2
 8012532:	4a10      	ldr	r2, [pc, #64]	@ (8012574 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8012534:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8012536:	69bb      	ldr	r3, [r7, #24]
 8012538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801253a:	2201      	movs	r2, #1
 801253c:	409a      	lsls	r2, r3
 801253e:	4b0d      	ldr	r3, [pc, #52]	@ (8012574 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	4313      	orrs	r3, r2
 8012544:	4a0b      	ldr	r2, [pc, #44]	@ (8012574 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8012546:	6013      	str	r3, [r2, #0]
 8012548:	69bb      	ldr	r3, [r7, #24]
 801254a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801254c:	4613      	mov	r3, r2
 801254e:	009b      	lsls	r3, r3, #2
 8012550:	4413      	add	r3, r2
 8012552:	009b      	lsls	r3, r3, #2
 8012554:	4a06      	ldr	r2, [pc, #24]	@ (8012570 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8012556:	441a      	add	r2, r3
 8012558:	69bb      	ldr	r3, [r7, #24]
 801255a:	3304      	adds	r3, #4
 801255c:	4619      	mov	r1, r3
 801255e:	4610      	mov	r0, r2
 8012560:	f7fe f9f4 	bl	801094c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012564:	bf00      	nop
 8012566:	3720      	adds	r7, #32
 8012568:	46bd      	mov	sp, r7
 801256a:	bd80      	pop	{r7, pc}
 801256c:	20002c64 	.word	0x20002c64
 8012570:	20002c68 	.word	0x20002c68
 8012574:	20002d6c 	.word	0x20002d6c

08012578 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8012578:	b480      	push	{r7}
 801257a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801257c:	4b07      	ldr	r3, [pc, #28]	@ (801259c <pvTaskIncrementMutexHeldCount+0x24>)
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d004      	beq.n	801258e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012584:	4b05      	ldr	r3, [pc, #20]	@ (801259c <pvTaskIncrementMutexHeldCount+0x24>)
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801258a:	3201      	adds	r2, #1
 801258c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 801258e:	4b03      	ldr	r3, [pc, #12]	@ (801259c <pvTaskIncrementMutexHeldCount+0x24>)
 8012590:	681b      	ldr	r3, [r3, #0]
	}
 8012592:	4618      	mov	r0, r3
 8012594:	46bd      	mov	sp, r7
 8012596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801259a:	4770      	bx	lr
 801259c:	20002c64 	.word	0x20002c64

080125a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80125a0:	b580      	push	{r7, lr}
 80125a2:	b084      	sub	sp, #16
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	6078      	str	r0, [r7, #4]
 80125a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80125aa:	4b29      	ldr	r3, [pc, #164]	@ (8012650 <prvAddCurrentTaskToDelayedList+0xb0>)
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80125b0:	4b28      	ldr	r3, [pc, #160]	@ (8012654 <prvAddCurrentTaskToDelayedList+0xb4>)
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	3304      	adds	r3, #4
 80125b6:	4618      	mov	r0, r3
 80125b8:	f7fe fa25 	bl	8010a06 <uxListRemove>
 80125bc:	4603      	mov	r3, r0
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d10b      	bne.n	80125da <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80125c2:	4b24      	ldr	r3, [pc, #144]	@ (8012654 <prvAddCurrentTaskToDelayedList+0xb4>)
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80125c8:	2201      	movs	r2, #1
 80125ca:	fa02 f303 	lsl.w	r3, r2, r3
 80125ce:	43da      	mvns	r2, r3
 80125d0:	4b21      	ldr	r3, [pc, #132]	@ (8012658 <prvAddCurrentTaskToDelayedList+0xb8>)
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	4013      	ands	r3, r2
 80125d6:	4a20      	ldr	r2, [pc, #128]	@ (8012658 <prvAddCurrentTaskToDelayedList+0xb8>)
 80125d8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125e0:	d10a      	bne.n	80125f8 <prvAddCurrentTaskToDelayedList+0x58>
 80125e2:	683b      	ldr	r3, [r7, #0]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d007      	beq.n	80125f8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80125e8:	4b1a      	ldr	r3, [pc, #104]	@ (8012654 <prvAddCurrentTaskToDelayedList+0xb4>)
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	3304      	adds	r3, #4
 80125ee:	4619      	mov	r1, r3
 80125f0:	481a      	ldr	r0, [pc, #104]	@ (801265c <prvAddCurrentTaskToDelayedList+0xbc>)
 80125f2:	f7fe f9ab 	bl	801094c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80125f6:	e026      	b.n	8012646 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80125f8:	68fa      	ldr	r2, [r7, #12]
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	4413      	add	r3, r2
 80125fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012600:	4b14      	ldr	r3, [pc, #80]	@ (8012654 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	68ba      	ldr	r2, [r7, #8]
 8012606:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012608:	68ba      	ldr	r2, [r7, #8]
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	429a      	cmp	r2, r3
 801260e:	d209      	bcs.n	8012624 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012610:	4b13      	ldr	r3, [pc, #76]	@ (8012660 <prvAddCurrentTaskToDelayedList+0xc0>)
 8012612:	681a      	ldr	r2, [r3, #0]
 8012614:	4b0f      	ldr	r3, [pc, #60]	@ (8012654 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	3304      	adds	r3, #4
 801261a:	4619      	mov	r1, r3
 801261c:	4610      	mov	r0, r2
 801261e:	f7fe f9b9 	bl	8010994 <vListInsert>
}
 8012622:	e010      	b.n	8012646 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012624:	4b0f      	ldr	r3, [pc, #60]	@ (8012664 <prvAddCurrentTaskToDelayedList+0xc4>)
 8012626:	681a      	ldr	r2, [r3, #0]
 8012628:	4b0a      	ldr	r3, [pc, #40]	@ (8012654 <prvAddCurrentTaskToDelayedList+0xb4>)
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	3304      	adds	r3, #4
 801262e:	4619      	mov	r1, r3
 8012630:	4610      	mov	r0, r2
 8012632:	f7fe f9af 	bl	8010994 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012636:	4b0c      	ldr	r3, [pc, #48]	@ (8012668 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	68ba      	ldr	r2, [r7, #8]
 801263c:	429a      	cmp	r2, r3
 801263e:	d202      	bcs.n	8012646 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8012640:	4a09      	ldr	r2, [pc, #36]	@ (8012668 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012642:	68bb      	ldr	r3, [r7, #8]
 8012644:	6013      	str	r3, [r2, #0]
}
 8012646:	bf00      	nop
 8012648:	3710      	adds	r7, #16
 801264a:	46bd      	mov	sp, r7
 801264c:	bd80      	pop	{r7, pc}
 801264e:	bf00      	nop
 8012650:	20002d68 	.word	0x20002d68
 8012654:	20002c64 	.word	0x20002c64
 8012658:	20002d6c 	.word	0x20002d6c
 801265c:	20002d50 	.word	0x20002d50
 8012660:	20002d20 	.word	0x20002d20
 8012664:	20002d1c 	.word	0x20002d1c
 8012668:	20002d84 	.word	0x20002d84

0801266c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801266c:	b480      	push	{r7}
 801266e:	b085      	sub	sp, #20
 8012670:	af00      	add	r7, sp, #0
 8012672:	60f8      	str	r0, [r7, #12]
 8012674:	60b9      	str	r1, [r7, #8]
 8012676:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	3b04      	subs	r3, #4
 801267c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8012684:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	3b04      	subs	r3, #4
 801268a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801268c:	68bb      	ldr	r3, [r7, #8]
 801268e:	f023 0201 	bic.w	r2, r3, #1
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	3b04      	subs	r3, #4
 801269a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801269c:	4a0c      	ldr	r2, [pc, #48]	@ (80126d0 <pxPortInitialiseStack+0x64>)
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	3b14      	subs	r3, #20
 80126a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80126a8:	687a      	ldr	r2, [r7, #4]
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	3b04      	subs	r3, #4
 80126b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	f06f 0202 	mvn.w	r2, #2
 80126ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	3b20      	subs	r3, #32
 80126c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80126c2:	68fb      	ldr	r3, [r7, #12]
}
 80126c4:	4618      	mov	r0, r3
 80126c6:	3714      	adds	r7, #20
 80126c8:	46bd      	mov	sp, r7
 80126ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ce:	4770      	bx	lr
 80126d0:	080126d5 	.word	0x080126d5

080126d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80126d4:	b480      	push	{r7}
 80126d6:	b085      	sub	sp, #20
 80126d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80126da:	2300      	movs	r3, #0
 80126dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80126de:	4b13      	ldr	r3, [pc, #76]	@ (801272c <prvTaskExitError+0x58>)
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126e6:	d00b      	beq.n	8012700 <prvTaskExitError+0x2c>
	__asm volatile
 80126e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126ec:	f383 8811 	msr	BASEPRI, r3
 80126f0:	f3bf 8f6f 	isb	sy
 80126f4:	f3bf 8f4f 	dsb	sy
 80126f8:	60fb      	str	r3, [r7, #12]
}
 80126fa:	bf00      	nop
 80126fc:	bf00      	nop
 80126fe:	e7fd      	b.n	80126fc <prvTaskExitError+0x28>
	__asm volatile
 8012700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012704:	f383 8811 	msr	BASEPRI, r3
 8012708:	f3bf 8f6f 	isb	sy
 801270c:	f3bf 8f4f 	dsb	sy
 8012710:	60bb      	str	r3, [r7, #8]
}
 8012712:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012714:	bf00      	nop
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	2b00      	cmp	r3, #0
 801271a:	d0fc      	beq.n	8012716 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801271c:	bf00      	nop
 801271e:	bf00      	nop
 8012720:	3714      	adds	r7, #20
 8012722:	46bd      	mov	sp, r7
 8012724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012728:	4770      	bx	lr
 801272a:	bf00      	nop
 801272c:	20000024 	.word	0x20000024

08012730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012730:	4b07      	ldr	r3, [pc, #28]	@ (8012750 <pxCurrentTCBConst2>)
 8012732:	6819      	ldr	r1, [r3, #0]
 8012734:	6808      	ldr	r0, [r1, #0]
 8012736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801273a:	f380 8809 	msr	PSP, r0
 801273e:	f3bf 8f6f 	isb	sy
 8012742:	f04f 0000 	mov.w	r0, #0
 8012746:	f380 8811 	msr	BASEPRI, r0
 801274a:	4770      	bx	lr
 801274c:	f3af 8000 	nop.w

08012750 <pxCurrentTCBConst2>:
 8012750:	20002c64 	.word	0x20002c64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012754:	bf00      	nop
 8012756:	bf00      	nop

08012758 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012758:	4808      	ldr	r0, [pc, #32]	@ (801277c <prvPortStartFirstTask+0x24>)
 801275a:	6800      	ldr	r0, [r0, #0]
 801275c:	6800      	ldr	r0, [r0, #0]
 801275e:	f380 8808 	msr	MSP, r0
 8012762:	f04f 0000 	mov.w	r0, #0
 8012766:	f380 8814 	msr	CONTROL, r0
 801276a:	b662      	cpsie	i
 801276c:	b661      	cpsie	f
 801276e:	f3bf 8f4f 	dsb	sy
 8012772:	f3bf 8f6f 	isb	sy
 8012776:	df00      	svc	0
 8012778:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801277a:	bf00      	nop
 801277c:	e000ed08 	.word	0xe000ed08

08012780 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012780:	b580      	push	{r7, lr}
 8012782:	b086      	sub	sp, #24
 8012784:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012786:	4b47      	ldr	r3, [pc, #284]	@ (80128a4 <xPortStartScheduler+0x124>)
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	4a47      	ldr	r2, [pc, #284]	@ (80128a8 <xPortStartScheduler+0x128>)
 801278c:	4293      	cmp	r3, r2
 801278e:	d10b      	bne.n	80127a8 <xPortStartScheduler+0x28>
	__asm volatile
 8012790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012794:	f383 8811 	msr	BASEPRI, r3
 8012798:	f3bf 8f6f 	isb	sy
 801279c:	f3bf 8f4f 	dsb	sy
 80127a0:	613b      	str	r3, [r7, #16]
}
 80127a2:	bf00      	nop
 80127a4:	bf00      	nop
 80127a6:	e7fd      	b.n	80127a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80127a8:	4b3e      	ldr	r3, [pc, #248]	@ (80128a4 <xPortStartScheduler+0x124>)
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	4a3f      	ldr	r2, [pc, #252]	@ (80128ac <xPortStartScheduler+0x12c>)
 80127ae:	4293      	cmp	r3, r2
 80127b0:	d10b      	bne.n	80127ca <xPortStartScheduler+0x4a>
	__asm volatile
 80127b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127b6:	f383 8811 	msr	BASEPRI, r3
 80127ba:	f3bf 8f6f 	isb	sy
 80127be:	f3bf 8f4f 	dsb	sy
 80127c2:	60fb      	str	r3, [r7, #12]
}
 80127c4:	bf00      	nop
 80127c6:	bf00      	nop
 80127c8:	e7fd      	b.n	80127c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80127ca:	4b39      	ldr	r3, [pc, #228]	@ (80128b0 <xPortStartScheduler+0x130>)
 80127cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80127ce:	697b      	ldr	r3, [r7, #20]
 80127d0:	781b      	ldrb	r3, [r3, #0]
 80127d2:	b2db      	uxtb	r3, r3
 80127d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80127d6:	697b      	ldr	r3, [r7, #20]
 80127d8:	22ff      	movs	r2, #255	@ 0xff
 80127da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80127dc:	697b      	ldr	r3, [r7, #20]
 80127de:	781b      	ldrb	r3, [r3, #0]
 80127e0:	b2db      	uxtb	r3, r3
 80127e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80127e4:	78fb      	ldrb	r3, [r7, #3]
 80127e6:	b2db      	uxtb	r3, r3
 80127e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80127ec:	b2da      	uxtb	r2, r3
 80127ee:	4b31      	ldr	r3, [pc, #196]	@ (80128b4 <xPortStartScheduler+0x134>)
 80127f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80127f2:	4b31      	ldr	r3, [pc, #196]	@ (80128b8 <xPortStartScheduler+0x138>)
 80127f4:	2207      	movs	r2, #7
 80127f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80127f8:	e009      	b.n	801280e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80127fa:	4b2f      	ldr	r3, [pc, #188]	@ (80128b8 <xPortStartScheduler+0x138>)
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	3b01      	subs	r3, #1
 8012800:	4a2d      	ldr	r2, [pc, #180]	@ (80128b8 <xPortStartScheduler+0x138>)
 8012802:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012804:	78fb      	ldrb	r3, [r7, #3]
 8012806:	b2db      	uxtb	r3, r3
 8012808:	005b      	lsls	r3, r3, #1
 801280a:	b2db      	uxtb	r3, r3
 801280c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801280e:	78fb      	ldrb	r3, [r7, #3]
 8012810:	b2db      	uxtb	r3, r3
 8012812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012816:	2b80      	cmp	r3, #128	@ 0x80
 8012818:	d0ef      	beq.n	80127fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801281a:	4b27      	ldr	r3, [pc, #156]	@ (80128b8 <xPortStartScheduler+0x138>)
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	f1c3 0307 	rsb	r3, r3, #7
 8012822:	2b04      	cmp	r3, #4
 8012824:	d00b      	beq.n	801283e <xPortStartScheduler+0xbe>
	__asm volatile
 8012826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801282a:	f383 8811 	msr	BASEPRI, r3
 801282e:	f3bf 8f6f 	isb	sy
 8012832:	f3bf 8f4f 	dsb	sy
 8012836:	60bb      	str	r3, [r7, #8]
}
 8012838:	bf00      	nop
 801283a:	bf00      	nop
 801283c:	e7fd      	b.n	801283a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801283e:	4b1e      	ldr	r3, [pc, #120]	@ (80128b8 <xPortStartScheduler+0x138>)
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	021b      	lsls	r3, r3, #8
 8012844:	4a1c      	ldr	r2, [pc, #112]	@ (80128b8 <xPortStartScheduler+0x138>)
 8012846:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012848:	4b1b      	ldr	r3, [pc, #108]	@ (80128b8 <xPortStartScheduler+0x138>)
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8012850:	4a19      	ldr	r2, [pc, #100]	@ (80128b8 <xPortStartScheduler+0x138>)
 8012852:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	b2da      	uxtb	r2, r3
 8012858:	697b      	ldr	r3, [r7, #20]
 801285a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801285c:	4b17      	ldr	r3, [pc, #92]	@ (80128bc <xPortStartScheduler+0x13c>)
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	4a16      	ldr	r2, [pc, #88]	@ (80128bc <xPortStartScheduler+0x13c>)
 8012862:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012866:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012868:	4b14      	ldr	r3, [pc, #80]	@ (80128bc <xPortStartScheduler+0x13c>)
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	4a13      	ldr	r2, [pc, #76]	@ (80128bc <xPortStartScheduler+0x13c>)
 801286e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8012872:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012874:	f000 f8da 	bl	8012a2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012878:	4b11      	ldr	r3, [pc, #68]	@ (80128c0 <xPortStartScheduler+0x140>)
 801287a:	2200      	movs	r2, #0
 801287c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801287e:	f000 f8f9 	bl	8012a74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012882:	4b10      	ldr	r3, [pc, #64]	@ (80128c4 <xPortStartScheduler+0x144>)
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	4a0f      	ldr	r2, [pc, #60]	@ (80128c4 <xPortStartScheduler+0x144>)
 8012888:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801288c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801288e:	f7ff ff63 	bl	8012758 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012892:	f7ff fa75 	bl	8011d80 <vTaskSwitchContext>
	prvTaskExitError();
 8012896:	f7ff ff1d 	bl	80126d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801289a:	2300      	movs	r3, #0
}
 801289c:	4618      	mov	r0, r3
 801289e:	3718      	adds	r7, #24
 80128a0:	46bd      	mov	sp, r7
 80128a2:	bd80      	pop	{r7, pc}
 80128a4:	e000ed00 	.word	0xe000ed00
 80128a8:	410fc271 	.word	0x410fc271
 80128ac:	410fc270 	.word	0x410fc270
 80128b0:	e000e400 	.word	0xe000e400
 80128b4:	20002d90 	.word	0x20002d90
 80128b8:	20002d94 	.word	0x20002d94
 80128bc:	e000ed20 	.word	0xe000ed20
 80128c0:	20000024 	.word	0x20000024
 80128c4:	e000ef34 	.word	0xe000ef34

080128c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80128c8:	b480      	push	{r7}
 80128ca:	b083      	sub	sp, #12
 80128cc:	af00      	add	r7, sp, #0
	__asm volatile
 80128ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128d2:	f383 8811 	msr	BASEPRI, r3
 80128d6:	f3bf 8f6f 	isb	sy
 80128da:	f3bf 8f4f 	dsb	sy
 80128de:	607b      	str	r3, [r7, #4]
}
 80128e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80128e2:	4b10      	ldr	r3, [pc, #64]	@ (8012924 <vPortEnterCritical+0x5c>)
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	3301      	adds	r3, #1
 80128e8:	4a0e      	ldr	r2, [pc, #56]	@ (8012924 <vPortEnterCritical+0x5c>)
 80128ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80128ec:	4b0d      	ldr	r3, [pc, #52]	@ (8012924 <vPortEnterCritical+0x5c>)
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	2b01      	cmp	r3, #1
 80128f2:	d110      	bne.n	8012916 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80128f4:	4b0c      	ldr	r3, [pc, #48]	@ (8012928 <vPortEnterCritical+0x60>)
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	b2db      	uxtb	r3, r3
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d00b      	beq.n	8012916 <vPortEnterCritical+0x4e>
	__asm volatile
 80128fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012902:	f383 8811 	msr	BASEPRI, r3
 8012906:	f3bf 8f6f 	isb	sy
 801290a:	f3bf 8f4f 	dsb	sy
 801290e:	603b      	str	r3, [r7, #0]
}
 8012910:	bf00      	nop
 8012912:	bf00      	nop
 8012914:	e7fd      	b.n	8012912 <vPortEnterCritical+0x4a>
	}
}
 8012916:	bf00      	nop
 8012918:	370c      	adds	r7, #12
 801291a:	46bd      	mov	sp, r7
 801291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012920:	4770      	bx	lr
 8012922:	bf00      	nop
 8012924:	20000024 	.word	0x20000024
 8012928:	e000ed04 	.word	0xe000ed04

0801292c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801292c:	b480      	push	{r7}
 801292e:	b083      	sub	sp, #12
 8012930:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012932:	4b12      	ldr	r3, [pc, #72]	@ (801297c <vPortExitCritical+0x50>)
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	2b00      	cmp	r3, #0
 8012938:	d10b      	bne.n	8012952 <vPortExitCritical+0x26>
	__asm volatile
 801293a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801293e:	f383 8811 	msr	BASEPRI, r3
 8012942:	f3bf 8f6f 	isb	sy
 8012946:	f3bf 8f4f 	dsb	sy
 801294a:	607b      	str	r3, [r7, #4]
}
 801294c:	bf00      	nop
 801294e:	bf00      	nop
 8012950:	e7fd      	b.n	801294e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012952:	4b0a      	ldr	r3, [pc, #40]	@ (801297c <vPortExitCritical+0x50>)
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	3b01      	subs	r3, #1
 8012958:	4a08      	ldr	r2, [pc, #32]	@ (801297c <vPortExitCritical+0x50>)
 801295a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801295c:	4b07      	ldr	r3, [pc, #28]	@ (801297c <vPortExitCritical+0x50>)
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	2b00      	cmp	r3, #0
 8012962:	d105      	bne.n	8012970 <vPortExitCritical+0x44>
 8012964:	2300      	movs	r3, #0
 8012966:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012968:	683b      	ldr	r3, [r7, #0]
 801296a:	f383 8811 	msr	BASEPRI, r3
}
 801296e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012970:	bf00      	nop
 8012972:	370c      	adds	r7, #12
 8012974:	46bd      	mov	sp, r7
 8012976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297a:	4770      	bx	lr
 801297c:	20000024 	.word	0x20000024

08012980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012980:	f3ef 8009 	mrs	r0, PSP
 8012984:	f3bf 8f6f 	isb	sy
 8012988:	4b15      	ldr	r3, [pc, #84]	@ (80129e0 <pxCurrentTCBConst>)
 801298a:	681a      	ldr	r2, [r3, #0]
 801298c:	f01e 0f10 	tst.w	lr, #16
 8012990:	bf08      	it	eq
 8012992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801299a:	6010      	str	r0, [r2, #0]
 801299c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80129a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80129a4:	f380 8811 	msr	BASEPRI, r0
 80129a8:	f3bf 8f4f 	dsb	sy
 80129ac:	f3bf 8f6f 	isb	sy
 80129b0:	f7ff f9e6 	bl	8011d80 <vTaskSwitchContext>
 80129b4:	f04f 0000 	mov.w	r0, #0
 80129b8:	f380 8811 	msr	BASEPRI, r0
 80129bc:	bc09      	pop	{r0, r3}
 80129be:	6819      	ldr	r1, [r3, #0]
 80129c0:	6808      	ldr	r0, [r1, #0]
 80129c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129c6:	f01e 0f10 	tst.w	lr, #16
 80129ca:	bf08      	it	eq
 80129cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80129d0:	f380 8809 	msr	PSP, r0
 80129d4:	f3bf 8f6f 	isb	sy
 80129d8:	4770      	bx	lr
 80129da:	bf00      	nop
 80129dc:	f3af 8000 	nop.w

080129e0 <pxCurrentTCBConst>:
 80129e0:	20002c64 	.word	0x20002c64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80129e4:	bf00      	nop
 80129e6:	bf00      	nop

080129e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b082      	sub	sp, #8
 80129ec:	af00      	add	r7, sp, #0
	__asm volatile
 80129ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129f2:	f383 8811 	msr	BASEPRI, r3
 80129f6:	f3bf 8f6f 	isb	sy
 80129fa:	f3bf 8f4f 	dsb	sy
 80129fe:	607b      	str	r3, [r7, #4]
}
 8012a00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012a02:	f7ff f903 	bl	8011c0c <xTaskIncrementTick>
 8012a06:	4603      	mov	r3, r0
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d003      	beq.n	8012a14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012a0c:	4b06      	ldr	r3, [pc, #24]	@ (8012a28 <SysTick_Handler+0x40>)
 8012a0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012a12:	601a      	str	r2, [r3, #0]
 8012a14:	2300      	movs	r3, #0
 8012a16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012a18:	683b      	ldr	r3, [r7, #0]
 8012a1a:	f383 8811 	msr	BASEPRI, r3
}
 8012a1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012a20:	bf00      	nop
 8012a22:	3708      	adds	r7, #8
 8012a24:	46bd      	mov	sp, r7
 8012a26:	bd80      	pop	{r7, pc}
 8012a28:	e000ed04 	.word	0xe000ed04

08012a2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012a2c:	b480      	push	{r7}
 8012a2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012a30:	4b0b      	ldr	r3, [pc, #44]	@ (8012a60 <vPortSetupTimerInterrupt+0x34>)
 8012a32:	2200      	movs	r2, #0
 8012a34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012a36:	4b0b      	ldr	r3, [pc, #44]	@ (8012a64 <vPortSetupTimerInterrupt+0x38>)
 8012a38:	2200      	movs	r2, #0
 8012a3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8012a68 <vPortSetupTimerInterrupt+0x3c>)
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	4a0a      	ldr	r2, [pc, #40]	@ (8012a6c <vPortSetupTimerInterrupt+0x40>)
 8012a42:	fba2 2303 	umull	r2, r3, r2, r3
 8012a46:	099b      	lsrs	r3, r3, #6
 8012a48:	4a09      	ldr	r2, [pc, #36]	@ (8012a70 <vPortSetupTimerInterrupt+0x44>)
 8012a4a:	3b01      	subs	r3, #1
 8012a4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012a4e:	4b04      	ldr	r3, [pc, #16]	@ (8012a60 <vPortSetupTimerInterrupt+0x34>)
 8012a50:	2207      	movs	r2, #7
 8012a52:	601a      	str	r2, [r3, #0]
}
 8012a54:	bf00      	nop
 8012a56:	46bd      	mov	sp, r7
 8012a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a5c:	4770      	bx	lr
 8012a5e:	bf00      	nop
 8012a60:	e000e010 	.word	0xe000e010
 8012a64:	e000e018 	.word	0xe000e018
 8012a68:	20000004 	.word	0x20000004
 8012a6c:	10624dd3 	.word	0x10624dd3
 8012a70:	e000e014 	.word	0xe000e014

08012a74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012a74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8012a84 <vPortEnableVFP+0x10>
 8012a78:	6801      	ldr	r1, [r0, #0]
 8012a7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8012a7e:	6001      	str	r1, [r0, #0]
 8012a80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012a82:	bf00      	nop
 8012a84:	e000ed88 	.word	0xe000ed88

08012a88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012a88:	b480      	push	{r7}
 8012a8a:	b085      	sub	sp, #20
 8012a8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012a8e:	f3ef 8305 	mrs	r3, IPSR
 8012a92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	2b0f      	cmp	r3, #15
 8012a98:	d915      	bls.n	8012ac6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012a9a:	4a18      	ldr	r2, [pc, #96]	@ (8012afc <vPortValidateInterruptPriority+0x74>)
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	4413      	add	r3, r2
 8012aa0:	781b      	ldrb	r3, [r3, #0]
 8012aa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012aa4:	4b16      	ldr	r3, [pc, #88]	@ (8012b00 <vPortValidateInterruptPriority+0x78>)
 8012aa6:	781b      	ldrb	r3, [r3, #0]
 8012aa8:	7afa      	ldrb	r2, [r7, #11]
 8012aaa:	429a      	cmp	r2, r3
 8012aac:	d20b      	bcs.n	8012ac6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8012aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ab2:	f383 8811 	msr	BASEPRI, r3
 8012ab6:	f3bf 8f6f 	isb	sy
 8012aba:	f3bf 8f4f 	dsb	sy
 8012abe:	607b      	str	r3, [r7, #4]
}
 8012ac0:	bf00      	nop
 8012ac2:	bf00      	nop
 8012ac4:	e7fd      	b.n	8012ac2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8012b04 <vPortValidateInterruptPriority+0x7c>)
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8012ace:	4b0e      	ldr	r3, [pc, #56]	@ (8012b08 <vPortValidateInterruptPriority+0x80>)
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	429a      	cmp	r2, r3
 8012ad4:	d90b      	bls.n	8012aee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8012ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ada:	f383 8811 	msr	BASEPRI, r3
 8012ade:	f3bf 8f6f 	isb	sy
 8012ae2:	f3bf 8f4f 	dsb	sy
 8012ae6:	603b      	str	r3, [r7, #0]
}
 8012ae8:	bf00      	nop
 8012aea:	bf00      	nop
 8012aec:	e7fd      	b.n	8012aea <vPortValidateInterruptPriority+0x62>
	}
 8012aee:	bf00      	nop
 8012af0:	3714      	adds	r7, #20
 8012af2:	46bd      	mov	sp, r7
 8012af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af8:	4770      	bx	lr
 8012afa:	bf00      	nop
 8012afc:	e000e3f0 	.word	0xe000e3f0
 8012b00:	20002d90 	.word	0x20002d90
 8012b04:	e000ed0c 	.word	0xe000ed0c
 8012b08:	20002d94 	.word	0x20002d94

08012b0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b08a      	sub	sp, #40	@ 0x28
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012b14:	2300      	movs	r3, #0
 8012b16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012b18:	f7fe ffcc 	bl	8011ab4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012b1c:	4b5c      	ldr	r3, [pc, #368]	@ (8012c90 <pvPortMalloc+0x184>)
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d101      	bne.n	8012b28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012b24:	f000 f924 	bl	8012d70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012b28:	4b5a      	ldr	r3, [pc, #360]	@ (8012c94 <pvPortMalloc+0x188>)
 8012b2a:	681a      	ldr	r2, [r3, #0]
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	4013      	ands	r3, r2
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	f040 8095 	bne.w	8012c60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d01e      	beq.n	8012b7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8012b3c:	2208      	movs	r2, #8
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	4413      	add	r3, r2
 8012b42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	f003 0307 	and.w	r3, r3, #7
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d015      	beq.n	8012b7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	f023 0307 	bic.w	r3, r3, #7
 8012b54:	3308      	adds	r3, #8
 8012b56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	f003 0307 	and.w	r3, r3, #7
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d00b      	beq.n	8012b7a <pvPortMalloc+0x6e>
	__asm volatile
 8012b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b66:	f383 8811 	msr	BASEPRI, r3
 8012b6a:	f3bf 8f6f 	isb	sy
 8012b6e:	f3bf 8f4f 	dsb	sy
 8012b72:	617b      	str	r3, [r7, #20]
}
 8012b74:	bf00      	nop
 8012b76:	bf00      	nop
 8012b78:	e7fd      	b.n	8012b76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d06f      	beq.n	8012c60 <pvPortMalloc+0x154>
 8012b80:	4b45      	ldr	r3, [pc, #276]	@ (8012c98 <pvPortMalloc+0x18c>)
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	687a      	ldr	r2, [r7, #4]
 8012b86:	429a      	cmp	r2, r3
 8012b88:	d86a      	bhi.n	8012c60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012b8a:	4b44      	ldr	r3, [pc, #272]	@ (8012c9c <pvPortMalloc+0x190>)
 8012b8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012b8e:	4b43      	ldr	r3, [pc, #268]	@ (8012c9c <pvPortMalloc+0x190>)
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012b94:	e004      	b.n	8012ba0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8012b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ba2:	685b      	ldr	r3, [r3, #4]
 8012ba4:	687a      	ldr	r2, [r7, #4]
 8012ba6:	429a      	cmp	r2, r3
 8012ba8:	d903      	bls.n	8012bb2 <pvPortMalloc+0xa6>
 8012baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d1f1      	bne.n	8012b96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012bb2:	4b37      	ldr	r3, [pc, #220]	@ (8012c90 <pvPortMalloc+0x184>)
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012bb8:	429a      	cmp	r2, r3
 8012bba:	d051      	beq.n	8012c60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012bbc:	6a3b      	ldr	r3, [r7, #32]
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	2208      	movs	r2, #8
 8012bc2:	4413      	add	r3, r2
 8012bc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bc8:	681a      	ldr	r2, [r3, #0]
 8012bca:	6a3b      	ldr	r3, [r7, #32]
 8012bcc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bd0:	685a      	ldr	r2, [r3, #4]
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	1ad2      	subs	r2, r2, r3
 8012bd6:	2308      	movs	r3, #8
 8012bd8:	005b      	lsls	r3, r3, #1
 8012bda:	429a      	cmp	r2, r3
 8012bdc:	d920      	bls.n	8012c20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012bde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	4413      	add	r3, r2
 8012be4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012be6:	69bb      	ldr	r3, [r7, #24]
 8012be8:	f003 0307 	and.w	r3, r3, #7
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d00b      	beq.n	8012c08 <pvPortMalloc+0xfc>
	__asm volatile
 8012bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bf4:	f383 8811 	msr	BASEPRI, r3
 8012bf8:	f3bf 8f6f 	isb	sy
 8012bfc:	f3bf 8f4f 	dsb	sy
 8012c00:	613b      	str	r3, [r7, #16]
}
 8012c02:	bf00      	nop
 8012c04:	bf00      	nop
 8012c06:	e7fd      	b.n	8012c04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c0a:	685a      	ldr	r2, [r3, #4]
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	1ad2      	subs	r2, r2, r3
 8012c10:	69bb      	ldr	r3, [r7, #24]
 8012c12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c16:	687a      	ldr	r2, [r7, #4]
 8012c18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012c1a:	69b8      	ldr	r0, [r7, #24]
 8012c1c:	f000 f90a 	bl	8012e34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012c20:	4b1d      	ldr	r3, [pc, #116]	@ (8012c98 <pvPortMalloc+0x18c>)
 8012c22:	681a      	ldr	r2, [r3, #0]
 8012c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c26:	685b      	ldr	r3, [r3, #4]
 8012c28:	1ad3      	subs	r3, r2, r3
 8012c2a:	4a1b      	ldr	r2, [pc, #108]	@ (8012c98 <pvPortMalloc+0x18c>)
 8012c2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012c2e:	4b1a      	ldr	r3, [pc, #104]	@ (8012c98 <pvPortMalloc+0x18c>)
 8012c30:	681a      	ldr	r2, [r3, #0]
 8012c32:	4b1b      	ldr	r3, [pc, #108]	@ (8012ca0 <pvPortMalloc+0x194>)
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	429a      	cmp	r2, r3
 8012c38:	d203      	bcs.n	8012c42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012c3a:	4b17      	ldr	r3, [pc, #92]	@ (8012c98 <pvPortMalloc+0x18c>)
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	4a18      	ldr	r2, [pc, #96]	@ (8012ca0 <pvPortMalloc+0x194>)
 8012c40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c44:	685a      	ldr	r2, [r3, #4]
 8012c46:	4b13      	ldr	r3, [pc, #76]	@ (8012c94 <pvPortMalloc+0x188>)
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	431a      	orrs	r2, r3
 8012c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c52:	2200      	movs	r2, #0
 8012c54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012c56:	4b13      	ldr	r3, [pc, #76]	@ (8012ca4 <pvPortMalloc+0x198>)
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	3301      	adds	r3, #1
 8012c5c:	4a11      	ldr	r2, [pc, #68]	@ (8012ca4 <pvPortMalloc+0x198>)
 8012c5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012c60:	f7fe ff36 	bl	8011ad0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012c64:	69fb      	ldr	r3, [r7, #28]
 8012c66:	f003 0307 	and.w	r3, r3, #7
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d00b      	beq.n	8012c86 <pvPortMalloc+0x17a>
	__asm volatile
 8012c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c72:	f383 8811 	msr	BASEPRI, r3
 8012c76:	f3bf 8f6f 	isb	sy
 8012c7a:	f3bf 8f4f 	dsb	sy
 8012c7e:	60fb      	str	r3, [r7, #12]
}
 8012c80:	bf00      	nop
 8012c82:	bf00      	nop
 8012c84:	e7fd      	b.n	8012c82 <pvPortMalloc+0x176>
	return pvReturn;
 8012c86:	69fb      	ldr	r3, [r7, #28]
}
 8012c88:	4618      	mov	r0, r3
 8012c8a:	3728      	adds	r7, #40	@ 0x28
 8012c8c:	46bd      	mov	sp, r7
 8012c8e:	bd80      	pop	{r7, pc}
 8012c90:	200069a0 	.word	0x200069a0
 8012c94:	200069b4 	.word	0x200069b4
 8012c98:	200069a4 	.word	0x200069a4
 8012c9c:	20006998 	.word	0x20006998
 8012ca0:	200069a8 	.word	0x200069a8
 8012ca4:	200069ac 	.word	0x200069ac

08012ca8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012ca8:	b580      	push	{r7, lr}
 8012caa:	b086      	sub	sp, #24
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d04f      	beq.n	8012d5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012cba:	2308      	movs	r3, #8
 8012cbc:	425b      	negs	r3, r3
 8012cbe:	697a      	ldr	r2, [r7, #20]
 8012cc0:	4413      	add	r3, r2
 8012cc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012cc4:	697b      	ldr	r3, [r7, #20]
 8012cc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012cc8:	693b      	ldr	r3, [r7, #16]
 8012cca:	685a      	ldr	r2, [r3, #4]
 8012ccc:	4b25      	ldr	r3, [pc, #148]	@ (8012d64 <vPortFree+0xbc>)
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	4013      	ands	r3, r2
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d10b      	bne.n	8012cee <vPortFree+0x46>
	__asm volatile
 8012cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cda:	f383 8811 	msr	BASEPRI, r3
 8012cde:	f3bf 8f6f 	isb	sy
 8012ce2:	f3bf 8f4f 	dsb	sy
 8012ce6:	60fb      	str	r3, [r7, #12]
}
 8012ce8:	bf00      	nop
 8012cea:	bf00      	nop
 8012cec:	e7fd      	b.n	8012cea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012cee:	693b      	ldr	r3, [r7, #16]
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d00b      	beq.n	8012d0e <vPortFree+0x66>
	__asm volatile
 8012cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cfa:	f383 8811 	msr	BASEPRI, r3
 8012cfe:	f3bf 8f6f 	isb	sy
 8012d02:	f3bf 8f4f 	dsb	sy
 8012d06:	60bb      	str	r3, [r7, #8]
}
 8012d08:	bf00      	nop
 8012d0a:	bf00      	nop
 8012d0c:	e7fd      	b.n	8012d0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012d0e:	693b      	ldr	r3, [r7, #16]
 8012d10:	685a      	ldr	r2, [r3, #4]
 8012d12:	4b14      	ldr	r3, [pc, #80]	@ (8012d64 <vPortFree+0xbc>)
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	4013      	ands	r3, r2
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d01e      	beq.n	8012d5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012d1c:	693b      	ldr	r3, [r7, #16]
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d11a      	bne.n	8012d5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012d24:	693b      	ldr	r3, [r7, #16]
 8012d26:	685a      	ldr	r2, [r3, #4]
 8012d28:	4b0e      	ldr	r3, [pc, #56]	@ (8012d64 <vPortFree+0xbc>)
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	43db      	mvns	r3, r3
 8012d2e:	401a      	ands	r2, r3
 8012d30:	693b      	ldr	r3, [r7, #16]
 8012d32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012d34:	f7fe febe 	bl	8011ab4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012d38:	693b      	ldr	r3, [r7, #16]
 8012d3a:	685a      	ldr	r2, [r3, #4]
 8012d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8012d68 <vPortFree+0xc0>)
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	4413      	add	r3, r2
 8012d42:	4a09      	ldr	r2, [pc, #36]	@ (8012d68 <vPortFree+0xc0>)
 8012d44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012d46:	6938      	ldr	r0, [r7, #16]
 8012d48:	f000 f874 	bl	8012e34 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012d4c:	4b07      	ldr	r3, [pc, #28]	@ (8012d6c <vPortFree+0xc4>)
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	3301      	adds	r3, #1
 8012d52:	4a06      	ldr	r2, [pc, #24]	@ (8012d6c <vPortFree+0xc4>)
 8012d54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012d56:	f7fe febb 	bl	8011ad0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012d5a:	bf00      	nop
 8012d5c:	3718      	adds	r7, #24
 8012d5e:	46bd      	mov	sp, r7
 8012d60:	bd80      	pop	{r7, pc}
 8012d62:	bf00      	nop
 8012d64:	200069b4 	.word	0x200069b4
 8012d68:	200069a4 	.word	0x200069a4
 8012d6c:	200069b0 	.word	0x200069b0

08012d70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012d70:	b480      	push	{r7}
 8012d72:	b085      	sub	sp, #20
 8012d74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012d76:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8012d7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012d7c:	4b27      	ldr	r3, [pc, #156]	@ (8012e1c <prvHeapInit+0xac>)
 8012d7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	f003 0307 	and.w	r3, r3, #7
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d00c      	beq.n	8012da4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	3307      	adds	r3, #7
 8012d8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	f023 0307 	bic.w	r3, r3, #7
 8012d96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012d98:	68ba      	ldr	r2, [r7, #8]
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	1ad3      	subs	r3, r2, r3
 8012d9e:	4a1f      	ldr	r2, [pc, #124]	@ (8012e1c <prvHeapInit+0xac>)
 8012da0:	4413      	add	r3, r2
 8012da2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012da8:	4a1d      	ldr	r2, [pc, #116]	@ (8012e20 <prvHeapInit+0xb0>)
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012dae:	4b1c      	ldr	r3, [pc, #112]	@ (8012e20 <prvHeapInit+0xb0>)
 8012db0:	2200      	movs	r2, #0
 8012db2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	68ba      	ldr	r2, [r7, #8]
 8012db8:	4413      	add	r3, r2
 8012dba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012dbc:	2208      	movs	r2, #8
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	1a9b      	subs	r3, r3, r2
 8012dc2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	f023 0307 	bic.w	r3, r3, #7
 8012dca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	4a15      	ldr	r2, [pc, #84]	@ (8012e24 <prvHeapInit+0xb4>)
 8012dd0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012dd2:	4b14      	ldr	r3, [pc, #80]	@ (8012e24 <prvHeapInit+0xb4>)
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	2200      	movs	r2, #0
 8012dd8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012dda:	4b12      	ldr	r3, [pc, #72]	@ (8012e24 <prvHeapInit+0xb4>)
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	2200      	movs	r2, #0
 8012de0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012de6:	683b      	ldr	r3, [r7, #0]
 8012de8:	68fa      	ldr	r2, [r7, #12]
 8012dea:	1ad2      	subs	r2, r2, r3
 8012dec:	683b      	ldr	r3, [r7, #0]
 8012dee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012df0:	4b0c      	ldr	r3, [pc, #48]	@ (8012e24 <prvHeapInit+0xb4>)
 8012df2:	681a      	ldr	r2, [r3, #0]
 8012df4:	683b      	ldr	r3, [r7, #0]
 8012df6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012df8:	683b      	ldr	r3, [r7, #0]
 8012dfa:	685b      	ldr	r3, [r3, #4]
 8012dfc:	4a0a      	ldr	r2, [pc, #40]	@ (8012e28 <prvHeapInit+0xb8>)
 8012dfe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012e00:	683b      	ldr	r3, [r7, #0]
 8012e02:	685b      	ldr	r3, [r3, #4]
 8012e04:	4a09      	ldr	r2, [pc, #36]	@ (8012e2c <prvHeapInit+0xbc>)
 8012e06:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012e08:	4b09      	ldr	r3, [pc, #36]	@ (8012e30 <prvHeapInit+0xc0>)
 8012e0a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8012e0e:	601a      	str	r2, [r3, #0]
}
 8012e10:	bf00      	nop
 8012e12:	3714      	adds	r7, #20
 8012e14:	46bd      	mov	sp, r7
 8012e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1a:	4770      	bx	lr
 8012e1c:	20002d98 	.word	0x20002d98
 8012e20:	20006998 	.word	0x20006998
 8012e24:	200069a0 	.word	0x200069a0
 8012e28:	200069a8 	.word	0x200069a8
 8012e2c:	200069a4 	.word	0x200069a4
 8012e30:	200069b4 	.word	0x200069b4

08012e34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012e34:	b480      	push	{r7}
 8012e36:	b085      	sub	sp, #20
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012e3c:	4b28      	ldr	r3, [pc, #160]	@ (8012ee0 <prvInsertBlockIntoFreeList+0xac>)
 8012e3e:	60fb      	str	r3, [r7, #12]
 8012e40:	e002      	b.n	8012e48 <prvInsertBlockIntoFreeList+0x14>
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	60fb      	str	r3, [r7, #12]
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	687a      	ldr	r2, [r7, #4]
 8012e4e:	429a      	cmp	r2, r3
 8012e50:	d8f7      	bhi.n	8012e42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	685b      	ldr	r3, [r3, #4]
 8012e5a:	68ba      	ldr	r2, [r7, #8]
 8012e5c:	4413      	add	r3, r2
 8012e5e:	687a      	ldr	r2, [r7, #4]
 8012e60:	429a      	cmp	r2, r3
 8012e62:	d108      	bne.n	8012e76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	685a      	ldr	r2, [r3, #4]
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	685b      	ldr	r3, [r3, #4]
 8012e6c:	441a      	add	r2, r3
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	685b      	ldr	r3, [r3, #4]
 8012e7e:	68ba      	ldr	r2, [r7, #8]
 8012e80:	441a      	add	r2, r3
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	429a      	cmp	r2, r3
 8012e88:	d118      	bne.n	8012ebc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	681a      	ldr	r2, [r3, #0]
 8012e8e:	4b15      	ldr	r3, [pc, #84]	@ (8012ee4 <prvInsertBlockIntoFreeList+0xb0>)
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	429a      	cmp	r2, r3
 8012e94:	d00d      	beq.n	8012eb2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	685a      	ldr	r2, [r3, #4]
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	685b      	ldr	r3, [r3, #4]
 8012ea0:	441a      	add	r2, r3
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	681a      	ldr	r2, [r3, #0]
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	601a      	str	r2, [r3, #0]
 8012eb0:	e008      	b.n	8012ec4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8012ee4 <prvInsertBlockIntoFreeList+0xb0>)
 8012eb4:	681a      	ldr	r2, [r3, #0]
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	601a      	str	r2, [r3, #0]
 8012eba:	e003      	b.n	8012ec4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	681a      	ldr	r2, [r3, #0]
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012ec4:	68fa      	ldr	r2, [r7, #12]
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	429a      	cmp	r2, r3
 8012eca:	d002      	beq.n	8012ed2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	687a      	ldr	r2, [r7, #4]
 8012ed0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012ed2:	bf00      	nop
 8012ed4:	3714      	adds	r7, #20
 8012ed6:	46bd      	mov	sp, r7
 8012ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012edc:	4770      	bx	lr
 8012ede:	bf00      	nop
 8012ee0:	20006998 	.word	0x20006998
 8012ee4:	200069a0 	.word	0x200069a0

08012ee8 <__cvt>:
 8012ee8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012eec:	ec57 6b10 	vmov	r6, r7, d0
 8012ef0:	2f00      	cmp	r7, #0
 8012ef2:	460c      	mov	r4, r1
 8012ef4:	4619      	mov	r1, r3
 8012ef6:	463b      	mov	r3, r7
 8012ef8:	bfbb      	ittet	lt
 8012efa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8012efe:	461f      	movlt	r7, r3
 8012f00:	2300      	movge	r3, #0
 8012f02:	232d      	movlt	r3, #45	@ 0x2d
 8012f04:	700b      	strb	r3, [r1, #0]
 8012f06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012f08:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8012f0c:	4691      	mov	r9, r2
 8012f0e:	f023 0820 	bic.w	r8, r3, #32
 8012f12:	bfbc      	itt	lt
 8012f14:	4632      	movlt	r2, r6
 8012f16:	4616      	movlt	r6, r2
 8012f18:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012f1c:	d005      	beq.n	8012f2a <__cvt+0x42>
 8012f1e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8012f22:	d100      	bne.n	8012f26 <__cvt+0x3e>
 8012f24:	3401      	adds	r4, #1
 8012f26:	2102      	movs	r1, #2
 8012f28:	e000      	b.n	8012f2c <__cvt+0x44>
 8012f2a:	2103      	movs	r1, #3
 8012f2c:	ab03      	add	r3, sp, #12
 8012f2e:	9301      	str	r3, [sp, #4]
 8012f30:	ab02      	add	r3, sp, #8
 8012f32:	9300      	str	r3, [sp, #0]
 8012f34:	ec47 6b10 	vmov	d0, r6, r7
 8012f38:	4653      	mov	r3, sl
 8012f3a:	4622      	mov	r2, r4
 8012f3c:	f000 fed0 	bl	8013ce0 <_dtoa_r>
 8012f40:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8012f44:	4605      	mov	r5, r0
 8012f46:	d119      	bne.n	8012f7c <__cvt+0x94>
 8012f48:	f019 0f01 	tst.w	r9, #1
 8012f4c:	d00e      	beq.n	8012f6c <__cvt+0x84>
 8012f4e:	eb00 0904 	add.w	r9, r0, r4
 8012f52:	2200      	movs	r2, #0
 8012f54:	2300      	movs	r3, #0
 8012f56:	4630      	mov	r0, r6
 8012f58:	4639      	mov	r1, r7
 8012f5a:	f7ed fdd5 	bl	8000b08 <__aeabi_dcmpeq>
 8012f5e:	b108      	cbz	r0, 8012f64 <__cvt+0x7c>
 8012f60:	f8cd 900c 	str.w	r9, [sp, #12]
 8012f64:	2230      	movs	r2, #48	@ 0x30
 8012f66:	9b03      	ldr	r3, [sp, #12]
 8012f68:	454b      	cmp	r3, r9
 8012f6a:	d31e      	bcc.n	8012faa <__cvt+0xc2>
 8012f6c:	9b03      	ldr	r3, [sp, #12]
 8012f6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012f70:	1b5b      	subs	r3, r3, r5
 8012f72:	4628      	mov	r0, r5
 8012f74:	6013      	str	r3, [r2, #0]
 8012f76:	b004      	add	sp, #16
 8012f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f7c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012f80:	eb00 0904 	add.w	r9, r0, r4
 8012f84:	d1e5      	bne.n	8012f52 <__cvt+0x6a>
 8012f86:	7803      	ldrb	r3, [r0, #0]
 8012f88:	2b30      	cmp	r3, #48	@ 0x30
 8012f8a:	d10a      	bne.n	8012fa2 <__cvt+0xba>
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	2300      	movs	r3, #0
 8012f90:	4630      	mov	r0, r6
 8012f92:	4639      	mov	r1, r7
 8012f94:	f7ed fdb8 	bl	8000b08 <__aeabi_dcmpeq>
 8012f98:	b918      	cbnz	r0, 8012fa2 <__cvt+0xba>
 8012f9a:	f1c4 0401 	rsb	r4, r4, #1
 8012f9e:	f8ca 4000 	str.w	r4, [sl]
 8012fa2:	f8da 3000 	ldr.w	r3, [sl]
 8012fa6:	4499      	add	r9, r3
 8012fa8:	e7d3      	b.n	8012f52 <__cvt+0x6a>
 8012faa:	1c59      	adds	r1, r3, #1
 8012fac:	9103      	str	r1, [sp, #12]
 8012fae:	701a      	strb	r2, [r3, #0]
 8012fb0:	e7d9      	b.n	8012f66 <__cvt+0x7e>

08012fb2 <__exponent>:
 8012fb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012fb4:	2900      	cmp	r1, #0
 8012fb6:	bfba      	itte	lt
 8012fb8:	4249      	neglt	r1, r1
 8012fba:	232d      	movlt	r3, #45	@ 0x2d
 8012fbc:	232b      	movge	r3, #43	@ 0x2b
 8012fbe:	2909      	cmp	r1, #9
 8012fc0:	7002      	strb	r2, [r0, #0]
 8012fc2:	7043      	strb	r3, [r0, #1]
 8012fc4:	dd29      	ble.n	801301a <__exponent+0x68>
 8012fc6:	f10d 0307 	add.w	r3, sp, #7
 8012fca:	461d      	mov	r5, r3
 8012fcc:	270a      	movs	r7, #10
 8012fce:	461a      	mov	r2, r3
 8012fd0:	fbb1 f6f7 	udiv	r6, r1, r7
 8012fd4:	fb07 1416 	mls	r4, r7, r6, r1
 8012fd8:	3430      	adds	r4, #48	@ 0x30
 8012fda:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012fde:	460c      	mov	r4, r1
 8012fe0:	2c63      	cmp	r4, #99	@ 0x63
 8012fe2:	f103 33ff 	add.w	r3, r3, #4294967295
 8012fe6:	4631      	mov	r1, r6
 8012fe8:	dcf1      	bgt.n	8012fce <__exponent+0x1c>
 8012fea:	3130      	adds	r1, #48	@ 0x30
 8012fec:	1e94      	subs	r4, r2, #2
 8012fee:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012ff2:	1c41      	adds	r1, r0, #1
 8012ff4:	4623      	mov	r3, r4
 8012ff6:	42ab      	cmp	r3, r5
 8012ff8:	d30a      	bcc.n	8013010 <__exponent+0x5e>
 8012ffa:	f10d 0309 	add.w	r3, sp, #9
 8012ffe:	1a9b      	subs	r3, r3, r2
 8013000:	42ac      	cmp	r4, r5
 8013002:	bf88      	it	hi
 8013004:	2300      	movhi	r3, #0
 8013006:	3302      	adds	r3, #2
 8013008:	4403      	add	r3, r0
 801300a:	1a18      	subs	r0, r3, r0
 801300c:	b003      	add	sp, #12
 801300e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013010:	f813 6b01 	ldrb.w	r6, [r3], #1
 8013014:	f801 6f01 	strb.w	r6, [r1, #1]!
 8013018:	e7ed      	b.n	8012ff6 <__exponent+0x44>
 801301a:	2330      	movs	r3, #48	@ 0x30
 801301c:	3130      	adds	r1, #48	@ 0x30
 801301e:	7083      	strb	r3, [r0, #2]
 8013020:	70c1      	strb	r1, [r0, #3]
 8013022:	1d03      	adds	r3, r0, #4
 8013024:	e7f1      	b.n	801300a <__exponent+0x58>
	...

08013028 <_printf_float>:
 8013028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801302c:	b08d      	sub	sp, #52	@ 0x34
 801302e:	460c      	mov	r4, r1
 8013030:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8013034:	4616      	mov	r6, r2
 8013036:	461f      	mov	r7, r3
 8013038:	4605      	mov	r5, r0
 801303a:	f000 fced 	bl	8013a18 <_localeconv_r>
 801303e:	6803      	ldr	r3, [r0, #0]
 8013040:	9304      	str	r3, [sp, #16]
 8013042:	4618      	mov	r0, r3
 8013044:	f7ed f934 	bl	80002b0 <strlen>
 8013048:	2300      	movs	r3, #0
 801304a:	930a      	str	r3, [sp, #40]	@ 0x28
 801304c:	f8d8 3000 	ldr.w	r3, [r8]
 8013050:	9005      	str	r0, [sp, #20]
 8013052:	3307      	adds	r3, #7
 8013054:	f023 0307 	bic.w	r3, r3, #7
 8013058:	f103 0208 	add.w	r2, r3, #8
 801305c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8013060:	f8d4 b000 	ldr.w	fp, [r4]
 8013064:	f8c8 2000 	str.w	r2, [r8]
 8013068:	e9d3 8900 	ldrd	r8, r9, [r3]
 801306c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8013070:	9307      	str	r3, [sp, #28]
 8013072:	f8cd 8018 	str.w	r8, [sp, #24]
 8013076:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801307a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801307e:	4b9c      	ldr	r3, [pc, #624]	@ (80132f0 <_printf_float+0x2c8>)
 8013080:	f04f 32ff 	mov.w	r2, #4294967295
 8013084:	f7ed fd72 	bl	8000b6c <__aeabi_dcmpun>
 8013088:	bb70      	cbnz	r0, 80130e8 <_printf_float+0xc0>
 801308a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801308e:	4b98      	ldr	r3, [pc, #608]	@ (80132f0 <_printf_float+0x2c8>)
 8013090:	f04f 32ff 	mov.w	r2, #4294967295
 8013094:	f7ed fd4c 	bl	8000b30 <__aeabi_dcmple>
 8013098:	bb30      	cbnz	r0, 80130e8 <_printf_float+0xc0>
 801309a:	2200      	movs	r2, #0
 801309c:	2300      	movs	r3, #0
 801309e:	4640      	mov	r0, r8
 80130a0:	4649      	mov	r1, r9
 80130a2:	f7ed fd3b 	bl	8000b1c <__aeabi_dcmplt>
 80130a6:	b110      	cbz	r0, 80130ae <_printf_float+0x86>
 80130a8:	232d      	movs	r3, #45	@ 0x2d
 80130aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80130ae:	4a91      	ldr	r2, [pc, #580]	@ (80132f4 <_printf_float+0x2cc>)
 80130b0:	4b91      	ldr	r3, [pc, #580]	@ (80132f8 <_printf_float+0x2d0>)
 80130b2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80130b6:	bf94      	ite	ls
 80130b8:	4690      	movls	r8, r2
 80130ba:	4698      	movhi	r8, r3
 80130bc:	2303      	movs	r3, #3
 80130be:	6123      	str	r3, [r4, #16]
 80130c0:	f02b 0304 	bic.w	r3, fp, #4
 80130c4:	6023      	str	r3, [r4, #0]
 80130c6:	f04f 0900 	mov.w	r9, #0
 80130ca:	9700      	str	r7, [sp, #0]
 80130cc:	4633      	mov	r3, r6
 80130ce:	aa0b      	add	r2, sp, #44	@ 0x2c
 80130d0:	4621      	mov	r1, r4
 80130d2:	4628      	mov	r0, r5
 80130d4:	f000 f9d2 	bl	801347c <_printf_common>
 80130d8:	3001      	adds	r0, #1
 80130da:	f040 808d 	bne.w	80131f8 <_printf_float+0x1d0>
 80130de:	f04f 30ff 	mov.w	r0, #4294967295
 80130e2:	b00d      	add	sp, #52	@ 0x34
 80130e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130e8:	4642      	mov	r2, r8
 80130ea:	464b      	mov	r3, r9
 80130ec:	4640      	mov	r0, r8
 80130ee:	4649      	mov	r1, r9
 80130f0:	f7ed fd3c 	bl	8000b6c <__aeabi_dcmpun>
 80130f4:	b140      	cbz	r0, 8013108 <_printf_float+0xe0>
 80130f6:	464b      	mov	r3, r9
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	bfbc      	itt	lt
 80130fc:	232d      	movlt	r3, #45	@ 0x2d
 80130fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8013102:	4a7e      	ldr	r2, [pc, #504]	@ (80132fc <_printf_float+0x2d4>)
 8013104:	4b7e      	ldr	r3, [pc, #504]	@ (8013300 <_printf_float+0x2d8>)
 8013106:	e7d4      	b.n	80130b2 <_printf_float+0x8a>
 8013108:	6863      	ldr	r3, [r4, #4]
 801310a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801310e:	9206      	str	r2, [sp, #24]
 8013110:	1c5a      	adds	r2, r3, #1
 8013112:	d13b      	bne.n	801318c <_printf_float+0x164>
 8013114:	2306      	movs	r3, #6
 8013116:	6063      	str	r3, [r4, #4]
 8013118:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801311c:	2300      	movs	r3, #0
 801311e:	6022      	str	r2, [r4, #0]
 8013120:	9303      	str	r3, [sp, #12]
 8013122:	ab0a      	add	r3, sp, #40	@ 0x28
 8013124:	e9cd a301 	strd	sl, r3, [sp, #4]
 8013128:	ab09      	add	r3, sp, #36	@ 0x24
 801312a:	9300      	str	r3, [sp, #0]
 801312c:	6861      	ldr	r1, [r4, #4]
 801312e:	ec49 8b10 	vmov	d0, r8, r9
 8013132:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8013136:	4628      	mov	r0, r5
 8013138:	f7ff fed6 	bl	8012ee8 <__cvt>
 801313c:	9b06      	ldr	r3, [sp, #24]
 801313e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013140:	2b47      	cmp	r3, #71	@ 0x47
 8013142:	4680      	mov	r8, r0
 8013144:	d129      	bne.n	801319a <_printf_float+0x172>
 8013146:	1cc8      	adds	r0, r1, #3
 8013148:	db02      	blt.n	8013150 <_printf_float+0x128>
 801314a:	6863      	ldr	r3, [r4, #4]
 801314c:	4299      	cmp	r1, r3
 801314e:	dd41      	ble.n	80131d4 <_printf_float+0x1ac>
 8013150:	f1aa 0a02 	sub.w	sl, sl, #2
 8013154:	fa5f fa8a 	uxtb.w	sl, sl
 8013158:	3901      	subs	r1, #1
 801315a:	4652      	mov	r2, sl
 801315c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8013160:	9109      	str	r1, [sp, #36]	@ 0x24
 8013162:	f7ff ff26 	bl	8012fb2 <__exponent>
 8013166:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013168:	1813      	adds	r3, r2, r0
 801316a:	2a01      	cmp	r2, #1
 801316c:	4681      	mov	r9, r0
 801316e:	6123      	str	r3, [r4, #16]
 8013170:	dc02      	bgt.n	8013178 <_printf_float+0x150>
 8013172:	6822      	ldr	r2, [r4, #0]
 8013174:	07d2      	lsls	r2, r2, #31
 8013176:	d501      	bpl.n	801317c <_printf_float+0x154>
 8013178:	3301      	adds	r3, #1
 801317a:	6123      	str	r3, [r4, #16]
 801317c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8013180:	2b00      	cmp	r3, #0
 8013182:	d0a2      	beq.n	80130ca <_printf_float+0xa2>
 8013184:	232d      	movs	r3, #45	@ 0x2d
 8013186:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801318a:	e79e      	b.n	80130ca <_printf_float+0xa2>
 801318c:	9a06      	ldr	r2, [sp, #24]
 801318e:	2a47      	cmp	r2, #71	@ 0x47
 8013190:	d1c2      	bne.n	8013118 <_printf_float+0xf0>
 8013192:	2b00      	cmp	r3, #0
 8013194:	d1c0      	bne.n	8013118 <_printf_float+0xf0>
 8013196:	2301      	movs	r3, #1
 8013198:	e7bd      	b.n	8013116 <_printf_float+0xee>
 801319a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801319e:	d9db      	bls.n	8013158 <_printf_float+0x130>
 80131a0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80131a4:	d118      	bne.n	80131d8 <_printf_float+0x1b0>
 80131a6:	2900      	cmp	r1, #0
 80131a8:	6863      	ldr	r3, [r4, #4]
 80131aa:	dd0b      	ble.n	80131c4 <_printf_float+0x19c>
 80131ac:	6121      	str	r1, [r4, #16]
 80131ae:	b913      	cbnz	r3, 80131b6 <_printf_float+0x18e>
 80131b0:	6822      	ldr	r2, [r4, #0]
 80131b2:	07d0      	lsls	r0, r2, #31
 80131b4:	d502      	bpl.n	80131bc <_printf_float+0x194>
 80131b6:	3301      	adds	r3, #1
 80131b8:	440b      	add	r3, r1
 80131ba:	6123      	str	r3, [r4, #16]
 80131bc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80131be:	f04f 0900 	mov.w	r9, #0
 80131c2:	e7db      	b.n	801317c <_printf_float+0x154>
 80131c4:	b913      	cbnz	r3, 80131cc <_printf_float+0x1a4>
 80131c6:	6822      	ldr	r2, [r4, #0]
 80131c8:	07d2      	lsls	r2, r2, #31
 80131ca:	d501      	bpl.n	80131d0 <_printf_float+0x1a8>
 80131cc:	3302      	adds	r3, #2
 80131ce:	e7f4      	b.n	80131ba <_printf_float+0x192>
 80131d0:	2301      	movs	r3, #1
 80131d2:	e7f2      	b.n	80131ba <_printf_float+0x192>
 80131d4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80131d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80131da:	4299      	cmp	r1, r3
 80131dc:	db05      	blt.n	80131ea <_printf_float+0x1c2>
 80131de:	6823      	ldr	r3, [r4, #0]
 80131e0:	6121      	str	r1, [r4, #16]
 80131e2:	07d8      	lsls	r0, r3, #31
 80131e4:	d5ea      	bpl.n	80131bc <_printf_float+0x194>
 80131e6:	1c4b      	adds	r3, r1, #1
 80131e8:	e7e7      	b.n	80131ba <_printf_float+0x192>
 80131ea:	2900      	cmp	r1, #0
 80131ec:	bfd4      	ite	le
 80131ee:	f1c1 0202 	rsble	r2, r1, #2
 80131f2:	2201      	movgt	r2, #1
 80131f4:	4413      	add	r3, r2
 80131f6:	e7e0      	b.n	80131ba <_printf_float+0x192>
 80131f8:	6823      	ldr	r3, [r4, #0]
 80131fa:	055a      	lsls	r2, r3, #21
 80131fc:	d407      	bmi.n	801320e <_printf_float+0x1e6>
 80131fe:	6923      	ldr	r3, [r4, #16]
 8013200:	4642      	mov	r2, r8
 8013202:	4631      	mov	r1, r6
 8013204:	4628      	mov	r0, r5
 8013206:	47b8      	blx	r7
 8013208:	3001      	adds	r0, #1
 801320a:	d12b      	bne.n	8013264 <_printf_float+0x23c>
 801320c:	e767      	b.n	80130de <_printf_float+0xb6>
 801320e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8013212:	f240 80dd 	bls.w	80133d0 <_printf_float+0x3a8>
 8013216:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801321a:	2200      	movs	r2, #0
 801321c:	2300      	movs	r3, #0
 801321e:	f7ed fc73 	bl	8000b08 <__aeabi_dcmpeq>
 8013222:	2800      	cmp	r0, #0
 8013224:	d033      	beq.n	801328e <_printf_float+0x266>
 8013226:	4a37      	ldr	r2, [pc, #220]	@ (8013304 <_printf_float+0x2dc>)
 8013228:	2301      	movs	r3, #1
 801322a:	4631      	mov	r1, r6
 801322c:	4628      	mov	r0, r5
 801322e:	47b8      	blx	r7
 8013230:	3001      	adds	r0, #1
 8013232:	f43f af54 	beq.w	80130de <_printf_float+0xb6>
 8013236:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801323a:	4543      	cmp	r3, r8
 801323c:	db02      	blt.n	8013244 <_printf_float+0x21c>
 801323e:	6823      	ldr	r3, [r4, #0]
 8013240:	07d8      	lsls	r0, r3, #31
 8013242:	d50f      	bpl.n	8013264 <_printf_float+0x23c>
 8013244:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013248:	4631      	mov	r1, r6
 801324a:	4628      	mov	r0, r5
 801324c:	47b8      	blx	r7
 801324e:	3001      	adds	r0, #1
 8013250:	f43f af45 	beq.w	80130de <_printf_float+0xb6>
 8013254:	f04f 0900 	mov.w	r9, #0
 8013258:	f108 38ff 	add.w	r8, r8, #4294967295
 801325c:	f104 0a1a 	add.w	sl, r4, #26
 8013260:	45c8      	cmp	r8, r9
 8013262:	dc09      	bgt.n	8013278 <_printf_float+0x250>
 8013264:	6823      	ldr	r3, [r4, #0]
 8013266:	079b      	lsls	r3, r3, #30
 8013268:	f100 8103 	bmi.w	8013472 <_printf_float+0x44a>
 801326c:	68e0      	ldr	r0, [r4, #12]
 801326e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013270:	4298      	cmp	r0, r3
 8013272:	bfb8      	it	lt
 8013274:	4618      	movlt	r0, r3
 8013276:	e734      	b.n	80130e2 <_printf_float+0xba>
 8013278:	2301      	movs	r3, #1
 801327a:	4652      	mov	r2, sl
 801327c:	4631      	mov	r1, r6
 801327e:	4628      	mov	r0, r5
 8013280:	47b8      	blx	r7
 8013282:	3001      	adds	r0, #1
 8013284:	f43f af2b 	beq.w	80130de <_printf_float+0xb6>
 8013288:	f109 0901 	add.w	r9, r9, #1
 801328c:	e7e8      	b.n	8013260 <_printf_float+0x238>
 801328e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013290:	2b00      	cmp	r3, #0
 8013292:	dc39      	bgt.n	8013308 <_printf_float+0x2e0>
 8013294:	4a1b      	ldr	r2, [pc, #108]	@ (8013304 <_printf_float+0x2dc>)
 8013296:	2301      	movs	r3, #1
 8013298:	4631      	mov	r1, r6
 801329a:	4628      	mov	r0, r5
 801329c:	47b8      	blx	r7
 801329e:	3001      	adds	r0, #1
 80132a0:	f43f af1d 	beq.w	80130de <_printf_float+0xb6>
 80132a4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80132a8:	ea59 0303 	orrs.w	r3, r9, r3
 80132ac:	d102      	bne.n	80132b4 <_printf_float+0x28c>
 80132ae:	6823      	ldr	r3, [r4, #0]
 80132b0:	07d9      	lsls	r1, r3, #31
 80132b2:	d5d7      	bpl.n	8013264 <_printf_float+0x23c>
 80132b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80132b8:	4631      	mov	r1, r6
 80132ba:	4628      	mov	r0, r5
 80132bc:	47b8      	blx	r7
 80132be:	3001      	adds	r0, #1
 80132c0:	f43f af0d 	beq.w	80130de <_printf_float+0xb6>
 80132c4:	f04f 0a00 	mov.w	sl, #0
 80132c8:	f104 0b1a 	add.w	fp, r4, #26
 80132cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80132ce:	425b      	negs	r3, r3
 80132d0:	4553      	cmp	r3, sl
 80132d2:	dc01      	bgt.n	80132d8 <_printf_float+0x2b0>
 80132d4:	464b      	mov	r3, r9
 80132d6:	e793      	b.n	8013200 <_printf_float+0x1d8>
 80132d8:	2301      	movs	r3, #1
 80132da:	465a      	mov	r2, fp
 80132dc:	4631      	mov	r1, r6
 80132de:	4628      	mov	r0, r5
 80132e0:	47b8      	blx	r7
 80132e2:	3001      	adds	r0, #1
 80132e4:	f43f aefb 	beq.w	80130de <_printf_float+0xb6>
 80132e8:	f10a 0a01 	add.w	sl, sl, #1
 80132ec:	e7ee      	b.n	80132cc <_printf_float+0x2a4>
 80132ee:	bf00      	nop
 80132f0:	7fefffff 	.word	0x7fefffff
 80132f4:	08017448 	.word	0x08017448
 80132f8:	0801744c 	.word	0x0801744c
 80132fc:	08017450 	.word	0x08017450
 8013300:	08017454 	.word	0x08017454
 8013304:	08017458 	.word	0x08017458
 8013308:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801330a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801330e:	4553      	cmp	r3, sl
 8013310:	bfa8      	it	ge
 8013312:	4653      	movge	r3, sl
 8013314:	2b00      	cmp	r3, #0
 8013316:	4699      	mov	r9, r3
 8013318:	dc36      	bgt.n	8013388 <_printf_float+0x360>
 801331a:	f04f 0b00 	mov.w	fp, #0
 801331e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013322:	f104 021a 	add.w	r2, r4, #26
 8013326:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013328:	9306      	str	r3, [sp, #24]
 801332a:	eba3 0309 	sub.w	r3, r3, r9
 801332e:	455b      	cmp	r3, fp
 8013330:	dc31      	bgt.n	8013396 <_printf_float+0x36e>
 8013332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013334:	459a      	cmp	sl, r3
 8013336:	dc3a      	bgt.n	80133ae <_printf_float+0x386>
 8013338:	6823      	ldr	r3, [r4, #0]
 801333a:	07da      	lsls	r2, r3, #31
 801333c:	d437      	bmi.n	80133ae <_printf_float+0x386>
 801333e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013340:	ebaa 0903 	sub.w	r9, sl, r3
 8013344:	9b06      	ldr	r3, [sp, #24]
 8013346:	ebaa 0303 	sub.w	r3, sl, r3
 801334a:	4599      	cmp	r9, r3
 801334c:	bfa8      	it	ge
 801334e:	4699      	movge	r9, r3
 8013350:	f1b9 0f00 	cmp.w	r9, #0
 8013354:	dc33      	bgt.n	80133be <_printf_float+0x396>
 8013356:	f04f 0800 	mov.w	r8, #0
 801335a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801335e:	f104 0b1a 	add.w	fp, r4, #26
 8013362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013364:	ebaa 0303 	sub.w	r3, sl, r3
 8013368:	eba3 0309 	sub.w	r3, r3, r9
 801336c:	4543      	cmp	r3, r8
 801336e:	f77f af79 	ble.w	8013264 <_printf_float+0x23c>
 8013372:	2301      	movs	r3, #1
 8013374:	465a      	mov	r2, fp
 8013376:	4631      	mov	r1, r6
 8013378:	4628      	mov	r0, r5
 801337a:	47b8      	blx	r7
 801337c:	3001      	adds	r0, #1
 801337e:	f43f aeae 	beq.w	80130de <_printf_float+0xb6>
 8013382:	f108 0801 	add.w	r8, r8, #1
 8013386:	e7ec      	b.n	8013362 <_printf_float+0x33a>
 8013388:	4642      	mov	r2, r8
 801338a:	4631      	mov	r1, r6
 801338c:	4628      	mov	r0, r5
 801338e:	47b8      	blx	r7
 8013390:	3001      	adds	r0, #1
 8013392:	d1c2      	bne.n	801331a <_printf_float+0x2f2>
 8013394:	e6a3      	b.n	80130de <_printf_float+0xb6>
 8013396:	2301      	movs	r3, #1
 8013398:	4631      	mov	r1, r6
 801339a:	4628      	mov	r0, r5
 801339c:	9206      	str	r2, [sp, #24]
 801339e:	47b8      	blx	r7
 80133a0:	3001      	adds	r0, #1
 80133a2:	f43f ae9c 	beq.w	80130de <_printf_float+0xb6>
 80133a6:	9a06      	ldr	r2, [sp, #24]
 80133a8:	f10b 0b01 	add.w	fp, fp, #1
 80133ac:	e7bb      	b.n	8013326 <_printf_float+0x2fe>
 80133ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80133b2:	4631      	mov	r1, r6
 80133b4:	4628      	mov	r0, r5
 80133b6:	47b8      	blx	r7
 80133b8:	3001      	adds	r0, #1
 80133ba:	d1c0      	bne.n	801333e <_printf_float+0x316>
 80133bc:	e68f      	b.n	80130de <_printf_float+0xb6>
 80133be:	9a06      	ldr	r2, [sp, #24]
 80133c0:	464b      	mov	r3, r9
 80133c2:	4442      	add	r2, r8
 80133c4:	4631      	mov	r1, r6
 80133c6:	4628      	mov	r0, r5
 80133c8:	47b8      	blx	r7
 80133ca:	3001      	adds	r0, #1
 80133cc:	d1c3      	bne.n	8013356 <_printf_float+0x32e>
 80133ce:	e686      	b.n	80130de <_printf_float+0xb6>
 80133d0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80133d4:	f1ba 0f01 	cmp.w	sl, #1
 80133d8:	dc01      	bgt.n	80133de <_printf_float+0x3b6>
 80133da:	07db      	lsls	r3, r3, #31
 80133dc:	d536      	bpl.n	801344c <_printf_float+0x424>
 80133de:	2301      	movs	r3, #1
 80133e0:	4642      	mov	r2, r8
 80133e2:	4631      	mov	r1, r6
 80133e4:	4628      	mov	r0, r5
 80133e6:	47b8      	blx	r7
 80133e8:	3001      	adds	r0, #1
 80133ea:	f43f ae78 	beq.w	80130de <_printf_float+0xb6>
 80133ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80133f2:	4631      	mov	r1, r6
 80133f4:	4628      	mov	r0, r5
 80133f6:	47b8      	blx	r7
 80133f8:	3001      	adds	r0, #1
 80133fa:	f43f ae70 	beq.w	80130de <_printf_float+0xb6>
 80133fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8013402:	2200      	movs	r2, #0
 8013404:	2300      	movs	r3, #0
 8013406:	f10a 3aff 	add.w	sl, sl, #4294967295
 801340a:	f7ed fb7d 	bl	8000b08 <__aeabi_dcmpeq>
 801340e:	b9c0      	cbnz	r0, 8013442 <_printf_float+0x41a>
 8013410:	4653      	mov	r3, sl
 8013412:	f108 0201 	add.w	r2, r8, #1
 8013416:	4631      	mov	r1, r6
 8013418:	4628      	mov	r0, r5
 801341a:	47b8      	blx	r7
 801341c:	3001      	adds	r0, #1
 801341e:	d10c      	bne.n	801343a <_printf_float+0x412>
 8013420:	e65d      	b.n	80130de <_printf_float+0xb6>
 8013422:	2301      	movs	r3, #1
 8013424:	465a      	mov	r2, fp
 8013426:	4631      	mov	r1, r6
 8013428:	4628      	mov	r0, r5
 801342a:	47b8      	blx	r7
 801342c:	3001      	adds	r0, #1
 801342e:	f43f ae56 	beq.w	80130de <_printf_float+0xb6>
 8013432:	f108 0801 	add.w	r8, r8, #1
 8013436:	45d0      	cmp	r8, sl
 8013438:	dbf3      	blt.n	8013422 <_printf_float+0x3fa>
 801343a:	464b      	mov	r3, r9
 801343c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8013440:	e6df      	b.n	8013202 <_printf_float+0x1da>
 8013442:	f04f 0800 	mov.w	r8, #0
 8013446:	f104 0b1a 	add.w	fp, r4, #26
 801344a:	e7f4      	b.n	8013436 <_printf_float+0x40e>
 801344c:	2301      	movs	r3, #1
 801344e:	4642      	mov	r2, r8
 8013450:	e7e1      	b.n	8013416 <_printf_float+0x3ee>
 8013452:	2301      	movs	r3, #1
 8013454:	464a      	mov	r2, r9
 8013456:	4631      	mov	r1, r6
 8013458:	4628      	mov	r0, r5
 801345a:	47b8      	blx	r7
 801345c:	3001      	adds	r0, #1
 801345e:	f43f ae3e 	beq.w	80130de <_printf_float+0xb6>
 8013462:	f108 0801 	add.w	r8, r8, #1
 8013466:	68e3      	ldr	r3, [r4, #12]
 8013468:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801346a:	1a5b      	subs	r3, r3, r1
 801346c:	4543      	cmp	r3, r8
 801346e:	dcf0      	bgt.n	8013452 <_printf_float+0x42a>
 8013470:	e6fc      	b.n	801326c <_printf_float+0x244>
 8013472:	f04f 0800 	mov.w	r8, #0
 8013476:	f104 0919 	add.w	r9, r4, #25
 801347a:	e7f4      	b.n	8013466 <_printf_float+0x43e>

0801347c <_printf_common>:
 801347c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013480:	4616      	mov	r6, r2
 8013482:	4698      	mov	r8, r3
 8013484:	688a      	ldr	r2, [r1, #8]
 8013486:	690b      	ldr	r3, [r1, #16]
 8013488:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801348c:	4293      	cmp	r3, r2
 801348e:	bfb8      	it	lt
 8013490:	4613      	movlt	r3, r2
 8013492:	6033      	str	r3, [r6, #0]
 8013494:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013498:	4607      	mov	r7, r0
 801349a:	460c      	mov	r4, r1
 801349c:	b10a      	cbz	r2, 80134a2 <_printf_common+0x26>
 801349e:	3301      	adds	r3, #1
 80134a0:	6033      	str	r3, [r6, #0]
 80134a2:	6823      	ldr	r3, [r4, #0]
 80134a4:	0699      	lsls	r1, r3, #26
 80134a6:	bf42      	ittt	mi
 80134a8:	6833      	ldrmi	r3, [r6, #0]
 80134aa:	3302      	addmi	r3, #2
 80134ac:	6033      	strmi	r3, [r6, #0]
 80134ae:	6825      	ldr	r5, [r4, #0]
 80134b0:	f015 0506 	ands.w	r5, r5, #6
 80134b4:	d106      	bne.n	80134c4 <_printf_common+0x48>
 80134b6:	f104 0a19 	add.w	sl, r4, #25
 80134ba:	68e3      	ldr	r3, [r4, #12]
 80134bc:	6832      	ldr	r2, [r6, #0]
 80134be:	1a9b      	subs	r3, r3, r2
 80134c0:	42ab      	cmp	r3, r5
 80134c2:	dc26      	bgt.n	8013512 <_printf_common+0x96>
 80134c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80134c8:	6822      	ldr	r2, [r4, #0]
 80134ca:	3b00      	subs	r3, #0
 80134cc:	bf18      	it	ne
 80134ce:	2301      	movne	r3, #1
 80134d0:	0692      	lsls	r2, r2, #26
 80134d2:	d42b      	bmi.n	801352c <_printf_common+0xb0>
 80134d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80134d8:	4641      	mov	r1, r8
 80134da:	4638      	mov	r0, r7
 80134dc:	47c8      	blx	r9
 80134de:	3001      	adds	r0, #1
 80134e0:	d01e      	beq.n	8013520 <_printf_common+0xa4>
 80134e2:	6823      	ldr	r3, [r4, #0]
 80134e4:	6922      	ldr	r2, [r4, #16]
 80134e6:	f003 0306 	and.w	r3, r3, #6
 80134ea:	2b04      	cmp	r3, #4
 80134ec:	bf02      	ittt	eq
 80134ee:	68e5      	ldreq	r5, [r4, #12]
 80134f0:	6833      	ldreq	r3, [r6, #0]
 80134f2:	1aed      	subeq	r5, r5, r3
 80134f4:	68a3      	ldr	r3, [r4, #8]
 80134f6:	bf0c      	ite	eq
 80134f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80134fc:	2500      	movne	r5, #0
 80134fe:	4293      	cmp	r3, r2
 8013500:	bfc4      	itt	gt
 8013502:	1a9b      	subgt	r3, r3, r2
 8013504:	18ed      	addgt	r5, r5, r3
 8013506:	2600      	movs	r6, #0
 8013508:	341a      	adds	r4, #26
 801350a:	42b5      	cmp	r5, r6
 801350c:	d11a      	bne.n	8013544 <_printf_common+0xc8>
 801350e:	2000      	movs	r0, #0
 8013510:	e008      	b.n	8013524 <_printf_common+0xa8>
 8013512:	2301      	movs	r3, #1
 8013514:	4652      	mov	r2, sl
 8013516:	4641      	mov	r1, r8
 8013518:	4638      	mov	r0, r7
 801351a:	47c8      	blx	r9
 801351c:	3001      	adds	r0, #1
 801351e:	d103      	bne.n	8013528 <_printf_common+0xac>
 8013520:	f04f 30ff 	mov.w	r0, #4294967295
 8013524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013528:	3501      	adds	r5, #1
 801352a:	e7c6      	b.n	80134ba <_printf_common+0x3e>
 801352c:	18e1      	adds	r1, r4, r3
 801352e:	1c5a      	adds	r2, r3, #1
 8013530:	2030      	movs	r0, #48	@ 0x30
 8013532:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013536:	4422      	add	r2, r4
 8013538:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801353c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013540:	3302      	adds	r3, #2
 8013542:	e7c7      	b.n	80134d4 <_printf_common+0x58>
 8013544:	2301      	movs	r3, #1
 8013546:	4622      	mov	r2, r4
 8013548:	4641      	mov	r1, r8
 801354a:	4638      	mov	r0, r7
 801354c:	47c8      	blx	r9
 801354e:	3001      	adds	r0, #1
 8013550:	d0e6      	beq.n	8013520 <_printf_common+0xa4>
 8013552:	3601      	adds	r6, #1
 8013554:	e7d9      	b.n	801350a <_printf_common+0x8e>
	...

08013558 <_printf_i>:
 8013558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801355c:	7e0f      	ldrb	r7, [r1, #24]
 801355e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013560:	2f78      	cmp	r7, #120	@ 0x78
 8013562:	4691      	mov	r9, r2
 8013564:	4680      	mov	r8, r0
 8013566:	460c      	mov	r4, r1
 8013568:	469a      	mov	sl, r3
 801356a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801356e:	d807      	bhi.n	8013580 <_printf_i+0x28>
 8013570:	2f62      	cmp	r7, #98	@ 0x62
 8013572:	d80a      	bhi.n	801358a <_printf_i+0x32>
 8013574:	2f00      	cmp	r7, #0
 8013576:	f000 80d2 	beq.w	801371e <_printf_i+0x1c6>
 801357a:	2f58      	cmp	r7, #88	@ 0x58
 801357c:	f000 80b9 	beq.w	80136f2 <_printf_i+0x19a>
 8013580:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013584:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013588:	e03a      	b.n	8013600 <_printf_i+0xa8>
 801358a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801358e:	2b15      	cmp	r3, #21
 8013590:	d8f6      	bhi.n	8013580 <_printf_i+0x28>
 8013592:	a101      	add	r1, pc, #4	@ (adr r1, 8013598 <_printf_i+0x40>)
 8013594:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013598:	080135f1 	.word	0x080135f1
 801359c:	08013605 	.word	0x08013605
 80135a0:	08013581 	.word	0x08013581
 80135a4:	08013581 	.word	0x08013581
 80135a8:	08013581 	.word	0x08013581
 80135ac:	08013581 	.word	0x08013581
 80135b0:	08013605 	.word	0x08013605
 80135b4:	08013581 	.word	0x08013581
 80135b8:	08013581 	.word	0x08013581
 80135bc:	08013581 	.word	0x08013581
 80135c0:	08013581 	.word	0x08013581
 80135c4:	08013705 	.word	0x08013705
 80135c8:	0801362f 	.word	0x0801362f
 80135cc:	080136bf 	.word	0x080136bf
 80135d0:	08013581 	.word	0x08013581
 80135d4:	08013581 	.word	0x08013581
 80135d8:	08013727 	.word	0x08013727
 80135dc:	08013581 	.word	0x08013581
 80135e0:	0801362f 	.word	0x0801362f
 80135e4:	08013581 	.word	0x08013581
 80135e8:	08013581 	.word	0x08013581
 80135ec:	080136c7 	.word	0x080136c7
 80135f0:	6833      	ldr	r3, [r6, #0]
 80135f2:	1d1a      	adds	r2, r3, #4
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	6032      	str	r2, [r6, #0]
 80135f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80135fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013600:	2301      	movs	r3, #1
 8013602:	e09d      	b.n	8013740 <_printf_i+0x1e8>
 8013604:	6833      	ldr	r3, [r6, #0]
 8013606:	6820      	ldr	r0, [r4, #0]
 8013608:	1d19      	adds	r1, r3, #4
 801360a:	6031      	str	r1, [r6, #0]
 801360c:	0606      	lsls	r6, r0, #24
 801360e:	d501      	bpl.n	8013614 <_printf_i+0xbc>
 8013610:	681d      	ldr	r5, [r3, #0]
 8013612:	e003      	b.n	801361c <_printf_i+0xc4>
 8013614:	0645      	lsls	r5, r0, #25
 8013616:	d5fb      	bpl.n	8013610 <_printf_i+0xb8>
 8013618:	f9b3 5000 	ldrsh.w	r5, [r3]
 801361c:	2d00      	cmp	r5, #0
 801361e:	da03      	bge.n	8013628 <_printf_i+0xd0>
 8013620:	232d      	movs	r3, #45	@ 0x2d
 8013622:	426d      	negs	r5, r5
 8013624:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013628:	4859      	ldr	r0, [pc, #356]	@ (8013790 <_printf_i+0x238>)
 801362a:	230a      	movs	r3, #10
 801362c:	e011      	b.n	8013652 <_printf_i+0xfa>
 801362e:	6821      	ldr	r1, [r4, #0]
 8013630:	6833      	ldr	r3, [r6, #0]
 8013632:	0608      	lsls	r0, r1, #24
 8013634:	f853 5b04 	ldr.w	r5, [r3], #4
 8013638:	d402      	bmi.n	8013640 <_printf_i+0xe8>
 801363a:	0649      	lsls	r1, r1, #25
 801363c:	bf48      	it	mi
 801363e:	b2ad      	uxthmi	r5, r5
 8013640:	2f6f      	cmp	r7, #111	@ 0x6f
 8013642:	4853      	ldr	r0, [pc, #332]	@ (8013790 <_printf_i+0x238>)
 8013644:	6033      	str	r3, [r6, #0]
 8013646:	bf14      	ite	ne
 8013648:	230a      	movne	r3, #10
 801364a:	2308      	moveq	r3, #8
 801364c:	2100      	movs	r1, #0
 801364e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013652:	6866      	ldr	r6, [r4, #4]
 8013654:	60a6      	str	r6, [r4, #8]
 8013656:	2e00      	cmp	r6, #0
 8013658:	bfa2      	ittt	ge
 801365a:	6821      	ldrge	r1, [r4, #0]
 801365c:	f021 0104 	bicge.w	r1, r1, #4
 8013660:	6021      	strge	r1, [r4, #0]
 8013662:	b90d      	cbnz	r5, 8013668 <_printf_i+0x110>
 8013664:	2e00      	cmp	r6, #0
 8013666:	d04b      	beq.n	8013700 <_printf_i+0x1a8>
 8013668:	4616      	mov	r6, r2
 801366a:	fbb5 f1f3 	udiv	r1, r5, r3
 801366e:	fb03 5711 	mls	r7, r3, r1, r5
 8013672:	5dc7      	ldrb	r7, [r0, r7]
 8013674:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013678:	462f      	mov	r7, r5
 801367a:	42bb      	cmp	r3, r7
 801367c:	460d      	mov	r5, r1
 801367e:	d9f4      	bls.n	801366a <_printf_i+0x112>
 8013680:	2b08      	cmp	r3, #8
 8013682:	d10b      	bne.n	801369c <_printf_i+0x144>
 8013684:	6823      	ldr	r3, [r4, #0]
 8013686:	07df      	lsls	r7, r3, #31
 8013688:	d508      	bpl.n	801369c <_printf_i+0x144>
 801368a:	6923      	ldr	r3, [r4, #16]
 801368c:	6861      	ldr	r1, [r4, #4]
 801368e:	4299      	cmp	r1, r3
 8013690:	bfde      	ittt	le
 8013692:	2330      	movle	r3, #48	@ 0x30
 8013694:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013698:	f106 36ff 	addle.w	r6, r6, #4294967295
 801369c:	1b92      	subs	r2, r2, r6
 801369e:	6122      	str	r2, [r4, #16]
 80136a0:	f8cd a000 	str.w	sl, [sp]
 80136a4:	464b      	mov	r3, r9
 80136a6:	aa03      	add	r2, sp, #12
 80136a8:	4621      	mov	r1, r4
 80136aa:	4640      	mov	r0, r8
 80136ac:	f7ff fee6 	bl	801347c <_printf_common>
 80136b0:	3001      	adds	r0, #1
 80136b2:	d14a      	bne.n	801374a <_printf_i+0x1f2>
 80136b4:	f04f 30ff 	mov.w	r0, #4294967295
 80136b8:	b004      	add	sp, #16
 80136ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136be:	6823      	ldr	r3, [r4, #0]
 80136c0:	f043 0320 	orr.w	r3, r3, #32
 80136c4:	6023      	str	r3, [r4, #0]
 80136c6:	4833      	ldr	r0, [pc, #204]	@ (8013794 <_printf_i+0x23c>)
 80136c8:	2778      	movs	r7, #120	@ 0x78
 80136ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80136ce:	6823      	ldr	r3, [r4, #0]
 80136d0:	6831      	ldr	r1, [r6, #0]
 80136d2:	061f      	lsls	r7, r3, #24
 80136d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80136d8:	d402      	bmi.n	80136e0 <_printf_i+0x188>
 80136da:	065f      	lsls	r7, r3, #25
 80136dc:	bf48      	it	mi
 80136de:	b2ad      	uxthmi	r5, r5
 80136e0:	6031      	str	r1, [r6, #0]
 80136e2:	07d9      	lsls	r1, r3, #31
 80136e4:	bf44      	itt	mi
 80136e6:	f043 0320 	orrmi.w	r3, r3, #32
 80136ea:	6023      	strmi	r3, [r4, #0]
 80136ec:	b11d      	cbz	r5, 80136f6 <_printf_i+0x19e>
 80136ee:	2310      	movs	r3, #16
 80136f0:	e7ac      	b.n	801364c <_printf_i+0xf4>
 80136f2:	4827      	ldr	r0, [pc, #156]	@ (8013790 <_printf_i+0x238>)
 80136f4:	e7e9      	b.n	80136ca <_printf_i+0x172>
 80136f6:	6823      	ldr	r3, [r4, #0]
 80136f8:	f023 0320 	bic.w	r3, r3, #32
 80136fc:	6023      	str	r3, [r4, #0]
 80136fe:	e7f6      	b.n	80136ee <_printf_i+0x196>
 8013700:	4616      	mov	r6, r2
 8013702:	e7bd      	b.n	8013680 <_printf_i+0x128>
 8013704:	6833      	ldr	r3, [r6, #0]
 8013706:	6825      	ldr	r5, [r4, #0]
 8013708:	6961      	ldr	r1, [r4, #20]
 801370a:	1d18      	adds	r0, r3, #4
 801370c:	6030      	str	r0, [r6, #0]
 801370e:	062e      	lsls	r6, r5, #24
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	d501      	bpl.n	8013718 <_printf_i+0x1c0>
 8013714:	6019      	str	r1, [r3, #0]
 8013716:	e002      	b.n	801371e <_printf_i+0x1c6>
 8013718:	0668      	lsls	r0, r5, #25
 801371a:	d5fb      	bpl.n	8013714 <_printf_i+0x1bc>
 801371c:	8019      	strh	r1, [r3, #0]
 801371e:	2300      	movs	r3, #0
 8013720:	6123      	str	r3, [r4, #16]
 8013722:	4616      	mov	r6, r2
 8013724:	e7bc      	b.n	80136a0 <_printf_i+0x148>
 8013726:	6833      	ldr	r3, [r6, #0]
 8013728:	1d1a      	adds	r2, r3, #4
 801372a:	6032      	str	r2, [r6, #0]
 801372c:	681e      	ldr	r6, [r3, #0]
 801372e:	6862      	ldr	r2, [r4, #4]
 8013730:	2100      	movs	r1, #0
 8013732:	4630      	mov	r0, r6
 8013734:	f7ec fd6c 	bl	8000210 <memchr>
 8013738:	b108      	cbz	r0, 801373e <_printf_i+0x1e6>
 801373a:	1b80      	subs	r0, r0, r6
 801373c:	6060      	str	r0, [r4, #4]
 801373e:	6863      	ldr	r3, [r4, #4]
 8013740:	6123      	str	r3, [r4, #16]
 8013742:	2300      	movs	r3, #0
 8013744:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013748:	e7aa      	b.n	80136a0 <_printf_i+0x148>
 801374a:	6923      	ldr	r3, [r4, #16]
 801374c:	4632      	mov	r2, r6
 801374e:	4649      	mov	r1, r9
 8013750:	4640      	mov	r0, r8
 8013752:	47d0      	blx	sl
 8013754:	3001      	adds	r0, #1
 8013756:	d0ad      	beq.n	80136b4 <_printf_i+0x15c>
 8013758:	6823      	ldr	r3, [r4, #0]
 801375a:	079b      	lsls	r3, r3, #30
 801375c:	d413      	bmi.n	8013786 <_printf_i+0x22e>
 801375e:	68e0      	ldr	r0, [r4, #12]
 8013760:	9b03      	ldr	r3, [sp, #12]
 8013762:	4298      	cmp	r0, r3
 8013764:	bfb8      	it	lt
 8013766:	4618      	movlt	r0, r3
 8013768:	e7a6      	b.n	80136b8 <_printf_i+0x160>
 801376a:	2301      	movs	r3, #1
 801376c:	4632      	mov	r2, r6
 801376e:	4649      	mov	r1, r9
 8013770:	4640      	mov	r0, r8
 8013772:	47d0      	blx	sl
 8013774:	3001      	adds	r0, #1
 8013776:	d09d      	beq.n	80136b4 <_printf_i+0x15c>
 8013778:	3501      	adds	r5, #1
 801377a:	68e3      	ldr	r3, [r4, #12]
 801377c:	9903      	ldr	r1, [sp, #12]
 801377e:	1a5b      	subs	r3, r3, r1
 8013780:	42ab      	cmp	r3, r5
 8013782:	dcf2      	bgt.n	801376a <_printf_i+0x212>
 8013784:	e7eb      	b.n	801375e <_printf_i+0x206>
 8013786:	2500      	movs	r5, #0
 8013788:	f104 0619 	add.w	r6, r4, #25
 801378c:	e7f5      	b.n	801377a <_printf_i+0x222>
 801378e:	bf00      	nop
 8013790:	0801745a 	.word	0x0801745a
 8013794:	0801746b 	.word	0x0801746b

08013798 <std>:
 8013798:	2300      	movs	r3, #0
 801379a:	b510      	push	{r4, lr}
 801379c:	4604      	mov	r4, r0
 801379e:	e9c0 3300 	strd	r3, r3, [r0]
 80137a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80137a6:	6083      	str	r3, [r0, #8]
 80137a8:	8181      	strh	r1, [r0, #12]
 80137aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80137ac:	81c2      	strh	r2, [r0, #14]
 80137ae:	6183      	str	r3, [r0, #24]
 80137b0:	4619      	mov	r1, r3
 80137b2:	2208      	movs	r2, #8
 80137b4:	305c      	adds	r0, #92	@ 0x5c
 80137b6:	f000 f926 	bl	8013a06 <memset>
 80137ba:	4b0d      	ldr	r3, [pc, #52]	@ (80137f0 <std+0x58>)
 80137bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80137be:	4b0d      	ldr	r3, [pc, #52]	@ (80137f4 <std+0x5c>)
 80137c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80137c2:	4b0d      	ldr	r3, [pc, #52]	@ (80137f8 <std+0x60>)
 80137c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80137c6:	4b0d      	ldr	r3, [pc, #52]	@ (80137fc <std+0x64>)
 80137c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80137ca:	4b0d      	ldr	r3, [pc, #52]	@ (8013800 <std+0x68>)
 80137cc:	6224      	str	r4, [r4, #32]
 80137ce:	429c      	cmp	r4, r3
 80137d0:	d006      	beq.n	80137e0 <std+0x48>
 80137d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80137d6:	4294      	cmp	r4, r2
 80137d8:	d002      	beq.n	80137e0 <std+0x48>
 80137da:	33d0      	adds	r3, #208	@ 0xd0
 80137dc:	429c      	cmp	r4, r3
 80137de:	d105      	bne.n	80137ec <std+0x54>
 80137e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80137e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80137e8:	f000 b9e0 	b.w	8013bac <__retarget_lock_init_recursive>
 80137ec:	bd10      	pop	{r4, pc}
 80137ee:	bf00      	nop
 80137f0:	08013981 	.word	0x08013981
 80137f4:	080139a3 	.word	0x080139a3
 80137f8:	080139db 	.word	0x080139db
 80137fc:	080139ff 	.word	0x080139ff
 8013800:	200069b8 	.word	0x200069b8

08013804 <stdio_exit_handler>:
 8013804:	4a02      	ldr	r2, [pc, #8]	@ (8013810 <stdio_exit_handler+0xc>)
 8013806:	4903      	ldr	r1, [pc, #12]	@ (8013814 <stdio_exit_handler+0x10>)
 8013808:	4803      	ldr	r0, [pc, #12]	@ (8013818 <stdio_exit_handler+0x14>)
 801380a:	f000 b869 	b.w	80138e0 <_fwalk_sglue>
 801380e:	bf00      	nop
 8013810:	20000028 	.word	0x20000028
 8013814:	080157a9 	.word	0x080157a9
 8013818:	20000038 	.word	0x20000038

0801381c <cleanup_stdio>:
 801381c:	6841      	ldr	r1, [r0, #4]
 801381e:	4b0c      	ldr	r3, [pc, #48]	@ (8013850 <cleanup_stdio+0x34>)
 8013820:	4299      	cmp	r1, r3
 8013822:	b510      	push	{r4, lr}
 8013824:	4604      	mov	r4, r0
 8013826:	d001      	beq.n	801382c <cleanup_stdio+0x10>
 8013828:	f001 ffbe 	bl	80157a8 <_fflush_r>
 801382c:	68a1      	ldr	r1, [r4, #8]
 801382e:	4b09      	ldr	r3, [pc, #36]	@ (8013854 <cleanup_stdio+0x38>)
 8013830:	4299      	cmp	r1, r3
 8013832:	d002      	beq.n	801383a <cleanup_stdio+0x1e>
 8013834:	4620      	mov	r0, r4
 8013836:	f001 ffb7 	bl	80157a8 <_fflush_r>
 801383a:	68e1      	ldr	r1, [r4, #12]
 801383c:	4b06      	ldr	r3, [pc, #24]	@ (8013858 <cleanup_stdio+0x3c>)
 801383e:	4299      	cmp	r1, r3
 8013840:	d004      	beq.n	801384c <cleanup_stdio+0x30>
 8013842:	4620      	mov	r0, r4
 8013844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013848:	f001 bfae 	b.w	80157a8 <_fflush_r>
 801384c:	bd10      	pop	{r4, pc}
 801384e:	bf00      	nop
 8013850:	200069b8 	.word	0x200069b8
 8013854:	20006a20 	.word	0x20006a20
 8013858:	20006a88 	.word	0x20006a88

0801385c <global_stdio_init.part.0>:
 801385c:	b510      	push	{r4, lr}
 801385e:	4b0b      	ldr	r3, [pc, #44]	@ (801388c <global_stdio_init.part.0+0x30>)
 8013860:	4c0b      	ldr	r4, [pc, #44]	@ (8013890 <global_stdio_init.part.0+0x34>)
 8013862:	4a0c      	ldr	r2, [pc, #48]	@ (8013894 <global_stdio_init.part.0+0x38>)
 8013864:	601a      	str	r2, [r3, #0]
 8013866:	4620      	mov	r0, r4
 8013868:	2200      	movs	r2, #0
 801386a:	2104      	movs	r1, #4
 801386c:	f7ff ff94 	bl	8013798 <std>
 8013870:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013874:	2201      	movs	r2, #1
 8013876:	2109      	movs	r1, #9
 8013878:	f7ff ff8e 	bl	8013798 <std>
 801387c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013880:	2202      	movs	r2, #2
 8013882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013886:	2112      	movs	r1, #18
 8013888:	f7ff bf86 	b.w	8013798 <std>
 801388c:	20006af0 	.word	0x20006af0
 8013890:	200069b8 	.word	0x200069b8
 8013894:	08013805 	.word	0x08013805

08013898 <__sfp_lock_acquire>:
 8013898:	4801      	ldr	r0, [pc, #4]	@ (80138a0 <__sfp_lock_acquire+0x8>)
 801389a:	f000 b988 	b.w	8013bae <__retarget_lock_acquire_recursive>
 801389e:	bf00      	nop
 80138a0:	20006af9 	.word	0x20006af9

080138a4 <__sfp_lock_release>:
 80138a4:	4801      	ldr	r0, [pc, #4]	@ (80138ac <__sfp_lock_release+0x8>)
 80138a6:	f000 b983 	b.w	8013bb0 <__retarget_lock_release_recursive>
 80138aa:	bf00      	nop
 80138ac:	20006af9 	.word	0x20006af9

080138b0 <__sinit>:
 80138b0:	b510      	push	{r4, lr}
 80138b2:	4604      	mov	r4, r0
 80138b4:	f7ff fff0 	bl	8013898 <__sfp_lock_acquire>
 80138b8:	6a23      	ldr	r3, [r4, #32]
 80138ba:	b11b      	cbz	r3, 80138c4 <__sinit+0x14>
 80138bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80138c0:	f7ff bff0 	b.w	80138a4 <__sfp_lock_release>
 80138c4:	4b04      	ldr	r3, [pc, #16]	@ (80138d8 <__sinit+0x28>)
 80138c6:	6223      	str	r3, [r4, #32]
 80138c8:	4b04      	ldr	r3, [pc, #16]	@ (80138dc <__sinit+0x2c>)
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d1f5      	bne.n	80138bc <__sinit+0xc>
 80138d0:	f7ff ffc4 	bl	801385c <global_stdio_init.part.0>
 80138d4:	e7f2      	b.n	80138bc <__sinit+0xc>
 80138d6:	bf00      	nop
 80138d8:	0801381d 	.word	0x0801381d
 80138dc:	20006af0 	.word	0x20006af0

080138e0 <_fwalk_sglue>:
 80138e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80138e4:	4607      	mov	r7, r0
 80138e6:	4688      	mov	r8, r1
 80138e8:	4614      	mov	r4, r2
 80138ea:	2600      	movs	r6, #0
 80138ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80138f0:	f1b9 0901 	subs.w	r9, r9, #1
 80138f4:	d505      	bpl.n	8013902 <_fwalk_sglue+0x22>
 80138f6:	6824      	ldr	r4, [r4, #0]
 80138f8:	2c00      	cmp	r4, #0
 80138fa:	d1f7      	bne.n	80138ec <_fwalk_sglue+0xc>
 80138fc:	4630      	mov	r0, r6
 80138fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013902:	89ab      	ldrh	r3, [r5, #12]
 8013904:	2b01      	cmp	r3, #1
 8013906:	d907      	bls.n	8013918 <_fwalk_sglue+0x38>
 8013908:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801390c:	3301      	adds	r3, #1
 801390e:	d003      	beq.n	8013918 <_fwalk_sglue+0x38>
 8013910:	4629      	mov	r1, r5
 8013912:	4638      	mov	r0, r7
 8013914:	47c0      	blx	r8
 8013916:	4306      	orrs	r6, r0
 8013918:	3568      	adds	r5, #104	@ 0x68
 801391a:	e7e9      	b.n	80138f0 <_fwalk_sglue+0x10>

0801391c <iprintf>:
 801391c:	b40f      	push	{r0, r1, r2, r3}
 801391e:	b507      	push	{r0, r1, r2, lr}
 8013920:	4906      	ldr	r1, [pc, #24]	@ (801393c <iprintf+0x20>)
 8013922:	ab04      	add	r3, sp, #16
 8013924:	6808      	ldr	r0, [r1, #0]
 8013926:	f853 2b04 	ldr.w	r2, [r3], #4
 801392a:	6881      	ldr	r1, [r0, #8]
 801392c:	9301      	str	r3, [sp, #4]
 801392e:	f001 fd9f 	bl	8015470 <_vfiprintf_r>
 8013932:	b003      	add	sp, #12
 8013934:	f85d eb04 	ldr.w	lr, [sp], #4
 8013938:	b004      	add	sp, #16
 801393a:	4770      	bx	lr
 801393c:	20000034 	.word	0x20000034

08013940 <siprintf>:
 8013940:	b40e      	push	{r1, r2, r3}
 8013942:	b500      	push	{lr}
 8013944:	b09c      	sub	sp, #112	@ 0x70
 8013946:	ab1d      	add	r3, sp, #116	@ 0x74
 8013948:	9002      	str	r0, [sp, #8]
 801394a:	9006      	str	r0, [sp, #24]
 801394c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013950:	4809      	ldr	r0, [pc, #36]	@ (8013978 <siprintf+0x38>)
 8013952:	9107      	str	r1, [sp, #28]
 8013954:	9104      	str	r1, [sp, #16]
 8013956:	4909      	ldr	r1, [pc, #36]	@ (801397c <siprintf+0x3c>)
 8013958:	f853 2b04 	ldr.w	r2, [r3], #4
 801395c:	9105      	str	r1, [sp, #20]
 801395e:	6800      	ldr	r0, [r0, #0]
 8013960:	9301      	str	r3, [sp, #4]
 8013962:	a902      	add	r1, sp, #8
 8013964:	f001 fc5e 	bl	8015224 <_svfiprintf_r>
 8013968:	9b02      	ldr	r3, [sp, #8]
 801396a:	2200      	movs	r2, #0
 801396c:	701a      	strb	r2, [r3, #0]
 801396e:	b01c      	add	sp, #112	@ 0x70
 8013970:	f85d eb04 	ldr.w	lr, [sp], #4
 8013974:	b003      	add	sp, #12
 8013976:	4770      	bx	lr
 8013978:	20000034 	.word	0x20000034
 801397c:	ffff0208 	.word	0xffff0208

08013980 <__sread>:
 8013980:	b510      	push	{r4, lr}
 8013982:	460c      	mov	r4, r1
 8013984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013988:	f000 f8c2 	bl	8013b10 <_read_r>
 801398c:	2800      	cmp	r0, #0
 801398e:	bfab      	itete	ge
 8013990:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013992:	89a3      	ldrhlt	r3, [r4, #12]
 8013994:	181b      	addge	r3, r3, r0
 8013996:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801399a:	bfac      	ite	ge
 801399c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801399e:	81a3      	strhlt	r3, [r4, #12]
 80139a0:	bd10      	pop	{r4, pc}

080139a2 <__swrite>:
 80139a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139a6:	461f      	mov	r7, r3
 80139a8:	898b      	ldrh	r3, [r1, #12]
 80139aa:	05db      	lsls	r3, r3, #23
 80139ac:	4605      	mov	r5, r0
 80139ae:	460c      	mov	r4, r1
 80139b0:	4616      	mov	r6, r2
 80139b2:	d505      	bpl.n	80139c0 <__swrite+0x1e>
 80139b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80139b8:	2302      	movs	r3, #2
 80139ba:	2200      	movs	r2, #0
 80139bc:	f000 f896 	bl	8013aec <_lseek_r>
 80139c0:	89a3      	ldrh	r3, [r4, #12]
 80139c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80139c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80139ca:	81a3      	strh	r3, [r4, #12]
 80139cc:	4632      	mov	r2, r6
 80139ce:	463b      	mov	r3, r7
 80139d0:	4628      	mov	r0, r5
 80139d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80139d6:	f000 b8ad 	b.w	8013b34 <_write_r>

080139da <__sseek>:
 80139da:	b510      	push	{r4, lr}
 80139dc:	460c      	mov	r4, r1
 80139de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80139e2:	f000 f883 	bl	8013aec <_lseek_r>
 80139e6:	1c43      	adds	r3, r0, #1
 80139e8:	89a3      	ldrh	r3, [r4, #12]
 80139ea:	bf15      	itete	ne
 80139ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80139ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80139f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80139f6:	81a3      	strheq	r3, [r4, #12]
 80139f8:	bf18      	it	ne
 80139fa:	81a3      	strhne	r3, [r4, #12]
 80139fc:	bd10      	pop	{r4, pc}

080139fe <__sclose>:
 80139fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a02:	f000 b80d 	b.w	8013a20 <_close_r>

08013a06 <memset>:
 8013a06:	4402      	add	r2, r0
 8013a08:	4603      	mov	r3, r0
 8013a0a:	4293      	cmp	r3, r2
 8013a0c:	d100      	bne.n	8013a10 <memset+0xa>
 8013a0e:	4770      	bx	lr
 8013a10:	f803 1b01 	strb.w	r1, [r3], #1
 8013a14:	e7f9      	b.n	8013a0a <memset+0x4>
	...

08013a18 <_localeconv_r>:
 8013a18:	4800      	ldr	r0, [pc, #0]	@ (8013a1c <_localeconv_r+0x4>)
 8013a1a:	4770      	bx	lr
 8013a1c:	20000174 	.word	0x20000174

08013a20 <_close_r>:
 8013a20:	b538      	push	{r3, r4, r5, lr}
 8013a22:	4d06      	ldr	r5, [pc, #24]	@ (8013a3c <_close_r+0x1c>)
 8013a24:	2300      	movs	r3, #0
 8013a26:	4604      	mov	r4, r0
 8013a28:	4608      	mov	r0, r1
 8013a2a:	602b      	str	r3, [r5, #0]
 8013a2c:	f7f0 fed0 	bl	80047d0 <_close>
 8013a30:	1c43      	adds	r3, r0, #1
 8013a32:	d102      	bne.n	8013a3a <_close_r+0x1a>
 8013a34:	682b      	ldr	r3, [r5, #0]
 8013a36:	b103      	cbz	r3, 8013a3a <_close_r+0x1a>
 8013a38:	6023      	str	r3, [r4, #0]
 8013a3a:	bd38      	pop	{r3, r4, r5, pc}
 8013a3c:	20006af4 	.word	0x20006af4

08013a40 <_reclaim_reent>:
 8013a40:	4b29      	ldr	r3, [pc, #164]	@ (8013ae8 <_reclaim_reent+0xa8>)
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	4283      	cmp	r3, r0
 8013a46:	b570      	push	{r4, r5, r6, lr}
 8013a48:	4604      	mov	r4, r0
 8013a4a:	d04b      	beq.n	8013ae4 <_reclaim_reent+0xa4>
 8013a4c:	69c3      	ldr	r3, [r0, #28]
 8013a4e:	b1ab      	cbz	r3, 8013a7c <_reclaim_reent+0x3c>
 8013a50:	68db      	ldr	r3, [r3, #12]
 8013a52:	b16b      	cbz	r3, 8013a70 <_reclaim_reent+0x30>
 8013a54:	2500      	movs	r5, #0
 8013a56:	69e3      	ldr	r3, [r4, #28]
 8013a58:	68db      	ldr	r3, [r3, #12]
 8013a5a:	5959      	ldr	r1, [r3, r5]
 8013a5c:	2900      	cmp	r1, #0
 8013a5e:	d13b      	bne.n	8013ad8 <_reclaim_reent+0x98>
 8013a60:	3504      	adds	r5, #4
 8013a62:	2d80      	cmp	r5, #128	@ 0x80
 8013a64:	d1f7      	bne.n	8013a56 <_reclaim_reent+0x16>
 8013a66:	69e3      	ldr	r3, [r4, #28]
 8013a68:	4620      	mov	r0, r4
 8013a6a:	68d9      	ldr	r1, [r3, #12]
 8013a6c:	f000 fefc 	bl	8014868 <_free_r>
 8013a70:	69e3      	ldr	r3, [r4, #28]
 8013a72:	6819      	ldr	r1, [r3, #0]
 8013a74:	b111      	cbz	r1, 8013a7c <_reclaim_reent+0x3c>
 8013a76:	4620      	mov	r0, r4
 8013a78:	f000 fef6 	bl	8014868 <_free_r>
 8013a7c:	6961      	ldr	r1, [r4, #20]
 8013a7e:	b111      	cbz	r1, 8013a86 <_reclaim_reent+0x46>
 8013a80:	4620      	mov	r0, r4
 8013a82:	f000 fef1 	bl	8014868 <_free_r>
 8013a86:	69e1      	ldr	r1, [r4, #28]
 8013a88:	b111      	cbz	r1, 8013a90 <_reclaim_reent+0x50>
 8013a8a:	4620      	mov	r0, r4
 8013a8c:	f000 feec 	bl	8014868 <_free_r>
 8013a90:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8013a92:	b111      	cbz	r1, 8013a9a <_reclaim_reent+0x5a>
 8013a94:	4620      	mov	r0, r4
 8013a96:	f000 fee7 	bl	8014868 <_free_r>
 8013a9a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013a9c:	b111      	cbz	r1, 8013aa4 <_reclaim_reent+0x64>
 8013a9e:	4620      	mov	r0, r4
 8013aa0:	f000 fee2 	bl	8014868 <_free_r>
 8013aa4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8013aa6:	b111      	cbz	r1, 8013aae <_reclaim_reent+0x6e>
 8013aa8:	4620      	mov	r0, r4
 8013aaa:	f000 fedd 	bl	8014868 <_free_r>
 8013aae:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8013ab0:	b111      	cbz	r1, 8013ab8 <_reclaim_reent+0x78>
 8013ab2:	4620      	mov	r0, r4
 8013ab4:	f000 fed8 	bl	8014868 <_free_r>
 8013ab8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8013aba:	b111      	cbz	r1, 8013ac2 <_reclaim_reent+0x82>
 8013abc:	4620      	mov	r0, r4
 8013abe:	f000 fed3 	bl	8014868 <_free_r>
 8013ac2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8013ac4:	b111      	cbz	r1, 8013acc <_reclaim_reent+0x8c>
 8013ac6:	4620      	mov	r0, r4
 8013ac8:	f000 fece 	bl	8014868 <_free_r>
 8013acc:	6a23      	ldr	r3, [r4, #32]
 8013ace:	b14b      	cbz	r3, 8013ae4 <_reclaim_reent+0xa4>
 8013ad0:	4620      	mov	r0, r4
 8013ad2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ad6:	4718      	bx	r3
 8013ad8:	680e      	ldr	r6, [r1, #0]
 8013ada:	4620      	mov	r0, r4
 8013adc:	f000 fec4 	bl	8014868 <_free_r>
 8013ae0:	4631      	mov	r1, r6
 8013ae2:	e7bb      	b.n	8013a5c <_reclaim_reent+0x1c>
 8013ae4:	bd70      	pop	{r4, r5, r6, pc}
 8013ae6:	bf00      	nop
 8013ae8:	20000034 	.word	0x20000034

08013aec <_lseek_r>:
 8013aec:	b538      	push	{r3, r4, r5, lr}
 8013aee:	4d07      	ldr	r5, [pc, #28]	@ (8013b0c <_lseek_r+0x20>)
 8013af0:	4604      	mov	r4, r0
 8013af2:	4608      	mov	r0, r1
 8013af4:	4611      	mov	r1, r2
 8013af6:	2200      	movs	r2, #0
 8013af8:	602a      	str	r2, [r5, #0]
 8013afa:	461a      	mov	r2, r3
 8013afc:	f7f0 fe8f 	bl	800481e <_lseek>
 8013b00:	1c43      	adds	r3, r0, #1
 8013b02:	d102      	bne.n	8013b0a <_lseek_r+0x1e>
 8013b04:	682b      	ldr	r3, [r5, #0]
 8013b06:	b103      	cbz	r3, 8013b0a <_lseek_r+0x1e>
 8013b08:	6023      	str	r3, [r4, #0]
 8013b0a:	bd38      	pop	{r3, r4, r5, pc}
 8013b0c:	20006af4 	.word	0x20006af4

08013b10 <_read_r>:
 8013b10:	b538      	push	{r3, r4, r5, lr}
 8013b12:	4d07      	ldr	r5, [pc, #28]	@ (8013b30 <_read_r+0x20>)
 8013b14:	4604      	mov	r4, r0
 8013b16:	4608      	mov	r0, r1
 8013b18:	4611      	mov	r1, r2
 8013b1a:	2200      	movs	r2, #0
 8013b1c:	602a      	str	r2, [r5, #0]
 8013b1e:	461a      	mov	r2, r3
 8013b20:	f7f0 fe39 	bl	8004796 <_read>
 8013b24:	1c43      	adds	r3, r0, #1
 8013b26:	d102      	bne.n	8013b2e <_read_r+0x1e>
 8013b28:	682b      	ldr	r3, [r5, #0]
 8013b2a:	b103      	cbz	r3, 8013b2e <_read_r+0x1e>
 8013b2c:	6023      	str	r3, [r4, #0]
 8013b2e:	bd38      	pop	{r3, r4, r5, pc}
 8013b30:	20006af4 	.word	0x20006af4

08013b34 <_write_r>:
 8013b34:	b538      	push	{r3, r4, r5, lr}
 8013b36:	4d07      	ldr	r5, [pc, #28]	@ (8013b54 <_write_r+0x20>)
 8013b38:	4604      	mov	r4, r0
 8013b3a:	4608      	mov	r0, r1
 8013b3c:	4611      	mov	r1, r2
 8013b3e:	2200      	movs	r2, #0
 8013b40:	602a      	str	r2, [r5, #0]
 8013b42:	461a      	mov	r2, r3
 8013b44:	f7ee fd36 	bl	80025b4 <_write>
 8013b48:	1c43      	adds	r3, r0, #1
 8013b4a:	d102      	bne.n	8013b52 <_write_r+0x1e>
 8013b4c:	682b      	ldr	r3, [r5, #0]
 8013b4e:	b103      	cbz	r3, 8013b52 <_write_r+0x1e>
 8013b50:	6023      	str	r3, [r4, #0]
 8013b52:	bd38      	pop	{r3, r4, r5, pc}
 8013b54:	20006af4 	.word	0x20006af4

08013b58 <__errno>:
 8013b58:	4b01      	ldr	r3, [pc, #4]	@ (8013b60 <__errno+0x8>)
 8013b5a:	6818      	ldr	r0, [r3, #0]
 8013b5c:	4770      	bx	lr
 8013b5e:	bf00      	nop
 8013b60:	20000034 	.word	0x20000034

08013b64 <__libc_init_array>:
 8013b64:	b570      	push	{r4, r5, r6, lr}
 8013b66:	4d0d      	ldr	r5, [pc, #52]	@ (8013b9c <__libc_init_array+0x38>)
 8013b68:	4c0d      	ldr	r4, [pc, #52]	@ (8013ba0 <__libc_init_array+0x3c>)
 8013b6a:	1b64      	subs	r4, r4, r5
 8013b6c:	10a4      	asrs	r4, r4, #2
 8013b6e:	2600      	movs	r6, #0
 8013b70:	42a6      	cmp	r6, r4
 8013b72:	d109      	bne.n	8013b88 <__libc_init_array+0x24>
 8013b74:	4d0b      	ldr	r5, [pc, #44]	@ (8013ba4 <__libc_init_array+0x40>)
 8013b76:	4c0c      	ldr	r4, [pc, #48]	@ (8013ba8 <__libc_init_array+0x44>)
 8013b78:	f003 f8e0 	bl	8016d3c <_init>
 8013b7c:	1b64      	subs	r4, r4, r5
 8013b7e:	10a4      	asrs	r4, r4, #2
 8013b80:	2600      	movs	r6, #0
 8013b82:	42a6      	cmp	r6, r4
 8013b84:	d105      	bne.n	8013b92 <__libc_init_array+0x2e>
 8013b86:	bd70      	pop	{r4, r5, r6, pc}
 8013b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8013b8c:	4798      	blx	r3
 8013b8e:	3601      	adds	r6, #1
 8013b90:	e7ee      	b.n	8013b70 <__libc_init_array+0xc>
 8013b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8013b96:	4798      	blx	r3
 8013b98:	3601      	adds	r6, #1
 8013b9a:	e7f2      	b.n	8013b82 <__libc_init_array+0x1e>
 8013b9c:	08017bb0 	.word	0x08017bb0
 8013ba0:	08017bb0 	.word	0x08017bb0
 8013ba4:	08017bb0 	.word	0x08017bb0
 8013ba8:	08017bb4 	.word	0x08017bb4

08013bac <__retarget_lock_init_recursive>:
 8013bac:	4770      	bx	lr

08013bae <__retarget_lock_acquire_recursive>:
 8013bae:	4770      	bx	lr

08013bb0 <__retarget_lock_release_recursive>:
 8013bb0:	4770      	bx	lr

08013bb2 <memcpy>:
 8013bb2:	440a      	add	r2, r1
 8013bb4:	4291      	cmp	r1, r2
 8013bb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8013bba:	d100      	bne.n	8013bbe <memcpy+0xc>
 8013bbc:	4770      	bx	lr
 8013bbe:	b510      	push	{r4, lr}
 8013bc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013bc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013bc8:	4291      	cmp	r1, r2
 8013bca:	d1f9      	bne.n	8013bc0 <memcpy+0xe>
 8013bcc:	bd10      	pop	{r4, pc}

08013bce <quorem>:
 8013bce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bd2:	6903      	ldr	r3, [r0, #16]
 8013bd4:	690c      	ldr	r4, [r1, #16]
 8013bd6:	42a3      	cmp	r3, r4
 8013bd8:	4607      	mov	r7, r0
 8013bda:	db7e      	blt.n	8013cda <quorem+0x10c>
 8013bdc:	3c01      	subs	r4, #1
 8013bde:	f101 0814 	add.w	r8, r1, #20
 8013be2:	00a3      	lsls	r3, r4, #2
 8013be4:	f100 0514 	add.w	r5, r0, #20
 8013be8:	9300      	str	r3, [sp, #0]
 8013bea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013bee:	9301      	str	r3, [sp, #4]
 8013bf0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013bf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013bf8:	3301      	adds	r3, #1
 8013bfa:	429a      	cmp	r2, r3
 8013bfc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013c00:	fbb2 f6f3 	udiv	r6, r2, r3
 8013c04:	d32e      	bcc.n	8013c64 <quorem+0x96>
 8013c06:	f04f 0a00 	mov.w	sl, #0
 8013c0a:	46c4      	mov	ip, r8
 8013c0c:	46ae      	mov	lr, r5
 8013c0e:	46d3      	mov	fp, sl
 8013c10:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013c14:	b298      	uxth	r0, r3
 8013c16:	fb06 a000 	mla	r0, r6, r0, sl
 8013c1a:	0c02      	lsrs	r2, r0, #16
 8013c1c:	0c1b      	lsrs	r3, r3, #16
 8013c1e:	fb06 2303 	mla	r3, r6, r3, r2
 8013c22:	f8de 2000 	ldr.w	r2, [lr]
 8013c26:	b280      	uxth	r0, r0
 8013c28:	b292      	uxth	r2, r2
 8013c2a:	1a12      	subs	r2, r2, r0
 8013c2c:	445a      	add	r2, fp
 8013c2e:	f8de 0000 	ldr.w	r0, [lr]
 8013c32:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013c36:	b29b      	uxth	r3, r3
 8013c38:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8013c3c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8013c40:	b292      	uxth	r2, r2
 8013c42:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8013c46:	45e1      	cmp	r9, ip
 8013c48:	f84e 2b04 	str.w	r2, [lr], #4
 8013c4c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8013c50:	d2de      	bcs.n	8013c10 <quorem+0x42>
 8013c52:	9b00      	ldr	r3, [sp, #0]
 8013c54:	58eb      	ldr	r3, [r5, r3]
 8013c56:	b92b      	cbnz	r3, 8013c64 <quorem+0x96>
 8013c58:	9b01      	ldr	r3, [sp, #4]
 8013c5a:	3b04      	subs	r3, #4
 8013c5c:	429d      	cmp	r5, r3
 8013c5e:	461a      	mov	r2, r3
 8013c60:	d32f      	bcc.n	8013cc2 <quorem+0xf4>
 8013c62:	613c      	str	r4, [r7, #16]
 8013c64:	4638      	mov	r0, r7
 8013c66:	f001 f979 	bl	8014f5c <__mcmp>
 8013c6a:	2800      	cmp	r0, #0
 8013c6c:	db25      	blt.n	8013cba <quorem+0xec>
 8013c6e:	4629      	mov	r1, r5
 8013c70:	2000      	movs	r0, #0
 8013c72:	f858 2b04 	ldr.w	r2, [r8], #4
 8013c76:	f8d1 c000 	ldr.w	ip, [r1]
 8013c7a:	fa1f fe82 	uxth.w	lr, r2
 8013c7e:	fa1f f38c 	uxth.w	r3, ip
 8013c82:	eba3 030e 	sub.w	r3, r3, lr
 8013c86:	4403      	add	r3, r0
 8013c88:	0c12      	lsrs	r2, r2, #16
 8013c8a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8013c8e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8013c92:	b29b      	uxth	r3, r3
 8013c94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013c98:	45c1      	cmp	r9, r8
 8013c9a:	f841 3b04 	str.w	r3, [r1], #4
 8013c9e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013ca2:	d2e6      	bcs.n	8013c72 <quorem+0xa4>
 8013ca4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013ca8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013cac:	b922      	cbnz	r2, 8013cb8 <quorem+0xea>
 8013cae:	3b04      	subs	r3, #4
 8013cb0:	429d      	cmp	r5, r3
 8013cb2:	461a      	mov	r2, r3
 8013cb4:	d30b      	bcc.n	8013cce <quorem+0x100>
 8013cb6:	613c      	str	r4, [r7, #16]
 8013cb8:	3601      	adds	r6, #1
 8013cba:	4630      	mov	r0, r6
 8013cbc:	b003      	add	sp, #12
 8013cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cc2:	6812      	ldr	r2, [r2, #0]
 8013cc4:	3b04      	subs	r3, #4
 8013cc6:	2a00      	cmp	r2, #0
 8013cc8:	d1cb      	bne.n	8013c62 <quorem+0x94>
 8013cca:	3c01      	subs	r4, #1
 8013ccc:	e7c6      	b.n	8013c5c <quorem+0x8e>
 8013cce:	6812      	ldr	r2, [r2, #0]
 8013cd0:	3b04      	subs	r3, #4
 8013cd2:	2a00      	cmp	r2, #0
 8013cd4:	d1ef      	bne.n	8013cb6 <quorem+0xe8>
 8013cd6:	3c01      	subs	r4, #1
 8013cd8:	e7ea      	b.n	8013cb0 <quorem+0xe2>
 8013cda:	2000      	movs	r0, #0
 8013cdc:	e7ee      	b.n	8013cbc <quorem+0xee>
	...

08013ce0 <_dtoa_r>:
 8013ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ce4:	69c7      	ldr	r7, [r0, #28]
 8013ce6:	b099      	sub	sp, #100	@ 0x64
 8013ce8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013cec:	ec55 4b10 	vmov	r4, r5, d0
 8013cf0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8013cf2:	9109      	str	r1, [sp, #36]	@ 0x24
 8013cf4:	4683      	mov	fp, r0
 8013cf6:	920e      	str	r2, [sp, #56]	@ 0x38
 8013cf8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013cfa:	b97f      	cbnz	r7, 8013d1c <_dtoa_r+0x3c>
 8013cfc:	2010      	movs	r0, #16
 8013cfe:	f000 fdfd 	bl	80148fc <malloc>
 8013d02:	4602      	mov	r2, r0
 8013d04:	f8cb 001c 	str.w	r0, [fp, #28]
 8013d08:	b920      	cbnz	r0, 8013d14 <_dtoa_r+0x34>
 8013d0a:	4ba7      	ldr	r3, [pc, #668]	@ (8013fa8 <_dtoa_r+0x2c8>)
 8013d0c:	21ef      	movs	r1, #239	@ 0xef
 8013d0e:	48a7      	ldr	r0, [pc, #668]	@ (8013fac <_dtoa_r+0x2cc>)
 8013d10:	f001 fe30 	bl	8015974 <__assert_func>
 8013d14:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8013d18:	6007      	str	r7, [r0, #0]
 8013d1a:	60c7      	str	r7, [r0, #12]
 8013d1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013d20:	6819      	ldr	r1, [r3, #0]
 8013d22:	b159      	cbz	r1, 8013d3c <_dtoa_r+0x5c>
 8013d24:	685a      	ldr	r2, [r3, #4]
 8013d26:	604a      	str	r2, [r1, #4]
 8013d28:	2301      	movs	r3, #1
 8013d2a:	4093      	lsls	r3, r2
 8013d2c:	608b      	str	r3, [r1, #8]
 8013d2e:	4658      	mov	r0, fp
 8013d30:	f000 feda 	bl	8014ae8 <_Bfree>
 8013d34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013d38:	2200      	movs	r2, #0
 8013d3a:	601a      	str	r2, [r3, #0]
 8013d3c:	1e2b      	subs	r3, r5, #0
 8013d3e:	bfb9      	ittee	lt
 8013d40:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8013d44:	9303      	strlt	r3, [sp, #12]
 8013d46:	2300      	movge	r3, #0
 8013d48:	6033      	strge	r3, [r6, #0]
 8013d4a:	9f03      	ldr	r7, [sp, #12]
 8013d4c:	4b98      	ldr	r3, [pc, #608]	@ (8013fb0 <_dtoa_r+0x2d0>)
 8013d4e:	bfbc      	itt	lt
 8013d50:	2201      	movlt	r2, #1
 8013d52:	6032      	strlt	r2, [r6, #0]
 8013d54:	43bb      	bics	r3, r7
 8013d56:	d112      	bne.n	8013d7e <_dtoa_r+0x9e>
 8013d58:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013d5a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8013d5e:	6013      	str	r3, [r2, #0]
 8013d60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013d64:	4323      	orrs	r3, r4
 8013d66:	f000 854d 	beq.w	8014804 <_dtoa_r+0xb24>
 8013d6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013d6c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8013fc4 <_dtoa_r+0x2e4>
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	f000 854f 	beq.w	8014814 <_dtoa_r+0xb34>
 8013d76:	f10a 0303 	add.w	r3, sl, #3
 8013d7a:	f000 bd49 	b.w	8014810 <_dtoa_r+0xb30>
 8013d7e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013d82:	2200      	movs	r2, #0
 8013d84:	ec51 0b17 	vmov	r0, r1, d7
 8013d88:	2300      	movs	r3, #0
 8013d8a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8013d8e:	f7ec febb 	bl	8000b08 <__aeabi_dcmpeq>
 8013d92:	4680      	mov	r8, r0
 8013d94:	b158      	cbz	r0, 8013dae <_dtoa_r+0xce>
 8013d96:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013d98:	2301      	movs	r3, #1
 8013d9a:	6013      	str	r3, [r2, #0]
 8013d9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013d9e:	b113      	cbz	r3, 8013da6 <_dtoa_r+0xc6>
 8013da0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013da2:	4b84      	ldr	r3, [pc, #528]	@ (8013fb4 <_dtoa_r+0x2d4>)
 8013da4:	6013      	str	r3, [r2, #0]
 8013da6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8013fc8 <_dtoa_r+0x2e8>
 8013daa:	f000 bd33 	b.w	8014814 <_dtoa_r+0xb34>
 8013dae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8013db2:	aa16      	add	r2, sp, #88	@ 0x58
 8013db4:	a917      	add	r1, sp, #92	@ 0x5c
 8013db6:	4658      	mov	r0, fp
 8013db8:	f001 f980 	bl	80150bc <__d2b>
 8013dbc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8013dc0:	4681      	mov	r9, r0
 8013dc2:	2e00      	cmp	r6, #0
 8013dc4:	d077      	beq.n	8013eb6 <_dtoa_r+0x1d6>
 8013dc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013dc8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8013dcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013dd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013dd4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8013dd8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8013ddc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8013de0:	4619      	mov	r1, r3
 8013de2:	2200      	movs	r2, #0
 8013de4:	4b74      	ldr	r3, [pc, #464]	@ (8013fb8 <_dtoa_r+0x2d8>)
 8013de6:	f7ec fa6f 	bl	80002c8 <__aeabi_dsub>
 8013dea:	a369      	add	r3, pc, #420	@ (adr r3, 8013f90 <_dtoa_r+0x2b0>)
 8013dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013df0:	f7ec fc22 	bl	8000638 <__aeabi_dmul>
 8013df4:	a368      	add	r3, pc, #416	@ (adr r3, 8013f98 <_dtoa_r+0x2b8>)
 8013df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dfa:	f7ec fa67 	bl	80002cc <__adddf3>
 8013dfe:	4604      	mov	r4, r0
 8013e00:	4630      	mov	r0, r6
 8013e02:	460d      	mov	r5, r1
 8013e04:	f7ec fbae 	bl	8000564 <__aeabi_i2d>
 8013e08:	a365      	add	r3, pc, #404	@ (adr r3, 8013fa0 <_dtoa_r+0x2c0>)
 8013e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e0e:	f7ec fc13 	bl	8000638 <__aeabi_dmul>
 8013e12:	4602      	mov	r2, r0
 8013e14:	460b      	mov	r3, r1
 8013e16:	4620      	mov	r0, r4
 8013e18:	4629      	mov	r1, r5
 8013e1a:	f7ec fa57 	bl	80002cc <__adddf3>
 8013e1e:	4604      	mov	r4, r0
 8013e20:	460d      	mov	r5, r1
 8013e22:	f7ec feb9 	bl	8000b98 <__aeabi_d2iz>
 8013e26:	2200      	movs	r2, #0
 8013e28:	4607      	mov	r7, r0
 8013e2a:	2300      	movs	r3, #0
 8013e2c:	4620      	mov	r0, r4
 8013e2e:	4629      	mov	r1, r5
 8013e30:	f7ec fe74 	bl	8000b1c <__aeabi_dcmplt>
 8013e34:	b140      	cbz	r0, 8013e48 <_dtoa_r+0x168>
 8013e36:	4638      	mov	r0, r7
 8013e38:	f7ec fb94 	bl	8000564 <__aeabi_i2d>
 8013e3c:	4622      	mov	r2, r4
 8013e3e:	462b      	mov	r3, r5
 8013e40:	f7ec fe62 	bl	8000b08 <__aeabi_dcmpeq>
 8013e44:	b900      	cbnz	r0, 8013e48 <_dtoa_r+0x168>
 8013e46:	3f01      	subs	r7, #1
 8013e48:	2f16      	cmp	r7, #22
 8013e4a:	d851      	bhi.n	8013ef0 <_dtoa_r+0x210>
 8013e4c:	4b5b      	ldr	r3, [pc, #364]	@ (8013fbc <_dtoa_r+0x2dc>)
 8013e4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013e5a:	f7ec fe5f 	bl	8000b1c <__aeabi_dcmplt>
 8013e5e:	2800      	cmp	r0, #0
 8013e60:	d048      	beq.n	8013ef4 <_dtoa_r+0x214>
 8013e62:	3f01      	subs	r7, #1
 8013e64:	2300      	movs	r3, #0
 8013e66:	9312      	str	r3, [sp, #72]	@ 0x48
 8013e68:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013e6a:	1b9b      	subs	r3, r3, r6
 8013e6c:	1e5a      	subs	r2, r3, #1
 8013e6e:	bf44      	itt	mi
 8013e70:	f1c3 0801 	rsbmi	r8, r3, #1
 8013e74:	2300      	movmi	r3, #0
 8013e76:	9208      	str	r2, [sp, #32]
 8013e78:	bf54      	ite	pl
 8013e7a:	f04f 0800 	movpl.w	r8, #0
 8013e7e:	9308      	strmi	r3, [sp, #32]
 8013e80:	2f00      	cmp	r7, #0
 8013e82:	db39      	blt.n	8013ef8 <_dtoa_r+0x218>
 8013e84:	9b08      	ldr	r3, [sp, #32]
 8013e86:	970f      	str	r7, [sp, #60]	@ 0x3c
 8013e88:	443b      	add	r3, r7
 8013e8a:	9308      	str	r3, [sp, #32]
 8013e8c:	2300      	movs	r3, #0
 8013e8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013e90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e92:	2b09      	cmp	r3, #9
 8013e94:	d864      	bhi.n	8013f60 <_dtoa_r+0x280>
 8013e96:	2b05      	cmp	r3, #5
 8013e98:	bfc4      	itt	gt
 8013e9a:	3b04      	subgt	r3, #4
 8013e9c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8013e9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ea0:	f1a3 0302 	sub.w	r3, r3, #2
 8013ea4:	bfcc      	ite	gt
 8013ea6:	2400      	movgt	r4, #0
 8013ea8:	2401      	movle	r4, #1
 8013eaa:	2b03      	cmp	r3, #3
 8013eac:	d863      	bhi.n	8013f76 <_dtoa_r+0x296>
 8013eae:	e8df f003 	tbb	[pc, r3]
 8013eb2:	372a      	.short	0x372a
 8013eb4:	5535      	.short	0x5535
 8013eb6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8013eba:	441e      	add	r6, r3
 8013ebc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8013ec0:	2b20      	cmp	r3, #32
 8013ec2:	bfc1      	itttt	gt
 8013ec4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8013ec8:	409f      	lslgt	r7, r3
 8013eca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8013ece:	fa24 f303 	lsrgt.w	r3, r4, r3
 8013ed2:	bfd6      	itet	le
 8013ed4:	f1c3 0320 	rsble	r3, r3, #32
 8013ed8:	ea47 0003 	orrgt.w	r0, r7, r3
 8013edc:	fa04 f003 	lslle.w	r0, r4, r3
 8013ee0:	f7ec fb30 	bl	8000544 <__aeabi_ui2d>
 8013ee4:	2201      	movs	r2, #1
 8013ee6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8013eea:	3e01      	subs	r6, #1
 8013eec:	9214      	str	r2, [sp, #80]	@ 0x50
 8013eee:	e777      	b.n	8013de0 <_dtoa_r+0x100>
 8013ef0:	2301      	movs	r3, #1
 8013ef2:	e7b8      	b.n	8013e66 <_dtoa_r+0x186>
 8013ef4:	9012      	str	r0, [sp, #72]	@ 0x48
 8013ef6:	e7b7      	b.n	8013e68 <_dtoa_r+0x188>
 8013ef8:	427b      	negs	r3, r7
 8013efa:	930a      	str	r3, [sp, #40]	@ 0x28
 8013efc:	2300      	movs	r3, #0
 8013efe:	eba8 0807 	sub.w	r8, r8, r7
 8013f02:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013f04:	e7c4      	b.n	8013e90 <_dtoa_r+0x1b0>
 8013f06:	2300      	movs	r3, #0
 8013f08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013f0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	dc35      	bgt.n	8013f7c <_dtoa_r+0x29c>
 8013f10:	2301      	movs	r3, #1
 8013f12:	9300      	str	r3, [sp, #0]
 8013f14:	9307      	str	r3, [sp, #28]
 8013f16:	461a      	mov	r2, r3
 8013f18:	920e      	str	r2, [sp, #56]	@ 0x38
 8013f1a:	e00b      	b.n	8013f34 <_dtoa_r+0x254>
 8013f1c:	2301      	movs	r3, #1
 8013f1e:	e7f3      	b.n	8013f08 <_dtoa_r+0x228>
 8013f20:	2300      	movs	r3, #0
 8013f22:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013f24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013f26:	18fb      	adds	r3, r7, r3
 8013f28:	9300      	str	r3, [sp, #0]
 8013f2a:	3301      	adds	r3, #1
 8013f2c:	2b01      	cmp	r3, #1
 8013f2e:	9307      	str	r3, [sp, #28]
 8013f30:	bfb8      	it	lt
 8013f32:	2301      	movlt	r3, #1
 8013f34:	f8db 001c 	ldr.w	r0, [fp, #28]
 8013f38:	2100      	movs	r1, #0
 8013f3a:	2204      	movs	r2, #4
 8013f3c:	f102 0514 	add.w	r5, r2, #20
 8013f40:	429d      	cmp	r5, r3
 8013f42:	d91f      	bls.n	8013f84 <_dtoa_r+0x2a4>
 8013f44:	6041      	str	r1, [r0, #4]
 8013f46:	4658      	mov	r0, fp
 8013f48:	f000 fd8e 	bl	8014a68 <_Balloc>
 8013f4c:	4682      	mov	sl, r0
 8013f4e:	2800      	cmp	r0, #0
 8013f50:	d13c      	bne.n	8013fcc <_dtoa_r+0x2ec>
 8013f52:	4b1b      	ldr	r3, [pc, #108]	@ (8013fc0 <_dtoa_r+0x2e0>)
 8013f54:	4602      	mov	r2, r0
 8013f56:	f240 11af 	movw	r1, #431	@ 0x1af
 8013f5a:	e6d8      	b.n	8013d0e <_dtoa_r+0x2e>
 8013f5c:	2301      	movs	r3, #1
 8013f5e:	e7e0      	b.n	8013f22 <_dtoa_r+0x242>
 8013f60:	2401      	movs	r4, #1
 8013f62:	2300      	movs	r3, #0
 8013f64:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f66:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013f68:	f04f 33ff 	mov.w	r3, #4294967295
 8013f6c:	9300      	str	r3, [sp, #0]
 8013f6e:	9307      	str	r3, [sp, #28]
 8013f70:	2200      	movs	r2, #0
 8013f72:	2312      	movs	r3, #18
 8013f74:	e7d0      	b.n	8013f18 <_dtoa_r+0x238>
 8013f76:	2301      	movs	r3, #1
 8013f78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013f7a:	e7f5      	b.n	8013f68 <_dtoa_r+0x288>
 8013f7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013f7e:	9300      	str	r3, [sp, #0]
 8013f80:	9307      	str	r3, [sp, #28]
 8013f82:	e7d7      	b.n	8013f34 <_dtoa_r+0x254>
 8013f84:	3101      	adds	r1, #1
 8013f86:	0052      	lsls	r2, r2, #1
 8013f88:	e7d8      	b.n	8013f3c <_dtoa_r+0x25c>
 8013f8a:	bf00      	nop
 8013f8c:	f3af 8000 	nop.w
 8013f90:	636f4361 	.word	0x636f4361
 8013f94:	3fd287a7 	.word	0x3fd287a7
 8013f98:	8b60c8b3 	.word	0x8b60c8b3
 8013f9c:	3fc68a28 	.word	0x3fc68a28
 8013fa0:	509f79fb 	.word	0x509f79fb
 8013fa4:	3fd34413 	.word	0x3fd34413
 8013fa8:	08017489 	.word	0x08017489
 8013fac:	080174a0 	.word	0x080174a0
 8013fb0:	7ff00000 	.word	0x7ff00000
 8013fb4:	08017459 	.word	0x08017459
 8013fb8:	3ff80000 	.word	0x3ff80000
 8013fbc:	08017598 	.word	0x08017598
 8013fc0:	080174f8 	.word	0x080174f8
 8013fc4:	08017485 	.word	0x08017485
 8013fc8:	08017458 	.word	0x08017458
 8013fcc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013fd0:	6018      	str	r0, [r3, #0]
 8013fd2:	9b07      	ldr	r3, [sp, #28]
 8013fd4:	2b0e      	cmp	r3, #14
 8013fd6:	f200 80a4 	bhi.w	8014122 <_dtoa_r+0x442>
 8013fda:	2c00      	cmp	r4, #0
 8013fdc:	f000 80a1 	beq.w	8014122 <_dtoa_r+0x442>
 8013fe0:	2f00      	cmp	r7, #0
 8013fe2:	dd33      	ble.n	801404c <_dtoa_r+0x36c>
 8013fe4:	4bad      	ldr	r3, [pc, #692]	@ (801429c <_dtoa_r+0x5bc>)
 8013fe6:	f007 020f 	and.w	r2, r7, #15
 8013fea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013fee:	ed93 7b00 	vldr	d7, [r3]
 8013ff2:	05f8      	lsls	r0, r7, #23
 8013ff4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013ff8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8013ffc:	d516      	bpl.n	801402c <_dtoa_r+0x34c>
 8013ffe:	4ba8      	ldr	r3, [pc, #672]	@ (80142a0 <_dtoa_r+0x5c0>)
 8014000:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014004:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014008:	f7ec fc40 	bl	800088c <__aeabi_ddiv>
 801400c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014010:	f004 040f 	and.w	r4, r4, #15
 8014014:	2603      	movs	r6, #3
 8014016:	4da2      	ldr	r5, [pc, #648]	@ (80142a0 <_dtoa_r+0x5c0>)
 8014018:	b954      	cbnz	r4, 8014030 <_dtoa_r+0x350>
 801401a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801401e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014022:	f7ec fc33 	bl	800088c <__aeabi_ddiv>
 8014026:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801402a:	e028      	b.n	801407e <_dtoa_r+0x39e>
 801402c:	2602      	movs	r6, #2
 801402e:	e7f2      	b.n	8014016 <_dtoa_r+0x336>
 8014030:	07e1      	lsls	r1, r4, #31
 8014032:	d508      	bpl.n	8014046 <_dtoa_r+0x366>
 8014034:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014038:	e9d5 2300 	ldrd	r2, r3, [r5]
 801403c:	f7ec fafc 	bl	8000638 <__aeabi_dmul>
 8014040:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014044:	3601      	adds	r6, #1
 8014046:	1064      	asrs	r4, r4, #1
 8014048:	3508      	adds	r5, #8
 801404a:	e7e5      	b.n	8014018 <_dtoa_r+0x338>
 801404c:	f000 80d2 	beq.w	80141f4 <_dtoa_r+0x514>
 8014050:	427c      	negs	r4, r7
 8014052:	4b92      	ldr	r3, [pc, #584]	@ (801429c <_dtoa_r+0x5bc>)
 8014054:	4d92      	ldr	r5, [pc, #584]	@ (80142a0 <_dtoa_r+0x5c0>)
 8014056:	f004 020f 	and.w	r2, r4, #15
 801405a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801405e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014062:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014066:	f7ec fae7 	bl	8000638 <__aeabi_dmul>
 801406a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801406e:	1124      	asrs	r4, r4, #4
 8014070:	2300      	movs	r3, #0
 8014072:	2602      	movs	r6, #2
 8014074:	2c00      	cmp	r4, #0
 8014076:	f040 80b2 	bne.w	80141de <_dtoa_r+0x4fe>
 801407a:	2b00      	cmp	r3, #0
 801407c:	d1d3      	bne.n	8014026 <_dtoa_r+0x346>
 801407e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014080:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8014084:	2b00      	cmp	r3, #0
 8014086:	f000 80b7 	beq.w	80141f8 <_dtoa_r+0x518>
 801408a:	4b86      	ldr	r3, [pc, #536]	@ (80142a4 <_dtoa_r+0x5c4>)
 801408c:	2200      	movs	r2, #0
 801408e:	4620      	mov	r0, r4
 8014090:	4629      	mov	r1, r5
 8014092:	f7ec fd43 	bl	8000b1c <__aeabi_dcmplt>
 8014096:	2800      	cmp	r0, #0
 8014098:	f000 80ae 	beq.w	80141f8 <_dtoa_r+0x518>
 801409c:	9b07      	ldr	r3, [sp, #28]
 801409e:	2b00      	cmp	r3, #0
 80140a0:	f000 80aa 	beq.w	80141f8 <_dtoa_r+0x518>
 80140a4:	9b00      	ldr	r3, [sp, #0]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	dd37      	ble.n	801411a <_dtoa_r+0x43a>
 80140aa:	1e7b      	subs	r3, r7, #1
 80140ac:	9304      	str	r3, [sp, #16]
 80140ae:	4620      	mov	r0, r4
 80140b0:	4b7d      	ldr	r3, [pc, #500]	@ (80142a8 <_dtoa_r+0x5c8>)
 80140b2:	2200      	movs	r2, #0
 80140b4:	4629      	mov	r1, r5
 80140b6:	f7ec fabf 	bl	8000638 <__aeabi_dmul>
 80140ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80140be:	9c00      	ldr	r4, [sp, #0]
 80140c0:	3601      	adds	r6, #1
 80140c2:	4630      	mov	r0, r6
 80140c4:	f7ec fa4e 	bl	8000564 <__aeabi_i2d>
 80140c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80140cc:	f7ec fab4 	bl	8000638 <__aeabi_dmul>
 80140d0:	4b76      	ldr	r3, [pc, #472]	@ (80142ac <_dtoa_r+0x5cc>)
 80140d2:	2200      	movs	r2, #0
 80140d4:	f7ec f8fa 	bl	80002cc <__adddf3>
 80140d8:	4605      	mov	r5, r0
 80140da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80140de:	2c00      	cmp	r4, #0
 80140e0:	f040 808d 	bne.w	80141fe <_dtoa_r+0x51e>
 80140e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80140e8:	4b71      	ldr	r3, [pc, #452]	@ (80142b0 <_dtoa_r+0x5d0>)
 80140ea:	2200      	movs	r2, #0
 80140ec:	f7ec f8ec 	bl	80002c8 <__aeabi_dsub>
 80140f0:	4602      	mov	r2, r0
 80140f2:	460b      	mov	r3, r1
 80140f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80140f8:	462a      	mov	r2, r5
 80140fa:	4633      	mov	r3, r6
 80140fc:	f7ec fd2c 	bl	8000b58 <__aeabi_dcmpgt>
 8014100:	2800      	cmp	r0, #0
 8014102:	f040 828b 	bne.w	801461c <_dtoa_r+0x93c>
 8014106:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801410a:	462a      	mov	r2, r5
 801410c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8014110:	f7ec fd04 	bl	8000b1c <__aeabi_dcmplt>
 8014114:	2800      	cmp	r0, #0
 8014116:	f040 8128 	bne.w	801436a <_dtoa_r+0x68a>
 801411a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801411e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8014122:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8014124:	2b00      	cmp	r3, #0
 8014126:	f2c0 815a 	blt.w	80143de <_dtoa_r+0x6fe>
 801412a:	2f0e      	cmp	r7, #14
 801412c:	f300 8157 	bgt.w	80143de <_dtoa_r+0x6fe>
 8014130:	4b5a      	ldr	r3, [pc, #360]	@ (801429c <_dtoa_r+0x5bc>)
 8014132:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014136:	ed93 7b00 	vldr	d7, [r3]
 801413a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801413c:	2b00      	cmp	r3, #0
 801413e:	ed8d 7b00 	vstr	d7, [sp]
 8014142:	da03      	bge.n	801414c <_dtoa_r+0x46c>
 8014144:	9b07      	ldr	r3, [sp, #28]
 8014146:	2b00      	cmp	r3, #0
 8014148:	f340 8101 	ble.w	801434e <_dtoa_r+0x66e>
 801414c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8014150:	4656      	mov	r6, sl
 8014152:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014156:	4620      	mov	r0, r4
 8014158:	4629      	mov	r1, r5
 801415a:	f7ec fb97 	bl	800088c <__aeabi_ddiv>
 801415e:	f7ec fd1b 	bl	8000b98 <__aeabi_d2iz>
 8014162:	4680      	mov	r8, r0
 8014164:	f7ec f9fe 	bl	8000564 <__aeabi_i2d>
 8014168:	e9dd 2300 	ldrd	r2, r3, [sp]
 801416c:	f7ec fa64 	bl	8000638 <__aeabi_dmul>
 8014170:	4602      	mov	r2, r0
 8014172:	460b      	mov	r3, r1
 8014174:	4620      	mov	r0, r4
 8014176:	4629      	mov	r1, r5
 8014178:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801417c:	f7ec f8a4 	bl	80002c8 <__aeabi_dsub>
 8014180:	f806 4b01 	strb.w	r4, [r6], #1
 8014184:	9d07      	ldr	r5, [sp, #28]
 8014186:	eba6 040a 	sub.w	r4, r6, sl
 801418a:	42a5      	cmp	r5, r4
 801418c:	4602      	mov	r2, r0
 801418e:	460b      	mov	r3, r1
 8014190:	f040 8117 	bne.w	80143c2 <_dtoa_r+0x6e2>
 8014194:	f7ec f89a 	bl	80002cc <__adddf3>
 8014198:	e9dd 2300 	ldrd	r2, r3, [sp]
 801419c:	4604      	mov	r4, r0
 801419e:	460d      	mov	r5, r1
 80141a0:	f7ec fcda 	bl	8000b58 <__aeabi_dcmpgt>
 80141a4:	2800      	cmp	r0, #0
 80141a6:	f040 80f9 	bne.w	801439c <_dtoa_r+0x6bc>
 80141aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80141ae:	4620      	mov	r0, r4
 80141b0:	4629      	mov	r1, r5
 80141b2:	f7ec fca9 	bl	8000b08 <__aeabi_dcmpeq>
 80141b6:	b118      	cbz	r0, 80141c0 <_dtoa_r+0x4e0>
 80141b8:	f018 0f01 	tst.w	r8, #1
 80141bc:	f040 80ee 	bne.w	801439c <_dtoa_r+0x6bc>
 80141c0:	4649      	mov	r1, r9
 80141c2:	4658      	mov	r0, fp
 80141c4:	f000 fc90 	bl	8014ae8 <_Bfree>
 80141c8:	2300      	movs	r3, #0
 80141ca:	7033      	strb	r3, [r6, #0]
 80141cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80141ce:	3701      	adds	r7, #1
 80141d0:	601f      	str	r7, [r3, #0]
 80141d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	f000 831d 	beq.w	8014814 <_dtoa_r+0xb34>
 80141da:	601e      	str	r6, [r3, #0]
 80141dc:	e31a      	b.n	8014814 <_dtoa_r+0xb34>
 80141de:	07e2      	lsls	r2, r4, #31
 80141e0:	d505      	bpl.n	80141ee <_dtoa_r+0x50e>
 80141e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80141e6:	f7ec fa27 	bl	8000638 <__aeabi_dmul>
 80141ea:	3601      	adds	r6, #1
 80141ec:	2301      	movs	r3, #1
 80141ee:	1064      	asrs	r4, r4, #1
 80141f0:	3508      	adds	r5, #8
 80141f2:	e73f      	b.n	8014074 <_dtoa_r+0x394>
 80141f4:	2602      	movs	r6, #2
 80141f6:	e742      	b.n	801407e <_dtoa_r+0x39e>
 80141f8:	9c07      	ldr	r4, [sp, #28]
 80141fa:	9704      	str	r7, [sp, #16]
 80141fc:	e761      	b.n	80140c2 <_dtoa_r+0x3e2>
 80141fe:	4b27      	ldr	r3, [pc, #156]	@ (801429c <_dtoa_r+0x5bc>)
 8014200:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014202:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014206:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801420a:	4454      	add	r4, sl
 801420c:	2900      	cmp	r1, #0
 801420e:	d053      	beq.n	80142b8 <_dtoa_r+0x5d8>
 8014210:	4928      	ldr	r1, [pc, #160]	@ (80142b4 <_dtoa_r+0x5d4>)
 8014212:	2000      	movs	r0, #0
 8014214:	f7ec fb3a 	bl	800088c <__aeabi_ddiv>
 8014218:	4633      	mov	r3, r6
 801421a:	462a      	mov	r2, r5
 801421c:	f7ec f854 	bl	80002c8 <__aeabi_dsub>
 8014220:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8014224:	4656      	mov	r6, sl
 8014226:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801422a:	f7ec fcb5 	bl	8000b98 <__aeabi_d2iz>
 801422e:	4605      	mov	r5, r0
 8014230:	f7ec f998 	bl	8000564 <__aeabi_i2d>
 8014234:	4602      	mov	r2, r0
 8014236:	460b      	mov	r3, r1
 8014238:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801423c:	f7ec f844 	bl	80002c8 <__aeabi_dsub>
 8014240:	3530      	adds	r5, #48	@ 0x30
 8014242:	4602      	mov	r2, r0
 8014244:	460b      	mov	r3, r1
 8014246:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801424a:	f806 5b01 	strb.w	r5, [r6], #1
 801424e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8014252:	f7ec fc63 	bl	8000b1c <__aeabi_dcmplt>
 8014256:	2800      	cmp	r0, #0
 8014258:	d171      	bne.n	801433e <_dtoa_r+0x65e>
 801425a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801425e:	4911      	ldr	r1, [pc, #68]	@ (80142a4 <_dtoa_r+0x5c4>)
 8014260:	2000      	movs	r0, #0
 8014262:	f7ec f831 	bl	80002c8 <__aeabi_dsub>
 8014266:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801426a:	f7ec fc57 	bl	8000b1c <__aeabi_dcmplt>
 801426e:	2800      	cmp	r0, #0
 8014270:	f040 8095 	bne.w	801439e <_dtoa_r+0x6be>
 8014274:	42a6      	cmp	r6, r4
 8014276:	f43f af50 	beq.w	801411a <_dtoa_r+0x43a>
 801427a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801427e:	4b0a      	ldr	r3, [pc, #40]	@ (80142a8 <_dtoa_r+0x5c8>)
 8014280:	2200      	movs	r2, #0
 8014282:	f7ec f9d9 	bl	8000638 <__aeabi_dmul>
 8014286:	4b08      	ldr	r3, [pc, #32]	@ (80142a8 <_dtoa_r+0x5c8>)
 8014288:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801428c:	2200      	movs	r2, #0
 801428e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014292:	f7ec f9d1 	bl	8000638 <__aeabi_dmul>
 8014296:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801429a:	e7c4      	b.n	8014226 <_dtoa_r+0x546>
 801429c:	08017598 	.word	0x08017598
 80142a0:	08017570 	.word	0x08017570
 80142a4:	3ff00000 	.word	0x3ff00000
 80142a8:	40240000 	.word	0x40240000
 80142ac:	401c0000 	.word	0x401c0000
 80142b0:	40140000 	.word	0x40140000
 80142b4:	3fe00000 	.word	0x3fe00000
 80142b8:	4631      	mov	r1, r6
 80142ba:	4628      	mov	r0, r5
 80142bc:	f7ec f9bc 	bl	8000638 <__aeabi_dmul>
 80142c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80142c4:	9415      	str	r4, [sp, #84]	@ 0x54
 80142c6:	4656      	mov	r6, sl
 80142c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80142cc:	f7ec fc64 	bl	8000b98 <__aeabi_d2iz>
 80142d0:	4605      	mov	r5, r0
 80142d2:	f7ec f947 	bl	8000564 <__aeabi_i2d>
 80142d6:	4602      	mov	r2, r0
 80142d8:	460b      	mov	r3, r1
 80142da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80142de:	f7eb fff3 	bl	80002c8 <__aeabi_dsub>
 80142e2:	3530      	adds	r5, #48	@ 0x30
 80142e4:	f806 5b01 	strb.w	r5, [r6], #1
 80142e8:	4602      	mov	r2, r0
 80142ea:	460b      	mov	r3, r1
 80142ec:	42a6      	cmp	r6, r4
 80142ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80142f2:	f04f 0200 	mov.w	r2, #0
 80142f6:	d124      	bne.n	8014342 <_dtoa_r+0x662>
 80142f8:	4bac      	ldr	r3, [pc, #688]	@ (80145ac <_dtoa_r+0x8cc>)
 80142fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80142fe:	f7eb ffe5 	bl	80002cc <__adddf3>
 8014302:	4602      	mov	r2, r0
 8014304:	460b      	mov	r3, r1
 8014306:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801430a:	f7ec fc25 	bl	8000b58 <__aeabi_dcmpgt>
 801430e:	2800      	cmp	r0, #0
 8014310:	d145      	bne.n	801439e <_dtoa_r+0x6be>
 8014312:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8014316:	49a5      	ldr	r1, [pc, #660]	@ (80145ac <_dtoa_r+0x8cc>)
 8014318:	2000      	movs	r0, #0
 801431a:	f7eb ffd5 	bl	80002c8 <__aeabi_dsub>
 801431e:	4602      	mov	r2, r0
 8014320:	460b      	mov	r3, r1
 8014322:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014326:	f7ec fbf9 	bl	8000b1c <__aeabi_dcmplt>
 801432a:	2800      	cmp	r0, #0
 801432c:	f43f aef5 	beq.w	801411a <_dtoa_r+0x43a>
 8014330:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8014332:	1e73      	subs	r3, r6, #1
 8014334:	9315      	str	r3, [sp, #84]	@ 0x54
 8014336:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801433a:	2b30      	cmp	r3, #48	@ 0x30
 801433c:	d0f8      	beq.n	8014330 <_dtoa_r+0x650>
 801433e:	9f04      	ldr	r7, [sp, #16]
 8014340:	e73e      	b.n	80141c0 <_dtoa_r+0x4e0>
 8014342:	4b9b      	ldr	r3, [pc, #620]	@ (80145b0 <_dtoa_r+0x8d0>)
 8014344:	f7ec f978 	bl	8000638 <__aeabi_dmul>
 8014348:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801434c:	e7bc      	b.n	80142c8 <_dtoa_r+0x5e8>
 801434e:	d10c      	bne.n	801436a <_dtoa_r+0x68a>
 8014350:	4b98      	ldr	r3, [pc, #608]	@ (80145b4 <_dtoa_r+0x8d4>)
 8014352:	2200      	movs	r2, #0
 8014354:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014358:	f7ec f96e 	bl	8000638 <__aeabi_dmul>
 801435c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014360:	f7ec fbf0 	bl	8000b44 <__aeabi_dcmpge>
 8014364:	2800      	cmp	r0, #0
 8014366:	f000 8157 	beq.w	8014618 <_dtoa_r+0x938>
 801436a:	2400      	movs	r4, #0
 801436c:	4625      	mov	r5, r4
 801436e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014370:	43db      	mvns	r3, r3
 8014372:	9304      	str	r3, [sp, #16]
 8014374:	4656      	mov	r6, sl
 8014376:	2700      	movs	r7, #0
 8014378:	4621      	mov	r1, r4
 801437a:	4658      	mov	r0, fp
 801437c:	f000 fbb4 	bl	8014ae8 <_Bfree>
 8014380:	2d00      	cmp	r5, #0
 8014382:	d0dc      	beq.n	801433e <_dtoa_r+0x65e>
 8014384:	b12f      	cbz	r7, 8014392 <_dtoa_r+0x6b2>
 8014386:	42af      	cmp	r7, r5
 8014388:	d003      	beq.n	8014392 <_dtoa_r+0x6b2>
 801438a:	4639      	mov	r1, r7
 801438c:	4658      	mov	r0, fp
 801438e:	f000 fbab 	bl	8014ae8 <_Bfree>
 8014392:	4629      	mov	r1, r5
 8014394:	4658      	mov	r0, fp
 8014396:	f000 fba7 	bl	8014ae8 <_Bfree>
 801439a:	e7d0      	b.n	801433e <_dtoa_r+0x65e>
 801439c:	9704      	str	r7, [sp, #16]
 801439e:	4633      	mov	r3, r6
 80143a0:	461e      	mov	r6, r3
 80143a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80143a6:	2a39      	cmp	r2, #57	@ 0x39
 80143a8:	d107      	bne.n	80143ba <_dtoa_r+0x6da>
 80143aa:	459a      	cmp	sl, r3
 80143ac:	d1f8      	bne.n	80143a0 <_dtoa_r+0x6c0>
 80143ae:	9a04      	ldr	r2, [sp, #16]
 80143b0:	3201      	adds	r2, #1
 80143b2:	9204      	str	r2, [sp, #16]
 80143b4:	2230      	movs	r2, #48	@ 0x30
 80143b6:	f88a 2000 	strb.w	r2, [sl]
 80143ba:	781a      	ldrb	r2, [r3, #0]
 80143bc:	3201      	adds	r2, #1
 80143be:	701a      	strb	r2, [r3, #0]
 80143c0:	e7bd      	b.n	801433e <_dtoa_r+0x65e>
 80143c2:	4b7b      	ldr	r3, [pc, #492]	@ (80145b0 <_dtoa_r+0x8d0>)
 80143c4:	2200      	movs	r2, #0
 80143c6:	f7ec f937 	bl	8000638 <__aeabi_dmul>
 80143ca:	2200      	movs	r2, #0
 80143cc:	2300      	movs	r3, #0
 80143ce:	4604      	mov	r4, r0
 80143d0:	460d      	mov	r5, r1
 80143d2:	f7ec fb99 	bl	8000b08 <__aeabi_dcmpeq>
 80143d6:	2800      	cmp	r0, #0
 80143d8:	f43f aebb 	beq.w	8014152 <_dtoa_r+0x472>
 80143dc:	e6f0      	b.n	80141c0 <_dtoa_r+0x4e0>
 80143de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80143e0:	2a00      	cmp	r2, #0
 80143e2:	f000 80db 	beq.w	801459c <_dtoa_r+0x8bc>
 80143e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80143e8:	2a01      	cmp	r2, #1
 80143ea:	f300 80bf 	bgt.w	801456c <_dtoa_r+0x88c>
 80143ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80143f0:	2a00      	cmp	r2, #0
 80143f2:	f000 80b7 	beq.w	8014564 <_dtoa_r+0x884>
 80143f6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80143fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80143fc:	4646      	mov	r6, r8
 80143fe:	9a08      	ldr	r2, [sp, #32]
 8014400:	2101      	movs	r1, #1
 8014402:	441a      	add	r2, r3
 8014404:	4658      	mov	r0, fp
 8014406:	4498      	add	r8, r3
 8014408:	9208      	str	r2, [sp, #32]
 801440a:	f000 fc21 	bl	8014c50 <__i2b>
 801440e:	4605      	mov	r5, r0
 8014410:	b15e      	cbz	r6, 801442a <_dtoa_r+0x74a>
 8014412:	9b08      	ldr	r3, [sp, #32]
 8014414:	2b00      	cmp	r3, #0
 8014416:	dd08      	ble.n	801442a <_dtoa_r+0x74a>
 8014418:	42b3      	cmp	r3, r6
 801441a:	9a08      	ldr	r2, [sp, #32]
 801441c:	bfa8      	it	ge
 801441e:	4633      	movge	r3, r6
 8014420:	eba8 0803 	sub.w	r8, r8, r3
 8014424:	1af6      	subs	r6, r6, r3
 8014426:	1ad3      	subs	r3, r2, r3
 8014428:	9308      	str	r3, [sp, #32]
 801442a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801442c:	b1f3      	cbz	r3, 801446c <_dtoa_r+0x78c>
 801442e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014430:	2b00      	cmp	r3, #0
 8014432:	f000 80b7 	beq.w	80145a4 <_dtoa_r+0x8c4>
 8014436:	b18c      	cbz	r4, 801445c <_dtoa_r+0x77c>
 8014438:	4629      	mov	r1, r5
 801443a:	4622      	mov	r2, r4
 801443c:	4658      	mov	r0, fp
 801443e:	f000 fcc7 	bl	8014dd0 <__pow5mult>
 8014442:	464a      	mov	r2, r9
 8014444:	4601      	mov	r1, r0
 8014446:	4605      	mov	r5, r0
 8014448:	4658      	mov	r0, fp
 801444a:	f000 fc17 	bl	8014c7c <__multiply>
 801444e:	4649      	mov	r1, r9
 8014450:	9004      	str	r0, [sp, #16]
 8014452:	4658      	mov	r0, fp
 8014454:	f000 fb48 	bl	8014ae8 <_Bfree>
 8014458:	9b04      	ldr	r3, [sp, #16]
 801445a:	4699      	mov	r9, r3
 801445c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801445e:	1b1a      	subs	r2, r3, r4
 8014460:	d004      	beq.n	801446c <_dtoa_r+0x78c>
 8014462:	4649      	mov	r1, r9
 8014464:	4658      	mov	r0, fp
 8014466:	f000 fcb3 	bl	8014dd0 <__pow5mult>
 801446a:	4681      	mov	r9, r0
 801446c:	2101      	movs	r1, #1
 801446e:	4658      	mov	r0, fp
 8014470:	f000 fbee 	bl	8014c50 <__i2b>
 8014474:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014476:	4604      	mov	r4, r0
 8014478:	2b00      	cmp	r3, #0
 801447a:	f000 81cf 	beq.w	801481c <_dtoa_r+0xb3c>
 801447e:	461a      	mov	r2, r3
 8014480:	4601      	mov	r1, r0
 8014482:	4658      	mov	r0, fp
 8014484:	f000 fca4 	bl	8014dd0 <__pow5mult>
 8014488:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801448a:	2b01      	cmp	r3, #1
 801448c:	4604      	mov	r4, r0
 801448e:	f300 8095 	bgt.w	80145bc <_dtoa_r+0x8dc>
 8014492:	9b02      	ldr	r3, [sp, #8]
 8014494:	2b00      	cmp	r3, #0
 8014496:	f040 8087 	bne.w	80145a8 <_dtoa_r+0x8c8>
 801449a:	9b03      	ldr	r3, [sp, #12]
 801449c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	f040 8089 	bne.w	80145b8 <_dtoa_r+0x8d8>
 80144a6:	9b03      	ldr	r3, [sp, #12]
 80144a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80144ac:	0d1b      	lsrs	r3, r3, #20
 80144ae:	051b      	lsls	r3, r3, #20
 80144b0:	b12b      	cbz	r3, 80144be <_dtoa_r+0x7de>
 80144b2:	9b08      	ldr	r3, [sp, #32]
 80144b4:	3301      	adds	r3, #1
 80144b6:	9308      	str	r3, [sp, #32]
 80144b8:	f108 0801 	add.w	r8, r8, #1
 80144bc:	2301      	movs	r3, #1
 80144be:	930a      	str	r3, [sp, #40]	@ 0x28
 80144c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	f000 81b0 	beq.w	8014828 <_dtoa_r+0xb48>
 80144c8:	6923      	ldr	r3, [r4, #16]
 80144ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80144ce:	6918      	ldr	r0, [r3, #16]
 80144d0:	f000 fb72 	bl	8014bb8 <__hi0bits>
 80144d4:	f1c0 0020 	rsb	r0, r0, #32
 80144d8:	9b08      	ldr	r3, [sp, #32]
 80144da:	4418      	add	r0, r3
 80144dc:	f010 001f 	ands.w	r0, r0, #31
 80144e0:	d077      	beq.n	80145d2 <_dtoa_r+0x8f2>
 80144e2:	f1c0 0320 	rsb	r3, r0, #32
 80144e6:	2b04      	cmp	r3, #4
 80144e8:	dd6b      	ble.n	80145c2 <_dtoa_r+0x8e2>
 80144ea:	9b08      	ldr	r3, [sp, #32]
 80144ec:	f1c0 001c 	rsb	r0, r0, #28
 80144f0:	4403      	add	r3, r0
 80144f2:	4480      	add	r8, r0
 80144f4:	4406      	add	r6, r0
 80144f6:	9308      	str	r3, [sp, #32]
 80144f8:	f1b8 0f00 	cmp.w	r8, #0
 80144fc:	dd05      	ble.n	801450a <_dtoa_r+0x82a>
 80144fe:	4649      	mov	r1, r9
 8014500:	4642      	mov	r2, r8
 8014502:	4658      	mov	r0, fp
 8014504:	f000 fcbe 	bl	8014e84 <__lshift>
 8014508:	4681      	mov	r9, r0
 801450a:	9b08      	ldr	r3, [sp, #32]
 801450c:	2b00      	cmp	r3, #0
 801450e:	dd05      	ble.n	801451c <_dtoa_r+0x83c>
 8014510:	4621      	mov	r1, r4
 8014512:	461a      	mov	r2, r3
 8014514:	4658      	mov	r0, fp
 8014516:	f000 fcb5 	bl	8014e84 <__lshift>
 801451a:	4604      	mov	r4, r0
 801451c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801451e:	2b00      	cmp	r3, #0
 8014520:	d059      	beq.n	80145d6 <_dtoa_r+0x8f6>
 8014522:	4621      	mov	r1, r4
 8014524:	4648      	mov	r0, r9
 8014526:	f000 fd19 	bl	8014f5c <__mcmp>
 801452a:	2800      	cmp	r0, #0
 801452c:	da53      	bge.n	80145d6 <_dtoa_r+0x8f6>
 801452e:	1e7b      	subs	r3, r7, #1
 8014530:	9304      	str	r3, [sp, #16]
 8014532:	4649      	mov	r1, r9
 8014534:	2300      	movs	r3, #0
 8014536:	220a      	movs	r2, #10
 8014538:	4658      	mov	r0, fp
 801453a:	f000 faf7 	bl	8014b2c <__multadd>
 801453e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014540:	4681      	mov	r9, r0
 8014542:	2b00      	cmp	r3, #0
 8014544:	f000 8172 	beq.w	801482c <_dtoa_r+0xb4c>
 8014548:	2300      	movs	r3, #0
 801454a:	4629      	mov	r1, r5
 801454c:	220a      	movs	r2, #10
 801454e:	4658      	mov	r0, fp
 8014550:	f000 faec 	bl	8014b2c <__multadd>
 8014554:	9b00      	ldr	r3, [sp, #0]
 8014556:	2b00      	cmp	r3, #0
 8014558:	4605      	mov	r5, r0
 801455a:	dc67      	bgt.n	801462c <_dtoa_r+0x94c>
 801455c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801455e:	2b02      	cmp	r3, #2
 8014560:	dc41      	bgt.n	80145e6 <_dtoa_r+0x906>
 8014562:	e063      	b.n	801462c <_dtoa_r+0x94c>
 8014564:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014566:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801456a:	e746      	b.n	80143fa <_dtoa_r+0x71a>
 801456c:	9b07      	ldr	r3, [sp, #28]
 801456e:	1e5c      	subs	r4, r3, #1
 8014570:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014572:	42a3      	cmp	r3, r4
 8014574:	bfbf      	itttt	lt
 8014576:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8014578:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801457a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801457c:	1ae3      	sublt	r3, r4, r3
 801457e:	bfb4      	ite	lt
 8014580:	18d2      	addlt	r2, r2, r3
 8014582:	1b1c      	subge	r4, r3, r4
 8014584:	9b07      	ldr	r3, [sp, #28]
 8014586:	bfbc      	itt	lt
 8014588:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801458a:	2400      	movlt	r4, #0
 801458c:	2b00      	cmp	r3, #0
 801458e:	bfb5      	itete	lt
 8014590:	eba8 0603 	sublt.w	r6, r8, r3
 8014594:	9b07      	ldrge	r3, [sp, #28]
 8014596:	2300      	movlt	r3, #0
 8014598:	4646      	movge	r6, r8
 801459a:	e730      	b.n	80143fe <_dtoa_r+0x71e>
 801459c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801459e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80145a0:	4646      	mov	r6, r8
 80145a2:	e735      	b.n	8014410 <_dtoa_r+0x730>
 80145a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80145a6:	e75c      	b.n	8014462 <_dtoa_r+0x782>
 80145a8:	2300      	movs	r3, #0
 80145aa:	e788      	b.n	80144be <_dtoa_r+0x7de>
 80145ac:	3fe00000 	.word	0x3fe00000
 80145b0:	40240000 	.word	0x40240000
 80145b4:	40140000 	.word	0x40140000
 80145b8:	9b02      	ldr	r3, [sp, #8]
 80145ba:	e780      	b.n	80144be <_dtoa_r+0x7de>
 80145bc:	2300      	movs	r3, #0
 80145be:	930a      	str	r3, [sp, #40]	@ 0x28
 80145c0:	e782      	b.n	80144c8 <_dtoa_r+0x7e8>
 80145c2:	d099      	beq.n	80144f8 <_dtoa_r+0x818>
 80145c4:	9a08      	ldr	r2, [sp, #32]
 80145c6:	331c      	adds	r3, #28
 80145c8:	441a      	add	r2, r3
 80145ca:	4498      	add	r8, r3
 80145cc:	441e      	add	r6, r3
 80145ce:	9208      	str	r2, [sp, #32]
 80145d0:	e792      	b.n	80144f8 <_dtoa_r+0x818>
 80145d2:	4603      	mov	r3, r0
 80145d4:	e7f6      	b.n	80145c4 <_dtoa_r+0x8e4>
 80145d6:	9b07      	ldr	r3, [sp, #28]
 80145d8:	9704      	str	r7, [sp, #16]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	dc20      	bgt.n	8014620 <_dtoa_r+0x940>
 80145de:	9300      	str	r3, [sp, #0]
 80145e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80145e2:	2b02      	cmp	r3, #2
 80145e4:	dd1e      	ble.n	8014624 <_dtoa_r+0x944>
 80145e6:	9b00      	ldr	r3, [sp, #0]
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	f47f aec0 	bne.w	801436e <_dtoa_r+0x68e>
 80145ee:	4621      	mov	r1, r4
 80145f0:	2205      	movs	r2, #5
 80145f2:	4658      	mov	r0, fp
 80145f4:	f000 fa9a 	bl	8014b2c <__multadd>
 80145f8:	4601      	mov	r1, r0
 80145fa:	4604      	mov	r4, r0
 80145fc:	4648      	mov	r0, r9
 80145fe:	f000 fcad 	bl	8014f5c <__mcmp>
 8014602:	2800      	cmp	r0, #0
 8014604:	f77f aeb3 	ble.w	801436e <_dtoa_r+0x68e>
 8014608:	4656      	mov	r6, sl
 801460a:	2331      	movs	r3, #49	@ 0x31
 801460c:	f806 3b01 	strb.w	r3, [r6], #1
 8014610:	9b04      	ldr	r3, [sp, #16]
 8014612:	3301      	adds	r3, #1
 8014614:	9304      	str	r3, [sp, #16]
 8014616:	e6ae      	b.n	8014376 <_dtoa_r+0x696>
 8014618:	9c07      	ldr	r4, [sp, #28]
 801461a:	9704      	str	r7, [sp, #16]
 801461c:	4625      	mov	r5, r4
 801461e:	e7f3      	b.n	8014608 <_dtoa_r+0x928>
 8014620:	9b07      	ldr	r3, [sp, #28]
 8014622:	9300      	str	r3, [sp, #0]
 8014624:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014626:	2b00      	cmp	r3, #0
 8014628:	f000 8104 	beq.w	8014834 <_dtoa_r+0xb54>
 801462c:	2e00      	cmp	r6, #0
 801462e:	dd05      	ble.n	801463c <_dtoa_r+0x95c>
 8014630:	4629      	mov	r1, r5
 8014632:	4632      	mov	r2, r6
 8014634:	4658      	mov	r0, fp
 8014636:	f000 fc25 	bl	8014e84 <__lshift>
 801463a:	4605      	mov	r5, r0
 801463c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801463e:	2b00      	cmp	r3, #0
 8014640:	d05a      	beq.n	80146f8 <_dtoa_r+0xa18>
 8014642:	6869      	ldr	r1, [r5, #4]
 8014644:	4658      	mov	r0, fp
 8014646:	f000 fa0f 	bl	8014a68 <_Balloc>
 801464a:	4606      	mov	r6, r0
 801464c:	b928      	cbnz	r0, 801465a <_dtoa_r+0x97a>
 801464e:	4b84      	ldr	r3, [pc, #528]	@ (8014860 <_dtoa_r+0xb80>)
 8014650:	4602      	mov	r2, r0
 8014652:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8014656:	f7ff bb5a 	b.w	8013d0e <_dtoa_r+0x2e>
 801465a:	692a      	ldr	r2, [r5, #16]
 801465c:	3202      	adds	r2, #2
 801465e:	0092      	lsls	r2, r2, #2
 8014660:	f105 010c 	add.w	r1, r5, #12
 8014664:	300c      	adds	r0, #12
 8014666:	f7ff faa4 	bl	8013bb2 <memcpy>
 801466a:	2201      	movs	r2, #1
 801466c:	4631      	mov	r1, r6
 801466e:	4658      	mov	r0, fp
 8014670:	f000 fc08 	bl	8014e84 <__lshift>
 8014674:	f10a 0301 	add.w	r3, sl, #1
 8014678:	9307      	str	r3, [sp, #28]
 801467a:	9b00      	ldr	r3, [sp, #0]
 801467c:	4453      	add	r3, sl
 801467e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014680:	9b02      	ldr	r3, [sp, #8]
 8014682:	f003 0301 	and.w	r3, r3, #1
 8014686:	462f      	mov	r7, r5
 8014688:	930a      	str	r3, [sp, #40]	@ 0x28
 801468a:	4605      	mov	r5, r0
 801468c:	9b07      	ldr	r3, [sp, #28]
 801468e:	4621      	mov	r1, r4
 8014690:	3b01      	subs	r3, #1
 8014692:	4648      	mov	r0, r9
 8014694:	9300      	str	r3, [sp, #0]
 8014696:	f7ff fa9a 	bl	8013bce <quorem>
 801469a:	4639      	mov	r1, r7
 801469c:	9002      	str	r0, [sp, #8]
 801469e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80146a2:	4648      	mov	r0, r9
 80146a4:	f000 fc5a 	bl	8014f5c <__mcmp>
 80146a8:	462a      	mov	r2, r5
 80146aa:	9008      	str	r0, [sp, #32]
 80146ac:	4621      	mov	r1, r4
 80146ae:	4658      	mov	r0, fp
 80146b0:	f000 fc70 	bl	8014f94 <__mdiff>
 80146b4:	68c2      	ldr	r2, [r0, #12]
 80146b6:	4606      	mov	r6, r0
 80146b8:	bb02      	cbnz	r2, 80146fc <_dtoa_r+0xa1c>
 80146ba:	4601      	mov	r1, r0
 80146bc:	4648      	mov	r0, r9
 80146be:	f000 fc4d 	bl	8014f5c <__mcmp>
 80146c2:	4602      	mov	r2, r0
 80146c4:	4631      	mov	r1, r6
 80146c6:	4658      	mov	r0, fp
 80146c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80146ca:	f000 fa0d 	bl	8014ae8 <_Bfree>
 80146ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80146d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80146d2:	9e07      	ldr	r6, [sp, #28]
 80146d4:	ea43 0102 	orr.w	r1, r3, r2
 80146d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80146da:	4319      	orrs	r1, r3
 80146dc:	d110      	bne.n	8014700 <_dtoa_r+0xa20>
 80146de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80146e2:	d029      	beq.n	8014738 <_dtoa_r+0xa58>
 80146e4:	9b08      	ldr	r3, [sp, #32]
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	dd02      	ble.n	80146f0 <_dtoa_r+0xa10>
 80146ea:	9b02      	ldr	r3, [sp, #8]
 80146ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80146f0:	9b00      	ldr	r3, [sp, #0]
 80146f2:	f883 8000 	strb.w	r8, [r3]
 80146f6:	e63f      	b.n	8014378 <_dtoa_r+0x698>
 80146f8:	4628      	mov	r0, r5
 80146fa:	e7bb      	b.n	8014674 <_dtoa_r+0x994>
 80146fc:	2201      	movs	r2, #1
 80146fe:	e7e1      	b.n	80146c4 <_dtoa_r+0x9e4>
 8014700:	9b08      	ldr	r3, [sp, #32]
 8014702:	2b00      	cmp	r3, #0
 8014704:	db04      	blt.n	8014710 <_dtoa_r+0xa30>
 8014706:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014708:	430b      	orrs	r3, r1
 801470a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801470c:	430b      	orrs	r3, r1
 801470e:	d120      	bne.n	8014752 <_dtoa_r+0xa72>
 8014710:	2a00      	cmp	r2, #0
 8014712:	dded      	ble.n	80146f0 <_dtoa_r+0xa10>
 8014714:	4649      	mov	r1, r9
 8014716:	2201      	movs	r2, #1
 8014718:	4658      	mov	r0, fp
 801471a:	f000 fbb3 	bl	8014e84 <__lshift>
 801471e:	4621      	mov	r1, r4
 8014720:	4681      	mov	r9, r0
 8014722:	f000 fc1b 	bl	8014f5c <__mcmp>
 8014726:	2800      	cmp	r0, #0
 8014728:	dc03      	bgt.n	8014732 <_dtoa_r+0xa52>
 801472a:	d1e1      	bne.n	80146f0 <_dtoa_r+0xa10>
 801472c:	f018 0f01 	tst.w	r8, #1
 8014730:	d0de      	beq.n	80146f0 <_dtoa_r+0xa10>
 8014732:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8014736:	d1d8      	bne.n	80146ea <_dtoa_r+0xa0a>
 8014738:	9a00      	ldr	r2, [sp, #0]
 801473a:	2339      	movs	r3, #57	@ 0x39
 801473c:	7013      	strb	r3, [r2, #0]
 801473e:	4633      	mov	r3, r6
 8014740:	461e      	mov	r6, r3
 8014742:	3b01      	subs	r3, #1
 8014744:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8014748:	2a39      	cmp	r2, #57	@ 0x39
 801474a:	d052      	beq.n	80147f2 <_dtoa_r+0xb12>
 801474c:	3201      	adds	r2, #1
 801474e:	701a      	strb	r2, [r3, #0]
 8014750:	e612      	b.n	8014378 <_dtoa_r+0x698>
 8014752:	2a00      	cmp	r2, #0
 8014754:	dd07      	ble.n	8014766 <_dtoa_r+0xa86>
 8014756:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801475a:	d0ed      	beq.n	8014738 <_dtoa_r+0xa58>
 801475c:	9a00      	ldr	r2, [sp, #0]
 801475e:	f108 0301 	add.w	r3, r8, #1
 8014762:	7013      	strb	r3, [r2, #0]
 8014764:	e608      	b.n	8014378 <_dtoa_r+0x698>
 8014766:	9b07      	ldr	r3, [sp, #28]
 8014768:	9a07      	ldr	r2, [sp, #28]
 801476a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801476e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014770:	4293      	cmp	r3, r2
 8014772:	d028      	beq.n	80147c6 <_dtoa_r+0xae6>
 8014774:	4649      	mov	r1, r9
 8014776:	2300      	movs	r3, #0
 8014778:	220a      	movs	r2, #10
 801477a:	4658      	mov	r0, fp
 801477c:	f000 f9d6 	bl	8014b2c <__multadd>
 8014780:	42af      	cmp	r7, r5
 8014782:	4681      	mov	r9, r0
 8014784:	f04f 0300 	mov.w	r3, #0
 8014788:	f04f 020a 	mov.w	r2, #10
 801478c:	4639      	mov	r1, r7
 801478e:	4658      	mov	r0, fp
 8014790:	d107      	bne.n	80147a2 <_dtoa_r+0xac2>
 8014792:	f000 f9cb 	bl	8014b2c <__multadd>
 8014796:	4607      	mov	r7, r0
 8014798:	4605      	mov	r5, r0
 801479a:	9b07      	ldr	r3, [sp, #28]
 801479c:	3301      	adds	r3, #1
 801479e:	9307      	str	r3, [sp, #28]
 80147a0:	e774      	b.n	801468c <_dtoa_r+0x9ac>
 80147a2:	f000 f9c3 	bl	8014b2c <__multadd>
 80147a6:	4629      	mov	r1, r5
 80147a8:	4607      	mov	r7, r0
 80147aa:	2300      	movs	r3, #0
 80147ac:	220a      	movs	r2, #10
 80147ae:	4658      	mov	r0, fp
 80147b0:	f000 f9bc 	bl	8014b2c <__multadd>
 80147b4:	4605      	mov	r5, r0
 80147b6:	e7f0      	b.n	801479a <_dtoa_r+0xaba>
 80147b8:	9b00      	ldr	r3, [sp, #0]
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	bfcc      	ite	gt
 80147be:	461e      	movgt	r6, r3
 80147c0:	2601      	movle	r6, #1
 80147c2:	4456      	add	r6, sl
 80147c4:	2700      	movs	r7, #0
 80147c6:	4649      	mov	r1, r9
 80147c8:	2201      	movs	r2, #1
 80147ca:	4658      	mov	r0, fp
 80147cc:	f000 fb5a 	bl	8014e84 <__lshift>
 80147d0:	4621      	mov	r1, r4
 80147d2:	4681      	mov	r9, r0
 80147d4:	f000 fbc2 	bl	8014f5c <__mcmp>
 80147d8:	2800      	cmp	r0, #0
 80147da:	dcb0      	bgt.n	801473e <_dtoa_r+0xa5e>
 80147dc:	d102      	bne.n	80147e4 <_dtoa_r+0xb04>
 80147de:	f018 0f01 	tst.w	r8, #1
 80147e2:	d1ac      	bne.n	801473e <_dtoa_r+0xa5e>
 80147e4:	4633      	mov	r3, r6
 80147e6:	461e      	mov	r6, r3
 80147e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80147ec:	2a30      	cmp	r2, #48	@ 0x30
 80147ee:	d0fa      	beq.n	80147e6 <_dtoa_r+0xb06>
 80147f0:	e5c2      	b.n	8014378 <_dtoa_r+0x698>
 80147f2:	459a      	cmp	sl, r3
 80147f4:	d1a4      	bne.n	8014740 <_dtoa_r+0xa60>
 80147f6:	9b04      	ldr	r3, [sp, #16]
 80147f8:	3301      	adds	r3, #1
 80147fa:	9304      	str	r3, [sp, #16]
 80147fc:	2331      	movs	r3, #49	@ 0x31
 80147fe:	f88a 3000 	strb.w	r3, [sl]
 8014802:	e5b9      	b.n	8014378 <_dtoa_r+0x698>
 8014804:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014806:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8014864 <_dtoa_r+0xb84>
 801480a:	b11b      	cbz	r3, 8014814 <_dtoa_r+0xb34>
 801480c:	f10a 0308 	add.w	r3, sl, #8
 8014810:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8014812:	6013      	str	r3, [r2, #0]
 8014814:	4650      	mov	r0, sl
 8014816:	b019      	add	sp, #100	@ 0x64
 8014818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801481c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801481e:	2b01      	cmp	r3, #1
 8014820:	f77f ae37 	ble.w	8014492 <_dtoa_r+0x7b2>
 8014824:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014826:	930a      	str	r3, [sp, #40]	@ 0x28
 8014828:	2001      	movs	r0, #1
 801482a:	e655      	b.n	80144d8 <_dtoa_r+0x7f8>
 801482c:	9b00      	ldr	r3, [sp, #0]
 801482e:	2b00      	cmp	r3, #0
 8014830:	f77f aed6 	ble.w	80145e0 <_dtoa_r+0x900>
 8014834:	4656      	mov	r6, sl
 8014836:	4621      	mov	r1, r4
 8014838:	4648      	mov	r0, r9
 801483a:	f7ff f9c8 	bl	8013bce <quorem>
 801483e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8014842:	f806 8b01 	strb.w	r8, [r6], #1
 8014846:	9b00      	ldr	r3, [sp, #0]
 8014848:	eba6 020a 	sub.w	r2, r6, sl
 801484c:	4293      	cmp	r3, r2
 801484e:	ddb3      	ble.n	80147b8 <_dtoa_r+0xad8>
 8014850:	4649      	mov	r1, r9
 8014852:	2300      	movs	r3, #0
 8014854:	220a      	movs	r2, #10
 8014856:	4658      	mov	r0, fp
 8014858:	f000 f968 	bl	8014b2c <__multadd>
 801485c:	4681      	mov	r9, r0
 801485e:	e7ea      	b.n	8014836 <_dtoa_r+0xb56>
 8014860:	080174f8 	.word	0x080174f8
 8014864:	0801747c 	.word	0x0801747c

08014868 <_free_r>:
 8014868:	b538      	push	{r3, r4, r5, lr}
 801486a:	4605      	mov	r5, r0
 801486c:	2900      	cmp	r1, #0
 801486e:	d041      	beq.n	80148f4 <_free_r+0x8c>
 8014870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014874:	1f0c      	subs	r4, r1, #4
 8014876:	2b00      	cmp	r3, #0
 8014878:	bfb8      	it	lt
 801487a:	18e4      	addlt	r4, r4, r3
 801487c:	f000 f8e8 	bl	8014a50 <__malloc_lock>
 8014880:	4a1d      	ldr	r2, [pc, #116]	@ (80148f8 <_free_r+0x90>)
 8014882:	6813      	ldr	r3, [r2, #0]
 8014884:	b933      	cbnz	r3, 8014894 <_free_r+0x2c>
 8014886:	6063      	str	r3, [r4, #4]
 8014888:	6014      	str	r4, [r2, #0]
 801488a:	4628      	mov	r0, r5
 801488c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014890:	f000 b8e4 	b.w	8014a5c <__malloc_unlock>
 8014894:	42a3      	cmp	r3, r4
 8014896:	d908      	bls.n	80148aa <_free_r+0x42>
 8014898:	6820      	ldr	r0, [r4, #0]
 801489a:	1821      	adds	r1, r4, r0
 801489c:	428b      	cmp	r3, r1
 801489e:	bf01      	itttt	eq
 80148a0:	6819      	ldreq	r1, [r3, #0]
 80148a2:	685b      	ldreq	r3, [r3, #4]
 80148a4:	1809      	addeq	r1, r1, r0
 80148a6:	6021      	streq	r1, [r4, #0]
 80148a8:	e7ed      	b.n	8014886 <_free_r+0x1e>
 80148aa:	461a      	mov	r2, r3
 80148ac:	685b      	ldr	r3, [r3, #4]
 80148ae:	b10b      	cbz	r3, 80148b4 <_free_r+0x4c>
 80148b0:	42a3      	cmp	r3, r4
 80148b2:	d9fa      	bls.n	80148aa <_free_r+0x42>
 80148b4:	6811      	ldr	r1, [r2, #0]
 80148b6:	1850      	adds	r0, r2, r1
 80148b8:	42a0      	cmp	r0, r4
 80148ba:	d10b      	bne.n	80148d4 <_free_r+0x6c>
 80148bc:	6820      	ldr	r0, [r4, #0]
 80148be:	4401      	add	r1, r0
 80148c0:	1850      	adds	r0, r2, r1
 80148c2:	4283      	cmp	r3, r0
 80148c4:	6011      	str	r1, [r2, #0]
 80148c6:	d1e0      	bne.n	801488a <_free_r+0x22>
 80148c8:	6818      	ldr	r0, [r3, #0]
 80148ca:	685b      	ldr	r3, [r3, #4]
 80148cc:	6053      	str	r3, [r2, #4]
 80148ce:	4408      	add	r0, r1
 80148d0:	6010      	str	r0, [r2, #0]
 80148d2:	e7da      	b.n	801488a <_free_r+0x22>
 80148d4:	d902      	bls.n	80148dc <_free_r+0x74>
 80148d6:	230c      	movs	r3, #12
 80148d8:	602b      	str	r3, [r5, #0]
 80148da:	e7d6      	b.n	801488a <_free_r+0x22>
 80148dc:	6820      	ldr	r0, [r4, #0]
 80148de:	1821      	adds	r1, r4, r0
 80148e0:	428b      	cmp	r3, r1
 80148e2:	bf04      	itt	eq
 80148e4:	6819      	ldreq	r1, [r3, #0]
 80148e6:	685b      	ldreq	r3, [r3, #4]
 80148e8:	6063      	str	r3, [r4, #4]
 80148ea:	bf04      	itt	eq
 80148ec:	1809      	addeq	r1, r1, r0
 80148ee:	6021      	streq	r1, [r4, #0]
 80148f0:	6054      	str	r4, [r2, #4]
 80148f2:	e7ca      	b.n	801488a <_free_r+0x22>
 80148f4:	bd38      	pop	{r3, r4, r5, pc}
 80148f6:	bf00      	nop
 80148f8:	20006b00 	.word	0x20006b00

080148fc <malloc>:
 80148fc:	4b02      	ldr	r3, [pc, #8]	@ (8014908 <malloc+0xc>)
 80148fe:	4601      	mov	r1, r0
 8014900:	6818      	ldr	r0, [r3, #0]
 8014902:	f000 b825 	b.w	8014950 <_malloc_r>
 8014906:	bf00      	nop
 8014908:	20000034 	.word	0x20000034

0801490c <sbrk_aligned>:
 801490c:	b570      	push	{r4, r5, r6, lr}
 801490e:	4e0f      	ldr	r6, [pc, #60]	@ (801494c <sbrk_aligned+0x40>)
 8014910:	460c      	mov	r4, r1
 8014912:	6831      	ldr	r1, [r6, #0]
 8014914:	4605      	mov	r5, r0
 8014916:	b911      	cbnz	r1, 801491e <sbrk_aligned+0x12>
 8014918:	f001 f81c 	bl	8015954 <_sbrk_r>
 801491c:	6030      	str	r0, [r6, #0]
 801491e:	4621      	mov	r1, r4
 8014920:	4628      	mov	r0, r5
 8014922:	f001 f817 	bl	8015954 <_sbrk_r>
 8014926:	1c43      	adds	r3, r0, #1
 8014928:	d103      	bne.n	8014932 <sbrk_aligned+0x26>
 801492a:	f04f 34ff 	mov.w	r4, #4294967295
 801492e:	4620      	mov	r0, r4
 8014930:	bd70      	pop	{r4, r5, r6, pc}
 8014932:	1cc4      	adds	r4, r0, #3
 8014934:	f024 0403 	bic.w	r4, r4, #3
 8014938:	42a0      	cmp	r0, r4
 801493a:	d0f8      	beq.n	801492e <sbrk_aligned+0x22>
 801493c:	1a21      	subs	r1, r4, r0
 801493e:	4628      	mov	r0, r5
 8014940:	f001 f808 	bl	8015954 <_sbrk_r>
 8014944:	3001      	adds	r0, #1
 8014946:	d1f2      	bne.n	801492e <sbrk_aligned+0x22>
 8014948:	e7ef      	b.n	801492a <sbrk_aligned+0x1e>
 801494a:	bf00      	nop
 801494c:	20006afc 	.word	0x20006afc

08014950 <_malloc_r>:
 8014950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014954:	1ccd      	adds	r5, r1, #3
 8014956:	f025 0503 	bic.w	r5, r5, #3
 801495a:	3508      	adds	r5, #8
 801495c:	2d0c      	cmp	r5, #12
 801495e:	bf38      	it	cc
 8014960:	250c      	movcc	r5, #12
 8014962:	2d00      	cmp	r5, #0
 8014964:	4606      	mov	r6, r0
 8014966:	db01      	blt.n	801496c <_malloc_r+0x1c>
 8014968:	42a9      	cmp	r1, r5
 801496a:	d904      	bls.n	8014976 <_malloc_r+0x26>
 801496c:	230c      	movs	r3, #12
 801496e:	6033      	str	r3, [r6, #0]
 8014970:	2000      	movs	r0, #0
 8014972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014976:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014a4c <_malloc_r+0xfc>
 801497a:	f000 f869 	bl	8014a50 <__malloc_lock>
 801497e:	f8d8 3000 	ldr.w	r3, [r8]
 8014982:	461c      	mov	r4, r3
 8014984:	bb44      	cbnz	r4, 80149d8 <_malloc_r+0x88>
 8014986:	4629      	mov	r1, r5
 8014988:	4630      	mov	r0, r6
 801498a:	f7ff ffbf 	bl	801490c <sbrk_aligned>
 801498e:	1c43      	adds	r3, r0, #1
 8014990:	4604      	mov	r4, r0
 8014992:	d158      	bne.n	8014a46 <_malloc_r+0xf6>
 8014994:	f8d8 4000 	ldr.w	r4, [r8]
 8014998:	4627      	mov	r7, r4
 801499a:	2f00      	cmp	r7, #0
 801499c:	d143      	bne.n	8014a26 <_malloc_r+0xd6>
 801499e:	2c00      	cmp	r4, #0
 80149a0:	d04b      	beq.n	8014a3a <_malloc_r+0xea>
 80149a2:	6823      	ldr	r3, [r4, #0]
 80149a4:	4639      	mov	r1, r7
 80149a6:	4630      	mov	r0, r6
 80149a8:	eb04 0903 	add.w	r9, r4, r3
 80149ac:	f000 ffd2 	bl	8015954 <_sbrk_r>
 80149b0:	4581      	cmp	r9, r0
 80149b2:	d142      	bne.n	8014a3a <_malloc_r+0xea>
 80149b4:	6821      	ldr	r1, [r4, #0]
 80149b6:	1a6d      	subs	r5, r5, r1
 80149b8:	4629      	mov	r1, r5
 80149ba:	4630      	mov	r0, r6
 80149bc:	f7ff ffa6 	bl	801490c <sbrk_aligned>
 80149c0:	3001      	adds	r0, #1
 80149c2:	d03a      	beq.n	8014a3a <_malloc_r+0xea>
 80149c4:	6823      	ldr	r3, [r4, #0]
 80149c6:	442b      	add	r3, r5
 80149c8:	6023      	str	r3, [r4, #0]
 80149ca:	f8d8 3000 	ldr.w	r3, [r8]
 80149ce:	685a      	ldr	r2, [r3, #4]
 80149d0:	bb62      	cbnz	r2, 8014a2c <_malloc_r+0xdc>
 80149d2:	f8c8 7000 	str.w	r7, [r8]
 80149d6:	e00f      	b.n	80149f8 <_malloc_r+0xa8>
 80149d8:	6822      	ldr	r2, [r4, #0]
 80149da:	1b52      	subs	r2, r2, r5
 80149dc:	d420      	bmi.n	8014a20 <_malloc_r+0xd0>
 80149de:	2a0b      	cmp	r2, #11
 80149e0:	d917      	bls.n	8014a12 <_malloc_r+0xc2>
 80149e2:	1961      	adds	r1, r4, r5
 80149e4:	42a3      	cmp	r3, r4
 80149e6:	6025      	str	r5, [r4, #0]
 80149e8:	bf18      	it	ne
 80149ea:	6059      	strne	r1, [r3, #4]
 80149ec:	6863      	ldr	r3, [r4, #4]
 80149ee:	bf08      	it	eq
 80149f0:	f8c8 1000 	streq.w	r1, [r8]
 80149f4:	5162      	str	r2, [r4, r5]
 80149f6:	604b      	str	r3, [r1, #4]
 80149f8:	4630      	mov	r0, r6
 80149fa:	f000 f82f 	bl	8014a5c <__malloc_unlock>
 80149fe:	f104 000b 	add.w	r0, r4, #11
 8014a02:	1d23      	adds	r3, r4, #4
 8014a04:	f020 0007 	bic.w	r0, r0, #7
 8014a08:	1ac2      	subs	r2, r0, r3
 8014a0a:	bf1c      	itt	ne
 8014a0c:	1a1b      	subne	r3, r3, r0
 8014a0e:	50a3      	strne	r3, [r4, r2]
 8014a10:	e7af      	b.n	8014972 <_malloc_r+0x22>
 8014a12:	6862      	ldr	r2, [r4, #4]
 8014a14:	42a3      	cmp	r3, r4
 8014a16:	bf0c      	ite	eq
 8014a18:	f8c8 2000 	streq.w	r2, [r8]
 8014a1c:	605a      	strne	r2, [r3, #4]
 8014a1e:	e7eb      	b.n	80149f8 <_malloc_r+0xa8>
 8014a20:	4623      	mov	r3, r4
 8014a22:	6864      	ldr	r4, [r4, #4]
 8014a24:	e7ae      	b.n	8014984 <_malloc_r+0x34>
 8014a26:	463c      	mov	r4, r7
 8014a28:	687f      	ldr	r7, [r7, #4]
 8014a2a:	e7b6      	b.n	801499a <_malloc_r+0x4a>
 8014a2c:	461a      	mov	r2, r3
 8014a2e:	685b      	ldr	r3, [r3, #4]
 8014a30:	42a3      	cmp	r3, r4
 8014a32:	d1fb      	bne.n	8014a2c <_malloc_r+0xdc>
 8014a34:	2300      	movs	r3, #0
 8014a36:	6053      	str	r3, [r2, #4]
 8014a38:	e7de      	b.n	80149f8 <_malloc_r+0xa8>
 8014a3a:	230c      	movs	r3, #12
 8014a3c:	6033      	str	r3, [r6, #0]
 8014a3e:	4630      	mov	r0, r6
 8014a40:	f000 f80c 	bl	8014a5c <__malloc_unlock>
 8014a44:	e794      	b.n	8014970 <_malloc_r+0x20>
 8014a46:	6005      	str	r5, [r0, #0]
 8014a48:	e7d6      	b.n	80149f8 <_malloc_r+0xa8>
 8014a4a:	bf00      	nop
 8014a4c:	20006b00 	.word	0x20006b00

08014a50 <__malloc_lock>:
 8014a50:	4801      	ldr	r0, [pc, #4]	@ (8014a58 <__malloc_lock+0x8>)
 8014a52:	f7ff b8ac 	b.w	8013bae <__retarget_lock_acquire_recursive>
 8014a56:	bf00      	nop
 8014a58:	20006af8 	.word	0x20006af8

08014a5c <__malloc_unlock>:
 8014a5c:	4801      	ldr	r0, [pc, #4]	@ (8014a64 <__malloc_unlock+0x8>)
 8014a5e:	f7ff b8a7 	b.w	8013bb0 <__retarget_lock_release_recursive>
 8014a62:	bf00      	nop
 8014a64:	20006af8 	.word	0x20006af8

08014a68 <_Balloc>:
 8014a68:	b570      	push	{r4, r5, r6, lr}
 8014a6a:	69c6      	ldr	r6, [r0, #28]
 8014a6c:	4604      	mov	r4, r0
 8014a6e:	460d      	mov	r5, r1
 8014a70:	b976      	cbnz	r6, 8014a90 <_Balloc+0x28>
 8014a72:	2010      	movs	r0, #16
 8014a74:	f7ff ff42 	bl	80148fc <malloc>
 8014a78:	4602      	mov	r2, r0
 8014a7a:	61e0      	str	r0, [r4, #28]
 8014a7c:	b920      	cbnz	r0, 8014a88 <_Balloc+0x20>
 8014a7e:	4b18      	ldr	r3, [pc, #96]	@ (8014ae0 <_Balloc+0x78>)
 8014a80:	4818      	ldr	r0, [pc, #96]	@ (8014ae4 <_Balloc+0x7c>)
 8014a82:	216b      	movs	r1, #107	@ 0x6b
 8014a84:	f000 ff76 	bl	8015974 <__assert_func>
 8014a88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014a8c:	6006      	str	r6, [r0, #0]
 8014a8e:	60c6      	str	r6, [r0, #12]
 8014a90:	69e6      	ldr	r6, [r4, #28]
 8014a92:	68f3      	ldr	r3, [r6, #12]
 8014a94:	b183      	cbz	r3, 8014ab8 <_Balloc+0x50>
 8014a96:	69e3      	ldr	r3, [r4, #28]
 8014a98:	68db      	ldr	r3, [r3, #12]
 8014a9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014a9e:	b9b8      	cbnz	r0, 8014ad0 <_Balloc+0x68>
 8014aa0:	2101      	movs	r1, #1
 8014aa2:	fa01 f605 	lsl.w	r6, r1, r5
 8014aa6:	1d72      	adds	r2, r6, #5
 8014aa8:	0092      	lsls	r2, r2, #2
 8014aaa:	4620      	mov	r0, r4
 8014aac:	f000 ff80 	bl	80159b0 <_calloc_r>
 8014ab0:	b160      	cbz	r0, 8014acc <_Balloc+0x64>
 8014ab2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014ab6:	e00e      	b.n	8014ad6 <_Balloc+0x6e>
 8014ab8:	2221      	movs	r2, #33	@ 0x21
 8014aba:	2104      	movs	r1, #4
 8014abc:	4620      	mov	r0, r4
 8014abe:	f000 ff77 	bl	80159b0 <_calloc_r>
 8014ac2:	69e3      	ldr	r3, [r4, #28]
 8014ac4:	60f0      	str	r0, [r6, #12]
 8014ac6:	68db      	ldr	r3, [r3, #12]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d1e4      	bne.n	8014a96 <_Balloc+0x2e>
 8014acc:	2000      	movs	r0, #0
 8014ace:	bd70      	pop	{r4, r5, r6, pc}
 8014ad0:	6802      	ldr	r2, [r0, #0]
 8014ad2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014ad6:	2300      	movs	r3, #0
 8014ad8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014adc:	e7f7      	b.n	8014ace <_Balloc+0x66>
 8014ade:	bf00      	nop
 8014ae0:	08017489 	.word	0x08017489
 8014ae4:	08017509 	.word	0x08017509

08014ae8 <_Bfree>:
 8014ae8:	b570      	push	{r4, r5, r6, lr}
 8014aea:	69c6      	ldr	r6, [r0, #28]
 8014aec:	4605      	mov	r5, r0
 8014aee:	460c      	mov	r4, r1
 8014af0:	b976      	cbnz	r6, 8014b10 <_Bfree+0x28>
 8014af2:	2010      	movs	r0, #16
 8014af4:	f7ff ff02 	bl	80148fc <malloc>
 8014af8:	4602      	mov	r2, r0
 8014afa:	61e8      	str	r0, [r5, #28]
 8014afc:	b920      	cbnz	r0, 8014b08 <_Bfree+0x20>
 8014afe:	4b09      	ldr	r3, [pc, #36]	@ (8014b24 <_Bfree+0x3c>)
 8014b00:	4809      	ldr	r0, [pc, #36]	@ (8014b28 <_Bfree+0x40>)
 8014b02:	218f      	movs	r1, #143	@ 0x8f
 8014b04:	f000 ff36 	bl	8015974 <__assert_func>
 8014b08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014b0c:	6006      	str	r6, [r0, #0]
 8014b0e:	60c6      	str	r6, [r0, #12]
 8014b10:	b13c      	cbz	r4, 8014b22 <_Bfree+0x3a>
 8014b12:	69eb      	ldr	r3, [r5, #28]
 8014b14:	6862      	ldr	r2, [r4, #4]
 8014b16:	68db      	ldr	r3, [r3, #12]
 8014b18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014b1c:	6021      	str	r1, [r4, #0]
 8014b1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014b22:	bd70      	pop	{r4, r5, r6, pc}
 8014b24:	08017489 	.word	0x08017489
 8014b28:	08017509 	.word	0x08017509

08014b2c <__multadd>:
 8014b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b30:	690d      	ldr	r5, [r1, #16]
 8014b32:	4607      	mov	r7, r0
 8014b34:	460c      	mov	r4, r1
 8014b36:	461e      	mov	r6, r3
 8014b38:	f101 0c14 	add.w	ip, r1, #20
 8014b3c:	2000      	movs	r0, #0
 8014b3e:	f8dc 3000 	ldr.w	r3, [ip]
 8014b42:	b299      	uxth	r1, r3
 8014b44:	fb02 6101 	mla	r1, r2, r1, r6
 8014b48:	0c1e      	lsrs	r6, r3, #16
 8014b4a:	0c0b      	lsrs	r3, r1, #16
 8014b4c:	fb02 3306 	mla	r3, r2, r6, r3
 8014b50:	b289      	uxth	r1, r1
 8014b52:	3001      	adds	r0, #1
 8014b54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014b58:	4285      	cmp	r5, r0
 8014b5a:	f84c 1b04 	str.w	r1, [ip], #4
 8014b5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014b62:	dcec      	bgt.n	8014b3e <__multadd+0x12>
 8014b64:	b30e      	cbz	r6, 8014baa <__multadd+0x7e>
 8014b66:	68a3      	ldr	r3, [r4, #8]
 8014b68:	42ab      	cmp	r3, r5
 8014b6a:	dc19      	bgt.n	8014ba0 <__multadd+0x74>
 8014b6c:	6861      	ldr	r1, [r4, #4]
 8014b6e:	4638      	mov	r0, r7
 8014b70:	3101      	adds	r1, #1
 8014b72:	f7ff ff79 	bl	8014a68 <_Balloc>
 8014b76:	4680      	mov	r8, r0
 8014b78:	b928      	cbnz	r0, 8014b86 <__multadd+0x5a>
 8014b7a:	4602      	mov	r2, r0
 8014b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8014bb0 <__multadd+0x84>)
 8014b7e:	480d      	ldr	r0, [pc, #52]	@ (8014bb4 <__multadd+0x88>)
 8014b80:	21ba      	movs	r1, #186	@ 0xba
 8014b82:	f000 fef7 	bl	8015974 <__assert_func>
 8014b86:	6922      	ldr	r2, [r4, #16]
 8014b88:	3202      	adds	r2, #2
 8014b8a:	f104 010c 	add.w	r1, r4, #12
 8014b8e:	0092      	lsls	r2, r2, #2
 8014b90:	300c      	adds	r0, #12
 8014b92:	f7ff f80e 	bl	8013bb2 <memcpy>
 8014b96:	4621      	mov	r1, r4
 8014b98:	4638      	mov	r0, r7
 8014b9a:	f7ff ffa5 	bl	8014ae8 <_Bfree>
 8014b9e:	4644      	mov	r4, r8
 8014ba0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014ba4:	3501      	adds	r5, #1
 8014ba6:	615e      	str	r6, [r3, #20]
 8014ba8:	6125      	str	r5, [r4, #16]
 8014baa:	4620      	mov	r0, r4
 8014bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bb0:	080174f8 	.word	0x080174f8
 8014bb4:	08017509 	.word	0x08017509

08014bb8 <__hi0bits>:
 8014bb8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8014bbc:	4603      	mov	r3, r0
 8014bbe:	bf36      	itet	cc
 8014bc0:	0403      	lslcc	r3, r0, #16
 8014bc2:	2000      	movcs	r0, #0
 8014bc4:	2010      	movcc	r0, #16
 8014bc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014bca:	bf3c      	itt	cc
 8014bcc:	021b      	lslcc	r3, r3, #8
 8014bce:	3008      	addcc	r0, #8
 8014bd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014bd4:	bf3c      	itt	cc
 8014bd6:	011b      	lslcc	r3, r3, #4
 8014bd8:	3004      	addcc	r0, #4
 8014bda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014bde:	bf3c      	itt	cc
 8014be0:	009b      	lslcc	r3, r3, #2
 8014be2:	3002      	addcc	r0, #2
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	db05      	blt.n	8014bf4 <__hi0bits+0x3c>
 8014be8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8014bec:	f100 0001 	add.w	r0, r0, #1
 8014bf0:	bf08      	it	eq
 8014bf2:	2020      	moveq	r0, #32
 8014bf4:	4770      	bx	lr

08014bf6 <__lo0bits>:
 8014bf6:	6803      	ldr	r3, [r0, #0]
 8014bf8:	4602      	mov	r2, r0
 8014bfa:	f013 0007 	ands.w	r0, r3, #7
 8014bfe:	d00b      	beq.n	8014c18 <__lo0bits+0x22>
 8014c00:	07d9      	lsls	r1, r3, #31
 8014c02:	d421      	bmi.n	8014c48 <__lo0bits+0x52>
 8014c04:	0798      	lsls	r0, r3, #30
 8014c06:	bf49      	itett	mi
 8014c08:	085b      	lsrmi	r3, r3, #1
 8014c0a:	089b      	lsrpl	r3, r3, #2
 8014c0c:	2001      	movmi	r0, #1
 8014c0e:	6013      	strmi	r3, [r2, #0]
 8014c10:	bf5c      	itt	pl
 8014c12:	6013      	strpl	r3, [r2, #0]
 8014c14:	2002      	movpl	r0, #2
 8014c16:	4770      	bx	lr
 8014c18:	b299      	uxth	r1, r3
 8014c1a:	b909      	cbnz	r1, 8014c20 <__lo0bits+0x2a>
 8014c1c:	0c1b      	lsrs	r3, r3, #16
 8014c1e:	2010      	movs	r0, #16
 8014c20:	b2d9      	uxtb	r1, r3
 8014c22:	b909      	cbnz	r1, 8014c28 <__lo0bits+0x32>
 8014c24:	3008      	adds	r0, #8
 8014c26:	0a1b      	lsrs	r3, r3, #8
 8014c28:	0719      	lsls	r1, r3, #28
 8014c2a:	bf04      	itt	eq
 8014c2c:	091b      	lsreq	r3, r3, #4
 8014c2e:	3004      	addeq	r0, #4
 8014c30:	0799      	lsls	r1, r3, #30
 8014c32:	bf04      	itt	eq
 8014c34:	089b      	lsreq	r3, r3, #2
 8014c36:	3002      	addeq	r0, #2
 8014c38:	07d9      	lsls	r1, r3, #31
 8014c3a:	d403      	bmi.n	8014c44 <__lo0bits+0x4e>
 8014c3c:	085b      	lsrs	r3, r3, #1
 8014c3e:	f100 0001 	add.w	r0, r0, #1
 8014c42:	d003      	beq.n	8014c4c <__lo0bits+0x56>
 8014c44:	6013      	str	r3, [r2, #0]
 8014c46:	4770      	bx	lr
 8014c48:	2000      	movs	r0, #0
 8014c4a:	4770      	bx	lr
 8014c4c:	2020      	movs	r0, #32
 8014c4e:	4770      	bx	lr

08014c50 <__i2b>:
 8014c50:	b510      	push	{r4, lr}
 8014c52:	460c      	mov	r4, r1
 8014c54:	2101      	movs	r1, #1
 8014c56:	f7ff ff07 	bl	8014a68 <_Balloc>
 8014c5a:	4602      	mov	r2, r0
 8014c5c:	b928      	cbnz	r0, 8014c6a <__i2b+0x1a>
 8014c5e:	4b05      	ldr	r3, [pc, #20]	@ (8014c74 <__i2b+0x24>)
 8014c60:	4805      	ldr	r0, [pc, #20]	@ (8014c78 <__i2b+0x28>)
 8014c62:	f240 1145 	movw	r1, #325	@ 0x145
 8014c66:	f000 fe85 	bl	8015974 <__assert_func>
 8014c6a:	2301      	movs	r3, #1
 8014c6c:	6144      	str	r4, [r0, #20]
 8014c6e:	6103      	str	r3, [r0, #16]
 8014c70:	bd10      	pop	{r4, pc}
 8014c72:	bf00      	nop
 8014c74:	080174f8 	.word	0x080174f8
 8014c78:	08017509 	.word	0x08017509

08014c7c <__multiply>:
 8014c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c80:	4614      	mov	r4, r2
 8014c82:	690a      	ldr	r2, [r1, #16]
 8014c84:	6923      	ldr	r3, [r4, #16]
 8014c86:	429a      	cmp	r2, r3
 8014c88:	bfa8      	it	ge
 8014c8a:	4623      	movge	r3, r4
 8014c8c:	460f      	mov	r7, r1
 8014c8e:	bfa4      	itt	ge
 8014c90:	460c      	movge	r4, r1
 8014c92:	461f      	movge	r7, r3
 8014c94:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8014c98:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8014c9c:	68a3      	ldr	r3, [r4, #8]
 8014c9e:	6861      	ldr	r1, [r4, #4]
 8014ca0:	eb0a 0609 	add.w	r6, sl, r9
 8014ca4:	42b3      	cmp	r3, r6
 8014ca6:	b085      	sub	sp, #20
 8014ca8:	bfb8      	it	lt
 8014caa:	3101      	addlt	r1, #1
 8014cac:	f7ff fedc 	bl	8014a68 <_Balloc>
 8014cb0:	b930      	cbnz	r0, 8014cc0 <__multiply+0x44>
 8014cb2:	4602      	mov	r2, r0
 8014cb4:	4b44      	ldr	r3, [pc, #272]	@ (8014dc8 <__multiply+0x14c>)
 8014cb6:	4845      	ldr	r0, [pc, #276]	@ (8014dcc <__multiply+0x150>)
 8014cb8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8014cbc:	f000 fe5a 	bl	8015974 <__assert_func>
 8014cc0:	f100 0514 	add.w	r5, r0, #20
 8014cc4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014cc8:	462b      	mov	r3, r5
 8014cca:	2200      	movs	r2, #0
 8014ccc:	4543      	cmp	r3, r8
 8014cce:	d321      	bcc.n	8014d14 <__multiply+0x98>
 8014cd0:	f107 0114 	add.w	r1, r7, #20
 8014cd4:	f104 0214 	add.w	r2, r4, #20
 8014cd8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8014cdc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8014ce0:	9302      	str	r3, [sp, #8]
 8014ce2:	1b13      	subs	r3, r2, r4
 8014ce4:	3b15      	subs	r3, #21
 8014ce6:	f023 0303 	bic.w	r3, r3, #3
 8014cea:	3304      	adds	r3, #4
 8014cec:	f104 0715 	add.w	r7, r4, #21
 8014cf0:	42ba      	cmp	r2, r7
 8014cf2:	bf38      	it	cc
 8014cf4:	2304      	movcc	r3, #4
 8014cf6:	9301      	str	r3, [sp, #4]
 8014cf8:	9b02      	ldr	r3, [sp, #8]
 8014cfa:	9103      	str	r1, [sp, #12]
 8014cfc:	428b      	cmp	r3, r1
 8014cfe:	d80c      	bhi.n	8014d1a <__multiply+0x9e>
 8014d00:	2e00      	cmp	r6, #0
 8014d02:	dd03      	ble.n	8014d0c <__multiply+0x90>
 8014d04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d05b      	beq.n	8014dc4 <__multiply+0x148>
 8014d0c:	6106      	str	r6, [r0, #16]
 8014d0e:	b005      	add	sp, #20
 8014d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d14:	f843 2b04 	str.w	r2, [r3], #4
 8014d18:	e7d8      	b.n	8014ccc <__multiply+0x50>
 8014d1a:	f8b1 a000 	ldrh.w	sl, [r1]
 8014d1e:	f1ba 0f00 	cmp.w	sl, #0
 8014d22:	d024      	beq.n	8014d6e <__multiply+0xf2>
 8014d24:	f104 0e14 	add.w	lr, r4, #20
 8014d28:	46a9      	mov	r9, r5
 8014d2a:	f04f 0c00 	mov.w	ip, #0
 8014d2e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014d32:	f8d9 3000 	ldr.w	r3, [r9]
 8014d36:	fa1f fb87 	uxth.w	fp, r7
 8014d3a:	b29b      	uxth	r3, r3
 8014d3c:	fb0a 330b 	mla	r3, sl, fp, r3
 8014d40:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8014d44:	f8d9 7000 	ldr.w	r7, [r9]
 8014d48:	4463      	add	r3, ip
 8014d4a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8014d4e:	fb0a c70b 	mla	r7, sl, fp, ip
 8014d52:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8014d56:	b29b      	uxth	r3, r3
 8014d58:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014d5c:	4572      	cmp	r2, lr
 8014d5e:	f849 3b04 	str.w	r3, [r9], #4
 8014d62:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8014d66:	d8e2      	bhi.n	8014d2e <__multiply+0xb2>
 8014d68:	9b01      	ldr	r3, [sp, #4]
 8014d6a:	f845 c003 	str.w	ip, [r5, r3]
 8014d6e:	9b03      	ldr	r3, [sp, #12]
 8014d70:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8014d74:	3104      	adds	r1, #4
 8014d76:	f1b9 0f00 	cmp.w	r9, #0
 8014d7a:	d021      	beq.n	8014dc0 <__multiply+0x144>
 8014d7c:	682b      	ldr	r3, [r5, #0]
 8014d7e:	f104 0c14 	add.w	ip, r4, #20
 8014d82:	46ae      	mov	lr, r5
 8014d84:	f04f 0a00 	mov.w	sl, #0
 8014d88:	f8bc b000 	ldrh.w	fp, [ip]
 8014d8c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8014d90:	fb09 770b 	mla	r7, r9, fp, r7
 8014d94:	4457      	add	r7, sl
 8014d96:	b29b      	uxth	r3, r3
 8014d98:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014d9c:	f84e 3b04 	str.w	r3, [lr], #4
 8014da0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014da4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014da8:	f8be 3000 	ldrh.w	r3, [lr]
 8014dac:	fb09 330a 	mla	r3, r9, sl, r3
 8014db0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8014db4:	4562      	cmp	r2, ip
 8014db6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014dba:	d8e5      	bhi.n	8014d88 <__multiply+0x10c>
 8014dbc:	9f01      	ldr	r7, [sp, #4]
 8014dbe:	51eb      	str	r3, [r5, r7]
 8014dc0:	3504      	adds	r5, #4
 8014dc2:	e799      	b.n	8014cf8 <__multiply+0x7c>
 8014dc4:	3e01      	subs	r6, #1
 8014dc6:	e79b      	b.n	8014d00 <__multiply+0x84>
 8014dc8:	080174f8 	.word	0x080174f8
 8014dcc:	08017509 	.word	0x08017509

08014dd0 <__pow5mult>:
 8014dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014dd4:	4615      	mov	r5, r2
 8014dd6:	f012 0203 	ands.w	r2, r2, #3
 8014dda:	4607      	mov	r7, r0
 8014ddc:	460e      	mov	r6, r1
 8014dde:	d007      	beq.n	8014df0 <__pow5mult+0x20>
 8014de0:	4c25      	ldr	r4, [pc, #148]	@ (8014e78 <__pow5mult+0xa8>)
 8014de2:	3a01      	subs	r2, #1
 8014de4:	2300      	movs	r3, #0
 8014de6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014dea:	f7ff fe9f 	bl	8014b2c <__multadd>
 8014dee:	4606      	mov	r6, r0
 8014df0:	10ad      	asrs	r5, r5, #2
 8014df2:	d03d      	beq.n	8014e70 <__pow5mult+0xa0>
 8014df4:	69fc      	ldr	r4, [r7, #28]
 8014df6:	b97c      	cbnz	r4, 8014e18 <__pow5mult+0x48>
 8014df8:	2010      	movs	r0, #16
 8014dfa:	f7ff fd7f 	bl	80148fc <malloc>
 8014dfe:	4602      	mov	r2, r0
 8014e00:	61f8      	str	r0, [r7, #28]
 8014e02:	b928      	cbnz	r0, 8014e10 <__pow5mult+0x40>
 8014e04:	4b1d      	ldr	r3, [pc, #116]	@ (8014e7c <__pow5mult+0xac>)
 8014e06:	481e      	ldr	r0, [pc, #120]	@ (8014e80 <__pow5mult+0xb0>)
 8014e08:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8014e0c:	f000 fdb2 	bl	8015974 <__assert_func>
 8014e10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014e14:	6004      	str	r4, [r0, #0]
 8014e16:	60c4      	str	r4, [r0, #12]
 8014e18:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8014e1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014e20:	b94c      	cbnz	r4, 8014e36 <__pow5mult+0x66>
 8014e22:	f240 2171 	movw	r1, #625	@ 0x271
 8014e26:	4638      	mov	r0, r7
 8014e28:	f7ff ff12 	bl	8014c50 <__i2b>
 8014e2c:	2300      	movs	r3, #0
 8014e2e:	f8c8 0008 	str.w	r0, [r8, #8]
 8014e32:	4604      	mov	r4, r0
 8014e34:	6003      	str	r3, [r0, #0]
 8014e36:	f04f 0900 	mov.w	r9, #0
 8014e3a:	07eb      	lsls	r3, r5, #31
 8014e3c:	d50a      	bpl.n	8014e54 <__pow5mult+0x84>
 8014e3e:	4631      	mov	r1, r6
 8014e40:	4622      	mov	r2, r4
 8014e42:	4638      	mov	r0, r7
 8014e44:	f7ff ff1a 	bl	8014c7c <__multiply>
 8014e48:	4631      	mov	r1, r6
 8014e4a:	4680      	mov	r8, r0
 8014e4c:	4638      	mov	r0, r7
 8014e4e:	f7ff fe4b 	bl	8014ae8 <_Bfree>
 8014e52:	4646      	mov	r6, r8
 8014e54:	106d      	asrs	r5, r5, #1
 8014e56:	d00b      	beq.n	8014e70 <__pow5mult+0xa0>
 8014e58:	6820      	ldr	r0, [r4, #0]
 8014e5a:	b938      	cbnz	r0, 8014e6c <__pow5mult+0x9c>
 8014e5c:	4622      	mov	r2, r4
 8014e5e:	4621      	mov	r1, r4
 8014e60:	4638      	mov	r0, r7
 8014e62:	f7ff ff0b 	bl	8014c7c <__multiply>
 8014e66:	6020      	str	r0, [r4, #0]
 8014e68:	f8c0 9000 	str.w	r9, [r0]
 8014e6c:	4604      	mov	r4, r0
 8014e6e:	e7e4      	b.n	8014e3a <__pow5mult+0x6a>
 8014e70:	4630      	mov	r0, r6
 8014e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014e76:	bf00      	nop
 8014e78:	08017564 	.word	0x08017564
 8014e7c:	08017489 	.word	0x08017489
 8014e80:	08017509 	.word	0x08017509

08014e84 <__lshift>:
 8014e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e88:	460c      	mov	r4, r1
 8014e8a:	6849      	ldr	r1, [r1, #4]
 8014e8c:	6923      	ldr	r3, [r4, #16]
 8014e8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014e92:	68a3      	ldr	r3, [r4, #8]
 8014e94:	4607      	mov	r7, r0
 8014e96:	4691      	mov	r9, r2
 8014e98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014e9c:	f108 0601 	add.w	r6, r8, #1
 8014ea0:	42b3      	cmp	r3, r6
 8014ea2:	db0b      	blt.n	8014ebc <__lshift+0x38>
 8014ea4:	4638      	mov	r0, r7
 8014ea6:	f7ff fddf 	bl	8014a68 <_Balloc>
 8014eaa:	4605      	mov	r5, r0
 8014eac:	b948      	cbnz	r0, 8014ec2 <__lshift+0x3e>
 8014eae:	4602      	mov	r2, r0
 8014eb0:	4b28      	ldr	r3, [pc, #160]	@ (8014f54 <__lshift+0xd0>)
 8014eb2:	4829      	ldr	r0, [pc, #164]	@ (8014f58 <__lshift+0xd4>)
 8014eb4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014eb8:	f000 fd5c 	bl	8015974 <__assert_func>
 8014ebc:	3101      	adds	r1, #1
 8014ebe:	005b      	lsls	r3, r3, #1
 8014ec0:	e7ee      	b.n	8014ea0 <__lshift+0x1c>
 8014ec2:	2300      	movs	r3, #0
 8014ec4:	f100 0114 	add.w	r1, r0, #20
 8014ec8:	f100 0210 	add.w	r2, r0, #16
 8014ecc:	4618      	mov	r0, r3
 8014ece:	4553      	cmp	r3, sl
 8014ed0:	db33      	blt.n	8014f3a <__lshift+0xb6>
 8014ed2:	6920      	ldr	r0, [r4, #16]
 8014ed4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014ed8:	f104 0314 	add.w	r3, r4, #20
 8014edc:	f019 091f 	ands.w	r9, r9, #31
 8014ee0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014ee4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014ee8:	d02b      	beq.n	8014f42 <__lshift+0xbe>
 8014eea:	f1c9 0e20 	rsb	lr, r9, #32
 8014eee:	468a      	mov	sl, r1
 8014ef0:	2200      	movs	r2, #0
 8014ef2:	6818      	ldr	r0, [r3, #0]
 8014ef4:	fa00 f009 	lsl.w	r0, r0, r9
 8014ef8:	4310      	orrs	r0, r2
 8014efa:	f84a 0b04 	str.w	r0, [sl], #4
 8014efe:	f853 2b04 	ldr.w	r2, [r3], #4
 8014f02:	459c      	cmp	ip, r3
 8014f04:	fa22 f20e 	lsr.w	r2, r2, lr
 8014f08:	d8f3      	bhi.n	8014ef2 <__lshift+0x6e>
 8014f0a:	ebac 0304 	sub.w	r3, ip, r4
 8014f0e:	3b15      	subs	r3, #21
 8014f10:	f023 0303 	bic.w	r3, r3, #3
 8014f14:	3304      	adds	r3, #4
 8014f16:	f104 0015 	add.w	r0, r4, #21
 8014f1a:	4584      	cmp	ip, r0
 8014f1c:	bf38      	it	cc
 8014f1e:	2304      	movcc	r3, #4
 8014f20:	50ca      	str	r2, [r1, r3]
 8014f22:	b10a      	cbz	r2, 8014f28 <__lshift+0xa4>
 8014f24:	f108 0602 	add.w	r6, r8, #2
 8014f28:	3e01      	subs	r6, #1
 8014f2a:	4638      	mov	r0, r7
 8014f2c:	612e      	str	r6, [r5, #16]
 8014f2e:	4621      	mov	r1, r4
 8014f30:	f7ff fdda 	bl	8014ae8 <_Bfree>
 8014f34:	4628      	mov	r0, r5
 8014f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8014f3e:	3301      	adds	r3, #1
 8014f40:	e7c5      	b.n	8014ece <__lshift+0x4a>
 8014f42:	3904      	subs	r1, #4
 8014f44:	f853 2b04 	ldr.w	r2, [r3], #4
 8014f48:	f841 2f04 	str.w	r2, [r1, #4]!
 8014f4c:	459c      	cmp	ip, r3
 8014f4e:	d8f9      	bhi.n	8014f44 <__lshift+0xc0>
 8014f50:	e7ea      	b.n	8014f28 <__lshift+0xa4>
 8014f52:	bf00      	nop
 8014f54:	080174f8 	.word	0x080174f8
 8014f58:	08017509 	.word	0x08017509

08014f5c <__mcmp>:
 8014f5c:	690a      	ldr	r2, [r1, #16]
 8014f5e:	4603      	mov	r3, r0
 8014f60:	6900      	ldr	r0, [r0, #16]
 8014f62:	1a80      	subs	r0, r0, r2
 8014f64:	b530      	push	{r4, r5, lr}
 8014f66:	d10e      	bne.n	8014f86 <__mcmp+0x2a>
 8014f68:	3314      	adds	r3, #20
 8014f6a:	3114      	adds	r1, #20
 8014f6c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014f70:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014f74:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014f78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014f7c:	4295      	cmp	r5, r2
 8014f7e:	d003      	beq.n	8014f88 <__mcmp+0x2c>
 8014f80:	d205      	bcs.n	8014f8e <__mcmp+0x32>
 8014f82:	f04f 30ff 	mov.w	r0, #4294967295
 8014f86:	bd30      	pop	{r4, r5, pc}
 8014f88:	42a3      	cmp	r3, r4
 8014f8a:	d3f3      	bcc.n	8014f74 <__mcmp+0x18>
 8014f8c:	e7fb      	b.n	8014f86 <__mcmp+0x2a>
 8014f8e:	2001      	movs	r0, #1
 8014f90:	e7f9      	b.n	8014f86 <__mcmp+0x2a>
	...

08014f94 <__mdiff>:
 8014f94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f98:	4689      	mov	r9, r1
 8014f9a:	4606      	mov	r6, r0
 8014f9c:	4611      	mov	r1, r2
 8014f9e:	4648      	mov	r0, r9
 8014fa0:	4614      	mov	r4, r2
 8014fa2:	f7ff ffdb 	bl	8014f5c <__mcmp>
 8014fa6:	1e05      	subs	r5, r0, #0
 8014fa8:	d112      	bne.n	8014fd0 <__mdiff+0x3c>
 8014faa:	4629      	mov	r1, r5
 8014fac:	4630      	mov	r0, r6
 8014fae:	f7ff fd5b 	bl	8014a68 <_Balloc>
 8014fb2:	4602      	mov	r2, r0
 8014fb4:	b928      	cbnz	r0, 8014fc2 <__mdiff+0x2e>
 8014fb6:	4b3f      	ldr	r3, [pc, #252]	@ (80150b4 <__mdiff+0x120>)
 8014fb8:	f240 2137 	movw	r1, #567	@ 0x237
 8014fbc:	483e      	ldr	r0, [pc, #248]	@ (80150b8 <__mdiff+0x124>)
 8014fbe:	f000 fcd9 	bl	8015974 <__assert_func>
 8014fc2:	2301      	movs	r3, #1
 8014fc4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014fc8:	4610      	mov	r0, r2
 8014fca:	b003      	add	sp, #12
 8014fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fd0:	bfbc      	itt	lt
 8014fd2:	464b      	movlt	r3, r9
 8014fd4:	46a1      	movlt	r9, r4
 8014fd6:	4630      	mov	r0, r6
 8014fd8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014fdc:	bfba      	itte	lt
 8014fde:	461c      	movlt	r4, r3
 8014fe0:	2501      	movlt	r5, #1
 8014fe2:	2500      	movge	r5, #0
 8014fe4:	f7ff fd40 	bl	8014a68 <_Balloc>
 8014fe8:	4602      	mov	r2, r0
 8014fea:	b918      	cbnz	r0, 8014ff4 <__mdiff+0x60>
 8014fec:	4b31      	ldr	r3, [pc, #196]	@ (80150b4 <__mdiff+0x120>)
 8014fee:	f240 2145 	movw	r1, #581	@ 0x245
 8014ff2:	e7e3      	b.n	8014fbc <__mdiff+0x28>
 8014ff4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014ff8:	6926      	ldr	r6, [r4, #16]
 8014ffa:	60c5      	str	r5, [r0, #12]
 8014ffc:	f109 0310 	add.w	r3, r9, #16
 8015000:	f109 0514 	add.w	r5, r9, #20
 8015004:	f104 0e14 	add.w	lr, r4, #20
 8015008:	f100 0b14 	add.w	fp, r0, #20
 801500c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8015010:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8015014:	9301      	str	r3, [sp, #4]
 8015016:	46d9      	mov	r9, fp
 8015018:	f04f 0c00 	mov.w	ip, #0
 801501c:	9b01      	ldr	r3, [sp, #4]
 801501e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8015022:	f853 af04 	ldr.w	sl, [r3, #4]!
 8015026:	9301      	str	r3, [sp, #4]
 8015028:	fa1f f38a 	uxth.w	r3, sl
 801502c:	4619      	mov	r1, r3
 801502e:	b283      	uxth	r3, r0
 8015030:	1acb      	subs	r3, r1, r3
 8015032:	0c00      	lsrs	r0, r0, #16
 8015034:	4463      	add	r3, ip
 8015036:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801503a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801503e:	b29b      	uxth	r3, r3
 8015040:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8015044:	4576      	cmp	r6, lr
 8015046:	f849 3b04 	str.w	r3, [r9], #4
 801504a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801504e:	d8e5      	bhi.n	801501c <__mdiff+0x88>
 8015050:	1b33      	subs	r3, r6, r4
 8015052:	3b15      	subs	r3, #21
 8015054:	f023 0303 	bic.w	r3, r3, #3
 8015058:	3415      	adds	r4, #21
 801505a:	3304      	adds	r3, #4
 801505c:	42a6      	cmp	r6, r4
 801505e:	bf38      	it	cc
 8015060:	2304      	movcc	r3, #4
 8015062:	441d      	add	r5, r3
 8015064:	445b      	add	r3, fp
 8015066:	461e      	mov	r6, r3
 8015068:	462c      	mov	r4, r5
 801506a:	4544      	cmp	r4, r8
 801506c:	d30e      	bcc.n	801508c <__mdiff+0xf8>
 801506e:	f108 0103 	add.w	r1, r8, #3
 8015072:	1b49      	subs	r1, r1, r5
 8015074:	f021 0103 	bic.w	r1, r1, #3
 8015078:	3d03      	subs	r5, #3
 801507a:	45a8      	cmp	r8, r5
 801507c:	bf38      	it	cc
 801507e:	2100      	movcc	r1, #0
 8015080:	440b      	add	r3, r1
 8015082:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015086:	b191      	cbz	r1, 80150ae <__mdiff+0x11a>
 8015088:	6117      	str	r7, [r2, #16]
 801508a:	e79d      	b.n	8014fc8 <__mdiff+0x34>
 801508c:	f854 1b04 	ldr.w	r1, [r4], #4
 8015090:	46e6      	mov	lr, ip
 8015092:	0c08      	lsrs	r0, r1, #16
 8015094:	fa1c fc81 	uxtah	ip, ip, r1
 8015098:	4471      	add	r1, lr
 801509a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801509e:	b289      	uxth	r1, r1
 80150a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80150a4:	f846 1b04 	str.w	r1, [r6], #4
 80150a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80150ac:	e7dd      	b.n	801506a <__mdiff+0xd6>
 80150ae:	3f01      	subs	r7, #1
 80150b0:	e7e7      	b.n	8015082 <__mdiff+0xee>
 80150b2:	bf00      	nop
 80150b4:	080174f8 	.word	0x080174f8
 80150b8:	08017509 	.word	0x08017509

080150bc <__d2b>:
 80150bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80150c0:	460f      	mov	r7, r1
 80150c2:	2101      	movs	r1, #1
 80150c4:	ec59 8b10 	vmov	r8, r9, d0
 80150c8:	4616      	mov	r6, r2
 80150ca:	f7ff fccd 	bl	8014a68 <_Balloc>
 80150ce:	4604      	mov	r4, r0
 80150d0:	b930      	cbnz	r0, 80150e0 <__d2b+0x24>
 80150d2:	4602      	mov	r2, r0
 80150d4:	4b23      	ldr	r3, [pc, #140]	@ (8015164 <__d2b+0xa8>)
 80150d6:	4824      	ldr	r0, [pc, #144]	@ (8015168 <__d2b+0xac>)
 80150d8:	f240 310f 	movw	r1, #783	@ 0x30f
 80150dc:	f000 fc4a 	bl	8015974 <__assert_func>
 80150e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80150e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80150e8:	b10d      	cbz	r5, 80150ee <__d2b+0x32>
 80150ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80150ee:	9301      	str	r3, [sp, #4]
 80150f0:	f1b8 0300 	subs.w	r3, r8, #0
 80150f4:	d023      	beq.n	801513e <__d2b+0x82>
 80150f6:	4668      	mov	r0, sp
 80150f8:	9300      	str	r3, [sp, #0]
 80150fa:	f7ff fd7c 	bl	8014bf6 <__lo0bits>
 80150fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8015102:	b1d0      	cbz	r0, 801513a <__d2b+0x7e>
 8015104:	f1c0 0320 	rsb	r3, r0, #32
 8015108:	fa02 f303 	lsl.w	r3, r2, r3
 801510c:	430b      	orrs	r3, r1
 801510e:	40c2      	lsrs	r2, r0
 8015110:	6163      	str	r3, [r4, #20]
 8015112:	9201      	str	r2, [sp, #4]
 8015114:	9b01      	ldr	r3, [sp, #4]
 8015116:	61a3      	str	r3, [r4, #24]
 8015118:	2b00      	cmp	r3, #0
 801511a:	bf0c      	ite	eq
 801511c:	2201      	moveq	r2, #1
 801511e:	2202      	movne	r2, #2
 8015120:	6122      	str	r2, [r4, #16]
 8015122:	b1a5      	cbz	r5, 801514e <__d2b+0x92>
 8015124:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8015128:	4405      	add	r5, r0
 801512a:	603d      	str	r5, [r7, #0]
 801512c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8015130:	6030      	str	r0, [r6, #0]
 8015132:	4620      	mov	r0, r4
 8015134:	b003      	add	sp, #12
 8015136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801513a:	6161      	str	r1, [r4, #20]
 801513c:	e7ea      	b.n	8015114 <__d2b+0x58>
 801513e:	a801      	add	r0, sp, #4
 8015140:	f7ff fd59 	bl	8014bf6 <__lo0bits>
 8015144:	9b01      	ldr	r3, [sp, #4]
 8015146:	6163      	str	r3, [r4, #20]
 8015148:	3020      	adds	r0, #32
 801514a:	2201      	movs	r2, #1
 801514c:	e7e8      	b.n	8015120 <__d2b+0x64>
 801514e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015152:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8015156:	6038      	str	r0, [r7, #0]
 8015158:	6918      	ldr	r0, [r3, #16]
 801515a:	f7ff fd2d 	bl	8014bb8 <__hi0bits>
 801515e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015162:	e7e5      	b.n	8015130 <__d2b+0x74>
 8015164:	080174f8 	.word	0x080174f8
 8015168:	08017509 	.word	0x08017509

0801516c <__ssputs_r>:
 801516c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015170:	688e      	ldr	r6, [r1, #8]
 8015172:	461f      	mov	r7, r3
 8015174:	42be      	cmp	r6, r7
 8015176:	680b      	ldr	r3, [r1, #0]
 8015178:	4682      	mov	sl, r0
 801517a:	460c      	mov	r4, r1
 801517c:	4690      	mov	r8, r2
 801517e:	d82d      	bhi.n	80151dc <__ssputs_r+0x70>
 8015180:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015184:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015188:	d026      	beq.n	80151d8 <__ssputs_r+0x6c>
 801518a:	6965      	ldr	r5, [r4, #20]
 801518c:	6909      	ldr	r1, [r1, #16]
 801518e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015192:	eba3 0901 	sub.w	r9, r3, r1
 8015196:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801519a:	1c7b      	adds	r3, r7, #1
 801519c:	444b      	add	r3, r9
 801519e:	106d      	asrs	r5, r5, #1
 80151a0:	429d      	cmp	r5, r3
 80151a2:	bf38      	it	cc
 80151a4:	461d      	movcc	r5, r3
 80151a6:	0553      	lsls	r3, r2, #21
 80151a8:	d527      	bpl.n	80151fa <__ssputs_r+0x8e>
 80151aa:	4629      	mov	r1, r5
 80151ac:	f7ff fbd0 	bl	8014950 <_malloc_r>
 80151b0:	4606      	mov	r6, r0
 80151b2:	b360      	cbz	r0, 801520e <__ssputs_r+0xa2>
 80151b4:	6921      	ldr	r1, [r4, #16]
 80151b6:	464a      	mov	r2, r9
 80151b8:	f7fe fcfb 	bl	8013bb2 <memcpy>
 80151bc:	89a3      	ldrh	r3, [r4, #12]
 80151be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80151c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80151c6:	81a3      	strh	r3, [r4, #12]
 80151c8:	6126      	str	r6, [r4, #16]
 80151ca:	6165      	str	r5, [r4, #20]
 80151cc:	444e      	add	r6, r9
 80151ce:	eba5 0509 	sub.w	r5, r5, r9
 80151d2:	6026      	str	r6, [r4, #0]
 80151d4:	60a5      	str	r5, [r4, #8]
 80151d6:	463e      	mov	r6, r7
 80151d8:	42be      	cmp	r6, r7
 80151da:	d900      	bls.n	80151de <__ssputs_r+0x72>
 80151dc:	463e      	mov	r6, r7
 80151de:	6820      	ldr	r0, [r4, #0]
 80151e0:	4632      	mov	r2, r6
 80151e2:	4641      	mov	r1, r8
 80151e4:	f000 fb9c 	bl	8015920 <memmove>
 80151e8:	68a3      	ldr	r3, [r4, #8]
 80151ea:	1b9b      	subs	r3, r3, r6
 80151ec:	60a3      	str	r3, [r4, #8]
 80151ee:	6823      	ldr	r3, [r4, #0]
 80151f0:	4433      	add	r3, r6
 80151f2:	6023      	str	r3, [r4, #0]
 80151f4:	2000      	movs	r0, #0
 80151f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80151fa:	462a      	mov	r2, r5
 80151fc:	f000 fbfe 	bl	80159fc <_realloc_r>
 8015200:	4606      	mov	r6, r0
 8015202:	2800      	cmp	r0, #0
 8015204:	d1e0      	bne.n	80151c8 <__ssputs_r+0x5c>
 8015206:	6921      	ldr	r1, [r4, #16]
 8015208:	4650      	mov	r0, sl
 801520a:	f7ff fb2d 	bl	8014868 <_free_r>
 801520e:	230c      	movs	r3, #12
 8015210:	f8ca 3000 	str.w	r3, [sl]
 8015214:	89a3      	ldrh	r3, [r4, #12]
 8015216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801521a:	81a3      	strh	r3, [r4, #12]
 801521c:	f04f 30ff 	mov.w	r0, #4294967295
 8015220:	e7e9      	b.n	80151f6 <__ssputs_r+0x8a>
	...

08015224 <_svfiprintf_r>:
 8015224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015228:	4698      	mov	r8, r3
 801522a:	898b      	ldrh	r3, [r1, #12]
 801522c:	061b      	lsls	r3, r3, #24
 801522e:	b09d      	sub	sp, #116	@ 0x74
 8015230:	4607      	mov	r7, r0
 8015232:	460d      	mov	r5, r1
 8015234:	4614      	mov	r4, r2
 8015236:	d510      	bpl.n	801525a <_svfiprintf_r+0x36>
 8015238:	690b      	ldr	r3, [r1, #16]
 801523a:	b973      	cbnz	r3, 801525a <_svfiprintf_r+0x36>
 801523c:	2140      	movs	r1, #64	@ 0x40
 801523e:	f7ff fb87 	bl	8014950 <_malloc_r>
 8015242:	6028      	str	r0, [r5, #0]
 8015244:	6128      	str	r0, [r5, #16]
 8015246:	b930      	cbnz	r0, 8015256 <_svfiprintf_r+0x32>
 8015248:	230c      	movs	r3, #12
 801524a:	603b      	str	r3, [r7, #0]
 801524c:	f04f 30ff 	mov.w	r0, #4294967295
 8015250:	b01d      	add	sp, #116	@ 0x74
 8015252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015256:	2340      	movs	r3, #64	@ 0x40
 8015258:	616b      	str	r3, [r5, #20]
 801525a:	2300      	movs	r3, #0
 801525c:	9309      	str	r3, [sp, #36]	@ 0x24
 801525e:	2320      	movs	r3, #32
 8015260:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015264:	f8cd 800c 	str.w	r8, [sp, #12]
 8015268:	2330      	movs	r3, #48	@ 0x30
 801526a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015408 <_svfiprintf_r+0x1e4>
 801526e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015272:	f04f 0901 	mov.w	r9, #1
 8015276:	4623      	mov	r3, r4
 8015278:	469a      	mov	sl, r3
 801527a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801527e:	b10a      	cbz	r2, 8015284 <_svfiprintf_r+0x60>
 8015280:	2a25      	cmp	r2, #37	@ 0x25
 8015282:	d1f9      	bne.n	8015278 <_svfiprintf_r+0x54>
 8015284:	ebba 0b04 	subs.w	fp, sl, r4
 8015288:	d00b      	beq.n	80152a2 <_svfiprintf_r+0x7e>
 801528a:	465b      	mov	r3, fp
 801528c:	4622      	mov	r2, r4
 801528e:	4629      	mov	r1, r5
 8015290:	4638      	mov	r0, r7
 8015292:	f7ff ff6b 	bl	801516c <__ssputs_r>
 8015296:	3001      	adds	r0, #1
 8015298:	f000 80a7 	beq.w	80153ea <_svfiprintf_r+0x1c6>
 801529c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801529e:	445a      	add	r2, fp
 80152a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80152a2:	f89a 3000 	ldrb.w	r3, [sl]
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	f000 809f 	beq.w	80153ea <_svfiprintf_r+0x1c6>
 80152ac:	2300      	movs	r3, #0
 80152ae:	f04f 32ff 	mov.w	r2, #4294967295
 80152b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80152b6:	f10a 0a01 	add.w	sl, sl, #1
 80152ba:	9304      	str	r3, [sp, #16]
 80152bc:	9307      	str	r3, [sp, #28]
 80152be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80152c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80152c4:	4654      	mov	r4, sl
 80152c6:	2205      	movs	r2, #5
 80152c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80152cc:	484e      	ldr	r0, [pc, #312]	@ (8015408 <_svfiprintf_r+0x1e4>)
 80152ce:	f7ea ff9f 	bl	8000210 <memchr>
 80152d2:	9a04      	ldr	r2, [sp, #16]
 80152d4:	b9d8      	cbnz	r0, 801530e <_svfiprintf_r+0xea>
 80152d6:	06d0      	lsls	r0, r2, #27
 80152d8:	bf44      	itt	mi
 80152da:	2320      	movmi	r3, #32
 80152dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80152e0:	0711      	lsls	r1, r2, #28
 80152e2:	bf44      	itt	mi
 80152e4:	232b      	movmi	r3, #43	@ 0x2b
 80152e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80152ea:	f89a 3000 	ldrb.w	r3, [sl]
 80152ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80152f0:	d015      	beq.n	801531e <_svfiprintf_r+0xfa>
 80152f2:	9a07      	ldr	r2, [sp, #28]
 80152f4:	4654      	mov	r4, sl
 80152f6:	2000      	movs	r0, #0
 80152f8:	f04f 0c0a 	mov.w	ip, #10
 80152fc:	4621      	mov	r1, r4
 80152fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015302:	3b30      	subs	r3, #48	@ 0x30
 8015304:	2b09      	cmp	r3, #9
 8015306:	d94b      	bls.n	80153a0 <_svfiprintf_r+0x17c>
 8015308:	b1b0      	cbz	r0, 8015338 <_svfiprintf_r+0x114>
 801530a:	9207      	str	r2, [sp, #28]
 801530c:	e014      	b.n	8015338 <_svfiprintf_r+0x114>
 801530e:	eba0 0308 	sub.w	r3, r0, r8
 8015312:	fa09 f303 	lsl.w	r3, r9, r3
 8015316:	4313      	orrs	r3, r2
 8015318:	9304      	str	r3, [sp, #16]
 801531a:	46a2      	mov	sl, r4
 801531c:	e7d2      	b.n	80152c4 <_svfiprintf_r+0xa0>
 801531e:	9b03      	ldr	r3, [sp, #12]
 8015320:	1d19      	adds	r1, r3, #4
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	9103      	str	r1, [sp, #12]
 8015326:	2b00      	cmp	r3, #0
 8015328:	bfbb      	ittet	lt
 801532a:	425b      	neglt	r3, r3
 801532c:	f042 0202 	orrlt.w	r2, r2, #2
 8015330:	9307      	strge	r3, [sp, #28]
 8015332:	9307      	strlt	r3, [sp, #28]
 8015334:	bfb8      	it	lt
 8015336:	9204      	strlt	r2, [sp, #16]
 8015338:	7823      	ldrb	r3, [r4, #0]
 801533a:	2b2e      	cmp	r3, #46	@ 0x2e
 801533c:	d10a      	bne.n	8015354 <_svfiprintf_r+0x130>
 801533e:	7863      	ldrb	r3, [r4, #1]
 8015340:	2b2a      	cmp	r3, #42	@ 0x2a
 8015342:	d132      	bne.n	80153aa <_svfiprintf_r+0x186>
 8015344:	9b03      	ldr	r3, [sp, #12]
 8015346:	1d1a      	adds	r2, r3, #4
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	9203      	str	r2, [sp, #12]
 801534c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015350:	3402      	adds	r4, #2
 8015352:	9305      	str	r3, [sp, #20]
 8015354:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015418 <_svfiprintf_r+0x1f4>
 8015358:	7821      	ldrb	r1, [r4, #0]
 801535a:	2203      	movs	r2, #3
 801535c:	4650      	mov	r0, sl
 801535e:	f7ea ff57 	bl	8000210 <memchr>
 8015362:	b138      	cbz	r0, 8015374 <_svfiprintf_r+0x150>
 8015364:	9b04      	ldr	r3, [sp, #16]
 8015366:	eba0 000a 	sub.w	r0, r0, sl
 801536a:	2240      	movs	r2, #64	@ 0x40
 801536c:	4082      	lsls	r2, r0
 801536e:	4313      	orrs	r3, r2
 8015370:	3401      	adds	r4, #1
 8015372:	9304      	str	r3, [sp, #16]
 8015374:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015378:	4824      	ldr	r0, [pc, #144]	@ (801540c <_svfiprintf_r+0x1e8>)
 801537a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801537e:	2206      	movs	r2, #6
 8015380:	f7ea ff46 	bl	8000210 <memchr>
 8015384:	2800      	cmp	r0, #0
 8015386:	d036      	beq.n	80153f6 <_svfiprintf_r+0x1d2>
 8015388:	4b21      	ldr	r3, [pc, #132]	@ (8015410 <_svfiprintf_r+0x1ec>)
 801538a:	bb1b      	cbnz	r3, 80153d4 <_svfiprintf_r+0x1b0>
 801538c:	9b03      	ldr	r3, [sp, #12]
 801538e:	3307      	adds	r3, #7
 8015390:	f023 0307 	bic.w	r3, r3, #7
 8015394:	3308      	adds	r3, #8
 8015396:	9303      	str	r3, [sp, #12]
 8015398:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801539a:	4433      	add	r3, r6
 801539c:	9309      	str	r3, [sp, #36]	@ 0x24
 801539e:	e76a      	b.n	8015276 <_svfiprintf_r+0x52>
 80153a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80153a4:	460c      	mov	r4, r1
 80153a6:	2001      	movs	r0, #1
 80153a8:	e7a8      	b.n	80152fc <_svfiprintf_r+0xd8>
 80153aa:	2300      	movs	r3, #0
 80153ac:	3401      	adds	r4, #1
 80153ae:	9305      	str	r3, [sp, #20]
 80153b0:	4619      	mov	r1, r3
 80153b2:	f04f 0c0a 	mov.w	ip, #10
 80153b6:	4620      	mov	r0, r4
 80153b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80153bc:	3a30      	subs	r2, #48	@ 0x30
 80153be:	2a09      	cmp	r2, #9
 80153c0:	d903      	bls.n	80153ca <_svfiprintf_r+0x1a6>
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d0c6      	beq.n	8015354 <_svfiprintf_r+0x130>
 80153c6:	9105      	str	r1, [sp, #20]
 80153c8:	e7c4      	b.n	8015354 <_svfiprintf_r+0x130>
 80153ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80153ce:	4604      	mov	r4, r0
 80153d0:	2301      	movs	r3, #1
 80153d2:	e7f0      	b.n	80153b6 <_svfiprintf_r+0x192>
 80153d4:	ab03      	add	r3, sp, #12
 80153d6:	9300      	str	r3, [sp, #0]
 80153d8:	462a      	mov	r2, r5
 80153da:	4b0e      	ldr	r3, [pc, #56]	@ (8015414 <_svfiprintf_r+0x1f0>)
 80153dc:	a904      	add	r1, sp, #16
 80153de:	4638      	mov	r0, r7
 80153e0:	f7fd fe22 	bl	8013028 <_printf_float>
 80153e4:	1c42      	adds	r2, r0, #1
 80153e6:	4606      	mov	r6, r0
 80153e8:	d1d6      	bne.n	8015398 <_svfiprintf_r+0x174>
 80153ea:	89ab      	ldrh	r3, [r5, #12]
 80153ec:	065b      	lsls	r3, r3, #25
 80153ee:	f53f af2d 	bmi.w	801524c <_svfiprintf_r+0x28>
 80153f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80153f4:	e72c      	b.n	8015250 <_svfiprintf_r+0x2c>
 80153f6:	ab03      	add	r3, sp, #12
 80153f8:	9300      	str	r3, [sp, #0]
 80153fa:	462a      	mov	r2, r5
 80153fc:	4b05      	ldr	r3, [pc, #20]	@ (8015414 <_svfiprintf_r+0x1f0>)
 80153fe:	a904      	add	r1, sp, #16
 8015400:	4638      	mov	r0, r7
 8015402:	f7fe f8a9 	bl	8013558 <_printf_i>
 8015406:	e7ed      	b.n	80153e4 <_svfiprintf_r+0x1c0>
 8015408:	08017660 	.word	0x08017660
 801540c:	0801766a 	.word	0x0801766a
 8015410:	08013029 	.word	0x08013029
 8015414:	0801516d 	.word	0x0801516d
 8015418:	08017666 	.word	0x08017666

0801541c <__sfputc_r>:
 801541c:	6893      	ldr	r3, [r2, #8]
 801541e:	3b01      	subs	r3, #1
 8015420:	2b00      	cmp	r3, #0
 8015422:	b410      	push	{r4}
 8015424:	6093      	str	r3, [r2, #8]
 8015426:	da08      	bge.n	801543a <__sfputc_r+0x1e>
 8015428:	6994      	ldr	r4, [r2, #24]
 801542a:	42a3      	cmp	r3, r4
 801542c:	db01      	blt.n	8015432 <__sfputc_r+0x16>
 801542e:	290a      	cmp	r1, #10
 8015430:	d103      	bne.n	801543a <__sfputc_r+0x1e>
 8015432:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015436:	f000 b9df 	b.w	80157f8 <__swbuf_r>
 801543a:	6813      	ldr	r3, [r2, #0]
 801543c:	1c58      	adds	r0, r3, #1
 801543e:	6010      	str	r0, [r2, #0]
 8015440:	7019      	strb	r1, [r3, #0]
 8015442:	4608      	mov	r0, r1
 8015444:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015448:	4770      	bx	lr

0801544a <__sfputs_r>:
 801544a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801544c:	4606      	mov	r6, r0
 801544e:	460f      	mov	r7, r1
 8015450:	4614      	mov	r4, r2
 8015452:	18d5      	adds	r5, r2, r3
 8015454:	42ac      	cmp	r4, r5
 8015456:	d101      	bne.n	801545c <__sfputs_r+0x12>
 8015458:	2000      	movs	r0, #0
 801545a:	e007      	b.n	801546c <__sfputs_r+0x22>
 801545c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015460:	463a      	mov	r2, r7
 8015462:	4630      	mov	r0, r6
 8015464:	f7ff ffda 	bl	801541c <__sfputc_r>
 8015468:	1c43      	adds	r3, r0, #1
 801546a:	d1f3      	bne.n	8015454 <__sfputs_r+0xa>
 801546c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015470 <_vfiprintf_r>:
 8015470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015474:	460d      	mov	r5, r1
 8015476:	b09d      	sub	sp, #116	@ 0x74
 8015478:	4614      	mov	r4, r2
 801547a:	4698      	mov	r8, r3
 801547c:	4606      	mov	r6, r0
 801547e:	b118      	cbz	r0, 8015488 <_vfiprintf_r+0x18>
 8015480:	6a03      	ldr	r3, [r0, #32]
 8015482:	b90b      	cbnz	r3, 8015488 <_vfiprintf_r+0x18>
 8015484:	f7fe fa14 	bl	80138b0 <__sinit>
 8015488:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801548a:	07d9      	lsls	r1, r3, #31
 801548c:	d405      	bmi.n	801549a <_vfiprintf_r+0x2a>
 801548e:	89ab      	ldrh	r3, [r5, #12]
 8015490:	059a      	lsls	r2, r3, #22
 8015492:	d402      	bmi.n	801549a <_vfiprintf_r+0x2a>
 8015494:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015496:	f7fe fb8a 	bl	8013bae <__retarget_lock_acquire_recursive>
 801549a:	89ab      	ldrh	r3, [r5, #12]
 801549c:	071b      	lsls	r3, r3, #28
 801549e:	d501      	bpl.n	80154a4 <_vfiprintf_r+0x34>
 80154a0:	692b      	ldr	r3, [r5, #16]
 80154a2:	b99b      	cbnz	r3, 80154cc <_vfiprintf_r+0x5c>
 80154a4:	4629      	mov	r1, r5
 80154a6:	4630      	mov	r0, r6
 80154a8:	f000 f9e4 	bl	8015874 <__swsetup_r>
 80154ac:	b170      	cbz	r0, 80154cc <_vfiprintf_r+0x5c>
 80154ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80154b0:	07dc      	lsls	r4, r3, #31
 80154b2:	d504      	bpl.n	80154be <_vfiprintf_r+0x4e>
 80154b4:	f04f 30ff 	mov.w	r0, #4294967295
 80154b8:	b01d      	add	sp, #116	@ 0x74
 80154ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154be:	89ab      	ldrh	r3, [r5, #12]
 80154c0:	0598      	lsls	r0, r3, #22
 80154c2:	d4f7      	bmi.n	80154b4 <_vfiprintf_r+0x44>
 80154c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80154c6:	f7fe fb73 	bl	8013bb0 <__retarget_lock_release_recursive>
 80154ca:	e7f3      	b.n	80154b4 <_vfiprintf_r+0x44>
 80154cc:	2300      	movs	r3, #0
 80154ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80154d0:	2320      	movs	r3, #32
 80154d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80154d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80154da:	2330      	movs	r3, #48	@ 0x30
 80154dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801568c <_vfiprintf_r+0x21c>
 80154e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80154e4:	f04f 0901 	mov.w	r9, #1
 80154e8:	4623      	mov	r3, r4
 80154ea:	469a      	mov	sl, r3
 80154ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80154f0:	b10a      	cbz	r2, 80154f6 <_vfiprintf_r+0x86>
 80154f2:	2a25      	cmp	r2, #37	@ 0x25
 80154f4:	d1f9      	bne.n	80154ea <_vfiprintf_r+0x7a>
 80154f6:	ebba 0b04 	subs.w	fp, sl, r4
 80154fa:	d00b      	beq.n	8015514 <_vfiprintf_r+0xa4>
 80154fc:	465b      	mov	r3, fp
 80154fe:	4622      	mov	r2, r4
 8015500:	4629      	mov	r1, r5
 8015502:	4630      	mov	r0, r6
 8015504:	f7ff ffa1 	bl	801544a <__sfputs_r>
 8015508:	3001      	adds	r0, #1
 801550a:	f000 80a7 	beq.w	801565c <_vfiprintf_r+0x1ec>
 801550e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015510:	445a      	add	r2, fp
 8015512:	9209      	str	r2, [sp, #36]	@ 0x24
 8015514:	f89a 3000 	ldrb.w	r3, [sl]
 8015518:	2b00      	cmp	r3, #0
 801551a:	f000 809f 	beq.w	801565c <_vfiprintf_r+0x1ec>
 801551e:	2300      	movs	r3, #0
 8015520:	f04f 32ff 	mov.w	r2, #4294967295
 8015524:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015528:	f10a 0a01 	add.w	sl, sl, #1
 801552c:	9304      	str	r3, [sp, #16]
 801552e:	9307      	str	r3, [sp, #28]
 8015530:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015534:	931a      	str	r3, [sp, #104]	@ 0x68
 8015536:	4654      	mov	r4, sl
 8015538:	2205      	movs	r2, #5
 801553a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801553e:	4853      	ldr	r0, [pc, #332]	@ (801568c <_vfiprintf_r+0x21c>)
 8015540:	f7ea fe66 	bl	8000210 <memchr>
 8015544:	9a04      	ldr	r2, [sp, #16]
 8015546:	b9d8      	cbnz	r0, 8015580 <_vfiprintf_r+0x110>
 8015548:	06d1      	lsls	r1, r2, #27
 801554a:	bf44      	itt	mi
 801554c:	2320      	movmi	r3, #32
 801554e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015552:	0713      	lsls	r3, r2, #28
 8015554:	bf44      	itt	mi
 8015556:	232b      	movmi	r3, #43	@ 0x2b
 8015558:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801555c:	f89a 3000 	ldrb.w	r3, [sl]
 8015560:	2b2a      	cmp	r3, #42	@ 0x2a
 8015562:	d015      	beq.n	8015590 <_vfiprintf_r+0x120>
 8015564:	9a07      	ldr	r2, [sp, #28]
 8015566:	4654      	mov	r4, sl
 8015568:	2000      	movs	r0, #0
 801556a:	f04f 0c0a 	mov.w	ip, #10
 801556e:	4621      	mov	r1, r4
 8015570:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015574:	3b30      	subs	r3, #48	@ 0x30
 8015576:	2b09      	cmp	r3, #9
 8015578:	d94b      	bls.n	8015612 <_vfiprintf_r+0x1a2>
 801557a:	b1b0      	cbz	r0, 80155aa <_vfiprintf_r+0x13a>
 801557c:	9207      	str	r2, [sp, #28]
 801557e:	e014      	b.n	80155aa <_vfiprintf_r+0x13a>
 8015580:	eba0 0308 	sub.w	r3, r0, r8
 8015584:	fa09 f303 	lsl.w	r3, r9, r3
 8015588:	4313      	orrs	r3, r2
 801558a:	9304      	str	r3, [sp, #16]
 801558c:	46a2      	mov	sl, r4
 801558e:	e7d2      	b.n	8015536 <_vfiprintf_r+0xc6>
 8015590:	9b03      	ldr	r3, [sp, #12]
 8015592:	1d19      	adds	r1, r3, #4
 8015594:	681b      	ldr	r3, [r3, #0]
 8015596:	9103      	str	r1, [sp, #12]
 8015598:	2b00      	cmp	r3, #0
 801559a:	bfbb      	ittet	lt
 801559c:	425b      	neglt	r3, r3
 801559e:	f042 0202 	orrlt.w	r2, r2, #2
 80155a2:	9307      	strge	r3, [sp, #28]
 80155a4:	9307      	strlt	r3, [sp, #28]
 80155a6:	bfb8      	it	lt
 80155a8:	9204      	strlt	r2, [sp, #16]
 80155aa:	7823      	ldrb	r3, [r4, #0]
 80155ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80155ae:	d10a      	bne.n	80155c6 <_vfiprintf_r+0x156>
 80155b0:	7863      	ldrb	r3, [r4, #1]
 80155b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80155b4:	d132      	bne.n	801561c <_vfiprintf_r+0x1ac>
 80155b6:	9b03      	ldr	r3, [sp, #12]
 80155b8:	1d1a      	adds	r2, r3, #4
 80155ba:	681b      	ldr	r3, [r3, #0]
 80155bc:	9203      	str	r2, [sp, #12]
 80155be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80155c2:	3402      	adds	r4, #2
 80155c4:	9305      	str	r3, [sp, #20]
 80155c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801569c <_vfiprintf_r+0x22c>
 80155ca:	7821      	ldrb	r1, [r4, #0]
 80155cc:	2203      	movs	r2, #3
 80155ce:	4650      	mov	r0, sl
 80155d0:	f7ea fe1e 	bl	8000210 <memchr>
 80155d4:	b138      	cbz	r0, 80155e6 <_vfiprintf_r+0x176>
 80155d6:	9b04      	ldr	r3, [sp, #16]
 80155d8:	eba0 000a 	sub.w	r0, r0, sl
 80155dc:	2240      	movs	r2, #64	@ 0x40
 80155de:	4082      	lsls	r2, r0
 80155e0:	4313      	orrs	r3, r2
 80155e2:	3401      	adds	r4, #1
 80155e4:	9304      	str	r3, [sp, #16]
 80155e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80155ea:	4829      	ldr	r0, [pc, #164]	@ (8015690 <_vfiprintf_r+0x220>)
 80155ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80155f0:	2206      	movs	r2, #6
 80155f2:	f7ea fe0d 	bl	8000210 <memchr>
 80155f6:	2800      	cmp	r0, #0
 80155f8:	d03f      	beq.n	801567a <_vfiprintf_r+0x20a>
 80155fa:	4b26      	ldr	r3, [pc, #152]	@ (8015694 <_vfiprintf_r+0x224>)
 80155fc:	bb1b      	cbnz	r3, 8015646 <_vfiprintf_r+0x1d6>
 80155fe:	9b03      	ldr	r3, [sp, #12]
 8015600:	3307      	adds	r3, #7
 8015602:	f023 0307 	bic.w	r3, r3, #7
 8015606:	3308      	adds	r3, #8
 8015608:	9303      	str	r3, [sp, #12]
 801560a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801560c:	443b      	add	r3, r7
 801560e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015610:	e76a      	b.n	80154e8 <_vfiprintf_r+0x78>
 8015612:	fb0c 3202 	mla	r2, ip, r2, r3
 8015616:	460c      	mov	r4, r1
 8015618:	2001      	movs	r0, #1
 801561a:	e7a8      	b.n	801556e <_vfiprintf_r+0xfe>
 801561c:	2300      	movs	r3, #0
 801561e:	3401      	adds	r4, #1
 8015620:	9305      	str	r3, [sp, #20]
 8015622:	4619      	mov	r1, r3
 8015624:	f04f 0c0a 	mov.w	ip, #10
 8015628:	4620      	mov	r0, r4
 801562a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801562e:	3a30      	subs	r2, #48	@ 0x30
 8015630:	2a09      	cmp	r2, #9
 8015632:	d903      	bls.n	801563c <_vfiprintf_r+0x1cc>
 8015634:	2b00      	cmp	r3, #0
 8015636:	d0c6      	beq.n	80155c6 <_vfiprintf_r+0x156>
 8015638:	9105      	str	r1, [sp, #20]
 801563a:	e7c4      	b.n	80155c6 <_vfiprintf_r+0x156>
 801563c:	fb0c 2101 	mla	r1, ip, r1, r2
 8015640:	4604      	mov	r4, r0
 8015642:	2301      	movs	r3, #1
 8015644:	e7f0      	b.n	8015628 <_vfiprintf_r+0x1b8>
 8015646:	ab03      	add	r3, sp, #12
 8015648:	9300      	str	r3, [sp, #0]
 801564a:	462a      	mov	r2, r5
 801564c:	4b12      	ldr	r3, [pc, #72]	@ (8015698 <_vfiprintf_r+0x228>)
 801564e:	a904      	add	r1, sp, #16
 8015650:	4630      	mov	r0, r6
 8015652:	f7fd fce9 	bl	8013028 <_printf_float>
 8015656:	4607      	mov	r7, r0
 8015658:	1c78      	adds	r0, r7, #1
 801565a:	d1d6      	bne.n	801560a <_vfiprintf_r+0x19a>
 801565c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801565e:	07d9      	lsls	r1, r3, #31
 8015660:	d405      	bmi.n	801566e <_vfiprintf_r+0x1fe>
 8015662:	89ab      	ldrh	r3, [r5, #12]
 8015664:	059a      	lsls	r2, r3, #22
 8015666:	d402      	bmi.n	801566e <_vfiprintf_r+0x1fe>
 8015668:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801566a:	f7fe faa1 	bl	8013bb0 <__retarget_lock_release_recursive>
 801566e:	89ab      	ldrh	r3, [r5, #12]
 8015670:	065b      	lsls	r3, r3, #25
 8015672:	f53f af1f 	bmi.w	80154b4 <_vfiprintf_r+0x44>
 8015676:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015678:	e71e      	b.n	80154b8 <_vfiprintf_r+0x48>
 801567a:	ab03      	add	r3, sp, #12
 801567c:	9300      	str	r3, [sp, #0]
 801567e:	462a      	mov	r2, r5
 8015680:	4b05      	ldr	r3, [pc, #20]	@ (8015698 <_vfiprintf_r+0x228>)
 8015682:	a904      	add	r1, sp, #16
 8015684:	4630      	mov	r0, r6
 8015686:	f7fd ff67 	bl	8013558 <_printf_i>
 801568a:	e7e4      	b.n	8015656 <_vfiprintf_r+0x1e6>
 801568c:	08017660 	.word	0x08017660
 8015690:	0801766a 	.word	0x0801766a
 8015694:	08013029 	.word	0x08013029
 8015698:	0801544b 	.word	0x0801544b
 801569c:	08017666 	.word	0x08017666

080156a0 <__sflush_r>:
 80156a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80156a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156a8:	0716      	lsls	r6, r2, #28
 80156aa:	4605      	mov	r5, r0
 80156ac:	460c      	mov	r4, r1
 80156ae:	d454      	bmi.n	801575a <__sflush_r+0xba>
 80156b0:	684b      	ldr	r3, [r1, #4]
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	dc02      	bgt.n	80156bc <__sflush_r+0x1c>
 80156b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	dd48      	ble.n	801574e <__sflush_r+0xae>
 80156bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80156be:	2e00      	cmp	r6, #0
 80156c0:	d045      	beq.n	801574e <__sflush_r+0xae>
 80156c2:	2300      	movs	r3, #0
 80156c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80156c8:	682f      	ldr	r7, [r5, #0]
 80156ca:	6a21      	ldr	r1, [r4, #32]
 80156cc:	602b      	str	r3, [r5, #0]
 80156ce:	d030      	beq.n	8015732 <__sflush_r+0x92>
 80156d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80156d2:	89a3      	ldrh	r3, [r4, #12]
 80156d4:	0759      	lsls	r1, r3, #29
 80156d6:	d505      	bpl.n	80156e4 <__sflush_r+0x44>
 80156d8:	6863      	ldr	r3, [r4, #4]
 80156da:	1ad2      	subs	r2, r2, r3
 80156dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80156de:	b10b      	cbz	r3, 80156e4 <__sflush_r+0x44>
 80156e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80156e2:	1ad2      	subs	r2, r2, r3
 80156e4:	2300      	movs	r3, #0
 80156e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80156e8:	6a21      	ldr	r1, [r4, #32]
 80156ea:	4628      	mov	r0, r5
 80156ec:	47b0      	blx	r6
 80156ee:	1c43      	adds	r3, r0, #1
 80156f0:	89a3      	ldrh	r3, [r4, #12]
 80156f2:	d106      	bne.n	8015702 <__sflush_r+0x62>
 80156f4:	6829      	ldr	r1, [r5, #0]
 80156f6:	291d      	cmp	r1, #29
 80156f8:	d82b      	bhi.n	8015752 <__sflush_r+0xb2>
 80156fa:	4a2a      	ldr	r2, [pc, #168]	@ (80157a4 <__sflush_r+0x104>)
 80156fc:	410a      	asrs	r2, r1
 80156fe:	07d6      	lsls	r6, r2, #31
 8015700:	d427      	bmi.n	8015752 <__sflush_r+0xb2>
 8015702:	2200      	movs	r2, #0
 8015704:	6062      	str	r2, [r4, #4]
 8015706:	04d9      	lsls	r1, r3, #19
 8015708:	6922      	ldr	r2, [r4, #16]
 801570a:	6022      	str	r2, [r4, #0]
 801570c:	d504      	bpl.n	8015718 <__sflush_r+0x78>
 801570e:	1c42      	adds	r2, r0, #1
 8015710:	d101      	bne.n	8015716 <__sflush_r+0x76>
 8015712:	682b      	ldr	r3, [r5, #0]
 8015714:	b903      	cbnz	r3, 8015718 <__sflush_r+0x78>
 8015716:	6560      	str	r0, [r4, #84]	@ 0x54
 8015718:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801571a:	602f      	str	r7, [r5, #0]
 801571c:	b1b9      	cbz	r1, 801574e <__sflush_r+0xae>
 801571e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015722:	4299      	cmp	r1, r3
 8015724:	d002      	beq.n	801572c <__sflush_r+0x8c>
 8015726:	4628      	mov	r0, r5
 8015728:	f7ff f89e 	bl	8014868 <_free_r>
 801572c:	2300      	movs	r3, #0
 801572e:	6363      	str	r3, [r4, #52]	@ 0x34
 8015730:	e00d      	b.n	801574e <__sflush_r+0xae>
 8015732:	2301      	movs	r3, #1
 8015734:	4628      	mov	r0, r5
 8015736:	47b0      	blx	r6
 8015738:	4602      	mov	r2, r0
 801573a:	1c50      	adds	r0, r2, #1
 801573c:	d1c9      	bne.n	80156d2 <__sflush_r+0x32>
 801573e:	682b      	ldr	r3, [r5, #0]
 8015740:	2b00      	cmp	r3, #0
 8015742:	d0c6      	beq.n	80156d2 <__sflush_r+0x32>
 8015744:	2b1d      	cmp	r3, #29
 8015746:	d001      	beq.n	801574c <__sflush_r+0xac>
 8015748:	2b16      	cmp	r3, #22
 801574a:	d11e      	bne.n	801578a <__sflush_r+0xea>
 801574c:	602f      	str	r7, [r5, #0]
 801574e:	2000      	movs	r0, #0
 8015750:	e022      	b.n	8015798 <__sflush_r+0xf8>
 8015752:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015756:	b21b      	sxth	r3, r3
 8015758:	e01b      	b.n	8015792 <__sflush_r+0xf2>
 801575a:	690f      	ldr	r7, [r1, #16]
 801575c:	2f00      	cmp	r7, #0
 801575e:	d0f6      	beq.n	801574e <__sflush_r+0xae>
 8015760:	0793      	lsls	r3, r2, #30
 8015762:	680e      	ldr	r6, [r1, #0]
 8015764:	bf08      	it	eq
 8015766:	694b      	ldreq	r3, [r1, #20]
 8015768:	600f      	str	r7, [r1, #0]
 801576a:	bf18      	it	ne
 801576c:	2300      	movne	r3, #0
 801576e:	eba6 0807 	sub.w	r8, r6, r7
 8015772:	608b      	str	r3, [r1, #8]
 8015774:	f1b8 0f00 	cmp.w	r8, #0
 8015778:	dde9      	ble.n	801574e <__sflush_r+0xae>
 801577a:	6a21      	ldr	r1, [r4, #32]
 801577c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801577e:	4643      	mov	r3, r8
 8015780:	463a      	mov	r2, r7
 8015782:	4628      	mov	r0, r5
 8015784:	47b0      	blx	r6
 8015786:	2800      	cmp	r0, #0
 8015788:	dc08      	bgt.n	801579c <__sflush_r+0xfc>
 801578a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801578e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015792:	81a3      	strh	r3, [r4, #12]
 8015794:	f04f 30ff 	mov.w	r0, #4294967295
 8015798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801579c:	4407      	add	r7, r0
 801579e:	eba8 0800 	sub.w	r8, r8, r0
 80157a2:	e7e7      	b.n	8015774 <__sflush_r+0xd4>
 80157a4:	dfbffffe 	.word	0xdfbffffe

080157a8 <_fflush_r>:
 80157a8:	b538      	push	{r3, r4, r5, lr}
 80157aa:	690b      	ldr	r3, [r1, #16]
 80157ac:	4605      	mov	r5, r0
 80157ae:	460c      	mov	r4, r1
 80157b0:	b913      	cbnz	r3, 80157b8 <_fflush_r+0x10>
 80157b2:	2500      	movs	r5, #0
 80157b4:	4628      	mov	r0, r5
 80157b6:	bd38      	pop	{r3, r4, r5, pc}
 80157b8:	b118      	cbz	r0, 80157c2 <_fflush_r+0x1a>
 80157ba:	6a03      	ldr	r3, [r0, #32]
 80157bc:	b90b      	cbnz	r3, 80157c2 <_fflush_r+0x1a>
 80157be:	f7fe f877 	bl	80138b0 <__sinit>
 80157c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d0f3      	beq.n	80157b2 <_fflush_r+0xa>
 80157ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80157cc:	07d0      	lsls	r0, r2, #31
 80157ce:	d404      	bmi.n	80157da <_fflush_r+0x32>
 80157d0:	0599      	lsls	r1, r3, #22
 80157d2:	d402      	bmi.n	80157da <_fflush_r+0x32>
 80157d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80157d6:	f7fe f9ea 	bl	8013bae <__retarget_lock_acquire_recursive>
 80157da:	4628      	mov	r0, r5
 80157dc:	4621      	mov	r1, r4
 80157de:	f7ff ff5f 	bl	80156a0 <__sflush_r>
 80157e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80157e4:	07da      	lsls	r2, r3, #31
 80157e6:	4605      	mov	r5, r0
 80157e8:	d4e4      	bmi.n	80157b4 <_fflush_r+0xc>
 80157ea:	89a3      	ldrh	r3, [r4, #12]
 80157ec:	059b      	lsls	r3, r3, #22
 80157ee:	d4e1      	bmi.n	80157b4 <_fflush_r+0xc>
 80157f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80157f2:	f7fe f9dd 	bl	8013bb0 <__retarget_lock_release_recursive>
 80157f6:	e7dd      	b.n	80157b4 <_fflush_r+0xc>

080157f8 <__swbuf_r>:
 80157f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157fa:	460e      	mov	r6, r1
 80157fc:	4614      	mov	r4, r2
 80157fe:	4605      	mov	r5, r0
 8015800:	b118      	cbz	r0, 801580a <__swbuf_r+0x12>
 8015802:	6a03      	ldr	r3, [r0, #32]
 8015804:	b90b      	cbnz	r3, 801580a <__swbuf_r+0x12>
 8015806:	f7fe f853 	bl	80138b0 <__sinit>
 801580a:	69a3      	ldr	r3, [r4, #24]
 801580c:	60a3      	str	r3, [r4, #8]
 801580e:	89a3      	ldrh	r3, [r4, #12]
 8015810:	071a      	lsls	r2, r3, #28
 8015812:	d501      	bpl.n	8015818 <__swbuf_r+0x20>
 8015814:	6923      	ldr	r3, [r4, #16]
 8015816:	b943      	cbnz	r3, 801582a <__swbuf_r+0x32>
 8015818:	4621      	mov	r1, r4
 801581a:	4628      	mov	r0, r5
 801581c:	f000 f82a 	bl	8015874 <__swsetup_r>
 8015820:	b118      	cbz	r0, 801582a <__swbuf_r+0x32>
 8015822:	f04f 37ff 	mov.w	r7, #4294967295
 8015826:	4638      	mov	r0, r7
 8015828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801582a:	6823      	ldr	r3, [r4, #0]
 801582c:	6922      	ldr	r2, [r4, #16]
 801582e:	1a98      	subs	r0, r3, r2
 8015830:	6963      	ldr	r3, [r4, #20]
 8015832:	b2f6      	uxtb	r6, r6
 8015834:	4283      	cmp	r3, r0
 8015836:	4637      	mov	r7, r6
 8015838:	dc05      	bgt.n	8015846 <__swbuf_r+0x4e>
 801583a:	4621      	mov	r1, r4
 801583c:	4628      	mov	r0, r5
 801583e:	f7ff ffb3 	bl	80157a8 <_fflush_r>
 8015842:	2800      	cmp	r0, #0
 8015844:	d1ed      	bne.n	8015822 <__swbuf_r+0x2a>
 8015846:	68a3      	ldr	r3, [r4, #8]
 8015848:	3b01      	subs	r3, #1
 801584a:	60a3      	str	r3, [r4, #8]
 801584c:	6823      	ldr	r3, [r4, #0]
 801584e:	1c5a      	adds	r2, r3, #1
 8015850:	6022      	str	r2, [r4, #0]
 8015852:	701e      	strb	r6, [r3, #0]
 8015854:	6962      	ldr	r2, [r4, #20]
 8015856:	1c43      	adds	r3, r0, #1
 8015858:	429a      	cmp	r2, r3
 801585a:	d004      	beq.n	8015866 <__swbuf_r+0x6e>
 801585c:	89a3      	ldrh	r3, [r4, #12]
 801585e:	07db      	lsls	r3, r3, #31
 8015860:	d5e1      	bpl.n	8015826 <__swbuf_r+0x2e>
 8015862:	2e0a      	cmp	r6, #10
 8015864:	d1df      	bne.n	8015826 <__swbuf_r+0x2e>
 8015866:	4621      	mov	r1, r4
 8015868:	4628      	mov	r0, r5
 801586a:	f7ff ff9d 	bl	80157a8 <_fflush_r>
 801586e:	2800      	cmp	r0, #0
 8015870:	d0d9      	beq.n	8015826 <__swbuf_r+0x2e>
 8015872:	e7d6      	b.n	8015822 <__swbuf_r+0x2a>

08015874 <__swsetup_r>:
 8015874:	b538      	push	{r3, r4, r5, lr}
 8015876:	4b29      	ldr	r3, [pc, #164]	@ (801591c <__swsetup_r+0xa8>)
 8015878:	4605      	mov	r5, r0
 801587a:	6818      	ldr	r0, [r3, #0]
 801587c:	460c      	mov	r4, r1
 801587e:	b118      	cbz	r0, 8015888 <__swsetup_r+0x14>
 8015880:	6a03      	ldr	r3, [r0, #32]
 8015882:	b90b      	cbnz	r3, 8015888 <__swsetup_r+0x14>
 8015884:	f7fe f814 	bl	80138b0 <__sinit>
 8015888:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801588c:	0719      	lsls	r1, r3, #28
 801588e:	d422      	bmi.n	80158d6 <__swsetup_r+0x62>
 8015890:	06da      	lsls	r2, r3, #27
 8015892:	d407      	bmi.n	80158a4 <__swsetup_r+0x30>
 8015894:	2209      	movs	r2, #9
 8015896:	602a      	str	r2, [r5, #0]
 8015898:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801589c:	81a3      	strh	r3, [r4, #12]
 801589e:	f04f 30ff 	mov.w	r0, #4294967295
 80158a2:	e033      	b.n	801590c <__swsetup_r+0x98>
 80158a4:	0758      	lsls	r0, r3, #29
 80158a6:	d512      	bpl.n	80158ce <__swsetup_r+0x5a>
 80158a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80158aa:	b141      	cbz	r1, 80158be <__swsetup_r+0x4a>
 80158ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80158b0:	4299      	cmp	r1, r3
 80158b2:	d002      	beq.n	80158ba <__swsetup_r+0x46>
 80158b4:	4628      	mov	r0, r5
 80158b6:	f7fe ffd7 	bl	8014868 <_free_r>
 80158ba:	2300      	movs	r3, #0
 80158bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80158be:	89a3      	ldrh	r3, [r4, #12]
 80158c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80158c4:	81a3      	strh	r3, [r4, #12]
 80158c6:	2300      	movs	r3, #0
 80158c8:	6063      	str	r3, [r4, #4]
 80158ca:	6923      	ldr	r3, [r4, #16]
 80158cc:	6023      	str	r3, [r4, #0]
 80158ce:	89a3      	ldrh	r3, [r4, #12]
 80158d0:	f043 0308 	orr.w	r3, r3, #8
 80158d4:	81a3      	strh	r3, [r4, #12]
 80158d6:	6923      	ldr	r3, [r4, #16]
 80158d8:	b94b      	cbnz	r3, 80158ee <__swsetup_r+0x7a>
 80158da:	89a3      	ldrh	r3, [r4, #12]
 80158dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80158e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80158e4:	d003      	beq.n	80158ee <__swsetup_r+0x7a>
 80158e6:	4621      	mov	r1, r4
 80158e8:	4628      	mov	r0, r5
 80158ea:	f000 f8fb 	bl	8015ae4 <__smakebuf_r>
 80158ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80158f2:	f013 0201 	ands.w	r2, r3, #1
 80158f6:	d00a      	beq.n	801590e <__swsetup_r+0x9a>
 80158f8:	2200      	movs	r2, #0
 80158fa:	60a2      	str	r2, [r4, #8]
 80158fc:	6962      	ldr	r2, [r4, #20]
 80158fe:	4252      	negs	r2, r2
 8015900:	61a2      	str	r2, [r4, #24]
 8015902:	6922      	ldr	r2, [r4, #16]
 8015904:	b942      	cbnz	r2, 8015918 <__swsetup_r+0xa4>
 8015906:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801590a:	d1c5      	bne.n	8015898 <__swsetup_r+0x24>
 801590c:	bd38      	pop	{r3, r4, r5, pc}
 801590e:	0799      	lsls	r1, r3, #30
 8015910:	bf58      	it	pl
 8015912:	6962      	ldrpl	r2, [r4, #20]
 8015914:	60a2      	str	r2, [r4, #8]
 8015916:	e7f4      	b.n	8015902 <__swsetup_r+0x8e>
 8015918:	2000      	movs	r0, #0
 801591a:	e7f7      	b.n	801590c <__swsetup_r+0x98>
 801591c:	20000034 	.word	0x20000034

08015920 <memmove>:
 8015920:	4288      	cmp	r0, r1
 8015922:	b510      	push	{r4, lr}
 8015924:	eb01 0402 	add.w	r4, r1, r2
 8015928:	d902      	bls.n	8015930 <memmove+0x10>
 801592a:	4284      	cmp	r4, r0
 801592c:	4623      	mov	r3, r4
 801592e:	d807      	bhi.n	8015940 <memmove+0x20>
 8015930:	1e43      	subs	r3, r0, #1
 8015932:	42a1      	cmp	r1, r4
 8015934:	d008      	beq.n	8015948 <memmove+0x28>
 8015936:	f811 2b01 	ldrb.w	r2, [r1], #1
 801593a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801593e:	e7f8      	b.n	8015932 <memmove+0x12>
 8015940:	4402      	add	r2, r0
 8015942:	4601      	mov	r1, r0
 8015944:	428a      	cmp	r2, r1
 8015946:	d100      	bne.n	801594a <memmove+0x2a>
 8015948:	bd10      	pop	{r4, pc}
 801594a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801594e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015952:	e7f7      	b.n	8015944 <memmove+0x24>

08015954 <_sbrk_r>:
 8015954:	b538      	push	{r3, r4, r5, lr}
 8015956:	4d06      	ldr	r5, [pc, #24]	@ (8015970 <_sbrk_r+0x1c>)
 8015958:	2300      	movs	r3, #0
 801595a:	4604      	mov	r4, r0
 801595c:	4608      	mov	r0, r1
 801595e:	602b      	str	r3, [r5, #0]
 8015960:	f7ee ff6a 	bl	8004838 <_sbrk>
 8015964:	1c43      	adds	r3, r0, #1
 8015966:	d102      	bne.n	801596e <_sbrk_r+0x1a>
 8015968:	682b      	ldr	r3, [r5, #0]
 801596a:	b103      	cbz	r3, 801596e <_sbrk_r+0x1a>
 801596c:	6023      	str	r3, [r4, #0]
 801596e:	bd38      	pop	{r3, r4, r5, pc}
 8015970:	20006af4 	.word	0x20006af4

08015974 <__assert_func>:
 8015974:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015976:	4614      	mov	r4, r2
 8015978:	461a      	mov	r2, r3
 801597a:	4b09      	ldr	r3, [pc, #36]	@ (80159a0 <__assert_func+0x2c>)
 801597c:	681b      	ldr	r3, [r3, #0]
 801597e:	4605      	mov	r5, r0
 8015980:	68d8      	ldr	r0, [r3, #12]
 8015982:	b954      	cbnz	r4, 801599a <__assert_func+0x26>
 8015984:	4b07      	ldr	r3, [pc, #28]	@ (80159a4 <__assert_func+0x30>)
 8015986:	461c      	mov	r4, r3
 8015988:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801598c:	9100      	str	r1, [sp, #0]
 801598e:	462b      	mov	r3, r5
 8015990:	4905      	ldr	r1, [pc, #20]	@ (80159a8 <__assert_func+0x34>)
 8015992:	f000 f86f 	bl	8015a74 <fiprintf>
 8015996:	f000 f903 	bl	8015ba0 <abort>
 801599a:	4b04      	ldr	r3, [pc, #16]	@ (80159ac <__assert_func+0x38>)
 801599c:	e7f4      	b.n	8015988 <__assert_func+0x14>
 801599e:	bf00      	nop
 80159a0:	20000034 	.word	0x20000034
 80159a4:	080176b6 	.word	0x080176b6
 80159a8:	08017688 	.word	0x08017688
 80159ac:	0801767b 	.word	0x0801767b

080159b0 <_calloc_r>:
 80159b0:	b570      	push	{r4, r5, r6, lr}
 80159b2:	fba1 5402 	umull	r5, r4, r1, r2
 80159b6:	b93c      	cbnz	r4, 80159c8 <_calloc_r+0x18>
 80159b8:	4629      	mov	r1, r5
 80159ba:	f7fe ffc9 	bl	8014950 <_malloc_r>
 80159be:	4606      	mov	r6, r0
 80159c0:	b928      	cbnz	r0, 80159ce <_calloc_r+0x1e>
 80159c2:	2600      	movs	r6, #0
 80159c4:	4630      	mov	r0, r6
 80159c6:	bd70      	pop	{r4, r5, r6, pc}
 80159c8:	220c      	movs	r2, #12
 80159ca:	6002      	str	r2, [r0, #0]
 80159cc:	e7f9      	b.n	80159c2 <_calloc_r+0x12>
 80159ce:	462a      	mov	r2, r5
 80159d0:	4621      	mov	r1, r4
 80159d2:	f7fe f818 	bl	8013a06 <memset>
 80159d6:	e7f5      	b.n	80159c4 <_calloc_r+0x14>

080159d8 <__ascii_mbtowc>:
 80159d8:	b082      	sub	sp, #8
 80159da:	b901      	cbnz	r1, 80159de <__ascii_mbtowc+0x6>
 80159dc:	a901      	add	r1, sp, #4
 80159de:	b142      	cbz	r2, 80159f2 <__ascii_mbtowc+0x1a>
 80159e0:	b14b      	cbz	r3, 80159f6 <__ascii_mbtowc+0x1e>
 80159e2:	7813      	ldrb	r3, [r2, #0]
 80159e4:	600b      	str	r3, [r1, #0]
 80159e6:	7812      	ldrb	r2, [r2, #0]
 80159e8:	1e10      	subs	r0, r2, #0
 80159ea:	bf18      	it	ne
 80159ec:	2001      	movne	r0, #1
 80159ee:	b002      	add	sp, #8
 80159f0:	4770      	bx	lr
 80159f2:	4610      	mov	r0, r2
 80159f4:	e7fb      	b.n	80159ee <__ascii_mbtowc+0x16>
 80159f6:	f06f 0001 	mvn.w	r0, #1
 80159fa:	e7f8      	b.n	80159ee <__ascii_mbtowc+0x16>

080159fc <_realloc_r>:
 80159fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a00:	4680      	mov	r8, r0
 8015a02:	4615      	mov	r5, r2
 8015a04:	460c      	mov	r4, r1
 8015a06:	b921      	cbnz	r1, 8015a12 <_realloc_r+0x16>
 8015a08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015a0c:	4611      	mov	r1, r2
 8015a0e:	f7fe bf9f 	b.w	8014950 <_malloc_r>
 8015a12:	b92a      	cbnz	r2, 8015a20 <_realloc_r+0x24>
 8015a14:	f7fe ff28 	bl	8014868 <_free_r>
 8015a18:	2400      	movs	r4, #0
 8015a1a:	4620      	mov	r0, r4
 8015a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a20:	f000 f8c5 	bl	8015bae <_malloc_usable_size_r>
 8015a24:	4285      	cmp	r5, r0
 8015a26:	4606      	mov	r6, r0
 8015a28:	d802      	bhi.n	8015a30 <_realloc_r+0x34>
 8015a2a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8015a2e:	d8f4      	bhi.n	8015a1a <_realloc_r+0x1e>
 8015a30:	4629      	mov	r1, r5
 8015a32:	4640      	mov	r0, r8
 8015a34:	f7fe ff8c 	bl	8014950 <_malloc_r>
 8015a38:	4607      	mov	r7, r0
 8015a3a:	2800      	cmp	r0, #0
 8015a3c:	d0ec      	beq.n	8015a18 <_realloc_r+0x1c>
 8015a3e:	42b5      	cmp	r5, r6
 8015a40:	462a      	mov	r2, r5
 8015a42:	4621      	mov	r1, r4
 8015a44:	bf28      	it	cs
 8015a46:	4632      	movcs	r2, r6
 8015a48:	f7fe f8b3 	bl	8013bb2 <memcpy>
 8015a4c:	4621      	mov	r1, r4
 8015a4e:	4640      	mov	r0, r8
 8015a50:	f7fe ff0a 	bl	8014868 <_free_r>
 8015a54:	463c      	mov	r4, r7
 8015a56:	e7e0      	b.n	8015a1a <_realloc_r+0x1e>

08015a58 <__ascii_wctomb>:
 8015a58:	4603      	mov	r3, r0
 8015a5a:	4608      	mov	r0, r1
 8015a5c:	b141      	cbz	r1, 8015a70 <__ascii_wctomb+0x18>
 8015a5e:	2aff      	cmp	r2, #255	@ 0xff
 8015a60:	d904      	bls.n	8015a6c <__ascii_wctomb+0x14>
 8015a62:	228a      	movs	r2, #138	@ 0x8a
 8015a64:	601a      	str	r2, [r3, #0]
 8015a66:	f04f 30ff 	mov.w	r0, #4294967295
 8015a6a:	4770      	bx	lr
 8015a6c:	700a      	strb	r2, [r1, #0]
 8015a6e:	2001      	movs	r0, #1
 8015a70:	4770      	bx	lr
	...

08015a74 <fiprintf>:
 8015a74:	b40e      	push	{r1, r2, r3}
 8015a76:	b503      	push	{r0, r1, lr}
 8015a78:	4601      	mov	r1, r0
 8015a7a:	ab03      	add	r3, sp, #12
 8015a7c:	4805      	ldr	r0, [pc, #20]	@ (8015a94 <fiprintf+0x20>)
 8015a7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015a82:	6800      	ldr	r0, [r0, #0]
 8015a84:	9301      	str	r3, [sp, #4]
 8015a86:	f7ff fcf3 	bl	8015470 <_vfiprintf_r>
 8015a8a:	b002      	add	sp, #8
 8015a8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015a90:	b003      	add	sp, #12
 8015a92:	4770      	bx	lr
 8015a94:	20000034 	.word	0x20000034

08015a98 <__swhatbuf_r>:
 8015a98:	b570      	push	{r4, r5, r6, lr}
 8015a9a:	460c      	mov	r4, r1
 8015a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015aa0:	2900      	cmp	r1, #0
 8015aa2:	b096      	sub	sp, #88	@ 0x58
 8015aa4:	4615      	mov	r5, r2
 8015aa6:	461e      	mov	r6, r3
 8015aa8:	da0d      	bge.n	8015ac6 <__swhatbuf_r+0x2e>
 8015aaa:	89a3      	ldrh	r3, [r4, #12]
 8015aac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015ab0:	f04f 0100 	mov.w	r1, #0
 8015ab4:	bf14      	ite	ne
 8015ab6:	2340      	movne	r3, #64	@ 0x40
 8015ab8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015abc:	2000      	movs	r0, #0
 8015abe:	6031      	str	r1, [r6, #0]
 8015ac0:	602b      	str	r3, [r5, #0]
 8015ac2:	b016      	add	sp, #88	@ 0x58
 8015ac4:	bd70      	pop	{r4, r5, r6, pc}
 8015ac6:	466a      	mov	r2, sp
 8015ac8:	f000 f848 	bl	8015b5c <_fstat_r>
 8015acc:	2800      	cmp	r0, #0
 8015ace:	dbec      	blt.n	8015aaa <__swhatbuf_r+0x12>
 8015ad0:	9901      	ldr	r1, [sp, #4]
 8015ad2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015ad6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015ada:	4259      	negs	r1, r3
 8015adc:	4159      	adcs	r1, r3
 8015ade:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015ae2:	e7eb      	b.n	8015abc <__swhatbuf_r+0x24>

08015ae4 <__smakebuf_r>:
 8015ae4:	898b      	ldrh	r3, [r1, #12]
 8015ae6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015ae8:	079d      	lsls	r5, r3, #30
 8015aea:	4606      	mov	r6, r0
 8015aec:	460c      	mov	r4, r1
 8015aee:	d507      	bpl.n	8015b00 <__smakebuf_r+0x1c>
 8015af0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015af4:	6023      	str	r3, [r4, #0]
 8015af6:	6123      	str	r3, [r4, #16]
 8015af8:	2301      	movs	r3, #1
 8015afa:	6163      	str	r3, [r4, #20]
 8015afc:	b003      	add	sp, #12
 8015afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b00:	ab01      	add	r3, sp, #4
 8015b02:	466a      	mov	r2, sp
 8015b04:	f7ff ffc8 	bl	8015a98 <__swhatbuf_r>
 8015b08:	9f00      	ldr	r7, [sp, #0]
 8015b0a:	4605      	mov	r5, r0
 8015b0c:	4639      	mov	r1, r7
 8015b0e:	4630      	mov	r0, r6
 8015b10:	f7fe ff1e 	bl	8014950 <_malloc_r>
 8015b14:	b948      	cbnz	r0, 8015b2a <__smakebuf_r+0x46>
 8015b16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015b1a:	059a      	lsls	r2, r3, #22
 8015b1c:	d4ee      	bmi.n	8015afc <__smakebuf_r+0x18>
 8015b1e:	f023 0303 	bic.w	r3, r3, #3
 8015b22:	f043 0302 	orr.w	r3, r3, #2
 8015b26:	81a3      	strh	r3, [r4, #12]
 8015b28:	e7e2      	b.n	8015af0 <__smakebuf_r+0xc>
 8015b2a:	89a3      	ldrh	r3, [r4, #12]
 8015b2c:	6020      	str	r0, [r4, #0]
 8015b2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015b32:	81a3      	strh	r3, [r4, #12]
 8015b34:	9b01      	ldr	r3, [sp, #4]
 8015b36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015b3a:	b15b      	cbz	r3, 8015b54 <__smakebuf_r+0x70>
 8015b3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015b40:	4630      	mov	r0, r6
 8015b42:	f000 f81d 	bl	8015b80 <_isatty_r>
 8015b46:	b128      	cbz	r0, 8015b54 <__smakebuf_r+0x70>
 8015b48:	89a3      	ldrh	r3, [r4, #12]
 8015b4a:	f023 0303 	bic.w	r3, r3, #3
 8015b4e:	f043 0301 	orr.w	r3, r3, #1
 8015b52:	81a3      	strh	r3, [r4, #12]
 8015b54:	89a3      	ldrh	r3, [r4, #12]
 8015b56:	431d      	orrs	r5, r3
 8015b58:	81a5      	strh	r5, [r4, #12]
 8015b5a:	e7cf      	b.n	8015afc <__smakebuf_r+0x18>

08015b5c <_fstat_r>:
 8015b5c:	b538      	push	{r3, r4, r5, lr}
 8015b5e:	4d07      	ldr	r5, [pc, #28]	@ (8015b7c <_fstat_r+0x20>)
 8015b60:	2300      	movs	r3, #0
 8015b62:	4604      	mov	r4, r0
 8015b64:	4608      	mov	r0, r1
 8015b66:	4611      	mov	r1, r2
 8015b68:	602b      	str	r3, [r5, #0]
 8015b6a:	f7ee fe3d 	bl	80047e8 <_fstat>
 8015b6e:	1c43      	adds	r3, r0, #1
 8015b70:	d102      	bne.n	8015b78 <_fstat_r+0x1c>
 8015b72:	682b      	ldr	r3, [r5, #0]
 8015b74:	b103      	cbz	r3, 8015b78 <_fstat_r+0x1c>
 8015b76:	6023      	str	r3, [r4, #0]
 8015b78:	bd38      	pop	{r3, r4, r5, pc}
 8015b7a:	bf00      	nop
 8015b7c:	20006af4 	.word	0x20006af4

08015b80 <_isatty_r>:
 8015b80:	b538      	push	{r3, r4, r5, lr}
 8015b82:	4d06      	ldr	r5, [pc, #24]	@ (8015b9c <_isatty_r+0x1c>)
 8015b84:	2300      	movs	r3, #0
 8015b86:	4604      	mov	r4, r0
 8015b88:	4608      	mov	r0, r1
 8015b8a:	602b      	str	r3, [r5, #0]
 8015b8c:	f7ee fe3c 	bl	8004808 <_isatty>
 8015b90:	1c43      	adds	r3, r0, #1
 8015b92:	d102      	bne.n	8015b9a <_isatty_r+0x1a>
 8015b94:	682b      	ldr	r3, [r5, #0]
 8015b96:	b103      	cbz	r3, 8015b9a <_isatty_r+0x1a>
 8015b98:	6023      	str	r3, [r4, #0]
 8015b9a:	bd38      	pop	{r3, r4, r5, pc}
 8015b9c:	20006af4 	.word	0x20006af4

08015ba0 <abort>:
 8015ba0:	b508      	push	{r3, lr}
 8015ba2:	2006      	movs	r0, #6
 8015ba4:	f000 f834 	bl	8015c10 <raise>
 8015ba8:	2001      	movs	r0, #1
 8015baa:	f7ee fde9 	bl	8004780 <_exit>

08015bae <_malloc_usable_size_r>:
 8015bae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015bb2:	1f18      	subs	r0, r3, #4
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	bfbc      	itt	lt
 8015bb8:	580b      	ldrlt	r3, [r1, r0]
 8015bba:	18c0      	addlt	r0, r0, r3
 8015bbc:	4770      	bx	lr

08015bbe <_raise_r>:
 8015bbe:	291f      	cmp	r1, #31
 8015bc0:	b538      	push	{r3, r4, r5, lr}
 8015bc2:	4605      	mov	r5, r0
 8015bc4:	460c      	mov	r4, r1
 8015bc6:	d904      	bls.n	8015bd2 <_raise_r+0x14>
 8015bc8:	2316      	movs	r3, #22
 8015bca:	6003      	str	r3, [r0, #0]
 8015bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8015bd0:	bd38      	pop	{r3, r4, r5, pc}
 8015bd2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015bd4:	b112      	cbz	r2, 8015bdc <_raise_r+0x1e>
 8015bd6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015bda:	b94b      	cbnz	r3, 8015bf0 <_raise_r+0x32>
 8015bdc:	4628      	mov	r0, r5
 8015bde:	f000 f831 	bl	8015c44 <_getpid_r>
 8015be2:	4622      	mov	r2, r4
 8015be4:	4601      	mov	r1, r0
 8015be6:	4628      	mov	r0, r5
 8015be8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015bec:	f000 b818 	b.w	8015c20 <_kill_r>
 8015bf0:	2b01      	cmp	r3, #1
 8015bf2:	d00a      	beq.n	8015c0a <_raise_r+0x4c>
 8015bf4:	1c59      	adds	r1, r3, #1
 8015bf6:	d103      	bne.n	8015c00 <_raise_r+0x42>
 8015bf8:	2316      	movs	r3, #22
 8015bfa:	6003      	str	r3, [r0, #0]
 8015bfc:	2001      	movs	r0, #1
 8015bfe:	e7e7      	b.n	8015bd0 <_raise_r+0x12>
 8015c00:	2100      	movs	r1, #0
 8015c02:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015c06:	4620      	mov	r0, r4
 8015c08:	4798      	blx	r3
 8015c0a:	2000      	movs	r0, #0
 8015c0c:	e7e0      	b.n	8015bd0 <_raise_r+0x12>
	...

08015c10 <raise>:
 8015c10:	4b02      	ldr	r3, [pc, #8]	@ (8015c1c <raise+0xc>)
 8015c12:	4601      	mov	r1, r0
 8015c14:	6818      	ldr	r0, [r3, #0]
 8015c16:	f7ff bfd2 	b.w	8015bbe <_raise_r>
 8015c1a:	bf00      	nop
 8015c1c:	20000034 	.word	0x20000034

08015c20 <_kill_r>:
 8015c20:	b538      	push	{r3, r4, r5, lr}
 8015c22:	4d07      	ldr	r5, [pc, #28]	@ (8015c40 <_kill_r+0x20>)
 8015c24:	2300      	movs	r3, #0
 8015c26:	4604      	mov	r4, r0
 8015c28:	4608      	mov	r0, r1
 8015c2a:	4611      	mov	r1, r2
 8015c2c:	602b      	str	r3, [r5, #0]
 8015c2e:	f7ee fd97 	bl	8004760 <_kill>
 8015c32:	1c43      	adds	r3, r0, #1
 8015c34:	d102      	bne.n	8015c3c <_kill_r+0x1c>
 8015c36:	682b      	ldr	r3, [r5, #0]
 8015c38:	b103      	cbz	r3, 8015c3c <_kill_r+0x1c>
 8015c3a:	6023      	str	r3, [r4, #0]
 8015c3c:	bd38      	pop	{r3, r4, r5, pc}
 8015c3e:	bf00      	nop
 8015c40:	20006af4 	.word	0x20006af4

08015c44 <_getpid_r>:
 8015c44:	f7ee bd84 	b.w	8004750 <_getpid>

08015c48 <asinf>:
 8015c48:	b508      	push	{r3, lr}
 8015c4a:	ed2d 8b02 	vpush	{d8}
 8015c4e:	eeb0 8a40 	vmov.f32	s16, s0
 8015c52:	f000 fb41 	bl	80162d8 <__ieee754_asinf>
 8015c56:	eeb4 8a48 	vcmp.f32	s16, s16
 8015c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c5e:	eef0 8a40 	vmov.f32	s17, s0
 8015c62:	d615      	bvs.n	8015c90 <asinf+0x48>
 8015c64:	eeb0 0a48 	vmov.f32	s0, s16
 8015c68:	f000 f932 	bl	8015ed0 <fabsf>
 8015c6c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8015c70:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c78:	dd0a      	ble.n	8015c90 <asinf+0x48>
 8015c7a:	f7fd ff6d 	bl	8013b58 <__errno>
 8015c7e:	ecbd 8b02 	vpop	{d8}
 8015c82:	2321      	movs	r3, #33	@ 0x21
 8015c84:	6003      	str	r3, [r0, #0]
 8015c86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015c8a:	4804      	ldr	r0, [pc, #16]	@ (8015c9c <asinf+0x54>)
 8015c8c:	f000 b99a 	b.w	8015fc4 <nanf>
 8015c90:	eeb0 0a68 	vmov.f32	s0, s17
 8015c94:	ecbd 8b02 	vpop	{d8}
 8015c98:	bd08      	pop	{r3, pc}
 8015c9a:	bf00      	nop
 8015c9c:	080176b6 	.word	0x080176b6

08015ca0 <atanf>:
 8015ca0:	b538      	push	{r3, r4, r5, lr}
 8015ca2:	ee10 5a10 	vmov	r5, s0
 8015ca6:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8015caa:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8015cae:	eef0 7a40 	vmov.f32	s15, s0
 8015cb2:	d310      	bcc.n	8015cd6 <atanf+0x36>
 8015cb4:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8015cb8:	d904      	bls.n	8015cc4 <atanf+0x24>
 8015cba:	ee70 7a00 	vadd.f32	s15, s0, s0
 8015cbe:	eeb0 0a67 	vmov.f32	s0, s15
 8015cc2:	bd38      	pop	{r3, r4, r5, pc}
 8015cc4:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8015dfc <atanf+0x15c>
 8015cc8:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8015e00 <atanf+0x160>
 8015ccc:	2d00      	cmp	r5, #0
 8015cce:	bfc8      	it	gt
 8015cd0:	eef0 7a47 	vmovgt.f32	s15, s14
 8015cd4:	e7f3      	b.n	8015cbe <atanf+0x1e>
 8015cd6:	4b4b      	ldr	r3, [pc, #300]	@ (8015e04 <atanf+0x164>)
 8015cd8:	429c      	cmp	r4, r3
 8015cda:	d810      	bhi.n	8015cfe <atanf+0x5e>
 8015cdc:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8015ce0:	d20a      	bcs.n	8015cf8 <atanf+0x58>
 8015ce2:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8015e08 <atanf+0x168>
 8015ce6:	ee30 7a07 	vadd.f32	s14, s0, s14
 8015cea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015cee:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8015cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cf6:	dce2      	bgt.n	8015cbe <atanf+0x1e>
 8015cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8015cfc:	e013      	b.n	8015d26 <atanf+0x86>
 8015cfe:	f000 f8e7 	bl	8015ed0 <fabsf>
 8015d02:	4b42      	ldr	r3, [pc, #264]	@ (8015e0c <atanf+0x16c>)
 8015d04:	429c      	cmp	r4, r3
 8015d06:	d84f      	bhi.n	8015da8 <atanf+0x108>
 8015d08:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8015d0c:	429c      	cmp	r4, r3
 8015d0e:	d841      	bhi.n	8015d94 <atanf+0xf4>
 8015d10:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8015d14:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8015d18:	eea0 7a27 	vfma.f32	s14, s0, s15
 8015d1c:	2300      	movs	r3, #0
 8015d1e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015d22:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015d26:	1c5a      	adds	r2, r3, #1
 8015d28:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8015d2c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8015e10 <atanf+0x170>
 8015d30:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8015e14 <atanf+0x174>
 8015d34:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8015e18 <atanf+0x178>
 8015d38:	ee66 6a06 	vmul.f32	s13, s12, s12
 8015d3c:	eee6 5a87 	vfma.f32	s11, s13, s14
 8015d40:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8015e1c <atanf+0x17c>
 8015d44:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8015d48:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8015e20 <atanf+0x180>
 8015d4c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8015d50:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8015e24 <atanf+0x184>
 8015d54:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8015d58:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8015e28 <atanf+0x188>
 8015d5c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8015d60:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8015e2c <atanf+0x18c>
 8015d64:	eea6 5a87 	vfma.f32	s10, s13, s14
 8015d68:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8015e30 <atanf+0x190>
 8015d6c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8015d70:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8015e34 <atanf+0x194>
 8015d74:	eea7 5a26 	vfma.f32	s10, s14, s13
 8015d78:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8015e38 <atanf+0x198>
 8015d7c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8015d80:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015d84:	eea5 7a86 	vfma.f32	s14, s11, s12
 8015d88:	ee27 7a87 	vmul.f32	s14, s15, s14
 8015d8c:	d121      	bne.n	8015dd2 <atanf+0x132>
 8015d8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015d92:	e794      	b.n	8015cbe <atanf+0x1e>
 8015d94:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8015d98:	ee30 7a67 	vsub.f32	s14, s0, s15
 8015d9c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015da0:	2301      	movs	r3, #1
 8015da2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015da6:	e7be      	b.n	8015d26 <atanf+0x86>
 8015da8:	4b24      	ldr	r3, [pc, #144]	@ (8015e3c <atanf+0x19c>)
 8015daa:	429c      	cmp	r4, r3
 8015dac:	d80b      	bhi.n	8015dc6 <atanf+0x126>
 8015dae:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8015db2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015db6:	eea0 7a27 	vfma.f32	s14, s0, s15
 8015dba:	2302      	movs	r3, #2
 8015dbc:	ee70 6a67 	vsub.f32	s13, s0, s15
 8015dc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015dc4:	e7af      	b.n	8015d26 <atanf+0x86>
 8015dc6:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8015dca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015dce:	2303      	movs	r3, #3
 8015dd0:	e7a9      	b.n	8015d26 <atanf+0x86>
 8015dd2:	4a1b      	ldr	r2, [pc, #108]	@ (8015e40 <atanf+0x1a0>)
 8015dd4:	491b      	ldr	r1, [pc, #108]	@ (8015e44 <atanf+0x1a4>)
 8015dd6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8015dda:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8015dde:	edd3 6a00 	vldr	s13, [r3]
 8015de2:	ee37 7a66 	vsub.f32	s14, s14, s13
 8015de6:	2d00      	cmp	r5, #0
 8015de8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015dec:	edd2 7a00 	vldr	s15, [r2]
 8015df0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015df4:	bfb8      	it	lt
 8015df6:	eef1 7a67 	vneglt.f32	s15, s15
 8015dfa:	e760      	b.n	8015cbe <atanf+0x1e>
 8015dfc:	bfc90fdb 	.word	0xbfc90fdb
 8015e00:	3fc90fdb 	.word	0x3fc90fdb
 8015e04:	3edfffff 	.word	0x3edfffff
 8015e08:	7149f2ca 	.word	0x7149f2ca
 8015e0c:	3f97ffff 	.word	0x3f97ffff
 8015e10:	3c8569d7 	.word	0x3c8569d7
 8015e14:	3d4bda59 	.word	0x3d4bda59
 8015e18:	bd6ef16b 	.word	0xbd6ef16b
 8015e1c:	3d886b35 	.word	0x3d886b35
 8015e20:	3dba2e6e 	.word	0x3dba2e6e
 8015e24:	3e124925 	.word	0x3e124925
 8015e28:	3eaaaaab 	.word	0x3eaaaaab
 8015e2c:	bd15a221 	.word	0xbd15a221
 8015e30:	bd9d8795 	.word	0xbd9d8795
 8015e34:	bde38e38 	.word	0xbde38e38
 8015e38:	be4ccccd 	.word	0xbe4ccccd
 8015e3c:	401bffff 	.word	0x401bffff
 8015e40:	080177c8 	.word	0x080177c8
 8015e44:	080177b8 	.word	0x080177b8

08015e48 <cosf>:
 8015e48:	ee10 3a10 	vmov	r3, s0
 8015e4c:	b507      	push	{r0, r1, r2, lr}
 8015e4e:	4a1e      	ldr	r2, [pc, #120]	@ (8015ec8 <cosf+0x80>)
 8015e50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015e54:	4293      	cmp	r3, r2
 8015e56:	d806      	bhi.n	8015e66 <cosf+0x1e>
 8015e58:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8015ecc <cosf+0x84>
 8015e5c:	b003      	add	sp, #12
 8015e5e:	f85d eb04 	ldr.w	lr, [sp], #4
 8015e62:	f000 b8b9 	b.w	8015fd8 <__kernel_cosf>
 8015e66:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8015e6a:	d304      	bcc.n	8015e76 <cosf+0x2e>
 8015e6c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8015e70:	b003      	add	sp, #12
 8015e72:	f85d fb04 	ldr.w	pc, [sp], #4
 8015e76:	4668      	mov	r0, sp
 8015e78:	f000 fb14 	bl	80164a4 <__ieee754_rem_pio2f>
 8015e7c:	f000 0003 	and.w	r0, r0, #3
 8015e80:	2801      	cmp	r0, #1
 8015e82:	d009      	beq.n	8015e98 <cosf+0x50>
 8015e84:	2802      	cmp	r0, #2
 8015e86:	d010      	beq.n	8015eaa <cosf+0x62>
 8015e88:	b9b0      	cbnz	r0, 8015eb8 <cosf+0x70>
 8015e8a:	eddd 0a01 	vldr	s1, [sp, #4]
 8015e8e:	ed9d 0a00 	vldr	s0, [sp]
 8015e92:	f000 f8a1 	bl	8015fd8 <__kernel_cosf>
 8015e96:	e7eb      	b.n	8015e70 <cosf+0x28>
 8015e98:	eddd 0a01 	vldr	s1, [sp, #4]
 8015e9c:	ed9d 0a00 	vldr	s0, [sp]
 8015ea0:	f000 f8f2 	bl	8016088 <__kernel_sinf>
 8015ea4:	eeb1 0a40 	vneg.f32	s0, s0
 8015ea8:	e7e2      	b.n	8015e70 <cosf+0x28>
 8015eaa:	eddd 0a01 	vldr	s1, [sp, #4]
 8015eae:	ed9d 0a00 	vldr	s0, [sp]
 8015eb2:	f000 f891 	bl	8015fd8 <__kernel_cosf>
 8015eb6:	e7f5      	b.n	8015ea4 <cosf+0x5c>
 8015eb8:	eddd 0a01 	vldr	s1, [sp, #4]
 8015ebc:	ed9d 0a00 	vldr	s0, [sp]
 8015ec0:	2001      	movs	r0, #1
 8015ec2:	f000 f8e1 	bl	8016088 <__kernel_sinf>
 8015ec6:	e7d3      	b.n	8015e70 <cosf+0x28>
 8015ec8:	3f490fd8 	.word	0x3f490fd8
 8015ecc:	00000000 	.word	0x00000000

08015ed0 <fabsf>:
 8015ed0:	ee10 3a10 	vmov	r3, s0
 8015ed4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015ed8:	ee00 3a10 	vmov	s0, r3
 8015edc:	4770      	bx	lr
	...

08015ee0 <sinf>:
 8015ee0:	ee10 3a10 	vmov	r3, s0
 8015ee4:	b507      	push	{r0, r1, r2, lr}
 8015ee6:	4a1f      	ldr	r2, [pc, #124]	@ (8015f64 <sinf+0x84>)
 8015ee8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015eec:	4293      	cmp	r3, r2
 8015eee:	d807      	bhi.n	8015f00 <sinf+0x20>
 8015ef0:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8015f68 <sinf+0x88>
 8015ef4:	2000      	movs	r0, #0
 8015ef6:	b003      	add	sp, #12
 8015ef8:	f85d eb04 	ldr.w	lr, [sp], #4
 8015efc:	f000 b8c4 	b.w	8016088 <__kernel_sinf>
 8015f00:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8015f04:	d304      	bcc.n	8015f10 <sinf+0x30>
 8015f06:	ee30 0a40 	vsub.f32	s0, s0, s0
 8015f0a:	b003      	add	sp, #12
 8015f0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8015f10:	4668      	mov	r0, sp
 8015f12:	f000 fac7 	bl	80164a4 <__ieee754_rem_pio2f>
 8015f16:	f000 0003 	and.w	r0, r0, #3
 8015f1a:	2801      	cmp	r0, #1
 8015f1c:	d00a      	beq.n	8015f34 <sinf+0x54>
 8015f1e:	2802      	cmp	r0, #2
 8015f20:	d00f      	beq.n	8015f42 <sinf+0x62>
 8015f22:	b9c0      	cbnz	r0, 8015f56 <sinf+0x76>
 8015f24:	eddd 0a01 	vldr	s1, [sp, #4]
 8015f28:	ed9d 0a00 	vldr	s0, [sp]
 8015f2c:	2001      	movs	r0, #1
 8015f2e:	f000 f8ab 	bl	8016088 <__kernel_sinf>
 8015f32:	e7ea      	b.n	8015f0a <sinf+0x2a>
 8015f34:	eddd 0a01 	vldr	s1, [sp, #4]
 8015f38:	ed9d 0a00 	vldr	s0, [sp]
 8015f3c:	f000 f84c 	bl	8015fd8 <__kernel_cosf>
 8015f40:	e7e3      	b.n	8015f0a <sinf+0x2a>
 8015f42:	eddd 0a01 	vldr	s1, [sp, #4]
 8015f46:	ed9d 0a00 	vldr	s0, [sp]
 8015f4a:	2001      	movs	r0, #1
 8015f4c:	f000 f89c 	bl	8016088 <__kernel_sinf>
 8015f50:	eeb1 0a40 	vneg.f32	s0, s0
 8015f54:	e7d9      	b.n	8015f0a <sinf+0x2a>
 8015f56:	eddd 0a01 	vldr	s1, [sp, #4]
 8015f5a:	ed9d 0a00 	vldr	s0, [sp]
 8015f5e:	f000 f83b 	bl	8015fd8 <__kernel_cosf>
 8015f62:	e7f5      	b.n	8015f50 <sinf+0x70>
 8015f64:	3f490fd8 	.word	0x3f490fd8
 8015f68:	00000000 	.word	0x00000000

08015f6c <tanf>:
 8015f6c:	ee10 3a10 	vmov	r3, s0
 8015f70:	b507      	push	{r0, r1, r2, lr}
 8015f72:	4a12      	ldr	r2, [pc, #72]	@ (8015fbc <tanf+0x50>)
 8015f74:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015f78:	4293      	cmp	r3, r2
 8015f7a:	d807      	bhi.n	8015f8c <tanf+0x20>
 8015f7c:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8015fc0 <tanf+0x54>
 8015f80:	2001      	movs	r0, #1
 8015f82:	b003      	add	sp, #12
 8015f84:	f85d eb04 	ldr.w	lr, [sp], #4
 8015f88:	f000 b8c6 	b.w	8016118 <__kernel_tanf>
 8015f8c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8015f90:	d304      	bcc.n	8015f9c <tanf+0x30>
 8015f92:	ee30 0a40 	vsub.f32	s0, s0, s0
 8015f96:	b003      	add	sp, #12
 8015f98:	f85d fb04 	ldr.w	pc, [sp], #4
 8015f9c:	4668      	mov	r0, sp
 8015f9e:	f000 fa81 	bl	80164a4 <__ieee754_rem_pio2f>
 8015fa2:	0040      	lsls	r0, r0, #1
 8015fa4:	f000 0002 	and.w	r0, r0, #2
 8015fa8:	eddd 0a01 	vldr	s1, [sp, #4]
 8015fac:	ed9d 0a00 	vldr	s0, [sp]
 8015fb0:	f1c0 0001 	rsb	r0, r0, #1
 8015fb4:	f000 f8b0 	bl	8016118 <__kernel_tanf>
 8015fb8:	e7ed      	b.n	8015f96 <tanf+0x2a>
 8015fba:	bf00      	nop
 8015fbc:	3f490fda 	.word	0x3f490fda
 8015fc0:	00000000 	.word	0x00000000

08015fc4 <nanf>:
 8015fc4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8015fcc <nanf+0x8>
 8015fc8:	4770      	bx	lr
 8015fca:	bf00      	nop
 8015fcc:	7fc00000 	.word	0x7fc00000

08015fd0 <__ieee754_sqrtf>:
 8015fd0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8015fd4:	4770      	bx	lr
	...

08015fd8 <__kernel_cosf>:
 8015fd8:	ee10 3a10 	vmov	r3, s0
 8015fdc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015fe0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8015fe4:	eef0 6a40 	vmov.f32	s13, s0
 8015fe8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015fec:	d204      	bcs.n	8015ff8 <__kernel_cosf+0x20>
 8015fee:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8015ff2:	ee17 2a90 	vmov	r2, s15
 8015ff6:	b342      	cbz	r2, 801604a <__kernel_cosf+0x72>
 8015ff8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8015ffc:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8016068 <__kernel_cosf+0x90>
 8016000:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 801606c <__kernel_cosf+0x94>
 8016004:	4a1a      	ldr	r2, [pc, #104]	@ (8016070 <__kernel_cosf+0x98>)
 8016006:	eea7 6a27 	vfma.f32	s12, s14, s15
 801600a:	4293      	cmp	r3, r2
 801600c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8016074 <__kernel_cosf+0x9c>
 8016010:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016014:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8016078 <__kernel_cosf+0xa0>
 8016018:	eea7 6a87 	vfma.f32	s12, s15, s14
 801601c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 801607c <__kernel_cosf+0xa4>
 8016020:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016024:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8016080 <__kernel_cosf+0xa8>
 8016028:	eea7 6a87 	vfma.f32	s12, s15, s14
 801602c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8016030:	ee26 6a07 	vmul.f32	s12, s12, s14
 8016034:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8016038:	eee7 0a06 	vfma.f32	s1, s14, s12
 801603c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016040:	d804      	bhi.n	801604c <__kernel_cosf+0x74>
 8016042:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8016046:	ee30 0a67 	vsub.f32	s0, s0, s15
 801604a:	4770      	bx	lr
 801604c:	4a0d      	ldr	r2, [pc, #52]	@ (8016084 <__kernel_cosf+0xac>)
 801604e:	4293      	cmp	r3, r2
 8016050:	bf9a      	itte	ls
 8016052:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8016056:	ee07 3a10 	vmovls	s14, r3
 801605a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 801605e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016062:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016066:	e7ec      	b.n	8016042 <__kernel_cosf+0x6a>
 8016068:	ad47d74e 	.word	0xad47d74e
 801606c:	310f74f6 	.word	0x310f74f6
 8016070:	3e999999 	.word	0x3e999999
 8016074:	b493f27c 	.word	0xb493f27c
 8016078:	37d00d01 	.word	0x37d00d01
 801607c:	bab60b61 	.word	0xbab60b61
 8016080:	3d2aaaab 	.word	0x3d2aaaab
 8016084:	3f480000 	.word	0x3f480000

08016088 <__kernel_sinf>:
 8016088:	ee10 3a10 	vmov	r3, s0
 801608c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8016090:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8016094:	d204      	bcs.n	80160a0 <__kernel_sinf+0x18>
 8016096:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801609a:	ee17 3a90 	vmov	r3, s15
 801609e:	b35b      	cbz	r3, 80160f8 <__kernel_sinf+0x70>
 80160a0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80160a4:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80160fc <__kernel_sinf+0x74>
 80160a8:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8016100 <__kernel_sinf+0x78>
 80160ac:	eea7 6a27 	vfma.f32	s12, s14, s15
 80160b0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8016104 <__kernel_sinf+0x7c>
 80160b4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80160b8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8016108 <__kernel_sinf+0x80>
 80160bc:	eea7 6a87 	vfma.f32	s12, s15, s14
 80160c0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 801610c <__kernel_sinf+0x84>
 80160c4:	ee60 6a07 	vmul.f32	s13, s0, s14
 80160c8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80160cc:	b930      	cbnz	r0, 80160dc <__kernel_sinf+0x54>
 80160ce:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8016110 <__kernel_sinf+0x88>
 80160d2:	eea7 6a27 	vfma.f32	s12, s14, s15
 80160d6:	eea6 0a26 	vfma.f32	s0, s12, s13
 80160da:	4770      	bx	lr
 80160dc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80160e0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80160e4:	eee0 7a86 	vfma.f32	s15, s1, s12
 80160e8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80160ec:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8016114 <__kernel_sinf+0x8c>
 80160f0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80160f4:	ee30 0a60 	vsub.f32	s0, s0, s1
 80160f8:	4770      	bx	lr
 80160fa:	bf00      	nop
 80160fc:	2f2ec9d3 	.word	0x2f2ec9d3
 8016100:	b2d72f34 	.word	0xb2d72f34
 8016104:	3638ef1b 	.word	0x3638ef1b
 8016108:	b9500d01 	.word	0xb9500d01
 801610c:	3c088889 	.word	0x3c088889
 8016110:	be2aaaab 	.word	0xbe2aaaab
 8016114:	3e2aaaab 	.word	0x3e2aaaab

08016118 <__kernel_tanf>:
 8016118:	b508      	push	{r3, lr}
 801611a:	ee10 3a10 	vmov	r3, s0
 801611e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8016122:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 8016126:	eef0 7a40 	vmov.f32	s15, s0
 801612a:	d217      	bcs.n	801615c <__kernel_tanf+0x44>
 801612c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8016130:	ee17 1a10 	vmov	r1, s14
 8016134:	bb41      	cbnz	r1, 8016188 <__kernel_tanf+0x70>
 8016136:	1c43      	adds	r3, r0, #1
 8016138:	4313      	orrs	r3, r2
 801613a:	d108      	bne.n	801614e <__kernel_tanf+0x36>
 801613c:	f7ff fec8 	bl	8015ed0 <fabsf>
 8016140:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016144:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016148:	eeb0 0a67 	vmov.f32	s0, s15
 801614c:	bd08      	pop	{r3, pc}
 801614e:	2801      	cmp	r0, #1
 8016150:	d0fa      	beq.n	8016148 <__kernel_tanf+0x30>
 8016152:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8016156:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801615a:	e7f5      	b.n	8016148 <__kernel_tanf+0x30>
 801615c:	494c      	ldr	r1, [pc, #304]	@ (8016290 <__kernel_tanf+0x178>)
 801615e:	428a      	cmp	r2, r1
 8016160:	d312      	bcc.n	8016188 <__kernel_tanf+0x70>
 8016162:	2b00      	cmp	r3, #0
 8016164:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8016294 <__kernel_tanf+0x17c>
 8016168:	bfb8      	it	lt
 801616a:	eef1 7a40 	vneglt.f32	s15, s0
 801616e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016172:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8016298 <__kernel_tanf+0x180>
 8016176:	bfb8      	it	lt
 8016178:	eef1 0a60 	vneglt.f32	s1, s1
 801617c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8016180:	eddf 0a46 	vldr	s1, [pc, #280]	@ 801629c <__kernel_tanf+0x184>
 8016184:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016188:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801618c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80162a0 <__kernel_tanf+0x188>
 8016190:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 80162a4 <__kernel_tanf+0x18c>
 8016194:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 80162a8 <__kernel_tanf+0x190>
 8016198:	493d      	ldr	r1, [pc, #244]	@ (8016290 <__kernel_tanf+0x178>)
 801619a:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801619e:	428a      	cmp	r2, r1
 80161a0:	eea7 6a25 	vfma.f32	s12, s14, s11
 80161a4:	eddf 5a41 	vldr	s11, [pc, #260]	@ 80162ac <__kernel_tanf+0x194>
 80161a8:	eee6 5a07 	vfma.f32	s11, s12, s14
 80161ac:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 80162b0 <__kernel_tanf+0x198>
 80161b0:	eea5 6a87 	vfma.f32	s12, s11, s14
 80161b4:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80162b4 <__kernel_tanf+0x19c>
 80161b8:	eee6 5a07 	vfma.f32	s11, s12, s14
 80161bc:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 80162b8 <__kernel_tanf+0x1a0>
 80161c0:	eea5 6a87 	vfma.f32	s12, s11, s14
 80161c4:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80162bc <__kernel_tanf+0x1a4>
 80161c8:	eee7 5a05 	vfma.f32	s11, s14, s10
 80161cc:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 80162c0 <__kernel_tanf+0x1a8>
 80161d0:	eea5 5a87 	vfma.f32	s10, s11, s14
 80161d4:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 80162c4 <__kernel_tanf+0x1ac>
 80161d8:	eee5 5a07 	vfma.f32	s11, s10, s14
 80161dc:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 80162c8 <__kernel_tanf+0x1b0>
 80161e0:	eea5 5a87 	vfma.f32	s10, s11, s14
 80161e4:	eddf 5a39 	vldr	s11, [pc, #228]	@ 80162cc <__kernel_tanf+0x1b4>
 80161e8:	eee5 5a07 	vfma.f32	s11, s10, s14
 80161ec:	eeb0 7a46 	vmov.f32	s14, s12
 80161f0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80161f4:	ee27 5aa6 	vmul.f32	s10, s15, s13
 80161f8:	eeb0 6a60 	vmov.f32	s12, s1
 80161fc:	eea7 6a05 	vfma.f32	s12, s14, s10
 8016200:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80162d0 <__kernel_tanf+0x1b8>
 8016204:	eee6 0a26 	vfma.f32	s1, s12, s13
 8016208:	eee5 0a07 	vfma.f32	s1, s10, s14
 801620c:	ee37 6aa0 	vadd.f32	s12, s15, s1
 8016210:	d31d      	bcc.n	801624e <__kernel_tanf+0x136>
 8016212:	ee07 0a10 	vmov	s14, r0
 8016216:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801621a:	ee26 5a06 	vmul.f32	s10, s12, s12
 801621e:	ee36 6a07 	vadd.f32	s12, s12, s14
 8016222:	179b      	asrs	r3, r3, #30
 8016224:	eec5 5a06 	vdiv.f32	s11, s10, s12
 8016228:	f003 0302 	and.w	r3, r3, #2
 801622c:	f1c3 0301 	rsb	r3, r3, #1
 8016230:	ee06 3a90 	vmov	s13, r3
 8016234:	ee35 6ae0 	vsub.f32	s12, s11, s1
 8016238:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801623c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8016240:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8016244:	eea7 7ac6 	vfms.f32	s14, s15, s12
 8016248:	ee66 7a87 	vmul.f32	s15, s13, s14
 801624c:	e77c      	b.n	8016148 <__kernel_tanf+0x30>
 801624e:	2801      	cmp	r0, #1
 8016250:	d01b      	beq.n	801628a <__kernel_tanf+0x172>
 8016252:	4b20      	ldr	r3, [pc, #128]	@ (80162d4 <__kernel_tanf+0x1bc>)
 8016254:	ee16 2a10 	vmov	r2, s12
 8016258:	401a      	ands	r2, r3
 801625a:	ee05 2a90 	vmov	s11, r2
 801625e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8016262:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016266:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801626a:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 801626e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8016272:	ee16 2a90 	vmov	r2, s13
 8016276:	4013      	ands	r3, r2
 8016278:	ee07 3a90 	vmov	s15, r3
 801627c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8016280:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8016284:	eee7 7a26 	vfma.f32	s15, s14, s13
 8016288:	e75e      	b.n	8016148 <__kernel_tanf+0x30>
 801628a:	eef0 7a46 	vmov.f32	s15, s12
 801628e:	e75b      	b.n	8016148 <__kernel_tanf+0x30>
 8016290:	3f2ca140 	.word	0x3f2ca140
 8016294:	3f490fda 	.word	0x3f490fda
 8016298:	33222168 	.word	0x33222168
 801629c:	00000000 	.word	0x00000000
 80162a0:	b79bae5f 	.word	0xb79bae5f
 80162a4:	38a3f445 	.word	0x38a3f445
 80162a8:	37d95384 	.word	0x37d95384
 80162ac:	3a1a26c8 	.word	0x3a1a26c8
 80162b0:	3b6b6916 	.word	0x3b6b6916
 80162b4:	3cb327a4 	.word	0x3cb327a4
 80162b8:	3e088889 	.word	0x3e088889
 80162bc:	3895c07a 	.word	0x3895c07a
 80162c0:	398137b9 	.word	0x398137b9
 80162c4:	3abede48 	.word	0x3abede48
 80162c8:	3c11371f 	.word	0x3c11371f
 80162cc:	3d5d0dd1 	.word	0x3d5d0dd1
 80162d0:	3eaaaaab 	.word	0x3eaaaaab
 80162d4:	fffff000 	.word	0xfffff000

080162d8 <__ieee754_asinf>:
 80162d8:	b538      	push	{r3, r4, r5, lr}
 80162da:	ee10 5a10 	vmov	r5, s0
 80162de:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80162e2:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 80162e6:	ed2d 8b04 	vpush	{d8-d9}
 80162ea:	d10c      	bne.n	8016306 <__ieee754_asinf+0x2e>
 80162ec:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 8016464 <__ieee754_asinf+0x18c>
 80162f0:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8016468 <__ieee754_asinf+0x190>
 80162f4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80162f8:	eee0 7a07 	vfma.f32	s15, s0, s14
 80162fc:	eeb0 0a67 	vmov.f32	s0, s15
 8016300:	ecbd 8b04 	vpop	{d8-d9}
 8016304:	bd38      	pop	{r3, r4, r5, pc}
 8016306:	d904      	bls.n	8016312 <__ieee754_asinf+0x3a>
 8016308:	ee70 7a40 	vsub.f32	s15, s0, s0
 801630c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8016310:	e7f6      	b.n	8016300 <__ieee754_asinf+0x28>
 8016312:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8016316:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801631a:	d20b      	bcs.n	8016334 <__ieee754_asinf+0x5c>
 801631c:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8016320:	d252      	bcs.n	80163c8 <__ieee754_asinf+0xf0>
 8016322:	eddf 7a52 	vldr	s15, [pc, #328]	@ 801646c <__ieee754_asinf+0x194>
 8016326:	ee70 7a27 	vadd.f32	s15, s0, s15
 801632a:	eef4 7ae8 	vcmpe.f32	s15, s17
 801632e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016332:	dce5      	bgt.n	8016300 <__ieee754_asinf+0x28>
 8016334:	f7ff fdcc 	bl	8015ed0 <fabsf>
 8016338:	ee38 8ac0 	vsub.f32	s16, s17, s0
 801633c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8016340:	ee28 8a27 	vmul.f32	s16, s16, s15
 8016344:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8016470 <__ieee754_asinf+0x198>
 8016348:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 8016474 <__ieee754_asinf+0x19c>
 801634c:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 8016478 <__ieee754_asinf+0x1a0>
 8016350:	eea8 7a27 	vfma.f32	s14, s16, s15
 8016354:	eddf 7a49 	vldr	s15, [pc, #292]	@ 801647c <__ieee754_asinf+0x1a4>
 8016358:	eee7 7a08 	vfma.f32	s15, s14, s16
 801635c:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8016480 <__ieee754_asinf+0x1a8>
 8016360:	eea7 7a88 	vfma.f32	s14, s15, s16
 8016364:	eddf 7a47 	vldr	s15, [pc, #284]	@ 8016484 <__ieee754_asinf+0x1ac>
 8016368:	eee7 7a08 	vfma.f32	s15, s14, s16
 801636c:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8016488 <__ieee754_asinf+0x1b0>
 8016370:	eea7 9a88 	vfma.f32	s18, s15, s16
 8016374:	eddf 7a45 	vldr	s15, [pc, #276]	@ 801648c <__ieee754_asinf+0x1b4>
 8016378:	eee8 7a07 	vfma.f32	s15, s16, s14
 801637c:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8016490 <__ieee754_asinf+0x1b8>
 8016380:	eea7 7a88 	vfma.f32	s14, s15, s16
 8016384:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8016494 <__ieee754_asinf+0x1bc>
 8016388:	eee7 7a08 	vfma.f32	s15, s14, s16
 801638c:	eeb0 0a48 	vmov.f32	s0, s16
 8016390:	eee7 8a88 	vfma.f32	s17, s15, s16
 8016394:	f7ff fe1c 	bl	8015fd0 <__ieee754_sqrtf>
 8016398:	4b3f      	ldr	r3, [pc, #252]	@ (8016498 <__ieee754_asinf+0x1c0>)
 801639a:	ee29 9a08 	vmul.f32	s18, s18, s16
 801639e:	429c      	cmp	r4, r3
 80163a0:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80163a4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80163a8:	d93d      	bls.n	8016426 <__ieee754_asinf+0x14e>
 80163aa:	eea0 0a06 	vfma.f32	s0, s0, s12
 80163ae:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 801649c <__ieee754_asinf+0x1c4>
 80163b2:	eee0 7a26 	vfma.f32	s15, s0, s13
 80163b6:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8016468 <__ieee754_asinf+0x190>
 80163ba:	ee30 0a67 	vsub.f32	s0, s0, s15
 80163be:	2d00      	cmp	r5, #0
 80163c0:	bfd8      	it	le
 80163c2:	eeb1 0a40 	vnegle.f32	s0, s0
 80163c6:	e79b      	b.n	8016300 <__ieee754_asinf+0x28>
 80163c8:	ee60 7a00 	vmul.f32	s15, s0, s0
 80163cc:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8016474 <__ieee754_asinf+0x19c>
 80163d0:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8016470 <__ieee754_asinf+0x198>
 80163d4:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8016488 <__ieee754_asinf+0x1b0>
 80163d8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80163dc:	eddf 6a27 	vldr	s13, [pc, #156]	@ 801647c <__ieee754_asinf+0x1a4>
 80163e0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80163e4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8016480 <__ieee754_asinf+0x1a8>
 80163e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80163ec:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8016484 <__ieee754_asinf+0x1ac>
 80163f0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80163f4:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8016478 <__ieee754_asinf+0x1a0>
 80163f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80163fc:	eddf 6a23 	vldr	s13, [pc, #140]	@ 801648c <__ieee754_asinf+0x1b4>
 8016400:	eee7 6a86 	vfma.f32	s13, s15, s12
 8016404:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8016490 <__ieee754_asinf+0x1b8>
 8016408:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801640c:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8016494 <__ieee754_asinf+0x1bc>
 8016410:	eee6 6a27 	vfma.f32	s13, s12, s15
 8016414:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016418:	eee6 8aa7 	vfma.f32	s17, s13, s15
 801641c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8016420:	eea0 0a27 	vfma.f32	s0, s0, s15
 8016424:	e76c      	b.n	8016300 <__ieee754_asinf+0x28>
 8016426:	ee10 3a10 	vmov	r3, s0
 801642a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 801642e:	f023 030f 	bic.w	r3, r3, #15
 8016432:	ee07 3a10 	vmov	s14, r3
 8016436:	eea7 8a47 	vfms.f32	s16, s14, s14
 801643a:	ee70 5a00 	vadd.f32	s11, s0, s0
 801643e:	ee30 0a07 	vadd.f32	s0, s0, s14
 8016442:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8016464 <__ieee754_asinf+0x18c>
 8016446:	ee88 5a00 	vdiv.f32	s10, s16, s0
 801644a:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 80164a0 <__ieee754_asinf+0x1c8>
 801644e:	eee5 7a66 	vfms.f32	s15, s10, s13
 8016452:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8016456:	eeb0 6a40 	vmov.f32	s12, s0
 801645a:	eea7 6a66 	vfms.f32	s12, s14, s13
 801645e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8016462:	e7aa      	b.n	80163ba <__ieee754_asinf+0xe2>
 8016464:	b33bbd2e 	.word	0xb33bbd2e
 8016468:	3fc90fdb 	.word	0x3fc90fdb
 801646c:	7149f2ca 	.word	0x7149f2ca
 8016470:	3a4f7f04 	.word	0x3a4f7f04
 8016474:	3811ef08 	.word	0x3811ef08
 8016478:	3e2aaaab 	.word	0x3e2aaaab
 801647c:	bd241146 	.word	0xbd241146
 8016480:	3e4e0aa8 	.word	0x3e4e0aa8
 8016484:	bea6b090 	.word	0xbea6b090
 8016488:	3d9dc62e 	.word	0x3d9dc62e
 801648c:	bf303361 	.word	0xbf303361
 8016490:	4001572d 	.word	0x4001572d
 8016494:	c019d139 	.word	0xc019d139
 8016498:	3f799999 	.word	0x3f799999
 801649c:	333bbd2e 	.word	0x333bbd2e
 80164a0:	3f490fdb 	.word	0x3f490fdb

080164a4 <__ieee754_rem_pio2f>:
 80164a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164a6:	ee10 6a10 	vmov	r6, s0
 80164aa:	4b88      	ldr	r3, [pc, #544]	@ (80166cc <__ieee754_rem_pio2f+0x228>)
 80164ac:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80164b0:	429d      	cmp	r5, r3
 80164b2:	b087      	sub	sp, #28
 80164b4:	4604      	mov	r4, r0
 80164b6:	d805      	bhi.n	80164c4 <__ieee754_rem_pio2f+0x20>
 80164b8:	2300      	movs	r3, #0
 80164ba:	ed80 0a00 	vstr	s0, [r0]
 80164be:	6043      	str	r3, [r0, #4]
 80164c0:	2000      	movs	r0, #0
 80164c2:	e022      	b.n	801650a <__ieee754_rem_pio2f+0x66>
 80164c4:	4b82      	ldr	r3, [pc, #520]	@ (80166d0 <__ieee754_rem_pio2f+0x22c>)
 80164c6:	429d      	cmp	r5, r3
 80164c8:	d83a      	bhi.n	8016540 <__ieee754_rem_pio2f+0x9c>
 80164ca:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80164ce:	2e00      	cmp	r6, #0
 80164d0:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80166d4 <__ieee754_rem_pio2f+0x230>
 80164d4:	4a80      	ldr	r2, [pc, #512]	@ (80166d8 <__ieee754_rem_pio2f+0x234>)
 80164d6:	f023 030f 	bic.w	r3, r3, #15
 80164da:	dd18      	ble.n	801650e <__ieee754_rem_pio2f+0x6a>
 80164dc:	4293      	cmp	r3, r2
 80164de:	ee70 7a47 	vsub.f32	s15, s0, s14
 80164e2:	bf09      	itett	eq
 80164e4:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 80166dc <__ieee754_rem_pio2f+0x238>
 80164e8:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80166e0 <__ieee754_rem_pio2f+0x23c>
 80164ec:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80166e4 <__ieee754_rem_pio2f+0x240>
 80164f0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80164f4:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80164f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80164fc:	ed80 7a00 	vstr	s14, [r0]
 8016500:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016504:	edc0 7a01 	vstr	s15, [r0, #4]
 8016508:	2001      	movs	r0, #1
 801650a:	b007      	add	sp, #28
 801650c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801650e:	4293      	cmp	r3, r2
 8016510:	ee70 7a07 	vadd.f32	s15, s0, s14
 8016514:	bf09      	itett	eq
 8016516:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 80166dc <__ieee754_rem_pio2f+0x238>
 801651a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80166e0 <__ieee754_rem_pio2f+0x23c>
 801651e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80166e4 <__ieee754_rem_pio2f+0x240>
 8016522:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8016526:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801652a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801652e:	ed80 7a00 	vstr	s14, [r0]
 8016532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016536:	edc0 7a01 	vstr	s15, [r0, #4]
 801653a:	f04f 30ff 	mov.w	r0, #4294967295
 801653e:	e7e4      	b.n	801650a <__ieee754_rem_pio2f+0x66>
 8016540:	4b69      	ldr	r3, [pc, #420]	@ (80166e8 <__ieee754_rem_pio2f+0x244>)
 8016542:	429d      	cmp	r5, r3
 8016544:	d873      	bhi.n	801662e <__ieee754_rem_pio2f+0x18a>
 8016546:	f7ff fcc3 	bl	8015ed0 <fabsf>
 801654a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80166ec <__ieee754_rem_pio2f+0x248>
 801654e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8016552:	eee0 7a07 	vfma.f32	s15, s0, s14
 8016556:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801655a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801655e:	ee17 0a90 	vmov	r0, s15
 8016562:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80166d4 <__ieee754_rem_pio2f+0x230>
 8016566:	eea7 0a67 	vfms.f32	s0, s14, s15
 801656a:	281f      	cmp	r0, #31
 801656c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80166e0 <__ieee754_rem_pio2f+0x23c>
 8016570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016574:	eeb1 6a47 	vneg.f32	s12, s14
 8016578:	ee70 6a67 	vsub.f32	s13, s0, s15
 801657c:	ee16 1a90 	vmov	r1, s13
 8016580:	dc09      	bgt.n	8016596 <__ieee754_rem_pio2f+0xf2>
 8016582:	4a5b      	ldr	r2, [pc, #364]	@ (80166f0 <__ieee754_rem_pio2f+0x24c>)
 8016584:	1e47      	subs	r7, r0, #1
 8016586:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801658a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801658e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8016592:	4293      	cmp	r3, r2
 8016594:	d107      	bne.n	80165a6 <__ieee754_rem_pio2f+0x102>
 8016596:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 801659a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 801659e:	2a08      	cmp	r2, #8
 80165a0:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80165a4:	dc14      	bgt.n	80165d0 <__ieee754_rem_pio2f+0x12c>
 80165a6:	6021      	str	r1, [r4, #0]
 80165a8:	ed94 7a00 	vldr	s14, [r4]
 80165ac:	ee30 0a47 	vsub.f32	s0, s0, s14
 80165b0:	2e00      	cmp	r6, #0
 80165b2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80165b6:	ed84 0a01 	vstr	s0, [r4, #4]
 80165ba:	daa6      	bge.n	801650a <__ieee754_rem_pio2f+0x66>
 80165bc:	eeb1 7a47 	vneg.f32	s14, s14
 80165c0:	eeb1 0a40 	vneg.f32	s0, s0
 80165c4:	ed84 7a00 	vstr	s14, [r4]
 80165c8:	ed84 0a01 	vstr	s0, [r4, #4]
 80165cc:	4240      	negs	r0, r0
 80165ce:	e79c      	b.n	801650a <__ieee754_rem_pio2f+0x66>
 80165d0:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80166dc <__ieee754_rem_pio2f+0x238>
 80165d4:	eef0 6a40 	vmov.f32	s13, s0
 80165d8:	eee6 6a25 	vfma.f32	s13, s12, s11
 80165dc:	ee70 7a66 	vsub.f32	s15, s0, s13
 80165e0:	eee6 7a25 	vfma.f32	s15, s12, s11
 80165e4:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80166e4 <__ieee754_rem_pio2f+0x240>
 80165e8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80165ec:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80165f0:	ee15 2a90 	vmov	r2, s11
 80165f4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80165f8:	1a5b      	subs	r3, r3, r1
 80165fa:	2b19      	cmp	r3, #25
 80165fc:	dc04      	bgt.n	8016608 <__ieee754_rem_pio2f+0x164>
 80165fe:	edc4 5a00 	vstr	s11, [r4]
 8016602:	eeb0 0a66 	vmov.f32	s0, s13
 8016606:	e7cf      	b.n	80165a8 <__ieee754_rem_pio2f+0x104>
 8016608:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80166f4 <__ieee754_rem_pio2f+0x250>
 801660c:	eeb0 0a66 	vmov.f32	s0, s13
 8016610:	eea6 0a25 	vfma.f32	s0, s12, s11
 8016614:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8016618:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80166f8 <__ieee754_rem_pio2f+0x254>
 801661c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8016620:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8016624:	ee30 7a67 	vsub.f32	s14, s0, s15
 8016628:	ed84 7a00 	vstr	s14, [r4]
 801662c:	e7bc      	b.n	80165a8 <__ieee754_rem_pio2f+0x104>
 801662e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8016632:	d306      	bcc.n	8016642 <__ieee754_rem_pio2f+0x19e>
 8016634:	ee70 7a40 	vsub.f32	s15, s0, s0
 8016638:	edc0 7a01 	vstr	s15, [r0, #4]
 801663c:	edc0 7a00 	vstr	s15, [r0]
 8016640:	e73e      	b.n	80164c0 <__ieee754_rem_pio2f+0x1c>
 8016642:	15ea      	asrs	r2, r5, #23
 8016644:	3a86      	subs	r2, #134	@ 0x86
 8016646:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801664a:	ee07 3a90 	vmov	s15, r3
 801664e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8016652:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80166fc <__ieee754_rem_pio2f+0x258>
 8016656:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801665a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801665e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8016662:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016666:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801666a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801666e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016672:	ed8d 7a04 	vstr	s14, [sp, #16]
 8016676:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801667a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801667e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016682:	edcd 7a05 	vstr	s15, [sp, #20]
 8016686:	d11e      	bne.n	80166c6 <__ieee754_rem_pio2f+0x222>
 8016688:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801668c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016690:	bf0c      	ite	eq
 8016692:	2301      	moveq	r3, #1
 8016694:	2302      	movne	r3, #2
 8016696:	491a      	ldr	r1, [pc, #104]	@ (8016700 <__ieee754_rem_pio2f+0x25c>)
 8016698:	9101      	str	r1, [sp, #4]
 801669a:	2102      	movs	r1, #2
 801669c:	9100      	str	r1, [sp, #0]
 801669e:	a803      	add	r0, sp, #12
 80166a0:	4621      	mov	r1, r4
 80166a2:	f000 f82f 	bl	8016704 <__kernel_rem_pio2f>
 80166a6:	2e00      	cmp	r6, #0
 80166a8:	f6bf af2f 	bge.w	801650a <__ieee754_rem_pio2f+0x66>
 80166ac:	edd4 7a00 	vldr	s15, [r4]
 80166b0:	eef1 7a67 	vneg.f32	s15, s15
 80166b4:	edc4 7a00 	vstr	s15, [r4]
 80166b8:	edd4 7a01 	vldr	s15, [r4, #4]
 80166bc:	eef1 7a67 	vneg.f32	s15, s15
 80166c0:	edc4 7a01 	vstr	s15, [r4, #4]
 80166c4:	e782      	b.n	80165cc <__ieee754_rem_pio2f+0x128>
 80166c6:	2303      	movs	r3, #3
 80166c8:	e7e5      	b.n	8016696 <__ieee754_rem_pio2f+0x1f2>
 80166ca:	bf00      	nop
 80166cc:	3f490fd8 	.word	0x3f490fd8
 80166d0:	4016cbe3 	.word	0x4016cbe3
 80166d4:	3fc90f80 	.word	0x3fc90f80
 80166d8:	3fc90fd0 	.word	0x3fc90fd0
 80166dc:	37354400 	.word	0x37354400
 80166e0:	37354443 	.word	0x37354443
 80166e4:	2e85a308 	.word	0x2e85a308
 80166e8:	43490f80 	.word	0x43490f80
 80166ec:	3f22f984 	.word	0x3f22f984
 80166f0:	080177d8 	.word	0x080177d8
 80166f4:	2e85a300 	.word	0x2e85a300
 80166f8:	248d3132 	.word	0x248d3132
 80166fc:	43800000 	.word	0x43800000
 8016700:	08017858 	.word	0x08017858

08016704 <__kernel_rem_pio2f>:
 8016704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016708:	ed2d 8b04 	vpush	{d8-d9}
 801670c:	b0d9      	sub	sp, #356	@ 0x164
 801670e:	4690      	mov	r8, r2
 8016710:	9001      	str	r0, [sp, #4]
 8016712:	4ab9      	ldr	r2, [pc, #740]	@ (80169f8 <__kernel_rem_pio2f+0x2f4>)
 8016714:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8016716:	f118 0f04 	cmn.w	r8, #4
 801671a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801671e:	460f      	mov	r7, r1
 8016720:	f103 3bff 	add.w	fp, r3, #4294967295
 8016724:	db27      	blt.n	8016776 <__kernel_rem_pio2f+0x72>
 8016726:	f1b8 0203 	subs.w	r2, r8, #3
 801672a:	bf48      	it	mi
 801672c:	f108 0204 	addmi.w	r2, r8, #4
 8016730:	10d2      	asrs	r2, r2, #3
 8016732:	1c55      	adds	r5, r2, #1
 8016734:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8016736:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8016a08 <__kernel_rem_pio2f+0x304>
 801673a:	00e8      	lsls	r0, r5, #3
 801673c:	eba2 060b 	sub.w	r6, r2, fp
 8016740:	9002      	str	r0, [sp, #8]
 8016742:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8016746:	eb0a 0c0b 	add.w	ip, sl, fp
 801674a:	ac1c      	add	r4, sp, #112	@ 0x70
 801674c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8016750:	2000      	movs	r0, #0
 8016752:	4560      	cmp	r0, ip
 8016754:	dd11      	ble.n	801677a <__kernel_rem_pio2f+0x76>
 8016756:	a91c      	add	r1, sp, #112	@ 0x70
 8016758:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801675c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8016760:	f04f 0c00 	mov.w	ip, #0
 8016764:	45d4      	cmp	ip, sl
 8016766:	dc27      	bgt.n	80167b8 <__kernel_rem_pio2f+0xb4>
 8016768:	f8dd e004 	ldr.w	lr, [sp, #4]
 801676c:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8016a08 <__kernel_rem_pio2f+0x304>
 8016770:	4606      	mov	r6, r0
 8016772:	2400      	movs	r4, #0
 8016774:	e016      	b.n	80167a4 <__kernel_rem_pio2f+0xa0>
 8016776:	2200      	movs	r2, #0
 8016778:	e7db      	b.n	8016732 <__kernel_rem_pio2f+0x2e>
 801677a:	42c6      	cmn	r6, r0
 801677c:	bf5d      	ittte	pl
 801677e:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8016782:	ee07 1a90 	vmovpl	s15, r1
 8016786:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801678a:	eef0 7a47 	vmovmi.f32	s15, s14
 801678e:	ece4 7a01 	vstmia	r4!, {s15}
 8016792:	3001      	adds	r0, #1
 8016794:	e7dd      	b.n	8016752 <__kernel_rem_pio2f+0x4e>
 8016796:	ecfe 6a01 	vldmia	lr!, {s13}
 801679a:	ed96 7a00 	vldr	s14, [r6]
 801679e:	eee6 7a87 	vfma.f32	s15, s13, s14
 80167a2:	3401      	adds	r4, #1
 80167a4:	455c      	cmp	r4, fp
 80167a6:	f1a6 0604 	sub.w	r6, r6, #4
 80167aa:	ddf4      	ble.n	8016796 <__kernel_rem_pio2f+0x92>
 80167ac:	ece9 7a01 	vstmia	r9!, {s15}
 80167b0:	f10c 0c01 	add.w	ip, ip, #1
 80167b4:	3004      	adds	r0, #4
 80167b6:	e7d5      	b.n	8016764 <__kernel_rem_pio2f+0x60>
 80167b8:	a908      	add	r1, sp, #32
 80167ba:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80167be:	9104      	str	r1, [sp, #16]
 80167c0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80167c2:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8016a04 <__kernel_rem_pio2f+0x300>
 80167c6:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8016a00 <__kernel_rem_pio2f+0x2fc>
 80167ca:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80167ce:	9203      	str	r2, [sp, #12]
 80167d0:	4654      	mov	r4, sl
 80167d2:	00a2      	lsls	r2, r4, #2
 80167d4:	9205      	str	r2, [sp, #20]
 80167d6:	aa58      	add	r2, sp, #352	@ 0x160
 80167d8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80167dc:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 80167e0:	a944      	add	r1, sp, #272	@ 0x110
 80167e2:	aa08      	add	r2, sp, #32
 80167e4:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80167e8:	4694      	mov	ip, r2
 80167ea:	4626      	mov	r6, r4
 80167ec:	2e00      	cmp	r6, #0
 80167ee:	f1a0 0004 	sub.w	r0, r0, #4
 80167f2:	dc4c      	bgt.n	801688e <__kernel_rem_pio2f+0x18a>
 80167f4:	4628      	mov	r0, r5
 80167f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80167fa:	f000 f9f5 	bl	8016be8 <scalbnf>
 80167fe:	eeb0 8a40 	vmov.f32	s16, s0
 8016802:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8016806:	ee28 0a00 	vmul.f32	s0, s16, s0
 801680a:	f000 fa53 	bl	8016cb4 <floorf>
 801680e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8016812:	eea0 8a67 	vfms.f32	s16, s0, s15
 8016816:	2d00      	cmp	r5, #0
 8016818:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801681c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8016820:	ee17 9a90 	vmov	r9, s15
 8016824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016828:	ee38 8a67 	vsub.f32	s16, s16, s15
 801682c:	dd41      	ble.n	80168b2 <__kernel_rem_pio2f+0x1ae>
 801682e:	f104 3cff 	add.w	ip, r4, #4294967295
 8016832:	a908      	add	r1, sp, #32
 8016834:	f1c5 0e08 	rsb	lr, r5, #8
 8016838:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 801683c:	fa46 f00e 	asr.w	r0, r6, lr
 8016840:	4481      	add	r9, r0
 8016842:	fa00 f00e 	lsl.w	r0, r0, lr
 8016846:	1a36      	subs	r6, r6, r0
 8016848:	f1c5 0007 	rsb	r0, r5, #7
 801684c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8016850:	4106      	asrs	r6, r0
 8016852:	2e00      	cmp	r6, #0
 8016854:	dd3c      	ble.n	80168d0 <__kernel_rem_pio2f+0x1cc>
 8016856:	f04f 0e00 	mov.w	lr, #0
 801685a:	f109 0901 	add.w	r9, r9, #1
 801685e:	4670      	mov	r0, lr
 8016860:	4574      	cmp	r4, lr
 8016862:	dc68      	bgt.n	8016936 <__kernel_rem_pio2f+0x232>
 8016864:	2d00      	cmp	r5, #0
 8016866:	dd03      	ble.n	8016870 <__kernel_rem_pio2f+0x16c>
 8016868:	2d01      	cmp	r5, #1
 801686a:	d074      	beq.n	8016956 <__kernel_rem_pio2f+0x252>
 801686c:	2d02      	cmp	r5, #2
 801686e:	d07d      	beq.n	801696c <__kernel_rem_pio2f+0x268>
 8016870:	2e02      	cmp	r6, #2
 8016872:	d12d      	bne.n	80168d0 <__kernel_rem_pio2f+0x1cc>
 8016874:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8016878:	ee30 8a48 	vsub.f32	s16, s0, s16
 801687c:	b340      	cbz	r0, 80168d0 <__kernel_rem_pio2f+0x1cc>
 801687e:	4628      	mov	r0, r5
 8016880:	9306      	str	r3, [sp, #24]
 8016882:	f000 f9b1 	bl	8016be8 <scalbnf>
 8016886:	9b06      	ldr	r3, [sp, #24]
 8016888:	ee38 8a40 	vsub.f32	s16, s16, s0
 801688c:	e020      	b.n	80168d0 <__kernel_rem_pio2f+0x1cc>
 801688e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8016892:	3e01      	subs	r6, #1
 8016894:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016898:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801689c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80168a0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80168a4:	ecac 0a01 	vstmia	ip!, {s0}
 80168a8:	ed90 0a00 	vldr	s0, [r0]
 80168ac:	ee37 0a80 	vadd.f32	s0, s15, s0
 80168b0:	e79c      	b.n	80167ec <__kernel_rem_pio2f+0xe8>
 80168b2:	d105      	bne.n	80168c0 <__kernel_rem_pio2f+0x1bc>
 80168b4:	1e60      	subs	r0, r4, #1
 80168b6:	a908      	add	r1, sp, #32
 80168b8:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 80168bc:	11f6      	asrs	r6, r6, #7
 80168be:	e7c8      	b.n	8016852 <__kernel_rem_pio2f+0x14e>
 80168c0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80168c4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80168c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168cc:	da31      	bge.n	8016932 <__kernel_rem_pio2f+0x22e>
 80168ce:	2600      	movs	r6, #0
 80168d0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80168d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168d8:	f040 8098 	bne.w	8016a0c <__kernel_rem_pio2f+0x308>
 80168dc:	1e60      	subs	r0, r4, #1
 80168de:	2200      	movs	r2, #0
 80168e0:	4550      	cmp	r0, sl
 80168e2:	da4b      	bge.n	801697c <__kernel_rem_pio2f+0x278>
 80168e4:	2a00      	cmp	r2, #0
 80168e6:	d065      	beq.n	80169b4 <__kernel_rem_pio2f+0x2b0>
 80168e8:	3c01      	subs	r4, #1
 80168ea:	ab08      	add	r3, sp, #32
 80168ec:	3d08      	subs	r5, #8
 80168ee:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	d0f8      	beq.n	80168e8 <__kernel_rem_pio2f+0x1e4>
 80168f6:	4628      	mov	r0, r5
 80168f8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80168fc:	f000 f974 	bl	8016be8 <scalbnf>
 8016900:	1c63      	adds	r3, r4, #1
 8016902:	aa44      	add	r2, sp, #272	@ 0x110
 8016904:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8016a04 <__kernel_rem_pio2f+0x300>
 8016908:	0099      	lsls	r1, r3, #2
 801690a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801690e:	4623      	mov	r3, r4
 8016910:	2b00      	cmp	r3, #0
 8016912:	f280 80a9 	bge.w	8016a68 <__kernel_rem_pio2f+0x364>
 8016916:	4623      	mov	r3, r4
 8016918:	2b00      	cmp	r3, #0
 801691a:	f2c0 80c7 	blt.w	8016aac <__kernel_rem_pio2f+0x3a8>
 801691e:	aa44      	add	r2, sp, #272	@ 0x110
 8016920:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8016924:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80169fc <__kernel_rem_pio2f+0x2f8>
 8016928:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8016a08 <__kernel_rem_pio2f+0x304>
 801692c:	2000      	movs	r0, #0
 801692e:	1ae2      	subs	r2, r4, r3
 8016930:	e0b1      	b.n	8016a96 <__kernel_rem_pio2f+0x392>
 8016932:	2602      	movs	r6, #2
 8016934:	e78f      	b.n	8016856 <__kernel_rem_pio2f+0x152>
 8016936:	f852 1b04 	ldr.w	r1, [r2], #4
 801693a:	b948      	cbnz	r0, 8016950 <__kernel_rem_pio2f+0x24c>
 801693c:	b121      	cbz	r1, 8016948 <__kernel_rem_pio2f+0x244>
 801693e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8016942:	f842 1c04 	str.w	r1, [r2, #-4]
 8016946:	2101      	movs	r1, #1
 8016948:	f10e 0e01 	add.w	lr, lr, #1
 801694c:	4608      	mov	r0, r1
 801694e:	e787      	b.n	8016860 <__kernel_rem_pio2f+0x15c>
 8016950:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8016954:	e7f5      	b.n	8016942 <__kernel_rem_pio2f+0x23e>
 8016956:	f104 3cff 	add.w	ip, r4, #4294967295
 801695a:	aa08      	add	r2, sp, #32
 801695c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8016960:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8016964:	a908      	add	r1, sp, #32
 8016966:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801696a:	e781      	b.n	8016870 <__kernel_rem_pio2f+0x16c>
 801696c:	f104 3cff 	add.w	ip, r4, #4294967295
 8016970:	aa08      	add	r2, sp, #32
 8016972:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8016976:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801697a:	e7f3      	b.n	8016964 <__kernel_rem_pio2f+0x260>
 801697c:	a908      	add	r1, sp, #32
 801697e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8016982:	3801      	subs	r0, #1
 8016984:	430a      	orrs	r2, r1
 8016986:	e7ab      	b.n	80168e0 <__kernel_rem_pio2f+0x1dc>
 8016988:	3201      	adds	r2, #1
 801698a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801698e:	2e00      	cmp	r6, #0
 8016990:	d0fa      	beq.n	8016988 <__kernel_rem_pio2f+0x284>
 8016992:	9905      	ldr	r1, [sp, #20]
 8016994:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8016998:	eb0d 0001 	add.w	r0, sp, r1
 801699c:	18e6      	adds	r6, r4, r3
 801699e:	a91c      	add	r1, sp, #112	@ 0x70
 80169a0:	f104 0c01 	add.w	ip, r4, #1
 80169a4:	384c      	subs	r0, #76	@ 0x4c
 80169a6:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80169aa:	4422      	add	r2, r4
 80169ac:	4562      	cmp	r2, ip
 80169ae:	da04      	bge.n	80169ba <__kernel_rem_pio2f+0x2b6>
 80169b0:	4614      	mov	r4, r2
 80169b2:	e70e      	b.n	80167d2 <__kernel_rem_pio2f+0xce>
 80169b4:	9804      	ldr	r0, [sp, #16]
 80169b6:	2201      	movs	r2, #1
 80169b8:	e7e7      	b.n	801698a <__kernel_rem_pio2f+0x286>
 80169ba:	9903      	ldr	r1, [sp, #12]
 80169bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80169c0:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80169c4:	9105      	str	r1, [sp, #20]
 80169c6:	ee07 1a90 	vmov	s15, r1
 80169ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80169ce:	2400      	movs	r4, #0
 80169d0:	ece6 7a01 	vstmia	r6!, {s15}
 80169d4:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8016a08 <__kernel_rem_pio2f+0x304>
 80169d8:	46b1      	mov	r9, r6
 80169da:	455c      	cmp	r4, fp
 80169dc:	dd04      	ble.n	80169e8 <__kernel_rem_pio2f+0x2e4>
 80169de:	ece0 7a01 	vstmia	r0!, {s15}
 80169e2:	f10c 0c01 	add.w	ip, ip, #1
 80169e6:	e7e1      	b.n	80169ac <__kernel_rem_pio2f+0x2a8>
 80169e8:	ecfe 6a01 	vldmia	lr!, {s13}
 80169ec:	ed39 7a01 	vldmdb	r9!, {s14}
 80169f0:	3401      	adds	r4, #1
 80169f2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80169f6:	e7f0      	b.n	80169da <__kernel_rem_pio2f+0x2d6>
 80169f8:	08017b9c 	.word	0x08017b9c
 80169fc:	08017b70 	.word	0x08017b70
 8016a00:	43800000 	.word	0x43800000
 8016a04:	3b800000 	.word	0x3b800000
 8016a08:	00000000 	.word	0x00000000
 8016a0c:	9b02      	ldr	r3, [sp, #8]
 8016a0e:	eeb0 0a48 	vmov.f32	s0, s16
 8016a12:	eba3 0008 	sub.w	r0, r3, r8
 8016a16:	f000 f8e7 	bl	8016be8 <scalbnf>
 8016a1a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8016a00 <__kernel_rem_pio2f+0x2fc>
 8016a1e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8016a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a26:	db19      	blt.n	8016a5c <__kernel_rem_pio2f+0x358>
 8016a28:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8016a04 <__kernel_rem_pio2f+0x300>
 8016a2c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8016a30:	aa08      	add	r2, sp, #32
 8016a32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016a36:	3508      	adds	r5, #8
 8016a38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016a3c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8016a40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016a44:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016a48:	ee10 3a10 	vmov	r3, s0
 8016a4c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8016a50:	ee17 3a90 	vmov	r3, s15
 8016a54:	3401      	adds	r4, #1
 8016a56:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8016a5a:	e74c      	b.n	80168f6 <__kernel_rem_pio2f+0x1f2>
 8016a5c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016a60:	aa08      	add	r2, sp, #32
 8016a62:	ee10 3a10 	vmov	r3, s0
 8016a66:	e7f6      	b.n	8016a56 <__kernel_rem_pio2f+0x352>
 8016a68:	a808      	add	r0, sp, #32
 8016a6a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8016a6e:	9001      	str	r0, [sp, #4]
 8016a70:	ee07 0a90 	vmov	s15, r0
 8016a74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016a78:	3b01      	subs	r3, #1
 8016a7a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016a7e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8016a82:	ed62 7a01 	vstmdb	r2!, {s15}
 8016a86:	e743      	b.n	8016910 <__kernel_rem_pio2f+0x20c>
 8016a88:	ecfc 6a01 	vldmia	ip!, {s13}
 8016a8c:	ecb5 7a01 	vldmia	r5!, {s14}
 8016a90:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016a94:	3001      	adds	r0, #1
 8016a96:	4550      	cmp	r0, sl
 8016a98:	dc01      	bgt.n	8016a9e <__kernel_rem_pio2f+0x39a>
 8016a9a:	4282      	cmp	r2, r0
 8016a9c:	daf4      	bge.n	8016a88 <__kernel_rem_pio2f+0x384>
 8016a9e:	a858      	add	r0, sp, #352	@ 0x160
 8016aa0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8016aa4:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8016aa8:	3b01      	subs	r3, #1
 8016aaa:	e735      	b.n	8016918 <__kernel_rem_pio2f+0x214>
 8016aac:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8016aae:	2b02      	cmp	r3, #2
 8016ab0:	dc09      	bgt.n	8016ac6 <__kernel_rem_pio2f+0x3c2>
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	dc2b      	bgt.n	8016b0e <__kernel_rem_pio2f+0x40a>
 8016ab6:	d044      	beq.n	8016b42 <__kernel_rem_pio2f+0x43e>
 8016ab8:	f009 0007 	and.w	r0, r9, #7
 8016abc:	b059      	add	sp, #356	@ 0x164
 8016abe:	ecbd 8b04 	vpop	{d8-d9}
 8016ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ac6:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8016ac8:	2b03      	cmp	r3, #3
 8016aca:	d1f5      	bne.n	8016ab8 <__kernel_rem_pio2f+0x3b4>
 8016acc:	aa30      	add	r2, sp, #192	@ 0xc0
 8016ace:	1f0b      	subs	r3, r1, #4
 8016ad0:	4413      	add	r3, r2
 8016ad2:	461a      	mov	r2, r3
 8016ad4:	4620      	mov	r0, r4
 8016ad6:	2800      	cmp	r0, #0
 8016ad8:	f1a2 0204 	sub.w	r2, r2, #4
 8016adc:	dc52      	bgt.n	8016b84 <__kernel_rem_pio2f+0x480>
 8016ade:	4622      	mov	r2, r4
 8016ae0:	2a01      	cmp	r2, #1
 8016ae2:	f1a3 0304 	sub.w	r3, r3, #4
 8016ae6:	dc5d      	bgt.n	8016ba4 <__kernel_rem_pio2f+0x4a0>
 8016ae8:	ab30      	add	r3, sp, #192	@ 0xc0
 8016aea:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8016a08 <__kernel_rem_pio2f+0x304>
 8016aee:	440b      	add	r3, r1
 8016af0:	2c01      	cmp	r4, #1
 8016af2:	dc67      	bgt.n	8016bc4 <__kernel_rem_pio2f+0x4c0>
 8016af4:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8016af8:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8016afc:	2e00      	cmp	r6, #0
 8016afe:	d167      	bne.n	8016bd0 <__kernel_rem_pio2f+0x4cc>
 8016b00:	edc7 6a00 	vstr	s13, [r7]
 8016b04:	ed87 7a01 	vstr	s14, [r7, #4]
 8016b08:	edc7 7a02 	vstr	s15, [r7, #8]
 8016b0c:	e7d4      	b.n	8016ab8 <__kernel_rem_pio2f+0x3b4>
 8016b0e:	ab30      	add	r3, sp, #192	@ 0xc0
 8016b10:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8016a08 <__kernel_rem_pio2f+0x304>
 8016b14:	440b      	add	r3, r1
 8016b16:	4622      	mov	r2, r4
 8016b18:	2a00      	cmp	r2, #0
 8016b1a:	da24      	bge.n	8016b66 <__kernel_rem_pio2f+0x462>
 8016b1c:	b34e      	cbz	r6, 8016b72 <__kernel_rem_pio2f+0x46e>
 8016b1e:	eef1 7a47 	vneg.f32	s15, s14
 8016b22:	edc7 7a00 	vstr	s15, [r7]
 8016b26:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8016b2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016b2e:	aa31      	add	r2, sp, #196	@ 0xc4
 8016b30:	2301      	movs	r3, #1
 8016b32:	429c      	cmp	r4, r3
 8016b34:	da20      	bge.n	8016b78 <__kernel_rem_pio2f+0x474>
 8016b36:	b10e      	cbz	r6, 8016b3c <__kernel_rem_pio2f+0x438>
 8016b38:	eef1 7a67 	vneg.f32	s15, s15
 8016b3c:	edc7 7a01 	vstr	s15, [r7, #4]
 8016b40:	e7ba      	b.n	8016ab8 <__kernel_rem_pio2f+0x3b4>
 8016b42:	ab30      	add	r3, sp, #192	@ 0xc0
 8016b44:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8016a08 <__kernel_rem_pio2f+0x304>
 8016b48:	440b      	add	r3, r1
 8016b4a:	2c00      	cmp	r4, #0
 8016b4c:	da05      	bge.n	8016b5a <__kernel_rem_pio2f+0x456>
 8016b4e:	b10e      	cbz	r6, 8016b54 <__kernel_rem_pio2f+0x450>
 8016b50:	eef1 7a67 	vneg.f32	s15, s15
 8016b54:	edc7 7a00 	vstr	s15, [r7]
 8016b58:	e7ae      	b.n	8016ab8 <__kernel_rem_pio2f+0x3b4>
 8016b5a:	ed33 7a01 	vldmdb	r3!, {s14}
 8016b5e:	3c01      	subs	r4, #1
 8016b60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016b64:	e7f1      	b.n	8016b4a <__kernel_rem_pio2f+0x446>
 8016b66:	ed73 7a01 	vldmdb	r3!, {s15}
 8016b6a:	3a01      	subs	r2, #1
 8016b6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016b70:	e7d2      	b.n	8016b18 <__kernel_rem_pio2f+0x414>
 8016b72:	eef0 7a47 	vmov.f32	s15, s14
 8016b76:	e7d4      	b.n	8016b22 <__kernel_rem_pio2f+0x41e>
 8016b78:	ecb2 7a01 	vldmia	r2!, {s14}
 8016b7c:	3301      	adds	r3, #1
 8016b7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016b82:	e7d6      	b.n	8016b32 <__kernel_rem_pio2f+0x42e>
 8016b84:	edd2 7a00 	vldr	s15, [r2]
 8016b88:	edd2 6a01 	vldr	s13, [r2, #4]
 8016b8c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8016b90:	3801      	subs	r0, #1
 8016b92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016b96:	ed82 7a00 	vstr	s14, [r2]
 8016b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016b9e:	edc2 7a01 	vstr	s15, [r2, #4]
 8016ba2:	e798      	b.n	8016ad6 <__kernel_rem_pio2f+0x3d2>
 8016ba4:	edd3 7a00 	vldr	s15, [r3]
 8016ba8:	edd3 6a01 	vldr	s13, [r3, #4]
 8016bac:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8016bb0:	3a01      	subs	r2, #1
 8016bb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016bb6:	ed83 7a00 	vstr	s14, [r3]
 8016bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016bbe:	edc3 7a01 	vstr	s15, [r3, #4]
 8016bc2:	e78d      	b.n	8016ae0 <__kernel_rem_pio2f+0x3dc>
 8016bc4:	ed33 7a01 	vldmdb	r3!, {s14}
 8016bc8:	3c01      	subs	r4, #1
 8016bca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016bce:	e78f      	b.n	8016af0 <__kernel_rem_pio2f+0x3ec>
 8016bd0:	eef1 6a66 	vneg.f32	s13, s13
 8016bd4:	eeb1 7a47 	vneg.f32	s14, s14
 8016bd8:	edc7 6a00 	vstr	s13, [r7]
 8016bdc:	ed87 7a01 	vstr	s14, [r7, #4]
 8016be0:	eef1 7a67 	vneg.f32	s15, s15
 8016be4:	e790      	b.n	8016b08 <__kernel_rem_pio2f+0x404>
 8016be6:	bf00      	nop

08016be8 <scalbnf>:
 8016be8:	ee10 3a10 	vmov	r3, s0
 8016bec:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8016bf0:	d02b      	beq.n	8016c4a <scalbnf+0x62>
 8016bf2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8016bf6:	d302      	bcc.n	8016bfe <scalbnf+0x16>
 8016bf8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016bfc:	4770      	bx	lr
 8016bfe:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8016c02:	d123      	bne.n	8016c4c <scalbnf+0x64>
 8016c04:	4b24      	ldr	r3, [pc, #144]	@ (8016c98 <scalbnf+0xb0>)
 8016c06:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8016c9c <scalbnf+0xb4>
 8016c0a:	4298      	cmp	r0, r3
 8016c0c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016c10:	db17      	blt.n	8016c42 <scalbnf+0x5a>
 8016c12:	ee10 3a10 	vmov	r3, s0
 8016c16:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8016c1a:	3a19      	subs	r2, #25
 8016c1c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8016c20:	4288      	cmp	r0, r1
 8016c22:	dd15      	ble.n	8016c50 <scalbnf+0x68>
 8016c24:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8016ca0 <scalbnf+0xb8>
 8016c28:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8016ca4 <scalbnf+0xbc>
 8016c2c:	ee10 3a10 	vmov	r3, s0
 8016c30:	eeb0 7a67 	vmov.f32	s14, s15
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	bfb8      	it	lt
 8016c38:	eef0 7a66 	vmovlt.f32	s15, s13
 8016c3c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8016c40:	4770      	bx	lr
 8016c42:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8016ca8 <scalbnf+0xc0>
 8016c46:	ee27 0a80 	vmul.f32	s0, s15, s0
 8016c4a:	4770      	bx	lr
 8016c4c:	0dd2      	lsrs	r2, r2, #23
 8016c4e:	e7e5      	b.n	8016c1c <scalbnf+0x34>
 8016c50:	4410      	add	r0, r2
 8016c52:	28fe      	cmp	r0, #254	@ 0xfe
 8016c54:	dce6      	bgt.n	8016c24 <scalbnf+0x3c>
 8016c56:	2800      	cmp	r0, #0
 8016c58:	dd06      	ble.n	8016c68 <scalbnf+0x80>
 8016c5a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8016c5e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8016c62:	ee00 3a10 	vmov	s0, r3
 8016c66:	4770      	bx	lr
 8016c68:	f110 0f16 	cmn.w	r0, #22
 8016c6c:	da09      	bge.n	8016c82 <scalbnf+0x9a>
 8016c6e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8016ca8 <scalbnf+0xc0>
 8016c72:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8016cac <scalbnf+0xc4>
 8016c76:	ee10 3a10 	vmov	r3, s0
 8016c7a:	eeb0 7a67 	vmov.f32	s14, s15
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	e7d9      	b.n	8016c36 <scalbnf+0x4e>
 8016c82:	3019      	adds	r0, #25
 8016c84:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8016c88:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8016c8c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8016cb0 <scalbnf+0xc8>
 8016c90:	ee07 3a90 	vmov	s15, r3
 8016c94:	e7d7      	b.n	8016c46 <scalbnf+0x5e>
 8016c96:	bf00      	nop
 8016c98:	ffff3cb0 	.word	0xffff3cb0
 8016c9c:	4c000000 	.word	0x4c000000
 8016ca0:	7149f2ca 	.word	0x7149f2ca
 8016ca4:	f149f2ca 	.word	0xf149f2ca
 8016ca8:	0da24260 	.word	0x0da24260
 8016cac:	8da24260 	.word	0x8da24260
 8016cb0:	33000000 	.word	0x33000000

08016cb4 <floorf>:
 8016cb4:	ee10 3a10 	vmov	r3, s0
 8016cb8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8016cbc:	3a7f      	subs	r2, #127	@ 0x7f
 8016cbe:	2a16      	cmp	r2, #22
 8016cc0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8016cc4:	dc2b      	bgt.n	8016d1e <floorf+0x6a>
 8016cc6:	2a00      	cmp	r2, #0
 8016cc8:	da12      	bge.n	8016cf0 <floorf+0x3c>
 8016cca:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8016d30 <floorf+0x7c>
 8016cce:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016cd2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8016cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cda:	dd06      	ble.n	8016cea <floorf+0x36>
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	da24      	bge.n	8016d2a <floorf+0x76>
 8016ce0:	2900      	cmp	r1, #0
 8016ce2:	4b14      	ldr	r3, [pc, #80]	@ (8016d34 <floorf+0x80>)
 8016ce4:	bf08      	it	eq
 8016ce6:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8016cea:	ee00 3a10 	vmov	s0, r3
 8016cee:	4770      	bx	lr
 8016cf0:	4911      	ldr	r1, [pc, #68]	@ (8016d38 <floorf+0x84>)
 8016cf2:	4111      	asrs	r1, r2
 8016cf4:	420b      	tst	r3, r1
 8016cf6:	d0fa      	beq.n	8016cee <floorf+0x3a>
 8016cf8:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8016d30 <floorf+0x7c>
 8016cfc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016d00:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8016d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d08:	ddef      	ble.n	8016cea <floorf+0x36>
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	bfbe      	ittt	lt
 8016d0e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8016d12:	fa40 f202 	asrlt.w	r2, r0, r2
 8016d16:	189b      	addlt	r3, r3, r2
 8016d18:	ea23 0301 	bic.w	r3, r3, r1
 8016d1c:	e7e5      	b.n	8016cea <floorf+0x36>
 8016d1e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8016d22:	d3e4      	bcc.n	8016cee <floorf+0x3a>
 8016d24:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016d28:	4770      	bx	lr
 8016d2a:	2300      	movs	r3, #0
 8016d2c:	e7dd      	b.n	8016cea <floorf+0x36>
 8016d2e:	bf00      	nop
 8016d30:	7149f2ca 	.word	0x7149f2ca
 8016d34:	bf800000 	.word	0xbf800000
 8016d38:	007fffff 	.word	0x007fffff

08016d3c <_init>:
 8016d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d3e:	bf00      	nop
 8016d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016d42:	bc08      	pop	{r3}
 8016d44:	469e      	mov	lr, r3
 8016d46:	4770      	bx	lr

08016d48 <_fini>:
 8016d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d4a:	bf00      	nop
 8016d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016d4e:	bc08      	pop	{r3}
 8016d50:	469e      	mov	lr, r3
 8016d52:	4770      	bx	lr
