
SubController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016ac4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e70  08016c98  08016c98  00017c98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017b08  08017b08  000191f0  2**0
                  CONTENTS
  4 .ARM          00000008  08017b08  08017b08  00018b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017b10  08017b10  000191f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017b10  08017b10  00018b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017b14  08017b14  00018b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08017b18  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006918  200001f0  08017d08  000191f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  20006b08  08017d08  00019b08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000191f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000250fb  00000000  00000000  00019220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000054af  00000000  00000000  0003e31b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fc0  00000000  00000000  000437d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018bf  00000000  00000000  00045790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000294a9  00000000  00000000  0004704f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b6e2  00000000  00000000  000704f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efdba  00000000  00000000  0009bbda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018b994  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000999c  00000000  00000000  0018b9d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  00195374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08016c7c 	.word	0x08016c7c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	08016c7c 	.word	0x08016c7c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <Bar30init>:
#include "Bar30.h"
#include "stm32f4xx.h"
extern I2C_HandleTypeDef hi2c2;
HAL_StatusTypeDef halStatus;
void Bar30init(Bar30* sensor, I2C_HandleTypeDef* i2cHandle)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
	sensor->i2cHandle=i2cHandle;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	683a      	ldr	r2, [r7, #0]
 8000f86:	601a      	str	r2, [r3, #0]

	for(int i=0; i<7;i++)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	e008      	b.n	8000fa0 <Bar30init+0x28>
	{
		sensor->calibrationResult[i]=0;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	68fa      	ldr	r2, [r7, #12]
 8000f92:	320c      	adds	r2, #12
 8000f94:	2100      	movs	r1, #0
 8000f96:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i=0; i<7;i++)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2b06      	cmp	r3, #6
 8000fa4:	ddf3      	ble.n	8000f8e <Bar30init+0x16>
	}
	sensor->rxFlag=0;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	sensor->conversionCompleteFlag=0;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	sensor->dT=0;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	629a      	str	r2, [r3, #40]	@ 0x28
	sensor->actualPressure=0;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
	sensor->actualTemperature=0;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	615a      	str	r2, [r3, #20]
	sensor->rawPressure=0;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	605a      	str	r2, [r3, #4]
	sensor->rawTemperature=0;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
}
 8000fd4:	bf00      	nop
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <Bar30reset>:



uint8_t Bar30reset(Bar30* sensor)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af02      	add	r7, sp, #8
 8000fe6:	6078      	str	r0, [r7, #4]
	uint8_t cmdByte=RESET_CMD;
 8000fe8:	231e      	movs	r3, #30
 8000fea:	73bb      	strb	r3, [r7, #14]
	uint8_t numBytes=1;
 8000fec:	2301      	movs	r3, #1
 8000fee:	73fb      	strb	r3, [r7, #15]
	halStatus=(HAL_I2C_Master_Transmit(sensor->i2cHandle, BAR30_I2C_ADD, &cmdByte, numBytes, HAL_MAX_DELAY));
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6818      	ldr	r0, [r3, #0]
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	f107 020e 	add.w	r2, r7, #14
 8000ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8001000:	9100      	str	r1, [sp, #0]
 8001002:	21ec      	movs	r1, #236	@ 0xec
 8001004:	f005 f9ce 	bl	80063a4 <HAL_I2C_Master_Transmit>
 8001008:	4603      	mov	r3, r0
 800100a:	461a      	mov	r2, r3
 800100c:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <Bar30reset+0x48>)
 800100e:	701a      	strb	r2, [r3, #0]
	return halStatus==HAL_OK;
 8001010:	4b05      	ldr	r3, [pc, #20]	@ (8001028 <Bar30reset+0x48>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	bf0c      	ite	eq
 8001018:	2301      	moveq	r3, #1
 800101a:	2300      	movne	r3, #0
 800101c:	b2db      	uxtb	r3, r3
}
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	2000020c 	.word	0x2000020c

0800102c <Bar30getCalibration>:



uint8_t Bar30getCalibration(Bar30* sensor)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af02      	add	r7, sp, #8
 8001032:	6078      	str	r0, [r7, #4]
	uint8_t errorCount=0;
 8001034:	2300      	movs	r3, #0
 8001036:	75fb      	strb	r3, [r7, #23]
	uint8_t numTxBytes=1;
 8001038:	2301      	movs	r3, #1
 800103a:	73fb      	strb	r3, [r7, #15]
	uint8_t numRxBytes=2;
 800103c:	2302      	movs	r3, #2
 800103e:	73bb      	strb	r3, [r7, #14]
	uint8_t rxBuffer[2];
	uint8_t cmdByte;

	for (int i=0;i<7;i++)
 8001040:	2300      	movs	r3, #0
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	e03f      	b.n	80010c6 <Bar30getCalibration+0x9a>
	{
		cmdByte=READ_PROM_CMD_1+2*i;
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	3350      	adds	r3, #80	@ 0x50
 800104a:	b2db      	uxtb	r3, r3
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	b2db      	uxtb	r3, r3
 8001050:	72fb      	strb	r3, [r7, #11]
		halStatus=HAL_I2C_Master_Transmit(sensor->i2cHandle, BAR30_I2C_ADD, &cmdByte, numTxBytes, HAL_MAX_DELAY);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6818      	ldr	r0, [r3, #0]
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	b29b      	uxth	r3, r3
 800105a:	f107 020b 	add.w	r2, r7, #11
 800105e:	f04f 31ff 	mov.w	r1, #4294967295
 8001062:	9100      	str	r1, [sp, #0]
 8001064:	21ec      	movs	r1, #236	@ 0xec
 8001066:	f005 f99d 	bl	80063a4 <HAL_I2C_Master_Transmit>
 800106a:	4603      	mov	r3, r0
 800106c:	461a      	mov	r2, r3
 800106e:	4b1c      	ldr	r3, [pc, #112]	@ (80010e0 <Bar30getCalibration+0xb4>)
 8001070:	701a      	strb	r2, [r3, #0]
		if(halStatus!=HAL_OK)
 8001072:	4b1b      	ldr	r3, [pc, #108]	@ (80010e0 <Bar30getCalibration+0xb4>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d002      	beq.n	8001080 <Bar30getCalibration+0x54>
		{
			errorCount+=1;
 800107a:	7dfb      	ldrb	r3, [r7, #23]
 800107c:	3301      	adds	r3, #1
 800107e:	75fb      	strb	r3, [r7, #23]
		}
		halStatus==HAL_I2C_Master_Receive(sensor->i2cHandle, BAR30_I2C_ADD, &rxBuffer[0], numRxBytes, HAL_MAX_DELAY);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6818      	ldr	r0, [r3, #0]
 8001084:	7bbb      	ldrb	r3, [r7, #14]
 8001086:	b29b      	uxth	r3, r3
 8001088:	f107 020c 	add.w	r2, r7, #12
 800108c:	f04f 31ff 	mov.w	r1, #4294967295
 8001090:	9100      	str	r1, [sp, #0]
 8001092:	21ec      	movs	r1, #236	@ 0xec
 8001094:	f005 fa84 	bl	80065a0 <HAL_I2C_Master_Receive>
		if(halStatus!=HAL_OK)
 8001098:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <Bar30getCalibration+0xb4>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d002      	beq.n	80010a6 <Bar30getCalibration+0x7a>
		{
			errorCount+=1;
 80010a0:	7dfb      	ldrb	r3, [r7, #23]
 80010a2:	3301      	adds	r3, #1
 80010a4:	75fb      	strb	r3, [r7, #23]
		}
		sensor->calibrationResult[i]=(uint16_t)((rxBuffer[0] << 8) | rxBuffer[1]);
 80010a6:	7b3b      	ldrb	r3, [r7, #12]
 80010a8:	021b      	lsls	r3, r3, #8
 80010aa:	b21a      	sxth	r2, r3
 80010ac:	7b7b      	ldrb	r3, [r7, #13]
 80010ae:	b21b      	sxth	r3, r3
 80010b0:	4313      	orrs	r3, r2
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	b299      	uxth	r1, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	320c      	adds	r2, #12
 80010bc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i=0;i<7;i++)
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	3301      	adds	r3, #1
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	2b06      	cmp	r3, #6
 80010ca:	ddbc      	ble.n	8001046 <Bar30getCalibration+0x1a>
	}
	return errorCount==0;
 80010cc:	7dfb      	ldrb	r3, [r7, #23]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	bf0c      	ite	eq
 80010d2:	2301      	moveq	r3, #1
 80010d4:	2300      	movne	r3, #0
 80010d6:	b2db      	uxtb	r3, r3

}
 80010d8:	4618      	mov	r0, r3
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	2000020c 	.word	0x2000020c

080010e4 <Bar30getData>:



uint8_t Bar30getData(Bar30* sensor)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	uint8_t conversionGood=1;
 80010ec:	2301      	movs	r3, #1
 80010ee:	73fb      	strb	r3, [r7, #15]
	halStatus=initiatePressureConversion(sensor);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f000 f847 	bl	8001184 <initiatePressureConversion>
 80010f6:	4603      	mov	r3, r0
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b21      	ldr	r3, [pc, #132]	@ (8001180 <Bar30getData+0x9c>)
 80010fc:	701a      	strb	r2, [r3, #0]
	if(halStatus!=HAL_OK)
 80010fe:	4b20      	ldr	r3, [pc, #128]	@ (8001180 <Bar30getData+0x9c>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <Bar30getData+0x26>
		conversionGood=0;
 8001106:	2300      	movs	r3, #0
 8001108:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(3);
 800110a:	2003      	movs	r0, #3
 800110c:	f003 fbe2 	bl	80048d4 <HAL_Delay>
	halStatus=readPressureData(sensor);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f000 f873 	bl	80011fc <readPressureData>
 8001116:	4603      	mov	r3, r0
 8001118:	461a      	mov	r2, r3
 800111a:	4b19      	ldr	r3, [pc, #100]	@ (8001180 <Bar30getData+0x9c>)
 800111c:	701a      	strb	r2, [r3, #0]
	if(halStatus!=HAL_OK)
 800111e:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <Bar30getData+0x9c>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <Bar30getData+0x46>
		conversionGood=0;
 8001126:	2300      	movs	r3, #0
 8001128:	73fb      	strb	r3, [r7, #15]

	halStatus=initiateTemperatureConversion(sensor);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 f848 	bl	80011c0 <initiateTemperatureConversion>
 8001130:	4603      	mov	r3, r0
 8001132:	461a      	mov	r2, r3
 8001134:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <Bar30getData+0x9c>)
 8001136:	701a      	strb	r2, [r3, #0]
	if(halStatus!=HAL_OK)
 8001138:	4b11      	ldr	r3, [pc, #68]	@ (8001180 <Bar30getData+0x9c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <Bar30getData+0x60>
		conversionGood=0;
 8001140:	2300      	movs	r3, #0
 8001142:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(3);
 8001144:	2003      	movs	r0, #3
 8001146:	f003 fbc5 	bl	80048d4 <HAL_Delay>
	halStatus=readTemperatureData(sensor);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f000 f896 	bl	800127c <readTemperatureData>
 8001150:	4603      	mov	r3, r0
 8001152:	461a      	mov	r2, r3
 8001154:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <Bar30getData+0x9c>)
 8001156:	701a      	strb	r2, [r3, #0]
	if(halStatus!=HAL_OK)
 8001158:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <Bar30getData+0x9c>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <Bar30getData+0x80>
		conversionGood=0;
 8001160:	2300      	movs	r3, #0
 8001162:	73fb      	strb	r3, [r7, #15]
	calculateTemperature(sensor);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f000 f923 	bl	80013b0 <calculateTemperature>
	calculatePressure(sensor);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 f966 	bl	800143c <calculatePressure>
	calculateDepth(sensor);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f000 fa29 	bl	80015c8 <calculateDepth>
	return conversionGood;
 8001176:	7bfb      	ldrb	r3, [r7, #15]

}
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	2000020c 	.word	0x2000020c

08001184 <initiatePressureConversion>:

HAL_StatusTypeDef initiatePressureConversion(Bar30* sensor)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af02      	add	r7, sp, #8
 800118a:	6078      	str	r0, [r7, #4]
	uint8_t cmdByte=PRESSURE_CONVERSION_CMD;
 800118c:	2344      	movs	r3, #68	@ 0x44
 800118e:	73fb      	strb	r3, [r7, #15]
	halStatus=HAL_I2C_Master_Transmit(sensor->i2cHandle,BAR30_I2C_ADD,&cmdByte,1,HAL_MAX_DELAY);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6818      	ldr	r0, [r3, #0]
 8001194:	f107 020f 	add.w	r2, r7, #15
 8001198:	f04f 33ff 	mov.w	r3, #4294967295
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2301      	movs	r3, #1
 80011a0:	21ec      	movs	r1, #236	@ 0xec
 80011a2:	f005 f8ff 	bl	80063a4 <HAL_I2C_Master_Transmit>
 80011a6:	4603      	mov	r3, r0
 80011a8:	461a      	mov	r2, r3
 80011aa:	4b04      	ldr	r3, [pc, #16]	@ (80011bc <initiatePressureConversion+0x38>)
 80011ac:	701a      	strb	r2, [r3, #0]
	return halStatus;
 80011ae:	4b03      	ldr	r3, [pc, #12]	@ (80011bc <initiatePressureConversion+0x38>)
 80011b0:	781b      	ldrb	r3, [r3, #0]


}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	2000020c 	.word	0x2000020c

080011c0 <initiateTemperatureConversion>:
HAL_StatusTypeDef initiateTemperatureConversion(Bar30* sensor)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af02      	add	r7, sp, #8
 80011c6:	6078      	str	r0, [r7, #4]
	uint8_t cmdByte=TEMP_CONVERSION_CMD;
 80011c8:	2354      	movs	r3, #84	@ 0x54
 80011ca:	73fb      	strb	r3, [r7, #15]
	halStatus= HAL_I2C_Master_Transmit(sensor->i2cHandle,BAR30_I2C_ADD,&cmdByte,1,HAL_MAX_DELAY);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6818      	ldr	r0, [r3, #0]
 80011d0:	f107 020f 	add.w	r2, r7, #15
 80011d4:	f04f 33ff 	mov.w	r3, #4294967295
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2301      	movs	r3, #1
 80011dc:	21ec      	movs	r1, #236	@ 0xec
 80011de:	f005 f8e1 	bl	80063a4 <HAL_I2C_Master_Transmit>
 80011e2:	4603      	mov	r3, r0
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b04      	ldr	r3, [pc, #16]	@ (80011f8 <initiateTemperatureConversion+0x38>)
 80011e8:	701a      	strb	r2, [r3, #0]
	return halStatus;
 80011ea:	4b03      	ldr	r3, [pc, #12]	@ (80011f8 <initiateTemperatureConversion+0x38>)
 80011ec:	781b      	ldrb	r3, [r3, #0]

}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	2000020c 	.word	0x2000020c

080011fc <readPressureData>:
HAL_StatusTypeDef readPressureData(Bar30* sensor){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af02      	add	r7, sp, #8
 8001202:	6078      	str	r0, [r7, #4]
	uint8_t cmdByte=READ_RESULT_CMD;
 8001204:	2300      	movs	r3, #0
 8001206:	73fb      	strb	r3, [r7, #15]
	uint8_t rxBuffer[3];
	halStatus= HAL_I2C_Master_Transmit(sensor->i2cHandle,BAR30_I2C_ADD,&cmdByte,1,HAL_MAX_DELAY);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6818      	ldr	r0, [r3, #0]
 800120c:	f107 020f 	add.w	r2, r7, #15
 8001210:	f04f 33ff 	mov.w	r3, #4294967295
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	2301      	movs	r3, #1
 8001218:	21ec      	movs	r1, #236	@ 0xec
 800121a:	f005 f8c3 	bl	80063a4 <HAL_I2C_Master_Transmit>
 800121e:	4603      	mov	r3, r0
 8001220:	461a      	mov	r2, r3
 8001222:	4b15      	ldr	r3, [pc, #84]	@ (8001278 <readPressureData+0x7c>)
 8001224:	701a      	strb	r2, [r3, #0]
	halStatus=HAL_I2C_Master_Receive(sensor->i2cHandle, BAR30_I2C_ADD, rxBuffer, 3, HAL_MAX_DELAY);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6818      	ldr	r0, [r3, #0]
 800122a:	f107 020c 	add.w	r2, r7, #12
 800122e:	f04f 33ff 	mov.w	r3, #4294967295
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2303      	movs	r3, #3
 8001236:	21ec      	movs	r1, #236	@ 0xec
 8001238:	f005 f9b2 	bl	80065a0 <HAL_I2C_Master_Receive>
 800123c:	4603      	mov	r3, r0
 800123e:	461a      	mov	r2, r3
 8001240:	4b0d      	ldr	r3, [pc, #52]	@ (8001278 <readPressureData+0x7c>)
 8001242:	701a      	strb	r2, [r3, #0]
	sensor->rawPressure|=((uint32_t)rxBuffer[0]<<16);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	7b3b      	ldrb	r3, [r7, #12]
 800124a:	041b      	lsls	r3, r3, #16
 800124c:	431a      	orrs	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	605a      	str	r2, [r3, #4]
	sensor->rawPressure|=((uint32_t)rxBuffer[1]<<8);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685a      	ldr	r2, [r3, #4]
 8001256:	7b7b      	ldrb	r3, [r7, #13]
 8001258:	021b      	lsls	r3, r3, #8
 800125a:	431a      	orrs	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	605a      	str	r2, [r3, #4]
	sensor->rawPressure|=rxBuffer[2];
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	7bba      	ldrb	r2, [r7, #14]
 8001266:	431a      	orrs	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	605a      	str	r2, [r3, #4]
	return halStatus;
 800126c:	4b02      	ldr	r3, [pc, #8]	@ (8001278 <readPressureData+0x7c>)
 800126e:	781b      	ldrb	r3, [r3, #0]

}
 8001270:	4618      	mov	r0, r3
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	2000020c 	.word	0x2000020c

0800127c <readTemperatureData>:

HAL_StatusTypeDef readTemperatureData(Bar30* sensor)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af02      	add	r7, sp, #8
 8001282:	6078      	str	r0, [r7, #4]
	uint8_t cmdByte=READ_RESULT_CMD;
 8001284:	2300      	movs	r3, #0
 8001286:	73fb      	strb	r3, [r7, #15]
	uint8_t rxBuffer[3];
	halStatus= HAL_I2C_Master_Transmit(sensor->i2cHandle,BAR30_I2C_ADD,&cmdByte,1,HAL_MAX_DELAY);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6818      	ldr	r0, [r3, #0]
 800128c:	f107 020f 	add.w	r2, r7, #15
 8001290:	f04f 33ff 	mov.w	r3, #4294967295
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2301      	movs	r3, #1
 8001298:	21ec      	movs	r1, #236	@ 0xec
 800129a:	f005 f883 	bl	80063a4 <HAL_I2C_Master_Transmit>
 800129e:	4603      	mov	r3, r0
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b15      	ldr	r3, [pc, #84]	@ (80012f8 <readTemperatureData+0x7c>)
 80012a4:	701a      	strb	r2, [r3, #0]
	halStatus=HAL_I2C_Master_Receive(sensor->i2cHandle, BAR30_I2C_ADD, rxBuffer, 3, HAL_MAX_DELAY);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6818      	ldr	r0, [r3, #0]
 80012aa:	f107 020c 	add.w	r2, r7, #12
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	2303      	movs	r3, #3
 80012b6:	21ec      	movs	r1, #236	@ 0xec
 80012b8:	f005 f972 	bl	80065a0 <HAL_I2C_Master_Receive>
 80012bc:	4603      	mov	r3, r0
 80012be:	461a      	mov	r2, r3
 80012c0:	4b0d      	ldr	r3, [pc, #52]	@ (80012f8 <readTemperatureData+0x7c>)
 80012c2:	701a      	strb	r2, [r3, #0]
	sensor->rawTemperature|=((uint32_t)rxBuffer[0]<<16);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	7b3b      	ldrb	r3, [r7, #12]
 80012ca:	041b      	lsls	r3, r3, #16
 80012cc:	431a      	orrs	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	609a      	str	r2, [r3, #8]
	sensor->rawTemperature|=((uint32_t)rxBuffer[1]<<8);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	7b7b      	ldrb	r3, [r7, #13]
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	431a      	orrs	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	609a      	str	r2, [r3, #8]
	sensor->rawTemperature|=rxBuffer[2];
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	7bba      	ldrb	r2, [r7, #14]
 80012e6:	431a      	orrs	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	609a      	str	r2, [r3, #8]


	return halStatus;
 80012ec:	4b02      	ldr	r3, [pc, #8]	@ (80012f8 <readTemperatureData+0x7c>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	2000020c 	.word	0x2000020c

080012fc <Bar30CRCcheck>:


uint8_t Bar30CRCcheck(uint16_t* promData)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b087      	sub	sp, #28
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	uint8_t cnt;
	uint32_t remainder=0;
 8001304:	2300      	movs	r3, #0
 8001306:	613b      	str	r3, [r7, #16]
	uint8_t nbit;
	promData[0]=((promData[0])&0x0FFF);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	881b      	ldrh	r3, [r3, #0]
 800130c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001310:	b29a      	uxth	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	801a      	strh	r2, [r3, #0]
	for(cnt=0;cnt<16;cnt++)
 8001316:	2300      	movs	r3, #0
 8001318:	75fb      	strb	r3, [r7, #23]
 800131a:	e035      	b.n	8001388 <Bar30CRCcheck+0x8c>
	{
		if(cnt%2==1)
 800131c:	7dfb      	ldrb	r3, [r7, #23]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d00b      	beq.n	8001340 <Bar30CRCcheck+0x44>
			remainder^=(uint16_t)((promData[cnt>>1])& 0x00FF);
 8001328:	7dfb      	ldrb	r3, [r7, #23]
 800132a:	085b      	lsrs	r3, r3, #1
 800132c:	b2db      	uxtb	r3, r3
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	4413      	add	r3, r2
 8001334:	881b      	ldrh	r3, [r3, #0]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	4053      	eors	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	e009      	b.n	8001354 <Bar30CRCcheck+0x58>
		else
			remainder=(uint16_t)(promData[cnt>>1]>>8);
 8001340:	7dfb      	ldrb	r3, [r7, #23]
 8001342:	085b      	lsrs	r3, r3, #1
 8001344:	b2db      	uxtb	r3, r3
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	4413      	add	r3, r2
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	0a1b      	lsrs	r3, r3, #8
 8001350:	b29b      	uxth	r3, r3
 8001352:	613b      	str	r3, [r7, #16]
		for(nbit=8;nbit>0;nbit--)
 8001354:	2308      	movs	r3, #8
 8001356:	73fb      	strb	r3, [r7, #15]
 8001358:	e010      	b.n	800137c <Bar30CRCcheck+0x80>
		{
			if(remainder&(0x8000))
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d005      	beq.n	8001370 <Bar30CRCcheck+0x74>
				remainder=(remainder<<1)^0x3000;
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	e002      	b.n	8001376 <Bar30CRCcheck+0x7a>
			else
				remainder=(remainder<<1);
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	613b      	str	r3, [r7, #16]
		for(nbit=8;nbit>0;nbit--)
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	3b01      	subs	r3, #1
 800137a:	73fb      	strb	r3, [r7, #15]
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1eb      	bne.n	800135a <Bar30CRCcheck+0x5e>
	for(cnt=0;cnt<16;cnt++)
 8001382:	7dfb      	ldrb	r3, [r7, #23]
 8001384:	3301      	adds	r3, #1
 8001386:	75fb      	strb	r3, [r7, #23]
 8001388:	7dfb      	ldrb	r3, [r7, #23]
 800138a:	2b0f      	cmp	r3, #15
 800138c:	d9c6      	bls.n	800131c <Bar30CRCcheck+0x20>
		}
	}
	remainder=((remainder>>12)&0x000F);
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	0b1b      	lsrs	r3, r3, #12
 8001392:	f003 030f 	and.w	r3, r3, #15
 8001396:	613b      	str	r3, [r7, #16]
	return ((remainder^0x00)==0);
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	2b00      	cmp	r3, #0
 800139c:	bf0c      	ite	eq
 800139e:	2301      	moveq	r3, #1
 80013a0:	2300      	movne	r3, #0
 80013a2:	b2db      	uxtb	r3, r3



}
 80013a4:	4618      	mov	r0, r3
 80013a6:	371c      	adds	r7, #28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <calculateTemperature>:

void calculateTemperature(Bar30* sensor)
{
 80013b0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80013b4:	b085      	sub	sp, #20
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
	int32_t temperature=0;
 80013ba:	2100      	movs	r1, #0
 80013bc:	60f9      	str	r1, [r7, #12]
	sensor->dT=sensor->rawTemperature-((uint32_t)(sensor->calibrationResult[5])*256l);
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	6888      	ldr	r0, [r1, #8]
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 80013c6:	0209      	lsls	r1, r1, #8
 80013c8:	1a41      	subs	r1, r0, r1
 80013ca:	4608      	mov	r0, r1
 80013cc:	6879      	ldr	r1, [r7, #4]
 80013ce:	6288      	str	r0, [r1, #40]	@ 0x28
	temperature=2000l+(int64_t)(sensor->dT)*sensor->calibrationResult[6]/8388608LL;
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80013d4:	17c8      	asrs	r0, r1, #31
 80013d6:	4688      	mov	r8, r1
 80013d8:	4681      	mov	r9, r0
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	8c89      	ldrh	r1, [r1, #36]	@ 0x24
 80013de:	b289      	uxth	r1, r1
 80013e0:	2000      	movs	r0, #0
 80013e2:	460c      	mov	r4, r1
 80013e4:	4605      	mov	r5, r0
 80013e6:	fb04 f009 	mul.w	r0, r4, r9
 80013ea:	fb08 f105 	mul.w	r1, r8, r5
 80013ee:	4401      	add	r1, r0
 80013f0:	fba8 2304 	umull	r2, r3, r8, r4
 80013f4:	4419      	add	r1, r3
 80013f6:	460b      	mov	r3, r1
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	da06      	bge.n	800140a <calculateTemperature+0x5a>
 80013fc:	490e      	ldr	r1, [pc, #56]	@ (8001438 <calculateTemperature+0x88>)
 80013fe:	eb12 0a01 	adds.w	sl, r2, r1
 8001402:	f143 0b00 	adc.w	fp, r3, #0
 8001406:	4652      	mov	r2, sl
 8001408:	465b      	mov	r3, fp
 800140a:	f04f 0000 	mov.w	r0, #0
 800140e:	f04f 0100 	mov.w	r1, #0
 8001412:	0dd0      	lsrs	r0, r2, #23
 8001414:	ea40 2043 	orr.w	r0, r0, r3, lsl #9
 8001418:	15d9      	asrs	r1, r3, #23
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4613      	mov	r3, r2
 8001420:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001424:	60fb      	str	r3, [r7, #12]
	sensor->actualTemperature=temperature;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	615a      	str	r2, [r3, #20]


}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001436:	4770      	bx	lr
 8001438:	007fffff 	.word	0x007fffff

0800143c <calculatePressure>:

void calculatePressure(Bar30* sensor)
{
 800143c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001440:	b099      	sub	sp, #100	@ 0x64
 8001442:	af00      	add	r7, sp, #0
 8001444:	6478      	str	r0, [r7, #68]	@ 0x44
	int32_t dT=sensor->dT;
 8001446:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800144a:	65fb      	str	r3, [r7, #92]	@ 0x5c
	int64_t offset=0;
 800144c:	f04f 0200 	mov.w	r2, #0
 8001450:	f04f 0300 	mov.w	r3, #0
 8001454:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	int64_t sensitivity=0;
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	offset=((int64_t)sensor->calibrationResult[2]*65536l) + ((int64_t)(sensor->calibrationResult[4] * dT)/128l);
 8001464:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001466:	8b9b      	ldrh	r3, [r3, #28]
 8001468:	b29b      	uxth	r3, r3
 800146a:	2200      	movs	r2, #0
 800146c:	461c      	mov	r4, r3
 800146e:	4615      	mov	r5, r2
 8001470:	f04f 0000 	mov.w	r0, #0
 8001474:	f04f 0100 	mov.w	r1, #0
 8001478:	0429      	lsls	r1, r5, #16
 800147a:	ea41 4114 	orr.w	r1, r1, r4, lsr #16
 800147e:	0420      	lsls	r0, r4, #16
 8001480:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001482:	8c1b      	ldrh	r3, [r3, #32]
 8001484:	461a      	mov	r2, r3
 8001486:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001488:	fb02 f303 	mul.w	r3, r2, r3
 800148c:	2b00      	cmp	r3, #0
 800148e:	da00      	bge.n	8001492 <calculatePressure+0x56>
 8001490:	337f      	adds	r3, #127	@ 0x7f
 8001492:	11db      	asrs	r3, r3, #7
 8001494:	17da      	asrs	r2, r3, #31
 8001496:	469a      	mov	sl, r3
 8001498:	4693      	mov	fp, r2
 800149a:	eb10 030a 	adds.w	r3, r0, sl
 800149e:	61bb      	str	r3, [r7, #24]
 80014a0:	eb41 030b 	adc.w	r3, r1, fp
 80014a4:	61fb      	str	r3, [r7, #28]
 80014a6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80014aa:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
	sensitivity = (((int64_t)sensor->calibrationResult[1]*32768l)) + (((int64_t)(dT * sensor->calibrationResult[3]))/256l);
 80014ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014b0:	8b5b      	ldrh	r3, [r3, #26]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	2200      	movs	r2, #0
 80014b6:	4698      	mov	r8, r3
 80014b8:	4691      	mov	r9, r2
 80014ba:	f04f 0000 	mov.w	r0, #0
 80014be:	f04f 0100 	mov.w	r1, #0
 80014c2:	ea4f 31c9 	mov.w	r1, r9, lsl #15
 80014c6:	ea41 4158 	orr.w	r1, r1, r8, lsr #17
 80014ca:	ea4f 30c8 	mov.w	r0, r8, lsl #15
 80014ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014d0:	8bdb      	ldrh	r3, [r3, #30]
 80014d2:	461a      	mov	r2, r3
 80014d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014d6:	fb02 f303 	mul.w	r3, r2, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	da00      	bge.n	80014e0 <calculatePressure+0xa4>
 80014de:	33ff      	adds	r3, #255	@ 0xff
 80014e0:	121b      	asrs	r3, r3, #8
 80014e2:	17da      	asrs	r2, r3, #31
 80014e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80014e6:	637a      	str	r2, [r7, #52]	@ 0x34
 80014e8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80014ec:	4623      	mov	r3, r4
 80014ee:	18c3      	adds	r3, r0, r3
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	462b      	mov	r3, r5
 80014f4:	eb41 0303 	adc.w	r3, r1, r3
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80014fe:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
	sensor->actualPressure=(sensor->rawPressure*sensitivity/(2097152l)-offset)/(8192l);
 8001502:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	62bb      	str	r3, [r7, #40]	@ 0x28
 800150a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800150c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800150e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001512:	462a      	mov	r2, r5
 8001514:	fb02 f203 	mul.w	r2, r2, r3
 8001518:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800151a:	4621      	mov	r1, r4
 800151c:	fb01 f303 	mul.w	r3, r1, r3
 8001520:	4413      	add	r3, r2
 8001522:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001524:	4621      	mov	r1, r4
 8001526:	fba2 1201 	umull	r1, r2, r2, r1
 800152a:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800152c:	460a      	mov	r2, r1
 800152e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001530:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001532:	4413      	add	r3, r2
 8001534:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001536:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800153a:	2b00      	cmp	r3, #0
 800153c:	da07      	bge.n	800154e <calculatePressure+0x112>
 800153e:	4921      	ldr	r1, [pc, #132]	@ (80015c4 <calculatePressure+0x188>)
 8001540:	1851      	adds	r1, r2, r1
 8001542:	60b9      	str	r1, [r7, #8]
 8001544:	f143 0300 	adc.w	r3, r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800154e:	f04f 0000 	mov.w	r0, #0
 8001552:	f04f 0100 	mov.w	r1, #0
 8001556:	0d50      	lsrs	r0, r2, #21
 8001558:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800155c:	1559      	asrs	r1, r3, #21
 800155e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001562:	1a84      	subs	r4, r0, r2
 8001564:	623c      	str	r4, [r7, #32]
 8001566:	eb61 0303 	sbc.w	r3, r1, r3
 800156a:	627b      	str	r3, [r7, #36]	@ 0x24
 800156c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001570:	2b00      	cmp	r3, #0
 8001572:	da08      	bge.n	8001586 <calculatePressure+0x14a>
 8001574:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 8001578:	1851      	adds	r1, r2, r1
 800157a:	6039      	str	r1, [r7, #0]
 800157c:	f143 0300 	adc.w	r3, r3, #0
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001586:	f04f 0000 	mov.w	r0, #0
 800158a:	f04f 0100 	mov.w	r1, #0
 800158e:	0b50      	lsrs	r0, r2, #13
 8001590:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001594:	1359      	asrs	r1, r3, #13
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800159c:	60da      	str	r2, [r3, #12]
	sensor->pressure_mbar=(float)(sensor->actualPressure)/10.0f; // result in millibar
 800159e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	ee07 3a90 	vmov	s15, r3
 80015a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015aa:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80015ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015b4:	edc3 7a04 	vstr	s15, [r3, #16]


}
 80015b8:	bf00      	nop
 80015ba:	3764      	adds	r7, #100	@ 0x64
 80015bc:	46bd      	mov	sp, r7
 80015be:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80015c2:	4770      	bx	lr
 80015c4:	001fffff 	.word	0x001fffff

080015c8 <calculateDepth>:
float calculateDepth(Bar30* sensor)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	sensor->depth=(sensor->pressure_mbar*100.0f-101300.0f)/(FLUID_DENSITY*9.80665f);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	edd3 7a04 	vldr	s15, [r3, #16]
 80015d6:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800160c <calculateDepth+0x44>
 80015da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015de:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001610 <calculateDepth+0x48>
 80015e2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80015e6:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8001614 <calculateDepth+0x4c>
 80015ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	return sensor->depth;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015f8:	ee07 3a90 	vmov	s15, r3
}
 80015fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	42c80000 	.word	0x42c80000
 8001610:	47c5da00 	.word	0x47c5da00
 8001614:	46181d08 	.word	0x46181d08

08001618 <checkMPU6050Ready>:
#include "MPU6050.h"
extern I2C_HandleTypeDef hi2c1;

uint8_t checkMPU6050Ready()
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
	if((HAL_I2C_IsDeviceReady(&hi2c1,MPU6050ADDR+0,1,100)==HAL_OK))
 800161c:	2364      	movs	r3, #100	@ 0x64
 800161e:	2201      	movs	r2, #1
 8001620:	21d0      	movs	r1, #208	@ 0xd0
 8001622:	4805      	ldr	r0, [pc, #20]	@ (8001638 <checkMPU6050Ready+0x20>)
 8001624:	f005 fe96 	bl	8007354 <HAL_I2C_IsDeviceReady>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <checkMPU6050Ready+0x1a>
	{
		return 1;
 800162e:	2301      	movs	r3, #1
 8001630:	e000      	b.n	8001634 <checkMPU6050Ready+0x1c>
	}
	return 0;
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20002704 	.word	0x20002704

0800163c <i2cWriteRegMPU6050>:
uint8_t i2cWriteRegMPU6050(uint16_t devAddr, uint16_t RegAddr, uint8_t* data){
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af04      	add	r7, sp, #16
 8001642:	4603      	mov	r3, r0
 8001644:	603a      	str	r2, [r7, #0]
 8001646:	80fb      	strh	r3, [r7, #6]
 8001648:	460b      	mov	r3, r1
 800164a:	80bb      	strh	r3, [r7, #4]

	return(HAL_I2C_Mem_Write(&hi2c1,devAddr,RegAddr, 1, data ,1,HAL_MAX_DELAY)==HAL_OK);
 800164c:	88ba      	ldrh	r2, [r7, #4]
 800164e:	88f9      	ldrh	r1, [r7, #6]
 8001650:	f04f 33ff 	mov.w	r3, #4294967295
 8001654:	9302      	str	r3, [sp, #8]
 8001656:	2301      	movs	r3, #1
 8001658:	9301      	str	r3, [sp, #4]
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	2301      	movs	r3, #1
 8001660:	4806      	ldr	r0, [pc, #24]	@ (800167c <i2cWriteRegMPU6050+0x40>)
 8001662:	f005 f9c3 	bl	80069ec <HAL_I2C_Mem_Write>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	bf0c      	ite	eq
 800166c:	2301      	moveq	r3, #1
 800166e:	2300      	movne	r3, #0
 8001670:	b2db      	uxtb	r3, r3

}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20002704 	.word	0x20002704

08001680 <MPU6050init>:

uint8_t MPU6050init(MPU6050* imu, I2C_HandleTypeDef* i2cHandle)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
	imu->i2cHandle=i2cHandle;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	601a      	str	r2, [r3, #0]

	for(int i=0;i<3;i++)
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	e013      	b.n	80016be <MPU6050init+0x3e>
	{
		imu->acc_mps2[i]=0;
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	3304      	adds	r3, #4
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
		imu->accelOffsets[i]=0;
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	330e      	adds	r3, #14
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	3304      	adds	r3, #4
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
	for(int i=0;i<3;i++)
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	3301      	adds	r3, #1
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	dde8      	ble.n	8001696 <MPU6050init+0x16>
	}


	for(int i=0;i<3;i++)
 80016c4:	2300      	movs	r3, #0
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	e012      	b.n	80016f0 <MPU6050init+0x70>
	{
		imu->gyr_rps[i]=0;
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	3304      	adds	r3, #4
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	f04f 0200 	mov.w	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
		imu->gyroOffsets[i]=0;
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	330c      	adds	r3, #12
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
	for(int i=0;i<3;i++)
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	3301      	adds	r3, #1
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	dde9      	ble.n	80016ca <MPU6050init+0x4a>
	}

	for(int i=0; i<14;i++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	e008      	b.n	800170e <MPU6050init+0x8e>
		imu->rxData[i]=0;
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4413      	add	r3, r2
 8001702:	3320      	adds	r3, #32
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<14;i++)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	3301      	adds	r3, #1
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2b0d      	cmp	r3, #13
 8001712:	ddf3      	ble.n	80016fc <MPU6050init+0x7c>

	imu->rxFlag=0;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	imu->dataReadyFlag=0;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	imu->temp_degC=0;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	61da      	str	r2, [r3, #28]
	imu->numCalibrationMeas=0;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48



	uint8_t numErrors=0;
 8001734:	2300      	movs	r3, #0
 8001736:	72fb      	strb	r3, [r7, #11]
	//Disable FSYNC, enable digital LPF ( fs=1kHz, bandwidth: acc=94 Hz, gyr=98Hz )
	uint8_t data=0x02;
 8001738:	2302      	movs	r3, #2
 800173a:	72bb      	strb	r3, [r7, #10]
	if(i2cWriteRegMPU6050(MPU6050ADDR,MPU6050_CONFIG_REG,&data)==0)
 800173c:	f107 030a 	add.w	r3, r7, #10
 8001740:	461a      	mov	r2, r3
 8001742:	211a      	movs	r1, #26
 8001744:	20d0      	movs	r0, #208	@ 0xd0
 8001746:	f7ff ff79 	bl	800163c <i2cWriteRegMPU6050>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d102      	bne.n	8001756 <MPU6050init+0xd6>
		numErrors+=1;
 8001750:	7afb      	ldrb	r3, [r7, #11]
 8001752:	3301      	adds	r3, #1
 8001754:	72fb      	strb	r3, [r7, #11]

	// Enable Interrupt, clear status bits on any read operation
	data=0x10;
 8001756:	2310      	movs	r3, #16
 8001758:	72bb      	strb	r3, [r7, #10]
	if(i2cWriteRegMPU6050(MPU6050ADDR,MPU6050_INT_PIN_CFG_REG,&data)==0)
 800175a:	f107 030a 	add.w	r3, r7, #10
 800175e:	461a      	mov	r2, r3
 8001760:	2137      	movs	r1, #55	@ 0x37
 8001762:	20d0      	movs	r0, #208	@ 0xd0
 8001764:	f7ff ff6a 	bl	800163c <i2cWriteRegMPU6050>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d102      	bne.n	8001774 <MPU6050init+0xf4>
		numErrors+=1;
 800176e:	7afb      	ldrb	r3, [r7, #11]
 8001770:	3301      	adds	r3, #1
 8001772:	72fb      	strb	r3, [r7, #11]

	data=0x01;
 8001774:	2301      	movs	r3, #1
 8001776:	72bb      	strb	r3, [r7, #10]
	if(i2cWriteRegMPU6050(MPU6050ADDR,MPU6050_INT_ENABLE_REG,&data)==0)
 8001778:	f107 030a 	add.w	r3, r7, #10
 800177c:	461a      	mov	r2, r3
 800177e:	2138      	movs	r1, #56	@ 0x38
 8001780:	20d0      	movs	r0, #208	@ 0xd0
 8001782:	f7ff ff5b 	bl	800163c <i2cWriteRegMPU6050>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d102      	bne.n	8001792 <MPU6050init+0x112>
		numErrors+=1;
 800178c:	7afb      	ldrb	r3, [r7, #11]
 800178e:	3301      	adds	r3, #1
 8001790:	72fb      	strb	r3, [r7, #11]

	// Wake-up MPU6050
	data=0x00;
 8001792:	2300      	movs	r3, #0
 8001794:	72bb      	strb	r3, [r7, #10]
	if(i2cWriteRegMPU6050(MPU6050ADDR,MPU6050_PWR_MGMT_1_REG,&data)==0)
 8001796:	f107 030a 	add.w	r3, r7, #10
 800179a:	461a      	mov	r2, r3
 800179c:	216b      	movs	r1, #107	@ 0x6b
 800179e:	20d0      	movs	r0, #208	@ 0xd0
 80017a0:	f7ff ff4c 	bl	800163c <i2cWriteRegMPU6050>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d102      	bne.n	80017b0 <MPU6050init+0x130>
		numErrors+=1;
 80017aa:	7afb      	ldrb	r3, [r7, #11]
 80017ac:	3301      	adds	r3, #1
 80017ae:	72fb      	strb	r3, [r7, #11]

	return numErrors==0;
 80017b0:	7afb      	ldrb	r3, [r7, #11]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	bf0c      	ite	eq
 80017b6:	2301      	moveq	r3, #1
 80017b8:	2300      	movne	r3, #0
 80017ba:	b2db      	uxtb	r3, r3

}
 80017bc:	4618      	mov	r0, r3
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <MPU6050readDataDMA>:

uint8_t MPU6050readDataDMA(MPU6050* imu)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af02      	add	r7, sp, #8
 80017ca:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef readStatus;
	readStatus=HAL_I2C_Mem_Read_DMA(imu->i2cHandle,MPU6050ADDR,MPU6050_DATA_START_ADD,1,imu->rxData,14);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6818      	ldr	r0, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3320      	adds	r3, #32
 80017d4:	220e      	movs	r2, #14
 80017d6:	9201      	str	r2, [sp, #4]
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	2301      	movs	r3, #1
 80017dc:	223b      	movs	r2, #59	@ 0x3b
 80017de:	21d0      	movs	r1, #208	@ 0xd0
 80017e0:	f005 fc24 	bl	800702c <HAL_I2C_Mem_Read_DMA>
 80017e4:	4603      	mov	r3, r0
 80017e6:	73fb      	strb	r3, [r7, #15]
	imu->dataReadyFlag=0;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	if(readStatus==HAL_OK)return 1;
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <MPU6050readDataDMA+0x36>
 80017f6:	2301      	movs	r3, #1
 80017f8:	e00a      	b.n	8001810 <MPU6050readDataDMA+0x4c>
	else if(readStatus==HAL_ERROR)return 2;
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d101      	bne.n	8001804 <MPU6050readDataDMA+0x40>
 8001800:	2302      	movs	r3, #2
 8001802:	e005      	b.n	8001810 <MPU6050readDataDMA+0x4c>
	else if (readStatus==HAL_BUSY)return 3;
 8001804:	7bfb      	ldrb	r3, [r7, #15]
 8001806:	2b02      	cmp	r3, #2
 8001808:	d101      	bne.n	800180e <MPU6050readDataDMA+0x4a>
 800180a:	2303      	movs	r3, #3
 800180c:	e000      	b.n	8001810 <MPU6050readDataDMA+0x4c>
	else return 0;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <MPU6050convertRawData>:

void MPU6050convertRawData(MPU6050* imu)
{
 8001818:	b480      	push	{r7}
 800181a:	b087      	sub	sp, #28
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
	int16_t acc[3]={( (imu->rxData[0]<<8)|imu->rxData[1] ),( (imu->rxData[2]<<8)|imu->rxData[3] ),( (imu->rxData[4]<<8)|imu->rxData[5] )};
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001826:	021b      	lsls	r3, r3, #8
 8001828:	b21a      	sxth	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001830:	b21b      	sxth	r3, r3
 8001832:	4313      	orrs	r3, r2
 8001834:	b21b      	sxth	r3, r3
 8001836:	823b      	strh	r3, [r7, #16]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800183e:	021b      	lsls	r3, r3, #8
 8001840:	b21a      	sxth	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001848:	b21b      	sxth	r3, r3
 800184a:	4313      	orrs	r3, r2
 800184c:	b21b      	sxth	r3, r3
 800184e:	827b      	strh	r3, [r7, #18]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001856:	021b      	lsls	r3, r3, #8
 8001858:	b21a      	sxth	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001860:	b21b      	sxth	r3, r3
 8001862:	4313      	orrs	r3, r2
 8001864:	b21b      	sxth	r3, r3
 8001866:	82bb      	strh	r3, [r7, #20]
	//int16_t temperature=(imu->rxData[6]<<8)|imu->rxData[7];
	int16_t gyr[3]={( (imu->rxData[8]<<8)|imu->rxData[9] ),( (imu->rxData[10]<<8)|imu->rxData[11] ),( (imu->rxData[12]<<8)|imu->rxData[13] )};
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800186e:	021b      	lsls	r3, r3, #8
 8001870:	b21a      	sxth	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001878:	b21b      	sxth	r3, r3
 800187a:	4313      	orrs	r3, r2
 800187c:	b21b      	sxth	r3, r3
 800187e:	813b      	strh	r3, [r7, #8]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001886:	021b      	lsls	r3, r3, #8
 8001888:	b21a      	sxth	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001890:	b21b      	sxth	r3, r3
 8001892:	4313      	orrs	r3, r2
 8001894:	b21b      	sxth	r3, r3
 8001896:	817b      	strh	r3, [r7, #10]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800189e:	021b      	lsls	r3, r3, #8
 80018a0:	b21a      	sxth	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80018a8:	b21b      	sxth	r3, r3
 80018aa:	4313      	orrs	r3, r2
 80018ac:	b21b      	sxth	r3, r3
 80018ae:	81bb      	strh	r3, [r7, #12]

	// Before accel calibration
	imu->acc_mps2[0]=MPU6050_ACC_RAW_TO_MPS2*acc[0];
 80018b0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80018b4:	ee07 3a90 	vmov	s15, r3
 80018b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018bc:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 80019f0 <MPU6050convertRawData+0x1d8>
 80018c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	edc3 7a01 	vstr	s15, [r3, #4]
	imu->acc_mps2[1]=MPU6050_ACC_RAW_TO_MPS2*acc[1];
 80018ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018ce:	ee07 3a90 	vmov	s15, r3
 80018d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018d6:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80019f0 <MPU6050convertRawData+0x1d8>
 80018da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	edc3 7a02 	vstr	s15, [r3, #8]
	imu->acc_mps2[2]=MPU6050_ACC_RAW_TO_MPS2*acc[2];
 80018e4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80018e8:	ee07 3a90 	vmov	s15, r3
 80018ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018f0:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80019f0 <MPU6050convertRawData+0x1d8>
 80018f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	edc3 7a03 	vstr	s15, [r3, #12]

	// After accel calibration
	imu->accelOffsets[0]=ACCEL_CALI_SLOPE_X*imu->acc_mps2[0]+CALI_INTERCEPT_X; // offset calculated from linear regression
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	edd3 7a01 	vldr	s15, [r3, #4]
 8001904:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80019f4 <MPU6050convertRawData+0x1dc>
 8001908:	ee67 7a87 	vmul.f32	s15, s15, s14
 800190c:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80019f8 <MPU6050convertRawData+0x1e0>
 8001910:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	imu->acc_mps2[0]=imu->acc_mps2[0]-imu->accelOffsets[0];
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001926:	ee77 7a67 	vsub.f32	s15, s14, s15
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	edc3 7a01 	vstr	s15, [r3, #4]

	imu->accelOffsets[1]=ACCEL_CALI_SLOPE_Y*imu->acc_mps2[1]+CALI_INTERCEPT_Y; // offset calculated from linear regression
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	edd3 7a02 	vldr	s15, [r3, #8]
 8001936:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80019fc <MPU6050convertRawData+0x1e4>
 800193a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800193e:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001a00 <MPU6050convertRawData+0x1e8>
 8001942:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	imu->acc_mps2[1]=imu->acc_mps2[1]-imu->accelOffsets[1];
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001958:	ee77 7a67 	vsub.f32	s15, s14, s15
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	edc3 7a02 	vstr	s15, [r3, #8]

	imu->accelOffsets[2]=ACCEL_CALI_SLOPE_Z*imu->acc_mps2[2]+CALI_INTERCEPT_Z; // offset calculated from linear regression
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	edd3 7a03 	vldr	s15, [r3, #12]
 8001968:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001a04 <MPU6050convertRawData+0x1ec>
 800196c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001970:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001a08 <MPU6050convertRawData+0x1f0>
 8001974:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	imu->acc_mps2[2]=imu->acc_mps2[2]-imu->accelOffsets[2];
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	ed93 7a03 	vldr	s14, [r3, #12]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800198a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	edc3 7a03 	vstr	s15, [r3, #12]


	imu->gyr_rps[0]=MPU6050_GYR_RAW_TO_RPS*gyr[0];
 8001994:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001998:	ee07 3a90 	vmov	s15, r3
 800199c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019a0:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001a0c <MPU6050convertRawData+0x1f4>
 80019a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	edc3 7a04 	vstr	s15, [r3, #16]
	imu->gyr_rps[1]=MPU6050_GYR_RAW_TO_RPS*gyr[1];
 80019ae:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80019b2:	ee07 3a90 	vmov	s15, r3
 80019b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ba:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001a0c <MPU6050convertRawData+0x1f4>
 80019be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	edc3 7a05 	vstr	s15, [r3, #20]
	imu->gyr_rps[2]=MPU6050_GYR_RAW_TO_RPS*gyr[2];
 80019c8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019cc:	ee07 3a90 	vmov	s15, r3
 80019d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019d4:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001a0c <MPU6050convertRawData+0x1f4>
 80019d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	edc3 7a06 	vstr	s15, [r3, #24]

}
 80019e2:	bf00      	nop
 80019e4:	371c      	adds	r7, #28
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	3a1cf5c1 	.word	0x3a1cf5c1
 80019f4:	3beb09e6 	.word	0x3beb09e6
 80019f8:	3f09de24 	.word	0x3f09de24
 80019fc:	3bb0e4ed 	.word	0x3bb0e4ed
 8001a00:	3dc39596 	.word	0x3dc39596
 8001a04:	3b35da35 	.word	0x3b35da35
 8001a08:	3ee24051 	.word	0x3ee24051
 8001a0c:	390bb3fd 	.word	0x390bb3fd

08001a10 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001a14:	2200      	movs	r2, #0
 8001a16:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a1a:	4804      	ldr	r0, [pc, #16]	@ (8001a2c <SELECT+0x1c>)
 8001a1c:	f004 fb4c 	bl	80060b8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001a20:	2001      	movs	r0, #1
 8001a22:	f002 ff57 	bl	80048d4 <HAL_Delay>
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40020400 	.word	0x40020400

08001a30 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001a34:	2201      	movs	r2, #1
 8001a36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a3a:	4804      	ldr	r0, [pc, #16]	@ (8001a4c <DESELECT+0x1c>)
 8001a3c:	f004 fb3c 	bl	80060b8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001a40:	2001      	movs	r0, #1
 8001a42:	f002 ff47 	bl	80048d4 <HAL_Delay>
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40020400 	.word	0x40020400

08001a50 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001a5a:	bf00      	nop
 8001a5c:	4b08      	ldr	r3, [pc, #32]	@ (8001a80 <SPI_TxByte+0x30>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d1f8      	bne.n	8001a5c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001a6a:	1df9      	adds	r1, r7, #7
 8001a6c:	2364      	movs	r3, #100	@ 0x64
 8001a6e:	2201      	movs	r2, #1
 8001a70:	4803      	ldr	r0, [pc, #12]	@ (8001a80 <SPI_TxByte+0x30>)
 8001a72:	f008 fd96 	bl	800a5a2 <HAL_SPI_Transmit>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200004b4 	.word	0x200004b4

08001a84 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001a90:	bf00      	nop
 8001a92:	4b08      	ldr	r3, [pc, #32]	@ (8001ab4 <SPI_TxBuffer+0x30>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d1f8      	bne.n	8001a92 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001aa0:	887a      	ldrh	r2, [r7, #2]
 8001aa2:	2364      	movs	r3, #100	@ 0x64
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	4803      	ldr	r0, [pc, #12]	@ (8001ab4 <SPI_TxBuffer+0x30>)
 8001aa8:	f008 fd7b 	bl	800a5a2 <HAL_SPI_Transmit>
}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	200004b4 	.word	0x200004b4

08001ab8 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8001abe:	23ff      	movs	r3, #255	@ 0xff
 8001ac0:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001ac2:	bf00      	nop
 8001ac4:	4b09      	ldr	r3, [pc, #36]	@ (8001aec <SPI_RxByte+0x34>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d1f8      	bne.n	8001ac4 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001ad2:	1dba      	adds	r2, r7, #6
 8001ad4:	1df9      	adds	r1, r7, #7
 8001ad6:	2364      	movs	r3, #100	@ 0x64
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	2301      	movs	r3, #1
 8001adc:	4803      	ldr	r0, [pc, #12]	@ (8001aec <SPI_RxByte+0x34>)
 8001ade:	f008 fe9c 	bl	800a81a <HAL_SPI_TransmitReceive>

	return data;
 8001ae2:	79bb      	ldrb	r3, [r7, #6]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	200004b4 	.word	0x200004b4

08001af0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8001af8:	f7ff ffde 	bl	8001ab8 <SPI_RxByte>
 8001afc:	4603      	mov	r3, r0
 8001afe:	461a      	mov	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	701a      	strb	r2, [r3, #0]
}
 8001b04:	bf00      	nop
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001b12:	4b0a      	ldr	r3, [pc, #40]	@ (8001b3c <SD_ReadyWait+0x30>)
 8001b14:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001b18:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8001b1a:	f7ff ffcd 	bl	8001ab8 <SPI_RxByte>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	2bff      	cmp	r3, #255	@ 0xff
 8001b26:	d003      	beq.n	8001b30 <SD_ReadyWait+0x24>
 8001b28:	4b04      	ldr	r3, [pc, #16]	@ (8001b3c <SD_ReadyWait+0x30>)
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1f4      	bne.n	8001b1a <SD_ReadyWait+0xe>

	return res;
 8001b30:	79fb      	ldrb	r3, [r7, #7]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000210 	.word	0x20000210

08001b40 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001b46:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8001b4a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001b4c:	f7ff ff70 	bl	8001a30 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001b50:	2300      	movs	r3, #0
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	e005      	b.n	8001b62 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001b56:	20ff      	movs	r0, #255	@ 0xff
 8001b58:	f7ff ff7a 	bl	8001a50 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	2b09      	cmp	r3, #9
 8001b66:	ddf6      	ble.n	8001b56 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001b68:	f7ff ff52 	bl	8001a10 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001b6c:	2340      	movs	r3, #64	@ 0x40
 8001b6e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001b80:	2395      	movs	r3, #149	@ 0x95
 8001b82:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001b84:	463b      	mov	r3, r7
 8001b86:	2106      	movs	r1, #6
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ff7b 	bl	8001a84 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001b8e:	e002      	b.n	8001b96 <SD_PowerOn+0x56>
	{
		cnt--;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001b96:	f7ff ff8f 	bl	8001ab8 <SPI_RxByte>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d002      	beq.n	8001ba6 <SD_PowerOn+0x66>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f4      	bne.n	8001b90 <SD_PowerOn+0x50>
	}

	DESELECT();
 8001ba6:	f7ff ff43 	bl	8001a30 <DESELECT>
	SPI_TxByte(0XFF);
 8001baa:	20ff      	movs	r0, #255	@ 0xff
 8001bac:	f7ff ff50 	bl	8001a50 <SPI_TxByte>

	PowerFlag = 1;
 8001bb0:	4b03      	ldr	r3, [pc, #12]	@ (8001bc0 <SD_PowerOn+0x80>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	701a      	strb	r2, [r3, #0]
}
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000213 	.word	0x20000213

08001bc4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001bc8:	4b03      	ldr	r3, [pc, #12]	@ (8001bd8 <SD_PowerOff+0x14>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
}
 8001bce:	bf00      	nop
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	20000213 	.word	0x20000213

08001bdc <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001be0:	4b03      	ldr	r3, [pc, #12]	@ (8001bf0 <SD_CheckPower+0x14>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	20000213 	.word	0x20000213

08001bf4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001bfe:	4b13      	ldr	r3, [pc, #76]	@ (8001c4c <SD_RxDataBlock+0x58>)
 8001c00:	22c8      	movs	r2, #200	@ 0xc8
 8001c02:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001c04:	f7ff ff58 	bl	8001ab8 <SPI_RxByte>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
 8001c0e:	2bff      	cmp	r3, #255	@ 0xff
 8001c10:	d103      	bne.n	8001c1a <SD_RxDataBlock+0x26>
 8001c12:	4b0e      	ldr	r3, [pc, #56]	@ (8001c4c <SD_RxDataBlock+0x58>)
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f4      	bne.n	8001c04 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
 8001c1c:	2bfe      	cmp	r3, #254	@ 0xfe
 8001c1e:	d001      	beq.n	8001c24 <SD_RxDataBlock+0x30>
 8001c20:	2300      	movs	r3, #0
 8001c22:	e00f      	b.n	8001c44 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	1c5a      	adds	r2, r3, #1
 8001c28:	607a      	str	r2, [r7, #4]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff ff60 	bl	8001af0 <SPI_RxBytePtr>
	} while(len--);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	1e5a      	subs	r2, r3, #1
 8001c34:	603a      	str	r2, [r7, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f4      	bne.n	8001c24 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8001c3a:	f7ff ff3d 	bl	8001ab8 <SPI_RxByte>
	SPI_RxByte();
 8001c3e:	f7ff ff3b 	bl	8001ab8 <SPI_RxByte>

	return TRUE;
 8001c42:	2301      	movs	r3, #1
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	2000020e 	.word	0x2000020e

08001c50 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001c60:	f7ff ff54 	bl	8001b0c <SD_ReadyWait>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2bff      	cmp	r3, #255	@ 0xff
 8001c68:	d001      	beq.n	8001c6e <SD_TxDataBlock+0x1e>
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	e02f      	b.n	8001cce <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001c6e:	78fb      	ldrb	r3, [r7, #3]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff feed 	bl	8001a50 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001c76:	78fb      	ldrb	r3, [r7, #3]
 8001c78:	2bfd      	cmp	r3, #253	@ 0xfd
 8001c7a:	d020      	beq.n	8001cbe <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001c7c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff feff 	bl	8001a84 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001c86:	f7ff ff17 	bl	8001ab8 <SPI_RxByte>
		SPI_RxByte();
 8001c8a:	f7ff ff15 	bl	8001ab8 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8001c8e:	e00b      	b.n	8001ca8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001c90:	f7ff ff12 	bl	8001ab8 <SPI_RxByte>
 8001c94:	4603      	mov	r3, r0
 8001c96:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
 8001c9a:	f003 031f 	and.w	r3, r3, #31
 8001c9e:	2b05      	cmp	r3, #5
 8001ca0:	d006      	beq.n	8001cb0 <SD_TxDataBlock+0x60>
			i++;
 8001ca2:	7bbb      	ldrb	r3, [r7, #14]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001ca8:	7bbb      	ldrb	r3, [r7, #14]
 8001caa:	2b40      	cmp	r3, #64	@ 0x40
 8001cac:	d9f0      	bls.n	8001c90 <SD_TxDataBlock+0x40>
 8001cae:	e000      	b.n	8001cb2 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001cb0:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001cb2:	bf00      	nop
 8001cb4:	f7ff ff00 	bl	8001ab8 <SPI_RxByte>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0fa      	beq.n	8001cb4 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001cbe:	7bfb      	ldrb	r3, [r7, #15]
 8001cc0:	f003 031f 	and.w	r3, r3, #31
 8001cc4:	2b05      	cmp	r3, #5
 8001cc6:	d101      	bne.n	8001ccc <SD_TxDataBlock+0x7c>
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e000      	b.n	8001cce <SD_TxDataBlock+0x7e>

	return FALSE;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b084      	sub	sp, #16
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	4603      	mov	r3, r0
 8001cde:	6039      	str	r1, [r7, #0]
 8001ce0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001ce2:	f7ff ff13 	bl	8001b0c <SD_ReadyWait>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2bff      	cmp	r3, #255	@ 0xff
 8001cea:	d001      	beq.n	8001cf0 <SD_SendCmd+0x1a>
 8001cec:	23ff      	movs	r3, #255	@ 0xff
 8001cee:	e042      	b.n	8001d76 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff feac 	bl	8001a50 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	0e1b      	lsrs	r3, r3, #24
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fea6 	bl	8001a50 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	0c1b      	lsrs	r3, r3, #16
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff fea0 	bl	8001a50 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	0a1b      	lsrs	r3, r3, #8
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff fe9a 	bl	8001a50 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff fe95 	bl	8001a50 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	2b40      	cmp	r3, #64	@ 0x40
 8001d2a:	d102      	bne.n	8001d32 <SD_SendCmd+0x5c>
 8001d2c:	2395      	movs	r3, #149	@ 0x95
 8001d2e:	73fb      	strb	r3, [r7, #15]
 8001d30:	e007      	b.n	8001d42 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	2b48      	cmp	r3, #72	@ 0x48
 8001d36:	d102      	bne.n	8001d3e <SD_SendCmd+0x68>
 8001d38:	2387      	movs	r3, #135	@ 0x87
 8001d3a:	73fb      	strb	r3, [r7, #15]
 8001d3c:	e001      	b.n	8001d42 <SD_SendCmd+0x6c>
	else crc = 1;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fe83 	bl	8001a50 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	2b4c      	cmp	r3, #76	@ 0x4c
 8001d4e:	d101      	bne.n	8001d54 <SD_SendCmd+0x7e>
 8001d50:	f7ff feb2 	bl	8001ab8 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001d54:	230a      	movs	r3, #10
 8001d56:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001d58:	f7ff feae 	bl	8001ab8 <SPI_RxByte>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001d60:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	da05      	bge.n	8001d74 <SD_SendCmd+0x9e>
 8001d68:	7bbb      	ldrb	r3, [r7, #14]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	73bb      	strb	r3, [r7, #14]
 8001d6e:	7bbb      	ldrb	r3, [r7, #14]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1f1      	bne.n	8001d58 <SD_SendCmd+0x82>

	return res;
 8001d74:	7b7b      	ldrb	r3, [r7, #13]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001d80:	b590      	push	{r4, r7, lr}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <SD_disk_initialize+0x14>
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0d1      	b.n	8001f38 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001d94:	4b6a      	ldr	r3, [pc, #424]	@ (8001f40 <SD_disk_initialize+0x1c0>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <SD_disk_initialize+0x2a>
 8001da2:	4b67      	ldr	r3, [pc, #412]	@ (8001f40 <SD_disk_initialize+0x1c0>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	e0c6      	b.n	8001f38 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8001daa:	f7ff fec9 	bl	8001b40 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001dae:	f7ff fe2f 	bl	8001a10 <SELECT>

	/* check disk type */
	type = 0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001db6:	2100      	movs	r1, #0
 8001db8:	2040      	movs	r0, #64	@ 0x40
 8001dba:	f7ff ff8c 	bl	8001cd6 <SD_SendCmd>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	f040 80a1 	bne.w	8001f08 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001dc6:	4b5f      	ldr	r3, [pc, #380]	@ (8001f44 <SD_disk_initialize+0x1c4>)
 8001dc8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001dcc:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001dce:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001dd2:	2048      	movs	r0, #72	@ 0x48
 8001dd4:	f7ff ff7f 	bl	8001cd6 <SD_SendCmd>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d155      	bne.n	8001e8a <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001dde:	2300      	movs	r3, #0
 8001de0:	73fb      	strb	r3, [r7, #15]
 8001de2:	e00c      	b.n	8001dfe <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001de4:	7bfc      	ldrb	r4, [r7, #15]
 8001de6:	f7ff fe67 	bl	8001ab8 <SPI_RxByte>
 8001dea:	4603      	mov	r3, r0
 8001dec:	461a      	mov	r2, r3
 8001dee:	f104 0310 	add.w	r3, r4, #16
 8001df2:	443b      	add	r3, r7
 8001df4:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	73fb      	strb	r3, [r7, #15]
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
 8001e00:	2b03      	cmp	r3, #3
 8001e02:	d9ef      	bls.n	8001de4 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001e04:	7abb      	ldrb	r3, [r7, #10]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d17e      	bne.n	8001f08 <SD_disk_initialize+0x188>
 8001e0a:	7afb      	ldrb	r3, [r7, #11]
 8001e0c:	2baa      	cmp	r3, #170	@ 0xaa
 8001e0e:	d17b      	bne.n	8001f08 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001e10:	2100      	movs	r1, #0
 8001e12:	2077      	movs	r0, #119	@ 0x77
 8001e14:	f7ff ff5f 	bl	8001cd6 <SD_SendCmd>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d807      	bhi.n	8001e2e <SD_disk_initialize+0xae>
 8001e1e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001e22:	2069      	movs	r0, #105	@ 0x69
 8001e24:	f7ff ff57 	bl	8001cd6 <SD_SendCmd>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d004      	beq.n	8001e38 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8001e2e:	4b45      	ldr	r3, [pc, #276]	@ (8001f44 <SD_disk_initialize+0x1c4>)
 8001e30:	881b      	ldrh	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1ec      	bne.n	8001e10 <SD_disk_initialize+0x90>
 8001e36:	e000      	b.n	8001e3a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001e38:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001e3a:	4b42      	ldr	r3, [pc, #264]	@ (8001f44 <SD_disk_initialize+0x1c4>)
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d062      	beq.n	8001f08 <SD_disk_initialize+0x188>
 8001e42:	2100      	movs	r1, #0
 8001e44:	207a      	movs	r0, #122	@ 0x7a
 8001e46:	f7ff ff46 	bl	8001cd6 <SD_SendCmd>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d15b      	bne.n	8001f08 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001e50:	2300      	movs	r3, #0
 8001e52:	73fb      	strb	r3, [r7, #15]
 8001e54:	e00c      	b.n	8001e70 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8001e56:	7bfc      	ldrb	r4, [r7, #15]
 8001e58:	f7ff fe2e 	bl	8001ab8 <SPI_RxByte>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	461a      	mov	r2, r3
 8001e60:	f104 0310 	add.w	r3, r4, #16
 8001e64:	443b      	add	r3, r7
 8001e66:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	73fb      	strb	r3, [r7, #15]
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
 8001e72:	2b03      	cmp	r3, #3
 8001e74:	d9ef      	bls.n	8001e56 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001e76:	7a3b      	ldrb	r3, [r7, #8]
 8001e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <SD_disk_initialize+0x104>
 8001e80:	230c      	movs	r3, #12
 8001e82:	e000      	b.n	8001e86 <SD_disk_initialize+0x106>
 8001e84:	2304      	movs	r3, #4
 8001e86:	73bb      	strb	r3, [r7, #14]
 8001e88:	e03e      	b.n	8001f08 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	2077      	movs	r0, #119	@ 0x77
 8001e8e:	f7ff ff22 	bl	8001cd6 <SD_SendCmd>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d808      	bhi.n	8001eaa <SD_disk_initialize+0x12a>
 8001e98:	2100      	movs	r1, #0
 8001e9a:	2069      	movs	r0, #105	@ 0x69
 8001e9c:	f7ff ff1b 	bl	8001cd6 <SD_SendCmd>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d801      	bhi.n	8001eaa <SD_disk_initialize+0x12a>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e000      	b.n	8001eac <SD_disk_initialize+0x12c>
 8001eaa:	2301      	movs	r3, #1
 8001eac:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001eae:	7bbb      	ldrb	r3, [r7, #14]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d10e      	bne.n	8001ed2 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	2077      	movs	r0, #119	@ 0x77
 8001eb8:	f7ff ff0d 	bl	8001cd6 <SD_SendCmd>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d80e      	bhi.n	8001ee0 <SD_disk_initialize+0x160>
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	2069      	movs	r0, #105	@ 0x69
 8001ec6:	f7ff ff06 	bl	8001cd6 <SD_SendCmd>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d107      	bne.n	8001ee0 <SD_disk_initialize+0x160>
 8001ed0:	e00c      	b.n	8001eec <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	2041      	movs	r0, #65	@ 0x41
 8001ed6:	f7ff fefe 	bl	8001cd6 <SD_SendCmd>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d004      	beq.n	8001eea <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001ee0:	4b18      	ldr	r3, [pc, #96]	@ (8001f44 <SD_disk_initialize+0x1c4>)
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1e2      	bne.n	8001eae <SD_disk_initialize+0x12e>
 8001ee8:	e000      	b.n	8001eec <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001eea:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001eec:	4b15      	ldr	r3, [pc, #84]	@ (8001f44 <SD_disk_initialize+0x1c4>)
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d007      	beq.n	8001f04 <SD_disk_initialize+0x184>
 8001ef4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ef8:	2050      	movs	r0, #80	@ 0x50
 8001efa:	f7ff feec 	bl	8001cd6 <SD_SendCmd>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <SD_disk_initialize+0x188>
 8001f04:	2300      	movs	r3, #0
 8001f06:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001f08:	4a0f      	ldr	r2, [pc, #60]	@ (8001f48 <SD_disk_initialize+0x1c8>)
 8001f0a:	7bbb      	ldrb	r3, [r7, #14]
 8001f0c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001f0e:	f7ff fd8f 	bl	8001a30 <DESELECT>
	SPI_RxByte();
 8001f12:	f7ff fdd1 	bl	8001ab8 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001f16:	7bbb      	ldrb	r3, [r7, #14]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d008      	beq.n	8001f2e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001f1c:	4b08      	ldr	r3, [pc, #32]	@ (8001f40 <SD_disk_initialize+0x1c0>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	f023 0301 	bic.w	r3, r3, #1
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	4b05      	ldr	r3, [pc, #20]	@ (8001f40 <SD_disk_initialize+0x1c0>)
 8001f2a:	701a      	strb	r2, [r3, #0]
 8001f2c:	e001      	b.n	8001f32 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001f2e:	f7ff fe49 	bl	8001bc4 <SD_PowerOff>
	}

	return Stat;
 8001f32:	4b03      	ldr	r3, [pc, #12]	@ (8001f40 <SD_disk_initialize+0x1c0>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	b2db      	uxtb	r3, r3
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd90      	pop	{r4, r7, pc}
 8001f40:	20000000 	.word	0x20000000
 8001f44:	2000020e 	.word	0x2000020e
 8001f48:	20000212 	.word	0x20000212

08001f4c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <SD_disk_status+0x14>
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e002      	b.n	8001f66 <SD_disk_status+0x1a>
	return Stat;
 8001f60:	4b04      	ldr	r3, [pc, #16]	@ (8001f74 <SD_disk_status+0x28>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	b2db      	uxtb	r3, r3
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	20000000 	.word	0x20000000

08001f78 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60b9      	str	r1, [r7, #8]
 8001f80:	607a      	str	r2, [r7, #4]
 8001f82:	603b      	str	r3, [r7, #0]
 8001f84:	4603      	mov	r3, r0
 8001f86:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d102      	bne.n	8001f94 <SD_disk_read+0x1c>
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <SD_disk_read+0x20>
 8001f94:	2304      	movs	r3, #4
 8001f96:	e051      	b.n	800203c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001f98:	4b2a      	ldr	r3, [pc, #168]	@ (8002044 <SD_disk_read+0xcc>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <SD_disk_read+0x32>
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e048      	b.n	800203c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001faa:	4b27      	ldr	r3, [pc, #156]	@ (8002048 <SD_disk_read+0xd0>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	f003 0304 	and.w	r3, r3, #4
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d102      	bne.n	8001fbc <SD_disk_read+0x44>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	025b      	lsls	r3, r3, #9
 8001fba:	607b      	str	r3, [r7, #4]

	SELECT();
 8001fbc:	f7ff fd28 	bl	8001a10 <SELECT>

	if (count == 1)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d111      	bne.n	8001fea <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	2051      	movs	r0, #81	@ 0x51
 8001fca:	f7ff fe84 	bl	8001cd6 <SD_SendCmd>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d129      	bne.n	8002028 <SD_disk_read+0xb0>
 8001fd4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001fd8:	68b8      	ldr	r0, [r7, #8]
 8001fda:	f7ff fe0b 	bl	8001bf4 <SD_RxDataBlock>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d021      	beq.n	8002028 <SD_disk_read+0xb0>
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	603b      	str	r3, [r7, #0]
 8001fe8:	e01e      	b.n	8002028 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	2052      	movs	r0, #82	@ 0x52
 8001fee:	f7ff fe72 	bl	8001cd6 <SD_SendCmd>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d117      	bne.n	8002028 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001ff8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ffc:	68b8      	ldr	r0, [r7, #8]
 8001ffe:	f7ff fdf9 	bl	8001bf4 <SD_RxDataBlock>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00a      	beq.n	800201e <SD_disk_read+0xa6>
				buff += 512;
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800200e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	3b01      	subs	r3, #1
 8002014:	603b      	str	r3, [r7, #0]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1ed      	bne.n	8001ff8 <SD_disk_read+0x80>
 800201c:	e000      	b.n	8002020 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800201e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8002020:	2100      	movs	r1, #0
 8002022:	204c      	movs	r0, #76	@ 0x4c
 8002024:	f7ff fe57 	bl	8001cd6 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8002028:	f7ff fd02 	bl	8001a30 <DESELECT>
	SPI_RxByte();
 800202c:	f7ff fd44 	bl	8001ab8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	bf14      	ite	ne
 8002036:	2301      	movne	r3, #1
 8002038:	2300      	moveq	r3, #0
 800203a:	b2db      	uxtb	r3, r3
}
 800203c:	4618      	mov	r0, r3
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20000000 	.word	0x20000000
 8002048:	20000212 	.word	0x20000212

0800204c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
 8002056:	603b      	str	r3, [r7, #0]
 8002058:	4603      	mov	r3, r0
 800205a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800205c:	7bfb      	ldrb	r3, [r7, #15]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d102      	bne.n	8002068 <SD_disk_write+0x1c>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <SD_disk_write+0x20>
 8002068:	2304      	movs	r3, #4
 800206a:	e06b      	b.n	8002144 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800206c:	4b37      	ldr	r3, [pc, #220]	@ (800214c <SD_disk_write+0x100>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	b2db      	uxtb	r3, r3
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <SD_disk_write+0x32>
 800207a:	2303      	movs	r3, #3
 800207c:	e062      	b.n	8002144 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800207e:	4b33      	ldr	r3, [pc, #204]	@ (800214c <SD_disk_write+0x100>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	b2db      	uxtb	r3, r3
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <SD_disk_write+0x44>
 800208c:	2302      	movs	r3, #2
 800208e:	e059      	b.n	8002144 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8002090:	4b2f      	ldr	r3, [pc, #188]	@ (8002150 <SD_disk_write+0x104>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d102      	bne.n	80020a2 <SD_disk_write+0x56>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	025b      	lsls	r3, r3, #9
 80020a0:	607b      	str	r3, [r7, #4]

	SELECT();
 80020a2:	f7ff fcb5 	bl	8001a10 <SELECT>

	if (count == 1)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d110      	bne.n	80020ce <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	2058      	movs	r0, #88	@ 0x58
 80020b0:	f7ff fe11 	bl	8001cd6 <SD_SendCmd>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d13a      	bne.n	8002130 <SD_disk_write+0xe4>
 80020ba:	21fe      	movs	r1, #254	@ 0xfe
 80020bc:	68b8      	ldr	r0, [r7, #8]
 80020be:	f7ff fdc7 	bl	8001c50 <SD_TxDataBlock>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d033      	beq.n	8002130 <SD_disk_write+0xe4>
			count = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	603b      	str	r3, [r7, #0]
 80020cc:	e030      	b.n	8002130 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80020ce:	4b20      	ldr	r3, [pc, #128]	@ (8002150 <SD_disk_write+0x104>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d007      	beq.n	80020ea <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80020da:	2100      	movs	r1, #0
 80020dc:	2077      	movs	r0, #119	@ 0x77
 80020de:	f7ff fdfa 	bl	8001cd6 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80020e2:	6839      	ldr	r1, [r7, #0]
 80020e4:	2057      	movs	r0, #87	@ 0x57
 80020e6:	f7ff fdf6 	bl	8001cd6 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	2059      	movs	r0, #89	@ 0x59
 80020ee:	f7ff fdf2 	bl	8001cd6 <SD_SendCmd>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d11b      	bne.n	8002130 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80020f8:	21fc      	movs	r1, #252	@ 0xfc
 80020fa:	68b8      	ldr	r0, [r7, #8]
 80020fc:	f7ff fda8 	bl	8001c50 <SD_TxDataBlock>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00a      	beq.n	800211c <SD_disk_write+0xd0>
				buff += 512;
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800210c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	3b01      	subs	r3, #1
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1ee      	bne.n	80020f8 <SD_disk_write+0xac>
 800211a:	e000      	b.n	800211e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800211c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800211e:	21fd      	movs	r1, #253	@ 0xfd
 8002120:	2000      	movs	r0, #0
 8002122:	f7ff fd95 	bl	8001c50 <SD_TxDataBlock>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <SD_disk_write+0xe4>
			{
				count = 1;
 800212c:	2301      	movs	r3, #1
 800212e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8002130:	f7ff fc7e 	bl	8001a30 <DESELECT>
	SPI_RxByte();
 8002134:	f7ff fcc0 	bl	8001ab8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	bf14      	ite	ne
 800213e:	2301      	movne	r3, #1
 8002140:	2300      	moveq	r3, #0
 8002142:	b2db      	uxtb	r3, r3
}
 8002144:	4618      	mov	r0, r3
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20000000 	.word	0x20000000
 8002150:	20000212 	.word	0x20000212

08002154 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8002154:	b590      	push	{r4, r7, lr}
 8002156:	b08b      	sub	sp, #44	@ 0x2c
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	603a      	str	r2, [r7, #0]
 800215e:	71fb      	strb	r3, [r7, #7]
 8002160:	460b      	mov	r3, r1
 8002162:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <SD_disk_ioctl+0x1e>
 800216e:	2304      	movs	r3, #4
 8002170:	e113      	b.n	800239a <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8002178:	79bb      	ldrb	r3, [r7, #6]
 800217a:	2b05      	cmp	r3, #5
 800217c:	d124      	bne.n	80021c8 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800217e:	6a3b      	ldr	r3, [r7, #32]
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b02      	cmp	r3, #2
 8002184:	d012      	beq.n	80021ac <SD_disk_ioctl+0x58>
 8002186:	2b02      	cmp	r3, #2
 8002188:	dc1a      	bgt.n	80021c0 <SD_disk_ioctl+0x6c>
 800218a:	2b00      	cmp	r3, #0
 800218c:	d002      	beq.n	8002194 <SD_disk_ioctl+0x40>
 800218e:	2b01      	cmp	r3, #1
 8002190:	d006      	beq.n	80021a0 <SD_disk_ioctl+0x4c>
 8002192:	e015      	b.n	80021c0 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8002194:	f7ff fd16 	bl	8001bc4 <SD_PowerOff>
			res = RES_OK;
 8002198:	2300      	movs	r3, #0
 800219a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800219e:	e0fa      	b.n	8002396 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 80021a0:	f7ff fcce 	bl	8001b40 <SD_PowerOn>
			res = RES_OK;
 80021a4:	2300      	movs	r3, #0
 80021a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80021aa:	e0f4      	b.n	8002396 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80021ac:	6a3b      	ldr	r3, [r7, #32]
 80021ae:	1c5c      	adds	r4, r3, #1
 80021b0:	f7ff fd14 	bl	8001bdc <SD_CheckPower>
 80021b4:	4603      	mov	r3, r0
 80021b6:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80021b8:	2300      	movs	r3, #0
 80021ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80021be:	e0ea      	b.n	8002396 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 80021c0:	2304      	movs	r3, #4
 80021c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80021c6:	e0e6      	b.n	8002396 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80021c8:	4b76      	ldr	r3, [pc, #472]	@ (80023a4 <SD_disk_ioctl+0x250>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <SD_disk_ioctl+0x86>
 80021d6:	2303      	movs	r3, #3
 80021d8:	e0df      	b.n	800239a <SD_disk_ioctl+0x246>

		SELECT();
 80021da:	f7ff fc19 	bl	8001a10 <SELECT>

		switch (ctrl)
 80021de:	79bb      	ldrb	r3, [r7, #6]
 80021e0:	2b0d      	cmp	r3, #13
 80021e2:	f200 80c9 	bhi.w	8002378 <SD_disk_ioctl+0x224>
 80021e6:	a201      	add	r2, pc, #4	@ (adr r2, 80021ec <SD_disk_ioctl+0x98>)
 80021e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ec:	080022e3 	.word	0x080022e3
 80021f0:	08002225 	.word	0x08002225
 80021f4:	080022d3 	.word	0x080022d3
 80021f8:	08002379 	.word	0x08002379
 80021fc:	08002379 	.word	0x08002379
 8002200:	08002379 	.word	0x08002379
 8002204:	08002379 	.word	0x08002379
 8002208:	08002379 	.word	0x08002379
 800220c:	08002379 	.word	0x08002379
 8002210:	08002379 	.word	0x08002379
 8002214:	08002379 	.word	0x08002379
 8002218:	080022f5 	.word	0x080022f5
 800221c:	08002319 	.word	0x08002319
 8002220:	0800233d 	.word	0x0800233d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002224:	2100      	movs	r1, #0
 8002226:	2049      	movs	r0, #73	@ 0x49
 8002228:	f7ff fd55 	bl	8001cd6 <SD_SendCmd>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	f040 80a6 	bne.w	8002380 <SD_disk_ioctl+0x22c>
 8002234:	f107 030c 	add.w	r3, r7, #12
 8002238:	2110      	movs	r1, #16
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff fcda 	bl	8001bf4 <SD_RxDataBlock>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 809c 	beq.w	8002380 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8002248:	7b3b      	ldrb	r3, [r7, #12]
 800224a:	099b      	lsrs	r3, r3, #6
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b01      	cmp	r3, #1
 8002250:	d10d      	bne.n	800226e <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002252:	7d7b      	ldrb	r3, [r7, #21]
 8002254:	461a      	mov	r2, r3
 8002256:	7d3b      	ldrb	r3, [r7, #20]
 8002258:	021b      	lsls	r3, r3, #8
 800225a:	b29b      	uxth	r3, r3
 800225c:	4413      	add	r3, r2
 800225e:	b29b      	uxth	r3, r3
 8002260:	3301      	adds	r3, #1
 8002262:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8002264:	8bfb      	ldrh	r3, [r7, #30]
 8002266:	029a      	lsls	r2, r3, #10
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	e02d      	b.n	80022ca <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800226e:	7c7b      	ldrb	r3, [r7, #17]
 8002270:	f003 030f 	and.w	r3, r3, #15
 8002274:	b2da      	uxtb	r2, r3
 8002276:	7dbb      	ldrb	r3, [r7, #22]
 8002278:	09db      	lsrs	r3, r3, #7
 800227a:	b2db      	uxtb	r3, r3
 800227c:	4413      	add	r3, r2
 800227e:	b2da      	uxtb	r2, r3
 8002280:	7d7b      	ldrb	r3, [r7, #21]
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	b2db      	uxtb	r3, r3
 8002286:	f003 0306 	and.w	r3, r3, #6
 800228a:	b2db      	uxtb	r3, r3
 800228c:	4413      	add	r3, r2
 800228e:	b2db      	uxtb	r3, r3
 8002290:	3302      	adds	r3, #2
 8002292:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002296:	7d3b      	ldrb	r3, [r7, #20]
 8002298:	099b      	lsrs	r3, r3, #6
 800229a:	b2db      	uxtb	r3, r3
 800229c:	461a      	mov	r2, r3
 800229e:	7cfb      	ldrb	r3, [r7, #19]
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	4413      	add	r3, r2
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	7cbb      	ldrb	r3, [r7, #18]
 80022aa:	029b      	lsls	r3, r3, #10
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	4413      	add	r3, r2
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	3301      	adds	r3, #1
 80022ba:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80022bc:	8bfa      	ldrh	r2, [r7, #30]
 80022be:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80022c2:	3b09      	subs	r3, #9
 80022c4:	409a      	lsls	r2, r3
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80022ca:	2300      	movs	r3, #0
 80022cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 80022d0:	e056      	b.n	8002380 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022d8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80022da:	2300      	movs	r3, #0
 80022dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80022e0:	e055      	b.n	800238e <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80022e2:	f7ff fc13 	bl	8001b0c <SD_ReadyWait>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2bff      	cmp	r3, #255	@ 0xff
 80022ea:	d14b      	bne.n	8002384 <SD_disk_ioctl+0x230>
 80022ec:	2300      	movs	r3, #0
 80022ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80022f2:	e047      	b.n	8002384 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80022f4:	2100      	movs	r1, #0
 80022f6:	2049      	movs	r0, #73	@ 0x49
 80022f8:	f7ff fced 	bl	8001cd6 <SD_SendCmd>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d142      	bne.n	8002388 <SD_disk_ioctl+0x234>
 8002302:	2110      	movs	r1, #16
 8002304:	6a38      	ldr	r0, [r7, #32]
 8002306:	f7ff fc75 	bl	8001bf4 <SD_RxDataBlock>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d03b      	beq.n	8002388 <SD_disk_ioctl+0x234>
 8002310:	2300      	movs	r3, #0
 8002312:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002316:	e037      	b.n	8002388 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002318:	2100      	movs	r1, #0
 800231a:	204a      	movs	r0, #74	@ 0x4a
 800231c:	f7ff fcdb 	bl	8001cd6 <SD_SendCmd>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d132      	bne.n	800238c <SD_disk_ioctl+0x238>
 8002326:	2110      	movs	r1, #16
 8002328:	6a38      	ldr	r0, [r7, #32]
 800232a:	f7ff fc63 	bl	8001bf4 <SD_RxDataBlock>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d02b      	beq.n	800238c <SD_disk_ioctl+0x238>
 8002334:	2300      	movs	r3, #0
 8002336:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800233a:	e027      	b.n	800238c <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800233c:	2100      	movs	r1, #0
 800233e:	207a      	movs	r0, #122	@ 0x7a
 8002340:	f7ff fcc9 	bl	8001cd6 <SD_SendCmd>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d116      	bne.n	8002378 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 800234a:	2300      	movs	r3, #0
 800234c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002350:	e00b      	b.n	800236a <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8002352:	6a3c      	ldr	r4, [r7, #32]
 8002354:	1c63      	adds	r3, r4, #1
 8002356:	623b      	str	r3, [r7, #32]
 8002358:	f7ff fbae 	bl	8001ab8 <SPI_RxByte>
 800235c:	4603      	mov	r3, r0
 800235e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8002360:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002364:	3301      	adds	r3, #1
 8002366:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800236a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800236e:	2b03      	cmp	r3, #3
 8002370:	d9ef      	bls.n	8002352 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8002372:	2300      	movs	r3, #0
 8002374:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8002378:	2304      	movs	r3, #4
 800237a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800237e:	e006      	b.n	800238e <SD_disk_ioctl+0x23a>
			break;
 8002380:	bf00      	nop
 8002382:	e004      	b.n	800238e <SD_disk_ioctl+0x23a>
			break;
 8002384:	bf00      	nop
 8002386:	e002      	b.n	800238e <SD_disk_ioctl+0x23a>
			break;
 8002388:	bf00      	nop
 800238a:	e000      	b.n	800238e <SD_disk_ioctl+0x23a>
			break;
 800238c:	bf00      	nop
		}

		DESELECT();
 800238e:	f7ff fb4f 	bl	8001a30 <DESELECT>
		SPI_RxByte();
 8002392:	f7ff fb91 	bl	8001ab8 <SPI_RxByte>
	}

	return res;
 8002396:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800239a:	4618      	mov	r0, r3
 800239c:	372c      	adds	r7, #44	@ 0x2c
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd90      	pop	{r4, r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000000 	.word	0x20000000

080023a8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4a07      	ldr	r2, [pc, #28]	@ (80023d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80023b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	4a06      	ldr	r2, [pc, #24]	@ (80023d8 <vApplicationGetIdleTaskMemory+0x30>)
 80023be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2280      	movs	r2, #128	@ 0x80
 80023c4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80023c6:	bf00      	nop
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	20000214 	.word	0x20000214
 80023d8:	200002b4 	.word	0x200002b4

080023dc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80023e4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80023e8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d013      	beq.n	800241c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80023f4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80023f8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80023fc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00b      	beq.n	800241c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002404:	e000      	b.n	8002408 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002406:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002408:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0f9      	beq.n	8002406 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002412:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800241c:	687b      	ldr	r3, [r7, #4]
}
 800241e:	4618      	mov	r0, r3
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
	...

0800242c <HAL_GPIO_EXTI_Callback>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin==INT_MPU6050_Pin) //interrupt called at 1kHz
 8002436:	88fb      	ldrh	r3, [r7, #6]
 8002438:	2b02      	cmp	r3, #2
 800243a:	d113      	bne.n	8002464 <HAL_GPIO_EXTI_Callback+0x38>
	{
		mpuIntCount=mpuIntCount+1;
 800243c:	4b0b      	ldr	r3, [pc, #44]	@ (800246c <HAL_GPIO_EXTI_Callback+0x40>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	3301      	adds	r3, #1
 8002442:	b2da      	uxtb	r2, r3
 8002444:	4b09      	ldr	r3, [pc, #36]	@ (800246c <HAL_GPIO_EXTI_Callback+0x40>)
 8002446:	701a      	strb	r2, [r3, #0]
		if(mpuIntCount==20){ // downsample MPU6050 data at 50 Hz
 8002448:	4b08      	ldr	r3, [pc, #32]	@ (800246c <HAL_GPIO_EXTI_Callback+0x40>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b14      	cmp	r3, #20
 800244e:	d109      	bne.n	8002464 <HAL_GPIO_EXTI_Callback+0x38>
			message=MPU6050readDataDMA(&mpu6050);
 8002450:	4807      	ldr	r0, [pc, #28]	@ (8002470 <HAL_GPIO_EXTI_Callback+0x44>)
 8002452:	f7ff f9b7 	bl	80017c4 <MPU6050readDataDMA>
 8002456:	4603      	mov	r3, r0
 8002458:	461a      	mov	r2, r3
 800245a:	4b06      	ldr	r3, [pc, #24]	@ (8002474 <HAL_GPIO_EXTI_Callback+0x48>)
 800245c:	701a      	strb	r2, [r3, #0]
			//printf("error message: %i\r\n:",message);
			mpuIntCount=0;
 800245e:	4b03      	ldr	r3, [pc, #12]	@ (800246c <HAL_GPIO_EXTI_Callback+0x40>)
 8002460:	2200      	movs	r2, #0
 8002462:	701a      	strb	r2, [r3, #0]
			//mpu6050.numCalibrationMeas=mpu6050.numCalibrationMeas+1;
		}
	}
}
 8002464:	bf00      	nop
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	20002b99 	.word	0x20002b99
 8002470:	20002b1c 	.word	0x20002b1c
 8002474:	20002b98 	.word	0x20002b98

08002478 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef* hi2c)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance==mpu6050.i2cHandle->Instance)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4b07      	ldr	r3, [pc, #28]	@ (80024a4 <HAL_I2C_MemRxCpltCallback+0x2c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d106      	bne.n	800249c <HAL_I2C_MemRxCpltCallback+0x24>
	{
		mpu6050.rxFlag=0;
 800248e:	4b05      	ldr	r3, [pc, #20]	@ (80024a4 <HAL_I2C_MemRxCpltCallback+0x2c>)
 8002490:	2200      	movs	r2, #0
 8002492:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		MPU6050convertRawData(&mpu6050);
 8002496:	4803      	ldr	r0, [pc, #12]	@ (80024a4 <HAL_I2C_MemRxCpltCallback+0x2c>)
 8002498:	f7ff f9be 	bl	8001818 <MPU6050convertRawData>
		//MPU6050filterRawData(&mpu6050);

	}

}
 800249c:	bf00      	nop
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20002b1c 	.word	0x20002b1c

080024a8 <HAL_ADC_ConvCpltCallback>:
	uint8_t len=strlen(string);
	HAL_UART_Transmit(&huart2,(uint8_t*)string,len,200);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
	if(hadc->Instance==ADC1){
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a2e      	ldr	r2, [pc, #184]	@ (8002570 <HAL_ADC_ConvCpltCallback+0xc8>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d124      	bne.n	8002504 <HAL_ADC_ConvCpltCallback+0x5c>
		joystick.joystickData[0]=adc1Data;
 80024ba:	4b2e      	ldr	r3, [pc, #184]	@ (8002574 <HAL_ADC_ConvCpltCallback+0xcc>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a2e      	ldr	r2, [pc, #184]	@ (8002578 <HAL_ADC_ConvCpltCallback+0xd0>)
 80024c0:	6013      	str	r3, [r2, #0]
		joystick.joystickVoltage[0]=(float)joystick.joystickData[0]*3.3/4095.0f;
 80024c2:	4b2d      	ldr	r3, [pc, #180]	@ (8002578 <HAL_ADC_ConvCpltCallback+0xd0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	ee07 3a90 	vmov	s15, r3
 80024ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024ce:	ee17 0a90 	vmov	r0, s15
 80024d2:	f7fe f859 	bl	8000588 <__aeabi_f2d>
 80024d6:	a322      	add	r3, pc, #136	@ (adr r3, 8002560 <HAL_ADC_ConvCpltCallback+0xb8>)
 80024d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024dc:	f7fe f8ac 	bl	8000638 <__aeabi_dmul>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	4610      	mov	r0, r2
 80024e6:	4619      	mov	r1, r3
 80024e8:	a31f      	add	r3, pc, #124	@ (adr r3, 8002568 <HAL_ADC_ConvCpltCallback+0xc0>)
 80024ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ee:	f7fe f9cd 	bl	800088c <__aeabi_ddiv>
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	4610      	mov	r0, r2
 80024f8:	4619      	mov	r1, r3
 80024fa:	f7fe fb75 	bl	8000be8 <__aeabi_d2f>
 80024fe:	4603      	mov	r3, r0
 8002500:	4a1d      	ldr	r2, [pc, #116]	@ (8002578 <HAL_ADC_ConvCpltCallback+0xd0>)
 8002502:	6093      	str	r3, [r2, #8]

	}
	if(hadc->Instance==ADC2){
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a1c      	ldr	r2, [pc, #112]	@ (800257c <HAL_ADC_ConvCpltCallback+0xd4>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d124      	bne.n	8002558 <HAL_ADC_ConvCpltCallback+0xb0>
		joystick.joystickData[1]=adc2Data;
 800250e:	4b1c      	ldr	r3, [pc, #112]	@ (8002580 <HAL_ADC_ConvCpltCallback+0xd8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a19      	ldr	r2, [pc, #100]	@ (8002578 <HAL_ADC_ConvCpltCallback+0xd0>)
 8002514:	6053      	str	r3, [r2, #4]
		joystick.joystickVoltage[1]=(float)joystick.joystickData[1]*3.3/4095.0f;
 8002516:	4b18      	ldr	r3, [pc, #96]	@ (8002578 <HAL_ADC_ConvCpltCallback+0xd0>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	ee07 3a90 	vmov	s15, r3
 800251e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002522:	ee17 0a90 	vmov	r0, s15
 8002526:	f7fe f82f 	bl	8000588 <__aeabi_f2d>
 800252a:	a30d      	add	r3, pc, #52	@ (adr r3, 8002560 <HAL_ADC_ConvCpltCallback+0xb8>)
 800252c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002530:	f7fe f882 	bl	8000638 <__aeabi_dmul>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	4610      	mov	r0, r2
 800253a:	4619      	mov	r1, r3
 800253c:	a30a      	add	r3, pc, #40	@ (adr r3, 8002568 <HAL_ADC_ConvCpltCallback+0xc0>)
 800253e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002542:	f7fe f9a3 	bl	800088c <__aeabi_ddiv>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	4610      	mov	r0, r2
 800254c:	4619      	mov	r1, r3
 800254e:	f7fe fb4b 	bl	8000be8 <__aeabi_d2f>
 8002552:	4603      	mov	r3, r0
 8002554:	4a08      	ldr	r2, [pc, #32]	@ (8002578 <HAL_ADC_ConvCpltCallback+0xd0>)
 8002556:	60d3      	str	r3, [r2, #12]

	}
}
 8002558:	bf00      	nop
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	66666666 	.word	0x66666666
 8002564:	400a6666 	.word	0x400a6666
 8002568:	00000000 	.word	0x00000000
 800256c:	40affe00 	.word	0x40affe00
 8002570:	40012000 	.word	0x40012000
 8002574:	20002b14 	.word	0x20002b14
 8002578:	20002b04 	.word	0x20002b04
 800257c:	40012100 	.word	0x40012100
 8002580:	20002b18 	.word	0x20002b18

08002584 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]


}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]


}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <_write>:

int _write(int file, char *ptr, int len)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	e009      	b.n	80025d2 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	1c5a      	adds	r2, r3, #1
 80025c2:	60ba      	str	r2, [r7, #8]
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff ff08 	bl	80023dc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	3301      	adds	r3, #1
 80025d0:	617b      	str	r3, [r7, #20]
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	dbf1      	blt.n	80025be <_write+0x12>
  }
  return len;
 80025da:	687b      	ldr	r3, [r7, #4]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3718      	adds	r7, #24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025e4:	b5b0      	push	{r4, r5, r7, lr}
 80025e6:	b0b0      	sub	sp, #192	@ 0xc0
 80025e8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025ea:	f002 f931 	bl	8004850 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025ee:	f000 f939 	bl	8002864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025f2:	f000 fd1f 	bl	8003034 <MX_GPIO_Init>
  MX_DMA_Init();
 80025f6:	f000 fcbf 	bl	8002f78 <MX_DMA_Init>
  MX_ADC1_Init();
 80025fa:	f000 f99f 	bl	800293c <MX_ADC1_Init>
  MX_I2C1_Init();
 80025fe:	f000 fa41 	bl	8002a84 <MX_I2C1_Init>
  MX_TIM3_Init();
 8002602:	f000 fb45 	bl	8002c90 <MX_TIM3_Init>
  MX_I2C2_Init();
 8002606:	f000 fa6b 	bl	8002ae0 <MX_I2C2_Init>
  MX_SPI2_Init();
 800260a:	f000 fa97 	bl	8002b3c <MX_SPI2_Init>
  MX_FATFS_Init();
 800260e:	f00a fcb3 	bl	800cf78 <MX_FATFS_Init>
  MX_TIM2_Init();
 8002612:	f000 fac9 	bl	8002ba8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8002616:	f000 fc53 	bl	8002ec0 <MX_USART2_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 800261a:	f000 fca5 	bl	8002f68 <MX_USB_OTG_FS_USB_Init>
  MX_USART3_UART_Init();
 800261e:	f000 fc79 	bl	8002f14 <MX_USART3_UART_Init>
  MX_ADC2_Init();
 8002622:	f000 f9dd 	bl	80029e0 <MX_ADC2_Init>
  MX_TIM8_Init();
 8002626:	f000 fbad 	bl	8002d84 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  // Start servo PWM ( pulse duration from 0.9ms to 2.1ms with 1.5 as center ) duty cycle varies from 4.5% to 7.5%
  //( CCR can go from 425 to 1175 )
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 800262a:	2100      	movs	r1, #0
 800262c:	4873      	ldr	r0, [pc, #460]	@ (80027fc <main+0x218>)
 800262e:	f008 fcd9 	bl	800afe4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8002632:	2104      	movs	r1, #4
 8002634:	4871      	ldr	r0, [pc, #452]	@ (80027fc <main+0x218>)
 8002636:	f008 fcd5 	bl	800afe4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 800263a:	2108      	movs	r1, #8
 800263c:	486f      	ldr	r0, [pc, #444]	@ (80027fc <main+0x218>)
 800263e:	f008 fcd1 	bl	800afe4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 8002642:	210c      	movs	r1, #12
 8002644:	486d      	ldr	r0, [pc, #436]	@ (80027fc <main+0x218>)
 8002646:	f008 fccd 	bl	800afe4 <HAL_TIM_PWM_Start>

  htim3.Instance->CCR1=SERVO_CENTER_PWM;
 800264a:	4b6c      	ldr	r3, [pc, #432]	@ (80027fc <main+0x218>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8002652:	635a      	str	r2, [r3, #52]	@ 0x34
  htim3.Instance->CCR2=SERVO_CENTER_PWM;
 8002654:	4b69      	ldr	r3, [pc, #420]	@ (80027fc <main+0x218>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800265c:	639a      	str	r2, [r3, #56]	@ 0x38
  htim3.Instance->CCR3=SERVO_CENTER_PWM;
 800265e:	4b67      	ldr	r3, [pc, #412]	@ (80027fc <main+0x218>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8002666:	63da      	str	r2, [r3, #60]	@ 0x3c
  htim3.Instance->CCR4=SERVO_CENTER_PWM;
 8002668:	4b64      	ldr	r3, [pc, #400]	@ (80027fc <main+0x218>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8002670:	641a      	str	r2, [r3, #64]	@ 0x40



  // Start DMA streams

  HAL_ADC_Start_DMA(&hadc1,&adc1Data,1);
 8002672:	2201      	movs	r2, #1
 8002674:	4962      	ldr	r1, [pc, #392]	@ (8002800 <main+0x21c>)
 8002676:	4863      	ldr	r0, [pc, #396]	@ (8002804 <main+0x220>)
 8002678:	f002 faa4 	bl	8004bc4 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2,&adc2Data,1);
 800267c:	2201      	movs	r2, #1
 800267e:	4962      	ldr	r1, [pc, #392]	@ (8002808 <main+0x224>)
 8002680:	4862      	ldr	r0, [pc, #392]	@ (800280c <main+0x228>)
 8002682:	f002 fa9f 	bl	8004bc4 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim2);
 8002686:	4862      	ldr	r0, [pc, #392]	@ (8002810 <main+0x22c>)
 8002688:	f008 fb84 	bl	800ad94 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim8);
 800268c:	4861      	ldr	r0, [pc, #388]	@ (8002814 <main+0x230>)
 800268e:	f008 fb81 	bl	800ad94 <HAL_TIM_Base_Start>


  // sensor initialization
  uint8_t deviceReady;
  deviceReady=checkMPU6050Ready();
 8002692:	f7fe ffc1 	bl	8001618 <checkMPU6050Ready>
 8002696:	4603      	mov	r3, r0
 8002698:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
  uint8_t configGood=MPU6050init(&mpu6050,&hi2c1);
 800269c:	495e      	ldr	r1, [pc, #376]	@ (8002818 <main+0x234>)
 800269e:	485f      	ldr	r0, [pc, #380]	@ (800281c <main+0x238>)
 80026a0:	f7fe ffee 	bl	8001680 <MPU6050init>
 80026a4:	4603      	mov	r3, r0
 80026a6:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
  uint8_t rec;
  HAL_StatusTypeDef stat;
  stat=HAL_I2C_Mem_Read (&hi2c1,MPU6050ADDR,WHO_AM_I_REG,I2C_MEMADD_SIZE_8BIT,&rec,1,100);
 80026aa:	2364      	movs	r3, #100	@ 0x64
 80026ac:	9302      	str	r3, [sp, #8]
 80026ae:	2301      	movs	r3, #1
 80026b0:	9301      	str	r3, [sp, #4]
 80026b2:	f107 03ab 	add.w	r3, r7, #171	@ 0xab
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	2301      	movs	r3, #1
 80026ba:	2275      	movs	r2, #117	@ 0x75
 80026bc:	21d0      	movs	r1, #208	@ 0xd0
 80026be:	4856      	ldr	r0, [pc, #344]	@ (8002818 <main+0x234>)
 80026c0:	f004 fa8e 	bl	8006be0 <HAL_I2C_Mem_Read>
 80026c4:	4603      	mov	r3, r0
 80026c6:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
  Bar30init(&pressureSensor, &hi2c2);
 80026ca:	4955      	ldr	r1, [pc, #340]	@ (8002820 <main+0x23c>)
 80026cc:	4855      	ldr	r0, [pc, #340]	@ (8002824 <main+0x240>)
 80026ce:	f7fe fc53 	bl	8000f78 <Bar30init>
  uint8_t i2cGood=0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	f887 30ac 	strb.w	r3, [r7, #172]	@ 0xac
  i2cGood=Bar30reset(&pressureSensor);
 80026d8:	4852      	ldr	r0, [pc, #328]	@ (8002824 <main+0x240>)
 80026da:	f7fe fc81 	bl	8000fe0 <Bar30reset>
 80026de:	4603      	mov	r3, r0
 80026e0:	f887 30ac 	strb.w	r3, [r7, #172]	@ 0xac
  printf("Reset Command Result : %i\r\n",i2cGood );
 80026e4:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 80026e8:	4619      	mov	r1, r3
 80026ea:	484f      	ldr	r0, [pc, #316]	@ (8002828 <main+0x244>)
 80026ec:	f011 f8b6 	bl	801385c <iprintf>
  i2cGood=Bar30getCalibration(&pressureSensor);
 80026f0:	484c      	ldr	r0, [pc, #304]	@ (8002824 <main+0x240>)
 80026f2:	f7fe fc9b 	bl	800102c <Bar30getCalibration>
 80026f6:	4603      	mov	r3, r0
 80026f8:	f887 30ac 	strb.w	r3, [r7, #172]	@ 0xac
  printf("Calibration phase result : %i\r\n",i2cGood );
 80026fc:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 8002700:	4619      	mov	r1, r3
 8002702:	484a      	ldr	r0, [pc, #296]	@ (800282c <main+0x248>)
 8002704:	f011 f8aa 	bl	801385c <iprintf>
  i2cGood=Bar30CRCcheck(pressureSensor.calibrationResult);
 8002708:	4849      	ldr	r0, [pc, #292]	@ (8002830 <main+0x24c>)
 800270a:	f7fe fdf7 	bl	80012fc <Bar30CRCcheck>
 800270e:	4603      	mov	r3, r0
 8002710:	f887 30ac 	strb.w	r3, [r7, #172]	@ 0xac
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of DefaultTask */
  osThreadDef(DefaultTask, defaultTask, osPriorityIdle, 0, 128);
 8002714:	4b47      	ldr	r3, [pc, #284]	@ (8002834 <main+0x250>)
 8002716:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 800271a:	461d      	mov	r5, r3
 800271c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800271e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002720:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002724:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DefaultTaskHandle = osThreadCreate(osThread(DefaultTask), NULL);
 8002728:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800272c:	2100      	movs	r1, #0
 800272e:	4618      	mov	r0, r3
 8002730:	f00d ff4f 	bl	80105d2 <osThreadCreate>
 8002734:	4603      	mov	r3, r0
 8002736:	4a40      	ldr	r2, [pc, #256]	@ (8002838 <main+0x254>)
 8002738:	6013      	str	r3, [r2, #0]

  /* definition and creation of LEDscreenTask */
  osThreadDef(LEDscreenTask, sendDataToScreen, osPriorityNormal, 0, 512);
 800273a:	4b40      	ldr	r3, [pc, #256]	@ (800283c <main+0x258>)
 800273c:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8002740:	461d      	mov	r5, r3
 8002742:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002744:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002746:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800274a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LEDscreenTaskHandle = osThreadCreate(osThread(LEDscreenTask), NULL);
 800274e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002752:	2100      	movs	r1, #0
 8002754:	4618      	mov	r0, r3
 8002756:	f00d ff3c 	bl	80105d2 <osThreadCreate>
 800275a:	4603      	mov	r3, r0
 800275c:	4a38      	ldr	r2, [pc, #224]	@ (8002840 <main+0x25c>)
 800275e:	6013      	str	r3, [r2, #0]

  /* definition and creation of controlLoopTask */
  osThreadDef(controlLoopTask, updateControlLoop, osPriorityHigh, 0, 128);
 8002760:	4b38      	ldr	r3, [pc, #224]	@ (8002844 <main+0x260>)
 8002762:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8002766:	461d      	mov	r5, r3
 8002768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800276a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800276c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002770:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  controlLoopTaskHandle = osThreadCreate(osThread(controlLoopTask), NULL);
 8002774:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002778:	2100      	movs	r1, #0
 800277a:	4618      	mov	r0, r3
 800277c:	f00d ff29 	bl	80105d2 <osThreadCreate>
 8002780:	4603      	mov	r3, r0
 8002782:	4a31      	ldr	r2, [pc, #196]	@ (8002848 <main+0x264>)
 8002784:	6013      	str	r3, [r2, #0]

  /* definition and creation of SDcardTask */
  osThreadDef(SDcardTask, recordSDdata, osPriorityNormal, 0, 2048);
 8002786:	4b31      	ldr	r3, [pc, #196]	@ (800284c <main+0x268>)
 8002788:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 800278c:	461d      	mov	r5, r3
 800278e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002790:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002792:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002796:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SDcardTaskHandle = osThreadCreate(osThread(SDcardTask), NULL);
 800279a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800279e:	2100      	movs	r1, #0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f00d ff16 	bl	80105d2 <osThreadCreate>
 80027a6:	4603      	mov	r3, r0
 80027a8:	4a29      	ldr	r2, [pc, #164]	@ (8002850 <main+0x26c>)
 80027aa:	6013      	str	r3, [r2, #0]

  /* definition and creation of pressureSensorT */
  osThreadDef(pressureSensorT, getBar30Data, osPriorityNormal, 0, 128);
 80027ac:	4b29      	ldr	r3, [pc, #164]	@ (8002854 <main+0x270>)
 80027ae:	f107 041c 	add.w	r4, r7, #28
 80027b2:	461d      	mov	r5, r3
 80027b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pressureSensorTHandle = osThreadCreate(osThread(pressureSensorT), NULL);
 80027c0:	f107 031c 	add.w	r3, r7, #28
 80027c4:	2100      	movs	r1, #0
 80027c6:	4618      	mov	r0, r3
 80027c8:	f00d ff03 	bl	80105d2 <osThreadCreate>
 80027cc:	4603      	mov	r3, r0
 80027ce:	4a22      	ldr	r2, [pc, #136]	@ (8002858 <main+0x274>)
 80027d0:	6013      	str	r3, [r2, #0]

  /* definition and creation of KalmanPredict */
  osThreadDef(KalmanPredict, EKFpredict, osPriorityNormal, 0, 128);
 80027d2:	4b22      	ldr	r3, [pc, #136]	@ (800285c <main+0x278>)
 80027d4:	463c      	mov	r4, r7
 80027d6:	461d      	mov	r5, r3
 80027d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  KalmanPredictHandle = osThreadCreate(osThread(KalmanPredict), NULL);
 80027e4:	463b      	mov	r3, r7
 80027e6:	2100      	movs	r1, #0
 80027e8:	4618      	mov	r0, r3
 80027ea:	f00d fef2 	bl	80105d2 <osThreadCreate>
 80027ee:	4603      	mov	r3, r0
 80027f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002860 <main+0x27c>)
 80027f2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80027f4:	f00d fee6 	bl	80105c4 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  while (1)
 80027f8:	bf00      	nop
 80027fa:	e7fd      	b.n	80027f8 <main+0x214>
 80027fc:	200028b4 	.word	0x200028b4
 8002800:	20002b14 	.word	0x20002b14
 8002804:	200025b4 	.word	0x200025b4
 8002808:	20002b18 	.word	0x20002b18
 800280c:	200025fc 	.word	0x200025fc
 8002810:	2000286c 	.word	0x2000286c
 8002814:	200028fc 	.word	0x200028fc
 8002818:	20002704 	.word	0x20002704
 800281c:	20002b1c 	.word	0x20002b1c
 8002820:	20002758 	.word	0x20002758
 8002824:	20002b68 	.word	0x20002b68
 8002828:	08016c98 	.word	0x08016c98
 800282c:	08016cb4 	.word	0x08016cb4
 8002830:	20002b80 	.word	0x20002b80
 8002834:	08016ce0 	.word	0x08016ce0
 8002838:	20002aec 	.word	0x20002aec
 800283c:	08016d0c 	.word	0x08016d0c
 8002840:	20002af0 	.word	0x20002af0
 8002844:	08016d38 	.word	0x08016d38
 8002848:	20002af4 	.word	0x20002af4
 800284c:	08016d60 	.word	0x08016d60
 8002850:	20002af8 	.word	0x20002af8
 8002854:	08016d8c 	.word	0x08016d8c
 8002858:	20002afc 	.word	0x20002afc
 800285c:	08016db8 	.word	0x08016db8
 8002860:	20002b00 	.word	0x20002b00

08002864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b094      	sub	sp, #80	@ 0x50
 8002868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800286a:	f107 031c 	add.w	r3, r7, #28
 800286e:	2234      	movs	r2, #52	@ 0x34
 8002870:	2100      	movs	r1, #0
 8002872:	4618      	mov	r0, r3
 8002874:	f011 f867 	bl	8013946 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002878:	f107 0308 	add.w	r3, r7, #8
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	60da      	str	r2, [r3, #12]
 8002886:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002888:	2300      	movs	r3, #0
 800288a:	607b      	str	r3, [r7, #4]
 800288c:	4b29      	ldr	r3, [pc, #164]	@ (8002934 <SystemClock_Config+0xd0>)
 800288e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002890:	4a28      	ldr	r2, [pc, #160]	@ (8002934 <SystemClock_Config+0xd0>)
 8002892:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002896:	6413      	str	r3, [r2, #64]	@ 0x40
 8002898:	4b26      	ldr	r3, [pc, #152]	@ (8002934 <SystemClock_Config+0xd0>)
 800289a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a0:	607b      	str	r3, [r7, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028a4:	2300      	movs	r3, #0
 80028a6:	603b      	str	r3, [r7, #0]
 80028a8:	4b23      	ldr	r3, [pc, #140]	@ (8002938 <SystemClock_Config+0xd4>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a22      	ldr	r2, [pc, #136]	@ (8002938 <SystemClock_Config+0xd4>)
 80028ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028b2:	6013      	str	r3, [r2, #0]
 80028b4:	4b20      	ldr	r3, [pc, #128]	@ (8002938 <SystemClock_Config+0xd4>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80028bc:	603b      	str	r3, [r7, #0]
 80028be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028c0:	2301      	movs	r3, #1
 80028c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028ca:	2302      	movs	r3, #2
 80028cc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80028d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80028d4:	2308      	movs	r3, #8
 80028d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80028d8:	23a8      	movs	r3, #168	@ 0xa8
 80028da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028dc:	2302      	movs	r3, #2
 80028de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80028e0:	2307      	movs	r3, #7
 80028e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80028e4:	2302      	movs	r3, #2
 80028e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028e8:	f107 031c 	add.w	r3, r7, #28
 80028ec:	4618      	mov	r0, r3
 80028ee:	f007 fb31 	bl	8009f54 <HAL_RCC_OscConfig>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80028f8:	f001 f8a8 	bl	8003a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028fc:	230f      	movs	r3, #15
 80028fe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002900:	2302      	movs	r3, #2
 8002902:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002904:	2300      	movs	r3, #0
 8002906:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002908:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800290c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800290e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002912:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002914:	f107 0308 	add.w	r3, r7, #8
 8002918:	2105      	movs	r1, #5
 800291a:	4618      	mov	r0, r3
 800291c:	f006 ffa0 	bl	8009860 <HAL_RCC_ClockConfig>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002926:	f001 f891 	bl	8003a4c <Error_Handler>
  }
}
 800292a:	bf00      	nop
 800292c:	3750      	adds	r7, #80	@ 0x50
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40023800 	.word	0x40023800
 8002938:	40007000 	.word	0x40007000

0800293c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002942:	463b      	mov	r3, r7
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800294e:	4b22      	ldr	r3, [pc, #136]	@ (80029d8 <MX_ADC1_Init+0x9c>)
 8002950:	4a22      	ldr	r2, [pc, #136]	@ (80029dc <MX_ADC1_Init+0xa0>)
 8002952:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002954:	4b20      	ldr	r3, [pc, #128]	@ (80029d8 <MX_ADC1_Init+0x9c>)
 8002956:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800295a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800295c:	4b1e      	ldr	r3, [pc, #120]	@ (80029d8 <MX_ADC1_Init+0x9c>)
 800295e:	2200      	movs	r2, #0
 8002960:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002962:	4b1d      	ldr	r3, [pc, #116]	@ (80029d8 <MX_ADC1_Init+0x9c>)
 8002964:	2201      	movs	r2, #1
 8002966:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002968:	4b1b      	ldr	r3, [pc, #108]	@ (80029d8 <MX_ADC1_Init+0x9c>)
 800296a:	2200      	movs	r2, #0
 800296c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800296e:	4b1a      	ldr	r3, [pc, #104]	@ (80029d8 <MX_ADC1_Init+0x9c>)
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002976:	4b18      	ldr	r3, [pc, #96]	@ (80029d8 <MX_ADC1_Init+0x9c>)
 8002978:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800297c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800297e:	4b16      	ldr	r3, [pc, #88]	@ (80029d8 <MX_ADC1_Init+0x9c>)
 8002980:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002984:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002986:	4b14      	ldr	r3, [pc, #80]	@ (80029d8 <MX_ADC1_Init+0x9c>)
 8002988:	2200      	movs	r2, #0
 800298a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800298c:	4b12      	ldr	r3, [pc, #72]	@ (80029d8 <MX_ADC1_Init+0x9c>)
 800298e:	2201      	movs	r2, #1
 8002990:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002992:	4b11      	ldr	r3, [pc, #68]	@ (80029d8 <MX_ADC1_Init+0x9c>)
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800299a:	4b0f      	ldr	r3, [pc, #60]	@ (80029d8 <MX_ADC1_Init+0x9c>)
 800299c:	2201      	movs	r2, #1
 800299e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029a0:	480d      	ldr	r0, [pc, #52]	@ (80029d8 <MX_ADC1_Init+0x9c>)
 80029a2:	f001 ffbb 	bl	800491c <HAL_ADC_Init>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80029ac:	f001 f84e 	bl	8003a4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80029b4:	2301      	movs	r3, #1
 80029b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80029b8:	2306      	movs	r3, #6
 80029ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029bc:	463b      	mov	r3, r7
 80029be:	4619      	mov	r1, r3
 80029c0:	4805      	ldr	r0, [pc, #20]	@ (80029d8 <MX_ADC1_Init+0x9c>)
 80029c2:	f002 fa2d 	bl	8004e20 <HAL_ADC_ConfigChannel>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80029cc:	f001 f83e 	bl	8003a4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80029d0:	bf00      	nop
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	200025b4 	.word	0x200025b4
 80029dc:	40012000 	.word	0x40012000

080029e0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80029e6:	463b      	mov	r3, r7
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80029f2:	4b22      	ldr	r3, [pc, #136]	@ (8002a7c <MX_ADC2_Init+0x9c>)
 80029f4:	4a22      	ldr	r2, [pc, #136]	@ (8002a80 <MX_ADC2_Init+0xa0>)
 80029f6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80029f8:	4b20      	ldr	r3, [pc, #128]	@ (8002a7c <MX_ADC2_Init+0x9c>)
 80029fa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80029fe:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002a00:	4b1e      	ldr	r3, [pc, #120]	@ (8002a7c <MX_ADC2_Init+0x9c>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8002a06:	4b1d      	ldr	r3, [pc, #116]	@ (8002a7c <MX_ADC2_Init+0x9c>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002a7c <MX_ADC2_Init+0x9c>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002a12:	4b1a      	ldr	r3, [pc, #104]	@ (8002a7c <MX_ADC2_Init+0x9c>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 8002a1a:	4b18      	ldr	r3, [pc, #96]	@ (8002a7c <MX_ADC2_Init+0x9c>)
 8002a1c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002a20:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8002a22:	4b16      	ldr	r3, [pc, #88]	@ (8002a7c <MX_ADC2_Init+0x9c>)
 8002a24:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002a28:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a2a:	4b14      	ldr	r3, [pc, #80]	@ (8002a7c <MX_ADC2_Init+0x9c>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002a30:	4b12      	ldr	r3, [pc, #72]	@ (8002a7c <MX_ADC2_Init+0x9c>)
 8002a32:	2201      	movs	r2, #1
 8002a34:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8002a36:	4b11      	ldr	r3, [pc, #68]	@ (8002a7c <MX_ADC2_Init+0x9c>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8002a7c <MX_ADC2_Init+0x9c>)
 8002a40:	2201      	movs	r2, #1
 8002a42:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002a44:	480d      	ldr	r0, [pc, #52]	@ (8002a7c <MX_ADC2_Init+0x9c>)
 8002a46:	f001 ff69 	bl	800491c <HAL_ADC_Init>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8002a50:	f000 fffc 	bl	8003a4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002a54:	2301      	movs	r3, #1
 8002a56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002a60:	463b      	mov	r3, r7
 8002a62:	4619      	mov	r1, r3
 8002a64:	4805      	ldr	r0, [pc, #20]	@ (8002a7c <MX_ADC2_Init+0x9c>)
 8002a66:	f002 f9db 	bl	8004e20 <HAL_ADC_ConfigChannel>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8002a70:	f000 ffec 	bl	8003a4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002a74:	bf00      	nop
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	200025fc 	.word	0x200025fc
 8002a80:	40012100 	.word	0x40012100

08002a84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a88:	4b12      	ldr	r3, [pc, #72]	@ (8002ad4 <MX_I2C1_Init+0x50>)
 8002a8a:	4a13      	ldr	r2, [pc, #76]	@ (8002ad8 <MX_I2C1_Init+0x54>)
 8002a8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002a8e:	4b11      	ldr	r3, [pc, #68]	@ (8002ad4 <MX_I2C1_Init+0x50>)
 8002a90:	4a12      	ldr	r2, [pc, #72]	@ (8002adc <MX_I2C1_Init+0x58>)
 8002a92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a94:	4b0f      	ldr	r3, [pc, #60]	@ (8002ad4 <MX_I2C1_Init+0x50>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad4 <MX_I2C1_Init+0x50>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad4 <MX_I2C1_Init+0x50>)
 8002aa2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002aa6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad4 <MX_I2C1_Init+0x50>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002aae:	4b09      	ldr	r3, [pc, #36]	@ (8002ad4 <MX_I2C1_Init+0x50>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ab4:	4b07      	ldr	r3, [pc, #28]	@ (8002ad4 <MX_I2C1_Init+0x50>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002aba:	4b06      	ldr	r3, [pc, #24]	@ (8002ad4 <MX_I2C1_Init+0x50>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ac0:	4804      	ldr	r0, [pc, #16]	@ (8002ad4 <MX_I2C1_Init+0x50>)
 8002ac2:	f003 fb2b 	bl	800611c <HAL_I2C_Init>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002acc:	f000 ffbe 	bl	8003a4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ad0:	bf00      	nop
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	20002704 	.word	0x20002704
 8002ad8:	40005400 	.word	0x40005400
 8002adc:	00061a80 	.word	0x00061a80

08002ae0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002ae4:	4b12      	ldr	r3, [pc, #72]	@ (8002b30 <MX_I2C2_Init+0x50>)
 8002ae6:	4a13      	ldr	r2, [pc, #76]	@ (8002b34 <MX_I2C2_Init+0x54>)
 8002ae8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002aea:	4b11      	ldr	r3, [pc, #68]	@ (8002b30 <MX_I2C2_Init+0x50>)
 8002aec:	4a12      	ldr	r2, [pc, #72]	@ (8002b38 <MX_I2C2_Init+0x58>)
 8002aee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002af0:	4b0f      	ldr	r3, [pc, #60]	@ (8002b30 <MX_I2C2_Init+0x50>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002af6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b30 <MX_I2C2_Init+0x50>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002afc:	4b0c      	ldr	r3, [pc, #48]	@ (8002b30 <MX_I2C2_Init+0x50>)
 8002afe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b02:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b04:	4b0a      	ldr	r3, [pc, #40]	@ (8002b30 <MX_I2C2_Init+0x50>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002b0a:	4b09      	ldr	r3, [pc, #36]	@ (8002b30 <MX_I2C2_Init+0x50>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b10:	4b07      	ldr	r3, [pc, #28]	@ (8002b30 <MX_I2C2_Init+0x50>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b16:	4b06      	ldr	r3, [pc, #24]	@ (8002b30 <MX_I2C2_Init+0x50>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002b1c:	4804      	ldr	r0, [pc, #16]	@ (8002b30 <MX_I2C2_Init+0x50>)
 8002b1e:	f003 fafd 	bl	800611c <HAL_I2C_Init>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002b28:	f000 ff90 	bl	8003a4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002b2c:	bf00      	nop
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	20002758 	.word	0x20002758
 8002b34:	40005800 	.word	0x40005800
 8002b38:	000186a0 	.word	0x000186a0

08002b3c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002b40:	4b17      	ldr	r3, [pc, #92]	@ (8002ba0 <MX_SPI2_Init+0x64>)
 8002b42:	4a18      	ldr	r2, [pc, #96]	@ (8002ba4 <MX_SPI2_Init+0x68>)
 8002b44:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002b46:	4b16      	ldr	r3, [pc, #88]	@ (8002ba0 <MX_SPI2_Init+0x64>)
 8002b48:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002b4c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002b4e:	4b14      	ldr	r3, [pc, #80]	@ (8002ba0 <MX_SPI2_Init+0x64>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b54:	4b12      	ldr	r3, [pc, #72]	@ (8002ba0 <MX_SPI2_Init+0x64>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b5a:	4b11      	ldr	r3, [pc, #68]	@ (8002ba0 <MX_SPI2_Init+0x64>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b60:	4b0f      	ldr	r3, [pc, #60]	@ (8002ba0 <MX_SPI2_Init+0x64>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002b66:	4b0e      	ldr	r3, [pc, #56]	@ (8002ba0 <MX_SPI2_Init+0x64>)
 8002b68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b6c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba0 <MX_SPI2_Init+0x64>)
 8002b70:	2208      	movs	r2, #8
 8002b72:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b74:	4b0a      	ldr	r3, [pc, #40]	@ (8002ba0 <MX_SPI2_Init+0x64>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b7a:	4b09      	ldr	r3, [pc, #36]	@ (8002ba0 <MX_SPI2_Init+0x64>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b80:	4b07      	ldr	r3, [pc, #28]	@ (8002ba0 <MX_SPI2_Init+0x64>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002b86:	4b06      	ldr	r3, [pc, #24]	@ (8002ba0 <MX_SPI2_Init+0x64>)
 8002b88:	220a      	movs	r2, #10
 8002b8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b8c:	4804      	ldr	r0, [pc, #16]	@ (8002ba0 <MX_SPI2_Init+0x64>)
 8002b8e:	f007 fc7f 	bl	800a490 <HAL_SPI_Init>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002b98:	f000 ff58 	bl	8003a4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002b9c:	bf00      	nop
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	200004b4 	.word	0x200004b4
 8002ba4:	40003800 	.word	0x40003800

08002ba8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08e      	sub	sp, #56	@ 0x38
 8002bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	605a      	str	r2, [r3, #4]
 8002bb8:	609a      	str	r2, [r3, #8]
 8002bba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bbc:	f107 0320 	add.w	r3, r7, #32
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bc6:	1d3b      	adds	r3, r7, #4
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	605a      	str	r2, [r3, #4]
 8002bce:	609a      	str	r2, [r3, #8]
 8002bd0:	60da      	str	r2, [r3, #12]
 8002bd2:	611a      	str	r2, [r3, #16]
 8002bd4:	615a      	str	r2, [r3, #20]
 8002bd6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002bd8:	4b2c      	ldr	r3, [pc, #176]	@ (8002c8c <MX_TIM2_Init+0xe4>)
 8002bda:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002bde:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8002be0:	4b2a      	ldr	r3, [pc, #168]	@ (8002c8c <MX_TIM2_Init+0xe4>)
 8002be2:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8002be6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002be8:	4b28      	ldr	r3, [pc, #160]	@ (8002c8c <MX_TIM2_Init+0xe4>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8002bee:	4b27      	ldr	r3, [pc, #156]	@ (8002c8c <MX_TIM2_Init+0xe4>)
 8002bf0:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002bf4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bf6:	4b25      	ldr	r3, [pc, #148]	@ (8002c8c <MX_TIM2_Init+0xe4>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bfc:	4b23      	ldr	r3, [pc, #140]	@ (8002c8c <MX_TIM2_Init+0xe4>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c02:	4822      	ldr	r0, [pc, #136]	@ (8002c8c <MX_TIM2_Init+0xe4>)
 8002c04:	f008 f876 	bl	800acf4 <HAL_TIM_Base_Init>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002c0e:	f000 ff1d 	bl	8003a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c16:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c18:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	481b      	ldr	r0, [pc, #108]	@ (8002c8c <MX_TIM2_Init+0xe4>)
 8002c20:	f008 fc72 	bl	800b508 <HAL_TIM_ConfigClockSource>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002c2a:	f000 ff0f 	bl	8003a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002c2e:	4817      	ldr	r0, [pc, #92]	@ (8002c8c <MX_TIM2_Init+0xe4>)
 8002c30:	f008 f988 	bl	800af44 <HAL_TIM_PWM_Init>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002c3a:	f000 ff07 	bl	8003a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002c3e:	2320      	movs	r3, #32
 8002c40:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c42:	2300      	movs	r3, #0
 8002c44:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c46:	f107 0320 	add.w	r3, r7, #32
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	480f      	ldr	r0, [pc, #60]	@ (8002c8c <MX_TIM2_Init+0xe4>)
 8002c4e:	f009 f85b 	bl	800bd08 <HAL_TIMEx_MasterConfigSynchronization>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002c58:	f000 fef8 	bl	8003a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c5c:	2360      	movs	r3, #96	@ 0x60
 8002c5e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c60:	2300      	movs	r3, #0
 8002c62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c64:	2300      	movs	r3, #0
 8002c66:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c6c:	1d3b      	adds	r3, r7, #4
 8002c6e:	2200      	movs	r2, #0
 8002c70:	4619      	mov	r1, r3
 8002c72:	4806      	ldr	r0, [pc, #24]	@ (8002c8c <MX_TIM2_Init+0xe4>)
 8002c74:	f008 fb86 	bl	800b384 <HAL_TIM_PWM_ConfigChannel>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002c7e:	f000 fee5 	bl	8003a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c82:	bf00      	nop
 8002c84:	3738      	adds	r7, #56	@ 0x38
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	2000286c 	.word	0x2000286c

08002c90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08a      	sub	sp, #40	@ 0x28
 8002c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c96:	f107 0320 	add.w	r3, r7, #32
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ca0:	1d3b      	adds	r3, r7, #4
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	605a      	str	r2, [r3, #4]
 8002ca8:	609a      	str	r2, [r3, #8]
 8002caa:	60da      	str	r2, [r3, #12]
 8002cac:	611a      	str	r2, [r3, #16]
 8002cae:	615a      	str	r2, [r3, #20]
 8002cb0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002cb2:	4b32      	ldr	r3, [pc, #200]	@ (8002d7c <MX_TIM3_Init+0xec>)
 8002cb4:	4a32      	ldr	r2, [pc, #200]	@ (8002d80 <MX_TIM3_Init+0xf0>)
 8002cb6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 168;
 8002cb8:	4b30      	ldr	r3, [pc, #192]	@ (8002d7c <MX_TIM3_Init+0xec>)
 8002cba:	22a8      	movs	r2, #168	@ 0xa8
 8002cbc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cbe:	4b2f      	ldr	r3, [pc, #188]	@ (8002d7c <MX_TIM3_Init+0xec>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8002cc4:	4b2d      	ldr	r3, [pc, #180]	@ (8002d7c <MX_TIM3_Init+0xec>)
 8002cc6:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002cca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ccc:	4b2b      	ldr	r3, [pc, #172]	@ (8002d7c <MX_TIM3_Init+0xec>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cd2:	4b2a      	ldr	r3, [pc, #168]	@ (8002d7c <MX_TIM3_Init+0xec>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002cd8:	4828      	ldr	r0, [pc, #160]	@ (8002d7c <MX_TIM3_Init+0xec>)
 8002cda:	f008 f933 	bl	800af44 <HAL_TIM_PWM_Init>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002ce4:	f000 feb2 	bl	8003a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cec:	2300      	movs	r3, #0
 8002cee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002cf0:	f107 0320 	add.w	r3, r7, #32
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4821      	ldr	r0, [pc, #132]	@ (8002d7c <MX_TIM3_Init+0xec>)
 8002cf8:	f009 f806 	bl	800bd08 <HAL_TIMEx_MasterConfigSynchronization>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002d02:	f000 fea3 	bl	8003a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d06:	2360      	movs	r3, #96	@ 0x60
 8002d08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d16:	1d3b      	adds	r3, r7, #4
 8002d18:	2200      	movs	r2, #0
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4817      	ldr	r0, [pc, #92]	@ (8002d7c <MX_TIM3_Init+0xec>)
 8002d1e:	f008 fb31 	bl	800b384 <HAL_TIM_PWM_ConfigChannel>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002d28:	f000 fe90 	bl	8003a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d2c:	1d3b      	adds	r3, r7, #4
 8002d2e:	2204      	movs	r2, #4
 8002d30:	4619      	mov	r1, r3
 8002d32:	4812      	ldr	r0, [pc, #72]	@ (8002d7c <MX_TIM3_Init+0xec>)
 8002d34:	f008 fb26 	bl	800b384 <HAL_TIM_PWM_ConfigChannel>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002d3e:	f000 fe85 	bl	8003a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d42:	1d3b      	adds	r3, r7, #4
 8002d44:	2208      	movs	r2, #8
 8002d46:	4619      	mov	r1, r3
 8002d48:	480c      	ldr	r0, [pc, #48]	@ (8002d7c <MX_TIM3_Init+0xec>)
 8002d4a:	f008 fb1b 	bl	800b384 <HAL_TIM_PWM_ConfigChannel>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8002d54:	f000 fe7a 	bl	8003a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d58:	1d3b      	adds	r3, r7, #4
 8002d5a:	220c      	movs	r2, #12
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4807      	ldr	r0, [pc, #28]	@ (8002d7c <MX_TIM3_Init+0xec>)
 8002d60:	f008 fb10 	bl	800b384 <HAL_TIM_PWM_ConfigChannel>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8002d6a:	f000 fe6f 	bl	8003a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002d6e:	4803      	ldr	r0, [pc, #12]	@ (8002d7c <MX_TIM3_Init+0xec>)
 8002d70:	f001 f9fe 	bl	8004170 <HAL_TIM_MspPostInit>

}
 8002d74:	bf00      	nop
 8002d76:	3728      	adds	r7, #40	@ 0x28
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	200028b4 	.word	0x200028b4
 8002d80:	40000400 	.word	0x40000400

08002d84 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b096      	sub	sp, #88	@ 0x58
 8002d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d8a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	605a      	str	r2, [r3, #4]
 8002d94:	609a      	str	r2, [r3, #8]
 8002d96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d98:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002da2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	605a      	str	r2, [r3, #4]
 8002dac:	609a      	str	r2, [r3, #8]
 8002dae:	60da      	str	r2, [r3, #12]
 8002db0:	611a      	str	r2, [r3, #16]
 8002db2:	615a      	str	r2, [r3, #20]
 8002db4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002db6:	1d3b      	adds	r3, r7, #4
 8002db8:	2220      	movs	r2, #32
 8002dba:	2100      	movs	r1, #0
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f010 fdc2 	bl	8013946 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002dc2:	4b3d      	ldr	r3, [pc, #244]	@ (8002eb8 <MX_TIM8_Init+0x134>)
 8002dc4:	4a3d      	ldr	r2, [pc, #244]	@ (8002ebc <MX_TIM8_Init+0x138>)
 8002dc6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 8400-1;
 8002dc8:	4b3b      	ldr	r3, [pc, #236]	@ (8002eb8 <MX_TIM8_Init+0x134>)
 8002dca:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8002dce:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dd0:	4b39      	ldr	r3, [pc, #228]	@ (8002eb8 <MX_TIM8_Init+0x134>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2000-1;
 8002dd6:	4b38      	ldr	r3, [pc, #224]	@ (8002eb8 <MX_TIM8_Init+0x134>)
 8002dd8:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002ddc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dde:	4b36      	ldr	r3, [pc, #216]	@ (8002eb8 <MX_TIM8_Init+0x134>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002de4:	4b34      	ldr	r3, [pc, #208]	@ (8002eb8 <MX_TIM8_Init+0x134>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dea:	4b33      	ldr	r3, [pc, #204]	@ (8002eb8 <MX_TIM8_Init+0x134>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002df0:	4831      	ldr	r0, [pc, #196]	@ (8002eb8 <MX_TIM8_Init+0x134>)
 8002df2:	f007 ff7f 	bl	800acf4 <HAL_TIM_Base_Init>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8002dfc:	f000 fe26 	bl	8003a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e04:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002e06:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	482a      	ldr	r0, [pc, #168]	@ (8002eb8 <MX_TIM8_Init+0x134>)
 8002e0e:	f008 fb7b 	bl	800b508 <HAL_TIM_ConfigClockSource>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8002e18:	f000 fe18 	bl	8003a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002e1c:	4826      	ldr	r0, [pc, #152]	@ (8002eb8 <MX_TIM8_Init+0x134>)
 8002e1e:	f008 f891 	bl	800af44 <HAL_TIM_PWM_Init>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8002e28:	f000 fe10 	bl	8003a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002e2c:	2320      	movs	r3, #32
 8002e2e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e30:	2300      	movs	r3, #0
 8002e32:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002e34:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002e38:	4619      	mov	r1, r3
 8002e3a:	481f      	ldr	r0, [pc, #124]	@ (8002eb8 <MX_TIM8_Init+0x134>)
 8002e3c:	f008 ff64 	bl	800bd08 <HAL_TIMEx_MasterConfigSynchronization>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8002e46:	f000 fe01 	bl	8003a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e4a:	2360      	movs	r3, #96	@ 0x60
 8002e4c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e52:	2300      	movs	r3, #0
 8002e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e56:	2300      	movs	r3, #0
 8002e58:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e62:	2300      	movs	r3, #0
 8002e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4812      	ldr	r0, [pc, #72]	@ (8002eb8 <MX_TIM8_Init+0x134>)
 8002e70:	f008 fa88 	bl	800b384 <HAL_TIM_PWM_ConfigChannel>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8002e7a:	f000 fde7 	bl	8003a4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e82:	2300      	movs	r3, #0
 8002e84:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e86:	2300      	movs	r3, #0
 8002e88:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e96:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002e9c:	1d3b      	adds	r3, r7, #4
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4805      	ldr	r0, [pc, #20]	@ (8002eb8 <MX_TIM8_Init+0x134>)
 8002ea2:	f008 ffad 	bl	800be00 <HAL_TIMEx_ConfigBreakDeadTime>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 8002eac:	f000 fdce 	bl	8003a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002eb0:	bf00      	nop
 8002eb2:	3758      	adds	r7, #88	@ 0x58
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	200028fc 	.word	0x200028fc
 8002ebc:	40010400 	.word	0x40010400

08002ec0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ec4:	4b11      	ldr	r3, [pc, #68]	@ (8002f0c <MX_USART2_UART_Init+0x4c>)
 8002ec6:	4a12      	ldr	r2, [pc, #72]	@ (8002f10 <MX_USART2_UART_Init+0x50>)
 8002ec8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002eca:	4b10      	ldr	r3, [pc, #64]	@ (8002f0c <MX_USART2_UART_Init+0x4c>)
 8002ecc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ed0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8002f0c <MX_USART2_UART_Init+0x4c>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8002f0c <MX_USART2_UART_Init+0x4c>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ede:	4b0b      	ldr	r3, [pc, #44]	@ (8002f0c <MX_USART2_UART_Init+0x4c>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ee4:	4b09      	ldr	r3, [pc, #36]	@ (8002f0c <MX_USART2_UART_Init+0x4c>)
 8002ee6:	220c      	movs	r2, #12
 8002ee8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eea:	4b08      	ldr	r3, [pc, #32]	@ (8002f0c <MX_USART2_UART_Init+0x4c>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ef0:	4b06      	ldr	r3, [pc, #24]	@ (8002f0c <MX_USART2_UART_Init+0x4c>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ef6:	4805      	ldr	r0, [pc, #20]	@ (8002f0c <MX_USART2_UART_Init+0x4c>)
 8002ef8:	f008 ffe8 	bl	800becc <HAL_UART_Init>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f02:	f000 fda3 	bl	8003a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f06:	bf00      	nop
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20002944 	.word	0x20002944
 8002f10:	40004400 	.word	0x40004400

08002f14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002f18:	4b11      	ldr	r3, [pc, #68]	@ (8002f60 <MX_USART3_UART_Init+0x4c>)
 8002f1a:	4a12      	ldr	r2, [pc, #72]	@ (8002f64 <MX_USART3_UART_Init+0x50>)
 8002f1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002f1e:	4b10      	ldr	r3, [pc, #64]	@ (8002f60 <MX_USART3_UART_Init+0x4c>)
 8002f20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f26:	4b0e      	ldr	r3, [pc, #56]	@ (8002f60 <MX_USART3_UART_Init+0x4c>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f60 <MX_USART3_UART_Init+0x4c>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f32:	4b0b      	ldr	r3, [pc, #44]	@ (8002f60 <MX_USART3_UART_Init+0x4c>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f38:	4b09      	ldr	r3, [pc, #36]	@ (8002f60 <MX_USART3_UART_Init+0x4c>)
 8002f3a:	220c      	movs	r2, #12
 8002f3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f3e:	4b08      	ldr	r3, [pc, #32]	@ (8002f60 <MX_USART3_UART_Init+0x4c>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f44:	4b06      	ldr	r3, [pc, #24]	@ (8002f60 <MX_USART3_UART_Init+0x4c>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f4a:	4805      	ldr	r0, [pc, #20]	@ (8002f60 <MX_USART3_UART_Init+0x4c>)
 8002f4c:	f008 ffbe 	bl	800becc <HAL_UART_Init>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002f56:	f000 fd79 	bl	8003a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f5a:	bf00      	nop
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	20002988 	.word	0x20002988
 8002f64:	40004800 	.word	0x40004800

08002f68 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002f6c:	bf00      	nop
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
	...

08002f78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	607b      	str	r3, [r7, #4]
 8002f82:	4b2b      	ldr	r3, [pc, #172]	@ (8003030 <MX_DMA_Init+0xb8>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f86:	4a2a      	ldr	r2, [pc, #168]	@ (8003030 <MX_DMA_Init+0xb8>)
 8002f88:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f8e:	4b28      	ldr	r3, [pc, #160]	@ (8003030 <MX_DMA_Init+0xb8>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f96:	607b      	str	r3, [r7, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	603b      	str	r3, [r7, #0]
 8002f9e:	4b24      	ldr	r3, [pc, #144]	@ (8003030 <MX_DMA_Init+0xb8>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa2:	4a23      	ldr	r2, [pc, #140]	@ (8003030 <MX_DMA_Init+0xb8>)
 8002fa4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002faa:	4b21      	ldr	r3, [pc, #132]	@ (8003030 <MX_DMA_Init+0xb8>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fb2:	603b      	str	r3, [r7, #0]
 8002fb4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	2105      	movs	r1, #5
 8002fba:	200b      	movs	r0, #11
 8002fbc:	f002 faa2 	bl	8005504 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002fc0:	200b      	movs	r0, #11
 8002fc2:	f002 fabb 	bl	800553c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2105      	movs	r1, #5
 8002fca:	200c      	movs	r0, #12
 8002fcc:	f002 fa9a 	bl	8005504 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002fd0:	200c      	movs	r0, #12
 8002fd2:	f002 fab3 	bl	800553c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	2105      	movs	r1, #5
 8002fda:	200e      	movs	r0, #14
 8002fdc:	f002 fa92 	bl	8005504 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002fe0:	200e      	movs	r0, #14
 8002fe2:	f002 faab 	bl	800553c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2105      	movs	r1, #5
 8002fea:	2011      	movs	r0, #17
 8002fec:	f002 fa8a 	bl	8005504 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002ff0:	2011      	movs	r0, #17
 8002ff2:	f002 faa3 	bl	800553c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2105      	movs	r1, #5
 8002ffa:	202f      	movs	r0, #47	@ 0x2f
 8002ffc:	f002 fa82 	bl	8005504 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8003000:	202f      	movs	r0, #47	@ 0x2f
 8003002:	f002 fa9b 	bl	800553c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8003006:	2200      	movs	r2, #0
 8003008:	2105      	movs	r1, #5
 800300a:	2038      	movs	r0, #56	@ 0x38
 800300c:	f002 fa7a 	bl	8005504 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003010:	2038      	movs	r0, #56	@ 0x38
 8003012:	f002 fa93 	bl	800553c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8003016:	2200      	movs	r2, #0
 8003018:	2105      	movs	r1, #5
 800301a:	203a      	movs	r0, #58	@ 0x3a
 800301c:	f002 fa72 	bl	8005504 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003020:	203a      	movs	r0, #58	@ 0x3a
 8003022:	f002 fa8b 	bl	800553c <HAL_NVIC_EnableIRQ>

}
 8003026:	bf00      	nop
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40023800 	.word	0x40023800

08003034 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b08a      	sub	sp, #40	@ 0x28
 8003038:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800303a:	f107 0314 	add.w	r3, r7, #20
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	605a      	str	r2, [r3, #4]
 8003044:	609a      	str	r2, [r3, #8]
 8003046:	60da      	str	r2, [r3, #12]
 8003048:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800304a:	2300      	movs	r3, #0
 800304c:	613b      	str	r3, [r7, #16]
 800304e:	4b5c      	ldr	r3, [pc, #368]	@ (80031c0 <MX_GPIO_Init+0x18c>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003052:	4a5b      	ldr	r2, [pc, #364]	@ (80031c0 <MX_GPIO_Init+0x18c>)
 8003054:	f043 0304 	orr.w	r3, r3, #4
 8003058:	6313      	str	r3, [r2, #48]	@ 0x30
 800305a:	4b59      	ldr	r3, [pc, #356]	@ (80031c0 <MX_GPIO_Init+0x18c>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305e:	f003 0304 	and.w	r3, r3, #4
 8003062:	613b      	str	r3, [r7, #16]
 8003064:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003066:	2300      	movs	r3, #0
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	4b55      	ldr	r3, [pc, #340]	@ (80031c0 <MX_GPIO_Init+0x18c>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306e:	4a54      	ldr	r2, [pc, #336]	@ (80031c0 <MX_GPIO_Init+0x18c>)
 8003070:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003074:	6313      	str	r3, [r2, #48]	@ 0x30
 8003076:	4b52      	ldr	r3, [pc, #328]	@ (80031c0 <MX_GPIO_Init+0x18c>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003082:	2300      	movs	r3, #0
 8003084:	60bb      	str	r3, [r7, #8]
 8003086:	4b4e      	ldr	r3, [pc, #312]	@ (80031c0 <MX_GPIO_Init+0x18c>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308a:	4a4d      	ldr	r2, [pc, #308]	@ (80031c0 <MX_GPIO_Init+0x18c>)
 800308c:	f043 0301 	orr.w	r3, r3, #1
 8003090:	6313      	str	r3, [r2, #48]	@ 0x30
 8003092:	4b4b      	ldr	r3, [pc, #300]	@ (80031c0 <MX_GPIO_Init+0x18c>)
 8003094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	60bb      	str	r3, [r7, #8]
 800309c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800309e:	2300      	movs	r3, #0
 80030a0:	607b      	str	r3, [r7, #4]
 80030a2:	4b47      	ldr	r3, [pc, #284]	@ (80031c0 <MX_GPIO_Init+0x18c>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a6:	4a46      	ldr	r2, [pc, #280]	@ (80031c0 <MX_GPIO_Init+0x18c>)
 80030a8:	f043 0302 	orr.w	r3, r3, #2
 80030ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80030ae:	4b44      	ldr	r3, [pc, #272]	@ (80031c0 <MX_GPIO_Init+0x18c>)
 80030b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	607b      	str	r3, [r7, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);
 80030ba:	2200      	movs	r2, #0
 80030bc:	f248 1160 	movw	r1, #33120	@ 0x8160
 80030c0:	4840      	ldr	r0, [pc, #256]	@ (80031c4 <MX_GPIO_Init+0x190>)
 80030c2:	f002 fff9 	bl	80060b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80030c6:	2200      	movs	r2, #0
 80030c8:	2101      	movs	r1, #1
 80030ca:	483f      	ldr	r0, [pc, #252]	@ (80031c8 <MX_GPIO_Init+0x194>)
 80030cc:	f002 fff4 	bl	80060b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 80030d0:	2201      	movs	r2, #1
 80030d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80030d6:	483c      	ldr	r0, [pc, #240]	@ (80031c8 <MX_GPIO_Init+0x194>)
 80030d8:	f002 ffee 	bl	80060b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80030dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80030e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80030e2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80030e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e8:	2300      	movs	r3, #0
 80030ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80030ec:	f107 0314 	add.w	r3, r7, #20
 80030f0:	4619      	mov	r1, r3
 80030f2:	4836      	ldr	r0, [pc, #216]	@ (80031cc <MX_GPIO_Init+0x198>)
 80030f4:	f002 fe4c 	bl	8005d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_MPU6050_Pin */
  GPIO_InitStruct.Pin = INT_MPU6050_Pin;
 80030f8:	2302      	movs	r3, #2
 80030fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030fc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003100:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003102:	2300      	movs	r3, #0
 8003104:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_MPU6050_GPIO_Port, &GPIO_InitStruct);
 8003106:	f107 0314 	add.w	r3, r7, #20
 800310a:	4619      	mov	r1, r3
 800310c:	482f      	ldr	r0, [pc, #188]	@ (80031cc <MX_GPIO_Init+0x198>)
 800310e:	f002 fe3f 	bl	8005d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_15;
 8003112:	f248 1360 	movw	r3, #33120	@ 0x8160
 8003116:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003118:	2301      	movs	r3, #1
 800311a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311c:	2300      	movs	r3, #0
 800311e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003120:	2300      	movs	r3, #0
 8003122:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003124:	f107 0314 	add.w	r3, r7, #20
 8003128:	4619      	mov	r1, r3
 800312a:	4826      	ldr	r0, [pc, #152]	@ (80031c4 <MX_GPIO_Init+0x190>)
 800312c:	f002 fe30 	bl	8005d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003130:	2301      	movs	r3, #1
 8003132:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003134:	2301      	movs	r3, #1
 8003136:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003138:	2300      	movs	r3, #0
 800313a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800313c:	2300      	movs	r3, #0
 800313e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003140:	f107 0314 	add.w	r3, r7, #20
 8003144:	4619      	mov	r1, r3
 8003146:	4820      	ldr	r0, [pc, #128]	@ (80031c8 <MX_GPIO_Init+0x194>)
 8003148:	f002 fe22 	bl	8005d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 800314c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003150:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003152:	2301      	movs	r3, #1
 8003154:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003156:	2300      	movs	r3, #0
 8003158:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800315a:	2301      	movs	r3, #1
 800315c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800315e:	f107 0314 	add.w	r3, r7, #20
 8003162:	4619      	mov	r1, r3
 8003164:	4818      	ldr	r0, [pc, #96]	@ (80031c8 <MX_GPIO_Init+0x194>)
 8003166:	f002 fe13 	bl	8005d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800316a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800316e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003170:	2300      	movs	r3, #0
 8003172:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003174:	2300      	movs	r3, #0
 8003176:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003178:	f107 0314 	add.w	r3, r7, #20
 800317c:	4619      	mov	r1, r3
 800317e:	4811      	ldr	r0, [pc, #68]	@ (80031c4 <MX_GPIO_Init+0x190>)
 8003180:	f002 fe06 	bl	8005d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003184:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8003188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318a:	2302      	movs	r3, #2
 800318c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318e:	2300      	movs	r3, #0
 8003190:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003192:	2303      	movs	r3, #3
 8003194:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003196:	230a      	movs	r3, #10
 8003198:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800319a:	f107 0314 	add.w	r3, r7, #20
 800319e:	4619      	mov	r1, r3
 80031a0:	4808      	ldr	r0, [pc, #32]	@ (80031c4 <MX_GPIO_Init+0x190>)
 80031a2:	f002 fdf5 	bl	8005d90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80031a6:	2200      	movs	r2, #0
 80031a8:	2105      	movs	r1, #5
 80031aa:	2007      	movs	r0, #7
 80031ac:	f002 f9aa 	bl	8005504 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80031b0:	2007      	movs	r0, #7
 80031b2:	f002 f9c3 	bl	800553c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80031b6:	bf00      	nop
 80031b8:	3728      	adds	r7, #40	@ 0x28
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40023800 	.word	0x40023800
 80031c4:	40020000 	.word	0x40020000
 80031c8:	40020400 	.word	0x40020400
 80031cc:	40020800 	.word	0x40020800

080031d0 <defaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_defaultTask */
void defaultTask(void const * argument)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80031d8:	2001      	movs	r0, #1
 80031da:	f00d fa46 	bl	801066a <osDelay>
 80031de:	e7fb      	b.n	80031d8 <defaultTask+0x8>

080031e0 <sendDataToScreen>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sendDataToScreen */
void sendDataToScreen(void const * argument)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b092      	sub	sp, #72	@ 0x48
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

	 uint32_t depth_as_uint = *((uint32_t*)&pressureSensor.depth);
 80031e8:	4b6a      	ldr	r3, [pc, #424]	@ (8003394 <sendDataToScreen+0x1b4>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	 uint8_t depthBytes[4];
	 uint32_t roll_as_uint=*((uint32_t*)&phiHat_deg);
 80031ee:	4b6a      	ldr	r3, [pc, #424]	@ (8003398 <sendDataToScreen+0x1b8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	62bb      	str	r3, [r7, #40]	@ 0x28
	 uint8_t rollBytes[4];
	 uint32_t pitch_as_uint=*((uint32_t*)&thetaHat_deg);
 80031f4:	4b69      	ldr	r3, [pc, #420]	@ (800339c <sendDataToScreen+0x1bc>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	627b      	str	r3, [r7, #36]	@ 0x24
	 uint8_t pitchBytes[4];
	 uint32_t velocity_as_uint=*((uint32_t*)&velocity);
 80031fa:	4b69      	ldr	r3, [pc, #420]	@ (80033a0 <sendDataToScreen+0x1c0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	623b      	str	r3, [r7, #32]
	 uint8_t velocityBytes[4];
	 uint32_t yaw_as_uint=*((uint32_t*)&mpu6050.gyr_rps[2]);
 8003200:	4b68      	ldr	r3, [pc, #416]	@ (80033a4 <sendDataToScreen+0x1c4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	61fb      	str	r3, [r7, #28]
	 uint8_t yawBytes[4];

	 for(int i=0;i<NUM_BYTES;i++)
 8003206:	2300      	movs	r3, #0
 8003208:	647b      	str	r3, [r7, #68]	@ 0x44
 800320a:	e03e      	b.n	800328a <sendDataToScreen+0xaa>
	 {
		 depthBytes[i]=(depth_as_uint>>(8*i))&0xFF;  // Low Byte -> High Byte
 800320c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003212:	fa22 f303 	lsr.w	r3, r2, r3
 8003216:	b2d9      	uxtb	r1, r3
 8003218:	f107 0218 	add.w	r2, r7, #24
 800321c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800321e:	4413      	add	r3, r2
 8003220:	460a      	mov	r2, r1
 8003222:	701a      	strb	r2, [r3, #0]
		 rollBytes[i]=(roll_as_uint>>(8*i))&0xFF;
 8003224:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800322a:	fa22 f303 	lsr.w	r3, r2, r3
 800322e:	b2d9      	uxtb	r1, r3
 8003230:	f107 0214 	add.w	r2, r7, #20
 8003234:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003236:	4413      	add	r3, r2
 8003238:	460a      	mov	r2, r1
 800323a:	701a      	strb	r2, [r3, #0]
		 pitchBytes[i]=(pitch_as_uint>>(8*i))&0xFF;
 800323c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003242:	fa22 f303 	lsr.w	r3, r2, r3
 8003246:	b2d9      	uxtb	r1, r3
 8003248:	f107 0210 	add.w	r2, r7, #16
 800324c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800324e:	4413      	add	r3, r2
 8003250:	460a      	mov	r2, r1
 8003252:	701a      	strb	r2, [r3, #0]
		 velocityBytes[i]=(velocity_as_uint>>(8*i))&0xFF;
 8003254:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	6a3a      	ldr	r2, [r7, #32]
 800325a:	fa22 f303 	lsr.w	r3, r2, r3
 800325e:	b2d9      	uxtb	r1, r3
 8003260:	f107 020c 	add.w	r2, r7, #12
 8003264:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003266:	4413      	add	r3, r2
 8003268:	460a      	mov	r2, r1
 800326a:	701a      	strb	r2, [r3, #0]
		 yawBytes[i]=(yaw_as_uint>>(8*i))&0xFF;
 800326c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	69fa      	ldr	r2, [r7, #28]
 8003272:	fa22 f303 	lsr.w	r3, r2, r3
 8003276:	b2d9      	uxtb	r1, r3
 8003278:	f107 0208 	add.w	r2, r7, #8
 800327c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800327e:	4413      	add	r3, r2
 8003280:	460a      	mov	r2, r1
 8003282:	701a      	strb	r2, [r3, #0]
	 for(int i=0;i<NUM_BYTES;i++)
 8003284:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003286:	3301      	adds	r3, #1
 8003288:	647b      	str	r3, [r7, #68]	@ 0x44
 800328a:	4b47      	ldr	r3, [pc, #284]	@ (80033a8 <sendDataToScreen+0x1c8>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	461a      	mov	r2, r3
 8003290:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003292:	4293      	cmp	r3, r2
 8003294:	dbba      	blt.n	800320c <sendDataToScreen+0x2c>
	 }
	 Txbuf[0]='D';
 8003296:	4b45      	ldr	r3, [pc, #276]	@ (80033ac <sendDataToScreen+0x1cc>)
 8003298:	2244      	movs	r2, #68	@ 0x44
 800329a:	701a      	strb	r2, [r3, #0]
	 for(int i=1;i<5;i++)
 800329c:	2301      	movs	r3, #1
 800329e:	643b      	str	r3, [r7, #64]	@ 0x40
 80032a0:	e00d      	b.n	80032be <sendDataToScreen+0xde>
		 Txbuf[i]=depthBytes[i-1];
 80032a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032a4:	3b01      	subs	r3, #1
 80032a6:	3348      	adds	r3, #72	@ 0x48
 80032a8:	443b      	add	r3, r7
 80032aa:	f813 1c30 	ldrb.w	r1, [r3, #-48]
 80032ae:	4a3f      	ldr	r2, [pc, #252]	@ (80033ac <sendDataToScreen+0x1cc>)
 80032b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032b2:	4413      	add	r3, r2
 80032b4:	460a      	mov	r2, r1
 80032b6:	701a      	strb	r2, [r3, #0]
	 for(int i=1;i<5;i++)
 80032b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032ba:	3301      	adds	r3, #1
 80032bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80032be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032c0:	2b04      	cmp	r3, #4
 80032c2:	ddee      	ble.n	80032a2 <sendDataToScreen+0xc2>
	 Txbuf[5]='R';
 80032c4:	4b39      	ldr	r3, [pc, #228]	@ (80033ac <sendDataToScreen+0x1cc>)
 80032c6:	2252      	movs	r2, #82	@ 0x52
 80032c8:	715a      	strb	r2, [r3, #5]
	 for(int i=6;i<10;i++)
 80032ca:	2306      	movs	r3, #6
 80032cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032ce:	e00d      	b.n	80032ec <sendDataToScreen+0x10c>
		 Txbuf[i]=rollBytes[i-6];
 80032d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032d2:	3b06      	subs	r3, #6
 80032d4:	3348      	adds	r3, #72	@ 0x48
 80032d6:	443b      	add	r3, r7
 80032d8:	f813 1c34 	ldrb.w	r1, [r3, #-52]
 80032dc:	4a33      	ldr	r2, [pc, #204]	@ (80033ac <sendDataToScreen+0x1cc>)
 80032de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032e0:	4413      	add	r3, r2
 80032e2:	460a      	mov	r2, r1
 80032e4:	701a      	strb	r2, [r3, #0]
	 for(int i=6;i<10;i++)
 80032e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032e8:	3301      	adds	r3, #1
 80032ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032ee:	2b09      	cmp	r3, #9
 80032f0:	ddee      	ble.n	80032d0 <sendDataToScreen+0xf0>
	 Txbuf[10]='P';
 80032f2:	4b2e      	ldr	r3, [pc, #184]	@ (80033ac <sendDataToScreen+0x1cc>)
 80032f4:	2250      	movs	r2, #80	@ 0x50
 80032f6:	729a      	strb	r2, [r3, #10]
	 for(int i=11;i<15;i++)
 80032f8:	230b      	movs	r3, #11
 80032fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032fc:	e00d      	b.n	800331a <sendDataToScreen+0x13a>
		 Txbuf[i]=pitchBytes[i-11];
 80032fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003300:	3b0b      	subs	r3, #11
 8003302:	3348      	adds	r3, #72	@ 0x48
 8003304:	443b      	add	r3, r7
 8003306:	f813 1c38 	ldrb.w	r1, [r3, #-56]
 800330a:	4a28      	ldr	r2, [pc, #160]	@ (80033ac <sendDataToScreen+0x1cc>)
 800330c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800330e:	4413      	add	r3, r2
 8003310:	460a      	mov	r2, r1
 8003312:	701a      	strb	r2, [r3, #0]
	 for(int i=11;i<15;i++)
 8003314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003316:	3301      	adds	r3, #1
 8003318:	63bb      	str	r3, [r7, #56]	@ 0x38
 800331a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800331c:	2b0e      	cmp	r3, #14
 800331e:	ddee      	ble.n	80032fe <sendDataToScreen+0x11e>
	 Txbuf[15]='V';
 8003320:	4b22      	ldr	r3, [pc, #136]	@ (80033ac <sendDataToScreen+0x1cc>)
 8003322:	2256      	movs	r2, #86	@ 0x56
 8003324:	73da      	strb	r2, [r3, #15]
	 for(int i=16;i<20;i++)
 8003326:	2310      	movs	r3, #16
 8003328:	637b      	str	r3, [r7, #52]	@ 0x34
 800332a:	e00d      	b.n	8003348 <sendDataToScreen+0x168>
		 Txbuf[i]=velocityBytes[i-16];
 800332c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800332e:	3b10      	subs	r3, #16
 8003330:	3348      	adds	r3, #72	@ 0x48
 8003332:	443b      	add	r3, r7
 8003334:	f813 1c3c 	ldrb.w	r1, [r3, #-60]
 8003338:	4a1c      	ldr	r2, [pc, #112]	@ (80033ac <sendDataToScreen+0x1cc>)
 800333a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800333c:	4413      	add	r3, r2
 800333e:	460a      	mov	r2, r1
 8003340:	701a      	strb	r2, [r3, #0]
	 for(int i=16;i<20;i++)
 8003342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003344:	3301      	adds	r3, #1
 8003346:	637b      	str	r3, [r7, #52]	@ 0x34
 8003348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800334a:	2b13      	cmp	r3, #19
 800334c:	ddee      	ble.n	800332c <sendDataToScreen+0x14c>
	 Txbuf[20]='Y';
 800334e:	4b17      	ldr	r3, [pc, #92]	@ (80033ac <sendDataToScreen+0x1cc>)
 8003350:	2259      	movs	r2, #89	@ 0x59
 8003352:	751a      	strb	r2, [r3, #20]
	 for(int i=21;i<25;i++)
 8003354:	2315      	movs	r3, #21
 8003356:	633b      	str	r3, [r7, #48]	@ 0x30
 8003358:	e00d      	b.n	8003376 <sendDataToScreen+0x196>
		 Txbuf[i]=yawBytes[i-21];
 800335a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800335c:	3b15      	subs	r3, #21
 800335e:	3348      	adds	r3, #72	@ 0x48
 8003360:	443b      	add	r3, r7
 8003362:	f813 1c40 	ldrb.w	r1, [r3, #-64]
 8003366:	4a11      	ldr	r2, [pc, #68]	@ (80033ac <sendDataToScreen+0x1cc>)
 8003368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800336a:	4413      	add	r3, r2
 800336c:	460a      	mov	r2, r1
 800336e:	701a      	strb	r2, [r3, #0]
	 for(int i=21;i<25;i++)
 8003370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003372:	3301      	adds	r3, #1
 8003374:	633b      	str	r3, [r7, #48]	@ 0x30
 8003376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003378:	2b18      	cmp	r3, #24
 800337a:	ddee      	ble.n	800335a <sendDataToScreen+0x17a>


	 HAL_UART_Transmit_DMA(&huart2,Txbuf,TOTAL_BYTES); // attention: Data is sent LSB first
 800337c:	4b0c      	ldr	r3, [pc, #48]	@ (80033b0 <sendDataToScreen+0x1d0>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	461a      	mov	r2, r3
 8003382:	490a      	ldr	r1, [pc, #40]	@ (80033ac <sendDataToScreen+0x1cc>)
 8003384:	480b      	ldr	r0, [pc, #44]	@ (80033b4 <sendDataToScreen+0x1d4>)
 8003386:	f008 fdef 	bl	800bf68 <HAL_UART_Transmit_DMA>




	  osDelay(900); // Screen should update roughly every 1 second
 800338a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800338e:	f00d f96c 	bl	801066a <osDelay>
  {
 8003392:	e729      	b.n	80031e8 <sendDataToScreen+0x8>
 8003394:	20002b94 	.word	0x20002b94
 8003398:	200025ac 	.word	0x200025ac
 800339c:	200025b0 	.word	0x200025b0
 80033a0:	200025a0 	.word	0x200025a0
 80033a4:	20002b34 	.word	0x20002b34
 80033a8:	08016f41 	.word	0x08016f41
 80033ac:	20002584 	.word	0x20002584
 80033b0:	08016f42 	.word	0x08016f42
 80033b4:	20002944 	.word	0x20002944

080033b8 <updateControlLoop>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_updateControlLoop */
void updateControlLoop(void const * argument)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]

	  /* Infinite loop */
	  for(;;)
	  {

		if(joystick.joystickVoltage[0]<JOYSTICK_MIN_THRESHOLD ) // go Right
 80033c0:	4b34      	ldr	r3, [pc, #208]	@ (8003494 <updateControlLoop+0xdc>)
 80033c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80033c6:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8003498 <updateControlLoop+0xe0>
 80033ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d2:	d50e      	bpl.n	80033f2 <updateControlLoop+0x3a>
		{
			if(verticalCommand==1)
 80033d4:	4b31      	ldr	r3, [pc, #196]	@ (800349c <updateControlLoop+0xe4>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d101      	bne.n	80033e0 <updateControlLoop+0x28>
				neutralRudders();
 80033dc:	f000 fbd4 	bl	8003b88 <neutralRudders>
			turnRight();
 80033e0:	f000 fb3a 	bl	8003a58 <turnRight>
			horizontalCommand=1;
 80033e4:	4b2e      	ldr	r3, [pc, #184]	@ (80034a0 <updateControlLoop+0xe8>)
 80033e6:	2201      	movs	r2, #1
 80033e8:	701a      	strb	r2, [r3, #0]
			verticalCommand=0;
 80033ea:	4b2c      	ldr	r3, [pc, #176]	@ (800349c <updateControlLoop+0xe4>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	701a      	strb	r2, [r3, #0]
 80033f0:	e04c      	b.n	800348c <updateControlLoop+0xd4>

		}
		else if(joystick.joystickVoltage[0]>JOYSTICK_MAX_THRESHOLD)//go Left
 80033f2:	4b28      	ldr	r3, [pc, #160]	@ (8003494 <updateControlLoop+0xdc>)
 80033f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80033f8:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 80033fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003404:	dd0e      	ble.n	8003424 <updateControlLoop+0x6c>
		{
			if(verticalCommand==1)
 8003406:	4b25      	ldr	r3, [pc, #148]	@ (800349c <updateControlLoop+0xe4>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d101      	bne.n	8003412 <updateControlLoop+0x5a>
				neutralRudders();
 800340e:	f000 fbbb 	bl	8003b88 <neutralRudders>
			turnLeft();
 8003412:	f000 fb47 	bl	8003aa4 <turnLeft>
			horizontalCommand=1;
 8003416:	4b22      	ldr	r3, [pc, #136]	@ (80034a0 <updateControlLoop+0xe8>)
 8003418:	2201      	movs	r2, #1
 800341a:	701a      	strb	r2, [r3, #0]
			verticalCommand=0;
 800341c:	4b1f      	ldr	r3, [pc, #124]	@ (800349c <updateControlLoop+0xe4>)
 800341e:	2200      	movs	r2, #0
 8003420:	701a      	strb	r2, [r3, #0]
 8003422:	e033      	b.n	800348c <updateControlLoop+0xd4>
		}

		else if (joystick.joystickVoltage[1]<JOYSTICK_MIN_THRESHOLD)//dive
 8003424:	4b1b      	ldr	r3, [pc, #108]	@ (8003494 <updateControlLoop+0xdc>)
 8003426:	edd3 7a03 	vldr	s15, [r3, #12]
 800342a:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8003498 <updateControlLoop+0xe0>
 800342e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003436:	d50e      	bpl.n	8003456 <updateControlLoop+0x9e>
		{
			if(horizontalCommand==1)
 8003438:	4b19      	ldr	r3, [pc, #100]	@ (80034a0 <updateControlLoop+0xe8>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d101      	bne.n	8003444 <updateControlLoop+0x8c>
				neutralRudders();
 8003440:	f000 fba2 	bl	8003b88 <neutralRudders>
			dive();
 8003444:	f000 fb54 	bl	8003af0 <dive>
			verticalCommand=1;
 8003448:	4b14      	ldr	r3, [pc, #80]	@ (800349c <updateControlLoop+0xe4>)
 800344a:	2201      	movs	r2, #1
 800344c:	701a      	strb	r2, [r3, #0]
			horizontalCommand=0;
 800344e:	4b14      	ldr	r3, [pc, #80]	@ (80034a0 <updateControlLoop+0xe8>)
 8003450:	2200      	movs	r2, #0
 8003452:	701a      	strb	r2, [r3, #0]
 8003454:	e01a      	b.n	800348c <updateControlLoop+0xd4>
		}
		else if(joystick.joystickVoltage[1]>JOYSTICK_MAX_THRESHOLD)//surface
 8003456:	4b0f      	ldr	r3, [pc, #60]	@ (8003494 <updateControlLoop+0xdc>)
 8003458:	edd3 7a03 	vldr	s15, [r3, #12]
 800345c:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 8003460:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003468:	dd0e      	ble.n	8003488 <updateControlLoop+0xd0>
		{
			if(horizontalCommand==1)
 800346a:	4b0d      	ldr	r3, [pc, #52]	@ (80034a0 <updateControlLoop+0xe8>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d101      	bne.n	8003476 <updateControlLoop+0xbe>
				neutralRudders();
 8003472:	f000 fb89 	bl	8003b88 <neutralRudders>
			surface();
 8003476:	f000 fb61 	bl	8003b3c <surface>
			verticalCommand=1;
 800347a:	4b08      	ldr	r3, [pc, #32]	@ (800349c <updateControlLoop+0xe4>)
 800347c:	2201      	movs	r2, #1
 800347e:	701a      	strb	r2, [r3, #0]
			horizontalCommand=0;
 8003480:	4b07      	ldr	r3, [pc, #28]	@ (80034a0 <updateControlLoop+0xe8>)
 8003482:	2200      	movs	r2, #0
 8003484:	701a      	strb	r2, [r3, #0]
 8003486:	e001      	b.n	800348c <updateControlLoop+0xd4>
		}
		else
			neutralRudders();
 8003488:	f000 fb7e 	bl	8003b88 <neutralRudders>



	    osDelay(100); // update control loop every 100 ms
 800348c:	2064      	movs	r0, #100	@ 0x64
 800348e:	f00d f8ec 	bl	801066a <osDelay>
		if(joystick.joystickVoltage[0]<JOYSTICK_MIN_THRESHOLD ) // go Right
 8003492:	e795      	b.n	80033c0 <updateControlLoop+0x8>
 8003494:	20002b04 	.word	0x20002b04
 8003498:	3f19999a 	.word	0x3f19999a
 800349c:	20002b9a 	.word	0x20002b9a
 80034a0:	20002b9b 	.word	0x20002b9b

080034a4 <recordSDdata>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_recordSDdata */
void recordSDdata(void const * argument)
{
 80034a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034a8:	b0c8      	sub	sp, #288	@ 0x120
 80034aa:	af04      	add	r7, sp, #16
 80034ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80034b0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80034b4:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN recordSDdata */
  /* Infinite loop */
  for(;;)
  {
		fres = f_mount(&fs, "", 0);
 80034b6:	2200      	movs	r2, #0
 80034b8:	49a3      	ldr	r1, [pc, #652]	@ (8003748 <recordSDdata+0x2a4>)
 80034ba:	48a4      	ldr	r0, [pc, #656]	@ (800374c <recordSDdata+0x2a8>)
 80034bc:	f00b ffe8 	bl	800f490 <f_mount>
 80034c0:	4603      	mov	r3, r0
 80034c2:	461a      	mov	r2, r3
 80034c4:	4ba2      	ldr	r3, [pc, #648]	@ (8003750 <recordSDdata+0x2ac>)
 80034c6:	701a      	strb	r2, [r3, #0]
	  	// Write accelerometer Data
	  	fres = f_mount(&fs, "", 0);
 80034c8:	2200      	movs	r2, #0
 80034ca:	499f      	ldr	r1, [pc, #636]	@ (8003748 <recordSDdata+0x2a4>)
 80034cc:	489f      	ldr	r0, [pc, #636]	@ (800374c <recordSDdata+0x2a8>)
 80034ce:	f00b ffdf 	bl	800f490 <f_mount>
 80034d2:	4603      	mov	r3, r0
 80034d4:	461a      	mov	r2, r3
 80034d6:	4b9e      	ldr	r3, [pc, #632]	@ (8003750 <recordSDdata+0x2ac>)
 80034d8:	701a      	strb	r2, [r3, #0]
	  	fres = f_open(&fil, "accel.csv", FA_OPEN_APPEND | FA_WRITE | FA_READ);
 80034da:	2233      	movs	r2, #51	@ 0x33
 80034dc:	499d      	ldr	r1, [pc, #628]	@ (8003754 <recordSDdata+0x2b0>)
 80034de:	489e      	ldr	r0, [pc, #632]	@ (8003758 <recordSDdata+0x2b4>)
 80034e0:	f00c f83a 	bl	800f558 <f_open>
 80034e4:	4603      	mov	r3, r0
 80034e6:	461a      	mov	r2, r3
 80034e8:	4b99      	ldr	r3, [pc, #612]	@ (8003750 <recordSDdata+0x2ac>)
 80034ea:	701a      	strb	r2, [r3, #0]
	  	fres = f_getfree("", &fre_clust, &pfs);
 80034ec:	4a9b      	ldr	r2, [pc, #620]	@ (800375c <recordSDdata+0x2b8>)
 80034ee:	499c      	ldr	r1, [pc, #624]	@ (8003760 <recordSDdata+0x2bc>)
 80034f0:	4895      	ldr	r0, [pc, #596]	@ (8003748 <recordSDdata+0x2a4>)
 80034f2:	f00c fd78 	bl	800ffe6 <f_getfree>
 80034f6:	4603      	mov	r3, r0
 80034f8:	461a      	mov	r2, r3
 80034fa:	4b95      	ldr	r3, [pc, #596]	@ (8003750 <recordSDdata+0x2ac>)
 80034fc:	701a      	strb	r2, [r3, #0]
	  	char header[50];
	  	sprintf(header,"NEW SET OF ACC. DATA (m/s^2)\n");
 80034fe:	f107 030c 	add.w	r3, r7, #12
 8003502:	4998      	ldr	r1, [pc, #608]	@ (8003764 <recordSDdata+0x2c0>)
 8003504:	4618      	mov	r0, r3
 8003506:	f010 f9bb 	bl	8013880 <siprintf>
	  	char accDataString[50];
	  	sprintf(accDataString, "ax=%3f, ay=%3f, az=%3f\n", mpu6050.acc_mps2[0],  mpu6050.acc_mps2[1],  mpu6050.acc_mps2[2]);
 800350a:	4b97      	ldr	r3, [pc, #604]	@ (8003768 <recordSDdata+0x2c4>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	4618      	mov	r0, r3
 8003510:	f7fd f83a 	bl	8000588 <__aeabi_f2d>
 8003514:	4680      	mov	r8, r0
 8003516:	4689      	mov	r9, r1
 8003518:	4b93      	ldr	r3, [pc, #588]	@ (8003768 <recordSDdata+0x2c4>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	4618      	mov	r0, r3
 800351e:	f7fd f833 	bl	8000588 <__aeabi_f2d>
 8003522:	4604      	mov	r4, r0
 8003524:	460d      	mov	r5, r1
 8003526:	4b90      	ldr	r3, [pc, #576]	@ (8003768 <recordSDdata+0x2c4>)
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	4618      	mov	r0, r3
 800352c:	f7fd f82c 	bl	8000588 <__aeabi_f2d>
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8003538:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800353c:	e9cd 4500 	strd	r4, r5, [sp]
 8003540:	4642      	mov	r2, r8
 8003542:	464b      	mov	r3, r9
 8003544:	4989      	ldr	r1, [pc, #548]	@ (800376c <recordSDdata+0x2c8>)
 8003546:	f010 f99b 	bl	8013880 <siprintf>
	  	if (firstWrite==1)
 800354a:	4b89      	ldr	r3, [pc, #548]	@ (8003770 <recordSDdata+0x2cc>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d105      	bne.n	800355e <recordSDdata+0xba>
	  		f_puts(header,&fil);
 8003552:	f107 030c 	add.w	r3, r7, #12
 8003556:	4980      	ldr	r1, [pc, #512]	@ (8003758 <recordSDdata+0x2b4>)
 8003558:	4618      	mov	r0, r3
 800355a:	f00c fe77 	bl	801024c <f_puts>
	  	f_puts(accDataString, &fil);
 800355e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003562:	497d      	ldr	r1, [pc, #500]	@ (8003758 <recordSDdata+0x2b4>)
 8003564:	4618      	mov	r0, r3
 8003566:	f00c fe71 	bl	801024c <f_puts>
	  	fres = f_close(&fil);
 800356a:	487b      	ldr	r0, [pc, #492]	@ (8003758 <recordSDdata+0x2b4>)
 800356c:	f00c fd0c 	bl	800ff88 <f_close>
 8003570:	4603      	mov	r3, r0
 8003572:	461a      	mov	r2, r3
 8003574:	4b76      	ldr	r3, [pc, #472]	@ (8003750 <recordSDdata+0x2ac>)
 8003576:	701a      	strb	r2, [r3, #0]

	  	// Write Gyro Data
	  	fres = f_open(&fil, "gyro.csv", FA_OPEN_APPEND | FA_WRITE | FA_READ);
 8003578:	2233      	movs	r2, #51	@ 0x33
 800357a:	497e      	ldr	r1, [pc, #504]	@ (8003774 <recordSDdata+0x2d0>)
 800357c:	4876      	ldr	r0, [pc, #472]	@ (8003758 <recordSDdata+0x2b4>)
 800357e:	f00b ffeb 	bl	800f558 <f_open>
 8003582:	4603      	mov	r3, r0
 8003584:	461a      	mov	r2, r3
 8003586:	4b72      	ldr	r3, [pc, #456]	@ (8003750 <recordSDdata+0x2ac>)
 8003588:	701a      	strb	r2, [r3, #0]
	  	fres = f_getfree("", &fre_clust, &pfs);
 800358a:	4a74      	ldr	r2, [pc, #464]	@ (800375c <recordSDdata+0x2b8>)
 800358c:	4974      	ldr	r1, [pc, #464]	@ (8003760 <recordSDdata+0x2bc>)
 800358e:	486e      	ldr	r0, [pc, #440]	@ (8003748 <recordSDdata+0x2a4>)
 8003590:	f00c fd29 	bl	800ffe6 <f_getfree>
 8003594:	4603      	mov	r3, r0
 8003596:	461a      	mov	r2, r3
 8003598:	4b6d      	ldr	r3, [pc, #436]	@ (8003750 <recordSDdata+0x2ac>)
 800359a:	701a      	strb	r2, [r3, #0]
		sprintf(header,"NEW SET OF GYRO DATA (m/s)\n");
 800359c:	f107 030c 	add.w	r3, r7, #12
 80035a0:	4975      	ldr	r1, [pc, #468]	@ (8003778 <recordSDdata+0x2d4>)
 80035a2:	4618      	mov	r0, r3
 80035a4:	f010 f96c 	bl	8013880 <siprintf>
		char gyroDataString[50];
		if (firstWrite==1)
 80035a8:	4b71      	ldr	r3, [pc, #452]	@ (8003770 <recordSDdata+0x2cc>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d105      	bne.n	80035bc <recordSDdata+0x118>
			f_puts(header,&fil);
 80035b0:	f107 030c 	add.w	r3, r7, #12
 80035b4:	4968      	ldr	r1, [pc, #416]	@ (8003758 <recordSDdata+0x2b4>)
 80035b6:	4618      	mov	r0, r3
 80035b8:	f00c fe48 	bl	801024c <f_puts>
		sprintf(gyroDataString, "gx=%3f, gy=%3f, gz=%3f\n", mpu6050.gyr_rps[0],  mpu6050.gyr_rps[1],  mpu6050.gyr_rps[2]);
 80035bc:	4b6a      	ldr	r3, [pc, #424]	@ (8003768 <recordSDdata+0x2c4>)
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fc ffe1 	bl	8000588 <__aeabi_f2d>
 80035c6:	4680      	mov	r8, r0
 80035c8:	4689      	mov	r9, r1
 80035ca:	4b67      	ldr	r3, [pc, #412]	@ (8003768 <recordSDdata+0x2c4>)
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fc ffda 	bl	8000588 <__aeabi_f2d>
 80035d4:	4604      	mov	r4, r0
 80035d6:	460d      	mov	r5, r1
 80035d8:	4b63      	ldr	r3, [pc, #396]	@ (8003768 <recordSDdata+0x2c4>)
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fc ffd3 	bl	8000588 <__aeabi_f2d>
 80035e2:	4602      	mov	r2, r0
 80035e4:	460b      	mov	r3, r1
 80035e6:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 80035ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80035ee:	e9cd 4500 	strd	r4, r5, [sp]
 80035f2:	4642      	mov	r2, r8
 80035f4:	464b      	mov	r3, r9
 80035f6:	4961      	ldr	r1, [pc, #388]	@ (800377c <recordSDdata+0x2d8>)
 80035f8:	f010 f942 	bl	8013880 <siprintf>
		f_puts(gyroDataString, &fil);
 80035fc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003600:	4955      	ldr	r1, [pc, #340]	@ (8003758 <recordSDdata+0x2b4>)
 8003602:	4618      	mov	r0, r3
 8003604:	f00c fe22 	bl	801024c <f_puts>
		fres = f_close(&fil);
 8003608:	4853      	ldr	r0, [pc, #332]	@ (8003758 <recordSDdata+0x2b4>)
 800360a:	f00c fcbd 	bl	800ff88 <f_close>
 800360e:	4603      	mov	r3, r0
 8003610:	461a      	mov	r2, r3
 8003612:	4b4f      	ldr	r3, [pc, #316]	@ (8003750 <recordSDdata+0x2ac>)
 8003614:	701a      	strb	r2, [r3, #0]

		// Write Bar30  data
		fres = f_open(&fil, "Bar30.csv", FA_OPEN_APPEND | FA_WRITE | FA_READ);
 8003616:	2233      	movs	r2, #51	@ 0x33
 8003618:	4959      	ldr	r1, [pc, #356]	@ (8003780 <recordSDdata+0x2dc>)
 800361a:	484f      	ldr	r0, [pc, #316]	@ (8003758 <recordSDdata+0x2b4>)
 800361c:	f00b ff9c 	bl	800f558 <f_open>
 8003620:	4603      	mov	r3, r0
 8003622:	461a      	mov	r2, r3
 8003624:	4b4a      	ldr	r3, [pc, #296]	@ (8003750 <recordSDdata+0x2ac>)
 8003626:	701a      	strb	r2, [r3, #0]
		fres = f_getfree("", &fre_clust, &pfs);
 8003628:	4a4c      	ldr	r2, [pc, #304]	@ (800375c <recordSDdata+0x2b8>)
 800362a:	494d      	ldr	r1, [pc, #308]	@ (8003760 <recordSDdata+0x2bc>)
 800362c:	4846      	ldr	r0, [pc, #280]	@ (8003748 <recordSDdata+0x2a4>)
 800362e:	f00c fcda 	bl	800ffe6 <f_getfree>
 8003632:	4603      	mov	r3, r0
 8003634:	461a      	mov	r2, r3
 8003636:	4b46      	ldr	r3, [pc, #280]	@ (8003750 <recordSDdata+0x2ac>)
 8003638:	701a      	strb	r2, [r3, #0]
		sprintf(header,"NEW SET OF BAR30 DEPTH DATA (m)\n");
 800363a:	f107 030c 	add.w	r3, r7, #12
 800363e:	4951      	ldr	r1, [pc, #324]	@ (8003784 <recordSDdata+0x2e0>)
 8003640:	4618      	mov	r0, r3
 8003642:	f010 f91d 	bl	8013880 <siprintf>
		char Bar30DataString[50];
		if (firstWrite==1)
 8003646:	4b4a      	ldr	r3, [pc, #296]	@ (8003770 <recordSDdata+0x2cc>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d105      	bne.n	800365a <recordSDdata+0x1b6>
			f_puts(header,&fil);
 800364e:	f107 030c 	add.w	r3, r7, #12
 8003652:	4941      	ldr	r1, [pc, #260]	@ (8003758 <recordSDdata+0x2b4>)
 8003654:	4618      	mov	r0, r3
 8003656:	f00c fdf9 	bl	801024c <f_puts>
		sprintf(Bar30DataString, "Depth(m)=%3f, Pressure(mbar)=%5f\n", pressureSensor.depth, pressureSensor.pressure_mbar);
 800365a:	4b4b      	ldr	r3, [pc, #300]	@ (8003788 <recordSDdata+0x2e4>)
 800365c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800365e:	4618      	mov	r0, r3
 8003660:	f7fc ff92 	bl	8000588 <__aeabi_f2d>
 8003664:	4604      	mov	r4, r0
 8003666:	460d      	mov	r5, r1
 8003668:	4b47      	ldr	r3, [pc, #284]	@ (8003788 <recordSDdata+0x2e4>)
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	4618      	mov	r0, r3
 800366e:	f7fc ff8b 	bl	8000588 <__aeabi_f2d>
 8003672:	4602      	mov	r2, r0
 8003674:	460b      	mov	r3, r1
 8003676:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 800367a:	e9cd 2300 	strd	r2, r3, [sp]
 800367e:	4622      	mov	r2, r4
 8003680:	462b      	mov	r3, r5
 8003682:	4942      	ldr	r1, [pc, #264]	@ (800378c <recordSDdata+0x2e8>)
 8003684:	f010 f8fc 	bl	8013880 <siprintf>
		f_puts(Bar30DataString, &fil);
 8003688:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800368c:	4932      	ldr	r1, [pc, #200]	@ (8003758 <recordSDdata+0x2b4>)
 800368e:	4618      	mov	r0, r3
 8003690:	f00c fddc 	bl	801024c <f_puts>
		fres = f_close(&fil);
 8003694:	4830      	ldr	r0, [pc, #192]	@ (8003758 <recordSDdata+0x2b4>)
 8003696:	f00c fc77 	bl	800ff88 <f_close>
 800369a:	4603      	mov	r3, r0
 800369c:	461a      	mov	r2, r3
 800369e:	4b2c      	ldr	r3, [pc, #176]	@ (8003750 <recordSDdata+0x2ac>)
 80036a0:	701a      	strb	r2, [r3, #0]

		// Write roll pitch data
		fres = f_open(&fil, "RP.csv", FA_OPEN_APPEND | FA_WRITE | FA_READ);
 80036a2:	2233      	movs	r2, #51	@ 0x33
 80036a4:	493a      	ldr	r1, [pc, #232]	@ (8003790 <recordSDdata+0x2ec>)
 80036a6:	482c      	ldr	r0, [pc, #176]	@ (8003758 <recordSDdata+0x2b4>)
 80036a8:	f00b ff56 	bl	800f558 <f_open>
 80036ac:	4603      	mov	r3, r0
 80036ae:	461a      	mov	r2, r3
 80036b0:	4b27      	ldr	r3, [pc, #156]	@ (8003750 <recordSDdata+0x2ac>)
 80036b2:	701a      	strb	r2, [r3, #0]
		fres = f_getfree("", &fre_clust, &pfs);
 80036b4:	4a29      	ldr	r2, [pc, #164]	@ (800375c <recordSDdata+0x2b8>)
 80036b6:	492a      	ldr	r1, [pc, #168]	@ (8003760 <recordSDdata+0x2bc>)
 80036b8:	4823      	ldr	r0, [pc, #140]	@ (8003748 <recordSDdata+0x2a4>)
 80036ba:	f00c fc94 	bl	800ffe6 <f_getfree>
 80036be:	4603      	mov	r3, r0
 80036c0:	461a      	mov	r2, r3
 80036c2:	4b23      	ldr	r3, [pc, #140]	@ (8003750 <recordSDdata+0x2ac>)
 80036c4:	701a      	strb	r2, [r3, #0]
		sprintf(header,"NEW SET OF ROLL PITCH DATA (deg)\n");
 80036c6:	f107 030c 	add.w	r3, r7, #12
 80036ca:	4932      	ldr	r1, [pc, #200]	@ (8003794 <recordSDdata+0x2f0>)
 80036cc:	4618      	mov	r0, r3
 80036ce:	f010 f8d7 	bl	8013880 <siprintf>
		char RPDataString[50];
		if (firstWrite==1)
 80036d2:	4b27      	ldr	r3, [pc, #156]	@ (8003770 <recordSDdata+0x2cc>)
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d105      	bne.n	80036e6 <recordSDdata+0x242>
			f_puts(header,&fil);
 80036da:	f107 030c 	add.w	r3, r7, #12
 80036de:	491e      	ldr	r1, [pc, #120]	@ (8003758 <recordSDdata+0x2b4>)
 80036e0:	4618      	mov	r0, r3
 80036e2:	f00c fdb3 	bl	801024c <f_puts>
		sprintf(RPDataString, "Roll=%3f, Pitch=%3f\n",phiHat_deg, thetaHat_deg);
 80036e6:	4b2c      	ldr	r3, [pc, #176]	@ (8003798 <recordSDdata+0x2f4>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7fc ff4c 	bl	8000588 <__aeabi_f2d>
 80036f0:	4604      	mov	r4, r0
 80036f2:	460d      	mov	r5, r1
 80036f4:	4b29      	ldr	r3, [pc, #164]	@ (800379c <recordSDdata+0x2f8>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7fc ff45 	bl	8000588 <__aeabi_f2d>
 80036fe:	4602      	mov	r2, r0
 8003700:	460b      	mov	r3, r1
 8003702:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 8003706:	e9cd 2300 	strd	r2, r3, [sp]
 800370a:	4622      	mov	r2, r4
 800370c:	462b      	mov	r3, r5
 800370e:	4924      	ldr	r1, [pc, #144]	@ (80037a0 <recordSDdata+0x2fc>)
 8003710:	f010 f8b6 	bl	8013880 <siprintf>
		f_puts(RPDataString, &fil);
 8003714:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003718:	490f      	ldr	r1, [pc, #60]	@ (8003758 <recordSDdata+0x2b4>)
 800371a:	4618      	mov	r0, r3
 800371c:	f00c fd96 	bl	801024c <f_puts>
		fres = f_close(&fil);
 8003720:	480d      	ldr	r0, [pc, #52]	@ (8003758 <recordSDdata+0x2b4>)
 8003722:	f00c fc31 	bl	800ff88 <f_close>
 8003726:	4603      	mov	r3, r0
 8003728:	461a      	mov	r2, r3
 800372a:	4b09      	ldr	r3, [pc, #36]	@ (8003750 <recordSDdata+0x2ac>)
 800372c:	701a      	strb	r2, [r3, #0]

//
	  	f_mount(NULL, "", 1);
 800372e:	2201      	movs	r2, #1
 8003730:	4905      	ldr	r1, [pc, #20]	@ (8003748 <recordSDdata+0x2a4>)
 8003732:	2000      	movs	r0, #0
 8003734:	f00b feac 	bl	800f490 <f_mount>
	  	firstWrite=0;
 8003738:	4b0d      	ldr	r3, [pc, #52]	@ (8003770 <recordSDdata+0x2cc>)
 800373a:	2200      	movs	r2, #0
 800373c:	701a      	strb	r2, [r3, #0]

    osDelay(2000); // write SD card data every 2 seconds
 800373e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003742:	f00c ff92 	bl	801066a <osDelay>
  {
 8003746:	e6b6      	b.n	80034b6 <recordSDdata+0x12>
 8003748:	08016dd4 	.word	0x08016dd4
 800374c:	2000050c 	.word	0x2000050c
 8003750:	2000257c 	.word	0x2000257c
 8003754:	08016dd8 	.word	0x08016dd8
 8003758:	2000154c 	.word	0x2000154c
 800375c:	20001548 	.word	0x20001548
 8003760:	20002580 	.word	0x20002580
 8003764:	08016de4 	.word	0x08016de4
 8003768:	20002b1c 	.word	0x20002b1c
 800376c:	08016e04 	.word	0x08016e04
 8003770:	20000001 	.word	0x20000001
 8003774:	08016e1c 	.word	0x08016e1c
 8003778:	08016e28 	.word	0x08016e28
 800377c:	08016e44 	.word	0x08016e44
 8003780:	08016e5c 	.word	0x08016e5c
 8003784:	08016e68 	.word	0x08016e68
 8003788:	20002b68 	.word	0x20002b68
 800378c:	08016e8c 	.word	0x08016e8c
 8003790:	08016eb0 	.word	0x08016eb0
 8003794:	08016eb8 	.word	0x08016eb8
 8003798:	200025ac 	.word	0x200025ac
 800379c:	200025b0 	.word	0x200025b0
 80037a0:	08016edc 	.word	0x08016edc

080037a4 <getBar30Data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_getBar30Data */
void getBar30Data(void const * argument)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN getBar30Data */
  /* Infinite loop */
	static uint8_t i2cGood=1;
  for(;;)
  {
	i2cGood=Bar30getData(&pressureSensor);
 80037ac:	4805      	ldr	r0, [pc, #20]	@ (80037c4 <getBar30Data+0x20>)
 80037ae:	f7fd fc99 	bl	80010e4 <Bar30getData>
 80037b2:	4603      	mov	r3, r0
 80037b4:	461a      	mov	r2, r3
 80037b6:	4b04      	ldr	r3, [pc, #16]	@ (80037c8 <getBar30Data+0x24>)
 80037b8:	701a      	strb	r2, [r3, #0]
    osDelay(250);
 80037ba:	20fa      	movs	r0, #250	@ 0xfa
 80037bc:	f00c ff55 	bl	801066a <osDelay>
	i2cGood=Bar30getData(&pressureSensor);
 80037c0:	bf00      	nop
 80037c2:	e7f3      	b.n	80037ac <getBar30Data+0x8>
 80037c4:	20002b68 	.word	0x20002b68
 80037c8:	20000002 	.word	0x20000002

080037cc <EKFpredict>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_EKFpredict */
void EKFpredict(void const * argument)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	ed2d 8b02 	vpush	{d8}
 80037d2:	b090      	sub	sp, #64	@ 0x40
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 for(;;)
  {
//	if(mpu6050.gyr_rps[0]!=0.0f && mpu6050.gyr_rps[1]!=0.0f&& mpu6050.gyr_rps[2]!=0.0f)
//		EKF_Predict(&ekf,mpu6050.gyr_rps[0], mpu6050.gyr_rps[1], mpu6050.gyr_rps[2], (float)KALMAN_PREDICT_PERIOD_MS/1000.0f);
//    osDelay(KALMAN_PREDICT_PERIOD_MS);
	 const float G_MPS2=9.8100000f;
 80037d8:	4b87      	ldr	r3, [pc, #540]	@ (80039f8 <EKFpredict+0x22c>)
 80037da:	63fb      	str	r3, [r7, #60]	@ 0x3c
	 const float SAMPLE_TIME_MS = 50;
 80037dc:	4b87      	ldr	r3, [pc, #540]	@ (80039fc <EKFpredict+0x230>)
 80037de:	63bb      	str	r3, [r7, #56]	@ 0x38
	 const float COMP_FILT_ALPHA = 0.05000000f;
 80037e0:	4b87      	ldr	r3, [pc, #540]	@ (8003a00 <EKFpredict+0x234>)
 80037e2:	637b      	str	r3, [r7, #52]	@ 0x34

	 //accelerometer measurements
	 float ax_mps2=mpu6050.acc_mps2[0];
 80037e4:	4b87      	ldr	r3, [pc, #540]	@ (8003a04 <EKFpredict+0x238>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	633b      	str	r3, [r7, #48]	@ 0x30
	 float ay_mps2=mpu6050.acc_mps2[1];
 80037ea:	4b86      	ldr	r3, [pc, #536]	@ (8003a04 <EKFpredict+0x238>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
	 float az_mps2=mpu6050.acc_mps2[2];
 80037f0:	4b84      	ldr	r3, [pc, #528]	@ (8003a04 <EKFpredict+0x238>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	62bb      	str	r3, [r7, #40]	@ 0x28

	 // estimate angles with accelero measurements
	 if( ax_mps2!=0 && ay_mps2!=0 && az_mps2!=0){
 80037f6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80037fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80037fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003802:	f000 80ef 	beq.w	80039e4 <EKFpredict+0x218>
 8003806:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800380a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800380e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003812:	f000 80e7 	beq.w	80039e4 <EKFpredict+0x218>
 8003816:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800381a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800381e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003822:	f000 80df 	beq.w	80039e4 <EKFpredict+0x218>
		 float phiHat_acc_rad=atanf(ay_mps2/az_mps2);
 8003826:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800382a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800382e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003832:	eeb0 0a66 	vmov.f32	s0, s13
 8003836:	f012 f9d3 	bl	8015be0 <atanf>
 800383a:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
		 float thetaHat_acc_rad=asinf(ax_mps2/G_MPS2);
 800383e:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003842:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003846:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800384a:	eeb0 0a66 	vmov.f32	s0, s13
 800384e:	f012 f99b 	bl	8015b88 <asinf>
 8003852:	ed87 0a08 	vstr	s0, [r7, #32]


		 // gyro measurements
		 float p_rps=mpu6050.gyr_rps[0];
 8003856:	4b6b      	ldr	r3, [pc, #428]	@ (8003a04 <EKFpredict+0x238>)
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	61fb      	str	r3, [r7, #28]
		 float q_rps=mpu6050.gyr_rps[1];
 800385c:	4b69      	ldr	r3, [pc, #420]	@ (8003a04 <EKFpredict+0x238>)
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	61bb      	str	r3, [r7, #24]
		 float r_rps=mpu6050.gyr_rps[2];
 8003862:	4b68      	ldr	r3, [pc, #416]	@ (8003a04 <EKFpredict+0x238>)
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	617b      	str	r3, [r7, #20]

		 // Body to Euler rates
		 float phiDot_rps=p_rps+tanf(thetaHat_rad)*(sinf(phiHat_rad)*q_rps + cosf(phiHat_rad)*r_rps);
 8003868:	4b67      	ldr	r3, [pc, #412]	@ (8003a08 <EKFpredict+0x23c>)
 800386a:	edd3 7a00 	vldr	s15, [r3]
 800386e:	eeb0 0a67 	vmov.f32	s0, s15
 8003872:	f012 fb1b 	bl	8015eac <tanf>
 8003876:	eef0 8a40 	vmov.f32	s17, s0
 800387a:	4b64      	ldr	r3, [pc, #400]	@ (8003a0c <EKFpredict+0x240>)
 800387c:	edd3 7a00 	vldr	s15, [r3]
 8003880:	eeb0 0a67 	vmov.f32	s0, s15
 8003884:	f012 facc 	bl	8015e20 <sinf>
 8003888:	eeb0 7a40 	vmov.f32	s14, s0
 800388c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003890:	ee27 8a27 	vmul.f32	s16, s14, s15
 8003894:	4b5d      	ldr	r3, [pc, #372]	@ (8003a0c <EKFpredict+0x240>)
 8003896:	edd3 7a00 	vldr	s15, [r3]
 800389a:	eeb0 0a67 	vmov.f32	s0, s15
 800389e:	f012 fa73 	bl	8015d88 <cosf>
 80038a2:	eeb0 7a40 	vmov.f32	s14, s0
 80038a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80038aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ae:	ee78 7a27 	vadd.f32	s15, s16, s15
 80038b2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80038b6:	ed97 7a07 	vldr	s14, [r7, #28]
 80038ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038be:	edc7 7a04 	vstr	s15, [r7, #16]
		 float thetaDot_rps = cosf(phiHat_rad)*q_rps - sinf(phiHat_rad) * r_rps;
 80038c2:	4b52      	ldr	r3, [pc, #328]	@ (8003a0c <EKFpredict+0x240>)
 80038c4:	edd3 7a00 	vldr	s15, [r3]
 80038c8:	eeb0 0a67 	vmov.f32	s0, s15
 80038cc:	f012 fa5c 	bl	8015d88 <cosf>
 80038d0:	eeb0 7a40 	vmov.f32	s14, s0
 80038d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80038d8:	ee27 8a27 	vmul.f32	s16, s14, s15
 80038dc:	4b4b      	ldr	r3, [pc, #300]	@ (8003a0c <EKFpredict+0x240>)
 80038de:	edd3 7a00 	vldr	s15, [r3]
 80038e2:	eeb0 0a67 	vmov.f32	s0, s15
 80038e6:	f012 fa9b 	bl	8015e20 <sinf>
 80038ea:	eeb0 7a40 	vmov.f32	s14, s0
 80038ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80038f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038f6:	ee78 7a67 	vsub.f32	s15, s16, s15
 80038fa:	edc7 7a03 	vstr	s15, [r7, #12]

		 // Combine accelerometer and gyro readings to get better estimate of roll and pitch

		 phiHat_rad= COMP_FILT_ALPHA*phiHat_acc_rad+(1.0f - COMP_FILT_ALPHA)*(phiHat_rad + (SAMPLE_TIME_MS/1000.0f)*phiDot_rps);
 80038fe:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003902:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003906:	ee27 7a27 	vmul.f32	s14, s14, s15
 800390a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800390e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003912:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003916:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800391a:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8003a10 <EKFpredict+0x244>
 800391e:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8003922:	edd7 7a04 	vldr	s15, [r7, #16]
 8003926:	ee26 6a27 	vmul.f32	s12, s12, s15
 800392a:	4b38      	ldr	r3, [pc, #224]	@ (8003a0c <EKFpredict+0x240>)
 800392c:	edd3 7a00 	vldr	s15, [r3]
 8003930:	ee76 7a27 	vadd.f32	s15, s12, s15
 8003934:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003938:	ee77 7a27 	vadd.f32	s15, s14, s15
 800393c:	4b33      	ldr	r3, [pc, #204]	@ (8003a0c <EKFpredict+0x240>)
 800393e:	edc3 7a00 	vstr	s15, [r3]

		 thetaHat_rad=COMP_FILT_ALPHA*thetaHat_acc_rad+(1.0f-COMP_FILT_ALPHA)*(thetaHat_rad+(SAMPLE_TIME_MS/1000.0f)*thetaDot_rps);
 8003942:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003946:	edd7 7a08 	vldr	s15, [r7, #32]
 800394a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800394e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003952:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003956:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800395a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800395e:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8003a10 <EKFpredict+0x244>
 8003962:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8003966:	edd7 7a03 	vldr	s15, [r7, #12]
 800396a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800396e:	4b26      	ldr	r3, [pc, #152]	@ (8003a08 <EKFpredict+0x23c>)
 8003970:	edd3 7a00 	vldr	s15, [r3]
 8003974:	ee76 7a27 	vadd.f32	s15, s12, s15
 8003978:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800397c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003980:	4b21      	ldr	r3, [pc, #132]	@ (8003a08 <EKFpredict+0x23c>)
 8003982:	edc3 7a00 	vstr	s15, [r3]

		 phiHat_deg=phiHat_rad*RAD_TO_DEG;
 8003986:	4b21      	ldr	r3, [pc, #132]	@ (8003a0c <EKFpredict+0x240>)
 8003988:	edd3 7a00 	vldr	s15, [r3]
 800398c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8003a14 <EKFpredict+0x248>
 8003990:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003994:	4b20      	ldr	r3, [pc, #128]	@ (8003a18 <EKFpredict+0x24c>)
 8003996:	edc3 7a00 	vstr	s15, [r3]
		 thetaHat_deg=thetaHat_rad*RAD_TO_DEG;
 800399a:	4b1b      	ldr	r3, [pc, #108]	@ (8003a08 <EKFpredict+0x23c>)
 800399c:	edd3 7a00 	vldr	s15, [r3]
 80039a0:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8003a14 <EKFpredict+0x248>
 80039a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039a8:	4b1c      	ldr	r3, [pc, #112]	@ (8003a1c <EKFpredict+0x250>)
 80039aa:	edc3 7a00 	vstr	s15, [r3]

		 if(ax_mps2>0.07f)
 80039ae:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80039b2:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8003a20 <EKFpredict+0x254>
 80039b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039be:	dd11      	ble.n	80039e4 <EKFpredict+0x218>
			 velocity=velocity+(SAMPLE_TIME_MS/1000.0f)*ax_mps2;
 80039c0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80039c4:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8003a10 <EKFpredict+0x244>
 80039c8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80039cc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80039d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039d4:	4b13      	ldr	r3, [pc, #76]	@ (8003a24 <EKFpredict+0x258>)
 80039d6:	edd3 7a00 	vldr	s15, [r3]
 80039da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039de:	4b11      	ldr	r3, [pc, #68]	@ (8003a24 <EKFpredict+0x258>)
 80039e0:	edc3 7a00 	vstr	s15, [r3]

	 }

	 osDelay(SAMPLE_TIME_MS);
 80039e4:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80039e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039ec:	ee17 0a90 	vmov	r0, s15
 80039f0:	f00c fe3b 	bl	801066a <osDelay>
  {
 80039f4:	e6f0      	b.n	80037d8 <EKFpredict+0xc>
 80039f6:	bf00      	nop
 80039f8:	411cf5c3 	.word	0x411cf5c3
 80039fc:	42480000 	.word	0x42480000
 8003a00:	3d4ccccd 	.word	0x3d4ccccd
 8003a04:	20002b1c 	.word	0x20002b1c
 8003a08:	200025a8 	.word	0x200025a8
 8003a0c:	200025a4 	.word	0x200025a4
 8003a10:	447a0000 	.word	0x447a0000
 8003a14:	42652ee1 	.word	0x42652ee1
 8003a18:	200025ac 	.word	0x200025ac
 8003a1c:	200025b0 	.word	0x200025b0
 8003a20:	3d8f5c29 	.word	0x3d8f5c29
 8003a24:	200025a0 	.word	0x200025a0

08003a28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a04      	ldr	r2, [pc, #16]	@ (8003a48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d101      	bne.n	8003a3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003a3a:	f000 ff2b 	bl	8004894 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003a3e:	bf00      	nop
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40010000 	.word	0x40010000

08003a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a50:	b672      	cpsid	i
}
 8003a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a54:	bf00      	nop
 8003a56:	e7fd      	b.n	8003a54 <Error_Handler+0x8>

08003a58 <turnRight>:




void turnRight()
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
	//if(htim3.Instance->CCR1>=SERVO_MIN_PWM+SERVO_ANGLE_VARIATION)
		htim3.Instance->CCR1-=SERVO_ANGLE_VARIATION;
 8003a5c:	4b10      	ldr	r3, [pc, #64]	@ (8003aa0 <turnRight+0x48>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a62:	4b0f      	ldr	r3, [pc, #60]	@ (8003aa0 <turnRight+0x48>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	3afa      	subs	r2, #250	@ 0xfa
 8003a68:	635a      	str	r2, [r3, #52]	@ 0x34

	//if(htim3.Instance->CCR2>=SERVO_MIN_PWM+SERVO_ANGLE_VARIATION)
		htim3.Instance->CCR2-=SERVO_ANGLE_VARIATION;
 8003a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa0 <turnRight+0x48>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a70:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa0 <turnRight+0x48>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	3afa      	subs	r2, #250	@ 0xfa
 8003a76:	639a      	str	r2, [r3, #56]	@ 0x38

	//if(htim3.Instance->CCR3<=SERVO_MAX_PWM-SERVO_ANGLE_VARIATION)
		htim3.Instance->CCR3+=SERVO_ANGLE_VARIATION;
 8003a78:	4b09      	ldr	r3, [pc, #36]	@ (8003aa0 <turnRight+0x48>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a7e:	4b08      	ldr	r3, [pc, #32]	@ (8003aa0 <turnRight+0x48>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	32fa      	adds	r2, #250	@ 0xfa
 8003a84:	63da      	str	r2, [r3, #60]	@ 0x3c

	//if(htim3.Instance->CCR4<=SERVO_MAX_PWM-SERVO_ANGLE_VARIATION)
		htim3.Instance->CCR4+=SERVO_ANGLE_VARIATION;
 8003a86:	4b06      	ldr	r3, [pc, #24]	@ (8003aa0 <turnRight+0x48>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a8c:	4b04      	ldr	r3, [pc, #16]	@ (8003aa0 <turnRight+0x48>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	32fa      	adds	r2, #250	@ 0xfa
 8003a92:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003a94:	bf00      	nop
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	200028b4 	.word	0x200028b4

08003aa4 <turnLeft>:

void turnLeft()
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
	//if(htim3.Instance->CCR1<=SERVO_MAX_PWM-SERVO_ANGLE_VARIATION)
		htim3.Instance->CCR1+=SERVO_ANGLE_VARIATION;
 8003aa8:	4b10      	ldr	r3, [pc, #64]	@ (8003aec <turnLeft+0x48>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003aae:	4b0f      	ldr	r3, [pc, #60]	@ (8003aec <turnLeft+0x48>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	32fa      	adds	r2, #250	@ 0xfa
 8003ab4:	635a      	str	r2, [r3, #52]	@ 0x34

	//if(htim3.Instance->CCR2<=SERVO_MAX_PWM-SERVO_ANGLE_VARIATION)
		htim3.Instance->CCR2+=SERVO_ANGLE_VARIATION;
 8003ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8003aec <turnLeft+0x48>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003abc:	4b0b      	ldr	r3, [pc, #44]	@ (8003aec <turnLeft+0x48>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	32fa      	adds	r2, #250	@ 0xfa
 8003ac2:	639a      	str	r2, [r3, #56]	@ 0x38

	//if(htim3.Instance->CCR3>=SERVO_MIN_PWM+SERVO_ANGLE_VARIATION)
		htim3.Instance->CCR3-=SERVO_ANGLE_VARIATION;
 8003ac4:	4b09      	ldr	r3, [pc, #36]	@ (8003aec <turnLeft+0x48>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003aca:	4b08      	ldr	r3, [pc, #32]	@ (8003aec <turnLeft+0x48>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	3afa      	subs	r2, #250	@ 0xfa
 8003ad0:	63da      	str	r2, [r3, #60]	@ 0x3c

	//if(htim3.Instance->CCR4>=SERVO_MIN_PWM+SERVO_ANGLE_VARIATION)
		htim3.Instance->CCR4-=SERVO_ANGLE_VARIATION;
 8003ad2:	4b06      	ldr	r3, [pc, #24]	@ (8003aec <turnLeft+0x48>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ad8:	4b04      	ldr	r3, [pc, #16]	@ (8003aec <turnLeft+0x48>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	3afa      	subs	r2, #250	@ 0xfa
 8003ade:	641a      	str	r2, [r3, #64]	@ 0x40

}
 8003ae0:	bf00      	nop
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	200028b4 	.word	0x200028b4

08003af0 <dive>:
void dive()
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
	//if(htim3.Instance->CCR1>=SERVO_MIN_PWM+SERVO_ANGLE_VARIATION)
		htim3.Instance->CCR1-=SERVO_ANGLE_VARIATION;
 8003af4:	4b10      	ldr	r3, [pc, #64]	@ (8003b38 <dive+0x48>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003afa:	4b0f      	ldr	r3, [pc, #60]	@ (8003b38 <dive+0x48>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	3afa      	subs	r2, #250	@ 0xfa
 8003b00:	635a      	str	r2, [r3, #52]	@ 0x34
	//if(htim3.Instance->CCR2<=SERVO_MAX_PWM-SERVO_ANGLE_VARIATION)
		htim3.Instance->CCR2+=SERVO_ANGLE_VARIATION;
 8003b02:	4b0d      	ldr	r3, [pc, #52]	@ (8003b38 <dive+0x48>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b08:	4b0b      	ldr	r3, [pc, #44]	@ (8003b38 <dive+0x48>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	32fa      	adds	r2, #250	@ 0xfa
 8003b0e:	639a      	str	r2, [r3, #56]	@ 0x38
	//if(htim3.Instance->CCR3>=SERVO_MIN_PWM+SERVO_ANGLE_VARIATION)
		htim3.Instance->CCR3-=SERVO_ANGLE_VARIATION;
 8003b10:	4b09      	ldr	r3, [pc, #36]	@ (8003b38 <dive+0x48>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b16:	4b08      	ldr	r3, [pc, #32]	@ (8003b38 <dive+0x48>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	3afa      	subs	r2, #250	@ 0xfa
 8003b1c:	63da      	str	r2, [r3, #60]	@ 0x3c
	//if(htim3.Instance->CCR4<=SERVO_MAX_PWM-SERVO_ANGLE_VARIATION)
		htim3.Instance->CCR4+=SERVO_ANGLE_VARIATION;
 8003b1e:	4b06      	ldr	r3, [pc, #24]	@ (8003b38 <dive+0x48>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b24:	4b04      	ldr	r3, [pc, #16]	@ (8003b38 <dive+0x48>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	32fa      	adds	r2, #250	@ 0xfa
 8003b2a:	641a      	str	r2, [r3, #64]	@ 0x40

}
 8003b2c:	bf00      	nop
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	200028b4 	.word	0x200028b4

08003b3c <surface>:
void surface()
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
	//if(htim3.Instance->CCR1<=SERVO_MAX_PWM-SERVO_ANGLE_VARIATION)
		htim3.Instance->CCR1+=SERVO_ANGLE_VARIATION;
 8003b40:	4b10      	ldr	r3, [pc, #64]	@ (8003b84 <surface+0x48>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b46:	4b0f      	ldr	r3, [pc, #60]	@ (8003b84 <surface+0x48>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	32fa      	adds	r2, #250	@ 0xfa
 8003b4c:	635a      	str	r2, [r3, #52]	@ 0x34
	//if(htim3.Instance->CCR2>=SERVO_MIN_PWM+SERVO_ANGLE_VARIATION)
		htim3.Instance->CCR2-=SERVO_ANGLE_VARIATION;
 8003b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b84 <surface+0x48>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b54:	4b0b      	ldr	r3, [pc, #44]	@ (8003b84 <surface+0x48>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	3afa      	subs	r2, #250	@ 0xfa
 8003b5a:	639a      	str	r2, [r3, #56]	@ 0x38
	//if(htim3.Instance->CCR3<=SERVO_MAX_PWM-SERVO_ANGLE_VARIATION)
		htim3.Instance->CCR3+=SERVO_ANGLE_VARIATION;
 8003b5c:	4b09      	ldr	r3, [pc, #36]	@ (8003b84 <surface+0x48>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b62:	4b08      	ldr	r3, [pc, #32]	@ (8003b84 <surface+0x48>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	32fa      	adds	r2, #250	@ 0xfa
 8003b68:	63da      	str	r2, [r3, #60]	@ 0x3c
	//if(htim3.Instance->CCR4>=SERVO_MIN_PWM+SERVO_ANGLE_VARIATION)
		htim3.Instance->CCR4-=SERVO_ANGLE_VARIATION;
 8003b6a:	4b06      	ldr	r3, [pc, #24]	@ (8003b84 <surface+0x48>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b70:	4b04      	ldr	r3, [pc, #16]	@ (8003b84 <surface+0x48>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3afa      	subs	r2, #250	@ 0xfa
 8003b76:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003b78:	bf00      	nop
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	200028b4 	.word	0x200028b4

08003b88 <neutralRudders>:
void neutralRudders()
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
	htim3.Instance->CCR1=SERVO_CENTER_PWM;
 8003b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8003bc0 <neutralRudders+0x38>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8003b94:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3.Instance->CCR2=SERVO_CENTER_PWM;
 8003b96:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc0 <neutralRudders+0x38>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8003b9e:	639a      	str	r2, [r3, #56]	@ 0x38
	htim3.Instance->CCR3=SERVO_CENTER_PWM;
 8003ba0:	4b07      	ldr	r3, [pc, #28]	@ (8003bc0 <neutralRudders+0x38>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8003ba8:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim3.Instance->CCR4=SERVO_CENTER_PWM;
 8003baa:	4b05      	ldr	r3, [pc, #20]	@ (8003bc0 <neutralRudders+0x38>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8003bb2:	641a      	str	r2, [r3, #64]	@ 0x40

}
 8003bb4:	bf00      	nop
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	200028b4 	.word	0x200028b4

08003bc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bca:	2300      	movs	r3, #0
 8003bcc:	607b      	str	r3, [r7, #4]
 8003bce:	4b12      	ldr	r3, [pc, #72]	@ (8003c18 <HAL_MspInit+0x54>)
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd2:	4a11      	ldr	r2, [pc, #68]	@ (8003c18 <HAL_MspInit+0x54>)
 8003bd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bda:	4b0f      	ldr	r3, [pc, #60]	@ (8003c18 <HAL_MspInit+0x54>)
 8003bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003be2:	607b      	str	r3, [r7, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003be6:	2300      	movs	r3, #0
 8003be8:	603b      	str	r3, [r7, #0]
 8003bea:	4b0b      	ldr	r3, [pc, #44]	@ (8003c18 <HAL_MspInit+0x54>)
 8003bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bee:	4a0a      	ldr	r2, [pc, #40]	@ (8003c18 <HAL_MspInit+0x54>)
 8003bf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bf6:	4b08      	ldr	r3, [pc, #32]	@ (8003c18 <HAL_MspInit+0x54>)
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bfe:	603b      	str	r3, [r7, #0]
 8003c00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003c02:	2200      	movs	r2, #0
 8003c04:	210f      	movs	r1, #15
 8003c06:	f06f 0001 	mvn.w	r0, #1
 8003c0a:	f001 fc7b 	bl	8005504 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c0e:	bf00      	nop
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40023800 	.word	0x40023800

08003c1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b08c      	sub	sp, #48	@ 0x30
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c24:	f107 031c 	add.w	r3, r7, #28
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	605a      	str	r2, [r3, #4]
 8003c2e:	609a      	str	r2, [r3, #8]
 8003c30:	60da      	str	r2, [r3, #12]
 8003c32:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a67      	ldr	r2, [pc, #412]	@ (8003dd8 <HAL_ADC_MspInit+0x1bc>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d161      	bne.n	8003d02 <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003c3e:	2300      	movs	r3, #0
 8003c40:	61bb      	str	r3, [r7, #24]
 8003c42:	4b66      	ldr	r3, [pc, #408]	@ (8003ddc <HAL_ADC_MspInit+0x1c0>)
 8003c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c46:	4a65      	ldr	r2, [pc, #404]	@ (8003ddc <HAL_ADC_MspInit+0x1c0>)
 8003c48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c4e:	4b63      	ldr	r3, [pc, #396]	@ (8003ddc <HAL_ADC_MspInit+0x1c0>)
 8003c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c56:	61bb      	str	r3, [r7, #24]
 8003c58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	617b      	str	r3, [r7, #20]
 8003c5e:	4b5f      	ldr	r3, [pc, #380]	@ (8003ddc <HAL_ADC_MspInit+0x1c0>)
 8003c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c62:	4a5e      	ldr	r2, [pc, #376]	@ (8003ddc <HAL_ADC_MspInit+0x1c0>)
 8003c64:	f043 0301 	orr.w	r3, r3, #1
 8003c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c6a:	4b5c      	ldr	r3, [pc, #368]	@ (8003ddc <HAL_ADC_MspInit+0x1c0>)
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	617b      	str	r3, [r7, #20]
 8003c74:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003c76:	2301      	movs	r3, #1
 8003c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c82:	f107 031c 	add.w	r3, r7, #28
 8003c86:	4619      	mov	r1, r3
 8003c88:	4855      	ldr	r0, [pc, #340]	@ (8003de0 <HAL_ADC_MspInit+0x1c4>)
 8003c8a:	f002 f881 	bl	8005d90 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003c8e:	4b55      	ldr	r3, [pc, #340]	@ (8003de4 <HAL_ADC_MspInit+0x1c8>)
 8003c90:	4a55      	ldr	r2, [pc, #340]	@ (8003de8 <HAL_ADC_MspInit+0x1cc>)
 8003c92:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003c94:	4b53      	ldr	r3, [pc, #332]	@ (8003de4 <HAL_ADC_MspInit+0x1c8>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c9a:	4b52      	ldr	r3, [pc, #328]	@ (8003de4 <HAL_ADC_MspInit+0x1c8>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ca0:	4b50      	ldr	r3, [pc, #320]	@ (8003de4 <HAL_ADC_MspInit+0x1c8>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003ca6:	4b4f      	ldr	r3, [pc, #316]	@ (8003de4 <HAL_ADC_MspInit+0x1c8>)
 8003ca8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003cac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003cae:	4b4d      	ldr	r3, [pc, #308]	@ (8003de4 <HAL_ADC_MspInit+0x1c8>)
 8003cb0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003cb4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003cb6:	4b4b      	ldr	r3, [pc, #300]	@ (8003de4 <HAL_ADC_MspInit+0x1c8>)
 8003cb8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003cbc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003cbe:	4b49      	ldr	r3, [pc, #292]	@ (8003de4 <HAL_ADC_MspInit+0x1c8>)
 8003cc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003cc4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8003cc6:	4b47      	ldr	r3, [pc, #284]	@ (8003de4 <HAL_ADC_MspInit+0x1c8>)
 8003cc8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003ccc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003cce:	4b45      	ldr	r3, [pc, #276]	@ (8003de4 <HAL_ADC_MspInit+0x1c8>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003cd4:	4843      	ldr	r0, [pc, #268]	@ (8003de4 <HAL_ADC_MspInit+0x1c8>)
 8003cd6:	f001 fc3f 	bl	8005558 <HAL_DMA_Init>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8003ce0:	f7ff feb4 	bl	8003a4c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a3f      	ldr	r2, [pc, #252]	@ (8003de4 <HAL_ADC_MspInit+0x1c8>)
 8003ce8:	639a      	str	r2, [r3, #56]	@ 0x38
 8003cea:	4a3e      	ldr	r2, [pc, #248]	@ (8003de4 <HAL_ADC_MspInit+0x1c8>)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	2105      	movs	r1, #5
 8003cf4:	2012      	movs	r0, #18
 8003cf6:	f001 fc05 	bl	8005504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003cfa:	2012      	movs	r0, #18
 8003cfc:	f001 fc1e 	bl	800553c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003d00:	e066      	b.n	8003dd0 <HAL_ADC_MspInit+0x1b4>
  else if(hadc->Instance==ADC2)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a39      	ldr	r2, [pc, #228]	@ (8003dec <HAL_ADC_MspInit+0x1d0>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d161      	bne.n	8003dd0 <HAL_ADC_MspInit+0x1b4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	613b      	str	r3, [r7, #16]
 8003d10:	4b32      	ldr	r3, [pc, #200]	@ (8003ddc <HAL_ADC_MspInit+0x1c0>)
 8003d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d14:	4a31      	ldr	r2, [pc, #196]	@ (8003ddc <HAL_ADC_MspInit+0x1c0>)
 8003d16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d1a:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d1c:	4b2f      	ldr	r3, [pc, #188]	@ (8003ddc <HAL_ADC_MspInit+0x1c0>)
 8003d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d24:	613b      	str	r3, [r7, #16]
 8003d26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d28:	2300      	movs	r3, #0
 8003d2a:	60fb      	str	r3, [r7, #12]
 8003d2c:	4b2b      	ldr	r3, [pc, #172]	@ (8003ddc <HAL_ADC_MspInit+0x1c0>)
 8003d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d30:	4a2a      	ldr	r2, [pc, #168]	@ (8003ddc <HAL_ADC_MspInit+0x1c0>)
 8003d32:	f043 0301 	orr.w	r3, r3, #1
 8003d36:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d38:	4b28      	ldr	r3, [pc, #160]	@ (8003ddc <HAL_ADC_MspInit+0x1c0>)
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	60fb      	str	r3, [r7, #12]
 8003d42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003d44:	2302      	movs	r3, #2
 8003d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d50:	f107 031c 	add.w	r3, r7, #28
 8003d54:	4619      	mov	r1, r3
 8003d56:	4822      	ldr	r0, [pc, #136]	@ (8003de0 <HAL_ADC_MspInit+0x1c4>)
 8003d58:	f002 f81a 	bl	8005d90 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8003d5c:	4b24      	ldr	r3, [pc, #144]	@ (8003df0 <HAL_ADC_MspInit+0x1d4>)
 8003d5e:	4a25      	ldr	r2, [pc, #148]	@ (8003df4 <HAL_ADC_MspInit+0x1d8>)
 8003d60:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8003d62:	4b23      	ldr	r3, [pc, #140]	@ (8003df0 <HAL_ADC_MspInit+0x1d4>)
 8003d64:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d68:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d6a:	4b21      	ldr	r3, [pc, #132]	@ (8003df0 <HAL_ADC_MspInit+0x1d4>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d70:	4b1f      	ldr	r3, [pc, #124]	@ (8003df0 <HAL_ADC_MspInit+0x1d4>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003d76:	4b1e      	ldr	r3, [pc, #120]	@ (8003df0 <HAL_ADC_MspInit+0x1d4>)
 8003d78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d7c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8003df0 <HAL_ADC_MspInit+0x1d4>)
 8003d80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d84:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003d86:	4b1a      	ldr	r3, [pc, #104]	@ (8003df0 <HAL_ADC_MspInit+0x1d4>)
 8003d88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003d8c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003d8e:	4b18      	ldr	r3, [pc, #96]	@ (8003df0 <HAL_ADC_MspInit+0x1d4>)
 8003d90:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d94:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8003d96:	4b16      	ldr	r3, [pc, #88]	@ (8003df0 <HAL_ADC_MspInit+0x1d4>)
 8003d98:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003d9c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d9e:	4b14      	ldr	r3, [pc, #80]	@ (8003df0 <HAL_ADC_MspInit+0x1d4>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003da4:	4812      	ldr	r0, [pc, #72]	@ (8003df0 <HAL_ADC_MspInit+0x1d4>)
 8003da6:	f001 fbd7 	bl	8005558 <HAL_DMA_Init>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <HAL_ADC_MspInit+0x198>
      Error_Handler();
 8003db0:	f7ff fe4c 	bl	8003a4c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a0e      	ldr	r2, [pc, #56]	@ (8003df0 <HAL_ADC_MspInit+0x1d4>)
 8003db8:	639a      	str	r2, [r3, #56]	@ 0x38
 8003dba:	4a0d      	ldr	r2, [pc, #52]	@ (8003df0 <HAL_ADC_MspInit+0x1d4>)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	2105      	movs	r1, #5
 8003dc4:	2012      	movs	r0, #18
 8003dc6:	f001 fb9d 	bl	8005504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003dca:	2012      	movs	r0, #18
 8003dcc:	f001 fbb6 	bl	800553c <HAL_NVIC_EnableIRQ>
}
 8003dd0:	bf00      	nop
 8003dd2:	3730      	adds	r7, #48	@ 0x30
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40012000 	.word	0x40012000
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	40020000 	.word	0x40020000
 8003de4:	20002644 	.word	0x20002644
 8003de8:	40026410 	.word	0x40026410
 8003dec:	40012100 	.word	0x40012100
 8003df0:	200026a4 	.word	0x200026a4
 8003df4:	40026440 	.word	0x40026440

08003df8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b08c      	sub	sp, #48	@ 0x30
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e00:	f107 031c 	add.w	r3, r7, #28
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	605a      	str	r2, [r3, #4]
 8003e0a:	609a      	str	r2, [r3, #8]
 8003e0c:	60da      	str	r2, [r3, #12]
 8003e0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a7a      	ldr	r2, [pc, #488]	@ (8004000 <HAL_I2C_MspInit+0x208>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	f040 8094 	bne.w	8003f44 <HAL_I2C_MspInit+0x14c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	61bb      	str	r3, [r7, #24]
 8003e20:	4b78      	ldr	r3, [pc, #480]	@ (8004004 <HAL_I2C_MspInit+0x20c>)
 8003e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e24:	4a77      	ldr	r2, [pc, #476]	@ (8004004 <HAL_I2C_MspInit+0x20c>)
 8003e26:	f043 0302 	orr.w	r3, r3, #2
 8003e2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e2c:	4b75      	ldr	r3, [pc, #468]	@ (8004004 <HAL_I2C_MspInit+0x20c>)
 8003e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	61bb      	str	r3, [r7, #24]
 8003e36:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003e38:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e3e:	2312      	movs	r3, #18
 8003e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e42:	2300      	movs	r3, #0
 8003e44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e46:	2303      	movs	r3, #3
 8003e48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003e4a:	2304      	movs	r3, #4
 8003e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e4e:	f107 031c 	add.w	r3, r7, #28
 8003e52:	4619      	mov	r1, r3
 8003e54:	486c      	ldr	r0, [pc, #432]	@ (8004008 <HAL_I2C_MspInit+0x210>)
 8003e56:	f001 ff9b 	bl	8005d90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	617b      	str	r3, [r7, #20]
 8003e5e:	4b69      	ldr	r3, [pc, #420]	@ (8004004 <HAL_I2C_MspInit+0x20c>)
 8003e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e62:	4a68      	ldr	r2, [pc, #416]	@ (8004004 <HAL_I2C_MspInit+0x20c>)
 8003e64:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003e68:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e6a:	4b66      	ldr	r3, [pc, #408]	@ (8004004 <HAL_I2C_MspInit+0x20c>)
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e72:	617b      	str	r3, [r7, #20]
 8003e74:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8003e76:	4b65      	ldr	r3, [pc, #404]	@ (800400c <HAL_I2C_MspInit+0x214>)
 8003e78:	4a65      	ldr	r2, [pc, #404]	@ (8004010 <HAL_I2C_MspInit+0x218>)
 8003e7a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8003e7c:	4b63      	ldr	r3, [pc, #396]	@ (800400c <HAL_I2C_MspInit+0x214>)
 8003e7e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e82:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e84:	4b61      	ldr	r3, [pc, #388]	@ (800400c <HAL_I2C_MspInit+0x214>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e8a:	4b60      	ldr	r3, [pc, #384]	@ (800400c <HAL_I2C_MspInit+0x214>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e90:	4b5e      	ldr	r3, [pc, #376]	@ (800400c <HAL_I2C_MspInit+0x214>)
 8003e92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e96:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e98:	4b5c      	ldr	r3, [pc, #368]	@ (800400c <HAL_I2C_MspInit+0x214>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e9e:	4b5b      	ldr	r3, [pc, #364]	@ (800400c <HAL_I2C_MspInit+0x214>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003ea4:	4b59      	ldr	r3, [pc, #356]	@ (800400c <HAL_I2C_MspInit+0x214>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003eaa:	4b58      	ldr	r3, [pc, #352]	@ (800400c <HAL_I2C_MspInit+0x214>)
 8003eac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003eb0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003eb2:	4b56      	ldr	r3, [pc, #344]	@ (800400c <HAL_I2C_MspInit+0x214>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003eb8:	4854      	ldr	r0, [pc, #336]	@ (800400c <HAL_I2C_MspInit+0x214>)
 8003eba:	f001 fb4d 	bl	8005558 <HAL_DMA_Init>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 8003ec4:	f7ff fdc2 	bl	8003a4c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a50      	ldr	r2, [pc, #320]	@ (800400c <HAL_I2C_MspInit+0x214>)
 8003ecc:	639a      	str	r2, [r3, #56]	@ 0x38
 8003ece:	4a4f      	ldr	r2, [pc, #316]	@ (800400c <HAL_I2C_MspInit+0x214>)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8003ed4:	4b4f      	ldr	r3, [pc, #316]	@ (8004014 <HAL_I2C_MspInit+0x21c>)
 8003ed6:	4a50      	ldr	r2, [pc, #320]	@ (8004018 <HAL_I2C_MspInit+0x220>)
 8003ed8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8003eda:	4b4e      	ldr	r3, [pc, #312]	@ (8004014 <HAL_I2C_MspInit+0x21c>)
 8003edc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ee0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ee2:	4b4c      	ldr	r3, [pc, #304]	@ (8004014 <HAL_I2C_MspInit+0x21c>)
 8003ee4:	2240      	movs	r2, #64	@ 0x40
 8003ee6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ee8:	4b4a      	ldr	r3, [pc, #296]	@ (8004014 <HAL_I2C_MspInit+0x21c>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003eee:	4b49      	ldr	r3, [pc, #292]	@ (8004014 <HAL_I2C_MspInit+0x21c>)
 8003ef0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ef4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ef6:	4b47      	ldr	r3, [pc, #284]	@ (8004014 <HAL_I2C_MspInit+0x21c>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003efc:	4b45      	ldr	r3, [pc, #276]	@ (8004014 <HAL_I2C_MspInit+0x21c>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003f02:	4b44      	ldr	r3, [pc, #272]	@ (8004014 <HAL_I2C_MspInit+0x21c>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003f08:	4b42      	ldr	r3, [pc, #264]	@ (8004014 <HAL_I2C_MspInit+0x21c>)
 8003f0a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003f0e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f10:	4b40      	ldr	r3, [pc, #256]	@ (8004014 <HAL_I2C_MspInit+0x21c>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003f16:	483f      	ldr	r0, [pc, #252]	@ (8004014 <HAL_I2C_MspInit+0x21c>)
 8003f18:	f001 fb1e 	bl	8005558 <HAL_DMA_Init>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <HAL_I2C_MspInit+0x12e>
    {
      Error_Handler();
 8003f22:	f7ff fd93 	bl	8003a4c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a3a      	ldr	r2, [pc, #232]	@ (8004014 <HAL_I2C_MspInit+0x21c>)
 8003f2a:	635a      	str	r2, [r3, #52]	@ 0x34
 8003f2c:	4a39      	ldr	r2, [pc, #228]	@ (8004014 <HAL_I2C_MspInit+0x21c>)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8003f32:	2200      	movs	r2, #0
 8003f34:	2105      	movs	r1, #5
 8003f36:	201f      	movs	r0, #31
 8003f38:	f001 fae4 	bl	8005504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003f3c:	201f      	movs	r0, #31
 8003f3e:	f001 fafd 	bl	800553c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003f42:	e058      	b.n	8003ff6 <HAL_I2C_MspInit+0x1fe>
  else if(hi2c->Instance==I2C2)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a34      	ldr	r2, [pc, #208]	@ (800401c <HAL_I2C_MspInit+0x224>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d153      	bne.n	8003ff6 <HAL_I2C_MspInit+0x1fe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f4e:	2300      	movs	r3, #0
 8003f50:	613b      	str	r3, [r7, #16]
 8003f52:	4b2c      	ldr	r3, [pc, #176]	@ (8004004 <HAL_I2C_MspInit+0x20c>)
 8003f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f56:	4a2b      	ldr	r2, [pc, #172]	@ (8004004 <HAL_I2C_MspInit+0x20c>)
 8003f58:	f043 0302 	orr.w	r3, r3, #2
 8003f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f5e:	4b29      	ldr	r3, [pc, #164]	@ (8004004 <HAL_I2C_MspInit+0x20c>)
 8003f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	613b      	str	r3, [r7, #16]
 8003f68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60fb      	str	r3, [r7, #12]
 8003f6e:	4b25      	ldr	r3, [pc, #148]	@ (8004004 <HAL_I2C_MspInit+0x20c>)
 8003f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f72:	4a24      	ldr	r2, [pc, #144]	@ (8004004 <HAL_I2C_MspInit+0x20c>)
 8003f74:	f043 0304 	orr.w	r3, r3, #4
 8003f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f7a:	4b22      	ldr	r3, [pc, #136]	@ (8004004 <HAL_I2C_MspInit+0x20c>)
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7e:	f003 0304 	and.w	r3, r3, #4
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003f86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f8c:	2312      	movs	r3, #18
 8003f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f90:	2300      	movs	r3, #0
 8003f92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f94:	2303      	movs	r3, #3
 8003f96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003f98:	2304      	movs	r3, #4
 8003f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f9c:	f107 031c 	add.w	r3, r7, #28
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	4819      	ldr	r0, [pc, #100]	@ (8004008 <HAL_I2C_MspInit+0x210>)
 8003fa4:	f001 fef4 	bl	8005d90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003fa8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fae:	2312      	movs	r3, #18
 8003fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003fba:	2304      	movs	r3, #4
 8003fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fbe:	f107 031c 	add.w	r3, r7, #28
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	4816      	ldr	r0, [pc, #88]	@ (8004020 <HAL_I2C_MspInit+0x228>)
 8003fc6:	f001 fee3 	bl	8005d90 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60bb      	str	r3, [r7, #8]
 8003fce:	4b0d      	ldr	r3, [pc, #52]	@ (8004004 <HAL_I2C_MspInit+0x20c>)
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd2:	4a0c      	ldr	r2, [pc, #48]	@ (8004004 <HAL_I2C_MspInit+0x20c>)
 8003fd4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003fd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fda:	4b0a      	ldr	r3, [pc, #40]	@ (8004004 <HAL_I2C_MspInit+0x20c>)
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fe2:	60bb      	str	r3, [r7, #8]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	2105      	movs	r1, #5
 8003fea:	2021      	movs	r0, #33	@ 0x21
 8003fec:	f001 fa8a 	bl	8005504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003ff0:	2021      	movs	r0, #33	@ 0x21
 8003ff2:	f001 faa3 	bl	800553c <HAL_NVIC_EnableIRQ>
}
 8003ff6:	bf00      	nop
 8003ff8:	3730      	adds	r7, #48	@ 0x30
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	40005400 	.word	0x40005400
 8004004:	40023800 	.word	0x40023800
 8004008:	40020400 	.word	0x40020400
 800400c:	200027ac 	.word	0x200027ac
 8004010:	40026010 	.word	0x40026010
 8004014:	2000280c 	.word	0x2000280c
 8004018:	400260b8 	.word	0x400260b8
 800401c:	40005800 	.word	0x40005800
 8004020:	40020800 	.word	0x40020800

08004024 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b08a      	sub	sp, #40	@ 0x28
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800402c:	f107 0314 	add.w	r3, r7, #20
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	605a      	str	r2, [r3, #4]
 8004036:	609a      	str	r2, [r3, #8]
 8004038:	60da      	str	r2, [r3, #12]
 800403a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a19      	ldr	r2, [pc, #100]	@ (80040a8 <HAL_SPI_MspInit+0x84>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d12c      	bne.n	80040a0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004046:	2300      	movs	r3, #0
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	4b18      	ldr	r3, [pc, #96]	@ (80040ac <HAL_SPI_MspInit+0x88>)
 800404c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404e:	4a17      	ldr	r2, [pc, #92]	@ (80040ac <HAL_SPI_MspInit+0x88>)
 8004050:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004054:	6413      	str	r3, [r2, #64]	@ 0x40
 8004056:	4b15      	ldr	r3, [pc, #84]	@ (80040ac <HAL_SPI_MspInit+0x88>)
 8004058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800405e:	613b      	str	r3, [r7, #16]
 8004060:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004062:	2300      	movs	r3, #0
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	4b11      	ldr	r3, [pc, #68]	@ (80040ac <HAL_SPI_MspInit+0x88>)
 8004068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406a:	4a10      	ldr	r2, [pc, #64]	@ (80040ac <HAL_SPI_MspInit+0x88>)
 800406c:	f043 0302 	orr.w	r3, r3, #2
 8004070:	6313      	str	r3, [r2, #48]	@ 0x30
 8004072:	4b0e      	ldr	r3, [pc, #56]	@ (80040ac <HAL_SPI_MspInit+0x88>)
 8004074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800407e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004084:	2302      	movs	r3, #2
 8004086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004088:	2300      	movs	r3, #0
 800408a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800408c:	2303      	movs	r3, #3
 800408e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004090:	2305      	movs	r3, #5
 8004092:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004094:	f107 0314 	add.w	r3, r7, #20
 8004098:	4619      	mov	r1, r3
 800409a:	4805      	ldr	r0, [pc, #20]	@ (80040b0 <HAL_SPI_MspInit+0x8c>)
 800409c:	f001 fe78 	bl	8005d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80040a0:	bf00      	nop
 80040a2:	3728      	adds	r7, #40	@ 0x28
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	40003800 	.word	0x40003800
 80040ac:	40023800 	.word	0x40023800
 80040b0:	40020400 	.word	0x40020400

080040b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040c4:	d10e      	bne.n	80040e4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040c6:	2300      	movs	r3, #0
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	4b13      	ldr	r3, [pc, #76]	@ (8004118 <HAL_TIM_Base_MspInit+0x64>)
 80040cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ce:	4a12      	ldr	r2, [pc, #72]	@ (8004118 <HAL_TIM_Base_MspInit+0x64>)
 80040d0:	f043 0301 	orr.w	r3, r3, #1
 80040d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80040d6:	4b10      	ldr	r3, [pc, #64]	@ (8004118 <HAL_TIM_Base_MspInit+0x64>)
 80040d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80040e2:	e012      	b.n	800410a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM8)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a0c      	ldr	r2, [pc, #48]	@ (800411c <HAL_TIM_Base_MspInit+0x68>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d10d      	bne.n	800410a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80040ee:	2300      	movs	r3, #0
 80040f0:	60bb      	str	r3, [r7, #8]
 80040f2:	4b09      	ldr	r3, [pc, #36]	@ (8004118 <HAL_TIM_Base_MspInit+0x64>)
 80040f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f6:	4a08      	ldr	r2, [pc, #32]	@ (8004118 <HAL_TIM_Base_MspInit+0x64>)
 80040f8:	f043 0302 	orr.w	r3, r3, #2
 80040fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80040fe:	4b06      	ldr	r3, [pc, #24]	@ (8004118 <HAL_TIM_Base_MspInit+0x64>)
 8004100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	60bb      	str	r3, [r7, #8]
 8004108:	68bb      	ldr	r3, [r7, #8]
}
 800410a:	bf00      	nop
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	40023800 	.word	0x40023800
 800411c:	40010400 	.word	0x40010400

08004120 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a0e      	ldr	r2, [pc, #56]	@ (8004168 <HAL_TIM_PWM_MspInit+0x48>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d115      	bne.n	800415e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004132:	2300      	movs	r3, #0
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	4b0d      	ldr	r3, [pc, #52]	@ (800416c <HAL_TIM_PWM_MspInit+0x4c>)
 8004138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413a:	4a0c      	ldr	r2, [pc, #48]	@ (800416c <HAL_TIM_PWM_MspInit+0x4c>)
 800413c:	f043 0302 	orr.w	r3, r3, #2
 8004140:	6413      	str	r3, [r2, #64]	@ 0x40
 8004142:	4b0a      	ldr	r3, [pc, #40]	@ (800416c <HAL_TIM_PWM_MspInit+0x4c>)
 8004144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800414e:	2200      	movs	r2, #0
 8004150:	2105      	movs	r1, #5
 8004152:	201d      	movs	r0, #29
 8004154:	f001 f9d6 	bl	8005504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004158:	201d      	movs	r0, #29
 800415a:	f001 f9ef 	bl	800553c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800415e:	bf00      	nop
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	40000400 	.word	0x40000400
 800416c:	40023800 	.word	0x40023800

08004170 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b088      	sub	sp, #32
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004178:	f107 030c 	add.w	r3, r7, #12
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	605a      	str	r2, [r3, #4]
 8004182:	609a      	str	r2, [r3, #8]
 8004184:	60da      	str	r2, [r3, #12]
 8004186:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a12      	ldr	r2, [pc, #72]	@ (80041d8 <HAL_TIM_MspPostInit+0x68>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d11e      	bne.n	80041d0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004192:	2300      	movs	r3, #0
 8004194:	60bb      	str	r3, [r7, #8]
 8004196:	4b11      	ldr	r3, [pc, #68]	@ (80041dc <HAL_TIM_MspPostInit+0x6c>)
 8004198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800419a:	4a10      	ldr	r2, [pc, #64]	@ (80041dc <HAL_TIM_MspPostInit+0x6c>)
 800419c:	f043 0304 	orr.w	r3, r3, #4
 80041a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80041a2:	4b0e      	ldr	r3, [pc, #56]	@ (80041dc <HAL_TIM_MspPostInit+0x6c>)
 80041a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a6:	f003 0304 	and.w	r3, r3, #4
 80041aa:	60bb      	str	r3, [r7, #8]
 80041ac:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80041ae:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80041b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041b4:	2302      	movs	r3, #2
 80041b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b8:	2300      	movs	r3, #0
 80041ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041bc:	2300      	movs	r3, #0
 80041be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80041c0:	2302      	movs	r3, #2
 80041c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041c4:	f107 030c 	add.w	r3, r7, #12
 80041c8:	4619      	mov	r1, r3
 80041ca:	4805      	ldr	r0, [pc, #20]	@ (80041e0 <HAL_TIM_MspPostInit+0x70>)
 80041cc:	f001 fde0 	bl	8005d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80041d0:	bf00      	nop
 80041d2:	3720      	adds	r7, #32
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	40000400 	.word	0x40000400
 80041dc:	40023800 	.word	0x40023800
 80041e0:	40020800 	.word	0x40020800

080041e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b08c      	sub	sp, #48	@ 0x30
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041ec:	f107 031c 	add.w	r3, r7, #28
 80041f0:	2200      	movs	r2, #0
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	605a      	str	r2, [r3, #4]
 80041f6:	609a      	str	r2, [r3, #8]
 80041f8:	60da      	str	r2, [r3, #12]
 80041fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a82      	ldr	r2, [pc, #520]	@ (800440c <HAL_UART_MspInit+0x228>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d163      	bne.n	80042ce <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004206:	2300      	movs	r3, #0
 8004208:	61bb      	str	r3, [r7, #24]
 800420a:	4b81      	ldr	r3, [pc, #516]	@ (8004410 <HAL_UART_MspInit+0x22c>)
 800420c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420e:	4a80      	ldr	r2, [pc, #512]	@ (8004410 <HAL_UART_MspInit+0x22c>)
 8004210:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004214:	6413      	str	r3, [r2, #64]	@ 0x40
 8004216:	4b7e      	ldr	r3, [pc, #504]	@ (8004410 <HAL_UART_MspInit+0x22c>)
 8004218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800421e:	61bb      	str	r3, [r7, #24]
 8004220:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004222:	2300      	movs	r3, #0
 8004224:	617b      	str	r3, [r7, #20]
 8004226:	4b7a      	ldr	r3, [pc, #488]	@ (8004410 <HAL_UART_MspInit+0x22c>)
 8004228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422a:	4a79      	ldr	r2, [pc, #484]	@ (8004410 <HAL_UART_MspInit+0x22c>)
 800422c:	f043 0301 	orr.w	r3, r3, #1
 8004230:	6313      	str	r3, [r2, #48]	@ 0x30
 8004232:	4b77      	ldr	r3, [pc, #476]	@ (8004410 <HAL_UART_MspInit+0x22c>)
 8004234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	617b      	str	r3, [r7, #20]
 800423c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800423e:	230c      	movs	r3, #12
 8004240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004242:	2302      	movs	r3, #2
 8004244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004246:	2300      	movs	r3, #0
 8004248:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800424a:	2303      	movs	r3, #3
 800424c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800424e:	2307      	movs	r3, #7
 8004250:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004252:	f107 031c 	add.w	r3, r7, #28
 8004256:	4619      	mov	r1, r3
 8004258:	486e      	ldr	r0, [pc, #440]	@ (8004414 <HAL_UART_MspInit+0x230>)
 800425a:	f001 fd99 	bl	8005d90 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800425e:	4b6e      	ldr	r3, [pc, #440]	@ (8004418 <HAL_UART_MspInit+0x234>)
 8004260:	4a6e      	ldr	r2, [pc, #440]	@ (800441c <HAL_UART_MspInit+0x238>)
 8004262:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004264:	4b6c      	ldr	r3, [pc, #432]	@ (8004418 <HAL_UART_MspInit+0x234>)
 8004266:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800426a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800426c:	4b6a      	ldr	r3, [pc, #424]	@ (8004418 <HAL_UART_MspInit+0x234>)
 800426e:	2240      	movs	r2, #64	@ 0x40
 8004270:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004272:	4b69      	ldr	r3, [pc, #420]	@ (8004418 <HAL_UART_MspInit+0x234>)
 8004274:	2200      	movs	r2, #0
 8004276:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004278:	4b67      	ldr	r3, [pc, #412]	@ (8004418 <HAL_UART_MspInit+0x234>)
 800427a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800427e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004280:	4b65      	ldr	r3, [pc, #404]	@ (8004418 <HAL_UART_MspInit+0x234>)
 8004282:	2200      	movs	r2, #0
 8004284:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004286:	4b64      	ldr	r3, [pc, #400]	@ (8004418 <HAL_UART_MspInit+0x234>)
 8004288:	2200      	movs	r2, #0
 800428a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800428c:	4b62      	ldr	r3, [pc, #392]	@ (8004418 <HAL_UART_MspInit+0x234>)
 800428e:	2200      	movs	r2, #0
 8004290:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004292:	4b61      	ldr	r3, [pc, #388]	@ (8004418 <HAL_UART_MspInit+0x234>)
 8004294:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004298:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800429a:	4b5f      	ldr	r3, [pc, #380]	@ (8004418 <HAL_UART_MspInit+0x234>)
 800429c:	2200      	movs	r2, #0
 800429e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80042a0:	485d      	ldr	r0, [pc, #372]	@ (8004418 <HAL_UART_MspInit+0x234>)
 80042a2:	f001 f959 	bl	8005558 <HAL_DMA_Init>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80042ac:	f7ff fbce 	bl	8003a4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a59      	ldr	r2, [pc, #356]	@ (8004418 <HAL_UART_MspInit+0x234>)
 80042b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80042b6:	4a58      	ldr	r2, [pc, #352]	@ (8004418 <HAL_UART_MspInit+0x234>)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80042bc:	2200      	movs	r2, #0
 80042be:	2105      	movs	r1, #5
 80042c0:	2026      	movs	r0, #38	@ 0x26
 80042c2:	f001 f91f 	bl	8005504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80042c6:	2026      	movs	r0, #38	@ 0x26
 80042c8:	f001 f938 	bl	800553c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80042cc:	e09a      	b.n	8004404 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART3)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a53      	ldr	r2, [pc, #332]	@ (8004420 <HAL_UART_MspInit+0x23c>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	f040 8095 	bne.w	8004404 <HAL_UART_MspInit+0x220>
    __HAL_RCC_USART3_CLK_ENABLE();
 80042da:	2300      	movs	r3, #0
 80042dc:	613b      	str	r3, [r7, #16]
 80042de:	4b4c      	ldr	r3, [pc, #304]	@ (8004410 <HAL_UART_MspInit+0x22c>)
 80042e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e2:	4a4b      	ldr	r2, [pc, #300]	@ (8004410 <HAL_UART_MspInit+0x22c>)
 80042e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80042ea:	4b49      	ldr	r3, [pc, #292]	@ (8004410 <HAL_UART_MspInit+0x22c>)
 80042ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042f2:	613b      	str	r3, [r7, #16]
 80042f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042f6:	2300      	movs	r3, #0
 80042f8:	60fb      	str	r3, [r7, #12]
 80042fa:	4b45      	ldr	r3, [pc, #276]	@ (8004410 <HAL_UART_MspInit+0x22c>)
 80042fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fe:	4a44      	ldr	r2, [pc, #272]	@ (8004410 <HAL_UART_MspInit+0x22c>)
 8004300:	f043 0304 	orr.w	r3, r3, #4
 8004304:	6313      	str	r3, [r2, #48]	@ 0x30
 8004306:	4b42      	ldr	r3, [pc, #264]	@ (8004410 <HAL_UART_MspInit+0x22c>)
 8004308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430a:	f003 0304 	and.w	r3, r3, #4
 800430e:	60fb      	str	r3, [r7, #12]
 8004310:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004312:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004318:	2302      	movs	r3, #2
 800431a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800431c:	2300      	movs	r3, #0
 800431e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004320:	2303      	movs	r3, #3
 8004322:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004324:	2307      	movs	r3, #7
 8004326:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004328:	f107 031c 	add.w	r3, r7, #28
 800432c:	4619      	mov	r1, r3
 800432e:	483d      	ldr	r0, [pc, #244]	@ (8004424 <HAL_UART_MspInit+0x240>)
 8004330:	f001 fd2e 	bl	8005d90 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004334:	4b3c      	ldr	r3, [pc, #240]	@ (8004428 <HAL_UART_MspInit+0x244>)
 8004336:	4a3d      	ldr	r2, [pc, #244]	@ (800442c <HAL_UART_MspInit+0x248>)
 8004338:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800433a:	4b3b      	ldr	r3, [pc, #236]	@ (8004428 <HAL_UART_MspInit+0x244>)
 800433c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004340:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004342:	4b39      	ldr	r3, [pc, #228]	@ (8004428 <HAL_UART_MspInit+0x244>)
 8004344:	2200      	movs	r2, #0
 8004346:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004348:	4b37      	ldr	r3, [pc, #220]	@ (8004428 <HAL_UART_MspInit+0x244>)
 800434a:	2200      	movs	r2, #0
 800434c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800434e:	4b36      	ldr	r3, [pc, #216]	@ (8004428 <HAL_UART_MspInit+0x244>)
 8004350:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004354:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004356:	4b34      	ldr	r3, [pc, #208]	@ (8004428 <HAL_UART_MspInit+0x244>)
 8004358:	2200      	movs	r2, #0
 800435a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800435c:	4b32      	ldr	r3, [pc, #200]	@ (8004428 <HAL_UART_MspInit+0x244>)
 800435e:	2200      	movs	r2, #0
 8004360:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004362:	4b31      	ldr	r3, [pc, #196]	@ (8004428 <HAL_UART_MspInit+0x244>)
 8004364:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004368:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800436a:	4b2f      	ldr	r3, [pc, #188]	@ (8004428 <HAL_UART_MspInit+0x244>)
 800436c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004370:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004372:	4b2d      	ldr	r3, [pc, #180]	@ (8004428 <HAL_UART_MspInit+0x244>)
 8004374:	2200      	movs	r2, #0
 8004376:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004378:	482b      	ldr	r0, [pc, #172]	@ (8004428 <HAL_UART_MspInit+0x244>)
 800437a:	f001 f8ed 	bl	8005558 <HAL_DMA_Init>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 8004384:	f7ff fb62 	bl	8003a4c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a27      	ldr	r2, [pc, #156]	@ (8004428 <HAL_UART_MspInit+0x244>)
 800438c:	639a      	str	r2, [r3, #56]	@ 0x38
 800438e:	4a26      	ldr	r2, [pc, #152]	@ (8004428 <HAL_UART_MspInit+0x244>)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8004394:	4b26      	ldr	r3, [pc, #152]	@ (8004430 <HAL_UART_MspInit+0x24c>)
 8004396:	4a27      	ldr	r2, [pc, #156]	@ (8004434 <HAL_UART_MspInit+0x250>)
 8004398:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800439a:	4b25      	ldr	r3, [pc, #148]	@ (8004430 <HAL_UART_MspInit+0x24c>)
 800439c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80043a0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80043a2:	4b23      	ldr	r3, [pc, #140]	@ (8004430 <HAL_UART_MspInit+0x24c>)
 80043a4:	2240      	movs	r2, #64	@ 0x40
 80043a6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043a8:	4b21      	ldr	r3, [pc, #132]	@ (8004430 <HAL_UART_MspInit+0x24c>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80043ae:	4b20      	ldr	r3, [pc, #128]	@ (8004430 <HAL_UART_MspInit+0x24c>)
 80043b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80043b4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043b6:	4b1e      	ldr	r3, [pc, #120]	@ (8004430 <HAL_UART_MspInit+0x24c>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043bc:	4b1c      	ldr	r3, [pc, #112]	@ (8004430 <HAL_UART_MspInit+0x24c>)
 80043be:	2200      	movs	r2, #0
 80043c0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
 80043c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004430 <HAL_UART_MspInit+0x24c>)
 80043c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80043c8:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80043ca:	4b19      	ldr	r3, [pc, #100]	@ (8004430 <HAL_UART_MspInit+0x24c>)
 80043cc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80043d0:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043d2:	4b17      	ldr	r3, [pc, #92]	@ (8004430 <HAL_UART_MspInit+0x24c>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80043d8:	4815      	ldr	r0, [pc, #84]	@ (8004430 <HAL_UART_MspInit+0x24c>)
 80043da:	f001 f8bd 	bl	8005558 <HAL_DMA_Init>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <HAL_UART_MspInit+0x204>
      Error_Handler();
 80043e4:	f7ff fb32 	bl	8003a4c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a11      	ldr	r2, [pc, #68]	@ (8004430 <HAL_UART_MspInit+0x24c>)
 80043ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80043ee:	4a10      	ldr	r2, [pc, #64]	@ (8004430 <HAL_UART_MspInit+0x24c>)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80043f4:	2200      	movs	r2, #0
 80043f6:	2105      	movs	r1, #5
 80043f8:	2027      	movs	r0, #39	@ 0x27
 80043fa:	f001 f883 	bl	8005504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80043fe:	2027      	movs	r0, #39	@ 0x27
 8004400:	f001 f89c 	bl	800553c <HAL_NVIC_EnableIRQ>
}
 8004404:	bf00      	nop
 8004406:	3730      	adds	r7, #48	@ 0x30
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	40004400 	.word	0x40004400
 8004410:	40023800 	.word	0x40023800
 8004414:	40020000 	.word	0x40020000
 8004418:	200029cc 	.word	0x200029cc
 800441c:	400260a0 	.word	0x400260a0
 8004420:	40004800 	.word	0x40004800
 8004424:	40020800 	.word	0x40020800
 8004428:	20002a2c 	.word	0x20002a2c
 800442c:	40026028 	.word	0x40026028
 8004430:	20002a8c 	.word	0x20002a8c
 8004434:	40026058 	.word	0x40026058

08004438 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b08c      	sub	sp, #48	@ 0x30
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004448:	2300      	movs	r3, #0
 800444a:	60bb      	str	r3, [r7, #8]
 800444c:	4b2f      	ldr	r3, [pc, #188]	@ (800450c <HAL_InitTick+0xd4>)
 800444e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004450:	4a2e      	ldr	r2, [pc, #184]	@ (800450c <HAL_InitTick+0xd4>)
 8004452:	f043 0301 	orr.w	r3, r3, #1
 8004456:	6453      	str	r3, [r2, #68]	@ 0x44
 8004458:	4b2c      	ldr	r3, [pc, #176]	@ (800450c <HAL_InitTick+0xd4>)
 800445a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	60bb      	str	r3, [r7, #8]
 8004462:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004464:	f107 020c 	add.w	r2, r7, #12
 8004468:	f107 0310 	add.w	r3, r7, #16
 800446c:	4611      	mov	r1, r2
 800446e:	4618      	mov	r0, r3
 8004470:	f005 fb10 	bl	8009a94 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8004474:	f005 fafa 	bl	8009a6c <HAL_RCC_GetPCLK2Freq>
 8004478:	4603      	mov	r3, r0
 800447a:	005b      	lsls	r3, r3, #1
 800447c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800447e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004480:	4a23      	ldr	r2, [pc, #140]	@ (8004510 <HAL_InitTick+0xd8>)
 8004482:	fba2 2303 	umull	r2, r3, r2, r3
 8004486:	0c9b      	lsrs	r3, r3, #18
 8004488:	3b01      	subs	r3, #1
 800448a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800448c:	4b21      	ldr	r3, [pc, #132]	@ (8004514 <HAL_InitTick+0xdc>)
 800448e:	4a22      	ldr	r2, [pc, #136]	@ (8004518 <HAL_InitTick+0xe0>)
 8004490:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8004492:	4b20      	ldr	r3, [pc, #128]	@ (8004514 <HAL_InitTick+0xdc>)
 8004494:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004498:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800449a:	4a1e      	ldr	r2, [pc, #120]	@ (8004514 <HAL_InitTick+0xdc>)
 800449c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80044a0:	4b1c      	ldr	r3, [pc, #112]	@ (8004514 <HAL_InitTick+0xdc>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044a6:	4b1b      	ldr	r3, [pc, #108]	@ (8004514 <HAL_InitTick+0xdc>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044ac:	4b19      	ldr	r3, [pc, #100]	@ (8004514 <HAL_InitTick+0xdc>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80044b2:	4818      	ldr	r0, [pc, #96]	@ (8004514 <HAL_InitTick+0xdc>)
 80044b4:	f006 fc1e 	bl	800acf4 <HAL_TIM_Base_Init>
 80044b8:	4603      	mov	r3, r0
 80044ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80044be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d11b      	bne.n	80044fe <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80044c6:	4813      	ldr	r0, [pc, #76]	@ (8004514 <HAL_InitTick+0xdc>)
 80044c8:	f006 fccc 	bl	800ae64 <HAL_TIM_Base_Start_IT>
 80044cc:	4603      	mov	r3, r0
 80044ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80044d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d111      	bne.n	80044fe <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80044da:	2019      	movs	r0, #25
 80044dc:	f001 f82e 	bl	800553c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b0f      	cmp	r3, #15
 80044e4:	d808      	bhi.n	80044f8 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80044e6:	2200      	movs	r2, #0
 80044e8:	6879      	ldr	r1, [r7, #4]
 80044ea:	2019      	movs	r0, #25
 80044ec:	f001 f80a 	bl	8005504 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80044f0:	4a0a      	ldr	r2, [pc, #40]	@ (800451c <HAL_InitTick+0xe4>)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	e002      	b.n	80044fe <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80044fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8004502:	4618      	mov	r0, r3
 8004504:	3730      	adds	r7, #48	@ 0x30
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	40023800 	.word	0x40023800
 8004510:	431bde83 	.word	0x431bde83
 8004514:	20002b9c 	.word	0x20002b9c
 8004518:	40010000 	.word	0x40010000
 800451c:	20000008 	.word	0x20000008

08004520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004524:	bf00      	nop
 8004526:	e7fd      	b.n	8004524 <NMI_Handler+0x4>

08004528 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800452c:	bf00      	nop
 800452e:	e7fd      	b.n	800452c <HardFault_Handler+0x4>

08004530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004530:	b480      	push	{r7}
 8004532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004534:	bf00      	nop
 8004536:	e7fd      	b.n	8004534 <MemManage_Handler+0x4>

08004538 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800453c:	bf00      	nop
 800453e:	e7fd      	b.n	800453c <BusFault_Handler+0x4>

08004540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004544:	bf00      	nop
 8004546:	e7fd      	b.n	8004544 <UsageFault_Handler+0x4>

08004548 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800454c:	bf00      	nop
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_MPU6050_Pin);
 800455a:	2002      	movs	r0, #2
 800455c:	f001 fdc6 	bl	80060ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004560:	bf00      	nop
 8004562:	bd80      	pop	{r7, pc}

08004564 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004568:	4802      	ldr	r0, [pc, #8]	@ (8004574 <DMA1_Stream0_IRQHandler+0x10>)
 800456a:	f001 f98d 	bl	8005888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800456e:	bf00      	nop
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	200027ac 	.word	0x200027ac

08004578 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800457c:	4802      	ldr	r0, [pc, #8]	@ (8004588 <DMA1_Stream1_IRQHandler+0x10>)
 800457e:	f001 f983 	bl	8005888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004582:	bf00      	nop
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	20002a2c 	.word	0x20002a2c

0800458c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004590:	4802      	ldr	r0, [pc, #8]	@ (800459c <DMA1_Stream3_IRQHandler+0x10>)
 8004592:	f001 f979 	bl	8005888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004596:	bf00      	nop
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	20002a8c 	.word	0x20002a8c

080045a0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80045a4:	4802      	ldr	r0, [pc, #8]	@ (80045b0 <DMA1_Stream6_IRQHandler+0x10>)
 80045a6:	f001 f96f 	bl	8005888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80045aa:	bf00      	nop
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	200029cc 	.word	0x200029cc

080045b4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80045b8:	4803      	ldr	r0, [pc, #12]	@ (80045c8 <ADC_IRQHandler+0x14>)
 80045ba:	f000 f9f2 	bl	80049a2 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80045be:	4803      	ldr	r0, [pc, #12]	@ (80045cc <ADC_IRQHandler+0x18>)
 80045c0:	f000 f9ef 	bl	80049a2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80045c4:	bf00      	nop
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	200025b4 	.word	0x200025b4
 80045cc:	200025fc 	.word	0x200025fc

080045d0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80045d4:	4802      	ldr	r0, [pc, #8]	@ (80045e0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80045d6:	f006 fdcd 	bl	800b174 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80045da:	bf00      	nop
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	20002b9c 	.word	0x20002b9c

080045e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80045e8:	4802      	ldr	r0, [pc, #8]	@ (80045f4 <TIM3_IRQHandler+0x10>)
 80045ea:	f006 fdc3 	bl	800b174 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80045ee:	bf00      	nop
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	200028b4 	.word	0x200028b4

080045f8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80045fc:	4802      	ldr	r0, [pc, #8]	@ (8004608 <I2C1_EV_IRQHandler+0x10>)
 80045fe:	f002 ffd7 	bl	80075b0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004602:	bf00      	nop
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	20002704 	.word	0x20002704

0800460c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8004610:	4802      	ldr	r0, [pc, #8]	@ (800461c <I2C2_EV_IRQHandler+0x10>)
 8004612:	f002 ffcd 	bl	80075b0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8004616:	bf00      	nop
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	20002758 	.word	0x20002758

08004620 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004624:	4802      	ldr	r0, [pc, #8]	@ (8004630 <USART2_IRQHandler+0x10>)
 8004626:	f007 fd1d 	bl	800c064 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800462a:	bf00      	nop
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	20002944 	.word	0x20002944

08004634 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004638:	4802      	ldr	r0, [pc, #8]	@ (8004644 <USART3_IRQHandler+0x10>)
 800463a:	f007 fd13 	bl	800c064 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800463e:	bf00      	nop
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	20002988 	.word	0x20002988

08004648 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800464c:	4802      	ldr	r0, [pc, #8]	@ (8004658 <DMA1_Stream7_IRQHandler+0x10>)
 800464e:	f001 f91b 	bl	8005888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8004652:	bf00      	nop
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	2000280c 	.word	0x2000280c

0800465c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004660:	4802      	ldr	r0, [pc, #8]	@ (800466c <DMA2_Stream0_IRQHandler+0x10>)
 8004662:	f001 f911 	bl	8005888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004666:	bf00      	nop
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	20002644 	.word	0x20002644

08004670 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004674:	4802      	ldr	r0, [pc, #8]	@ (8004680 <DMA2_Stream2_IRQHandler+0x10>)
 8004676:	f001 f907 	bl	8005888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800467a:	bf00      	nop
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	200026a4 	.word	0x200026a4

08004684 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
  return 1;
 8004688:	2301      	movs	r3, #1
}
 800468a:	4618      	mov	r0, r3
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <_kill>:

int _kill(int pid, int sig)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800469e:	f00f f9fb 	bl	8013a98 <__errno>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2216      	movs	r2, #22
 80046a6:	601a      	str	r2, [r3, #0]
  return -1;
 80046a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3708      	adds	r7, #8
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <_exit>:

void _exit (int status)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80046bc:	f04f 31ff 	mov.w	r1, #4294967295
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f7ff ffe7 	bl	8004694 <_kill>
  while (1) {}    /* Make sure we hang here */
 80046c6:	bf00      	nop
 80046c8:	e7fd      	b.n	80046c6 <_exit+0x12>

080046ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b086      	sub	sp, #24
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	60f8      	str	r0, [r7, #12]
 80046d2:	60b9      	str	r1, [r7, #8]
 80046d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046d6:	2300      	movs	r3, #0
 80046d8:	617b      	str	r3, [r7, #20]
 80046da:	e00a      	b.n	80046f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80046dc:	f3af 8000 	nop.w
 80046e0:	4601      	mov	r1, r0
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	60ba      	str	r2, [r7, #8]
 80046e8:	b2ca      	uxtb	r2, r1
 80046ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	3301      	adds	r3, #1
 80046f0:	617b      	str	r3, [r7, #20]
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	dbf0      	blt.n	80046dc <_read+0x12>
  }

  return len;
 80046fa:	687b      	ldr	r3, [r7, #4]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3718      	adds	r7, #24
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800470c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004710:	4618      	mov	r0, r3
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800472c:	605a      	str	r2, [r3, #4]
  return 0;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <_isatty>:

int _isatty(int file)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004744:	2301      	movs	r3, #1
}
 8004746:	4618      	mov	r0, r3
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004752:	b480      	push	{r7}
 8004754:	b085      	sub	sp, #20
 8004756:	af00      	add	r7, sp, #0
 8004758:	60f8      	str	r0, [r7, #12]
 800475a:	60b9      	str	r1, [r7, #8]
 800475c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004774:	4a14      	ldr	r2, [pc, #80]	@ (80047c8 <_sbrk+0x5c>)
 8004776:	4b15      	ldr	r3, [pc, #84]	@ (80047cc <_sbrk+0x60>)
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004780:	4b13      	ldr	r3, [pc, #76]	@ (80047d0 <_sbrk+0x64>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d102      	bne.n	800478e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004788:	4b11      	ldr	r3, [pc, #68]	@ (80047d0 <_sbrk+0x64>)
 800478a:	4a12      	ldr	r2, [pc, #72]	@ (80047d4 <_sbrk+0x68>)
 800478c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800478e:	4b10      	ldr	r3, [pc, #64]	@ (80047d0 <_sbrk+0x64>)
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4413      	add	r3, r2
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	429a      	cmp	r2, r3
 800479a:	d207      	bcs.n	80047ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800479c:	f00f f97c 	bl	8013a98 <__errno>
 80047a0:	4603      	mov	r3, r0
 80047a2:	220c      	movs	r2, #12
 80047a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80047a6:	f04f 33ff 	mov.w	r3, #4294967295
 80047aa:	e009      	b.n	80047c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80047ac:	4b08      	ldr	r3, [pc, #32]	@ (80047d0 <_sbrk+0x64>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80047b2:	4b07      	ldr	r3, [pc, #28]	@ (80047d0 <_sbrk+0x64>)
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4413      	add	r3, r2
 80047ba:	4a05      	ldr	r2, [pc, #20]	@ (80047d0 <_sbrk+0x64>)
 80047bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80047be:	68fb      	ldr	r3, [r7, #12]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3718      	adds	r7, #24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	20020000 	.word	0x20020000
 80047cc:	00000400 	.word	0x00000400
 80047d0:	20002be4 	.word	0x20002be4
 80047d4:	20006b08 	.word	0x20006b08

080047d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047dc:	4b06      	ldr	r3, [pc, #24]	@ (80047f8 <SystemInit+0x20>)
 80047de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e2:	4a05      	ldr	r2, [pc, #20]	@ (80047f8 <SystemInit+0x20>)
 80047e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80047e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80047ec:	bf00      	nop
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	e000ed00 	.word	0xe000ed00

080047fc <Reset_Handler>:
 80047fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004834 <LoopFillZerobss+0x12>
 8004800:	480d      	ldr	r0, [pc, #52]	@ (8004838 <LoopFillZerobss+0x16>)
 8004802:	490e      	ldr	r1, [pc, #56]	@ (800483c <LoopFillZerobss+0x1a>)
 8004804:	4a0e      	ldr	r2, [pc, #56]	@ (8004840 <LoopFillZerobss+0x1e>)
 8004806:	2300      	movs	r3, #0
 8004808:	e002      	b.n	8004810 <LoopCopyDataInit>

0800480a <CopyDataInit>:
 800480a:	58d4      	ldr	r4, [r2, r3]
 800480c:	50c4      	str	r4, [r0, r3]
 800480e:	3304      	adds	r3, #4

08004810 <LoopCopyDataInit>:
 8004810:	18c4      	adds	r4, r0, r3
 8004812:	428c      	cmp	r4, r1
 8004814:	d3f9      	bcc.n	800480a <CopyDataInit>
 8004816:	4a0b      	ldr	r2, [pc, #44]	@ (8004844 <LoopFillZerobss+0x22>)
 8004818:	4c0b      	ldr	r4, [pc, #44]	@ (8004848 <LoopFillZerobss+0x26>)
 800481a:	2300      	movs	r3, #0
 800481c:	e001      	b.n	8004822 <LoopFillZerobss>

0800481e <FillZerobss>:
 800481e:	6013      	str	r3, [r2, #0]
 8004820:	3204      	adds	r2, #4

08004822 <LoopFillZerobss>:
 8004822:	42a2      	cmp	r2, r4
 8004824:	d3fb      	bcc.n	800481e <FillZerobss>
 8004826:	f7ff ffd7 	bl	80047d8 <SystemInit>
 800482a:	f00f f93b 	bl	8013aa4 <__libc_init_array>
 800482e:	f7fd fed9 	bl	80025e4 <main>
 8004832:	4770      	bx	lr
 8004834:	20020000 	.word	0x20020000
 8004838:	20000000 	.word	0x20000000
 800483c:	200001f0 	.word	0x200001f0
 8004840:	08017b18 	.word	0x08017b18
 8004844:	200001f0 	.word	0x200001f0
 8004848:	20006b08 	.word	0x20006b08

0800484c <CAN1_RX0_IRQHandler>:
 800484c:	e7fe      	b.n	800484c <CAN1_RX0_IRQHandler>
	...

08004850 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004854:	4b0e      	ldr	r3, [pc, #56]	@ (8004890 <HAL_Init+0x40>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a0d      	ldr	r2, [pc, #52]	@ (8004890 <HAL_Init+0x40>)
 800485a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800485e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004860:	4b0b      	ldr	r3, [pc, #44]	@ (8004890 <HAL_Init+0x40>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a0a      	ldr	r2, [pc, #40]	@ (8004890 <HAL_Init+0x40>)
 8004866:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800486a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800486c:	4b08      	ldr	r3, [pc, #32]	@ (8004890 <HAL_Init+0x40>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a07      	ldr	r2, [pc, #28]	@ (8004890 <HAL_Init+0x40>)
 8004872:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004876:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004878:	2003      	movs	r0, #3
 800487a:	f000 fe38 	bl	80054ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800487e:	200f      	movs	r0, #15
 8004880:	f7ff fdda 	bl	8004438 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004884:	f7ff f99e 	bl	8003bc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	40023c00 	.word	0x40023c00

08004894 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004898:	4b06      	ldr	r3, [pc, #24]	@ (80048b4 <HAL_IncTick+0x20>)
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	461a      	mov	r2, r3
 800489e:	4b06      	ldr	r3, [pc, #24]	@ (80048b8 <HAL_IncTick+0x24>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4413      	add	r3, r2
 80048a4:	4a04      	ldr	r2, [pc, #16]	@ (80048b8 <HAL_IncTick+0x24>)
 80048a6:	6013      	str	r3, [r2, #0]
}
 80048a8:	bf00      	nop
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	2000000c 	.word	0x2000000c
 80048b8:	20002be8 	.word	0x20002be8

080048bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048bc:	b480      	push	{r7}
 80048be:	af00      	add	r7, sp, #0
  return uwTick;
 80048c0:	4b03      	ldr	r3, [pc, #12]	@ (80048d0 <HAL_GetTick+0x14>)
 80048c2:	681b      	ldr	r3, [r3, #0]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	20002be8 	.word	0x20002be8

080048d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048dc:	f7ff ffee 	bl	80048bc <HAL_GetTick>
 80048e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ec:	d005      	beq.n	80048fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80048ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004918 <HAL_Delay+0x44>)
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	461a      	mov	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4413      	add	r3, r2
 80048f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80048fa:	bf00      	nop
 80048fc:	f7ff ffde 	bl	80048bc <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	429a      	cmp	r2, r3
 800490a:	d8f7      	bhi.n	80048fc <HAL_Delay+0x28>
  {
  }
}
 800490c:	bf00      	nop
 800490e:	bf00      	nop
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	2000000c 	.word	0x2000000c

0800491c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004924:	2300      	movs	r3, #0
 8004926:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e033      	b.n	800499a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004936:	2b00      	cmp	r3, #0
 8004938:	d109      	bne.n	800494e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7ff f96e 	bl	8003c1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004952:	f003 0310 	and.w	r3, r3, #16
 8004956:	2b00      	cmp	r3, #0
 8004958:	d118      	bne.n	800498c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004962:	f023 0302 	bic.w	r3, r3, #2
 8004966:	f043 0202 	orr.w	r2, r3, #2
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 fb88 	bl	8005084 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497e:	f023 0303 	bic.w	r3, r3, #3
 8004982:	f043 0201 	orr.w	r2, r3, #1
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	641a      	str	r2, [r3, #64]	@ 0x40
 800498a:	e001      	b.n	8004990 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004998:	7bfb      	ldrb	r3, [r7, #15]
}
 800499a:	4618      	mov	r0, r3
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b086      	sub	sp, #24
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80049aa:	2300      	movs	r3, #0
 80049ac:	617b      	str	r3, [r7, #20]
 80049ae:	2300      	movs	r3, #0
 80049b0:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	f003 0320 	and.w	r3, r3, #32
 80049d0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d049      	beq.n	8004a6c <HAL_ADC_IRQHandler+0xca>
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d046      	beq.n	8004a6c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e2:	f003 0310 	and.w	r3, r3, #16
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d105      	bne.n	80049f6 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ee:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d12b      	bne.n	8004a5c <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d127      	bne.n	8004a5c <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a12:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d006      	beq.n	8004a28 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d119      	bne.n	8004a5c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 0220 	bic.w	r2, r2, #32
 8004a36:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a3c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d105      	bne.n	8004a5c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a54:	f043 0201 	orr.w	r2, r3, #1
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f7fd fd23 	bl	80024a8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f06f 0212 	mvn.w	r2, #18
 8004a6a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f003 0304 	and.w	r3, r3, #4
 8004a72:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a7a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d057      	beq.n	8004b32 <HAL_ADC_IRQHandler+0x190>
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d054      	beq.n	8004b32 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8c:	f003 0310 	and.w	r3, r3, #16
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d105      	bne.n	8004aa0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a98:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d139      	bne.n	8004b22 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d006      	beq.n	8004aca <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d12b      	bne.n	8004b22 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d124      	bne.n	8004b22 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d11d      	bne.n	8004b22 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d119      	bne.n	8004b22 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004afc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b02:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d105      	bne.n	8004b22 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1a:	f043 0201 	orr.w	r2, r3, #1
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 fc2c 	bl	8005380 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f06f 020c 	mvn.w	r2, #12
 8004b30:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b40:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d017      	beq.n	8004b78 <HAL_ADC_IRQHandler+0x1d6>
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d014      	beq.n	8004b78 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d10d      	bne.n	8004b78 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b60:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f945 	bl	8004df8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f06f 0201 	mvn.w	r2, #1
 8004b76:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f003 0320 	and.w	r3, r3, #32
 8004b7e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004b86:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d015      	beq.n	8004bba <HAL_ADC_IRQHandler+0x218>
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d012      	beq.n	8004bba <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b98:	f043 0202 	orr.w	r2, r3, #2
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f06f 0220 	mvn.w	r2, #32
 8004ba8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f92e 	bl	8004e0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f06f 0220 	mvn.w	r2, #32
 8004bb8:	601a      	str	r2, [r3, #0]
  }
}
 8004bba:	bf00      	nop
 8004bbc:	3718      	adds	r7, #24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
	...

08004bc4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d101      	bne.n	8004be2 <HAL_ADC_Start_DMA+0x1e>
 8004bde:	2302      	movs	r3, #2
 8004be0:	e0e9      	b.n	8004db6 <HAL_ADC_Start_DMA+0x1f2>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d018      	beq.n	8004c2a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689a      	ldr	r2, [r3, #8]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 0201 	orr.w	r2, r2, #1
 8004c06:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004c08:	4b6d      	ldr	r3, [pc, #436]	@ (8004dc0 <HAL_ADC_Start_DMA+0x1fc>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a6d      	ldr	r2, [pc, #436]	@ (8004dc4 <HAL_ADC_Start_DMA+0x200>)
 8004c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c12:	0c9a      	lsrs	r2, r3, #18
 8004c14:	4613      	mov	r3, r2
 8004c16:	005b      	lsls	r3, r3, #1
 8004c18:	4413      	add	r3, r2
 8004c1a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004c1c:	e002      	b.n	8004c24 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	3b01      	subs	r3, #1
 8004c22:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1f9      	bne.n	8004c1e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c38:	d107      	bne.n	8004c4a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c48:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	f040 80a1 	bne.w	8004d9c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004c62:	f023 0301 	bic.w	r3, r3, #1
 8004c66:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d007      	beq.n	8004c8c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c80:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004c84:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c98:	d106      	bne.n	8004ca8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c9e:	f023 0206 	bic.w	r2, r3, #6
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	645a      	str	r2, [r3, #68]	@ 0x44
 8004ca6:	e002      	b.n	8004cae <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004cb6:	4b44      	ldr	r3, [pc, #272]	@ (8004dc8 <HAL_ADC_Start_DMA+0x204>)
 8004cb8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cbe:	4a43      	ldr	r2, [pc, #268]	@ (8004dcc <HAL_ADC_Start_DMA+0x208>)
 8004cc0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc6:	4a42      	ldr	r2, [pc, #264]	@ (8004dd0 <HAL_ADC_Start_DMA+0x20c>)
 8004cc8:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cce:	4a41      	ldr	r2, [pc, #260]	@ (8004dd4 <HAL_ADC_Start_DMA+0x210>)
 8004cd0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004cda:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685a      	ldr	r2, [r3, #4]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8004cea:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689a      	ldr	r2, [r3, #8]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cfa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	334c      	adds	r3, #76	@ 0x4c
 8004d06:	4619      	mov	r1, r3
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f000 fcd2 	bl	80056b4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f003 031f 	and.w	r3, r3, #31
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d12a      	bne.n	8004d72 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a2d      	ldr	r2, [pc, #180]	@ (8004dd8 <HAL_ADC_Start_DMA+0x214>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d015      	beq.n	8004d52 <HAL_ADC_Start_DMA+0x18e>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a2c      	ldr	r2, [pc, #176]	@ (8004ddc <HAL_ADC_Start_DMA+0x218>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d105      	bne.n	8004d3c <HAL_ADC_Start_DMA+0x178>
 8004d30:	4b25      	ldr	r3, [pc, #148]	@ (8004dc8 <HAL_ADC_Start_DMA+0x204>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f003 031f 	and.w	r3, r3, #31
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00a      	beq.n	8004d52 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a27      	ldr	r2, [pc, #156]	@ (8004de0 <HAL_ADC_Start_DMA+0x21c>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d136      	bne.n	8004db4 <HAL_ADC_Start_DMA+0x1f0>
 8004d46:	4b20      	ldr	r3, [pc, #128]	@ (8004dc8 <HAL_ADC_Start_DMA+0x204>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f003 0310 	and.w	r3, r3, #16
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d130      	bne.n	8004db4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d129      	bne.n	8004db4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689a      	ldr	r2, [r3, #8]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004d6e:	609a      	str	r2, [r3, #8]
 8004d70:	e020      	b.n	8004db4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a18      	ldr	r2, [pc, #96]	@ (8004dd8 <HAL_ADC_Start_DMA+0x214>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d11b      	bne.n	8004db4 <HAL_ADC_Start_DMA+0x1f0>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d114      	bne.n	8004db4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004d98:	609a      	str	r2, [r3, #8]
 8004d9a:	e00b      	b.n	8004db4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da0:	f043 0210 	orr.w	r2, r3, #16
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dac:	f043 0201 	orr.w	r2, r3, #1
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3718      	adds	r7, #24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	20000004 	.word	0x20000004
 8004dc4:	431bde83 	.word	0x431bde83
 8004dc8:	40012300 	.word	0x40012300
 8004dcc:	0800527d 	.word	0x0800527d
 8004dd0:	08005337 	.word	0x08005337
 8004dd4:	08005353 	.word	0x08005353
 8004dd8:	40012000 	.word	0x40012000
 8004ddc:	40012100 	.word	0x40012100
 8004de0:	40012200 	.word	0x40012200

08004de4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d101      	bne.n	8004e3c <HAL_ADC_ConfigChannel+0x1c>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	e113      	b.n	8005064 <HAL_ADC_ConfigChannel+0x244>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2b09      	cmp	r3, #9
 8004e4a:	d925      	bls.n	8004e98 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68d9      	ldr	r1, [r3, #12]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	461a      	mov	r2, r3
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	4413      	add	r3, r2
 8004e60:	3b1e      	subs	r3, #30
 8004e62:	2207      	movs	r2, #7
 8004e64:	fa02 f303 	lsl.w	r3, r2, r3
 8004e68:	43da      	mvns	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	400a      	ands	r2, r1
 8004e70:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68d9      	ldr	r1, [r3, #12]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	4618      	mov	r0, r3
 8004e84:	4603      	mov	r3, r0
 8004e86:	005b      	lsls	r3, r3, #1
 8004e88:	4403      	add	r3, r0
 8004e8a:	3b1e      	subs	r3, #30
 8004e8c:	409a      	lsls	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	60da      	str	r2, [r3, #12]
 8004e96:	e022      	b.n	8004ede <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6919      	ldr	r1, [r3, #16]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	4413      	add	r3, r2
 8004eac:	2207      	movs	r2, #7
 8004eae:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb2:	43da      	mvns	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	400a      	ands	r2, r1
 8004eba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6919      	ldr	r1, [r3, #16]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	689a      	ldr	r2, [r3, #8]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	4618      	mov	r0, r3
 8004ece:	4603      	mov	r3, r0
 8004ed0:	005b      	lsls	r3, r3, #1
 8004ed2:	4403      	add	r3, r0
 8004ed4:	409a      	lsls	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	2b06      	cmp	r3, #6
 8004ee4:	d824      	bhi.n	8004f30 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	3b05      	subs	r3, #5
 8004ef8:	221f      	movs	r2, #31
 8004efa:	fa02 f303 	lsl.w	r3, r2, r3
 8004efe:	43da      	mvns	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	400a      	ands	r2, r1
 8004f06:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	4618      	mov	r0, r3
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4413      	add	r3, r2
 8004f20:	3b05      	subs	r3, #5
 8004f22:	fa00 f203 	lsl.w	r2, r0, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004f2e:	e04c      	b.n	8004fca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	2b0c      	cmp	r3, #12
 8004f36:	d824      	bhi.n	8004f82 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	685a      	ldr	r2, [r3, #4]
 8004f42:	4613      	mov	r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	3b23      	subs	r3, #35	@ 0x23
 8004f4a:	221f      	movs	r2, #31
 8004f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f50:	43da      	mvns	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	400a      	ands	r2, r1
 8004f58:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	4618      	mov	r0, r3
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4413      	add	r3, r2
 8004f72:	3b23      	subs	r3, #35	@ 0x23
 8004f74:	fa00 f203 	lsl.w	r2, r0, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f80:	e023      	b.n	8004fca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	4413      	add	r3, r2
 8004f92:	3b41      	subs	r3, #65	@ 0x41
 8004f94:	221f      	movs	r2, #31
 8004f96:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9a:	43da      	mvns	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	400a      	ands	r2, r1
 8004fa2:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	3b41      	subs	r3, #65	@ 0x41
 8004fbe:	fa00 f203 	lsl.w	r2, r0, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004fca:	4b29      	ldr	r3, [pc, #164]	@ (8005070 <HAL_ADC_ConfigChannel+0x250>)
 8004fcc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a28      	ldr	r2, [pc, #160]	@ (8005074 <HAL_ADC_ConfigChannel+0x254>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d10f      	bne.n	8004ff8 <HAL_ADC_ConfigChannel+0x1d8>
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2b12      	cmp	r3, #18
 8004fde:	d10b      	bne.n	8004ff8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a1d      	ldr	r2, [pc, #116]	@ (8005074 <HAL_ADC_ConfigChannel+0x254>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d12b      	bne.n	800505a <HAL_ADC_ConfigChannel+0x23a>
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a1c      	ldr	r2, [pc, #112]	@ (8005078 <HAL_ADC_ConfigChannel+0x258>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d003      	beq.n	8005014 <HAL_ADC_ConfigChannel+0x1f4>
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2b11      	cmp	r3, #17
 8005012:	d122      	bne.n	800505a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a11      	ldr	r2, [pc, #68]	@ (8005078 <HAL_ADC_ConfigChannel+0x258>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d111      	bne.n	800505a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005036:	4b11      	ldr	r3, [pc, #68]	@ (800507c <HAL_ADC_ConfigChannel+0x25c>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a11      	ldr	r2, [pc, #68]	@ (8005080 <HAL_ADC_ConfigChannel+0x260>)
 800503c:	fba2 2303 	umull	r2, r3, r2, r3
 8005040:	0c9a      	lsrs	r2, r3, #18
 8005042:	4613      	mov	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800504c:	e002      	b.n	8005054 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	3b01      	subs	r3, #1
 8005052:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1f9      	bne.n	800504e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	40012300 	.word	0x40012300
 8005074:	40012000 	.word	0x40012000
 8005078:	10000012 	.word	0x10000012
 800507c:	20000004 	.word	0x20000004
 8005080:	431bde83 	.word	0x431bde83

08005084 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800508c:	4b79      	ldr	r3, [pc, #484]	@ (8005274 <ADC_Init+0x1f0>)
 800508e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	431a      	orrs	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6859      	ldr	r1, [r3, #4]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	021a      	lsls	r2, r3, #8
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80050dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	6859      	ldr	r1, [r3, #4]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689a      	ldr	r2, [r3, #8]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	430a      	orrs	r2, r1
 80050ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689a      	ldr	r2, [r3, #8]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6899      	ldr	r1, [r3, #8]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68da      	ldr	r2, [r3, #12]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	430a      	orrs	r2, r1
 8005110:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005116:	4a58      	ldr	r2, [pc, #352]	@ (8005278 <ADC_Init+0x1f4>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d022      	beq.n	8005162 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689a      	ldr	r2, [r3, #8]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800512a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6899      	ldr	r1, [r3, #8]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	689a      	ldr	r2, [r3, #8]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800514c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6899      	ldr	r1, [r3, #8]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	430a      	orrs	r2, r1
 800515e:	609a      	str	r2, [r3, #8]
 8005160:	e00f      	b.n	8005182 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	689a      	ldr	r2, [r3, #8]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005170:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	689a      	ldr	r2, [r3, #8]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005180:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f022 0202 	bic.w	r2, r2, #2
 8005190:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	6899      	ldr	r1, [r3, #8]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	7e1b      	ldrb	r3, [r3, #24]
 800519c:	005a      	lsls	r2, r3, #1
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d01b      	beq.n	80051e8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051be:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80051ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6859      	ldr	r1, [r3, #4]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051da:	3b01      	subs	r3, #1
 80051dc:	035a      	lsls	r2, r3, #13
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	430a      	orrs	r2, r1
 80051e4:	605a      	str	r2, [r3, #4]
 80051e6:	e007      	b.n	80051f8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685a      	ldr	r2, [r3, #4]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005206:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	3b01      	subs	r3, #1
 8005214:	051a      	lsls	r2, r3, #20
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	430a      	orrs	r2, r1
 800521c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800522c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	6899      	ldr	r1, [r3, #8]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800523a:	025a      	lsls	r2, r3, #9
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	430a      	orrs	r2, r1
 8005242:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689a      	ldr	r2, [r3, #8]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005252:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6899      	ldr	r1, [r3, #8]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	029a      	lsls	r2, r3, #10
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	430a      	orrs	r2, r1
 8005266:	609a      	str	r2, [r3, #8]
}
 8005268:	bf00      	nop
 800526a:	3714      	adds	r7, #20
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr
 8005274:	40012300 	.word	0x40012300
 8005278:	0f000001 	.word	0x0f000001

0800527c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005288:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800528e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005292:	2b00      	cmp	r3, #0
 8005294:	d13c      	bne.n	8005310 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800529a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d12b      	bne.n	8005308 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d127      	bne.n	8005308 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052be:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d006      	beq.n	80052d4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d119      	bne.n	8005308 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685a      	ldr	r2, [r3, #4]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f022 0220 	bic.w	r2, r2, #32
 80052e2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d105      	bne.n	8005308 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005300:	f043 0201 	orr.w	r2, r3, #1
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f7fd f8cd 	bl	80024a8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800530e:	e00e      	b.n	800532e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005314:	f003 0310 	and.w	r3, r3, #16
 8005318:	2b00      	cmp	r3, #0
 800531a:	d003      	beq.n	8005324 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f7ff fd75 	bl	8004e0c <HAL_ADC_ErrorCallback>
}
 8005322:	e004      	b.n	800532e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	4798      	blx	r3
}
 800532e:	bf00      	nop
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b084      	sub	sp, #16
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005342:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f7ff fd4d 	bl	8004de4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800534a:	bf00      	nop
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b084      	sub	sp, #16
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800535e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2240      	movs	r2, #64	@ 0x40
 8005364:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800536a:	f043 0204 	orr.w	r2, r3, #4
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f7ff fd4a 	bl	8004e0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005378:	bf00      	nop
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <__NVIC_SetPriorityGrouping>:
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f003 0307 	and.w	r3, r3, #7
 80053a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053a4:	4b0c      	ldr	r3, [pc, #48]	@ (80053d8 <__NVIC_SetPriorityGrouping+0x44>)
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80053b0:	4013      	ands	r3, r2
 80053b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80053c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053c6:	4a04      	ldr	r2, [pc, #16]	@ (80053d8 <__NVIC_SetPriorityGrouping+0x44>)
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	60d3      	str	r3, [r2, #12]
}
 80053cc:	bf00      	nop
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	e000ed00 	.word	0xe000ed00

080053dc <__NVIC_GetPriorityGrouping>:
{
 80053dc:	b480      	push	{r7}
 80053de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053e0:	4b04      	ldr	r3, [pc, #16]	@ (80053f4 <__NVIC_GetPriorityGrouping+0x18>)
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	0a1b      	lsrs	r3, r3, #8
 80053e6:	f003 0307 	and.w	r3, r3, #7
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	e000ed00 	.word	0xe000ed00

080053f8 <__NVIC_EnableIRQ>:
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	4603      	mov	r3, r0
 8005400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005406:	2b00      	cmp	r3, #0
 8005408:	db0b      	blt.n	8005422 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800540a:	79fb      	ldrb	r3, [r7, #7]
 800540c:	f003 021f 	and.w	r2, r3, #31
 8005410:	4907      	ldr	r1, [pc, #28]	@ (8005430 <__NVIC_EnableIRQ+0x38>)
 8005412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005416:	095b      	lsrs	r3, r3, #5
 8005418:	2001      	movs	r0, #1
 800541a:	fa00 f202 	lsl.w	r2, r0, r2
 800541e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005422:	bf00      	nop
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	e000e100 	.word	0xe000e100

08005434 <__NVIC_SetPriority>:
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	4603      	mov	r3, r0
 800543c:	6039      	str	r1, [r7, #0]
 800543e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005444:	2b00      	cmp	r3, #0
 8005446:	db0a      	blt.n	800545e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	b2da      	uxtb	r2, r3
 800544c:	490c      	ldr	r1, [pc, #48]	@ (8005480 <__NVIC_SetPriority+0x4c>)
 800544e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005452:	0112      	lsls	r2, r2, #4
 8005454:	b2d2      	uxtb	r2, r2
 8005456:	440b      	add	r3, r1
 8005458:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800545c:	e00a      	b.n	8005474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	b2da      	uxtb	r2, r3
 8005462:	4908      	ldr	r1, [pc, #32]	@ (8005484 <__NVIC_SetPriority+0x50>)
 8005464:	79fb      	ldrb	r3, [r7, #7]
 8005466:	f003 030f 	and.w	r3, r3, #15
 800546a:	3b04      	subs	r3, #4
 800546c:	0112      	lsls	r2, r2, #4
 800546e:	b2d2      	uxtb	r2, r2
 8005470:	440b      	add	r3, r1
 8005472:	761a      	strb	r2, [r3, #24]
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr
 8005480:	e000e100 	.word	0xe000e100
 8005484:	e000ed00 	.word	0xe000ed00

08005488 <NVIC_EncodePriority>:
{
 8005488:	b480      	push	{r7}
 800548a:	b089      	sub	sp, #36	@ 0x24
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f003 0307 	and.w	r3, r3, #7
 800549a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	f1c3 0307 	rsb	r3, r3, #7
 80054a2:	2b04      	cmp	r3, #4
 80054a4:	bf28      	it	cs
 80054a6:	2304      	movcs	r3, #4
 80054a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	3304      	adds	r3, #4
 80054ae:	2b06      	cmp	r3, #6
 80054b0:	d902      	bls.n	80054b8 <NVIC_EncodePriority+0x30>
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	3b03      	subs	r3, #3
 80054b6:	e000      	b.n	80054ba <NVIC_EncodePriority+0x32>
 80054b8:	2300      	movs	r3, #0
 80054ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054bc:	f04f 32ff 	mov.w	r2, #4294967295
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	fa02 f303 	lsl.w	r3, r2, r3
 80054c6:	43da      	mvns	r2, r3
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	401a      	ands	r2, r3
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054d0:	f04f 31ff 	mov.w	r1, #4294967295
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	fa01 f303 	lsl.w	r3, r1, r3
 80054da:	43d9      	mvns	r1, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054e0:	4313      	orrs	r3, r2
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3724      	adds	r7, #36	@ 0x24
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b082      	sub	sp, #8
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f7ff ff4c 	bl	8005394 <__NVIC_SetPriorityGrouping>
}
 80054fc:	bf00      	nop
 80054fe:	3708      	adds	r7, #8
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	4603      	mov	r3, r0
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
 8005510:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005512:	2300      	movs	r3, #0
 8005514:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005516:	f7ff ff61 	bl	80053dc <__NVIC_GetPriorityGrouping>
 800551a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	68b9      	ldr	r1, [r7, #8]
 8005520:	6978      	ldr	r0, [r7, #20]
 8005522:	f7ff ffb1 	bl	8005488 <NVIC_EncodePriority>
 8005526:	4602      	mov	r2, r0
 8005528:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800552c:	4611      	mov	r1, r2
 800552e:	4618      	mov	r0, r3
 8005530:	f7ff ff80 	bl	8005434 <__NVIC_SetPriority>
}
 8005534:	bf00      	nop
 8005536:	3718      	adds	r7, #24
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	4603      	mov	r3, r0
 8005544:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800554a:	4618      	mov	r0, r3
 800554c:	f7ff ff54 	bl	80053f8 <__NVIC_EnableIRQ>
}
 8005550:	bf00      	nop
 8005552:	3708      	adds	r7, #8
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005560:	2300      	movs	r3, #0
 8005562:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005564:	f7ff f9aa 	bl	80048bc <HAL_GetTick>
 8005568:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d101      	bne.n	8005574 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e099      	b.n	80056a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2202      	movs	r2, #2
 8005578:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f022 0201 	bic.w	r2, r2, #1
 8005592:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005594:	e00f      	b.n	80055b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005596:	f7ff f991 	bl	80048bc <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	2b05      	cmp	r3, #5
 80055a2:	d908      	bls.n	80055b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2220      	movs	r2, #32
 80055a8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2203      	movs	r2, #3
 80055ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e078      	b.n	80056a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1e8      	bne.n	8005596 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	4b38      	ldr	r3, [pc, #224]	@ (80056b0 <HAL_DMA_Init+0x158>)
 80055d0:	4013      	ands	r3, r2
 80055d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a1b      	ldr	r3, [r3, #32]
 8005600:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	4313      	orrs	r3, r2
 8005606:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800560c:	2b04      	cmp	r3, #4
 800560e:	d107      	bne.n	8005620 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005618:	4313      	orrs	r3, r2
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	4313      	orrs	r3, r2
 800561e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	f023 0307 	bic.w	r3, r3, #7
 8005636:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	4313      	orrs	r3, r2
 8005640:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005646:	2b04      	cmp	r3, #4
 8005648:	d117      	bne.n	800567a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	4313      	orrs	r3, r2
 8005652:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00e      	beq.n	800567a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 fb1b 	bl	8005c98 <DMA_CheckFifoParam>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d008      	beq.n	800567a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2240      	movs	r2, #64	@ 0x40
 800566c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005676:	2301      	movs	r3, #1
 8005678:	e016      	b.n	80056a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 fad2 	bl	8005c2c <DMA_CalcBaseAndBitshift>
 8005688:	4603      	mov	r3, r0
 800568a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005690:	223f      	movs	r2, #63	@ 0x3f
 8005692:	409a      	lsls	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3718      	adds	r7, #24
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	f010803f 	.word	0xf010803f

080056b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
 80056c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056c2:	2300      	movs	r3, #0
 80056c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d101      	bne.n	80056da <HAL_DMA_Start_IT+0x26>
 80056d6:	2302      	movs	r3, #2
 80056d8:	e040      	b.n	800575c <HAL_DMA_Start_IT+0xa8>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d12f      	bne.n	800574e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2202      	movs	r2, #2
 80056f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	68b9      	ldr	r1, [r7, #8]
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f000 fa64 	bl	8005bd0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800570c:	223f      	movs	r2, #63	@ 0x3f
 800570e:	409a      	lsls	r2, r3
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f042 0216 	orr.w	r2, r2, #22
 8005722:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005728:	2b00      	cmp	r3, #0
 800572a:	d007      	beq.n	800573c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f042 0208 	orr.w	r2, r2, #8
 800573a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f042 0201 	orr.w	r2, r2, #1
 800574a:	601a      	str	r2, [r3, #0]
 800574c:	e005      	b.n	800575a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005756:	2302      	movs	r3, #2
 8005758:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800575a:	7dfb      	ldrb	r3, [r7, #23]
}
 800575c:	4618      	mov	r0, r3
 800575e:	3718      	adds	r7, #24
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005770:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005772:	f7ff f8a3 	bl	80048bc <HAL_GetTick>
 8005776:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b02      	cmp	r3, #2
 8005782:	d008      	beq.n	8005796 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2280      	movs	r2, #128	@ 0x80
 8005788:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e052      	b.n	800583c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0216 	bic.w	r2, r2, #22
 80057a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	695a      	ldr	r2, [r3, #20]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80057b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d103      	bne.n	80057c6 <HAL_DMA_Abort+0x62>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d007      	beq.n	80057d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f022 0208 	bic.w	r2, r2, #8
 80057d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f022 0201 	bic.w	r2, r2, #1
 80057e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057e6:	e013      	b.n	8005810 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80057e8:	f7ff f868 	bl	80048bc <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b05      	cmp	r3, #5
 80057f4:	d90c      	bls.n	8005810 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2220      	movs	r2, #32
 80057fa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2203      	movs	r2, #3
 8005800:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e015      	b.n	800583c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1e4      	bne.n	80057e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005822:	223f      	movs	r2, #63	@ 0x3f
 8005824:	409a      	lsls	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005852:	b2db      	uxtb	r3, r3
 8005854:	2b02      	cmp	r3, #2
 8005856:	d004      	beq.n	8005862 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2280      	movs	r2, #128	@ 0x80
 800585c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e00c      	b.n	800587c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2205      	movs	r2, #5
 8005866:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 0201 	bic.w	r2, r2, #1
 8005878:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005890:	2300      	movs	r3, #0
 8005892:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005894:	4b8e      	ldr	r3, [pc, #568]	@ (8005ad0 <HAL_DMA_IRQHandler+0x248>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a8e      	ldr	r2, [pc, #568]	@ (8005ad4 <HAL_DMA_IRQHandler+0x24c>)
 800589a:	fba2 2303 	umull	r2, r3, r2, r3
 800589e:	0a9b      	lsrs	r3, r3, #10
 80058a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058b2:	2208      	movs	r2, #8
 80058b4:	409a      	lsls	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	4013      	ands	r3, r2
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d01a      	beq.n	80058f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0304 	and.w	r3, r3, #4
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d013      	beq.n	80058f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f022 0204 	bic.w	r2, r2, #4
 80058da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058e0:	2208      	movs	r2, #8
 80058e2:	409a      	lsls	r2, r3
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ec:	f043 0201 	orr.w	r2, r3, #1
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058f8:	2201      	movs	r2, #1
 80058fa:	409a      	lsls	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4013      	ands	r3, r2
 8005900:	2b00      	cmp	r3, #0
 8005902:	d012      	beq.n	800592a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00b      	beq.n	800592a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005916:	2201      	movs	r2, #1
 8005918:	409a      	lsls	r2, r3
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005922:	f043 0202 	orr.w	r2, r3, #2
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800592e:	2204      	movs	r2, #4
 8005930:	409a      	lsls	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	4013      	ands	r3, r2
 8005936:	2b00      	cmp	r3, #0
 8005938:	d012      	beq.n	8005960 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0302 	and.w	r3, r3, #2
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00b      	beq.n	8005960 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800594c:	2204      	movs	r2, #4
 800594e:	409a      	lsls	r2, r3
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005958:	f043 0204 	orr.w	r2, r3, #4
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005964:	2210      	movs	r2, #16
 8005966:	409a      	lsls	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	4013      	ands	r3, r2
 800596c:	2b00      	cmp	r3, #0
 800596e:	d043      	beq.n	80059f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0308 	and.w	r3, r3, #8
 800597a:	2b00      	cmp	r3, #0
 800597c:	d03c      	beq.n	80059f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005982:	2210      	movs	r2, #16
 8005984:	409a      	lsls	r2, r3
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d018      	beq.n	80059ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d108      	bne.n	80059b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d024      	beq.n	80059f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	4798      	blx	r3
 80059b6:	e01f      	b.n	80059f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d01b      	beq.n	80059f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	4798      	blx	r3
 80059c8:	e016      	b.n	80059f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d107      	bne.n	80059e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f022 0208 	bic.w	r2, r2, #8
 80059e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d003      	beq.n	80059f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059fc:	2220      	movs	r2, #32
 80059fe:	409a      	lsls	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4013      	ands	r3, r2
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f000 808f 	beq.w	8005b28 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0310 	and.w	r3, r3, #16
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f000 8087 	beq.w	8005b28 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a1e:	2220      	movs	r2, #32
 8005a20:	409a      	lsls	r2, r3
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b05      	cmp	r3, #5
 8005a30:	d136      	bne.n	8005aa0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 0216 	bic.w	r2, r2, #22
 8005a40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	695a      	ldr	r2, [r3, #20]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d103      	bne.n	8005a62 <HAL_DMA_IRQHandler+0x1da>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d007      	beq.n	8005a72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f022 0208 	bic.w	r2, r2, #8
 8005a70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a76:	223f      	movs	r2, #63	@ 0x3f
 8005a78:	409a      	lsls	r2, r3
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d07e      	beq.n	8005b94 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	4798      	blx	r3
        }
        return;
 8005a9e:	e079      	b.n	8005b94 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d01d      	beq.n	8005aea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d10d      	bne.n	8005ad8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d031      	beq.n	8005b28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	4798      	blx	r3
 8005acc:	e02c      	b.n	8005b28 <HAL_DMA_IRQHandler+0x2a0>
 8005ace:	bf00      	nop
 8005ad0:	20000004 	.word	0x20000004
 8005ad4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d023      	beq.n	8005b28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	4798      	blx	r3
 8005ae8:	e01e      	b.n	8005b28 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d10f      	bne.n	8005b18 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f022 0210 	bic.w	r2, r2, #16
 8005b06:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d003      	beq.n	8005b28 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d032      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d022      	beq.n	8005b82 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2205      	movs	r2, #5
 8005b40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 0201 	bic.w	r2, r2, #1
 8005b52:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	3301      	adds	r3, #1
 8005b58:	60bb      	str	r3, [r7, #8]
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d307      	bcc.n	8005b70 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1f2      	bne.n	8005b54 <HAL_DMA_IRQHandler+0x2cc>
 8005b6e:	e000      	b.n	8005b72 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005b70:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d005      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	4798      	blx	r3
 8005b92:	e000      	b.n	8005b96 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005b94:	bf00      	nop
    }
  }
}
 8005b96:	3718      	adds	r7, #24
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005baa:	b2db      	uxtb	r3, r3
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
 8005bdc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005bec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	683a      	ldr	r2, [r7, #0]
 8005bf4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	2b40      	cmp	r3, #64	@ 0x40
 8005bfc:	d108      	bne.n	8005c10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005c0e:	e007      	b.n	8005c20 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	60da      	str	r2, [r3, #12]
}
 8005c20:	bf00      	nop
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	3b10      	subs	r3, #16
 8005c3c:	4a14      	ldr	r2, [pc, #80]	@ (8005c90 <DMA_CalcBaseAndBitshift+0x64>)
 8005c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c42:	091b      	lsrs	r3, r3, #4
 8005c44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005c46:	4a13      	ldr	r2, [pc, #76]	@ (8005c94 <DMA_CalcBaseAndBitshift+0x68>)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2b03      	cmp	r3, #3
 8005c58:	d909      	bls.n	8005c6e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005c62:	f023 0303 	bic.w	r3, r3, #3
 8005c66:	1d1a      	adds	r2, r3, #4
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	659a      	str	r2, [r3, #88]	@ 0x58
 8005c6c:	e007      	b.n	8005c7e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005c76:	f023 0303 	bic.w	r3, r3, #3
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3714      	adds	r7, #20
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	aaaaaaab 	.word	0xaaaaaaab
 8005c94:	08016f5c 	.word	0x08016f5c

08005c98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d11f      	bne.n	8005cf2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	2b03      	cmp	r3, #3
 8005cb6:	d856      	bhi.n	8005d66 <DMA_CheckFifoParam+0xce>
 8005cb8:	a201      	add	r2, pc, #4	@ (adr r2, 8005cc0 <DMA_CheckFifoParam+0x28>)
 8005cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cbe:	bf00      	nop
 8005cc0:	08005cd1 	.word	0x08005cd1
 8005cc4:	08005ce3 	.word	0x08005ce3
 8005cc8:	08005cd1 	.word	0x08005cd1
 8005ccc:	08005d67 	.word	0x08005d67
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d046      	beq.n	8005d6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ce0:	e043      	b.n	8005d6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005cea:	d140      	bne.n	8005d6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cf0:	e03d      	b.n	8005d6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cfa:	d121      	bne.n	8005d40 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	2b03      	cmp	r3, #3
 8005d00:	d837      	bhi.n	8005d72 <DMA_CheckFifoParam+0xda>
 8005d02:	a201      	add	r2, pc, #4	@ (adr r2, 8005d08 <DMA_CheckFifoParam+0x70>)
 8005d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d08:	08005d19 	.word	0x08005d19
 8005d0c:	08005d1f 	.word	0x08005d1f
 8005d10:	08005d19 	.word	0x08005d19
 8005d14:	08005d31 	.word	0x08005d31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d1c:	e030      	b.n	8005d80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d22:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d025      	beq.n	8005d76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d2e:	e022      	b.n	8005d76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d34:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005d38:	d11f      	bne.n	8005d7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005d3e:	e01c      	b.n	8005d7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d903      	bls.n	8005d4e <DMA_CheckFifoParam+0xb6>
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	2b03      	cmp	r3, #3
 8005d4a:	d003      	beq.n	8005d54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005d4c:	e018      	b.n	8005d80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	73fb      	strb	r3, [r7, #15]
      break;
 8005d52:	e015      	b.n	8005d80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00e      	beq.n	8005d7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	73fb      	strb	r3, [r7, #15]
      break;
 8005d64:	e00b      	b.n	8005d7e <DMA_CheckFifoParam+0xe6>
      break;
 8005d66:	bf00      	nop
 8005d68:	e00a      	b.n	8005d80 <DMA_CheckFifoParam+0xe8>
      break;
 8005d6a:	bf00      	nop
 8005d6c:	e008      	b.n	8005d80 <DMA_CheckFifoParam+0xe8>
      break;
 8005d6e:	bf00      	nop
 8005d70:	e006      	b.n	8005d80 <DMA_CheckFifoParam+0xe8>
      break;
 8005d72:	bf00      	nop
 8005d74:	e004      	b.n	8005d80 <DMA_CheckFifoParam+0xe8>
      break;
 8005d76:	bf00      	nop
 8005d78:	e002      	b.n	8005d80 <DMA_CheckFifoParam+0xe8>
      break;   
 8005d7a:	bf00      	nop
 8005d7c:	e000      	b.n	8005d80 <DMA_CheckFifoParam+0xe8>
      break;
 8005d7e:	bf00      	nop
    }
  } 
  
  return status; 
 8005d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop

08005d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b089      	sub	sp, #36	@ 0x24
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005da2:	2300      	movs	r3, #0
 8005da4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005da6:	2300      	movs	r3, #0
 8005da8:	61fb      	str	r3, [r7, #28]
 8005daa:	e165      	b.n	8006078 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005dac:	2201      	movs	r2, #1
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	fa02 f303 	lsl.w	r3, r2, r3
 8005db4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	f040 8154 	bne.w	8006072 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f003 0303 	and.w	r3, r3, #3
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d005      	beq.n	8005de2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d130      	bne.n	8005e44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	005b      	lsls	r3, r3, #1
 8005dec:	2203      	movs	r2, #3
 8005dee:	fa02 f303 	lsl.w	r3, r2, r3
 8005df2:	43db      	mvns	r3, r3
 8005df4:	69ba      	ldr	r2, [r7, #24]
 8005df6:	4013      	ands	r3, r2
 8005df8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	68da      	ldr	r2, [r3, #12]
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	005b      	lsls	r3, r3, #1
 8005e02:	fa02 f303 	lsl.w	r3, r2, r3
 8005e06:	69ba      	ldr	r2, [r7, #24]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e18:	2201      	movs	r2, #1
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e20:	43db      	mvns	r3, r3
 8005e22:	69ba      	ldr	r2, [r7, #24]
 8005e24:	4013      	ands	r3, r2
 8005e26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	091b      	lsrs	r3, r3, #4
 8005e2e:	f003 0201 	and.w	r2, r3, #1
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	fa02 f303 	lsl.w	r3, r2, r3
 8005e38:	69ba      	ldr	r2, [r7, #24]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	69ba      	ldr	r2, [r7, #24]
 8005e42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f003 0303 	and.w	r3, r3, #3
 8005e4c:	2b03      	cmp	r3, #3
 8005e4e:	d017      	beq.n	8005e80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	005b      	lsls	r3, r3, #1
 8005e5a:	2203      	movs	r2, #3
 8005e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e60:	43db      	mvns	r3, r3
 8005e62:	69ba      	ldr	r2, [r7, #24]
 8005e64:	4013      	ands	r3, r2
 8005e66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	689a      	ldr	r2, [r3, #8]
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	005b      	lsls	r3, r3, #1
 8005e70:	fa02 f303 	lsl.w	r3, r2, r3
 8005e74:	69ba      	ldr	r2, [r7, #24]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	69ba      	ldr	r2, [r7, #24]
 8005e7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f003 0303 	and.w	r3, r3, #3
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d123      	bne.n	8005ed4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	08da      	lsrs	r2, r3, #3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	3208      	adds	r2, #8
 8005e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	f003 0307 	and.w	r3, r3, #7
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	220f      	movs	r2, #15
 8005ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea8:	43db      	mvns	r3, r3
 8005eaa:	69ba      	ldr	r2, [r7, #24]
 8005eac:	4013      	ands	r3, r2
 8005eae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	691a      	ldr	r2, [r3, #16]
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	f003 0307 	and.w	r3, r3, #7
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec0:	69ba      	ldr	r2, [r7, #24]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	08da      	lsrs	r2, r3, #3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	3208      	adds	r2, #8
 8005ece:	69b9      	ldr	r1, [r7, #24]
 8005ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	005b      	lsls	r3, r3, #1
 8005ede:	2203      	movs	r2, #3
 8005ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee4:	43db      	mvns	r3, r3
 8005ee6:	69ba      	ldr	r2, [r7, #24]
 8005ee8:	4013      	ands	r3, r2
 8005eea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f003 0203 	and.w	r2, r3, #3
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	005b      	lsls	r3, r3, #1
 8005ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8005efc:	69ba      	ldr	r2, [r7, #24]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f000 80ae 	beq.w	8006072 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f16:	2300      	movs	r3, #0
 8005f18:	60fb      	str	r3, [r7, #12]
 8005f1a:	4b5d      	ldr	r3, [pc, #372]	@ (8006090 <HAL_GPIO_Init+0x300>)
 8005f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f1e:	4a5c      	ldr	r2, [pc, #368]	@ (8006090 <HAL_GPIO_Init+0x300>)
 8005f20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005f24:	6453      	str	r3, [r2, #68]	@ 0x44
 8005f26:	4b5a      	ldr	r3, [pc, #360]	@ (8006090 <HAL_GPIO_Init+0x300>)
 8005f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f2e:	60fb      	str	r3, [r7, #12]
 8005f30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f32:	4a58      	ldr	r2, [pc, #352]	@ (8006094 <HAL_GPIO_Init+0x304>)
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	089b      	lsrs	r3, r3, #2
 8005f38:	3302      	adds	r3, #2
 8005f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	f003 0303 	and.w	r3, r3, #3
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	220f      	movs	r2, #15
 8005f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f4e:	43db      	mvns	r3, r3
 8005f50:	69ba      	ldr	r2, [r7, #24]
 8005f52:	4013      	ands	r3, r2
 8005f54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a4f      	ldr	r2, [pc, #316]	@ (8006098 <HAL_GPIO_Init+0x308>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d025      	beq.n	8005faa <HAL_GPIO_Init+0x21a>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a4e      	ldr	r2, [pc, #312]	@ (800609c <HAL_GPIO_Init+0x30c>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d01f      	beq.n	8005fa6 <HAL_GPIO_Init+0x216>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a4d      	ldr	r2, [pc, #308]	@ (80060a0 <HAL_GPIO_Init+0x310>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d019      	beq.n	8005fa2 <HAL_GPIO_Init+0x212>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a4c      	ldr	r2, [pc, #304]	@ (80060a4 <HAL_GPIO_Init+0x314>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d013      	beq.n	8005f9e <HAL_GPIO_Init+0x20e>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a4b      	ldr	r2, [pc, #300]	@ (80060a8 <HAL_GPIO_Init+0x318>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d00d      	beq.n	8005f9a <HAL_GPIO_Init+0x20a>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a4a      	ldr	r2, [pc, #296]	@ (80060ac <HAL_GPIO_Init+0x31c>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d007      	beq.n	8005f96 <HAL_GPIO_Init+0x206>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a49      	ldr	r2, [pc, #292]	@ (80060b0 <HAL_GPIO_Init+0x320>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d101      	bne.n	8005f92 <HAL_GPIO_Init+0x202>
 8005f8e:	2306      	movs	r3, #6
 8005f90:	e00c      	b.n	8005fac <HAL_GPIO_Init+0x21c>
 8005f92:	2307      	movs	r3, #7
 8005f94:	e00a      	b.n	8005fac <HAL_GPIO_Init+0x21c>
 8005f96:	2305      	movs	r3, #5
 8005f98:	e008      	b.n	8005fac <HAL_GPIO_Init+0x21c>
 8005f9a:	2304      	movs	r3, #4
 8005f9c:	e006      	b.n	8005fac <HAL_GPIO_Init+0x21c>
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e004      	b.n	8005fac <HAL_GPIO_Init+0x21c>
 8005fa2:	2302      	movs	r3, #2
 8005fa4:	e002      	b.n	8005fac <HAL_GPIO_Init+0x21c>
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e000      	b.n	8005fac <HAL_GPIO_Init+0x21c>
 8005faa:	2300      	movs	r3, #0
 8005fac:	69fa      	ldr	r2, [r7, #28]
 8005fae:	f002 0203 	and.w	r2, r2, #3
 8005fb2:	0092      	lsls	r2, r2, #2
 8005fb4:	4093      	lsls	r3, r2
 8005fb6:	69ba      	ldr	r2, [r7, #24]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005fbc:	4935      	ldr	r1, [pc, #212]	@ (8006094 <HAL_GPIO_Init+0x304>)
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	089b      	lsrs	r3, r3, #2
 8005fc2:	3302      	adds	r3, #2
 8005fc4:	69ba      	ldr	r2, [r7, #24]
 8005fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005fca:	4b3a      	ldr	r3, [pc, #232]	@ (80060b4 <HAL_GPIO_Init+0x324>)
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	43db      	mvns	r3, r3
 8005fd4:	69ba      	ldr	r2, [r7, #24]
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d003      	beq.n	8005fee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005fe6:	69ba      	ldr	r2, [r7, #24]
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005fee:	4a31      	ldr	r2, [pc, #196]	@ (80060b4 <HAL_GPIO_Init+0x324>)
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ff4:	4b2f      	ldr	r3, [pc, #188]	@ (80060b4 <HAL_GPIO_Init+0x324>)
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	43db      	mvns	r3, r3
 8005ffe:	69ba      	ldr	r2, [r7, #24]
 8006000:	4013      	ands	r3, r2
 8006002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d003      	beq.n	8006018 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	4313      	orrs	r3, r2
 8006016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006018:	4a26      	ldr	r2, [pc, #152]	@ (80060b4 <HAL_GPIO_Init+0x324>)
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800601e:	4b25      	ldr	r3, [pc, #148]	@ (80060b4 <HAL_GPIO_Init+0x324>)
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	43db      	mvns	r3, r3
 8006028:	69ba      	ldr	r2, [r7, #24]
 800602a:	4013      	ands	r3, r2
 800602c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d003      	beq.n	8006042 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800603a:	69ba      	ldr	r2, [r7, #24]
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	4313      	orrs	r3, r2
 8006040:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006042:	4a1c      	ldr	r2, [pc, #112]	@ (80060b4 <HAL_GPIO_Init+0x324>)
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006048:	4b1a      	ldr	r3, [pc, #104]	@ (80060b4 <HAL_GPIO_Init+0x324>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	43db      	mvns	r3, r3
 8006052:	69ba      	ldr	r2, [r7, #24]
 8006054:	4013      	ands	r3, r2
 8006056:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d003      	beq.n	800606c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006064:	69ba      	ldr	r2, [r7, #24]
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	4313      	orrs	r3, r2
 800606a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800606c:	4a11      	ldr	r2, [pc, #68]	@ (80060b4 <HAL_GPIO_Init+0x324>)
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	3301      	adds	r3, #1
 8006076:	61fb      	str	r3, [r7, #28]
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	2b0f      	cmp	r3, #15
 800607c:	f67f ae96 	bls.w	8005dac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006080:	bf00      	nop
 8006082:	bf00      	nop
 8006084:	3724      	adds	r7, #36	@ 0x24
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	40023800 	.word	0x40023800
 8006094:	40013800 	.word	0x40013800
 8006098:	40020000 	.word	0x40020000
 800609c:	40020400 	.word	0x40020400
 80060a0:	40020800 	.word	0x40020800
 80060a4:	40020c00 	.word	0x40020c00
 80060a8:	40021000 	.word	0x40021000
 80060ac:	40021400 	.word	0x40021400
 80060b0:	40021800 	.word	0x40021800
 80060b4:	40013c00 	.word	0x40013c00

080060b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	460b      	mov	r3, r1
 80060c2:	807b      	strh	r3, [r7, #2]
 80060c4:	4613      	mov	r3, r2
 80060c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80060c8:	787b      	ldrb	r3, [r7, #1]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d003      	beq.n	80060d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80060ce:	887a      	ldrh	r2, [r7, #2]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80060d4:	e003      	b.n	80060de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80060d6:	887b      	ldrh	r3, [r7, #2]
 80060d8:	041a      	lsls	r2, r3, #16
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	619a      	str	r2, [r3, #24]
}
 80060de:	bf00      	nop
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
	...

080060ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	4603      	mov	r3, r0
 80060f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80060f6:	4b08      	ldr	r3, [pc, #32]	@ (8006118 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80060f8:	695a      	ldr	r2, [r3, #20]
 80060fa:	88fb      	ldrh	r3, [r7, #6]
 80060fc:	4013      	ands	r3, r2
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d006      	beq.n	8006110 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006102:	4a05      	ldr	r2, [pc, #20]	@ (8006118 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006104:	88fb      	ldrh	r3, [r7, #6]
 8006106:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006108:	88fb      	ldrh	r3, [r7, #6]
 800610a:	4618      	mov	r0, r3
 800610c:	f7fc f98e 	bl	800242c <HAL_GPIO_EXTI_Callback>
  }
}
 8006110:	bf00      	nop
 8006112:	3708      	adds	r7, #8
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	40013c00 	.word	0x40013c00

0800611c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d101      	bne.n	800612e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e12b      	b.n	8006386 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d106      	bne.n	8006148 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f7fd fe58 	bl	8003df8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2224      	movs	r2, #36	@ 0x24
 800614c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f022 0201 	bic.w	r2, r2, #1
 800615e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800616e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800617e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006180:	f003 fc60 	bl	8009a44 <HAL_RCC_GetPCLK1Freq>
 8006184:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	4a81      	ldr	r2, [pc, #516]	@ (8006390 <HAL_I2C_Init+0x274>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d807      	bhi.n	80061a0 <HAL_I2C_Init+0x84>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	4a80      	ldr	r2, [pc, #512]	@ (8006394 <HAL_I2C_Init+0x278>)
 8006194:	4293      	cmp	r3, r2
 8006196:	bf94      	ite	ls
 8006198:	2301      	movls	r3, #1
 800619a:	2300      	movhi	r3, #0
 800619c:	b2db      	uxtb	r3, r3
 800619e:	e006      	b.n	80061ae <HAL_I2C_Init+0x92>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	4a7d      	ldr	r2, [pc, #500]	@ (8006398 <HAL_I2C_Init+0x27c>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	bf94      	ite	ls
 80061a8:	2301      	movls	r3, #1
 80061aa:	2300      	movhi	r3, #0
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e0e7      	b.n	8006386 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	4a78      	ldr	r2, [pc, #480]	@ (800639c <HAL_I2C_Init+0x280>)
 80061ba:	fba2 2303 	umull	r2, r3, r2, r3
 80061be:	0c9b      	lsrs	r3, r3, #18
 80061c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6a1b      	ldr	r3, [r3, #32]
 80061dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	4a6a      	ldr	r2, [pc, #424]	@ (8006390 <HAL_I2C_Init+0x274>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d802      	bhi.n	80061f0 <HAL_I2C_Init+0xd4>
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	3301      	adds	r3, #1
 80061ee:	e009      	b.n	8006204 <HAL_I2C_Init+0xe8>
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80061f6:	fb02 f303 	mul.w	r3, r2, r3
 80061fa:	4a69      	ldr	r2, [pc, #420]	@ (80063a0 <HAL_I2C_Init+0x284>)
 80061fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006200:	099b      	lsrs	r3, r3, #6
 8006202:	3301      	adds	r3, #1
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	6812      	ldr	r2, [r2, #0]
 8006208:	430b      	orrs	r3, r1
 800620a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	69db      	ldr	r3, [r3, #28]
 8006212:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006216:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	495c      	ldr	r1, [pc, #368]	@ (8006390 <HAL_I2C_Init+0x274>)
 8006220:	428b      	cmp	r3, r1
 8006222:	d819      	bhi.n	8006258 <HAL_I2C_Init+0x13c>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	1e59      	subs	r1, r3, #1
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	005b      	lsls	r3, r3, #1
 800622e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006232:	1c59      	adds	r1, r3, #1
 8006234:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006238:	400b      	ands	r3, r1
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00a      	beq.n	8006254 <HAL_I2C_Init+0x138>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	1e59      	subs	r1, r3, #1
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	005b      	lsls	r3, r3, #1
 8006248:	fbb1 f3f3 	udiv	r3, r1, r3
 800624c:	3301      	adds	r3, #1
 800624e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006252:	e051      	b.n	80062f8 <HAL_I2C_Init+0x1dc>
 8006254:	2304      	movs	r3, #4
 8006256:	e04f      	b.n	80062f8 <HAL_I2C_Init+0x1dc>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d111      	bne.n	8006284 <HAL_I2C_Init+0x168>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	1e58      	subs	r0, r3, #1
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6859      	ldr	r1, [r3, #4]
 8006268:	460b      	mov	r3, r1
 800626a:	005b      	lsls	r3, r3, #1
 800626c:	440b      	add	r3, r1
 800626e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006272:	3301      	adds	r3, #1
 8006274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006278:	2b00      	cmp	r3, #0
 800627a:	bf0c      	ite	eq
 800627c:	2301      	moveq	r3, #1
 800627e:	2300      	movne	r3, #0
 8006280:	b2db      	uxtb	r3, r3
 8006282:	e012      	b.n	80062aa <HAL_I2C_Init+0x18e>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	1e58      	subs	r0, r3, #1
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6859      	ldr	r1, [r3, #4]
 800628c:	460b      	mov	r3, r1
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	440b      	add	r3, r1
 8006292:	0099      	lsls	r1, r3, #2
 8006294:	440b      	add	r3, r1
 8006296:	fbb0 f3f3 	udiv	r3, r0, r3
 800629a:	3301      	adds	r3, #1
 800629c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	bf0c      	ite	eq
 80062a4:	2301      	moveq	r3, #1
 80062a6:	2300      	movne	r3, #0
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d001      	beq.n	80062b2 <HAL_I2C_Init+0x196>
 80062ae:	2301      	movs	r3, #1
 80062b0:	e022      	b.n	80062f8 <HAL_I2C_Init+0x1dc>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10e      	bne.n	80062d8 <HAL_I2C_Init+0x1bc>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	1e58      	subs	r0, r3, #1
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6859      	ldr	r1, [r3, #4]
 80062c2:	460b      	mov	r3, r1
 80062c4:	005b      	lsls	r3, r3, #1
 80062c6:	440b      	add	r3, r1
 80062c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80062cc:	3301      	adds	r3, #1
 80062ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062d6:	e00f      	b.n	80062f8 <HAL_I2C_Init+0x1dc>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	1e58      	subs	r0, r3, #1
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6859      	ldr	r1, [r3, #4]
 80062e0:	460b      	mov	r3, r1
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	440b      	add	r3, r1
 80062e6:	0099      	lsls	r1, r3, #2
 80062e8:	440b      	add	r3, r1
 80062ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80062ee:	3301      	adds	r3, #1
 80062f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80062f8:	6879      	ldr	r1, [r7, #4]
 80062fa:	6809      	ldr	r1, [r1, #0]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	69da      	ldr	r2, [r3, #28]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	431a      	orrs	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	430a      	orrs	r2, r1
 800631a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006326:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	6911      	ldr	r1, [r2, #16]
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	68d2      	ldr	r2, [r2, #12]
 8006332:	4311      	orrs	r1, r2
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	6812      	ldr	r2, [r2, #0]
 8006338:	430b      	orrs	r3, r1
 800633a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	695a      	ldr	r2, [r3, #20]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	431a      	orrs	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	430a      	orrs	r2, r1
 8006356:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f042 0201 	orr.w	r2, r2, #1
 8006366:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2220      	movs	r2, #32
 8006372:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	000186a0 	.word	0x000186a0
 8006394:	001e847f 	.word	0x001e847f
 8006398:	003d08ff 	.word	0x003d08ff
 800639c:	431bde83 	.word	0x431bde83
 80063a0:	10624dd3 	.word	0x10624dd3

080063a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b088      	sub	sp, #32
 80063a8:	af02      	add	r7, sp, #8
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	607a      	str	r2, [r7, #4]
 80063ae:	461a      	mov	r2, r3
 80063b0:	460b      	mov	r3, r1
 80063b2:	817b      	strh	r3, [r7, #10]
 80063b4:	4613      	mov	r3, r2
 80063b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80063b8:	f7fe fa80 	bl	80048bc <HAL_GetTick>
 80063bc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b20      	cmp	r3, #32
 80063c8:	f040 80e0 	bne.w	800658c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	9300      	str	r3, [sp, #0]
 80063d0:	2319      	movs	r3, #25
 80063d2:	2201      	movs	r2, #1
 80063d4:	4970      	ldr	r1, [pc, #448]	@ (8006598 <HAL_I2C_Master_Transmit+0x1f4>)
 80063d6:	68f8      	ldr	r0, [r7, #12]
 80063d8:	f003 f818 	bl	800940c <I2C_WaitOnFlagUntilTimeout>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d001      	beq.n	80063e6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80063e2:	2302      	movs	r3, #2
 80063e4:	e0d3      	b.n	800658e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d101      	bne.n	80063f4 <HAL_I2C_Master_Transmit+0x50>
 80063f0:	2302      	movs	r3, #2
 80063f2:	e0cc      	b.n	800658e <HAL_I2C_Master_Transmit+0x1ea>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0301 	and.w	r3, r3, #1
 8006406:	2b01      	cmp	r3, #1
 8006408:	d007      	beq.n	800641a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f042 0201 	orr.w	r2, r2, #1
 8006418:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006428:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2221      	movs	r2, #33	@ 0x21
 800642e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2210      	movs	r2, #16
 8006436:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	893a      	ldrh	r2, [r7, #8]
 800644a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006450:	b29a      	uxth	r2, r3
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	4a50      	ldr	r2, [pc, #320]	@ (800659c <HAL_I2C_Master_Transmit+0x1f8>)
 800645a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800645c:	8979      	ldrh	r1, [r7, #10]
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	6a3a      	ldr	r2, [r7, #32]
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f002 fb4a 	bl	8008afc <I2C_MasterRequestWrite>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d001      	beq.n	8006472 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e08d      	b.n	800658e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006472:	2300      	movs	r3, #0
 8006474:	613b      	str	r3, [r7, #16]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	695b      	ldr	r3, [r3, #20]
 800647c:	613b      	str	r3, [r7, #16]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	699b      	ldr	r3, [r3, #24]
 8006484:	613b      	str	r3, [r7, #16]
 8006486:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006488:	e066      	b.n	8006558 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	6a39      	ldr	r1, [r7, #32]
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f003 f892 	bl	80095b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00d      	beq.n	80064b6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800649e:	2b04      	cmp	r3, #4
 80064a0:	d107      	bne.n	80064b2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e06b      	b.n	800658e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ba:	781a      	ldrb	r2, [r3, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c6:	1c5a      	adds	r2, r3, #1
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	3b01      	subs	r3, #1
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064de:	3b01      	subs	r3, #1
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	695b      	ldr	r3, [r3, #20]
 80064ec:	f003 0304 	and.w	r3, r3, #4
 80064f0:	2b04      	cmp	r3, #4
 80064f2:	d11b      	bne.n	800652c <HAL_I2C_Master_Transmit+0x188>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d017      	beq.n	800652c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006500:	781a      	ldrb	r2, [r3, #0]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800650c:	1c5a      	adds	r2, r3, #1
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006516:	b29b      	uxth	r3, r3
 8006518:	3b01      	subs	r3, #1
 800651a:	b29a      	uxth	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006524:	3b01      	subs	r3, #1
 8006526:	b29a      	uxth	r2, r3
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	6a39      	ldr	r1, [r7, #32]
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f003 f882 	bl	800963a <I2C_WaitOnBTFFlagUntilTimeout>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00d      	beq.n	8006558 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006540:	2b04      	cmp	r3, #4
 8006542:	d107      	bne.n	8006554 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006552:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e01a      	b.n	800658e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800655c:	2b00      	cmp	r3, #0
 800655e:	d194      	bne.n	800648a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800656e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2220      	movs	r2, #32
 8006574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006588:	2300      	movs	r3, #0
 800658a:	e000      	b.n	800658e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800658c:	2302      	movs	r3, #2
  }
}
 800658e:	4618      	mov	r0, r3
 8006590:	3718      	adds	r7, #24
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	00100002 	.word	0x00100002
 800659c:	ffff0000 	.word	0xffff0000

080065a0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b08c      	sub	sp, #48	@ 0x30
 80065a4:	af02      	add	r7, sp, #8
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	607a      	str	r2, [r7, #4]
 80065aa:	461a      	mov	r2, r3
 80065ac:	460b      	mov	r3, r1
 80065ae:	817b      	strh	r3, [r7, #10]
 80065b0:	4613      	mov	r3, r2
 80065b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80065b4:	f7fe f982 	bl	80048bc <HAL_GetTick>
 80065b8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b20      	cmp	r3, #32
 80065c4:	f040 820b 	bne.w	80069de <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ca:	9300      	str	r3, [sp, #0]
 80065cc:	2319      	movs	r3, #25
 80065ce:	2201      	movs	r2, #1
 80065d0:	497c      	ldr	r1, [pc, #496]	@ (80067c4 <HAL_I2C_Master_Receive+0x224>)
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f002 ff1a 	bl	800940c <I2C_WaitOnFlagUntilTimeout>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80065de:	2302      	movs	r3, #2
 80065e0:	e1fe      	b.n	80069e0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d101      	bne.n	80065f0 <HAL_I2C_Master_Receive+0x50>
 80065ec:	2302      	movs	r3, #2
 80065ee:	e1f7      	b.n	80069e0 <HAL_I2C_Master_Receive+0x440>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0301 	and.w	r3, r3, #1
 8006602:	2b01      	cmp	r3, #1
 8006604:	d007      	beq.n	8006616 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f042 0201 	orr.w	r2, r2, #1
 8006614:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006624:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2222      	movs	r2, #34	@ 0x22
 800662a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2210      	movs	r2, #16
 8006632:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	893a      	ldrh	r2, [r7, #8]
 8006646:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800664c:	b29a      	uxth	r2, r3
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	4a5c      	ldr	r2, [pc, #368]	@ (80067c8 <HAL_I2C_Master_Receive+0x228>)
 8006656:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006658:	8979      	ldrh	r1, [r7, #10]
 800665a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f002 face 	bl	8008c00 <I2C_MasterRequestRead>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d001      	beq.n	800666e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e1b8      	b.n	80069e0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006672:	2b00      	cmp	r3, #0
 8006674:	d113      	bne.n	800669e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006676:	2300      	movs	r3, #0
 8006678:	623b      	str	r3, [r7, #32]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	695b      	ldr	r3, [r3, #20]
 8006680:	623b      	str	r3, [r7, #32]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	623b      	str	r3, [r7, #32]
 800668a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	e18c      	b.n	80069b8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d11b      	bne.n	80066de <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066b6:	2300      	movs	r3, #0
 80066b8:	61fb      	str	r3, [r7, #28]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	61fb      	str	r3, [r7, #28]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	699b      	ldr	r3, [r3, #24]
 80066c8:	61fb      	str	r3, [r7, #28]
 80066ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066da:	601a      	str	r2, [r3, #0]
 80066dc:	e16c      	b.n	80069b8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d11b      	bne.n	800671e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066f4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006704:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006706:	2300      	movs	r3, #0
 8006708:	61bb      	str	r3, [r7, #24]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	695b      	ldr	r3, [r3, #20]
 8006710:	61bb      	str	r3, [r7, #24]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	61bb      	str	r3, [r7, #24]
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	e14c      	b.n	80069b8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800672c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800672e:	2300      	movs	r3, #0
 8006730:	617b      	str	r3, [r7, #20]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	695b      	ldr	r3, [r3, #20]
 8006738:	617b      	str	r3, [r7, #20]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	617b      	str	r3, [r7, #20]
 8006742:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006744:	e138      	b.n	80069b8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800674a:	2b03      	cmp	r3, #3
 800674c:	f200 80f1 	bhi.w	8006932 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006754:	2b01      	cmp	r3, #1
 8006756:	d123      	bne.n	80067a0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006758:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800675a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f002 ffdf 	bl	8009720 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d001      	beq.n	800676c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e139      	b.n	80069e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	691a      	ldr	r2, [r3, #16]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006776:	b2d2      	uxtb	r2, r2
 8006778:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800677e:	1c5a      	adds	r2, r3, #1
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006788:	3b01      	subs	r3, #1
 800678a:	b29a      	uxth	r2, r3
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006794:	b29b      	uxth	r3, r3
 8006796:	3b01      	subs	r3, #1
 8006798:	b29a      	uxth	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800679e:	e10b      	b.n	80069b8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d14e      	bne.n	8006846 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ae:	2200      	movs	r2, #0
 80067b0:	4906      	ldr	r1, [pc, #24]	@ (80067cc <HAL_I2C_Master_Receive+0x22c>)
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f002 fe2a 	bl	800940c <I2C_WaitOnFlagUntilTimeout>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d008      	beq.n	80067d0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e10e      	b.n	80069e0 <HAL_I2C_Master_Receive+0x440>
 80067c2:	bf00      	nop
 80067c4:	00100002 	.word	0x00100002
 80067c8:	ffff0000 	.word	0xffff0000
 80067cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	691a      	ldr	r2, [r3, #16]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ea:	b2d2      	uxtb	r2, r2
 80067ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067f2:	1c5a      	adds	r2, r3, #1
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067fc:	3b01      	subs	r3, #1
 80067fe:	b29a      	uxth	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006808:	b29b      	uxth	r3, r3
 800680a:	3b01      	subs	r3, #1
 800680c:	b29a      	uxth	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	691a      	ldr	r2, [r3, #16]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800681c:	b2d2      	uxtb	r2, r2
 800681e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006824:	1c5a      	adds	r2, r3, #1
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800682e:	3b01      	subs	r3, #1
 8006830:	b29a      	uxth	r2, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800683a:	b29b      	uxth	r3, r3
 800683c:	3b01      	subs	r3, #1
 800683e:	b29a      	uxth	r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006844:	e0b8      	b.n	80069b8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006848:	9300      	str	r3, [sp, #0]
 800684a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684c:	2200      	movs	r2, #0
 800684e:	4966      	ldr	r1, [pc, #408]	@ (80069e8 <HAL_I2C_Master_Receive+0x448>)
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f002 fddb 	bl	800940c <I2C_WaitOnFlagUntilTimeout>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d001      	beq.n	8006860 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e0bf      	b.n	80069e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800686e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	691a      	ldr	r2, [r3, #16]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800687a:	b2d2      	uxtb	r2, r2
 800687c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006882:	1c5a      	adds	r2, r3, #1
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800688c:	3b01      	subs	r3, #1
 800688e:	b29a      	uxth	r2, r3
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006898:	b29b      	uxth	r3, r3
 800689a:	3b01      	subs	r3, #1
 800689c:	b29a      	uxth	r2, r3
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80068a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a4:	9300      	str	r3, [sp, #0]
 80068a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a8:	2200      	movs	r2, #0
 80068aa:	494f      	ldr	r1, [pc, #316]	@ (80069e8 <HAL_I2C_Master_Receive+0x448>)
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f002 fdad 	bl	800940c <I2C_WaitOnFlagUntilTimeout>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d001      	beq.n	80068bc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e091      	b.n	80069e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	691a      	ldr	r2, [r3, #16]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068d6:	b2d2      	uxtb	r2, r2
 80068d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068de:	1c5a      	adds	r2, r3, #1
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068e8:	3b01      	subs	r3, #1
 80068ea:	b29a      	uxth	r2, r3
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	3b01      	subs	r3, #1
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	691a      	ldr	r2, [r3, #16]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006908:	b2d2      	uxtb	r2, r2
 800690a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006910:	1c5a      	adds	r2, r3, #1
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800691a:	3b01      	subs	r3, #1
 800691c:	b29a      	uxth	r2, r3
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006926:	b29b      	uxth	r3, r3
 8006928:	3b01      	subs	r3, #1
 800692a:	b29a      	uxth	r2, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006930:	e042      	b.n	80069b8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006932:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006934:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f002 fef2 	bl	8009720 <I2C_WaitOnRXNEFlagUntilTimeout>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d001      	beq.n	8006946 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e04c      	b.n	80069e0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	691a      	ldr	r2, [r3, #16]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006950:	b2d2      	uxtb	r2, r2
 8006952:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006958:	1c5a      	adds	r2, r3, #1
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006962:	3b01      	subs	r3, #1
 8006964:	b29a      	uxth	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800696e:	b29b      	uxth	r3, r3
 8006970:	3b01      	subs	r3, #1
 8006972:	b29a      	uxth	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	f003 0304 	and.w	r3, r3, #4
 8006982:	2b04      	cmp	r3, #4
 8006984:	d118      	bne.n	80069b8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	691a      	ldr	r2, [r3, #16]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006990:	b2d2      	uxtb	r2, r2
 8006992:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006998:	1c5a      	adds	r2, r3, #1
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069a2:	3b01      	subs	r3, #1
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	3b01      	subs	r3, #1
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f47f aec2 	bne.w	8006746 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2220      	movs	r2, #32
 80069c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80069da:	2300      	movs	r3, #0
 80069dc:	e000      	b.n	80069e0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80069de:	2302      	movs	r3, #2
  }
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3728      	adds	r7, #40	@ 0x28
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	00010004 	.word	0x00010004

080069ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b088      	sub	sp, #32
 80069f0:	af02      	add	r7, sp, #8
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	4608      	mov	r0, r1
 80069f6:	4611      	mov	r1, r2
 80069f8:	461a      	mov	r2, r3
 80069fa:	4603      	mov	r3, r0
 80069fc:	817b      	strh	r3, [r7, #10]
 80069fe:	460b      	mov	r3, r1
 8006a00:	813b      	strh	r3, [r7, #8]
 8006a02:	4613      	mov	r3, r2
 8006a04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a06:	f7fd ff59 	bl	80048bc <HAL_GetTick>
 8006a0a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	2b20      	cmp	r3, #32
 8006a16:	f040 80d9 	bne.w	8006bcc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	2319      	movs	r3, #25
 8006a20:	2201      	movs	r2, #1
 8006a22:	496d      	ldr	r1, [pc, #436]	@ (8006bd8 <HAL_I2C_Mem_Write+0x1ec>)
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f002 fcf1 	bl	800940c <I2C_WaitOnFlagUntilTimeout>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d001      	beq.n	8006a34 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006a30:	2302      	movs	r3, #2
 8006a32:	e0cc      	b.n	8006bce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d101      	bne.n	8006a42 <HAL_I2C_Mem_Write+0x56>
 8006a3e:	2302      	movs	r3, #2
 8006a40:	e0c5      	b.n	8006bce <HAL_I2C_Mem_Write+0x1e2>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0301 	and.w	r3, r3, #1
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d007      	beq.n	8006a68 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f042 0201 	orr.w	r2, r2, #1
 8006a66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2221      	movs	r2, #33	@ 0x21
 8006a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2240      	movs	r2, #64	@ 0x40
 8006a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6a3a      	ldr	r2, [r7, #32]
 8006a92:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006a98:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	4a4d      	ldr	r2, [pc, #308]	@ (8006bdc <HAL_I2C_Mem_Write+0x1f0>)
 8006aa8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006aaa:	88f8      	ldrh	r0, [r7, #6]
 8006aac:	893a      	ldrh	r2, [r7, #8]
 8006aae:	8979      	ldrh	r1, [r7, #10]
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	9301      	str	r3, [sp, #4]
 8006ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab6:	9300      	str	r3, [sp, #0]
 8006ab8:	4603      	mov	r3, r0
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f002 f96e 	bl	8008d9c <I2C_RequestMemoryWrite>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d052      	beq.n	8006b6c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e081      	b.n	8006bce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f002 fd72 	bl	80095b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d00d      	beq.n	8006af6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ade:	2b04      	cmp	r3, #4
 8006ae0:	d107      	bne.n	8006af2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006af0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e06b      	b.n	8006bce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006afa:	781a      	ldrb	r2, [r3, #0]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b06:	1c5a      	adds	r2, r3, #1
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b10:	3b01      	subs	r3, #1
 8006b12:	b29a      	uxth	r2, r3
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	695b      	ldr	r3, [r3, #20]
 8006b2c:	f003 0304 	and.w	r3, r3, #4
 8006b30:	2b04      	cmp	r3, #4
 8006b32:	d11b      	bne.n	8006b6c <HAL_I2C_Mem_Write+0x180>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d017      	beq.n	8006b6c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b40:	781a      	ldrb	r2, [r3, #0]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b4c:	1c5a      	adds	r2, r3, #1
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b56:	3b01      	subs	r3, #1
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	3b01      	subs	r3, #1
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1aa      	bne.n	8006aca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f002 fd5e 	bl	800963a <I2C_WaitOnBTFFlagUntilTimeout>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00d      	beq.n	8006ba0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b88:	2b04      	cmp	r3, #4
 8006b8a:	d107      	bne.n	8006b9c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b9a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e016      	b.n	8006bce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2220      	movs	r2, #32
 8006bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	e000      	b.n	8006bce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006bcc:	2302      	movs	r3, #2
  }
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3718      	adds	r7, #24
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	00100002 	.word	0x00100002
 8006bdc:	ffff0000 	.word	0xffff0000

08006be0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b08c      	sub	sp, #48	@ 0x30
 8006be4:	af02      	add	r7, sp, #8
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	4608      	mov	r0, r1
 8006bea:	4611      	mov	r1, r2
 8006bec:	461a      	mov	r2, r3
 8006bee:	4603      	mov	r3, r0
 8006bf0:	817b      	strh	r3, [r7, #10]
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	813b      	strh	r3, [r7, #8]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006bfa:	f7fd fe5f 	bl	80048bc <HAL_GetTick>
 8006bfe:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	2b20      	cmp	r3, #32
 8006c0a:	f040 8208 	bne.w	800701e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c10:	9300      	str	r3, [sp, #0]
 8006c12:	2319      	movs	r3, #25
 8006c14:	2201      	movs	r2, #1
 8006c16:	497b      	ldr	r1, [pc, #492]	@ (8006e04 <HAL_I2C_Mem_Read+0x224>)
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f002 fbf7 	bl	800940c <I2C_WaitOnFlagUntilTimeout>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d001      	beq.n	8006c28 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006c24:	2302      	movs	r3, #2
 8006c26:	e1fb      	b.n	8007020 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d101      	bne.n	8006c36 <HAL_I2C_Mem_Read+0x56>
 8006c32:	2302      	movs	r3, #2
 8006c34:	e1f4      	b.n	8007020 <HAL_I2C_Mem_Read+0x440>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 0301 	and.w	r3, r3, #1
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d007      	beq.n	8006c5c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f042 0201 	orr.w	r2, r2, #1
 8006c5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2222      	movs	r2, #34	@ 0x22
 8006c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2240      	movs	r2, #64	@ 0x40
 8006c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006c8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	4a5b      	ldr	r2, [pc, #364]	@ (8006e08 <HAL_I2C_Mem_Read+0x228>)
 8006c9c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c9e:	88f8      	ldrh	r0, [r7, #6]
 8006ca0:	893a      	ldrh	r2, [r7, #8]
 8006ca2:	8979      	ldrh	r1, [r7, #10]
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca6:	9301      	str	r3, [sp, #4]
 8006ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	4603      	mov	r3, r0
 8006cae:	68f8      	ldr	r0, [r7, #12]
 8006cb0:	f002 f90a 	bl	8008ec8 <I2C_RequestMemoryRead>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d001      	beq.n	8006cbe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e1b0      	b.n	8007020 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d113      	bne.n	8006cee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	623b      	str	r3, [r7, #32]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	695b      	ldr	r3, [r3, #20]
 8006cd0:	623b      	str	r3, [r7, #32]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	699b      	ldr	r3, [r3, #24]
 8006cd8:	623b      	str	r3, [r7, #32]
 8006cda:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cea:	601a      	str	r2, [r3, #0]
 8006cec:	e184      	b.n	8006ff8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d11b      	bne.n	8006d2e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d06:	2300      	movs	r3, #0
 8006d08:	61fb      	str	r3, [r7, #28]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	695b      	ldr	r3, [r3, #20]
 8006d10:	61fb      	str	r3, [r7, #28]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	61fb      	str	r3, [r7, #28]
 8006d1a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d2a:	601a      	str	r2, [r3, #0]
 8006d2c:	e164      	b.n	8006ff8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d11b      	bne.n	8006d6e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d44:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d56:	2300      	movs	r3, #0
 8006d58:	61bb      	str	r3, [r7, #24]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	695b      	ldr	r3, [r3, #20]
 8006d60:	61bb      	str	r3, [r7, #24]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	61bb      	str	r3, [r7, #24]
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	e144      	b.n	8006ff8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d6e:	2300      	movs	r3, #0
 8006d70:	617b      	str	r3, [r7, #20]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	617b      	str	r3, [r7, #20]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	699b      	ldr	r3, [r3, #24]
 8006d80:	617b      	str	r3, [r7, #20]
 8006d82:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006d84:	e138      	b.n	8006ff8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d8a:	2b03      	cmp	r3, #3
 8006d8c:	f200 80f1 	bhi.w	8006f72 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d123      	bne.n	8006de0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d9a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f002 fcbf 	bl	8009720 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d001      	beq.n	8006dac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e139      	b.n	8007020 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	691a      	ldr	r2, [r3, #16]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db6:	b2d2      	uxtb	r2, r2
 8006db8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dbe:	1c5a      	adds	r2, r3, #1
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006dde:	e10b      	b.n	8006ff8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d14e      	bne.n	8006e86 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dea:	9300      	str	r3, [sp, #0]
 8006dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dee:	2200      	movs	r2, #0
 8006df0:	4906      	ldr	r1, [pc, #24]	@ (8006e0c <HAL_I2C_Mem_Read+0x22c>)
 8006df2:	68f8      	ldr	r0, [r7, #12]
 8006df4:	f002 fb0a 	bl	800940c <I2C_WaitOnFlagUntilTimeout>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d008      	beq.n	8006e10 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e10e      	b.n	8007020 <HAL_I2C_Mem_Read+0x440>
 8006e02:	bf00      	nop
 8006e04:	00100002 	.word	0x00100002
 8006e08:	ffff0000 	.word	0xffff0000
 8006e0c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	691a      	ldr	r2, [r3, #16]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e2a:	b2d2      	uxtb	r2, r2
 8006e2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e32:	1c5a      	adds	r2, r3, #1
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	b29a      	uxth	r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	691a      	ldr	r2, [r3, #16]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e5c:	b2d2      	uxtb	r2, r2
 8006e5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e64:	1c5a      	adds	r2, r3, #1
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006e84:	e0b8      	b.n	8006ff8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e88:	9300      	str	r3, [sp, #0]
 8006e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	4966      	ldr	r1, [pc, #408]	@ (8007028 <HAL_I2C_Mem_Read+0x448>)
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	f002 fabb 	bl	800940c <I2C_WaitOnFlagUntilTimeout>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d001      	beq.n	8006ea0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e0bf      	b.n	8007020 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006eae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	691a      	ldr	r2, [r3, #16]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eba:	b2d2      	uxtb	r2, r2
 8006ebc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec2:	1c5a      	adds	r2, r3, #1
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	3b01      	subs	r3, #1
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee8:	2200      	movs	r2, #0
 8006eea:	494f      	ldr	r1, [pc, #316]	@ (8007028 <HAL_I2C_Mem_Read+0x448>)
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f002 fa8d 	bl	800940c <I2C_WaitOnFlagUntilTimeout>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d001      	beq.n	8006efc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e091      	b.n	8007020 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	691a      	ldr	r2, [r3, #16]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f16:	b2d2      	uxtb	r2, r2
 8006f18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f1e:	1c5a      	adds	r2, r3, #1
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	3b01      	subs	r3, #1
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	691a      	ldr	r2, [r3, #16]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f48:	b2d2      	uxtb	r2, r2
 8006f4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f50:	1c5a      	adds	r2, r3, #1
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006f70:	e042      	b.n	8006ff8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f74:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	f002 fbd2 	bl	8009720 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d001      	beq.n	8006f86 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e04c      	b.n	8007020 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	691a      	ldr	r2, [r3, #16]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f90:	b2d2      	uxtb	r2, r2
 8006f92:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f98:	1c5a      	adds	r2, r3, #1
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	695b      	ldr	r3, [r3, #20]
 8006fbe:	f003 0304 	and.w	r3, r3, #4
 8006fc2:	2b04      	cmp	r3, #4
 8006fc4:	d118      	bne.n	8006ff8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	691a      	ldr	r2, [r3, #16]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fd0:	b2d2      	uxtb	r2, r2
 8006fd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fd8:	1c5a      	adds	r2, r3, #1
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f47f aec2 	bne.w	8006d86 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2220      	movs	r2, #32
 8007006:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800701a:	2300      	movs	r3, #0
 800701c:	e000      	b.n	8007020 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800701e:	2302      	movs	r3, #2
  }
}
 8007020:	4618      	mov	r0, r3
 8007022:	3728      	adds	r7, #40	@ 0x28
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	00010004 	.word	0x00010004

0800702c <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b08c      	sub	sp, #48	@ 0x30
 8007030:	af02      	add	r7, sp, #8
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	4608      	mov	r0, r1
 8007036:	4611      	mov	r1, r2
 8007038:	461a      	mov	r2, r3
 800703a:	4603      	mov	r3, r0
 800703c:	817b      	strh	r3, [r7, #10]
 800703e:	460b      	mov	r3, r1
 8007040:	813b      	strh	r3, [r7, #8]
 8007042:	4613      	mov	r3, r2
 8007044:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007046:	f7fd fc39 	bl	80048bc <HAL_GetTick>
 800704a:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 800704c:	2300      	movs	r3, #0
 800704e:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007056:	b2db      	uxtb	r3, r3
 8007058:	2b20      	cmp	r3, #32
 800705a:	f040 8176 	bne.w	800734a <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800705e:	4b95      	ldr	r3, [pc, #596]	@ (80072b4 <HAL_I2C_Mem_Read_DMA+0x288>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	08db      	lsrs	r3, r3, #3
 8007064:	4a94      	ldr	r2, [pc, #592]	@ (80072b8 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8007066:	fba2 2303 	umull	r2, r3, r2, r3
 800706a:	0a1a      	lsrs	r2, r3, #8
 800706c:	4613      	mov	r3, r2
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4413      	add	r3, r2
 8007072:	009a      	lsls	r2, r3, #2
 8007074:	4413      	add	r3, r2
 8007076:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	3b01      	subs	r3, #1
 800707c:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d116      	bne.n	80070b2 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2220      	movs	r2, #32
 800708e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800709e:	f043 0220 	orr.w	r2, r3, #32
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e14c      	b.n	800734c <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	f003 0302 	and.w	r3, r3, #2
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d0db      	beq.n	8007078 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d101      	bne.n	80070ce <HAL_I2C_Mem_Read_DMA+0xa2>
 80070ca:	2302      	movs	r3, #2
 80070cc:	e13e      	b.n	800734c <HAL_I2C_Mem_Read_DMA+0x320>
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 0301 	and.w	r3, r3, #1
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d007      	beq.n	80070f4 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f042 0201 	orr.w	r2, r2, #1
 80070f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007102:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2222      	movs	r2, #34	@ 0x22
 8007108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2240      	movs	r2, #64	@ 0x40
 8007110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800711e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007124:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800712a:	b29a      	uxth	r2, r3
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	4a62      	ldr	r2, [pc, #392]	@ (80072bc <HAL_I2C_Mem_Read_DMA+0x290>)
 8007134:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8007136:	897a      	ldrh	r2, [r7, #10]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 800713c:	893a      	ldrh	r2, [r7, #8]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8007142:	88fa      	ldrh	r2, [r7, #6]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2200      	movs	r2, #0
 800714c:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007152:	2b00      	cmp	r3, #0
 8007154:	f000 80cc 	beq.w	80072f0 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800715c:	2b00      	cmp	r3, #0
 800715e:	d02d      	beq.n	80071bc <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007164:	4a56      	ldr	r2, [pc, #344]	@ (80072c0 <HAL_I2C_Mem_Read_DMA+0x294>)
 8007166:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800716c:	4a55      	ldr	r2, [pc, #340]	@ (80072c4 <HAL_I2C_Mem_Read_DMA+0x298>)
 800716e:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007174:	2200      	movs	r2, #0
 8007176:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800717c:	2200      	movs	r2, #0
 800717e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007184:	2200      	movs	r2, #0
 8007186:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800718c:	2200      	movs	r2, #0
 800718e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	3310      	adds	r3, #16
 800719a:	4619      	mov	r1, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071a0:	461a      	mov	r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071a6:	f7fe fa85 	bl	80056b4 <HAL_DMA_Start_IT>
 80071aa:	4603      	mov	r3, r0
 80071ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80071b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f040 8087 	bne.w	80072c8 <HAL_I2C_Mem_Read_DMA+0x29c>
 80071ba:	e013      	b.n	80071e4 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2220      	movs	r2, #32
 80071c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071d0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	e0b3      	b.n	800734c <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80071e4:	88f8      	ldrh	r0, [r7, #6]
 80071e6:	893a      	ldrh	r2, [r7, #8]
 80071e8:	8979      	ldrh	r1, [r7, #10]
 80071ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ec:	9301      	str	r3, [sp, #4]
 80071ee:	2323      	movs	r3, #35	@ 0x23
 80071f0:	9300      	str	r3, [sp, #0]
 80071f2:	4603      	mov	r3, r0
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f001 fe67 	bl	8008ec8 <I2C_RequestMemoryRead>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d023      	beq.n	8007248 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007204:	4618      	mov	r0, r3
 8007206:	f7fe fb1d 	bl	8005844 <HAL_DMA_Abort_IT>
 800720a:	4603      	mov	r3, r0
 800720c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007214:	2200      	movs	r2, #0
 8007216:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007226:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2200      	movs	r2, #0
 8007232:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f022 0201 	bic.w	r2, r2, #1
 8007242:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e081      	b.n	800734c <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800724c:	2b01      	cmp	r3, #1
 800724e:	d108      	bne.n	8007262 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800725e:	601a      	str	r2, [r3, #0]
 8007260:	e007      	b.n	8007272 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	685a      	ldr	r2, [r3, #4]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007270:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007272:	2300      	movs	r3, #0
 8007274:	61bb      	str	r3, [r7, #24]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	695b      	ldr	r3, [r3, #20]
 800727c:	61bb      	str	r3, [r7, #24]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	61bb      	str	r3, [r7, #24]
 8007286:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	685a      	ldr	r2, [r3, #4]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800729e:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	685a      	ldr	r2, [r3, #4]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80072ae:	605a      	str	r2, [r3, #4]
 80072b0:	e049      	b.n	8007346 <HAL_I2C_Mem_Read_DMA+0x31a>
 80072b2:	bf00      	nop
 80072b4:	20000004 	.word	0x20000004
 80072b8:	14f8b589 	.word	0x14f8b589
 80072bc:	ffff0000 	.word	0xffff0000
 80072c0:	08009099 	.word	0x08009099
 80072c4:	08009243 	.word	0x08009243
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2220      	movs	r2, #32
 80072cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072dc:	f043 0210 	orr.w	r2, r3, #16
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e02d      	b.n	800734c <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80072f0:	88f8      	ldrh	r0, [r7, #6]
 80072f2:	893a      	ldrh	r2, [r7, #8]
 80072f4:	8979      	ldrh	r1, [r7, #10]
 80072f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f8:	9301      	str	r3, [sp, #4]
 80072fa:	2323      	movs	r3, #35	@ 0x23
 80072fc:	9300      	str	r3, [sp, #0]
 80072fe:	4603      	mov	r3, r0
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f001 fde1 	bl	8008ec8 <I2C_RequestMemoryRead>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d001      	beq.n	8007310 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	e01d      	b.n	800734c <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007310:	2300      	movs	r3, #0
 8007312:	617b      	str	r3, [r7, #20]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	695b      	ldr	r3, [r3, #20]
 800731a:	617b      	str	r3, [r7, #20]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	617b      	str	r3, [r7, #20]
 8007324:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007334:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2220      	movs	r2, #32
 800733a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2200      	movs	r2, #0
 8007342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8007346:	2300      	movs	r3, #0
 8007348:	e000      	b.n	800734c <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 800734a:	2302      	movs	r3, #2
  }
}
 800734c:	4618      	mov	r0, r3
 800734e:	3728      	adds	r7, #40	@ 0x28
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b08a      	sub	sp, #40	@ 0x28
 8007358:	af02      	add	r7, sp, #8
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	607a      	str	r2, [r7, #4]
 800735e:	603b      	str	r3, [r7, #0]
 8007360:	460b      	mov	r3, r1
 8007362:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8007364:	f7fd faaa 	bl	80048bc <HAL_GetTick>
 8007368:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800736a:	2300      	movs	r3, #0
 800736c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007374:	b2db      	uxtb	r3, r3
 8007376:	2b20      	cmp	r3, #32
 8007378:	f040 8111 	bne.w	800759e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	2319      	movs	r3, #25
 8007382:	2201      	movs	r2, #1
 8007384:	4988      	ldr	r1, [pc, #544]	@ (80075a8 <HAL_I2C_IsDeviceReady+0x254>)
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f002 f840 	bl	800940c <I2C_WaitOnFlagUntilTimeout>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d001      	beq.n	8007396 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8007392:	2302      	movs	r3, #2
 8007394:	e104      	b.n	80075a0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800739c:	2b01      	cmp	r3, #1
 800739e:	d101      	bne.n	80073a4 <HAL_I2C_IsDeviceReady+0x50>
 80073a0:	2302      	movs	r3, #2
 80073a2:	e0fd      	b.n	80075a0 <HAL_I2C_IsDeviceReady+0x24c>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 0301 	and.w	r3, r3, #1
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d007      	beq.n	80073ca <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f042 0201 	orr.w	r2, r2, #1
 80073c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80073d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2224      	movs	r2, #36	@ 0x24
 80073de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2200      	movs	r2, #0
 80073e6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	4a70      	ldr	r2, [pc, #448]	@ (80075ac <HAL_I2C_IsDeviceReady+0x258>)
 80073ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80073fc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	9300      	str	r3, [sp, #0]
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	2200      	movs	r2, #0
 8007406:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f001 fffe 	bl	800940c <I2C_WaitOnFlagUntilTimeout>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00d      	beq.n	8007432 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007420:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007424:	d103      	bne.n	800742e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800742c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800742e:	2303      	movs	r3, #3
 8007430:	e0b6      	b.n	80075a0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007432:	897b      	ldrh	r3, [r7, #10]
 8007434:	b2db      	uxtb	r3, r3
 8007436:	461a      	mov	r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007440:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8007442:	f7fd fa3b 	bl	80048bc <HAL_GetTick>
 8007446:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	f003 0302 	and.w	r3, r3, #2
 8007452:	2b02      	cmp	r3, #2
 8007454:	bf0c      	ite	eq
 8007456:	2301      	moveq	r3, #1
 8007458:	2300      	movne	r3, #0
 800745a:	b2db      	uxtb	r3, r3
 800745c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	695b      	ldr	r3, [r3, #20]
 8007464:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007468:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800746c:	bf0c      	ite	eq
 800746e:	2301      	moveq	r3, #1
 8007470:	2300      	movne	r3, #0
 8007472:	b2db      	uxtb	r3, r3
 8007474:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007476:	e025      	b.n	80074c4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007478:	f7fd fa20 	bl	80048bc <HAL_GetTick>
 800747c:	4602      	mov	r2, r0
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	683a      	ldr	r2, [r7, #0]
 8007484:	429a      	cmp	r2, r3
 8007486:	d302      	bcc.n	800748e <HAL_I2C_IsDeviceReady+0x13a>
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d103      	bne.n	8007496 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	22a0      	movs	r2, #160	@ 0xa0
 8007492:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	695b      	ldr	r3, [r3, #20]
 800749c:	f003 0302 	and.w	r3, r3, #2
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	bf0c      	ite	eq
 80074a4:	2301      	moveq	r3, #1
 80074a6:	2300      	movne	r3, #0
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	695b      	ldr	r3, [r3, #20]
 80074b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074ba:	bf0c      	ite	eq
 80074bc:	2301      	moveq	r3, #1
 80074be:	2300      	movne	r3, #0
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	2ba0      	cmp	r3, #160	@ 0xa0
 80074ce:	d005      	beq.n	80074dc <HAL_I2C_IsDeviceReady+0x188>
 80074d0:	7dfb      	ldrb	r3, [r7, #23]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d102      	bne.n	80074dc <HAL_I2C_IsDeviceReady+0x188>
 80074d6:	7dbb      	ldrb	r3, [r7, #22]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d0cd      	beq.n	8007478 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2220      	movs	r2, #32
 80074e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	695b      	ldr	r3, [r3, #20]
 80074ea:	f003 0302 	and.w	r3, r3, #2
 80074ee:	2b02      	cmp	r3, #2
 80074f0:	d129      	bne.n	8007546 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007500:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007502:	2300      	movs	r3, #0
 8007504:	613b      	str	r3, [r7, #16]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	695b      	ldr	r3, [r3, #20]
 800750c:	613b      	str	r3, [r7, #16]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	699b      	ldr	r3, [r3, #24]
 8007514:	613b      	str	r3, [r7, #16]
 8007516:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	9300      	str	r3, [sp, #0]
 800751c:	2319      	movs	r3, #25
 800751e:	2201      	movs	r2, #1
 8007520:	4921      	ldr	r1, [pc, #132]	@ (80075a8 <HAL_I2C_IsDeviceReady+0x254>)
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	f001 ff72 	bl	800940c <I2C_WaitOnFlagUntilTimeout>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d001      	beq.n	8007532 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e036      	b.n	80075a0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2220      	movs	r2, #32
 8007536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8007542:	2300      	movs	r3, #0
 8007544:	e02c      	b.n	80075a0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007554:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800755e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	9300      	str	r3, [sp, #0]
 8007564:	2319      	movs	r3, #25
 8007566:	2201      	movs	r2, #1
 8007568:	490f      	ldr	r1, [pc, #60]	@ (80075a8 <HAL_I2C_IsDeviceReady+0x254>)
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f001 ff4e 	bl	800940c <I2C_WaitOnFlagUntilTimeout>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d001      	beq.n	800757a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e012      	b.n	80075a0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	3301      	adds	r3, #1
 800757e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8007580:	69ba      	ldr	r2, [r7, #24]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	429a      	cmp	r2, r3
 8007586:	f4ff af32 	bcc.w	80073ee <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2220      	movs	r2, #32
 800758e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e000      	b.n	80075a0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800759e:	2302      	movs	r3, #2
  }
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3720      	adds	r7, #32
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	00100002 	.word	0x00100002
 80075ac:	ffff0000 	.word	0xffff0000

080075b0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b088      	sub	sp, #32
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80075b8:	2300      	movs	r3, #0
 80075ba:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80075d0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075d8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80075da:	7bfb      	ldrb	r3, [r7, #15]
 80075dc:	2b10      	cmp	r3, #16
 80075de:	d003      	beq.n	80075e8 <HAL_I2C_EV_IRQHandler+0x38>
 80075e0:	7bfb      	ldrb	r3, [r7, #15]
 80075e2:	2b40      	cmp	r3, #64	@ 0x40
 80075e4:	f040 80b1 	bne.w	800774a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	695b      	ldr	r3, [r3, #20]
 80075f6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	f003 0301 	and.w	r3, r3, #1
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d10d      	bne.n	800761e <HAL_I2C_EV_IRQHandler+0x6e>
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8007608:	d003      	beq.n	8007612 <HAL_I2C_EV_IRQHandler+0x62>
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007610:	d101      	bne.n	8007616 <HAL_I2C_EV_IRQHandler+0x66>
 8007612:	2301      	movs	r3, #1
 8007614:	e000      	b.n	8007618 <HAL_I2C_EV_IRQHandler+0x68>
 8007616:	2300      	movs	r3, #0
 8007618:	2b01      	cmp	r3, #1
 800761a:	f000 8114 	beq.w	8007846 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	f003 0301 	and.w	r3, r3, #1
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00b      	beq.n	8007640 <HAL_I2C_EV_IRQHandler+0x90>
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800762e:	2b00      	cmp	r3, #0
 8007630:	d006      	beq.n	8007640 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f002 f8f9 	bl	800982a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 fcb5 	bl	8007fa8 <I2C_Master_SB>
 800763e:	e083      	b.n	8007748 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	f003 0308 	and.w	r3, r3, #8
 8007646:	2b00      	cmp	r3, #0
 8007648:	d008      	beq.n	800765c <HAL_I2C_EV_IRQHandler+0xac>
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007650:	2b00      	cmp	r3, #0
 8007652:	d003      	beq.n	800765c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 fd2d 	bl	80080b4 <I2C_Master_ADD10>
 800765a:	e075      	b.n	8007748 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	f003 0302 	and.w	r3, r3, #2
 8007662:	2b00      	cmp	r3, #0
 8007664:	d008      	beq.n	8007678 <HAL_I2C_EV_IRQHandler+0xc8>
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800766c:	2b00      	cmp	r3, #0
 800766e:	d003      	beq.n	8007678 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 fd49 	bl	8008108 <I2C_Master_ADDR>
 8007676:	e067      	b.n	8007748 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	f003 0304 	and.w	r3, r3, #4
 800767e:	2b00      	cmp	r3, #0
 8007680:	d036      	beq.n	80076f0 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800768c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007690:	f000 80db 	beq.w	800784a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00d      	beq.n	80076ba <HAL_I2C_EV_IRQHandler+0x10a>
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d008      	beq.n	80076ba <HAL_I2C_EV_IRQHandler+0x10a>
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	f003 0304 	and.w	r3, r3, #4
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d103      	bne.n	80076ba <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 f92d 	bl	8007912 <I2C_MasterTransmit_TXE>
 80076b8:	e046      	b.n	8007748 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	f003 0304 	and.w	r3, r3, #4
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f000 80c2 	beq.w	800784a <HAL_I2C_EV_IRQHandler+0x29a>
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f000 80bc 	beq.w	800784a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80076d2:	7bbb      	ldrb	r3, [r7, #14]
 80076d4:	2b21      	cmp	r3, #33	@ 0x21
 80076d6:	d103      	bne.n	80076e0 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 f9b6 	bl	8007a4a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80076de:	e0b4      	b.n	800784a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80076e0:	7bfb      	ldrb	r3, [r7, #15]
 80076e2:	2b40      	cmp	r3, #64	@ 0x40
 80076e4:	f040 80b1 	bne.w	800784a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 fa24 	bl	8007b36 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80076ee:	e0ac      	b.n	800784a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076fe:	f000 80a4 	beq.w	800784a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00d      	beq.n	8007728 <HAL_I2C_EV_IRQHandler+0x178>
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007712:	2b00      	cmp	r3, #0
 8007714:	d008      	beq.n	8007728 <HAL_I2C_EV_IRQHandler+0x178>
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	f003 0304 	and.w	r3, r3, #4
 800771c:	2b00      	cmp	r3, #0
 800771e:	d103      	bne.n	8007728 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fa9c 	bl	8007c5e <I2C_MasterReceive_RXNE>
 8007726:	e00f      	b.n	8007748 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	f003 0304 	and.w	r3, r3, #4
 800772e:	2b00      	cmp	r3, #0
 8007730:	f000 808b 	beq.w	800784a <HAL_I2C_EV_IRQHandler+0x29a>
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800773a:	2b00      	cmp	r3, #0
 800773c:	f000 8085 	beq.w	800784a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 fb47 	bl	8007dd4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007746:	e080      	b.n	800784a <HAL_I2C_EV_IRQHandler+0x29a>
 8007748:	e07f      	b.n	800784a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800774e:	2b00      	cmp	r3, #0
 8007750:	d004      	beq.n	800775c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	695b      	ldr	r3, [r3, #20]
 8007758:	61fb      	str	r3, [r7, #28]
 800775a:	e007      	b.n	800776c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	699b      	ldr	r3, [r3, #24]
 8007762:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	f003 0302 	and.w	r3, r3, #2
 8007772:	2b00      	cmp	r3, #0
 8007774:	d011      	beq.n	800779a <HAL_I2C_EV_IRQHandler+0x1ea>
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00c      	beq.n	800779a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007784:	2b00      	cmp	r3, #0
 8007786:	d003      	beq.n	8007790 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	699b      	ldr	r3, [r3, #24]
 800778e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007790:	69b9      	ldr	r1, [r7, #24]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 ff07 	bl	80085a6 <I2C_Slave_ADDR>
 8007798:	e05a      	b.n	8007850 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	f003 0310 	and.w	r3, r3, #16
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d008      	beq.n	80077b6 <HAL_I2C_EV_IRQHandler+0x206>
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d003      	beq.n	80077b6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 ff42 	bl	8008638 <I2C_Slave_STOPF>
 80077b4:	e04c      	b.n	8007850 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80077b6:	7bbb      	ldrb	r3, [r7, #14]
 80077b8:	2b21      	cmp	r3, #33	@ 0x21
 80077ba:	d002      	beq.n	80077c2 <HAL_I2C_EV_IRQHandler+0x212>
 80077bc:	7bbb      	ldrb	r3, [r7, #14]
 80077be:	2b29      	cmp	r3, #41	@ 0x29
 80077c0:	d120      	bne.n	8007804 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d00d      	beq.n	80077e8 <HAL_I2C_EV_IRQHandler+0x238>
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d008      	beq.n	80077e8 <HAL_I2C_EV_IRQHandler+0x238>
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	f003 0304 	and.w	r3, r3, #4
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d103      	bne.n	80077e8 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 fe22 	bl	800842a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80077e6:	e032      	b.n	800784e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	f003 0304 	and.w	r3, r3, #4
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d02d      	beq.n	800784e <HAL_I2C_EV_IRQHandler+0x29e>
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d028      	beq.n	800784e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 fe51 	bl	80084a4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007802:	e024      	b.n	800784e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00d      	beq.n	800782a <HAL_I2C_EV_IRQHandler+0x27a>
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007814:	2b00      	cmp	r3, #0
 8007816:	d008      	beq.n	800782a <HAL_I2C_EV_IRQHandler+0x27a>
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	f003 0304 	and.w	r3, r3, #4
 800781e:	2b00      	cmp	r3, #0
 8007820:	d103      	bne.n	800782a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 fe5f 	bl	80084e6 <I2C_SlaveReceive_RXNE>
 8007828:	e012      	b.n	8007850 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	f003 0304 	and.w	r3, r3, #4
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00d      	beq.n	8007850 <HAL_I2C_EV_IRQHandler+0x2a0>
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800783a:	2b00      	cmp	r3, #0
 800783c:	d008      	beq.n	8007850 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fe8f 	bl	8008562 <I2C_SlaveReceive_BTF>
 8007844:	e004      	b.n	8007850 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8007846:	bf00      	nop
 8007848:	e002      	b.n	8007850 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800784a:	bf00      	nop
 800784c:	e000      	b.n	8007850 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800784e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007850:	3720      	adds	r7, #32
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007856:	b480      	push	{r7}
 8007858:	b083      	sub	sp, #12
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800785e:	bf00      	nop
 8007860:	370c      	adds	r7, #12
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr

0800786a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800786a:	b480      	push	{r7}
 800786c:	b083      	sub	sp, #12
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007872:	bf00      	nop
 8007874:	370c      	adds	r7, #12
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800787e:	b480      	push	{r7}
 8007880:	b083      	sub	sp, #12
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007886:	bf00      	nop
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007892:	b480      	push	{r7}
 8007894:	b083      	sub	sp, #12
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800789a:	bf00      	nop
 800789c:	370c      	adds	r7, #12
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr

080078a6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80078a6:	b480      	push	{r7}
 80078a8:	b083      	sub	sp, #12
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
 80078ae:	460b      	mov	r3, r1
 80078b0:	70fb      	strb	r3, [r7, #3]
 80078b2:	4613      	mov	r3, r2
 80078b4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80078b6:	bf00      	nop
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80078c2:	b480      	push	{r7}
 80078c4:	b083      	sub	sp, #12
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80078ca:	bf00      	nop
 80078cc:	370c      	adds	r7, #12
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b083      	sub	sp, #12
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80078de:	bf00      	nop
 80078e0:	370c      	adds	r7, #12
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr

080078ea <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80078ea:	b480      	push	{r7}
 80078ec:	b083      	sub	sp, #12
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80078f2:	bf00      	nop
 80078f4:	370c      	adds	r7, #12
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr

080078fe <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80078fe:	b480      	push	{r7}
 8007900:	b083      	sub	sp, #12
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007906:	bf00      	nop
 8007908:	370c      	adds	r7, #12
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr

08007912 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b084      	sub	sp, #16
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007920:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007928:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800792e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007934:	2b00      	cmp	r3, #0
 8007936:	d150      	bne.n	80079da <I2C_MasterTransmit_TXE+0xc8>
 8007938:	7bfb      	ldrb	r3, [r7, #15]
 800793a:	2b21      	cmp	r3, #33	@ 0x21
 800793c:	d14d      	bne.n	80079da <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	2b08      	cmp	r3, #8
 8007942:	d01d      	beq.n	8007980 <I2C_MasterTransmit_TXE+0x6e>
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	2b20      	cmp	r3, #32
 8007948:	d01a      	beq.n	8007980 <I2C_MasterTransmit_TXE+0x6e>
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007950:	d016      	beq.n	8007980 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	685a      	ldr	r2, [r3, #4]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007960:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2211      	movs	r2, #17
 8007966:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2220      	movs	r2, #32
 8007974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f7ff ff6c 	bl	8007856 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800797e:	e060      	b.n	8007a42 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	685a      	ldr	r2, [r3, #4]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800798e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800799e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2220      	movs	r2, #32
 80079aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b40      	cmp	r3, #64	@ 0x40
 80079b8:	d107      	bne.n	80079ca <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f7ff ff87 	bl	80078d6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80079c8:	e03b      	b.n	8007a42 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f7ff ff3f 	bl	8007856 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80079d8:	e033      	b.n	8007a42 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80079da:	7bfb      	ldrb	r3, [r7, #15]
 80079dc:	2b21      	cmp	r3, #33	@ 0x21
 80079de:	d005      	beq.n	80079ec <I2C_MasterTransmit_TXE+0xda>
 80079e0:	7bbb      	ldrb	r3, [r7, #14]
 80079e2:	2b40      	cmp	r3, #64	@ 0x40
 80079e4:	d12d      	bne.n	8007a42 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80079e6:	7bfb      	ldrb	r3, [r7, #15]
 80079e8:	2b22      	cmp	r3, #34	@ 0x22
 80079ea:	d12a      	bne.n	8007a42 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d108      	bne.n	8007a08 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	685a      	ldr	r2, [r3, #4]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a04:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007a06:	e01c      	b.n	8007a42 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	2b40      	cmp	r3, #64	@ 0x40
 8007a12:	d103      	bne.n	8007a1c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 f88e 	bl	8007b36 <I2C_MemoryTransmit_TXE_BTF>
}
 8007a1a:	e012      	b.n	8007a42 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a20:	781a      	ldrb	r2, [r3, #0]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a2c:	1c5a      	adds	r2, r3, #1
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	3b01      	subs	r3, #1
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007a40:	e7ff      	b.n	8007a42 <I2C_MasterTransmit_TXE+0x130>
 8007a42:	bf00      	nop
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b084      	sub	sp, #16
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a56:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	2b21      	cmp	r3, #33	@ 0x21
 8007a62:	d164      	bne.n	8007b2e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d012      	beq.n	8007a94 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a72:	781a      	ldrb	r2, [r3, #0]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a7e:	1c5a      	adds	r2, r3, #1
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	b29a      	uxth	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007a92:	e04c      	b.n	8007b2e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2b08      	cmp	r3, #8
 8007a98:	d01d      	beq.n	8007ad6 <I2C_MasterTransmit_BTF+0x8c>
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2b20      	cmp	r3, #32
 8007a9e:	d01a      	beq.n	8007ad6 <I2C_MasterTransmit_BTF+0x8c>
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007aa6:	d016      	beq.n	8007ad6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	685a      	ldr	r2, [r3, #4]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007ab6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2211      	movs	r2, #17
 8007abc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2220      	movs	r2, #32
 8007aca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7ff fec1 	bl	8007856 <HAL_I2C_MasterTxCpltCallback>
}
 8007ad4:	e02b      	b.n	8007b2e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	685a      	ldr	r2, [r3, #4]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007ae4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007af4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2220      	movs	r2, #32
 8007b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	2b40      	cmp	r3, #64	@ 0x40
 8007b0e:	d107      	bne.n	8007b20 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f7ff fedc 	bl	80078d6 <HAL_I2C_MemTxCpltCallback>
}
 8007b1e:	e006      	b.n	8007b2e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f7ff fe94 	bl	8007856 <HAL_I2C_MasterTxCpltCallback>
}
 8007b2e:	bf00      	nop
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b084      	sub	sp, #16
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b44:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d11d      	bne.n	8007b8a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d10b      	bne.n	8007b6e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b5a:	b2da      	uxtb	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b66:	1c9a      	adds	r2, r3, #2
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007b6c:	e073      	b.n	8007c56 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	121b      	asrs	r3, r3, #8
 8007b76:	b2da      	uxtb	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b82:	1c5a      	adds	r2, r3, #1
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007b88:	e065      	b.n	8007c56 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d10b      	bne.n	8007baa <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b96:	b2da      	uxtb	r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ba2:	1c5a      	adds	r2, r3, #1
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007ba8:	e055      	b.n	8007c56 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bae:	2b02      	cmp	r3, #2
 8007bb0:	d151      	bne.n	8007c56 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007bb2:	7bfb      	ldrb	r3, [r7, #15]
 8007bb4:	2b22      	cmp	r3, #34	@ 0x22
 8007bb6:	d10d      	bne.n	8007bd4 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007bc6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bcc:	1c5a      	adds	r2, r3, #1
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007bd2:	e040      	b.n	8007c56 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d015      	beq.n	8007c0a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007bde:	7bfb      	ldrb	r3, [r7, #15]
 8007be0:	2b21      	cmp	r3, #33	@ 0x21
 8007be2:	d112      	bne.n	8007c0a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007be8:	781a      	ldrb	r2, [r3, #0]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf4:	1c5a      	adds	r2, r3, #1
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	3b01      	subs	r3, #1
 8007c02:	b29a      	uxth	r2, r3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007c08:	e025      	b.n	8007c56 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d120      	bne.n	8007c56 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007c14:	7bfb      	ldrb	r3, [r7, #15]
 8007c16:	2b21      	cmp	r3, #33	@ 0x21
 8007c18:	d11d      	bne.n	8007c56 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	685a      	ldr	r2, [r3, #4]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007c28:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c38:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2220      	movs	r2, #32
 8007c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f7ff fe40 	bl	80078d6 <HAL_I2C_MemTxCpltCallback>
}
 8007c56:	bf00      	nop
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b084      	sub	sp, #16
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	2b22      	cmp	r3, #34	@ 0x22
 8007c70:	f040 80ac 	bne.w	8007dcc <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2b03      	cmp	r3, #3
 8007c80:	d921      	bls.n	8007cc6 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	691a      	ldr	r2, [r3, #16]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c8c:	b2d2      	uxtb	r2, r2
 8007c8e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c94:	1c5a      	adds	r2, r3, #1
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	2b03      	cmp	r3, #3
 8007cb0:	f040 808c 	bne.w	8007dcc <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	685a      	ldr	r2, [r3, #4]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007cc2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8007cc4:	e082      	b.n	8007dcc <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d075      	beq.n	8007dba <I2C_MasterReceive_RXNE+0x15c>
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d002      	beq.n	8007cda <I2C_MasterReceive_RXNE+0x7c>
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d16f      	bne.n	8007dba <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f001 fcee 	bl	80096bc <I2C_WaitOnSTOPRequestThroughIT>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d142      	bne.n	8007d6c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007cf4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	685a      	ldr	r2, [r3, #4]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007d04:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	691a      	ldr	r2, [r3, #16]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d10:	b2d2      	uxtb	r2, r2
 8007d12:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d18:	1c5a      	adds	r2, r3, #1
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	3b01      	subs	r3, #1
 8007d26:	b29a      	uxth	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2220      	movs	r2, #32
 8007d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	2b40      	cmp	r3, #64	@ 0x40
 8007d3e:	d10a      	bne.n	8007d56 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f7fa fb92 	bl	8002478 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007d54:	e03a      	b.n	8007dcc <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2212      	movs	r2, #18
 8007d62:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f7ff fd80 	bl	800786a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007d6a:	e02f      	b.n	8007dcc <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	685a      	ldr	r2, [r3, #4]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007d7a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	691a      	ldr	r2, [r3, #16]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d86:	b2d2      	uxtb	r2, r2
 8007d88:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d8e:	1c5a      	adds	r2, r3, #1
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2220      	movs	r2, #32
 8007da6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f7ff fd99 	bl	80078ea <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007db8:	e008      	b.n	8007dcc <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	685a      	ldr	r2, [r3, #4]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007dc8:	605a      	str	r2, [r3, #4]
}
 8007dca:	e7ff      	b.n	8007dcc <I2C_MasterReceive_RXNE+0x16e>
 8007dcc:	bf00      	nop
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007de0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	2b04      	cmp	r3, #4
 8007dea:	d11b      	bne.n	8007e24 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	685a      	ldr	r2, [r3, #4]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007dfa:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	691a      	ldr	r2, [r3, #16]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e06:	b2d2      	uxtb	r2, r2
 8007e08:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e0e:	1c5a      	adds	r2, r3, #1
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	3b01      	subs	r3, #1
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007e22:	e0bd      	b.n	8007fa0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	2b03      	cmp	r3, #3
 8007e2c:	d129      	bne.n	8007e82 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	685a      	ldr	r2, [r3, #4]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e3c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2b04      	cmp	r3, #4
 8007e42:	d00a      	beq.n	8007e5a <I2C_MasterReceive_BTF+0x86>
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	d007      	beq.n	8007e5a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e58:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	691a      	ldr	r2, [r3, #16]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e64:	b2d2      	uxtb	r2, r2
 8007e66:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e6c:	1c5a      	adds	r2, r3, #1
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	b29a      	uxth	r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007e80:	e08e      	b.n	8007fa0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	2b02      	cmp	r3, #2
 8007e8a:	d176      	bne.n	8007f7a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d002      	beq.n	8007e98 <I2C_MasterReceive_BTF+0xc4>
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2b10      	cmp	r3, #16
 8007e96:	d108      	bne.n	8007eaa <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ea6:	601a      	str	r2, [r3, #0]
 8007ea8:	e019      	b.n	8007ede <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2b04      	cmp	r3, #4
 8007eae:	d002      	beq.n	8007eb6 <I2C_MasterReceive_BTF+0xe2>
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2b02      	cmp	r3, #2
 8007eb4:	d108      	bne.n	8007ec8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007ec4:	601a      	str	r2, [r3, #0]
 8007ec6:	e00a      	b.n	8007ede <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2b10      	cmp	r3, #16
 8007ecc:	d007      	beq.n	8007ede <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007edc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	691a      	ldr	r2, [r3, #16]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ee8:	b2d2      	uxtb	r2, r2
 8007eea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ef0:	1c5a      	adds	r2, r3, #1
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	3b01      	subs	r3, #1
 8007efe:	b29a      	uxth	r2, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	691a      	ldr	r2, [r3, #16]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f0e:	b2d2      	uxtb	r2, r2
 8007f10:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f16:	1c5a      	adds	r2, r3, #1
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	3b01      	subs	r3, #1
 8007f24:	b29a      	uxth	r2, r3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	685a      	ldr	r2, [r3, #4]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007f38:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2220      	movs	r2, #32
 8007f3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	2b40      	cmp	r3, #64	@ 0x40
 8007f4c:	d10a      	bne.n	8007f64 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f7fa fa8b 	bl	8002478 <HAL_I2C_MemRxCpltCallback>
}
 8007f62:	e01d      	b.n	8007fa0 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2212      	movs	r2, #18
 8007f70:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f7ff fc79 	bl	800786a <HAL_I2C_MasterRxCpltCallback>
}
 8007f78:	e012      	b.n	8007fa0 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	691a      	ldr	r2, [r3, #16]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f84:	b2d2      	uxtb	r2, r2
 8007f86:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f8c:	1c5a      	adds	r2, r3, #1
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007fa0:	bf00      	nop
 8007fa2:	3710      	adds	r7, #16
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	2b40      	cmp	r3, #64	@ 0x40
 8007fba:	d117      	bne.n	8007fec <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d109      	bne.n	8007fd8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	461a      	mov	r2, r3
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007fd4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007fd6:	e067      	b.n	80080a8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	f043 0301 	orr.w	r3, r3, #1
 8007fe2:	b2da      	uxtb	r2, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	611a      	str	r2, [r3, #16]
}
 8007fea:	e05d      	b.n	80080a8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	691b      	ldr	r3, [r3, #16]
 8007ff0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ff4:	d133      	bne.n	800805e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	2b21      	cmp	r3, #33	@ 0x21
 8008000:	d109      	bne.n	8008016 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008006:	b2db      	uxtb	r3, r3
 8008008:	461a      	mov	r2, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008012:	611a      	str	r2, [r3, #16]
 8008014:	e008      	b.n	8008028 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800801a:	b2db      	uxtb	r3, r3
 800801c:	f043 0301 	orr.w	r3, r3, #1
 8008020:	b2da      	uxtb	r2, r3
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800802c:	2b00      	cmp	r3, #0
 800802e:	d004      	beq.n	800803a <I2C_Master_SB+0x92>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008036:	2b00      	cmp	r3, #0
 8008038:	d108      	bne.n	800804c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800803e:	2b00      	cmp	r3, #0
 8008040:	d032      	beq.n	80080a8 <I2C_Master_SB+0x100>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008048:	2b00      	cmp	r3, #0
 800804a:	d02d      	beq.n	80080a8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	685a      	ldr	r2, [r3, #4]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800805a:	605a      	str	r2, [r3, #4]
}
 800805c:	e024      	b.n	80080a8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008062:	2b00      	cmp	r3, #0
 8008064:	d10e      	bne.n	8008084 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800806a:	b29b      	uxth	r3, r3
 800806c:	11db      	asrs	r3, r3, #7
 800806e:	b2db      	uxtb	r3, r3
 8008070:	f003 0306 	and.w	r3, r3, #6
 8008074:	b2db      	uxtb	r3, r3
 8008076:	f063 030f 	orn	r3, r3, #15
 800807a:	b2da      	uxtb	r2, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	611a      	str	r2, [r3, #16]
}
 8008082:	e011      	b.n	80080a8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008088:	2b01      	cmp	r3, #1
 800808a:	d10d      	bne.n	80080a8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008090:	b29b      	uxth	r3, r3
 8008092:	11db      	asrs	r3, r3, #7
 8008094:	b2db      	uxtb	r3, r3
 8008096:	f003 0306 	and.w	r3, r3, #6
 800809a:	b2db      	uxtb	r3, r3
 800809c:	f063 030e 	orn	r3, r3, #14
 80080a0:	b2da      	uxtb	r2, r3
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	611a      	str	r2, [r3, #16]
}
 80080a8:	bf00      	nop
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080c0:	b2da      	uxtb	r2, r3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d004      	beq.n	80080da <I2C_Master_ADD10+0x26>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d108      	bne.n	80080ec <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00c      	beq.n	80080fc <I2C_Master_ADD10+0x48>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d007      	beq.n	80080fc <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	685a      	ldr	r2, [r3, #4]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80080fa:	605a      	str	r2, [r3, #4]
  }
}
 80080fc:	bf00      	nop
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8008108:	b480      	push	{r7}
 800810a:	b091      	sub	sp, #68	@ 0x44
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008116:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800811e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008124:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800812c:	b2db      	uxtb	r3, r3
 800812e:	2b22      	cmp	r3, #34	@ 0x22
 8008130:	f040 8169 	bne.w	8008406 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008138:	2b00      	cmp	r3, #0
 800813a:	d10f      	bne.n	800815c <I2C_Master_ADDR+0x54>
 800813c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008140:	2b40      	cmp	r3, #64	@ 0x40
 8008142:	d10b      	bne.n	800815c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008144:	2300      	movs	r3, #0
 8008146:	633b      	str	r3, [r7, #48]	@ 0x30
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	695b      	ldr	r3, [r3, #20]
 800814e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	633b      	str	r3, [r7, #48]	@ 0x30
 8008158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800815a:	e160      	b.n	800841e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008160:	2b00      	cmp	r3, #0
 8008162:	d11d      	bne.n	80081a0 <I2C_Master_ADDR+0x98>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	691b      	ldr	r3, [r3, #16]
 8008168:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800816c:	d118      	bne.n	80081a0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800816e:	2300      	movs	r3, #0
 8008170:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	695b      	ldr	r3, [r3, #20]
 8008178:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	699b      	ldr	r3, [r3, #24]
 8008180:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008192:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008198:	1c5a      	adds	r2, r3, #1
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	651a      	str	r2, [r3, #80]	@ 0x50
 800819e:	e13e      	b.n	800841e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d113      	bne.n	80081d2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081aa:	2300      	movs	r3, #0
 80081ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	695b      	ldr	r3, [r3, #20]
 80081b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	699b      	ldr	r3, [r3, #24]
 80081bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081be:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80081ce:	601a      	str	r2, [r3, #0]
 80081d0:	e115      	b.n	80083fe <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	2b01      	cmp	r3, #1
 80081da:	f040 808a 	bne.w	80082f2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80081de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80081e4:	d137      	bne.n	8008256 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80081f4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008200:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008204:	d113      	bne.n	800822e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008214:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008216:	2300      	movs	r3, #0
 8008218:	627b      	str	r3, [r7, #36]	@ 0x24
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	695b      	ldr	r3, [r3, #20]
 8008220:	627b      	str	r3, [r7, #36]	@ 0x24
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	699b      	ldr	r3, [r3, #24]
 8008228:	627b      	str	r3, [r7, #36]	@ 0x24
 800822a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800822c:	e0e7      	b.n	80083fe <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800822e:	2300      	movs	r3, #0
 8008230:	623b      	str	r3, [r7, #32]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	695b      	ldr	r3, [r3, #20]
 8008238:	623b      	str	r3, [r7, #32]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	699b      	ldr	r3, [r3, #24]
 8008240:	623b      	str	r3, [r7, #32]
 8008242:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008252:	601a      	str	r2, [r3, #0]
 8008254:	e0d3      	b.n	80083fe <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8008256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008258:	2b08      	cmp	r3, #8
 800825a:	d02e      	beq.n	80082ba <I2C_Master_ADDR+0x1b2>
 800825c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800825e:	2b20      	cmp	r3, #32
 8008260:	d02b      	beq.n	80082ba <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8008262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008264:	2b12      	cmp	r3, #18
 8008266:	d102      	bne.n	800826e <I2C_Master_ADDR+0x166>
 8008268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800826a:	2b01      	cmp	r3, #1
 800826c:	d125      	bne.n	80082ba <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800826e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008270:	2b04      	cmp	r3, #4
 8008272:	d00e      	beq.n	8008292 <I2C_Master_ADDR+0x18a>
 8008274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008276:	2b02      	cmp	r3, #2
 8008278:	d00b      	beq.n	8008292 <I2C_Master_ADDR+0x18a>
 800827a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800827c:	2b10      	cmp	r3, #16
 800827e:	d008      	beq.n	8008292 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800828e:	601a      	str	r2, [r3, #0]
 8008290:	e007      	b.n	80082a2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80082a0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082a2:	2300      	movs	r3, #0
 80082a4:	61fb      	str	r3, [r7, #28]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	695b      	ldr	r3, [r3, #20]
 80082ac:	61fb      	str	r3, [r7, #28]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	61fb      	str	r3, [r7, #28]
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	e0a1      	b.n	80083fe <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082c8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082ca:	2300      	movs	r3, #0
 80082cc:	61bb      	str	r3, [r7, #24]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	695b      	ldr	r3, [r3, #20]
 80082d4:	61bb      	str	r3, [r7, #24]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	699b      	ldr	r3, [r3, #24]
 80082dc:	61bb      	str	r3, [r7, #24]
 80082de:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80082ee:	601a      	str	r2, [r3, #0]
 80082f0:	e085      	b.n	80083fe <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	2b02      	cmp	r3, #2
 80082fa:	d14d      	bne.n	8008398 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80082fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082fe:	2b04      	cmp	r3, #4
 8008300:	d016      	beq.n	8008330 <I2C_Master_ADDR+0x228>
 8008302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008304:	2b02      	cmp	r3, #2
 8008306:	d013      	beq.n	8008330 <I2C_Master_ADDR+0x228>
 8008308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800830a:	2b10      	cmp	r3, #16
 800830c:	d010      	beq.n	8008330 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800831c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800832c:	601a      	str	r2, [r3, #0]
 800832e:	e007      	b.n	8008340 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800833e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800834a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800834e:	d117      	bne.n	8008380 <I2C_Master_ADDR+0x278>
 8008350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008352:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008356:	d00b      	beq.n	8008370 <I2C_Master_ADDR+0x268>
 8008358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800835a:	2b01      	cmp	r3, #1
 800835c:	d008      	beq.n	8008370 <I2C_Master_ADDR+0x268>
 800835e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008360:	2b08      	cmp	r3, #8
 8008362:	d005      	beq.n	8008370 <I2C_Master_ADDR+0x268>
 8008364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008366:	2b10      	cmp	r3, #16
 8008368:	d002      	beq.n	8008370 <I2C_Master_ADDR+0x268>
 800836a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800836c:	2b20      	cmp	r3, #32
 800836e:	d107      	bne.n	8008380 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	685a      	ldr	r2, [r3, #4]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800837e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008380:	2300      	movs	r3, #0
 8008382:	617b      	str	r3, [r7, #20]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	695b      	ldr	r3, [r3, #20]
 800838a:	617b      	str	r3, [r7, #20]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	699b      	ldr	r3, [r3, #24]
 8008392:	617b      	str	r3, [r7, #20]
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	e032      	b.n	80083fe <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80083a6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80083b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083b6:	d117      	bne.n	80083e8 <I2C_Master_ADDR+0x2e0>
 80083b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ba:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80083be:	d00b      	beq.n	80083d8 <I2C_Master_ADDR+0x2d0>
 80083c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d008      	beq.n	80083d8 <I2C_Master_ADDR+0x2d0>
 80083c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083c8:	2b08      	cmp	r3, #8
 80083ca:	d005      	beq.n	80083d8 <I2C_Master_ADDR+0x2d0>
 80083cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ce:	2b10      	cmp	r3, #16
 80083d0:	d002      	beq.n	80083d8 <I2C_Master_ADDR+0x2d0>
 80083d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083d4:	2b20      	cmp	r3, #32
 80083d6:	d107      	bne.n	80083e8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	685a      	ldr	r2, [r3, #4]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80083e6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083e8:	2300      	movs	r3, #0
 80083ea:	613b      	str	r3, [r7, #16]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	695b      	ldr	r3, [r3, #20]
 80083f2:	613b      	str	r3, [r7, #16]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	699b      	ldr	r3, [r3, #24]
 80083fa:	613b      	str	r3, [r7, #16]
 80083fc:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008404:	e00b      	b.n	800841e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008406:	2300      	movs	r3, #0
 8008408:	60fb      	str	r3, [r7, #12]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	695b      	ldr	r3, [r3, #20]
 8008410:	60fb      	str	r3, [r7, #12]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	699b      	ldr	r3, [r3, #24]
 8008418:	60fb      	str	r3, [r7, #12]
 800841a:	68fb      	ldr	r3, [r7, #12]
}
 800841c:	e7ff      	b.n	800841e <I2C_Master_ADDR+0x316>
 800841e:	bf00      	nop
 8008420:	3744      	adds	r7, #68	@ 0x44
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr

0800842a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b084      	sub	sp, #16
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008438:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800843e:	b29b      	uxth	r3, r3
 8008440:	2b00      	cmp	r3, #0
 8008442:	d02b      	beq.n	800849c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008448:	781a      	ldrb	r2, [r3, #0]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008454:	1c5a      	adds	r2, r3, #1
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800845e:	b29b      	uxth	r3, r3
 8008460:	3b01      	subs	r3, #1
 8008462:	b29a      	uxth	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800846c:	b29b      	uxth	r3, r3
 800846e:	2b00      	cmp	r3, #0
 8008470:	d114      	bne.n	800849c <I2C_SlaveTransmit_TXE+0x72>
 8008472:	7bfb      	ldrb	r3, [r7, #15]
 8008474:	2b29      	cmp	r3, #41	@ 0x29
 8008476:	d111      	bne.n	800849c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	685a      	ldr	r2, [r3, #4]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008486:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2221      	movs	r2, #33	@ 0x21
 800848c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2228      	movs	r2, #40	@ 0x28
 8008492:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f7ff f9f1 	bl	800787e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800849c:	bf00      	nop
 800849e:	3710      	adds	r7, #16
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d011      	beq.n	80084da <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ba:	781a      	ldrb	r2, [r3, #0]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084c6:	1c5a      	adds	r2, r3, #1
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	3b01      	subs	r3, #1
 80084d4:	b29a      	uxth	r2, r3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80084da:	bf00      	nop
 80084dc:	370c      	adds	r7, #12
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr

080084e6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b084      	sub	sp, #16
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80084f4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d02c      	beq.n	800855a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	691a      	ldr	r2, [r3, #16]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800850a:	b2d2      	uxtb	r2, r2
 800850c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008512:	1c5a      	adds	r2, r3, #1
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800851c:	b29b      	uxth	r3, r3
 800851e:	3b01      	subs	r3, #1
 8008520:	b29a      	uxth	r2, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800852a:	b29b      	uxth	r3, r3
 800852c:	2b00      	cmp	r3, #0
 800852e:	d114      	bne.n	800855a <I2C_SlaveReceive_RXNE+0x74>
 8008530:	7bfb      	ldrb	r3, [r7, #15]
 8008532:	2b2a      	cmp	r3, #42	@ 0x2a
 8008534:	d111      	bne.n	800855a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	685a      	ldr	r2, [r3, #4]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008544:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2222      	movs	r2, #34	@ 0x22
 800854a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2228      	movs	r2, #40	@ 0x28
 8008550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f7ff f99c 	bl	8007892 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800855a:	bf00      	nop
 800855c:	3710      	adds	r7, #16
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008562:	b480      	push	{r7}
 8008564:	b083      	sub	sp, #12
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800856e:	b29b      	uxth	r3, r3
 8008570:	2b00      	cmp	r3, #0
 8008572:	d012      	beq.n	800859a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	691a      	ldr	r2, [r3, #16]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800857e:	b2d2      	uxtb	r2, r2
 8008580:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008586:	1c5a      	adds	r2, r3, #1
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008590:	b29b      	uxth	r3, r3
 8008592:	3b01      	subs	r3, #1
 8008594:	b29a      	uxth	r2, r3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800859a:	bf00      	nop
 800859c:	370c      	adds	r7, #12
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr

080085a6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80085a6:	b580      	push	{r7, lr}
 80085a8:	b084      	sub	sp, #16
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
 80085ae:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80085b0:	2300      	movs	r3, #0
 80085b2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80085c0:	2b28      	cmp	r3, #40	@ 0x28
 80085c2:	d125      	bne.n	8008610 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	685a      	ldr	r2, [r3, #4]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80085d2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	f003 0304 	and.w	r3, r3, #4
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d101      	bne.n	80085e2 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80085de:	2301      	movs	r3, #1
 80085e0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d103      	bne.n	80085f4 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	81bb      	strh	r3, [r7, #12]
 80085f2:	e002      	b.n	80085fa <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	699b      	ldr	r3, [r3, #24]
 80085f8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008602:	89ba      	ldrh	r2, [r7, #12]
 8008604:	7bfb      	ldrb	r3, [r7, #15]
 8008606:	4619      	mov	r1, r3
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f7ff f94c 	bl	80078a6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800860e:	e00e      	b.n	800862e <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008610:	2300      	movs	r3, #0
 8008612:	60bb      	str	r3, [r7, #8]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	695b      	ldr	r3, [r3, #20]
 800861a:	60bb      	str	r3, [r7, #8]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	699b      	ldr	r3, [r3, #24]
 8008622:	60bb      	str	r3, [r7, #8]
 8008624:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800862e:	bf00      	nop
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
	...

08008638 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008646:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	685a      	ldr	r2, [r3, #4]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008656:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008658:	2300      	movs	r3, #0
 800865a:	60bb      	str	r3, [r7, #8]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	695b      	ldr	r3, [r3, #20]
 8008662:	60bb      	str	r3, [r7, #8]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f042 0201 	orr.w	r2, r2, #1
 8008672:	601a      	str	r2, [r3, #0]
 8008674:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008684:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008690:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008694:	d172      	bne.n	800877c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008696:	7bfb      	ldrb	r3, [r7, #15]
 8008698:	2b22      	cmp	r3, #34	@ 0x22
 800869a:	d002      	beq.n	80086a2 <I2C_Slave_STOPF+0x6a>
 800869c:	7bfb      	ldrb	r3, [r7, #15]
 800869e:	2b2a      	cmp	r3, #42	@ 0x2a
 80086a0:	d135      	bne.n	800870e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	b29a      	uxth	r2, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d005      	beq.n	80086c6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086be:	f043 0204 	orr.w	r2, r3, #4
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	685a      	ldr	r2, [r3, #4]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80086d4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086da:	4618      	mov	r0, r3
 80086dc:	f7fd fa5e 	bl	8005b9c <HAL_DMA_GetState>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d049      	beq.n	800877a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086ea:	4a69      	ldr	r2, [pc, #420]	@ (8008890 <I2C_Slave_STOPF+0x258>)
 80086ec:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7fd f8a6 	bl	8005844 <HAL_DMA_Abort_IT>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d03d      	beq.n	800877a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008708:	4610      	mov	r0, r2
 800870a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800870c:	e035      	b.n	800877a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	b29a      	uxth	r2, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008720:	b29b      	uxth	r3, r3
 8008722:	2b00      	cmp	r3, #0
 8008724:	d005      	beq.n	8008732 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800872a:	f043 0204 	orr.w	r2, r3, #4
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	685a      	ldr	r2, [r3, #4]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008740:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008746:	4618      	mov	r0, r3
 8008748:	f7fd fa28 	bl	8005b9c <HAL_DMA_GetState>
 800874c:	4603      	mov	r3, r0
 800874e:	2b01      	cmp	r3, #1
 8008750:	d014      	beq.n	800877c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008756:	4a4e      	ldr	r2, [pc, #312]	@ (8008890 <I2C_Slave_STOPF+0x258>)
 8008758:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800875e:	4618      	mov	r0, r3
 8008760:	f7fd f870 	bl	8005844 <HAL_DMA_Abort_IT>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d008      	beq.n	800877c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800876e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008774:	4610      	mov	r0, r2
 8008776:	4798      	blx	r3
 8008778:	e000      	b.n	800877c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800877a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008780:	b29b      	uxth	r3, r3
 8008782:	2b00      	cmp	r3, #0
 8008784:	d03e      	beq.n	8008804 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	695b      	ldr	r3, [r3, #20]
 800878c:	f003 0304 	and.w	r3, r3, #4
 8008790:	2b04      	cmp	r3, #4
 8008792:	d112      	bne.n	80087ba <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	691a      	ldr	r2, [r3, #16]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800879e:	b2d2      	uxtb	r2, r2
 80087a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087a6:	1c5a      	adds	r2, r3, #1
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	3b01      	subs	r3, #1
 80087b4:	b29a      	uxth	r2, r3
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	695b      	ldr	r3, [r3, #20]
 80087c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087c4:	2b40      	cmp	r3, #64	@ 0x40
 80087c6:	d112      	bne.n	80087ee <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	691a      	ldr	r2, [r3, #16]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087d2:	b2d2      	uxtb	r2, r2
 80087d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087da:	1c5a      	adds	r2, r3, #1
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	3b01      	subs	r3, #1
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d005      	beq.n	8008804 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087fc:	f043 0204 	orr.w	r2, r3, #4
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008808:	2b00      	cmp	r3, #0
 800880a:	d003      	beq.n	8008814 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 f843 	bl	8008898 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008812:	e039      	b.n	8008888 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008814:	7bfb      	ldrb	r3, [r7, #15]
 8008816:	2b2a      	cmp	r3, #42	@ 0x2a
 8008818:	d109      	bne.n	800882e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2228      	movs	r2, #40	@ 0x28
 8008824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f7ff f832 	bl	8007892 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008834:	b2db      	uxtb	r3, r3
 8008836:	2b28      	cmp	r3, #40	@ 0x28
 8008838:	d111      	bne.n	800885e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4a15      	ldr	r2, [pc, #84]	@ (8008894 <I2C_Slave_STOPF+0x25c>)
 800883e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2220      	movs	r2, #32
 800884a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f7ff f833 	bl	80078c2 <HAL_I2C_ListenCpltCallback>
}
 800885c:	e014      	b.n	8008888 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008862:	2b22      	cmp	r3, #34	@ 0x22
 8008864:	d002      	beq.n	800886c <I2C_Slave_STOPF+0x234>
 8008866:	7bfb      	ldrb	r3, [r7, #15]
 8008868:	2b22      	cmp	r3, #34	@ 0x22
 800886a:	d10d      	bne.n	8008888 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2220      	movs	r2, #32
 8008876:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f7ff f805 	bl	8007892 <HAL_I2C_SlaveRxCpltCallback>
}
 8008888:	bf00      	nop
 800888a:	3710      	adds	r7, #16
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}
 8008890:	080092bd 	.word	0x080092bd
 8008894:	ffff0000 	.word	0xffff0000

08008898 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088a6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80088ae:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80088b0:	7bbb      	ldrb	r3, [r7, #14]
 80088b2:	2b10      	cmp	r3, #16
 80088b4:	d002      	beq.n	80088bc <I2C_ITError+0x24>
 80088b6:	7bbb      	ldrb	r3, [r7, #14]
 80088b8:	2b40      	cmp	r3, #64	@ 0x40
 80088ba:	d10a      	bne.n	80088d2 <I2C_ITError+0x3a>
 80088bc:	7bfb      	ldrb	r3, [r7, #15]
 80088be:	2b22      	cmp	r3, #34	@ 0x22
 80088c0:	d107      	bne.n	80088d2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80088d0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80088d2:	7bfb      	ldrb	r3, [r7, #15]
 80088d4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80088d8:	2b28      	cmp	r3, #40	@ 0x28
 80088da:	d107      	bne.n	80088ec <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2228      	movs	r2, #40	@ 0x28
 80088e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80088ea:	e015      	b.n	8008918 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80088f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088fa:	d00a      	beq.n	8008912 <I2C_ITError+0x7a>
 80088fc:	7bfb      	ldrb	r3, [r7, #15]
 80088fe:	2b60      	cmp	r3, #96	@ 0x60
 8008900:	d007      	beq.n	8008912 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2220      	movs	r2, #32
 8008906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008922:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008926:	d162      	bne.n	80089ee <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	685a      	ldr	r2, [r3, #4]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008936:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800893c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008940:	b2db      	uxtb	r3, r3
 8008942:	2b01      	cmp	r3, #1
 8008944:	d020      	beq.n	8008988 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800894a:	4a6a      	ldr	r2, [pc, #424]	@ (8008af4 <I2C_ITError+0x25c>)
 800894c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008952:	4618      	mov	r0, r3
 8008954:	f7fc ff76 	bl	8005844 <HAL_DMA_Abort_IT>
 8008958:	4603      	mov	r3, r0
 800895a:	2b00      	cmp	r3, #0
 800895c:	f000 8089 	beq.w	8008a72 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f022 0201 	bic.w	r2, r2, #1
 800896e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2220      	movs	r2, #32
 8008974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800897c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008982:	4610      	mov	r0, r2
 8008984:	4798      	blx	r3
 8008986:	e074      	b.n	8008a72 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800898c:	4a59      	ldr	r2, [pc, #356]	@ (8008af4 <I2C_ITError+0x25c>)
 800898e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008994:	4618      	mov	r0, r3
 8008996:	f7fc ff55 	bl	8005844 <HAL_DMA_Abort_IT>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d068      	beq.n	8008a72 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	695b      	ldr	r3, [r3, #20]
 80089a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089aa:	2b40      	cmp	r3, #64	@ 0x40
 80089ac:	d10b      	bne.n	80089c6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	691a      	ldr	r2, [r3, #16]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089b8:	b2d2      	uxtb	r2, r2
 80089ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089c0:	1c5a      	adds	r2, r3, #1
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f022 0201 	bic.w	r2, r2, #1
 80089d4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2220      	movs	r2, #32
 80089da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80089e8:	4610      	mov	r0, r2
 80089ea:	4798      	blx	r3
 80089ec:	e041      	b.n	8008a72 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	2b60      	cmp	r3, #96	@ 0x60
 80089f8:	d125      	bne.n	8008a46 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2220      	movs	r2, #32
 80089fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	695b      	ldr	r3, [r3, #20]
 8008a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a12:	2b40      	cmp	r3, #64	@ 0x40
 8008a14:	d10b      	bne.n	8008a2e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	691a      	ldr	r2, [r3, #16]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a20:	b2d2      	uxtb	r2, r2
 8008a22:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a28:	1c5a      	adds	r2, r3, #1
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f022 0201 	bic.w	r2, r2, #1
 8008a3c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f7fe ff5d 	bl	80078fe <HAL_I2C_AbortCpltCallback>
 8008a44:	e015      	b.n	8008a72 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	695b      	ldr	r3, [r3, #20]
 8008a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a50:	2b40      	cmp	r3, #64	@ 0x40
 8008a52:	d10b      	bne.n	8008a6c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	691a      	ldr	r2, [r3, #16]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a5e:	b2d2      	uxtb	r2, r2
 8008a60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a66:	1c5a      	adds	r2, r3, #1
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f7fe ff3c 	bl	80078ea <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a76:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	f003 0301 	and.w	r3, r3, #1
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d10e      	bne.n	8008aa0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d109      	bne.n	8008aa0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d104      	bne.n	8008aa0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d007      	beq.n	8008ab0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	685a      	ldr	r2, [r3, #4]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008aae:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ab6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008abc:	f003 0304 	and.w	r3, r3, #4
 8008ac0:	2b04      	cmp	r3, #4
 8008ac2:	d113      	bne.n	8008aec <I2C_ITError+0x254>
 8008ac4:	7bfb      	ldrb	r3, [r7, #15]
 8008ac6:	2b28      	cmp	r3, #40	@ 0x28
 8008ac8:	d110      	bne.n	8008aec <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4a0a      	ldr	r2, [pc, #40]	@ (8008af8 <I2C_ITError+0x260>)
 8008ace:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2220      	movs	r2, #32
 8008ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f7fe feeb 	bl	80078c2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008aec:	bf00      	nop
 8008aee:	3710      	adds	r7, #16
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	080092bd 	.word	0x080092bd
 8008af8:	ffff0000 	.word	0xffff0000

08008afc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b088      	sub	sp, #32
 8008b00:	af02      	add	r7, sp, #8
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	607a      	str	r2, [r7, #4]
 8008b06:	603b      	str	r3, [r7, #0]
 8008b08:	460b      	mov	r3, r1
 8008b0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b10:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	2b08      	cmp	r3, #8
 8008b16:	d006      	beq.n	8008b26 <I2C_MasterRequestWrite+0x2a>
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d003      	beq.n	8008b26 <I2C_MasterRequestWrite+0x2a>
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008b24:	d108      	bne.n	8008b38 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008b34:	601a      	str	r2, [r3, #0]
 8008b36:	e00b      	b.n	8008b50 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b3c:	2b12      	cmp	r3, #18
 8008b3e:	d107      	bne.n	8008b50 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008b4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	9300      	str	r3, [sp, #0]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f000 fc55 	bl	800940c <I2C_WaitOnFlagUntilTimeout>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d00d      	beq.n	8008b84 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b76:	d103      	bne.n	8008b80 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b7e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008b80:	2303      	movs	r3, #3
 8008b82:	e035      	b.n	8008bf0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	691b      	ldr	r3, [r3, #16]
 8008b88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b8c:	d108      	bne.n	8008ba0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008b8e:	897b      	ldrh	r3, [r7, #10]
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	461a      	mov	r2, r3
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008b9c:	611a      	str	r2, [r3, #16]
 8008b9e:	e01b      	b.n	8008bd8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008ba0:	897b      	ldrh	r3, [r7, #10]
 8008ba2:	11db      	asrs	r3, r3, #7
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	f003 0306 	and.w	r3, r3, #6
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	f063 030f 	orn	r3, r3, #15
 8008bb0:	b2da      	uxtb	r2, r3
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	490e      	ldr	r1, [pc, #56]	@ (8008bf8 <I2C_MasterRequestWrite+0xfc>)
 8008bbe:	68f8      	ldr	r0, [r7, #12]
 8008bc0:	f000 fc7b 	bl	80094ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d001      	beq.n	8008bce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e010      	b.n	8008bf0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008bce:	897b      	ldrh	r3, [r7, #10]
 8008bd0:	b2da      	uxtb	r2, r3
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	4907      	ldr	r1, [pc, #28]	@ (8008bfc <I2C_MasterRequestWrite+0x100>)
 8008bde:	68f8      	ldr	r0, [r7, #12]
 8008be0:	f000 fc6b 	bl	80094ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d001      	beq.n	8008bee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	e000      	b.n	8008bf0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3718      	adds	r7, #24
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	00010008 	.word	0x00010008
 8008bfc:	00010002 	.word	0x00010002

08008c00 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b088      	sub	sp, #32
 8008c04:	af02      	add	r7, sp, #8
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	607a      	str	r2, [r7, #4]
 8008c0a:	603b      	str	r3, [r7, #0]
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c14:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008c24:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	2b08      	cmp	r3, #8
 8008c2a:	d006      	beq.n	8008c3a <I2C_MasterRequestRead+0x3a>
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d003      	beq.n	8008c3a <I2C_MasterRequestRead+0x3a>
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008c38:	d108      	bne.n	8008c4c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	681a      	ldr	r2, [r3, #0]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008c48:	601a      	str	r2, [r3, #0]
 8008c4a:	e00b      	b.n	8008c64 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c50:	2b11      	cmp	r3, #17
 8008c52:	d107      	bne.n	8008c64 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008c62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	9300      	str	r3, [sp, #0]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008c70:	68f8      	ldr	r0, [r7, #12]
 8008c72:	f000 fbcb 	bl	800940c <I2C_WaitOnFlagUntilTimeout>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00d      	beq.n	8008c98 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c8a:	d103      	bne.n	8008c94 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c92:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008c94:	2303      	movs	r3, #3
 8008c96:	e079      	b.n	8008d8c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	691b      	ldr	r3, [r3, #16]
 8008c9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008ca0:	d108      	bne.n	8008cb4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008ca2:	897b      	ldrh	r3, [r7, #10]
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	f043 0301 	orr.w	r3, r3, #1
 8008caa:	b2da      	uxtb	r2, r3
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	611a      	str	r2, [r3, #16]
 8008cb2:	e05f      	b.n	8008d74 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008cb4:	897b      	ldrh	r3, [r7, #10]
 8008cb6:	11db      	asrs	r3, r3, #7
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	f003 0306 	and.w	r3, r3, #6
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	f063 030f 	orn	r3, r3, #15
 8008cc4:	b2da      	uxtb	r2, r3
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	4930      	ldr	r1, [pc, #192]	@ (8008d94 <I2C_MasterRequestRead+0x194>)
 8008cd2:	68f8      	ldr	r0, [r7, #12]
 8008cd4:	f000 fbf1 	bl	80094ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d001      	beq.n	8008ce2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e054      	b.n	8008d8c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008ce2:	897b      	ldrh	r3, [r7, #10]
 8008ce4:	b2da      	uxtb	r2, r3
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	4929      	ldr	r1, [pc, #164]	@ (8008d98 <I2C_MasterRequestRead+0x198>)
 8008cf2:	68f8      	ldr	r0, [r7, #12]
 8008cf4:	f000 fbe1 	bl	80094ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d001      	beq.n	8008d02 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e044      	b.n	8008d8c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d02:	2300      	movs	r3, #0
 8008d04:	613b      	str	r3, [r7, #16]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	695b      	ldr	r3, [r3, #20]
 8008d0c:	613b      	str	r3, [r7, #16]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	699b      	ldr	r3, [r3, #24]
 8008d14:	613b      	str	r3, [r7, #16]
 8008d16:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008d26:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008d34:	68f8      	ldr	r0, [r7, #12]
 8008d36:	f000 fb69 	bl	800940c <I2C_WaitOnFlagUntilTimeout>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00d      	beq.n	8008d5c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d4e:	d103      	bne.n	8008d58 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008d56:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8008d58:	2303      	movs	r3, #3
 8008d5a:	e017      	b.n	8008d8c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008d5c:	897b      	ldrh	r3, [r7, #10]
 8008d5e:	11db      	asrs	r3, r3, #7
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	f003 0306 	and.w	r3, r3, #6
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	f063 030e 	orn	r3, r3, #14
 8008d6c:	b2da      	uxtb	r2, r3
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	4907      	ldr	r1, [pc, #28]	@ (8008d98 <I2C_MasterRequestRead+0x198>)
 8008d7a:	68f8      	ldr	r0, [r7, #12]
 8008d7c:	f000 fb9d 	bl	80094ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d001      	beq.n	8008d8a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	e000      	b.n	8008d8c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8008d8a:	2300      	movs	r3, #0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3718      	adds	r7, #24
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	00010008 	.word	0x00010008
 8008d98:	00010002 	.word	0x00010002

08008d9c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b088      	sub	sp, #32
 8008da0:	af02      	add	r7, sp, #8
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	4608      	mov	r0, r1
 8008da6:	4611      	mov	r1, r2
 8008da8:	461a      	mov	r2, r3
 8008daa:	4603      	mov	r3, r0
 8008dac:	817b      	strh	r3, [r7, #10]
 8008dae:	460b      	mov	r3, r1
 8008db0:	813b      	strh	r3, [r7, #8]
 8008db2:	4613      	mov	r3, r2
 8008db4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008dc4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc8:	9300      	str	r3, [sp, #0]
 8008dca:	6a3b      	ldr	r3, [r7, #32]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008dd2:	68f8      	ldr	r0, [r7, #12]
 8008dd4:	f000 fb1a 	bl	800940c <I2C_WaitOnFlagUntilTimeout>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d00d      	beq.n	8008dfa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008de8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008dec:	d103      	bne.n	8008df6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008df4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008df6:	2303      	movs	r3, #3
 8008df8:	e05f      	b.n	8008eba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008dfa:	897b      	ldrh	r3, [r7, #10]
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	461a      	mov	r2, r3
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008e08:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e0c:	6a3a      	ldr	r2, [r7, #32]
 8008e0e:	492d      	ldr	r1, [pc, #180]	@ (8008ec4 <I2C_RequestMemoryWrite+0x128>)
 8008e10:	68f8      	ldr	r0, [r7, #12]
 8008e12:	f000 fb52 	bl	80094ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008e16:	4603      	mov	r3, r0
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d001      	beq.n	8008e20 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	e04c      	b.n	8008eba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e20:	2300      	movs	r3, #0
 8008e22:	617b      	str	r3, [r7, #20]
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	695b      	ldr	r3, [r3, #20]
 8008e2a:	617b      	str	r3, [r7, #20]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	699b      	ldr	r3, [r3, #24]
 8008e32:	617b      	str	r3, [r7, #20]
 8008e34:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e38:	6a39      	ldr	r1, [r7, #32]
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f000 fbbc 	bl	80095b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d00d      	beq.n	8008e62 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e4a:	2b04      	cmp	r3, #4
 8008e4c:	d107      	bne.n	8008e5e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e5c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e02b      	b.n	8008eba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008e62:	88fb      	ldrh	r3, [r7, #6]
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d105      	bne.n	8008e74 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008e68:	893b      	ldrh	r3, [r7, #8]
 8008e6a:	b2da      	uxtb	r2, r3
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	611a      	str	r2, [r3, #16]
 8008e72:	e021      	b.n	8008eb8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008e74:	893b      	ldrh	r3, [r7, #8]
 8008e76:	0a1b      	lsrs	r3, r3, #8
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	b2da      	uxtb	r2, r3
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e84:	6a39      	ldr	r1, [r7, #32]
 8008e86:	68f8      	ldr	r0, [r7, #12]
 8008e88:	f000 fb96 	bl	80095b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d00d      	beq.n	8008eae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e96:	2b04      	cmp	r3, #4
 8008e98:	d107      	bne.n	8008eaa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ea8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	e005      	b.n	8008eba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008eae:	893b      	ldrh	r3, [r7, #8]
 8008eb0:	b2da      	uxtb	r2, r3
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3718      	adds	r7, #24
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	00010002 	.word	0x00010002

08008ec8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b088      	sub	sp, #32
 8008ecc:	af02      	add	r7, sp, #8
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	4608      	mov	r0, r1
 8008ed2:	4611      	mov	r1, r2
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	817b      	strh	r3, [r7, #10]
 8008eda:	460b      	mov	r3, r1
 8008edc:	813b      	strh	r3, [r7, #8]
 8008ede:	4613      	mov	r3, r2
 8008ee0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008ef0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008f00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f04:	9300      	str	r3, [sp, #0]
 8008f06:	6a3b      	ldr	r3, [r7, #32]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008f0e:	68f8      	ldr	r0, [r7, #12]
 8008f10:	f000 fa7c 	bl	800940c <I2C_WaitOnFlagUntilTimeout>
 8008f14:	4603      	mov	r3, r0
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00d      	beq.n	8008f36 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f28:	d103      	bne.n	8008f32 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f30:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008f32:	2303      	movs	r3, #3
 8008f34:	e0aa      	b.n	800908c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008f36:	897b      	ldrh	r3, [r7, #10]
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008f44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f48:	6a3a      	ldr	r2, [r7, #32]
 8008f4a:	4952      	ldr	r1, [pc, #328]	@ (8009094 <I2C_RequestMemoryRead+0x1cc>)
 8008f4c:	68f8      	ldr	r0, [r7, #12]
 8008f4e:	f000 fab4 	bl	80094ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d001      	beq.n	8008f5c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	e097      	b.n	800908c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	617b      	str	r3, [r7, #20]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	695b      	ldr	r3, [r3, #20]
 8008f66:	617b      	str	r3, [r7, #20]
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	699b      	ldr	r3, [r3, #24]
 8008f6e:	617b      	str	r3, [r7, #20]
 8008f70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f74:	6a39      	ldr	r1, [r7, #32]
 8008f76:	68f8      	ldr	r0, [r7, #12]
 8008f78:	f000 fb1e 	bl	80095b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00d      	beq.n	8008f9e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f86:	2b04      	cmp	r3, #4
 8008f88:	d107      	bne.n	8008f9a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e076      	b.n	800908c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008f9e:	88fb      	ldrh	r3, [r7, #6]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d105      	bne.n	8008fb0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008fa4:	893b      	ldrh	r3, [r7, #8]
 8008fa6:	b2da      	uxtb	r2, r3
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	611a      	str	r2, [r3, #16]
 8008fae:	e021      	b.n	8008ff4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008fb0:	893b      	ldrh	r3, [r7, #8]
 8008fb2:	0a1b      	lsrs	r3, r3, #8
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	b2da      	uxtb	r2, r3
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fc0:	6a39      	ldr	r1, [r7, #32]
 8008fc2:	68f8      	ldr	r0, [r7, #12]
 8008fc4:	f000 faf8 	bl	80095b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d00d      	beq.n	8008fea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fd2:	2b04      	cmp	r3, #4
 8008fd4:	d107      	bne.n	8008fe6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008fe4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	e050      	b.n	800908c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008fea:	893b      	ldrh	r3, [r7, #8]
 8008fec:	b2da      	uxtb	r2, r3
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ff4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ff6:	6a39      	ldr	r1, [r7, #32]
 8008ff8:	68f8      	ldr	r0, [r7, #12]
 8008ffa:	f000 fadd 	bl	80095b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d00d      	beq.n	8009020 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009008:	2b04      	cmp	r3, #4
 800900a:	d107      	bne.n	800901c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	681a      	ldr	r2, [r3, #0]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800901a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800901c:	2301      	movs	r3, #1
 800901e:	e035      	b.n	800908c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800902e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009032:	9300      	str	r3, [sp, #0]
 8009034:	6a3b      	ldr	r3, [r7, #32]
 8009036:	2200      	movs	r2, #0
 8009038:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f000 f9e5 	bl	800940c <I2C_WaitOnFlagUntilTimeout>
 8009042:	4603      	mov	r3, r0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00d      	beq.n	8009064 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009052:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009056:	d103      	bne.n	8009060 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800905e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009060:	2303      	movs	r3, #3
 8009062:	e013      	b.n	800908c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009064:	897b      	ldrh	r3, [r7, #10]
 8009066:	b2db      	uxtb	r3, r3
 8009068:	f043 0301 	orr.w	r3, r3, #1
 800906c:	b2da      	uxtb	r2, r3
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009076:	6a3a      	ldr	r2, [r7, #32]
 8009078:	4906      	ldr	r1, [pc, #24]	@ (8009094 <I2C_RequestMemoryRead+0x1cc>)
 800907a:	68f8      	ldr	r0, [r7, #12]
 800907c:	f000 fa1d 	bl	80094ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d001      	beq.n	800908a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	e000      	b.n	800908c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800908a:	2300      	movs	r3, #0
}
 800908c:	4618      	mov	r0, r3
 800908e:	3718      	adds	r7, #24
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}
 8009094:	00010002 	.word	0x00010002

08009098 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b086      	sub	sp, #24
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090a4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80090ac:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80090b4:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ba:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	685a      	ldr	r2, [r3, #4]
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80090ca:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d003      	beq.n	80090dc <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090d8:	2200      	movs	r2, #0
 80090da:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d003      	beq.n	80090ec <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090e8:	2200      	movs	r2, #0
 80090ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80090ec:	7cfb      	ldrb	r3, [r7, #19]
 80090ee:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80090f2:	2b21      	cmp	r3, #33	@ 0x21
 80090f4:	d007      	beq.n	8009106 <I2C_DMAXferCplt+0x6e>
 80090f6:	7cfb      	ldrb	r3, [r7, #19]
 80090f8:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80090fc:	2b22      	cmp	r3, #34	@ 0x22
 80090fe:	d131      	bne.n	8009164 <I2C_DMAXferCplt+0xcc>
 8009100:	7cbb      	ldrb	r3, [r7, #18]
 8009102:	2b20      	cmp	r3, #32
 8009104:	d12e      	bne.n	8009164 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	685a      	ldr	r2, [r3, #4]
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009114:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	2200      	movs	r2, #0
 800911a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800911c:	7cfb      	ldrb	r3, [r7, #19]
 800911e:	2b29      	cmp	r3, #41	@ 0x29
 8009120:	d10a      	bne.n	8009138 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	2221      	movs	r2, #33	@ 0x21
 8009126:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	2228      	movs	r2, #40	@ 0x28
 800912c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009130:	6978      	ldr	r0, [r7, #20]
 8009132:	f7fe fba4 	bl	800787e <HAL_I2C_SlaveTxCpltCallback>
 8009136:	e00c      	b.n	8009152 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009138:	7cfb      	ldrb	r3, [r7, #19]
 800913a:	2b2a      	cmp	r3, #42	@ 0x2a
 800913c:	d109      	bne.n	8009152 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	2222      	movs	r2, #34	@ 0x22
 8009142:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	2228      	movs	r2, #40	@ 0x28
 8009148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800914c:	6978      	ldr	r0, [r7, #20]
 800914e:	f7fe fba0 	bl	8007892 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	685a      	ldr	r2, [r3, #4]
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8009160:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8009162:	e06a      	b.n	800923a <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800916a:	b2db      	uxtb	r3, r3
 800916c:	2b00      	cmp	r3, #0
 800916e:	d064      	beq.n	800923a <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009174:	b29b      	uxth	r3, r3
 8009176:	2b01      	cmp	r3, #1
 8009178:	d107      	bne.n	800918a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009188:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	685a      	ldr	r2, [r3, #4]
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8009198:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80091a0:	d009      	beq.n	80091b6 <I2C_DMAXferCplt+0x11e>
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2b08      	cmp	r3, #8
 80091a6:	d006      	beq.n	80091b6 <I2C_DMAXferCplt+0x11e>
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80091ae:	d002      	beq.n	80091b6 <I2C_DMAXferCplt+0x11e>
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2b20      	cmp	r3, #32
 80091b4:	d107      	bne.n	80091c6 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80091c4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	685a      	ldr	r2, [r3, #4]
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80091d4:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	685a      	ldr	r2, [r3, #4]
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80091e4:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	2200      	movs	r2, #0
 80091ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d003      	beq.n	80091fc <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80091f4:	6978      	ldr	r0, [r7, #20]
 80091f6:	f7fe fb78 	bl	80078ea <HAL_I2C_ErrorCallback>
}
 80091fa:	e01e      	b.n	800923a <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	2220      	movs	r2, #32
 8009200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800920a:	b2db      	uxtb	r3, r3
 800920c:	2b40      	cmp	r3, #64	@ 0x40
 800920e:	d10a      	bne.n	8009226 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	2200      	movs	r2, #0
 8009214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	2200      	movs	r2, #0
 800921c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800921e:	6978      	ldr	r0, [r7, #20]
 8009220:	f7f9 f92a 	bl	8002478 <HAL_I2C_MemRxCpltCallback>
}
 8009224:	e009      	b.n	800923a <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	2200      	movs	r2, #0
 800922a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	2212      	movs	r2, #18
 8009232:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8009234:	6978      	ldr	r0, [r7, #20]
 8009236:	f7fe fb18 	bl	800786a <HAL_I2C_MasterRxCpltCallback>
}
 800923a:	bf00      	nop
 800923c:	3718      	adds	r7, #24
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}

08009242 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b084      	sub	sp, #16
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800924e:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009254:	2b00      	cmp	r3, #0
 8009256:	d003      	beq.n	8009260 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800925c:	2200      	movs	r2, #0
 800925e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009264:	2b00      	cmp	r3, #0
 8009266:	d003      	beq.n	8009270 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800926c:	2200      	movs	r2, #0
 800926e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f7fc fca1 	bl	8005bb8 <HAL_DMA_GetError>
 8009276:	4603      	mov	r3, r0
 8009278:	2b02      	cmp	r3, #2
 800927a:	d01b      	beq.n	80092b4 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800928a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2200      	movs	r2, #0
 8009290:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2220      	movs	r2, #32
 8009296:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2200      	movs	r2, #0
 800929e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092a6:	f043 0210 	orr.w	r2, r3, #16
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80092ae:	68f8      	ldr	r0, [r7, #12]
 80092b0:	f7fe fb1b 	bl	80078ea <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80092b4:	bf00      	nop
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b086      	sub	sp, #24
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80092c4:	2300      	movs	r3, #0
 80092c6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092cc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80092d4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80092d6:	4b4b      	ldr	r3, [pc, #300]	@ (8009404 <I2C_DMAAbort+0x148>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	08db      	lsrs	r3, r3, #3
 80092dc:	4a4a      	ldr	r2, [pc, #296]	@ (8009408 <I2C_DMAAbort+0x14c>)
 80092de:	fba2 2303 	umull	r2, r3, r2, r3
 80092e2:	0a1a      	lsrs	r2, r3, #8
 80092e4:	4613      	mov	r3, r2
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	4413      	add	r3, r2
 80092ea:	00da      	lsls	r2, r3, #3
 80092ec:	1ad3      	subs	r3, r2, r3
 80092ee:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d106      	bne.n	8009304 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092fa:	f043 0220 	orr.w	r2, r3, #32
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8009302:	e00a      	b.n	800931a <I2C_DMAAbort+0x5e>
    }
    count--;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	3b01      	subs	r3, #1
 8009308:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009314:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009318:	d0ea      	beq.n	80092f0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800931e:	2b00      	cmp	r3, #0
 8009320:	d003      	beq.n	800932a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009326:	2200      	movs	r2, #0
 8009328:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800932e:	2b00      	cmp	r3, #0
 8009330:	d003      	beq.n	800933a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009336:	2200      	movs	r2, #0
 8009338:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009348:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	2200      	movs	r2, #0
 800934e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009354:	2b00      	cmp	r3, #0
 8009356:	d003      	beq.n	8009360 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800935c:	2200      	movs	r2, #0
 800935e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009364:	2b00      	cmp	r3, #0
 8009366:	d003      	beq.n	8009370 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800936c:	2200      	movs	r2, #0
 800936e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f022 0201 	bic.w	r2, r2, #1
 800937e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009386:	b2db      	uxtb	r3, r3
 8009388:	2b60      	cmp	r3, #96	@ 0x60
 800938a:	d10e      	bne.n	80093aa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	2220      	movs	r2, #32
 8009390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	2200      	movs	r2, #0
 8009398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	2200      	movs	r2, #0
 80093a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80093a2:	6978      	ldr	r0, [r7, #20]
 80093a4:	f7fe faab 	bl	80078fe <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80093a8:	e027      	b.n	80093fa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80093aa:	7cfb      	ldrb	r3, [r7, #19]
 80093ac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80093b0:	2b28      	cmp	r3, #40	@ 0x28
 80093b2:	d117      	bne.n	80093e4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f042 0201 	orr.w	r2, r2, #1
 80093c2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80093d2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	2200      	movs	r2, #0
 80093d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	2228      	movs	r2, #40	@ 0x28
 80093de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80093e2:	e007      	b.n	80093f4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	2220      	movs	r2, #32
 80093e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	2200      	movs	r2, #0
 80093f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80093f4:	6978      	ldr	r0, [r7, #20]
 80093f6:	f7fe fa78 	bl	80078ea <HAL_I2C_ErrorCallback>
}
 80093fa:	bf00      	nop
 80093fc:	3718      	adds	r7, #24
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop
 8009404:	20000004 	.word	0x20000004
 8009408:	14f8b589 	.word	0x14f8b589

0800940c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	603b      	str	r3, [r7, #0]
 8009418:	4613      	mov	r3, r2
 800941a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800941c:	e025      	b.n	800946a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009424:	d021      	beq.n	800946a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009426:	f7fb fa49 	bl	80048bc <HAL_GetTick>
 800942a:	4602      	mov	r2, r0
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	1ad3      	subs	r3, r2, r3
 8009430:	683a      	ldr	r2, [r7, #0]
 8009432:	429a      	cmp	r2, r3
 8009434:	d302      	bcc.n	800943c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d116      	bne.n	800946a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2200      	movs	r2, #0
 8009440:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2220      	movs	r2, #32
 8009446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2200      	movs	r2, #0
 800944e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009456:	f043 0220 	orr.w	r2, r3, #32
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2200      	movs	r2, #0
 8009462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009466:	2301      	movs	r3, #1
 8009468:	e023      	b.n	80094b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	0c1b      	lsrs	r3, r3, #16
 800946e:	b2db      	uxtb	r3, r3
 8009470:	2b01      	cmp	r3, #1
 8009472:	d10d      	bne.n	8009490 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	695b      	ldr	r3, [r3, #20]
 800947a:	43da      	mvns	r2, r3
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	4013      	ands	r3, r2
 8009480:	b29b      	uxth	r3, r3
 8009482:	2b00      	cmp	r3, #0
 8009484:	bf0c      	ite	eq
 8009486:	2301      	moveq	r3, #1
 8009488:	2300      	movne	r3, #0
 800948a:	b2db      	uxtb	r3, r3
 800948c:	461a      	mov	r2, r3
 800948e:	e00c      	b.n	80094aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	699b      	ldr	r3, [r3, #24]
 8009496:	43da      	mvns	r2, r3
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	4013      	ands	r3, r2
 800949c:	b29b      	uxth	r3, r3
 800949e:	2b00      	cmp	r3, #0
 80094a0:	bf0c      	ite	eq
 80094a2:	2301      	moveq	r3, #1
 80094a4:	2300      	movne	r3, #0
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	461a      	mov	r2, r3
 80094aa:	79fb      	ldrb	r3, [r7, #7]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d0b6      	beq.n	800941e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3710      	adds	r7, #16
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b084      	sub	sp, #16
 80094be:	af00      	add	r7, sp, #0
 80094c0:	60f8      	str	r0, [r7, #12]
 80094c2:	60b9      	str	r1, [r7, #8]
 80094c4:	607a      	str	r2, [r7, #4]
 80094c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80094c8:	e051      	b.n	800956e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	695b      	ldr	r3, [r3, #20]
 80094d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80094d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094d8:	d123      	bne.n	8009522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80094e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80094f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2200      	movs	r2, #0
 80094f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2220      	movs	r2, #32
 80094fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2200      	movs	r2, #0
 8009506:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800950e:	f043 0204 	orr.w	r2, r3, #4
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2200      	movs	r2, #0
 800951a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	e046      	b.n	80095b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009528:	d021      	beq.n	800956e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800952a:	f7fb f9c7 	bl	80048bc <HAL_GetTick>
 800952e:	4602      	mov	r2, r0
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	1ad3      	subs	r3, r2, r3
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	429a      	cmp	r2, r3
 8009538:	d302      	bcc.n	8009540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d116      	bne.n	800956e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2200      	movs	r2, #0
 8009544:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2220      	movs	r2, #32
 800954a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2200      	movs	r2, #0
 8009552:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800955a:	f043 0220 	orr.w	r2, r3, #32
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2200      	movs	r2, #0
 8009566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800956a:	2301      	movs	r3, #1
 800956c:	e020      	b.n	80095b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	0c1b      	lsrs	r3, r3, #16
 8009572:	b2db      	uxtb	r3, r3
 8009574:	2b01      	cmp	r3, #1
 8009576:	d10c      	bne.n	8009592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	695b      	ldr	r3, [r3, #20]
 800957e:	43da      	mvns	r2, r3
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	4013      	ands	r3, r2
 8009584:	b29b      	uxth	r3, r3
 8009586:	2b00      	cmp	r3, #0
 8009588:	bf14      	ite	ne
 800958a:	2301      	movne	r3, #1
 800958c:	2300      	moveq	r3, #0
 800958e:	b2db      	uxtb	r3, r3
 8009590:	e00b      	b.n	80095aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	699b      	ldr	r3, [r3, #24]
 8009598:	43da      	mvns	r2, r3
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	4013      	ands	r3, r2
 800959e:	b29b      	uxth	r3, r3
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	bf14      	ite	ne
 80095a4:	2301      	movne	r3, #1
 80095a6:	2300      	moveq	r3, #0
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d18d      	bne.n	80094ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3710      	adds	r7, #16
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80095c4:	e02d      	b.n	8009622 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80095c6:	68f8      	ldr	r0, [r7, #12]
 80095c8:	f000 f900 	bl	80097cc <I2C_IsAcknowledgeFailed>
 80095cc:	4603      	mov	r3, r0
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d001      	beq.n	80095d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80095d2:	2301      	movs	r3, #1
 80095d4:	e02d      	b.n	8009632 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095dc:	d021      	beq.n	8009622 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095de:	f7fb f96d 	bl	80048bc <HAL_GetTick>
 80095e2:	4602      	mov	r2, r0
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	1ad3      	subs	r3, r2, r3
 80095e8:	68ba      	ldr	r2, [r7, #8]
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d302      	bcc.n	80095f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d116      	bne.n	8009622 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2200      	movs	r2, #0
 80095f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2220      	movs	r2, #32
 80095fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2200      	movs	r2, #0
 8009606:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800960e:	f043 0220 	orr.w	r2, r3, #32
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2200      	movs	r2, #0
 800961a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	e007      	b.n	8009632 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	695b      	ldr	r3, [r3, #20]
 8009628:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800962c:	2b80      	cmp	r3, #128	@ 0x80
 800962e:	d1ca      	bne.n	80095c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009630:	2300      	movs	r3, #0
}
 8009632:	4618      	mov	r0, r3
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b084      	sub	sp, #16
 800963e:	af00      	add	r7, sp, #0
 8009640:	60f8      	str	r0, [r7, #12]
 8009642:	60b9      	str	r1, [r7, #8]
 8009644:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009646:	e02d      	b.n	80096a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f000 f8bf 	bl	80097cc <I2C_IsAcknowledgeFailed>
 800964e:	4603      	mov	r3, r0
 8009650:	2b00      	cmp	r3, #0
 8009652:	d001      	beq.n	8009658 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009654:	2301      	movs	r3, #1
 8009656:	e02d      	b.n	80096b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800965e:	d021      	beq.n	80096a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009660:	f7fb f92c 	bl	80048bc <HAL_GetTick>
 8009664:	4602      	mov	r2, r0
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	1ad3      	subs	r3, r2, r3
 800966a:	68ba      	ldr	r2, [r7, #8]
 800966c:	429a      	cmp	r2, r3
 800966e:	d302      	bcc.n	8009676 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d116      	bne.n	80096a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2200      	movs	r2, #0
 800967a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2220      	movs	r2, #32
 8009680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2200      	movs	r2, #0
 8009688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009690:	f043 0220 	orr.w	r2, r3, #32
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2200      	movs	r2, #0
 800969c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80096a0:	2301      	movs	r3, #1
 80096a2:	e007      	b.n	80096b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	695b      	ldr	r3, [r3, #20]
 80096aa:	f003 0304 	and.w	r3, r3, #4
 80096ae:	2b04      	cmp	r3, #4
 80096b0:	d1ca      	bne.n	8009648 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80096b2:	2300      	movs	r3, #0
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3710      	adds	r7, #16
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80096bc:	b480      	push	{r7}
 80096be:	b085      	sub	sp, #20
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80096c4:	2300      	movs	r3, #0
 80096c6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80096c8:	4b13      	ldr	r3, [pc, #76]	@ (8009718 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	08db      	lsrs	r3, r3, #3
 80096ce:	4a13      	ldr	r2, [pc, #76]	@ (800971c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80096d0:	fba2 2303 	umull	r2, r3, r2, r3
 80096d4:	0a1a      	lsrs	r2, r3, #8
 80096d6:	4613      	mov	r3, r2
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	4413      	add	r3, r2
 80096dc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	3b01      	subs	r3, #1
 80096e2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d107      	bne.n	80096fa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096ee:	f043 0220 	orr.w	r2, r3, #32
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80096f6:	2301      	movs	r3, #1
 80096f8:	e008      	b.n	800970c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009704:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009708:	d0e9      	beq.n	80096de <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800970a:	2300      	movs	r3, #0
}
 800970c:	4618      	mov	r0, r3
 800970e:	3714      	adds	r7, #20
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr
 8009718:	20000004 	.word	0x20000004
 800971c:	14f8b589 	.word	0x14f8b589

08009720 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800972c:	e042      	b.n	80097b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	695b      	ldr	r3, [r3, #20]
 8009734:	f003 0310 	and.w	r3, r3, #16
 8009738:	2b10      	cmp	r3, #16
 800973a:	d119      	bne.n	8009770 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f06f 0210 	mvn.w	r2, #16
 8009744:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2200      	movs	r2, #0
 800974a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2220      	movs	r2, #32
 8009750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2200      	movs	r2, #0
 8009758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2200      	movs	r2, #0
 8009768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800976c:	2301      	movs	r3, #1
 800976e:	e029      	b.n	80097c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009770:	f7fb f8a4 	bl	80048bc <HAL_GetTick>
 8009774:	4602      	mov	r2, r0
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	1ad3      	subs	r3, r2, r3
 800977a:	68ba      	ldr	r2, [r7, #8]
 800977c:	429a      	cmp	r2, r3
 800977e:	d302      	bcc.n	8009786 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d116      	bne.n	80097b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2200      	movs	r2, #0
 800978a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2220      	movs	r2, #32
 8009790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2200      	movs	r2, #0
 8009798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097a0:	f043 0220 	orr.w	r2, r3, #32
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2200      	movs	r2, #0
 80097ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	e007      	b.n	80097c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	695b      	ldr	r3, [r3, #20]
 80097ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097be:	2b40      	cmp	r3, #64	@ 0x40
 80097c0:	d1b5      	bne.n	800972e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80097c2:	2300      	movs	r3, #0
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3710      	adds	r7, #16
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	695b      	ldr	r3, [r3, #20]
 80097da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80097de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097e2:	d11b      	bne.n	800981c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80097ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2220      	movs	r2, #32
 80097f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2200      	movs	r2, #0
 8009800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009808:	f043 0204 	orr.w	r2, r3, #4
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2200      	movs	r2, #0
 8009814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009818:	2301      	movs	r3, #1
 800981a:	e000      	b.n	800981e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800981c:	2300      	movs	r3, #0
}
 800981e:	4618      	mov	r0, r3
 8009820:	370c      	adds	r7, #12
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr

0800982a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800982a:	b480      	push	{r7}
 800982c:	b083      	sub	sp, #12
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009836:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800983a:	d103      	bne.n	8009844 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2201      	movs	r2, #1
 8009840:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8009842:	e007      	b.n	8009854 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009848:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800984c:	d102      	bne.n	8009854 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2208      	movs	r2, #8
 8009852:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8009854:	bf00      	nop
 8009856:	370c      	adds	r7, #12
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d101      	bne.n	8009874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009870:	2301      	movs	r3, #1
 8009872:	e0cc      	b.n	8009a0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009874:	4b68      	ldr	r3, [pc, #416]	@ (8009a18 <HAL_RCC_ClockConfig+0x1b8>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f003 030f 	and.w	r3, r3, #15
 800987c:	683a      	ldr	r2, [r7, #0]
 800987e:	429a      	cmp	r2, r3
 8009880:	d90c      	bls.n	800989c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009882:	4b65      	ldr	r3, [pc, #404]	@ (8009a18 <HAL_RCC_ClockConfig+0x1b8>)
 8009884:	683a      	ldr	r2, [r7, #0]
 8009886:	b2d2      	uxtb	r2, r2
 8009888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800988a:	4b63      	ldr	r3, [pc, #396]	@ (8009a18 <HAL_RCC_ClockConfig+0x1b8>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f003 030f 	and.w	r3, r3, #15
 8009892:	683a      	ldr	r2, [r7, #0]
 8009894:	429a      	cmp	r2, r3
 8009896:	d001      	beq.n	800989c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009898:	2301      	movs	r3, #1
 800989a:	e0b8      	b.n	8009a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f003 0302 	and.w	r3, r3, #2
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d020      	beq.n	80098ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f003 0304 	and.w	r3, r3, #4
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d005      	beq.n	80098c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80098b4:	4b59      	ldr	r3, [pc, #356]	@ (8009a1c <HAL_RCC_ClockConfig+0x1bc>)
 80098b6:	689b      	ldr	r3, [r3, #8]
 80098b8:	4a58      	ldr	r2, [pc, #352]	@ (8009a1c <HAL_RCC_ClockConfig+0x1bc>)
 80098ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80098be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f003 0308 	and.w	r3, r3, #8
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d005      	beq.n	80098d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80098cc:	4b53      	ldr	r3, [pc, #332]	@ (8009a1c <HAL_RCC_ClockConfig+0x1bc>)
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	4a52      	ldr	r2, [pc, #328]	@ (8009a1c <HAL_RCC_ClockConfig+0x1bc>)
 80098d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80098d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80098d8:	4b50      	ldr	r3, [pc, #320]	@ (8009a1c <HAL_RCC_ClockConfig+0x1bc>)
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	689b      	ldr	r3, [r3, #8]
 80098e4:	494d      	ldr	r1, [pc, #308]	@ (8009a1c <HAL_RCC_ClockConfig+0x1bc>)
 80098e6:	4313      	orrs	r3, r2
 80098e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f003 0301 	and.w	r3, r3, #1
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d044      	beq.n	8009980 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	685b      	ldr	r3, [r3, #4]
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d107      	bne.n	800990e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80098fe:	4b47      	ldr	r3, [pc, #284]	@ (8009a1c <HAL_RCC_ClockConfig+0x1bc>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009906:	2b00      	cmp	r3, #0
 8009908:	d119      	bne.n	800993e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	e07f      	b.n	8009a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	2b02      	cmp	r3, #2
 8009914:	d003      	beq.n	800991e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800991a:	2b03      	cmp	r3, #3
 800991c:	d107      	bne.n	800992e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800991e:	4b3f      	ldr	r3, [pc, #252]	@ (8009a1c <HAL_RCC_ClockConfig+0x1bc>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009926:	2b00      	cmp	r3, #0
 8009928:	d109      	bne.n	800993e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800992a:	2301      	movs	r3, #1
 800992c:	e06f      	b.n	8009a0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800992e:	4b3b      	ldr	r3, [pc, #236]	@ (8009a1c <HAL_RCC_ClockConfig+0x1bc>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f003 0302 	and.w	r3, r3, #2
 8009936:	2b00      	cmp	r3, #0
 8009938:	d101      	bne.n	800993e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	e067      	b.n	8009a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800993e:	4b37      	ldr	r3, [pc, #220]	@ (8009a1c <HAL_RCC_ClockConfig+0x1bc>)
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	f023 0203 	bic.w	r2, r3, #3
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	4934      	ldr	r1, [pc, #208]	@ (8009a1c <HAL_RCC_ClockConfig+0x1bc>)
 800994c:	4313      	orrs	r3, r2
 800994e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009950:	f7fa ffb4 	bl	80048bc <HAL_GetTick>
 8009954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009956:	e00a      	b.n	800996e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009958:	f7fa ffb0 	bl	80048bc <HAL_GetTick>
 800995c:	4602      	mov	r2, r0
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	1ad3      	subs	r3, r2, r3
 8009962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009966:	4293      	cmp	r3, r2
 8009968:	d901      	bls.n	800996e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800996a:	2303      	movs	r3, #3
 800996c:	e04f      	b.n	8009a0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800996e:	4b2b      	ldr	r3, [pc, #172]	@ (8009a1c <HAL_RCC_ClockConfig+0x1bc>)
 8009970:	689b      	ldr	r3, [r3, #8]
 8009972:	f003 020c 	and.w	r2, r3, #12
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	009b      	lsls	r3, r3, #2
 800997c:	429a      	cmp	r2, r3
 800997e:	d1eb      	bne.n	8009958 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009980:	4b25      	ldr	r3, [pc, #148]	@ (8009a18 <HAL_RCC_ClockConfig+0x1b8>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f003 030f 	and.w	r3, r3, #15
 8009988:	683a      	ldr	r2, [r7, #0]
 800998a:	429a      	cmp	r2, r3
 800998c:	d20c      	bcs.n	80099a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800998e:	4b22      	ldr	r3, [pc, #136]	@ (8009a18 <HAL_RCC_ClockConfig+0x1b8>)
 8009990:	683a      	ldr	r2, [r7, #0]
 8009992:	b2d2      	uxtb	r2, r2
 8009994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009996:	4b20      	ldr	r3, [pc, #128]	@ (8009a18 <HAL_RCC_ClockConfig+0x1b8>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f003 030f 	and.w	r3, r3, #15
 800999e:	683a      	ldr	r2, [r7, #0]
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d001      	beq.n	80099a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80099a4:	2301      	movs	r3, #1
 80099a6:	e032      	b.n	8009a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f003 0304 	and.w	r3, r3, #4
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d008      	beq.n	80099c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80099b4:	4b19      	ldr	r3, [pc, #100]	@ (8009a1c <HAL_RCC_ClockConfig+0x1bc>)
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	68db      	ldr	r3, [r3, #12]
 80099c0:	4916      	ldr	r1, [pc, #88]	@ (8009a1c <HAL_RCC_ClockConfig+0x1bc>)
 80099c2:	4313      	orrs	r3, r2
 80099c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f003 0308 	and.w	r3, r3, #8
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d009      	beq.n	80099e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80099d2:	4b12      	ldr	r3, [pc, #72]	@ (8009a1c <HAL_RCC_ClockConfig+0x1bc>)
 80099d4:	689b      	ldr	r3, [r3, #8]
 80099d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	00db      	lsls	r3, r3, #3
 80099e0:	490e      	ldr	r1, [pc, #56]	@ (8009a1c <HAL_RCC_ClockConfig+0x1bc>)
 80099e2:	4313      	orrs	r3, r2
 80099e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80099e6:	f000 f887 	bl	8009af8 <HAL_RCC_GetSysClockFreq>
 80099ea:	4602      	mov	r2, r0
 80099ec:	4b0b      	ldr	r3, [pc, #44]	@ (8009a1c <HAL_RCC_ClockConfig+0x1bc>)
 80099ee:	689b      	ldr	r3, [r3, #8]
 80099f0:	091b      	lsrs	r3, r3, #4
 80099f2:	f003 030f 	and.w	r3, r3, #15
 80099f6:	490a      	ldr	r1, [pc, #40]	@ (8009a20 <HAL_RCC_ClockConfig+0x1c0>)
 80099f8:	5ccb      	ldrb	r3, [r1, r3]
 80099fa:	fa22 f303 	lsr.w	r3, r2, r3
 80099fe:	4a09      	ldr	r2, [pc, #36]	@ (8009a24 <HAL_RCC_ClockConfig+0x1c4>)
 8009a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009a02:	4b09      	ldr	r3, [pc, #36]	@ (8009a28 <HAL_RCC_ClockConfig+0x1c8>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7fa fd16 	bl	8004438 <HAL_InitTick>

  return HAL_OK;
 8009a0c:	2300      	movs	r3, #0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3710      	adds	r7, #16
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	40023c00 	.word	0x40023c00
 8009a1c:	40023800 	.word	0x40023800
 8009a20:	08016f44 	.word	0x08016f44
 8009a24:	20000004 	.word	0x20000004
 8009a28:	20000008 	.word	0x20000008

08009a2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009a30:	4b03      	ldr	r3, [pc, #12]	@ (8009a40 <HAL_RCC_GetHCLKFreq+0x14>)
 8009a32:	681b      	ldr	r3, [r3, #0]
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop
 8009a40:	20000004 	.word	0x20000004

08009a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009a48:	f7ff fff0 	bl	8009a2c <HAL_RCC_GetHCLKFreq>
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	4b05      	ldr	r3, [pc, #20]	@ (8009a64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	0a9b      	lsrs	r3, r3, #10
 8009a54:	f003 0307 	and.w	r3, r3, #7
 8009a58:	4903      	ldr	r1, [pc, #12]	@ (8009a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009a5a:	5ccb      	ldrb	r3, [r1, r3]
 8009a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	40023800 	.word	0x40023800
 8009a68:	08016f54 	.word	0x08016f54

08009a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009a70:	f7ff ffdc 	bl	8009a2c <HAL_RCC_GetHCLKFreq>
 8009a74:	4602      	mov	r2, r0
 8009a76:	4b05      	ldr	r3, [pc, #20]	@ (8009a8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009a78:	689b      	ldr	r3, [r3, #8]
 8009a7a:	0b5b      	lsrs	r3, r3, #13
 8009a7c:	f003 0307 	and.w	r3, r3, #7
 8009a80:	4903      	ldr	r1, [pc, #12]	@ (8009a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009a82:	5ccb      	ldrb	r3, [r1, r3]
 8009a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	40023800 	.word	0x40023800
 8009a90:	08016f54 	.word	0x08016f54

08009a94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	220f      	movs	r2, #15
 8009aa2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009aa4:	4b12      	ldr	r3, [pc, #72]	@ (8009af0 <HAL_RCC_GetClockConfig+0x5c>)
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	f003 0203 	and.w	r2, r3, #3
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8009af0 <HAL_RCC_GetClockConfig+0x5c>)
 8009ab2:	689b      	ldr	r3, [r3, #8]
 8009ab4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009abc:	4b0c      	ldr	r3, [pc, #48]	@ (8009af0 <HAL_RCC_GetClockConfig+0x5c>)
 8009abe:	689b      	ldr	r3, [r3, #8]
 8009ac0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009ac8:	4b09      	ldr	r3, [pc, #36]	@ (8009af0 <HAL_RCC_GetClockConfig+0x5c>)
 8009aca:	689b      	ldr	r3, [r3, #8]
 8009acc:	08db      	lsrs	r3, r3, #3
 8009ace:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009ad6:	4b07      	ldr	r3, [pc, #28]	@ (8009af4 <HAL_RCC_GetClockConfig+0x60>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f003 020f 	and.w	r2, r3, #15
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	601a      	str	r2, [r3, #0]
}
 8009ae2:	bf00      	nop
 8009ae4:	370c      	adds	r7, #12
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr
 8009aee:	bf00      	nop
 8009af0:	40023800 	.word	0x40023800
 8009af4:	40023c00 	.word	0x40023c00

08009af8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009afc:	b0ae      	sub	sp, #184	@ 0xb8
 8009afe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009b00:	2300      	movs	r3, #0
 8009b02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8009b06:	2300      	movs	r3, #0
 8009b08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8009b12:	2300      	movs	r3, #0
 8009b14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009b1e:	4bcb      	ldr	r3, [pc, #812]	@ (8009e4c <HAL_RCC_GetSysClockFreq+0x354>)
 8009b20:	689b      	ldr	r3, [r3, #8]
 8009b22:	f003 030c 	and.w	r3, r3, #12
 8009b26:	2b0c      	cmp	r3, #12
 8009b28:	f200 8204 	bhi.w	8009f34 <HAL_RCC_GetSysClockFreq+0x43c>
 8009b2c:	a201      	add	r2, pc, #4	@ (adr r2, 8009b34 <HAL_RCC_GetSysClockFreq+0x3c>)
 8009b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b32:	bf00      	nop
 8009b34:	08009b69 	.word	0x08009b69
 8009b38:	08009f35 	.word	0x08009f35
 8009b3c:	08009f35 	.word	0x08009f35
 8009b40:	08009f35 	.word	0x08009f35
 8009b44:	08009b71 	.word	0x08009b71
 8009b48:	08009f35 	.word	0x08009f35
 8009b4c:	08009f35 	.word	0x08009f35
 8009b50:	08009f35 	.word	0x08009f35
 8009b54:	08009b79 	.word	0x08009b79
 8009b58:	08009f35 	.word	0x08009f35
 8009b5c:	08009f35 	.word	0x08009f35
 8009b60:	08009f35 	.word	0x08009f35
 8009b64:	08009d69 	.word	0x08009d69
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009b68:	4bb9      	ldr	r3, [pc, #740]	@ (8009e50 <HAL_RCC_GetSysClockFreq+0x358>)
 8009b6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8009b6e:	e1e5      	b.n	8009f3c <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009b70:	4bb7      	ldr	r3, [pc, #732]	@ (8009e50 <HAL_RCC_GetSysClockFreq+0x358>)
 8009b72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009b76:	e1e1      	b.n	8009f3c <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009b78:	4bb4      	ldr	r3, [pc, #720]	@ (8009e4c <HAL_RCC_GetSysClockFreq+0x354>)
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009b84:	4bb1      	ldr	r3, [pc, #708]	@ (8009e4c <HAL_RCC_GetSysClockFreq+0x354>)
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d071      	beq.n	8009c74 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009b90:	4bae      	ldr	r3, [pc, #696]	@ (8009e4c <HAL_RCC_GetSysClockFreq+0x354>)
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	099b      	lsrs	r3, r3, #6
 8009b96:	2200      	movs	r2, #0
 8009b98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009b9c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8009ba0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ba8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009bac:	2300      	movs	r3, #0
 8009bae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009bb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009bb6:	4622      	mov	r2, r4
 8009bb8:	462b      	mov	r3, r5
 8009bba:	f04f 0000 	mov.w	r0, #0
 8009bbe:	f04f 0100 	mov.w	r1, #0
 8009bc2:	0159      	lsls	r1, r3, #5
 8009bc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009bc8:	0150      	lsls	r0, r2, #5
 8009bca:	4602      	mov	r2, r0
 8009bcc:	460b      	mov	r3, r1
 8009bce:	4621      	mov	r1, r4
 8009bd0:	1a51      	subs	r1, r2, r1
 8009bd2:	6439      	str	r1, [r7, #64]	@ 0x40
 8009bd4:	4629      	mov	r1, r5
 8009bd6:	eb63 0301 	sbc.w	r3, r3, r1
 8009bda:	647b      	str	r3, [r7, #68]	@ 0x44
 8009bdc:	f04f 0200 	mov.w	r2, #0
 8009be0:	f04f 0300 	mov.w	r3, #0
 8009be4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8009be8:	4649      	mov	r1, r9
 8009bea:	018b      	lsls	r3, r1, #6
 8009bec:	4641      	mov	r1, r8
 8009bee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009bf2:	4641      	mov	r1, r8
 8009bf4:	018a      	lsls	r2, r1, #6
 8009bf6:	4641      	mov	r1, r8
 8009bf8:	1a51      	subs	r1, r2, r1
 8009bfa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009bfc:	4649      	mov	r1, r9
 8009bfe:	eb63 0301 	sbc.w	r3, r3, r1
 8009c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c04:	f04f 0200 	mov.w	r2, #0
 8009c08:	f04f 0300 	mov.w	r3, #0
 8009c0c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8009c10:	4649      	mov	r1, r9
 8009c12:	00cb      	lsls	r3, r1, #3
 8009c14:	4641      	mov	r1, r8
 8009c16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c1a:	4641      	mov	r1, r8
 8009c1c:	00ca      	lsls	r2, r1, #3
 8009c1e:	4610      	mov	r0, r2
 8009c20:	4619      	mov	r1, r3
 8009c22:	4603      	mov	r3, r0
 8009c24:	4622      	mov	r2, r4
 8009c26:	189b      	adds	r3, r3, r2
 8009c28:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c2a:	462b      	mov	r3, r5
 8009c2c:	460a      	mov	r2, r1
 8009c2e:	eb42 0303 	adc.w	r3, r2, r3
 8009c32:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c34:	f04f 0200 	mov.w	r2, #0
 8009c38:	f04f 0300 	mov.w	r3, #0
 8009c3c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009c40:	4629      	mov	r1, r5
 8009c42:	028b      	lsls	r3, r1, #10
 8009c44:	4621      	mov	r1, r4
 8009c46:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009c4a:	4621      	mov	r1, r4
 8009c4c:	028a      	lsls	r2, r1, #10
 8009c4e:	4610      	mov	r0, r2
 8009c50:	4619      	mov	r1, r3
 8009c52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c56:	2200      	movs	r2, #0
 8009c58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009c5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009c60:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8009c64:	f7f7 f810 	bl	8000c88 <__aeabi_uldivmod>
 8009c68:	4602      	mov	r2, r0
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	4613      	mov	r3, r2
 8009c6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009c72:	e067      	b.n	8009d44 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009c74:	4b75      	ldr	r3, [pc, #468]	@ (8009e4c <HAL_RCC_GetSysClockFreq+0x354>)
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	099b      	lsrs	r3, r3, #6
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009c80:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8009c84:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009c8e:	2300      	movs	r3, #0
 8009c90:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009c92:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8009c96:	4622      	mov	r2, r4
 8009c98:	462b      	mov	r3, r5
 8009c9a:	f04f 0000 	mov.w	r0, #0
 8009c9e:	f04f 0100 	mov.w	r1, #0
 8009ca2:	0159      	lsls	r1, r3, #5
 8009ca4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009ca8:	0150      	lsls	r0, r2, #5
 8009caa:	4602      	mov	r2, r0
 8009cac:	460b      	mov	r3, r1
 8009cae:	4621      	mov	r1, r4
 8009cb0:	1a51      	subs	r1, r2, r1
 8009cb2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009cb4:	4629      	mov	r1, r5
 8009cb6:	eb63 0301 	sbc.w	r3, r3, r1
 8009cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009cbc:	f04f 0200 	mov.w	r2, #0
 8009cc0:	f04f 0300 	mov.w	r3, #0
 8009cc4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8009cc8:	4649      	mov	r1, r9
 8009cca:	018b      	lsls	r3, r1, #6
 8009ccc:	4641      	mov	r1, r8
 8009cce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009cd2:	4641      	mov	r1, r8
 8009cd4:	018a      	lsls	r2, r1, #6
 8009cd6:	4641      	mov	r1, r8
 8009cd8:	ebb2 0a01 	subs.w	sl, r2, r1
 8009cdc:	4649      	mov	r1, r9
 8009cde:	eb63 0b01 	sbc.w	fp, r3, r1
 8009ce2:	f04f 0200 	mov.w	r2, #0
 8009ce6:	f04f 0300 	mov.w	r3, #0
 8009cea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009cee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009cf2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009cf6:	4692      	mov	sl, r2
 8009cf8:	469b      	mov	fp, r3
 8009cfa:	4623      	mov	r3, r4
 8009cfc:	eb1a 0303 	adds.w	r3, sl, r3
 8009d00:	623b      	str	r3, [r7, #32]
 8009d02:	462b      	mov	r3, r5
 8009d04:	eb4b 0303 	adc.w	r3, fp, r3
 8009d08:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d0a:	f04f 0200 	mov.w	r2, #0
 8009d0e:	f04f 0300 	mov.w	r3, #0
 8009d12:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8009d16:	4629      	mov	r1, r5
 8009d18:	028b      	lsls	r3, r1, #10
 8009d1a:	4621      	mov	r1, r4
 8009d1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009d20:	4621      	mov	r1, r4
 8009d22:	028a      	lsls	r2, r1, #10
 8009d24:	4610      	mov	r0, r2
 8009d26:	4619      	mov	r1, r3
 8009d28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009d30:	677a      	str	r2, [r7, #116]	@ 0x74
 8009d32:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8009d36:	f7f6 ffa7 	bl	8000c88 <__aeabi_uldivmod>
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	4613      	mov	r3, r2
 8009d40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009d44:	4b41      	ldr	r3, [pc, #260]	@ (8009e4c <HAL_RCC_GetSysClockFreq+0x354>)
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	0c1b      	lsrs	r3, r3, #16
 8009d4a:	f003 0303 	and.w	r3, r3, #3
 8009d4e:	3301      	adds	r3, #1
 8009d50:	005b      	lsls	r3, r3, #1
 8009d52:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8009d56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009d5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009d66:	e0e9      	b.n	8009f3c <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009d68:	4b38      	ldr	r3, [pc, #224]	@ (8009e4c <HAL_RCC_GetSysClockFreq+0x354>)
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009d70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009d74:	4b35      	ldr	r3, [pc, #212]	@ (8009e4c <HAL_RCC_GetSysClockFreq+0x354>)
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d069      	beq.n	8009e54 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009d80:	4b32      	ldr	r3, [pc, #200]	@ (8009e4c <HAL_RCC_GetSysClockFreq+0x354>)
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	099b      	lsrs	r3, r3, #6
 8009d86:	2200      	movs	r2, #0
 8009d88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009d8a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009d8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d92:	663b      	str	r3, [r7, #96]	@ 0x60
 8009d94:	2300      	movs	r3, #0
 8009d96:	667b      	str	r3, [r7, #100]	@ 0x64
 8009d98:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8009d9c:	4622      	mov	r2, r4
 8009d9e:	462b      	mov	r3, r5
 8009da0:	f04f 0000 	mov.w	r0, #0
 8009da4:	f04f 0100 	mov.w	r1, #0
 8009da8:	0159      	lsls	r1, r3, #5
 8009daa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009dae:	0150      	lsls	r0, r2, #5
 8009db0:	4602      	mov	r2, r0
 8009db2:	460b      	mov	r3, r1
 8009db4:	4621      	mov	r1, r4
 8009db6:	1a51      	subs	r1, r2, r1
 8009db8:	61b9      	str	r1, [r7, #24]
 8009dba:	4629      	mov	r1, r5
 8009dbc:	eb63 0301 	sbc.w	r3, r3, r1
 8009dc0:	61fb      	str	r3, [r7, #28]
 8009dc2:	f04f 0200 	mov.w	r2, #0
 8009dc6:	f04f 0300 	mov.w	r3, #0
 8009dca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8009dce:	4659      	mov	r1, fp
 8009dd0:	018b      	lsls	r3, r1, #6
 8009dd2:	4651      	mov	r1, sl
 8009dd4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009dd8:	4651      	mov	r1, sl
 8009dda:	018a      	lsls	r2, r1, #6
 8009ddc:	4651      	mov	r1, sl
 8009dde:	ebb2 0801 	subs.w	r8, r2, r1
 8009de2:	4659      	mov	r1, fp
 8009de4:	eb63 0901 	sbc.w	r9, r3, r1
 8009de8:	f04f 0200 	mov.w	r2, #0
 8009dec:	f04f 0300 	mov.w	r3, #0
 8009df0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009df4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009df8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009dfc:	4690      	mov	r8, r2
 8009dfe:	4699      	mov	r9, r3
 8009e00:	4623      	mov	r3, r4
 8009e02:	eb18 0303 	adds.w	r3, r8, r3
 8009e06:	613b      	str	r3, [r7, #16]
 8009e08:	462b      	mov	r3, r5
 8009e0a:	eb49 0303 	adc.w	r3, r9, r3
 8009e0e:	617b      	str	r3, [r7, #20]
 8009e10:	f04f 0200 	mov.w	r2, #0
 8009e14:	f04f 0300 	mov.w	r3, #0
 8009e18:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8009e1c:	4629      	mov	r1, r5
 8009e1e:	028b      	lsls	r3, r1, #10
 8009e20:	4621      	mov	r1, r4
 8009e22:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009e26:	4621      	mov	r1, r4
 8009e28:	028a      	lsls	r2, r1, #10
 8009e2a:	4610      	mov	r0, r2
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e32:	2200      	movs	r2, #0
 8009e34:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e36:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8009e38:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009e3c:	f7f6 ff24 	bl	8000c88 <__aeabi_uldivmod>
 8009e40:	4602      	mov	r2, r0
 8009e42:	460b      	mov	r3, r1
 8009e44:	4613      	mov	r3, r2
 8009e46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009e4a:	e063      	b.n	8009f14 <HAL_RCC_GetSysClockFreq+0x41c>
 8009e4c:	40023800 	.word	0x40023800
 8009e50:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009e54:	4b3d      	ldr	r3, [pc, #244]	@ (8009f4c <HAL_RCC_GetSysClockFreq+0x454>)
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	099b      	lsrs	r3, r3, #6
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	4611      	mov	r1, r2
 8009e60:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009e64:	653b      	str	r3, [r7, #80]	@ 0x50
 8009e66:	2300      	movs	r3, #0
 8009e68:	657b      	str	r3, [r7, #84]	@ 0x54
 8009e6a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8009e6e:	4642      	mov	r2, r8
 8009e70:	464b      	mov	r3, r9
 8009e72:	f04f 0000 	mov.w	r0, #0
 8009e76:	f04f 0100 	mov.w	r1, #0
 8009e7a:	0159      	lsls	r1, r3, #5
 8009e7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009e80:	0150      	lsls	r0, r2, #5
 8009e82:	4602      	mov	r2, r0
 8009e84:	460b      	mov	r3, r1
 8009e86:	4641      	mov	r1, r8
 8009e88:	1a51      	subs	r1, r2, r1
 8009e8a:	60b9      	str	r1, [r7, #8]
 8009e8c:	4649      	mov	r1, r9
 8009e8e:	eb63 0301 	sbc.w	r3, r3, r1
 8009e92:	60fb      	str	r3, [r7, #12]
 8009e94:	f04f 0200 	mov.w	r2, #0
 8009e98:	f04f 0300 	mov.w	r3, #0
 8009e9c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8009ea0:	4659      	mov	r1, fp
 8009ea2:	018b      	lsls	r3, r1, #6
 8009ea4:	4651      	mov	r1, sl
 8009ea6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009eaa:	4651      	mov	r1, sl
 8009eac:	018a      	lsls	r2, r1, #6
 8009eae:	4651      	mov	r1, sl
 8009eb0:	1a54      	subs	r4, r2, r1
 8009eb2:	4659      	mov	r1, fp
 8009eb4:	eb63 0501 	sbc.w	r5, r3, r1
 8009eb8:	f04f 0200 	mov.w	r2, #0
 8009ebc:	f04f 0300 	mov.w	r3, #0
 8009ec0:	00eb      	lsls	r3, r5, #3
 8009ec2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009ec6:	00e2      	lsls	r2, r4, #3
 8009ec8:	4614      	mov	r4, r2
 8009eca:	461d      	mov	r5, r3
 8009ecc:	4643      	mov	r3, r8
 8009ece:	18e3      	adds	r3, r4, r3
 8009ed0:	603b      	str	r3, [r7, #0]
 8009ed2:	464b      	mov	r3, r9
 8009ed4:	eb45 0303 	adc.w	r3, r5, r3
 8009ed8:	607b      	str	r3, [r7, #4]
 8009eda:	f04f 0200 	mov.w	r2, #0
 8009ede:	f04f 0300 	mov.w	r3, #0
 8009ee2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009ee6:	4629      	mov	r1, r5
 8009ee8:	028b      	lsls	r3, r1, #10
 8009eea:	4621      	mov	r1, r4
 8009eec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009ef0:	4621      	mov	r1, r4
 8009ef2:	028a      	lsls	r2, r1, #10
 8009ef4:	4610      	mov	r0, r2
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009efc:	2200      	movs	r2, #0
 8009efe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f00:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009f02:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009f06:	f7f6 febf 	bl	8000c88 <__aeabi_uldivmod>
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	460b      	mov	r3, r1
 8009f0e:	4613      	mov	r3, r2
 8009f10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8009f14:	4b0d      	ldr	r3, [pc, #52]	@ (8009f4c <HAL_RCC_GetSysClockFreq+0x454>)
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	0f1b      	lsrs	r3, r3, #28
 8009f1a:	f003 0307 	and.w	r3, r3, #7
 8009f1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8009f22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009f26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009f32:	e003      	b.n	8009f3c <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009f34:	4b06      	ldr	r3, [pc, #24]	@ (8009f50 <HAL_RCC_GetSysClockFreq+0x458>)
 8009f36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009f3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009f3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	37b8      	adds	r7, #184	@ 0xb8
 8009f44:	46bd      	mov	sp, r7
 8009f46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f4a:	bf00      	nop
 8009f4c:	40023800 	.word	0x40023800
 8009f50:	00f42400 	.word	0x00f42400

08009f54 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b086      	sub	sp, #24
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d101      	bne.n	8009f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009f62:	2301      	movs	r3, #1
 8009f64:	e28d      	b.n	800a482 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f003 0301 	and.w	r3, r3, #1
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	f000 8083 	beq.w	800a07a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009f74:	4b94      	ldr	r3, [pc, #592]	@ (800a1c8 <HAL_RCC_OscConfig+0x274>)
 8009f76:	689b      	ldr	r3, [r3, #8]
 8009f78:	f003 030c 	and.w	r3, r3, #12
 8009f7c:	2b04      	cmp	r3, #4
 8009f7e:	d019      	beq.n	8009fb4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009f80:	4b91      	ldr	r3, [pc, #580]	@ (800a1c8 <HAL_RCC_OscConfig+0x274>)
 8009f82:	689b      	ldr	r3, [r3, #8]
 8009f84:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009f88:	2b08      	cmp	r3, #8
 8009f8a:	d106      	bne.n	8009f9a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009f8c:	4b8e      	ldr	r3, [pc, #568]	@ (800a1c8 <HAL_RCC_OscConfig+0x274>)
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009f98:	d00c      	beq.n	8009fb4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009f9a:	4b8b      	ldr	r3, [pc, #556]	@ (800a1c8 <HAL_RCC_OscConfig+0x274>)
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009fa2:	2b0c      	cmp	r3, #12
 8009fa4:	d112      	bne.n	8009fcc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009fa6:	4b88      	ldr	r3, [pc, #544]	@ (800a1c8 <HAL_RCC_OscConfig+0x274>)
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009fae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009fb2:	d10b      	bne.n	8009fcc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009fb4:	4b84      	ldr	r3, [pc, #528]	@ (800a1c8 <HAL_RCC_OscConfig+0x274>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d05b      	beq.n	800a078 <HAL_RCC_OscConfig+0x124>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d157      	bne.n	800a078 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	e25a      	b.n	800a482 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fd4:	d106      	bne.n	8009fe4 <HAL_RCC_OscConfig+0x90>
 8009fd6:	4b7c      	ldr	r3, [pc, #496]	@ (800a1c8 <HAL_RCC_OscConfig+0x274>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a7b      	ldr	r2, [pc, #492]	@ (800a1c8 <HAL_RCC_OscConfig+0x274>)
 8009fdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009fe0:	6013      	str	r3, [r2, #0]
 8009fe2:	e01d      	b.n	800a020 <HAL_RCC_OscConfig+0xcc>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009fec:	d10c      	bne.n	800a008 <HAL_RCC_OscConfig+0xb4>
 8009fee:	4b76      	ldr	r3, [pc, #472]	@ (800a1c8 <HAL_RCC_OscConfig+0x274>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4a75      	ldr	r2, [pc, #468]	@ (800a1c8 <HAL_RCC_OscConfig+0x274>)
 8009ff4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009ff8:	6013      	str	r3, [r2, #0]
 8009ffa:	4b73      	ldr	r3, [pc, #460]	@ (800a1c8 <HAL_RCC_OscConfig+0x274>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a72      	ldr	r2, [pc, #456]	@ (800a1c8 <HAL_RCC_OscConfig+0x274>)
 800a000:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a004:	6013      	str	r3, [r2, #0]
 800a006:	e00b      	b.n	800a020 <HAL_RCC_OscConfig+0xcc>
 800a008:	4b6f      	ldr	r3, [pc, #444]	@ (800a1c8 <HAL_RCC_OscConfig+0x274>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4a6e      	ldr	r2, [pc, #440]	@ (800a1c8 <HAL_RCC_OscConfig+0x274>)
 800a00e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a012:	6013      	str	r3, [r2, #0]
 800a014:	4b6c      	ldr	r3, [pc, #432]	@ (800a1c8 <HAL_RCC_OscConfig+0x274>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4a6b      	ldr	r2, [pc, #428]	@ (800a1c8 <HAL_RCC_OscConfig+0x274>)
 800a01a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a01e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d013      	beq.n	800a050 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a028:	f7fa fc48 	bl	80048bc <HAL_GetTick>
 800a02c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a02e:	e008      	b.n	800a042 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a030:	f7fa fc44 	bl	80048bc <HAL_GetTick>
 800a034:	4602      	mov	r2, r0
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	1ad3      	subs	r3, r2, r3
 800a03a:	2b64      	cmp	r3, #100	@ 0x64
 800a03c:	d901      	bls.n	800a042 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800a03e:	2303      	movs	r3, #3
 800a040:	e21f      	b.n	800a482 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a042:	4b61      	ldr	r3, [pc, #388]	@ (800a1c8 <HAL_RCC_OscConfig+0x274>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d0f0      	beq.n	800a030 <HAL_RCC_OscConfig+0xdc>
 800a04e:	e014      	b.n	800a07a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a050:	f7fa fc34 	bl	80048bc <HAL_GetTick>
 800a054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a056:	e008      	b.n	800a06a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a058:	f7fa fc30 	bl	80048bc <HAL_GetTick>
 800a05c:	4602      	mov	r2, r0
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	1ad3      	subs	r3, r2, r3
 800a062:	2b64      	cmp	r3, #100	@ 0x64
 800a064:	d901      	bls.n	800a06a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800a066:	2303      	movs	r3, #3
 800a068:	e20b      	b.n	800a482 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a06a:	4b57      	ldr	r3, [pc, #348]	@ (800a1c8 <HAL_RCC_OscConfig+0x274>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a072:	2b00      	cmp	r3, #0
 800a074:	d1f0      	bne.n	800a058 <HAL_RCC_OscConfig+0x104>
 800a076:	e000      	b.n	800a07a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f003 0302 	and.w	r3, r3, #2
 800a082:	2b00      	cmp	r3, #0
 800a084:	d06f      	beq.n	800a166 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a086:	4b50      	ldr	r3, [pc, #320]	@ (800a1c8 <HAL_RCC_OscConfig+0x274>)
 800a088:	689b      	ldr	r3, [r3, #8]
 800a08a:	f003 030c 	and.w	r3, r3, #12
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d017      	beq.n	800a0c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800a092:	4b4d      	ldr	r3, [pc, #308]	@ (800a1c8 <HAL_RCC_OscConfig+0x274>)
 800a094:	689b      	ldr	r3, [r3, #8]
 800a096:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a09a:	2b08      	cmp	r3, #8
 800a09c:	d105      	bne.n	800a0aa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800a09e:	4b4a      	ldr	r3, [pc, #296]	@ (800a1c8 <HAL_RCC_OscConfig+0x274>)
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d00b      	beq.n	800a0c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a0aa:	4b47      	ldr	r3, [pc, #284]	@ (800a1c8 <HAL_RCC_OscConfig+0x274>)
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800a0b2:	2b0c      	cmp	r3, #12
 800a0b4:	d11c      	bne.n	800a0f0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a0b6:	4b44      	ldr	r3, [pc, #272]	@ (800a1c8 <HAL_RCC_OscConfig+0x274>)
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d116      	bne.n	800a0f0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a0c2:	4b41      	ldr	r3, [pc, #260]	@ (800a1c8 <HAL_RCC_OscConfig+0x274>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f003 0302 	and.w	r3, r3, #2
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d005      	beq.n	800a0da <HAL_RCC_OscConfig+0x186>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	68db      	ldr	r3, [r3, #12]
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	d001      	beq.n	800a0da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e1d3      	b.n	800a482 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0da:	4b3b      	ldr	r3, [pc, #236]	@ (800a1c8 <HAL_RCC_OscConfig+0x274>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	691b      	ldr	r3, [r3, #16]
 800a0e6:	00db      	lsls	r3, r3, #3
 800a0e8:	4937      	ldr	r1, [pc, #220]	@ (800a1c8 <HAL_RCC_OscConfig+0x274>)
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a0ee:	e03a      	b.n	800a166 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	68db      	ldr	r3, [r3, #12]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d020      	beq.n	800a13a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a0f8:	4b34      	ldr	r3, [pc, #208]	@ (800a1cc <HAL_RCC_OscConfig+0x278>)
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0fe:	f7fa fbdd 	bl	80048bc <HAL_GetTick>
 800a102:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a104:	e008      	b.n	800a118 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a106:	f7fa fbd9 	bl	80048bc <HAL_GetTick>
 800a10a:	4602      	mov	r2, r0
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	1ad3      	subs	r3, r2, r3
 800a110:	2b02      	cmp	r3, #2
 800a112:	d901      	bls.n	800a118 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800a114:	2303      	movs	r3, #3
 800a116:	e1b4      	b.n	800a482 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a118:	4b2b      	ldr	r3, [pc, #172]	@ (800a1c8 <HAL_RCC_OscConfig+0x274>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f003 0302 	and.w	r3, r3, #2
 800a120:	2b00      	cmp	r3, #0
 800a122:	d0f0      	beq.n	800a106 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a124:	4b28      	ldr	r3, [pc, #160]	@ (800a1c8 <HAL_RCC_OscConfig+0x274>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	691b      	ldr	r3, [r3, #16]
 800a130:	00db      	lsls	r3, r3, #3
 800a132:	4925      	ldr	r1, [pc, #148]	@ (800a1c8 <HAL_RCC_OscConfig+0x274>)
 800a134:	4313      	orrs	r3, r2
 800a136:	600b      	str	r3, [r1, #0]
 800a138:	e015      	b.n	800a166 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a13a:	4b24      	ldr	r3, [pc, #144]	@ (800a1cc <HAL_RCC_OscConfig+0x278>)
 800a13c:	2200      	movs	r2, #0
 800a13e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a140:	f7fa fbbc 	bl	80048bc <HAL_GetTick>
 800a144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a146:	e008      	b.n	800a15a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a148:	f7fa fbb8 	bl	80048bc <HAL_GetTick>
 800a14c:	4602      	mov	r2, r0
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	1ad3      	subs	r3, r2, r3
 800a152:	2b02      	cmp	r3, #2
 800a154:	d901      	bls.n	800a15a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a156:	2303      	movs	r3, #3
 800a158:	e193      	b.n	800a482 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a15a:	4b1b      	ldr	r3, [pc, #108]	@ (800a1c8 <HAL_RCC_OscConfig+0x274>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f003 0302 	and.w	r3, r3, #2
 800a162:	2b00      	cmp	r3, #0
 800a164:	d1f0      	bne.n	800a148 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f003 0308 	and.w	r3, r3, #8
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d036      	beq.n	800a1e0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	695b      	ldr	r3, [r3, #20]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d016      	beq.n	800a1a8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a17a:	4b15      	ldr	r3, [pc, #84]	@ (800a1d0 <HAL_RCC_OscConfig+0x27c>)
 800a17c:	2201      	movs	r2, #1
 800a17e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a180:	f7fa fb9c 	bl	80048bc <HAL_GetTick>
 800a184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a186:	e008      	b.n	800a19a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a188:	f7fa fb98 	bl	80048bc <HAL_GetTick>
 800a18c:	4602      	mov	r2, r0
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	1ad3      	subs	r3, r2, r3
 800a192:	2b02      	cmp	r3, #2
 800a194:	d901      	bls.n	800a19a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800a196:	2303      	movs	r3, #3
 800a198:	e173      	b.n	800a482 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a19a:	4b0b      	ldr	r3, [pc, #44]	@ (800a1c8 <HAL_RCC_OscConfig+0x274>)
 800a19c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a19e:	f003 0302 	and.w	r3, r3, #2
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d0f0      	beq.n	800a188 <HAL_RCC_OscConfig+0x234>
 800a1a6:	e01b      	b.n	800a1e0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a1a8:	4b09      	ldr	r3, [pc, #36]	@ (800a1d0 <HAL_RCC_OscConfig+0x27c>)
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1ae:	f7fa fb85 	bl	80048bc <HAL_GetTick>
 800a1b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a1b4:	e00e      	b.n	800a1d4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a1b6:	f7fa fb81 	bl	80048bc <HAL_GetTick>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	1ad3      	subs	r3, r2, r3
 800a1c0:	2b02      	cmp	r3, #2
 800a1c2:	d907      	bls.n	800a1d4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800a1c4:	2303      	movs	r3, #3
 800a1c6:	e15c      	b.n	800a482 <HAL_RCC_OscConfig+0x52e>
 800a1c8:	40023800 	.word	0x40023800
 800a1cc:	42470000 	.word	0x42470000
 800a1d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a1d4:	4b8a      	ldr	r3, [pc, #552]	@ (800a400 <HAL_RCC_OscConfig+0x4ac>)
 800a1d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1d8:	f003 0302 	and.w	r3, r3, #2
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d1ea      	bne.n	800a1b6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f003 0304 	and.w	r3, r3, #4
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	f000 8097 	beq.w	800a31c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a1f2:	4b83      	ldr	r3, [pc, #524]	@ (800a400 <HAL_RCC_OscConfig+0x4ac>)
 800a1f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d10f      	bne.n	800a21e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a1fe:	2300      	movs	r3, #0
 800a200:	60bb      	str	r3, [r7, #8]
 800a202:	4b7f      	ldr	r3, [pc, #508]	@ (800a400 <HAL_RCC_OscConfig+0x4ac>)
 800a204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a206:	4a7e      	ldr	r2, [pc, #504]	@ (800a400 <HAL_RCC_OscConfig+0x4ac>)
 800a208:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a20c:	6413      	str	r3, [r2, #64]	@ 0x40
 800a20e:	4b7c      	ldr	r3, [pc, #496]	@ (800a400 <HAL_RCC_OscConfig+0x4ac>)
 800a210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a216:	60bb      	str	r3, [r7, #8]
 800a218:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a21a:	2301      	movs	r3, #1
 800a21c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a21e:	4b79      	ldr	r3, [pc, #484]	@ (800a404 <HAL_RCC_OscConfig+0x4b0>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a226:	2b00      	cmp	r3, #0
 800a228:	d118      	bne.n	800a25c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a22a:	4b76      	ldr	r3, [pc, #472]	@ (800a404 <HAL_RCC_OscConfig+0x4b0>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4a75      	ldr	r2, [pc, #468]	@ (800a404 <HAL_RCC_OscConfig+0x4b0>)
 800a230:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a234:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a236:	f7fa fb41 	bl	80048bc <HAL_GetTick>
 800a23a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a23c:	e008      	b.n	800a250 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a23e:	f7fa fb3d 	bl	80048bc <HAL_GetTick>
 800a242:	4602      	mov	r2, r0
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	1ad3      	subs	r3, r2, r3
 800a248:	2b02      	cmp	r3, #2
 800a24a:	d901      	bls.n	800a250 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800a24c:	2303      	movs	r3, #3
 800a24e:	e118      	b.n	800a482 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a250:	4b6c      	ldr	r3, [pc, #432]	@ (800a404 <HAL_RCC_OscConfig+0x4b0>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d0f0      	beq.n	800a23e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	689b      	ldr	r3, [r3, #8]
 800a260:	2b01      	cmp	r3, #1
 800a262:	d106      	bne.n	800a272 <HAL_RCC_OscConfig+0x31e>
 800a264:	4b66      	ldr	r3, [pc, #408]	@ (800a400 <HAL_RCC_OscConfig+0x4ac>)
 800a266:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a268:	4a65      	ldr	r2, [pc, #404]	@ (800a400 <HAL_RCC_OscConfig+0x4ac>)
 800a26a:	f043 0301 	orr.w	r3, r3, #1
 800a26e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a270:	e01c      	b.n	800a2ac <HAL_RCC_OscConfig+0x358>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	2b05      	cmp	r3, #5
 800a278:	d10c      	bne.n	800a294 <HAL_RCC_OscConfig+0x340>
 800a27a:	4b61      	ldr	r3, [pc, #388]	@ (800a400 <HAL_RCC_OscConfig+0x4ac>)
 800a27c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a27e:	4a60      	ldr	r2, [pc, #384]	@ (800a400 <HAL_RCC_OscConfig+0x4ac>)
 800a280:	f043 0304 	orr.w	r3, r3, #4
 800a284:	6713      	str	r3, [r2, #112]	@ 0x70
 800a286:	4b5e      	ldr	r3, [pc, #376]	@ (800a400 <HAL_RCC_OscConfig+0x4ac>)
 800a288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a28a:	4a5d      	ldr	r2, [pc, #372]	@ (800a400 <HAL_RCC_OscConfig+0x4ac>)
 800a28c:	f043 0301 	orr.w	r3, r3, #1
 800a290:	6713      	str	r3, [r2, #112]	@ 0x70
 800a292:	e00b      	b.n	800a2ac <HAL_RCC_OscConfig+0x358>
 800a294:	4b5a      	ldr	r3, [pc, #360]	@ (800a400 <HAL_RCC_OscConfig+0x4ac>)
 800a296:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a298:	4a59      	ldr	r2, [pc, #356]	@ (800a400 <HAL_RCC_OscConfig+0x4ac>)
 800a29a:	f023 0301 	bic.w	r3, r3, #1
 800a29e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a2a0:	4b57      	ldr	r3, [pc, #348]	@ (800a400 <HAL_RCC_OscConfig+0x4ac>)
 800a2a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2a4:	4a56      	ldr	r2, [pc, #344]	@ (800a400 <HAL_RCC_OscConfig+0x4ac>)
 800a2a6:	f023 0304 	bic.w	r3, r3, #4
 800a2aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	689b      	ldr	r3, [r3, #8]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d015      	beq.n	800a2e0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2b4:	f7fa fb02 	bl	80048bc <HAL_GetTick>
 800a2b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a2ba:	e00a      	b.n	800a2d2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a2bc:	f7fa fafe 	bl	80048bc <HAL_GetTick>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	1ad3      	subs	r3, r2, r3
 800a2c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d901      	bls.n	800a2d2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800a2ce:	2303      	movs	r3, #3
 800a2d0:	e0d7      	b.n	800a482 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a2d2:	4b4b      	ldr	r3, [pc, #300]	@ (800a400 <HAL_RCC_OscConfig+0x4ac>)
 800a2d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2d6:	f003 0302 	and.w	r3, r3, #2
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d0ee      	beq.n	800a2bc <HAL_RCC_OscConfig+0x368>
 800a2de:	e014      	b.n	800a30a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2e0:	f7fa faec 	bl	80048bc <HAL_GetTick>
 800a2e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a2e6:	e00a      	b.n	800a2fe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a2e8:	f7fa fae8 	bl	80048bc <HAL_GetTick>
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	1ad3      	subs	r3, r2, r3
 800a2f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d901      	bls.n	800a2fe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800a2fa:	2303      	movs	r3, #3
 800a2fc:	e0c1      	b.n	800a482 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a2fe:	4b40      	ldr	r3, [pc, #256]	@ (800a400 <HAL_RCC_OscConfig+0x4ac>)
 800a300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a302:	f003 0302 	and.w	r3, r3, #2
 800a306:	2b00      	cmp	r3, #0
 800a308:	d1ee      	bne.n	800a2e8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a30a:	7dfb      	ldrb	r3, [r7, #23]
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d105      	bne.n	800a31c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a310:	4b3b      	ldr	r3, [pc, #236]	@ (800a400 <HAL_RCC_OscConfig+0x4ac>)
 800a312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a314:	4a3a      	ldr	r2, [pc, #232]	@ (800a400 <HAL_RCC_OscConfig+0x4ac>)
 800a316:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a31a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	699b      	ldr	r3, [r3, #24]
 800a320:	2b00      	cmp	r3, #0
 800a322:	f000 80ad 	beq.w	800a480 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a326:	4b36      	ldr	r3, [pc, #216]	@ (800a400 <HAL_RCC_OscConfig+0x4ac>)
 800a328:	689b      	ldr	r3, [r3, #8]
 800a32a:	f003 030c 	and.w	r3, r3, #12
 800a32e:	2b08      	cmp	r3, #8
 800a330:	d060      	beq.n	800a3f4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	699b      	ldr	r3, [r3, #24]
 800a336:	2b02      	cmp	r3, #2
 800a338:	d145      	bne.n	800a3c6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a33a:	4b33      	ldr	r3, [pc, #204]	@ (800a408 <HAL_RCC_OscConfig+0x4b4>)
 800a33c:	2200      	movs	r2, #0
 800a33e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a340:	f7fa fabc 	bl	80048bc <HAL_GetTick>
 800a344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a346:	e008      	b.n	800a35a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a348:	f7fa fab8 	bl	80048bc <HAL_GetTick>
 800a34c:	4602      	mov	r2, r0
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	1ad3      	subs	r3, r2, r3
 800a352:	2b02      	cmp	r3, #2
 800a354:	d901      	bls.n	800a35a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800a356:	2303      	movs	r3, #3
 800a358:	e093      	b.n	800a482 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a35a:	4b29      	ldr	r3, [pc, #164]	@ (800a400 <HAL_RCC_OscConfig+0x4ac>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a362:	2b00      	cmp	r3, #0
 800a364:	d1f0      	bne.n	800a348 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	69da      	ldr	r2, [r3, #28]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6a1b      	ldr	r3, [r3, #32]
 800a36e:	431a      	orrs	r2, r3
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a374:	019b      	lsls	r3, r3, #6
 800a376:	431a      	orrs	r2, r3
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a37c:	085b      	lsrs	r3, r3, #1
 800a37e:	3b01      	subs	r3, #1
 800a380:	041b      	lsls	r3, r3, #16
 800a382:	431a      	orrs	r2, r3
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a388:	061b      	lsls	r3, r3, #24
 800a38a:	431a      	orrs	r2, r3
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a390:	071b      	lsls	r3, r3, #28
 800a392:	491b      	ldr	r1, [pc, #108]	@ (800a400 <HAL_RCC_OscConfig+0x4ac>)
 800a394:	4313      	orrs	r3, r2
 800a396:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a398:	4b1b      	ldr	r3, [pc, #108]	@ (800a408 <HAL_RCC_OscConfig+0x4b4>)
 800a39a:	2201      	movs	r2, #1
 800a39c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a39e:	f7fa fa8d 	bl	80048bc <HAL_GetTick>
 800a3a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a3a4:	e008      	b.n	800a3b8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a3a6:	f7fa fa89 	bl	80048bc <HAL_GetTick>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	1ad3      	subs	r3, r2, r3
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	d901      	bls.n	800a3b8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800a3b4:	2303      	movs	r3, #3
 800a3b6:	e064      	b.n	800a482 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a3b8:	4b11      	ldr	r3, [pc, #68]	@ (800a400 <HAL_RCC_OscConfig+0x4ac>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d0f0      	beq.n	800a3a6 <HAL_RCC_OscConfig+0x452>
 800a3c4:	e05c      	b.n	800a480 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a3c6:	4b10      	ldr	r3, [pc, #64]	@ (800a408 <HAL_RCC_OscConfig+0x4b4>)
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3cc:	f7fa fa76 	bl	80048bc <HAL_GetTick>
 800a3d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a3d2:	e008      	b.n	800a3e6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a3d4:	f7fa fa72 	bl	80048bc <HAL_GetTick>
 800a3d8:	4602      	mov	r2, r0
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	1ad3      	subs	r3, r2, r3
 800a3de:	2b02      	cmp	r3, #2
 800a3e0:	d901      	bls.n	800a3e6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800a3e2:	2303      	movs	r3, #3
 800a3e4:	e04d      	b.n	800a482 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a3e6:	4b06      	ldr	r3, [pc, #24]	@ (800a400 <HAL_RCC_OscConfig+0x4ac>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d1f0      	bne.n	800a3d4 <HAL_RCC_OscConfig+0x480>
 800a3f2:	e045      	b.n	800a480 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	699b      	ldr	r3, [r3, #24]
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d107      	bne.n	800a40c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e040      	b.n	800a482 <HAL_RCC_OscConfig+0x52e>
 800a400:	40023800 	.word	0x40023800
 800a404:	40007000 	.word	0x40007000
 800a408:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a40c:	4b1f      	ldr	r3, [pc, #124]	@ (800a48c <HAL_RCC_OscConfig+0x538>)
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	699b      	ldr	r3, [r3, #24]
 800a416:	2b01      	cmp	r3, #1
 800a418:	d030      	beq.n	800a47c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a424:	429a      	cmp	r2, r3
 800a426:	d129      	bne.n	800a47c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a432:	429a      	cmp	r2, r3
 800a434:	d122      	bne.n	800a47c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a436:	68fa      	ldr	r2, [r7, #12]
 800a438:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a43c:	4013      	ands	r3, r2
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a442:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a444:	4293      	cmp	r3, r2
 800a446:	d119      	bne.n	800a47c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a452:	085b      	lsrs	r3, r3, #1
 800a454:	3b01      	subs	r3, #1
 800a456:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a458:	429a      	cmp	r2, r3
 800a45a:	d10f      	bne.n	800a47c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a466:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a468:	429a      	cmp	r2, r3
 800a46a:	d107      	bne.n	800a47c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a476:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a478:	429a      	cmp	r2, r3
 800a47a:	d001      	beq.n	800a480 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800a47c:	2301      	movs	r3, #1
 800a47e:	e000      	b.n	800a482 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800a480:	2300      	movs	r3, #0
}
 800a482:	4618      	mov	r0, r3
 800a484:	3718      	adds	r7, #24
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}
 800a48a:	bf00      	nop
 800a48c:	40023800 	.word	0x40023800

0800a490 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b082      	sub	sp, #8
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d101      	bne.n	800a4a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e07b      	b.n	800a59a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d108      	bne.n	800a4bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a4b2:	d009      	beq.n	800a4c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	61da      	str	r2, [r3, #28]
 800a4ba:	e005      	b.n	800a4c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a4d4:	b2db      	uxtb	r3, r3
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d106      	bne.n	800a4e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f7f9 fd9e 	bl	8004024 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2202      	movs	r2, #2
 800a4ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	681a      	ldr	r2, [r3, #0]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a4fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	689b      	ldr	r3, [r3, #8]
 800a50c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a510:	431a      	orrs	r2, r3
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	68db      	ldr	r3, [r3, #12]
 800a516:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a51a:	431a      	orrs	r2, r3
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	691b      	ldr	r3, [r3, #16]
 800a520:	f003 0302 	and.w	r3, r3, #2
 800a524:	431a      	orrs	r2, r3
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	695b      	ldr	r3, [r3, #20]
 800a52a:	f003 0301 	and.w	r3, r3, #1
 800a52e:	431a      	orrs	r2, r3
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	699b      	ldr	r3, [r3, #24]
 800a534:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a538:	431a      	orrs	r2, r3
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	69db      	ldr	r3, [r3, #28]
 800a53e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a542:	431a      	orrs	r2, r3
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6a1b      	ldr	r3, [r3, #32]
 800a548:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a54c:	ea42 0103 	orr.w	r1, r2, r3
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a554:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	430a      	orrs	r2, r1
 800a55e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	699b      	ldr	r3, [r3, #24]
 800a564:	0c1b      	lsrs	r3, r3, #16
 800a566:	f003 0104 	and.w	r1, r3, #4
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a56e:	f003 0210 	and.w	r2, r3, #16
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	430a      	orrs	r2, r1
 800a578:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	69da      	ldr	r2, [r3, #28]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a588:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2200      	movs	r2, #0
 800a58e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2201      	movs	r2, #1
 800a594:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800a598:	2300      	movs	r3, #0
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3708      	adds	r7, #8
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}

0800a5a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a5a2:	b580      	push	{r7, lr}
 800a5a4:	b088      	sub	sp, #32
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	60f8      	str	r0, [r7, #12]
 800a5aa:	60b9      	str	r1, [r7, #8]
 800a5ac:	603b      	str	r3, [r7, #0]
 800a5ae:	4613      	mov	r3, r2
 800a5b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d101      	bne.n	800a5c4 <HAL_SPI_Transmit+0x22>
 800a5c0:	2302      	movs	r3, #2
 800a5c2:	e126      	b.n	800a812 <HAL_SPI_Transmit+0x270>
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a5cc:	f7fa f976 	bl	80048bc <HAL_GetTick>
 800a5d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a5d2:	88fb      	ldrh	r3, [r7, #6]
 800a5d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d002      	beq.n	800a5e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a5e2:	2302      	movs	r3, #2
 800a5e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a5e6:	e10b      	b.n	800a800 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d002      	beq.n	800a5f4 <HAL_SPI_Transmit+0x52>
 800a5ee:	88fb      	ldrh	r3, [r7, #6]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d102      	bne.n	800a5fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a5f8:	e102      	b.n	800a800 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	2203      	movs	r2, #3
 800a5fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2200      	movs	r2, #0
 800a606:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	68ba      	ldr	r2, [r7, #8]
 800a60c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	88fa      	ldrh	r2, [r7, #6]
 800a612:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	88fa      	ldrh	r2, [r7, #6]
 800a618:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2200      	movs	r2, #0
 800a61e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2200      	movs	r2, #0
 800a624:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2200      	movs	r2, #0
 800a62a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2200      	movs	r2, #0
 800a630:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2200      	movs	r2, #0
 800a636:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	689b      	ldr	r3, [r3, #8]
 800a63c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a640:	d10f      	bne.n	800a662 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	681a      	ldr	r2, [r3, #0]
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a650:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	681a      	ldr	r2, [r3, #0]
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a660:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a66c:	2b40      	cmp	r3, #64	@ 0x40
 800a66e:	d007      	beq.n	800a680 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a67e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	68db      	ldr	r3, [r3, #12]
 800a684:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a688:	d14b      	bne.n	800a722 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d002      	beq.n	800a698 <HAL_SPI_Transmit+0xf6>
 800a692:	8afb      	ldrh	r3, [r7, #22]
 800a694:	2b01      	cmp	r3, #1
 800a696:	d13e      	bne.n	800a716 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a69c:	881a      	ldrh	r2, [r3, #0]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6a8:	1c9a      	adds	r2, r3, #2
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	3b01      	subs	r3, #1
 800a6b6:	b29a      	uxth	r2, r3
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a6bc:	e02b      	b.n	800a716 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	689b      	ldr	r3, [r3, #8]
 800a6c4:	f003 0302 	and.w	r3, r3, #2
 800a6c8:	2b02      	cmp	r3, #2
 800a6ca:	d112      	bne.n	800a6f2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6d0:	881a      	ldrh	r2, [r3, #0]
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6dc:	1c9a      	adds	r2, r3, #2
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	3b01      	subs	r3, #1
 800a6ea:	b29a      	uxth	r2, r3
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	86da      	strh	r2, [r3, #54]	@ 0x36
 800a6f0:	e011      	b.n	800a716 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a6f2:	f7fa f8e3 	bl	80048bc <HAL_GetTick>
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	69bb      	ldr	r3, [r7, #24]
 800a6fa:	1ad3      	subs	r3, r2, r3
 800a6fc:	683a      	ldr	r2, [r7, #0]
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d803      	bhi.n	800a70a <HAL_SPI_Transmit+0x168>
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a708:	d102      	bne.n	800a710 <HAL_SPI_Transmit+0x16e>
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d102      	bne.n	800a716 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800a710:	2303      	movs	r3, #3
 800a712:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a714:	e074      	b.n	800a800 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a71a:	b29b      	uxth	r3, r3
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d1ce      	bne.n	800a6be <HAL_SPI_Transmit+0x11c>
 800a720:	e04c      	b.n	800a7bc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d002      	beq.n	800a730 <HAL_SPI_Transmit+0x18e>
 800a72a:	8afb      	ldrh	r3, [r7, #22]
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d140      	bne.n	800a7b2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	330c      	adds	r3, #12
 800a73a:	7812      	ldrb	r2, [r2, #0]
 800a73c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a742:	1c5a      	adds	r2, r3, #1
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a74c:	b29b      	uxth	r3, r3
 800a74e:	3b01      	subs	r3, #1
 800a750:	b29a      	uxth	r2, r3
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a756:	e02c      	b.n	800a7b2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	689b      	ldr	r3, [r3, #8]
 800a75e:	f003 0302 	and.w	r3, r3, #2
 800a762:	2b02      	cmp	r3, #2
 800a764:	d113      	bne.n	800a78e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	330c      	adds	r3, #12
 800a770:	7812      	ldrb	r2, [r2, #0]
 800a772:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a778:	1c5a      	adds	r2, r3, #1
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a782:	b29b      	uxth	r3, r3
 800a784:	3b01      	subs	r3, #1
 800a786:	b29a      	uxth	r2, r3
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800a78c:	e011      	b.n	800a7b2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a78e:	f7fa f895 	bl	80048bc <HAL_GetTick>
 800a792:	4602      	mov	r2, r0
 800a794:	69bb      	ldr	r3, [r7, #24]
 800a796:	1ad3      	subs	r3, r2, r3
 800a798:	683a      	ldr	r2, [r7, #0]
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d803      	bhi.n	800a7a6 <HAL_SPI_Transmit+0x204>
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7a4:	d102      	bne.n	800a7ac <HAL_SPI_Transmit+0x20a>
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d102      	bne.n	800a7b2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800a7ac:	2303      	movs	r3, #3
 800a7ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a7b0:	e026      	b.n	800a800 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a7b6:	b29b      	uxth	r3, r3
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d1cd      	bne.n	800a758 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a7bc:	69ba      	ldr	r2, [r7, #24]
 800a7be:	6839      	ldr	r1, [r7, #0]
 800a7c0:	68f8      	ldr	r0, [r7, #12]
 800a7c2:	f000 fa55 	bl	800ac70 <SPI_EndRxTxTransaction>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d002      	beq.n	800a7d2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2220      	movs	r2, #32
 800a7d0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	689b      	ldr	r3, [r3, #8]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d10a      	bne.n	800a7f0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a7da:	2300      	movs	r3, #0
 800a7dc:	613b      	str	r3, [r7, #16]
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	613b      	str	r3, [r7, #16]
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	689b      	ldr	r3, [r3, #8]
 800a7ec:	613b      	str	r3, [r7, #16]
 800a7ee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d002      	beq.n	800a7fe <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	77fb      	strb	r3, [r7, #31]
 800a7fc:	e000      	b.n	800a800 <HAL_SPI_Transmit+0x25e>
  }

error:
 800a7fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2201      	movs	r2, #1
 800a804:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2200      	movs	r2, #0
 800a80c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800a810:	7ffb      	ldrb	r3, [r7, #31]
}
 800a812:	4618      	mov	r0, r3
 800a814:	3720      	adds	r7, #32
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}

0800a81a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a81a:	b580      	push	{r7, lr}
 800a81c:	b08c      	sub	sp, #48	@ 0x30
 800a81e:	af00      	add	r7, sp, #0
 800a820:	60f8      	str	r0, [r7, #12]
 800a822:	60b9      	str	r1, [r7, #8]
 800a824:	607a      	str	r2, [r7, #4]
 800a826:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a828:	2301      	movs	r3, #1
 800a82a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a82c:	2300      	movs	r3, #0
 800a82e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d101      	bne.n	800a840 <HAL_SPI_TransmitReceive+0x26>
 800a83c:	2302      	movs	r3, #2
 800a83e:	e18a      	b.n	800ab56 <HAL_SPI_TransmitReceive+0x33c>
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2201      	movs	r2, #1
 800a844:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a848:	f7fa f838 	bl	80048bc <HAL_GetTick>
 800a84c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a854:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a85e:	887b      	ldrh	r3, [r7, #2]
 800a860:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a862:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a866:	2b01      	cmp	r3, #1
 800a868:	d00f      	beq.n	800a88a <HAL_SPI_TransmitReceive+0x70>
 800a86a:	69fb      	ldr	r3, [r7, #28]
 800a86c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a870:	d107      	bne.n	800a882 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	689b      	ldr	r3, [r3, #8]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d103      	bne.n	800a882 <HAL_SPI_TransmitReceive+0x68>
 800a87a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a87e:	2b04      	cmp	r3, #4
 800a880:	d003      	beq.n	800a88a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a882:	2302      	movs	r3, #2
 800a884:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800a888:	e15b      	b.n	800ab42 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d005      	beq.n	800a89c <HAL_SPI_TransmitReceive+0x82>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d002      	beq.n	800a89c <HAL_SPI_TransmitReceive+0x82>
 800a896:	887b      	ldrh	r3, [r7, #2]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d103      	bne.n	800a8a4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a89c:	2301      	movs	r3, #1
 800a89e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800a8a2:	e14e      	b.n	800ab42 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a8aa:	b2db      	uxtb	r3, r3
 800a8ac:	2b04      	cmp	r3, #4
 800a8ae:	d003      	beq.n	800a8b8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2205      	movs	r2, #5
 800a8b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	687a      	ldr	r2, [r7, #4]
 800a8c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	887a      	ldrh	r2, [r7, #2]
 800a8c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	887a      	ldrh	r2, [r7, #2]
 800a8ce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	68ba      	ldr	r2, [r7, #8]
 800a8d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	887a      	ldrh	r2, [r7, #2]
 800a8da:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	887a      	ldrh	r2, [r7, #2]
 800a8e0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8f8:	2b40      	cmp	r3, #64	@ 0x40
 800a8fa:	d007      	beq.n	800a90c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	681a      	ldr	r2, [r3, #0]
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a90a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	68db      	ldr	r3, [r3, #12]
 800a910:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a914:	d178      	bne.n	800aa08 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d002      	beq.n	800a924 <HAL_SPI_TransmitReceive+0x10a>
 800a91e:	8b7b      	ldrh	r3, [r7, #26]
 800a920:	2b01      	cmp	r3, #1
 800a922:	d166      	bne.n	800a9f2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a928:	881a      	ldrh	r2, [r3, #0]
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a934:	1c9a      	adds	r2, r3, #2
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a93e:	b29b      	uxth	r3, r3
 800a940:	3b01      	subs	r3, #1
 800a942:	b29a      	uxth	r2, r3
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a948:	e053      	b.n	800a9f2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	689b      	ldr	r3, [r3, #8]
 800a950:	f003 0302 	and.w	r3, r3, #2
 800a954:	2b02      	cmp	r3, #2
 800a956:	d11b      	bne.n	800a990 <HAL_SPI_TransmitReceive+0x176>
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d016      	beq.n	800a990 <HAL_SPI_TransmitReceive+0x176>
 800a962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a964:	2b01      	cmp	r3, #1
 800a966:	d113      	bne.n	800a990 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a96c:	881a      	ldrh	r2, [r3, #0]
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a978:	1c9a      	adds	r2, r3, #2
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a982:	b29b      	uxth	r3, r3
 800a984:	3b01      	subs	r3, #1
 800a986:	b29a      	uxth	r2, r3
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a98c:	2300      	movs	r3, #0
 800a98e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	689b      	ldr	r3, [r3, #8]
 800a996:	f003 0301 	and.w	r3, r3, #1
 800a99a:	2b01      	cmp	r3, #1
 800a99c:	d119      	bne.n	800a9d2 <HAL_SPI_TransmitReceive+0x1b8>
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a9a2:	b29b      	uxth	r3, r3
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d014      	beq.n	800a9d2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	68da      	ldr	r2, [r3, #12]
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9b2:	b292      	uxth	r2, r2
 800a9b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9ba:	1c9a      	adds	r2, r3, #2
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a9c4:	b29b      	uxth	r3, r3
 800a9c6:	3b01      	subs	r3, #1
 800a9c8:	b29a      	uxth	r2, r3
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a9d2:	f7f9 ff73 	bl	80048bc <HAL_GetTick>
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9da:	1ad3      	subs	r3, r2, r3
 800a9dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d807      	bhi.n	800a9f2 <HAL_SPI_TransmitReceive+0x1d8>
 800a9e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9e8:	d003      	beq.n	800a9f2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a9ea:	2303      	movs	r3, #3
 800a9ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800a9f0:	e0a7      	b.n	800ab42 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d1a6      	bne.n	800a94a <HAL_SPI_TransmitReceive+0x130>
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d1a1      	bne.n	800a94a <HAL_SPI_TransmitReceive+0x130>
 800aa06:	e07c      	b.n	800ab02 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d002      	beq.n	800aa16 <HAL_SPI_TransmitReceive+0x1fc>
 800aa10:	8b7b      	ldrh	r3, [r7, #26]
 800aa12:	2b01      	cmp	r3, #1
 800aa14:	d16b      	bne.n	800aaee <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	330c      	adds	r3, #12
 800aa20:	7812      	ldrb	r2, [r2, #0]
 800aa22:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa28:	1c5a      	adds	r2, r3, #1
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aa32:	b29b      	uxth	r3, r3
 800aa34:	3b01      	subs	r3, #1
 800aa36:	b29a      	uxth	r2, r3
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aa3c:	e057      	b.n	800aaee <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	f003 0302 	and.w	r3, r3, #2
 800aa48:	2b02      	cmp	r3, #2
 800aa4a:	d11c      	bne.n	800aa86 <HAL_SPI_TransmitReceive+0x26c>
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aa50:	b29b      	uxth	r3, r3
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d017      	beq.n	800aa86 <HAL_SPI_TransmitReceive+0x26c>
 800aa56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa58:	2b01      	cmp	r3, #1
 800aa5a:	d114      	bne.n	800aa86 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	330c      	adds	r3, #12
 800aa66:	7812      	ldrb	r2, [r2, #0]
 800aa68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa6e:	1c5a      	adds	r2, r3, #1
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aa78:	b29b      	uxth	r3, r3
 800aa7a:	3b01      	subs	r3, #1
 800aa7c:	b29a      	uxth	r2, r3
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aa82:	2300      	movs	r3, #0
 800aa84:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	689b      	ldr	r3, [r3, #8]
 800aa8c:	f003 0301 	and.w	r3, r3, #1
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d119      	bne.n	800aac8 <HAL_SPI_TransmitReceive+0x2ae>
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aa98:	b29b      	uxth	r3, r3
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d014      	beq.n	800aac8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	68da      	ldr	r2, [r3, #12]
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaa8:	b2d2      	uxtb	r2, r2
 800aaaa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aab0:	1c5a      	adds	r2, r3, #1
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aaba:	b29b      	uxth	r3, r3
 800aabc:	3b01      	subs	r3, #1
 800aabe:	b29a      	uxth	r2, r3
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800aac4:	2301      	movs	r3, #1
 800aac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800aac8:	f7f9 fef8 	bl	80048bc <HAL_GetTick>
 800aacc:	4602      	mov	r2, r0
 800aace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aad0:	1ad3      	subs	r3, r2, r3
 800aad2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d803      	bhi.n	800aae0 <HAL_SPI_TransmitReceive+0x2c6>
 800aad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aada:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aade:	d102      	bne.n	800aae6 <HAL_SPI_TransmitReceive+0x2cc>
 800aae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d103      	bne.n	800aaee <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800aae6:	2303      	movs	r3, #3
 800aae8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800aaec:	e029      	b.n	800ab42 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d1a2      	bne.n	800aa3e <HAL_SPI_TransmitReceive+0x224>
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aafc:	b29b      	uxth	r3, r3
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d19d      	bne.n	800aa3e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ab02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab04:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ab06:	68f8      	ldr	r0, [r7, #12]
 800ab08:	f000 f8b2 	bl	800ac70 <SPI_EndRxTxTransaction>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d006      	beq.n	800ab20 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ab12:	2301      	movs	r3, #1
 800ab14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	2220      	movs	r2, #32
 800ab1c:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800ab1e:	e010      	b.n	800ab42 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	689b      	ldr	r3, [r3, #8]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d10b      	bne.n	800ab40 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ab28:	2300      	movs	r3, #0
 800ab2a:	617b      	str	r3, [r7, #20]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	68db      	ldr	r3, [r3, #12]
 800ab32:	617b      	str	r3, [r7, #20]
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	689b      	ldr	r3, [r3, #8]
 800ab3a:	617b      	str	r3, [r7, #20]
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	e000      	b.n	800ab42 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ab40:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2201      	movs	r2, #1
 800ab46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800ab52:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3730      	adds	r7, #48	@ 0x30
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
	...

0800ab60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b088      	sub	sp, #32
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	60f8      	str	r0, [r7, #12]
 800ab68:	60b9      	str	r1, [r7, #8]
 800ab6a:	603b      	str	r3, [r7, #0]
 800ab6c:	4613      	mov	r3, r2
 800ab6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ab70:	f7f9 fea4 	bl	80048bc <HAL_GetTick>
 800ab74:	4602      	mov	r2, r0
 800ab76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab78:	1a9b      	subs	r3, r3, r2
 800ab7a:	683a      	ldr	r2, [r7, #0]
 800ab7c:	4413      	add	r3, r2
 800ab7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ab80:	f7f9 fe9c 	bl	80048bc <HAL_GetTick>
 800ab84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ab86:	4b39      	ldr	r3, [pc, #228]	@ (800ac6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	015b      	lsls	r3, r3, #5
 800ab8c:	0d1b      	lsrs	r3, r3, #20
 800ab8e:	69fa      	ldr	r2, [r7, #28]
 800ab90:	fb02 f303 	mul.w	r3, r2, r3
 800ab94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ab96:	e054      	b.n	800ac42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab9e:	d050      	beq.n	800ac42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800aba0:	f7f9 fe8c 	bl	80048bc <HAL_GetTick>
 800aba4:	4602      	mov	r2, r0
 800aba6:	69bb      	ldr	r3, [r7, #24]
 800aba8:	1ad3      	subs	r3, r2, r3
 800abaa:	69fa      	ldr	r2, [r7, #28]
 800abac:	429a      	cmp	r2, r3
 800abae:	d902      	bls.n	800abb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800abb0:	69fb      	ldr	r3, [r7, #28]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d13d      	bne.n	800ac32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	685a      	ldr	r2, [r3, #4]
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800abc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800abce:	d111      	bne.n	800abf4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	689b      	ldr	r3, [r3, #8]
 800abd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800abd8:	d004      	beq.n	800abe4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	689b      	ldr	r3, [r3, #8]
 800abde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800abe2:	d107      	bne.n	800abf4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	681a      	ldr	r2, [r3, #0]
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800abf2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800abfc:	d10f      	bne.n	800ac1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	681a      	ldr	r2, [r3, #0]
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ac0c:	601a      	str	r2, [r3, #0]
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	681a      	ldr	r2, [r3, #0]
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ac1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2201      	movs	r2, #1
 800ac22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800ac2e:	2303      	movs	r3, #3
 800ac30:	e017      	b.n	800ac62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d101      	bne.n	800ac3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	3b01      	subs	r3, #1
 800ac40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	689a      	ldr	r2, [r3, #8]
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	4013      	ands	r3, r2
 800ac4c:	68ba      	ldr	r2, [r7, #8]
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	bf0c      	ite	eq
 800ac52:	2301      	moveq	r3, #1
 800ac54:	2300      	movne	r3, #0
 800ac56:	b2db      	uxtb	r3, r3
 800ac58:	461a      	mov	r2, r3
 800ac5a:	79fb      	ldrb	r3, [r7, #7]
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d19b      	bne.n	800ab98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ac60:	2300      	movs	r3, #0
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3720      	adds	r7, #32
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
 800ac6a:	bf00      	nop
 800ac6c:	20000004 	.word	0x20000004

0800ac70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b088      	sub	sp, #32
 800ac74:	af02      	add	r7, sp, #8
 800ac76:	60f8      	str	r0, [r7, #12]
 800ac78:	60b9      	str	r1, [r7, #8]
 800ac7a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ac7c:	4b1b      	ldr	r3, [pc, #108]	@ (800acec <SPI_EndRxTxTransaction+0x7c>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a1b      	ldr	r2, [pc, #108]	@ (800acf0 <SPI_EndRxTxTransaction+0x80>)
 800ac82:	fba2 2303 	umull	r2, r3, r2, r3
 800ac86:	0d5b      	lsrs	r3, r3, #21
 800ac88:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ac8c:	fb02 f303 	mul.w	r3, r2, r3
 800ac90:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ac9a:	d112      	bne.n	800acc2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	9300      	str	r3, [sp, #0]
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	2200      	movs	r2, #0
 800aca4:	2180      	movs	r1, #128	@ 0x80
 800aca6:	68f8      	ldr	r0, [r7, #12]
 800aca8:	f7ff ff5a 	bl	800ab60 <SPI_WaitFlagStateUntilTimeout>
 800acac:	4603      	mov	r3, r0
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d016      	beq.n	800ace0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acb6:	f043 0220 	orr.w	r2, r3, #32
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800acbe:	2303      	movs	r3, #3
 800acc0:	e00f      	b.n	800ace2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d00a      	beq.n	800acde <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	3b01      	subs	r3, #1
 800accc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	689b      	ldr	r3, [r3, #8]
 800acd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acd8:	2b80      	cmp	r3, #128	@ 0x80
 800acda:	d0f2      	beq.n	800acc2 <SPI_EndRxTxTransaction+0x52>
 800acdc:	e000      	b.n	800ace0 <SPI_EndRxTxTransaction+0x70>
        break;
 800acde:	bf00      	nop
  }

  return HAL_OK;
 800ace0:	2300      	movs	r3, #0
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3718      	adds	r7, #24
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
 800acea:	bf00      	nop
 800acec:	20000004 	.word	0x20000004
 800acf0:	165e9f81 	.word	0x165e9f81

0800acf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d101      	bne.n	800ad06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ad02:	2301      	movs	r3, #1
 800ad04:	e041      	b.n	800ad8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ad0c:	b2db      	uxtb	r3, r3
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d106      	bne.n	800ad20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2200      	movs	r2, #0
 800ad16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f7f9 f9ca 	bl	80040b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2202      	movs	r2, #2
 800ad24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	3304      	adds	r3, #4
 800ad30:	4619      	mov	r1, r3
 800ad32:	4610      	mov	r0, r2
 800ad34:	f000 fcd8 	bl	800b6e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2201      	movs	r2, #1
 800ad44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2201      	movs	r2, #1
 800ad54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2201      	movs	r2, #1
 800ad64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2201      	movs	r2, #1
 800ad74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2201      	movs	r2, #1
 800ad84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ad88:	2300      	movs	r3, #0
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3708      	adds	r7, #8
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
	...

0800ad94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b085      	sub	sp, #20
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ada2:	b2db      	uxtb	r3, r3
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	d001      	beq.n	800adac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ada8:	2301      	movs	r3, #1
 800adaa:	e046      	b.n	800ae3a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2202      	movs	r2, #2
 800adb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4a23      	ldr	r2, [pc, #140]	@ (800ae48 <HAL_TIM_Base_Start+0xb4>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d022      	beq.n	800ae04 <HAL_TIM_Base_Start+0x70>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800adc6:	d01d      	beq.n	800ae04 <HAL_TIM_Base_Start+0x70>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4a1f      	ldr	r2, [pc, #124]	@ (800ae4c <HAL_TIM_Base_Start+0xb8>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d018      	beq.n	800ae04 <HAL_TIM_Base_Start+0x70>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4a1e      	ldr	r2, [pc, #120]	@ (800ae50 <HAL_TIM_Base_Start+0xbc>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d013      	beq.n	800ae04 <HAL_TIM_Base_Start+0x70>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a1c      	ldr	r2, [pc, #112]	@ (800ae54 <HAL_TIM_Base_Start+0xc0>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d00e      	beq.n	800ae04 <HAL_TIM_Base_Start+0x70>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4a1b      	ldr	r2, [pc, #108]	@ (800ae58 <HAL_TIM_Base_Start+0xc4>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d009      	beq.n	800ae04 <HAL_TIM_Base_Start+0x70>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4a19      	ldr	r2, [pc, #100]	@ (800ae5c <HAL_TIM_Base_Start+0xc8>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d004      	beq.n	800ae04 <HAL_TIM_Base_Start+0x70>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	4a18      	ldr	r2, [pc, #96]	@ (800ae60 <HAL_TIM_Base_Start+0xcc>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d111      	bne.n	800ae28 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	689b      	ldr	r3, [r3, #8]
 800ae0a:	f003 0307 	and.w	r3, r3, #7
 800ae0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2b06      	cmp	r3, #6
 800ae14:	d010      	beq.n	800ae38 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	681a      	ldr	r2, [r3, #0]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f042 0201 	orr.w	r2, r2, #1
 800ae24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae26:	e007      	b.n	800ae38 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	681a      	ldr	r2, [r3, #0]
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f042 0201 	orr.w	r2, r2, #1
 800ae36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ae38:	2300      	movs	r3, #0
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3714      	adds	r7, #20
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr
 800ae46:	bf00      	nop
 800ae48:	40010000 	.word	0x40010000
 800ae4c:	40000400 	.word	0x40000400
 800ae50:	40000800 	.word	0x40000800
 800ae54:	40000c00 	.word	0x40000c00
 800ae58:	40010400 	.word	0x40010400
 800ae5c:	40014000 	.word	0x40014000
 800ae60:	40001800 	.word	0x40001800

0800ae64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b085      	sub	sp, #20
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae72:	b2db      	uxtb	r3, r3
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d001      	beq.n	800ae7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ae78:	2301      	movs	r3, #1
 800ae7a:	e04e      	b.n	800af1a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2202      	movs	r2, #2
 800ae80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	68da      	ldr	r2, [r3, #12]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f042 0201 	orr.w	r2, r2, #1
 800ae92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	4a23      	ldr	r2, [pc, #140]	@ (800af28 <HAL_TIM_Base_Start_IT+0xc4>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d022      	beq.n	800aee4 <HAL_TIM_Base_Start_IT+0x80>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aea6:	d01d      	beq.n	800aee4 <HAL_TIM_Base_Start_IT+0x80>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	4a1f      	ldr	r2, [pc, #124]	@ (800af2c <HAL_TIM_Base_Start_IT+0xc8>)
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	d018      	beq.n	800aee4 <HAL_TIM_Base_Start_IT+0x80>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	4a1e      	ldr	r2, [pc, #120]	@ (800af30 <HAL_TIM_Base_Start_IT+0xcc>)
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	d013      	beq.n	800aee4 <HAL_TIM_Base_Start_IT+0x80>
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	4a1c      	ldr	r2, [pc, #112]	@ (800af34 <HAL_TIM_Base_Start_IT+0xd0>)
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d00e      	beq.n	800aee4 <HAL_TIM_Base_Start_IT+0x80>
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	4a1b      	ldr	r2, [pc, #108]	@ (800af38 <HAL_TIM_Base_Start_IT+0xd4>)
 800aecc:	4293      	cmp	r3, r2
 800aece:	d009      	beq.n	800aee4 <HAL_TIM_Base_Start_IT+0x80>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	4a19      	ldr	r2, [pc, #100]	@ (800af3c <HAL_TIM_Base_Start_IT+0xd8>)
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d004      	beq.n	800aee4 <HAL_TIM_Base_Start_IT+0x80>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	4a18      	ldr	r2, [pc, #96]	@ (800af40 <HAL_TIM_Base_Start_IT+0xdc>)
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d111      	bne.n	800af08 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	689b      	ldr	r3, [r3, #8]
 800aeea:	f003 0307 	and.w	r3, r3, #7
 800aeee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2b06      	cmp	r3, #6
 800aef4:	d010      	beq.n	800af18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	681a      	ldr	r2, [r3, #0]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f042 0201 	orr.w	r2, r2, #1
 800af04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af06:	e007      	b.n	800af18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	681a      	ldr	r2, [r3, #0]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f042 0201 	orr.w	r2, r2, #1
 800af16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800af18:	2300      	movs	r3, #0
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3714      	adds	r7, #20
 800af1e:	46bd      	mov	sp, r7
 800af20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af24:	4770      	bx	lr
 800af26:	bf00      	nop
 800af28:	40010000 	.word	0x40010000
 800af2c:	40000400 	.word	0x40000400
 800af30:	40000800 	.word	0x40000800
 800af34:	40000c00 	.word	0x40000c00
 800af38:	40010400 	.word	0x40010400
 800af3c:	40014000 	.word	0x40014000
 800af40:	40001800 	.word	0x40001800

0800af44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b082      	sub	sp, #8
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d101      	bne.n	800af56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800af52:	2301      	movs	r3, #1
 800af54:	e041      	b.n	800afda <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800af5c:	b2db      	uxtb	r3, r3
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d106      	bne.n	800af70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2200      	movs	r2, #0
 800af66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f7f9 f8d8 	bl	8004120 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2202      	movs	r2, #2
 800af74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681a      	ldr	r2, [r3, #0]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	3304      	adds	r3, #4
 800af80:	4619      	mov	r1, r3
 800af82:	4610      	mov	r0, r2
 800af84:	f000 fbb0 	bl	800b6e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2201      	movs	r2, #1
 800af8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2201      	movs	r2, #1
 800af94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2201      	movs	r2, #1
 800af9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2201      	movs	r2, #1
 800afa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2201      	movs	r2, #1
 800afac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2201      	movs	r2, #1
 800afb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2201      	movs	r2, #1
 800afbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2201      	movs	r2, #1
 800afc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2201      	movs	r2, #1
 800afcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2201      	movs	r2, #1
 800afd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800afd8:	2300      	movs	r3, #0
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3708      	adds	r7, #8
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
	...

0800afe4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b084      	sub	sp, #16
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d109      	bne.n	800b008 <HAL_TIM_PWM_Start+0x24>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800affa:	b2db      	uxtb	r3, r3
 800affc:	2b01      	cmp	r3, #1
 800affe:	bf14      	ite	ne
 800b000:	2301      	movne	r3, #1
 800b002:	2300      	moveq	r3, #0
 800b004:	b2db      	uxtb	r3, r3
 800b006:	e022      	b.n	800b04e <HAL_TIM_PWM_Start+0x6a>
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	2b04      	cmp	r3, #4
 800b00c:	d109      	bne.n	800b022 <HAL_TIM_PWM_Start+0x3e>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b014:	b2db      	uxtb	r3, r3
 800b016:	2b01      	cmp	r3, #1
 800b018:	bf14      	ite	ne
 800b01a:	2301      	movne	r3, #1
 800b01c:	2300      	moveq	r3, #0
 800b01e:	b2db      	uxtb	r3, r3
 800b020:	e015      	b.n	800b04e <HAL_TIM_PWM_Start+0x6a>
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	2b08      	cmp	r3, #8
 800b026:	d109      	bne.n	800b03c <HAL_TIM_PWM_Start+0x58>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	2b01      	cmp	r3, #1
 800b032:	bf14      	ite	ne
 800b034:	2301      	movne	r3, #1
 800b036:	2300      	moveq	r3, #0
 800b038:	b2db      	uxtb	r3, r3
 800b03a:	e008      	b.n	800b04e <HAL_TIM_PWM_Start+0x6a>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b042:	b2db      	uxtb	r3, r3
 800b044:	2b01      	cmp	r3, #1
 800b046:	bf14      	ite	ne
 800b048:	2301      	movne	r3, #1
 800b04a:	2300      	moveq	r3, #0
 800b04c:	b2db      	uxtb	r3, r3
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d001      	beq.n	800b056 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b052:	2301      	movs	r3, #1
 800b054:	e07c      	b.n	800b150 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d104      	bne.n	800b066 <HAL_TIM_PWM_Start+0x82>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2202      	movs	r2, #2
 800b060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b064:	e013      	b.n	800b08e <HAL_TIM_PWM_Start+0xaa>
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	2b04      	cmp	r3, #4
 800b06a:	d104      	bne.n	800b076 <HAL_TIM_PWM_Start+0x92>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2202      	movs	r2, #2
 800b070:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b074:	e00b      	b.n	800b08e <HAL_TIM_PWM_Start+0xaa>
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	2b08      	cmp	r3, #8
 800b07a:	d104      	bne.n	800b086 <HAL_TIM_PWM_Start+0xa2>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2202      	movs	r2, #2
 800b080:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b084:	e003      	b.n	800b08e <HAL_TIM_PWM_Start+0xaa>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2202      	movs	r2, #2
 800b08a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	2201      	movs	r2, #1
 800b094:	6839      	ldr	r1, [r7, #0]
 800b096:	4618      	mov	r0, r3
 800b098:	f000 fe10 	bl	800bcbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a2d      	ldr	r2, [pc, #180]	@ (800b158 <HAL_TIM_PWM_Start+0x174>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d004      	beq.n	800b0b0 <HAL_TIM_PWM_Start+0xcc>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4a2c      	ldr	r2, [pc, #176]	@ (800b15c <HAL_TIM_PWM_Start+0x178>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d101      	bne.n	800b0b4 <HAL_TIM_PWM_Start+0xd0>
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	e000      	b.n	800b0b6 <HAL_TIM_PWM_Start+0xd2>
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d007      	beq.n	800b0ca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b0c8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	4a22      	ldr	r2, [pc, #136]	@ (800b158 <HAL_TIM_PWM_Start+0x174>)
 800b0d0:	4293      	cmp	r3, r2
 800b0d2:	d022      	beq.n	800b11a <HAL_TIM_PWM_Start+0x136>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0dc:	d01d      	beq.n	800b11a <HAL_TIM_PWM_Start+0x136>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	4a1f      	ldr	r2, [pc, #124]	@ (800b160 <HAL_TIM_PWM_Start+0x17c>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d018      	beq.n	800b11a <HAL_TIM_PWM_Start+0x136>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4a1d      	ldr	r2, [pc, #116]	@ (800b164 <HAL_TIM_PWM_Start+0x180>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d013      	beq.n	800b11a <HAL_TIM_PWM_Start+0x136>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	4a1c      	ldr	r2, [pc, #112]	@ (800b168 <HAL_TIM_PWM_Start+0x184>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d00e      	beq.n	800b11a <HAL_TIM_PWM_Start+0x136>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	4a16      	ldr	r2, [pc, #88]	@ (800b15c <HAL_TIM_PWM_Start+0x178>)
 800b102:	4293      	cmp	r3, r2
 800b104:	d009      	beq.n	800b11a <HAL_TIM_PWM_Start+0x136>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	4a18      	ldr	r2, [pc, #96]	@ (800b16c <HAL_TIM_PWM_Start+0x188>)
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d004      	beq.n	800b11a <HAL_TIM_PWM_Start+0x136>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	4a16      	ldr	r2, [pc, #88]	@ (800b170 <HAL_TIM_PWM_Start+0x18c>)
 800b116:	4293      	cmp	r3, r2
 800b118:	d111      	bne.n	800b13e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	689b      	ldr	r3, [r3, #8]
 800b120:	f003 0307 	and.w	r3, r3, #7
 800b124:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	2b06      	cmp	r3, #6
 800b12a:	d010      	beq.n	800b14e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	681a      	ldr	r2, [r3, #0]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f042 0201 	orr.w	r2, r2, #1
 800b13a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b13c:	e007      	b.n	800b14e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	681a      	ldr	r2, [r3, #0]
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f042 0201 	orr.w	r2, r2, #1
 800b14c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b14e:	2300      	movs	r3, #0
}
 800b150:	4618      	mov	r0, r3
 800b152:	3710      	adds	r7, #16
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}
 800b158:	40010000 	.word	0x40010000
 800b15c:	40010400 	.word	0x40010400
 800b160:	40000400 	.word	0x40000400
 800b164:	40000800 	.word	0x40000800
 800b168:	40000c00 	.word	0x40000c00
 800b16c:	40014000 	.word	0x40014000
 800b170:	40001800 	.word	0x40001800

0800b174 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	691b      	ldr	r3, [r3, #16]
 800b182:	f003 0302 	and.w	r3, r3, #2
 800b186:	2b02      	cmp	r3, #2
 800b188:	d122      	bne.n	800b1d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	68db      	ldr	r3, [r3, #12]
 800b190:	f003 0302 	and.w	r3, r3, #2
 800b194:	2b02      	cmp	r3, #2
 800b196:	d11b      	bne.n	800b1d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f06f 0202 	mvn.w	r2, #2
 800b1a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	699b      	ldr	r3, [r3, #24]
 800b1ae:	f003 0303 	and.w	r3, r3, #3
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d003      	beq.n	800b1be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 fa77 	bl	800b6aa <HAL_TIM_IC_CaptureCallback>
 800b1bc:	e005      	b.n	800b1ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 fa69 	bl	800b696 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f000 fa7a 	bl	800b6be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	691b      	ldr	r3, [r3, #16]
 800b1d6:	f003 0304 	and.w	r3, r3, #4
 800b1da:	2b04      	cmp	r3, #4
 800b1dc:	d122      	bne.n	800b224 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	68db      	ldr	r3, [r3, #12]
 800b1e4:	f003 0304 	and.w	r3, r3, #4
 800b1e8:	2b04      	cmp	r3, #4
 800b1ea:	d11b      	bne.n	800b224 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f06f 0204 	mvn.w	r2, #4
 800b1f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2202      	movs	r2, #2
 800b1fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	699b      	ldr	r3, [r3, #24]
 800b202:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b206:	2b00      	cmp	r3, #0
 800b208:	d003      	beq.n	800b212 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f000 fa4d 	bl	800b6aa <HAL_TIM_IC_CaptureCallback>
 800b210:	e005      	b.n	800b21e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f000 fa3f 	bl	800b696 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f000 fa50 	bl	800b6be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2200      	movs	r2, #0
 800b222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	691b      	ldr	r3, [r3, #16]
 800b22a:	f003 0308 	and.w	r3, r3, #8
 800b22e:	2b08      	cmp	r3, #8
 800b230:	d122      	bne.n	800b278 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	68db      	ldr	r3, [r3, #12]
 800b238:	f003 0308 	and.w	r3, r3, #8
 800b23c:	2b08      	cmp	r3, #8
 800b23e:	d11b      	bne.n	800b278 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f06f 0208 	mvn.w	r2, #8
 800b248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2204      	movs	r2, #4
 800b24e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	69db      	ldr	r3, [r3, #28]
 800b256:	f003 0303 	and.w	r3, r3, #3
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d003      	beq.n	800b266 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f000 fa23 	bl	800b6aa <HAL_TIM_IC_CaptureCallback>
 800b264:	e005      	b.n	800b272 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f000 fa15 	bl	800b696 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f000 fa26 	bl	800b6be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2200      	movs	r2, #0
 800b276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	691b      	ldr	r3, [r3, #16]
 800b27e:	f003 0310 	and.w	r3, r3, #16
 800b282:	2b10      	cmp	r3, #16
 800b284:	d122      	bne.n	800b2cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	68db      	ldr	r3, [r3, #12]
 800b28c:	f003 0310 	and.w	r3, r3, #16
 800b290:	2b10      	cmp	r3, #16
 800b292:	d11b      	bne.n	800b2cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f06f 0210 	mvn.w	r2, #16
 800b29c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2208      	movs	r2, #8
 800b2a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	69db      	ldr	r3, [r3, #28]
 800b2aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d003      	beq.n	800b2ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f000 f9f9 	bl	800b6aa <HAL_TIM_IC_CaptureCallback>
 800b2b8:	e005      	b.n	800b2c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f000 f9eb 	bl	800b696 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f000 f9fc 	bl	800b6be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	691b      	ldr	r3, [r3, #16]
 800b2d2:	f003 0301 	and.w	r3, r3, #1
 800b2d6:	2b01      	cmp	r3, #1
 800b2d8:	d10e      	bne.n	800b2f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	f003 0301 	and.w	r3, r3, #1
 800b2e4:	2b01      	cmp	r3, #1
 800b2e6:	d107      	bne.n	800b2f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f06f 0201 	mvn.w	r2, #1
 800b2f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f7f8 fb98 	bl	8003a28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	691b      	ldr	r3, [r3, #16]
 800b2fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b302:	2b80      	cmp	r3, #128	@ 0x80
 800b304:	d10e      	bne.n	800b324 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	68db      	ldr	r3, [r3, #12]
 800b30c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b310:	2b80      	cmp	r3, #128	@ 0x80
 800b312:	d107      	bne.n	800b324 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800b31c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f000 fdca 	bl	800beb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	691b      	ldr	r3, [r3, #16]
 800b32a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b32e:	2b40      	cmp	r3, #64	@ 0x40
 800b330:	d10e      	bne.n	800b350 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	68db      	ldr	r3, [r3, #12]
 800b338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b33c:	2b40      	cmp	r3, #64	@ 0x40
 800b33e:	d107      	bne.n	800b350 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f000 f9c1 	bl	800b6d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	691b      	ldr	r3, [r3, #16]
 800b356:	f003 0320 	and.w	r3, r3, #32
 800b35a:	2b20      	cmp	r3, #32
 800b35c:	d10e      	bne.n	800b37c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	68db      	ldr	r3, [r3, #12]
 800b364:	f003 0320 	and.w	r3, r3, #32
 800b368:	2b20      	cmp	r3, #32
 800b36a:	d107      	bne.n	800b37c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f06f 0220 	mvn.w	r2, #32
 800b374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 fd94 	bl	800bea4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b37c:	bf00      	nop
 800b37e:	3708      	adds	r7, #8
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b086      	sub	sp, #24
 800b388:	af00      	add	r7, sp, #0
 800b38a:	60f8      	str	r0, [r7, #12]
 800b38c:	60b9      	str	r1, [r7, #8]
 800b38e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b390:	2300      	movs	r3, #0
 800b392:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	d101      	bne.n	800b3a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b39e:	2302      	movs	r3, #2
 800b3a0:	e0ae      	b.n	800b500 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	2201      	movs	r2, #1
 800b3a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2b0c      	cmp	r3, #12
 800b3ae:	f200 809f 	bhi.w	800b4f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b3b2:	a201      	add	r2, pc, #4	@ (adr r2, 800b3b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b3b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3b8:	0800b3ed 	.word	0x0800b3ed
 800b3bc:	0800b4f1 	.word	0x0800b4f1
 800b3c0:	0800b4f1 	.word	0x0800b4f1
 800b3c4:	0800b4f1 	.word	0x0800b4f1
 800b3c8:	0800b42d 	.word	0x0800b42d
 800b3cc:	0800b4f1 	.word	0x0800b4f1
 800b3d0:	0800b4f1 	.word	0x0800b4f1
 800b3d4:	0800b4f1 	.word	0x0800b4f1
 800b3d8:	0800b46f 	.word	0x0800b46f
 800b3dc:	0800b4f1 	.word	0x0800b4f1
 800b3e0:	0800b4f1 	.word	0x0800b4f1
 800b3e4:	0800b4f1 	.word	0x0800b4f1
 800b3e8:	0800b4af 	.word	0x0800b4af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	68b9      	ldr	r1, [r7, #8]
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f000 fa18 	bl	800b828 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	699a      	ldr	r2, [r3, #24]
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f042 0208 	orr.w	r2, r2, #8
 800b406:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	699a      	ldr	r2, [r3, #24]
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f022 0204 	bic.w	r2, r2, #4
 800b416:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	6999      	ldr	r1, [r3, #24]
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	691a      	ldr	r2, [r3, #16]
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	430a      	orrs	r2, r1
 800b428:	619a      	str	r2, [r3, #24]
      break;
 800b42a:	e064      	b.n	800b4f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	68b9      	ldr	r1, [r7, #8]
 800b432:	4618      	mov	r0, r3
 800b434:	f000 fa68 	bl	800b908 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	699a      	ldr	r2, [r3, #24]
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b446:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	699a      	ldr	r2, [r3, #24]
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b456:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	6999      	ldr	r1, [r3, #24]
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	691b      	ldr	r3, [r3, #16]
 800b462:	021a      	lsls	r2, r3, #8
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	430a      	orrs	r2, r1
 800b46a:	619a      	str	r2, [r3, #24]
      break;
 800b46c:	e043      	b.n	800b4f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	68b9      	ldr	r1, [r7, #8]
 800b474:	4618      	mov	r0, r3
 800b476:	f000 fabd 	bl	800b9f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	69da      	ldr	r2, [r3, #28]
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f042 0208 	orr.w	r2, r2, #8
 800b488:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	69da      	ldr	r2, [r3, #28]
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f022 0204 	bic.w	r2, r2, #4
 800b498:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	69d9      	ldr	r1, [r3, #28]
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	691a      	ldr	r2, [r3, #16]
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	430a      	orrs	r2, r1
 800b4aa:	61da      	str	r2, [r3, #28]
      break;
 800b4ac:	e023      	b.n	800b4f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	68b9      	ldr	r1, [r7, #8]
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f000 fb11 	bl	800badc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	69da      	ldr	r2, [r3, #28]
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b4c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	69da      	ldr	r2, [r3, #28]
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b4d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	69d9      	ldr	r1, [r3, #28]
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	691b      	ldr	r3, [r3, #16]
 800b4e4:	021a      	lsls	r2, r3, #8
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	430a      	orrs	r2, r1
 800b4ec:	61da      	str	r2, [r3, #28]
      break;
 800b4ee:	e002      	b.n	800b4f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	75fb      	strb	r3, [r7, #23]
      break;
 800b4f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b4fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800b500:	4618      	mov	r0, r3
 800b502:	3718      	adds	r7, #24
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}

0800b508 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b084      	sub	sp, #16
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b512:	2300      	movs	r3, #0
 800b514:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d101      	bne.n	800b524 <HAL_TIM_ConfigClockSource+0x1c>
 800b520:	2302      	movs	r3, #2
 800b522:	e0b4      	b.n	800b68e <HAL_TIM_ConfigClockSource+0x186>
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2201      	movs	r2, #1
 800b528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2202      	movs	r2, #2
 800b530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	689b      	ldr	r3, [r3, #8]
 800b53a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b542:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b54a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	68ba      	ldr	r2, [r7, #8]
 800b552:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b55c:	d03e      	beq.n	800b5dc <HAL_TIM_ConfigClockSource+0xd4>
 800b55e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b562:	f200 8087 	bhi.w	800b674 <HAL_TIM_ConfigClockSource+0x16c>
 800b566:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b56a:	f000 8086 	beq.w	800b67a <HAL_TIM_ConfigClockSource+0x172>
 800b56e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b572:	d87f      	bhi.n	800b674 <HAL_TIM_ConfigClockSource+0x16c>
 800b574:	2b70      	cmp	r3, #112	@ 0x70
 800b576:	d01a      	beq.n	800b5ae <HAL_TIM_ConfigClockSource+0xa6>
 800b578:	2b70      	cmp	r3, #112	@ 0x70
 800b57a:	d87b      	bhi.n	800b674 <HAL_TIM_ConfigClockSource+0x16c>
 800b57c:	2b60      	cmp	r3, #96	@ 0x60
 800b57e:	d050      	beq.n	800b622 <HAL_TIM_ConfigClockSource+0x11a>
 800b580:	2b60      	cmp	r3, #96	@ 0x60
 800b582:	d877      	bhi.n	800b674 <HAL_TIM_ConfigClockSource+0x16c>
 800b584:	2b50      	cmp	r3, #80	@ 0x50
 800b586:	d03c      	beq.n	800b602 <HAL_TIM_ConfigClockSource+0xfa>
 800b588:	2b50      	cmp	r3, #80	@ 0x50
 800b58a:	d873      	bhi.n	800b674 <HAL_TIM_ConfigClockSource+0x16c>
 800b58c:	2b40      	cmp	r3, #64	@ 0x40
 800b58e:	d058      	beq.n	800b642 <HAL_TIM_ConfigClockSource+0x13a>
 800b590:	2b40      	cmp	r3, #64	@ 0x40
 800b592:	d86f      	bhi.n	800b674 <HAL_TIM_ConfigClockSource+0x16c>
 800b594:	2b30      	cmp	r3, #48	@ 0x30
 800b596:	d064      	beq.n	800b662 <HAL_TIM_ConfigClockSource+0x15a>
 800b598:	2b30      	cmp	r3, #48	@ 0x30
 800b59a:	d86b      	bhi.n	800b674 <HAL_TIM_ConfigClockSource+0x16c>
 800b59c:	2b20      	cmp	r3, #32
 800b59e:	d060      	beq.n	800b662 <HAL_TIM_ConfigClockSource+0x15a>
 800b5a0:	2b20      	cmp	r3, #32
 800b5a2:	d867      	bhi.n	800b674 <HAL_TIM_ConfigClockSource+0x16c>
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d05c      	beq.n	800b662 <HAL_TIM_ConfigClockSource+0x15a>
 800b5a8:	2b10      	cmp	r3, #16
 800b5aa:	d05a      	beq.n	800b662 <HAL_TIM_ConfigClockSource+0x15a>
 800b5ac:	e062      	b.n	800b674 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6818      	ldr	r0, [r3, #0]
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	6899      	ldr	r1, [r3, #8]
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	685a      	ldr	r2, [r3, #4]
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	68db      	ldr	r3, [r3, #12]
 800b5be:	f000 fb5d 	bl	800bc7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	689b      	ldr	r3, [r3, #8]
 800b5c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b5d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	68ba      	ldr	r2, [r7, #8]
 800b5d8:	609a      	str	r2, [r3, #8]
      break;
 800b5da:	e04f      	b.n	800b67c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6818      	ldr	r0, [r3, #0]
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	6899      	ldr	r1, [r3, #8]
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	685a      	ldr	r2, [r3, #4]
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	68db      	ldr	r3, [r3, #12]
 800b5ec:	f000 fb46 	bl	800bc7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	689a      	ldr	r2, [r3, #8]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b5fe:	609a      	str	r2, [r3, #8]
      break;
 800b600:	e03c      	b.n	800b67c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6818      	ldr	r0, [r3, #0]
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	6859      	ldr	r1, [r3, #4]
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	68db      	ldr	r3, [r3, #12]
 800b60e:	461a      	mov	r2, r3
 800b610:	f000 faba 	bl	800bb88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	2150      	movs	r1, #80	@ 0x50
 800b61a:	4618      	mov	r0, r3
 800b61c:	f000 fb13 	bl	800bc46 <TIM_ITRx_SetConfig>
      break;
 800b620:	e02c      	b.n	800b67c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6818      	ldr	r0, [r3, #0]
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	6859      	ldr	r1, [r3, #4]
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	68db      	ldr	r3, [r3, #12]
 800b62e:	461a      	mov	r2, r3
 800b630:	f000 fad9 	bl	800bbe6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	2160      	movs	r1, #96	@ 0x60
 800b63a:	4618      	mov	r0, r3
 800b63c:	f000 fb03 	bl	800bc46 <TIM_ITRx_SetConfig>
      break;
 800b640:	e01c      	b.n	800b67c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6818      	ldr	r0, [r3, #0]
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	6859      	ldr	r1, [r3, #4]
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	68db      	ldr	r3, [r3, #12]
 800b64e:	461a      	mov	r2, r3
 800b650:	f000 fa9a 	bl	800bb88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	2140      	movs	r1, #64	@ 0x40
 800b65a:	4618      	mov	r0, r3
 800b65c:	f000 faf3 	bl	800bc46 <TIM_ITRx_SetConfig>
      break;
 800b660:	e00c      	b.n	800b67c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681a      	ldr	r2, [r3, #0]
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	4619      	mov	r1, r3
 800b66c:	4610      	mov	r0, r2
 800b66e:	f000 faea 	bl	800bc46 <TIM_ITRx_SetConfig>
      break;
 800b672:	e003      	b.n	800b67c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b674:	2301      	movs	r3, #1
 800b676:	73fb      	strb	r3, [r7, #15]
      break;
 800b678:	e000      	b.n	800b67c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b67a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2201      	movs	r2, #1
 800b680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2200      	movs	r2, #0
 800b688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b68c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3710      	adds	r7, #16
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}

0800b696 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b696:	b480      	push	{r7}
 800b698:	b083      	sub	sp, #12
 800b69a:	af00      	add	r7, sp, #0
 800b69c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b69e:	bf00      	nop
 800b6a0:	370c      	adds	r7, #12
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a8:	4770      	bx	lr

0800b6aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b6aa:	b480      	push	{r7}
 800b6ac:	b083      	sub	sp, #12
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b6b2:	bf00      	nop
 800b6b4:	370c      	adds	r7, #12
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6bc:	4770      	bx	lr

0800b6be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b6be:	b480      	push	{r7}
 800b6c0:	b083      	sub	sp, #12
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b6c6:	bf00      	nop
 800b6c8:	370c      	adds	r7, #12
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d0:	4770      	bx	lr

0800b6d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b6d2:	b480      	push	{r7}
 800b6d4:	b083      	sub	sp, #12
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b6da:	bf00      	nop
 800b6dc:	370c      	adds	r7, #12
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr
	...

0800b6e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b085      	sub	sp, #20
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	4a40      	ldr	r2, [pc, #256]	@ (800b7fc <TIM_Base_SetConfig+0x114>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d013      	beq.n	800b728 <TIM_Base_SetConfig+0x40>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b706:	d00f      	beq.n	800b728 <TIM_Base_SetConfig+0x40>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	4a3d      	ldr	r2, [pc, #244]	@ (800b800 <TIM_Base_SetConfig+0x118>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d00b      	beq.n	800b728 <TIM_Base_SetConfig+0x40>
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	4a3c      	ldr	r2, [pc, #240]	@ (800b804 <TIM_Base_SetConfig+0x11c>)
 800b714:	4293      	cmp	r3, r2
 800b716:	d007      	beq.n	800b728 <TIM_Base_SetConfig+0x40>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	4a3b      	ldr	r2, [pc, #236]	@ (800b808 <TIM_Base_SetConfig+0x120>)
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d003      	beq.n	800b728 <TIM_Base_SetConfig+0x40>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	4a3a      	ldr	r2, [pc, #232]	@ (800b80c <TIM_Base_SetConfig+0x124>)
 800b724:	4293      	cmp	r3, r2
 800b726:	d108      	bne.n	800b73a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b72e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	685b      	ldr	r3, [r3, #4]
 800b734:	68fa      	ldr	r2, [r7, #12]
 800b736:	4313      	orrs	r3, r2
 800b738:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	4a2f      	ldr	r2, [pc, #188]	@ (800b7fc <TIM_Base_SetConfig+0x114>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d02b      	beq.n	800b79a <TIM_Base_SetConfig+0xb2>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b748:	d027      	beq.n	800b79a <TIM_Base_SetConfig+0xb2>
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	4a2c      	ldr	r2, [pc, #176]	@ (800b800 <TIM_Base_SetConfig+0x118>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	d023      	beq.n	800b79a <TIM_Base_SetConfig+0xb2>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	4a2b      	ldr	r2, [pc, #172]	@ (800b804 <TIM_Base_SetConfig+0x11c>)
 800b756:	4293      	cmp	r3, r2
 800b758:	d01f      	beq.n	800b79a <TIM_Base_SetConfig+0xb2>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	4a2a      	ldr	r2, [pc, #168]	@ (800b808 <TIM_Base_SetConfig+0x120>)
 800b75e:	4293      	cmp	r3, r2
 800b760:	d01b      	beq.n	800b79a <TIM_Base_SetConfig+0xb2>
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	4a29      	ldr	r2, [pc, #164]	@ (800b80c <TIM_Base_SetConfig+0x124>)
 800b766:	4293      	cmp	r3, r2
 800b768:	d017      	beq.n	800b79a <TIM_Base_SetConfig+0xb2>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	4a28      	ldr	r2, [pc, #160]	@ (800b810 <TIM_Base_SetConfig+0x128>)
 800b76e:	4293      	cmp	r3, r2
 800b770:	d013      	beq.n	800b79a <TIM_Base_SetConfig+0xb2>
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	4a27      	ldr	r2, [pc, #156]	@ (800b814 <TIM_Base_SetConfig+0x12c>)
 800b776:	4293      	cmp	r3, r2
 800b778:	d00f      	beq.n	800b79a <TIM_Base_SetConfig+0xb2>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	4a26      	ldr	r2, [pc, #152]	@ (800b818 <TIM_Base_SetConfig+0x130>)
 800b77e:	4293      	cmp	r3, r2
 800b780:	d00b      	beq.n	800b79a <TIM_Base_SetConfig+0xb2>
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	4a25      	ldr	r2, [pc, #148]	@ (800b81c <TIM_Base_SetConfig+0x134>)
 800b786:	4293      	cmp	r3, r2
 800b788:	d007      	beq.n	800b79a <TIM_Base_SetConfig+0xb2>
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	4a24      	ldr	r2, [pc, #144]	@ (800b820 <TIM_Base_SetConfig+0x138>)
 800b78e:	4293      	cmp	r3, r2
 800b790:	d003      	beq.n	800b79a <TIM_Base_SetConfig+0xb2>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	4a23      	ldr	r2, [pc, #140]	@ (800b824 <TIM_Base_SetConfig+0x13c>)
 800b796:	4293      	cmp	r3, r2
 800b798:	d108      	bne.n	800b7ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b7a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	68db      	ldr	r3, [r3, #12]
 800b7a6:	68fa      	ldr	r2, [r7, #12]
 800b7a8:	4313      	orrs	r3, r2
 800b7aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	695b      	ldr	r3, [r3, #20]
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	68fa      	ldr	r2, [r7, #12]
 800b7be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	689a      	ldr	r2, [r3, #8]
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	681a      	ldr	r2, [r3, #0]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	4a0a      	ldr	r2, [pc, #40]	@ (800b7fc <TIM_Base_SetConfig+0x114>)
 800b7d4:	4293      	cmp	r3, r2
 800b7d6:	d003      	beq.n	800b7e0 <TIM_Base_SetConfig+0xf8>
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	4a0c      	ldr	r2, [pc, #48]	@ (800b80c <TIM_Base_SetConfig+0x124>)
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	d103      	bne.n	800b7e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	691a      	ldr	r2, [r3, #16]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	615a      	str	r2, [r3, #20]
}
 800b7ee:	bf00      	nop
 800b7f0:	3714      	adds	r7, #20
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f8:	4770      	bx	lr
 800b7fa:	bf00      	nop
 800b7fc:	40010000 	.word	0x40010000
 800b800:	40000400 	.word	0x40000400
 800b804:	40000800 	.word	0x40000800
 800b808:	40000c00 	.word	0x40000c00
 800b80c:	40010400 	.word	0x40010400
 800b810:	40014000 	.word	0x40014000
 800b814:	40014400 	.word	0x40014400
 800b818:	40014800 	.word	0x40014800
 800b81c:	40001800 	.word	0x40001800
 800b820:	40001c00 	.word	0x40001c00
 800b824:	40002000 	.word	0x40002000

0800b828 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b828:	b480      	push	{r7}
 800b82a:	b087      	sub	sp, #28
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6a1b      	ldr	r3, [r3, #32]
 800b836:	f023 0201 	bic.w	r2, r3, #1
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6a1b      	ldr	r3, [r3, #32]
 800b842:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	699b      	ldr	r3, [r3, #24]
 800b84e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f023 0303 	bic.w	r3, r3, #3
 800b85e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	68fa      	ldr	r2, [r7, #12]
 800b866:	4313      	orrs	r3, r2
 800b868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	f023 0302 	bic.w	r3, r3, #2
 800b870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	689b      	ldr	r3, [r3, #8]
 800b876:	697a      	ldr	r2, [r7, #20]
 800b878:	4313      	orrs	r3, r2
 800b87a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	4a20      	ldr	r2, [pc, #128]	@ (800b900 <TIM_OC1_SetConfig+0xd8>)
 800b880:	4293      	cmp	r3, r2
 800b882:	d003      	beq.n	800b88c <TIM_OC1_SetConfig+0x64>
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	4a1f      	ldr	r2, [pc, #124]	@ (800b904 <TIM_OC1_SetConfig+0xdc>)
 800b888:	4293      	cmp	r3, r2
 800b88a:	d10c      	bne.n	800b8a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	f023 0308 	bic.w	r3, r3, #8
 800b892:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	68db      	ldr	r3, [r3, #12]
 800b898:	697a      	ldr	r2, [r7, #20]
 800b89a:	4313      	orrs	r3, r2
 800b89c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	f023 0304 	bic.w	r3, r3, #4
 800b8a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	4a15      	ldr	r2, [pc, #84]	@ (800b900 <TIM_OC1_SetConfig+0xd8>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d003      	beq.n	800b8b6 <TIM_OC1_SetConfig+0x8e>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	4a14      	ldr	r2, [pc, #80]	@ (800b904 <TIM_OC1_SetConfig+0xdc>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d111      	bne.n	800b8da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b8bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b8c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	695b      	ldr	r3, [r3, #20]
 800b8ca:	693a      	ldr	r2, [r7, #16]
 800b8cc:	4313      	orrs	r3, r2
 800b8ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	699b      	ldr	r3, [r3, #24]
 800b8d4:	693a      	ldr	r2, [r7, #16]
 800b8d6:	4313      	orrs	r3, r2
 800b8d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	693a      	ldr	r2, [r7, #16]
 800b8de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	68fa      	ldr	r2, [r7, #12]
 800b8e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	685a      	ldr	r2, [r3, #4]
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	697a      	ldr	r2, [r7, #20]
 800b8f2:	621a      	str	r2, [r3, #32]
}
 800b8f4:	bf00      	nop
 800b8f6:	371c      	adds	r7, #28
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fe:	4770      	bx	lr
 800b900:	40010000 	.word	0x40010000
 800b904:	40010400 	.word	0x40010400

0800b908 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b908:	b480      	push	{r7}
 800b90a:	b087      	sub	sp, #28
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6a1b      	ldr	r3, [r3, #32]
 800b916:	f023 0210 	bic.w	r2, r3, #16
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6a1b      	ldr	r3, [r3, #32]
 800b922:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	699b      	ldr	r3, [r3, #24]
 800b92e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b93e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	021b      	lsls	r3, r3, #8
 800b946:	68fa      	ldr	r2, [r7, #12]
 800b948:	4313      	orrs	r3, r2
 800b94a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	f023 0320 	bic.w	r3, r3, #32
 800b952:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	689b      	ldr	r3, [r3, #8]
 800b958:	011b      	lsls	r3, r3, #4
 800b95a:	697a      	ldr	r2, [r7, #20]
 800b95c:	4313      	orrs	r3, r2
 800b95e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	4a22      	ldr	r2, [pc, #136]	@ (800b9ec <TIM_OC2_SetConfig+0xe4>)
 800b964:	4293      	cmp	r3, r2
 800b966:	d003      	beq.n	800b970 <TIM_OC2_SetConfig+0x68>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	4a21      	ldr	r2, [pc, #132]	@ (800b9f0 <TIM_OC2_SetConfig+0xe8>)
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d10d      	bne.n	800b98c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b976:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	68db      	ldr	r3, [r3, #12]
 800b97c:	011b      	lsls	r3, r3, #4
 800b97e:	697a      	ldr	r2, [r7, #20]
 800b980:	4313      	orrs	r3, r2
 800b982:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b98a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	4a17      	ldr	r2, [pc, #92]	@ (800b9ec <TIM_OC2_SetConfig+0xe4>)
 800b990:	4293      	cmp	r3, r2
 800b992:	d003      	beq.n	800b99c <TIM_OC2_SetConfig+0x94>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	4a16      	ldr	r2, [pc, #88]	@ (800b9f0 <TIM_OC2_SetConfig+0xe8>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d113      	bne.n	800b9c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b9a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b9aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	695b      	ldr	r3, [r3, #20]
 800b9b0:	009b      	lsls	r3, r3, #2
 800b9b2:	693a      	ldr	r2, [r7, #16]
 800b9b4:	4313      	orrs	r3, r2
 800b9b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	699b      	ldr	r3, [r3, #24]
 800b9bc:	009b      	lsls	r3, r3, #2
 800b9be:	693a      	ldr	r2, [r7, #16]
 800b9c0:	4313      	orrs	r3, r2
 800b9c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	693a      	ldr	r2, [r7, #16]
 800b9c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	68fa      	ldr	r2, [r7, #12]
 800b9ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	685a      	ldr	r2, [r3, #4]
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	697a      	ldr	r2, [r7, #20]
 800b9dc:	621a      	str	r2, [r3, #32]
}
 800b9de:	bf00      	nop
 800b9e0:	371c      	adds	r7, #28
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e8:	4770      	bx	lr
 800b9ea:	bf00      	nop
 800b9ec:	40010000 	.word	0x40010000
 800b9f0:	40010400 	.word	0x40010400

0800b9f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b087      	sub	sp, #28
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6a1b      	ldr	r3, [r3, #32]
 800ba02:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6a1b      	ldr	r3, [r3, #32]
 800ba0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	685b      	ldr	r3, [r3, #4]
 800ba14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	69db      	ldr	r3, [r3, #28]
 800ba1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	f023 0303 	bic.w	r3, r3, #3
 800ba2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	68fa      	ldr	r2, [r7, #12]
 800ba32:	4313      	orrs	r3, r2
 800ba34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ba3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	689b      	ldr	r3, [r3, #8]
 800ba42:	021b      	lsls	r3, r3, #8
 800ba44:	697a      	ldr	r2, [r7, #20]
 800ba46:	4313      	orrs	r3, r2
 800ba48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	4a21      	ldr	r2, [pc, #132]	@ (800bad4 <TIM_OC3_SetConfig+0xe0>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d003      	beq.n	800ba5a <TIM_OC3_SetConfig+0x66>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	4a20      	ldr	r2, [pc, #128]	@ (800bad8 <TIM_OC3_SetConfig+0xe4>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d10d      	bne.n	800ba76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ba60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	68db      	ldr	r3, [r3, #12]
 800ba66:	021b      	lsls	r3, r3, #8
 800ba68:	697a      	ldr	r2, [r7, #20]
 800ba6a:	4313      	orrs	r3, r2
 800ba6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ba74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	4a16      	ldr	r2, [pc, #88]	@ (800bad4 <TIM_OC3_SetConfig+0xe0>)
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	d003      	beq.n	800ba86 <TIM_OC3_SetConfig+0x92>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	4a15      	ldr	r2, [pc, #84]	@ (800bad8 <TIM_OC3_SetConfig+0xe4>)
 800ba82:	4293      	cmp	r3, r2
 800ba84:	d113      	bne.n	800baae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ba8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ba94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	695b      	ldr	r3, [r3, #20]
 800ba9a:	011b      	lsls	r3, r3, #4
 800ba9c:	693a      	ldr	r2, [r7, #16]
 800ba9e:	4313      	orrs	r3, r2
 800baa0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	699b      	ldr	r3, [r3, #24]
 800baa6:	011b      	lsls	r3, r3, #4
 800baa8:	693a      	ldr	r2, [r7, #16]
 800baaa:	4313      	orrs	r3, r2
 800baac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	693a      	ldr	r2, [r7, #16]
 800bab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	68fa      	ldr	r2, [r7, #12]
 800bab8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	685a      	ldr	r2, [r3, #4]
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	697a      	ldr	r2, [r7, #20]
 800bac6:	621a      	str	r2, [r3, #32]
}
 800bac8:	bf00      	nop
 800baca:	371c      	adds	r7, #28
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr
 800bad4:	40010000 	.word	0x40010000
 800bad8:	40010400 	.word	0x40010400

0800badc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800badc:	b480      	push	{r7}
 800bade:	b087      	sub	sp, #28
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6a1b      	ldr	r3, [r3, #32]
 800baea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6a1b      	ldr	r3, [r3, #32]
 800baf6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	685b      	ldr	r3, [r3, #4]
 800bafc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	69db      	ldr	r3, [r3, #28]
 800bb02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bb0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bb12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	021b      	lsls	r3, r3, #8
 800bb1a:	68fa      	ldr	r2, [r7, #12]
 800bb1c:	4313      	orrs	r3, r2
 800bb1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bb26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	689b      	ldr	r3, [r3, #8]
 800bb2c:	031b      	lsls	r3, r3, #12
 800bb2e:	693a      	ldr	r2, [r7, #16]
 800bb30:	4313      	orrs	r3, r2
 800bb32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	4a12      	ldr	r2, [pc, #72]	@ (800bb80 <TIM_OC4_SetConfig+0xa4>)
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	d003      	beq.n	800bb44 <TIM_OC4_SetConfig+0x68>
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	4a11      	ldr	r2, [pc, #68]	@ (800bb84 <TIM_OC4_SetConfig+0xa8>)
 800bb40:	4293      	cmp	r3, r2
 800bb42:	d109      	bne.n	800bb58 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bb4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	695b      	ldr	r3, [r3, #20]
 800bb50:	019b      	lsls	r3, r3, #6
 800bb52:	697a      	ldr	r2, [r7, #20]
 800bb54:	4313      	orrs	r3, r2
 800bb56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	697a      	ldr	r2, [r7, #20]
 800bb5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	68fa      	ldr	r2, [r7, #12]
 800bb62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	685a      	ldr	r2, [r3, #4]
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	693a      	ldr	r2, [r7, #16]
 800bb70:	621a      	str	r2, [r3, #32]
}
 800bb72:	bf00      	nop
 800bb74:	371c      	adds	r7, #28
 800bb76:	46bd      	mov	sp, r7
 800bb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7c:	4770      	bx	lr
 800bb7e:	bf00      	nop
 800bb80:	40010000 	.word	0x40010000
 800bb84:	40010400 	.word	0x40010400

0800bb88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb88:	b480      	push	{r7}
 800bb8a:	b087      	sub	sp, #28
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	60f8      	str	r0, [r7, #12]
 800bb90:	60b9      	str	r1, [r7, #8]
 800bb92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	6a1b      	ldr	r3, [r3, #32]
 800bb98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	6a1b      	ldr	r3, [r3, #32]
 800bb9e:	f023 0201 	bic.w	r2, r3, #1
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	699b      	ldr	r3, [r3, #24]
 800bbaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bbb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	011b      	lsls	r3, r3, #4
 800bbb8:	693a      	ldr	r2, [r7, #16]
 800bbba:	4313      	orrs	r3, r2
 800bbbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	f023 030a 	bic.w	r3, r3, #10
 800bbc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bbc6:	697a      	ldr	r2, [r7, #20]
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	693a      	ldr	r2, [r7, #16]
 800bbd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	697a      	ldr	r2, [r7, #20]
 800bbd8:	621a      	str	r2, [r3, #32]
}
 800bbda:	bf00      	nop
 800bbdc:	371c      	adds	r7, #28
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe4:	4770      	bx	lr

0800bbe6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bbe6:	b480      	push	{r7}
 800bbe8:	b087      	sub	sp, #28
 800bbea:	af00      	add	r7, sp, #0
 800bbec:	60f8      	str	r0, [r7, #12]
 800bbee:	60b9      	str	r1, [r7, #8]
 800bbf0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	6a1b      	ldr	r3, [r3, #32]
 800bbf6:	f023 0210 	bic.w	r2, r3, #16
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	699b      	ldr	r3, [r3, #24]
 800bc02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	6a1b      	ldr	r3, [r3, #32]
 800bc08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bc10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	031b      	lsls	r3, r3, #12
 800bc16:	697a      	ldr	r2, [r7, #20]
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bc22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	011b      	lsls	r3, r3, #4
 800bc28:	693a      	ldr	r2, [r7, #16]
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	697a      	ldr	r2, [r7, #20]
 800bc32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	693a      	ldr	r2, [r7, #16]
 800bc38:	621a      	str	r2, [r3, #32]
}
 800bc3a:	bf00      	nop
 800bc3c:	371c      	adds	r7, #28
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc44:	4770      	bx	lr

0800bc46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bc46:	b480      	push	{r7}
 800bc48:	b085      	sub	sp, #20
 800bc4a:	af00      	add	r7, sp, #0
 800bc4c:	6078      	str	r0, [r7, #4]
 800bc4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	689b      	ldr	r3, [r3, #8]
 800bc54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bc5e:	683a      	ldr	r2, [r7, #0]
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	4313      	orrs	r3, r2
 800bc64:	f043 0307 	orr.w	r3, r3, #7
 800bc68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	68fa      	ldr	r2, [r7, #12]
 800bc6e:	609a      	str	r2, [r3, #8]
}
 800bc70:	bf00      	nop
 800bc72:	3714      	adds	r7, #20
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr

0800bc7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b087      	sub	sp, #28
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	60f8      	str	r0, [r7, #12]
 800bc84:	60b9      	str	r1, [r7, #8]
 800bc86:	607a      	str	r2, [r7, #4]
 800bc88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	689b      	ldr	r3, [r3, #8]
 800bc8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bc96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	021a      	lsls	r2, r3, #8
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	431a      	orrs	r2, r3
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	4313      	orrs	r3, r2
 800bca4:	697a      	ldr	r2, [r7, #20]
 800bca6:	4313      	orrs	r3, r2
 800bca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	697a      	ldr	r2, [r7, #20]
 800bcae:	609a      	str	r2, [r3, #8]
}
 800bcb0:	bf00      	nop
 800bcb2:	371c      	adds	r7, #28
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr

0800bcbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b087      	sub	sp, #28
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	60f8      	str	r0, [r7, #12]
 800bcc4:	60b9      	str	r1, [r7, #8]
 800bcc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	f003 031f 	and.w	r3, r3, #31
 800bcce:	2201      	movs	r2, #1
 800bcd0:	fa02 f303 	lsl.w	r3, r2, r3
 800bcd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	6a1a      	ldr	r2, [r3, #32]
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	43db      	mvns	r3, r3
 800bcde:	401a      	ands	r2, r3
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	6a1a      	ldr	r2, [r3, #32]
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	f003 031f 	and.w	r3, r3, #31
 800bcee:	6879      	ldr	r1, [r7, #4]
 800bcf0:	fa01 f303 	lsl.w	r3, r1, r3
 800bcf4:	431a      	orrs	r2, r3
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	621a      	str	r2, [r3, #32]
}
 800bcfa:	bf00      	nop
 800bcfc:	371c      	adds	r7, #28
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr
	...

0800bd08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b085      	sub	sp, #20
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bd18:	2b01      	cmp	r3, #1
 800bd1a:	d101      	bne.n	800bd20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bd1c:	2302      	movs	r3, #2
 800bd1e:	e05a      	b.n	800bdd6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2201      	movs	r2, #1
 800bd24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2202      	movs	r2, #2
 800bd2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	689b      	ldr	r3, [r3, #8]
 800bd3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	68fa      	ldr	r2, [r7, #12]
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	68fa      	ldr	r2, [r7, #12]
 800bd58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	4a21      	ldr	r2, [pc, #132]	@ (800bde4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d022      	beq.n	800bdaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd6c:	d01d      	beq.n	800bdaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	4a1d      	ldr	r2, [pc, #116]	@ (800bde8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d018      	beq.n	800bdaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	4a1b      	ldr	r2, [pc, #108]	@ (800bdec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	d013      	beq.n	800bdaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	4a1a      	ldr	r2, [pc, #104]	@ (800bdf0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800bd88:	4293      	cmp	r3, r2
 800bd8a:	d00e      	beq.n	800bdaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	4a18      	ldr	r2, [pc, #96]	@ (800bdf4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800bd92:	4293      	cmp	r3, r2
 800bd94:	d009      	beq.n	800bdaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	4a17      	ldr	r2, [pc, #92]	@ (800bdf8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d004      	beq.n	800bdaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	4a15      	ldr	r2, [pc, #84]	@ (800bdfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bda6:	4293      	cmp	r3, r2
 800bda8:	d10c      	bne.n	800bdc4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bdb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	68ba      	ldr	r2, [r7, #8]
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	68ba      	ldr	r2, [r7, #8]
 800bdc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2200      	movs	r2, #0
 800bdd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bdd4:	2300      	movs	r3, #0
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3714      	adds	r7, #20
 800bdda:	46bd      	mov	sp, r7
 800bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde0:	4770      	bx	lr
 800bde2:	bf00      	nop
 800bde4:	40010000 	.word	0x40010000
 800bde8:	40000400 	.word	0x40000400
 800bdec:	40000800 	.word	0x40000800
 800bdf0:	40000c00 	.word	0x40000c00
 800bdf4:	40010400 	.word	0x40010400
 800bdf8:	40014000 	.word	0x40014000
 800bdfc:	40001800 	.word	0x40001800

0800be00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800be00:	b480      	push	{r7}
 800be02:	b085      	sub	sp, #20
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800be0a:	2300      	movs	r3, #0
 800be0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800be14:	2b01      	cmp	r3, #1
 800be16:	d101      	bne.n	800be1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800be18:	2302      	movs	r3, #2
 800be1a:	e03d      	b.n	800be98 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2201      	movs	r2, #1
 800be20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	68db      	ldr	r3, [r3, #12]
 800be2e:	4313      	orrs	r3, r2
 800be30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	689b      	ldr	r3, [r3, #8]
 800be3c:	4313      	orrs	r3, r2
 800be3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	685b      	ldr	r3, [r3, #4]
 800be4a:	4313      	orrs	r3, r2
 800be4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	4313      	orrs	r3, r2
 800be5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	691b      	ldr	r3, [r3, #16]
 800be66:	4313      	orrs	r3, r2
 800be68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	695b      	ldr	r3, [r3, #20]
 800be74:	4313      	orrs	r3, r2
 800be76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	69db      	ldr	r3, [r3, #28]
 800be82:	4313      	orrs	r3, r2
 800be84:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	68fa      	ldr	r2, [r7, #12]
 800be8c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2200      	movs	r2, #0
 800be92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800be96:	2300      	movs	r3, #0
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3714      	adds	r7, #20
 800be9c:	46bd      	mov	sp, r7
 800be9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea2:	4770      	bx	lr

0800bea4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b083      	sub	sp, #12
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800beac:	bf00      	nop
 800beae:	370c      	adds	r7, #12
 800beb0:	46bd      	mov	sp, r7
 800beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb6:	4770      	bx	lr

0800beb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800beb8:	b480      	push	{r7}
 800beba:	b083      	sub	sp, #12
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bec0:	bf00      	nop
 800bec2:	370c      	adds	r7, #12
 800bec4:	46bd      	mov	sp, r7
 800bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beca:	4770      	bx	lr

0800becc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b082      	sub	sp, #8
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d101      	bne.n	800bede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800beda:	2301      	movs	r3, #1
 800bedc:	e03f      	b.n	800bf5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bee4:	b2db      	uxtb	r3, r3
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d106      	bne.n	800bef8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2200      	movs	r2, #0
 800beee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f7f8 f976 	bl	80041e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2224      	movs	r2, #36	@ 0x24
 800befc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	68da      	ldr	r2, [r3, #12]
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bf0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f000 fdbd 	bl	800ca90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	691a      	ldr	r2, [r3, #16]
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bf24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	695a      	ldr	r2, [r3, #20]
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bf34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	68da      	ldr	r2, [r3, #12]
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800bf44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2220      	movs	r2, #32
 800bf50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2220      	movs	r2, #32
 800bf58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800bf5c:	2300      	movs	r3, #0
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3708      	adds	r7, #8
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}
	...

0800bf68 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b08c      	sub	sp, #48	@ 0x30
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	60f8      	str	r0, [r7, #12]
 800bf70:	60b9      	str	r1, [r7, #8]
 800bf72:	4613      	mov	r3, r2
 800bf74:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bf7c:	b2db      	uxtb	r3, r3
 800bf7e:	2b20      	cmp	r3, #32
 800bf80:	d165      	bne.n	800c04e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d002      	beq.n	800bf8e <HAL_UART_Transmit_DMA+0x26>
 800bf88:	88fb      	ldrh	r3, [r7, #6]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d101      	bne.n	800bf92 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800bf8e:	2301      	movs	r3, #1
 800bf90:	e05e      	b.n	800c050 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bf98:	2b01      	cmp	r3, #1
 800bf9a:	d101      	bne.n	800bfa0 <HAL_UART_Transmit_DMA+0x38>
 800bf9c:	2302      	movs	r3, #2
 800bf9e:	e057      	b.n	800c050 <HAL_UART_Transmit_DMA+0xe8>
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	2201      	movs	r2, #1
 800bfa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 800bfa8:	68ba      	ldr	r2, [r7, #8]
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	88fa      	ldrh	r2, [r7, #6]
 800bfb2:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	88fa      	ldrh	r2, [r7, #6]
 800bfb8:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	2221      	movs	r2, #33	@ 0x21
 800bfc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfcc:	4a22      	ldr	r2, [pc, #136]	@ (800c058 <HAL_UART_Transmit_DMA+0xf0>)
 800bfce:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfd4:	4a21      	ldr	r2, [pc, #132]	@ (800c05c <HAL_UART_Transmit_DMA+0xf4>)
 800bfd6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfdc:	4a20      	ldr	r2, [pc, #128]	@ (800c060 <HAL_UART_Transmit_DMA+0xf8>)
 800bfde:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800bfe8:	f107 0308 	add.w	r3, r7, #8
 800bfec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800bff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bff4:	6819      	ldr	r1, [r3, #0]
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	3304      	adds	r3, #4
 800bffc:	461a      	mov	r2, r3
 800bffe:	88fb      	ldrh	r3, [r7, #6]
 800c000:	f7f9 fb58 	bl	80056b4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c00c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2200      	movs	r2, #0
 800c012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	3314      	adds	r3, #20
 800c01c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c01e:	69bb      	ldr	r3, [r7, #24]
 800c020:	e853 3f00 	ldrex	r3, [r3]
 800c024:	617b      	str	r3, [r7, #20]
   return(result);
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c02c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	3314      	adds	r3, #20
 800c034:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c036:	627a      	str	r2, [r7, #36]	@ 0x24
 800c038:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c03a:	6a39      	ldr	r1, [r7, #32]
 800c03c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c03e:	e841 2300 	strex	r3, r2, [r1]
 800c042:	61fb      	str	r3, [r7, #28]
   return(result);
 800c044:	69fb      	ldr	r3, [r7, #28]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d1e5      	bne.n	800c016 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800c04a:	2300      	movs	r3, #0
 800c04c:	e000      	b.n	800c050 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800c04e:	2302      	movs	r3, #2
  }
}
 800c050:	4618      	mov	r0, r3
 800c052:	3730      	adds	r7, #48	@ 0x30
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}
 800c058:	0800c5c1 	.word	0x0800c5c1
 800c05c:	0800c65b 	.word	0x0800c65b
 800c060:	0800c677 	.word	0x0800c677

0800c064 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b0ba      	sub	sp, #232	@ 0xe8
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	68db      	ldr	r3, [r3, #12]
 800c07c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	695b      	ldr	r3, [r3, #20]
 800c086:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800c08a:	2300      	movs	r3, #0
 800c08c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800c090:	2300      	movs	r3, #0
 800c092:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c09a:	f003 030f 	and.w	r3, r3, #15
 800c09e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800c0a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d10f      	bne.n	800c0ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c0aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0ae:	f003 0320 	and.w	r3, r3, #32
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d009      	beq.n	800c0ca <HAL_UART_IRQHandler+0x66>
 800c0b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c0ba:	f003 0320 	and.w	r3, r3, #32
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d003      	beq.n	800c0ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f000 fc28 	bl	800c918 <UART_Receive_IT>
      return;
 800c0c8:	e256      	b.n	800c578 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c0ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	f000 80de 	beq.w	800c290 <HAL_UART_IRQHandler+0x22c>
 800c0d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c0d8:	f003 0301 	and.w	r3, r3, #1
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d106      	bne.n	800c0ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c0e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c0e4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	f000 80d1 	beq.w	800c290 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c0ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0f2:	f003 0301 	and.w	r3, r3, #1
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d00b      	beq.n	800c112 <HAL_UART_IRQHandler+0xae>
 800c0fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c0fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c102:	2b00      	cmp	r3, #0
 800c104:	d005      	beq.n	800c112 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c10a:	f043 0201 	orr.w	r2, r3, #1
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c116:	f003 0304 	and.w	r3, r3, #4
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d00b      	beq.n	800c136 <HAL_UART_IRQHandler+0xd2>
 800c11e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c122:	f003 0301 	and.w	r3, r3, #1
 800c126:	2b00      	cmp	r3, #0
 800c128:	d005      	beq.n	800c136 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c12e:	f043 0202 	orr.w	r2, r3, #2
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c13a:	f003 0302 	and.w	r3, r3, #2
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d00b      	beq.n	800c15a <HAL_UART_IRQHandler+0xf6>
 800c142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c146:	f003 0301 	and.w	r3, r3, #1
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d005      	beq.n	800c15a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c152:	f043 0204 	orr.w	r2, r3, #4
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c15a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c15e:	f003 0308 	and.w	r3, r3, #8
 800c162:	2b00      	cmp	r3, #0
 800c164:	d011      	beq.n	800c18a <HAL_UART_IRQHandler+0x126>
 800c166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c16a:	f003 0320 	and.w	r3, r3, #32
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d105      	bne.n	800c17e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c176:	f003 0301 	and.w	r3, r3, #1
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d005      	beq.n	800c18a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c182:	f043 0208 	orr.w	r2, r3, #8
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c18e:	2b00      	cmp	r3, #0
 800c190:	f000 81ed 	beq.w	800c56e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c198:	f003 0320 	and.w	r3, r3, #32
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d008      	beq.n	800c1b2 <HAL_UART_IRQHandler+0x14e>
 800c1a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c1a4:	f003 0320 	and.w	r3, r3, #32
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d002      	beq.n	800c1b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f000 fbb3 	bl	800c918 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	695b      	ldr	r3, [r3, #20]
 800c1b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1bc:	2b40      	cmp	r3, #64	@ 0x40
 800c1be:	bf0c      	ite	eq
 800c1c0:	2301      	moveq	r3, #1
 800c1c2:	2300      	movne	r3, #0
 800c1c4:	b2db      	uxtb	r3, r3
 800c1c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1ce:	f003 0308 	and.w	r3, r3, #8
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d103      	bne.n	800c1de <HAL_UART_IRQHandler+0x17a>
 800c1d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d04f      	beq.n	800c27e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f000 fabb 	bl	800c75a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	695b      	ldr	r3, [r3, #20]
 800c1ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1ee:	2b40      	cmp	r3, #64	@ 0x40
 800c1f0:	d141      	bne.n	800c276 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	3314      	adds	r3, #20
 800c1f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c200:	e853 3f00 	ldrex	r3, [r3]
 800c204:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c208:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c20c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c210:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	3314      	adds	r3, #20
 800c21a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c21e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c222:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c226:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c22a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c22e:	e841 2300 	strex	r3, r2, [r1]
 800c232:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c236:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d1d9      	bne.n	800c1f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c242:	2b00      	cmp	r3, #0
 800c244:	d013      	beq.n	800c26e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c24a:	4a7d      	ldr	r2, [pc, #500]	@ (800c440 <HAL_UART_IRQHandler+0x3dc>)
 800c24c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c252:	4618      	mov	r0, r3
 800c254:	f7f9 faf6 	bl	8005844 <HAL_DMA_Abort_IT>
 800c258:	4603      	mov	r3, r0
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d016      	beq.n	800c28c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c262:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c264:	687a      	ldr	r2, [r7, #4]
 800c266:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c268:	4610      	mov	r0, r2
 800c26a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c26c:	e00e      	b.n	800c28c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f000 f990 	bl	800c594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c274:	e00a      	b.n	800c28c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f000 f98c 	bl	800c594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c27c:	e006      	b.n	800c28c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 f988 	bl	800c594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2200      	movs	r2, #0
 800c288:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800c28a:	e170      	b.n	800c56e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c28c:	bf00      	nop
    return;
 800c28e:	e16e      	b.n	800c56e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c294:	2b01      	cmp	r3, #1
 800c296:	f040 814a 	bne.w	800c52e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c29a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c29e:	f003 0310 	and.w	r3, r3, #16
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	f000 8143 	beq.w	800c52e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c2a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c2ac:	f003 0310 	and.w	r3, r3, #16
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	f000 813c 	beq.w	800c52e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	60bb      	str	r3, [r7, #8]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	60bb      	str	r3, [r7, #8]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	60bb      	str	r3, [r7, #8]
 800c2ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	695b      	ldr	r3, [r3, #20]
 800c2d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2d6:	2b40      	cmp	r3, #64	@ 0x40
 800c2d8:	f040 80b4 	bne.w	800c444 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	685b      	ldr	r3, [r3, #4]
 800c2e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c2e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	f000 8140 	beq.w	800c572 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c2f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c2fa:	429a      	cmp	r2, r3
 800c2fc:	f080 8139 	bcs.w	800c572 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c306:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c30c:	69db      	ldr	r3, [r3, #28]
 800c30e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c312:	f000 8088 	beq.w	800c426 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	330c      	adds	r3, #12
 800c31c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c320:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c324:	e853 3f00 	ldrex	r3, [r3]
 800c328:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c32c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c330:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c334:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	330c      	adds	r3, #12
 800c33e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c342:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c346:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c34a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c34e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c352:	e841 2300 	strex	r3, r2, [r1]
 800c356:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c35a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d1d9      	bne.n	800c316 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	3314      	adds	r3, #20
 800c368:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c36a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c36c:	e853 3f00 	ldrex	r3, [r3]
 800c370:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c372:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c374:	f023 0301 	bic.w	r3, r3, #1
 800c378:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	3314      	adds	r3, #20
 800c382:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c386:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c38a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c38c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c38e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c392:	e841 2300 	strex	r3, r2, [r1]
 800c396:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c398:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d1e1      	bne.n	800c362 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	3314      	adds	r3, #20
 800c3a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c3a8:	e853 3f00 	ldrex	r3, [r3]
 800c3ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c3ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c3b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c3b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	3314      	adds	r3, #20
 800c3be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c3c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c3c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c3c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c3ca:	e841 2300 	strex	r3, r2, [r1]
 800c3ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c3d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d1e3      	bne.n	800c39e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2220      	movs	r2, #32
 800c3da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	330c      	adds	r3, #12
 800c3ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c3ee:	e853 3f00 	ldrex	r3, [r3]
 800c3f2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c3f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c3f6:	f023 0310 	bic.w	r3, r3, #16
 800c3fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	330c      	adds	r3, #12
 800c404:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c408:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c40a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c40c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c40e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c410:	e841 2300 	strex	r3, r2, [r1]
 800c414:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c416:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d1e3      	bne.n	800c3e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c420:	4618      	mov	r0, r3
 800c422:	f7f9 f99f 	bl	8005764 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c42e:	b29b      	uxth	r3, r3
 800c430:	1ad3      	subs	r3, r2, r3
 800c432:	b29b      	uxth	r3, r3
 800c434:	4619      	mov	r1, r3
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f000 f8b6 	bl	800c5a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c43c:	e099      	b.n	800c572 <HAL_UART_IRQHandler+0x50e>
 800c43e:	bf00      	nop
 800c440:	0800c821 	.word	0x0800c821
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c44c:	b29b      	uxth	r3, r3
 800c44e:	1ad3      	subs	r3, r2, r3
 800c450:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c458:	b29b      	uxth	r3, r3
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	f000 808b 	beq.w	800c576 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c460:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c464:	2b00      	cmp	r3, #0
 800c466:	f000 8086 	beq.w	800c576 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	330c      	adds	r3, #12
 800c470:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c474:	e853 3f00 	ldrex	r3, [r3]
 800c478:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c47a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c47c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c480:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	330c      	adds	r3, #12
 800c48a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800c48e:	647a      	str	r2, [r7, #68]	@ 0x44
 800c490:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c492:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c494:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c496:	e841 2300 	strex	r3, r2, [r1]
 800c49a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c49c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d1e3      	bne.n	800c46a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	3314      	adds	r3, #20
 800c4a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ac:	e853 3f00 	ldrex	r3, [r3]
 800c4b0:	623b      	str	r3, [r7, #32]
   return(result);
 800c4b2:	6a3b      	ldr	r3, [r7, #32]
 800c4b4:	f023 0301 	bic.w	r3, r3, #1
 800c4b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	3314      	adds	r3, #20
 800c4c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c4c6:	633a      	str	r2, [r7, #48]	@ 0x30
 800c4c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c4cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c4ce:	e841 2300 	strex	r3, r2, [r1]
 800c4d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c4d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d1e3      	bne.n	800c4a2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2220      	movs	r2, #32
 800c4de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	330c      	adds	r3, #12
 800c4ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	e853 3f00 	ldrex	r3, [r3]
 800c4f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	f023 0310 	bic.w	r3, r3, #16
 800c4fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	330c      	adds	r3, #12
 800c508:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800c50c:	61fa      	str	r2, [r7, #28]
 800c50e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c510:	69b9      	ldr	r1, [r7, #24]
 800c512:	69fa      	ldr	r2, [r7, #28]
 800c514:	e841 2300 	strex	r3, r2, [r1]
 800c518:	617b      	str	r3, [r7, #20]
   return(result);
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d1e3      	bne.n	800c4e8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c520:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c524:	4619      	mov	r1, r3
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f000 f83e 	bl	800c5a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c52c:	e023      	b.n	800c576 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c52e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c536:	2b00      	cmp	r3, #0
 800c538:	d009      	beq.n	800c54e <HAL_UART_IRQHandler+0x4ea>
 800c53a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c53e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c542:	2b00      	cmp	r3, #0
 800c544:	d003      	beq.n	800c54e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f000 f97e 	bl	800c848 <UART_Transmit_IT>
    return;
 800c54c:	e014      	b.n	800c578 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c54e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c556:	2b00      	cmp	r3, #0
 800c558:	d00e      	beq.n	800c578 <HAL_UART_IRQHandler+0x514>
 800c55a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c55e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c562:	2b00      	cmp	r3, #0
 800c564:	d008      	beq.n	800c578 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f000 f9be 	bl	800c8e8 <UART_EndTransmit_IT>
    return;
 800c56c:	e004      	b.n	800c578 <HAL_UART_IRQHandler+0x514>
    return;
 800c56e:	bf00      	nop
 800c570:	e002      	b.n	800c578 <HAL_UART_IRQHandler+0x514>
      return;
 800c572:	bf00      	nop
 800c574:	e000      	b.n	800c578 <HAL_UART_IRQHandler+0x514>
      return;
 800c576:	bf00      	nop
  }
}
 800c578:	37e8      	adds	r7, #232	@ 0xe8
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}
 800c57e:	bf00      	nop

0800c580 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c580:	b480      	push	{r7}
 800c582:	b083      	sub	sp, #12
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800c588:	bf00      	nop
 800c58a:	370c      	adds	r7, #12
 800c58c:	46bd      	mov	sp, r7
 800c58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c592:	4770      	bx	lr

0800c594 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c594:	b480      	push	{r7}
 800c596:	b083      	sub	sp, #12
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c59c:	bf00      	nop
 800c59e:	370c      	adds	r7, #12
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a6:	4770      	bx	lr

0800c5a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	b083      	sub	sp, #12
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
 800c5b0:	460b      	mov	r3, r1
 800c5b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c5b4:	bf00      	nop
 800c5b6:	370c      	adds	r7, #12
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5be:	4770      	bx	lr

0800c5c0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b090      	sub	sp, #64	@ 0x40
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d137      	bne.n	800c64c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800c5dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5de:	2200      	movs	r2, #0
 800c5e0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c5e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	3314      	adds	r3, #20
 800c5e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ec:	e853 3f00 	ldrex	r3, [r3]
 800c5f0:	623b      	str	r3, [r7, #32]
   return(result);
 800c5f2:	6a3b      	ldr	r3, [r7, #32]
 800c5f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c5f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c5fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	3314      	adds	r3, #20
 800c600:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c602:	633a      	str	r2, [r7, #48]	@ 0x30
 800c604:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c606:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c608:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c60a:	e841 2300 	strex	r3, r2, [r1]
 800c60e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c612:	2b00      	cmp	r3, #0
 800c614:	d1e5      	bne.n	800c5e2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	330c      	adds	r3, #12
 800c61c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	e853 3f00 	ldrex	r3, [r3]
 800c624:	60fb      	str	r3, [r7, #12]
   return(result);
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c62c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c62e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	330c      	adds	r3, #12
 800c634:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c636:	61fa      	str	r2, [r7, #28]
 800c638:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c63a:	69b9      	ldr	r1, [r7, #24]
 800c63c:	69fa      	ldr	r2, [r7, #28]
 800c63e:	e841 2300 	strex	r3, r2, [r1]
 800c642:	617b      	str	r3, [r7, #20]
   return(result);
 800c644:	697b      	ldr	r3, [r7, #20]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d1e5      	bne.n	800c616 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c64a:	e002      	b.n	800c652 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c64c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c64e:	f7f5 ffa3 	bl	8002598 <HAL_UART_TxCpltCallback>
}
 800c652:	bf00      	nop
 800c654:	3740      	adds	r7, #64	@ 0x40
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}

0800c65a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c65a:	b580      	push	{r7, lr}
 800c65c:	b084      	sub	sp, #16
 800c65e:	af00      	add	r7, sp, #0
 800c660:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c666:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c668:	68f8      	ldr	r0, [r7, #12]
 800c66a:	f7ff ff89 	bl	800c580 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c66e:	bf00      	nop
 800c670:	3710      	adds	r7, #16
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}

0800c676 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c676:	b580      	push	{r7, lr}
 800c678:	b084      	sub	sp, #16
 800c67a:	af00      	add	r7, sp, #0
 800c67c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c67e:	2300      	movs	r3, #0
 800c680:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c686:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	695b      	ldr	r3, [r3, #20]
 800c68e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c692:	2b80      	cmp	r3, #128	@ 0x80
 800c694:	bf0c      	ite	eq
 800c696:	2301      	moveq	r3, #1
 800c698:	2300      	movne	r3, #0
 800c69a:	b2db      	uxtb	r3, r3
 800c69c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c6a4:	b2db      	uxtb	r3, r3
 800c6a6:	2b21      	cmp	r3, #33	@ 0x21
 800c6a8:	d108      	bne.n	800c6bc <UART_DMAError+0x46>
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d005      	beq.n	800c6bc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800c6b6:	68b8      	ldr	r0, [r7, #8]
 800c6b8:	f000 f827 	bl	800c70a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	695b      	ldr	r3, [r3, #20]
 800c6c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6c6:	2b40      	cmp	r3, #64	@ 0x40
 800c6c8:	bf0c      	ite	eq
 800c6ca:	2301      	moveq	r3, #1
 800c6cc:	2300      	movne	r3, #0
 800c6ce:	b2db      	uxtb	r3, r3
 800c6d0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c6d8:	b2db      	uxtb	r3, r3
 800c6da:	2b22      	cmp	r3, #34	@ 0x22
 800c6dc:	d108      	bne.n	800c6f0 <UART_DMAError+0x7a>
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d005      	beq.n	800c6f0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800c6ea:	68b8      	ldr	r0, [r7, #8]
 800c6ec:	f000 f835 	bl	800c75a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6f4:	f043 0210 	orr.w	r2, r3, #16
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c6fc:	68b8      	ldr	r0, [r7, #8]
 800c6fe:	f7ff ff49 	bl	800c594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c702:	bf00      	nop
 800c704:	3710      	adds	r7, #16
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}

0800c70a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c70a:	b480      	push	{r7}
 800c70c:	b089      	sub	sp, #36	@ 0x24
 800c70e:	af00      	add	r7, sp, #0
 800c710:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	330c      	adds	r3, #12
 800c718:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	e853 3f00 	ldrex	r3, [r3]
 800c720:	60bb      	str	r3, [r7, #8]
   return(result);
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c728:	61fb      	str	r3, [r7, #28]
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	330c      	adds	r3, #12
 800c730:	69fa      	ldr	r2, [r7, #28]
 800c732:	61ba      	str	r2, [r7, #24]
 800c734:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c736:	6979      	ldr	r1, [r7, #20]
 800c738:	69ba      	ldr	r2, [r7, #24]
 800c73a:	e841 2300 	strex	r3, r2, [r1]
 800c73e:	613b      	str	r3, [r7, #16]
   return(result);
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d1e5      	bne.n	800c712 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2220      	movs	r2, #32
 800c74a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 800c74e:	bf00      	nop
 800c750:	3724      	adds	r7, #36	@ 0x24
 800c752:	46bd      	mov	sp, r7
 800c754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c758:	4770      	bx	lr

0800c75a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c75a:	b480      	push	{r7}
 800c75c:	b095      	sub	sp, #84	@ 0x54
 800c75e:	af00      	add	r7, sp, #0
 800c760:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	330c      	adds	r3, #12
 800c768:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c76a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c76c:	e853 3f00 	ldrex	r3, [r3]
 800c770:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c774:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c778:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	330c      	adds	r3, #12
 800c780:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c782:	643a      	str	r2, [r7, #64]	@ 0x40
 800c784:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c786:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c788:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c78a:	e841 2300 	strex	r3, r2, [r1]
 800c78e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c792:	2b00      	cmp	r3, #0
 800c794:	d1e5      	bne.n	800c762 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	3314      	adds	r3, #20
 800c79c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c79e:	6a3b      	ldr	r3, [r7, #32]
 800c7a0:	e853 3f00 	ldrex	r3, [r3]
 800c7a4:	61fb      	str	r3, [r7, #28]
   return(result);
 800c7a6:	69fb      	ldr	r3, [r7, #28]
 800c7a8:	f023 0301 	bic.w	r3, r3, #1
 800c7ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	3314      	adds	r3, #20
 800c7b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c7b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c7b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c7bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c7be:	e841 2300 	strex	r3, r2, [r1]
 800c7c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d1e5      	bne.n	800c796 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7ce:	2b01      	cmp	r3, #1
 800c7d0:	d119      	bne.n	800c806 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	330c      	adds	r3, #12
 800c7d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	e853 3f00 	ldrex	r3, [r3]
 800c7e0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	f023 0310 	bic.w	r3, r3, #16
 800c7e8:	647b      	str	r3, [r7, #68]	@ 0x44
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	330c      	adds	r3, #12
 800c7f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c7f2:	61ba      	str	r2, [r7, #24]
 800c7f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7f6:	6979      	ldr	r1, [r7, #20]
 800c7f8:	69ba      	ldr	r2, [r7, #24]
 800c7fa:	e841 2300 	strex	r3, r2, [r1]
 800c7fe:	613b      	str	r3, [r7, #16]
   return(result);
 800c800:	693b      	ldr	r3, [r7, #16]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d1e5      	bne.n	800c7d2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2220      	movs	r2, #32
 800c80a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2200      	movs	r2, #0
 800c812:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800c814:	bf00      	nop
 800c816:	3754      	adds	r7, #84	@ 0x54
 800c818:	46bd      	mov	sp, r7
 800c81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81e:	4770      	bx	lr

0800c820 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b084      	sub	sp, #16
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c82c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	2200      	movs	r2, #0
 800c832:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	2200      	movs	r2, #0
 800c838:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c83a:	68f8      	ldr	r0, [r7, #12]
 800c83c:	f7ff feaa 	bl	800c594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c840:	bf00      	nop
 800c842:	3710      	adds	r7, #16
 800c844:	46bd      	mov	sp, r7
 800c846:	bd80      	pop	{r7, pc}

0800c848 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c848:	b480      	push	{r7}
 800c84a:	b085      	sub	sp, #20
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c856:	b2db      	uxtb	r3, r3
 800c858:	2b21      	cmp	r3, #33	@ 0x21
 800c85a:	d13e      	bne.n	800c8da <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	689b      	ldr	r3, [r3, #8]
 800c860:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c864:	d114      	bne.n	800c890 <UART_Transmit_IT+0x48>
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	691b      	ldr	r3, [r3, #16]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d110      	bne.n	800c890 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6a1b      	ldr	r3, [r3, #32]
 800c872:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	881b      	ldrh	r3, [r3, #0]
 800c878:	461a      	mov	r2, r3
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c882:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6a1b      	ldr	r3, [r3, #32]
 800c888:	1c9a      	adds	r2, r3, #2
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	621a      	str	r2, [r3, #32]
 800c88e:	e008      	b.n	800c8a2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6a1b      	ldr	r3, [r3, #32]
 800c894:	1c59      	adds	r1, r3, #1
 800c896:	687a      	ldr	r2, [r7, #4]
 800c898:	6211      	str	r1, [r2, #32]
 800c89a:	781a      	ldrb	r2, [r3, #0]
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c8a6:	b29b      	uxth	r3, r3
 800c8a8:	3b01      	subs	r3, #1
 800c8aa:	b29b      	uxth	r3, r3
 800c8ac:	687a      	ldr	r2, [r7, #4]
 800c8ae:	4619      	mov	r1, r3
 800c8b0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d10f      	bne.n	800c8d6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	68da      	ldr	r2, [r3, #12]
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c8c4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	68da      	ldr	r2, [r3, #12]
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c8d4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	e000      	b.n	800c8dc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c8da:	2302      	movs	r3, #2
  }
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3714      	adds	r7, #20
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e6:	4770      	bx	lr

0800c8e8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b082      	sub	sp, #8
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	68da      	ldr	r2, [r3, #12]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c8fe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2220      	movs	r2, #32
 800c904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f7f5 fe45 	bl	8002598 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c90e:	2300      	movs	r3, #0
}
 800c910:	4618      	mov	r0, r3
 800c912:	3708      	adds	r7, #8
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}

0800c918 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b08c      	sub	sp, #48	@ 0x30
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c926:	b2db      	uxtb	r3, r3
 800c928:	2b22      	cmp	r3, #34	@ 0x22
 800c92a:	f040 80ab 	bne.w	800ca84 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	689b      	ldr	r3, [r3, #8]
 800c932:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c936:	d117      	bne.n	800c968 <UART_Receive_IT+0x50>
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	691b      	ldr	r3, [r3, #16]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d113      	bne.n	800c968 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c940:	2300      	movs	r3, #0
 800c942:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c948:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	685b      	ldr	r3, [r3, #4]
 800c950:	b29b      	uxth	r3, r3
 800c952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c956:	b29a      	uxth	r2, r3
 800c958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c95a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c960:	1c9a      	adds	r2, r3, #2
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	629a      	str	r2, [r3, #40]	@ 0x28
 800c966:	e026      	b.n	800c9b6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c96c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800c96e:	2300      	movs	r3, #0
 800c970:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	689b      	ldr	r3, [r3, #8]
 800c976:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c97a:	d007      	beq.n	800c98c <UART_Receive_IT+0x74>
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	689b      	ldr	r3, [r3, #8]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d10a      	bne.n	800c99a <UART_Receive_IT+0x82>
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	691b      	ldr	r3, [r3, #16]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d106      	bne.n	800c99a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	685b      	ldr	r3, [r3, #4]
 800c992:	b2da      	uxtb	r2, r3
 800c994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c996:	701a      	strb	r2, [r3, #0]
 800c998:	e008      	b.n	800c9ac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	685b      	ldr	r3, [r3, #4]
 800c9a0:	b2db      	uxtb	r3, r3
 800c9a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c9a6:	b2da      	uxtb	r2, r3
 800c9a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9aa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9b0:	1c5a      	adds	r2, r3, #1
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c9ba:	b29b      	uxth	r3, r3
 800c9bc:	3b01      	subs	r3, #1
 800c9be:	b29b      	uxth	r3, r3
 800c9c0:	687a      	ldr	r2, [r7, #4]
 800c9c2:	4619      	mov	r1, r3
 800c9c4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d15a      	bne.n	800ca80 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	68da      	ldr	r2, [r3, #12]
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f022 0220 	bic.w	r2, r2, #32
 800c9d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	68da      	ldr	r2, [r3, #12]
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c9e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	695a      	ldr	r2, [r3, #20]
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f022 0201 	bic.w	r2, r2, #1
 800c9f8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2220      	movs	r2, #32
 800c9fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca06:	2b01      	cmp	r3, #1
 800ca08:	d135      	bne.n	800ca76 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	330c      	adds	r3, #12
 800ca16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	e853 3f00 	ldrex	r3, [r3]
 800ca1e:	613b      	str	r3, [r7, #16]
   return(result);
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	f023 0310 	bic.w	r3, r3, #16
 800ca26:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	330c      	adds	r3, #12
 800ca2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca30:	623a      	str	r2, [r7, #32]
 800ca32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca34:	69f9      	ldr	r1, [r7, #28]
 800ca36:	6a3a      	ldr	r2, [r7, #32]
 800ca38:	e841 2300 	strex	r3, r2, [r1]
 800ca3c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ca3e:	69bb      	ldr	r3, [r7, #24]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d1e5      	bne.n	800ca10 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f003 0310 	and.w	r3, r3, #16
 800ca4e:	2b10      	cmp	r3, #16
 800ca50:	d10a      	bne.n	800ca68 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ca52:	2300      	movs	r3, #0
 800ca54:	60fb      	str	r3, [r7, #12]
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	60fb      	str	r3, [r7, #12]
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	685b      	ldr	r3, [r3, #4]
 800ca64:	60fb      	str	r3, [r7, #12]
 800ca66:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ca6c:	4619      	mov	r1, r3
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f7ff fd9a 	bl	800c5a8 <HAL_UARTEx_RxEventCallback>
 800ca74:	e002      	b.n	800ca7c <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f7f5 fd84 	bl	8002584 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	e002      	b.n	800ca86 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800ca80:	2300      	movs	r3, #0
 800ca82:	e000      	b.n	800ca86 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800ca84:	2302      	movs	r3, #2
  }
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3730      	adds	r7, #48	@ 0x30
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}
	...

0800ca90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ca90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ca94:	b0c0      	sub	sp, #256	@ 0x100
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ca9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	691b      	ldr	r3, [r3, #16]
 800caa4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800caa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800caac:	68d9      	ldr	r1, [r3, #12]
 800caae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cab2:	681a      	ldr	r2, [r3, #0]
 800cab4:	ea40 0301 	orr.w	r3, r0, r1
 800cab8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800caba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cabe:	689a      	ldr	r2, [r3, #8]
 800cac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cac4:	691b      	ldr	r3, [r3, #16]
 800cac6:	431a      	orrs	r2, r3
 800cac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cacc:	695b      	ldr	r3, [r3, #20]
 800cace:	431a      	orrs	r2, r3
 800cad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cad4:	69db      	ldr	r3, [r3, #28]
 800cad6:	4313      	orrs	r3, r2
 800cad8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800cadc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	68db      	ldr	r3, [r3, #12]
 800cae4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800cae8:	f021 010c 	bic.w	r1, r1, #12
 800caec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800caf0:	681a      	ldr	r2, [r3, #0]
 800caf2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800caf6:	430b      	orrs	r3, r1
 800caf8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cafa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	695b      	ldr	r3, [r3, #20]
 800cb02:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800cb06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cb0a:	6999      	ldr	r1, [r3, #24]
 800cb0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cb10:	681a      	ldr	r2, [r3, #0]
 800cb12:	ea40 0301 	orr.w	r3, r0, r1
 800cb16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cb18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cb1c:	681a      	ldr	r2, [r3, #0]
 800cb1e:	4b8f      	ldr	r3, [pc, #572]	@ (800cd5c <UART_SetConfig+0x2cc>)
 800cb20:	429a      	cmp	r2, r3
 800cb22:	d005      	beq.n	800cb30 <UART_SetConfig+0xa0>
 800cb24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cb28:	681a      	ldr	r2, [r3, #0]
 800cb2a:	4b8d      	ldr	r3, [pc, #564]	@ (800cd60 <UART_SetConfig+0x2d0>)
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	d104      	bne.n	800cb3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cb30:	f7fc ff9c 	bl	8009a6c <HAL_RCC_GetPCLK2Freq>
 800cb34:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800cb38:	e003      	b.n	800cb42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cb3a:	f7fc ff83 	bl	8009a44 <HAL_RCC_GetPCLK1Freq>
 800cb3e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cb42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cb46:	69db      	ldr	r3, [r3, #28]
 800cb48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cb4c:	f040 810c 	bne.w	800cd68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cb50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cb54:	2200      	movs	r2, #0
 800cb56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800cb5a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800cb5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800cb62:	4622      	mov	r2, r4
 800cb64:	462b      	mov	r3, r5
 800cb66:	1891      	adds	r1, r2, r2
 800cb68:	65b9      	str	r1, [r7, #88]	@ 0x58
 800cb6a:	415b      	adcs	r3, r3
 800cb6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cb6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800cb72:	4621      	mov	r1, r4
 800cb74:	eb12 0801 	adds.w	r8, r2, r1
 800cb78:	4629      	mov	r1, r5
 800cb7a:	eb43 0901 	adc.w	r9, r3, r1
 800cb7e:	f04f 0200 	mov.w	r2, #0
 800cb82:	f04f 0300 	mov.w	r3, #0
 800cb86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cb8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cb8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cb92:	4690      	mov	r8, r2
 800cb94:	4699      	mov	r9, r3
 800cb96:	4623      	mov	r3, r4
 800cb98:	eb18 0303 	adds.w	r3, r8, r3
 800cb9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800cba0:	462b      	mov	r3, r5
 800cba2:	eb49 0303 	adc.w	r3, r9, r3
 800cba6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cbaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cbae:	685b      	ldr	r3, [r3, #4]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cbb6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800cbba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800cbbe:	460b      	mov	r3, r1
 800cbc0:	18db      	adds	r3, r3, r3
 800cbc2:	653b      	str	r3, [r7, #80]	@ 0x50
 800cbc4:	4613      	mov	r3, r2
 800cbc6:	eb42 0303 	adc.w	r3, r2, r3
 800cbca:	657b      	str	r3, [r7, #84]	@ 0x54
 800cbcc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800cbd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800cbd4:	f7f4 f858 	bl	8000c88 <__aeabi_uldivmod>
 800cbd8:	4602      	mov	r2, r0
 800cbda:	460b      	mov	r3, r1
 800cbdc:	4b61      	ldr	r3, [pc, #388]	@ (800cd64 <UART_SetConfig+0x2d4>)
 800cbde:	fba3 2302 	umull	r2, r3, r3, r2
 800cbe2:	095b      	lsrs	r3, r3, #5
 800cbe4:	011c      	lsls	r4, r3, #4
 800cbe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cbea:	2200      	movs	r2, #0
 800cbec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cbf0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800cbf4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800cbf8:	4642      	mov	r2, r8
 800cbfa:	464b      	mov	r3, r9
 800cbfc:	1891      	adds	r1, r2, r2
 800cbfe:	64b9      	str	r1, [r7, #72]	@ 0x48
 800cc00:	415b      	adcs	r3, r3
 800cc02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cc04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800cc08:	4641      	mov	r1, r8
 800cc0a:	eb12 0a01 	adds.w	sl, r2, r1
 800cc0e:	4649      	mov	r1, r9
 800cc10:	eb43 0b01 	adc.w	fp, r3, r1
 800cc14:	f04f 0200 	mov.w	r2, #0
 800cc18:	f04f 0300 	mov.w	r3, #0
 800cc1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cc20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cc24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cc28:	4692      	mov	sl, r2
 800cc2a:	469b      	mov	fp, r3
 800cc2c:	4643      	mov	r3, r8
 800cc2e:	eb1a 0303 	adds.w	r3, sl, r3
 800cc32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cc36:	464b      	mov	r3, r9
 800cc38:	eb4b 0303 	adc.w	r3, fp, r3
 800cc3c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800cc40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cc44:	685b      	ldr	r3, [r3, #4]
 800cc46:	2200      	movs	r2, #0
 800cc48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cc4c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800cc50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800cc54:	460b      	mov	r3, r1
 800cc56:	18db      	adds	r3, r3, r3
 800cc58:	643b      	str	r3, [r7, #64]	@ 0x40
 800cc5a:	4613      	mov	r3, r2
 800cc5c:	eb42 0303 	adc.w	r3, r2, r3
 800cc60:	647b      	str	r3, [r7, #68]	@ 0x44
 800cc62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800cc66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800cc6a:	f7f4 f80d 	bl	8000c88 <__aeabi_uldivmod>
 800cc6e:	4602      	mov	r2, r0
 800cc70:	460b      	mov	r3, r1
 800cc72:	4611      	mov	r1, r2
 800cc74:	4b3b      	ldr	r3, [pc, #236]	@ (800cd64 <UART_SetConfig+0x2d4>)
 800cc76:	fba3 2301 	umull	r2, r3, r3, r1
 800cc7a:	095b      	lsrs	r3, r3, #5
 800cc7c:	2264      	movs	r2, #100	@ 0x64
 800cc7e:	fb02 f303 	mul.w	r3, r2, r3
 800cc82:	1acb      	subs	r3, r1, r3
 800cc84:	00db      	lsls	r3, r3, #3
 800cc86:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800cc8a:	4b36      	ldr	r3, [pc, #216]	@ (800cd64 <UART_SetConfig+0x2d4>)
 800cc8c:	fba3 2302 	umull	r2, r3, r3, r2
 800cc90:	095b      	lsrs	r3, r3, #5
 800cc92:	005b      	lsls	r3, r3, #1
 800cc94:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800cc98:	441c      	add	r4, r3
 800cc9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cc9e:	2200      	movs	r2, #0
 800cca0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cca4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800cca8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800ccac:	4642      	mov	r2, r8
 800ccae:	464b      	mov	r3, r9
 800ccb0:	1891      	adds	r1, r2, r2
 800ccb2:	63b9      	str	r1, [r7, #56]	@ 0x38
 800ccb4:	415b      	adcs	r3, r3
 800ccb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ccb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800ccbc:	4641      	mov	r1, r8
 800ccbe:	1851      	adds	r1, r2, r1
 800ccc0:	6339      	str	r1, [r7, #48]	@ 0x30
 800ccc2:	4649      	mov	r1, r9
 800ccc4:	414b      	adcs	r3, r1
 800ccc6:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccc8:	f04f 0200 	mov.w	r2, #0
 800cccc:	f04f 0300 	mov.w	r3, #0
 800ccd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800ccd4:	4659      	mov	r1, fp
 800ccd6:	00cb      	lsls	r3, r1, #3
 800ccd8:	4651      	mov	r1, sl
 800ccda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ccde:	4651      	mov	r1, sl
 800cce0:	00ca      	lsls	r2, r1, #3
 800cce2:	4610      	mov	r0, r2
 800cce4:	4619      	mov	r1, r3
 800cce6:	4603      	mov	r3, r0
 800cce8:	4642      	mov	r2, r8
 800ccea:	189b      	adds	r3, r3, r2
 800ccec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ccf0:	464b      	mov	r3, r9
 800ccf2:	460a      	mov	r2, r1
 800ccf4:	eb42 0303 	adc.w	r3, r2, r3
 800ccf8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ccfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd00:	685b      	ldr	r3, [r3, #4]
 800cd02:	2200      	movs	r2, #0
 800cd04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cd08:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800cd0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800cd10:	460b      	mov	r3, r1
 800cd12:	18db      	adds	r3, r3, r3
 800cd14:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cd16:	4613      	mov	r3, r2
 800cd18:	eb42 0303 	adc.w	r3, r2, r3
 800cd1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cd1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800cd22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800cd26:	f7f3 ffaf 	bl	8000c88 <__aeabi_uldivmod>
 800cd2a:	4602      	mov	r2, r0
 800cd2c:	460b      	mov	r3, r1
 800cd2e:	4b0d      	ldr	r3, [pc, #52]	@ (800cd64 <UART_SetConfig+0x2d4>)
 800cd30:	fba3 1302 	umull	r1, r3, r3, r2
 800cd34:	095b      	lsrs	r3, r3, #5
 800cd36:	2164      	movs	r1, #100	@ 0x64
 800cd38:	fb01 f303 	mul.w	r3, r1, r3
 800cd3c:	1ad3      	subs	r3, r2, r3
 800cd3e:	00db      	lsls	r3, r3, #3
 800cd40:	3332      	adds	r3, #50	@ 0x32
 800cd42:	4a08      	ldr	r2, [pc, #32]	@ (800cd64 <UART_SetConfig+0x2d4>)
 800cd44:	fba2 2303 	umull	r2, r3, r2, r3
 800cd48:	095b      	lsrs	r3, r3, #5
 800cd4a:	f003 0207 	and.w	r2, r3, #7
 800cd4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	4422      	add	r2, r4
 800cd56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800cd58:	e106      	b.n	800cf68 <UART_SetConfig+0x4d8>
 800cd5a:	bf00      	nop
 800cd5c:	40011000 	.word	0x40011000
 800cd60:	40011400 	.word	0x40011400
 800cd64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cd68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cd72:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800cd76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800cd7a:	4642      	mov	r2, r8
 800cd7c:	464b      	mov	r3, r9
 800cd7e:	1891      	adds	r1, r2, r2
 800cd80:	6239      	str	r1, [r7, #32]
 800cd82:	415b      	adcs	r3, r3
 800cd84:	627b      	str	r3, [r7, #36]	@ 0x24
 800cd86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cd8a:	4641      	mov	r1, r8
 800cd8c:	1854      	adds	r4, r2, r1
 800cd8e:	4649      	mov	r1, r9
 800cd90:	eb43 0501 	adc.w	r5, r3, r1
 800cd94:	f04f 0200 	mov.w	r2, #0
 800cd98:	f04f 0300 	mov.w	r3, #0
 800cd9c:	00eb      	lsls	r3, r5, #3
 800cd9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cda2:	00e2      	lsls	r2, r4, #3
 800cda4:	4614      	mov	r4, r2
 800cda6:	461d      	mov	r5, r3
 800cda8:	4643      	mov	r3, r8
 800cdaa:	18e3      	adds	r3, r4, r3
 800cdac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cdb0:	464b      	mov	r3, r9
 800cdb2:	eb45 0303 	adc.w	r3, r5, r3
 800cdb6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cdba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cdbe:	685b      	ldr	r3, [r3, #4]
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cdc6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800cdca:	f04f 0200 	mov.w	r2, #0
 800cdce:	f04f 0300 	mov.w	r3, #0
 800cdd2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800cdd6:	4629      	mov	r1, r5
 800cdd8:	008b      	lsls	r3, r1, #2
 800cdda:	4621      	mov	r1, r4
 800cddc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cde0:	4621      	mov	r1, r4
 800cde2:	008a      	lsls	r2, r1, #2
 800cde4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800cde8:	f7f3 ff4e 	bl	8000c88 <__aeabi_uldivmod>
 800cdec:	4602      	mov	r2, r0
 800cdee:	460b      	mov	r3, r1
 800cdf0:	4b60      	ldr	r3, [pc, #384]	@ (800cf74 <UART_SetConfig+0x4e4>)
 800cdf2:	fba3 2302 	umull	r2, r3, r3, r2
 800cdf6:	095b      	lsrs	r3, r3, #5
 800cdf8:	011c      	lsls	r4, r3, #4
 800cdfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cdfe:	2200      	movs	r2, #0
 800ce00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ce04:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ce08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800ce0c:	4642      	mov	r2, r8
 800ce0e:	464b      	mov	r3, r9
 800ce10:	1891      	adds	r1, r2, r2
 800ce12:	61b9      	str	r1, [r7, #24]
 800ce14:	415b      	adcs	r3, r3
 800ce16:	61fb      	str	r3, [r7, #28]
 800ce18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ce1c:	4641      	mov	r1, r8
 800ce1e:	1851      	adds	r1, r2, r1
 800ce20:	6139      	str	r1, [r7, #16]
 800ce22:	4649      	mov	r1, r9
 800ce24:	414b      	adcs	r3, r1
 800ce26:	617b      	str	r3, [r7, #20]
 800ce28:	f04f 0200 	mov.w	r2, #0
 800ce2c:	f04f 0300 	mov.w	r3, #0
 800ce30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ce34:	4659      	mov	r1, fp
 800ce36:	00cb      	lsls	r3, r1, #3
 800ce38:	4651      	mov	r1, sl
 800ce3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ce3e:	4651      	mov	r1, sl
 800ce40:	00ca      	lsls	r2, r1, #3
 800ce42:	4610      	mov	r0, r2
 800ce44:	4619      	mov	r1, r3
 800ce46:	4603      	mov	r3, r0
 800ce48:	4642      	mov	r2, r8
 800ce4a:	189b      	adds	r3, r3, r2
 800ce4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ce50:	464b      	mov	r3, r9
 800ce52:	460a      	mov	r2, r1
 800ce54:	eb42 0303 	adc.w	r3, r2, r3
 800ce58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ce5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce60:	685b      	ldr	r3, [r3, #4]
 800ce62:	2200      	movs	r2, #0
 800ce64:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ce66:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800ce68:	f04f 0200 	mov.w	r2, #0
 800ce6c:	f04f 0300 	mov.w	r3, #0
 800ce70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800ce74:	4649      	mov	r1, r9
 800ce76:	008b      	lsls	r3, r1, #2
 800ce78:	4641      	mov	r1, r8
 800ce7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ce7e:	4641      	mov	r1, r8
 800ce80:	008a      	lsls	r2, r1, #2
 800ce82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800ce86:	f7f3 feff 	bl	8000c88 <__aeabi_uldivmod>
 800ce8a:	4602      	mov	r2, r0
 800ce8c:	460b      	mov	r3, r1
 800ce8e:	4611      	mov	r1, r2
 800ce90:	4b38      	ldr	r3, [pc, #224]	@ (800cf74 <UART_SetConfig+0x4e4>)
 800ce92:	fba3 2301 	umull	r2, r3, r3, r1
 800ce96:	095b      	lsrs	r3, r3, #5
 800ce98:	2264      	movs	r2, #100	@ 0x64
 800ce9a:	fb02 f303 	mul.w	r3, r2, r3
 800ce9e:	1acb      	subs	r3, r1, r3
 800cea0:	011b      	lsls	r3, r3, #4
 800cea2:	3332      	adds	r3, #50	@ 0x32
 800cea4:	4a33      	ldr	r2, [pc, #204]	@ (800cf74 <UART_SetConfig+0x4e4>)
 800cea6:	fba2 2303 	umull	r2, r3, r2, r3
 800ceaa:	095b      	lsrs	r3, r3, #5
 800ceac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ceb0:	441c      	add	r4, r3
 800ceb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	673b      	str	r3, [r7, #112]	@ 0x70
 800ceba:	677a      	str	r2, [r7, #116]	@ 0x74
 800cebc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800cec0:	4642      	mov	r2, r8
 800cec2:	464b      	mov	r3, r9
 800cec4:	1891      	adds	r1, r2, r2
 800cec6:	60b9      	str	r1, [r7, #8]
 800cec8:	415b      	adcs	r3, r3
 800ceca:	60fb      	str	r3, [r7, #12]
 800cecc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ced0:	4641      	mov	r1, r8
 800ced2:	1851      	adds	r1, r2, r1
 800ced4:	6039      	str	r1, [r7, #0]
 800ced6:	4649      	mov	r1, r9
 800ced8:	414b      	adcs	r3, r1
 800ceda:	607b      	str	r3, [r7, #4]
 800cedc:	f04f 0200 	mov.w	r2, #0
 800cee0:	f04f 0300 	mov.w	r3, #0
 800cee4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cee8:	4659      	mov	r1, fp
 800ceea:	00cb      	lsls	r3, r1, #3
 800ceec:	4651      	mov	r1, sl
 800ceee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cef2:	4651      	mov	r1, sl
 800cef4:	00ca      	lsls	r2, r1, #3
 800cef6:	4610      	mov	r0, r2
 800cef8:	4619      	mov	r1, r3
 800cefa:	4603      	mov	r3, r0
 800cefc:	4642      	mov	r2, r8
 800cefe:	189b      	adds	r3, r3, r2
 800cf00:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cf02:	464b      	mov	r3, r9
 800cf04:	460a      	mov	r2, r1
 800cf06:	eb42 0303 	adc.w	r3, r2, r3
 800cf0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cf0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf10:	685b      	ldr	r3, [r3, #4]
 800cf12:	2200      	movs	r2, #0
 800cf14:	663b      	str	r3, [r7, #96]	@ 0x60
 800cf16:	667a      	str	r2, [r7, #100]	@ 0x64
 800cf18:	f04f 0200 	mov.w	r2, #0
 800cf1c:	f04f 0300 	mov.w	r3, #0
 800cf20:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800cf24:	4649      	mov	r1, r9
 800cf26:	008b      	lsls	r3, r1, #2
 800cf28:	4641      	mov	r1, r8
 800cf2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cf2e:	4641      	mov	r1, r8
 800cf30:	008a      	lsls	r2, r1, #2
 800cf32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800cf36:	f7f3 fea7 	bl	8000c88 <__aeabi_uldivmod>
 800cf3a:	4602      	mov	r2, r0
 800cf3c:	460b      	mov	r3, r1
 800cf3e:	4b0d      	ldr	r3, [pc, #52]	@ (800cf74 <UART_SetConfig+0x4e4>)
 800cf40:	fba3 1302 	umull	r1, r3, r3, r2
 800cf44:	095b      	lsrs	r3, r3, #5
 800cf46:	2164      	movs	r1, #100	@ 0x64
 800cf48:	fb01 f303 	mul.w	r3, r1, r3
 800cf4c:	1ad3      	subs	r3, r2, r3
 800cf4e:	011b      	lsls	r3, r3, #4
 800cf50:	3332      	adds	r3, #50	@ 0x32
 800cf52:	4a08      	ldr	r2, [pc, #32]	@ (800cf74 <UART_SetConfig+0x4e4>)
 800cf54:	fba2 2303 	umull	r2, r3, r2, r3
 800cf58:	095b      	lsrs	r3, r3, #5
 800cf5a:	f003 020f 	and.w	r2, r3, #15
 800cf5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	4422      	add	r2, r4
 800cf66:	609a      	str	r2, [r3, #8]
}
 800cf68:	bf00      	nop
 800cf6a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cf74:	51eb851f 	.word	0x51eb851f

0800cf78 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800cf7c:	4904      	ldr	r1, [pc, #16]	@ (800cf90 <MX_FATFS_Init+0x18>)
 800cf7e:	4805      	ldr	r0, [pc, #20]	@ (800cf94 <MX_FATFS_Init+0x1c>)
 800cf80:	f003 f9d4 	bl	801032c <FATFS_LinkDriver>
 800cf84:	4603      	mov	r3, r0
 800cf86:	461a      	mov	r2, r3
 800cf88:	4b03      	ldr	r3, [pc, #12]	@ (800cf98 <MX_FATFS_Init+0x20>)
 800cf8a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800cf8c:	bf00      	nop
 800cf8e:	bd80      	pop	{r7, pc}
 800cf90:	20002bf0 	.word	0x20002bf0
 800cf94:	20000010 	.word	0x20000010
 800cf98:	20002bec 	.word	0x20002bec

0800cf9c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800cfa0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfaa:	4770      	bx	lr

0800cfac <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b082      	sub	sp, #8
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	SD_disk_initialize (pdrv);
 800cfb6:	79fb      	ldrb	r3, [r7, #7]
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f7f4 fee1 	bl	8001d80 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 800cfbe:	bf00      	nop
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	3708      	adds	r7, #8
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}

0800cfc8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b082      	sub	sp, #8
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	4603      	mov	r3, r0
 800cfd0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
   // Stat = STA_NOINIT;
   // return Stat;
	SD_disk_status ( pdrv);
 800cfd2:	79fb      	ldrb	r3, [r7, #7]
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	f7f4 ffb9 	bl	8001f4c <SD_disk_status>
  /* USER CODE END STATUS */
}
 800cfda:	bf00      	nop
 800cfdc:	4618      	mov	r0, r3
 800cfde:	3708      	adds	r7, #8
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}

0800cfe4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b084      	sub	sp, #16
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	60b9      	str	r1, [r7, #8]
 800cfec:	607a      	str	r2, [r7, #4]
 800cfee:	603b      	str	r3, [r7, #0]
 800cff0:	4603      	mov	r3, r0
 800cff2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	SD_disk_read ( pdrv,  buff,  sector,  count);
 800cff4:	7bf8      	ldrb	r0, [r7, #15]
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	687a      	ldr	r2, [r7, #4]
 800cffa:	68b9      	ldr	r1, [r7, #8]
 800cffc:	f7f4 ffbc 	bl	8001f78 <SD_disk_read>
  /* USER CODE END READ */
}
 800d000:	bf00      	nop
 800d002:	4618      	mov	r0, r3
 800d004:	3710      	adds	r7, #16
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}

0800d00a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800d00a:	b580      	push	{r7, lr}
 800d00c:	b084      	sub	sp, #16
 800d00e:	af00      	add	r7, sp, #0
 800d010:	60b9      	str	r1, [r7, #8]
 800d012:	607a      	str	r2, [r7, #4]
 800d014:	603b      	str	r3, [r7, #0]
 800d016:	4603      	mov	r3, r0
 800d018:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
   // return RES_OK;
	SD_disk_write (pdrv,buff,sector,count);
 800d01a:	7bf8      	ldrb	r0, [r7, #15]
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	687a      	ldr	r2, [r7, #4]
 800d020:	68b9      	ldr	r1, [r7, #8]
 800d022:	f7f5 f813 	bl	800204c <SD_disk_write>
  /* USER CODE END WRITE */
}
 800d026:	bf00      	nop
 800d028:	4618      	mov	r0, r3
 800d02a:	3710      	adds	r7, #16
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}

0800d030 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b082      	sub	sp, #8
 800d034:	af00      	add	r7, sp, #0
 800d036:	4603      	mov	r3, r0
 800d038:	603a      	str	r2, [r7, #0]
 800d03a:	71fb      	strb	r3, [r7, #7]
 800d03c:	460b      	mov	r3, r1
 800d03e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	SD_disk_ioctl ( pdrv,  cmd,  buff);
 800d040:	79fb      	ldrb	r3, [r7, #7]
 800d042:	79b9      	ldrb	r1, [r7, #6]
 800d044:	683a      	ldr	r2, [r7, #0]
 800d046:	4618      	mov	r0, r3
 800d048:	f7f5 f884 	bl	8002154 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 800d04c:	bf00      	nop
 800d04e:	4618      	mov	r0, r3
 800d050:	3708      	adds	r7, #8
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}
	...

0800d058 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b084      	sub	sp, #16
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	4603      	mov	r3, r0
 800d060:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d062:	79fb      	ldrb	r3, [r7, #7]
 800d064:	4a08      	ldr	r2, [pc, #32]	@ (800d088 <disk_status+0x30>)
 800d066:	009b      	lsls	r3, r3, #2
 800d068:	4413      	add	r3, r2
 800d06a:	685b      	ldr	r3, [r3, #4]
 800d06c:	685b      	ldr	r3, [r3, #4]
 800d06e:	79fa      	ldrb	r2, [r7, #7]
 800d070:	4905      	ldr	r1, [pc, #20]	@ (800d088 <disk_status+0x30>)
 800d072:	440a      	add	r2, r1
 800d074:	7a12      	ldrb	r2, [r2, #8]
 800d076:	4610      	mov	r0, r2
 800d078:	4798      	blx	r3
 800d07a:	4603      	mov	r3, r0
 800d07c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d07e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d080:	4618      	mov	r0, r3
 800d082:	3710      	adds	r7, #16
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}
 800d088:	20002c1c 	.word	0x20002c1c

0800d08c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b084      	sub	sp, #16
 800d090:	af00      	add	r7, sp, #0
 800d092:	4603      	mov	r3, r0
 800d094:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d096:	2300      	movs	r3, #0
 800d098:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d09a:	79fb      	ldrb	r3, [r7, #7]
 800d09c:	4a0d      	ldr	r2, [pc, #52]	@ (800d0d4 <disk_initialize+0x48>)
 800d09e:	5cd3      	ldrb	r3, [r2, r3]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d111      	bne.n	800d0c8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d0a4:	79fb      	ldrb	r3, [r7, #7]
 800d0a6:	4a0b      	ldr	r2, [pc, #44]	@ (800d0d4 <disk_initialize+0x48>)
 800d0a8:	2101      	movs	r1, #1
 800d0aa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d0ac:	79fb      	ldrb	r3, [r7, #7]
 800d0ae:	4a09      	ldr	r2, [pc, #36]	@ (800d0d4 <disk_initialize+0x48>)
 800d0b0:	009b      	lsls	r3, r3, #2
 800d0b2:	4413      	add	r3, r2
 800d0b4:	685b      	ldr	r3, [r3, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	79fa      	ldrb	r2, [r7, #7]
 800d0ba:	4906      	ldr	r1, [pc, #24]	@ (800d0d4 <disk_initialize+0x48>)
 800d0bc:	440a      	add	r2, r1
 800d0be:	7a12      	ldrb	r2, [r2, #8]
 800d0c0:	4610      	mov	r0, r2
 800d0c2:	4798      	blx	r3
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d0c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3710      	adds	r7, #16
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}
 800d0d2:	bf00      	nop
 800d0d4:	20002c1c 	.word	0x20002c1c

0800d0d8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d0d8:	b590      	push	{r4, r7, lr}
 800d0da:	b087      	sub	sp, #28
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	60b9      	str	r1, [r7, #8]
 800d0e0:	607a      	str	r2, [r7, #4]
 800d0e2:	603b      	str	r3, [r7, #0]
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d0e8:	7bfb      	ldrb	r3, [r7, #15]
 800d0ea:	4a0a      	ldr	r2, [pc, #40]	@ (800d114 <disk_read+0x3c>)
 800d0ec:	009b      	lsls	r3, r3, #2
 800d0ee:	4413      	add	r3, r2
 800d0f0:	685b      	ldr	r3, [r3, #4]
 800d0f2:	689c      	ldr	r4, [r3, #8]
 800d0f4:	7bfb      	ldrb	r3, [r7, #15]
 800d0f6:	4a07      	ldr	r2, [pc, #28]	@ (800d114 <disk_read+0x3c>)
 800d0f8:	4413      	add	r3, r2
 800d0fa:	7a18      	ldrb	r0, [r3, #8]
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	687a      	ldr	r2, [r7, #4]
 800d100:	68b9      	ldr	r1, [r7, #8]
 800d102:	47a0      	blx	r4
 800d104:	4603      	mov	r3, r0
 800d106:	75fb      	strb	r3, [r7, #23]
  return res;
 800d108:	7dfb      	ldrb	r3, [r7, #23]
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	371c      	adds	r7, #28
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd90      	pop	{r4, r7, pc}
 800d112:	bf00      	nop
 800d114:	20002c1c 	.word	0x20002c1c

0800d118 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d118:	b590      	push	{r4, r7, lr}
 800d11a:	b087      	sub	sp, #28
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	60b9      	str	r1, [r7, #8]
 800d120:	607a      	str	r2, [r7, #4]
 800d122:	603b      	str	r3, [r7, #0]
 800d124:	4603      	mov	r3, r0
 800d126:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d128:	7bfb      	ldrb	r3, [r7, #15]
 800d12a:	4a0a      	ldr	r2, [pc, #40]	@ (800d154 <disk_write+0x3c>)
 800d12c:	009b      	lsls	r3, r3, #2
 800d12e:	4413      	add	r3, r2
 800d130:	685b      	ldr	r3, [r3, #4]
 800d132:	68dc      	ldr	r4, [r3, #12]
 800d134:	7bfb      	ldrb	r3, [r7, #15]
 800d136:	4a07      	ldr	r2, [pc, #28]	@ (800d154 <disk_write+0x3c>)
 800d138:	4413      	add	r3, r2
 800d13a:	7a18      	ldrb	r0, [r3, #8]
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	687a      	ldr	r2, [r7, #4]
 800d140:	68b9      	ldr	r1, [r7, #8]
 800d142:	47a0      	blx	r4
 800d144:	4603      	mov	r3, r0
 800d146:	75fb      	strb	r3, [r7, #23]
  return res;
 800d148:	7dfb      	ldrb	r3, [r7, #23]
}
 800d14a:	4618      	mov	r0, r3
 800d14c:	371c      	adds	r7, #28
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd90      	pop	{r4, r7, pc}
 800d152:	bf00      	nop
 800d154:	20002c1c 	.word	0x20002c1c

0800d158 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b084      	sub	sp, #16
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	4603      	mov	r3, r0
 800d160:	603a      	str	r2, [r7, #0]
 800d162:	71fb      	strb	r3, [r7, #7]
 800d164:	460b      	mov	r3, r1
 800d166:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d168:	79fb      	ldrb	r3, [r7, #7]
 800d16a:	4a09      	ldr	r2, [pc, #36]	@ (800d190 <disk_ioctl+0x38>)
 800d16c:	009b      	lsls	r3, r3, #2
 800d16e:	4413      	add	r3, r2
 800d170:	685b      	ldr	r3, [r3, #4]
 800d172:	691b      	ldr	r3, [r3, #16]
 800d174:	79fa      	ldrb	r2, [r7, #7]
 800d176:	4906      	ldr	r1, [pc, #24]	@ (800d190 <disk_ioctl+0x38>)
 800d178:	440a      	add	r2, r1
 800d17a:	7a10      	ldrb	r0, [r2, #8]
 800d17c:	79b9      	ldrb	r1, [r7, #6]
 800d17e:	683a      	ldr	r2, [r7, #0]
 800d180:	4798      	blx	r3
 800d182:	4603      	mov	r3, r0
 800d184:	73fb      	strb	r3, [r7, #15]
  return res;
 800d186:	7bfb      	ldrb	r3, [r7, #15]
}
 800d188:	4618      	mov	r0, r3
 800d18a:	3710      	adds	r7, #16
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}
 800d190:	20002c1c 	.word	0x20002c1c

0800d194 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d194:	b480      	push	{r7}
 800d196:	b085      	sub	sp, #20
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	3301      	adds	r3, #1
 800d1a0:	781b      	ldrb	r3, [r3, #0]
 800d1a2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d1a4:	89fb      	ldrh	r3, [r7, #14]
 800d1a6:	021b      	lsls	r3, r3, #8
 800d1a8:	b21a      	sxth	r2, r3
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	781b      	ldrb	r3, [r3, #0]
 800d1ae:	b21b      	sxth	r3, r3
 800d1b0:	4313      	orrs	r3, r2
 800d1b2:	b21b      	sxth	r3, r3
 800d1b4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d1b6:	89fb      	ldrh	r3, [r7, #14]
}
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	3714      	adds	r7, #20
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c2:	4770      	bx	lr

0800d1c4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d1c4:	b480      	push	{r7}
 800d1c6:	b085      	sub	sp, #20
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	3303      	adds	r3, #3
 800d1d0:	781b      	ldrb	r3, [r3, #0]
 800d1d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	021b      	lsls	r3, r3, #8
 800d1d8:	687a      	ldr	r2, [r7, #4]
 800d1da:	3202      	adds	r2, #2
 800d1dc:	7812      	ldrb	r2, [r2, #0]
 800d1de:	4313      	orrs	r3, r2
 800d1e0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	021b      	lsls	r3, r3, #8
 800d1e6:	687a      	ldr	r2, [r7, #4]
 800d1e8:	3201      	adds	r2, #1
 800d1ea:	7812      	ldrb	r2, [r2, #0]
 800d1ec:	4313      	orrs	r3, r2
 800d1ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	021b      	lsls	r3, r3, #8
 800d1f4:	687a      	ldr	r2, [r7, #4]
 800d1f6:	7812      	ldrb	r2, [r2, #0]
 800d1f8:	4313      	orrs	r3, r2
 800d1fa:	60fb      	str	r3, [r7, #12]
	return rv;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
}
 800d1fe:	4618      	mov	r0, r3
 800d200:	3714      	adds	r7, #20
 800d202:	46bd      	mov	sp, r7
 800d204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d208:	4770      	bx	lr

0800d20a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d20a:	b480      	push	{r7}
 800d20c:	b083      	sub	sp, #12
 800d20e:	af00      	add	r7, sp, #0
 800d210:	6078      	str	r0, [r7, #4]
 800d212:	460b      	mov	r3, r1
 800d214:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	1c5a      	adds	r2, r3, #1
 800d21a:	607a      	str	r2, [r7, #4]
 800d21c:	887a      	ldrh	r2, [r7, #2]
 800d21e:	b2d2      	uxtb	r2, r2
 800d220:	701a      	strb	r2, [r3, #0]
 800d222:	887b      	ldrh	r3, [r7, #2]
 800d224:	0a1b      	lsrs	r3, r3, #8
 800d226:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	1c5a      	adds	r2, r3, #1
 800d22c:	607a      	str	r2, [r7, #4]
 800d22e:	887a      	ldrh	r2, [r7, #2]
 800d230:	b2d2      	uxtb	r2, r2
 800d232:	701a      	strb	r2, [r3, #0]
}
 800d234:	bf00      	nop
 800d236:	370c      	adds	r7, #12
 800d238:	46bd      	mov	sp, r7
 800d23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23e:	4770      	bx	lr

0800d240 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d240:	b480      	push	{r7}
 800d242:	b083      	sub	sp, #12
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
 800d248:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	1c5a      	adds	r2, r3, #1
 800d24e:	607a      	str	r2, [r7, #4]
 800d250:	683a      	ldr	r2, [r7, #0]
 800d252:	b2d2      	uxtb	r2, r2
 800d254:	701a      	strb	r2, [r3, #0]
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	0a1b      	lsrs	r3, r3, #8
 800d25a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	1c5a      	adds	r2, r3, #1
 800d260:	607a      	str	r2, [r7, #4]
 800d262:	683a      	ldr	r2, [r7, #0]
 800d264:	b2d2      	uxtb	r2, r2
 800d266:	701a      	strb	r2, [r3, #0]
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	0a1b      	lsrs	r3, r3, #8
 800d26c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	1c5a      	adds	r2, r3, #1
 800d272:	607a      	str	r2, [r7, #4]
 800d274:	683a      	ldr	r2, [r7, #0]
 800d276:	b2d2      	uxtb	r2, r2
 800d278:	701a      	strb	r2, [r3, #0]
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	0a1b      	lsrs	r3, r3, #8
 800d27e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	1c5a      	adds	r2, r3, #1
 800d284:	607a      	str	r2, [r7, #4]
 800d286:	683a      	ldr	r2, [r7, #0]
 800d288:	b2d2      	uxtb	r2, r2
 800d28a:	701a      	strb	r2, [r3, #0]
}
 800d28c:	bf00      	nop
 800d28e:	370c      	adds	r7, #12
 800d290:	46bd      	mov	sp, r7
 800d292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d296:	4770      	bx	lr

0800d298 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d298:	b480      	push	{r7}
 800d29a:	b087      	sub	sp, #28
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	60f8      	str	r0, [r7, #12]
 800d2a0:	60b9      	str	r1, [r7, #8]
 800d2a2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d00d      	beq.n	800d2ce <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d2b2:	693a      	ldr	r2, [r7, #16]
 800d2b4:	1c53      	adds	r3, r2, #1
 800d2b6:	613b      	str	r3, [r7, #16]
 800d2b8:	697b      	ldr	r3, [r7, #20]
 800d2ba:	1c59      	adds	r1, r3, #1
 800d2bc:	6179      	str	r1, [r7, #20]
 800d2be:	7812      	ldrb	r2, [r2, #0]
 800d2c0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	3b01      	subs	r3, #1
 800d2c6:	607b      	str	r3, [r7, #4]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d1f1      	bne.n	800d2b2 <mem_cpy+0x1a>
	}
}
 800d2ce:	bf00      	nop
 800d2d0:	371c      	adds	r7, #28
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d8:	4770      	bx	lr

0800d2da <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d2da:	b480      	push	{r7}
 800d2dc:	b087      	sub	sp, #28
 800d2de:	af00      	add	r7, sp, #0
 800d2e0:	60f8      	str	r0, [r7, #12]
 800d2e2:	60b9      	str	r1, [r7, #8]
 800d2e4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	1c5a      	adds	r2, r3, #1
 800d2ee:	617a      	str	r2, [r7, #20]
 800d2f0:	68ba      	ldr	r2, [r7, #8]
 800d2f2:	b2d2      	uxtb	r2, r2
 800d2f4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	3b01      	subs	r3, #1
 800d2fa:	607b      	str	r3, [r7, #4]
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d1f3      	bne.n	800d2ea <mem_set+0x10>
}
 800d302:	bf00      	nop
 800d304:	bf00      	nop
 800d306:	371c      	adds	r7, #28
 800d308:	46bd      	mov	sp, r7
 800d30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30e:	4770      	bx	lr

0800d310 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d310:	b480      	push	{r7}
 800d312:	b089      	sub	sp, #36	@ 0x24
 800d314:	af00      	add	r7, sp, #0
 800d316:	60f8      	str	r0, [r7, #12]
 800d318:	60b9      	str	r1, [r7, #8]
 800d31a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	61fb      	str	r3, [r7, #28]
 800d320:	68bb      	ldr	r3, [r7, #8]
 800d322:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d324:	2300      	movs	r3, #0
 800d326:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d328:	69fb      	ldr	r3, [r7, #28]
 800d32a:	1c5a      	adds	r2, r3, #1
 800d32c:	61fa      	str	r2, [r7, #28]
 800d32e:	781b      	ldrb	r3, [r3, #0]
 800d330:	4619      	mov	r1, r3
 800d332:	69bb      	ldr	r3, [r7, #24]
 800d334:	1c5a      	adds	r2, r3, #1
 800d336:	61ba      	str	r2, [r7, #24]
 800d338:	781b      	ldrb	r3, [r3, #0]
 800d33a:	1acb      	subs	r3, r1, r3
 800d33c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	3b01      	subs	r3, #1
 800d342:	607b      	str	r3, [r7, #4]
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d002      	beq.n	800d350 <mem_cmp+0x40>
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d0eb      	beq.n	800d328 <mem_cmp+0x18>

	return r;
 800d350:	697b      	ldr	r3, [r7, #20]
}
 800d352:	4618      	mov	r0, r3
 800d354:	3724      	adds	r7, #36	@ 0x24
 800d356:	46bd      	mov	sp, r7
 800d358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35c:	4770      	bx	lr

0800d35e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d35e:	b480      	push	{r7}
 800d360:	b083      	sub	sp, #12
 800d362:	af00      	add	r7, sp, #0
 800d364:	6078      	str	r0, [r7, #4]
 800d366:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d368:	e002      	b.n	800d370 <chk_chr+0x12>
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	3301      	adds	r3, #1
 800d36e:	607b      	str	r3, [r7, #4]
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d005      	beq.n	800d384 <chk_chr+0x26>
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	781b      	ldrb	r3, [r3, #0]
 800d37c:	461a      	mov	r2, r3
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	4293      	cmp	r3, r2
 800d382:	d1f2      	bne.n	800d36a <chk_chr+0xc>
	return *str;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	781b      	ldrb	r3, [r3, #0]
}
 800d388:	4618      	mov	r0, r3
 800d38a:	370c      	adds	r7, #12
 800d38c:	46bd      	mov	sp, r7
 800d38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d392:	4770      	bx	lr

0800d394 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b082      	sub	sp, #8
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d009      	beq.n	800d3b6 <lock_fs+0x22>
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	695b      	ldr	r3, [r3, #20]
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f003 f8c2 	bl	8010530 <ff_req_grant>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d001      	beq.n	800d3b6 <lock_fs+0x22>
 800d3b2:	2301      	movs	r3, #1
 800d3b4:	e000      	b.n	800d3b8 <lock_fs+0x24>
 800d3b6:	2300      	movs	r3, #0
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3708      	adds	r7, #8
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}

0800d3c0 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b082      	sub	sp, #8
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
 800d3c8:	460b      	mov	r3, r1
 800d3ca:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d00d      	beq.n	800d3ee <unlock_fs+0x2e>
 800d3d2:	78fb      	ldrb	r3, [r7, #3]
 800d3d4:	2b0c      	cmp	r3, #12
 800d3d6:	d00a      	beq.n	800d3ee <unlock_fs+0x2e>
 800d3d8:	78fb      	ldrb	r3, [r7, #3]
 800d3da:	2b0b      	cmp	r3, #11
 800d3dc:	d007      	beq.n	800d3ee <unlock_fs+0x2e>
 800d3de:	78fb      	ldrb	r3, [r7, #3]
 800d3e0:	2b0f      	cmp	r3, #15
 800d3e2:	d004      	beq.n	800d3ee <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	695b      	ldr	r3, [r3, #20]
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f003 f8b6 	bl	801055a <ff_rel_grant>
	}
}
 800d3ee:	bf00      	nop
 800d3f0:	3708      	adds	r7, #8
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}
	...

0800d3f8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b085      	sub	sp, #20
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d402:	2300      	movs	r3, #0
 800d404:	60bb      	str	r3, [r7, #8]
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	60fb      	str	r3, [r7, #12]
 800d40a:	e029      	b.n	800d460 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d40c:	4a27      	ldr	r2, [pc, #156]	@ (800d4ac <chk_lock+0xb4>)
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	011b      	lsls	r3, r3, #4
 800d412:	4413      	add	r3, r2
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d01d      	beq.n	800d456 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d41a:	4a24      	ldr	r2, [pc, #144]	@ (800d4ac <chk_lock+0xb4>)
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	011b      	lsls	r3, r3, #4
 800d420:	4413      	add	r3, r2
 800d422:	681a      	ldr	r2, [r3, #0]
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	429a      	cmp	r2, r3
 800d42a:	d116      	bne.n	800d45a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d42c:	4a1f      	ldr	r2, [pc, #124]	@ (800d4ac <chk_lock+0xb4>)
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	011b      	lsls	r3, r3, #4
 800d432:	4413      	add	r3, r2
 800d434:	3304      	adds	r3, #4
 800d436:	681a      	ldr	r2, [r3, #0]
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d43c:	429a      	cmp	r2, r3
 800d43e:	d10c      	bne.n	800d45a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d440:	4a1a      	ldr	r2, [pc, #104]	@ (800d4ac <chk_lock+0xb4>)
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	011b      	lsls	r3, r3, #4
 800d446:	4413      	add	r3, r2
 800d448:	3308      	adds	r3, #8
 800d44a:	681a      	ldr	r2, [r3, #0]
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d450:	429a      	cmp	r2, r3
 800d452:	d102      	bne.n	800d45a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d454:	e007      	b.n	800d466 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d456:	2301      	movs	r3, #1
 800d458:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	3301      	adds	r3, #1
 800d45e:	60fb      	str	r3, [r7, #12]
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	2b01      	cmp	r3, #1
 800d464:	d9d2      	bls.n	800d40c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	2b02      	cmp	r3, #2
 800d46a:	d109      	bne.n	800d480 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d46c:	68bb      	ldr	r3, [r7, #8]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d102      	bne.n	800d478 <chk_lock+0x80>
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	2b02      	cmp	r3, #2
 800d476:	d101      	bne.n	800d47c <chk_lock+0x84>
 800d478:	2300      	movs	r3, #0
 800d47a:	e010      	b.n	800d49e <chk_lock+0xa6>
 800d47c:	2312      	movs	r3, #18
 800d47e:	e00e      	b.n	800d49e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d108      	bne.n	800d498 <chk_lock+0xa0>
 800d486:	4a09      	ldr	r2, [pc, #36]	@ (800d4ac <chk_lock+0xb4>)
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	011b      	lsls	r3, r3, #4
 800d48c:	4413      	add	r3, r2
 800d48e:	330c      	adds	r3, #12
 800d490:	881b      	ldrh	r3, [r3, #0]
 800d492:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d496:	d101      	bne.n	800d49c <chk_lock+0xa4>
 800d498:	2310      	movs	r3, #16
 800d49a:	e000      	b.n	800d49e <chk_lock+0xa6>
 800d49c:	2300      	movs	r3, #0
}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	3714      	adds	r7, #20
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a8:	4770      	bx	lr
 800d4aa:	bf00      	nop
 800d4ac:	20002bfc 	.word	0x20002bfc

0800d4b0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	b083      	sub	sp, #12
 800d4b4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	607b      	str	r3, [r7, #4]
 800d4ba:	e002      	b.n	800d4c2 <enq_lock+0x12>
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	3301      	adds	r3, #1
 800d4c0:	607b      	str	r3, [r7, #4]
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2b01      	cmp	r3, #1
 800d4c6:	d806      	bhi.n	800d4d6 <enq_lock+0x26>
 800d4c8:	4a09      	ldr	r2, [pc, #36]	@ (800d4f0 <enq_lock+0x40>)
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	011b      	lsls	r3, r3, #4
 800d4ce:	4413      	add	r3, r2
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d1f2      	bne.n	800d4bc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	2b02      	cmp	r3, #2
 800d4da:	bf14      	ite	ne
 800d4dc:	2301      	movne	r3, #1
 800d4de:	2300      	moveq	r3, #0
 800d4e0:	b2db      	uxtb	r3, r3
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	370c      	adds	r7, #12
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ec:	4770      	bx	lr
 800d4ee:	bf00      	nop
 800d4f0:	20002bfc 	.word	0x20002bfc

0800d4f4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b085      	sub	sp, #20
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
 800d4fc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d4fe:	2300      	movs	r3, #0
 800d500:	60fb      	str	r3, [r7, #12]
 800d502:	e01f      	b.n	800d544 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d504:	4a41      	ldr	r2, [pc, #260]	@ (800d60c <inc_lock+0x118>)
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	011b      	lsls	r3, r3, #4
 800d50a:	4413      	add	r3, r2
 800d50c:	681a      	ldr	r2, [r3, #0]
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	429a      	cmp	r2, r3
 800d514:	d113      	bne.n	800d53e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d516:	4a3d      	ldr	r2, [pc, #244]	@ (800d60c <inc_lock+0x118>)
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	011b      	lsls	r3, r3, #4
 800d51c:	4413      	add	r3, r2
 800d51e:	3304      	adds	r3, #4
 800d520:	681a      	ldr	r2, [r3, #0]
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d526:	429a      	cmp	r2, r3
 800d528:	d109      	bne.n	800d53e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d52a:	4a38      	ldr	r2, [pc, #224]	@ (800d60c <inc_lock+0x118>)
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	011b      	lsls	r3, r3, #4
 800d530:	4413      	add	r3, r2
 800d532:	3308      	adds	r3, #8
 800d534:	681a      	ldr	r2, [r3, #0]
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d53a:	429a      	cmp	r2, r3
 800d53c:	d006      	beq.n	800d54c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	3301      	adds	r3, #1
 800d542:	60fb      	str	r3, [r7, #12]
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	2b01      	cmp	r3, #1
 800d548:	d9dc      	bls.n	800d504 <inc_lock+0x10>
 800d54a:	e000      	b.n	800d54e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d54c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	2b02      	cmp	r3, #2
 800d552:	d132      	bne.n	800d5ba <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d554:	2300      	movs	r3, #0
 800d556:	60fb      	str	r3, [r7, #12]
 800d558:	e002      	b.n	800d560 <inc_lock+0x6c>
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	3301      	adds	r3, #1
 800d55e:	60fb      	str	r3, [r7, #12]
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	2b01      	cmp	r3, #1
 800d564:	d806      	bhi.n	800d574 <inc_lock+0x80>
 800d566:	4a29      	ldr	r2, [pc, #164]	@ (800d60c <inc_lock+0x118>)
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	011b      	lsls	r3, r3, #4
 800d56c:	4413      	add	r3, r2
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d1f2      	bne.n	800d55a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	2b02      	cmp	r3, #2
 800d578:	d101      	bne.n	800d57e <inc_lock+0x8a>
 800d57a:	2300      	movs	r3, #0
 800d57c:	e040      	b.n	800d600 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681a      	ldr	r2, [r3, #0]
 800d582:	4922      	ldr	r1, [pc, #136]	@ (800d60c <inc_lock+0x118>)
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	011b      	lsls	r3, r3, #4
 800d588:	440b      	add	r3, r1
 800d58a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	689a      	ldr	r2, [r3, #8]
 800d590:	491e      	ldr	r1, [pc, #120]	@ (800d60c <inc_lock+0x118>)
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	011b      	lsls	r3, r3, #4
 800d596:	440b      	add	r3, r1
 800d598:	3304      	adds	r3, #4
 800d59a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	695a      	ldr	r2, [r3, #20]
 800d5a0:	491a      	ldr	r1, [pc, #104]	@ (800d60c <inc_lock+0x118>)
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	011b      	lsls	r3, r3, #4
 800d5a6:	440b      	add	r3, r1
 800d5a8:	3308      	adds	r3, #8
 800d5aa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d5ac:	4a17      	ldr	r2, [pc, #92]	@ (800d60c <inc_lock+0x118>)
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	011b      	lsls	r3, r3, #4
 800d5b2:	4413      	add	r3, r2
 800d5b4:	330c      	adds	r3, #12
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d5ba:	683b      	ldr	r3, [r7, #0]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d009      	beq.n	800d5d4 <inc_lock+0xe0>
 800d5c0:	4a12      	ldr	r2, [pc, #72]	@ (800d60c <inc_lock+0x118>)
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	011b      	lsls	r3, r3, #4
 800d5c6:	4413      	add	r3, r2
 800d5c8:	330c      	adds	r3, #12
 800d5ca:	881b      	ldrh	r3, [r3, #0]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d001      	beq.n	800d5d4 <inc_lock+0xe0>
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	e015      	b.n	800d600 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d108      	bne.n	800d5ec <inc_lock+0xf8>
 800d5da:	4a0c      	ldr	r2, [pc, #48]	@ (800d60c <inc_lock+0x118>)
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	011b      	lsls	r3, r3, #4
 800d5e0:	4413      	add	r3, r2
 800d5e2:	330c      	adds	r3, #12
 800d5e4:	881b      	ldrh	r3, [r3, #0]
 800d5e6:	3301      	adds	r3, #1
 800d5e8:	b29a      	uxth	r2, r3
 800d5ea:	e001      	b.n	800d5f0 <inc_lock+0xfc>
 800d5ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d5f0:	4906      	ldr	r1, [pc, #24]	@ (800d60c <inc_lock+0x118>)
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	011b      	lsls	r3, r3, #4
 800d5f6:	440b      	add	r3, r1
 800d5f8:	330c      	adds	r3, #12
 800d5fa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	3301      	adds	r3, #1
}
 800d600:	4618      	mov	r0, r3
 800d602:	3714      	adds	r7, #20
 800d604:	46bd      	mov	sp, r7
 800d606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60a:	4770      	bx	lr
 800d60c:	20002bfc 	.word	0x20002bfc

0800d610 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d610:	b480      	push	{r7}
 800d612:	b085      	sub	sp, #20
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	3b01      	subs	r3, #1
 800d61c:	607b      	str	r3, [r7, #4]
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2b01      	cmp	r3, #1
 800d622:	d825      	bhi.n	800d670 <dec_lock+0x60>
		n = Files[i].ctr;
 800d624:	4a17      	ldr	r2, [pc, #92]	@ (800d684 <dec_lock+0x74>)
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	011b      	lsls	r3, r3, #4
 800d62a:	4413      	add	r3, r2
 800d62c:	330c      	adds	r3, #12
 800d62e:	881b      	ldrh	r3, [r3, #0]
 800d630:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d632:	89fb      	ldrh	r3, [r7, #14]
 800d634:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d638:	d101      	bne.n	800d63e <dec_lock+0x2e>
 800d63a:	2300      	movs	r3, #0
 800d63c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d63e:	89fb      	ldrh	r3, [r7, #14]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d002      	beq.n	800d64a <dec_lock+0x3a>
 800d644:	89fb      	ldrh	r3, [r7, #14]
 800d646:	3b01      	subs	r3, #1
 800d648:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d64a:	4a0e      	ldr	r2, [pc, #56]	@ (800d684 <dec_lock+0x74>)
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	011b      	lsls	r3, r3, #4
 800d650:	4413      	add	r3, r2
 800d652:	330c      	adds	r3, #12
 800d654:	89fa      	ldrh	r2, [r7, #14]
 800d656:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d658:	89fb      	ldrh	r3, [r7, #14]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d105      	bne.n	800d66a <dec_lock+0x5a>
 800d65e:	4a09      	ldr	r2, [pc, #36]	@ (800d684 <dec_lock+0x74>)
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	011b      	lsls	r3, r3, #4
 800d664:	4413      	add	r3, r2
 800d666:	2200      	movs	r2, #0
 800d668:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d66a:	2300      	movs	r3, #0
 800d66c:	737b      	strb	r3, [r7, #13]
 800d66e:	e001      	b.n	800d674 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d670:	2302      	movs	r3, #2
 800d672:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d674:	7b7b      	ldrb	r3, [r7, #13]
}
 800d676:	4618      	mov	r0, r3
 800d678:	3714      	adds	r7, #20
 800d67a:	46bd      	mov	sp, r7
 800d67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d680:	4770      	bx	lr
 800d682:	bf00      	nop
 800d684:	20002bfc 	.word	0x20002bfc

0800d688 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d688:	b480      	push	{r7}
 800d68a:	b085      	sub	sp, #20
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d690:	2300      	movs	r3, #0
 800d692:	60fb      	str	r3, [r7, #12]
 800d694:	e010      	b.n	800d6b8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d696:	4a0d      	ldr	r2, [pc, #52]	@ (800d6cc <clear_lock+0x44>)
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	011b      	lsls	r3, r3, #4
 800d69c:	4413      	add	r3, r2
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	687a      	ldr	r2, [r7, #4]
 800d6a2:	429a      	cmp	r2, r3
 800d6a4:	d105      	bne.n	800d6b2 <clear_lock+0x2a>
 800d6a6:	4a09      	ldr	r2, [pc, #36]	@ (800d6cc <clear_lock+0x44>)
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	011b      	lsls	r3, r3, #4
 800d6ac:	4413      	add	r3, r2
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	3301      	adds	r3, #1
 800d6b6:	60fb      	str	r3, [r7, #12]
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	2b01      	cmp	r3, #1
 800d6bc:	d9eb      	bls.n	800d696 <clear_lock+0xe>
	}
}
 800d6be:	bf00      	nop
 800d6c0:	bf00      	nop
 800d6c2:	3714      	adds	r7, #20
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ca:	4770      	bx	lr
 800d6cc:	20002bfc 	.word	0x20002bfc

0800d6d0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b086      	sub	sp, #24
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d6d8:	2300      	movs	r3, #0
 800d6da:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	78db      	ldrb	r3, [r3, #3]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d034      	beq.n	800d74e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6e8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	7858      	ldrb	r0, [r3, #1]
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800d6f4:	2301      	movs	r3, #1
 800d6f6:	697a      	ldr	r2, [r7, #20]
 800d6f8:	f7ff fd0e 	bl	800d118 <disk_write>
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d002      	beq.n	800d708 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d702:	2301      	movs	r3, #1
 800d704:	73fb      	strb	r3, [r7, #15]
 800d706:	e022      	b.n	800d74e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2200      	movs	r2, #0
 800d70c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d712:	697a      	ldr	r2, [r7, #20]
 800d714:	1ad2      	subs	r2, r2, r3
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d71a:	429a      	cmp	r2, r3
 800d71c:	d217      	bcs.n	800d74e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	789b      	ldrb	r3, [r3, #2]
 800d722:	613b      	str	r3, [r7, #16]
 800d724:	e010      	b.n	800d748 <sync_window+0x78>
					wsect += fs->fsize;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d72a:	697a      	ldr	r2, [r7, #20]
 800d72c:	4413      	add	r3, r2
 800d72e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	7858      	ldrb	r0, [r3, #1]
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800d73a:	2301      	movs	r3, #1
 800d73c:	697a      	ldr	r2, [r7, #20]
 800d73e:	f7ff fceb 	bl	800d118 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d742:	693b      	ldr	r3, [r7, #16]
 800d744:	3b01      	subs	r3, #1
 800d746:	613b      	str	r3, [r7, #16]
 800d748:	693b      	ldr	r3, [r7, #16]
 800d74a:	2b01      	cmp	r3, #1
 800d74c:	d8eb      	bhi.n	800d726 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d74e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d750:	4618      	mov	r0, r3
 800d752:	3718      	adds	r7, #24
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}

0800d758 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b084      	sub	sp, #16
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
 800d760:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d762:	2300      	movs	r3, #0
 800d764:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d76a:	683a      	ldr	r2, [r7, #0]
 800d76c:	429a      	cmp	r2, r3
 800d76e:	d01b      	beq.n	800d7a8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f7ff ffad 	bl	800d6d0 <sync_window>
 800d776:	4603      	mov	r3, r0
 800d778:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d77a:	7bfb      	ldrb	r3, [r7, #15]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d113      	bne.n	800d7a8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	7858      	ldrb	r0, [r3, #1]
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800d78a:	2301      	movs	r3, #1
 800d78c:	683a      	ldr	r2, [r7, #0]
 800d78e:	f7ff fca3 	bl	800d0d8 <disk_read>
 800d792:	4603      	mov	r3, r0
 800d794:	2b00      	cmp	r3, #0
 800d796:	d004      	beq.n	800d7a2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d798:	f04f 33ff 	mov.w	r3, #4294967295
 800d79c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d79e:	2301      	movs	r3, #1
 800d7a0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	683a      	ldr	r2, [r7, #0]
 800d7a6:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 800d7a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3710      	adds	r7, #16
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}
	...

0800d7b4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b084      	sub	sp, #16
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f7ff ff87 	bl	800d6d0 <sync_window>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d7c6:	7bfb      	ldrb	r3, [r7, #15]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d159      	bne.n	800d880 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	781b      	ldrb	r3, [r3, #0]
 800d7d0:	2b03      	cmp	r3, #3
 800d7d2:	d149      	bne.n	800d868 <sync_fs+0xb4>
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	791b      	ldrb	r3, [r3, #4]
 800d7d8:	2b01      	cmp	r3, #1
 800d7da:	d145      	bne.n	800d868 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	899b      	ldrh	r3, [r3, #12]
 800d7e6:	461a      	mov	r2, r3
 800d7e8:	2100      	movs	r1, #0
 800d7ea:	f7ff fd76 	bl	800d2da <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	333c      	adds	r3, #60	@ 0x3c
 800d7f2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d7f6:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f7ff fd05 	bl	800d20a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	333c      	adds	r3, #60	@ 0x3c
 800d804:	4921      	ldr	r1, [pc, #132]	@ (800d88c <sync_fs+0xd8>)
 800d806:	4618      	mov	r0, r3
 800d808:	f7ff fd1a 	bl	800d240 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	333c      	adds	r3, #60	@ 0x3c
 800d810:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d814:	491e      	ldr	r1, [pc, #120]	@ (800d890 <sync_fs+0xdc>)
 800d816:	4618      	mov	r0, r3
 800d818:	f7ff fd12 	bl	800d240 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	333c      	adds	r3, #60	@ 0x3c
 800d820:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	69db      	ldr	r3, [r3, #28]
 800d828:	4619      	mov	r1, r3
 800d82a:	4610      	mov	r0, r2
 800d82c:	f7ff fd08 	bl	800d240 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	333c      	adds	r3, #60	@ 0x3c
 800d834:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	699b      	ldr	r3, [r3, #24]
 800d83c:	4619      	mov	r1, r3
 800d83e:	4610      	mov	r0, r2
 800d840:	f7ff fcfe 	bl	800d240 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d848:	1c5a      	adds	r2, r3, #1
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	7858      	ldrb	r0, [r3, #1]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d85c:	2301      	movs	r3, #1
 800d85e:	f7ff fc5b 	bl	800d118 <disk_write>
			fs->fsi_flag = 0;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2200      	movs	r2, #0
 800d866:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	785b      	ldrb	r3, [r3, #1]
 800d86c:	2200      	movs	r2, #0
 800d86e:	2100      	movs	r1, #0
 800d870:	4618      	mov	r0, r3
 800d872:	f7ff fc71 	bl	800d158 <disk_ioctl>
 800d876:	4603      	mov	r3, r0
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d001      	beq.n	800d880 <sync_fs+0xcc>
 800d87c:	2301      	movs	r3, #1
 800d87e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d880:	7bfb      	ldrb	r3, [r7, #15]
}
 800d882:	4618      	mov	r0, r3
 800d884:	3710      	adds	r7, #16
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}
 800d88a:	bf00      	nop
 800d88c:	41615252 	.word	0x41615252
 800d890:	61417272 	.word	0x61417272

0800d894 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d894:	b480      	push	{r7}
 800d896:	b083      	sub	sp, #12
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
 800d89c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	3b02      	subs	r3, #2
 800d8a2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	6a1b      	ldr	r3, [r3, #32]
 800d8a8:	3b02      	subs	r3, #2
 800d8aa:	683a      	ldr	r2, [r7, #0]
 800d8ac:	429a      	cmp	r2, r3
 800d8ae:	d301      	bcc.n	800d8b4 <clust2sect+0x20>
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	e008      	b.n	800d8c6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	895b      	ldrh	r3, [r3, #10]
 800d8b8:	461a      	mov	r2, r3
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	fb03 f202 	mul.w	r2, r3, r2
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8c4:	4413      	add	r3, r2
}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	370c      	adds	r7, #12
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d0:	4770      	bx	lr

0800d8d2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d8d2:	b580      	push	{r7, lr}
 800d8d4:	b086      	sub	sp, #24
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	6078      	str	r0, [r7, #4]
 800d8da:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	2b01      	cmp	r3, #1
 800d8e6:	d904      	bls.n	800d8f2 <get_fat+0x20>
 800d8e8:	693b      	ldr	r3, [r7, #16]
 800d8ea:	6a1b      	ldr	r3, [r3, #32]
 800d8ec:	683a      	ldr	r2, [r7, #0]
 800d8ee:	429a      	cmp	r2, r3
 800d8f0:	d302      	bcc.n	800d8f8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d8f2:	2301      	movs	r3, #1
 800d8f4:	617b      	str	r3, [r7, #20]
 800d8f6:	e0ba      	b.n	800da6e <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d8f8:	f04f 33ff 	mov.w	r3, #4294967295
 800d8fc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	781b      	ldrb	r3, [r3, #0]
 800d902:	2b03      	cmp	r3, #3
 800d904:	f000 8082 	beq.w	800da0c <get_fat+0x13a>
 800d908:	2b03      	cmp	r3, #3
 800d90a:	f300 80a6 	bgt.w	800da5a <get_fat+0x188>
 800d90e:	2b01      	cmp	r3, #1
 800d910:	d002      	beq.n	800d918 <get_fat+0x46>
 800d912:	2b02      	cmp	r3, #2
 800d914:	d055      	beq.n	800d9c2 <get_fat+0xf0>
 800d916:	e0a0      	b.n	800da5a <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	60fb      	str	r3, [r7, #12]
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	085b      	lsrs	r3, r3, #1
 800d920:	68fa      	ldr	r2, [r7, #12]
 800d922:	4413      	add	r3, r2
 800d924:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d926:	693b      	ldr	r3, [r7, #16]
 800d928:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d92a:	693b      	ldr	r3, [r7, #16]
 800d92c:	899b      	ldrh	r3, [r3, #12]
 800d92e:	4619      	mov	r1, r3
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	fbb3 f3f1 	udiv	r3, r3, r1
 800d936:	4413      	add	r3, r2
 800d938:	4619      	mov	r1, r3
 800d93a:	6938      	ldr	r0, [r7, #16]
 800d93c:	f7ff ff0c 	bl	800d758 <move_window>
 800d940:	4603      	mov	r3, r0
 800d942:	2b00      	cmp	r3, #0
 800d944:	f040 808c 	bne.w	800da60 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	1c5a      	adds	r2, r3, #1
 800d94c:	60fa      	str	r2, [r7, #12]
 800d94e:	693a      	ldr	r2, [r7, #16]
 800d950:	8992      	ldrh	r2, [r2, #12]
 800d952:	fbb3 f1f2 	udiv	r1, r3, r2
 800d956:	fb01 f202 	mul.w	r2, r1, r2
 800d95a:	1a9b      	subs	r3, r3, r2
 800d95c:	693a      	ldr	r2, [r7, #16]
 800d95e:	4413      	add	r3, r2
 800d960:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d964:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d966:	693b      	ldr	r3, [r7, #16]
 800d968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	899b      	ldrh	r3, [r3, #12]
 800d96e:	4619      	mov	r1, r3
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	fbb3 f3f1 	udiv	r3, r3, r1
 800d976:	4413      	add	r3, r2
 800d978:	4619      	mov	r1, r3
 800d97a:	6938      	ldr	r0, [r7, #16]
 800d97c:	f7ff feec 	bl	800d758 <move_window>
 800d980:	4603      	mov	r3, r0
 800d982:	2b00      	cmp	r3, #0
 800d984:	d16e      	bne.n	800da64 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d986:	693b      	ldr	r3, [r7, #16]
 800d988:	899b      	ldrh	r3, [r3, #12]
 800d98a:	461a      	mov	r2, r3
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d992:	fb01 f202 	mul.w	r2, r1, r2
 800d996:	1a9b      	subs	r3, r3, r2
 800d998:	693a      	ldr	r2, [r7, #16]
 800d99a:	4413      	add	r3, r2
 800d99c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d9a0:	021b      	lsls	r3, r3, #8
 800d9a2:	68ba      	ldr	r2, [r7, #8]
 800d9a4:	4313      	orrs	r3, r2
 800d9a6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	f003 0301 	and.w	r3, r3, #1
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d002      	beq.n	800d9b8 <get_fat+0xe6>
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	091b      	lsrs	r3, r3, #4
 800d9b6:	e002      	b.n	800d9be <get_fat+0xec>
 800d9b8:	68bb      	ldr	r3, [r7, #8]
 800d9ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d9be:	617b      	str	r3, [r7, #20]
			break;
 800d9c0:	e055      	b.n	800da6e <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d9c2:	693b      	ldr	r3, [r7, #16]
 800d9c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9c6:	693b      	ldr	r3, [r7, #16]
 800d9c8:	899b      	ldrh	r3, [r3, #12]
 800d9ca:	085b      	lsrs	r3, r3, #1
 800d9cc:	b29b      	uxth	r3, r3
 800d9ce:	4619      	mov	r1, r3
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	fbb3 f3f1 	udiv	r3, r3, r1
 800d9d6:	4413      	add	r3, r2
 800d9d8:	4619      	mov	r1, r3
 800d9da:	6938      	ldr	r0, [r7, #16]
 800d9dc:	f7ff febc 	bl	800d758 <move_window>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d140      	bne.n	800da68 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d9e6:	693b      	ldr	r3, [r7, #16]
 800d9e8:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	005b      	lsls	r3, r3, #1
 800d9f0:	693a      	ldr	r2, [r7, #16]
 800d9f2:	8992      	ldrh	r2, [r2, #12]
 800d9f4:	fbb3 f0f2 	udiv	r0, r3, r2
 800d9f8:	fb00 f202 	mul.w	r2, r0, r2
 800d9fc:	1a9b      	subs	r3, r3, r2
 800d9fe:	440b      	add	r3, r1
 800da00:	4618      	mov	r0, r3
 800da02:	f7ff fbc7 	bl	800d194 <ld_word>
 800da06:	4603      	mov	r3, r0
 800da08:	617b      	str	r3, [r7, #20]
			break;
 800da0a:	e030      	b.n	800da6e <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800da0c:	693b      	ldr	r3, [r7, #16]
 800da0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da10:	693b      	ldr	r3, [r7, #16]
 800da12:	899b      	ldrh	r3, [r3, #12]
 800da14:	089b      	lsrs	r3, r3, #2
 800da16:	b29b      	uxth	r3, r3
 800da18:	4619      	mov	r1, r3
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	fbb3 f3f1 	udiv	r3, r3, r1
 800da20:	4413      	add	r3, r2
 800da22:	4619      	mov	r1, r3
 800da24:	6938      	ldr	r0, [r7, #16]
 800da26:	f7ff fe97 	bl	800d758 <move_window>
 800da2a:	4603      	mov	r3, r0
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d11d      	bne.n	800da6c <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800da30:	693b      	ldr	r3, [r7, #16]
 800da32:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	009b      	lsls	r3, r3, #2
 800da3a:	693a      	ldr	r2, [r7, #16]
 800da3c:	8992      	ldrh	r2, [r2, #12]
 800da3e:	fbb3 f0f2 	udiv	r0, r3, r2
 800da42:	fb00 f202 	mul.w	r2, r0, r2
 800da46:	1a9b      	subs	r3, r3, r2
 800da48:	440b      	add	r3, r1
 800da4a:	4618      	mov	r0, r3
 800da4c:	f7ff fbba 	bl	800d1c4 <ld_dword>
 800da50:	4603      	mov	r3, r0
 800da52:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800da56:	617b      	str	r3, [r7, #20]
			break;
 800da58:	e009      	b.n	800da6e <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800da5a:	2301      	movs	r3, #1
 800da5c:	617b      	str	r3, [r7, #20]
 800da5e:	e006      	b.n	800da6e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800da60:	bf00      	nop
 800da62:	e004      	b.n	800da6e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800da64:	bf00      	nop
 800da66:	e002      	b.n	800da6e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800da68:	bf00      	nop
 800da6a:	e000      	b.n	800da6e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800da6c:	bf00      	nop
		}
	}

	return val;
 800da6e:	697b      	ldr	r3, [r7, #20]
}
 800da70:	4618      	mov	r0, r3
 800da72:	3718      	adds	r7, #24
 800da74:	46bd      	mov	sp, r7
 800da76:	bd80      	pop	{r7, pc}

0800da78 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800da78:	b590      	push	{r4, r7, lr}
 800da7a:	b089      	sub	sp, #36	@ 0x24
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	60f8      	str	r0, [r7, #12]
 800da80:	60b9      	str	r1, [r7, #8]
 800da82:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800da84:	2302      	movs	r3, #2
 800da86:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	2b01      	cmp	r3, #1
 800da8c:	f240 8109 	bls.w	800dca2 <put_fat+0x22a>
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	6a1b      	ldr	r3, [r3, #32]
 800da94:	68ba      	ldr	r2, [r7, #8]
 800da96:	429a      	cmp	r2, r3
 800da98:	f080 8103 	bcs.w	800dca2 <put_fat+0x22a>
		switch (fs->fs_type) {
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	781b      	ldrb	r3, [r3, #0]
 800daa0:	2b03      	cmp	r3, #3
 800daa2:	f000 80b6 	beq.w	800dc12 <put_fat+0x19a>
 800daa6:	2b03      	cmp	r3, #3
 800daa8:	f300 80fb 	bgt.w	800dca2 <put_fat+0x22a>
 800daac:	2b01      	cmp	r3, #1
 800daae:	d003      	beq.n	800dab8 <put_fat+0x40>
 800dab0:	2b02      	cmp	r3, #2
 800dab2:	f000 8083 	beq.w	800dbbc <put_fat+0x144>
 800dab6:	e0f4      	b.n	800dca2 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800dab8:	68bb      	ldr	r3, [r7, #8]
 800daba:	61bb      	str	r3, [r7, #24]
 800dabc:	69bb      	ldr	r3, [r7, #24]
 800dabe:	085b      	lsrs	r3, r3, #1
 800dac0:	69ba      	ldr	r2, [r7, #24]
 800dac2:	4413      	add	r3, r2
 800dac4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	899b      	ldrh	r3, [r3, #12]
 800dace:	4619      	mov	r1, r3
 800dad0:	69bb      	ldr	r3, [r7, #24]
 800dad2:	fbb3 f3f1 	udiv	r3, r3, r1
 800dad6:	4413      	add	r3, r2
 800dad8:	4619      	mov	r1, r3
 800dada:	68f8      	ldr	r0, [r7, #12]
 800dadc:	f7ff fe3c 	bl	800d758 <move_window>
 800dae0:	4603      	mov	r3, r0
 800dae2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dae4:	7ffb      	ldrb	r3, [r7, #31]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	f040 80d4 	bne.w	800dc94 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800daf2:	69bb      	ldr	r3, [r7, #24]
 800daf4:	1c5a      	adds	r2, r3, #1
 800daf6:	61ba      	str	r2, [r7, #24]
 800daf8:	68fa      	ldr	r2, [r7, #12]
 800dafa:	8992      	ldrh	r2, [r2, #12]
 800dafc:	fbb3 f0f2 	udiv	r0, r3, r2
 800db00:	fb00 f202 	mul.w	r2, r0, r2
 800db04:	1a9b      	subs	r3, r3, r2
 800db06:	440b      	add	r3, r1
 800db08:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	f003 0301 	and.w	r3, r3, #1
 800db10:	2b00      	cmp	r3, #0
 800db12:	d00d      	beq.n	800db30 <put_fat+0xb8>
 800db14:	697b      	ldr	r3, [r7, #20]
 800db16:	781b      	ldrb	r3, [r3, #0]
 800db18:	b25b      	sxtb	r3, r3
 800db1a:	f003 030f 	and.w	r3, r3, #15
 800db1e:	b25a      	sxtb	r2, r3
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	b2db      	uxtb	r3, r3
 800db24:	011b      	lsls	r3, r3, #4
 800db26:	b25b      	sxtb	r3, r3
 800db28:	4313      	orrs	r3, r2
 800db2a:	b25b      	sxtb	r3, r3
 800db2c:	b2db      	uxtb	r3, r3
 800db2e:	e001      	b.n	800db34 <put_fat+0xbc>
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	b2db      	uxtb	r3, r3
 800db34:	697a      	ldr	r2, [r7, #20]
 800db36:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	2201      	movs	r2, #1
 800db3c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	899b      	ldrh	r3, [r3, #12]
 800db46:	4619      	mov	r1, r3
 800db48:	69bb      	ldr	r3, [r7, #24]
 800db4a:	fbb3 f3f1 	udiv	r3, r3, r1
 800db4e:	4413      	add	r3, r2
 800db50:	4619      	mov	r1, r3
 800db52:	68f8      	ldr	r0, [r7, #12]
 800db54:	f7ff fe00 	bl	800d758 <move_window>
 800db58:	4603      	mov	r3, r0
 800db5a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800db5c:	7ffb      	ldrb	r3, [r7, #31]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	f040 809a 	bne.w	800dc98 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	899b      	ldrh	r3, [r3, #12]
 800db6e:	461a      	mov	r2, r3
 800db70:	69bb      	ldr	r3, [r7, #24]
 800db72:	fbb3 f0f2 	udiv	r0, r3, r2
 800db76:	fb00 f202 	mul.w	r2, r0, r2
 800db7a:	1a9b      	subs	r3, r3, r2
 800db7c:	440b      	add	r3, r1
 800db7e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	f003 0301 	and.w	r3, r3, #1
 800db86:	2b00      	cmp	r3, #0
 800db88:	d003      	beq.n	800db92 <put_fat+0x11a>
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	091b      	lsrs	r3, r3, #4
 800db8e:	b2db      	uxtb	r3, r3
 800db90:	e00e      	b.n	800dbb0 <put_fat+0x138>
 800db92:	697b      	ldr	r3, [r7, #20]
 800db94:	781b      	ldrb	r3, [r3, #0]
 800db96:	b25b      	sxtb	r3, r3
 800db98:	f023 030f 	bic.w	r3, r3, #15
 800db9c:	b25a      	sxtb	r2, r3
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	0a1b      	lsrs	r3, r3, #8
 800dba2:	b25b      	sxtb	r3, r3
 800dba4:	f003 030f 	and.w	r3, r3, #15
 800dba8:	b25b      	sxtb	r3, r3
 800dbaa:	4313      	orrs	r3, r2
 800dbac:	b25b      	sxtb	r3, r3
 800dbae:	b2db      	uxtb	r3, r3
 800dbb0:	697a      	ldr	r2, [r7, #20]
 800dbb2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	2201      	movs	r2, #1
 800dbb8:	70da      	strb	r2, [r3, #3]
			break;
 800dbba:	e072      	b.n	800dca2 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	899b      	ldrh	r3, [r3, #12]
 800dbc4:	085b      	lsrs	r3, r3, #1
 800dbc6:	b29b      	uxth	r3, r3
 800dbc8:	4619      	mov	r1, r3
 800dbca:	68bb      	ldr	r3, [r7, #8]
 800dbcc:	fbb3 f3f1 	udiv	r3, r3, r1
 800dbd0:	4413      	add	r3, r2
 800dbd2:	4619      	mov	r1, r3
 800dbd4:	68f8      	ldr	r0, [r7, #12]
 800dbd6:	f7ff fdbf 	bl	800d758 <move_window>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dbde:	7ffb      	ldrb	r3, [r7, #31]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d15b      	bne.n	800dc9c <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	005b      	lsls	r3, r3, #1
 800dbee:	68fa      	ldr	r2, [r7, #12]
 800dbf0:	8992      	ldrh	r2, [r2, #12]
 800dbf2:	fbb3 f0f2 	udiv	r0, r3, r2
 800dbf6:	fb00 f202 	mul.w	r2, r0, r2
 800dbfa:	1a9b      	subs	r3, r3, r2
 800dbfc:	440b      	add	r3, r1
 800dbfe:	687a      	ldr	r2, [r7, #4]
 800dc00:	b292      	uxth	r2, r2
 800dc02:	4611      	mov	r1, r2
 800dc04:	4618      	mov	r0, r3
 800dc06:	f7ff fb00 	bl	800d20a <st_word>
			fs->wflag = 1;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	2201      	movs	r2, #1
 800dc0e:	70da      	strb	r2, [r3, #3]
			break;
 800dc10:	e047      	b.n	800dca2 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	899b      	ldrh	r3, [r3, #12]
 800dc1a:	089b      	lsrs	r3, r3, #2
 800dc1c:	b29b      	uxth	r3, r3
 800dc1e:	4619      	mov	r1, r3
 800dc20:	68bb      	ldr	r3, [r7, #8]
 800dc22:	fbb3 f3f1 	udiv	r3, r3, r1
 800dc26:	4413      	add	r3, r2
 800dc28:	4619      	mov	r1, r3
 800dc2a:	68f8      	ldr	r0, [r7, #12]
 800dc2c:	f7ff fd94 	bl	800d758 <move_window>
 800dc30:	4603      	mov	r3, r0
 800dc32:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dc34:	7ffb      	ldrb	r3, [r7, #31]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d132      	bne.n	800dca0 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800dc46:	68bb      	ldr	r3, [r7, #8]
 800dc48:	009b      	lsls	r3, r3, #2
 800dc4a:	68fa      	ldr	r2, [r7, #12]
 800dc4c:	8992      	ldrh	r2, [r2, #12]
 800dc4e:	fbb3 f0f2 	udiv	r0, r3, r2
 800dc52:	fb00 f202 	mul.w	r2, r0, r2
 800dc56:	1a9b      	subs	r3, r3, r2
 800dc58:	440b      	add	r3, r1
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f7ff fab2 	bl	800d1c4 <ld_dword>
 800dc60:	4603      	mov	r3, r0
 800dc62:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800dc66:	4323      	orrs	r3, r4
 800dc68:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	009b      	lsls	r3, r3, #2
 800dc74:	68fa      	ldr	r2, [r7, #12]
 800dc76:	8992      	ldrh	r2, [r2, #12]
 800dc78:	fbb3 f0f2 	udiv	r0, r3, r2
 800dc7c:	fb00 f202 	mul.w	r2, r0, r2
 800dc80:	1a9b      	subs	r3, r3, r2
 800dc82:	440b      	add	r3, r1
 800dc84:	6879      	ldr	r1, [r7, #4]
 800dc86:	4618      	mov	r0, r3
 800dc88:	f7ff fada 	bl	800d240 <st_dword>
			fs->wflag = 1;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	2201      	movs	r2, #1
 800dc90:	70da      	strb	r2, [r3, #3]
			break;
 800dc92:	e006      	b.n	800dca2 <put_fat+0x22a>
			if (res != FR_OK) break;
 800dc94:	bf00      	nop
 800dc96:	e004      	b.n	800dca2 <put_fat+0x22a>
			if (res != FR_OK) break;
 800dc98:	bf00      	nop
 800dc9a:	e002      	b.n	800dca2 <put_fat+0x22a>
			if (res != FR_OK) break;
 800dc9c:	bf00      	nop
 800dc9e:	e000      	b.n	800dca2 <put_fat+0x22a>
			if (res != FR_OK) break;
 800dca0:	bf00      	nop
		}
	}
	return res;
 800dca2:	7ffb      	ldrb	r3, [r7, #31]
}
 800dca4:	4618      	mov	r0, r3
 800dca6:	3724      	adds	r7, #36	@ 0x24
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd90      	pop	{r4, r7, pc}

0800dcac <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b088      	sub	sp, #32
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	60f8      	str	r0, [r7, #12]
 800dcb4:	60b9      	str	r1, [r7, #8]
 800dcb6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	2b01      	cmp	r3, #1
 800dcc6:	d904      	bls.n	800dcd2 <remove_chain+0x26>
 800dcc8:	69bb      	ldr	r3, [r7, #24]
 800dcca:	6a1b      	ldr	r3, [r3, #32]
 800dccc:	68ba      	ldr	r2, [r7, #8]
 800dcce:	429a      	cmp	r2, r3
 800dcd0:	d301      	bcc.n	800dcd6 <remove_chain+0x2a>
 800dcd2:	2302      	movs	r3, #2
 800dcd4:	e04b      	b.n	800dd6e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d00c      	beq.n	800dcf6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800dcdc:	f04f 32ff 	mov.w	r2, #4294967295
 800dce0:	6879      	ldr	r1, [r7, #4]
 800dce2:	69b8      	ldr	r0, [r7, #24]
 800dce4:	f7ff fec8 	bl	800da78 <put_fat>
 800dce8:	4603      	mov	r3, r0
 800dcea:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800dcec:	7ffb      	ldrb	r3, [r7, #31]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d001      	beq.n	800dcf6 <remove_chain+0x4a>
 800dcf2:	7ffb      	ldrb	r3, [r7, #31]
 800dcf4:	e03b      	b.n	800dd6e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800dcf6:	68b9      	ldr	r1, [r7, #8]
 800dcf8:	68f8      	ldr	r0, [r7, #12]
 800dcfa:	f7ff fdea 	bl	800d8d2 <get_fat>
 800dcfe:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800dd00:	697b      	ldr	r3, [r7, #20]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d031      	beq.n	800dd6a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800dd06:	697b      	ldr	r3, [r7, #20]
 800dd08:	2b01      	cmp	r3, #1
 800dd0a:	d101      	bne.n	800dd10 <remove_chain+0x64>
 800dd0c:	2302      	movs	r3, #2
 800dd0e:	e02e      	b.n	800dd6e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800dd10:	697b      	ldr	r3, [r7, #20]
 800dd12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd16:	d101      	bne.n	800dd1c <remove_chain+0x70>
 800dd18:	2301      	movs	r3, #1
 800dd1a:	e028      	b.n	800dd6e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	68b9      	ldr	r1, [r7, #8]
 800dd20:	69b8      	ldr	r0, [r7, #24]
 800dd22:	f7ff fea9 	bl	800da78 <put_fat>
 800dd26:	4603      	mov	r3, r0
 800dd28:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800dd2a:	7ffb      	ldrb	r3, [r7, #31]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d001      	beq.n	800dd34 <remove_chain+0x88>
 800dd30:	7ffb      	ldrb	r3, [r7, #31]
 800dd32:	e01c      	b.n	800dd6e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800dd34:	69bb      	ldr	r3, [r7, #24]
 800dd36:	69da      	ldr	r2, [r3, #28]
 800dd38:	69bb      	ldr	r3, [r7, #24]
 800dd3a:	6a1b      	ldr	r3, [r3, #32]
 800dd3c:	3b02      	subs	r3, #2
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	d20b      	bcs.n	800dd5a <remove_chain+0xae>
			fs->free_clst++;
 800dd42:	69bb      	ldr	r3, [r7, #24]
 800dd44:	69db      	ldr	r3, [r3, #28]
 800dd46:	1c5a      	adds	r2, r3, #1
 800dd48:	69bb      	ldr	r3, [r7, #24]
 800dd4a:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800dd4c:	69bb      	ldr	r3, [r7, #24]
 800dd4e:	791b      	ldrb	r3, [r3, #4]
 800dd50:	f043 0301 	orr.w	r3, r3, #1
 800dd54:	b2da      	uxtb	r2, r3
 800dd56:	69bb      	ldr	r3, [r7, #24]
 800dd58:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800dd5e:	69bb      	ldr	r3, [r7, #24]
 800dd60:	6a1b      	ldr	r3, [r3, #32]
 800dd62:	68ba      	ldr	r2, [r7, #8]
 800dd64:	429a      	cmp	r2, r3
 800dd66:	d3c6      	bcc.n	800dcf6 <remove_chain+0x4a>
 800dd68:	e000      	b.n	800dd6c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800dd6a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800dd6c:	2300      	movs	r3, #0
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3720      	adds	r7, #32
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}

0800dd76 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800dd76:	b580      	push	{r7, lr}
 800dd78:	b088      	sub	sp, #32
 800dd7a:	af00      	add	r7, sp, #0
 800dd7c:	6078      	str	r0, [r7, #4]
 800dd7e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d10d      	bne.n	800dda8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800dd8c:	693b      	ldr	r3, [r7, #16]
 800dd8e:	699b      	ldr	r3, [r3, #24]
 800dd90:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800dd92:	69bb      	ldr	r3, [r7, #24]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d004      	beq.n	800dda2 <create_chain+0x2c>
 800dd98:	693b      	ldr	r3, [r7, #16]
 800dd9a:	6a1b      	ldr	r3, [r3, #32]
 800dd9c:	69ba      	ldr	r2, [r7, #24]
 800dd9e:	429a      	cmp	r2, r3
 800dda0:	d31b      	bcc.n	800ddda <create_chain+0x64>
 800dda2:	2301      	movs	r3, #1
 800dda4:	61bb      	str	r3, [r7, #24]
 800dda6:	e018      	b.n	800ddda <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800dda8:	6839      	ldr	r1, [r7, #0]
 800ddaa:	6878      	ldr	r0, [r7, #4]
 800ddac:	f7ff fd91 	bl	800d8d2 <get_fat>
 800ddb0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	2b01      	cmp	r3, #1
 800ddb6:	d801      	bhi.n	800ddbc <create_chain+0x46>
 800ddb8:	2301      	movs	r3, #1
 800ddba:	e070      	b.n	800de9e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddc2:	d101      	bne.n	800ddc8 <create_chain+0x52>
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	e06a      	b.n	800de9e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ddc8:	693b      	ldr	r3, [r7, #16]
 800ddca:	6a1b      	ldr	r3, [r3, #32]
 800ddcc:	68fa      	ldr	r2, [r7, #12]
 800ddce:	429a      	cmp	r2, r3
 800ddd0:	d201      	bcs.n	800ddd6 <create_chain+0x60>
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	e063      	b.n	800de9e <create_chain+0x128>
		scl = clst;
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ddda:	69bb      	ldr	r3, [r7, #24]
 800dddc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ddde:	69fb      	ldr	r3, [r7, #28]
 800dde0:	3301      	adds	r3, #1
 800dde2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800dde4:	693b      	ldr	r3, [r7, #16]
 800dde6:	6a1b      	ldr	r3, [r3, #32]
 800dde8:	69fa      	ldr	r2, [r7, #28]
 800ddea:	429a      	cmp	r2, r3
 800ddec:	d307      	bcc.n	800ddfe <create_chain+0x88>
				ncl = 2;
 800ddee:	2302      	movs	r3, #2
 800ddf0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ddf2:	69fa      	ldr	r2, [r7, #28]
 800ddf4:	69bb      	ldr	r3, [r7, #24]
 800ddf6:	429a      	cmp	r2, r3
 800ddf8:	d901      	bls.n	800ddfe <create_chain+0x88>
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	e04f      	b.n	800de9e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ddfe:	69f9      	ldr	r1, [r7, #28]
 800de00:	6878      	ldr	r0, [r7, #4]
 800de02:	f7ff fd66 	bl	800d8d2 <get_fat>
 800de06:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d00e      	beq.n	800de2c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	2b01      	cmp	r3, #1
 800de12:	d003      	beq.n	800de1c <create_chain+0xa6>
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de1a:	d101      	bne.n	800de20 <create_chain+0xaa>
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	e03e      	b.n	800de9e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800de20:	69fa      	ldr	r2, [r7, #28]
 800de22:	69bb      	ldr	r3, [r7, #24]
 800de24:	429a      	cmp	r2, r3
 800de26:	d1da      	bne.n	800ddde <create_chain+0x68>
 800de28:	2300      	movs	r3, #0
 800de2a:	e038      	b.n	800de9e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800de2c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800de2e:	f04f 32ff 	mov.w	r2, #4294967295
 800de32:	69f9      	ldr	r1, [r7, #28]
 800de34:	6938      	ldr	r0, [r7, #16]
 800de36:	f7ff fe1f 	bl	800da78 <put_fat>
 800de3a:	4603      	mov	r3, r0
 800de3c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800de3e:	7dfb      	ldrb	r3, [r7, #23]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d109      	bne.n	800de58 <create_chain+0xe2>
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d006      	beq.n	800de58 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800de4a:	69fa      	ldr	r2, [r7, #28]
 800de4c:	6839      	ldr	r1, [r7, #0]
 800de4e:	6938      	ldr	r0, [r7, #16]
 800de50:	f7ff fe12 	bl	800da78 <put_fat>
 800de54:	4603      	mov	r3, r0
 800de56:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800de58:	7dfb      	ldrb	r3, [r7, #23]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d116      	bne.n	800de8c <create_chain+0x116>
		fs->last_clst = ncl;
 800de5e:	693b      	ldr	r3, [r7, #16]
 800de60:	69fa      	ldr	r2, [r7, #28]
 800de62:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800de64:	693b      	ldr	r3, [r7, #16]
 800de66:	69da      	ldr	r2, [r3, #28]
 800de68:	693b      	ldr	r3, [r7, #16]
 800de6a:	6a1b      	ldr	r3, [r3, #32]
 800de6c:	3b02      	subs	r3, #2
 800de6e:	429a      	cmp	r2, r3
 800de70:	d804      	bhi.n	800de7c <create_chain+0x106>
 800de72:	693b      	ldr	r3, [r7, #16]
 800de74:	69db      	ldr	r3, [r3, #28]
 800de76:	1e5a      	subs	r2, r3, #1
 800de78:	693b      	ldr	r3, [r7, #16]
 800de7a:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800de7c:	693b      	ldr	r3, [r7, #16]
 800de7e:	791b      	ldrb	r3, [r3, #4]
 800de80:	f043 0301 	orr.w	r3, r3, #1
 800de84:	b2da      	uxtb	r2, r3
 800de86:	693b      	ldr	r3, [r7, #16]
 800de88:	711a      	strb	r2, [r3, #4]
 800de8a:	e007      	b.n	800de9c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800de8c:	7dfb      	ldrb	r3, [r7, #23]
 800de8e:	2b01      	cmp	r3, #1
 800de90:	d102      	bne.n	800de98 <create_chain+0x122>
 800de92:	f04f 33ff 	mov.w	r3, #4294967295
 800de96:	e000      	b.n	800de9a <create_chain+0x124>
 800de98:	2301      	movs	r3, #1
 800de9a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800de9c:	69fb      	ldr	r3, [r7, #28]
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	3720      	adds	r7, #32
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}

0800dea6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800dea6:	b480      	push	{r7}
 800dea8:	b087      	sub	sp, #28
 800deaa:	af00      	add	r7, sp, #0
 800deac:	6078      	str	r0, [r7, #4]
 800deae:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800deba:	3304      	adds	r3, #4
 800debc:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	899b      	ldrh	r3, [r3, #12]
 800dec2:	461a      	mov	r2, r3
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	fbb3 f3f2 	udiv	r3, r3, r2
 800deca:	68fa      	ldr	r2, [r7, #12]
 800decc:	8952      	ldrh	r2, [r2, #10]
 800dece:	fbb3 f3f2 	udiv	r3, r3, r2
 800ded2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ded4:	693b      	ldr	r3, [r7, #16]
 800ded6:	1d1a      	adds	r2, r3, #4
 800ded8:	613a      	str	r2, [r7, #16]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d101      	bne.n	800dee8 <clmt_clust+0x42>
 800dee4:	2300      	movs	r3, #0
 800dee6:	e010      	b.n	800df0a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800dee8:	697a      	ldr	r2, [r7, #20]
 800deea:	68bb      	ldr	r3, [r7, #8]
 800deec:	429a      	cmp	r2, r3
 800deee:	d307      	bcc.n	800df00 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800def0:	697a      	ldr	r2, [r7, #20]
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	1ad3      	subs	r3, r2, r3
 800def6:	617b      	str	r3, [r7, #20]
 800def8:	693b      	ldr	r3, [r7, #16]
 800defa:	3304      	adds	r3, #4
 800defc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800defe:	e7e9      	b.n	800ded4 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800df00:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800df02:	693b      	ldr	r3, [r7, #16]
 800df04:	681a      	ldr	r2, [r3, #0]
 800df06:	697b      	ldr	r3, [r7, #20]
 800df08:	4413      	add	r3, r2
}
 800df0a:	4618      	mov	r0, r3
 800df0c:	371c      	adds	r7, #28
 800df0e:	46bd      	mov	sp, r7
 800df10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df14:	4770      	bx	lr

0800df16 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800df16:	b580      	push	{r7, lr}
 800df18:	b086      	sub	sp, #24
 800df1a:	af00      	add	r7, sp, #0
 800df1c:	6078      	str	r0, [r7, #4]
 800df1e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800df2c:	d204      	bcs.n	800df38 <dir_sdi+0x22>
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	f003 031f 	and.w	r3, r3, #31
 800df34:	2b00      	cmp	r3, #0
 800df36:	d001      	beq.n	800df3c <dir_sdi+0x26>
		return FR_INT_ERR;
 800df38:	2302      	movs	r3, #2
 800df3a:	e071      	b.n	800e020 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	683a      	ldr	r2, [r7, #0]
 800df40:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	689b      	ldr	r3, [r3, #8]
 800df46:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800df48:	697b      	ldr	r3, [r7, #20]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d106      	bne.n	800df5c <dir_sdi+0x46>
 800df4e:	693b      	ldr	r3, [r7, #16]
 800df50:	781b      	ldrb	r3, [r3, #0]
 800df52:	2b02      	cmp	r3, #2
 800df54:	d902      	bls.n	800df5c <dir_sdi+0x46>
		clst = fs->dirbase;
 800df56:	693b      	ldr	r3, [r7, #16]
 800df58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df5a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800df5c:	697b      	ldr	r3, [r7, #20]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d10c      	bne.n	800df7c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	095b      	lsrs	r3, r3, #5
 800df66:	693a      	ldr	r2, [r7, #16]
 800df68:	8912      	ldrh	r2, [r2, #8]
 800df6a:	4293      	cmp	r3, r2
 800df6c:	d301      	bcc.n	800df72 <dir_sdi+0x5c>
 800df6e:	2302      	movs	r3, #2
 800df70:	e056      	b.n	800e020 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800df72:	693b      	ldr	r3, [r7, #16]
 800df74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	61da      	str	r2, [r3, #28]
 800df7a:	e02d      	b.n	800dfd8 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800df7c:	693b      	ldr	r3, [r7, #16]
 800df7e:	895b      	ldrh	r3, [r3, #10]
 800df80:	461a      	mov	r2, r3
 800df82:	693b      	ldr	r3, [r7, #16]
 800df84:	899b      	ldrh	r3, [r3, #12]
 800df86:	fb02 f303 	mul.w	r3, r2, r3
 800df8a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800df8c:	e019      	b.n	800dfc2 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	6979      	ldr	r1, [r7, #20]
 800df92:	4618      	mov	r0, r3
 800df94:	f7ff fc9d 	bl	800d8d2 <get_fat>
 800df98:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800df9a:	697b      	ldr	r3, [r7, #20]
 800df9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfa0:	d101      	bne.n	800dfa6 <dir_sdi+0x90>
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	e03c      	b.n	800e020 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	2b01      	cmp	r3, #1
 800dfaa:	d904      	bls.n	800dfb6 <dir_sdi+0xa0>
 800dfac:	693b      	ldr	r3, [r7, #16]
 800dfae:	6a1b      	ldr	r3, [r3, #32]
 800dfb0:	697a      	ldr	r2, [r7, #20]
 800dfb2:	429a      	cmp	r2, r3
 800dfb4:	d301      	bcc.n	800dfba <dir_sdi+0xa4>
 800dfb6:	2302      	movs	r3, #2
 800dfb8:	e032      	b.n	800e020 <dir_sdi+0x10a>
			ofs -= csz;
 800dfba:	683a      	ldr	r2, [r7, #0]
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	1ad3      	subs	r3, r2, r3
 800dfc0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dfc2:	683a      	ldr	r2, [r7, #0]
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	429a      	cmp	r2, r3
 800dfc8:	d2e1      	bcs.n	800df8e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800dfca:	6979      	ldr	r1, [r7, #20]
 800dfcc:	6938      	ldr	r0, [r7, #16]
 800dfce:	f7ff fc61 	bl	800d894 <clust2sect>
 800dfd2:	4602      	mov	r2, r0
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	697a      	ldr	r2, [r7, #20]
 800dfdc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	69db      	ldr	r3, [r3, #28]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d101      	bne.n	800dfea <dir_sdi+0xd4>
 800dfe6:	2302      	movs	r3, #2
 800dfe8:	e01a      	b.n	800e020 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	69da      	ldr	r2, [r3, #28]
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	899b      	ldrh	r3, [r3, #12]
 800dff2:	4619      	mov	r1, r3
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	fbb3 f3f1 	udiv	r3, r3, r1
 800dffa:	441a      	add	r2, r3
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e000:	693b      	ldr	r3, [r7, #16]
 800e002:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800e006:	693b      	ldr	r3, [r7, #16]
 800e008:	899b      	ldrh	r3, [r3, #12]
 800e00a:	461a      	mov	r2, r3
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	fbb3 f0f2 	udiv	r0, r3, r2
 800e012:	fb00 f202 	mul.w	r2, r0, r2
 800e016:	1a9b      	subs	r3, r3, r2
 800e018:	18ca      	adds	r2, r1, r3
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e01e:	2300      	movs	r3, #0
}
 800e020:	4618      	mov	r0, r3
 800e022:	3718      	adds	r7, #24
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}

0800e028 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b086      	sub	sp, #24
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
 800e030:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	695b      	ldr	r3, [r3, #20]
 800e03c:	3320      	adds	r3, #32
 800e03e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	69db      	ldr	r3, [r3, #28]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d003      	beq.n	800e050 <dir_next+0x28>
 800e048:	68bb      	ldr	r3, [r7, #8]
 800e04a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e04e:	d301      	bcc.n	800e054 <dir_next+0x2c>
 800e050:	2304      	movs	r3, #4
 800e052:	e0bb      	b.n	800e1cc <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	899b      	ldrh	r3, [r3, #12]
 800e058:	461a      	mov	r2, r3
 800e05a:	68bb      	ldr	r3, [r7, #8]
 800e05c:	fbb3 f1f2 	udiv	r1, r3, r2
 800e060:	fb01 f202 	mul.w	r2, r1, r2
 800e064:	1a9b      	subs	r3, r3, r2
 800e066:	2b00      	cmp	r3, #0
 800e068:	f040 809d 	bne.w	800e1a6 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	69db      	ldr	r3, [r3, #28]
 800e070:	1c5a      	adds	r2, r3, #1
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	699b      	ldr	r3, [r3, #24]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d10b      	bne.n	800e096 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	095b      	lsrs	r3, r3, #5
 800e082:	68fa      	ldr	r2, [r7, #12]
 800e084:	8912      	ldrh	r2, [r2, #8]
 800e086:	4293      	cmp	r3, r2
 800e088:	f0c0 808d 	bcc.w	800e1a6 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2200      	movs	r2, #0
 800e090:	61da      	str	r2, [r3, #28]
 800e092:	2304      	movs	r3, #4
 800e094:	e09a      	b.n	800e1cc <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	899b      	ldrh	r3, [r3, #12]
 800e09a:	461a      	mov	r2, r3
 800e09c:	68bb      	ldr	r3, [r7, #8]
 800e09e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e0a2:	68fa      	ldr	r2, [r7, #12]
 800e0a4:	8952      	ldrh	r2, [r2, #10]
 800e0a6:	3a01      	subs	r2, #1
 800e0a8:	4013      	ands	r3, r2
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d17b      	bne.n	800e1a6 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e0ae:	687a      	ldr	r2, [r7, #4]
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	699b      	ldr	r3, [r3, #24]
 800e0b4:	4619      	mov	r1, r3
 800e0b6:	4610      	mov	r0, r2
 800e0b8:	f7ff fc0b 	bl	800d8d2 <get_fat>
 800e0bc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	2b01      	cmp	r3, #1
 800e0c2:	d801      	bhi.n	800e0c8 <dir_next+0xa0>
 800e0c4:	2302      	movs	r3, #2
 800e0c6:	e081      	b.n	800e1cc <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0ce:	d101      	bne.n	800e0d4 <dir_next+0xac>
 800e0d0:	2301      	movs	r3, #1
 800e0d2:	e07b      	b.n	800e1cc <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	6a1b      	ldr	r3, [r3, #32]
 800e0d8:	697a      	ldr	r2, [r7, #20]
 800e0da:	429a      	cmp	r2, r3
 800e0dc:	d359      	bcc.n	800e192 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d104      	bne.n	800e0ee <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	61da      	str	r2, [r3, #28]
 800e0ea:	2304      	movs	r3, #4
 800e0ec:	e06e      	b.n	800e1cc <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e0ee:	687a      	ldr	r2, [r7, #4]
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	699b      	ldr	r3, [r3, #24]
 800e0f4:	4619      	mov	r1, r3
 800e0f6:	4610      	mov	r0, r2
 800e0f8:	f7ff fe3d 	bl	800dd76 <create_chain>
 800e0fc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e0fe:	697b      	ldr	r3, [r7, #20]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d101      	bne.n	800e108 <dir_next+0xe0>
 800e104:	2307      	movs	r3, #7
 800e106:	e061      	b.n	800e1cc <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e108:	697b      	ldr	r3, [r7, #20]
 800e10a:	2b01      	cmp	r3, #1
 800e10c:	d101      	bne.n	800e112 <dir_next+0xea>
 800e10e:	2302      	movs	r3, #2
 800e110:	e05c      	b.n	800e1cc <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e118:	d101      	bne.n	800e11e <dir_next+0xf6>
 800e11a:	2301      	movs	r3, #1
 800e11c:	e056      	b.n	800e1cc <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e11e:	68f8      	ldr	r0, [r7, #12]
 800e120:	f7ff fad6 	bl	800d6d0 <sync_window>
 800e124:	4603      	mov	r3, r0
 800e126:	2b00      	cmp	r3, #0
 800e128:	d001      	beq.n	800e12e <dir_next+0x106>
 800e12a:	2301      	movs	r3, #1
 800e12c:	e04e      	b.n	800e1cc <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	899b      	ldrh	r3, [r3, #12]
 800e138:	461a      	mov	r2, r3
 800e13a:	2100      	movs	r1, #0
 800e13c:	f7ff f8cd 	bl	800d2da <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e140:	2300      	movs	r3, #0
 800e142:	613b      	str	r3, [r7, #16]
 800e144:	6979      	ldr	r1, [r7, #20]
 800e146:	68f8      	ldr	r0, [r7, #12]
 800e148:	f7ff fba4 	bl	800d894 <clust2sect>
 800e14c:	4602      	mov	r2, r0
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	639a      	str	r2, [r3, #56]	@ 0x38
 800e152:	e012      	b.n	800e17a <dir_next+0x152>
						fs->wflag = 1;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	2201      	movs	r2, #1
 800e158:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e15a:	68f8      	ldr	r0, [r7, #12]
 800e15c:	f7ff fab8 	bl	800d6d0 <sync_window>
 800e160:	4603      	mov	r3, r0
 800e162:	2b00      	cmp	r3, #0
 800e164:	d001      	beq.n	800e16a <dir_next+0x142>
 800e166:	2301      	movs	r3, #1
 800e168:	e030      	b.n	800e1cc <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e16a:	693b      	ldr	r3, [r7, #16]
 800e16c:	3301      	adds	r3, #1
 800e16e:	613b      	str	r3, [r7, #16]
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e174:	1c5a      	adds	r2, r3, #1
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	639a      	str	r2, [r3, #56]	@ 0x38
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	895b      	ldrh	r3, [r3, #10]
 800e17e:	461a      	mov	r2, r3
 800e180:	693b      	ldr	r3, [r7, #16]
 800e182:	4293      	cmp	r3, r2
 800e184:	d3e6      	bcc.n	800e154 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e18a:	693b      	ldr	r3, [r7, #16]
 800e18c:	1ad2      	subs	r2, r2, r3
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	697a      	ldr	r2, [r7, #20]
 800e196:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e198:	6979      	ldr	r1, [r7, #20]
 800e19a:	68f8      	ldr	r0, [r7, #12]
 800e19c:	f7ff fb7a 	bl	800d894 <clust2sect>
 800e1a0:	4602      	mov	r2, r0
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	68ba      	ldr	r2, [r7, #8]
 800e1aa:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	899b      	ldrh	r3, [r3, #12]
 800e1b6:	461a      	mov	r2, r3
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	fbb3 f0f2 	udiv	r0, r3, r2
 800e1be:	fb00 f202 	mul.w	r2, r0, r2
 800e1c2:	1a9b      	subs	r3, r3, r2
 800e1c4:	18ca      	adds	r2, r1, r3
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e1ca:	2300      	movs	r3, #0
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3718      	adds	r7, #24
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}

0800e1d4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b086      	sub	sp, #24
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
 800e1dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e1e4:	2100      	movs	r1, #0
 800e1e6:	6878      	ldr	r0, [r7, #4]
 800e1e8:	f7ff fe95 	bl	800df16 <dir_sdi>
 800e1ec:	4603      	mov	r3, r0
 800e1ee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e1f0:	7dfb      	ldrb	r3, [r7, #23]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d12b      	bne.n	800e24e <dir_alloc+0x7a>
		n = 0;
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	69db      	ldr	r3, [r3, #28]
 800e1fe:	4619      	mov	r1, r3
 800e200:	68f8      	ldr	r0, [r7, #12]
 800e202:	f7ff faa9 	bl	800d758 <move_window>
 800e206:	4603      	mov	r3, r0
 800e208:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e20a:	7dfb      	ldrb	r3, [r7, #23]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d11d      	bne.n	800e24c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	6a1b      	ldr	r3, [r3, #32]
 800e214:	781b      	ldrb	r3, [r3, #0]
 800e216:	2be5      	cmp	r3, #229	@ 0xe5
 800e218:	d004      	beq.n	800e224 <dir_alloc+0x50>
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	6a1b      	ldr	r3, [r3, #32]
 800e21e:	781b      	ldrb	r3, [r3, #0]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d107      	bne.n	800e234 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e224:	693b      	ldr	r3, [r7, #16]
 800e226:	3301      	adds	r3, #1
 800e228:	613b      	str	r3, [r7, #16]
 800e22a:	693a      	ldr	r2, [r7, #16]
 800e22c:	683b      	ldr	r3, [r7, #0]
 800e22e:	429a      	cmp	r2, r3
 800e230:	d102      	bne.n	800e238 <dir_alloc+0x64>
 800e232:	e00c      	b.n	800e24e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e234:	2300      	movs	r3, #0
 800e236:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e238:	2101      	movs	r1, #1
 800e23a:	6878      	ldr	r0, [r7, #4]
 800e23c:	f7ff fef4 	bl	800e028 <dir_next>
 800e240:	4603      	mov	r3, r0
 800e242:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e244:	7dfb      	ldrb	r3, [r7, #23]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d0d7      	beq.n	800e1fa <dir_alloc+0x26>
 800e24a:	e000      	b.n	800e24e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e24c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e24e:	7dfb      	ldrb	r3, [r7, #23]
 800e250:	2b04      	cmp	r3, #4
 800e252:	d101      	bne.n	800e258 <dir_alloc+0x84>
 800e254:	2307      	movs	r3, #7
 800e256:	75fb      	strb	r3, [r7, #23]
	return res;
 800e258:	7dfb      	ldrb	r3, [r7, #23]
}
 800e25a:	4618      	mov	r0, r3
 800e25c:	3718      	adds	r7, #24
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd80      	pop	{r7, pc}

0800e262 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e262:	b580      	push	{r7, lr}
 800e264:	b084      	sub	sp, #16
 800e266:	af00      	add	r7, sp, #0
 800e268:	6078      	str	r0, [r7, #4]
 800e26a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	331a      	adds	r3, #26
 800e270:	4618      	mov	r0, r3
 800e272:	f7fe ff8f 	bl	800d194 <ld_word>
 800e276:	4603      	mov	r3, r0
 800e278:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	781b      	ldrb	r3, [r3, #0]
 800e27e:	2b03      	cmp	r3, #3
 800e280:	d109      	bne.n	800e296 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	3314      	adds	r3, #20
 800e286:	4618      	mov	r0, r3
 800e288:	f7fe ff84 	bl	800d194 <ld_word>
 800e28c:	4603      	mov	r3, r0
 800e28e:	041b      	lsls	r3, r3, #16
 800e290:	68fa      	ldr	r2, [r7, #12]
 800e292:	4313      	orrs	r3, r2
 800e294:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e296:	68fb      	ldr	r3, [r7, #12]
}
 800e298:	4618      	mov	r0, r3
 800e29a:	3710      	adds	r7, #16
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}

0800e2a0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b084      	sub	sp, #16
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	60f8      	str	r0, [r7, #12]
 800e2a8:	60b9      	str	r1, [r7, #8]
 800e2aa:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e2ac:	68bb      	ldr	r3, [r7, #8]
 800e2ae:	331a      	adds	r3, #26
 800e2b0:	687a      	ldr	r2, [r7, #4]
 800e2b2:	b292      	uxth	r2, r2
 800e2b4:	4611      	mov	r1, r2
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	f7fe ffa7 	bl	800d20a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	781b      	ldrb	r3, [r3, #0]
 800e2c0:	2b03      	cmp	r3, #3
 800e2c2:	d109      	bne.n	800e2d8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e2c4:	68bb      	ldr	r3, [r7, #8]
 800e2c6:	f103 0214 	add.w	r2, r3, #20
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	0c1b      	lsrs	r3, r3, #16
 800e2ce:	b29b      	uxth	r3, r3
 800e2d0:	4619      	mov	r1, r3
 800e2d2:	4610      	mov	r0, r2
 800e2d4:	f7fe ff99 	bl	800d20a <st_word>
	}
}
 800e2d8:	bf00      	nop
 800e2da:	3710      	adds	r7, #16
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bd80      	pop	{r7, pc}

0800e2e0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e2e0:	b590      	push	{r4, r7, lr}
 800e2e2:	b087      	sub	sp, #28
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
 800e2e8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	331a      	adds	r3, #26
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f7fe ff50 	bl	800d194 <ld_word>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d001      	beq.n	800e2fe <cmp_lfn+0x1e>
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	e059      	b.n	800e3b2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	781b      	ldrb	r3, [r3, #0]
 800e302:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e306:	1e5a      	subs	r2, r3, #1
 800e308:	4613      	mov	r3, r2
 800e30a:	005b      	lsls	r3, r3, #1
 800e30c:	4413      	add	r3, r2
 800e30e:	009b      	lsls	r3, r3, #2
 800e310:	4413      	add	r3, r2
 800e312:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e314:	2301      	movs	r3, #1
 800e316:	81fb      	strh	r3, [r7, #14]
 800e318:	2300      	movs	r3, #0
 800e31a:	613b      	str	r3, [r7, #16]
 800e31c:	e033      	b.n	800e386 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e31e:	4a27      	ldr	r2, [pc, #156]	@ (800e3bc <cmp_lfn+0xdc>)
 800e320:	693b      	ldr	r3, [r7, #16]
 800e322:	4413      	add	r3, r2
 800e324:	781b      	ldrb	r3, [r3, #0]
 800e326:	461a      	mov	r2, r3
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	4413      	add	r3, r2
 800e32c:	4618      	mov	r0, r3
 800e32e:	f7fe ff31 	bl	800d194 <ld_word>
 800e332:	4603      	mov	r3, r0
 800e334:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e336:	89fb      	ldrh	r3, [r7, #14]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d01a      	beq.n	800e372 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e33c:	697b      	ldr	r3, [r7, #20]
 800e33e:	2bfe      	cmp	r3, #254	@ 0xfe
 800e340:	d812      	bhi.n	800e368 <cmp_lfn+0x88>
 800e342:	89bb      	ldrh	r3, [r7, #12]
 800e344:	4618      	mov	r0, r3
 800e346:	f002 f83d 	bl	80103c4 <ff_wtoupper>
 800e34a:	4603      	mov	r3, r0
 800e34c:	461c      	mov	r4, r3
 800e34e:	697b      	ldr	r3, [r7, #20]
 800e350:	1c5a      	adds	r2, r3, #1
 800e352:	617a      	str	r2, [r7, #20]
 800e354:	005b      	lsls	r3, r3, #1
 800e356:	687a      	ldr	r2, [r7, #4]
 800e358:	4413      	add	r3, r2
 800e35a:	881b      	ldrh	r3, [r3, #0]
 800e35c:	4618      	mov	r0, r3
 800e35e:	f002 f831 	bl	80103c4 <ff_wtoupper>
 800e362:	4603      	mov	r3, r0
 800e364:	429c      	cmp	r4, r3
 800e366:	d001      	beq.n	800e36c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e368:	2300      	movs	r3, #0
 800e36a:	e022      	b.n	800e3b2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800e36c:	89bb      	ldrh	r3, [r7, #12]
 800e36e:	81fb      	strh	r3, [r7, #14]
 800e370:	e006      	b.n	800e380 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e372:	89bb      	ldrh	r3, [r7, #12]
 800e374:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e378:	4293      	cmp	r3, r2
 800e37a:	d001      	beq.n	800e380 <cmp_lfn+0xa0>
 800e37c:	2300      	movs	r3, #0
 800e37e:	e018      	b.n	800e3b2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e380:	693b      	ldr	r3, [r7, #16]
 800e382:	3301      	adds	r3, #1
 800e384:	613b      	str	r3, [r7, #16]
 800e386:	693b      	ldr	r3, [r7, #16]
 800e388:	2b0c      	cmp	r3, #12
 800e38a:	d9c8      	bls.n	800e31e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	781b      	ldrb	r3, [r3, #0]
 800e390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e394:	2b00      	cmp	r3, #0
 800e396:	d00b      	beq.n	800e3b0 <cmp_lfn+0xd0>
 800e398:	89fb      	ldrh	r3, [r7, #14]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d008      	beq.n	800e3b0 <cmp_lfn+0xd0>
 800e39e:	697b      	ldr	r3, [r7, #20]
 800e3a0:	005b      	lsls	r3, r3, #1
 800e3a2:	687a      	ldr	r2, [r7, #4]
 800e3a4:	4413      	add	r3, r2
 800e3a6:	881b      	ldrh	r3, [r3, #0]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d001      	beq.n	800e3b0 <cmp_lfn+0xd0>
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	e000      	b.n	800e3b2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e3b0:	2301      	movs	r3, #1
}
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	371c      	adds	r7, #28
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd90      	pop	{r4, r7, pc}
 800e3ba:	bf00      	nop
 800e3bc:	08016fe4 	.word	0x08016fe4

0800e3c0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b088      	sub	sp, #32
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	60f8      	str	r0, [r7, #12]
 800e3c8:	60b9      	str	r1, [r7, #8]
 800e3ca:	4611      	mov	r1, r2
 800e3cc:	461a      	mov	r2, r3
 800e3ce:	460b      	mov	r3, r1
 800e3d0:	71fb      	strb	r3, [r7, #7]
 800e3d2:	4613      	mov	r3, r2
 800e3d4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	330d      	adds	r3, #13
 800e3da:	79ba      	ldrb	r2, [r7, #6]
 800e3dc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	330b      	adds	r3, #11
 800e3e2:	220f      	movs	r2, #15
 800e3e4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	330c      	adds	r3, #12
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e3ee:	68bb      	ldr	r3, [r7, #8]
 800e3f0:	331a      	adds	r3, #26
 800e3f2:	2100      	movs	r1, #0
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	f7fe ff08 	bl	800d20a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e3fa:	79fb      	ldrb	r3, [r7, #7]
 800e3fc:	1e5a      	subs	r2, r3, #1
 800e3fe:	4613      	mov	r3, r2
 800e400:	005b      	lsls	r3, r3, #1
 800e402:	4413      	add	r3, r2
 800e404:	009b      	lsls	r3, r3, #2
 800e406:	4413      	add	r3, r2
 800e408:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e40a:	2300      	movs	r3, #0
 800e40c:	82fb      	strh	r3, [r7, #22]
 800e40e:	2300      	movs	r3, #0
 800e410:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e412:	8afb      	ldrh	r3, [r7, #22]
 800e414:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e418:	4293      	cmp	r3, r2
 800e41a:	d007      	beq.n	800e42c <put_lfn+0x6c>
 800e41c:	69fb      	ldr	r3, [r7, #28]
 800e41e:	1c5a      	adds	r2, r3, #1
 800e420:	61fa      	str	r2, [r7, #28]
 800e422:	005b      	lsls	r3, r3, #1
 800e424:	68fa      	ldr	r2, [r7, #12]
 800e426:	4413      	add	r3, r2
 800e428:	881b      	ldrh	r3, [r3, #0]
 800e42a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e42c:	4a17      	ldr	r2, [pc, #92]	@ (800e48c <put_lfn+0xcc>)
 800e42e:	69bb      	ldr	r3, [r7, #24]
 800e430:	4413      	add	r3, r2
 800e432:	781b      	ldrb	r3, [r3, #0]
 800e434:	461a      	mov	r2, r3
 800e436:	68bb      	ldr	r3, [r7, #8]
 800e438:	4413      	add	r3, r2
 800e43a:	8afa      	ldrh	r2, [r7, #22]
 800e43c:	4611      	mov	r1, r2
 800e43e:	4618      	mov	r0, r3
 800e440:	f7fe fee3 	bl	800d20a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e444:	8afb      	ldrh	r3, [r7, #22]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d102      	bne.n	800e450 <put_lfn+0x90>
 800e44a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e44e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e450:	69bb      	ldr	r3, [r7, #24]
 800e452:	3301      	adds	r3, #1
 800e454:	61bb      	str	r3, [r7, #24]
 800e456:	69bb      	ldr	r3, [r7, #24]
 800e458:	2b0c      	cmp	r3, #12
 800e45a:	d9da      	bls.n	800e412 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e45c:	8afb      	ldrh	r3, [r7, #22]
 800e45e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e462:	4293      	cmp	r3, r2
 800e464:	d006      	beq.n	800e474 <put_lfn+0xb4>
 800e466:	69fb      	ldr	r3, [r7, #28]
 800e468:	005b      	lsls	r3, r3, #1
 800e46a:	68fa      	ldr	r2, [r7, #12]
 800e46c:	4413      	add	r3, r2
 800e46e:	881b      	ldrh	r3, [r3, #0]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d103      	bne.n	800e47c <put_lfn+0xbc>
 800e474:	79fb      	ldrb	r3, [r7, #7]
 800e476:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e47a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e47c:	68bb      	ldr	r3, [r7, #8]
 800e47e:	79fa      	ldrb	r2, [r7, #7]
 800e480:	701a      	strb	r2, [r3, #0]
}
 800e482:	bf00      	nop
 800e484:	3720      	adds	r7, #32
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
 800e48a:	bf00      	nop
 800e48c:	08016fe4 	.word	0x08016fe4

0800e490 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b08c      	sub	sp, #48	@ 0x30
 800e494:	af00      	add	r7, sp, #0
 800e496:	60f8      	str	r0, [r7, #12]
 800e498:	60b9      	str	r1, [r7, #8]
 800e49a:	607a      	str	r2, [r7, #4]
 800e49c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e49e:	220b      	movs	r2, #11
 800e4a0:	68b9      	ldr	r1, [r7, #8]
 800e4a2:	68f8      	ldr	r0, [r7, #12]
 800e4a4:	f7fe fef8 	bl	800d298 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	2b05      	cmp	r3, #5
 800e4ac:	d92b      	bls.n	800e506 <gen_numname+0x76>
		sr = seq;
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e4b2:	e022      	b.n	800e4fa <gen_numname+0x6a>
			wc = *lfn++;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	1c9a      	adds	r2, r3, #2
 800e4b8:	607a      	str	r2, [r7, #4]
 800e4ba:	881b      	ldrh	r3, [r3, #0]
 800e4bc:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800e4be:	2300      	movs	r3, #0
 800e4c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e4c2:	e017      	b.n	800e4f4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800e4c4:	69fb      	ldr	r3, [r7, #28]
 800e4c6:	005a      	lsls	r2, r3, #1
 800e4c8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e4ca:	f003 0301 	and.w	r3, r3, #1
 800e4ce:	4413      	add	r3, r2
 800e4d0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e4d2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e4d4:	085b      	lsrs	r3, r3, #1
 800e4d6:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e4d8:	69fb      	ldr	r3, [r7, #28]
 800e4da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d005      	beq.n	800e4ee <gen_numname+0x5e>
 800e4e2:	69fb      	ldr	r3, [r7, #28]
 800e4e4:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800e4e8:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800e4ec:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e4ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4f0:	3301      	adds	r3, #1
 800e4f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e4f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4f6:	2b0f      	cmp	r3, #15
 800e4f8:	d9e4      	bls.n	800e4c4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	881b      	ldrh	r3, [r3, #0]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d1d8      	bne.n	800e4b4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e502:	69fb      	ldr	r3, [r7, #28]
 800e504:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e506:	2307      	movs	r3, #7
 800e508:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e50a:	683b      	ldr	r3, [r7, #0]
 800e50c:	b2db      	uxtb	r3, r3
 800e50e:	f003 030f 	and.w	r3, r3, #15
 800e512:	b2db      	uxtb	r3, r3
 800e514:	3330      	adds	r3, #48	@ 0x30
 800e516:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800e51a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e51e:	2b39      	cmp	r3, #57	@ 0x39
 800e520:	d904      	bls.n	800e52c <gen_numname+0x9c>
 800e522:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e526:	3307      	adds	r3, #7
 800e528:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800e52c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e52e:	1e5a      	subs	r2, r3, #1
 800e530:	62ba      	str	r2, [r7, #40]	@ 0x28
 800e532:	3330      	adds	r3, #48	@ 0x30
 800e534:	443b      	add	r3, r7
 800e536:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800e53a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	091b      	lsrs	r3, r3, #4
 800e542:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d1df      	bne.n	800e50a <gen_numname+0x7a>
	ns[i] = '~';
 800e54a:	f107 0214 	add.w	r2, r7, #20
 800e54e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e550:	4413      	add	r3, r2
 800e552:	227e      	movs	r2, #126	@ 0x7e
 800e554:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e556:	2300      	movs	r3, #0
 800e558:	627b      	str	r3, [r7, #36]	@ 0x24
 800e55a:	e002      	b.n	800e562 <gen_numname+0xd2>
 800e55c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e55e:	3301      	adds	r3, #1
 800e560:	627b      	str	r3, [r7, #36]	@ 0x24
 800e562:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e566:	429a      	cmp	r2, r3
 800e568:	d205      	bcs.n	800e576 <gen_numname+0xe6>
 800e56a:	68fa      	ldr	r2, [r7, #12]
 800e56c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e56e:	4413      	add	r3, r2
 800e570:	781b      	ldrb	r3, [r3, #0]
 800e572:	2b20      	cmp	r3, #32
 800e574:	d1f2      	bne.n	800e55c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e578:	2b07      	cmp	r3, #7
 800e57a:	d807      	bhi.n	800e58c <gen_numname+0xfc>
 800e57c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e57e:	1c5a      	adds	r2, r3, #1
 800e580:	62ba      	str	r2, [r7, #40]	@ 0x28
 800e582:	3330      	adds	r3, #48	@ 0x30
 800e584:	443b      	add	r3, r7
 800e586:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e58a:	e000      	b.n	800e58e <gen_numname+0xfe>
 800e58c:	2120      	movs	r1, #32
 800e58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e590:	1c5a      	adds	r2, r3, #1
 800e592:	627a      	str	r2, [r7, #36]	@ 0x24
 800e594:	68fa      	ldr	r2, [r7, #12]
 800e596:	4413      	add	r3, r2
 800e598:	460a      	mov	r2, r1
 800e59a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e59c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e59e:	2b07      	cmp	r3, #7
 800e5a0:	d9e9      	bls.n	800e576 <gen_numname+0xe6>
}
 800e5a2:	bf00      	nop
 800e5a4:	bf00      	nop
 800e5a6:	3730      	adds	r7, #48	@ 0x30
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd80      	pop	{r7, pc}

0800e5ac <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e5ac:	b480      	push	{r7}
 800e5ae:	b085      	sub	sp, #20
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e5b8:	230b      	movs	r3, #11
 800e5ba:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e5bc:	7bfb      	ldrb	r3, [r7, #15]
 800e5be:	b2da      	uxtb	r2, r3
 800e5c0:	0852      	lsrs	r2, r2, #1
 800e5c2:	01db      	lsls	r3, r3, #7
 800e5c4:	4313      	orrs	r3, r2
 800e5c6:	b2da      	uxtb	r2, r3
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	1c59      	adds	r1, r3, #1
 800e5cc:	6079      	str	r1, [r7, #4]
 800e5ce:	781b      	ldrb	r3, [r3, #0]
 800e5d0:	4413      	add	r3, r2
 800e5d2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e5d4:	68bb      	ldr	r3, [r7, #8]
 800e5d6:	3b01      	subs	r3, #1
 800e5d8:	60bb      	str	r3, [r7, #8]
 800e5da:	68bb      	ldr	r3, [r7, #8]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d1ed      	bne.n	800e5bc <sum_sfn+0x10>
	return sum;
 800e5e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	3714      	adds	r7, #20
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ec:	4770      	bx	lr

0800e5ee <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e5ee:	b580      	push	{r7, lr}
 800e5f0:	b086      	sub	sp, #24
 800e5f2:	af00      	add	r7, sp, #0
 800e5f4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e5fc:	2100      	movs	r1, #0
 800e5fe:	6878      	ldr	r0, [r7, #4]
 800e600:	f7ff fc89 	bl	800df16 <dir_sdi>
 800e604:	4603      	mov	r3, r0
 800e606:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e608:	7dfb      	ldrb	r3, [r7, #23]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d001      	beq.n	800e612 <dir_find+0x24>
 800e60e:	7dfb      	ldrb	r3, [r7, #23]
 800e610:	e0a9      	b.n	800e766 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e612:	23ff      	movs	r3, #255	@ 0xff
 800e614:	753b      	strb	r3, [r7, #20]
 800e616:	7d3b      	ldrb	r3, [r7, #20]
 800e618:	757b      	strb	r3, [r7, #21]
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	f04f 32ff 	mov.w	r2, #4294967295
 800e620:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	69db      	ldr	r3, [r3, #28]
 800e626:	4619      	mov	r1, r3
 800e628:	6938      	ldr	r0, [r7, #16]
 800e62a:	f7ff f895 	bl	800d758 <move_window>
 800e62e:	4603      	mov	r3, r0
 800e630:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e632:	7dfb      	ldrb	r3, [r7, #23]
 800e634:	2b00      	cmp	r3, #0
 800e636:	f040 8090 	bne.w	800e75a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	6a1b      	ldr	r3, [r3, #32]
 800e63e:	781b      	ldrb	r3, [r3, #0]
 800e640:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e642:	7dbb      	ldrb	r3, [r7, #22]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d102      	bne.n	800e64e <dir_find+0x60>
 800e648:	2304      	movs	r3, #4
 800e64a:	75fb      	strb	r3, [r7, #23]
 800e64c:	e08a      	b.n	800e764 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	6a1b      	ldr	r3, [r3, #32]
 800e652:	330b      	adds	r3, #11
 800e654:	781b      	ldrb	r3, [r3, #0]
 800e656:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e65a:	73fb      	strb	r3, [r7, #15]
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	7bfa      	ldrb	r2, [r7, #15]
 800e660:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e662:	7dbb      	ldrb	r3, [r7, #22]
 800e664:	2be5      	cmp	r3, #229	@ 0xe5
 800e666:	d007      	beq.n	800e678 <dir_find+0x8a>
 800e668:	7bfb      	ldrb	r3, [r7, #15]
 800e66a:	f003 0308 	and.w	r3, r3, #8
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d009      	beq.n	800e686 <dir_find+0x98>
 800e672:	7bfb      	ldrb	r3, [r7, #15]
 800e674:	2b0f      	cmp	r3, #15
 800e676:	d006      	beq.n	800e686 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e678:	23ff      	movs	r3, #255	@ 0xff
 800e67a:	757b      	strb	r3, [r7, #21]
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f04f 32ff 	mov.w	r2, #4294967295
 800e682:	631a      	str	r2, [r3, #48]	@ 0x30
 800e684:	e05e      	b.n	800e744 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e686:	7bfb      	ldrb	r3, [r7, #15]
 800e688:	2b0f      	cmp	r3, #15
 800e68a:	d136      	bne.n	800e6fa <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e692:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e696:	2b00      	cmp	r3, #0
 800e698:	d154      	bne.n	800e744 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e69a:	7dbb      	ldrb	r3, [r7, #22]
 800e69c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d00d      	beq.n	800e6c0 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	6a1b      	ldr	r3, [r3, #32]
 800e6a8:	7b5b      	ldrb	r3, [r3, #13]
 800e6aa:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e6ac:	7dbb      	ldrb	r3, [r7, #22]
 800e6ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e6b2:	75bb      	strb	r3, [r7, #22]
 800e6b4:	7dbb      	ldrb	r3, [r7, #22]
 800e6b6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	695a      	ldr	r2, [r3, #20]
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e6c0:	7dba      	ldrb	r2, [r7, #22]
 800e6c2:	7d7b      	ldrb	r3, [r7, #21]
 800e6c4:	429a      	cmp	r2, r3
 800e6c6:	d115      	bne.n	800e6f4 <dir_find+0x106>
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	6a1b      	ldr	r3, [r3, #32]
 800e6cc:	330d      	adds	r3, #13
 800e6ce:	781b      	ldrb	r3, [r3, #0]
 800e6d0:	7d3a      	ldrb	r2, [r7, #20]
 800e6d2:	429a      	cmp	r2, r3
 800e6d4:	d10e      	bne.n	800e6f4 <dir_find+0x106>
 800e6d6:	693b      	ldr	r3, [r7, #16]
 800e6d8:	691a      	ldr	r2, [r3, #16]
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	6a1b      	ldr	r3, [r3, #32]
 800e6de:	4619      	mov	r1, r3
 800e6e0:	4610      	mov	r0, r2
 800e6e2:	f7ff fdfd 	bl	800e2e0 <cmp_lfn>
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d003      	beq.n	800e6f4 <dir_find+0x106>
 800e6ec:	7d7b      	ldrb	r3, [r7, #21]
 800e6ee:	3b01      	subs	r3, #1
 800e6f0:	b2db      	uxtb	r3, r3
 800e6f2:	e000      	b.n	800e6f6 <dir_find+0x108>
 800e6f4:	23ff      	movs	r3, #255	@ 0xff
 800e6f6:	757b      	strb	r3, [r7, #21]
 800e6f8:	e024      	b.n	800e744 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e6fa:	7d7b      	ldrb	r3, [r7, #21]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d109      	bne.n	800e714 <dir_find+0x126>
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	6a1b      	ldr	r3, [r3, #32]
 800e704:	4618      	mov	r0, r3
 800e706:	f7ff ff51 	bl	800e5ac <sum_sfn>
 800e70a:	4603      	mov	r3, r0
 800e70c:	461a      	mov	r2, r3
 800e70e:	7d3b      	ldrb	r3, [r7, #20]
 800e710:	4293      	cmp	r3, r2
 800e712:	d024      	beq.n	800e75e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e71a:	f003 0301 	and.w	r3, r3, #1
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d10a      	bne.n	800e738 <dir_find+0x14a>
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6a18      	ldr	r0, [r3, #32]
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	3324      	adds	r3, #36	@ 0x24
 800e72a:	220b      	movs	r2, #11
 800e72c:	4619      	mov	r1, r3
 800e72e:	f7fe fdef 	bl	800d310 <mem_cmp>
 800e732:	4603      	mov	r3, r0
 800e734:	2b00      	cmp	r3, #0
 800e736:	d014      	beq.n	800e762 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e738:	23ff      	movs	r3, #255	@ 0xff
 800e73a:	757b      	strb	r3, [r7, #21]
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f04f 32ff 	mov.w	r2, #4294967295
 800e742:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e744:	2100      	movs	r1, #0
 800e746:	6878      	ldr	r0, [r7, #4]
 800e748:	f7ff fc6e 	bl	800e028 <dir_next>
 800e74c:	4603      	mov	r3, r0
 800e74e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e750:	7dfb      	ldrb	r3, [r7, #23]
 800e752:	2b00      	cmp	r3, #0
 800e754:	f43f af65 	beq.w	800e622 <dir_find+0x34>
 800e758:	e004      	b.n	800e764 <dir_find+0x176>
		if (res != FR_OK) break;
 800e75a:	bf00      	nop
 800e75c:	e002      	b.n	800e764 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e75e:	bf00      	nop
 800e760:	e000      	b.n	800e764 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e762:	bf00      	nop

	return res;
 800e764:	7dfb      	ldrb	r3, [r7, #23]
}
 800e766:	4618      	mov	r0, r3
 800e768:	3718      	adds	r7, #24
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bd80      	pop	{r7, pc}
	...

0800e770 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b08c      	sub	sp, #48	@ 0x30
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e784:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d001      	beq.n	800e790 <dir_register+0x20>
 800e78c:	2306      	movs	r3, #6
 800e78e:	e0e0      	b.n	800e952 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e790:	2300      	movs	r3, #0
 800e792:	627b      	str	r3, [r7, #36]	@ 0x24
 800e794:	e002      	b.n	800e79c <dir_register+0x2c>
 800e796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e798:	3301      	adds	r3, #1
 800e79a:	627b      	str	r3, [r7, #36]	@ 0x24
 800e79c:	69fb      	ldr	r3, [r7, #28]
 800e79e:	691a      	ldr	r2, [r3, #16]
 800e7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7a2:	005b      	lsls	r3, r3, #1
 800e7a4:	4413      	add	r3, r2
 800e7a6:	881b      	ldrh	r3, [r3, #0]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d1f4      	bne.n	800e796 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800e7b2:	f107 030c 	add.w	r3, r7, #12
 800e7b6:	220c      	movs	r2, #12
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	f7fe fd6d 	bl	800d298 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e7be:	7dfb      	ldrb	r3, [r7, #23]
 800e7c0:	f003 0301 	and.w	r3, r3, #1
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d032      	beq.n	800e82e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2240      	movs	r2, #64	@ 0x40
 800e7cc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800e7d0:	2301      	movs	r3, #1
 800e7d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e7d4:	e016      	b.n	800e804 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800e7dc:	69fb      	ldr	r3, [r7, #28]
 800e7de:	691a      	ldr	r2, [r3, #16]
 800e7e0:	f107 010c 	add.w	r1, r7, #12
 800e7e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7e6:	f7ff fe53 	bl	800e490 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e7ea:	6878      	ldr	r0, [r7, #4]
 800e7ec:	f7ff feff 	bl	800e5ee <dir_find>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800e7f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d106      	bne.n	800e80c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800e7fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e800:	3301      	adds	r3, #1
 800e802:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e806:	2b63      	cmp	r3, #99	@ 0x63
 800e808:	d9e5      	bls.n	800e7d6 <dir_register+0x66>
 800e80a:	e000      	b.n	800e80e <dir_register+0x9e>
			if (res != FR_OK) break;
 800e80c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e80e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e810:	2b64      	cmp	r3, #100	@ 0x64
 800e812:	d101      	bne.n	800e818 <dir_register+0xa8>
 800e814:	2307      	movs	r3, #7
 800e816:	e09c      	b.n	800e952 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e818:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e81c:	2b04      	cmp	r3, #4
 800e81e:	d002      	beq.n	800e826 <dir_register+0xb6>
 800e820:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e824:	e095      	b.n	800e952 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e826:	7dfa      	ldrb	r2, [r7, #23]
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e82e:	7dfb      	ldrb	r3, [r7, #23]
 800e830:	f003 0302 	and.w	r3, r3, #2
 800e834:	2b00      	cmp	r3, #0
 800e836:	d007      	beq.n	800e848 <dir_register+0xd8>
 800e838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e83a:	330c      	adds	r3, #12
 800e83c:	4a47      	ldr	r2, [pc, #284]	@ (800e95c <dir_register+0x1ec>)
 800e83e:	fba2 2303 	umull	r2, r3, r2, r3
 800e842:	089b      	lsrs	r3, r3, #2
 800e844:	3301      	adds	r3, #1
 800e846:	e000      	b.n	800e84a <dir_register+0xda>
 800e848:	2301      	movs	r3, #1
 800e84a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e84c:	6a39      	ldr	r1, [r7, #32]
 800e84e:	6878      	ldr	r0, [r7, #4]
 800e850:	f7ff fcc0 	bl	800e1d4 <dir_alloc>
 800e854:	4603      	mov	r3, r0
 800e856:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e85a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d148      	bne.n	800e8f4 <dir_register+0x184>
 800e862:	6a3b      	ldr	r3, [r7, #32]
 800e864:	3b01      	subs	r3, #1
 800e866:	623b      	str	r3, [r7, #32]
 800e868:	6a3b      	ldr	r3, [r7, #32]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d042      	beq.n	800e8f4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	695a      	ldr	r2, [r3, #20]
 800e872:	6a3b      	ldr	r3, [r7, #32]
 800e874:	015b      	lsls	r3, r3, #5
 800e876:	1ad3      	subs	r3, r2, r3
 800e878:	4619      	mov	r1, r3
 800e87a:	6878      	ldr	r0, [r7, #4]
 800e87c:	f7ff fb4b 	bl	800df16 <dir_sdi>
 800e880:	4603      	mov	r3, r0
 800e882:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800e886:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d132      	bne.n	800e8f4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	3324      	adds	r3, #36	@ 0x24
 800e892:	4618      	mov	r0, r3
 800e894:	f7ff fe8a 	bl	800e5ac <sum_sfn>
 800e898:	4603      	mov	r3, r0
 800e89a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	69db      	ldr	r3, [r3, #28]
 800e8a0:	4619      	mov	r1, r3
 800e8a2:	69f8      	ldr	r0, [r7, #28]
 800e8a4:	f7fe ff58 	bl	800d758 <move_window>
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800e8ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d11d      	bne.n	800e8f2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e8b6:	69fb      	ldr	r3, [r7, #28]
 800e8b8:	6918      	ldr	r0, [r3, #16]
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	6a19      	ldr	r1, [r3, #32]
 800e8be:	6a3b      	ldr	r3, [r7, #32]
 800e8c0:	b2da      	uxtb	r2, r3
 800e8c2:	7efb      	ldrb	r3, [r7, #27]
 800e8c4:	f7ff fd7c 	bl	800e3c0 <put_lfn>
				fs->wflag = 1;
 800e8c8:	69fb      	ldr	r3, [r7, #28]
 800e8ca:	2201      	movs	r2, #1
 800e8cc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e8ce:	2100      	movs	r1, #0
 800e8d0:	6878      	ldr	r0, [r7, #4]
 800e8d2:	f7ff fba9 	bl	800e028 <dir_next>
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800e8dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d107      	bne.n	800e8f4 <dir_register+0x184>
 800e8e4:	6a3b      	ldr	r3, [r7, #32]
 800e8e6:	3b01      	subs	r3, #1
 800e8e8:	623b      	str	r3, [r7, #32]
 800e8ea:	6a3b      	ldr	r3, [r7, #32]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d1d5      	bne.n	800e89c <dir_register+0x12c>
 800e8f0:	e000      	b.n	800e8f4 <dir_register+0x184>
				if (res != FR_OK) break;
 800e8f2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e8f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d128      	bne.n	800e94e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	69db      	ldr	r3, [r3, #28]
 800e900:	4619      	mov	r1, r3
 800e902:	69f8      	ldr	r0, [r7, #28]
 800e904:	f7fe ff28 	bl	800d758 <move_window>
 800e908:	4603      	mov	r3, r0
 800e90a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800e90e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e912:	2b00      	cmp	r3, #0
 800e914:	d11b      	bne.n	800e94e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6a1b      	ldr	r3, [r3, #32]
 800e91a:	2220      	movs	r2, #32
 800e91c:	2100      	movs	r1, #0
 800e91e:	4618      	mov	r0, r3
 800e920:	f7fe fcdb 	bl	800d2da <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	6a18      	ldr	r0, [r3, #32]
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	3324      	adds	r3, #36	@ 0x24
 800e92c:	220b      	movs	r2, #11
 800e92e:	4619      	mov	r1, r3
 800e930:	f7fe fcb2 	bl	800d298 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	6a1b      	ldr	r3, [r3, #32]
 800e93e:	330c      	adds	r3, #12
 800e940:	f002 0218 	and.w	r2, r2, #24
 800e944:	b2d2      	uxtb	r2, r2
 800e946:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800e948:	69fb      	ldr	r3, [r7, #28]
 800e94a:	2201      	movs	r2, #1
 800e94c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e94e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800e952:	4618      	mov	r0, r3
 800e954:	3730      	adds	r7, #48	@ 0x30
 800e956:	46bd      	mov	sp, r7
 800e958:	bd80      	pop	{r7, pc}
 800e95a:	bf00      	nop
 800e95c:	4ec4ec4f 	.word	0x4ec4ec4f

0800e960 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b08a      	sub	sp, #40	@ 0x28
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
 800e968:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e96a:	683b      	ldr	r3, [r7, #0]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	613b      	str	r3, [r7, #16]
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	691b      	ldr	r3, [r3, #16]
 800e976:	60fb      	str	r3, [r7, #12]
 800e978:	2300      	movs	r3, #0
 800e97a:	617b      	str	r3, [r7, #20]
 800e97c:	697b      	ldr	r3, [r7, #20]
 800e97e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e980:	69bb      	ldr	r3, [r7, #24]
 800e982:	1c5a      	adds	r2, r3, #1
 800e984:	61ba      	str	r2, [r7, #24]
 800e986:	693a      	ldr	r2, [r7, #16]
 800e988:	4413      	add	r3, r2
 800e98a:	781b      	ldrb	r3, [r3, #0]
 800e98c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800e98e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e990:	2b1f      	cmp	r3, #31
 800e992:	d940      	bls.n	800ea16 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e994:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e996:	2b2f      	cmp	r3, #47	@ 0x2f
 800e998:	d006      	beq.n	800e9a8 <create_name+0x48>
 800e99a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e99c:	2b5c      	cmp	r3, #92	@ 0x5c
 800e99e:	d110      	bne.n	800e9c2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e9a0:	e002      	b.n	800e9a8 <create_name+0x48>
 800e9a2:	69bb      	ldr	r3, [r7, #24]
 800e9a4:	3301      	adds	r3, #1
 800e9a6:	61bb      	str	r3, [r7, #24]
 800e9a8:	693a      	ldr	r2, [r7, #16]
 800e9aa:	69bb      	ldr	r3, [r7, #24]
 800e9ac:	4413      	add	r3, r2
 800e9ae:	781b      	ldrb	r3, [r3, #0]
 800e9b0:	2b2f      	cmp	r3, #47	@ 0x2f
 800e9b2:	d0f6      	beq.n	800e9a2 <create_name+0x42>
 800e9b4:	693a      	ldr	r2, [r7, #16]
 800e9b6:	69bb      	ldr	r3, [r7, #24]
 800e9b8:	4413      	add	r3, r2
 800e9ba:	781b      	ldrb	r3, [r3, #0]
 800e9bc:	2b5c      	cmp	r3, #92	@ 0x5c
 800e9be:	d0f0      	beq.n	800e9a2 <create_name+0x42>
			break;
 800e9c0:	e02a      	b.n	800ea18 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	2bfe      	cmp	r3, #254	@ 0xfe
 800e9c6:	d901      	bls.n	800e9cc <create_name+0x6c>
 800e9c8:	2306      	movs	r3, #6
 800e9ca:	e17d      	b.n	800ecc8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e9cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9ce:	b2db      	uxtb	r3, r3
 800e9d0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e9d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9d4:	2101      	movs	r1, #1
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	f001 fcb8 	bl	801034c <ff_convert>
 800e9dc:	4603      	mov	r3, r0
 800e9de:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e9e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d101      	bne.n	800e9ea <create_name+0x8a>
 800e9e6:	2306      	movs	r3, #6
 800e9e8:	e16e      	b.n	800ecc8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800e9ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9ec:	2b7f      	cmp	r3, #127	@ 0x7f
 800e9ee:	d809      	bhi.n	800ea04 <create_name+0xa4>
 800e9f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9f2:	4619      	mov	r1, r3
 800e9f4:	488d      	ldr	r0, [pc, #564]	@ (800ec2c <create_name+0x2cc>)
 800e9f6:	f7fe fcb2 	bl	800d35e <chk_chr>
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d001      	beq.n	800ea04 <create_name+0xa4>
 800ea00:	2306      	movs	r3, #6
 800ea02:	e161      	b.n	800ecc8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800ea04:	697b      	ldr	r3, [r7, #20]
 800ea06:	1c5a      	adds	r2, r3, #1
 800ea08:	617a      	str	r2, [r7, #20]
 800ea0a:	005b      	lsls	r3, r3, #1
 800ea0c:	68fa      	ldr	r2, [r7, #12]
 800ea0e:	4413      	add	r3, r2
 800ea10:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ea12:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ea14:	e7b4      	b.n	800e980 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800ea16:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ea18:	693a      	ldr	r2, [r7, #16]
 800ea1a:	69bb      	ldr	r3, [r7, #24]
 800ea1c:	441a      	add	r2, r3
 800ea1e:	683b      	ldr	r3, [r7, #0]
 800ea20:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ea22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ea24:	2b1f      	cmp	r3, #31
 800ea26:	d801      	bhi.n	800ea2c <create_name+0xcc>
 800ea28:	2304      	movs	r3, #4
 800ea2a:	e000      	b.n	800ea2e <create_name+0xce>
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ea32:	e011      	b.n	800ea58 <create_name+0xf8>
		w = lfn[di - 1];
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ea3a:	3b01      	subs	r3, #1
 800ea3c:	005b      	lsls	r3, r3, #1
 800ea3e:	68fa      	ldr	r2, [r7, #12]
 800ea40:	4413      	add	r3, r2
 800ea42:	881b      	ldrh	r3, [r3, #0]
 800ea44:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800ea46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ea48:	2b20      	cmp	r3, #32
 800ea4a:	d002      	beq.n	800ea52 <create_name+0xf2>
 800ea4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ea4e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ea50:	d106      	bne.n	800ea60 <create_name+0x100>
		di--;
 800ea52:	697b      	ldr	r3, [r7, #20]
 800ea54:	3b01      	subs	r3, #1
 800ea56:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ea58:	697b      	ldr	r3, [r7, #20]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d1ea      	bne.n	800ea34 <create_name+0xd4>
 800ea5e:	e000      	b.n	800ea62 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800ea60:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ea62:	697b      	ldr	r3, [r7, #20]
 800ea64:	005b      	lsls	r3, r3, #1
 800ea66:	68fa      	ldr	r2, [r7, #12]
 800ea68:	4413      	add	r3, r2
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ea6e:	697b      	ldr	r3, [r7, #20]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d101      	bne.n	800ea78 <create_name+0x118>
 800ea74:	2306      	movs	r3, #6
 800ea76:	e127      	b.n	800ecc8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	3324      	adds	r3, #36	@ 0x24
 800ea7c:	220b      	movs	r2, #11
 800ea7e:	2120      	movs	r1, #32
 800ea80:	4618      	mov	r0, r3
 800ea82:	f7fe fc2a 	bl	800d2da <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ea86:	2300      	movs	r3, #0
 800ea88:	61bb      	str	r3, [r7, #24]
 800ea8a:	e002      	b.n	800ea92 <create_name+0x132>
 800ea8c:	69bb      	ldr	r3, [r7, #24]
 800ea8e:	3301      	adds	r3, #1
 800ea90:	61bb      	str	r3, [r7, #24]
 800ea92:	69bb      	ldr	r3, [r7, #24]
 800ea94:	005b      	lsls	r3, r3, #1
 800ea96:	68fa      	ldr	r2, [r7, #12]
 800ea98:	4413      	add	r3, r2
 800ea9a:	881b      	ldrh	r3, [r3, #0]
 800ea9c:	2b20      	cmp	r3, #32
 800ea9e:	d0f5      	beq.n	800ea8c <create_name+0x12c>
 800eaa0:	69bb      	ldr	r3, [r7, #24]
 800eaa2:	005b      	lsls	r3, r3, #1
 800eaa4:	68fa      	ldr	r2, [r7, #12]
 800eaa6:	4413      	add	r3, r2
 800eaa8:	881b      	ldrh	r3, [r3, #0]
 800eaaa:	2b2e      	cmp	r3, #46	@ 0x2e
 800eaac:	d0ee      	beq.n	800ea8c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800eaae:	69bb      	ldr	r3, [r7, #24]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d009      	beq.n	800eac8 <create_name+0x168>
 800eab4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eab8:	f043 0303 	orr.w	r3, r3, #3
 800eabc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800eac0:	e002      	b.n	800eac8 <create_name+0x168>
 800eac2:	697b      	ldr	r3, [r7, #20]
 800eac4:	3b01      	subs	r3, #1
 800eac6:	617b      	str	r3, [r7, #20]
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d009      	beq.n	800eae2 <create_name+0x182>
 800eace:	697b      	ldr	r3, [r7, #20]
 800ead0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ead4:	3b01      	subs	r3, #1
 800ead6:	005b      	lsls	r3, r3, #1
 800ead8:	68fa      	ldr	r2, [r7, #12]
 800eada:	4413      	add	r3, r2
 800eadc:	881b      	ldrh	r3, [r3, #0]
 800eade:	2b2e      	cmp	r3, #46	@ 0x2e
 800eae0:	d1ef      	bne.n	800eac2 <create_name+0x162>

	i = b = 0; ni = 8;
 800eae2:	2300      	movs	r3, #0
 800eae4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800eae8:	2300      	movs	r3, #0
 800eaea:	623b      	str	r3, [r7, #32]
 800eaec:	2308      	movs	r3, #8
 800eaee:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800eaf0:	69bb      	ldr	r3, [r7, #24]
 800eaf2:	1c5a      	adds	r2, r3, #1
 800eaf4:	61ba      	str	r2, [r7, #24]
 800eaf6:	005b      	lsls	r3, r3, #1
 800eaf8:	68fa      	ldr	r2, [r7, #12]
 800eafa:	4413      	add	r3, r2
 800eafc:	881b      	ldrh	r3, [r3, #0]
 800eafe:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800eb00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	f000 8090 	beq.w	800ec28 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800eb08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eb0a:	2b20      	cmp	r3, #32
 800eb0c:	d006      	beq.n	800eb1c <create_name+0x1bc>
 800eb0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eb10:	2b2e      	cmp	r3, #46	@ 0x2e
 800eb12:	d10a      	bne.n	800eb2a <create_name+0x1ca>
 800eb14:	69ba      	ldr	r2, [r7, #24]
 800eb16:	697b      	ldr	r3, [r7, #20]
 800eb18:	429a      	cmp	r2, r3
 800eb1a:	d006      	beq.n	800eb2a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800eb1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eb20:	f043 0303 	orr.w	r3, r3, #3
 800eb24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800eb28:	e07d      	b.n	800ec26 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800eb2a:	6a3a      	ldr	r2, [r7, #32]
 800eb2c:	69fb      	ldr	r3, [r7, #28]
 800eb2e:	429a      	cmp	r2, r3
 800eb30:	d203      	bcs.n	800eb3a <create_name+0x1da>
 800eb32:	69ba      	ldr	r2, [r7, #24]
 800eb34:	697b      	ldr	r3, [r7, #20]
 800eb36:	429a      	cmp	r2, r3
 800eb38:	d123      	bne.n	800eb82 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800eb3a:	69fb      	ldr	r3, [r7, #28]
 800eb3c:	2b0b      	cmp	r3, #11
 800eb3e:	d106      	bne.n	800eb4e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800eb40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eb44:	f043 0303 	orr.w	r3, r3, #3
 800eb48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800eb4c:	e075      	b.n	800ec3a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800eb4e:	69ba      	ldr	r2, [r7, #24]
 800eb50:	697b      	ldr	r3, [r7, #20]
 800eb52:	429a      	cmp	r2, r3
 800eb54:	d005      	beq.n	800eb62 <create_name+0x202>
 800eb56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eb5a:	f043 0303 	orr.w	r3, r3, #3
 800eb5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800eb62:	69ba      	ldr	r2, [r7, #24]
 800eb64:	697b      	ldr	r3, [r7, #20]
 800eb66:	429a      	cmp	r2, r3
 800eb68:	d866      	bhi.n	800ec38 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800eb6a:	697b      	ldr	r3, [r7, #20]
 800eb6c:	61bb      	str	r3, [r7, #24]
 800eb6e:	2308      	movs	r3, #8
 800eb70:	623b      	str	r3, [r7, #32]
 800eb72:	230b      	movs	r3, #11
 800eb74:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800eb76:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800eb7a:	009b      	lsls	r3, r3, #2
 800eb7c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800eb80:	e051      	b.n	800ec26 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800eb82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eb84:	2b7f      	cmp	r3, #127	@ 0x7f
 800eb86:	d914      	bls.n	800ebb2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800eb88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eb8a:	2100      	movs	r1, #0
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	f001 fbdd 	bl	801034c <ff_convert>
 800eb92:	4603      	mov	r3, r0
 800eb94:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800eb96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d004      	beq.n	800eba6 <create_name+0x246>
 800eb9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eb9e:	3b80      	subs	r3, #128	@ 0x80
 800eba0:	4a23      	ldr	r2, [pc, #140]	@ (800ec30 <create_name+0x2d0>)
 800eba2:	5cd3      	ldrb	r3, [r2, r3]
 800eba4:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800eba6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ebaa:	f043 0302 	orr.w	r3, r3, #2
 800ebae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800ebb2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d007      	beq.n	800ebc8 <create_name+0x268>
 800ebb8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ebba:	4619      	mov	r1, r3
 800ebbc:	481d      	ldr	r0, [pc, #116]	@ (800ec34 <create_name+0x2d4>)
 800ebbe:	f7fe fbce 	bl	800d35e <chk_chr>
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d008      	beq.n	800ebda <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ebc8:	235f      	movs	r3, #95	@ 0x5f
 800ebca:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800ebcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ebd0:	f043 0303 	orr.w	r3, r3, #3
 800ebd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ebd8:	e01b      	b.n	800ec12 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800ebda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ebdc:	2b40      	cmp	r3, #64	@ 0x40
 800ebde:	d909      	bls.n	800ebf4 <create_name+0x294>
 800ebe0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ebe2:	2b5a      	cmp	r3, #90	@ 0x5a
 800ebe4:	d806      	bhi.n	800ebf4 <create_name+0x294>
					b |= 2;
 800ebe6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ebea:	f043 0302 	orr.w	r3, r3, #2
 800ebee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ebf2:	e00e      	b.n	800ec12 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800ebf4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ebf6:	2b60      	cmp	r3, #96	@ 0x60
 800ebf8:	d90b      	bls.n	800ec12 <create_name+0x2b2>
 800ebfa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ebfc:	2b7a      	cmp	r3, #122	@ 0x7a
 800ebfe:	d808      	bhi.n	800ec12 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800ec00:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ec04:	f043 0301 	orr.w	r3, r3, #1
 800ec08:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ec0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ec0e:	3b20      	subs	r3, #32
 800ec10:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800ec12:	6a3b      	ldr	r3, [r7, #32]
 800ec14:	1c5a      	adds	r2, r3, #1
 800ec16:	623a      	str	r2, [r7, #32]
 800ec18:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ec1a:	b2d1      	uxtb	r1, r2
 800ec1c:	687a      	ldr	r2, [r7, #4]
 800ec1e:	4413      	add	r3, r2
 800ec20:	460a      	mov	r2, r1
 800ec22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800ec26:	e763      	b.n	800eaf0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800ec28:	bf00      	nop
 800ec2a:	e006      	b.n	800ec3a <create_name+0x2da>
 800ec2c:	08016ef4 	.word	0x08016ef4
 800ec30:	08016f64 	.word	0x08016f64
 800ec34:	08016f00 	.word	0x08016f00
			if (si > di) break;			/* No extension */
 800ec38:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ec40:	2be5      	cmp	r3, #229	@ 0xe5
 800ec42:	d103      	bne.n	800ec4c <create_name+0x2ec>
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	2205      	movs	r2, #5
 800ec48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800ec4c:	69fb      	ldr	r3, [r7, #28]
 800ec4e:	2b08      	cmp	r3, #8
 800ec50:	d104      	bne.n	800ec5c <create_name+0x2fc>
 800ec52:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ec56:	009b      	lsls	r3, r3, #2
 800ec58:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800ec5c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ec60:	f003 030c 	and.w	r3, r3, #12
 800ec64:	2b0c      	cmp	r3, #12
 800ec66:	d005      	beq.n	800ec74 <create_name+0x314>
 800ec68:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ec6c:	f003 0303 	and.w	r3, r3, #3
 800ec70:	2b03      	cmp	r3, #3
 800ec72:	d105      	bne.n	800ec80 <create_name+0x320>
 800ec74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ec78:	f043 0302 	orr.w	r3, r3, #2
 800ec7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ec80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ec84:	f003 0302 	and.w	r3, r3, #2
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d117      	bne.n	800ecbc <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ec8c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ec90:	f003 0303 	and.w	r3, r3, #3
 800ec94:	2b01      	cmp	r3, #1
 800ec96:	d105      	bne.n	800eca4 <create_name+0x344>
 800ec98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ec9c:	f043 0310 	orr.w	r3, r3, #16
 800eca0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800eca4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800eca8:	f003 030c 	and.w	r3, r3, #12
 800ecac:	2b04      	cmp	r3, #4
 800ecae:	d105      	bne.n	800ecbc <create_name+0x35c>
 800ecb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ecb4:	f043 0308 	orr.w	r3, r3, #8
 800ecb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ecc2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800ecc6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3728      	adds	r7, #40	@ 0x28
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}

0800ecd0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b086      	sub	sp, #24
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
 800ecd8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ecde:	693b      	ldr	r3, [r7, #16]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ece4:	e002      	b.n	800ecec <follow_path+0x1c>
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	3301      	adds	r3, #1
 800ecea:	603b      	str	r3, [r7, #0]
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	781b      	ldrb	r3, [r3, #0]
 800ecf0:	2b2f      	cmp	r3, #47	@ 0x2f
 800ecf2:	d0f8      	beq.n	800ece6 <follow_path+0x16>
 800ecf4:	683b      	ldr	r3, [r7, #0]
 800ecf6:	781b      	ldrb	r3, [r3, #0]
 800ecf8:	2b5c      	cmp	r3, #92	@ 0x5c
 800ecfa:	d0f4      	beq.n	800ece6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ecfc:	693b      	ldr	r3, [r7, #16]
 800ecfe:	2200      	movs	r2, #0
 800ed00:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	781b      	ldrb	r3, [r3, #0]
 800ed06:	2b1f      	cmp	r3, #31
 800ed08:	d80a      	bhi.n	800ed20 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	2280      	movs	r2, #128	@ 0x80
 800ed0e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800ed12:	2100      	movs	r1, #0
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f7ff f8fe 	bl	800df16 <dir_sdi>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	75fb      	strb	r3, [r7, #23]
 800ed1e:	e048      	b.n	800edb2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ed20:	463b      	mov	r3, r7
 800ed22:	4619      	mov	r1, r3
 800ed24:	6878      	ldr	r0, [r7, #4]
 800ed26:	f7ff fe1b 	bl	800e960 <create_name>
 800ed2a:	4603      	mov	r3, r0
 800ed2c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ed2e:	7dfb      	ldrb	r3, [r7, #23]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d139      	bne.n	800eda8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ed34:	6878      	ldr	r0, [r7, #4]
 800ed36:	f7ff fc5a 	bl	800e5ee <dir_find>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ed44:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ed46:	7dfb      	ldrb	r3, [r7, #23]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d00a      	beq.n	800ed62 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ed4c:	7dfb      	ldrb	r3, [r7, #23]
 800ed4e:	2b04      	cmp	r3, #4
 800ed50:	d12c      	bne.n	800edac <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ed52:	7afb      	ldrb	r3, [r7, #11]
 800ed54:	f003 0304 	and.w	r3, r3, #4
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d127      	bne.n	800edac <follow_path+0xdc>
 800ed5c:	2305      	movs	r3, #5
 800ed5e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ed60:	e024      	b.n	800edac <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ed62:	7afb      	ldrb	r3, [r7, #11]
 800ed64:	f003 0304 	and.w	r3, r3, #4
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d121      	bne.n	800edb0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ed6c:	693b      	ldr	r3, [r7, #16]
 800ed6e:	799b      	ldrb	r3, [r3, #6]
 800ed70:	f003 0310 	and.w	r3, r3, #16
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d102      	bne.n	800ed7e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ed78:	2305      	movs	r3, #5
 800ed7a:	75fb      	strb	r3, [r7, #23]
 800ed7c:	e019      	b.n	800edb2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	695b      	ldr	r3, [r3, #20]
 800ed88:	68fa      	ldr	r2, [r7, #12]
 800ed8a:	8992      	ldrh	r2, [r2, #12]
 800ed8c:	fbb3 f0f2 	udiv	r0, r3, r2
 800ed90:	fb00 f202 	mul.w	r2, r0, r2
 800ed94:	1a9b      	subs	r3, r3, r2
 800ed96:	440b      	add	r3, r1
 800ed98:	4619      	mov	r1, r3
 800ed9a:	68f8      	ldr	r0, [r7, #12]
 800ed9c:	f7ff fa61 	bl	800e262 <ld_clust>
 800eda0:	4602      	mov	r2, r0
 800eda2:	693b      	ldr	r3, [r7, #16]
 800eda4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800eda6:	e7bb      	b.n	800ed20 <follow_path+0x50>
			if (res != FR_OK) break;
 800eda8:	bf00      	nop
 800edaa:	e002      	b.n	800edb2 <follow_path+0xe2>
				break;
 800edac:	bf00      	nop
 800edae:	e000      	b.n	800edb2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800edb0:	bf00      	nop
			}
		}
	}

	return res;
 800edb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800edb4:	4618      	mov	r0, r3
 800edb6:	3718      	adds	r7, #24
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}

0800edbc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800edbc:	b480      	push	{r7}
 800edbe:	b087      	sub	sp, #28
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800edc4:	f04f 33ff 	mov.w	r3, #4294967295
 800edc8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d031      	beq.n	800ee36 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	617b      	str	r3, [r7, #20]
 800edd8:	e002      	b.n	800ede0 <get_ldnumber+0x24>
 800edda:	697b      	ldr	r3, [r7, #20]
 800eddc:	3301      	adds	r3, #1
 800edde:	617b      	str	r3, [r7, #20]
 800ede0:	697b      	ldr	r3, [r7, #20]
 800ede2:	781b      	ldrb	r3, [r3, #0]
 800ede4:	2b1f      	cmp	r3, #31
 800ede6:	d903      	bls.n	800edf0 <get_ldnumber+0x34>
 800ede8:	697b      	ldr	r3, [r7, #20]
 800edea:	781b      	ldrb	r3, [r3, #0]
 800edec:	2b3a      	cmp	r3, #58	@ 0x3a
 800edee:	d1f4      	bne.n	800edda <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	781b      	ldrb	r3, [r3, #0]
 800edf4:	2b3a      	cmp	r3, #58	@ 0x3a
 800edf6:	d11c      	bne.n	800ee32 <get_ldnumber+0x76>
			tp = *path;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	1c5a      	adds	r2, r3, #1
 800ee02:	60fa      	str	r2, [r7, #12]
 800ee04:	781b      	ldrb	r3, [r3, #0]
 800ee06:	3b30      	subs	r3, #48	@ 0x30
 800ee08:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	2b09      	cmp	r3, #9
 800ee0e:	d80e      	bhi.n	800ee2e <get_ldnumber+0x72>
 800ee10:	68fa      	ldr	r2, [r7, #12]
 800ee12:	697b      	ldr	r3, [r7, #20]
 800ee14:	429a      	cmp	r2, r3
 800ee16:	d10a      	bne.n	800ee2e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ee18:	68bb      	ldr	r3, [r7, #8]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d107      	bne.n	800ee2e <get_ldnumber+0x72>
					vol = (int)i;
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ee22:	697b      	ldr	r3, [r7, #20]
 800ee24:	3301      	adds	r3, #1
 800ee26:	617b      	str	r3, [r7, #20]
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	697a      	ldr	r2, [r7, #20]
 800ee2c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ee2e:	693b      	ldr	r3, [r7, #16]
 800ee30:	e002      	b.n	800ee38 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ee32:	2300      	movs	r3, #0
 800ee34:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ee36:	693b      	ldr	r3, [r7, #16]
}
 800ee38:	4618      	mov	r0, r3
 800ee3a:	371c      	adds	r7, #28
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee42:	4770      	bx	lr

0800ee44 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b082      	sub	sp, #8
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
 800ee4c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	2200      	movs	r2, #0
 800ee52:	70da      	strb	r2, [r3, #3]
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	f04f 32ff 	mov.w	r2, #4294967295
 800ee5a:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ee5c:	6839      	ldr	r1, [r7, #0]
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	f7fe fc7a 	bl	800d758 <move_window>
 800ee64:	4603      	mov	r3, r0
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d001      	beq.n	800ee6e <check_fs+0x2a>
 800ee6a:	2304      	movs	r3, #4
 800ee6c:	e038      	b.n	800eee0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	333c      	adds	r3, #60	@ 0x3c
 800ee72:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ee76:	4618      	mov	r0, r3
 800ee78:	f7fe f98c 	bl	800d194 <ld_word>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	461a      	mov	r2, r3
 800ee80:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ee84:	429a      	cmp	r2, r3
 800ee86:	d001      	beq.n	800ee8c <check_fs+0x48>
 800ee88:	2303      	movs	r3, #3
 800ee8a:	e029      	b.n	800eee0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ee92:	2be9      	cmp	r3, #233	@ 0xe9
 800ee94:	d009      	beq.n	800eeaa <check_fs+0x66>
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ee9c:	2beb      	cmp	r3, #235	@ 0xeb
 800ee9e:	d11e      	bne.n	800eede <check_fs+0x9a>
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800eea6:	2b90      	cmp	r3, #144	@ 0x90
 800eea8:	d119      	bne.n	800eede <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	333c      	adds	r3, #60	@ 0x3c
 800eeae:	3336      	adds	r3, #54	@ 0x36
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	f7fe f987 	bl	800d1c4 <ld_dword>
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800eebc:	4a0a      	ldr	r2, [pc, #40]	@ (800eee8 <check_fs+0xa4>)
 800eebe:	4293      	cmp	r3, r2
 800eec0:	d101      	bne.n	800eec6 <check_fs+0x82>
 800eec2:	2300      	movs	r3, #0
 800eec4:	e00c      	b.n	800eee0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	333c      	adds	r3, #60	@ 0x3c
 800eeca:	3352      	adds	r3, #82	@ 0x52
 800eecc:	4618      	mov	r0, r3
 800eece:	f7fe f979 	bl	800d1c4 <ld_dword>
 800eed2:	4603      	mov	r3, r0
 800eed4:	4a05      	ldr	r2, [pc, #20]	@ (800eeec <check_fs+0xa8>)
 800eed6:	4293      	cmp	r3, r2
 800eed8:	d101      	bne.n	800eede <check_fs+0x9a>
 800eeda:	2300      	movs	r3, #0
 800eedc:	e000      	b.n	800eee0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800eede:	2302      	movs	r3, #2
}
 800eee0:	4618      	mov	r0, r3
 800eee2:	3708      	adds	r7, #8
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd80      	pop	{r7, pc}
 800eee8:	00544146 	.word	0x00544146
 800eeec:	33544146 	.word	0x33544146

0800eef0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b096      	sub	sp, #88	@ 0x58
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	60f8      	str	r0, [r7, #12]
 800eef8:	60b9      	str	r1, [r7, #8]
 800eefa:	4613      	mov	r3, r2
 800eefc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800eefe:	68bb      	ldr	r3, [r7, #8]
 800ef00:	2200      	movs	r2, #0
 800ef02:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ef04:	68f8      	ldr	r0, [r7, #12]
 800ef06:	f7ff ff59 	bl	800edbc <get_ldnumber>
 800ef0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ef0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	da01      	bge.n	800ef16 <find_volume+0x26>
 800ef12:	230b      	movs	r3, #11
 800ef14:	e26a      	b.n	800f3ec <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ef16:	4aa3      	ldr	r2, [pc, #652]	@ (800f1a4 <find_volume+0x2b4>)
 800ef18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef1e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ef20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d101      	bne.n	800ef2a <find_volume+0x3a>
 800ef26:	230c      	movs	r3, #12
 800ef28:	e260      	b.n	800f3ec <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 800ef2a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ef2c:	f7fe fa32 	bl	800d394 <lock_fs>
 800ef30:	4603      	mov	r3, r0
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d101      	bne.n	800ef3a <find_volume+0x4a>
 800ef36:	230f      	movs	r3, #15
 800ef38:	e258      	b.n	800f3ec <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 800ef3a:	68bb      	ldr	r3, [r7, #8]
 800ef3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ef3e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ef40:	79fb      	ldrb	r3, [r7, #7]
 800ef42:	f023 0301 	bic.w	r3, r3, #1
 800ef46:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ef48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef4a:	781b      	ldrb	r3, [r3, #0]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d01a      	beq.n	800ef86 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800ef50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef52:	785b      	ldrb	r3, [r3, #1]
 800ef54:	4618      	mov	r0, r3
 800ef56:	f7fe f87f 	bl	800d058 <disk_status>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ef60:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ef64:	f003 0301 	and.w	r3, r3, #1
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d10c      	bne.n	800ef86 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ef6c:	79fb      	ldrb	r3, [r7, #7]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d007      	beq.n	800ef82 <find_volume+0x92>
 800ef72:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ef76:	f003 0304 	and.w	r3, r3, #4
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d001      	beq.n	800ef82 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800ef7e:	230a      	movs	r3, #10
 800ef80:	e234      	b.n	800f3ec <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 800ef82:	2300      	movs	r3, #0
 800ef84:	e232      	b.n	800f3ec <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ef86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef88:	2200      	movs	r2, #0
 800ef8a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ef8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef8e:	b2da      	uxtb	r2, r3
 800ef90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef92:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ef94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef96:	785b      	ldrb	r3, [r3, #1]
 800ef98:	4618      	mov	r0, r3
 800ef9a:	f7fe f877 	bl	800d08c <disk_initialize>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800efa4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800efa8:	f003 0301 	and.w	r3, r3, #1
 800efac:	2b00      	cmp	r3, #0
 800efae:	d001      	beq.n	800efb4 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800efb0:	2303      	movs	r3, #3
 800efb2:	e21b      	b.n	800f3ec <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800efb4:	79fb      	ldrb	r3, [r7, #7]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d007      	beq.n	800efca <find_volume+0xda>
 800efba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800efbe:	f003 0304 	and.w	r3, r3, #4
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d001      	beq.n	800efca <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800efc6:	230a      	movs	r3, #10
 800efc8:	e210      	b.n	800f3ec <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800efca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efcc:	7858      	ldrb	r0, [r3, #1]
 800efce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efd0:	330c      	adds	r3, #12
 800efd2:	461a      	mov	r2, r3
 800efd4:	2102      	movs	r1, #2
 800efd6:	f7fe f8bf 	bl	800d158 <disk_ioctl>
 800efda:	4603      	mov	r3, r0
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d001      	beq.n	800efe4 <find_volume+0xf4>
 800efe0:	2301      	movs	r3, #1
 800efe2:	e203      	b.n	800f3ec <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800efe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efe6:	899b      	ldrh	r3, [r3, #12]
 800efe8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800efec:	d80d      	bhi.n	800f00a <find_volume+0x11a>
 800efee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eff0:	899b      	ldrh	r3, [r3, #12]
 800eff2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eff6:	d308      	bcc.n	800f00a <find_volume+0x11a>
 800eff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800effa:	899b      	ldrh	r3, [r3, #12]
 800effc:	461a      	mov	r2, r3
 800effe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f000:	899b      	ldrh	r3, [r3, #12]
 800f002:	3b01      	subs	r3, #1
 800f004:	4013      	ands	r3, r2
 800f006:	2b00      	cmp	r3, #0
 800f008:	d001      	beq.n	800f00e <find_volume+0x11e>
 800f00a:	2301      	movs	r3, #1
 800f00c:	e1ee      	b.n	800f3ec <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f00e:	2300      	movs	r3, #0
 800f010:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f012:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f014:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f016:	f7ff ff15 	bl	800ee44 <check_fs>
 800f01a:	4603      	mov	r3, r0
 800f01c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f020:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f024:	2b02      	cmp	r3, #2
 800f026:	d149      	bne.n	800f0bc <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f028:	2300      	movs	r3, #0
 800f02a:	643b      	str	r3, [r7, #64]	@ 0x40
 800f02c:	e01e      	b.n	800f06c <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f02e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f030:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800f034:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f036:	011b      	lsls	r3, r3, #4
 800f038:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800f03c:	4413      	add	r3, r2
 800f03e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f042:	3304      	adds	r3, #4
 800f044:	781b      	ldrb	r3, [r3, #0]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d006      	beq.n	800f058 <find_volume+0x168>
 800f04a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f04c:	3308      	adds	r3, #8
 800f04e:	4618      	mov	r0, r3
 800f050:	f7fe f8b8 	bl	800d1c4 <ld_dword>
 800f054:	4602      	mov	r2, r0
 800f056:	e000      	b.n	800f05a <find_volume+0x16a>
 800f058:	2200      	movs	r2, #0
 800f05a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f05c:	009b      	lsls	r3, r3, #2
 800f05e:	3358      	adds	r3, #88	@ 0x58
 800f060:	443b      	add	r3, r7
 800f062:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f066:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f068:	3301      	adds	r3, #1
 800f06a:	643b      	str	r3, [r7, #64]	@ 0x40
 800f06c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f06e:	2b03      	cmp	r3, #3
 800f070:	d9dd      	bls.n	800f02e <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f072:	2300      	movs	r3, #0
 800f074:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800f076:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d002      	beq.n	800f082 <find_volume+0x192>
 800f07c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f07e:	3b01      	subs	r3, #1
 800f080:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f082:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f084:	009b      	lsls	r3, r3, #2
 800f086:	3358      	adds	r3, #88	@ 0x58
 800f088:	443b      	add	r3, r7
 800f08a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f08e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f090:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f092:	2b00      	cmp	r3, #0
 800f094:	d005      	beq.n	800f0a2 <find_volume+0x1b2>
 800f096:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f098:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f09a:	f7ff fed3 	bl	800ee44 <check_fs>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	e000      	b.n	800f0a4 <find_volume+0x1b4>
 800f0a2:	2303      	movs	r3, #3
 800f0a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f0a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f0ac:	2b01      	cmp	r3, #1
 800f0ae:	d905      	bls.n	800f0bc <find_volume+0x1cc>
 800f0b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f0b2:	3301      	adds	r3, #1
 800f0b4:	643b      	str	r3, [r7, #64]	@ 0x40
 800f0b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f0b8:	2b03      	cmp	r3, #3
 800f0ba:	d9e2      	bls.n	800f082 <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f0bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f0c0:	2b04      	cmp	r3, #4
 800f0c2:	d101      	bne.n	800f0c8 <find_volume+0x1d8>
 800f0c4:	2301      	movs	r3, #1
 800f0c6:	e191      	b.n	800f3ec <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f0c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f0cc:	2b01      	cmp	r3, #1
 800f0ce:	d901      	bls.n	800f0d4 <find_volume+0x1e4>
 800f0d0:	230d      	movs	r3, #13
 800f0d2:	e18b      	b.n	800f3ec <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f0d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0d6:	333c      	adds	r3, #60	@ 0x3c
 800f0d8:	330b      	adds	r3, #11
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f7fe f85a 	bl	800d194 <ld_word>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	461a      	mov	r2, r3
 800f0e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0e6:	899b      	ldrh	r3, [r3, #12]
 800f0e8:	429a      	cmp	r2, r3
 800f0ea:	d001      	beq.n	800f0f0 <find_volume+0x200>
 800f0ec:	230d      	movs	r3, #13
 800f0ee:	e17d      	b.n	800f3ec <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f0f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0f2:	333c      	adds	r3, #60	@ 0x3c
 800f0f4:	3316      	adds	r3, #22
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	f7fe f84c 	bl	800d194 <ld_word>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f100:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f102:	2b00      	cmp	r3, #0
 800f104:	d106      	bne.n	800f114 <find_volume+0x224>
 800f106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f108:	333c      	adds	r3, #60	@ 0x3c
 800f10a:	3324      	adds	r3, #36	@ 0x24
 800f10c:	4618      	mov	r0, r3
 800f10e:	f7fe f859 	bl	800d1c4 <ld_dword>
 800f112:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800f114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f116:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f118:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f11a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f11c:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 800f120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f122:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f126:	789b      	ldrb	r3, [r3, #2]
 800f128:	2b01      	cmp	r3, #1
 800f12a:	d005      	beq.n	800f138 <find_volume+0x248>
 800f12c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f12e:	789b      	ldrb	r3, [r3, #2]
 800f130:	2b02      	cmp	r3, #2
 800f132:	d001      	beq.n	800f138 <find_volume+0x248>
 800f134:	230d      	movs	r3, #13
 800f136:	e159      	b.n	800f3ec <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f13a:	789b      	ldrb	r3, [r3, #2]
 800f13c:	461a      	mov	r2, r3
 800f13e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f140:	fb02 f303 	mul.w	r3, r2, r3
 800f144:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f148:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800f14c:	461a      	mov	r2, r3
 800f14e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f150:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f154:	895b      	ldrh	r3, [r3, #10]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d008      	beq.n	800f16c <find_volume+0x27c>
 800f15a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f15c:	895b      	ldrh	r3, [r3, #10]
 800f15e:	461a      	mov	r2, r3
 800f160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f162:	895b      	ldrh	r3, [r3, #10]
 800f164:	3b01      	subs	r3, #1
 800f166:	4013      	ands	r3, r2
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d001      	beq.n	800f170 <find_volume+0x280>
 800f16c:	230d      	movs	r3, #13
 800f16e:	e13d      	b.n	800f3ec <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f172:	333c      	adds	r3, #60	@ 0x3c
 800f174:	3311      	adds	r3, #17
 800f176:	4618      	mov	r0, r3
 800f178:	f7fe f80c 	bl	800d194 <ld_word>
 800f17c:	4603      	mov	r3, r0
 800f17e:	461a      	mov	r2, r3
 800f180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f182:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f186:	891b      	ldrh	r3, [r3, #8]
 800f188:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f18a:	8992      	ldrh	r2, [r2, #12]
 800f18c:	0952      	lsrs	r2, r2, #5
 800f18e:	b292      	uxth	r2, r2
 800f190:	fbb3 f1f2 	udiv	r1, r3, r2
 800f194:	fb01 f202 	mul.w	r2, r1, r2
 800f198:	1a9b      	subs	r3, r3, r2
 800f19a:	b29b      	uxth	r3, r3
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d003      	beq.n	800f1a8 <find_volume+0x2b8>
 800f1a0:	230d      	movs	r3, #13
 800f1a2:	e123      	b.n	800f3ec <find_volume+0x4fc>
 800f1a4:	20002bf4 	.word	0x20002bf4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f1a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1aa:	333c      	adds	r3, #60	@ 0x3c
 800f1ac:	3313      	adds	r3, #19
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	f7fd fff0 	bl	800d194 <ld_word>
 800f1b4:	4603      	mov	r3, r0
 800f1b6:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f1b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d106      	bne.n	800f1cc <find_volume+0x2dc>
 800f1be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1c0:	333c      	adds	r3, #60	@ 0x3c
 800f1c2:	3320      	adds	r3, #32
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	f7fd fffd 	bl	800d1c4 <ld_dword>
 800f1ca:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f1cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1ce:	333c      	adds	r3, #60	@ 0x3c
 800f1d0:	330e      	adds	r3, #14
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f7fd ffde 	bl	800d194 <ld_word>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f1dc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d101      	bne.n	800f1e6 <find_volume+0x2f6>
 800f1e2:	230d      	movs	r3, #13
 800f1e4:	e102      	b.n	800f3ec <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f1e6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f1e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f1ea:	4413      	add	r3, r2
 800f1ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f1ee:	8911      	ldrh	r1, [r2, #8]
 800f1f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f1f2:	8992      	ldrh	r2, [r2, #12]
 800f1f4:	0952      	lsrs	r2, r2, #5
 800f1f6:	b292      	uxth	r2, r2
 800f1f8:	fbb1 f2f2 	udiv	r2, r1, r2
 800f1fc:	b292      	uxth	r2, r2
 800f1fe:	4413      	add	r3, r2
 800f200:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f202:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f206:	429a      	cmp	r2, r3
 800f208:	d201      	bcs.n	800f20e <find_volume+0x31e>
 800f20a:	230d      	movs	r3, #13
 800f20c:	e0ee      	b.n	800f3ec <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f20e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f212:	1ad3      	subs	r3, r2, r3
 800f214:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f216:	8952      	ldrh	r2, [r2, #10]
 800f218:	fbb3 f3f2 	udiv	r3, r3, r2
 800f21c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f21e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f220:	2b00      	cmp	r3, #0
 800f222:	d101      	bne.n	800f228 <find_volume+0x338>
 800f224:	230d      	movs	r3, #13
 800f226:	e0e1      	b.n	800f3ec <find_volume+0x4fc>
		fmt = FS_FAT32;
 800f228:	2303      	movs	r3, #3
 800f22a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f230:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800f234:	4293      	cmp	r3, r2
 800f236:	d802      	bhi.n	800f23e <find_volume+0x34e>
 800f238:	2302      	movs	r3, #2
 800f23a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f240:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800f244:	4293      	cmp	r3, r2
 800f246:	d802      	bhi.n	800f24e <find_volume+0x35e>
 800f248:	2301      	movs	r3, #1
 800f24a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f24e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f250:	1c9a      	adds	r2, r3, #2
 800f252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f254:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800f256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f258:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f25a:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f25c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f25e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f260:	441a      	add	r2, r3
 800f262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f264:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800f266:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f26a:	441a      	add	r2, r3
 800f26c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f26e:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 800f270:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f274:	2b03      	cmp	r3, #3
 800f276:	d11e      	bne.n	800f2b6 <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f27a:	333c      	adds	r3, #60	@ 0x3c
 800f27c:	332a      	adds	r3, #42	@ 0x2a
 800f27e:	4618      	mov	r0, r3
 800f280:	f7fd ff88 	bl	800d194 <ld_word>
 800f284:	4603      	mov	r3, r0
 800f286:	2b00      	cmp	r3, #0
 800f288:	d001      	beq.n	800f28e <find_volume+0x39e>
 800f28a:	230d      	movs	r3, #13
 800f28c:	e0ae      	b.n	800f3ec <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f28e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f290:	891b      	ldrh	r3, [r3, #8]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d001      	beq.n	800f29a <find_volume+0x3aa>
 800f296:	230d      	movs	r3, #13
 800f298:	e0a8      	b.n	800f3ec <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f29a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f29c:	333c      	adds	r3, #60	@ 0x3c
 800f29e:	332c      	adds	r3, #44	@ 0x2c
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	f7fd ff8f 	bl	800d1c4 <ld_dword>
 800f2a6:	4602      	mov	r2, r0
 800f2a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2aa:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f2ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2ae:	6a1b      	ldr	r3, [r3, #32]
 800f2b0:	009b      	lsls	r3, r3, #2
 800f2b2:	647b      	str	r3, [r7, #68]	@ 0x44
 800f2b4:	e01f      	b.n	800f2f6 <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f2b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2b8:	891b      	ldrh	r3, [r3, #8]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d101      	bne.n	800f2c2 <find_volume+0x3d2>
 800f2be:	230d      	movs	r3, #13
 800f2c0:	e094      	b.n	800f3ec <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f2c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f2c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f2c8:	441a      	add	r2, r3
 800f2ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2cc:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f2ce:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f2d2:	2b02      	cmp	r3, #2
 800f2d4:	d103      	bne.n	800f2de <find_volume+0x3ee>
 800f2d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2d8:	6a1b      	ldr	r3, [r3, #32]
 800f2da:	005b      	lsls	r3, r3, #1
 800f2dc:	e00a      	b.n	800f2f4 <find_volume+0x404>
 800f2de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2e0:	6a1a      	ldr	r2, [r3, #32]
 800f2e2:	4613      	mov	r3, r2
 800f2e4:	005b      	lsls	r3, r3, #1
 800f2e6:	4413      	add	r3, r2
 800f2e8:	085a      	lsrs	r2, r3, #1
 800f2ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2ec:	6a1b      	ldr	r3, [r3, #32]
 800f2ee:	f003 0301 	and.w	r3, r3, #1
 800f2f2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f2f4:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f2f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f2fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2fc:	899b      	ldrh	r3, [r3, #12]
 800f2fe:	4619      	mov	r1, r3
 800f300:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f302:	440b      	add	r3, r1
 800f304:	3b01      	subs	r3, #1
 800f306:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f308:	8989      	ldrh	r1, [r1, #12]
 800f30a:	fbb3 f3f1 	udiv	r3, r3, r1
 800f30e:	429a      	cmp	r2, r3
 800f310:	d201      	bcs.n	800f316 <find_volume+0x426>
 800f312:	230d      	movs	r3, #13
 800f314:	e06a      	b.n	800f3ec <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f318:	f04f 32ff 	mov.w	r2, #4294967295
 800f31c:	61da      	str	r2, [r3, #28]
 800f31e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f320:	69da      	ldr	r2, [r3, #28]
 800f322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f324:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800f326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f328:	2280      	movs	r2, #128	@ 0x80
 800f32a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f32c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f330:	2b03      	cmp	r3, #3
 800f332:	d149      	bne.n	800f3c8 <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f336:	333c      	adds	r3, #60	@ 0x3c
 800f338:	3330      	adds	r3, #48	@ 0x30
 800f33a:	4618      	mov	r0, r3
 800f33c:	f7fd ff2a 	bl	800d194 <ld_word>
 800f340:	4603      	mov	r3, r0
 800f342:	2b01      	cmp	r3, #1
 800f344:	d140      	bne.n	800f3c8 <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f346:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f348:	3301      	adds	r3, #1
 800f34a:	4619      	mov	r1, r3
 800f34c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f34e:	f7fe fa03 	bl	800d758 <move_window>
 800f352:	4603      	mov	r3, r0
 800f354:	2b00      	cmp	r3, #0
 800f356:	d137      	bne.n	800f3c8 <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 800f358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f35a:	2200      	movs	r2, #0
 800f35c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f35e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f360:	333c      	adds	r3, #60	@ 0x3c
 800f362:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f366:	4618      	mov	r0, r3
 800f368:	f7fd ff14 	bl	800d194 <ld_word>
 800f36c:	4603      	mov	r3, r0
 800f36e:	461a      	mov	r2, r3
 800f370:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f374:	429a      	cmp	r2, r3
 800f376:	d127      	bne.n	800f3c8 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f37a:	333c      	adds	r3, #60	@ 0x3c
 800f37c:	4618      	mov	r0, r3
 800f37e:	f7fd ff21 	bl	800d1c4 <ld_dword>
 800f382:	4603      	mov	r3, r0
 800f384:	4a1b      	ldr	r2, [pc, #108]	@ (800f3f4 <find_volume+0x504>)
 800f386:	4293      	cmp	r3, r2
 800f388:	d11e      	bne.n	800f3c8 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f38a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f38c:	333c      	adds	r3, #60	@ 0x3c
 800f38e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f392:	4618      	mov	r0, r3
 800f394:	f7fd ff16 	bl	800d1c4 <ld_dword>
 800f398:	4603      	mov	r3, r0
 800f39a:	4a17      	ldr	r2, [pc, #92]	@ (800f3f8 <find_volume+0x508>)
 800f39c:	4293      	cmp	r3, r2
 800f39e:	d113      	bne.n	800f3c8 <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f3a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3a2:	333c      	adds	r3, #60	@ 0x3c
 800f3a4:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f7fd ff0b 	bl	800d1c4 <ld_dword>
 800f3ae:	4602      	mov	r2, r0
 800f3b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3b2:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f3b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3b6:	333c      	adds	r3, #60	@ 0x3c
 800f3b8:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800f3bc:	4618      	mov	r0, r3
 800f3be:	f7fd ff01 	bl	800d1c4 <ld_dword>
 800f3c2:	4602      	mov	r2, r0
 800f3c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3c6:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f3c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3ca:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800f3ce:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f3d0:	4b0a      	ldr	r3, [pc, #40]	@ (800f3fc <find_volume+0x50c>)
 800f3d2:	881b      	ldrh	r3, [r3, #0]
 800f3d4:	3301      	adds	r3, #1
 800f3d6:	b29a      	uxth	r2, r3
 800f3d8:	4b08      	ldr	r3, [pc, #32]	@ (800f3fc <find_volume+0x50c>)
 800f3da:	801a      	strh	r2, [r3, #0]
 800f3dc:	4b07      	ldr	r3, [pc, #28]	@ (800f3fc <find_volume+0x50c>)
 800f3de:	881a      	ldrh	r2, [r3, #0]
 800f3e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3e2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f3e4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f3e6:	f7fe f94f 	bl	800d688 <clear_lock>
#endif
	return FR_OK;
 800f3ea:	2300      	movs	r3, #0
}
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	3758      	adds	r7, #88	@ 0x58
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	bd80      	pop	{r7, pc}
 800f3f4:	41615252 	.word	0x41615252
 800f3f8:	61417272 	.word	0x61417272
 800f3fc:	20002bf8 	.word	0x20002bf8

0800f400 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b084      	sub	sp, #16
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
 800f408:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f40a:	2309      	movs	r3, #9
 800f40c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d02e      	beq.n	800f472 <validate+0x72>
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d02a      	beq.n	800f472 <validate+0x72>
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	781b      	ldrb	r3, [r3, #0]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d025      	beq.n	800f472 <validate+0x72>
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	889a      	ldrh	r2, [r3, #4]
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	88db      	ldrh	r3, [r3, #6]
 800f430:	429a      	cmp	r2, r3
 800f432:	d11e      	bne.n	800f472 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	4618      	mov	r0, r3
 800f43a:	f7fd ffab 	bl	800d394 <lock_fs>
 800f43e:	4603      	mov	r3, r0
 800f440:	2b00      	cmp	r3, #0
 800f442:	d014      	beq.n	800f46e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	785b      	ldrb	r3, [r3, #1]
 800f44a:	4618      	mov	r0, r3
 800f44c:	f7fd fe04 	bl	800d058 <disk_status>
 800f450:	4603      	mov	r3, r0
 800f452:	f003 0301 	and.w	r3, r3, #1
 800f456:	2b00      	cmp	r3, #0
 800f458:	d102      	bne.n	800f460 <validate+0x60>
				res = FR_OK;
 800f45a:	2300      	movs	r3, #0
 800f45c:	73fb      	strb	r3, [r7, #15]
 800f45e:	e008      	b.n	800f472 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	2100      	movs	r1, #0
 800f466:	4618      	mov	r0, r3
 800f468:	f7fd ffaa 	bl	800d3c0 <unlock_fs>
 800f46c:	e001      	b.n	800f472 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800f46e:	230f      	movs	r3, #15
 800f470:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f472:	7bfb      	ldrb	r3, [r7, #15]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d102      	bne.n	800f47e <validate+0x7e>
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	e000      	b.n	800f480 <validate+0x80>
 800f47e:	2300      	movs	r3, #0
 800f480:	683a      	ldr	r2, [r7, #0]
 800f482:	6013      	str	r3, [r2, #0]
	return res;
 800f484:	7bfb      	ldrb	r3, [r7, #15]
}
 800f486:	4618      	mov	r0, r3
 800f488:	3710      	adds	r7, #16
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}
	...

0800f490 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b088      	sub	sp, #32
 800f494:	af00      	add	r7, sp, #0
 800f496:	60f8      	str	r0, [r7, #12]
 800f498:	60b9      	str	r1, [r7, #8]
 800f49a:	4613      	mov	r3, r2
 800f49c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f4a2:	f107 0310 	add.w	r3, r7, #16
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	f7ff fc88 	bl	800edbc <get_ldnumber>
 800f4ac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f4ae:	69fb      	ldr	r3, [r7, #28]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	da01      	bge.n	800f4b8 <f_mount+0x28>
 800f4b4:	230b      	movs	r3, #11
 800f4b6:	e048      	b.n	800f54a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f4b8:	4a26      	ldr	r2, [pc, #152]	@ (800f554 <f_mount+0xc4>)
 800f4ba:	69fb      	ldr	r3, [r7, #28]
 800f4bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4c0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f4c2:	69bb      	ldr	r3, [r7, #24]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d00f      	beq.n	800f4e8 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f4c8:	69b8      	ldr	r0, [r7, #24]
 800f4ca:	f7fe f8dd 	bl	800d688 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800f4ce:	69bb      	ldr	r3, [r7, #24]
 800f4d0:	695b      	ldr	r3, [r3, #20]
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	f001 f820 	bl	8010518 <ff_del_syncobj>
 800f4d8:	4603      	mov	r3, r0
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d101      	bne.n	800f4e2 <f_mount+0x52>
 800f4de:	2302      	movs	r3, #2
 800f4e0:	e033      	b.n	800f54a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f4e2:	69bb      	ldr	r3, [r7, #24]
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d00f      	beq.n	800f50e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800f4f4:	69fb      	ldr	r3, [r7, #28]
 800f4f6:	b2da      	uxtb	r2, r3
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	3314      	adds	r3, #20
 800f4fc:	4619      	mov	r1, r3
 800f4fe:	4610      	mov	r0, r2
 800f500:	f000 ffea 	bl	80104d8 <ff_cre_syncobj>
 800f504:	4603      	mov	r3, r0
 800f506:	2b00      	cmp	r3, #0
 800f508:	d101      	bne.n	800f50e <f_mount+0x7e>
 800f50a:	2302      	movs	r3, #2
 800f50c:	e01d      	b.n	800f54a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f50e:	68fa      	ldr	r2, [r7, #12]
 800f510:	4910      	ldr	r1, [pc, #64]	@ (800f554 <f_mount+0xc4>)
 800f512:	69fb      	ldr	r3, [r7, #28]
 800f514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d002      	beq.n	800f524 <f_mount+0x94>
 800f51e:	79fb      	ldrb	r3, [r7, #7]
 800f520:	2b01      	cmp	r3, #1
 800f522:	d001      	beq.n	800f528 <f_mount+0x98>
 800f524:	2300      	movs	r3, #0
 800f526:	e010      	b.n	800f54a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f528:	f107 010c 	add.w	r1, r7, #12
 800f52c:	f107 0308 	add.w	r3, r7, #8
 800f530:	2200      	movs	r2, #0
 800f532:	4618      	mov	r0, r3
 800f534:	f7ff fcdc 	bl	800eef0 <find_volume>
 800f538:	4603      	mov	r3, r0
 800f53a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	7dfa      	ldrb	r2, [r7, #23]
 800f540:	4611      	mov	r1, r2
 800f542:	4618      	mov	r0, r3
 800f544:	f7fd ff3c 	bl	800d3c0 <unlock_fs>
 800f548:	7dfb      	ldrb	r3, [r7, #23]
}
 800f54a:	4618      	mov	r0, r3
 800f54c:	3720      	adds	r7, #32
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd80      	pop	{r7, pc}
 800f552:	bf00      	nop
 800f554:	20002bf4 	.word	0x20002bf4

0800f558 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 800f55e:	af00      	add	r7, sp, #0
 800f560:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f564:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f568:	6018      	str	r0, [r3, #0]
 800f56a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f56e:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800f572:	6019      	str	r1, [r3, #0]
 800f574:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f578:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f57c:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f57e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f582:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d101      	bne.n	800f590 <f_open+0x38>
 800f58c:	2309      	movs	r3, #9
 800f58e:	e2aa      	b.n	800fae6 <f_open+0x58e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f590:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f594:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f598:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800f59c:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 800f5a0:	7812      	ldrb	r2, [r2, #0]
 800f5a2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800f5a6:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800f5a8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f5ac:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f5b0:	781a      	ldrb	r2, [r3, #0]
 800f5b2:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 800f5b6:	f107 0308 	add.w	r3, r7, #8
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	f7ff fc98 	bl	800eef0 <find_volume>
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
	if (res == FR_OK) {
 800f5c6:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	f040 8276 	bne.w	800fabc <f_open+0x564>
		dj.obj.fs = fs;
 800f5d0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f5d4:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
		INIT_NAMBUF(fs);
 800f5d8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f5dc:	f107 0214 	add.w	r2, r7, #20
 800f5e0:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800f5e2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f5e6:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800f5ea:	681a      	ldr	r2, [r3, #0]
 800f5ec:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f5f0:	4611      	mov	r1, r2
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	f7ff fb6c 	bl	800ecd0 <follow_path>
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f5fe:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f602:	2b00      	cmp	r3, #0
 800f604:	d11c      	bne.n	800f640 <f_open+0xe8>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f606:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 800f60a:	b25b      	sxtb	r3, r3
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	da03      	bge.n	800f618 <f_open+0xc0>
				res = FR_INVALID_NAME;
 800f610:	2306      	movs	r3, #6
 800f612:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 800f616:	e013      	b.n	800f640 <f_open+0xe8>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f618:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f61c:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f620:	781b      	ldrb	r3, [r3, #0]
 800f622:	2b01      	cmp	r3, #1
 800f624:	bf8c      	ite	hi
 800f626:	2301      	movhi	r3, #1
 800f628:	2300      	movls	r3, #0
 800f62a:	b2db      	uxtb	r3, r3
 800f62c:	461a      	mov	r2, r3
 800f62e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f632:	4611      	mov	r1, r2
 800f634:	4618      	mov	r0, r3
 800f636:	f7fd fedf 	bl	800d3f8 <chk_lock>
 800f63a:	4603      	mov	r3, r0
 800f63c:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f640:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f644:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f648:	781b      	ldrb	r3, [r3, #0]
 800f64a:	f003 031c 	and.w	r3, r3, #28
 800f64e:	2b00      	cmp	r3, #0
 800f650:	f000 80a7 	beq.w	800f7a2 <f_open+0x24a>
			if (res != FR_OK) {					/* No file, create new */
 800f654:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d01f      	beq.n	800f69c <f_open+0x144>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f65c:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f660:	2b04      	cmp	r3, #4
 800f662:	d10e      	bne.n	800f682 <f_open+0x12a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f664:	f7fd ff24 	bl	800d4b0 <enq_lock>
 800f668:	4603      	mov	r3, r0
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d006      	beq.n	800f67c <f_open+0x124>
 800f66e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f672:	4618      	mov	r0, r3
 800f674:	f7ff f87c 	bl	800e770 <dir_register>
 800f678:	4603      	mov	r3, r0
 800f67a:	e000      	b.n	800f67e <f_open+0x126>
 800f67c:	2312      	movs	r3, #18
 800f67e:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f682:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f686:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f68a:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800f68e:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 800f692:	7812      	ldrb	r2, [r2, #0]
 800f694:	f042 0208 	orr.w	r2, r2, #8
 800f698:	701a      	strb	r2, [r3, #0]
 800f69a:	e015      	b.n	800f6c8 <f_open+0x170>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f69c:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 800f6a0:	f003 0311 	and.w	r3, r3, #17
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d003      	beq.n	800f6b0 <f_open+0x158>
					res = FR_DENIED;
 800f6a8:	2307      	movs	r3, #7
 800f6aa:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 800f6ae:	e00b      	b.n	800f6c8 <f_open+0x170>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f6b0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f6b4:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f6b8:	781b      	ldrb	r3, [r3, #0]
 800f6ba:	f003 0304 	and.w	r3, r3, #4
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d002      	beq.n	800f6c8 <f_open+0x170>
 800f6c2:	2308      	movs	r3, #8
 800f6c4:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f6c8:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	f040 8088 	bne.w	800f7e2 <f_open+0x28a>
 800f6d2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f6d6:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f6da:	781b      	ldrb	r3, [r3, #0]
 800f6dc:	f003 0308 	and.w	r3, r3, #8
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d07e      	beq.n	800f7e2 <f_open+0x28a>
				dw = GET_FATTIME();
 800f6e4:	f7fd fc5a 	bl	800cf9c <get_fattime>
 800f6e8:	f8c7 0258 	str.w	r0, [r7, #600]	@ 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f6ec:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800f6f0:	330e      	adds	r3, #14
 800f6f2:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	f7fd fda2 	bl	800d240 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f6fc:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800f700:	3316      	adds	r3, #22
 800f702:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 800f706:	4618      	mov	r0, r3
 800f708:	f7fd fd9a 	bl	800d240 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f70c:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800f710:	330b      	adds	r3, #11
 800f712:	2220      	movs	r2, #32
 800f714:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f716:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f71a:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800f71e:	4611      	mov	r1, r2
 800f720:	4618      	mov	r0, r3
 800f722:	f7fe fd9e 	bl	800e262 <ld_clust>
 800f726:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f72a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f72e:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 800f732:	2200      	movs	r2, #0
 800f734:	4618      	mov	r0, r3
 800f736:	f7fe fdb3 	bl	800e2a0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f73a:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800f73e:	331c      	adds	r3, #28
 800f740:	2100      	movs	r1, #0
 800f742:	4618      	mov	r0, r3
 800f744:	f7fd fd7c 	bl	800d240 <st_dword>
					fs->wflag = 1;
 800f748:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f74c:	2201      	movs	r2, #1
 800f74e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f750:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800f754:	2b00      	cmp	r3, #0
 800f756:	d044      	beq.n	800f7e2 <f_open+0x28a>
						dw = fs->winsect;
 800f758:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f75c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f75e:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
						res = remove_chain(&dj.obj, cl, 0);
 800f762:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f766:	2200      	movs	r2, #0
 800f768:	f8d7 1254 	ldr.w	r1, [r7, #596]	@ 0x254
 800f76c:	4618      	mov	r0, r3
 800f76e:	f7fe fa9d 	bl	800dcac <remove_chain>
 800f772:	4603      	mov	r3, r0
 800f774:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
						if (res == FR_OK) {
 800f778:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d130      	bne.n	800f7e2 <f_open+0x28a>
							res = move_window(fs, dw);
 800f780:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f784:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 800f788:	4618      	mov	r0, r3
 800f78a:	f7fd ffe5 	bl	800d758 <move_window>
 800f78e:	4603      	mov	r3, r0
 800f790:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f794:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f798:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 800f79c:	3a01      	subs	r2, #1
 800f79e:	619a      	str	r2, [r3, #24]
 800f7a0:	e01f      	b.n	800f7e2 <f_open+0x28a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f7a2:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d11b      	bne.n	800f7e2 <f_open+0x28a>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f7aa:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 800f7ae:	f003 0310 	and.w	r3, r3, #16
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d003      	beq.n	800f7be <f_open+0x266>
					res = FR_NO_FILE;
 800f7b6:	2304      	movs	r3, #4
 800f7b8:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 800f7bc:	e011      	b.n	800f7e2 <f_open+0x28a>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f7be:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f7c2:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f7c6:	781b      	ldrb	r3, [r3, #0]
 800f7c8:	f003 0302 	and.w	r3, r3, #2
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d008      	beq.n	800f7e2 <f_open+0x28a>
 800f7d0:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 800f7d4:	f003 0301 	and.w	r3, r3, #1
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d002      	beq.n	800f7e2 <f_open+0x28a>
						res = FR_DENIED;
 800f7dc:	2307      	movs	r3, #7
 800f7de:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 800f7e2:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d148      	bne.n	800f87c <f_open+0x324>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f7ea:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f7ee:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f7f2:	781b      	ldrb	r3, [r3, #0]
 800f7f4:	f003 0308 	and.w	r3, r3, #8
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d00b      	beq.n	800f814 <f_open+0x2bc>
				mode |= FA_MODIFIED;
 800f7fc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f800:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f804:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800f808:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 800f80c:	7812      	ldrb	r2, [r2, #0]
 800f80e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f812:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f814:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f818:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f81a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f81e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800f826:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800f82a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f82e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f836:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f83a:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f83e:	781b      	ldrb	r3, [r3, #0]
 800f840:	2b01      	cmp	r3, #1
 800f842:	bf8c      	ite	hi
 800f844:	2301      	movhi	r3, #1
 800f846:	2300      	movls	r3, #0
 800f848:	b2db      	uxtb	r3, r3
 800f84a:	461a      	mov	r2, r3
 800f84c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f850:	4611      	mov	r1, r2
 800f852:	4618      	mov	r0, r3
 800f854:	f7fd fe4e 	bl	800d4f4 <inc_lock>
 800f858:	4602      	mov	r2, r0
 800f85a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f85e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f866:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f86a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	691b      	ldr	r3, [r3, #16]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d102      	bne.n	800f87c <f_open+0x324>
 800f876:	2302      	movs	r3, #2
 800f878:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f87c:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f880:	2b00      	cmp	r3, #0
 800f882:	f040 811b 	bne.w	800fabc <f_open+0x564>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f886:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f88a:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800f88e:	4611      	mov	r1, r2
 800f890:	4618      	mov	r0, r3
 800f892:	f7fe fce6 	bl	800e262 <ld_clust>
 800f896:	4602      	mov	r2, r0
 800f898:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f89c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f8a4:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800f8a8:	331c      	adds	r3, #28
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	f7fd fc8a 	bl	800d1c4 <ld_dword>
 800f8b0:	4602      	mov	r2, r0
 800f8b2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f8b6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f8be:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f8c2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f8cc:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 800f8d0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f8d4:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f8dc:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f8e0:	88da      	ldrh	r2, [r3, #6]
 800f8e2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f8e6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f8ee:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f8f2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800f8fc:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 800f900:	7812      	ldrb	r2, [r2, #0]
 800f902:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f904:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f908:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	2200      	movs	r2, #0
 800f910:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f912:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f916:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	2200      	movs	r2, #0
 800f91e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f920:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f924:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	2200      	movs	r2, #0
 800f92c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f92e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f932:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	3330      	adds	r3, #48	@ 0x30
 800f93a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800f93e:	2100      	movs	r1, #0
 800f940:	4618      	mov	r0, r3
 800f942:	f7fd fcca 	bl	800d2da <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f946:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f94a:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f94e:	781b      	ldrb	r3, [r3, #0]
 800f950:	f003 0320 	and.w	r3, r3, #32
 800f954:	2b00      	cmp	r3, #0
 800f956:	f000 80b1 	beq.w	800fabc <f_open+0x564>
 800f95a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f95e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	68db      	ldr	r3, [r3, #12]
 800f966:	2b00      	cmp	r3, #0
 800f968:	f000 80a8 	beq.w	800fabc <f_open+0x564>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f96c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f970:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	68da      	ldr	r2, [r3, #12]
 800f978:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f97c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f984:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f988:	895b      	ldrh	r3, [r3, #10]
 800f98a:	461a      	mov	r2, r3
 800f98c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f990:	899b      	ldrh	r3, [r3, #12]
 800f992:	fb02 f303 	mul.w	r3, r2, r3
 800f996:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f99a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f99e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	689b      	ldr	r3, [r3, #8]
 800f9a6:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f9aa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f9ae:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	68db      	ldr	r3, [r3, #12]
 800f9b6:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 800f9ba:	e021      	b.n	800fa00 <f_open+0x4a8>
					clst = get_fat(&fp->obj, clst);
 800f9bc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f9c0:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	f7fd ff81 	bl	800d8d2 <get_fat>
 800f9d0:	f8c7 0260 	str.w	r0, [r7, #608]	@ 0x260
					if (clst <= 1) res = FR_INT_ERR;
 800f9d4:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 800f9d8:	2b01      	cmp	r3, #1
 800f9da:	d802      	bhi.n	800f9e2 <f_open+0x48a>
 800f9dc:	2302      	movs	r3, #2
 800f9de:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f9e2:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 800f9e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9ea:	d102      	bne.n	800f9f2 <f_open+0x49a>
 800f9ec:	2301      	movs	r3, #1
 800f9ee:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f9f2:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800f9f6:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 800f9fa:	1ad3      	subs	r3, r2, r3
 800f9fc:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 800fa00:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d105      	bne.n	800fa14 <f_open+0x4bc>
 800fa08:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800fa0c:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 800fa10:	429a      	cmp	r2, r3
 800fa12:	d8d3      	bhi.n	800f9bc <f_open+0x464>
				}
				fp->clust = clst;
 800fa14:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800fa18:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 800fa22:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800fa24:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d147      	bne.n	800fabc <f_open+0x564>
 800fa2c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800fa30:	899b      	ldrh	r3, [r3, #12]
 800fa32:	461a      	mov	r2, r3
 800fa34:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800fa38:	fbb3 f1f2 	udiv	r1, r3, r2
 800fa3c:	fb01 f202 	mul.w	r2, r1, r2
 800fa40:	1a9b      	subs	r3, r3, r2
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d03a      	beq.n	800fabc <f_open+0x564>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fa46:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800fa4a:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 800fa4e:	4618      	mov	r0, r3
 800fa50:	f7fd ff20 	bl	800d894 <clust2sect>
 800fa54:	f8c7 024c 	str.w	r0, [r7, #588]	@ 0x24c
 800fa58:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d103      	bne.n	800fa68 <f_open+0x510>
						res = FR_INT_ERR;
 800fa60:	2302      	movs	r3, #2
 800fa62:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 800fa66:	e029      	b.n	800fabc <f_open+0x564>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fa68:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800fa6c:	899b      	ldrh	r3, [r3, #12]
 800fa6e:	461a      	mov	r2, r3
 800fa70:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800fa74:	fbb3 f2f2 	udiv	r2, r3, r2
 800fa78:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800fa7c:	441a      	add	r2, r3
 800fa7e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800fa82:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fa8a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800fa8e:	7858      	ldrb	r0, [r3, #1]
 800fa90:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800fa94:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fa9e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800faa2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	6a1a      	ldr	r2, [r3, #32]
 800faaa:	2301      	movs	r3, #1
 800faac:	f7fd fb14 	bl	800d0d8 <disk_read>
 800fab0:	4603      	mov	r3, r0
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d002      	beq.n	800fabc <f_open+0x564>
 800fab6:	2301      	movs	r3, #1
 800fab8:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800fabc:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d006      	beq.n	800fad2 <f_open+0x57a>
 800fac4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800fac8:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	2200      	movs	r2, #0
 800fad0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fad2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800fad6:	f897 2267 	ldrb.w	r2, [r7, #615]	@ 0x267
 800fada:	4611      	mov	r1, r2
 800fadc:	4618      	mov	r0, r3
 800fade:	f7fd fc6f 	bl	800d3c0 <unlock_fs>
 800fae2:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
}
 800fae6:	4618      	mov	r0, r3
 800fae8:	f507 771a 	add.w	r7, r7, #616	@ 0x268
 800faec:	46bd      	mov	sp, r7
 800faee:	bd80      	pop	{r7, pc}

0800faf0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b08c      	sub	sp, #48	@ 0x30
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	60f8      	str	r0, [r7, #12]
 800faf8:	60b9      	str	r1, [r7, #8]
 800fafa:	607a      	str	r2, [r7, #4]
 800fafc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800fafe:	68bb      	ldr	r3, [r7, #8]
 800fb00:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800fb02:	683b      	ldr	r3, [r7, #0]
 800fb04:	2200      	movs	r2, #0
 800fb06:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	f107 0210 	add.w	r2, r7, #16
 800fb0e:	4611      	mov	r1, r2
 800fb10:	4618      	mov	r0, r3
 800fb12:	f7ff fc75 	bl	800f400 <validate>
 800fb16:	4603      	mov	r3, r0
 800fb18:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fb1c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d107      	bne.n	800fb34 <f_write+0x44>
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	7d5b      	ldrb	r3, [r3, #21]
 800fb28:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800fb2c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d009      	beq.n	800fb48 <f_write+0x58>
 800fb34:	693b      	ldr	r3, [r7, #16]
 800fb36:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800fb3a:	4611      	mov	r1, r2
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f7fd fc3f 	bl	800d3c0 <unlock_fs>
 800fb42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fb46:	e192      	b.n	800fe6e <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	7d1b      	ldrb	r3, [r3, #20]
 800fb4c:	f003 0302 	and.w	r3, r3, #2
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d106      	bne.n	800fb62 <f_write+0x72>
 800fb54:	693b      	ldr	r3, [r7, #16]
 800fb56:	2107      	movs	r1, #7
 800fb58:	4618      	mov	r0, r3
 800fb5a:	f7fd fc31 	bl	800d3c0 <unlock_fs>
 800fb5e:	2307      	movs	r3, #7
 800fb60:	e185      	b.n	800fe6e <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	699a      	ldr	r2, [r3, #24]
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	441a      	add	r2, r3
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	699b      	ldr	r3, [r3, #24]
 800fb6e:	429a      	cmp	r2, r3
 800fb70:	f080 816a 	bcs.w	800fe48 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	699b      	ldr	r3, [r3, #24]
 800fb78:	43db      	mvns	r3, r3
 800fb7a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800fb7c:	e164      	b.n	800fe48 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	699b      	ldr	r3, [r3, #24]
 800fb82:	693a      	ldr	r2, [r7, #16]
 800fb84:	8992      	ldrh	r2, [r2, #12]
 800fb86:	fbb3 f1f2 	udiv	r1, r3, r2
 800fb8a:	fb01 f202 	mul.w	r2, r1, r2
 800fb8e:	1a9b      	subs	r3, r3, r2
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	f040 810f 	bne.w	800fdb4 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	699b      	ldr	r3, [r3, #24]
 800fb9a:	693a      	ldr	r2, [r7, #16]
 800fb9c:	8992      	ldrh	r2, [r2, #12]
 800fb9e:	fbb3 f3f2 	udiv	r3, r3, r2
 800fba2:	693a      	ldr	r2, [r7, #16]
 800fba4:	8952      	ldrh	r2, [r2, #10]
 800fba6:	3a01      	subs	r2, #1
 800fba8:	4013      	ands	r3, r2
 800fbaa:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800fbac:	69bb      	ldr	r3, [r7, #24]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d14d      	bne.n	800fc4e <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	699b      	ldr	r3, [r3, #24]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d10c      	bne.n	800fbd4 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	689b      	ldr	r3, [r3, #8]
 800fbbe:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800fbc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d11a      	bne.n	800fbfc <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	2100      	movs	r1, #0
 800fbca:	4618      	mov	r0, r3
 800fbcc:	f7fe f8d3 	bl	800dd76 <create_chain>
 800fbd0:	62b8      	str	r0, [r7, #40]	@ 0x28
 800fbd2:	e013      	b.n	800fbfc <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d007      	beq.n	800fbec <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	699b      	ldr	r3, [r3, #24]
 800fbe0:	4619      	mov	r1, r3
 800fbe2:	68f8      	ldr	r0, [r7, #12]
 800fbe4:	f7fe f95f 	bl	800dea6 <clmt_clust>
 800fbe8:	62b8      	str	r0, [r7, #40]	@ 0x28
 800fbea:	e007      	b.n	800fbfc <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800fbec:	68fa      	ldr	r2, [r7, #12]
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	69db      	ldr	r3, [r3, #28]
 800fbf2:	4619      	mov	r1, r3
 800fbf4:	4610      	mov	r0, r2
 800fbf6:	f7fe f8be 	bl	800dd76 <create_chain>
 800fbfa:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fbfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	f000 8127 	beq.w	800fe52 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fc04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc06:	2b01      	cmp	r3, #1
 800fc08:	d109      	bne.n	800fc1e <f_write+0x12e>
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	2202      	movs	r2, #2
 800fc0e:	755a      	strb	r2, [r3, #21]
 800fc10:	693b      	ldr	r3, [r7, #16]
 800fc12:	2102      	movs	r1, #2
 800fc14:	4618      	mov	r0, r3
 800fc16:	f7fd fbd3 	bl	800d3c0 <unlock_fs>
 800fc1a:	2302      	movs	r3, #2
 800fc1c:	e127      	b.n	800fe6e <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fc1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc24:	d109      	bne.n	800fc3a <f_write+0x14a>
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	2201      	movs	r2, #1
 800fc2a:	755a      	strb	r2, [r3, #21]
 800fc2c:	693b      	ldr	r3, [r7, #16]
 800fc2e:	2101      	movs	r1, #1
 800fc30:	4618      	mov	r0, r3
 800fc32:	f7fd fbc5 	bl	800d3c0 <unlock_fs>
 800fc36:	2301      	movs	r3, #1
 800fc38:	e119      	b.n	800fe6e <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fc3e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	689b      	ldr	r3, [r3, #8]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d102      	bne.n	800fc4e <f_write+0x15e>
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fc4c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	7d1b      	ldrb	r3, [r3, #20]
 800fc52:	b25b      	sxtb	r3, r3
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	da1d      	bge.n	800fc94 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fc58:	693b      	ldr	r3, [r7, #16]
 800fc5a:	7858      	ldrb	r0, [r3, #1]
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	6a1a      	ldr	r2, [r3, #32]
 800fc66:	2301      	movs	r3, #1
 800fc68:	f7fd fa56 	bl	800d118 <disk_write>
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d009      	beq.n	800fc86 <f_write+0x196>
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	2201      	movs	r2, #1
 800fc76:	755a      	strb	r2, [r3, #21]
 800fc78:	693b      	ldr	r3, [r7, #16]
 800fc7a:	2101      	movs	r1, #1
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	f7fd fb9f 	bl	800d3c0 <unlock_fs>
 800fc82:	2301      	movs	r3, #1
 800fc84:	e0f3      	b.n	800fe6e <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	7d1b      	ldrb	r3, [r3, #20]
 800fc8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fc8e:	b2da      	uxtb	r2, r3
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fc94:	693a      	ldr	r2, [r7, #16]
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	69db      	ldr	r3, [r3, #28]
 800fc9a:	4619      	mov	r1, r3
 800fc9c:	4610      	mov	r0, r2
 800fc9e:	f7fd fdf9 	bl	800d894 <clust2sect>
 800fca2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fca4:	697b      	ldr	r3, [r7, #20]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d109      	bne.n	800fcbe <f_write+0x1ce>
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	2202      	movs	r2, #2
 800fcae:	755a      	strb	r2, [r3, #21]
 800fcb0:	693b      	ldr	r3, [r7, #16]
 800fcb2:	2102      	movs	r1, #2
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	f7fd fb83 	bl	800d3c0 <unlock_fs>
 800fcba:	2302      	movs	r3, #2
 800fcbc:	e0d7      	b.n	800fe6e <f_write+0x37e>
			sect += csect;
 800fcbe:	697a      	ldr	r2, [r7, #20]
 800fcc0:	69bb      	ldr	r3, [r7, #24]
 800fcc2:	4413      	add	r3, r2
 800fcc4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800fcc6:	693b      	ldr	r3, [r7, #16]
 800fcc8:	899b      	ldrh	r3, [r3, #12]
 800fcca:	461a      	mov	r2, r3
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	fbb3 f3f2 	udiv	r3, r3, r2
 800fcd2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800fcd4:	6a3b      	ldr	r3, [r7, #32]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d048      	beq.n	800fd6c <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fcda:	69ba      	ldr	r2, [r7, #24]
 800fcdc:	6a3b      	ldr	r3, [r7, #32]
 800fcde:	4413      	add	r3, r2
 800fce0:	693a      	ldr	r2, [r7, #16]
 800fce2:	8952      	ldrh	r2, [r2, #10]
 800fce4:	4293      	cmp	r3, r2
 800fce6:	d905      	bls.n	800fcf4 <f_write+0x204>
					cc = fs->csize - csect;
 800fce8:	693b      	ldr	r3, [r7, #16]
 800fcea:	895b      	ldrh	r3, [r3, #10]
 800fcec:	461a      	mov	r2, r3
 800fcee:	69bb      	ldr	r3, [r7, #24]
 800fcf0:	1ad3      	subs	r3, r2, r3
 800fcf2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fcf4:	693b      	ldr	r3, [r7, #16]
 800fcf6:	7858      	ldrb	r0, [r3, #1]
 800fcf8:	6a3b      	ldr	r3, [r7, #32]
 800fcfa:	697a      	ldr	r2, [r7, #20]
 800fcfc:	69f9      	ldr	r1, [r7, #28]
 800fcfe:	f7fd fa0b 	bl	800d118 <disk_write>
 800fd02:	4603      	mov	r3, r0
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d009      	beq.n	800fd1c <f_write+0x22c>
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	2201      	movs	r2, #1
 800fd0c:	755a      	strb	r2, [r3, #21]
 800fd0e:	693b      	ldr	r3, [r7, #16]
 800fd10:	2101      	movs	r1, #1
 800fd12:	4618      	mov	r0, r3
 800fd14:	f7fd fb54 	bl	800d3c0 <unlock_fs>
 800fd18:	2301      	movs	r3, #1
 800fd1a:	e0a8      	b.n	800fe6e <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	6a1a      	ldr	r2, [r3, #32]
 800fd20:	697b      	ldr	r3, [r7, #20]
 800fd22:	1ad3      	subs	r3, r2, r3
 800fd24:	6a3a      	ldr	r2, [r7, #32]
 800fd26:	429a      	cmp	r2, r3
 800fd28:	d918      	bls.n	800fd5c <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	6a1a      	ldr	r2, [r3, #32]
 800fd34:	697b      	ldr	r3, [r7, #20]
 800fd36:	1ad3      	subs	r3, r2, r3
 800fd38:	693a      	ldr	r2, [r7, #16]
 800fd3a:	8992      	ldrh	r2, [r2, #12]
 800fd3c:	fb02 f303 	mul.w	r3, r2, r3
 800fd40:	69fa      	ldr	r2, [r7, #28]
 800fd42:	18d1      	adds	r1, r2, r3
 800fd44:	693b      	ldr	r3, [r7, #16]
 800fd46:	899b      	ldrh	r3, [r3, #12]
 800fd48:	461a      	mov	r2, r3
 800fd4a:	f7fd faa5 	bl	800d298 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	7d1b      	ldrb	r3, [r3, #20]
 800fd52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fd56:	b2da      	uxtb	r2, r3
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800fd5c:	693b      	ldr	r3, [r7, #16]
 800fd5e:	899b      	ldrh	r3, [r3, #12]
 800fd60:	461a      	mov	r2, r3
 800fd62:	6a3b      	ldr	r3, [r7, #32]
 800fd64:	fb02 f303 	mul.w	r3, r2, r3
 800fd68:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800fd6a:	e050      	b.n	800fe0e <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	6a1b      	ldr	r3, [r3, #32]
 800fd70:	697a      	ldr	r2, [r7, #20]
 800fd72:	429a      	cmp	r2, r3
 800fd74:	d01b      	beq.n	800fdae <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	699a      	ldr	r2, [r3, #24]
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fd7e:	429a      	cmp	r2, r3
 800fd80:	d215      	bcs.n	800fdae <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800fd82:	693b      	ldr	r3, [r7, #16]
 800fd84:	7858      	ldrb	r0, [r3, #1]
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fd8c:	2301      	movs	r3, #1
 800fd8e:	697a      	ldr	r2, [r7, #20]
 800fd90:	f7fd f9a2 	bl	800d0d8 <disk_read>
 800fd94:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d009      	beq.n	800fdae <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	2201      	movs	r2, #1
 800fd9e:	755a      	strb	r2, [r3, #21]
 800fda0:	693b      	ldr	r3, [r7, #16]
 800fda2:	2101      	movs	r1, #1
 800fda4:	4618      	mov	r0, r3
 800fda6:	f7fd fb0b 	bl	800d3c0 <unlock_fs>
 800fdaa:	2301      	movs	r3, #1
 800fdac:	e05f      	b.n	800fe6e <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	697a      	ldr	r2, [r7, #20]
 800fdb2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800fdb4:	693b      	ldr	r3, [r7, #16]
 800fdb6:	899b      	ldrh	r3, [r3, #12]
 800fdb8:	4618      	mov	r0, r3
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	699b      	ldr	r3, [r3, #24]
 800fdbe:	693a      	ldr	r2, [r7, #16]
 800fdc0:	8992      	ldrh	r2, [r2, #12]
 800fdc2:	fbb3 f1f2 	udiv	r1, r3, r2
 800fdc6:	fb01 f202 	mul.w	r2, r1, r2
 800fdca:	1a9b      	subs	r3, r3, r2
 800fdcc:	1ac3      	subs	r3, r0, r3
 800fdce:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800fdd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	429a      	cmp	r2, r3
 800fdd6:	d901      	bls.n	800fddc <f_write+0x2ec>
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	699b      	ldr	r3, [r3, #24]
 800fde6:	693a      	ldr	r2, [r7, #16]
 800fde8:	8992      	ldrh	r2, [r2, #12]
 800fdea:	fbb3 f0f2 	udiv	r0, r3, r2
 800fdee:	fb00 f202 	mul.w	r2, r0, r2
 800fdf2:	1a9b      	subs	r3, r3, r2
 800fdf4:	440b      	add	r3, r1
 800fdf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fdf8:	69f9      	ldr	r1, [r7, #28]
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	f7fd fa4c 	bl	800d298 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	7d1b      	ldrb	r3, [r3, #20]
 800fe04:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800fe08:	b2da      	uxtb	r2, r3
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800fe0e:	69fa      	ldr	r2, [r7, #28]
 800fe10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe12:	4413      	add	r3, r2
 800fe14:	61fb      	str	r3, [r7, #28]
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	699a      	ldr	r2, [r3, #24]
 800fe1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe1c:	441a      	add	r2, r3
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	619a      	str	r2, [r3, #24]
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	68da      	ldr	r2, [r3, #12]
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	699b      	ldr	r3, [r3, #24]
 800fe2a:	429a      	cmp	r2, r3
 800fe2c:	bf38      	it	cc
 800fe2e:	461a      	movcc	r2, r3
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	60da      	str	r2, [r3, #12]
 800fe34:	683b      	ldr	r3, [r7, #0]
 800fe36:	681a      	ldr	r2, [r3, #0]
 800fe38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe3a:	441a      	add	r2, r3
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	601a      	str	r2, [r3, #0]
 800fe40:	687a      	ldr	r2, [r7, #4]
 800fe42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe44:	1ad3      	subs	r3, r2, r3
 800fe46:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	f47f ae97 	bne.w	800fb7e <f_write+0x8e>
 800fe50:	e000      	b.n	800fe54 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fe52:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	7d1b      	ldrb	r3, [r3, #20]
 800fe58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe5c:	b2da      	uxtb	r2, r3
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800fe62:	693b      	ldr	r3, [r7, #16]
 800fe64:	2100      	movs	r1, #0
 800fe66:	4618      	mov	r0, r3
 800fe68:	f7fd faaa 	bl	800d3c0 <unlock_fs>
 800fe6c:	2300      	movs	r3, #0
}
 800fe6e:	4618      	mov	r0, r3
 800fe70:	3730      	adds	r7, #48	@ 0x30
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd80      	pop	{r7, pc}

0800fe76 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800fe76:	b580      	push	{r7, lr}
 800fe78:	b086      	sub	sp, #24
 800fe7a:	af00      	add	r7, sp, #0
 800fe7c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	f107 0208 	add.w	r2, r7, #8
 800fe84:	4611      	mov	r1, r2
 800fe86:	4618      	mov	r0, r3
 800fe88:	f7ff faba 	bl	800f400 <validate>
 800fe8c:	4603      	mov	r3, r0
 800fe8e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fe90:	7dfb      	ldrb	r3, [r7, #23]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d16d      	bne.n	800ff72 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	7d1b      	ldrb	r3, [r3, #20]
 800fe9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d067      	beq.n	800ff72 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	7d1b      	ldrb	r3, [r3, #20]
 800fea6:	b25b      	sxtb	r3, r3
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	da1a      	bge.n	800fee2 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800feac:	68bb      	ldr	r3, [r7, #8]
 800feae:	7858      	ldrb	r0, [r3, #1]
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	6a1a      	ldr	r2, [r3, #32]
 800feba:	2301      	movs	r3, #1
 800febc:	f7fd f92c 	bl	800d118 <disk_write>
 800fec0:	4603      	mov	r3, r0
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d006      	beq.n	800fed4 <f_sync+0x5e>
 800fec6:	68bb      	ldr	r3, [r7, #8]
 800fec8:	2101      	movs	r1, #1
 800feca:	4618      	mov	r0, r3
 800fecc:	f7fd fa78 	bl	800d3c0 <unlock_fs>
 800fed0:	2301      	movs	r3, #1
 800fed2:	e055      	b.n	800ff80 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	7d1b      	ldrb	r3, [r3, #20]
 800fed8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fedc:	b2da      	uxtb	r2, r3
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800fee2:	f7fd f85b 	bl	800cf9c <get_fattime>
 800fee6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800fee8:	68ba      	ldr	r2, [r7, #8]
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800feee:	4619      	mov	r1, r3
 800fef0:	4610      	mov	r0, r2
 800fef2:	f7fd fc31 	bl	800d758 <move_window>
 800fef6:	4603      	mov	r3, r0
 800fef8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800fefa:	7dfb      	ldrb	r3, [r7, #23]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d138      	bne.n	800ff72 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff04:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	330b      	adds	r3, #11
 800ff0a:	781a      	ldrb	r2, [r3, #0]
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	330b      	adds	r3, #11
 800ff10:	f042 0220 	orr.w	r2, r2, #32
 800ff14:	b2d2      	uxtb	r2, r2
 800ff16:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	6818      	ldr	r0, [r3, #0]
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	689b      	ldr	r3, [r3, #8]
 800ff20:	461a      	mov	r2, r3
 800ff22:	68f9      	ldr	r1, [r7, #12]
 800ff24:	f7fe f9bc 	bl	800e2a0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	f103 021c 	add.w	r2, r3, #28
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	68db      	ldr	r3, [r3, #12]
 800ff32:	4619      	mov	r1, r3
 800ff34:	4610      	mov	r0, r2
 800ff36:	f7fd f983 	bl	800d240 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	3316      	adds	r3, #22
 800ff3e:	6939      	ldr	r1, [r7, #16]
 800ff40:	4618      	mov	r0, r3
 800ff42:	f7fd f97d 	bl	800d240 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	3312      	adds	r3, #18
 800ff4a:	2100      	movs	r1, #0
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	f7fd f95c 	bl	800d20a <st_word>
					fs->wflag = 1;
 800ff52:	68bb      	ldr	r3, [r7, #8]
 800ff54:	2201      	movs	r2, #1
 800ff56:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ff58:	68bb      	ldr	r3, [r7, #8]
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f7fd fc2a 	bl	800d7b4 <sync_fs>
 800ff60:	4603      	mov	r3, r0
 800ff62:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	7d1b      	ldrb	r3, [r3, #20]
 800ff68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ff6c:	b2da      	uxtb	r2, r3
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ff72:	68bb      	ldr	r3, [r7, #8]
 800ff74:	7dfa      	ldrb	r2, [r7, #23]
 800ff76:	4611      	mov	r1, r2
 800ff78:	4618      	mov	r0, r3
 800ff7a:	f7fd fa21 	bl	800d3c0 <unlock_fs>
 800ff7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff80:	4618      	mov	r0, r3
 800ff82:	3718      	adds	r7, #24
 800ff84:	46bd      	mov	sp, r7
 800ff86:	bd80      	pop	{r7, pc}

0800ff88 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b084      	sub	sp, #16
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ff90:	6878      	ldr	r0, [r7, #4]
 800ff92:	f7ff ff70 	bl	800fe76 <f_sync>
 800ff96:	4603      	mov	r3, r0
 800ff98:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ff9a:	7bfb      	ldrb	r3, [r7, #15]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d11d      	bne.n	800ffdc <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	f107 0208 	add.w	r2, r7, #8
 800ffa6:	4611      	mov	r1, r2
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	f7ff fa29 	bl	800f400 <validate>
 800ffae:	4603      	mov	r3, r0
 800ffb0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ffb2:	7bfb      	ldrb	r3, [r7, #15]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d111      	bne.n	800ffdc <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	691b      	ldr	r3, [r3, #16]
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	f7fd fb27 	bl	800d610 <dec_lock>
 800ffc2:	4603      	mov	r3, r0
 800ffc4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ffc6:	7bfb      	ldrb	r3, [r7, #15]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d102      	bne.n	800ffd2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2200      	movs	r2, #0
 800ffd0:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800ffd2:	68bb      	ldr	r3, [r7, #8]
 800ffd4:	2100      	movs	r1, #0
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	f7fd f9f2 	bl	800d3c0 <unlock_fs>
#endif
		}
	}
	return res;
 800ffdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffde:	4618      	mov	r0, r3
 800ffe0:	3710      	adds	r7, #16
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	bd80      	pop	{r7, pc}

0800ffe6 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800ffe6:	b580      	push	{r7, lr}
 800ffe8:	b092      	sub	sp, #72	@ 0x48
 800ffea:	af00      	add	r7, sp, #0
 800ffec:	60f8      	str	r0, [r7, #12]
 800ffee:	60b9      	str	r1, [r7, #8]
 800fff0:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800fff2:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800fff6:	f107 030c 	add.w	r3, r7, #12
 800fffa:	2200      	movs	r2, #0
 800fffc:	4618      	mov	r0, r3
 800fffe:	f7fe ff77 	bl	800eef0 <find_volume>
 8010002:	4603      	mov	r3, r0
 8010004:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8010008:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801000c:	2b00      	cmp	r3, #0
 801000e:	f040 8099 	bne.w	8010144 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8010012:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8010018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801001a:	69da      	ldr	r2, [r3, #28]
 801001c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801001e:	6a1b      	ldr	r3, [r3, #32]
 8010020:	3b02      	subs	r3, #2
 8010022:	429a      	cmp	r2, r3
 8010024:	d804      	bhi.n	8010030 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8010026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010028:	69da      	ldr	r2, [r3, #28]
 801002a:	68bb      	ldr	r3, [r7, #8]
 801002c:	601a      	str	r2, [r3, #0]
 801002e:	e089      	b.n	8010144 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8010030:	2300      	movs	r3, #0
 8010032:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8010034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010036:	781b      	ldrb	r3, [r3, #0]
 8010038:	2b01      	cmp	r3, #1
 801003a:	d128      	bne.n	801008e <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 801003c:	2302      	movs	r3, #2
 801003e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010042:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8010044:	f107 0314 	add.w	r3, r7, #20
 8010048:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801004a:	4618      	mov	r0, r3
 801004c:	f7fd fc41 	bl	800d8d2 <get_fat>
 8010050:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8010052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010058:	d103      	bne.n	8010062 <f_getfree+0x7c>
 801005a:	2301      	movs	r3, #1
 801005c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8010060:	e063      	b.n	801012a <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8010062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010064:	2b01      	cmp	r3, #1
 8010066:	d103      	bne.n	8010070 <f_getfree+0x8a>
 8010068:	2302      	movs	r3, #2
 801006a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801006e:	e05c      	b.n	801012a <f_getfree+0x144>
					if (stat == 0) nfree++;
 8010070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010072:	2b00      	cmp	r3, #0
 8010074:	d102      	bne.n	801007c <f_getfree+0x96>
 8010076:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010078:	3301      	adds	r3, #1
 801007a:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 801007c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801007e:	3301      	adds	r3, #1
 8010080:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010084:	6a1b      	ldr	r3, [r3, #32]
 8010086:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010088:	429a      	cmp	r2, r3
 801008a:	d3db      	bcc.n	8010044 <f_getfree+0x5e>
 801008c:	e04d      	b.n	801012a <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 801008e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010090:	6a1b      	ldr	r3, [r3, #32]
 8010092:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010098:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 801009a:	2300      	movs	r3, #0
 801009c:	637b      	str	r3, [r7, #52]	@ 0x34
 801009e:	2300      	movs	r3, #0
 80100a0:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 80100a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d113      	bne.n	80100d0 <f_getfree+0xea>
							res = move_window(fs, sect++);
 80100a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80100aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100ac:	1c5a      	adds	r2, r3, #1
 80100ae:	63ba      	str	r2, [r7, #56]	@ 0x38
 80100b0:	4619      	mov	r1, r3
 80100b2:	f7fd fb51 	bl	800d758 <move_window>
 80100b6:	4603      	mov	r3, r0
 80100b8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 80100bc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d131      	bne.n	8010128 <f_getfree+0x142>
							p = fs->win;
 80100c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100c6:	333c      	adds	r3, #60	@ 0x3c
 80100c8:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 80100ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100cc:	899b      	ldrh	r3, [r3, #12]
 80100ce:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80100d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100d2:	781b      	ldrb	r3, [r3, #0]
 80100d4:	2b02      	cmp	r3, #2
 80100d6:	d10f      	bne.n	80100f8 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80100d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80100da:	f7fd f85b 	bl	800d194 <ld_word>
 80100de:	4603      	mov	r3, r0
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d102      	bne.n	80100ea <f_getfree+0x104>
 80100e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80100e6:	3301      	adds	r3, #1
 80100e8:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 80100ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100ec:	3302      	adds	r3, #2
 80100ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80100f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100f2:	3b02      	subs	r3, #2
 80100f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80100f6:	e010      	b.n	801011a <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80100f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80100fa:	f7fd f863 	bl	800d1c4 <ld_dword>
 80100fe:	4603      	mov	r3, r0
 8010100:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8010104:	2b00      	cmp	r3, #0
 8010106:	d102      	bne.n	801010e <f_getfree+0x128>
 8010108:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801010a:	3301      	adds	r3, #1
 801010c:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 801010e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010110:	3304      	adds	r3, #4
 8010112:	633b      	str	r3, [r7, #48]	@ 0x30
 8010114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010116:	3b04      	subs	r3, #4
 8010118:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 801011a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801011c:	3b01      	subs	r3, #1
 801011e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010120:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010122:	2b00      	cmp	r3, #0
 8010124:	d1bd      	bne.n	80100a2 <f_getfree+0xbc>
 8010126:	e000      	b.n	801012a <f_getfree+0x144>
							if (res != FR_OK) break;
 8010128:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 801012a:	68bb      	ldr	r3, [r7, #8]
 801012c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801012e:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8010130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010132:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010134:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8010136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010138:	791a      	ldrb	r2, [r3, #4]
 801013a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801013c:	f042 0201 	orr.w	r2, r2, #1
 8010140:	b2d2      	uxtb	r2, r2
 8010142:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8010144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010146:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 801014a:	4611      	mov	r1, r2
 801014c:	4618      	mov	r0, r3
 801014e:	f7fd f937 	bl	800d3c0 <unlock_fs>
 8010152:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8010156:	4618      	mov	r0, r3
 8010158:	3748      	adds	r7, #72	@ 0x48
 801015a:	46bd      	mov	sp, r7
 801015c:	bd80      	pop	{r7, pc}

0801015e <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 801015e:	b580      	push	{r7, lr}
 8010160:	b084      	sub	sp, #16
 8010162:	af00      	add	r7, sp, #0
 8010164:	6078      	str	r0, [r7, #4]
 8010166:	460b      	mov	r3, r1
 8010168:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 801016a:	78fb      	ldrb	r3, [r7, #3]
 801016c:	2b0a      	cmp	r3, #10
 801016e:	d103      	bne.n	8010178 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8010170:	210d      	movs	r1, #13
 8010172:	6878      	ldr	r0, [r7, #4]
 8010174:	f7ff fff3 	bl	801015e <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	685b      	ldr	r3, [r3, #4]
 801017c:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	2b00      	cmp	r3, #0
 8010182:	db25      	blt.n	80101d0 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	1c5a      	adds	r2, r3, #1
 8010188:	60fa      	str	r2, [r7, #12]
 801018a:	687a      	ldr	r2, [r7, #4]
 801018c:	4413      	add	r3, r2
 801018e:	78fa      	ldrb	r2, [r7, #3]
 8010190:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	2b3c      	cmp	r3, #60	@ 0x3c
 8010196:	dd12      	ble.n	80101be <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	6818      	ldr	r0, [r3, #0]
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	f103 010c 	add.w	r1, r3, #12
 80101a2:	68fa      	ldr	r2, [r7, #12]
 80101a4:	f107 0308 	add.w	r3, r7, #8
 80101a8:	f7ff fca2 	bl	800faf0 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80101ac:	68ba      	ldr	r2, [r7, #8]
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	429a      	cmp	r2, r3
 80101b2:	d101      	bne.n	80101b8 <putc_bfd+0x5a>
 80101b4:	2300      	movs	r3, #0
 80101b6:	e001      	b.n	80101bc <putc_bfd+0x5e>
 80101b8:	f04f 33ff 	mov.w	r3, #4294967295
 80101bc:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	68fa      	ldr	r2, [r7, #12]
 80101c2:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	689b      	ldr	r3, [r3, #8]
 80101c8:	1c5a      	adds	r2, r3, #1
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	609a      	str	r2, [r3, #8]
 80101ce:	e000      	b.n	80101d2 <putc_bfd+0x74>
	if (i < 0) return;
 80101d0:	bf00      	nop
}
 80101d2:	3710      	adds	r7, #16
 80101d4:	46bd      	mov	sp, r7
 80101d6:	bd80      	pop	{r7, pc}

080101d8 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b084      	sub	sp, #16
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	685b      	ldr	r3, [r3, #4]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	db16      	blt.n	8010216 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	6818      	ldr	r0, [r3, #0]
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	f103 010c 	add.w	r1, r3, #12
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	685b      	ldr	r3, [r3, #4]
 80101f6:	461a      	mov	r2, r3
 80101f8:	f107 030c 	add.w	r3, r7, #12
 80101fc:	f7ff fc78 	bl	800faf0 <f_write>
 8010200:	4603      	mov	r3, r0
 8010202:	2b00      	cmp	r3, #0
 8010204:	d107      	bne.n	8010216 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	685b      	ldr	r3, [r3, #4]
 801020a:	68fa      	ldr	r2, [r7, #12]
 801020c:	4293      	cmp	r3, r2
 801020e:	d102      	bne.n	8010216 <putc_flush+0x3e>
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	689b      	ldr	r3, [r3, #8]
 8010214:	e001      	b.n	801021a <putc_flush+0x42>
	return EOF;
 8010216:	f04f 33ff 	mov.w	r3, #4294967295
}
 801021a:	4618      	mov	r0, r3
 801021c:	3710      	adds	r7, #16
 801021e:	46bd      	mov	sp, r7
 8010220:	bd80      	pop	{r7, pc}

08010222 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8010222:	b480      	push	{r7}
 8010224:	b083      	sub	sp, #12
 8010226:	af00      	add	r7, sp, #0
 8010228:	6078      	str	r0, [r7, #4]
 801022a:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	683a      	ldr	r2, [r7, #0]
 8010230:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	2200      	movs	r2, #0
 8010236:	605a      	str	r2, [r3, #4]
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	685a      	ldr	r2, [r3, #4]
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	609a      	str	r2, [r3, #8]
}
 8010240:	bf00      	nop
 8010242:	370c      	adds	r7, #12
 8010244:	46bd      	mov	sp, r7
 8010246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024a:	4770      	bx	lr

0801024c <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 801024c:	b580      	push	{r7, lr}
 801024e:	b096      	sub	sp, #88	@ 0x58
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
 8010254:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8010256:	f107 030c 	add.w	r3, r7, #12
 801025a:	6839      	ldr	r1, [r7, #0]
 801025c:	4618      	mov	r0, r3
 801025e:	f7ff ffe0 	bl	8010222 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8010262:	e009      	b.n	8010278 <f_puts+0x2c>
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	1c5a      	adds	r2, r3, #1
 8010268:	607a      	str	r2, [r7, #4]
 801026a:	781a      	ldrb	r2, [r3, #0]
 801026c:	f107 030c 	add.w	r3, r7, #12
 8010270:	4611      	mov	r1, r2
 8010272:	4618      	mov	r0, r3
 8010274:	f7ff ff73 	bl	801015e <putc_bfd>
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	781b      	ldrb	r3, [r3, #0]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d1f1      	bne.n	8010264 <f_puts+0x18>
	return putc_flush(&pb);
 8010280:	f107 030c 	add.w	r3, r7, #12
 8010284:	4618      	mov	r0, r3
 8010286:	f7ff ffa7 	bl	80101d8 <putc_flush>
 801028a:	4603      	mov	r3, r0
}
 801028c:	4618      	mov	r0, r3
 801028e:	3758      	adds	r7, #88	@ 0x58
 8010290:	46bd      	mov	sp, r7
 8010292:	bd80      	pop	{r7, pc}

08010294 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010294:	b480      	push	{r7}
 8010296:	b087      	sub	sp, #28
 8010298:	af00      	add	r7, sp, #0
 801029a:	60f8      	str	r0, [r7, #12]
 801029c:	60b9      	str	r1, [r7, #8]
 801029e:	4613      	mov	r3, r2
 80102a0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80102a2:	2301      	movs	r3, #1
 80102a4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80102a6:	2300      	movs	r3, #0
 80102a8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80102aa:	4b1f      	ldr	r3, [pc, #124]	@ (8010328 <FATFS_LinkDriverEx+0x94>)
 80102ac:	7a5b      	ldrb	r3, [r3, #9]
 80102ae:	b2db      	uxtb	r3, r3
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d131      	bne.n	8010318 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80102b4:	4b1c      	ldr	r3, [pc, #112]	@ (8010328 <FATFS_LinkDriverEx+0x94>)
 80102b6:	7a5b      	ldrb	r3, [r3, #9]
 80102b8:	b2db      	uxtb	r3, r3
 80102ba:	461a      	mov	r2, r3
 80102bc:	4b1a      	ldr	r3, [pc, #104]	@ (8010328 <FATFS_LinkDriverEx+0x94>)
 80102be:	2100      	movs	r1, #0
 80102c0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80102c2:	4b19      	ldr	r3, [pc, #100]	@ (8010328 <FATFS_LinkDriverEx+0x94>)
 80102c4:	7a5b      	ldrb	r3, [r3, #9]
 80102c6:	b2db      	uxtb	r3, r3
 80102c8:	4a17      	ldr	r2, [pc, #92]	@ (8010328 <FATFS_LinkDriverEx+0x94>)
 80102ca:	009b      	lsls	r3, r3, #2
 80102cc:	4413      	add	r3, r2
 80102ce:	68fa      	ldr	r2, [r7, #12]
 80102d0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80102d2:	4b15      	ldr	r3, [pc, #84]	@ (8010328 <FATFS_LinkDriverEx+0x94>)
 80102d4:	7a5b      	ldrb	r3, [r3, #9]
 80102d6:	b2db      	uxtb	r3, r3
 80102d8:	461a      	mov	r2, r3
 80102da:	4b13      	ldr	r3, [pc, #76]	@ (8010328 <FATFS_LinkDriverEx+0x94>)
 80102dc:	4413      	add	r3, r2
 80102de:	79fa      	ldrb	r2, [r7, #7]
 80102e0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80102e2:	4b11      	ldr	r3, [pc, #68]	@ (8010328 <FATFS_LinkDriverEx+0x94>)
 80102e4:	7a5b      	ldrb	r3, [r3, #9]
 80102e6:	b2db      	uxtb	r3, r3
 80102e8:	1c5a      	adds	r2, r3, #1
 80102ea:	b2d1      	uxtb	r1, r2
 80102ec:	4a0e      	ldr	r2, [pc, #56]	@ (8010328 <FATFS_LinkDriverEx+0x94>)
 80102ee:	7251      	strb	r1, [r2, #9]
 80102f0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80102f2:	7dbb      	ldrb	r3, [r7, #22]
 80102f4:	3330      	adds	r3, #48	@ 0x30
 80102f6:	b2da      	uxtb	r2, r3
 80102f8:	68bb      	ldr	r3, [r7, #8]
 80102fa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80102fc:	68bb      	ldr	r3, [r7, #8]
 80102fe:	3301      	adds	r3, #1
 8010300:	223a      	movs	r2, #58	@ 0x3a
 8010302:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010304:	68bb      	ldr	r3, [r7, #8]
 8010306:	3302      	adds	r3, #2
 8010308:	222f      	movs	r2, #47	@ 0x2f
 801030a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801030c:	68bb      	ldr	r3, [r7, #8]
 801030e:	3303      	adds	r3, #3
 8010310:	2200      	movs	r2, #0
 8010312:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010314:	2300      	movs	r3, #0
 8010316:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010318:	7dfb      	ldrb	r3, [r7, #23]
}
 801031a:	4618      	mov	r0, r3
 801031c:	371c      	adds	r7, #28
 801031e:	46bd      	mov	sp, r7
 8010320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010324:	4770      	bx	lr
 8010326:	bf00      	nop
 8010328:	20002c1c 	.word	0x20002c1c

0801032c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b082      	sub	sp, #8
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
 8010334:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010336:	2200      	movs	r2, #0
 8010338:	6839      	ldr	r1, [r7, #0]
 801033a:	6878      	ldr	r0, [r7, #4]
 801033c:	f7ff ffaa 	bl	8010294 <FATFS_LinkDriverEx>
 8010340:	4603      	mov	r3, r0
}
 8010342:	4618      	mov	r0, r3
 8010344:	3708      	adds	r7, #8
 8010346:	46bd      	mov	sp, r7
 8010348:	bd80      	pop	{r7, pc}
	...

0801034c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801034c:	b480      	push	{r7}
 801034e:	b085      	sub	sp, #20
 8010350:	af00      	add	r7, sp, #0
 8010352:	4603      	mov	r3, r0
 8010354:	6039      	str	r1, [r7, #0]
 8010356:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8010358:	88fb      	ldrh	r3, [r7, #6]
 801035a:	2b7f      	cmp	r3, #127	@ 0x7f
 801035c:	d802      	bhi.n	8010364 <ff_convert+0x18>
		c = chr;
 801035e:	88fb      	ldrh	r3, [r7, #6]
 8010360:	81fb      	strh	r3, [r7, #14]
 8010362:	e025      	b.n	80103b0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010364:	683b      	ldr	r3, [r7, #0]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d00b      	beq.n	8010382 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801036a:	88fb      	ldrh	r3, [r7, #6]
 801036c:	2bff      	cmp	r3, #255	@ 0xff
 801036e:	d805      	bhi.n	801037c <ff_convert+0x30>
 8010370:	88fb      	ldrh	r3, [r7, #6]
 8010372:	3b80      	subs	r3, #128	@ 0x80
 8010374:	4a12      	ldr	r2, [pc, #72]	@ (80103c0 <ff_convert+0x74>)
 8010376:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801037a:	e000      	b.n	801037e <ff_convert+0x32>
 801037c:	2300      	movs	r3, #0
 801037e:	81fb      	strh	r3, [r7, #14]
 8010380:	e016      	b.n	80103b0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8010382:	2300      	movs	r3, #0
 8010384:	81fb      	strh	r3, [r7, #14]
 8010386:	e009      	b.n	801039c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010388:	89fb      	ldrh	r3, [r7, #14]
 801038a:	4a0d      	ldr	r2, [pc, #52]	@ (80103c0 <ff_convert+0x74>)
 801038c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010390:	88fa      	ldrh	r2, [r7, #6]
 8010392:	429a      	cmp	r2, r3
 8010394:	d006      	beq.n	80103a4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010396:	89fb      	ldrh	r3, [r7, #14]
 8010398:	3301      	adds	r3, #1
 801039a:	81fb      	strh	r3, [r7, #14]
 801039c:	89fb      	ldrh	r3, [r7, #14]
 801039e:	2b7f      	cmp	r3, #127	@ 0x7f
 80103a0:	d9f2      	bls.n	8010388 <ff_convert+0x3c>
 80103a2:	e000      	b.n	80103a6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80103a4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80103a6:	89fb      	ldrh	r3, [r7, #14]
 80103a8:	3380      	adds	r3, #128	@ 0x80
 80103aa:	b29b      	uxth	r3, r3
 80103ac:	b2db      	uxtb	r3, r3
 80103ae:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80103b0:	89fb      	ldrh	r3, [r7, #14]
}
 80103b2:	4618      	mov	r0, r3
 80103b4:	3714      	adds	r7, #20
 80103b6:	46bd      	mov	sp, r7
 80103b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103bc:	4770      	bx	lr
 80103be:	bf00      	nop
 80103c0:	08016ff4 	.word	0x08016ff4

080103c4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80103c4:	b480      	push	{r7}
 80103c6:	b087      	sub	sp, #28
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	4603      	mov	r3, r0
 80103cc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80103ce:	88fb      	ldrh	r3, [r7, #6]
 80103d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80103d4:	d201      	bcs.n	80103da <ff_wtoupper+0x16>
 80103d6:	4b3e      	ldr	r3, [pc, #248]	@ (80104d0 <ff_wtoupper+0x10c>)
 80103d8:	e000      	b.n	80103dc <ff_wtoupper+0x18>
 80103da:	4b3e      	ldr	r3, [pc, #248]	@ (80104d4 <ff_wtoupper+0x110>)
 80103dc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80103de:	697b      	ldr	r3, [r7, #20]
 80103e0:	1c9a      	adds	r2, r3, #2
 80103e2:	617a      	str	r2, [r7, #20]
 80103e4:	881b      	ldrh	r3, [r3, #0]
 80103e6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80103e8:	8a7b      	ldrh	r3, [r7, #18]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d068      	beq.n	80104c0 <ff_wtoupper+0xfc>
 80103ee:	88fa      	ldrh	r2, [r7, #6]
 80103f0:	8a7b      	ldrh	r3, [r7, #18]
 80103f2:	429a      	cmp	r2, r3
 80103f4:	d364      	bcc.n	80104c0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80103f6:	697b      	ldr	r3, [r7, #20]
 80103f8:	1c9a      	adds	r2, r3, #2
 80103fa:	617a      	str	r2, [r7, #20]
 80103fc:	881b      	ldrh	r3, [r3, #0]
 80103fe:	823b      	strh	r3, [r7, #16]
 8010400:	8a3b      	ldrh	r3, [r7, #16]
 8010402:	0a1b      	lsrs	r3, r3, #8
 8010404:	81fb      	strh	r3, [r7, #14]
 8010406:	8a3b      	ldrh	r3, [r7, #16]
 8010408:	b2db      	uxtb	r3, r3
 801040a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801040c:	88fa      	ldrh	r2, [r7, #6]
 801040e:	8a79      	ldrh	r1, [r7, #18]
 8010410:	8a3b      	ldrh	r3, [r7, #16]
 8010412:	440b      	add	r3, r1
 8010414:	429a      	cmp	r2, r3
 8010416:	da49      	bge.n	80104ac <ff_wtoupper+0xe8>
			switch (cmd) {
 8010418:	89fb      	ldrh	r3, [r7, #14]
 801041a:	2b08      	cmp	r3, #8
 801041c:	d84f      	bhi.n	80104be <ff_wtoupper+0xfa>
 801041e:	a201      	add	r2, pc, #4	@ (adr r2, 8010424 <ff_wtoupper+0x60>)
 8010420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010424:	08010449 	.word	0x08010449
 8010428:	0801045b 	.word	0x0801045b
 801042c:	08010471 	.word	0x08010471
 8010430:	08010479 	.word	0x08010479
 8010434:	08010481 	.word	0x08010481
 8010438:	08010489 	.word	0x08010489
 801043c:	08010491 	.word	0x08010491
 8010440:	08010499 	.word	0x08010499
 8010444:	080104a1 	.word	0x080104a1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010448:	88fa      	ldrh	r2, [r7, #6]
 801044a:	8a7b      	ldrh	r3, [r7, #18]
 801044c:	1ad3      	subs	r3, r2, r3
 801044e:	005b      	lsls	r3, r3, #1
 8010450:	697a      	ldr	r2, [r7, #20]
 8010452:	4413      	add	r3, r2
 8010454:	881b      	ldrh	r3, [r3, #0]
 8010456:	80fb      	strh	r3, [r7, #6]
 8010458:	e027      	b.n	80104aa <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801045a:	88fa      	ldrh	r2, [r7, #6]
 801045c:	8a7b      	ldrh	r3, [r7, #18]
 801045e:	1ad3      	subs	r3, r2, r3
 8010460:	b29b      	uxth	r3, r3
 8010462:	f003 0301 	and.w	r3, r3, #1
 8010466:	b29b      	uxth	r3, r3
 8010468:	88fa      	ldrh	r2, [r7, #6]
 801046a:	1ad3      	subs	r3, r2, r3
 801046c:	80fb      	strh	r3, [r7, #6]
 801046e:	e01c      	b.n	80104aa <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010470:	88fb      	ldrh	r3, [r7, #6]
 8010472:	3b10      	subs	r3, #16
 8010474:	80fb      	strh	r3, [r7, #6]
 8010476:	e018      	b.n	80104aa <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010478:	88fb      	ldrh	r3, [r7, #6]
 801047a:	3b20      	subs	r3, #32
 801047c:	80fb      	strh	r3, [r7, #6]
 801047e:	e014      	b.n	80104aa <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8010480:	88fb      	ldrh	r3, [r7, #6]
 8010482:	3b30      	subs	r3, #48	@ 0x30
 8010484:	80fb      	strh	r3, [r7, #6]
 8010486:	e010      	b.n	80104aa <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010488:	88fb      	ldrh	r3, [r7, #6]
 801048a:	3b1a      	subs	r3, #26
 801048c:	80fb      	strh	r3, [r7, #6]
 801048e:	e00c      	b.n	80104aa <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010490:	88fb      	ldrh	r3, [r7, #6]
 8010492:	3308      	adds	r3, #8
 8010494:	80fb      	strh	r3, [r7, #6]
 8010496:	e008      	b.n	80104aa <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010498:	88fb      	ldrh	r3, [r7, #6]
 801049a:	3b50      	subs	r3, #80	@ 0x50
 801049c:	80fb      	strh	r3, [r7, #6]
 801049e:	e004      	b.n	80104aa <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80104a0:	88fb      	ldrh	r3, [r7, #6]
 80104a2:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 80104a6:	80fb      	strh	r3, [r7, #6]
 80104a8:	bf00      	nop
			}
			break;
 80104aa:	e008      	b.n	80104be <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80104ac:	89fb      	ldrh	r3, [r7, #14]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d195      	bne.n	80103de <ff_wtoupper+0x1a>
 80104b2:	8a3b      	ldrh	r3, [r7, #16]
 80104b4:	005b      	lsls	r3, r3, #1
 80104b6:	697a      	ldr	r2, [r7, #20]
 80104b8:	4413      	add	r3, r2
 80104ba:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80104bc:	e78f      	b.n	80103de <ff_wtoupper+0x1a>
			break;
 80104be:	bf00      	nop
	}

	return chr;
 80104c0:	88fb      	ldrh	r3, [r7, #6]
}
 80104c2:	4618      	mov	r0, r3
 80104c4:	371c      	adds	r7, #28
 80104c6:	46bd      	mov	sp, r7
 80104c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104cc:	4770      	bx	lr
 80104ce:	bf00      	nop
 80104d0:	080170f4 	.word	0x080170f4
 80104d4:	080172e8 	.word	0x080172e8

080104d8 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b086      	sub	sp, #24
 80104dc:	af00      	add	r7, sp, #0
 80104de:	4603      	mov	r3, r0
 80104e0:	6039      	str	r1, [r7, #0]
 80104e2:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 80104e4:	2300      	movs	r3, #0
 80104e6:	60fb      	str	r3, [r7, #12]
 80104e8:	2300      	movs	r3, #0
 80104ea:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 80104ec:	f107 030c 	add.w	r3, r7, #12
 80104f0:	2101      	movs	r1, #1
 80104f2:	4618      	mov	r0, r3
 80104f4:	f000 f8cd 	bl	8010692 <osSemaphoreCreate>
 80104f8:	4602      	mov	r2, r0
 80104fa:	683b      	ldr	r3, [r7, #0]
 80104fc:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 80104fe:	683b      	ldr	r3, [r7, #0]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	2b00      	cmp	r3, #0
 8010504:	bf14      	ite	ne
 8010506:	2301      	movne	r3, #1
 8010508:	2300      	moveq	r3, #0
 801050a:	b2db      	uxtb	r3, r3
 801050c:	617b      	str	r3, [r7, #20]

    return ret;
 801050e:	697b      	ldr	r3, [r7, #20]
}
 8010510:	4618      	mov	r0, r3
 8010512:	3718      	adds	r7, #24
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}

08010518 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b082      	sub	sp, #8
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8010520:	6878      	ldr	r0, [r7, #4]
 8010522:	f000 f96d 	bl	8010800 <osSemaphoreDelete>
#endif
    return 1;
 8010526:	2301      	movs	r3, #1
}
 8010528:	4618      	mov	r0, r3
 801052a:	3708      	adds	r7, #8
 801052c:	46bd      	mov	sp, r7
 801052e:	bd80      	pop	{r7, pc}

08010530 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8010530:	b580      	push	{r7, lr}
 8010532:	b084      	sub	sp, #16
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8010538:	2300      	movs	r3, #0
 801053a:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 801053c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8010540:	6878      	ldr	r0, [r7, #4]
 8010542:	f000 f8d9 	bl	80106f8 <osSemaphoreWait>
 8010546:	4603      	mov	r3, r0
 8010548:	2b00      	cmp	r3, #0
 801054a:	d101      	bne.n	8010550 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 801054c:	2301      	movs	r3, #1
 801054e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8010550:	68fb      	ldr	r3, [r7, #12]
}
 8010552:	4618      	mov	r0, r3
 8010554:	3710      	adds	r7, #16
 8010556:	46bd      	mov	sp, r7
 8010558:	bd80      	pop	{r7, pc}

0801055a <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 801055a:	b580      	push	{r7, lr}
 801055c:	b082      	sub	sp, #8
 801055e:	af00      	add	r7, sp, #0
 8010560:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8010562:	6878      	ldr	r0, [r7, #4]
 8010564:	f000 f916 	bl	8010794 <osSemaphoreRelease>
#endif
}
 8010568:	bf00      	nop
 801056a:	3708      	adds	r7, #8
 801056c:	46bd      	mov	sp, r7
 801056e:	bd80      	pop	{r7, pc}

08010570 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8010570:	b480      	push	{r7}
 8010572:	b085      	sub	sp, #20
 8010574:	af00      	add	r7, sp, #0
 8010576:	4603      	mov	r3, r0
 8010578:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801057a:	2300      	movs	r3, #0
 801057c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801057e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010582:	2b84      	cmp	r3, #132	@ 0x84
 8010584:	d005      	beq.n	8010592 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8010586:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	4413      	add	r3, r2
 801058e:	3303      	adds	r3, #3
 8010590:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8010592:	68fb      	ldr	r3, [r7, #12]
}
 8010594:	4618      	mov	r0, r3
 8010596:	3714      	adds	r7, #20
 8010598:	46bd      	mov	sp, r7
 801059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801059e:	4770      	bx	lr

080105a0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80105a0:	b480      	push	{r7}
 80105a2:	b083      	sub	sp, #12
 80105a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80105a6:	f3ef 8305 	mrs	r3, IPSR
 80105aa:	607b      	str	r3, [r7, #4]
  return(result);
 80105ac:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	bf14      	ite	ne
 80105b2:	2301      	movne	r3, #1
 80105b4:	2300      	moveq	r3, #0
 80105b6:	b2db      	uxtb	r3, r3
}
 80105b8:	4618      	mov	r0, r3
 80105ba:	370c      	adds	r7, #12
 80105bc:	46bd      	mov	sp, r7
 80105be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c2:	4770      	bx	lr

080105c4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80105c8:	f001 f9a4 	bl	8011914 <vTaskStartScheduler>
  
  return osOK;
 80105cc:	2300      	movs	r3, #0
}
 80105ce:	4618      	mov	r0, r3
 80105d0:	bd80      	pop	{r7, pc}

080105d2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80105d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105d4:	b089      	sub	sp, #36	@ 0x24
 80105d6:	af04      	add	r7, sp, #16
 80105d8:	6078      	str	r0, [r7, #4]
 80105da:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	695b      	ldr	r3, [r3, #20]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d020      	beq.n	8010626 <osThreadCreate+0x54>
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	699b      	ldr	r3, [r3, #24]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d01c      	beq.n	8010626 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	685c      	ldr	r4, [r3, #4]
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	691e      	ldr	r6, [r3, #16]
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80105fe:	4618      	mov	r0, r3
 8010600:	f7ff ffb6 	bl	8010570 <makeFreeRtosPriority>
 8010604:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	695b      	ldr	r3, [r3, #20]
 801060a:	687a      	ldr	r2, [r7, #4]
 801060c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801060e:	9202      	str	r2, [sp, #8]
 8010610:	9301      	str	r3, [sp, #4]
 8010612:	9100      	str	r1, [sp, #0]
 8010614:	683b      	ldr	r3, [r7, #0]
 8010616:	4632      	mov	r2, r6
 8010618:	4629      	mov	r1, r5
 801061a:	4620      	mov	r0, r4
 801061c:	f000 ff94 	bl	8011548 <xTaskCreateStatic>
 8010620:	4603      	mov	r3, r0
 8010622:	60fb      	str	r3, [r7, #12]
 8010624:	e01c      	b.n	8010660 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	685c      	ldr	r4, [r3, #4]
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010632:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801063a:	4618      	mov	r0, r3
 801063c:	f7ff ff98 	bl	8010570 <makeFreeRtosPriority>
 8010640:	4602      	mov	r2, r0
 8010642:	f107 030c 	add.w	r3, r7, #12
 8010646:	9301      	str	r3, [sp, #4]
 8010648:	9200      	str	r2, [sp, #0]
 801064a:	683b      	ldr	r3, [r7, #0]
 801064c:	4632      	mov	r2, r6
 801064e:	4629      	mov	r1, r5
 8010650:	4620      	mov	r0, r4
 8010652:	f000 ffd9 	bl	8011608 <xTaskCreate>
 8010656:	4603      	mov	r3, r0
 8010658:	2b01      	cmp	r3, #1
 801065a:	d001      	beq.n	8010660 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801065c:	2300      	movs	r3, #0
 801065e:	e000      	b.n	8010662 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8010660:	68fb      	ldr	r3, [r7, #12]
}
 8010662:	4618      	mov	r0, r3
 8010664:	3714      	adds	r7, #20
 8010666:	46bd      	mov	sp, r7
 8010668:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801066a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801066a:	b580      	push	{r7, lr}
 801066c:	b084      	sub	sp, #16
 801066e:	af00      	add	r7, sp, #0
 8010670:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d001      	beq.n	8010680 <osDelay+0x16>
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	e000      	b.n	8010682 <osDelay+0x18>
 8010680:	2301      	movs	r3, #1
 8010682:	4618      	mov	r0, r3
 8010684:	f001 f910 	bl	80118a8 <vTaskDelay>
  
  return osOK;
 8010688:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801068a:	4618      	mov	r0, r3
 801068c:	3710      	adds	r7, #16
 801068e:	46bd      	mov	sp, r7
 8010690:	bd80      	pop	{r7, pc}

08010692 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8010692:	b580      	push	{r7, lr}
 8010694:	b086      	sub	sp, #24
 8010696:	af02      	add	r7, sp, #8
 8010698:	6078      	str	r0, [r7, #4]
 801069a:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	685b      	ldr	r3, [r3, #4]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d00f      	beq.n	80106c4 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80106a4:	683b      	ldr	r3, [r7, #0]
 80106a6:	2b01      	cmp	r3, #1
 80106a8:	d10a      	bne.n	80106c0 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	685b      	ldr	r3, [r3, #4]
 80106ae:	2203      	movs	r2, #3
 80106b0:	9200      	str	r2, [sp, #0]
 80106b2:	2200      	movs	r2, #0
 80106b4:	2100      	movs	r1, #0
 80106b6:	2001      	movs	r0, #1
 80106b8:	f000 f9d4 	bl	8010a64 <xQueueGenericCreateStatic>
 80106bc:	4603      	mov	r3, r0
 80106be:	e016      	b.n	80106ee <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80106c0:	2300      	movs	r3, #0
 80106c2:	e014      	b.n	80106ee <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80106c4:	683b      	ldr	r3, [r7, #0]
 80106c6:	2b01      	cmp	r3, #1
 80106c8:	d110      	bne.n	80106ec <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80106ca:	2203      	movs	r2, #3
 80106cc:	2100      	movs	r1, #0
 80106ce:	2001      	movs	r0, #1
 80106d0:	f000 fa45 	bl	8010b5e <xQueueGenericCreate>
 80106d4:	60f8      	str	r0, [r7, #12]
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d005      	beq.n	80106e8 <osSemaphoreCreate+0x56>
 80106dc:	2300      	movs	r3, #0
 80106de:	2200      	movs	r2, #0
 80106e0:	2100      	movs	r1, #0
 80106e2:	68f8      	ldr	r0, [r7, #12]
 80106e4:	f000 fa96 	bl	8010c14 <xQueueGenericSend>
      return sema;
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	e000      	b.n	80106ee <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80106ec:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80106ee:	4618      	mov	r0, r3
 80106f0:	3710      	adds	r7, #16
 80106f2:	46bd      	mov	sp, r7
 80106f4:	bd80      	pop	{r7, pc}
	...

080106f8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80106f8:	b580      	push	{r7, lr}
 80106fa:	b084      	sub	sp, #16
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
 8010700:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8010702:	2300      	movs	r3, #0
 8010704:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d101      	bne.n	8010710 <osSemaphoreWait+0x18>
    return osErrorParameter;
 801070c:	2380      	movs	r3, #128	@ 0x80
 801070e:	e03a      	b.n	8010786 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8010710:	2300      	movs	r3, #0
 8010712:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8010714:	683b      	ldr	r3, [r7, #0]
 8010716:	f1b3 3fff 	cmp.w	r3, #4294967295
 801071a:	d103      	bne.n	8010724 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 801071c:	f04f 33ff 	mov.w	r3, #4294967295
 8010720:	60fb      	str	r3, [r7, #12]
 8010722:	e009      	b.n	8010738 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8010724:	683b      	ldr	r3, [r7, #0]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d006      	beq.n	8010738 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 801072a:	683b      	ldr	r3, [r7, #0]
 801072c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d101      	bne.n	8010738 <osSemaphoreWait+0x40>
      ticks = 1;
 8010734:	2301      	movs	r3, #1
 8010736:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8010738:	f7ff ff32 	bl	80105a0 <inHandlerMode>
 801073c:	4603      	mov	r3, r0
 801073e:	2b00      	cmp	r3, #0
 8010740:	d017      	beq.n	8010772 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8010742:	f107 0308 	add.w	r3, r7, #8
 8010746:	461a      	mov	r2, r3
 8010748:	2100      	movs	r1, #0
 801074a:	6878      	ldr	r0, [r7, #4]
 801074c:	f000 fd04 	bl	8011158 <xQueueReceiveFromISR>
 8010750:	4603      	mov	r3, r0
 8010752:	2b01      	cmp	r3, #1
 8010754:	d001      	beq.n	801075a <osSemaphoreWait+0x62>
      return osErrorOS;
 8010756:	23ff      	movs	r3, #255	@ 0xff
 8010758:	e015      	b.n	8010786 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801075a:	68bb      	ldr	r3, [r7, #8]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d011      	beq.n	8010784 <osSemaphoreWait+0x8c>
 8010760:	4b0b      	ldr	r3, [pc, #44]	@ (8010790 <osSemaphoreWait+0x98>)
 8010762:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010766:	601a      	str	r2, [r3, #0]
 8010768:	f3bf 8f4f 	dsb	sy
 801076c:	f3bf 8f6f 	isb	sy
 8010770:	e008      	b.n	8010784 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8010772:	68f9      	ldr	r1, [r7, #12]
 8010774:	6878      	ldr	r0, [r7, #4]
 8010776:	f000 fbdf 	bl	8010f38 <xQueueSemaphoreTake>
 801077a:	4603      	mov	r3, r0
 801077c:	2b01      	cmp	r3, #1
 801077e:	d001      	beq.n	8010784 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8010780:	23ff      	movs	r3, #255	@ 0xff
 8010782:	e000      	b.n	8010786 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8010784:	2300      	movs	r3, #0
}
 8010786:	4618      	mov	r0, r3
 8010788:	3710      	adds	r7, #16
 801078a:	46bd      	mov	sp, r7
 801078c:	bd80      	pop	{r7, pc}
 801078e:	bf00      	nop
 8010790:	e000ed04 	.word	0xe000ed04

08010794 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8010794:	b580      	push	{r7, lr}
 8010796:	b084      	sub	sp, #16
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 801079c:	2300      	movs	r3, #0
 801079e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80107a0:	2300      	movs	r3, #0
 80107a2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80107a4:	f7ff fefc 	bl	80105a0 <inHandlerMode>
 80107a8:	4603      	mov	r3, r0
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d016      	beq.n	80107dc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80107ae:	f107 0308 	add.w	r3, r7, #8
 80107b2:	4619      	mov	r1, r3
 80107b4:	6878      	ldr	r0, [r7, #4]
 80107b6:	f000 fb2f 	bl	8010e18 <xQueueGiveFromISR>
 80107ba:	4603      	mov	r3, r0
 80107bc:	2b01      	cmp	r3, #1
 80107be:	d001      	beq.n	80107c4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80107c0:	23ff      	movs	r3, #255	@ 0xff
 80107c2:	e017      	b.n	80107f4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80107c4:	68bb      	ldr	r3, [r7, #8]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d013      	beq.n	80107f2 <osSemaphoreRelease+0x5e>
 80107ca:	4b0c      	ldr	r3, [pc, #48]	@ (80107fc <osSemaphoreRelease+0x68>)
 80107cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80107d0:	601a      	str	r2, [r3, #0]
 80107d2:	f3bf 8f4f 	dsb	sy
 80107d6:	f3bf 8f6f 	isb	sy
 80107da:	e00a      	b.n	80107f2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80107dc:	2300      	movs	r3, #0
 80107de:	2200      	movs	r2, #0
 80107e0:	2100      	movs	r1, #0
 80107e2:	6878      	ldr	r0, [r7, #4]
 80107e4:	f000 fa16 	bl	8010c14 <xQueueGenericSend>
 80107e8:	4603      	mov	r3, r0
 80107ea:	2b01      	cmp	r3, #1
 80107ec:	d001      	beq.n	80107f2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80107ee:	23ff      	movs	r3, #255	@ 0xff
 80107f0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80107f2:	68fb      	ldr	r3, [r7, #12]
}
 80107f4:	4618      	mov	r0, r3
 80107f6:	3710      	adds	r7, #16
 80107f8:	46bd      	mov	sp, r7
 80107fa:	bd80      	pop	{r7, pc}
 80107fc:	e000ed04 	.word	0xe000ed04

08010800 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b082      	sub	sp, #8
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8010808:	f7ff feca 	bl	80105a0 <inHandlerMode>
 801080c:	4603      	mov	r3, r0
 801080e:	2b00      	cmp	r3, #0
 8010810:	d001      	beq.n	8010816 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8010812:	2382      	movs	r3, #130	@ 0x82
 8010814:	e003      	b.n	801081e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8010816:	6878      	ldr	r0, [r7, #4]
 8010818:	f000 fd20 	bl	801125c <vQueueDelete>

  return osOK; 
 801081c:	2300      	movs	r3, #0
}
 801081e:	4618      	mov	r0, r3
 8010820:	3708      	adds	r7, #8
 8010822:	46bd      	mov	sp, r7
 8010824:	bd80      	pop	{r7, pc}

08010826 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010826:	b480      	push	{r7}
 8010828:	b083      	sub	sp, #12
 801082a:	af00      	add	r7, sp, #0
 801082c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	f103 0208 	add.w	r2, r3, #8
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	f04f 32ff 	mov.w	r2, #4294967295
 801083e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	f103 0208 	add.w	r2, r3, #8
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	f103 0208 	add.w	r2, r3, #8
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	2200      	movs	r2, #0
 8010858:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801085a:	bf00      	nop
 801085c:	370c      	adds	r7, #12
 801085e:	46bd      	mov	sp, r7
 8010860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010864:	4770      	bx	lr

08010866 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010866:	b480      	push	{r7}
 8010868:	b083      	sub	sp, #12
 801086a:	af00      	add	r7, sp, #0
 801086c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	2200      	movs	r2, #0
 8010872:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010874:	bf00      	nop
 8010876:	370c      	adds	r7, #12
 8010878:	46bd      	mov	sp, r7
 801087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087e:	4770      	bx	lr

08010880 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010880:	b480      	push	{r7}
 8010882:	b085      	sub	sp, #20
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
 8010888:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	685b      	ldr	r3, [r3, #4]
 801088e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	68fa      	ldr	r2, [r7, #12]
 8010894:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	689a      	ldr	r2, [r3, #8]
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	689b      	ldr	r3, [r3, #8]
 80108a2:	683a      	ldr	r2, [r7, #0]
 80108a4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	683a      	ldr	r2, [r7, #0]
 80108aa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80108ac:	683b      	ldr	r3, [r7, #0]
 80108ae:	687a      	ldr	r2, [r7, #4]
 80108b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	1c5a      	adds	r2, r3, #1
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	601a      	str	r2, [r3, #0]
}
 80108bc:	bf00      	nop
 80108be:	3714      	adds	r7, #20
 80108c0:	46bd      	mov	sp, r7
 80108c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c6:	4770      	bx	lr

080108c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80108c8:	b480      	push	{r7}
 80108ca:	b085      	sub	sp, #20
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
 80108d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80108d2:	683b      	ldr	r3, [r7, #0]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80108d8:	68bb      	ldr	r3, [r7, #8]
 80108da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108de:	d103      	bne.n	80108e8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	691b      	ldr	r3, [r3, #16]
 80108e4:	60fb      	str	r3, [r7, #12]
 80108e6:	e00c      	b.n	8010902 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	3308      	adds	r3, #8
 80108ec:	60fb      	str	r3, [r7, #12]
 80108ee:	e002      	b.n	80108f6 <vListInsert+0x2e>
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	685b      	ldr	r3, [r3, #4]
 80108f4:	60fb      	str	r3, [r7, #12]
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	685b      	ldr	r3, [r3, #4]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	68ba      	ldr	r2, [r7, #8]
 80108fe:	429a      	cmp	r2, r3
 8010900:	d2f6      	bcs.n	80108f0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	685a      	ldr	r2, [r3, #4]
 8010906:	683b      	ldr	r3, [r7, #0]
 8010908:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801090a:	683b      	ldr	r3, [r7, #0]
 801090c:	685b      	ldr	r3, [r3, #4]
 801090e:	683a      	ldr	r2, [r7, #0]
 8010910:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010912:	683b      	ldr	r3, [r7, #0]
 8010914:	68fa      	ldr	r2, [r7, #12]
 8010916:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	683a      	ldr	r2, [r7, #0]
 801091c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801091e:	683b      	ldr	r3, [r7, #0]
 8010920:	687a      	ldr	r2, [r7, #4]
 8010922:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	1c5a      	adds	r2, r3, #1
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	601a      	str	r2, [r3, #0]
}
 801092e:	bf00      	nop
 8010930:	3714      	adds	r7, #20
 8010932:	46bd      	mov	sp, r7
 8010934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010938:	4770      	bx	lr

0801093a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801093a:	b480      	push	{r7}
 801093c:	b085      	sub	sp, #20
 801093e:	af00      	add	r7, sp, #0
 8010940:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	691b      	ldr	r3, [r3, #16]
 8010946:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	685b      	ldr	r3, [r3, #4]
 801094c:	687a      	ldr	r2, [r7, #4]
 801094e:	6892      	ldr	r2, [r2, #8]
 8010950:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	689b      	ldr	r3, [r3, #8]
 8010956:	687a      	ldr	r2, [r7, #4]
 8010958:	6852      	ldr	r2, [r2, #4]
 801095a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	685b      	ldr	r3, [r3, #4]
 8010960:	687a      	ldr	r2, [r7, #4]
 8010962:	429a      	cmp	r2, r3
 8010964:	d103      	bne.n	801096e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	689a      	ldr	r2, [r3, #8]
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	2200      	movs	r2, #0
 8010972:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	1e5a      	subs	r2, r3, #1
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	681b      	ldr	r3, [r3, #0]
}
 8010982:	4618      	mov	r0, r3
 8010984:	3714      	adds	r7, #20
 8010986:	46bd      	mov	sp, r7
 8010988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098c:	4770      	bx	lr
	...

08010990 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b084      	sub	sp, #16
 8010994:	af00      	add	r7, sp, #0
 8010996:	6078      	str	r0, [r7, #4]
 8010998:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d10b      	bne.n	80109bc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80109a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109a8:	f383 8811 	msr	BASEPRI, r3
 80109ac:	f3bf 8f6f 	isb	sy
 80109b0:	f3bf 8f4f 	dsb	sy
 80109b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80109b6:	bf00      	nop
 80109b8:	bf00      	nop
 80109ba:	e7fd      	b.n	80109b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80109bc:	f001 ff24 	bl	8012808 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	681a      	ldr	r2, [r3, #0]
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80109c8:	68f9      	ldr	r1, [r7, #12]
 80109ca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80109cc:	fb01 f303 	mul.w	r3, r1, r3
 80109d0:	441a      	add	r2, r3
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	2200      	movs	r2, #0
 80109da:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	681a      	ldr	r2, [r3, #0]
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	681a      	ldr	r2, [r3, #0]
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80109ec:	3b01      	subs	r3, #1
 80109ee:	68f9      	ldr	r1, [r7, #12]
 80109f0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80109f2:	fb01 f303 	mul.w	r3, r1, r3
 80109f6:	441a      	add	r2, r3
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	22ff      	movs	r2, #255	@ 0xff
 8010a00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	22ff      	movs	r2, #255	@ 0xff
 8010a08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8010a0c:	683b      	ldr	r3, [r7, #0]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d114      	bne.n	8010a3c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	691b      	ldr	r3, [r3, #16]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d01a      	beq.n	8010a50 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	3310      	adds	r3, #16
 8010a1e:	4618      	mov	r0, r3
 8010a20:	f001 f9d2 	bl	8011dc8 <xTaskRemoveFromEventList>
 8010a24:	4603      	mov	r3, r0
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d012      	beq.n	8010a50 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8010a60 <xQueueGenericReset+0xd0>)
 8010a2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010a30:	601a      	str	r2, [r3, #0]
 8010a32:	f3bf 8f4f 	dsb	sy
 8010a36:	f3bf 8f6f 	isb	sy
 8010a3a:	e009      	b.n	8010a50 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	3310      	adds	r3, #16
 8010a40:	4618      	mov	r0, r3
 8010a42:	f7ff fef0 	bl	8010826 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	3324      	adds	r3, #36	@ 0x24
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f7ff feeb 	bl	8010826 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010a50:	f001 ff0c 	bl	801286c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010a54:	2301      	movs	r3, #1
}
 8010a56:	4618      	mov	r0, r3
 8010a58:	3710      	adds	r7, #16
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	bd80      	pop	{r7, pc}
 8010a5e:	bf00      	nop
 8010a60:	e000ed04 	.word	0xe000ed04

08010a64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b08e      	sub	sp, #56	@ 0x38
 8010a68:	af02      	add	r7, sp, #8
 8010a6a:	60f8      	str	r0, [r7, #12]
 8010a6c:	60b9      	str	r1, [r7, #8]
 8010a6e:	607a      	str	r2, [r7, #4]
 8010a70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d10b      	bne.n	8010a90 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8010a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a7c:	f383 8811 	msr	BASEPRI, r3
 8010a80:	f3bf 8f6f 	isb	sy
 8010a84:	f3bf 8f4f 	dsb	sy
 8010a88:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010a8a:	bf00      	nop
 8010a8c:	bf00      	nop
 8010a8e:	e7fd      	b.n	8010a8c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010a90:	683b      	ldr	r3, [r7, #0]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d10b      	bne.n	8010aae <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8010a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a9a:	f383 8811 	msr	BASEPRI, r3
 8010a9e:	f3bf 8f6f 	isb	sy
 8010aa2:	f3bf 8f4f 	dsb	sy
 8010aa6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010aa8:	bf00      	nop
 8010aaa:	bf00      	nop
 8010aac:	e7fd      	b.n	8010aaa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d002      	beq.n	8010aba <xQueueGenericCreateStatic+0x56>
 8010ab4:	68bb      	ldr	r3, [r7, #8]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d001      	beq.n	8010abe <xQueueGenericCreateStatic+0x5a>
 8010aba:	2301      	movs	r3, #1
 8010abc:	e000      	b.n	8010ac0 <xQueueGenericCreateStatic+0x5c>
 8010abe:	2300      	movs	r3, #0
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d10b      	bne.n	8010adc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8010ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ac8:	f383 8811 	msr	BASEPRI, r3
 8010acc:	f3bf 8f6f 	isb	sy
 8010ad0:	f3bf 8f4f 	dsb	sy
 8010ad4:	623b      	str	r3, [r7, #32]
}
 8010ad6:	bf00      	nop
 8010ad8:	bf00      	nop
 8010ada:	e7fd      	b.n	8010ad8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d102      	bne.n	8010ae8 <xQueueGenericCreateStatic+0x84>
 8010ae2:	68bb      	ldr	r3, [r7, #8]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d101      	bne.n	8010aec <xQueueGenericCreateStatic+0x88>
 8010ae8:	2301      	movs	r3, #1
 8010aea:	e000      	b.n	8010aee <xQueueGenericCreateStatic+0x8a>
 8010aec:	2300      	movs	r3, #0
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d10b      	bne.n	8010b0a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8010af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010af6:	f383 8811 	msr	BASEPRI, r3
 8010afa:	f3bf 8f6f 	isb	sy
 8010afe:	f3bf 8f4f 	dsb	sy
 8010b02:	61fb      	str	r3, [r7, #28]
}
 8010b04:	bf00      	nop
 8010b06:	bf00      	nop
 8010b08:	e7fd      	b.n	8010b06 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010b0a:	2348      	movs	r3, #72	@ 0x48
 8010b0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010b0e:	697b      	ldr	r3, [r7, #20]
 8010b10:	2b48      	cmp	r3, #72	@ 0x48
 8010b12:	d00b      	beq.n	8010b2c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8010b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b18:	f383 8811 	msr	BASEPRI, r3
 8010b1c:	f3bf 8f6f 	isb	sy
 8010b20:	f3bf 8f4f 	dsb	sy
 8010b24:	61bb      	str	r3, [r7, #24]
}
 8010b26:	bf00      	nop
 8010b28:	bf00      	nop
 8010b2a:	e7fd      	b.n	8010b28 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010b2c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010b2e:	683b      	ldr	r3, [r7, #0]
 8010b30:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8010b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d00d      	beq.n	8010b54 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b3a:	2201      	movs	r2, #1
 8010b3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010b40:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8010b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b46:	9300      	str	r3, [sp, #0]
 8010b48:	4613      	mov	r3, r2
 8010b4a:	687a      	ldr	r2, [r7, #4]
 8010b4c:	68b9      	ldr	r1, [r7, #8]
 8010b4e:	68f8      	ldr	r0, [r7, #12]
 8010b50:	f000 f840 	bl	8010bd4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8010b56:	4618      	mov	r0, r3
 8010b58:	3730      	adds	r7, #48	@ 0x30
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	bd80      	pop	{r7, pc}

08010b5e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010b5e:	b580      	push	{r7, lr}
 8010b60:	b08a      	sub	sp, #40	@ 0x28
 8010b62:	af02      	add	r7, sp, #8
 8010b64:	60f8      	str	r0, [r7, #12]
 8010b66:	60b9      	str	r1, [r7, #8]
 8010b68:	4613      	mov	r3, r2
 8010b6a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d10b      	bne.n	8010b8a <xQueueGenericCreate+0x2c>
	__asm volatile
 8010b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b76:	f383 8811 	msr	BASEPRI, r3
 8010b7a:	f3bf 8f6f 	isb	sy
 8010b7e:	f3bf 8f4f 	dsb	sy
 8010b82:	613b      	str	r3, [r7, #16]
}
 8010b84:	bf00      	nop
 8010b86:	bf00      	nop
 8010b88:	e7fd      	b.n	8010b86 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	68ba      	ldr	r2, [r7, #8]
 8010b8e:	fb02 f303 	mul.w	r3, r2, r3
 8010b92:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010b94:	69fb      	ldr	r3, [r7, #28]
 8010b96:	3348      	adds	r3, #72	@ 0x48
 8010b98:	4618      	mov	r0, r3
 8010b9a:	f001 ff57 	bl	8012a4c <pvPortMalloc>
 8010b9e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010ba0:	69bb      	ldr	r3, [r7, #24]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d011      	beq.n	8010bca <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010ba6:	69bb      	ldr	r3, [r7, #24]
 8010ba8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010baa:	697b      	ldr	r3, [r7, #20]
 8010bac:	3348      	adds	r3, #72	@ 0x48
 8010bae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010bb0:	69bb      	ldr	r3, [r7, #24]
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010bb8:	79fa      	ldrb	r2, [r7, #7]
 8010bba:	69bb      	ldr	r3, [r7, #24]
 8010bbc:	9300      	str	r3, [sp, #0]
 8010bbe:	4613      	mov	r3, r2
 8010bc0:	697a      	ldr	r2, [r7, #20]
 8010bc2:	68b9      	ldr	r1, [r7, #8]
 8010bc4:	68f8      	ldr	r0, [r7, #12]
 8010bc6:	f000 f805 	bl	8010bd4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010bca:	69bb      	ldr	r3, [r7, #24]
	}
 8010bcc:	4618      	mov	r0, r3
 8010bce:	3720      	adds	r7, #32
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	bd80      	pop	{r7, pc}

08010bd4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b084      	sub	sp, #16
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	60f8      	str	r0, [r7, #12]
 8010bdc:	60b9      	str	r1, [r7, #8]
 8010bde:	607a      	str	r2, [r7, #4]
 8010be0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010be2:	68bb      	ldr	r3, [r7, #8]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d103      	bne.n	8010bf0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010be8:	69bb      	ldr	r3, [r7, #24]
 8010bea:	69ba      	ldr	r2, [r7, #24]
 8010bec:	601a      	str	r2, [r3, #0]
 8010bee:	e002      	b.n	8010bf6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010bf0:	69bb      	ldr	r3, [r7, #24]
 8010bf2:	687a      	ldr	r2, [r7, #4]
 8010bf4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010bf6:	69bb      	ldr	r3, [r7, #24]
 8010bf8:	68fa      	ldr	r2, [r7, #12]
 8010bfa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010bfc:	69bb      	ldr	r3, [r7, #24]
 8010bfe:	68ba      	ldr	r2, [r7, #8]
 8010c00:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010c02:	2101      	movs	r1, #1
 8010c04:	69b8      	ldr	r0, [r7, #24]
 8010c06:	f7ff fec3 	bl	8010990 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010c0a:	bf00      	nop
 8010c0c:	3710      	adds	r7, #16
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	bd80      	pop	{r7, pc}
	...

08010c14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b08e      	sub	sp, #56	@ 0x38
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	60f8      	str	r0, [r7, #12]
 8010c1c:	60b9      	str	r1, [r7, #8]
 8010c1e:	607a      	str	r2, [r7, #4]
 8010c20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010c22:	2300      	movs	r3, #0
 8010c24:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8010c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d10b      	bne.n	8010c48 <xQueueGenericSend+0x34>
	__asm volatile
 8010c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c34:	f383 8811 	msr	BASEPRI, r3
 8010c38:	f3bf 8f6f 	isb	sy
 8010c3c:	f3bf 8f4f 	dsb	sy
 8010c40:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010c42:	bf00      	nop
 8010c44:	bf00      	nop
 8010c46:	e7fd      	b.n	8010c44 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010c48:	68bb      	ldr	r3, [r7, #8]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d103      	bne.n	8010c56 <xQueueGenericSend+0x42>
 8010c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d101      	bne.n	8010c5a <xQueueGenericSend+0x46>
 8010c56:	2301      	movs	r3, #1
 8010c58:	e000      	b.n	8010c5c <xQueueGenericSend+0x48>
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d10b      	bne.n	8010c78 <xQueueGenericSend+0x64>
	__asm volatile
 8010c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c64:	f383 8811 	msr	BASEPRI, r3
 8010c68:	f3bf 8f6f 	isb	sy
 8010c6c:	f3bf 8f4f 	dsb	sy
 8010c70:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010c72:	bf00      	nop
 8010c74:	bf00      	nop
 8010c76:	e7fd      	b.n	8010c74 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010c78:	683b      	ldr	r3, [r7, #0]
 8010c7a:	2b02      	cmp	r3, #2
 8010c7c:	d103      	bne.n	8010c86 <xQueueGenericSend+0x72>
 8010c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010c82:	2b01      	cmp	r3, #1
 8010c84:	d101      	bne.n	8010c8a <xQueueGenericSend+0x76>
 8010c86:	2301      	movs	r3, #1
 8010c88:	e000      	b.n	8010c8c <xQueueGenericSend+0x78>
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d10b      	bne.n	8010ca8 <xQueueGenericSend+0x94>
	__asm volatile
 8010c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c94:	f383 8811 	msr	BASEPRI, r3
 8010c98:	f3bf 8f6f 	isb	sy
 8010c9c:	f3bf 8f4f 	dsb	sy
 8010ca0:	623b      	str	r3, [r7, #32]
}
 8010ca2:	bf00      	nop
 8010ca4:	bf00      	nop
 8010ca6:	e7fd      	b.n	8010ca4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010ca8:	f001 fa54 	bl	8012154 <xTaskGetSchedulerState>
 8010cac:	4603      	mov	r3, r0
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d102      	bne.n	8010cb8 <xQueueGenericSend+0xa4>
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d101      	bne.n	8010cbc <xQueueGenericSend+0xa8>
 8010cb8:	2301      	movs	r3, #1
 8010cba:	e000      	b.n	8010cbe <xQueueGenericSend+0xaa>
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d10b      	bne.n	8010cda <xQueueGenericSend+0xc6>
	__asm volatile
 8010cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cc6:	f383 8811 	msr	BASEPRI, r3
 8010cca:	f3bf 8f6f 	isb	sy
 8010cce:	f3bf 8f4f 	dsb	sy
 8010cd2:	61fb      	str	r3, [r7, #28]
}
 8010cd4:	bf00      	nop
 8010cd6:	bf00      	nop
 8010cd8:	e7fd      	b.n	8010cd6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010cda:	f001 fd95 	bl	8012808 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ce0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ce4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010ce6:	429a      	cmp	r2, r3
 8010ce8:	d302      	bcc.n	8010cf0 <xQueueGenericSend+0xdc>
 8010cea:	683b      	ldr	r3, [r7, #0]
 8010cec:	2b02      	cmp	r3, #2
 8010cee:	d129      	bne.n	8010d44 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010cf0:	683a      	ldr	r2, [r7, #0]
 8010cf2:	68b9      	ldr	r1, [r7, #8]
 8010cf4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010cf6:	f000 faed 	bl	80112d4 <prvCopyDataToQueue>
 8010cfa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d010      	beq.n	8010d26 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d06:	3324      	adds	r3, #36	@ 0x24
 8010d08:	4618      	mov	r0, r3
 8010d0a:	f001 f85d 	bl	8011dc8 <xTaskRemoveFromEventList>
 8010d0e:	4603      	mov	r3, r0
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d013      	beq.n	8010d3c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010d14:	4b3f      	ldr	r3, [pc, #252]	@ (8010e14 <xQueueGenericSend+0x200>)
 8010d16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010d1a:	601a      	str	r2, [r3, #0]
 8010d1c:	f3bf 8f4f 	dsb	sy
 8010d20:	f3bf 8f6f 	isb	sy
 8010d24:	e00a      	b.n	8010d3c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d007      	beq.n	8010d3c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010d2c:	4b39      	ldr	r3, [pc, #228]	@ (8010e14 <xQueueGenericSend+0x200>)
 8010d2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010d32:	601a      	str	r2, [r3, #0]
 8010d34:	f3bf 8f4f 	dsb	sy
 8010d38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010d3c:	f001 fd96 	bl	801286c <vPortExitCritical>
				return pdPASS;
 8010d40:	2301      	movs	r3, #1
 8010d42:	e063      	b.n	8010e0c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d103      	bne.n	8010d52 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010d4a:	f001 fd8f 	bl	801286c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010d4e:	2300      	movs	r3, #0
 8010d50:	e05c      	b.n	8010e0c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d106      	bne.n	8010d66 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010d58:	f107 0314 	add.w	r3, r7, #20
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	f001 f897 	bl	8011e90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010d62:	2301      	movs	r3, #1
 8010d64:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010d66:	f001 fd81 	bl	801286c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010d6a:	f000 fe3d 	bl	80119e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010d6e:	f001 fd4b 	bl	8012808 <vPortEnterCritical>
 8010d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010d78:	b25b      	sxtb	r3, r3
 8010d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d7e:	d103      	bne.n	8010d88 <xQueueGenericSend+0x174>
 8010d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d82:	2200      	movs	r2, #0
 8010d84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d8a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010d8e:	b25b      	sxtb	r3, r3
 8010d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d94:	d103      	bne.n	8010d9e <xQueueGenericSend+0x18a>
 8010d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d98:	2200      	movs	r2, #0
 8010d9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010d9e:	f001 fd65 	bl	801286c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010da2:	1d3a      	adds	r2, r7, #4
 8010da4:	f107 0314 	add.w	r3, r7, #20
 8010da8:	4611      	mov	r1, r2
 8010daa:	4618      	mov	r0, r3
 8010dac:	f001 f886 	bl	8011ebc <xTaskCheckForTimeOut>
 8010db0:	4603      	mov	r3, r0
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d124      	bne.n	8010e00 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010db6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010db8:	f000 fb84 	bl	80114c4 <prvIsQueueFull>
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d018      	beq.n	8010df4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dc4:	3310      	adds	r3, #16
 8010dc6:	687a      	ldr	r2, [r7, #4]
 8010dc8:	4611      	mov	r1, r2
 8010dca:	4618      	mov	r0, r3
 8010dcc:	f000 ffd6 	bl	8011d7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010dd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010dd2:	f000 fb0f 	bl	80113f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010dd6:	f000 fe15 	bl	8011a04 <xTaskResumeAll>
 8010dda:	4603      	mov	r3, r0
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	f47f af7c 	bne.w	8010cda <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8010de2:	4b0c      	ldr	r3, [pc, #48]	@ (8010e14 <xQueueGenericSend+0x200>)
 8010de4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010de8:	601a      	str	r2, [r3, #0]
 8010dea:	f3bf 8f4f 	dsb	sy
 8010dee:	f3bf 8f6f 	isb	sy
 8010df2:	e772      	b.n	8010cda <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010df4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010df6:	f000 fafd 	bl	80113f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010dfa:	f000 fe03 	bl	8011a04 <xTaskResumeAll>
 8010dfe:	e76c      	b.n	8010cda <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010e00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010e02:	f000 faf7 	bl	80113f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010e06:	f000 fdfd 	bl	8011a04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010e0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	3738      	adds	r7, #56	@ 0x38
 8010e10:	46bd      	mov	sp, r7
 8010e12:	bd80      	pop	{r7, pc}
 8010e14:	e000ed04 	.word	0xe000ed04

08010e18 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b08e      	sub	sp, #56	@ 0x38
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
 8010e20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d10b      	bne.n	8010e44 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8010e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e30:	f383 8811 	msr	BASEPRI, r3
 8010e34:	f3bf 8f6f 	isb	sy
 8010e38:	f3bf 8f4f 	dsb	sy
 8010e3c:	623b      	str	r3, [r7, #32]
}
 8010e3e:	bf00      	nop
 8010e40:	bf00      	nop
 8010e42:	e7fd      	b.n	8010e40 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d00b      	beq.n	8010e64 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8010e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e50:	f383 8811 	msr	BASEPRI, r3
 8010e54:	f3bf 8f6f 	isb	sy
 8010e58:	f3bf 8f4f 	dsb	sy
 8010e5c:	61fb      	str	r3, [r7, #28]
}
 8010e5e:	bf00      	nop
 8010e60:	bf00      	nop
 8010e62:	e7fd      	b.n	8010e60 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d103      	bne.n	8010e74 <xQueueGiveFromISR+0x5c>
 8010e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e6e:	689b      	ldr	r3, [r3, #8]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d101      	bne.n	8010e78 <xQueueGiveFromISR+0x60>
 8010e74:	2301      	movs	r3, #1
 8010e76:	e000      	b.n	8010e7a <xQueueGiveFromISR+0x62>
 8010e78:	2300      	movs	r3, #0
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d10b      	bne.n	8010e96 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8010e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e82:	f383 8811 	msr	BASEPRI, r3
 8010e86:	f3bf 8f6f 	isb	sy
 8010e8a:	f3bf 8f4f 	dsb	sy
 8010e8e:	61bb      	str	r3, [r7, #24]
}
 8010e90:	bf00      	nop
 8010e92:	bf00      	nop
 8010e94:	e7fd      	b.n	8010e92 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010e96:	f001 fd97 	bl	80129c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010e9a:	f3ef 8211 	mrs	r2, BASEPRI
 8010e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ea2:	f383 8811 	msr	BASEPRI, r3
 8010ea6:	f3bf 8f6f 	isb	sy
 8010eaa:	f3bf 8f4f 	dsb	sy
 8010eae:	617a      	str	r2, [r7, #20]
 8010eb0:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010eb2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010eba:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010ec0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010ec2:	429a      	cmp	r2, r3
 8010ec4:	d22b      	bcs.n	8010f1e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ec8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010ecc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ed2:	1c5a      	adds	r2, r3, #1
 8010ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ed6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010ed8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8010edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ee0:	d112      	bne.n	8010f08 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d016      	beq.n	8010f18 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010eec:	3324      	adds	r3, #36	@ 0x24
 8010eee:	4618      	mov	r0, r3
 8010ef0:	f000 ff6a 	bl	8011dc8 <xTaskRemoveFromEventList>
 8010ef4:	4603      	mov	r3, r0
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d00e      	beq.n	8010f18 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010efa:	683b      	ldr	r3, [r7, #0]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d00b      	beq.n	8010f18 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010f00:	683b      	ldr	r3, [r7, #0]
 8010f02:	2201      	movs	r2, #1
 8010f04:	601a      	str	r2, [r3, #0]
 8010f06:	e007      	b.n	8010f18 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010f08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f0c:	3301      	adds	r3, #1
 8010f0e:	b2db      	uxtb	r3, r3
 8010f10:	b25a      	sxtb	r2, r3
 8010f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8010f18:	2301      	movs	r3, #1
 8010f1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8010f1c:	e001      	b.n	8010f22 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010f1e:	2300      	movs	r3, #0
 8010f20:	637b      	str	r3, [r7, #52]	@ 0x34
 8010f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f24:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010f2c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010f2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8010f30:	4618      	mov	r0, r3
 8010f32:	3738      	adds	r7, #56	@ 0x38
 8010f34:	46bd      	mov	sp, r7
 8010f36:	bd80      	pop	{r7, pc}

08010f38 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b08e      	sub	sp, #56	@ 0x38
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
 8010f40:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010f42:	2300      	movs	r3, #0
 8010f44:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d10b      	bne.n	8010f6c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8010f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f58:	f383 8811 	msr	BASEPRI, r3
 8010f5c:	f3bf 8f6f 	isb	sy
 8010f60:	f3bf 8f4f 	dsb	sy
 8010f64:	623b      	str	r3, [r7, #32]
}
 8010f66:	bf00      	nop
 8010f68:	bf00      	nop
 8010f6a:	e7fd      	b.n	8010f68 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d00b      	beq.n	8010f8c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8010f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f78:	f383 8811 	msr	BASEPRI, r3
 8010f7c:	f3bf 8f6f 	isb	sy
 8010f80:	f3bf 8f4f 	dsb	sy
 8010f84:	61fb      	str	r3, [r7, #28]
}
 8010f86:	bf00      	nop
 8010f88:	bf00      	nop
 8010f8a:	e7fd      	b.n	8010f88 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010f8c:	f001 f8e2 	bl	8012154 <xTaskGetSchedulerState>
 8010f90:	4603      	mov	r3, r0
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d102      	bne.n	8010f9c <xQueueSemaphoreTake+0x64>
 8010f96:	683b      	ldr	r3, [r7, #0]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d101      	bne.n	8010fa0 <xQueueSemaphoreTake+0x68>
 8010f9c:	2301      	movs	r3, #1
 8010f9e:	e000      	b.n	8010fa2 <xQueueSemaphoreTake+0x6a>
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d10b      	bne.n	8010fbe <xQueueSemaphoreTake+0x86>
	__asm volatile
 8010fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010faa:	f383 8811 	msr	BASEPRI, r3
 8010fae:	f3bf 8f6f 	isb	sy
 8010fb2:	f3bf 8f4f 	dsb	sy
 8010fb6:	61bb      	str	r3, [r7, #24]
}
 8010fb8:	bf00      	nop
 8010fba:	bf00      	nop
 8010fbc:	e7fd      	b.n	8010fba <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010fbe:	f001 fc23 	bl	8012808 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010fc6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d024      	beq.n	8011018 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fd0:	1e5a      	subs	r2, r3, #1
 8010fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010fd4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d104      	bne.n	8010fe8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010fde:	f001 fa65 	bl	80124ac <pvTaskIncrementMutexHeldCount>
 8010fe2:	4602      	mov	r2, r0
 8010fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010fe6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010fea:	691b      	ldr	r3, [r3, #16]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d00f      	beq.n	8011010 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ff2:	3310      	adds	r3, #16
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	f000 fee7 	bl	8011dc8 <xTaskRemoveFromEventList>
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d007      	beq.n	8011010 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011000:	4b54      	ldr	r3, [pc, #336]	@ (8011154 <xQueueSemaphoreTake+0x21c>)
 8011002:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011006:	601a      	str	r2, [r3, #0]
 8011008:	f3bf 8f4f 	dsb	sy
 801100c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011010:	f001 fc2c 	bl	801286c <vPortExitCritical>
				return pdPASS;
 8011014:	2301      	movs	r3, #1
 8011016:	e098      	b.n	801114a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011018:	683b      	ldr	r3, [r7, #0]
 801101a:	2b00      	cmp	r3, #0
 801101c:	d112      	bne.n	8011044 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801101e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011020:	2b00      	cmp	r3, #0
 8011022:	d00b      	beq.n	801103c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8011024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011028:	f383 8811 	msr	BASEPRI, r3
 801102c:	f3bf 8f6f 	isb	sy
 8011030:	f3bf 8f4f 	dsb	sy
 8011034:	617b      	str	r3, [r7, #20]
}
 8011036:	bf00      	nop
 8011038:	bf00      	nop
 801103a:	e7fd      	b.n	8011038 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801103c:	f001 fc16 	bl	801286c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011040:	2300      	movs	r3, #0
 8011042:	e082      	b.n	801114a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011046:	2b00      	cmp	r3, #0
 8011048:	d106      	bne.n	8011058 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801104a:	f107 030c 	add.w	r3, r7, #12
 801104e:	4618      	mov	r0, r3
 8011050:	f000 ff1e 	bl	8011e90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011054:	2301      	movs	r3, #1
 8011056:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011058:	f001 fc08 	bl	801286c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801105c:	f000 fcc4 	bl	80119e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011060:	f001 fbd2 	bl	8012808 <vPortEnterCritical>
 8011064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011066:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801106a:	b25b      	sxtb	r3, r3
 801106c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011070:	d103      	bne.n	801107a <xQueueSemaphoreTake+0x142>
 8011072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011074:	2200      	movs	r2, #0
 8011076:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801107a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801107c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011080:	b25b      	sxtb	r3, r3
 8011082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011086:	d103      	bne.n	8011090 <xQueueSemaphoreTake+0x158>
 8011088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801108a:	2200      	movs	r2, #0
 801108c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011090:	f001 fbec 	bl	801286c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011094:	463a      	mov	r2, r7
 8011096:	f107 030c 	add.w	r3, r7, #12
 801109a:	4611      	mov	r1, r2
 801109c:	4618      	mov	r0, r3
 801109e:	f000 ff0d 	bl	8011ebc <xTaskCheckForTimeOut>
 80110a2:	4603      	mov	r3, r0
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d132      	bne.n	801110e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80110a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80110aa:	f000 f9f5 	bl	8011498 <prvIsQueueEmpty>
 80110ae:	4603      	mov	r3, r0
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d026      	beq.n	8011102 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80110b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d109      	bne.n	80110d0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80110bc:	f001 fba4 	bl	8012808 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80110c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110c2:	689b      	ldr	r3, [r3, #8]
 80110c4:	4618      	mov	r0, r3
 80110c6:	f001 f863 	bl	8012190 <xTaskPriorityInherit>
 80110ca:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80110cc:	f001 fbce 	bl	801286c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80110d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110d2:	3324      	adds	r3, #36	@ 0x24
 80110d4:	683a      	ldr	r2, [r7, #0]
 80110d6:	4611      	mov	r1, r2
 80110d8:	4618      	mov	r0, r3
 80110da:	f000 fe4f 	bl	8011d7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80110de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80110e0:	f000 f988 	bl	80113f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80110e4:	f000 fc8e 	bl	8011a04 <xTaskResumeAll>
 80110e8:	4603      	mov	r3, r0
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	f47f af67 	bne.w	8010fbe <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80110f0:	4b18      	ldr	r3, [pc, #96]	@ (8011154 <xQueueSemaphoreTake+0x21c>)
 80110f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80110f6:	601a      	str	r2, [r3, #0]
 80110f8:	f3bf 8f4f 	dsb	sy
 80110fc:	f3bf 8f6f 	isb	sy
 8011100:	e75d      	b.n	8010fbe <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011102:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011104:	f000 f976 	bl	80113f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011108:	f000 fc7c 	bl	8011a04 <xTaskResumeAll>
 801110c:	e757      	b.n	8010fbe <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801110e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011110:	f000 f970 	bl	80113f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011114:	f000 fc76 	bl	8011a04 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011118:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801111a:	f000 f9bd 	bl	8011498 <prvIsQueueEmpty>
 801111e:	4603      	mov	r3, r0
 8011120:	2b00      	cmp	r3, #0
 8011122:	f43f af4c 	beq.w	8010fbe <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8011126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011128:	2b00      	cmp	r3, #0
 801112a:	d00d      	beq.n	8011148 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 801112c:	f001 fb6c 	bl	8012808 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011130:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011132:	f000 f8b7 	bl	80112a4 <prvGetDisinheritPriorityAfterTimeout>
 8011136:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801113a:	689b      	ldr	r3, [r3, #8]
 801113c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801113e:	4618      	mov	r0, r3
 8011140:	f001 f924 	bl	801238c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011144:	f001 fb92 	bl	801286c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011148:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801114a:	4618      	mov	r0, r3
 801114c:	3738      	adds	r7, #56	@ 0x38
 801114e:	46bd      	mov	sp, r7
 8011150:	bd80      	pop	{r7, pc}
 8011152:	bf00      	nop
 8011154:	e000ed04 	.word	0xe000ed04

08011158 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011158:	b580      	push	{r7, lr}
 801115a:	b08e      	sub	sp, #56	@ 0x38
 801115c:	af00      	add	r7, sp, #0
 801115e:	60f8      	str	r0, [r7, #12]
 8011160:	60b9      	str	r1, [r7, #8]
 8011162:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8011168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801116a:	2b00      	cmp	r3, #0
 801116c:	d10b      	bne.n	8011186 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 801116e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011172:	f383 8811 	msr	BASEPRI, r3
 8011176:	f3bf 8f6f 	isb	sy
 801117a:	f3bf 8f4f 	dsb	sy
 801117e:	623b      	str	r3, [r7, #32]
}
 8011180:	bf00      	nop
 8011182:	bf00      	nop
 8011184:	e7fd      	b.n	8011182 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011186:	68bb      	ldr	r3, [r7, #8]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d103      	bne.n	8011194 <xQueueReceiveFromISR+0x3c>
 801118c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801118e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011190:	2b00      	cmp	r3, #0
 8011192:	d101      	bne.n	8011198 <xQueueReceiveFromISR+0x40>
 8011194:	2301      	movs	r3, #1
 8011196:	e000      	b.n	801119a <xQueueReceiveFromISR+0x42>
 8011198:	2300      	movs	r3, #0
 801119a:	2b00      	cmp	r3, #0
 801119c:	d10b      	bne.n	80111b6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 801119e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111a2:	f383 8811 	msr	BASEPRI, r3
 80111a6:	f3bf 8f6f 	isb	sy
 80111aa:	f3bf 8f4f 	dsb	sy
 80111ae:	61fb      	str	r3, [r7, #28]
}
 80111b0:	bf00      	nop
 80111b2:	bf00      	nop
 80111b4:	e7fd      	b.n	80111b2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80111b6:	f001 fc07 	bl	80129c8 <vPortValidateInterruptPriority>
	__asm volatile
 80111ba:	f3ef 8211 	mrs	r2, BASEPRI
 80111be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111c2:	f383 8811 	msr	BASEPRI, r3
 80111c6:	f3bf 8f6f 	isb	sy
 80111ca:	f3bf 8f4f 	dsb	sy
 80111ce:	61ba      	str	r2, [r7, #24]
 80111d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80111d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80111d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80111d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80111da:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80111dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d02f      	beq.n	8011242 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80111e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80111e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80111ec:	68b9      	ldr	r1, [r7, #8]
 80111ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80111f0:	f000 f8da 	bl	80113a8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80111f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111f6:	1e5a      	subs	r2, r3, #1
 80111f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111fa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80111fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8011200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011204:	d112      	bne.n	801122c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011208:	691b      	ldr	r3, [r3, #16]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d016      	beq.n	801123c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801120e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011210:	3310      	adds	r3, #16
 8011212:	4618      	mov	r0, r3
 8011214:	f000 fdd8 	bl	8011dc8 <xTaskRemoveFromEventList>
 8011218:	4603      	mov	r3, r0
 801121a:	2b00      	cmp	r3, #0
 801121c:	d00e      	beq.n	801123c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	2b00      	cmp	r3, #0
 8011222:	d00b      	beq.n	801123c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	2201      	movs	r2, #1
 8011228:	601a      	str	r2, [r3, #0]
 801122a:	e007      	b.n	801123c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801122c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011230:	3301      	adds	r3, #1
 8011232:	b2db      	uxtb	r3, r3
 8011234:	b25a      	sxtb	r2, r3
 8011236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011238:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 801123c:	2301      	movs	r3, #1
 801123e:	637b      	str	r3, [r7, #52]	@ 0x34
 8011240:	e001      	b.n	8011246 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8011242:	2300      	movs	r3, #0
 8011244:	637b      	str	r3, [r7, #52]	@ 0x34
 8011246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011248:	613b      	str	r3, [r7, #16]
	__asm volatile
 801124a:	693b      	ldr	r3, [r7, #16]
 801124c:	f383 8811 	msr	BASEPRI, r3
}
 8011250:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8011254:	4618      	mov	r0, r3
 8011256:	3738      	adds	r7, #56	@ 0x38
 8011258:	46bd      	mov	sp, r7
 801125a:	bd80      	pop	{r7, pc}

0801125c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801125c:	b580      	push	{r7, lr}
 801125e:	b084      	sub	sp, #16
 8011260:	af00      	add	r7, sp, #0
 8011262:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d10b      	bne.n	8011286 <vQueueDelete+0x2a>
	__asm volatile
 801126e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011272:	f383 8811 	msr	BASEPRI, r3
 8011276:	f3bf 8f6f 	isb	sy
 801127a:	f3bf 8f4f 	dsb	sy
 801127e:	60bb      	str	r3, [r7, #8]
}
 8011280:	bf00      	nop
 8011282:	bf00      	nop
 8011284:	e7fd      	b.n	8011282 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8011286:	68f8      	ldr	r0, [r7, #12]
 8011288:	f000 f934 	bl	80114f4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8011292:	2b00      	cmp	r3, #0
 8011294:	d102      	bne.n	801129c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8011296:	68f8      	ldr	r0, [r7, #12]
 8011298:	f001 fca6 	bl	8012be8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801129c:	bf00      	nop
 801129e:	3710      	adds	r7, #16
 80112a0:	46bd      	mov	sp, r7
 80112a2:	bd80      	pop	{r7, pc}

080112a4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80112a4:	b480      	push	{r7}
 80112a6:	b085      	sub	sp, #20
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d006      	beq.n	80112c2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	f1c3 0307 	rsb	r3, r3, #7
 80112be:	60fb      	str	r3, [r7, #12]
 80112c0:	e001      	b.n	80112c6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80112c2:	2300      	movs	r3, #0
 80112c4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80112c6:	68fb      	ldr	r3, [r7, #12]
	}
 80112c8:	4618      	mov	r0, r3
 80112ca:	3714      	adds	r7, #20
 80112cc:	46bd      	mov	sp, r7
 80112ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d2:	4770      	bx	lr

080112d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b086      	sub	sp, #24
 80112d8:	af00      	add	r7, sp, #0
 80112da:	60f8      	str	r0, [r7, #12]
 80112dc:	60b9      	str	r1, [r7, #8]
 80112de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80112e0:	2300      	movs	r3, #0
 80112e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80112e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d10d      	bne.n	801130e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d14d      	bne.n	8011396 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	689b      	ldr	r3, [r3, #8]
 80112fe:	4618      	mov	r0, r3
 8011300:	f000 ffbc 	bl	801227c <xTaskPriorityDisinherit>
 8011304:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	2200      	movs	r2, #0
 801130a:	609a      	str	r2, [r3, #8]
 801130c:	e043      	b.n	8011396 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	2b00      	cmp	r3, #0
 8011312:	d119      	bne.n	8011348 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	6858      	ldr	r0, [r3, #4]
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801131c:	461a      	mov	r2, r3
 801131e:	68b9      	ldr	r1, [r7, #8]
 8011320:	f002 fbe7 	bl	8013af2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	685a      	ldr	r2, [r3, #4]
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801132c:	441a      	add	r2, r3
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	685a      	ldr	r2, [r3, #4]
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	689b      	ldr	r3, [r3, #8]
 801133a:	429a      	cmp	r2, r3
 801133c:	d32b      	bcc.n	8011396 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	681a      	ldr	r2, [r3, #0]
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	605a      	str	r2, [r3, #4]
 8011346:	e026      	b.n	8011396 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	68d8      	ldr	r0, [r3, #12]
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011350:	461a      	mov	r2, r3
 8011352:	68b9      	ldr	r1, [r7, #8]
 8011354:	f002 fbcd 	bl	8013af2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	68da      	ldr	r2, [r3, #12]
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011360:	425b      	negs	r3, r3
 8011362:	441a      	add	r2, r3
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	68da      	ldr	r2, [r3, #12]
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	429a      	cmp	r2, r3
 8011372:	d207      	bcs.n	8011384 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	689a      	ldr	r2, [r3, #8]
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801137c:	425b      	negs	r3, r3
 801137e:	441a      	add	r2, r3
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	2b02      	cmp	r3, #2
 8011388:	d105      	bne.n	8011396 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801138a:	693b      	ldr	r3, [r7, #16]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d002      	beq.n	8011396 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011390:	693b      	ldr	r3, [r7, #16]
 8011392:	3b01      	subs	r3, #1
 8011394:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011396:	693b      	ldr	r3, [r7, #16]
 8011398:	1c5a      	adds	r2, r3, #1
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801139e:	697b      	ldr	r3, [r7, #20]
}
 80113a0:	4618      	mov	r0, r3
 80113a2:	3718      	adds	r7, #24
 80113a4:	46bd      	mov	sp, r7
 80113a6:	bd80      	pop	{r7, pc}

080113a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b082      	sub	sp, #8
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	6078      	str	r0, [r7, #4]
 80113b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d018      	beq.n	80113ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	68da      	ldr	r2, [r3, #12]
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80113c2:	441a      	add	r2, r3
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	68da      	ldr	r2, [r3, #12]
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	689b      	ldr	r3, [r3, #8]
 80113d0:	429a      	cmp	r2, r3
 80113d2:	d303      	bcc.n	80113dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	681a      	ldr	r2, [r3, #0]
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	68d9      	ldr	r1, [r3, #12]
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80113e4:	461a      	mov	r2, r3
 80113e6:	6838      	ldr	r0, [r7, #0]
 80113e8:	f002 fb83 	bl	8013af2 <memcpy>
	}
}
 80113ec:	bf00      	nop
 80113ee:	3708      	adds	r7, #8
 80113f0:	46bd      	mov	sp, r7
 80113f2:	bd80      	pop	{r7, pc}

080113f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b084      	sub	sp, #16
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80113fc:	f001 fa04 	bl	8012808 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011406:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011408:	e011      	b.n	801142e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801140e:	2b00      	cmp	r3, #0
 8011410:	d012      	beq.n	8011438 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	3324      	adds	r3, #36	@ 0x24
 8011416:	4618      	mov	r0, r3
 8011418:	f000 fcd6 	bl	8011dc8 <xTaskRemoveFromEventList>
 801141c:	4603      	mov	r3, r0
 801141e:	2b00      	cmp	r3, #0
 8011420:	d001      	beq.n	8011426 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011422:	f000 fdaf 	bl	8011f84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011426:	7bfb      	ldrb	r3, [r7, #15]
 8011428:	3b01      	subs	r3, #1
 801142a:	b2db      	uxtb	r3, r3
 801142c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801142e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011432:	2b00      	cmp	r3, #0
 8011434:	dce9      	bgt.n	801140a <prvUnlockQueue+0x16>
 8011436:	e000      	b.n	801143a <prvUnlockQueue+0x46>
					break;
 8011438:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	22ff      	movs	r2, #255	@ 0xff
 801143e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8011442:	f001 fa13 	bl	801286c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011446:	f001 f9df 	bl	8012808 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011450:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011452:	e011      	b.n	8011478 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	691b      	ldr	r3, [r3, #16]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d012      	beq.n	8011482 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	3310      	adds	r3, #16
 8011460:	4618      	mov	r0, r3
 8011462:	f000 fcb1 	bl	8011dc8 <xTaskRemoveFromEventList>
 8011466:	4603      	mov	r3, r0
 8011468:	2b00      	cmp	r3, #0
 801146a:	d001      	beq.n	8011470 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801146c:	f000 fd8a 	bl	8011f84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011470:	7bbb      	ldrb	r3, [r7, #14]
 8011472:	3b01      	subs	r3, #1
 8011474:	b2db      	uxtb	r3, r3
 8011476:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011478:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801147c:	2b00      	cmp	r3, #0
 801147e:	dce9      	bgt.n	8011454 <prvUnlockQueue+0x60>
 8011480:	e000      	b.n	8011484 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011482:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	22ff      	movs	r2, #255	@ 0xff
 8011488:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 801148c:	f001 f9ee 	bl	801286c <vPortExitCritical>
}
 8011490:	bf00      	nop
 8011492:	3710      	adds	r7, #16
 8011494:	46bd      	mov	sp, r7
 8011496:	bd80      	pop	{r7, pc}

08011498 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b084      	sub	sp, #16
 801149c:	af00      	add	r7, sp, #0
 801149e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80114a0:	f001 f9b2 	bl	8012808 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d102      	bne.n	80114b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80114ac:	2301      	movs	r3, #1
 80114ae:	60fb      	str	r3, [r7, #12]
 80114b0:	e001      	b.n	80114b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80114b2:	2300      	movs	r3, #0
 80114b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80114b6:	f001 f9d9 	bl	801286c <vPortExitCritical>

	return xReturn;
 80114ba:	68fb      	ldr	r3, [r7, #12]
}
 80114bc:	4618      	mov	r0, r3
 80114be:	3710      	adds	r7, #16
 80114c0:	46bd      	mov	sp, r7
 80114c2:	bd80      	pop	{r7, pc}

080114c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b084      	sub	sp, #16
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80114cc:	f001 f99c 	bl	8012808 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80114d8:	429a      	cmp	r2, r3
 80114da:	d102      	bne.n	80114e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80114dc:	2301      	movs	r3, #1
 80114de:	60fb      	str	r3, [r7, #12]
 80114e0:	e001      	b.n	80114e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80114e2:	2300      	movs	r3, #0
 80114e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80114e6:	f001 f9c1 	bl	801286c <vPortExitCritical>

	return xReturn;
 80114ea:	68fb      	ldr	r3, [r7, #12]
}
 80114ec:	4618      	mov	r0, r3
 80114ee:	3710      	adds	r7, #16
 80114f0:	46bd      	mov	sp, r7
 80114f2:	bd80      	pop	{r7, pc}

080114f4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80114f4:	b480      	push	{r7}
 80114f6:	b085      	sub	sp, #20
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80114fc:	2300      	movs	r3, #0
 80114fe:	60fb      	str	r3, [r7, #12]
 8011500:	e016      	b.n	8011530 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8011502:	4a10      	ldr	r2, [pc, #64]	@ (8011544 <vQueueUnregisterQueue+0x50>)
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	00db      	lsls	r3, r3, #3
 8011508:	4413      	add	r3, r2
 801150a:	685b      	ldr	r3, [r3, #4]
 801150c:	687a      	ldr	r2, [r7, #4]
 801150e:	429a      	cmp	r2, r3
 8011510:	d10b      	bne.n	801152a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8011512:	4a0c      	ldr	r2, [pc, #48]	@ (8011544 <vQueueUnregisterQueue+0x50>)
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	2100      	movs	r1, #0
 8011518:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801151c:	4a09      	ldr	r2, [pc, #36]	@ (8011544 <vQueueUnregisterQueue+0x50>)
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	00db      	lsls	r3, r3, #3
 8011522:	4413      	add	r3, r2
 8011524:	2200      	movs	r2, #0
 8011526:	605a      	str	r2, [r3, #4]
				break;
 8011528:	e006      	b.n	8011538 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	3301      	adds	r3, #1
 801152e:	60fb      	str	r3, [r7, #12]
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	2b07      	cmp	r3, #7
 8011534:	d9e5      	bls.n	8011502 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8011536:	bf00      	nop
 8011538:	bf00      	nop
 801153a:	3714      	adds	r7, #20
 801153c:	46bd      	mov	sp, r7
 801153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011542:	4770      	bx	lr
 8011544:	20002c28 	.word	0x20002c28

08011548 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011548:	b580      	push	{r7, lr}
 801154a:	b08e      	sub	sp, #56	@ 0x38
 801154c:	af04      	add	r7, sp, #16
 801154e:	60f8      	str	r0, [r7, #12]
 8011550:	60b9      	str	r1, [r7, #8]
 8011552:	607a      	str	r2, [r7, #4]
 8011554:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011558:	2b00      	cmp	r3, #0
 801155a:	d10b      	bne.n	8011574 <xTaskCreateStatic+0x2c>
	__asm volatile
 801155c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011560:	f383 8811 	msr	BASEPRI, r3
 8011564:	f3bf 8f6f 	isb	sy
 8011568:	f3bf 8f4f 	dsb	sy
 801156c:	623b      	str	r3, [r7, #32]
}
 801156e:	bf00      	nop
 8011570:	bf00      	nop
 8011572:	e7fd      	b.n	8011570 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8011574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011576:	2b00      	cmp	r3, #0
 8011578:	d10b      	bne.n	8011592 <xTaskCreateStatic+0x4a>
	__asm volatile
 801157a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801157e:	f383 8811 	msr	BASEPRI, r3
 8011582:	f3bf 8f6f 	isb	sy
 8011586:	f3bf 8f4f 	dsb	sy
 801158a:	61fb      	str	r3, [r7, #28]
}
 801158c:	bf00      	nop
 801158e:	bf00      	nop
 8011590:	e7fd      	b.n	801158e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011592:	23a0      	movs	r3, #160	@ 0xa0
 8011594:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011596:	693b      	ldr	r3, [r7, #16]
 8011598:	2ba0      	cmp	r3, #160	@ 0xa0
 801159a:	d00b      	beq.n	80115b4 <xTaskCreateStatic+0x6c>
	__asm volatile
 801159c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115a0:	f383 8811 	msr	BASEPRI, r3
 80115a4:	f3bf 8f6f 	isb	sy
 80115a8:	f3bf 8f4f 	dsb	sy
 80115ac:	61bb      	str	r3, [r7, #24]
}
 80115ae:	bf00      	nop
 80115b0:	bf00      	nop
 80115b2:	e7fd      	b.n	80115b0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80115b4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80115b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d01e      	beq.n	80115fa <xTaskCreateStatic+0xb2>
 80115bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d01b      	beq.n	80115fa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80115c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115c4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80115c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80115ca:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80115cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115ce:	2202      	movs	r2, #2
 80115d0:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80115d4:	2300      	movs	r3, #0
 80115d6:	9303      	str	r3, [sp, #12]
 80115d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115da:	9302      	str	r3, [sp, #8]
 80115dc:	f107 0314 	add.w	r3, r7, #20
 80115e0:	9301      	str	r3, [sp, #4]
 80115e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115e4:	9300      	str	r3, [sp, #0]
 80115e6:	683b      	ldr	r3, [r7, #0]
 80115e8:	687a      	ldr	r2, [r7, #4]
 80115ea:	68b9      	ldr	r1, [r7, #8]
 80115ec:	68f8      	ldr	r0, [r7, #12]
 80115ee:	f000 f851 	bl	8011694 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80115f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80115f4:	f000 f8ee 	bl	80117d4 <prvAddNewTaskToReadyList>
 80115f8:	e001      	b.n	80115fe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80115fa:	2300      	movs	r3, #0
 80115fc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80115fe:	697b      	ldr	r3, [r7, #20]
	}
 8011600:	4618      	mov	r0, r3
 8011602:	3728      	adds	r7, #40	@ 0x28
 8011604:	46bd      	mov	sp, r7
 8011606:	bd80      	pop	{r7, pc}

08011608 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011608:	b580      	push	{r7, lr}
 801160a:	b08c      	sub	sp, #48	@ 0x30
 801160c:	af04      	add	r7, sp, #16
 801160e:	60f8      	str	r0, [r7, #12]
 8011610:	60b9      	str	r1, [r7, #8]
 8011612:	603b      	str	r3, [r7, #0]
 8011614:	4613      	mov	r3, r2
 8011616:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011618:	88fb      	ldrh	r3, [r7, #6]
 801161a:	009b      	lsls	r3, r3, #2
 801161c:	4618      	mov	r0, r3
 801161e:	f001 fa15 	bl	8012a4c <pvPortMalloc>
 8011622:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011624:	697b      	ldr	r3, [r7, #20]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d00e      	beq.n	8011648 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801162a:	20a0      	movs	r0, #160	@ 0xa0
 801162c:	f001 fa0e 	bl	8012a4c <pvPortMalloc>
 8011630:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011632:	69fb      	ldr	r3, [r7, #28]
 8011634:	2b00      	cmp	r3, #0
 8011636:	d003      	beq.n	8011640 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011638:	69fb      	ldr	r3, [r7, #28]
 801163a:	697a      	ldr	r2, [r7, #20]
 801163c:	631a      	str	r2, [r3, #48]	@ 0x30
 801163e:	e005      	b.n	801164c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011640:	6978      	ldr	r0, [r7, #20]
 8011642:	f001 fad1 	bl	8012be8 <vPortFree>
 8011646:	e001      	b.n	801164c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011648:	2300      	movs	r3, #0
 801164a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801164c:	69fb      	ldr	r3, [r7, #28]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d017      	beq.n	8011682 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011652:	69fb      	ldr	r3, [r7, #28]
 8011654:	2200      	movs	r2, #0
 8011656:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801165a:	88fa      	ldrh	r2, [r7, #6]
 801165c:	2300      	movs	r3, #0
 801165e:	9303      	str	r3, [sp, #12]
 8011660:	69fb      	ldr	r3, [r7, #28]
 8011662:	9302      	str	r3, [sp, #8]
 8011664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011666:	9301      	str	r3, [sp, #4]
 8011668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801166a:	9300      	str	r3, [sp, #0]
 801166c:	683b      	ldr	r3, [r7, #0]
 801166e:	68b9      	ldr	r1, [r7, #8]
 8011670:	68f8      	ldr	r0, [r7, #12]
 8011672:	f000 f80f 	bl	8011694 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011676:	69f8      	ldr	r0, [r7, #28]
 8011678:	f000 f8ac 	bl	80117d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801167c:	2301      	movs	r3, #1
 801167e:	61bb      	str	r3, [r7, #24]
 8011680:	e002      	b.n	8011688 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011682:	f04f 33ff 	mov.w	r3, #4294967295
 8011686:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011688:	69bb      	ldr	r3, [r7, #24]
	}
 801168a:	4618      	mov	r0, r3
 801168c:	3720      	adds	r7, #32
 801168e:	46bd      	mov	sp, r7
 8011690:	bd80      	pop	{r7, pc}
	...

08011694 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011694:	b580      	push	{r7, lr}
 8011696:	b088      	sub	sp, #32
 8011698:	af00      	add	r7, sp, #0
 801169a:	60f8      	str	r0, [r7, #12]
 801169c:	60b9      	str	r1, [r7, #8]
 801169e:	607a      	str	r2, [r7, #4]
 80116a0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80116a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80116ac:	3b01      	subs	r3, #1
 80116ae:	009b      	lsls	r3, r3, #2
 80116b0:	4413      	add	r3, r2
 80116b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80116b4:	69bb      	ldr	r3, [r7, #24]
 80116b6:	f023 0307 	bic.w	r3, r3, #7
 80116ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80116bc:	69bb      	ldr	r3, [r7, #24]
 80116be:	f003 0307 	and.w	r3, r3, #7
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d00b      	beq.n	80116de <prvInitialiseNewTask+0x4a>
	__asm volatile
 80116c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116ca:	f383 8811 	msr	BASEPRI, r3
 80116ce:	f3bf 8f6f 	isb	sy
 80116d2:	f3bf 8f4f 	dsb	sy
 80116d6:	617b      	str	r3, [r7, #20]
}
 80116d8:	bf00      	nop
 80116da:	bf00      	nop
 80116dc:	e7fd      	b.n	80116da <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80116de:	68bb      	ldr	r3, [r7, #8]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d01f      	beq.n	8011724 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80116e4:	2300      	movs	r3, #0
 80116e6:	61fb      	str	r3, [r7, #28]
 80116e8:	e012      	b.n	8011710 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80116ea:	68ba      	ldr	r2, [r7, #8]
 80116ec:	69fb      	ldr	r3, [r7, #28]
 80116ee:	4413      	add	r3, r2
 80116f0:	7819      	ldrb	r1, [r3, #0]
 80116f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80116f4:	69fb      	ldr	r3, [r7, #28]
 80116f6:	4413      	add	r3, r2
 80116f8:	3334      	adds	r3, #52	@ 0x34
 80116fa:	460a      	mov	r2, r1
 80116fc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80116fe:	68ba      	ldr	r2, [r7, #8]
 8011700:	69fb      	ldr	r3, [r7, #28]
 8011702:	4413      	add	r3, r2
 8011704:	781b      	ldrb	r3, [r3, #0]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d006      	beq.n	8011718 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801170a:	69fb      	ldr	r3, [r7, #28]
 801170c:	3301      	adds	r3, #1
 801170e:	61fb      	str	r3, [r7, #28]
 8011710:	69fb      	ldr	r3, [r7, #28]
 8011712:	2b0f      	cmp	r3, #15
 8011714:	d9e9      	bls.n	80116ea <prvInitialiseNewTask+0x56>
 8011716:	e000      	b.n	801171a <prvInitialiseNewTask+0x86>
			{
				break;
 8011718:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801171a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801171c:	2200      	movs	r2, #0
 801171e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8011722:	e003      	b.n	801172c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011726:	2200      	movs	r2, #0
 8011728:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801172c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801172e:	2b06      	cmp	r3, #6
 8011730:	d901      	bls.n	8011736 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011732:	2306      	movs	r3, #6
 8011734:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011738:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801173a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801173c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801173e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011740:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8011742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011744:	2200      	movs	r2, #0
 8011746:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801174a:	3304      	adds	r3, #4
 801174c:	4618      	mov	r0, r3
 801174e:	f7ff f88a 	bl	8010866 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011754:	3318      	adds	r3, #24
 8011756:	4618      	mov	r0, r3
 8011758:	f7ff f885 	bl	8010866 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801175c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801175e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011760:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011764:	f1c3 0207 	rsb	r2, r3, #7
 8011768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801176a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801176c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801176e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011770:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011774:	2200      	movs	r2, #0
 8011776:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801177a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801177c:	2200      	movs	r2, #0
 801177e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8011782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011784:	334c      	adds	r3, #76	@ 0x4c
 8011786:	224c      	movs	r2, #76	@ 0x4c
 8011788:	2100      	movs	r1, #0
 801178a:	4618      	mov	r0, r3
 801178c:	f002 f8db 	bl	8013946 <memset>
 8011790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011792:	4a0d      	ldr	r2, [pc, #52]	@ (80117c8 <prvInitialiseNewTask+0x134>)
 8011794:	651a      	str	r2, [r3, #80]	@ 0x50
 8011796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011798:	4a0c      	ldr	r2, [pc, #48]	@ (80117cc <prvInitialiseNewTask+0x138>)
 801179a:	655a      	str	r2, [r3, #84]	@ 0x54
 801179c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801179e:	4a0c      	ldr	r2, [pc, #48]	@ (80117d0 <prvInitialiseNewTask+0x13c>)
 80117a0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80117a2:	683a      	ldr	r2, [r7, #0]
 80117a4:	68f9      	ldr	r1, [r7, #12]
 80117a6:	69b8      	ldr	r0, [r7, #24]
 80117a8:	f000 fefa 	bl	80125a0 <pxPortInitialiseStack>
 80117ac:	4602      	mov	r2, r0
 80117ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80117b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d002      	beq.n	80117be <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80117b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80117bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80117be:	bf00      	nop
 80117c0:	3720      	adds	r7, #32
 80117c2:	46bd      	mov	sp, r7
 80117c4:	bd80      	pop	{r7, pc}
 80117c6:	bf00      	nop
 80117c8:	200069bc 	.word	0x200069bc
 80117cc:	20006a24 	.word	0x20006a24
 80117d0:	20006a8c 	.word	0x20006a8c

080117d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80117d4:	b580      	push	{r7, lr}
 80117d6:	b082      	sub	sp, #8
 80117d8:	af00      	add	r7, sp, #0
 80117da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80117dc:	f001 f814 	bl	8012808 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80117e0:	4b2a      	ldr	r3, [pc, #168]	@ (801188c <prvAddNewTaskToReadyList+0xb8>)
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	3301      	adds	r3, #1
 80117e6:	4a29      	ldr	r2, [pc, #164]	@ (801188c <prvAddNewTaskToReadyList+0xb8>)
 80117e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80117ea:	4b29      	ldr	r3, [pc, #164]	@ (8011890 <prvAddNewTaskToReadyList+0xbc>)
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d109      	bne.n	8011806 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80117f2:	4a27      	ldr	r2, [pc, #156]	@ (8011890 <prvAddNewTaskToReadyList+0xbc>)
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80117f8:	4b24      	ldr	r3, [pc, #144]	@ (801188c <prvAddNewTaskToReadyList+0xb8>)
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	2b01      	cmp	r3, #1
 80117fe:	d110      	bne.n	8011822 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011800:	f000 fbe4 	bl	8011fcc <prvInitialiseTaskLists>
 8011804:	e00d      	b.n	8011822 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011806:	4b23      	ldr	r3, [pc, #140]	@ (8011894 <prvAddNewTaskToReadyList+0xc0>)
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d109      	bne.n	8011822 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801180e:	4b20      	ldr	r3, [pc, #128]	@ (8011890 <prvAddNewTaskToReadyList+0xbc>)
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011818:	429a      	cmp	r2, r3
 801181a:	d802      	bhi.n	8011822 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801181c:	4a1c      	ldr	r2, [pc, #112]	@ (8011890 <prvAddNewTaskToReadyList+0xbc>)
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011822:	4b1d      	ldr	r3, [pc, #116]	@ (8011898 <prvAddNewTaskToReadyList+0xc4>)
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	3301      	adds	r3, #1
 8011828:	4a1b      	ldr	r2, [pc, #108]	@ (8011898 <prvAddNewTaskToReadyList+0xc4>)
 801182a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011830:	2201      	movs	r2, #1
 8011832:	409a      	lsls	r2, r3
 8011834:	4b19      	ldr	r3, [pc, #100]	@ (801189c <prvAddNewTaskToReadyList+0xc8>)
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	4313      	orrs	r3, r2
 801183a:	4a18      	ldr	r2, [pc, #96]	@ (801189c <prvAddNewTaskToReadyList+0xc8>)
 801183c:	6013      	str	r3, [r2, #0]
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011842:	4613      	mov	r3, r2
 8011844:	009b      	lsls	r3, r3, #2
 8011846:	4413      	add	r3, r2
 8011848:	009b      	lsls	r3, r3, #2
 801184a:	4a15      	ldr	r2, [pc, #84]	@ (80118a0 <prvAddNewTaskToReadyList+0xcc>)
 801184c:	441a      	add	r2, r3
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	3304      	adds	r3, #4
 8011852:	4619      	mov	r1, r3
 8011854:	4610      	mov	r0, r2
 8011856:	f7ff f813 	bl	8010880 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801185a:	f001 f807 	bl	801286c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801185e:	4b0d      	ldr	r3, [pc, #52]	@ (8011894 <prvAddNewTaskToReadyList+0xc0>)
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d00e      	beq.n	8011884 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011866:	4b0a      	ldr	r3, [pc, #40]	@ (8011890 <prvAddNewTaskToReadyList+0xbc>)
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011870:	429a      	cmp	r2, r3
 8011872:	d207      	bcs.n	8011884 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011874:	4b0b      	ldr	r3, [pc, #44]	@ (80118a4 <prvAddNewTaskToReadyList+0xd0>)
 8011876:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801187a:	601a      	str	r2, [r3, #0]
 801187c:	f3bf 8f4f 	dsb	sy
 8011880:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011884:	bf00      	nop
 8011886:	3708      	adds	r7, #8
 8011888:	46bd      	mov	sp, r7
 801188a:	bd80      	pop	{r7, pc}
 801188c:	20002d68 	.word	0x20002d68
 8011890:	20002c68 	.word	0x20002c68
 8011894:	20002d74 	.word	0x20002d74
 8011898:	20002d84 	.word	0x20002d84
 801189c:	20002d70 	.word	0x20002d70
 80118a0:	20002c6c 	.word	0x20002c6c
 80118a4:	e000ed04 	.word	0xe000ed04

080118a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b084      	sub	sp, #16
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80118b0:	2300      	movs	r3, #0
 80118b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d018      	beq.n	80118ec <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80118ba:	4b14      	ldr	r3, [pc, #80]	@ (801190c <vTaskDelay+0x64>)
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d00b      	beq.n	80118da <vTaskDelay+0x32>
	__asm volatile
 80118c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118c6:	f383 8811 	msr	BASEPRI, r3
 80118ca:	f3bf 8f6f 	isb	sy
 80118ce:	f3bf 8f4f 	dsb	sy
 80118d2:	60bb      	str	r3, [r7, #8]
}
 80118d4:	bf00      	nop
 80118d6:	bf00      	nop
 80118d8:	e7fd      	b.n	80118d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80118da:	f000 f885 	bl	80119e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80118de:	2100      	movs	r1, #0
 80118e0:	6878      	ldr	r0, [r7, #4]
 80118e2:	f000 fdf7 	bl	80124d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80118e6:	f000 f88d 	bl	8011a04 <xTaskResumeAll>
 80118ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d107      	bne.n	8011902 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80118f2:	4b07      	ldr	r3, [pc, #28]	@ (8011910 <vTaskDelay+0x68>)
 80118f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80118f8:	601a      	str	r2, [r3, #0]
 80118fa:	f3bf 8f4f 	dsb	sy
 80118fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011902:	bf00      	nop
 8011904:	3710      	adds	r7, #16
 8011906:	46bd      	mov	sp, r7
 8011908:	bd80      	pop	{r7, pc}
 801190a:	bf00      	nop
 801190c:	20002d90 	.word	0x20002d90
 8011910:	e000ed04 	.word	0xe000ed04

08011914 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011914:	b580      	push	{r7, lr}
 8011916:	b08a      	sub	sp, #40	@ 0x28
 8011918:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801191a:	2300      	movs	r3, #0
 801191c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801191e:	2300      	movs	r3, #0
 8011920:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011922:	463a      	mov	r2, r7
 8011924:	1d39      	adds	r1, r7, #4
 8011926:	f107 0308 	add.w	r3, r7, #8
 801192a:	4618      	mov	r0, r3
 801192c:	f7f0 fd3c 	bl	80023a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011930:	6839      	ldr	r1, [r7, #0]
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	68ba      	ldr	r2, [r7, #8]
 8011936:	9202      	str	r2, [sp, #8]
 8011938:	9301      	str	r3, [sp, #4]
 801193a:	2300      	movs	r3, #0
 801193c:	9300      	str	r3, [sp, #0]
 801193e:	2300      	movs	r3, #0
 8011940:	460a      	mov	r2, r1
 8011942:	4921      	ldr	r1, [pc, #132]	@ (80119c8 <vTaskStartScheduler+0xb4>)
 8011944:	4821      	ldr	r0, [pc, #132]	@ (80119cc <vTaskStartScheduler+0xb8>)
 8011946:	f7ff fdff 	bl	8011548 <xTaskCreateStatic>
 801194a:	4603      	mov	r3, r0
 801194c:	4a20      	ldr	r2, [pc, #128]	@ (80119d0 <vTaskStartScheduler+0xbc>)
 801194e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011950:	4b1f      	ldr	r3, [pc, #124]	@ (80119d0 <vTaskStartScheduler+0xbc>)
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d002      	beq.n	801195e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011958:	2301      	movs	r3, #1
 801195a:	617b      	str	r3, [r7, #20]
 801195c:	e001      	b.n	8011962 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801195e:	2300      	movs	r3, #0
 8011960:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011962:	697b      	ldr	r3, [r7, #20]
 8011964:	2b01      	cmp	r3, #1
 8011966:	d11b      	bne.n	80119a0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8011968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801196c:	f383 8811 	msr	BASEPRI, r3
 8011970:	f3bf 8f6f 	isb	sy
 8011974:	f3bf 8f4f 	dsb	sy
 8011978:	613b      	str	r3, [r7, #16]
}
 801197a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801197c:	4b15      	ldr	r3, [pc, #84]	@ (80119d4 <vTaskStartScheduler+0xc0>)
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	334c      	adds	r3, #76	@ 0x4c
 8011982:	4a15      	ldr	r2, [pc, #84]	@ (80119d8 <vTaskStartScheduler+0xc4>)
 8011984:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011986:	4b15      	ldr	r3, [pc, #84]	@ (80119dc <vTaskStartScheduler+0xc8>)
 8011988:	f04f 32ff 	mov.w	r2, #4294967295
 801198c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801198e:	4b14      	ldr	r3, [pc, #80]	@ (80119e0 <vTaskStartScheduler+0xcc>)
 8011990:	2201      	movs	r2, #1
 8011992:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011994:	4b13      	ldr	r3, [pc, #76]	@ (80119e4 <vTaskStartScheduler+0xd0>)
 8011996:	2200      	movs	r2, #0
 8011998:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801199a:	f000 fe91 	bl	80126c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801199e:	e00f      	b.n	80119c0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80119a0:	697b      	ldr	r3, [r7, #20]
 80119a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119a6:	d10b      	bne.n	80119c0 <vTaskStartScheduler+0xac>
	__asm volatile
 80119a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119ac:	f383 8811 	msr	BASEPRI, r3
 80119b0:	f3bf 8f6f 	isb	sy
 80119b4:	f3bf 8f4f 	dsb	sy
 80119b8:	60fb      	str	r3, [r7, #12]
}
 80119ba:	bf00      	nop
 80119bc:	bf00      	nop
 80119be:	e7fd      	b.n	80119bc <vTaskStartScheduler+0xa8>
}
 80119c0:	bf00      	nop
 80119c2:	3718      	adds	r7, #24
 80119c4:	46bd      	mov	sp, r7
 80119c6:	bd80      	pop	{r7, pc}
 80119c8:	08016f3c 	.word	0x08016f3c
 80119cc:	08011f9d 	.word	0x08011f9d
 80119d0:	20002d8c 	.word	0x20002d8c
 80119d4:	20002c68 	.word	0x20002c68
 80119d8:	20000034 	.word	0x20000034
 80119dc:	20002d88 	.word	0x20002d88
 80119e0:	20002d74 	.word	0x20002d74
 80119e4:	20002d6c 	.word	0x20002d6c

080119e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80119e8:	b480      	push	{r7}
 80119ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80119ec:	4b04      	ldr	r3, [pc, #16]	@ (8011a00 <vTaskSuspendAll+0x18>)
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	3301      	adds	r3, #1
 80119f2:	4a03      	ldr	r2, [pc, #12]	@ (8011a00 <vTaskSuspendAll+0x18>)
 80119f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80119f6:	bf00      	nop
 80119f8:	46bd      	mov	sp, r7
 80119fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119fe:	4770      	bx	lr
 8011a00:	20002d90 	.word	0x20002d90

08011a04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011a04:	b580      	push	{r7, lr}
 8011a06:	b084      	sub	sp, #16
 8011a08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011a0e:	2300      	movs	r3, #0
 8011a10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011a12:	4b42      	ldr	r3, [pc, #264]	@ (8011b1c <xTaskResumeAll+0x118>)
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d10b      	bne.n	8011a32 <xTaskResumeAll+0x2e>
	__asm volatile
 8011a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a1e:	f383 8811 	msr	BASEPRI, r3
 8011a22:	f3bf 8f6f 	isb	sy
 8011a26:	f3bf 8f4f 	dsb	sy
 8011a2a:	603b      	str	r3, [r7, #0]
}
 8011a2c:	bf00      	nop
 8011a2e:	bf00      	nop
 8011a30:	e7fd      	b.n	8011a2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011a32:	f000 fee9 	bl	8012808 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011a36:	4b39      	ldr	r3, [pc, #228]	@ (8011b1c <xTaskResumeAll+0x118>)
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	3b01      	subs	r3, #1
 8011a3c:	4a37      	ldr	r2, [pc, #220]	@ (8011b1c <xTaskResumeAll+0x118>)
 8011a3e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011a40:	4b36      	ldr	r3, [pc, #216]	@ (8011b1c <xTaskResumeAll+0x118>)
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d161      	bne.n	8011b0c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011a48:	4b35      	ldr	r3, [pc, #212]	@ (8011b20 <xTaskResumeAll+0x11c>)
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d05d      	beq.n	8011b0c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011a50:	e02e      	b.n	8011ab0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a52:	4b34      	ldr	r3, [pc, #208]	@ (8011b24 <xTaskResumeAll+0x120>)
 8011a54:	68db      	ldr	r3, [r3, #12]
 8011a56:	68db      	ldr	r3, [r3, #12]
 8011a58:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	3318      	adds	r3, #24
 8011a5e:	4618      	mov	r0, r3
 8011a60:	f7fe ff6b 	bl	801093a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	3304      	adds	r3, #4
 8011a68:	4618      	mov	r0, r3
 8011a6a:	f7fe ff66 	bl	801093a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a72:	2201      	movs	r2, #1
 8011a74:	409a      	lsls	r2, r3
 8011a76:	4b2c      	ldr	r3, [pc, #176]	@ (8011b28 <xTaskResumeAll+0x124>)
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	4313      	orrs	r3, r2
 8011a7c:	4a2a      	ldr	r2, [pc, #168]	@ (8011b28 <xTaskResumeAll+0x124>)
 8011a7e:	6013      	str	r3, [r2, #0]
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a84:	4613      	mov	r3, r2
 8011a86:	009b      	lsls	r3, r3, #2
 8011a88:	4413      	add	r3, r2
 8011a8a:	009b      	lsls	r3, r3, #2
 8011a8c:	4a27      	ldr	r2, [pc, #156]	@ (8011b2c <xTaskResumeAll+0x128>)
 8011a8e:	441a      	add	r2, r3
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	3304      	adds	r3, #4
 8011a94:	4619      	mov	r1, r3
 8011a96:	4610      	mov	r0, r2
 8011a98:	f7fe fef2 	bl	8010880 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011aa0:	4b23      	ldr	r3, [pc, #140]	@ (8011b30 <xTaskResumeAll+0x12c>)
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011aa6:	429a      	cmp	r2, r3
 8011aa8:	d302      	bcc.n	8011ab0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8011aaa:	4b22      	ldr	r3, [pc, #136]	@ (8011b34 <xTaskResumeAll+0x130>)
 8011aac:	2201      	movs	r2, #1
 8011aae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011ab0:	4b1c      	ldr	r3, [pc, #112]	@ (8011b24 <xTaskResumeAll+0x120>)
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d1cc      	bne.n	8011a52 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d001      	beq.n	8011ac2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011abe:	f000 fb29 	bl	8012114 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011ac2:	4b1d      	ldr	r3, [pc, #116]	@ (8011b38 <xTaskResumeAll+0x134>)
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d010      	beq.n	8011af0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011ace:	f000 f837 	bl	8011b40 <xTaskIncrementTick>
 8011ad2:	4603      	mov	r3, r0
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d002      	beq.n	8011ade <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011ad8:	4b16      	ldr	r3, [pc, #88]	@ (8011b34 <xTaskResumeAll+0x130>)
 8011ada:	2201      	movs	r2, #1
 8011adc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	3b01      	subs	r3, #1
 8011ae2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d1f1      	bne.n	8011ace <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8011aea:	4b13      	ldr	r3, [pc, #76]	@ (8011b38 <xTaskResumeAll+0x134>)
 8011aec:	2200      	movs	r2, #0
 8011aee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011af0:	4b10      	ldr	r3, [pc, #64]	@ (8011b34 <xTaskResumeAll+0x130>)
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d009      	beq.n	8011b0c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011af8:	2301      	movs	r3, #1
 8011afa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011afc:	4b0f      	ldr	r3, [pc, #60]	@ (8011b3c <xTaskResumeAll+0x138>)
 8011afe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011b02:	601a      	str	r2, [r3, #0]
 8011b04:	f3bf 8f4f 	dsb	sy
 8011b08:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011b0c:	f000 feae 	bl	801286c <vPortExitCritical>

	return xAlreadyYielded;
 8011b10:	68bb      	ldr	r3, [r7, #8]
}
 8011b12:	4618      	mov	r0, r3
 8011b14:	3710      	adds	r7, #16
 8011b16:	46bd      	mov	sp, r7
 8011b18:	bd80      	pop	{r7, pc}
 8011b1a:	bf00      	nop
 8011b1c:	20002d90 	.word	0x20002d90
 8011b20:	20002d68 	.word	0x20002d68
 8011b24:	20002d28 	.word	0x20002d28
 8011b28:	20002d70 	.word	0x20002d70
 8011b2c:	20002c6c 	.word	0x20002c6c
 8011b30:	20002c68 	.word	0x20002c68
 8011b34:	20002d7c 	.word	0x20002d7c
 8011b38:	20002d78 	.word	0x20002d78
 8011b3c:	e000ed04 	.word	0xe000ed04

08011b40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011b40:	b580      	push	{r7, lr}
 8011b42:	b086      	sub	sp, #24
 8011b44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011b46:	2300      	movs	r3, #0
 8011b48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011b4a:	4b4f      	ldr	r3, [pc, #316]	@ (8011c88 <xTaskIncrementTick+0x148>)
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	f040 808f 	bne.w	8011c72 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011b54:	4b4d      	ldr	r3, [pc, #308]	@ (8011c8c <xTaskIncrementTick+0x14c>)
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	3301      	adds	r3, #1
 8011b5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011b5c:	4a4b      	ldr	r2, [pc, #300]	@ (8011c8c <xTaskIncrementTick+0x14c>)
 8011b5e:	693b      	ldr	r3, [r7, #16]
 8011b60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011b62:	693b      	ldr	r3, [r7, #16]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d121      	bne.n	8011bac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8011b68:	4b49      	ldr	r3, [pc, #292]	@ (8011c90 <xTaskIncrementTick+0x150>)
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d00b      	beq.n	8011b8a <xTaskIncrementTick+0x4a>
	__asm volatile
 8011b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b76:	f383 8811 	msr	BASEPRI, r3
 8011b7a:	f3bf 8f6f 	isb	sy
 8011b7e:	f3bf 8f4f 	dsb	sy
 8011b82:	603b      	str	r3, [r7, #0]
}
 8011b84:	bf00      	nop
 8011b86:	bf00      	nop
 8011b88:	e7fd      	b.n	8011b86 <xTaskIncrementTick+0x46>
 8011b8a:	4b41      	ldr	r3, [pc, #260]	@ (8011c90 <xTaskIncrementTick+0x150>)
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	60fb      	str	r3, [r7, #12]
 8011b90:	4b40      	ldr	r3, [pc, #256]	@ (8011c94 <xTaskIncrementTick+0x154>)
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	4a3e      	ldr	r2, [pc, #248]	@ (8011c90 <xTaskIncrementTick+0x150>)
 8011b96:	6013      	str	r3, [r2, #0]
 8011b98:	4a3e      	ldr	r2, [pc, #248]	@ (8011c94 <xTaskIncrementTick+0x154>)
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	6013      	str	r3, [r2, #0]
 8011b9e:	4b3e      	ldr	r3, [pc, #248]	@ (8011c98 <xTaskIncrementTick+0x158>)
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	3301      	adds	r3, #1
 8011ba4:	4a3c      	ldr	r2, [pc, #240]	@ (8011c98 <xTaskIncrementTick+0x158>)
 8011ba6:	6013      	str	r3, [r2, #0]
 8011ba8:	f000 fab4 	bl	8012114 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011bac:	4b3b      	ldr	r3, [pc, #236]	@ (8011c9c <xTaskIncrementTick+0x15c>)
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	693a      	ldr	r2, [r7, #16]
 8011bb2:	429a      	cmp	r2, r3
 8011bb4:	d348      	bcc.n	8011c48 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011bb6:	4b36      	ldr	r3, [pc, #216]	@ (8011c90 <xTaskIncrementTick+0x150>)
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d104      	bne.n	8011bca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011bc0:	4b36      	ldr	r3, [pc, #216]	@ (8011c9c <xTaskIncrementTick+0x15c>)
 8011bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8011bc6:	601a      	str	r2, [r3, #0]
					break;
 8011bc8:	e03e      	b.n	8011c48 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011bca:	4b31      	ldr	r3, [pc, #196]	@ (8011c90 <xTaskIncrementTick+0x150>)
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	68db      	ldr	r3, [r3, #12]
 8011bd0:	68db      	ldr	r3, [r3, #12]
 8011bd2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011bd4:	68bb      	ldr	r3, [r7, #8]
 8011bd6:	685b      	ldr	r3, [r3, #4]
 8011bd8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011bda:	693a      	ldr	r2, [r7, #16]
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	429a      	cmp	r2, r3
 8011be0:	d203      	bcs.n	8011bea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011be2:	4a2e      	ldr	r2, [pc, #184]	@ (8011c9c <xTaskIncrementTick+0x15c>)
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011be8:	e02e      	b.n	8011c48 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011bea:	68bb      	ldr	r3, [r7, #8]
 8011bec:	3304      	adds	r3, #4
 8011bee:	4618      	mov	r0, r3
 8011bf0:	f7fe fea3 	bl	801093a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011bf4:	68bb      	ldr	r3, [r7, #8]
 8011bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d004      	beq.n	8011c06 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011bfc:	68bb      	ldr	r3, [r7, #8]
 8011bfe:	3318      	adds	r3, #24
 8011c00:	4618      	mov	r0, r3
 8011c02:	f7fe fe9a 	bl	801093a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011c06:	68bb      	ldr	r3, [r7, #8]
 8011c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c0a:	2201      	movs	r2, #1
 8011c0c:	409a      	lsls	r2, r3
 8011c0e:	4b24      	ldr	r3, [pc, #144]	@ (8011ca0 <xTaskIncrementTick+0x160>)
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	4313      	orrs	r3, r2
 8011c14:	4a22      	ldr	r2, [pc, #136]	@ (8011ca0 <xTaskIncrementTick+0x160>)
 8011c16:	6013      	str	r3, [r2, #0]
 8011c18:	68bb      	ldr	r3, [r7, #8]
 8011c1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011c1c:	4613      	mov	r3, r2
 8011c1e:	009b      	lsls	r3, r3, #2
 8011c20:	4413      	add	r3, r2
 8011c22:	009b      	lsls	r3, r3, #2
 8011c24:	4a1f      	ldr	r2, [pc, #124]	@ (8011ca4 <xTaskIncrementTick+0x164>)
 8011c26:	441a      	add	r2, r3
 8011c28:	68bb      	ldr	r3, [r7, #8]
 8011c2a:	3304      	adds	r3, #4
 8011c2c:	4619      	mov	r1, r3
 8011c2e:	4610      	mov	r0, r2
 8011c30:	f7fe fe26 	bl	8010880 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011c34:	68bb      	ldr	r3, [r7, #8]
 8011c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011c38:	4b1b      	ldr	r3, [pc, #108]	@ (8011ca8 <xTaskIncrementTick+0x168>)
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c3e:	429a      	cmp	r2, r3
 8011c40:	d3b9      	bcc.n	8011bb6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8011c42:	2301      	movs	r3, #1
 8011c44:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011c46:	e7b6      	b.n	8011bb6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011c48:	4b17      	ldr	r3, [pc, #92]	@ (8011ca8 <xTaskIncrementTick+0x168>)
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011c4e:	4915      	ldr	r1, [pc, #84]	@ (8011ca4 <xTaskIncrementTick+0x164>)
 8011c50:	4613      	mov	r3, r2
 8011c52:	009b      	lsls	r3, r3, #2
 8011c54:	4413      	add	r3, r2
 8011c56:	009b      	lsls	r3, r3, #2
 8011c58:	440b      	add	r3, r1
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	2b01      	cmp	r3, #1
 8011c5e:	d901      	bls.n	8011c64 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8011c60:	2301      	movs	r3, #1
 8011c62:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011c64:	4b11      	ldr	r3, [pc, #68]	@ (8011cac <xTaskIncrementTick+0x16c>)
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d007      	beq.n	8011c7c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8011c6c:	2301      	movs	r3, #1
 8011c6e:	617b      	str	r3, [r7, #20]
 8011c70:	e004      	b.n	8011c7c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011c72:	4b0f      	ldr	r3, [pc, #60]	@ (8011cb0 <xTaskIncrementTick+0x170>)
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	3301      	adds	r3, #1
 8011c78:	4a0d      	ldr	r2, [pc, #52]	@ (8011cb0 <xTaskIncrementTick+0x170>)
 8011c7a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011c7c:	697b      	ldr	r3, [r7, #20]
}
 8011c7e:	4618      	mov	r0, r3
 8011c80:	3718      	adds	r7, #24
 8011c82:	46bd      	mov	sp, r7
 8011c84:	bd80      	pop	{r7, pc}
 8011c86:	bf00      	nop
 8011c88:	20002d90 	.word	0x20002d90
 8011c8c:	20002d6c 	.word	0x20002d6c
 8011c90:	20002d20 	.word	0x20002d20
 8011c94:	20002d24 	.word	0x20002d24
 8011c98:	20002d80 	.word	0x20002d80
 8011c9c:	20002d88 	.word	0x20002d88
 8011ca0:	20002d70 	.word	0x20002d70
 8011ca4:	20002c6c 	.word	0x20002c6c
 8011ca8:	20002c68 	.word	0x20002c68
 8011cac:	20002d7c 	.word	0x20002d7c
 8011cb0:	20002d78 	.word	0x20002d78

08011cb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011cb4:	b480      	push	{r7}
 8011cb6:	b087      	sub	sp, #28
 8011cb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011cba:	4b2a      	ldr	r3, [pc, #168]	@ (8011d64 <vTaskSwitchContext+0xb0>)
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d003      	beq.n	8011cca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011cc2:	4b29      	ldr	r3, [pc, #164]	@ (8011d68 <vTaskSwitchContext+0xb4>)
 8011cc4:	2201      	movs	r2, #1
 8011cc6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011cc8:	e045      	b.n	8011d56 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8011cca:	4b27      	ldr	r3, [pc, #156]	@ (8011d68 <vTaskSwitchContext+0xb4>)
 8011ccc:	2200      	movs	r2, #0
 8011cce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011cd0:	4b26      	ldr	r3, [pc, #152]	@ (8011d6c <vTaskSwitchContext+0xb8>)
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	fab3 f383 	clz	r3, r3
 8011cdc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011cde:	7afb      	ldrb	r3, [r7, #11]
 8011ce0:	f1c3 031f 	rsb	r3, r3, #31
 8011ce4:	617b      	str	r3, [r7, #20]
 8011ce6:	4922      	ldr	r1, [pc, #136]	@ (8011d70 <vTaskSwitchContext+0xbc>)
 8011ce8:	697a      	ldr	r2, [r7, #20]
 8011cea:	4613      	mov	r3, r2
 8011cec:	009b      	lsls	r3, r3, #2
 8011cee:	4413      	add	r3, r2
 8011cf0:	009b      	lsls	r3, r3, #2
 8011cf2:	440b      	add	r3, r1
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d10b      	bne.n	8011d12 <vTaskSwitchContext+0x5e>
	__asm volatile
 8011cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011cfe:	f383 8811 	msr	BASEPRI, r3
 8011d02:	f3bf 8f6f 	isb	sy
 8011d06:	f3bf 8f4f 	dsb	sy
 8011d0a:	607b      	str	r3, [r7, #4]
}
 8011d0c:	bf00      	nop
 8011d0e:	bf00      	nop
 8011d10:	e7fd      	b.n	8011d0e <vTaskSwitchContext+0x5a>
 8011d12:	697a      	ldr	r2, [r7, #20]
 8011d14:	4613      	mov	r3, r2
 8011d16:	009b      	lsls	r3, r3, #2
 8011d18:	4413      	add	r3, r2
 8011d1a:	009b      	lsls	r3, r3, #2
 8011d1c:	4a14      	ldr	r2, [pc, #80]	@ (8011d70 <vTaskSwitchContext+0xbc>)
 8011d1e:	4413      	add	r3, r2
 8011d20:	613b      	str	r3, [r7, #16]
 8011d22:	693b      	ldr	r3, [r7, #16]
 8011d24:	685b      	ldr	r3, [r3, #4]
 8011d26:	685a      	ldr	r2, [r3, #4]
 8011d28:	693b      	ldr	r3, [r7, #16]
 8011d2a:	605a      	str	r2, [r3, #4]
 8011d2c:	693b      	ldr	r3, [r7, #16]
 8011d2e:	685a      	ldr	r2, [r3, #4]
 8011d30:	693b      	ldr	r3, [r7, #16]
 8011d32:	3308      	adds	r3, #8
 8011d34:	429a      	cmp	r2, r3
 8011d36:	d104      	bne.n	8011d42 <vTaskSwitchContext+0x8e>
 8011d38:	693b      	ldr	r3, [r7, #16]
 8011d3a:	685b      	ldr	r3, [r3, #4]
 8011d3c:	685a      	ldr	r2, [r3, #4]
 8011d3e:	693b      	ldr	r3, [r7, #16]
 8011d40:	605a      	str	r2, [r3, #4]
 8011d42:	693b      	ldr	r3, [r7, #16]
 8011d44:	685b      	ldr	r3, [r3, #4]
 8011d46:	68db      	ldr	r3, [r3, #12]
 8011d48:	4a0a      	ldr	r2, [pc, #40]	@ (8011d74 <vTaskSwitchContext+0xc0>)
 8011d4a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011d4c:	4b09      	ldr	r3, [pc, #36]	@ (8011d74 <vTaskSwitchContext+0xc0>)
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	334c      	adds	r3, #76	@ 0x4c
 8011d52:	4a09      	ldr	r2, [pc, #36]	@ (8011d78 <vTaskSwitchContext+0xc4>)
 8011d54:	6013      	str	r3, [r2, #0]
}
 8011d56:	bf00      	nop
 8011d58:	371c      	adds	r7, #28
 8011d5a:	46bd      	mov	sp, r7
 8011d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d60:	4770      	bx	lr
 8011d62:	bf00      	nop
 8011d64:	20002d90 	.word	0x20002d90
 8011d68:	20002d7c 	.word	0x20002d7c
 8011d6c:	20002d70 	.word	0x20002d70
 8011d70:	20002c6c 	.word	0x20002c6c
 8011d74:	20002c68 	.word	0x20002c68
 8011d78:	20000034 	.word	0x20000034

08011d7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b084      	sub	sp, #16
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	6078      	str	r0, [r7, #4]
 8011d84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d10b      	bne.n	8011da4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8011d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d90:	f383 8811 	msr	BASEPRI, r3
 8011d94:	f3bf 8f6f 	isb	sy
 8011d98:	f3bf 8f4f 	dsb	sy
 8011d9c:	60fb      	str	r3, [r7, #12]
}
 8011d9e:	bf00      	nop
 8011da0:	bf00      	nop
 8011da2:	e7fd      	b.n	8011da0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011da4:	4b07      	ldr	r3, [pc, #28]	@ (8011dc4 <vTaskPlaceOnEventList+0x48>)
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	3318      	adds	r3, #24
 8011daa:	4619      	mov	r1, r3
 8011dac:	6878      	ldr	r0, [r7, #4]
 8011dae:	f7fe fd8b 	bl	80108c8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011db2:	2101      	movs	r1, #1
 8011db4:	6838      	ldr	r0, [r7, #0]
 8011db6:	f000 fb8d 	bl	80124d4 <prvAddCurrentTaskToDelayedList>
}
 8011dba:	bf00      	nop
 8011dbc:	3710      	adds	r7, #16
 8011dbe:	46bd      	mov	sp, r7
 8011dc0:	bd80      	pop	{r7, pc}
 8011dc2:	bf00      	nop
 8011dc4:	20002c68 	.word	0x20002c68

08011dc8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011dc8:	b580      	push	{r7, lr}
 8011dca:	b086      	sub	sp, #24
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	68db      	ldr	r3, [r3, #12]
 8011dd4:	68db      	ldr	r3, [r3, #12]
 8011dd6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011dd8:	693b      	ldr	r3, [r7, #16]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d10b      	bne.n	8011df6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8011dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011de2:	f383 8811 	msr	BASEPRI, r3
 8011de6:	f3bf 8f6f 	isb	sy
 8011dea:	f3bf 8f4f 	dsb	sy
 8011dee:	60fb      	str	r3, [r7, #12]
}
 8011df0:	bf00      	nop
 8011df2:	bf00      	nop
 8011df4:	e7fd      	b.n	8011df2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011df6:	693b      	ldr	r3, [r7, #16]
 8011df8:	3318      	adds	r3, #24
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	f7fe fd9d 	bl	801093a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011e00:	4b1d      	ldr	r3, [pc, #116]	@ (8011e78 <xTaskRemoveFromEventList+0xb0>)
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d11c      	bne.n	8011e42 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011e08:	693b      	ldr	r3, [r7, #16]
 8011e0a:	3304      	adds	r3, #4
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	f7fe fd94 	bl	801093a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011e12:	693b      	ldr	r3, [r7, #16]
 8011e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e16:	2201      	movs	r2, #1
 8011e18:	409a      	lsls	r2, r3
 8011e1a:	4b18      	ldr	r3, [pc, #96]	@ (8011e7c <xTaskRemoveFromEventList+0xb4>)
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	4313      	orrs	r3, r2
 8011e20:	4a16      	ldr	r2, [pc, #88]	@ (8011e7c <xTaskRemoveFromEventList+0xb4>)
 8011e22:	6013      	str	r3, [r2, #0]
 8011e24:	693b      	ldr	r3, [r7, #16]
 8011e26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011e28:	4613      	mov	r3, r2
 8011e2a:	009b      	lsls	r3, r3, #2
 8011e2c:	4413      	add	r3, r2
 8011e2e:	009b      	lsls	r3, r3, #2
 8011e30:	4a13      	ldr	r2, [pc, #76]	@ (8011e80 <xTaskRemoveFromEventList+0xb8>)
 8011e32:	441a      	add	r2, r3
 8011e34:	693b      	ldr	r3, [r7, #16]
 8011e36:	3304      	adds	r3, #4
 8011e38:	4619      	mov	r1, r3
 8011e3a:	4610      	mov	r0, r2
 8011e3c:	f7fe fd20 	bl	8010880 <vListInsertEnd>
 8011e40:	e005      	b.n	8011e4e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011e42:	693b      	ldr	r3, [r7, #16]
 8011e44:	3318      	adds	r3, #24
 8011e46:	4619      	mov	r1, r3
 8011e48:	480e      	ldr	r0, [pc, #56]	@ (8011e84 <xTaskRemoveFromEventList+0xbc>)
 8011e4a:	f7fe fd19 	bl	8010880 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011e4e:	693b      	ldr	r3, [r7, #16]
 8011e50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011e52:	4b0d      	ldr	r3, [pc, #52]	@ (8011e88 <xTaskRemoveFromEventList+0xc0>)
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e58:	429a      	cmp	r2, r3
 8011e5a:	d905      	bls.n	8011e68 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011e5c:	2301      	movs	r3, #1
 8011e5e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011e60:	4b0a      	ldr	r3, [pc, #40]	@ (8011e8c <xTaskRemoveFromEventList+0xc4>)
 8011e62:	2201      	movs	r2, #1
 8011e64:	601a      	str	r2, [r3, #0]
 8011e66:	e001      	b.n	8011e6c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011e68:	2300      	movs	r3, #0
 8011e6a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011e6c:	697b      	ldr	r3, [r7, #20]
}
 8011e6e:	4618      	mov	r0, r3
 8011e70:	3718      	adds	r7, #24
 8011e72:	46bd      	mov	sp, r7
 8011e74:	bd80      	pop	{r7, pc}
 8011e76:	bf00      	nop
 8011e78:	20002d90 	.word	0x20002d90
 8011e7c:	20002d70 	.word	0x20002d70
 8011e80:	20002c6c 	.word	0x20002c6c
 8011e84:	20002d28 	.word	0x20002d28
 8011e88:	20002c68 	.word	0x20002c68
 8011e8c:	20002d7c 	.word	0x20002d7c

08011e90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011e90:	b480      	push	{r7}
 8011e92:	b083      	sub	sp, #12
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011e98:	4b06      	ldr	r3, [pc, #24]	@ (8011eb4 <vTaskInternalSetTimeOutState+0x24>)
 8011e9a:	681a      	ldr	r2, [r3, #0]
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011ea0:	4b05      	ldr	r3, [pc, #20]	@ (8011eb8 <vTaskInternalSetTimeOutState+0x28>)
 8011ea2:	681a      	ldr	r2, [r3, #0]
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	605a      	str	r2, [r3, #4]
}
 8011ea8:	bf00      	nop
 8011eaa:	370c      	adds	r7, #12
 8011eac:	46bd      	mov	sp, r7
 8011eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb2:	4770      	bx	lr
 8011eb4:	20002d80 	.word	0x20002d80
 8011eb8:	20002d6c 	.word	0x20002d6c

08011ebc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	b088      	sub	sp, #32
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	6078      	str	r0, [r7, #4]
 8011ec4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d10b      	bne.n	8011ee4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8011ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ed0:	f383 8811 	msr	BASEPRI, r3
 8011ed4:	f3bf 8f6f 	isb	sy
 8011ed8:	f3bf 8f4f 	dsb	sy
 8011edc:	613b      	str	r3, [r7, #16]
}
 8011ede:	bf00      	nop
 8011ee0:	bf00      	nop
 8011ee2:	e7fd      	b.n	8011ee0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011ee4:	683b      	ldr	r3, [r7, #0]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d10b      	bne.n	8011f02 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8011eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011eee:	f383 8811 	msr	BASEPRI, r3
 8011ef2:	f3bf 8f6f 	isb	sy
 8011ef6:	f3bf 8f4f 	dsb	sy
 8011efa:	60fb      	str	r3, [r7, #12]
}
 8011efc:	bf00      	nop
 8011efe:	bf00      	nop
 8011f00:	e7fd      	b.n	8011efe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8011f02:	f000 fc81 	bl	8012808 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011f06:	4b1d      	ldr	r3, [pc, #116]	@ (8011f7c <xTaskCheckForTimeOut+0xc0>)
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	685b      	ldr	r3, [r3, #4]
 8011f10:	69ba      	ldr	r2, [r7, #24]
 8011f12:	1ad3      	subs	r3, r2, r3
 8011f14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011f16:	683b      	ldr	r3, [r7, #0]
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f1e:	d102      	bne.n	8011f26 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011f20:	2300      	movs	r3, #0
 8011f22:	61fb      	str	r3, [r7, #28]
 8011f24:	e023      	b.n	8011f6e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	681a      	ldr	r2, [r3, #0]
 8011f2a:	4b15      	ldr	r3, [pc, #84]	@ (8011f80 <xTaskCheckForTimeOut+0xc4>)
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	429a      	cmp	r2, r3
 8011f30:	d007      	beq.n	8011f42 <xTaskCheckForTimeOut+0x86>
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	685b      	ldr	r3, [r3, #4]
 8011f36:	69ba      	ldr	r2, [r7, #24]
 8011f38:	429a      	cmp	r2, r3
 8011f3a:	d302      	bcc.n	8011f42 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011f3c:	2301      	movs	r3, #1
 8011f3e:	61fb      	str	r3, [r7, #28]
 8011f40:	e015      	b.n	8011f6e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011f42:	683b      	ldr	r3, [r7, #0]
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	697a      	ldr	r2, [r7, #20]
 8011f48:	429a      	cmp	r2, r3
 8011f4a:	d20b      	bcs.n	8011f64 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011f4c:	683b      	ldr	r3, [r7, #0]
 8011f4e:	681a      	ldr	r2, [r3, #0]
 8011f50:	697b      	ldr	r3, [r7, #20]
 8011f52:	1ad2      	subs	r2, r2, r3
 8011f54:	683b      	ldr	r3, [r7, #0]
 8011f56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011f58:	6878      	ldr	r0, [r7, #4]
 8011f5a:	f7ff ff99 	bl	8011e90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011f5e:	2300      	movs	r3, #0
 8011f60:	61fb      	str	r3, [r7, #28]
 8011f62:	e004      	b.n	8011f6e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8011f64:	683b      	ldr	r3, [r7, #0]
 8011f66:	2200      	movs	r2, #0
 8011f68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011f6a:	2301      	movs	r3, #1
 8011f6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011f6e:	f000 fc7d 	bl	801286c <vPortExitCritical>

	return xReturn;
 8011f72:	69fb      	ldr	r3, [r7, #28]
}
 8011f74:	4618      	mov	r0, r3
 8011f76:	3720      	adds	r7, #32
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	bd80      	pop	{r7, pc}
 8011f7c:	20002d6c 	.word	0x20002d6c
 8011f80:	20002d80 	.word	0x20002d80

08011f84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011f84:	b480      	push	{r7}
 8011f86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011f88:	4b03      	ldr	r3, [pc, #12]	@ (8011f98 <vTaskMissedYield+0x14>)
 8011f8a:	2201      	movs	r2, #1
 8011f8c:	601a      	str	r2, [r3, #0]
}
 8011f8e:	bf00      	nop
 8011f90:	46bd      	mov	sp, r7
 8011f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f96:	4770      	bx	lr
 8011f98:	20002d7c 	.word	0x20002d7c

08011f9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011f9c:	b580      	push	{r7, lr}
 8011f9e:	b082      	sub	sp, #8
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011fa4:	f000 f852 	bl	801204c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011fa8:	4b06      	ldr	r3, [pc, #24]	@ (8011fc4 <prvIdleTask+0x28>)
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	2b01      	cmp	r3, #1
 8011fae:	d9f9      	bls.n	8011fa4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011fb0:	4b05      	ldr	r3, [pc, #20]	@ (8011fc8 <prvIdleTask+0x2c>)
 8011fb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011fb6:	601a      	str	r2, [r3, #0]
 8011fb8:	f3bf 8f4f 	dsb	sy
 8011fbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011fc0:	e7f0      	b.n	8011fa4 <prvIdleTask+0x8>
 8011fc2:	bf00      	nop
 8011fc4:	20002c6c 	.word	0x20002c6c
 8011fc8:	e000ed04 	.word	0xe000ed04

08011fcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011fcc:	b580      	push	{r7, lr}
 8011fce:	b082      	sub	sp, #8
 8011fd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011fd2:	2300      	movs	r3, #0
 8011fd4:	607b      	str	r3, [r7, #4]
 8011fd6:	e00c      	b.n	8011ff2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011fd8:	687a      	ldr	r2, [r7, #4]
 8011fda:	4613      	mov	r3, r2
 8011fdc:	009b      	lsls	r3, r3, #2
 8011fde:	4413      	add	r3, r2
 8011fe0:	009b      	lsls	r3, r3, #2
 8011fe2:	4a12      	ldr	r2, [pc, #72]	@ (801202c <prvInitialiseTaskLists+0x60>)
 8011fe4:	4413      	add	r3, r2
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	f7fe fc1d 	bl	8010826 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	3301      	adds	r3, #1
 8011ff0:	607b      	str	r3, [r7, #4]
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	2b06      	cmp	r3, #6
 8011ff6:	d9ef      	bls.n	8011fd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011ff8:	480d      	ldr	r0, [pc, #52]	@ (8012030 <prvInitialiseTaskLists+0x64>)
 8011ffa:	f7fe fc14 	bl	8010826 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011ffe:	480d      	ldr	r0, [pc, #52]	@ (8012034 <prvInitialiseTaskLists+0x68>)
 8012000:	f7fe fc11 	bl	8010826 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012004:	480c      	ldr	r0, [pc, #48]	@ (8012038 <prvInitialiseTaskLists+0x6c>)
 8012006:	f7fe fc0e 	bl	8010826 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801200a:	480c      	ldr	r0, [pc, #48]	@ (801203c <prvInitialiseTaskLists+0x70>)
 801200c:	f7fe fc0b 	bl	8010826 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012010:	480b      	ldr	r0, [pc, #44]	@ (8012040 <prvInitialiseTaskLists+0x74>)
 8012012:	f7fe fc08 	bl	8010826 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012016:	4b0b      	ldr	r3, [pc, #44]	@ (8012044 <prvInitialiseTaskLists+0x78>)
 8012018:	4a05      	ldr	r2, [pc, #20]	@ (8012030 <prvInitialiseTaskLists+0x64>)
 801201a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801201c:	4b0a      	ldr	r3, [pc, #40]	@ (8012048 <prvInitialiseTaskLists+0x7c>)
 801201e:	4a05      	ldr	r2, [pc, #20]	@ (8012034 <prvInitialiseTaskLists+0x68>)
 8012020:	601a      	str	r2, [r3, #0]
}
 8012022:	bf00      	nop
 8012024:	3708      	adds	r7, #8
 8012026:	46bd      	mov	sp, r7
 8012028:	bd80      	pop	{r7, pc}
 801202a:	bf00      	nop
 801202c:	20002c6c 	.word	0x20002c6c
 8012030:	20002cf8 	.word	0x20002cf8
 8012034:	20002d0c 	.word	0x20002d0c
 8012038:	20002d28 	.word	0x20002d28
 801203c:	20002d3c 	.word	0x20002d3c
 8012040:	20002d54 	.word	0x20002d54
 8012044:	20002d20 	.word	0x20002d20
 8012048:	20002d24 	.word	0x20002d24

0801204c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801204c:	b580      	push	{r7, lr}
 801204e:	b082      	sub	sp, #8
 8012050:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012052:	e019      	b.n	8012088 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012054:	f000 fbd8 	bl	8012808 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012058:	4b10      	ldr	r3, [pc, #64]	@ (801209c <prvCheckTasksWaitingTermination+0x50>)
 801205a:	68db      	ldr	r3, [r3, #12]
 801205c:	68db      	ldr	r3, [r3, #12]
 801205e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	3304      	adds	r3, #4
 8012064:	4618      	mov	r0, r3
 8012066:	f7fe fc68 	bl	801093a <uxListRemove>
				--uxCurrentNumberOfTasks;
 801206a:	4b0d      	ldr	r3, [pc, #52]	@ (80120a0 <prvCheckTasksWaitingTermination+0x54>)
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	3b01      	subs	r3, #1
 8012070:	4a0b      	ldr	r2, [pc, #44]	@ (80120a0 <prvCheckTasksWaitingTermination+0x54>)
 8012072:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012074:	4b0b      	ldr	r3, [pc, #44]	@ (80120a4 <prvCheckTasksWaitingTermination+0x58>)
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	3b01      	subs	r3, #1
 801207a:	4a0a      	ldr	r2, [pc, #40]	@ (80120a4 <prvCheckTasksWaitingTermination+0x58>)
 801207c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801207e:	f000 fbf5 	bl	801286c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012082:	6878      	ldr	r0, [r7, #4]
 8012084:	f000 f810 	bl	80120a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012088:	4b06      	ldr	r3, [pc, #24]	@ (80120a4 <prvCheckTasksWaitingTermination+0x58>)
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d1e1      	bne.n	8012054 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012090:	bf00      	nop
 8012092:	bf00      	nop
 8012094:	3708      	adds	r7, #8
 8012096:	46bd      	mov	sp, r7
 8012098:	bd80      	pop	{r7, pc}
 801209a:	bf00      	nop
 801209c:	20002d3c 	.word	0x20002d3c
 80120a0:	20002d68 	.word	0x20002d68
 80120a4:	20002d50 	.word	0x20002d50

080120a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80120a8:	b580      	push	{r7, lr}
 80120aa:	b084      	sub	sp, #16
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	334c      	adds	r3, #76	@ 0x4c
 80120b4:	4618      	mov	r0, r3
 80120b6:	f001 fc63 	bl	8013980 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d108      	bne.n	80120d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80120c8:	4618      	mov	r0, r3
 80120ca:	f000 fd8d 	bl	8012be8 <vPortFree>
				vPortFree( pxTCB );
 80120ce:	6878      	ldr	r0, [r7, #4]
 80120d0:	f000 fd8a 	bl	8012be8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80120d4:	e019      	b.n	801210a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80120dc:	2b01      	cmp	r3, #1
 80120de:	d103      	bne.n	80120e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80120e0:	6878      	ldr	r0, [r7, #4]
 80120e2:	f000 fd81 	bl	8012be8 <vPortFree>
	}
 80120e6:	e010      	b.n	801210a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80120ee:	2b02      	cmp	r3, #2
 80120f0:	d00b      	beq.n	801210a <prvDeleteTCB+0x62>
	__asm volatile
 80120f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120f6:	f383 8811 	msr	BASEPRI, r3
 80120fa:	f3bf 8f6f 	isb	sy
 80120fe:	f3bf 8f4f 	dsb	sy
 8012102:	60fb      	str	r3, [r7, #12]
}
 8012104:	bf00      	nop
 8012106:	bf00      	nop
 8012108:	e7fd      	b.n	8012106 <prvDeleteTCB+0x5e>
	}
 801210a:	bf00      	nop
 801210c:	3710      	adds	r7, #16
 801210e:	46bd      	mov	sp, r7
 8012110:	bd80      	pop	{r7, pc}
	...

08012114 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012114:	b480      	push	{r7}
 8012116:	b083      	sub	sp, #12
 8012118:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801211a:	4b0c      	ldr	r3, [pc, #48]	@ (801214c <prvResetNextTaskUnblockTime+0x38>)
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d104      	bne.n	801212e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012124:	4b0a      	ldr	r3, [pc, #40]	@ (8012150 <prvResetNextTaskUnblockTime+0x3c>)
 8012126:	f04f 32ff 	mov.w	r2, #4294967295
 801212a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801212c:	e008      	b.n	8012140 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801212e:	4b07      	ldr	r3, [pc, #28]	@ (801214c <prvResetNextTaskUnblockTime+0x38>)
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	68db      	ldr	r3, [r3, #12]
 8012134:	68db      	ldr	r3, [r3, #12]
 8012136:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	685b      	ldr	r3, [r3, #4]
 801213c:	4a04      	ldr	r2, [pc, #16]	@ (8012150 <prvResetNextTaskUnblockTime+0x3c>)
 801213e:	6013      	str	r3, [r2, #0]
}
 8012140:	bf00      	nop
 8012142:	370c      	adds	r7, #12
 8012144:	46bd      	mov	sp, r7
 8012146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801214a:	4770      	bx	lr
 801214c:	20002d20 	.word	0x20002d20
 8012150:	20002d88 	.word	0x20002d88

08012154 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012154:	b480      	push	{r7}
 8012156:	b083      	sub	sp, #12
 8012158:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801215a:	4b0b      	ldr	r3, [pc, #44]	@ (8012188 <xTaskGetSchedulerState+0x34>)
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	2b00      	cmp	r3, #0
 8012160:	d102      	bne.n	8012168 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012162:	2301      	movs	r3, #1
 8012164:	607b      	str	r3, [r7, #4]
 8012166:	e008      	b.n	801217a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012168:	4b08      	ldr	r3, [pc, #32]	@ (801218c <xTaskGetSchedulerState+0x38>)
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d102      	bne.n	8012176 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012170:	2302      	movs	r3, #2
 8012172:	607b      	str	r3, [r7, #4]
 8012174:	e001      	b.n	801217a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012176:	2300      	movs	r3, #0
 8012178:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801217a:	687b      	ldr	r3, [r7, #4]
	}
 801217c:	4618      	mov	r0, r3
 801217e:	370c      	adds	r7, #12
 8012180:	46bd      	mov	sp, r7
 8012182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012186:	4770      	bx	lr
 8012188:	20002d74 	.word	0x20002d74
 801218c:	20002d90 	.word	0x20002d90

08012190 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012190:	b580      	push	{r7, lr}
 8012192:	b084      	sub	sp, #16
 8012194:	af00      	add	r7, sp, #0
 8012196:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801219c:	2300      	movs	r3, #0
 801219e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d05e      	beq.n	8012264 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80121a6:	68bb      	ldr	r3, [r7, #8]
 80121a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80121aa:	4b31      	ldr	r3, [pc, #196]	@ (8012270 <xTaskPriorityInherit+0xe0>)
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121b0:	429a      	cmp	r2, r3
 80121b2:	d24e      	bcs.n	8012252 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80121b4:	68bb      	ldr	r3, [r7, #8]
 80121b6:	699b      	ldr	r3, [r3, #24]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	db06      	blt.n	80121ca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80121bc:	4b2c      	ldr	r3, [pc, #176]	@ (8012270 <xTaskPriorityInherit+0xe0>)
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121c2:	f1c3 0207 	rsb	r2, r3, #7
 80121c6:	68bb      	ldr	r3, [r7, #8]
 80121c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80121ca:	68bb      	ldr	r3, [r7, #8]
 80121cc:	6959      	ldr	r1, [r3, #20]
 80121ce:	68bb      	ldr	r3, [r7, #8]
 80121d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80121d2:	4613      	mov	r3, r2
 80121d4:	009b      	lsls	r3, r3, #2
 80121d6:	4413      	add	r3, r2
 80121d8:	009b      	lsls	r3, r3, #2
 80121da:	4a26      	ldr	r2, [pc, #152]	@ (8012274 <xTaskPriorityInherit+0xe4>)
 80121dc:	4413      	add	r3, r2
 80121de:	4299      	cmp	r1, r3
 80121e0:	d12f      	bne.n	8012242 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80121e2:	68bb      	ldr	r3, [r7, #8]
 80121e4:	3304      	adds	r3, #4
 80121e6:	4618      	mov	r0, r3
 80121e8:	f7fe fba7 	bl	801093a <uxListRemove>
 80121ec:	4603      	mov	r3, r0
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d10a      	bne.n	8012208 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80121f2:	68bb      	ldr	r3, [r7, #8]
 80121f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121f6:	2201      	movs	r2, #1
 80121f8:	fa02 f303 	lsl.w	r3, r2, r3
 80121fc:	43da      	mvns	r2, r3
 80121fe:	4b1e      	ldr	r3, [pc, #120]	@ (8012278 <xTaskPriorityInherit+0xe8>)
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	4013      	ands	r3, r2
 8012204:	4a1c      	ldr	r2, [pc, #112]	@ (8012278 <xTaskPriorityInherit+0xe8>)
 8012206:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012208:	4b19      	ldr	r3, [pc, #100]	@ (8012270 <xTaskPriorityInherit+0xe0>)
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801220e:	68bb      	ldr	r3, [r7, #8]
 8012210:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012212:	68bb      	ldr	r3, [r7, #8]
 8012214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012216:	2201      	movs	r2, #1
 8012218:	409a      	lsls	r2, r3
 801221a:	4b17      	ldr	r3, [pc, #92]	@ (8012278 <xTaskPriorityInherit+0xe8>)
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	4313      	orrs	r3, r2
 8012220:	4a15      	ldr	r2, [pc, #84]	@ (8012278 <xTaskPriorityInherit+0xe8>)
 8012222:	6013      	str	r3, [r2, #0]
 8012224:	68bb      	ldr	r3, [r7, #8]
 8012226:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012228:	4613      	mov	r3, r2
 801222a:	009b      	lsls	r3, r3, #2
 801222c:	4413      	add	r3, r2
 801222e:	009b      	lsls	r3, r3, #2
 8012230:	4a10      	ldr	r2, [pc, #64]	@ (8012274 <xTaskPriorityInherit+0xe4>)
 8012232:	441a      	add	r2, r3
 8012234:	68bb      	ldr	r3, [r7, #8]
 8012236:	3304      	adds	r3, #4
 8012238:	4619      	mov	r1, r3
 801223a:	4610      	mov	r0, r2
 801223c:	f7fe fb20 	bl	8010880 <vListInsertEnd>
 8012240:	e004      	b.n	801224c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012242:	4b0b      	ldr	r3, [pc, #44]	@ (8012270 <xTaskPriorityInherit+0xe0>)
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012248:	68bb      	ldr	r3, [r7, #8]
 801224a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801224c:	2301      	movs	r3, #1
 801224e:	60fb      	str	r3, [r7, #12]
 8012250:	e008      	b.n	8012264 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012252:	68bb      	ldr	r3, [r7, #8]
 8012254:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012256:	4b06      	ldr	r3, [pc, #24]	@ (8012270 <xTaskPriorityInherit+0xe0>)
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801225c:	429a      	cmp	r2, r3
 801225e:	d201      	bcs.n	8012264 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012260:	2301      	movs	r3, #1
 8012262:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012264:	68fb      	ldr	r3, [r7, #12]
	}
 8012266:	4618      	mov	r0, r3
 8012268:	3710      	adds	r7, #16
 801226a:	46bd      	mov	sp, r7
 801226c:	bd80      	pop	{r7, pc}
 801226e:	bf00      	nop
 8012270:	20002c68 	.word	0x20002c68
 8012274:	20002c6c 	.word	0x20002c6c
 8012278:	20002d70 	.word	0x20002d70

0801227c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801227c:	b580      	push	{r7, lr}
 801227e:	b086      	sub	sp, #24
 8012280:	af00      	add	r7, sp, #0
 8012282:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012288:	2300      	movs	r3, #0
 801228a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	2b00      	cmp	r3, #0
 8012290:	d070      	beq.n	8012374 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012292:	4b3b      	ldr	r3, [pc, #236]	@ (8012380 <xTaskPriorityDisinherit+0x104>)
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	693a      	ldr	r2, [r7, #16]
 8012298:	429a      	cmp	r2, r3
 801229a:	d00b      	beq.n	80122b4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 801229c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122a0:	f383 8811 	msr	BASEPRI, r3
 80122a4:	f3bf 8f6f 	isb	sy
 80122a8:	f3bf 8f4f 	dsb	sy
 80122ac:	60fb      	str	r3, [r7, #12]
}
 80122ae:	bf00      	nop
 80122b0:	bf00      	nop
 80122b2:	e7fd      	b.n	80122b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80122b4:	693b      	ldr	r3, [r7, #16]
 80122b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d10b      	bne.n	80122d4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80122bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122c0:	f383 8811 	msr	BASEPRI, r3
 80122c4:	f3bf 8f6f 	isb	sy
 80122c8:	f3bf 8f4f 	dsb	sy
 80122cc:	60bb      	str	r3, [r7, #8]
}
 80122ce:	bf00      	nop
 80122d0:	bf00      	nop
 80122d2:	e7fd      	b.n	80122d0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80122d4:	693b      	ldr	r3, [r7, #16]
 80122d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80122d8:	1e5a      	subs	r2, r3, #1
 80122da:	693b      	ldr	r3, [r7, #16]
 80122dc:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80122de:	693b      	ldr	r3, [r7, #16]
 80122e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80122e2:	693b      	ldr	r3, [r7, #16]
 80122e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80122e6:	429a      	cmp	r2, r3
 80122e8:	d044      	beq.n	8012374 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80122ea:	693b      	ldr	r3, [r7, #16]
 80122ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d140      	bne.n	8012374 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80122f2:	693b      	ldr	r3, [r7, #16]
 80122f4:	3304      	adds	r3, #4
 80122f6:	4618      	mov	r0, r3
 80122f8:	f7fe fb1f 	bl	801093a <uxListRemove>
 80122fc:	4603      	mov	r3, r0
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d115      	bne.n	801232e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012302:	693b      	ldr	r3, [r7, #16]
 8012304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012306:	491f      	ldr	r1, [pc, #124]	@ (8012384 <xTaskPriorityDisinherit+0x108>)
 8012308:	4613      	mov	r3, r2
 801230a:	009b      	lsls	r3, r3, #2
 801230c:	4413      	add	r3, r2
 801230e:	009b      	lsls	r3, r3, #2
 8012310:	440b      	add	r3, r1
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d10a      	bne.n	801232e <xTaskPriorityDisinherit+0xb2>
 8012318:	693b      	ldr	r3, [r7, #16]
 801231a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801231c:	2201      	movs	r2, #1
 801231e:	fa02 f303 	lsl.w	r3, r2, r3
 8012322:	43da      	mvns	r2, r3
 8012324:	4b18      	ldr	r3, [pc, #96]	@ (8012388 <xTaskPriorityDisinherit+0x10c>)
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	4013      	ands	r3, r2
 801232a:	4a17      	ldr	r2, [pc, #92]	@ (8012388 <xTaskPriorityDisinherit+0x10c>)
 801232c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801232e:	693b      	ldr	r3, [r7, #16]
 8012330:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012332:	693b      	ldr	r3, [r7, #16]
 8012334:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012336:	693b      	ldr	r3, [r7, #16]
 8012338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801233a:	f1c3 0207 	rsb	r2, r3, #7
 801233e:	693b      	ldr	r3, [r7, #16]
 8012340:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012342:	693b      	ldr	r3, [r7, #16]
 8012344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012346:	2201      	movs	r2, #1
 8012348:	409a      	lsls	r2, r3
 801234a:	4b0f      	ldr	r3, [pc, #60]	@ (8012388 <xTaskPriorityDisinherit+0x10c>)
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	4313      	orrs	r3, r2
 8012350:	4a0d      	ldr	r2, [pc, #52]	@ (8012388 <xTaskPriorityDisinherit+0x10c>)
 8012352:	6013      	str	r3, [r2, #0]
 8012354:	693b      	ldr	r3, [r7, #16]
 8012356:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012358:	4613      	mov	r3, r2
 801235a:	009b      	lsls	r3, r3, #2
 801235c:	4413      	add	r3, r2
 801235e:	009b      	lsls	r3, r3, #2
 8012360:	4a08      	ldr	r2, [pc, #32]	@ (8012384 <xTaskPriorityDisinherit+0x108>)
 8012362:	441a      	add	r2, r3
 8012364:	693b      	ldr	r3, [r7, #16]
 8012366:	3304      	adds	r3, #4
 8012368:	4619      	mov	r1, r3
 801236a:	4610      	mov	r0, r2
 801236c:	f7fe fa88 	bl	8010880 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012370:	2301      	movs	r3, #1
 8012372:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012374:	697b      	ldr	r3, [r7, #20]
	}
 8012376:	4618      	mov	r0, r3
 8012378:	3718      	adds	r7, #24
 801237a:	46bd      	mov	sp, r7
 801237c:	bd80      	pop	{r7, pc}
 801237e:	bf00      	nop
 8012380:	20002c68 	.word	0x20002c68
 8012384:	20002c6c 	.word	0x20002c6c
 8012388:	20002d70 	.word	0x20002d70

0801238c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801238c:	b580      	push	{r7, lr}
 801238e:	b088      	sub	sp, #32
 8012390:	af00      	add	r7, sp, #0
 8012392:	6078      	str	r0, [r7, #4]
 8012394:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801239a:	2301      	movs	r3, #1
 801239c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d079      	beq.n	8012498 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80123a4:	69bb      	ldr	r3, [r7, #24]
 80123a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d10b      	bne.n	80123c4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80123ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123b0:	f383 8811 	msr	BASEPRI, r3
 80123b4:	f3bf 8f6f 	isb	sy
 80123b8:	f3bf 8f4f 	dsb	sy
 80123bc:	60fb      	str	r3, [r7, #12]
}
 80123be:	bf00      	nop
 80123c0:	bf00      	nop
 80123c2:	e7fd      	b.n	80123c0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80123c4:	69bb      	ldr	r3, [r7, #24]
 80123c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80123c8:	683a      	ldr	r2, [r7, #0]
 80123ca:	429a      	cmp	r2, r3
 80123cc:	d902      	bls.n	80123d4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80123ce:	683b      	ldr	r3, [r7, #0]
 80123d0:	61fb      	str	r3, [r7, #28]
 80123d2:	e002      	b.n	80123da <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80123d4:	69bb      	ldr	r3, [r7, #24]
 80123d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80123d8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80123da:	69bb      	ldr	r3, [r7, #24]
 80123dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80123de:	69fa      	ldr	r2, [r7, #28]
 80123e0:	429a      	cmp	r2, r3
 80123e2:	d059      	beq.n	8012498 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80123e4:	69bb      	ldr	r3, [r7, #24]
 80123e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80123e8:	697a      	ldr	r2, [r7, #20]
 80123ea:	429a      	cmp	r2, r3
 80123ec:	d154      	bne.n	8012498 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80123ee:	4b2c      	ldr	r3, [pc, #176]	@ (80124a0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	69ba      	ldr	r2, [r7, #24]
 80123f4:	429a      	cmp	r2, r3
 80123f6:	d10b      	bne.n	8012410 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80123f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123fc:	f383 8811 	msr	BASEPRI, r3
 8012400:	f3bf 8f6f 	isb	sy
 8012404:	f3bf 8f4f 	dsb	sy
 8012408:	60bb      	str	r3, [r7, #8]
}
 801240a:	bf00      	nop
 801240c:	bf00      	nop
 801240e:	e7fd      	b.n	801240c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012410:	69bb      	ldr	r3, [r7, #24]
 8012412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012414:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012416:	69bb      	ldr	r3, [r7, #24]
 8012418:	69fa      	ldr	r2, [r7, #28]
 801241a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801241c:	69bb      	ldr	r3, [r7, #24]
 801241e:	699b      	ldr	r3, [r3, #24]
 8012420:	2b00      	cmp	r3, #0
 8012422:	db04      	blt.n	801242e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012424:	69fb      	ldr	r3, [r7, #28]
 8012426:	f1c3 0207 	rsb	r2, r3, #7
 801242a:	69bb      	ldr	r3, [r7, #24]
 801242c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801242e:	69bb      	ldr	r3, [r7, #24]
 8012430:	6959      	ldr	r1, [r3, #20]
 8012432:	693a      	ldr	r2, [r7, #16]
 8012434:	4613      	mov	r3, r2
 8012436:	009b      	lsls	r3, r3, #2
 8012438:	4413      	add	r3, r2
 801243a:	009b      	lsls	r3, r3, #2
 801243c:	4a19      	ldr	r2, [pc, #100]	@ (80124a4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801243e:	4413      	add	r3, r2
 8012440:	4299      	cmp	r1, r3
 8012442:	d129      	bne.n	8012498 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012444:	69bb      	ldr	r3, [r7, #24]
 8012446:	3304      	adds	r3, #4
 8012448:	4618      	mov	r0, r3
 801244a:	f7fe fa76 	bl	801093a <uxListRemove>
 801244e:	4603      	mov	r3, r0
 8012450:	2b00      	cmp	r3, #0
 8012452:	d10a      	bne.n	801246a <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8012454:	69bb      	ldr	r3, [r7, #24]
 8012456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012458:	2201      	movs	r2, #1
 801245a:	fa02 f303 	lsl.w	r3, r2, r3
 801245e:	43da      	mvns	r2, r3
 8012460:	4b11      	ldr	r3, [pc, #68]	@ (80124a8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	4013      	ands	r3, r2
 8012466:	4a10      	ldr	r2, [pc, #64]	@ (80124a8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8012468:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801246a:	69bb      	ldr	r3, [r7, #24]
 801246c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801246e:	2201      	movs	r2, #1
 8012470:	409a      	lsls	r2, r3
 8012472:	4b0d      	ldr	r3, [pc, #52]	@ (80124a8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	4313      	orrs	r3, r2
 8012478:	4a0b      	ldr	r2, [pc, #44]	@ (80124a8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 801247a:	6013      	str	r3, [r2, #0]
 801247c:	69bb      	ldr	r3, [r7, #24]
 801247e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012480:	4613      	mov	r3, r2
 8012482:	009b      	lsls	r3, r3, #2
 8012484:	4413      	add	r3, r2
 8012486:	009b      	lsls	r3, r3, #2
 8012488:	4a06      	ldr	r2, [pc, #24]	@ (80124a4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801248a:	441a      	add	r2, r3
 801248c:	69bb      	ldr	r3, [r7, #24]
 801248e:	3304      	adds	r3, #4
 8012490:	4619      	mov	r1, r3
 8012492:	4610      	mov	r0, r2
 8012494:	f7fe f9f4 	bl	8010880 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012498:	bf00      	nop
 801249a:	3720      	adds	r7, #32
 801249c:	46bd      	mov	sp, r7
 801249e:	bd80      	pop	{r7, pc}
 80124a0:	20002c68 	.word	0x20002c68
 80124a4:	20002c6c 	.word	0x20002c6c
 80124a8:	20002d70 	.word	0x20002d70

080124ac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80124ac:	b480      	push	{r7}
 80124ae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80124b0:	4b07      	ldr	r3, [pc, #28]	@ (80124d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d004      	beq.n	80124c2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80124b8:	4b05      	ldr	r3, [pc, #20]	@ (80124d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80124be:	3201      	adds	r2, #1
 80124c0:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80124c2:	4b03      	ldr	r3, [pc, #12]	@ (80124d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80124c4:	681b      	ldr	r3, [r3, #0]
	}
 80124c6:	4618      	mov	r0, r3
 80124c8:	46bd      	mov	sp, r7
 80124ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ce:	4770      	bx	lr
 80124d0:	20002c68 	.word	0x20002c68

080124d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b084      	sub	sp, #16
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]
 80124dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80124de:	4b29      	ldr	r3, [pc, #164]	@ (8012584 <prvAddCurrentTaskToDelayedList+0xb0>)
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80124e4:	4b28      	ldr	r3, [pc, #160]	@ (8012588 <prvAddCurrentTaskToDelayedList+0xb4>)
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	3304      	adds	r3, #4
 80124ea:	4618      	mov	r0, r3
 80124ec:	f7fe fa25 	bl	801093a <uxListRemove>
 80124f0:	4603      	mov	r3, r0
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d10b      	bne.n	801250e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80124f6:	4b24      	ldr	r3, [pc, #144]	@ (8012588 <prvAddCurrentTaskToDelayedList+0xb4>)
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80124fc:	2201      	movs	r2, #1
 80124fe:	fa02 f303 	lsl.w	r3, r2, r3
 8012502:	43da      	mvns	r2, r3
 8012504:	4b21      	ldr	r3, [pc, #132]	@ (801258c <prvAddCurrentTaskToDelayedList+0xb8>)
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	4013      	ands	r3, r2
 801250a:	4a20      	ldr	r2, [pc, #128]	@ (801258c <prvAddCurrentTaskToDelayedList+0xb8>)
 801250c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012514:	d10a      	bne.n	801252c <prvAddCurrentTaskToDelayedList+0x58>
 8012516:	683b      	ldr	r3, [r7, #0]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d007      	beq.n	801252c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801251c:	4b1a      	ldr	r3, [pc, #104]	@ (8012588 <prvAddCurrentTaskToDelayedList+0xb4>)
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	3304      	adds	r3, #4
 8012522:	4619      	mov	r1, r3
 8012524:	481a      	ldr	r0, [pc, #104]	@ (8012590 <prvAddCurrentTaskToDelayedList+0xbc>)
 8012526:	f7fe f9ab 	bl	8010880 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801252a:	e026      	b.n	801257a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801252c:	68fa      	ldr	r2, [r7, #12]
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	4413      	add	r3, r2
 8012532:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012534:	4b14      	ldr	r3, [pc, #80]	@ (8012588 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	68ba      	ldr	r2, [r7, #8]
 801253a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801253c:	68ba      	ldr	r2, [r7, #8]
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	429a      	cmp	r2, r3
 8012542:	d209      	bcs.n	8012558 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012544:	4b13      	ldr	r3, [pc, #76]	@ (8012594 <prvAddCurrentTaskToDelayedList+0xc0>)
 8012546:	681a      	ldr	r2, [r3, #0]
 8012548:	4b0f      	ldr	r3, [pc, #60]	@ (8012588 <prvAddCurrentTaskToDelayedList+0xb4>)
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	3304      	adds	r3, #4
 801254e:	4619      	mov	r1, r3
 8012550:	4610      	mov	r0, r2
 8012552:	f7fe f9b9 	bl	80108c8 <vListInsert>
}
 8012556:	e010      	b.n	801257a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012558:	4b0f      	ldr	r3, [pc, #60]	@ (8012598 <prvAddCurrentTaskToDelayedList+0xc4>)
 801255a:	681a      	ldr	r2, [r3, #0]
 801255c:	4b0a      	ldr	r3, [pc, #40]	@ (8012588 <prvAddCurrentTaskToDelayedList+0xb4>)
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	3304      	adds	r3, #4
 8012562:	4619      	mov	r1, r3
 8012564:	4610      	mov	r0, r2
 8012566:	f7fe f9af 	bl	80108c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801256a:	4b0c      	ldr	r3, [pc, #48]	@ (801259c <prvAddCurrentTaskToDelayedList+0xc8>)
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	68ba      	ldr	r2, [r7, #8]
 8012570:	429a      	cmp	r2, r3
 8012572:	d202      	bcs.n	801257a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8012574:	4a09      	ldr	r2, [pc, #36]	@ (801259c <prvAddCurrentTaskToDelayedList+0xc8>)
 8012576:	68bb      	ldr	r3, [r7, #8]
 8012578:	6013      	str	r3, [r2, #0]
}
 801257a:	bf00      	nop
 801257c:	3710      	adds	r7, #16
 801257e:	46bd      	mov	sp, r7
 8012580:	bd80      	pop	{r7, pc}
 8012582:	bf00      	nop
 8012584:	20002d6c 	.word	0x20002d6c
 8012588:	20002c68 	.word	0x20002c68
 801258c:	20002d70 	.word	0x20002d70
 8012590:	20002d54 	.word	0x20002d54
 8012594:	20002d24 	.word	0x20002d24
 8012598:	20002d20 	.word	0x20002d20
 801259c:	20002d88 	.word	0x20002d88

080125a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80125a0:	b480      	push	{r7}
 80125a2:	b085      	sub	sp, #20
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	60f8      	str	r0, [r7, #12]
 80125a8:	60b9      	str	r1, [r7, #8]
 80125aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	3b04      	subs	r3, #4
 80125b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80125b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	3b04      	subs	r3, #4
 80125be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80125c0:	68bb      	ldr	r3, [r7, #8]
 80125c2:	f023 0201 	bic.w	r2, r3, #1
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	3b04      	subs	r3, #4
 80125ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80125d0:	4a0c      	ldr	r2, [pc, #48]	@ (8012604 <pxPortInitialiseStack+0x64>)
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	3b14      	subs	r3, #20
 80125da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80125dc:	687a      	ldr	r2, [r7, #4]
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	3b04      	subs	r3, #4
 80125e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	f06f 0202 	mvn.w	r2, #2
 80125ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	3b20      	subs	r3, #32
 80125f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80125f6:	68fb      	ldr	r3, [r7, #12]
}
 80125f8:	4618      	mov	r0, r3
 80125fa:	3714      	adds	r7, #20
 80125fc:	46bd      	mov	sp, r7
 80125fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012602:	4770      	bx	lr
 8012604:	08012609 	.word	0x08012609

08012608 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012608:	b480      	push	{r7}
 801260a:	b085      	sub	sp, #20
 801260c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801260e:	2300      	movs	r3, #0
 8012610:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012612:	4b13      	ldr	r3, [pc, #76]	@ (8012660 <prvTaskExitError+0x58>)
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	f1b3 3fff 	cmp.w	r3, #4294967295
 801261a:	d00b      	beq.n	8012634 <prvTaskExitError+0x2c>
	__asm volatile
 801261c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012620:	f383 8811 	msr	BASEPRI, r3
 8012624:	f3bf 8f6f 	isb	sy
 8012628:	f3bf 8f4f 	dsb	sy
 801262c:	60fb      	str	r3, [r7, #12]
}
 801262e:	bf00      	nop
 8012630:	bf00      	nop
 8012632:	e7fd      	b.n	8012630 <prvTaskExitError+0x28>
	__asm volatile
 8012634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012638:	f383 8811 	msr	BASEPRI, r3
 801263c:	f3bf 8f6f 	isb	sy
 8012640:	f3bf 8f4f 	dsb	sy
 8012644:	60bb      	str	r3, [r7, #8]
}
 8012646:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012648:	bf00      	nop
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d0fc      	beq.n	801264a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012650:	bf00      	nop
 8012652:	bf00      	nop
 8012654:	3714      	adds	r7, #20
 8012656:	46bd      	mov	sp, r7
 8012658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801265c:	4770      	bx	lr
 801265e:	bf00      	nop
 8012660:	20000024 	.word	0x20000024
	...

08012670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012670:	4b07      	ldr	r3, [pc, #28]	@ (8012690 <pxCurrentTCBConst2>)
 8012672:	6819      	ldr	r1, [r3, #0]
 8012674:	6808      	ldr	r0, [r1, #0]
 8012676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801267a:	f380 8809 	msr	PSP, r0
 801267e:	f3bf 8f6f 	isb	sy
 8012682:	f04f 0000 	mov.w	r0, #0
 8012686:	f380 8811 	msr	BASEPRI, r0
 801268a:	4770      	bx	lr
 801268c:	f3af 8000 	nop.w

08012690 <pxCurrentTCBConst2>:
 8012690:	20002c68 	.word	0x20002c68
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012694:	bf00      	nop
 8012696:	bf00      	nop

08012698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012698:	4808      	ldr	r0, [pc, #32]	@ (80126bc <prvPortStartFirstTask+0x24>)
 801269a:	6800      	ldr	r0, [r0, #0]
 801269c:	6800      	ldr	r0, [r0, #0]
 801269e:	f380 8808 	msr	MSP, r0
 80126a2:	f04f 0000 	mov.w	r0, #0
 80126a6:	f380 8814 	msr	CONTROL, r0
 80126aa:	b662      	cpsie	i
 80126ac:	b661      	cpsie	f
 80126ae:	f3bf 8f4f 	dsb	sy
 80126b2:	f3bf 8f6f 	isb	sy
 80126b6:	df00      	svc	0
 80126b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80126ba:	bf00      	nop
 80126bc:	e000ed08 	.word	0xe000ed08

080126c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80126c0:	b580      	push	{r7, lr}
 80126c2:	b086      	sub	sp, #24
 80126c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80126c6:	4b47      	ldr	r3, [pc, #284]	@ (80127e4 <xPortStartScheduler+0x124>)
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	4a47      	ldr	r2, [pc, #284]	@ (80127e8 <xPortStartScheduler+0x128>)
 80126cc:	4293      	cmp	r3, r2
 80126ce:	d10b      	bne.n	80126e8 <xPortStartScheduler+0x28>
	__asm volatile
 80126d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126d4:	f383 8811 	msr	BASEPRI, r3
 80126d8:	f3bf 8f6f 	isb	sy
 80126dc:	f3bf 8f4f 	dsb	sy
 80126e0:	613b      	str	r3, [r7, #16]
}
 80126e2:	bf00      	nop
 80126e4:	bf00      	nop
 80126e6:	e7fd      	b.n	80126e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80126e8:	4b3e      	ldr	r3, [pc, #248]	@ (80127e4 <xPortStartScheduler+0x124>)
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	4a3f      	ldr	r2, [pc, #252]	@ (80127ec <xPortStartScheduler+0x12c>)
 80126ee:	4293      	cmp	r3, r2
 80126f0:	d10b      	bne.n	801270a <xPortStartScheduler+0x4a>
	__asm volatile
 80126f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126f6:	f383 8811 	msr	BASEPRI, r3
 80126fa:	f3bf 8f6f 	isb	sy
 80126fe:	f3bf 8f4f 	dsb	sy
 8012702:	60fb      	str	r3, [r7, #12]
}
 8012704:	bf00      	nop
 8012706:	bf00      	nop
 8012708:	e7fd      	b.n	8012706 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801270a:	4b39      	ldr	r3, [pc, #228]	@ (80127f0 <xPortStartScheduler+0x130>)
 801270c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801270e:	697b      	ldr	r3, [r7, #20]
 8012710:	781b      	ldrb	r3, [r3, #0]
 8012712:	b2db      	uxtb	r3, r3
 8012714:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012716:	697b      	ldr	r3, [r7, #20]
 8012718:	22ff      	movs	r2, #255	@ 0xff
 801271a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801271c:	697b      	ldr	r3, [r7, #20]
 801271e:	781b      	ldrb	r3, [r3, #0]
 8012720:	b2db      	uxtb	r3, r3
 8012722:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012724:	78fb      	ldrb	r3, [r7, #3]
 8012726:	b2db      	uxtb	r3, r3
 8012728:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801272c:	b2da      	uxtb	r2, r3
 801272e:	4b31      	ldr	r3, [pc, #196]	@ (80127f4 <xPortStartScheduler+0x134>)
 8012730:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012732:	4b31      	ldr	r3, [pc, #196]	@ (80127f8 <xPortStartScheduler+0x138>)
 8012734:	2207      	movs	r2, #7
 8012736:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012738:	e009      	b.n	801274e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801273a:	4b2f      	ldr	r3, [pc, #188]	@ (80127f8 <xPortStartScheduler+0x138>)
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	3b01      	subs	r3, #1
 8012740:	4a2d      	ldr	r2, [pc, #180]	@ (80127f8 <xPortStartScheduler+0x138>)
 8012742:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012744:	78fb      	ldrb	r3, [r7, #3]
 8012746:	b2db      	uxtb	r3, r3
 8012748:	005b      	lsls	r3, r3, #1
 801274a:	b2db      	uxtb	r3, r3
 801274c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801274e:	78fb      	ldrb	r3, [r7, #3]
 8012750:	b2db      	uxtb	r3, r3
 8012752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012756:	2b80      	cmp	r3, #128	@ 0x80
 8012758:	d0ef      	beq.n	801273a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801275a:	4b27      	ldr	r3, [pc, #156]	@ (80127f8 <xPortStartScheduler+0x138>)
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	f1c3 0307 	rsb	r3, r3, #7
 8012762:	2b04      	cmp	r3, #4
 8012764:	d00b      	beq.n	801277e <xPortStartScheduler+0xbe>
	__asm volatile
 8012766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801276a:	f383 8811 	msr	BASEPRI, r3
 801276e:	f3bf 8f6f 	isb	sy
 8012772:	f3bf 8f4f 	dsb	sy
 8012776:	60bb      	str	r3, [r7, #8]
}
 8012778:	bf00      	nop
 801277a:	bf00      	nop
 801277c:	e7fd      	b.n	801277a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801277e:	4b1e      	ldr	r3, [pc, #120]	@ (80127f8 <xPortStartScheduler+0x138>)
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	021b      	lsls	r3, r3, #8
 8012784:	4a1c      	ldr	r2, [pc, #112]	@ (80127f8 <xPortStartScheduler+0x138>)
 8012786:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012788:	4b1b      	ldr	r3, [pc, #108]	@ (80127f8 <xPortStartScheduler+0x138>)
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8012790:	4a19      	ldr	r2, [pc, #100]	@ (80127f8 <xPortStartScheduler+0x138>)
 8012792:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	b2da      	uxtb	r2, r3
 8012798:	697b      	ldr	r3, [r7, #20]
 801279a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801279c:	4b17      	ldr	r3, [pc, #92]	@ (80127fc <xPortStartScheduler+0x13c>)
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	4a16      	ldr	r2, [pc, #88]	@ (80127fc <xPortStartScheduler+0x13c>)
 80127a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80127a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80127a8:	4b14      	ldr	r3, [pc, #80]	@ (80127fc <xPortStartScheduler+0x13c>)
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	4a13      	ldr	r2, [pc, #76]	@ (80127fc <xPortStartScheduler+0x13c>)
 80127ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80127b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80127b4:	f000 f8da 	bl	801296c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80127b8:	4b11      	ldr	r3, [pc, #68]	@ (8012800 <xPortStartScheduler+0x140>)
 80127ba:	2200      	movs	r2, #0
 80127bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80127be:	f000 f8f9 	bl	80129b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80127c2:	4b10      	ldr	r3, [pc, #64]	@ (8012804 <xPortStartScheduler+0x144>)
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	4a0f      	ldr	r2, [pc, #60]	@ (8012804 <xPortStartScheduler+0x144>)
 80127c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80127cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80127ce:	f7ff ff63 	bl	8012698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80127d2:	f7ff fa6f 	bl	8011cb4 <vTaskSwitchContext>
	prvTaskExitError();
 80127d6:	f7ff ff17 	bl	8012608 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80127da:	2300      	movs	r3, #0
}
 80127dc:	4618      	mov	r0, r3
 80127de:	3718      	adds	r7, #24
 80127e0:	46bd      	mov	sp, r7
 80127e2:	bd80      	pop	{r7, pc}
 80127e4:	e000ed00 	.word	0xe000ed00
 80127e8:	410fc271 	.word	0x410fc271
 80127ec:	410fc270 	.word	0x410fc270
 80127f0:	e000e400 	.word	0xe000e400
 80127f4:	20002d94 	.word	0x20002d94
 80127f8:	20002d98 	.word	0x20002d98
 80127fc:	e000ed20 	.word	0xe000ed20
 8012800:	20000024 	.word	0x20000024
 8012804:	e000ef34 	.word	0xe000ef34

08012808 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012808:	b480      	push	{r7}
 801280a:	b083      	sub	sp, #12
 801280c:	af00      	add	r7, sp, #0
	__asm volatile
 801280e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012812:	f383 8811 	msr	BASEPRI, r3
 8012816:	f3bf 8f6f 	isb	sy
 801281a:	f3bf 8f4f 	dsb	sy
 801281e:	607b      	str	r3, [r7, #4]
}
 8012820:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012822:	4b10      	ldr	r3, [pc, #64]	@ (8012864 <vPortEnterCritical+0x5c>)
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	3301      	adds	r3, #1
 8012828:	4a0e      	ldr	r2, [pc, #56]	@ (8012864 <vPortEnterCritical+0x5c>)
 801282a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801282c:	4b0d      	ldr	r3, [pc, #52]	@ (8012864 <vPortEnterCritical+0x5c>)
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	2b01      	cmp	r3, #1
 8012832:	d110      	bne.n	8012856 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012834:	4b0c      	ldr	r3, [pc, #48]	@ (8012868 <vPortEnterCritical+0x60>)
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	b2db      	uxtb	r3, r3
 801283a:	2b00      	cmp	r3, #0
 801283c:	d00b      	beq.n	8012856 <vPortEnterCritical+0x4e>
	__asm volatile
 801283e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012842:	f383 8811 	msr	BASEPRI, r3
 8012846:	f3bf 8f6f 	isb	sy
 801284a:	f3bf 8f4f 	dsb	sy
 801284e:	603b      	str	r3, [r7, #0]
}
 8012850:	bf00      	nop
 8012852:	bf00      	nop
 8012854:	e7fd      	b.n	8012852 <vPortEnterCritical+0x4a>
	}
}
 8012856:	bf00      	nop
 8012858:	370c      	adds	r7, #12
 801285a:	46bd      	mov	sp, r7
 801285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012860:	4770      	bx	lr
 8012862:	bf00      	nop
 8012864:	20000024 	.word	0x20000024
 8012868:	e000ed04 	.word	0xe000ed04

0801286c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801286c:	b480      	push	{r7}
 801286e:	b083      	sub	sp, #12
 8012870:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012872:	4b12      	ldr	r3, [pc, #72]	@ (80128bc <vPortExitCritical+0x50>)
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	2b00      	cmp	r3, #0
 8012878:	d10b      	bne.n	8012892 <vPortExitCritical+0x26>
	__asm volatile
 801287a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801287e:	f383 8811 	msr	BASEPRI, r3
 8012882:	f3bf 8f6f 	isb	sy
 8012886:	f3bf 8f4f 	dsb	sy
 801288a:	607b      	str	r3, [r7, #4]
}
 801288c:	bf00      	nop
 801288e:	bf00      	nop
 8012890:	e7fd      	b.n	801288e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012892:	4b0a      	ldr	r3, [pc, #40]	@ (80128bc <vPortExitCritical+0x50>)
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	3b01      	subs	r3, #1
 8012898:	4a08      	ldr	r2, [pc, #32]	@ (80128bc <vPortExitCritical+0x50>)
 801289a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801289c:	4b07      	ldr	r3, [pc, #28]	@ (80128bc <vPortExitCritical+0x50>)
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d105      	bne.n	80128b0 <vPortExitCritical+0x44>
 80128a4:	2300      	movs	r3, #0
 80128a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80128a8:	683b      	ldr	r3, [r7, #0]
 80128aa:	f383 8811 	msr	BASEPRI, r3
}
 80128ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80128b0:	bf00      	nop
 80128b2:	370c      	adds	r7, #12
 80128b4:	46bd      	mov	sp, r7
 80128b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ba:	4770      	bx	lr
 80128bc:	20000024 	.word	0x20000024

080128c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80128c0:	f3ef 8009 	mrs	r0, PSP
 80128c4:	f3bf 8f6f 	isb	sy
 80128c8:	4b15      	ldr	r3, [pc, #84]	@ (8012920 <pxCurrentTCBConst>)
 80128ca:	681a      	ldr	r2, [r3, #0]
 80128cc:	f01e 0f10 	tst.w	lr, #16
 80128d0:	bf08      	it	eq
 80128d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80128d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128da:	6010      	str	r0, [r2, #0]
 80128dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80128e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80128e4:	f380 8811 	msr	BASEPRI, r0
 80128e8:	f3bf 8f4f 	dsb	sy
 80128ec:	f3bf 8f6f 	isb	sy
 80128f0:	f7ff f9e0 	bl	8011cb4 <vTaskSwitchContext>
 80128f4:	f04f 0000 	mov.w	r0, #0
 80128f8:	f380 8811 	msr	BASEPRI, r0
 80128fc:	bc09      	pop	{r0, r3}
 80128fe:	6819      	ldr	r1, [r3, #0]
 8012900:	6808      	ldr	r0, [r1, #0]
 8012902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012906:	f01e 0f10 	tst.w	lr, #16
 801290a:	bf08      	it	eq
 801290c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012910:	f380 8809 	msr	PSP, r0
 8012914:	f3bf 8f6f 	isb	sy
 8012918:	4770      	bx	lr
 801291a:	bf00      	nop
 801291c:	f3af 8000 	nop.w

08012920 <pxCurrentTCBConst>:
 8012920:	20002c68 	.word	0x20002c68
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012924:	bf00      	nop
 8012926:	bf00      	nop

08012928 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012928:	b580      	push	{r7, lr}
 801292a:	b082      	sub	sp, #8
 801292c:	af00      	add	r7, sp, #0
	__asm volatile
 801292e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012932:	f383 8811 	msr	BASEPRI, r3
 8012936:	f3bf 8f6f 	isb	sy
 801293a:	f3bf 8f4f 	dsb	sy
 801293e:	607b      	str	r3, [r7, #4]
}
 8012940:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012942:	f7ff f8fd 	bl	8011b40 <xTaskIncrementTick>
 8012946:	4603      	mov	r3, r0
 8012948:	2b00      	cmp	r3, #0
 801294a:	d003      	beq.n	8012954 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801294c:	4b06      	ldr	r3, [pc, #24]	@ (8012968 <SysTick_Handler+0x40>)
 801294e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012952:	601a      	str	r2, [r3, #0]
 8012954:	2300      	movs	r3, #0
 8012956:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012958:	683b      	ldr	r3, [r7, #0]
 801295a:	f383 8811 	msr	BASEPRI, r3
}
 801295e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012960:	bf00      	nop
 8012962:	3708      	adds	r7, #8
 8012964:	46bd      	mov	sp, r7
 8012966:	bd80      	pop	{r7, pc}
 8012968:	e000ed04 	.word	0xe000ed04

0801296c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801296c:	b480      	push	{r7}
 801296e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012970:	4b0b      	ldr	r3, [pc, #44]	@ (80129a0 <vPortSetupTimerInterrupt+0x34>)
 8012972:	2200      	movs	r2, #0
 8012974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012976:	4b0b      	ldr	r3, [pc, #44]	@ (80129a4 <vPortSetupTimerInterrupt+0x38>)
 8012978:	2200      	movs	r2, #0
 801297a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801297c:	4b0a      	ldr	r3, [pc, #40]	@ (80129a8 <vPortSetupTimerInterrupt+0x3c>)
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	4a0a      	ldr	r2, [pc, #40]	@ (80129ac <vPortSetupTimerInterrupt+0x40>)
 8012982:	fba2 2303 	umull	r2, r3, r2, r3
 8012986:	099b      	lsrs	r3, r3, #6
 8012988:	4a09      	ldr	r2, [pc, #36]	@ (80129b0 <vPortSetupTimerInterrupt+0x44>)
 801298a:	3b01      	subs	r3, #1
 801298c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801298e:	4b04      	ldr	r3, [pc, #16]	@ (80129a0 <vPortSetupTimerInterrupt+0x34>)
 8012990:	2207      	movs	r2, #7
 8012992:	601a      	str	r2, [r3, #0]
}
 8012994:	bf00      	nop
 8012996:	46bd      	mov	sp, r7
 8012998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801299c:	4770      	bx	lr
 801299e:	bf00      	nop
 80129a0:	e000e010 	.word	0xe000e010
 80129a4:	e000e018 	.word	0xe000e018
 80129a8:	20000004 	.word	0x20000004
 80129ac:	10624dd3 	.word	0x10624dd3
 80129b0:	e000e014 	.word	0xe000e014

080129b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80129b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80129c4 <vPortEnableVFP+0x10>
 80129b8:	6801      	ldr	r1, [r0, #0]
 80129ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80129be:	6001      	str	r1, [r0, #0]
 80129c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80129c2:	bf00      	nop
 80129c4:	e000ed88 	.word	0xe000ed88

080129c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80129c8:	b480      	push	{r7}
 80129ca:	b085      	sub	sp, #20
 80129cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80129ce:	f3ef 8305 	mrs	r3, IPSR
 80129d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	2b0f      	cmp	r3, #15
 80129d8:	d915      	bls.n	8012a06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80129da:	4a18      	ldr	r2, [pc, #96]	@ (8012a3c <vPortValidateInterruptPriority+0x74>)
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	4413      	add	r3, r2
 80129e0:	781b      	ldrb	r3, [r3, #0]
 80129e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80129e4:	4b16      	ldr	r3, [pc, #88]	@ (8012a40 <vPortValidateInterruptPriority+0x78>)
 80129e6:	781b      	ldrb	r3, [r3, #0]
 80129e8:	7afa      	ldrb	r2, [r7, #11]
 80129ea:	429a      	cmp	r2, r3
 80129ec:	d20b      	bcs.n	8012a06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80129ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129f2:	f383 8811 	msr	BASEPRI, r3
 80129f6:	f3bf 8f6f 	isb	sy
 80129fa:	f3bf 8f4f 	dsb	sy
 80129fe:	607b      	str	r3, [r7, #4]
}
 8012a00:	bf00      	nop
 8012a02:	bf00      	nop
 8012a04:	e7fd      	b.n	8012a02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012a06:	4b0f      	ldr	r3, [pc, #60]	@ (8012a44 <vPortValidateInterruptPriority+0x7c>)
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8012a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8012a48 <vPortValidateInterruptPriority+0x80>)
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	429a      	cmp	r2, r3
 8012a14:	d90b      	bls.n	8012a2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8012a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a1a:	f383 8811 	msr	BASEPRI, r3
 8012a1e:	f3bf 8f6f 	isb	sy
 8012a22:	f3bf 8f4f 	dsb	sy
 8012a26:	603b      	str	r3, [r7, #0]
}
 8012a28:	bf00      	nop
 8012a2a:	bf00      	nop
 8012a2c:	e7fd      	b.n	8012a2a <vPortValidateInterruptPriority+0x62>
	}
 8012a2e:	bf00      	nop
 8012a30:	3714      	adds	r7, #20
 8012a32:	46bd      	mov	sp, r7
 8012a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a38:	4770      	bx	lr
 8012a3a:	bf00      	nop
 8012a3c:	e000e3f0 	.word	0xe000e3f0
 8012a40:	20002d94 	.word	0x20002d94
 8012a44:	e000ed0c 	.word	0xe000ed0c
 8012a48:	20002d98 	.word	0x20002d98

08012a4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012a4c:	b580      	push	{r7, lr}
 8012a4e:	b08a      	sub	sp, #40	@ 0x28
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012a54:	2300      	movs	r3, #0
 8012a56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012a58:	f7fe ffc6 	bl	80119e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012a5c:	4b5c      	ldr	r3, [pc, #368]	@ (8012bd0 <pvPortMalloc+0x184>)
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d101      	bne.n	8012a68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012a64:	f000 f924 	bl	8012cb0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012a68:	4b5a      	ldr	r3, [pc, #360]	@ (8012bd4 <pvPortMalloc+0x188>)
 8012a6a:	681a      	ldr	r2, [r3, #0]
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	4013      	ands	r3, r2
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	f040 8095 	bne.w	8012ba0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d01e      	beq.n	8012aba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8012a7c:	2208      	movs	r2, #8
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	4413      	add	r3, r2
 8012a82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	f003 0307 	and.w	r3, r3, #7
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d015      	beq.n	8012aba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	f023 0307 	bic.w	r3, r3, #7
 8012a94:	3308      	adds	r3, #8
 8012a96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	f003 0307 	and.w	r3, r3, #7
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d00b      	beq.n	8012aba <pvPortMalloc+0x6e>
	__asm volatile
 8012aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012aa6:	f383 8811 	msr	BASEPRI, r3
 8012aaa:	f3bf 8f6f 	isb	sy
 8012aae:	f3bf 8f4f 	dsb	sy
 8012ab2:	617b      	str	r3, [r7, #20]
}
 8012ab4:	bf00      	nop
 8012ab6:	bf00      	nop
 8012ab8:	e7fd      	b.n	8012ab6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d06f      	beq.n	8012ba0 <pvPortMalloc+0x154>
 8012ac0:	4b45      	ldr	r3, [pc, #276]	@ (8012bd8 <pvPortMalloc+0x18c>)
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	687a      	ldr	r2, [r7, #4]
 8012ac6:	429a      	cmp	r2, r3
 8012ac8:	d86a      	bhi.n	8012ba0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012aca:	4b44      	ldr	r3, [pc, #272]	@ (8012bdc <pvPortMalloc+0x190>)
 8012acc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012ace:	4b43      	ldr	r3, [pc, #268]	@ (8012bdc <pvPortMalloc+0x190>)
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012ad4:	e004      	b.n	8012ae0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8012ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ad8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ae2:	685b      	ldr	r3, [r3, #4]
 8012ae4:	687a      	ldr	r2, [r7, #4]
 8012ae6:	429a      	cmp	r2, r3
 8012ae8:	d903      	bls.n	8012af2 <pvPortMalloc+0xa6>
 8012aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d1f1      	bne.n	8012ad6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012af2:	4b37      	ldr	r3, [pc, #220]	@ (8012bd0 <pvPortMalloc+0x184>)
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012af8:	429a      	cmp	r2, r3
 8012afa:	d051      	beq.n	8012ba0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012afc:	6a3b      	ldr	r3, [r7, #32]
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	2208      	movs	r2, #8
 8012b02:	4413      	add	r3, r2
 8012b04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b08:	681a      	ldr	r2, [r3, #0]
 8012b0a:	6a3b      	ldr	r3, [r7, #32]
 8012b0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b10:	685a      	ldr	r2, [r3, #4]
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	1ad2      	subs	r2, r2, r3
 8012b16:	2308      	movs	r3, #8
 8012b18:	005b      	lsls	r3, r3, #1
 8012b1a:	429a      	cmp	r2, r3
 8012b1c:	d920      	bls.n	8012b60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	4413      	add	r3, r2
 8012b24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012b26:	69bb      	ldr	r3, [r7, #24]
 8012b28:	f003 0307 	and.w	r3, r3, #7
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d00b      	beq.n	8012b48 <pvPortMalloc+0xfc>
	__asm volatile
 8012b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b34:	f383 8811 	msr	BASEPRI, r3
 8012b38:	f3bf 8f6f 	isb	sy
 8012b3c:	f3bf 8f4f 	dsb	sy
 8012b40:	613b      	str	r3, [r7, #16]
}
 8012b42:	bf00      	nop
 8012b44:	bf00      	nop
 8012b46:	e7fd      	b.n	8012b44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b4a:	685a      	ldr	r2, [r3, #4]
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	1ad2      	subs	r2, r2, r3
 8012b50:	69bb      	ldr	r3, [r7, #24]
 8012b52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b56:	687a      	ldr	r2, [r7, #4]
 8012b58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012b5a:	69b8      	ldr	r0, [r7, #24]
 8012b5c:	f000 f90a 	bl	8012d74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012b60:	4b1d      	ldr	r3, [pc, #116]	@ (8012bd8 <pvPortMalloc+0x18c>)
 8012b62:	681a      	ldr	r2, [r3, #0]
 8012b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b66:	685b      	ldr	r3, [r3, #4]
 8012b68:	1ad3      	subs	r3, r2, r3
 8012b6a:	4a1b      	ldr	r2, [pc, #108]	@ (8012bd8 <pvPortMalloc+0x18c>)
 8012b6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8012bd8 <pvPortMalloc+0x18c>)
 8012b70:	681a      	ldr	r2, [r3, #0]
 8012b72:	4b1b      	ldr	r3, [pc, #108]	@ (8012be0 <pvPortMalloc+0x194>)
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	429a      	cmp	r2, r3
 8012b78:	d203      	bcs.n	8012b82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012b7a:	4b17      	ldr	r3, [pc, #92]	@ (8012bd8 <pvPortMalloc+0x18c>)
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	4a18      	ldr	r2, [pc, #96]	@ (8012be0 <pvPortMalloc+0x194>)
 8012b80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b84:	685a      	ldr	r2, [r3, #4]
 8012b86:	4b13      	ldr	r3, [pc, #76]	@ (8012bd4 <pvPortMalloc+0x188>)
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	431a      	orrs	r2, r3
 8012b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b92:	2200      	movs	r2, #0
 8012b94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012b96:	4b13      	ldr	r3, [pc, #76]	@ (8012be4 <pvPortMalloc+0x198>)
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	3301      	adds	r3, #1
 8012b9c:	4a11      	ldr	r2, [pc, #68]	@ (8012be4 <pvPortMalloc+0x198>)
 8012b9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012ba0:	f7fe ff30 	bl	8011a04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012ba4:	69fb      	ldr	r3, [r7, #28]
 8012ba6:	f003 0307 	and.w	r3, r3, #7
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d00b      	beq.n	8012bc6 <pvPortMalloc+0x17a>
	__asm volatile
 8012bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bb2:	f383 8811 	msr	BASEPRI, r3
 8012bb6:	f3bf 8f6f 	isb	sy
 8012bba:	f3bf 8f4f 	dsb	sy
 8012bbe:	60fb      	str	r3, [r7, #12]
}
 8012bc0:	bf00      	nop
 8012bc2:	bf00      	nop
 8012bc4:	e7fd      	b.n	8012bc2 <pvPortMalloc+0x176>
	return pvReturn;
 8012bc6:	69fb      	ldr	r3, [r7, #28]
}
 8012bc8:	4618      	mov	r0, r3
 8012bca:	3728      	adds	r7, #40	@ 0x28
 8012bcc:	46bd      	mov	sp, r7
 8012bce:	bd80      	pop	{r7, pc}
 8012bd0:	200069a4 	.word	0x200069a4
 8012bd4:	200069b8 	.word	0x200069b8
 8012bd8:	200069a8 	.word	0x200069a8
 8012bdc:	2000699c 	.word	0x2000699c
 8012be0:	200069ac 	.word	0x200069ac
 8012be4:	200069b0 	.word	0x200069b0

08012be8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012be8:	b580      	push	{r7, lr}
 8012bea:	b086      	sub	sp, #24
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d04f      	beq.n	8012c9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012bfa:	2308      	movs	r3, #8
 8012bfc:	425b      	negs	r3, r3
 8012bfe:	697a      	ldr	r2, [r7, #20]
 8012c00:	4413      	add	r3, r2
 8012c02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012c04:	697b      	ldr	r3, [r7, #20]
 8012c06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012c08:	693b      	ldr	r3, [r7, #16]
 8012c0a:	685a      	ldr	r2, [r3, #4]
 8012c0c:	4b25      	ldr	r3, [pc, #148]	@ (8012ca4 <vPortFree+0xbc>)
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	4013      	ands	r3, r2
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d10b      	bne.n	8012c2e <vPortFree+0x46>
	__asm volatile
 8012c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c1a:	f383 8811 	msr	BASEPRI, r3
 8012c1e:	f3bf 8f6f 	isb	sy
 8012c22:	f3bf 8f4f 	dsb	sy
 8012c26:	60fb      	str	r3, [r7, #12]
}
 8012c28:	bf00      	nop
 8012c2a:	bf00      	nop
 8012c2c:	e7fd      	b.n	8012c2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012c2e:	693b      	ldr	r3, [r7, #16]
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d00b      	beq.n	8012c4e <vPortFree+0x66>
	__asm volatile
 8012c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c3a:	f383 8811 	msr	BASEPRI, r3
 8012c3e:	f3bf 8f6f 	isb	sy
 8012c42:	f3bf 8f4f 	dsb	sy
 8012c46:	60bb      	str	r3, [r7, #8]
}
 8012c48:	bf00      	nop
 8012c4a:	bf00      	nop
 8012c4c:	e7fd      	b.n	8012c4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012c4e:	693b      	ldr	r3, [r7, #16]
 8012c50:	685a      	ldr	r2, [r3, #4]
 8012c52:	4b14      	ldr	r3, [pc, #80]	@ (8012ca4 <vPortFree+0xbc>)
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	4013      	ands	r3, r2
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d01e      	beq.n	8012c9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012c5c:	693b      	ldr	r3, [r7, #16]
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d11a      	bne.n	8012c9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012c64:	693b      	ldr	r3, [r7, #16]
 8012c66:	685a      	ldr	r2, [r3, #4]
 8012c68:	4b0e      	ldr	r3, [pc, #56]	@ (8012ca4 <vPortFree+0xbc>)
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	43db      	mvns	r3, r3
 8012c6e:	401a      	ands	r2, r3
 8012c70:	693b      	ldr	r3, [r7, #16]
 8012c72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012c74:	f7fe feb8 	bl	80119e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012c78:	693b      	ldr	r3, [r7, #16]
 8012c7a:	685a      	ldr	r2, [r3, #4]
 8012c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8012ca8 <vPortFree+0xc0>)
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	4413      	add	r3, r2
 8012c82:	4a09      	ldr	r2, [pc, #36]	@ (8012ca8 <vPortFree+0xc0>)
 8012c84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012c86:	6938      	ldr	r0, [r7, #16]
 8012c88:	f000 f874 	bl	8012d74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012c8c:	4b07      	ldr	r3, [pc, #28]	@ (8012cac <vPortFree+0xc4>)
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	3301      	adds	r3, #1
 8012c92:	4a06      	ldr	r2, [pc, #24]	@ (8012cac <vPortFree+0xc4>)
 8012c94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012c96:	f7fe feb5 	bl	8011a04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012c9a:	bf00      	nop
 8012c9c:	3718      	adds	r7, #24
 8012c9e:	46bd      	mov	sp, r7
 8012ca0:	bd80      	pop	{r7, pc}
 8012ca2:	bf00      	nop
 8012ca4:	200069b8 	.word	0x200069b8
 8012ca8:	200069a8 	.word	0x200069a8
 8012cac:	200069b4 	.word	0x200069b4

08012cb0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012cb0:	b480      	push	{r7}
 8012cb2:	b085      	sub	sp, #20
 8012cb4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012cb6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8012cba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012cbc:	4b27      	ldr	r3, [pc, #156]	@ (8012d5c <prvHeapInit+0xac>)
 8012cbe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	f003 0307 	and.w	r3, r3, #7
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d00c      	beq.n	8012ce4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	3307      	adds	r3, #7
 8012cce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	f023 0307 	bic.w	r3, r3, #7
 8012cd6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012cd8:	68ba      	ldr	r2, [r7, #8]
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	1ad3      	subs	r3, r2, r3
 8012cde:	4a1f      	ldr	r2, [pc, #124]	@ (8012d5c <prvHeapInit+0xac>)
 8012ce0:	4413      	add	r3, r2
 8012ce2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8012d60 <prvHeapInit+0xb0>)
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012cee:	4b1c      	ldr	r3, [pc, #112]	@ (8012d60 <prvHeapInit+0xb0>)
 8012cf0:	2200      	movs	r2, #0
 8012cf2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	68ba      	ldr	r2, [r7, #8]
 8012cf8:	4413      	add	r3, r2
 8012cfa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012cfc:	2208      	movs	r2, #8
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	1a9b      	subs	r3, r3, r2
 8012d02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	f023 0307 	bic.w	r3, r3, #7
 8012d0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	4a15      	ldr	r2, [pc, #84]	@ (8012d64 <prvHeapInit+0xb4>)
 8012d10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012d12:	4b14      	ldr	r3, [pc, #80]	@ (8012d64 <prvHeapInit+0xb4>)
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	2200      	movs	r2, #0
 8012d18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012d1a:	4b12      	ldr	r3, [pc, #72]	@ (8012d64 <prvHeapInit+0xb4>)
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	2200      	movs	r2, #0
 8012d20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012d26:	683b      	ldr	r3, [r7, #0]
 8012d28:	68fa      	ldr	r2, [r7, #12]
 8012d2a:	1ad2      	subs	r2, r2, r3
 8012d2c:	683b      	ldr	r3, [r7, #0]
 8012d2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012d30:	4b0c      	ldr	r3, [pc, #48]	@ (8012d64 <prvHeapInit+0xb4>)
 8012d32:	681a      	ldr	r2, [r3, #0]
 8012d34:	683b      	ldr	r3, [r7, #0]
 8012d36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012d38:	683b      	ldr	r3, [r7, #0]
 8012d3a:	685b      	ldr	r3, [r3, #4]
 8012d3c:	4a0a      	ldr	r2, [pc, #40]	@ (8012d68 <prvHeapInit+0xb8>)
 8012d3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012d40:	683b      	ldr	r3, [r7, #0]
 8012d42:	685b      	ldr	r3, [r3, #4]
 8012d44:	4a09      	ldr	r2, [pc, #36]	@ (8012d6c <prvHeapInit+0xbc>)
 8012d46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012d48:	4b09      	ldr	r3, [pc, #36]	@ (8012d70 <prvHeapInit+0xc0>)
 8012d4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8012d4e:	601a      	str	r2, [r3, #0]
}
 8012d50:	bf00      	nop
 8012d52:	3714      	adds	r7, #20
 8012d54:	46bd      	mov	sp, r7
 8012d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d5a:	4770      	bx	lr
 8012d5c:	20002d9c 	.word	0x20002d9c
 8012d60:	2000699c 	.word	0x2000699c
 8012d64:	200069a4 	.word	0x200069a4
 8012d68:	200069ac 	.word	0x200069ac
 8012d6c:	200069a8 	.word	0x200069a8
 8012d70:	200069b8 	.word	0x200069b8

08012d74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012d74:	b480      	push	{r7}
 8012d76:	b085      	sub	sp, #20
 8012d78:	af00      	add	r7, sp, #0
 8012d7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012d7c:	4b28      	ldr	r3, [pc, #160]	@ (8012e20 <prvInsertBlockIntoFreeList+0xac>)
 8012d7e:	60fb      	str	r3, [r7, #12]
 8012d80:	e002      	b.n	8012d88 <prvInsertBlockIntoFreeList+0x14>
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	60fb      	str	r3, [r7, #12]
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	687a      	ldr	r2, [r7, #4]
 8012d8e:	429a      	cmp	r2, r3
 8012d90:	d8f7      	bhi.n	8012d82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	685b      	ldr	r3, [r3, #4]
 8012d9a:	68ba      	ldr	r2, [r7, #8]
 8012d9c:	4413      	add	r3, r2
 8012d9e:	687a      	ldr	r2, [r7, #4]
 8012da0:	429a      	cmp	r2, r3
 8012da2:	d108      	bne.n	8012db6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	685a      	ldr	r2, [r3, #4]
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	685b      	ldr	r3, [r3, #4]
 8012dac:	441a      	add	r2, r3
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	685b      	ldr	r3, [r3, #4]
 8012dbe:	68ba      	ldr	r2, [r7, #8]
 8012dc0:	441a      	add	r2, r3
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	429a      	cmp	r2, r3
 8012dc8:	d118      	bne.n	8012dfc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	681a      	ldr	r2, [r3, #0]
 8012dce:	4b15      	ldr	r3, [pc, #84]	@ (8012e24 <prvInsertBlockIntoFreeList+0xb0>)
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	429a      	cmp	r2, r3
 8012dd4:	d00d      	beq.n	8012df2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	685a      	ldr	r2, [r3, #4]
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	685b      	ldr	r3, [r3, #4]
 8012de0:	441a      	add	r2, r3
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	681a      	ldr	r2, [r3, #0]
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	601a      	str	r2, [r3, #0]
 8012df0:	e008      	b.n	8012e04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012df2:	4b0c      	ldr	r3, [pc, #48]	@ (8012e24 <prvInsertBlockIntoFreeList+0xb0>)
 8012df4:	681a      	ldr	r2, [r3, #0]
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	601a      	str	r2, [r3, #0]
 8012dfa:	e003      	b.n	8012e04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	681a      	ldr	r2, [r3, #0]
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012e04:	68fa      	ldr	r2, [r7, #12]
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	429a      	cmp	r2, r3
 8012e0a:	d002      	beq.n	8012e12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	687a      	ldr	r2, [r7, #4]
 8012e10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012e12:	bf00      	nop
 8012e14:	3714      	adds	r7, #20
 8012e16:	46bd      	mov	sp, r7
 8012e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1c:	4770      	bx	lr
 8012e1e:	bf00      	nop
 8012e20:	2000699c 	.word	0x2000699c
 8012e24:	200069a4 	.word	0x200069a4

08012e28 <__cvt>:
 8012e28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012e2c:	ec57 6b10 	vmov	r6, r7, d0
 8012e30:	2f00      	cmp	r7, #0
 8012e32:	460c      	mov	r4, r1
 8012e34:	4619      	mov	r1, r3
 8012e36:	463b      	mov	r3, r7
 8012e38:	bfbb      	ittet	lt
 8012e3a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8012e3e:	461f      	movlt	r7, r3
 8012e40:	2300      	movge	r3, #0
 8012e42:	232d      	movlt	r3, #45	@ 0x2d
 8012e44:	700b      	strb	r3, [r1, #0]
 8012e46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012e48:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8012e4c:	4691      	mov	r9, r2
 8012e4e:	f023 0820 	bic.w	r8, r3, #32
 8012e52:	bfbc      	itt	lt
 8012e54:	4632      	movlt	r2, r6
 8012e56:	4616      	movlt	r6, r2
 8012e58:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012e5c:	d005      	beq.n	8012e6a <__cvt+0x42>
 8012e5e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8012e62:	d100      	bne.n	8012e66 <__cvt+0x3e>
 8012e64:	3401      	adds	r4, #1
 8012e66:	2102      	movs	r1, #2
 8012e68:	e000      	b.n	8012e6c <__cvt+0x44>
 8012e6a:	2103      	movs	r1, #3
 8012e6c:	ab03      	add	r3, sp, #12
 8012e6e:	9301      	str	r3, [sp, #4]
 8012e70:	ab02      	add	r3, sp, #8
 8012e72:	9300      	str	r3, [sp, #0]
 8012e74:	ec47 6b10 	vmov	d0, r6, r7
 8012e78:	4653      	mov	r3, sl
 8012e7a:	4622      	mov	r2, r4
 8012e7c:	f000 fed0 	bl	8013c20 <_dtoa_r>
 8012e80:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8012e84:	4605      	mov	r5, r0
 8012e86:	d119      	bne.n	8012ebc <__cvt+0x94>
 8012e88:	f019 0f01 	tst.w	r9, #1
 8012e8c:	d00e      	beq.n	8012eac <__cvt+0x84>
 8012e8e:	eb00 0904 	add.w	r9, r0, r4
 8012e92:	2200      	movs	r2, #0
 8012e94:	2300      	movs	r3, #0
 8012e96:	4630      	mov	r0, r6
 8012e98:	4639      	mov	r1, r7
 8012e9a:	f7ed fe35 	bl	8000b08 <__aeabi_dcmpeq>
 8012e9e:	b108      	cbz	r0, 8012ea4 <__cvt+0x7c>
 8012ea0:	f8cd 900c 	str.w	r9, [sp, #12]
 8012ea4:	2230      	movs	r2, #48	@ 0x30
 8012ea6:	9b03      	ldr	r3, [sp, #12]
 8012ea8:	454b      	cmp	r3, r9
 8012eaa:	d31e      	bcc.n	8012eea <__cvt+0xc2>
 8012eac:	9b03      	ldr	r3, [sp, #12]
 8012eae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012eb0:	1b5b      	subs	r3, r3, r5
 8012eb2:	4628      	mov	r0, r5
 8012eb4:	6013      	str	r3, [r2, #0]
 8012eb6:	b004      	add	sp, #16
 8012eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ebc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012ec0:	eb00 0904 	add.w	r9, r0, r4
 8012ec4:	d1e5      	bne.n	8012e92 <__cvt+0x6a>
 8012ec6:	7803      	ldrb	r3, [r0, #0]
 8012ec8:	2b30      	cmp	r3, #48	@ 0x30
 8012eca:	d10a      	bne.n	8012ee2 <__cvt+0xba>
 8012ecc:	2200      	movs	r2, #0
 8012ece:	2300      	movs	r3, #0
 8012ed0:	4630      	mov	r0, r6
 8012ed2:	4639      	mov	r1, r7
 8012ed4:	f7ed fe18 	bl	8000b08 <__aeabi_dcmpeq>
 8012ed8:	b918      	cbnz	r0, 8012ee2 <__cvt+0xba>
 8012eda:	f1c4 0401 	rsb	r4, r4, #1
 8012ede:	f8ca 4000 	str.w	r4, [sl]
 8012ee2:	f8da 3000 	ldr.w	r3, [sl]
 8012ee6:	4499      	add	r9, r3
 8012ee8:	e7d3      	b.n	8012e92 <__cvt+0x6a>
 8012eea:	1c59      	adds	r1, r3, #1
 8012eec:	9103      	str	r1, [sp, #12]
 8012eee:	701a      	strb	r2, [r3, #0]
 8012ef0:	e7d9      	b.n	8012ea6 <__cvt+0x7e>

08012ef2 <__exponent>:
 8012ef2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012ef4:	2900      	cmp	r1, #0
 8012ef6:	bfba      	itte	lt
 8012ef8:	4249      	neglt	r1, r1
 8012efa:	232d      	movlt	r3, #45	@ 0x2d
 8012efc:	232b      	movge	r3, #43	@ 0x2b
 8012efe:	2909      	cmp	r1, #9
 8012f00:	7002      	strb	r2, [r0, #0]
 8012f02:	7043      	strb	r3, [r0, #1]
 8012f04:	dd29      	ble.n	8012f5a <__exponent+0x68>
 8012f06:	f10d 0307 	add.w	r3, sp, #7
 8012f0a:	461d      	mov	r5, r3
 8012f0c:	270a      	movs	r7, #10
 8012f0e:	461a      	mov	r2, r3
 8012f10:	fbb1 f6f7 	udiv	r6, r1, r7
 8012f14:	fb07 1416 	mls	r4, r7, r6, r1
 8012f18:	3430      	adds	r4, #48	@ 0x30
 8012f1a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012f1e:	460c      	mov	r4, r1
 8012f20:	2c63      	cmp	r4, #99	@ 0x63
 8012f22:	f103 33ff 	add.w	r3, r3, #4294967295
 8012f26:	4631      	mov	r1, r6
 8012f28:	dcf1      	bgt.n	8012f0e <__exponent+0x1c>
 8012f2a:	3130      	adds	r1, #48	@ 0x30
 8012f2c:	1e94      	subs	r4, r2, #2
 8012f2e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012f32:	1c41      	adds	r1, r0, #1
 8012f34:	4623      	mov	r3, r4
 8012f36:	42ab      	cmp	r3, r5
 8012f38:	d30a      	bcc.n	8012f50 <__exponent+0x5e>
 8012f3a:	f10d 0309 	add.w	r3, sp, #9
 8012f3e:	1a9b      	subs	r3, r3, r2
 8012f40:	42ac      	cmp	r4, r5
 8012f42:	bf88      	it	hi
 8012f44:	2300      	movhi	r3, #0
 8012f46:	3302      	adds	r3, #2
 8012f48:	4403      	add	r3, r0
 8012f4a:	1a18      	subs	r0, r3, r0
 8012f4c:	b003      	add	sp, #12
 8012f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f50:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012f54:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012f58:	e7ed      	b.n	8012f36 <__exponent+0x44>
 8012f5a:	2330      	movs	r3, #48	@ 0x30
 8012f5c:	3130      	adds	r1, #48	@ 0x30
 8012f5e:	7083      	strb	r3, [r0, #2]
 8012f60:	70c1      	strb	r1, [r0, #3]
 8012f62:	1d03      	adds	r3, r0, #4
 8012f64:	e7f1      	b.n	8012f4a <__exponent+0x58>
	...

08012f68 <_printf_float>:
 8012f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f6c:	b08d      	sub	sp, #52	@ 0x34
 8012f6e:	460c      	mov	r4, r1
 8012f70:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8012f74:	4616      	mov	r6, r2
 8012f76:	461f      	mov	r7, r3
 8012f78:	4605      	mov	r5, r0
 8012f7a:	f000 fced 	bl	8013958 <_localeconv_r>
 8012f7e:	6803      	ldr	r3, [r0, #0]
 8012f80:	9304      	str	r3, [sp, #16]
 8012f82:	4618      	mov	r0, r3
 8012f84:	f7ed f994 	bl	80002b0 <strlen>
 8012f88:	2300      	movs	r3, #0
 8012f8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8012f8c:	f8d8 3000 	ldr.w	r3, [r8]
 8012f90:	9005      	str	r0, [sp, #20]
 8012f92:	3307      	adds	r3, #7
 8012f94:	f023 0307 	bic.w	r3, r3, #7
 8012f98:	f103 0208 	add.w	r2, r3, #8
 8012f9c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012fa0:	f8d4 b000 	ldr.w	fp, [r4]
 8012fa4:	f8c8 2000 	str.w	r2, [r8]
 8012fa8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012fac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8012fb0:	9307      	str	r3, [sp, #28]
 8012fb2:	f8cd 8018 	str.w	r8, [sp, #24]
 8012fb6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8012fba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012fbe:	4b9c      	ldr	r3, [pc, #624]	@ (8013230 <_printf_float+0x2c8>)
 8012fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8012fc4:	f7ed fdd2 	bl	8000b6c <__aeabi_dcmpun>
 8012fc8:	bb70      	cbnz	r0, 8013028 <_printf_float+0xc0>
 8012fca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012fce:	4b98      	ldr	r3, [pc, #608]	@ (8013230 <_printf_float+0x2c8>)
 8012fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8012fd4:	f7ed fdac 	bl	8000b30 <__aeabi_dcmple>
 8012fd8:	bb30      	cbnz	r0, 8013028 <_printf_float+0xc0>
 8012fda:	2200      	movs	r2, #0
 8012fdc:	2300      	movs	r3, #0
 8012fde:	4640      	mov	r0, r8
 8012fe0:	4649      	mov	r1, r9
 8012fe2:	f7ed fd9b 	bl	8000b1c <__aeabi_dcmplt>
 8012fe6:	b110      	cbz	r0, 8012fee <_printf_float+0x86>
 8012fe8:	232d      	movs	r3, #45	@ 0x2d
 8012fea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012fee:	4a91      	ldr	r2, [pc, #580]	@ (8013234 <_printf_float+0x2cc>)
 8012ff0:	4b91      	ldr	r3, [pc, #580]	@ (8013238 <_printf_float+0x2d0>)
 8012ff2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012ff6:	bf94      	ite	ls
 8012ff8:	4690      	movls	r8, r2
 8012ffa:	4698      	movhi	r8, r3
 8012ffc:	2303      	movs	r3, #3
 8012ffe:	6123      	str	r3, [r4, #16]
 8013000:	f02b 0304 	bic.w	r3, fp, #4
 8013004:	6023      	str	r3, [r4, #0]
 8013006:	f04f 0900 	mov.w	r9, #0
 801300a:	9700      	str	r7, [sp, #0]
 801300c:	4633      	mov	r3, r6
 801300e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8013010:	4621      	mov	r1, r4
 8013012:	4628      	mov	r0, r5
 8013014:	f000 f9d2 	bl	80133bc <_printf_common>
 8013018:	3001      	adds	r0, #1
 801301a:	f040 808d 	bne.w	8013138 <_printf_float+0x1d0>
 801301e:	f04f 30ff 	mov.w	r0, #4294967295
 8013022:	b00d      	add	sp, #52	@ 0x34
 8013024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013028:	4642      	mov	r2, r8
 801302a:	464b      	mov	r3, r9
 801302c:	4640      	mov	r0, r8
 801302e:	4649      	mov	r1, r9
 8013030:	f7ed fd9c 	bl	8000b6c <__aeabi_dcmpun>
 8013034:	b140      	cbz	r0, 8013048 <_printf_float+0xe0>
 8013036:	464b      	mov	r3, r9
 8013038:	2b00      	cmp	r3, #0
 801303a:	bfbc      	itt	lt
 801303c:	232d      	movlt	r3, #45	@ 0x2d
 801303e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8013042:	4a7e      	ldr	r2, [pc, #504]	@ (801323c <_printf_float+0x2d4>)
 8013044:	4b7e      	ldr	r3, [pc, #504]	@ (8013240 <_printf_float+0x2d8>)
 8013046:	e7d4      	b.n	8012ff2 <_printf_float+0x8a>
 8013048:	6863      	ldr	r3, [r4, #4]
 801304a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801304e:	9206      	str	r2, [sp, #24]
 8013050:	1c5a      	adds	r2, r3, #1
 8013052:	d13b      	bne.n	80130cc <_printf_float+0x164>
 8013054:	2306      	movs	r3, #6
 8013056:	6063      	str	r3, [r4, #4]
 8013058:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801305c:	2300      	movs	r3, #0
 801305e:	6022      	str	r2, [r4, #0]
 8013060:	9303      	str	r3, [sp, #12]
 8013062:	ab0a      	add	r3, sp, #40	@ 0x28
 8013064:	e9cd a301 	strd	sl, r3, [sp, #4]
 8013068:	ab09      	add	r3, sp, #36	@ 0x24
 801306a:	9300      	str	r3, [sp, #0]
 801306c:	6861      	ldr	r1, [r4, #4]
 801306e:	ec49 8b10 	vmov	d0, r8, r9
 8013072:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8013076:	4628      	mov	r0, r5
 8013078:	f7ff fed6 	bl	8012e28 <__cvt>
 801307c:	9b06      	ldr	r3, [sp, #24]
 801307e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013080:	2b47      	cmp	r3, #71	@ 0x47
 8013082:	4680      	mov	r8, r0
 8013084:	d129      	bne.n	80130da <_printf_float+0x172>
 8013086:	1cc8      	adds	r0, r1, #3
 8013088:	db02      	blt.n	8013090 <_printf_float+0x128>
 801308a:	6863      	ldr	r3, [r4, #4]
 801308c:	4299      	cmp	r1, r3
 801308e:	dd41      	ble.n	8013114 <_printf_float+0x1ac>
 8013090:	f1aa 0a02 	sub.w	sl, sl, #2
 8013094:	fa5f fa8a 	uxtb.w	sl, sl
 8013098:	3901      	subs	r1, #1
 801309a:	4652      	mov	r2, sl
 801309c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80130a0:	9109      	str	r1, [sp, #36]	@ 0x24
 80130a2:	f7ff ff26 	bl	8012ef2 <__exponent>
 80130a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80130a8:	1813      	adds	r3, r2, r0
 80130aa:	2a01      	cmp	r2, #1
 80130ac:	4681      	mov	r9, r0
 80130ae:	6123      	str	r3, [r4, #16]
 80130b0:	dc02      	bgt.n	80130b8 <_printf_float+0x150>
 80130b2:	6822      	ldr	r2, [r4, #0]
 80130b4:	07d2      	lsls	r2, r2, #31
 80130b6:	d501      	bpl.n	80130bc <_printf_float+0x154>
 80130b8:	3301      	adds	r3, #1
 80130ba:	6123      	str	r3, [r4, #16]
 80130bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d0a2      	beq.n	801300a <_printf_float+0xa2>
 80130c4:	232d      	movs	r3, #45	@ 0x2d
 80130c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80130ca:	e79e      	b.n	801300a <_printf_float+0xa2>
 80130cc:	9a06      	ldr	r2, [sp, #24]
 80130ce:	2a47      	cmp	r2, #71	@ 0x47
 80130d0:	d1c2      	bne.n	8013058 <_printf_float+0xf0>
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d1c0      	bne.n	8013058 <_printf_float+0xf0>
 80130d6:	2301      	movs	r3, #1
 80130d8:	e7bd      	b.n	8013056 <_printf_float+0xee>
 80130da:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80130de:	d9db      	bls.n	8013098 <_printf_float+0x130>
 80130e0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80130e4:	d118      	bne.n	8013118 <_printf_float+0x1b0>
 80130e6:	2900      	cmp	r1, #0
 80130e8:	6863      	ldr	r3, [r4, #4]
 80130ea:	dd0b      	ble.n	8013104 <_printf_float+0x19c>
 80130ec:	6121      	str	r1, [r4, #16]
 80130ee:	b913      	cbnz	r3, 80130f6 <_printf_float+0x18e>
 80130f0:	6822      	ldr	r2, [r4, #0]
 80130f2:	07d0      	lsls	r0, r2, #31
 80130f4:	d502      	bpl.n	80130fc <_printf_float+0x194>
 80130f6:	3301      	adds	r3, #1
 80130f8:	440b      	add	r3, r1
 80130fa:	6123      	str	r3, [r4, #16]
 80130fc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80130fe:	f04f 0900 	mov.w	r9, #0
 8013102:	e7db      	b.n	80130bc <_printf_float+0x154>
 8013104:	b913      	cbnz	r3, 801310c <_printf_float+0x1a4>
 8013106:	6822      	ldr	r2, [r4, #0]
 8013108:	07d2      	lsls	r2, r2, #31
 801310a:	d501      	bpl.n	8013110 <_printf_float+0x1a8>
 801310c:	3302      	adds	r3, #2
 801310e:	e7f4      	b.n	80130fa <_printf_float+0x192>
 8013110:	2301      	movs	r3, #1
 8013112:	e7f2      	b.n	80130fa <_printf_float+0x192>
 8013114:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8013118:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801311a:	4299      	cmp	r1, r3
 801311c:	db05      	blt.n	801312a <_printf_float+0x1c2>
 801311e:	6823      	ldr	r3, [r4, #0]
 8013120:	6121      	str	r1, [r4, #16]
 8013122:	07d8      	lsls	r0, r3, #31
 8013124:	d5ea      	bpl.n	80130fc <_printf_float+0x194>
 8013126:	1c4b      	adds	r3, r1, #1
 8013128:	e7e7      	b.n	80130fa <_printf_float+0x192>
 801312a:	2900      	cmp	r1, #0
 801312c:	bfd4      	ite	le
 801312e:	f1c1 0202 	rsble	r2, r1, #2
 8013132:	2201      	movgt	r2, #1
 8013134:	4413      	add	r3, r2
 8013136:	e7e0      	b.n	80130fa <_printf_float+0x192>
 8013138:	6823      	ldr	r3, [r4, #0]
 801313a:	055a      	lsls	r2, r3, #21
 801313c:	d407      	bmi.n	801314e <_printf_float+0x1e6>
 801313e:	6923      	ldr	r3, [r4, #16]
 8013140:	4642      	mov	r2, r8
 8013142:	4631      	mov	r1, r6
 8013144:	4628      	mov	r0, r5
 8013146:	47b8      	blx	r7
 8013148:	3001      	adds	r0, #1
 801314a:	d12b      	bne.n	80131a4 <_printf_float+0x23c>
 801314c:	e767      	b.n	801301e <_printf_float+0xb6>
 801314e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8013152:	f240 80dd 	bls.w	8013310 <_printf_float+0x3a8>
 8013156:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801315a:	2200      	movs	r2, #0
 801315c:	2300      	movs	r3, #0
 801315e:	f7ed fcd3 	bl	8000b08 <__aeabi_dcmpeq>
 8013162:	2800      	cmp	r0, #0
 8013164:	d033      	beq.n	80131ce <_printf_float+0x266>
 8013166:	4a37      	ldr	r2, [pc, #220]	@ (8013244 <_printf_float+0x2dc>)
 8013168:	2301      	movs	r3, #1
 801316a:	4631      	mov	r1, r6
 801316c:	4628      	mov	r0, r5
 801316e:	47b8      	blx	r7
 8013170:	3001      	adds	r0, #1
 8013172:	f43f af54 	beq.w	801301e <_printf_float+0xb6>
 8013176:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801317a:	4543      	cmp	r3, r8
 801317c:	db02      	blt.n	8013184 <_printf_float+0x21c>
 801317e:	6823      	ldr	r3, [r4, #0]
 8013180:	07d8      	lsls	r0, r3, #31
 8013182:	d50f      	bpl.n	80131a4 <_printf_float+0x23c>
 8013184:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013188:	4631      	mov	r1, r6
 801318a:	4628      	mov	r0, r5
 801318c:	47b8      	blx	r7
 801318e:	3001      	adds	r0, #1
 8013190:	f43f af45 	beq.w	801301e <_printf_float+0xb6>
 8013194:	f04f 0900 	mov.w	r9, #0
 8013198:	f108 38ff 	add.w	r8, r8, #4294967295
 801319c:	f104 0a1a 	add.w	sl, r4, #26
 80131a0:	45c8      	cmp	r8, r9
 80131a2:	dc09      	bgt.n	80131b8 <_printf_float+0x250>
 80131a4:	6823      	ldr	r3, [r4, #0]
 80131a6:	079b      	lsls	r3, r3, #30
 80131a8:	f100 8103 	bmi.w	80133b2 <_printf_float+0x44a>
 80131ac:	68e0      	ldr	r0, [r4, #12]
 80131ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80131b0:	4298      	cmp	r0, r3
 80131b2:	bfb8      	it	lt
 80131b4:	4618      	movlt	r0, r3
 80131b6:	e734      	b.n	8013022 <_printf_float+0xba>
 80131b8:	2301      	movs	r3, #1
 80131ba:	4652      	mov	r2, sl
 80131bc:	4631      	mov	r1, r6
 80131be:	4628      	mov	r0, r5
 80131c0:	47b8      	blx	r7
 80131c2:	3001      	adds	r0, #1
 80131c4:	f43f af2b 	beq.w	801301e <_printf_float+0xb6>
 80131c8:	f109 0901 	add.w	r9, r9, #1
 80131cc:	e7e8      	b.n	80131a0 <_printf_float+0x238>
 80131ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	dc39      	bgt.n	8013248 <_printf_float+0x2e0>
 80131d4:	4a1b      	ldr	r2, [pc, #108]	@ (8013244 <_printf_float+0x2dc>)
 80131d6:	2301      	movs	r3, #1
 80131d8:	4631      	mov	r1, r6
 80131da:	4628      	mov	r0, r5
 80131dc:	47b8      	blx	r7
 80131de:	3001      	adds	r0, #1
 80131e0:	f43f af1d 	beq.w	801301e <_printf_float+0xb6>
 80131e4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80131e8:	ea59 0303 	orrs.w	r3, r9, r3
 80131ec:	d102      	bne.n	80131f4 <_printf_float+0x28c>
 80131ee:	6823      	ldr	r3, [r4, #0]
 80131f0:	07d9      	lsls	r1, r3, #31
 80131f2:	d5d7      	bpl.n	80131a4 <_printf_float+0x23c>
 80131f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80131f8:	4631      	mov	r1, r6
 80131fa:	4628      	mov	r0, r5
 80131fc:	47b8      	blx	r7
 80131fe:	3001      	adds	r0, #1
 8013200:	f43f af0d 	beq.w	801301e <_printf_float+0xb6>
 8013204:	f04f 0a00 	mov.w	sl, #0
 8013208:	f104 0b1a 	add.w	fp, r4, #26
 801320c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801320e:	425b      	negs	r3, r3
 8013210:	4553      	cmp	r3, sl
 8013212:	dc01      	bgt.n	8013218 <_printf_float+0x2b0>
 8013214:	464b      	mov	r3, r9
 8013216:	e793      	b.n	8013140 <_printf_float+0x1d8>
 8013218:	2301      	movs	r3, #1
 801321a:	465a      	mov	r2, fp
 801321c:	4631      	mov	r1, r6
 801321e:	4628      	mov	r0, r5
 8013220:	47b8      	blx	r7
 8013222:	3001      	adds	r0, #1
 8013224:	f43f aefb 	beq.w	801301e <_printf_float+0xb6>
 8013228:	f10a 0a01 	add.w	sl, sl, #1
 801322c:	e7ee      	b.n	801320c <_printf_float+0x2a4>
 801322e:	bf00      	nop
 8013230:	7fefffff 	.word	0x7fefffff
 8013234:	080173a4 	.word	0x080173a4
 8013238:	080173a8 	.word	0x080173a8
 801323c:	080173ac 	.word	0x080173ac
 8013240:	080173b0 	.word	0x080173b0
 8013244:	080173b4 	.word	0x080173b4
 8013248:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801324a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801324e:	4553      	cmp	r3, sl
 8013250:	bfa8      	it	ge
 8013252:	4653      	movge	r3, sl
 8013254:	2b00      	cmp	r3, #0
 8013256:	4699      	mov	r9, r3
 8013258:	dc36      	bgt.n	80132c8 <_printf_float+0x360>
 801325a:	f04f 0b00 	mov.w	fp, #0
 801325e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013262:	f104 021a 	add.w	r2, r4, #26
 8013266:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013268:	9306      	str	r3, [sp, #24]
 801326a:	eba3 0309 	sub.w	r3, r3, r9
 801326e:	455b      	cmp	r3, fp
 8013270:	dc31      	bgt.n	80132d6 <_printf_float+0x36e>
 8013272:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013274:	459a      	cmp	sl, r3
 8013276:	dc3a      	bgt.n	80132ee <_printf_float+0x386>
 8013278:	6823      	ldr	r3, [r4, #0]
 801327a:	07da      	lsls	r2, r3, #31
 801327c:	d437      	bmi.n	80132ee <_printf_float+0x386>
 801327e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013280:	ebaa 0903 	sub.w	r9, sl, r3
 8013284:	9b06      	ldr	r3, [sp, #24]
 8013286:	ebaa 0303 	sub.w	r3, sl, r3
 801328a:	4599      	cmp	r9, r3
 801328c:	bfa8      	it	ge
 801328e:	4699      	movge	r9, r3
 8013290:	f1b9 0f00 	cmp.w	r9, #0
 8013294:	dc33      	bgt.n	80132fe <_printf_float+0x396>
 8013296:	f04f 0800 	mov.w	r8, #0
 801329a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801329e:	f104 0b1a 	add.w	fp, r4, #26
 80132a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80132a4:	ebaa 0303 	sub.w	r3, sl, r3
 80132a8:	eba3 0309 	sub.w	r3, r3, r9
 80132ac:	4543      	cmp	r3, r8
 80132ae:	f77f af79 	ble.w	80131a4 <_printf_float+0x23c>
 80132b2:	2301      	movs	r3, #1
 80132b4:	465a      	mov	r2, fp
 80132b6:	4631      	mov	r1, r6
 80132b8:	4628      	mov	r0, r5
 80132ba:	47b8      	blx	r7
 80132bc:	3001      	adds	r0, #1
 80132be:	f43f aeae 	beq.w	801301e <_printf_float+0xb6>
 80132c2:	f108 0801 	add.w	r8, r8, #1
 80132c6:	e7ec      	b.n	80132a2 <_printf_float+0x33a>
 80132c8:	4642      	mov	r2, r8
 80132ca:	4631      	mov	r1, r6
 80132cc:	4628      	mov	r0, r5
 80132ce:	47b8      	blx	r7
 80132d0:	3001      	adds	r0, #1
 80132d2:	d1c2      	bne.n	801325a <_printf_float+0x2f2>
 80132d4:	e6a3      	b.n	801301e <_printf_float+0xb6>
 80132d6:	2301      	movs	r3, #1
 80132d8:	4631      	mov	r1, r6
 80132da:	4628      	mov	r0, r5
 80132dc:	9206      	str	r2, [sp, #24]
 80132de:	47b8      	blx	r7
 80132e0:	3001      	adds	r0, #1
 80132e2:	f43f ae9c 	beq.w	801301e <_printf_float+0xb6>
 80132e6:	9a06      	ldr	r2, [sp, #24]
 80132e8:	f10b 0b01 	add.w	fp, fp, #1
 80132ec:	e7bb      	b.n	8013266 <_printf_float+0x2fe>
 80132ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80132f2:	4631      	mov	r1, r6
 80132f4:	4628      	mov	r0, r5
 80132f6:	47b8      	blx	r7
 80132f8:	3001      	adds	r0, #1
 80132fa:	d1c0      	bne.n	801327e <_printf_float+0x316>
 80132fc:	e68f      	b.n	801301e <_printf_float+0xb6>
 80132fe:	9a06      	ldr	r2, [sp, #24]
 8013300:	464b      	mov	r3, r9
 8013302:	4442      	add	r2, r8
 8013304:	4631      	mov	r1, r6
 8013306:	4628      	mov	r0, r5
 8013308:	47b8      	blx	r7
 801330a:	3001      	adds	r0, #1
 801330c:	d1c3      	bne.n	8013296 <_printf_float+0x32e>
 801330e:	e686      	b.n	801301e <_printf_float+0xb6>
 8013310:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8013314:	f1ba 0f01 	cmp.w	sl, #1
 8013318:	dc01      	bgt.n	801331e <_printf_float+0x3b6>
 801331a:	07db      	lsls	r3, r3, #31
 801331c:	d536      	bpl.n	801338c <_printf_float+0x424>
 801331e:	2301      	movs	r3, #1
 8013320:	4642      	mov	r2, r8
 8013322:	4631      	mov	r1, r6
 8013324:	4628      	mov	r0, r5
 8013326:	47b8      	blx	r7
 8013328:	3001      	adds	r0, #1
 801332a:	f43f ae78 	beq.w	801301e <_printf_float+0xb6>
 801332e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013332:	4631      	mov	r1, r6
 8013334:	4628      	mov	r0, r5
 8013336:	47b8      	blx	r7
 8013338:	3001      	adds	r0, #1
 801333a:	f43f ae70 	beq.w	801301e <_printf_float+0xb6>
 801333e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8013342:	2200      	movs	r2, #0
 8013344:	2300      	movs	r3, #0
 8013346:	f10a 3aff 	add.w	sl, sl, #4294967295
 801334a:	f7ed fbdd 	bl	8000b08 <__aeabi_dcmpeq>
 801334e:	b9c0      	cbnz	r0, 8013382 <_printf_float+0x41a>
 8013350:	4653      	mov	r3, sl
 8013352:	f108 0201 	add.w	r2, r8, #1
 8013356:	4631      	mov	r1, r6
 8013358:	4628      	mov	r0, r5
 801335a:	47b8      	blx	r7
 801335c:	3001      	adds	r0, #1
 801335e:	d10c      	bne.n	801337a <_printf_float+0x412>
 8013360:	e65d      	b.n	801301e <_printf_float+0xb6>
 8013362:	2301      	movs	r3, #1
 8013364:	465a      	mov	r2, fp
 8013366:	4631      	mov	r1, r6
 8013368:	4628      	mov	r0, r5
 801336a:	47b8      	blx	r7
 801336c:	3001      	adds	r0, #1
 801336e:	f43f ae56 	beq.w	801301e <_printf_float+0xb6>
 8013372:	f108 0801 	add.w	r8, r8, #1
 8013376:	45d0      	cmp	r8, sl
 8013378:	dbf3      	blt.n	8013362 <_printf_float+0x3fa>
 801337a:	464b      	mov	r3, r9
 801337c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8013380:	e6df      	b.n	8013142 <_printf_float+0x1da>
 8013382:	f04f 0800 	mov.w	r8, #0
 8013386:	f104 0b1a 	add.w	fp, r4, #26
 801338a:	e7f4      	b.n	8013376 <_printf_float+0x40e>
 801338c:	2301      	movs	r3, #1
 801338e:	4642      	mov	r2, r8
 8013390:	e7e1      	b.n	8013356 <_printf_float+0x3ee>
 8013392:	2301      	movs	r3, #1
 8013394:	464a      	mov	r2, r9
 8013396:	4631      	mov	r1, r6
 8013398:	4628      	mov	r0, r5
 801339a:	47b8      	blx	r7
 801339c:	3001      	adds	r0, #1
 801339e:	f43f ae3e 	beq.w	801301e <_printf_float+0xb6>
 80133a2:	f108 0801 	add.w	r8, r8, #1
 80133a6:	68e3      	ldr	r3, [r4, #12]
 80133a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80133aa:	1a5b      	subs	r3, r3, r1
 80133ac:	4543      	cmp	r3, r8
 80133ae:	dcf0      	bgt.n	8013392 <_printf_float+0x42a>
 80133b0:	e6fc      	b.n	80131ac <_printf_float+0x244>
 80133b2:	f04f 0800 	mov.w	r8, #0
 80133b6:	f104 0919 	add.w	r9, r4, #25
 80133ba:	e7f4      	b.n	80133a6 <_printf_float+0x43e>

080133bc <_printf_common>:
 80133bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133c0:	4616      	mov	r6, r2
 80133c2:	4698      	mov	r8, r3
 80133c4:	688a      	ldr	r2, [r1, #8]
 80133c6:	690b      	ldr	r3, [r1, #16]
 80133c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80133cc:	4293      	cmp	r3, r2
 80133ce:	bfb8      	it	lt
 80133d0:	4613      	movlt	r3, r2
 80133d2:	6033      	str	r3, [r6, #0]
 80133d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80133d8:	4607      	mov	r7, r0
 80133da:	460c      	mov	r4, r1
 80133dc:	b10a      	cbz	r2, 80133e2 <_printf_common+0x26>
 80133de:	3301      	adds	r3, #1
 80133e0:	6033      	str	r3, [r6, #0]
 80133e2:	6823      	ldr	r3, [r4, #0]
 80133e4:	0699      	lsls	r1, r3, #26
 80133e6:	bf42      	ittt	mi
 80133e8:	6833      	ldrmi	r3, [r6, #0]
 80133ea:	3302      	addmi	r3, #2
 80133ec:	6033      	strmi	r3, [r6, #0]
 80133ee:	6825      	ldr	r5, [r4, #0]
 80133f0:	f015 0506 	ands.w	r5, r5, #6
 80133f4:	d106      	bne.n	8013404 <_printf_common+0x48>
 80133f6:	f104 0a19 	add.w	sl, r4, #25
 80133fa:	68e3      	ldr	r3, [r4, #12]
 80133fc:	6832      	ldr	r2, [r6, #0]
 80133fe:	1a9b      	subs	r3, r3, r2
 8013400:	42ab      	cmp	r3, r5
 8013402:	dc26      	bgt.n	8013452 <_printf_common+0x96>
 8013404:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013408:	6822      	ldr	r2, [r4, #0]
 801340a:	3b00      	subs	r3, #0
 801340c:	bf18      	it	ne
 801340e:	2301      	movne	r3, #1
 8013410:	0692      	lsls	r2, r2, #26
 8013412:	d42b      	bmi.n	801346c <_printf_common+0xb0>
 8013414:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013418:	4641      	mov	r1, r8
 801341a:	4638      	mov	r0, r7
 801341c:	47c8      	blx	r9
 801341e:	3001      	adds	r0, #1
 8013420:	d01e      	beq.n	8013460 <_printf_common+0xa4>
 8013422:	6823      	ldr	r3, [r4, #0]
 8013424:	6922      	ldr	r2, [r4, #16]
 8013426:	f003 0306 	and.w	r3, r3, #6
 801342a:	2b04      	cmp	r3, #4
 801342c:	bf02      	ittt	eq
 801342e:	68e5      	ldreq	r5, [r4, #12]
 8013430:	6833      	ldreq	r3, [r6, #0]
 8013432:	1aed      	subeq	r5, r5, r3
 8013434:	68a3      	ldr	r3, [r4, #8]
 8013436:	bf0c      	ite	eq
 8013438:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801343c:	2500      	movne	r5, #0
 801343e:	4293      	cmp	r3, r2
 8013440:	bfc4      	itt	gt
 8013442:	1a9b      	subgt	r3, r3, r2
 8013444:	18ed      	addgt	r5, r5, r3
 8013446:	2600      	movs	r6, #0
 8013448:	341a      	adds	r4, #26
 801344a:	42b5      	cmp	r5, r6
 801344c:	d11a      	bne.n	8013484 <_printf_common+0xc8>
 801344e:	2000      	movs	r0, #0
 8013450:	e008      	b.n	8013464 <_printf_common+0xa8>
 8013452:	2301      	movs	r3, #1
 8013454:	4652      	mov	r2, sl
 8013456:	4641      	mov	r1, r8
 8013458:	4638      	mov	r0, r7
 801345a:	47c8      	blx	r9
 801345c:	3001      	adds	r0, #1
 801345e:	d103      	bne.n	8013468 <_printf_common+0xac>
 8013460:	f04f 30ff 	mov.w	r0, #4294967295
 8013464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013468:	3501      	adds	r5, #1
 801346a:	e7c6      	b.n	80133fa <_printf_common+0x3e>
 801346c:	18e1      	adds	r1, r4, r3
 801346e:	1c5a      	adds	r2, r3, #1
 8013470:	2030      	movs	r0, #48	@ 0x30
 8013472:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013476:	4422      	add	r2, r4
 8013478:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801347c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013480:	3302      	adds	r3, #2
 8013482:	e7c7      	b.n	8013414 <_printf_common+0x58>
 8013484:	2301      	movs	r3, #1
 8013486:	4622      	mov	r2, r4
 8013488:	4641      	mov	r1, r8
 801348a:	4638      	mov	r0, r7
 801348c:	47c8      	blx	r9
 801348e:	3001      	adds	r0, #1
 8013490:	d0e6      	beq.n	8013460 <_printf_common+0xa4>
 8013492:	3601      	adds	r6, #1
 8013494:	e7d9      	b.n	801344a <_printf_common+0x8e>
	...

08013498 <_printf_i>:
 8013498:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801349c:	7e0f      	ldrb	r7, [r1, #24]
 801349e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80134a0:	2f78      	cmp	r7, #120	@ 0x78
 80134a2:	4691      	mov	r9, r2
 80134a4:	4680      	mov	r8, r0
 80134a6:	460c      	mov	r4, r1
 80134a8:	469a      	mov	sl, r3
 80134aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80134ae:	d807      	bhi.n	80134c0 <_printf_i+0x28>
 80134b0:	2f62      	cmp	r7, #98	@ 0x62
 80134b2:	d80a      	bhi.n	80134ca <_printf_i+0x32>
 80134b4:	2f00      	cmp	r7, #0
 80134b6:	f000 80d2 	beq.w	801365e <_printf_i+0x1c6>
 80134ba:	2f58      	cmp	r7, #88	@ 0x58
 80134bc:	f000 80b9 	beq.w	8013632 <_printf_i+0x19a>
 80134c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80134c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80134c8:	e03a      	b.n	8013540 <_printf_i+0xa8>
 80134ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80134ce:	2b15      	cmp	r3, #21
 80134d0:	d8f6      	bhi.n	80134c0 <_printf_i+0x28>
 80134d2:	a101      	add	r1, pc, #4	@ (adr r1, 80134d8 <_printf_i+0x40>)
 80134d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80134d8:	08013531 	.word	0x08013531
 80134dc:	08013545 	.word	0x08013545
 80134e0:	080134c1 	.word	0x080134c1
 80134e4:	080134c1 	.word	0x080134c1
 80134e8:	080134c1 	.word	0x080134c1
 80134ec:	080134c1 	.word	0x080134c1
 80134f0:	08013545 	.word	0x08013545
 80134f4:	080134c1 	.word	0x080134c1
 80134f8:	080134c1 	.word	0x080134c1
 80134fc:	080134c1 	.word	0x080134c1
 8013500:	080134c1 	.word	0x080134c1
 8013504:	08013645 	.word	0x08013645
 8013508:	0801356f 	.word	0x0801356f
 801350c:	080135ff 	.word	0x080135ff
 8013510:	080134c1 	.word	0x080134c1
 8013514:	080134c1 	.word	0x080134c1
 8013518:	08013667 	.word	0x08013667
 801351c:	080134c1 	.word	0x080134c1
 8013520:	0801356f 	.word	0x0801356f
 8013524:	080134c1 	.word	0x080134c1
 8013528:	080134c1 	.word	0x080134c1
 801352c:	08013607 	.word	0x08013607
 8013530:	6833      	ldr	r3, [r6, #0]
 8013532:	1d1a      	adds	r2, r3, #4
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	6032      	str	r2, [r6, #0]
 8013538:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801353c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013540:	2301      	movs	r3, #1
 8013542:	e09d      	b.n	8013680 <_printf_i+0x1e8>
 8013544:	6833      	ldr	r3, [r6, #0]
 8013546:	6820      	ldr	r0, [r4, #0]
 8013548:	1d19      	adds	r1, r3, #4
 801354a:	6031      	str	r1, [r6, #0]
 801354c:	0606      	lsls	r6, r0, #24
 801354e:	d501      	bpl.n	8013554 <_printf_i+0xbc>
 8013550:	681d      	ldr	r5, [r3, #0]
 8013552:	e003      	b.n	801355c <_printf_i+0xc4>
 8013554:	0645      	lsls	r5, r0, #25
 8013556:	d5fb      	bpl.n	8013550 <_printf_i+0xb8>
 8013558:	f9b3 5000 	ldrsh.w	r5, [r3]
 801355c:	2d00      	cmp	r5, #0
 801355e:	da03      	bge.n	8013568 <_printf_i+0xd0>
 8013560:	232d      	movs	r3, #45	@ 0x2d
 8013562:	426d      	negs	r5, r5
 8013564:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013568:	4859      	ldr	r0, [pc, #356]	@ (80136d0 <_printf_i+0x238>)
 801356a:	230a      	movs	r3, #10
 801356c:	e011      	b.n	8013592 <_printf_i+0xfa>
 801356e:	6821      	ldr	r1, [r4, #0]
 8013570:	6833      	ldr	r3, [r6, #0]
 8013572:	0608      	lsls	r0, r1, #24
 8013574:	f853 5b04 	ldr.w	r5, [r3], #4
 8013578:	d402      	bmi.n	8013580 <_printf_i+0xe8>
 801357a:	0649      	lsls	r1, r1, #25
 801357c:	bf48      	it	mi
 801357e:	b2ad      	uxthmi	r5, r5
 8013580:	2f6f      	cmp	r7, #111	@ 0x6f
 8013582:	4853      	ldr	r0, [pc, #332]	@ (80136d0 <_printf_i+0x238>)
 8013584:	6033      	str	r3, [r6, #0]
 8013586:	bf14      	ite	ne
 8013588:	230a      	movne	r3, #10
 801358a:	2308      	moveq	r3, #8
 801358c:	2100      	movs	r1, #0
 801358e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013592:	6866      	ldr	r6, [r4, #4]
 8013594:	60a6      	str	r6, [r4, #8]
 8013596:	2e00      	cmp	r6, #0
 8013598:	bfa2      	ittt	ge
 801359a:	6821      	ldrge	r1, [r4, #0]
 801359c:	f021 0104 	bicge.w	r1, r1, #4
 80135a0:	6021      	strge	r1, [r4, #0]
 80135a2:	b90d      	cbnz	r5, 80135a8 <_printf_i+0x110>
 80135a4:	2e00      	cmp	r6, #0
 80135a6:	d04b      	beq.n	8013640 <_printf_i+0x1a8>
 80135a8:	4616      	mov	r6, r2
 80135aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80135ae:	fb03 5711 	mls	r7, r3, r1, r5
 80135b2:	5dc7      	ldrb	r7, [r0, r7]
 80135b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80135b8:	462f      	mov	r7, r5
 80135ba:	42bb      	cmp	r3, r7
 80135bc:	460d      	mov	r5, r1
 80135be:	d9f4      	bls.n	80135aa <_printf_i+0x112>
 80135c0:	2b08      	cmp	r3, #8
 80135c2:	d10b      	bne.n	80135dc <_printf_i+0x144>
 80135c4:	6823      	ldr	r3, [r4, #0]
 80135c6:	07df      	lsls	r7, r3, #31
 80135c8:	d508      	bpl.n	80135dc <_printf_i+0x144>
 80135ca:	6923      	ldr	r3, [r4, #16]
 80135cc:	6861      	ldr	r1, [r4, #4]
 80135ce:	4299      	cmp	r1, r3
 80135d0:	bfde      	ittt	le
 80135d2:	2330      	movle	r3, #48	@ 0x30
 80135d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80135d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80135dc:	1b92      	subs	r2, r2, r6
 80135de:	6122      	str	r2, [r4, #16]
 80135e0:	f8cd a000 	str.w	sl, [sp]
 80135e4:	464b      	mov	r3, r9
 80135e6:	aa03      	add	r2, sp, #12
 80135e8:	4621      	mov	r1, r4
 80135ea:	4640      	mov	r0, r8
 80135ec:	f7ff fee6 	bl	80133bc <_printf_common>
 80135f0:	3001      	adds	r0, #1
 80135f2:	d14a      	bne.n	801368a <_printf_i+0x1f2>
 80135f4:	f04f 30ff 	mov.w	r0, #4294967295
 80135f8:	b004      	add	sp, #16
 80135fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135fe:	6823      	ldr	r3, [r4, #0]
 8013600:	f043 0320 	orr.w	r3, r3, #32
 8013604:	6023      	str	r3, [r4, #0]
 8013606:	4833      	ldr	r0, [pc, #204]	@ (80136d4 <_printf_i+0x23c>)
 8013608:	2778      	movs	r7, #120	@ 0x78
 801360a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801360e:	6823      	ldr	r3, [r4, #0]
 8013610:	6831      	ldr	r1, [r6, #0]
 8013612:	061f      	lsls	r7, r3, #24
 8013614:	f851 5b04 	ldr.w	r5, [r1], #4
 8013618:	d402      	bmi.n	8013620 <_printf_i+0x188>
 801361a:	065f      	lsls	r7, r3, #25
 801361c:	bf48      	it	mi
 801361e:	b2ad      	uxthmi	r5, r5
 8013620:	6031      	str	r1, [r6, #0]
 8013622:	07d9      	lsls	r1, r3, #31
 8013624:	bf44      	itt	mi
 8013626:	f043 0320 	orrmi.w	r3, r3, #32
 801362a:	6023      	strmi	r3, [r4, #0]
 801362c:	b11d      	cbz	r5, 8013636 <_printf_i+0x19e>
 801362e:	2310      	movs	r3, #16
 8013630:	e7ac      	b.n	801358c <_printf_i+0xf4>
 8013632:	4827      	ldr	r0, [pc, #156]	@ (80136d0 <_printf_i+0x238>)
 8013634:	e7e9      	b.n	801360a <_printf_i+0x172>
 8013636:	6823      	ldr	r3, [r4, #0]
 8013638:	f023 0320 	bic.w	r3, r3, #32
 801363c:	6023      	str	r3, [r4, #0]
 801363e:	e7f6      	b.n	801362e <_printf_i+0x196>
 8013640:	4616      	mov	r6, r2
 8013642:	e7bd      	b.n	80135c0 <_printf_i+0x128>
 8013644:	6833      	ldr	r3, [r6, #0]
 8013646:	6825      	ldr	r5, [r4, #0]
 8013648:	6961      	ldr	r1, [r4, #20]
 801364a:	1d18      	adds	r0, r3, #4
 801364c:	6030      	str	r0, [r6, #0]
 801364e:	062e      	lsls	r6, r5, #24
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	d501      	bpl.n	8013658 <_printf_i+0x1c0>
 8013654:	6019      	str	r1, [r3, #0]
 8013656:	e002      	b.n	801365e <_printf_i+0x1c6>
 8013658:	0668      	lsls	r0, r5, #25
 801365a:	d5fb      	bpl.n	8013654 <_printf_i+0x1bc>
 801365c:	8019      	strh	r1, [r3, #0]
 801365e:	2300      	movs	r3, #0
 8013660:	6123      	str	r3, [r4, #16]
 8013662:	4616      	mov	r6, r2
 8013664:	e7bc      	b.n	80135e0 <_printf_i+0x148>
 8013666:	6833      	ldr	r3, [r6, #0]
 8013668:	1d1a      	adds	r2, r3, #4
 801366a:	6032      	str	r2, [r6, #0]
 801366c:	681e      	ldr	r6, [r3, #0]
 801366e:	6862      	ldr	r2, [r4, #4]
 8013670:	2100      	movs	r1, #0
 8013672:	4630      	mov	r0, r6
 8013674:	f7ec fdcc 	bl	8000210 <memchr>
 8013678:	b108      	cbz	r0, 801367e <_printf_i+0x1e6>
 801367a:	1b80      	subs	r0, r0, r6
 801367c:	6060      	str	r0, [r4, #4]
 801367e:	6863      	ldr	r3, [r4, #4]
 8013680:	6123      	str	r3, [r4, #16]
 8013682:	2300      	movs	r3, #0
 8013684:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013688:	e7aa      	b.n	80135e0 <_printf_i+0x148>
 801368a:	6923      	ldr	r3, [r4, #16]
 801368c:	4632      	mov	r2, r6
 801368e:	4649      	mov	r1, r9
 8013690:	4640      	mov	r0, r8
 8013692:	47d0      	blx	sl
 8013694:	3001      	adds	r0, #1
 8013696:	d0ad      	beq.n	80135f4 <_printf_i+0x15c>
 8013698:	6823      	ldr	r3, [r4, #0]
 801369a:	079b      	lsls	r3, r3, #30
 801369c:	d413      	bmi.n	80136c6 <_printf_i+0x22e>
 801369e:	68e0      	ldr	r0, [r4, #12]
 80136a0:	9b03      	ldr	r3, [sp, #12]
 80136a2:	4298      	cmp	r0, r3
 80136a4:	bfb8      	it	lt
 80136a6:	4618      	movlt	r0, r3
 80136a8:	e7a6      	b.n	80135f8 <_printf_i+0x160>
 80136aa:	2301      	movs	r3, #1
 80136ac:	4632      	mov	r2, r6
 80136ae:	4649      	mov	r1, r9
 80136b0:	4640      	mov	r0, r8
 80136b2:	47d0      	blx	sl
 80136b4:	3001      	adds	r0, #1
 80136b6:	d09d      	beq.n	80135f4 <_printf_i+0x15c>
 80136b8:	3501      	adds	r5, #1
 80136ba:	68e3      	ldr	r3, [r4, #12]
 80136bc:	9903      	ldr	r1, [sp, #12]
 80136be:	1a5b      	subs	r3, r3, r1
 80136c0:	42ab      	cmp	r3, r5
 80136c2:	dcf2      	bgt.n	80136aa <_printf_i+0x212>
 80136c4:	e7eb      	b.n	801369e <_printf_i+0x206>
 80136c6:	2500      	movs	r5, #0
 80136c8:	f104 0619 	add.w	r6, r4, #25
 80136cc:	e7f5      	b.n	80136ba <_printf_i+0x222>
 80136ce:	bf00      	nop
 80136d0:	080173b6 	.word	0x080173b6
 80136d4:	080173c7 	.word	0x080173c7

080136d8 <std>:
 80136d8:	2300      	movs	r3, #0
 80136da:	b510      	push	{r4, lr}
 80136dc:	4604      	mov	r4, r0
 80136de:	e9c0 3300 	strd	r3, r3, [r0]
 80136e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80136e6:	6083      	str	r3, [r0, #8]
 80136e8:	8181      	strh	r1, [r0, #12]
 80136ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80136ec:	81c2      	strh	r2, [r0, #14]
 80136ee:	6183      	str	r3, [r0, #24]
 80136f0:	4619      	mov	r1, r3
 80136f2:	2208      	movs	r2, #8
 80136f4:	305c      	adds	r0, #92	@ 0x5c
 80136f6:	f000 f926 	bl	8013946 <memset>
 80136fa:	4b0d      	ldr	r3, [pc, #52]	@ (8013730 <std+0x58>)
 80136fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80136fe:	4b0d      	ldr	r3, [pc, #52]	@ (8013734 <std+0x5c>)
 8013700:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013702:	4b0d      	ldr	r3, [pc, #52]	@ (8013738 <std+0x60>)
 8013704:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013706:	4b0d      	ldr	r3, [pc, #52]	@ (801373c <std+0x64>)
 8013708:	6323      	str	r3, [r4, #48]	@ 0x30
 801370a:	4b0d      	ldr	r3, [pc, #52]	@ (8013740 <std+0x68>)
 801370c:	6224      	str	r4, [r4, #32]
 801370e:	429c      	cmp	r4, r3
 8013710:	d006      	beq.n	8013720 <std+0x48>
 8013712:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013716:	4294      	cmp	r4, r2
 8013718:	d002      	beq.n	8013720 <std+0x48>
 801371a:	33d0      	adds	r3, #208	@ 0xd0
 801371c:	429c      	cmp	r4, r3
 801371e:	d105      	bne.n	801372c <std+0x54>
 8013720:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013728:	f000 b9e0 	b.w	8013aec <__retarget_lock_init_recursive>
 801372c:	bd10      	pop	{r4, pc}
 801372e:	bf00      	nop
 8013730:	080138c1 	.word	0x080138c1
 8013734:	080138e3 	.word	0x080138e3
 8013738:	0801391b 	.word	0x0801391b
 801373c:	0801393f 	.word	0x0801393f
 8013740:	200069bc 	.word	0x200069bc

08013744 <stdio_exit_handler>:
 8013744:	4a02      	ldr	r2, [pc, #8]	@ (8013750 <stdio_exit_handler+0xc>)
 8013746:	4903      	ldr	r1, [pc, #12]	@ (8013754 <stdio_exit_handler+0x10>)
 8013748:	4803      	ldr	r0, [pc, #12]	@ (8013758 <stdio_exit_handler+0x14>)
 801374a:	f000 b869 	b.w	8013820 <_fwalk_sglue>
 801374e:	bf00      	nop
 8013750:	20000028 	.word	0x20000028
 8013754:	080156e9 	.word	0x080156e9
 8013758:	20000038 	.word	0x20000038

0801375c <cleanup_stdio>:
 801375c:	6841      	ldr	r1, [r0, #4]
 801375e:	4b0c      	ldr	r3, [pc, #48]	@ (8013790 <cleanup_stdio+0x34>)
 8013760:	4299      	cmp	r1, r3
 8013762:	b510      	push	{r4, lr}
 8013764:	4604      	mov	r4, r0
 8013766:	d001      	beq.n	801376c <cleanup_stdio+0x10>
 8013768:	f001 ffbe 	bl	80156e8 <_fflush_r>
 801376c:	68a1      	ldr	r1, [r4, #8]
 801376e:	4b09      	ldr	r3, [pc, #36]	@ (8013794 <cleanup_stdio+0x38>)
 8013770:	4299      	cmp	r1, r3
 8013772:	d002      	beq.n	801377a <cleanup_stdio+0x1e>
 8013774:	4620      	mov	r0, r4
 8013776:	f001 ffb7 	bl	80156e8 <_fflush_r>
 801377a:	68e1      	ldr	r1, [r4, #12]
 801377c:	4b06      	ldr	r3, [pc, #24]	@ (8013798 <cleanup_stdio+0x3c>)
 801377e:	4299      	cmp	r1, r3
 8013780:	d004      	beq.n	801378c <cleanup_stdio+0x30>
 8013782:	4620      	mov	r0, r4
 8013784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013788:	f001 bfae 	b.w	80156e8 <_fflush_r>
 801378c:	bd10      	pop	{r4, pc}
 801378e:	bf00      	nop
 8013790:	200069bc 	.word	0x200069bc
 8013794:	20006a24 	.word	0x20006a24
 8013798:	20006a8c 	.word	0x20006a8c

0801379c <global_stdio_init.part.0>:
 801379c:	b510      	push	{r4, lr}
 801379e:	4b0b      	ldr	r3, [pc, #44]	@ (80137cc <global_stdio_init.part.0+0x30>)
 80137a0:	4c0b      	ldr	r4, [pc, #44]	@ (80137d0 <global_stdio_init.part.0+0x34>)
 80137a2:	4a0c      	ldr	r2, [pc, #48]	@ (80137d4 <global_stdio_init.part.0+0x38>)
 80137a4:	601a      	str	r2, [r3, #0]
 80137a6:	4620      	mov	r0, r4
 80137a8:	2200      	movs	r2, #0
 80137aa:	2104      	movs	r1, #4
 80137ac:	f7ff ff94 	bl	80136d8 <std>
 80137b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80137b4:	2201      	movs	r2, #1
 80137b6:	2109      	movs	r1, #9
 80137b8:	f7ff ff8e 	bl	80136d8 <std>
 80137bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80137c0:	2202      	movs	r2, #2
 80137c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80137c6:	2112      	movs	r1, #18
 80137c8:	f7ff bf86 	b.w	80136d8 <std>
 80137cc:	20006af4 	.word	0x20006af4
 80137d0:	200069bc 	.word	0x200069bc
 80137d4:	08013745 	.word	0x08013745

080137d8 <__sfp_lock_acquire>:
 80137d8:	4801      	ldr	r0, [pc, #4]	@ (80137e0 <__sfp_lock_acquire+0x8>)
 80137da:	f000 b988 	b.w	8013aee <__retarget_lock_acquire_recursive>
 80137de:	bf00      	nop
 80137e0:	20006afd 	.word	0x20006afd

080137e4 <__sfp_lock_release>:
 80137e4:	4801      	ldr	r0, [pc, #4]	@ (80137ec <__sfp_lock_release+0x8>)
 80137e6:	f000 b983 	b.w	8013af0 <__retarget_lock_release_recursive>
 80137ea:	bf00      	nop
 80137ec:	20006afd 	.word	0x20006afd

080137f0 <__sinit>:
 80137f0:	b510      	push	{r4, lr}
 80137f2:	4604      	mov	r4, r0
 80137f4:	f7ff fff0 	bl	80137d8 <__sfp_lock_acquire>
 80137f8:	6a23      	ldr	r3, [r4, #32]
 80137fa:	b11b      	cbz	r3, 8013804 <__sinit+0x14>
 80137fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013800:	f7ff bff0 	b.w	80137e4 <__sfp_lock_release>
 8013804:	4b04      	ldr	r3, [pc, #16]	@ (8013818 <__sinit+0x28>)
 8013806:	6223      	str	r3, [r4, #32]
 8013808:	4b04      	ldr	r3, [pc, #16]	@ (801381c <__sinit+0x2c>)
 801380a:	681b      	ldr	r3, [r3, #0]
 801380c:	2b00      	cmp	r3, #0
 801380e:	d1f5      	bne.n	80137fc <__sinit+0xc>
 8013810:	f7ff ffc4 	bl	801379c <global_stdio_init.part.0>
 8013814:	e7f2      	b.n	80137fc <__sinit+0xc>
 8013816:	bf00      	nop
 8013818:	0801375d 	.word	0x0801375d
 801381c:	20006af4 	.word	0x20006af4

08013820 <_fwalk_sglue>:
 8013820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013824:	4607      	mov	r7, r0
 8013826:	4688      	mov	r8, r1
 8013828:	4614      	mov	r4, r2
 801382a:	2600      	movs	r6, #0
 801382c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013830:	f1b9 0901 	subs.w	r9, r9, #1
 8013834:	d505      	bpl.n	8013842 <_fwalk_sglue+0x22>
 8013836:	6824      	ldr	r4, [r4, #0]
 8013838:	2c00      	cmp	r4, #0
 801383a:	d1f7      	bne.n	801382c <_fwalk_sglue+0xc>
 801383c:	4630      	mov	r0, r6
 801383e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013842:	89ab      	ldrh	r3, [r5, #12]
 8013844:	2b01      	cmp	r3, #1
 8013846:	d907      	bls.n	8013858 <_fwalk_sglue+0x38>
 8013848:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801384c:	3301      	adds	r3, #1
 801384e:	d003      	beq.n	8013858 <_fwalk_sglue+0x38>
 8013850:	4629      	mov	r1, r5
 8013852:	4638      	mov	r0, r7
 8013854:	47c0      	blx	r8
 8013856:	4306      	orrs	r6, r0
 8013858:	3568      	adds	r5, #104	@ 0x68
 801385a:	e7e9      	b.n	8013830 <_fwalk_sglue+0x10>

0801385c <iprintf>:
 801385c:	b40f      	push	{r0, r1, r2, r3}
 801385e:	b507      	push	{r0, r1, r2, lr}
 8013860:	4906      	ldr	r1, [pc, #24]	@ (801387c <iprintf+0x20>)
 8013862:	ab04      	add	r3, sp, #16
 8013864:	6808      	ldr	r0, [r1, #0]
 8013866:	f853 2b04 	ldr.w	r2, [r3], #4
 801386a:	6881      	ldr	r1, [r0, #8]
 801386c:	9301      	str	r3, [sp, #4]
 801386e:	f001 fd9f 	bl	80153b0 <_vfiprintf_r>
 8013872:	b003      	add	sp, #12
 8013874:	f85d eb04 	ldr.w	lr, [sp], #4
 8013878:	b004      	add	sp, #16
 801387a:	4770      	bx	lr
 801387c:	20000034 	.word	0x20000034

08013880 <siprintf>:
 8013880:	b40e      	push	{r1, r2, r3}
 8013882:	b500      	push	{lr}
 8013884:	b09c      	sub	sp, #112	@ 0x70
 8013886:	ab1d      	add	r3, sp, #116	@ 0x74
 8013888:	9002      	str	r0, [sp, #8]
 801388a:	9006      	str	r0, [sp, #24]
 801388c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013890:	4809      	ldr	r0, [pc, #36]	@ (80138b8 <siprintf+0x38>)
 8013892:	9107      	str	r1, [sp, #28]
 8013894:	9104      	str	r1, [sp, #16]
 8013896:	4909      	ldr	r1, [pc, #36]	@ (80138bc <siprintf+0x3c>)
 8013898:	f853 2b04 	ldr.w	r2, [r3], #4
 801389c:	9105      	str	r1, [sp, #20]
 801389e:	6800      	ldr	r0, [r0, #0]
 80138a0:	9301      	str	r3, [sp, #4]
 80138a2:	a902      	add	r1, sp, #8
 80138a4:	f001 fc5e 	bl	8015164 <_svfiprintf_r>
 80138a8:	9b02      	ldr	r3, [sp, #8]
 80138aa:	2200      	movs	r2, #0
 80138ac:	701a      	strb	r2, [r3, #0]
 80138ae:	b01c      	add	sp, #112	@ 0x70
 80138b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80138b4:	b003      	add	sp, #12
 80138b6:	4770      	bx	lr
 80138b8:	20000034 	.word	0x20000034
 80138bc:	ffff0208 	.word	0xffff0208

080138c0 <__sread>:
 80138c0:	b510      	push	{r4, lr}
 80138c2:	460c      	mov	r4, r1
 80138c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80138c8:	f000 f8c2 	bl	8013a50 <_read_r>
 80138cc:	2800      	cmp	r0, #0
 80138ce:	bfab      	itete	ge
 80138d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80138d2:	89a3      	ldrhlt	r3, [r4, #12]
 80138d4:	181b      	addge	r3, r3, r0
 80138d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80138da:	bfac      	ite	ge
 80138dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80138de:	81a3      	strhlt	r3, [r4, #12]
 80138e0:	bd10      	pop	{r4, pc}

080138e2 <__swrite>:
 80138e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138e6:	461f      	mov	r7, r3
 80138e8:	898b      	ldrh	r3, [r1, #12]
 80138ea:	05db      	lsls	r3, r3, #23
 80138ec:	4605      	mov	r5, r0
 80138ee:	460c      	mov	r4, r1
 80138f0:	4616      	mov	r6, r2
 80138f2:	d505      	bpl.n	8013900 <__swrite+0x1e>
 80138f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80138f8:	2302      	movs	r3, #2
 80138fa:	2200      	movs	r2, #0
 80138fc:	f000 f896 	bl	8013a2c <_lseek_r>
 8013900:	89a3      	ldrh	r3, [r4, #12]
 8013902:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013906:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801390a:	81a3      	strh	r3, [r4, #12]
 801390c:	4632      	mov	r2, r6
 801390e:	463b      	mov	r3, r7
 8013910:	4628      	mov	r0, r5
 8013912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013916:	f000 b8ad 	b.w	8013a74 <_write_r>

0801391a <__sseek>:
 801391a:	b510      	push	{r4, lr}
 801391c:	460c      	mov	r4, r1
 801391e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013922:	f000 f883 	bl	8013a2c <_lseek_r>
 8013926:	1c43      	adds	r3, r0, #1
 8013928:	89a3      	ldrh	r3, [r4, #12]
 801392a:	bf15      	itete	ne
 801392c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801392e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013932:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013936:	81a3      	strheq	r3, [r4, #12]
 8013938:	bf18      	it	ne
 801393a:	81a3      	strhne	r3, [r4, #12]
 801393c:	bd10      	pop	{r4, pc}

0801393e <__sclose>:
 801393e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013942:	f000 b80d 	b.w	8013960 <_close_r>

08013946 <memset>:
 8013946:	4402      	add	r2, r0
 8013948:	4603      	mov	r3, r0
 801394a:	4293      	cmp	r3, r2
 801394c:	d100      	bne.n	8013950 <memset+0xa>
 801394e:	4770      	bx	lr
 8013950:	f803 1b01 	strb.w	r1, [r3], #1
 8013954:	e7f9      	b.n	801394a <memset+0x4>
	...

08013958 <_localeconv_r>:
 8013958:	4800      	ldr	r0, [pc, #0]	@ (801395c <_localeconv_r+0x4>)
 801395a:	4770      	bx	lr
 801395c:	20000174 	.word	0x20000174

08013960 <_close_r>:
 8013960:	b538      	push	{r3, r4, r5, lr}
 8013962:	4d06      	ldr	r5, [pc, #24]	@ (801397c <_close_r+0x1c>)
 8013964:	2300      	movs	r3, #0
 8013966:	4604      	mov	r4, r0
 8013968:	4608      	mov	r0, r1
 801396a:	602b      	str	r3, [r5, #0]
 801396c:	f7f0 feca 	bl	8004704 <_close>
 8013970:	1c43      	adds	r3, r0, #1
 8013972:	d102      	bne.n	801397a <_close_r+0x1a>
 8013974:	682b      	ldr	r3, [r5, #0]
 8013976:	b103      	cbz	r3, 801397a <_close_r+0x1a>
 8013978:	6023      	str	r3, [r4, #0]
 801397a:	bd38      	pop	{r3, r4, r5, pc}
 801397c:	20006af8 	.word	0x20006af8

08013980 <_reclaim_reent>:
 8013980:	4b29      	ldr	r3, [pc, #164]	@ (8013a28 <_reclaim_reent+0xa8>)
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	4283      	cmp	r3, r0
 8013986:	b570      	push	{r4, r5, r6, lr}
 8013988:	4604      	mov	r4, r0
 801398a:	d04b      	beq.n	8013a24 <_reclaim_reent+0xa4>
 801398c:	69c3      	ldr	r3, [r0, #28]
 801398e:	b1ab      	cbz	r3, 80139bc <_reclaim_reent+0x3c>
 8013990:	68db      	ldr	r3, [r3, #12]
 8013992:	b16b      	cbz	r3, 80139b0 <_reclaim_reent+0x30>
 8013994:	2500      	movs	r5, #0
 8013996:	69e3      	ldr	r3, [r4, #28]
 8013998:	68db      	ldr	r3, [r3, #12]
 801399a:	5959      	ldr	r1, [r3, r5]
 801399c:	2900      	cmp	r1, #0
 801399e:	d13b      	bne.n	8013a18 <_reclaim_reent+0x98>
 80139a0:	3504      	adds	r5, #4
 80139a2:	2d80      	cmp	r5, #128	@ 0x80
 80139a4:	d1f7      	bne.n	8013996 <_reclaim_reent+0x16>
 80139a6:	69e3      	ldr	r3, [r4, #28]
 80139a8:	4620      	mov	r0, r4
 80139aa:	68d9      	ldr	r1, [r3, #12]
 80139ac:	f000 fefc 	bl	80147a8 <_free_r>
 80139b0:	69e3      	ldr	r3, [r4, #28]
 80139b2:	6819      	ldr	r1, [r3, #0]
 80139b4:	b111      	cbz	r1, 80139bc <_reclaim_reent+0x3c>
 80139b6:	4620      	mov	r0, r4
 80139b8:	f000 fef6 	bl	80147a8 <_free_r>
 80139bc:	6961      	ldr	r1, [r4, #20]
 80139be:	b111      	cbz	r1, 80139c6 <_reclaim_reent+0x46>
 80139c0:	4620      	mov	r0, r4
 80139c2:	f000 fef1 	bl	80147a8 <_free_r>
 80139c6:	69e1      	ldr	r1, [r4, #28]
 80139c8:	b111      	cbz	r1, 80139d0 <_reclaim_reent+0x50>
 80139ca:	4620      	mov	r0, r4
 80139cc:	f000 feec 	bl	80147a8 <_free_r>
 80139d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80139d2:	b111      	cbz	r1, 80139da <_reclaim_reent+0x5a>
 80139d4:	4620      	mov	r0, r4
 80139d6:	f000 fee7 	bl	80147a8 <_free_r>
 80139da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80139dc:	b111      	cbz	r1, 80139e4 <_reclaim_reent+0x64>
 80139de:	4620      	mov	r0, r4
 80139e0:	f000 fee2 	bl	80147a8 <_free_r>
 80139e4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80139e6:	b111      	cbz	r1, 80139ee <_reclaim_reent+0x6e>
 80139e8:	4620      	mov	r0, r4
 80139ea:	f000 fedd 	bl	80147a8 <_free_r>
 80139ee:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80139f0:	b111      	cbz	r1, 80139f8 <_reclaim_reent+0x78>
 80139f2:	4620      	mov	r0, r4
 80139f4:	f000 fed8 	bl	80147a8 <_free_r>
 80139f8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80139fa:	b111      	cbz	r1, 8013a02 <_reclaim_reent+0x82>
 80139fc:	4620      	mov	r0, r4
 80139fe:	f000 fed3 	bl	80147a8 <_free_r>
 8013a02:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8013a04:	b111      	cbz	r1, 8013a0c <_reclaim_reent+0x8c>
 8013a06:	4620      	mov	r0, r4
 8013a08:	f000 fece 	bl	80147a8 <_free_r>
 8013a0c:	6a23      	ldr	r3, [r4, #32]
 8013a0e:	b14b      	cbz	r3, 8013a24 <_reclaim_reent+0xa4>
 8013a10:	4620      	mov	r0, r4
 8013a12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013a16:	4718      	bx	r3
 8013a18:	680e      	ldr	r6, [r1, #0]
 8013a1a:	4620      	mov	r0, r4
 8013a1c:	f000 fec4 	bl	80147a8 <_free_r>
 8013a20:	4631      	mov	r1, r6
 8013a22:	e7bb      	b.n	801399c <_reclaim_reent+0x1c>
 8013a24:	bd70      	pop	{r4, r5, r6, pc}
 8013a26:	bf00      	nop
 8013a28:	20000034 	.word	0x20000034

08013a2c <_lseek_r>:
 8013a2c:	b538      	push	{r3, r4, r5, lr}
 8013a2e:	4d07      	ldr	r5, [pc, #28]	@ (8013a4c <_lseek_r+0x20>)
 8013a30:	4604      	mov	r4, r0
 8013a32:	4608      	mov	r0, r1
 8013a34:	4611      	mov	r1, r2
 8013a36:	2200      	movs	r2, #0
 8013a38:	602a      	str	r2, [r5, #0]
 8013a3a:	461a      	mov	r2, r3
 8013a3c:	f7f0 fe89 	bl	8004752 <_lseek>
 8013a40:	1c43      	adds	r3, r0, #1
 8013a42:	d102      	bne.n	8013a4a <_lseek_r+0x1e>
 8013a44:	682b      	ldr	r3, [r5, #0]
 8013a46:	b103      	cbz	r3, 8013a4a <_lseek_r+0x1e>
 8013a48:	6023      	str	r3, [r4, #0]
 8013a4a:	bd38      	pop	{r3, r4, r5, pc}
 8013a4c:	20006af8 	.word	0x20006af8

08013a50 <_read_r>:
 8013a50:	b538      	push	{r3, r4, r5, lr}
 8013a52:	4d07      	ldr	r5, [pc, #28]	@ (8013a70 <_read_r+0x20>)
 8013a54:	4604      	mov	r4, r0
 8013a56:	4608      	mov	r0, r1
 8013a58:	4611      	mov	r1, r2
 8013a5a:	2200      	movs	r2, #0
 8013a5c:	602a      	str	r2, [r5, #0]
 8013a5e:	461a      	mov	r2, r3
 8013a60:	f7f0 fe33 	bl	80046ca <_read>
 8013a64:	1c43      	adds	r3, r0, #1
 8013a66:	d102      	bne.n	8013a6e <_read_r+0x1e>
 8013a68:	682b      	ldr	r3, [r5, #0]
 8013a6a:	b103      	cbz	r3, 8013a6e <_read_r+0x1e>
 8013a6c:	6023      	str	r3, [r4, #0]
 8013a6e:	bd38      	pop	{r3, r4, r5, pc}
 8013a70:	20006af8 	.word	0x20006af8

08013a74 <_write_r>:
 8013a74:	b538      	push	{r3, r4, r5, lr}
 8013a76:	4d07      	ldr	r5, [pc, #28]	@ (8013a94 <_write_r+0x20>)
 8013a78:	4604      	mov	r4, r0
 8013a7a:	4608      	mov	r0, r1
 8013a7c:	4611      	mov	r1, r2
 8013a7e:	2200      	movs	r2, #0
 8013a80:	602a      	str	r2, [r5, #0]
 8013a82:	461a      	mov	r2, r3
 8013a84:	f7ee fd92 	bl	80025ac <_write>
 8013a88:	1c43      	adds	r3, r0, #1
 8013a8a:	d102      	bne.n	8013a92 <_write_r+0x1e>
 8013a8c:	682b      	ldr	r3, [r5, #0]
 8013a8e:	b103      	cbz	r3, 8013a92 <_write_r+0x1e>
 8013a90:	6023      	str	r3, [r4, #0]
 8013a92:	bd38      	pop	{r3, r4, r5, pc}
 8013a94:	20006af8 	.word	0x20006af8

08013a98 <__errno>:
 8013a98:	4b01      	ldr	r3, [pc, #4]	@ (8013aa0 <__errno+0x8>)
 8013a9a:	6818      	ldr	r0, [r3, #0]
 8013a9c:	4770      	bx	lr
 8013a9e:	bf00      	nop
 8013aa0:	20000034 	.word	0x20000034

08013aa4 <__libc_init_array>:
 8013aa4:	b570      	push	{r4, r5, r6, lr}
 8013aa6:	4d0d      	ldr	r5, [pc, #52]	@ (8013adc <__libc_init_array+0x38>)
 8013aa8:	4c0d      	ldr	r4, [pc, #52]	@ (8013ae0 <__libc_init_array+0x3c>)
 8013aaa:	1b64      	subs	r4, r4, r5
 8013aac:	10a4      	asrs	r4, r4, #2
 8013aae:	2600      	movs	r6, #0
 8013ab0:	42a6      	cmp	r6, r4
 8013ab2:	d109      	bne.n	8013ac8 <__libc_init_array+0x24>
 8013ab4:	4d0b      	ldr	r5, [pc, #44]	@ (8013ae4 <__libc_init_array+0x40>)
 8013ab6:	4c0c      	ldr	r4, [pc, #48]	@ (8013ae8 <__libc_init_array+0x44>)
 8013ab8:	f003 f8e0 	bl	8016c7c <_init>
 8013abc:	1b64      	subs	r4, r4, r5
 8013abe:	10a4      	asrs	r4, r4, #2
 8013ac0:	2600      	movs	r6, #0
 8013ac2:	42a6      	cmp	r6, r4
 8013ac4:	d105      	bne.n	8013ad2 <__libc_init_array+0x2e>
 8013ac6:	bd70      	pop	{r4, r5, r6, pc}
 8013ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8013acc:	4798      	blx	r3
 8013ace:	3601      	adds	r6, #1
 8013ad0:	e7ee      	b.n	8013ab0 <__libc_init_array+0xc>
 8013ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8013ad6:	4798      	blx	r3
 8013ad8:	3601      	adds	r6, #1
 8013ada:	e7f2      	b.n	8013ac2 <__libc_init_array+0x1e>
 8013adc:	08017b10 	.word	0x08017b10
 8013ae0:	08017b10 	.word	0x08017b10
 8013ae4:	08017b10 	.word	0x08017b10
 8013ae8:	08017b14 	.word	0x08017b14

08013aec <__retarget_lock_init_recursive>:
 8013aec:	4770      	bx	lr

08013aee <__retarget_lock_acquire_recursive>:
 8013aee:	4770      	bx	lr

08013af0 <__retarget_lock_release_recursive>:
 8013af0:	4770      	bx	lr

08013af2 <memcpy>:
 8013af2:	440a      	add	r2, r1
 8013af4:	4291      	cmp	r1, r2
 8013af6:	f100 33ff 	add.w	r3, r0, #4294967295
 8013afa:	d100      	bne.n	8013afe <memcpy+0xc>
 8013afc:	4770      	bx	lr
 8013afe:	b510      	push	{r4, lr}
 8013b00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013b04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013b08:	4291      	cmp	r1, r2
 8013b0a:	d1f9      	bne.n	8013b00 <memcpy+0xe>
 8013b0c:	bd10      	pop	{r4, pc}

08013b0e <quorem>:
 8013b0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b12:	6903      	ldr	r3, [r0, #16]
 8013b14:	690c      	ldr	r4, [r1, #16]
 8013b16:	42a3      	cmp	r3, r4
 8013b18:	4607      	mov	r7, r0
 8013b1a:	db7e      	blt.n	8013c1a <quorem+0x10c>
 8013b1c:	3c01      	subs	r4, #1
 8013b1e:	f101 0814 	add.w	r8, r1, #20
 8013b22:	00a3      	lsls	r3, r4, #2
 8013b24:	f100 0514 	add.w	r5, r0, #20
 8013b28:	9300      	str	r3, [sp, #0]
 8013b2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013b2e:	9301      	str	r3, [sp, #4]
 8013b30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013b34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013b38:	3301      	adds	r3, #1
 8013b3a:	429a      	cmp	r2, r3
 8013b3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013b40:	fbb2 f6f3 	udiv	r6, r2, r3
 8013b44:	d32e      	bcc.n	8013ba4 <quorem+0x96>
 8013b46:	f04f 0a00 	mov.w	sl, #0
 8013b4a:	46c4      	mov	ip, r8
 8013b4c:	46ae      	mov	lr, r5
 8013b4e:	46d3      	mov	fp, sl
 8013b50:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013b54:	b298      	uxth	r0, r3
 8013b56:	fb06 a000 	mla	r0, r6, r0, sl
 8013b5a:	0c02      	lsrs	r2, r0, #16
 8013b5c:	0c1b      	lsrs	r3, r3, #16
 8013b5e:	fb06 2303 	mla	r3, r6, r3, r2
 8013b62:	f8de 2000 	ldr.w	r2, [lr]
 8013b66:	b280      	uxth	r0, r0
 8013b68:	b292      	uxth	r2, r2
 8013b6a:	1a12      	subs	r2, r2, r0
 8013b6c:	445a      	add	r2, fp
 8013b6e:	f8de 0000 	ldr.w	r0, [lr]
 8013b72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013b76:	b29b      	uxth	r3, r3
 8013b78:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8013b7c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8013b80:	b292      	uxth	r2, r2
 8013b82:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8013b86:	45e1      	cmp	r9, ip
 8013b88:	f84e 2b04 	str.w	r2, [lr], #4
 8013b8c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8013b90:	d2de      	bcs.n	8013b50 <quorem+0x42>
 8013b92:	9b00      	ldr	r3, [sp, #0]
 8013b94:	58eb      	ldr	r3, [r5, r3]
 8013b96:	b92b      	cbnz	r3, 8013ba4 <quorem+0x96>
 8013b98:	9b01      	ldr	r3, [sp, #4]
 8013b9a:	3b04      	subs	r3, #4
 8013b9c:	429d      	cmp	r5, r3
 8013b9e:	461a      	mov	r2, r3
 8013ba0:	d32f      	bcc.n	8013c02 <quorem+0xf4>
 8013ba2:	613c      	str	r4, [r7, #16]
 8013ba4:	4638      	mov	r0, r7
 8013ba6:	f001 f979 	bl	8014e9c <__mcmp>
 8013baa:	2800      	cmp	r0, #0
 8013bac:	db25      	blt.n	8013bfa <quorem+0xec>
 8013bae:	4629      	mov	r1, r5
 8013bb0:	2000      	movs	r0, #0
 8013bb2:	f858 2b04 	ldr.w	r2, [r8], #4
 8013bb6:	f8d1 c000 	ldr.w	ip, [r1]
 8013bba:	fa1f fe82 	uxth.w	lr, r2
 8013bbe:	fa1f f38c 	uxth.w	r3, ip
 8013bc2:	eba3 030e 	sub.w	r3, r3, lr
 8013bc6:	4403      	add	r3, r0
 8013bc8:	0c12      	lsrs	r2, r2, #16
 8013bca:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8013bce:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8013bd2:	b29b      	uxth	r3, r3
 8013bd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013bd8:	45c1      	cmp	r9, r8
 8013bda:	f841 3b04 	str.w	r3, [r1], #4
 8013bde:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013be2:	d2e6      	bcs.n	8013bb2 <quorem+0xa4>
 8013be4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013be8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013bec:	b922      	cbnz	r2, 8013bf8 <quorem+0xea>
 8013bee:	3b04      	subs	r3, #4
 8013bf0:	429d      	cmp	r5, r3
 8013bf2:	461a      	mov	r2, r3
 8013bf4:	d30b      	bcc.n	8013c0e <quorem+0x100>
 8013bf6:	613c      	str	r4, [r7, #16]
 8013bf8:	3601      	adds	r6, #1
 8013bfa:	4630      	mov	r0, r6
 8013bfc:	b003      	add	sp, #12
 8013bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c02:	6812      	ldr	r2, [r2, #0]
 8013c04:	3b04      	subs	r3, #4
 8013c06:	2a00      	cmp	r2, #0
 8013c08:	d1cb      	bne.n	8013ba2 <quorem+0x94>
 8013c0a:	3c01      	subs	r4, #1
 8013c0c:	e7c6      	b.n	8013b9c <quorem+0x8e>
 8013c0e:	6812      	ldr	r2, [r2, #0]
 8013c10:	3b04      	subs	r3, #4
 8013c12:	2a00      	cmp	r2, #0
 8013c14:	d1ef      	bne.n	8013bf6 <quorem+0xe8>
 8013c16:	3c01      	subs	r4, #1
 8013c18:	e7ea      	b.n	8013bf0 <quorem+0xe2>
 8013c1a:	2000      	movs	r0, #0
 8013c1c:	e7ee      	b.n	8013bfc <quorem+0xee>
	...

08013c20 <_dtoa_r>:
 8013c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c24:	69c7      	ldr	r7, [r0, #28]
 8013c26:	b099      	sub	sp, #100	@ 0x64
 8013c28:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013c2c:	ec55 4b10 	vmov	r4, r5, d0
 8013c30:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8013c32:	9109      	str	r1, [sp, #36]	@ 0x24
 8013c34:	4683      	mov	fp, r0
 8013c36:	920e      	str	r2, [sp, #56]	@ 0x38
 8013c38:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013c3a:	b97f      	cbnz	r7, 8013c5c <_dtoa_r+0x3c>
 8013c3c:	2010      	movs	r0, #16
 8013c3e:	f000 fdfd 	bl	801483c <malloc>
 8013c42:	4602      	mov	r2, r0
 8013c44:	f8cb 001c 	str.w	r0, [fp, #28]
 8013c48:	b920      	cbnz	r0, 8013c54 <_dtoa_r+0x34>
 8013c4a:	4ba7      	ldr	r3, [pc, #668]	@ (8013ee8 <_dtoa_r+0x2c8>)
 8013c4c:	21ef      	movs	r1, #239	@ 0xef
 8013c4e:	48a7      	ldr	r0, [pc, #668]	@ (8013eec <_dtoa_r+0x2cc>)
 8013c50:	f001 fe30 	bl	80158b4 <__assert_func>
 8013c54:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8013c58:	6007      	str	r7, [r0, #0]
 8013c5a:	60c7      	str	r7, [r0, #12]
 8013c5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013c60:	6819      	ldr	r1, [r3, #0]
 8013c62:	b159      	cbz	r1, 8013c7c <_dtoa_r+0x5c>
 8013c64:	685a      	ldr	r2, [r3, #4]
 8013c66:	604a      	str	r2, [r1, #4]
 8013c68:	2301      	movs	r3, #1
 8013c6a:	4093      	lsls	r3, r2
 8013c6c:	608b      	str	r3, [r1, #8]
 8013c6e:	4658      	mov	r0, fp
 8013c70:	f000 feda 	bl	8014a28 <_Bfree>
 8013c74:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013c78:	2200      	movs	r2, #0
 8013c7a:	601a      	str	r2, [r3, #0]
 8013c7c:	1e2b      	subs	r3, r5, #0
 8013c7e:	bfb9      	ittee	lt
 8013c80:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8013c84:	9303      	strlt	r3, [sp, #12]
 8013c86:	2300      	movge	r3, #0
 8013c88:	6033      	strge	r3, [r6, #0]
 8013c8a:	9f03      	ldr	r7, [sp, #12]
 8013c8c:	4b98      	ldr	r3, [pc, #608]	@ (8013ef0 <_dtoa_r+0x2d0>)
 8013c8e:	bfbc      	itt	lt
 8013c90:	2201      	movlt	r2, #1
 8013c92:	6032      	strlt	r2, [r6, #0]
 8013c94:	43bb      	bics	r3, r7
 8013c96:	d112      	bne.n	8013cbe <_dtoa_r+0x9e>
 8013c98:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013c9a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8013c9e:	6013      	str	r3, [r2, #0]
 8013ca0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013ca4:	4323      	orrs	r3, r4
 8013ca6:	f000 854d 	beq.w	8014744 <_dtoa_r+0xb24>
 8013caa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013cac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8013f04 <_dtoa_r+0x2e4>
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	f000 854f 	beq.w	8014754 <_dtoa_r+0xb34>
 8013cb6:	f10a 0303 	add.w	r3, sl, #3
 8013cba:	f000 bd49 	b.w	8014750 <_dtoa_r+0xb30>
 8013cbe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013cc2:	2200      	movs	r2, #0
 8013cc4:	ec51 0b17 	vmov	r0, r1, d7
 8013cc8:	2300      	movs	r3, #0
 8013cca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8013cce:	f7ec ff1b 	bl	8000b08 <__aeabi_dcmpeq>
 8013cd2:	4680      	mov	r8, r0
 8013cd4:	b158      	cbz	r0, 8013cee <_dtoa_r+0xce>
 8013cd6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013cd8:	2301      	movs	r3, #1
 8013cda:	6013      	str	r3, [r2, #0]
 8013cdc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013cde:	b113      	cbz	r3, 8013ce6 <_dtoa_r+0xc6>
 8013ce0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013ce2:	4b84      	ldr	r3, [pc, #528]	@ (8013ef4 <_dtoa_r+0x2d4>)
 8013ce4:	6013      	str	r3, [r2, #0]
 8013ce6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8013f08 <_dtoa_r+0x2e8>
 8013cea:	f000 bd33 	b.w	8014754 <_dtoa_r+0xb34>
 8013cee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8013cf2:	aa16      	add	r2, sp, #88	@ 0x58
 8013cf4:	a917      	add	r1, sp, #92	@ 0x5c
 8013cf6:	4658      	mov	r0, fp
 8013cf8:	f001 f980 	bl	8014ffc <__d2b>
 8013cfc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8013d00:	4681      	mov	r9, r0
 8013d02:	2e00      	cmp	r6, #0
 8013d04:	d077      	beq.n	8013df6 <_dtoa_r+0x1d6>
 8013d06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013d08:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8013d0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013d10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013d14:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8013d18:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8013d1c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8013d20:	4619      	mov	r1, r3
 8013d22:	2200      	movs	r2, #0
 8013d24:	4b74      	ldr	r3, [pc, #464]	@ (8013ef8 <_dtoa_r+0x2d8>)
 8013d26:	f7ec facf 	bl	80002c8 <__aeabi_dsub>
 8013d2a:	a369      	add	r3, pc, #420	@ (adr r3, 8013ed0 <_dtoa_r+0x2b0>)
 8013d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d30:	f7ec fc82 	bl	8000638 <__aeabi_dmul>
 8013d34:	a368      	add	r3, pc, #416	@ (adr r3, 8013ed8 <_dtoa_r+0x2b8>)
 8013d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d3a:	f7ec fac7 	bl	80002cc <__adddf3>
 8013d3e:	4604      	mov	r4, r0
 8013d40:	4630      	mov	r0, r6
 8013d42:	460d      	mov	r5, r1
 8013d44:	f7ec fc0e 	bl	8000564 <__aeabi_i2d>
 8013d48:	a365      	add	r3, pc, #404	@ (adr r3, 8013ee0 <_dtoa_r+0x2c0>)
 8013d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d4e:	f7ec fc73 	bl	8000638 <__aeabi_dmul>
 8013d52:	4602      	mov	r2, r0
 8013d54:	460b      	mov	r3, r1
 8013d56:	4620      	mov	r0, r4
 8013d58:	4629      	mov	r1, r5
 8013d5a:	f7ec fab7 	bl	80002cc <__adddf3>
 8013d5e:	4604      	mov	r4, r0
 8013d60:	460d      	mov	r5, r1
 8013d62:	f7ec ff19 	bl	8000b98 <__aeabi_d2iz>
 8013d66:	2200      	movs	r2, #0
 8013d68:	4607      	mov	r7, r0
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	4620      	mov	r0, r4
 8013d6e:	4629      	mov	r1, r5
 8013d70:	f7ec fed4 	bl	8000b1c <__aeabi_dcmplt>
 8013d74:	b140      	cbz	r0, 8013d88 <_dtoa_r+0x168>
 8013d76:	4638      	mov	r0, r7
 8013d78:	f7ec fbf4 	bl	8000564 <__aeabi_i2d>
 8013d7c:	4622      	mov	r2, r4
 8013d7e:	462b      	mov	r3, r5
 8013d80:	f7ec fec2 	bl	8000b08 <__aeabi_dcmpeq>
 8013d84:	b900      	cbnz	r0, 8013d88 <_dtoa_r+0x168>
 8013d86:	3f01      	subs	r7, #1
 8013d88:	2f16      	cmp	r7, #22
 8013d8a:	d851      	bhi.n	8013e30 <_dtoa_r+0x210>
 8013d8c:	4b5b      	ldr	r3, [pc, #364]	@ (8013efc <_dtoa_r+0x2dc>)
 8013d8e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013d9a:	f7ec febf 	bl	8000b1c <__aeabi_dcmplt>
 8013d9e:	2800      	cmp	r0, #0
 8013da0:	d048      	beq.n	8013e34 <_dtoa_r+0x214>
 8013da2:	3f01      	subs	r7, #1
 8013da4:	2300      	movs	r3, #0
 8013da6:	9312      	str	r3, [sp, #72]	@ 0x48
 8013da8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013daa:	1b9b      	subs	r3, r3, r6
 8013dac:	1e5a      	subs	r2, r3, #1
 8013dae:	bf44      	itt	mi
 8013db0:	f1c3 0801 	rsbmi	r8, r3, #1
 8013db4:	2300      	movmi	r3, #0
 8013db6:	9208      	str	r2, [sp, #32]
 8013db8:	bf54      	ite	pl
 8013dba:	f04f 0800 	movpl.w	r8, #0
 8013dbe:	9308      	strmi	r3, [sp, #32]
 8013dc0:	2f00      	cmp	r7, #0
 8013dc2:	db39      	blt.n	8013e38 <_dtoa_r+0x218>
 8013dc4:	9b08      	ldr	r3, [sp, #32]
 8013dc6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8013dc8:	443b      	add	r3, r7
 8013dca:	9308      	str	r3, [sp, #32]
 8013dcc:	2300      	movs	r3, #0
 8013dce:	930a      	str	r3, [sp, #40]	@ 0x28
 8013dd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013dd2:	2b09      	cmp	r3, #9
 8013dd4:	d864      	bhi.n	8013ea0 <_dtoa_r+0x280>
 8013dd6:	2b05      	cmp	r3, #5
 8013dd8:	bfc4      	itt	gt
 8013dda:	3b04      	subgt	r3, #4
 8013ddc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8013dde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013de0:	f1a3 0302 	sub.w	r3, r3, #2
 8013de4:	bfcc      	ite	gt
 8013de6:	2400      	movgt	r4, #0
 8013de8:	2401      	movle	r4, #1
 8013dea:	2b03      	cmp	r3, #3
 8013dec:	d863      	bhi.n	8013eb6 <_dtoa_r+0x296>
 8013dee:	e8df f003 	tbb	[pc, r3]
 8013df2:	372a      	.short	0x372a
 8013df4:	5535      	.short	0x5535
 8013df6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8013dfa:	441e      	add	r6, r3
 8013dfc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8013e00:	2b20      	cmp	r3, #32
 8013e02:	bfc1      	itttt	gt
 8013e04:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8013e08:	409f      	lslgt	r7, r3
 8013e0a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8013e0e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8013e12:	bfd6      	itet	le
 8013e14:	f1c3 0320 	rsble	r3, r3, #32
 8013e18:	ea47 0003 	orrgt.w	r0, r7, r3
 8013e1c:	fa04 f003 	lslle.w	r0, r4, r3
 8013e20:	f7ec fb90 	bl	8000544 <__aeabi_ui2d>
 8013e24:	2201      	movs	r2, #1
 8013e26:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8013e2a:	3e01      	subs	r6, #1
 8013e2c:	9214      	str	r2, [sp, #80]	@ 0x50
 8013e2e:	e777      	b.n	8013d20 <_dtoa_r+0x100>
 8013e30:	2301      	movs	r3, #1
 8013e32:	e7b8      	b.n	8013da6 <_dtoa_r+0x186>
 8013e34:	9012      	str	r0, [sp, #72]	@ 0x48
 8013e36:	e7b7      	b.n	8013da8 <_dtoa_r+0x188>
 8013e38:	427b      	negs	r3, r7
 8013e3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8013e3c:	2300      	movs	r3, #0
 8013e3e:	eba8 0807 	sub.w	r8, r8, r7
 8013e42:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013e44:	e7c4      	b.n	8013dd0 <_dtoa_r+0x1b0>
 8013e46:	2300      	movs	r3, #0
 8013e48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013e4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	dc35      	bgt.n	8013ebc <_dtoa_r+0x29c>
 8013e50:	2301      	movs	r3, #1
 8013e52:	9300      	str	r3, [sp, #0]
 8013e54:	9307      	str	r3, [sp, #28]
 8013e56:	461a      	mov	r2, r3
 8013e58:	920e      	str	r2, [sp, #56]	@ 0x38
 8013e5a:	e00b      	b.n	8013e74 <_dtoa_r+0x254>
 8013e5c:	2301      	movs	r3, #1
 8013e5e:	e7f3      	b.n	8013e48 <_dtoa_r+0x228>
 8013e60:	2300      	movs	r3, #0
 8013e62:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013e64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013e66:	18fb      	adds	r3, r7, r3
 8013e68:	9300      	str	r3, [sp, #0]
 8013e6a:	3301      	adds	r3, #1
 8013e6c:	2b01      	cmp	r3, #1
 8013e6e:	9307      	str	r3, [sp, #28]
 8013e70:	bfb8      	it	lt
 8013e72:	2301      	movlt	r3, #1
 8013e74:	f8db 001c 	ldr.w	r0, [fp, #28]
 8013e78:	2100      	movs	r1, #0
 8013e7a:	2204      	movs	r2, #4
 8013e7c:	f102 0514 	add.w	r5, r2, #20
 8013e80:	429d      	cmp	r5, r3
 8013e82:	d91f      	bls.n	8013ec4 <_dtoa_r+0x2a4>
 8013e84:	6041      	str	r1, [r0, #4]
 8013e86:	4658      	mov	r0, fp
 8013e88:	f000 fd8e 	bl	80149a8 <_Balloc>
 8013e8c:	4682      	mov	sl, r0
 8013e8e:	2800      	cmp	r0, #0
 8013e90:	d13c      	bne.n	8013f0c <_dtoa_r+0x2ec>
 8013e92:	4b1b      	ldr	r3, [pc, #108]	@ (8013f00 <_dtoa_r+0x2e0>)
 8013e94:	4602      	mov	r2, r0
 8013e96:	f240 11af 	movw	r1, #431	@ 0x1af
 8013e9a:	e6d8      	b.n	8013c4e <_dtoa_r+0x2e>
 8013e9c:	2301      	movs	r3, #1
 8013e9e:	e7e0      	b.n	8013e62 <_dtoa_r+0x242>
 8013ea0:	2401      	movs	r4, #1
 8013ea2:	2300      	movs	r3, #0
 8013ea4:	9309      	str	r3, [sp, #36]	@ 0x24
 8013ea6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8013eac:	9300      	str	r3, [sp, #0]
 8013eae:	9307      	str	r3, [sp, #28]
 8013eb0:	2200      	movs	r2, #0
 8013eb2:	2312      	movs	r3, #18
 8013eb4:	e7d0      	b.n	8013e58 <_dtoa_r+0x238>
 8013eb6:	2301      	movs	r3, #1
 8013eb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013eba:	e7f5      	b.n	8013ea8 <_dtoa_r+0x288>
 8013ebc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013ebe:	9300      	str	r3, [sp, #0]
 8013ec0:	9307      	str	r3, [sp, #28]
 8013ec2:	e7d7      	b.n	8013e74 <_dtoa_r+0x254>
 8013ec4:	3101      	adds	r1, #1
 8013ec6:	0052      	lsls	r2, r2, #1
 8013ec8:	e7d8      	b.n	8013e7c <_dtoa_r+0x25c>
 8013eca:	bf00      	nop
 8013ecc:	f3af 8000 	nop.w
 8013ed0:	636f4361 	.word	0x636f4361
 8013ed4:	3fd287a7 	.word	0x3fd287a7
 8013ed8:	8b60c8b3 	.word	0x8b60c8b3
 8013edc:	3fc68a28 	.word	0x3fc68a28
 8013ee0:	509f79fb 	.word	0x509f79fb
 8013ee4:	3fd34413 	.word	0x3fd34413
 8013ee8:	080173e5 	.word	0x080173e5
 8013eec:	080173fc 	.word	0x080173fc
 8013ef0:	7ff00000 	.word	0x7ff00000
 8013ef4:	080173b5 	.word	0x080173b5
 8013ef8:	3ff80000 	.word	0x3ff80000
 8013efc:	080174f8 	.word	0x080174f8
 8013f00:	08017454 	.word	0x08017454
 8013f04:	080173e1 	.word	0x080173e1
 8013f08:	080173b4 	.word	0x080173b4
 8013f0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013f10:	6018      	str	r0, [r3, #0]
 8013f12:	9b07      	ldr	r3, [sp, #28]
 8013f14:	2b0e      	cmp	r3, #14
 8013f16:	f200 80a4 	bhi.w	8014062 <_dtoa_r+0x442>
 8013f1a:	2c00      	cmp	r4, #0
 8013f1c:	f000 80a1 	beq.w	8014062 <_dtoa_r+0x442>
 8013f20:	2f00      	cmp	r7, #0
 8013f22:	dd33      	ble.n	8013f8c <_dtoa_r+0x36c>
 8013f24:	4bad      	ldr	r3, [pc, #692]	@ (80141dc <_dtoa_r+0x5bc>)
 8013f26:	f007 020f 	and.w	r2, r7, #15
 8013f2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013f2e:	ed93 7b00 	vldr	d7, [r3]
 8013f32:	05f8      	lsls	r0, r7, #23
 8013f34:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013f38:	ea4f 1427 	mov.w	r4, r7, asr #4
 8013f3c:	d516      	bpl.n	8013f6c <_dtoa_r+0x34c>
 8013f3e:	4ba8      	ldr	r3, [pc, #672]	@ (80141e0 <_dtoa_r+0x5c0>)
 8013f40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013f44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013f48:	f7ec fca0 	bl	800088c <__aeabi_ddiv>
 8013f4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013f50:	f004 040f 	and.w	r4, r4, #15
 8013f54:	2603      	movs	r6, #3
 8013f56:	4da2      	ldr	r5, [pc, #648]	@ (80141e0 <_dtoa_r+0x5c0>)
 8013f58:	b954      	cbnz	r4, 8013f70 <_dtoa_r+0x350>
 8013f5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013f5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013f62:	f7ec fc93 	bl	800088c <__aeabi_ddiv>
 8013f66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013f6a:	e028      	b.n	8013fbe <_dtoa_r+0x39e>
 8013f6c:	2602      	movs	r6, #2
 8013f6e:	e7f2      	b.n	8013f56 <_dtoa_r+0x336>
 8013f70:	07e1      	lsls	r1, r4, #31
 8013f72:	d508      	bpl.n	8013f86 <_dtoa_r+0x366>
 8013f74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013f78:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013f7c:	f7ec fb5c 	bl	8000638 <__aeabi_dmul>
 8013f80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013f84:	3601      	adds	r6, #1
 8013f86:	1064      	asrs	r4, r4, #1
 8013f88:	3508      	adds	r5, #8
 8013f8a:	e7e5      	b.n	8013f58 <_dtoa_r+0x338>
 8013f8c:	f000 80d2 	beq.w	8014134 <_dtoa_r+0x514>
 8013f90:	427c      	negs	r4, r7
 8013f92:	4b92      	ldr	r3, [pc, #584]	@ (80141dc <_dtoa_r+0x5bc>)
 8013f94:	4d92      	ldr	r5, [pc, #584]	@ (80141e0 <_dtoa_r+0x5c0>)
 8013f96:	f004 020f 	and.w	r2, r4, #15
 8013f9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fa2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013fa6:	f7ec fb47 	bl	8000638 <__aeabi_dmul>
 8013faa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013fae:	1124      	asrs	r4, r4, #4
 8013fb0:	2300      	movs	r3, #0
 8013fb2:	2602      	movs	r6, #2
 8013fb4:	2c00      	cmp	r4, #0
 8013fb6:	f040 80b2 	bne.w	801411e <_dtoa_r+0x4fe>
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d1d3      	bne.n	8013f66 <_dtoa_r+0x346>
 8013fbe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013fc0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	f000 80b7 	beq.w	8014138 <_dtoa_r+0x518>
 8013fca:	4b86      	ldr	r3, [pc, #536]	@ (80141e4 <_dtoa_r+0x5c4>)
 8013fcc:	2200      	movs	r2, #0
 8013fce:	4620      	mov	r0, r4
 8013fd0:	4629      	mov	r1, r5
 8013fd2:	f7ec fda3 	bl	8000b1c <__aeabi_dcmplt>
 8013fd6:	2800      	cmp	r0, #0
 8013fd8:	f000 80ae 	beq.w	8014138 <_dtoa_r+0x518>
 8013fdc:	9b07      	ldr	r3, [sp, #28]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	f000 80aa 	beq.w	8014138 <_dtoa_r+0x518>
 8013fe4:	9b00      	ldr	r3, [sp, #0]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	dd37      	ble.n	801405a <_dtoa_r+0x43a>
 8013fea:	1e7b      	subs	r3, r7, #1
 8013fec:	9304      	str	r3, [sp, #16]
 8013fee:	4620      	mov	r0, r4
 8013ff0:	4b7d      	ldr	r3, [pc, #500]	@ (80141e8 <_dtoa_r+0x5c8>)
 8013ff2:	2200      	movs	r2, #0
 8013ff4:	4629      	mov	r1, r5
 8013ff6:	f7ec fb1f 	bl	8000638 <__aeabi_dmul>
 8013ffa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013ffe:	9c00      	ldr	r4, [sp, #0]
 8014000:	3601      	adds	r6, #1
 8014002:	4630      	mov	r0, r6
 8014004:	f7ec faae 	bl	8000564 <__aeabi_i2d>
 8014008:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801400c:	f7ec fb14 	bl	8000638 <__aeabi_dmul>
 8014010:	4b76      	ldr	r3, [pc, #472]	@ (80141ec <_dtoa_r+0x5cc>)
 8014012:	2200      	movs	r2, #0
 8014014:	f7ec f95a 	bl	80002cc <__adddf3>
 8014018:	4605      	mov	r5, r0
 801401a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801401e:	2c00      	cmp	r4, #0
 8014020:	f040 808d 	bne.w	801413e <_dtoa_r+0x51e>
 8014024:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014028:	4b71      	ldr	r3, [pc, #452]	@ (80141f0 <_dtoa_r+0x5d0>)
 801402a:	2200      	movs	r2, #0
 801402c:	f7ec f94c 	bl	80002c8 <__aeabi_dsub>
 8014030:	4602      	mov	r2, r0
 8014032:	460b      	mov	r3, r1
 8014034:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014038:	462a      	mov	r2, r5
 801403a:	4633      	mov	r3, r6
 801403c:	f7ec fd8c 	bl	8000b58 <__aeabi_dcmpgt>
 8014040:	2800      	cmp	r0, #0
 8014042:	f040 828b 	bne.w	801455c <_dtoa_r+0x93c>
 8014046:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801404a:	462a      	mov	r2, r5
 801404c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8014050:	f7ec fd64 	bl	8000b1c <__aeabi_dcmplt>
 8014054:	2800      	cmp	r0, #0
 8014056:	f040 8128 	bne.w	80142aa <_dtoa_r+0x68a>
 801405a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801405e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8014062:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8014064:	2b00      	cmp	r3, #0
 8014066:	f2c0 815a 	blt.w	801431e <_dtoa_r+0x6fe>
 801406a:	2f0e      	cmp	r7, #14
 801406c:	f300 8157 	bgt.w	801431e <_dtoa_r+0x6fe>
 8014070:	4b5a      	ldr	r3, [pc, #360]	@ (80141dc <_dtoa_r+0x5bc>)
 8014072:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014076:	ed93 7b00 	vldr	d7, [r3]
 801407a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801407c:	2b00      	cmp	r3, #0
 801407e:	ed8d 7b00 	vstr	d7, [sp]
 8014082:	da03      	bge.n	801408c <_dtoa_r+0x46c>
 8014084:	9b07      	ldr	r3, [sp, #28]
 8014086:	2b00      	cmp	r3, #0
 8014088:	f340 8101 	ble.w	801428e <_dtoa_r+0x66e>
 801408c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8014090:	4656      	mov	r6, sl
 8014092:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014096:	4620      	mov	r0, r4
 8014098:	4629      	mov	r1, r5
 801409a:	f7ec fbf7 	bl	800088c <__aeabi_ddiv>
 801409e:	f7ec fd7b 	bl	8000b98 <__aeabi_d2iz>
 80140a2:	4680      	mov	r8, r0
 80140a4:	f7ec fa5e 	bl	8000564 <__aeabi_i2d>
 80140a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80140ac:	f7ec fac4 	bl	8000638 <__aeabi_dmul>
 80140b0:	4602      	mov	r2, r0
 80140b2:	460b      	mov	r3, r1
 80140b4:	4620      	mov	r0, r4
 80140b6:	4629      	mov	r1, r5
 80140b8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80140bc:	f7ec f904 	bl	80002c8 <__aeabi_dsub>
 80140c0:	f806 4b01 	strb.w	r4, [r6], #1
 80140c4:	9d07      	ldr	r5, [sp, #28]
 80140c6:	eba6 040a 	sub.w	r4, r6, sl
 80140ca:	42a5      	cmp	r5, r4
 80140cc:	4602      	mov	r2, r0
 80140ce:	460b      	mov	r3, r1
 80140d0:	f040 8117 	bne.w	8014302 <_dtoa_r+0x6e2>
 80140d4:	f7ec f8fa 	bl	80002cc <__adddf3>
 80140d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80140dc:	4604      	mov	r4, r0
 80140de:	460d      	mov	r5, r1
 80140e0:	f7ec fd3a 	bl	8000b58 <__aeabi_dcmpgt>
 80140e4:	2800      	cmp	r0, #0
 80140e6:	f040 80f9 	bne.w	80142dc <_dtoa_r+0x6bc>
 80140ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80140ee:	4620      	mov	r0, r4
 80140f0:	4629      	mov	r1, r5
 80140f2:	f7ec fd09 	bl	8000b08 <__aeabi_dcmpeq>
 80140f6:	b118      	cbz	r0, 8014100 <_dtoa_r+0x4e0>
 80140f8:	f018 0f01 	tst.w	r8, #1
 80140fc:	f040 80ee 	bne.w	80142dc <_dtoa_r+0x6bc>
 8014100:	4649      	mov	r1, r9
 8014102:	4658      	mov	r0, fp
 8014104:	f000 fc90 	bl	8014a28 <_Bfree>
 8014108:	2300      	movs	r3, #0
 801410a:	7033      	strb	r3, [r6, #0]
 801410c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801410e:	3701      	adds	r7, #1
 8014110:	601f      	str	r7, [r3, #0]
 8014112:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014114:	2b00      	cmp	r3, #0
 8014116:	f000 831d 	beq.w	8014754 <_dtoa_r+0xb34>
 801411a:	601e      	str	r6, [r3, #0]
 801411c:	e31a      	b.n	8014754 <_dtoa_r+0xb34>
 801411e:	07e2      	lsls	r2, r4, #31
 8014120:	d505      	bpl.n	801412e <_dtoa_r+0x50e>
 8014122:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014126:	f7ec fa87 	bl	8000638 <__aeabi_dmul>
 801412a:	3601      	adds	r6, #1
 801412c:	2301      	movs	r3, #1
 801412e:	1064      	asrs	r4, r4, #1
 8014130:	3508      	adds	r5, #8
 8014132:	e73f      	b.n	8013fb4 <_dtoa_r+0x394>
 8014134:	2602      	movs	r6, #2
 8014136:	e742      	b.n	8013fbe <_dtoa_r+0x39e>
 8014138:	9c07      	ldr	r4, [sp, #28]
 801413a:	9704      	str	r7, [sp, #16]
 801413c:	e761      	b.n	8014002 <_dtoa_r+0x3e2>
 801413e:	4b27      	ldr	r3, [pc, #156]	@ (80141dc <_dtoa_r+0x5bc>)
 8014140:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014142:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014146:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801414a:	4454      	add	r4, sl
 801414c:	2900      	cmp	r1, #0
 801414e:	d053      	beq.n	80141f8 <_dtoa_r+0x5d8>
 8014150:	4928      	ldr	r1, [pc, #160]	@ (80141f4 <_dtoa_r+0x5d4>)
 8014152:	2000      	movs	r0, #0
 8014154:	f7ec fb9a 	bl	800088c <__aeabi_ddiv>
 8014158:	4633      	mov	r3, r6
 801415a:	462a      	mov	r2, r5
 801415c:	f7ec f8b4 	bl	80002c8 <__aeabi_dsub>
 8014160:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8014164:	4656      	mov	r6, sl
 8014166:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801416a:	f7ec fd15 	bl	8000b98 <__aeabi_d2iz>
 801416e:	4605      	mov	r5, r0
 8014170:	f7ec f9f8 	bl	8000564 <__aeabi_i2d>
 8014174:	4602      	mov	r2, r0
 8014176:	460b      	mov	r3, r1
 8014178:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801417c:	f7ec f8a4 	bl	80002c8 <__aeabi_dsub>
 8014180:	3530      	adds	r5, #48	@ 0x30
 8014182:	4602      	mov	r2, r0
 8014184:	460b      	mov	r3, r1
 8014186:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801418a:	f806 5b01 	strb.w	r5, [r6], #1
 801418e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8014192:	f7ec fcc3 	bl	8000b1c <__aeabi_dcmplt>
 8014196:	2800      	cmp	r0, #0
 8014198:	d171      	bne.n	801427e <_dtoa_r+0x65e>
 801419a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801419e:	4911      	ldr	r1, [pc, #68]	@ (80141e4 <_dtoa_r+0x5c4>)
 80141a0:	2000      	movs	r0, #0
 80141a2:	f7ec f891 	bl	80002c8 <__aeabi_dsub>
 80141a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80141aa:	f7ec fcb7 	bl	8000b1c <__aeabi_dcmplt>
 80141ae:	2800      	cmp	r0, #0
 80141b0:	f040 8095 	bne.w	80142de <_dtoa_r+0x6be>
 80141b4:	42a6      	cmp	r6, r4
 80141b6:	f43f af50 	beq.w	801405a <_dtoa_r+0x43a>
 80141ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80141be:	4b0a      	ldr	r3, [pc, #40]	@ (80141e8 <_dtoa_r+0x5c8>)
 80141c0:	2200      	movs	r2, #0
 80141c2:	f7ec fa39 	bl	8000638 <__aeabi_dmul>
 80141c6:	4b08      	ldr	r3, [pc, #32]	@ (80141e8 <_dtoa_r+0x5c8>)
 80141c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80141cc:	2200      	movs	r2, #0
 80141ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80141d2:	f7ec fa31 	bl	8000638 <__aeabi_dmul>
 80141d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80141da:	e7c4      	b.n	8014166 <_dtoa_r+0x546>
 80141dc:	080174f8 	.word	0x080174f8
 80141e0:	080174d0 	.word	0x080174d0
 80141e4:	3ff00000 	.word	0x3ff00000
 80141e8:	40240000 	.word	0x40240000
 80141ec:	401c0000 	.word	0x401c0000
 80141f0:	40140000 	.word	0x40140000
 80141f4:	3fe00000 	.word	0x3fe00000
 80141f8:	4631      	mov	r1, r6
 80141fa:	4628      	mov	r0, r5
 80141fc:	f7ec fa1c 	bl	8000638 <__aeabi_dmul>
 8014200:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8014204:	9415      	str	r4, [sp, #84]	@ 0x54
 8014206:	4656      	mov	r6, sl
 8014208:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801420c:	f7ec fcc4 	bl	8000b98 <__aeabi_d2iz>
 8014210:	4605      	mov	r5, r0
 8014212:	f7ec f9a7 	bl	8000564 <__aeabi_i2d>
 8014216:	4602      	mov	r2, r0
 8014218:	460b      	mov	r3, r1
 801421a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801421e:	f7ec f853 	bl	80002c8 <__aeabi_dsub>
 8014222:	3530      	adds	r5, #48	@ 0x30
 8014224:	f806 5b01 	strb.w	r5, [r6], #1
 8014228:	4602      	mov	r2, r0
 801422a:	460b      	mov	r3, r1
 801422c:	42a6      	cmp	r6, r4
 801422e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014232:	f04f 0200 	mov.w	r2, #0
 8014236:	d124      	bne.n	8014282 <_dtoa_r+0x662>
 8014238:	4bac      	ldr	r3, [pc, #688]	@ (80144ec <_dtoa_r+0x8cc>)
 801423a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801423e:	f7ec f845 	bl	80002cc <__adddf3>
 8014242:	4602      	mov	r2, r0
 8014244:	460b      	mov	r3, r1
 8014246:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801424a:	f7ec fc85 	bl	8000b58 <__aeabi_dcmpgt>
 801424e:	2800      	cmp	r0, #0
 8014250:	d145      	bne.n	80142de <_dtoa_r+0x6be>
 8014252:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8014256:	49a5      	ldr	r1, [pc, #660]	@ (80144ec <_dtoa_r+0x8cc>)
 8014258:	2000      	movs	r0, #0
 801425a:	f7ec f835 	bl	80002c8 <__aeabi_dsub>
 801425e:	4602      	mov	r2, r0
 8014260:	460b      	mov	r3, r1
 8014262:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014266:	f7ec fc59 	bl	8000b1c <__aeabi_dcmplt>
 801426a:	2800      	cmp	r0, #0
 801426c:	f43f aef5 	beq.w	801405a <_dtoa_r+0x43a>
 8014270:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8014272:	1e73      	subs	r3, r6, #1
 8014274:	9315      	str	r3, [sp, #84]	@ 0x54
 8014276:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801427a:	2b30      	cmp	r3, #48	@ 0x30
 801427c:	d0f8      	beq.n	8014270 <_dtoa_r+0x650>
 801427e:	9f04      	ldr	r7, [sp, #16]
 8014280:	e73e      	b.n	8014100 <_dtoa_r+0x4e0>
 8014282:	4b9b      	ldr	r3, [pc, #620]	@ (80144f0 <_dtoa_r+0x8d0>)
 8014284:	f7ec f9d8 	bl	8000638 <__aeabi_dmul>
 8014288:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801428c:	e7bc      	b.n	8014208 <_dtoa_r+0x5e8>
 801428e:	d10c      	bne.n	80142aa <_dtoa_r+0x68a>
 8014290:	4b98      	ldr	r3, [pc, #608]	@ (80144f4 <_dtoa_r+0x8d4>)
 8014292:	2200      	movs	r2, #0
 8014294:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014298:	f7ec f9ce 	bl	8000638 <__aeabi_dmul>
 801429c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80142a0:	f7ec fc50 	bl	8000b44 <__aeabi_dcmpge>
 80142a4:	2800      	cmp	r0, #0
 80142a6:	f000 8157 	beq.w	8014558 <_dtoa_r+0x938>
 80142aa:	2400      	movs	r4, #0
 80142ac:	4625      	mov	r5, r4
 80142ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80142b0:	43db      	mvns	r3, r3
 80142b2:	9304      	str	r3, [sp, #16]
 80142b4:	4656      	mov	r6, sl
 80142b6:	2700      	movs	r7, #0
 80142b8:	4621      	mov	r1, r4
 80142ba:	4658      	mov	r0, fp
 80142bc:	f000 fbb4 	bl	8014a28 <_Bfree>
 80142c0:	2d00      	cmp	r5, #0
 80142c2:	d0dc      	beq.n	801427e <_dtoa_r+0x65e>
 80142c4:	b12f      	cbz	r7, 80142d2 <_dtoa_r+0x6b2>
 80142c6:	42af      	cmp	r7, r5
 80142c8:	d003      	beq.n	80142d2 <_dtoa_r+0x6b2>
 80142ca:	4639      	mov	r1, r7
 80142cc:	4658      	mov	r0, fp
 80142ce:	f000 fbab 	bl	8014a28 <_Bfree>
 80142d2:	4629      	mov	r1, r5
 80142d4:	4658      	mov	r0, fp
 80142d6:	f000 fba7 	bl	8014a28 <_Bfree>
 80142da:	e7d0      	b.n	801427e <_dtoa_r+0x65e>
 80142dc:	9704      	str	r7, [sp, #16]
 80142de:	4633      	mov	r3, r6
 80142e0:	461e      	mov	r6, r3
 80142e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80142e6:	2a39      	cmp	r2, #57	@ 0x39
 80142e8:	d107      	bne.n	80142fa <_dtoa_r+0x6da>
 80142ea:	459a      	cmp	sl, r3
 80142ec:	d1f8      	bne.n	80142e0 <_dtoa_r+0x6c0>
 80142ee:	9a04      	ldr	r2, [sp, #16]
 80142f0:	3201      	adds	r2, #1
 80142f2:	9204      	str	r2, [sp, #16]
 80142f4:	2230      	movs	r2, #48	@ 0x30
 80142f6:	f88a 2000 	strb.w	r2, [sl]
 80142fa:	781a      	ldrb	r2, [r3, #0]
 80142fc:	3201      	adds	r2, #1
 80142fe:	701a      	strb	r2, [r3, #0]
 8014300:	e7bd      	b.n	801427e <_dtoa_r+0x65e>
 8014302:	4b7b      	ldr	r3, [pc, #492]	@ (80144f0 <_dtoa_r+0x8d0>)
 8014304:	2200      	movs	r2, #0
 8014306:	f7ec f997 	bl	8000638 <__aeabi_dmul>
 801430a:	2200      	movs	r2, #0
 801430c:	2300      	movs	r3, #0
 801430e:	4604      	mov	r4, r0
 8014310:	460d      	mov	r5, r1
 8014312:	f7ec fbf9 	bl	8000b08 <__aeabi_dcmpeq>
 8014316:	2800      	cmp	r0, #0
 8014318:	f43f aebb 	beq.w	8014092 <_dtoa_r+0x472>
 801431c:	e6f0      	b.n	8014100 <_dtoa_r+0x4e0>
 801431e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014320:	2a00      	cmp	r2, #0
 8014322:	f000 80db 	beq.w	80144dc <_dtoa_r+0x8bc>
 8014326:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014328:	2a01      	cmp	r2, #1
 801432a:	f300 80bf 	bgt.w	80144ac <_dtoa_r+0x88c>
 801432e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8014330:	2a00      	cmp	r2, #0
 8014332:	f000 80b7 	beq.w	80144a4 <_dtoa_r+0x884>
 8014336:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801433a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801433c:	4646      	mov	r6, r8
 801433e:	9a08      	ldr	r2, [sp, #32]
 8014340:	2101      	movs	r1, #1
 8014342:	441a      	add	r2, r3
 8014344:	4658      	mov	r0, fp
 8014346:	4498      	add	r8, r3
 8014348:	9208      	str	r2, [sp, #32]
 801434a:	f000 fc21 	bl	8014b90 <__i2b>
 801434e:	4605      	mov	r5, r0
 8014350:	b15e      	cbz	r6, 801436a <_dtoa_r+0x74a>
 8014352:	9b08      	ldr	r3, [sp, #32]
 8014354:	2b00      	cmp	r3, #0
 8014356:	dd08      	ble.n	801436a <_dtoa_r+0x74a>
 8014358:	42b3      	cmp	r3, r6
 801435a:	9a08      	ldr	r2, [sp, #32]
 801435c:	bfa8      	it	ge
 801435e:	4633      	movge	r3, r6
 8014360:	eba8 0803 	sub.w	r8, r8, r3
 8014364:	1af6      	subs	r6, r6, r3
 8014366:	1ad3      	subs	r3, r2, r3
 8014368:	9308      	str	r3, [sp, #32]
 801436a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801436c:	b1f3      	cbz	r3, 80143ac <_dtoa_r+0x78c>
 801436e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014370:	2b00      	cmp	r3, #0
 8014372:	f000 80b7 	beq.w	80144e4 <_dtoa_r+0x8c4>
 8014376:	b18c      	cbz	r4, 801439c <_dtoa_r+0x77c>
 8014378:	4629      	mov	r1, r5
 801437a:	4622      	mov	r2, r4
 801437c:	4658      	mov	r0, fp
 801437e:	f000 fcc7 	bl	8014d10 <__pow5mult>
 8014382:	464a      	mov	r2, r9
 8014384:	4601      	mov	r1, r0
 8014386:	4605      	mov	r5, r0
 8014388:	4658      	mov	r0, fp
 801438a:	f000 fc17 	bl	8014bbc <__multiply>
 801438e:	4649      	mov	r1, r9
 8014390:	9004      	str	r0, [sp, #16]
 8014392:	4658      	mov	r0, fp
 8014394:	f000 fb48 	bl	8014a28 <_Bfree>
 8014398:	9b04      	ldr	r3, [sp, #16]
 801439a:	4699      	mov	r9, r3
 801439c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801439e:	1b1a      	subs	r2, r3, r4
 80143a0:	d004      	beq.n	80143ac <_dtoa_r+0x78c>
 80143a2:	4649      	mov	r1, r9
 80143a4:	4658      	mov	r0, fp
 80143a6:	f000 fcb3 	bl	8014d10 <__pow5mult>
 80143aa:	4681      	mov	r9, r0
 80143ac:	2101      	movs	r1, #1
 80143ae:	4658      	mov	r0, fp
 80143b0:	f000 fbee 	bl	8014b90 <__i2b>
 80143b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80143b6:	4604      	mov	r4, r0
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	f000 81cf 	beq.w	801475c <_dtoa_r+0xb3c>
 80143be:	461a      	mov	r2, r3
 80143c0:	4601      	mov	r1, r0
 80143c2:	4658      	mov	r0, fp
 80143c4:	f000 fca4 	bl	8014d10 <__pow5mult>
 80143c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80143ca:	2b01      	cmp	r3, #1
 80143cc:	4604      	mov	r4, r0
 80143ce:	f300 8095 	bgt.w	80144fc <_dtoa_r+0x8dc>
 80143d2:	9b02      	ldr	r3, [sp, #8]
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	f040 8087 	bne.w	80144e8 <_dtoa_r+0x8c8>
 80143da:	9b03      	ldr	r3, [sp, #12]
 80143dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	f040 8089 	bne.w	80144f8 <_dtoa_r+0x8d8>
 80143e6:	9b03      	ldr	r3, [sp, #12]
 80143e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80143ec:	0d1b      	lsrs	r3, r3, #20
 80143ee:	051b      	lsls	r3, r3, #20
 80143f0:	b12b      	cbz	r3, 80143fe <_dtoa_r+0x7de>
 80143f2:	9b08      	ldr	r3, [sp, #32]
 80143f4:	3301      	adds	r3, #1
 80143f6:	9308      	str	r3, [sp, #32]
 80143f8:	f108 0801 	add.w	r8, r8, #1
 80143fc:	2301      	movs	r3, #1
 80143fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8014400:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014402:	2b00      	cmp	r3, #0
 8014404:	f000 81b0 	beq.w	8014768 <_dtoa_r+0xb48>
 8014408:	6923      	ldr	r3, [r4, #16]
 801440a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801440e:	6918      	ldr	r0, [r3, #16]
 8014410:	f000 fb72 	bl	8014af8 <__hi0bits>
 8014414:	f1c0 0020 	rsb	r0, r0, #32
 8014418:	9b08      	ldr	r3, [sp, #32]
 801441a:	4418      	add	r0, r3
 801441c:	f010 001f 	ands.w	r0, r0, #31
 8014420:	d077      	beq.n	8014512 <_dtoa_r+0x8f2>
 8014422:	f1c0 0320 	rsb	r3, r0, #32
 8014426:	2b04      	cmp	r3, #4
 8014428:	dd6b      	ble.n	8014502 <_dtoa_r+0x8e2>
 801442a:	9b08      	ldr	r3, [sp, #32]
 801442c:	f1c0 001c 	rsb	r0, r0, #28
 8014430:	4403      	add	r3, r0
 8014432:	4480      	add	r8, r0
 8014434:	4406      	add	r6, r0
 8014436:	9308      	str	r3, [sp, #32]
 8014438:	f1b8 0f00 	cmp.w	r8, #0
 801443c:	dd05      	ble.n	801444a <_dtoa_r+0x82a>
 801443e:	4649      	mov	r1, r9
 8014440:	4642      	mov	r2, r8
 8014442:	4658      	mov	r0, fp
 8014444:	f000 fcbe 	bl	8014dc4 <__lshift>
 8014448:	4681      	mov	r9, r0
 801444a:	9b08      	ldr	r3, [sp, #32]
 801444c:	2b00      	cmp	r3, #0
 801444e:	dd05      	ble.n	801445c <_dtoa_r+0x83c>
 8014450:	4621      	mov	r1, r4
 8014452:	461a      	mov	r2, r3
 8014454:	4658      	mov	r0, fp
 8014456:	f000 fcb5 	bl	8014dc4 <__lshift>
 801445a:	4604      	mov	r4, r0
 801445c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801445e:	2b00      	cmp	r3, #0
 8014460:	d059      	beq.n	8014516 <_dtoa_r+0x8f6>
 8014462:	4621      	mov	r1, r4
 8014464:	4648      	mov	r0, r9
 8014466:	f000 fd19 	bl	8014e9c <__mcmp>
 801446a:	2800      	cmp	r0, #0
 801446c:	da53      	bge.n	8014516 <_dtoa_r+0x8f6>
 801446e:	1e7b      	subs	r3, r7, #1
 8014470:	9304      	str	r3, [sp, #16]
 8014472:	4649      	mov	r1, r9
 8014474:	2300      	movs	r3, #0
 8014476:	220a      	movs	r2, #10
 8014478:	4658      	mov	r0, fp
 801447a:	f000 faf7 	bl	8014a6c <__multadd>
 801447e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014480:	4681      	mov	r9, r0
 8014482:	2b00      	cmp	r3, #0
 8014484:	f000 8172 	beq.w	801476c <_dtoa_r+0xb4c>
 8014488:	2300      	movs	r3, #0
 801448a:	4629      	mov	r1, r5
 801448c:	220a      	movs	r2, #10
 801448e:	4658      	mov	r0, fp
 8014490:	f000 faec 	bl	8014a6c <__multadd>
 8014494:	9b00      	ldr	r3, [sp, #0]
 8014496:	2b00      	cmp	r3, #0
 8014498:	4605      	mov	r5, r0
 801449a:	dc67      	bgt.n	801456c <_dtoa_r+0x94c>
 801449c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801449e:	2b02      	cmp	r3, #2
 80144a0:	dc41      	bgt.n	8014526 <_dtoa_r+0x906>
 80144a2:	e063      	b.n	801456c <_dtoa_r+0x94c>
 80144a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80144a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80144aa:	e746      	b.n	801433a <_dtoa_r+0x71a>
 80144ac:	9b07      	ldr	r3, [sp, #28]
 80144ae:	1e5c      	subs	r4, r3, #1
 80144b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80144b2:	42a3      	cmp	r3, r4
 80144b4:	bfbf      	itttt	lt
 80144b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80144b8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80144ba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80144bc:	1ae3      	sublt	r3, r4, r3
 80144be:	bfb4      	ite	lt
 80144c0:	18d2      	addlt	r2, r2, r3
 80144c2:	1b1c      	subge	r4, r3, r4
 80144c4:	9b07      	ldr	r3, [sp, #28]
 80144c6:	bfbc      	itt	lt
 80144c8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80144ca:	2400      	movlt	r4, #0
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	bfb5      	itete	lt
 80144d0:	eba8 0603 	sublt.w	r6, r8, r3
 80144d4:	9b07      	ldrge	r3, [sp, #28]
 80144d6:	2300      	movlt	r3, #0
 80144d8:	4646      	movge	r6, r8
 80144da:	e730      	b.n	801433e <_dtoa_r+0x71e>
 80144dc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80144de:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80144e0:	4646      	mov	r6, r8
 80144e2:	e735      	b.n	8014350 <_dtoa_r+0x730>
 80144e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80144e6:	e75c      	b.n	80143a2 <_dtoa_r+0x782>
 80144e8:	2300      	movs	r3, #0
 80144ea:	e788      	b.n	80143fe <_dtoa_r+0x7de>
 80144ec:	3fe00000 	.word	0x3fe00000
 80144f0:	40240000 	.word	0x40240000
 80144f4:	40140000 	.word	0x40140000
 80144f8:	9b02      	ldr	r3, [sp, #8]
 80144fa:	e780      	b.n	80143fe <_dtoa_r+0x7de>
 80144fc:	2300      	movs	r3, #0
 80144fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8014500:	e782      	b.n	8014408 <_dtoa_r+0x7e8>
 8014502:	d099      	beq.n	8014438 <_dtoa_r+0x818>
 8014504:	9a08      	ldr	r2, [sp, #32]
 8014506:	331c      	adds	r3, #28
 8014508:	441a      	add	r2, r3
 801450a:	4498      	add	r8, r3
 801450c:	441e      	add	r6, r3
 801450e:	9208      	str	r2, [sp, #32]
 8014510:	e792      	b.n	8014438 <_dtoa_r+0x818>
 8014512:	4603      	mov	r3, r0
 8014514:	e7f6      	b.n	8014504 <_dtoa_r+0x8e4>
 8014516:	9b07      	ldr	r3, [sp, #28]
 8014518:	9704      	str	r7, [sp, #16]
 801451a:	2b00      	cmp	r3, #0
 801451c:	dc20      	bgt.n	8014560 <_dtoa_r+0x940>
 801451e:	9300      	str	r3, [sp, #0]
 8014520:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014522:	2b02      	cmp	r3, #2
 8014524:	dd1e      	ble.n	8014564 <_dtoa_r+0x944>
 8014526:	9b00      	ldr	r3, [sp, #0]
 8014528:	2b00      	cmp	r3, #0
 801452a:	f47f aec0 	bne.w	80142ae <_dtoa_r+0x68e>
 801452e:	4621      	mov	r1, r4
 8014530:	2205      	movs	r2, #5
 8014532:	4658      	mov	r0, fp
 8014534:	f000 fa9a 	bl	8014a6c <__multadd>
 8014538:	4601      	mov	r1, r0
 801453a:	4604      	mov	r4, r0
 801453c:	4648      	mov	r0, r9
 801453e:	f000 fcad 	bl	8014e9c <__mcmp>
 8014542:	2800      	cmp	r0, #0
 8014544:	f77f aeb3 	ble.w	80142ae <_dtoa_r+0x68e>
 8014548:	4656      	mov	r6, sl
 801454a:	2331      	movs	r3, #49	@ 0x31
 801454c:	f806 3b01 	strb.w	r3, [r6], #1
 8014550:	9b04      	ldr	r3, [sp, #16]
 8014552:	3301      	adds	r3, #1
 8014554:	9304      	str	r3, [sp, #16]
 8014556:	e6ae      	b.n	80142b6 <_dtoa_r+0x696>
 8014558:	9c07      	ldr	r4, [sp, #28]
 801455a:	9704      	str	r7, [sp, #16]
 801455c:	4625      	mov	r5, r4
 801455e:	e7f3      	b.n	8014548 <_dtoa_r+0x928>
 8014560:	9b07      	ldr	r3, [sp, #28]
 8014562:	9300      	str	r3, [sp, #0]
 8014564:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014566:	2b00      	cmp	r3, #0
 8014568:	f000 8104 	beq.w	8014774 <_dtoa_r+0xb54>
 801456c:	2e00      	cmp	r6, #0
 801456e:	dd05      	ble.n	801457c <_dtoa_r+0x95c>
 8014570:	4629      	mov	r1, r5
 8014572:	4632      	mov	r2, r6
 8014574:	4658      	mov	r0, fp
 8014576:	f000 fc25 	bl	8014dc4 <__lshift>
 801457a:	4605      	mov	r5, r0
 801457c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801457e:	2b00      	cmp	r3, #0
 8014580:	d05a      	beq.n	8014638 <_dtoa_r+0xa18>
 8014582:	6869      	ldr	r1, [r5, #4]
 8014584:	4658      	mov	r0, fp
 8014586:	f000 fa0f 	bl	80149a8 <_Balloc>
 801458a:	4606      	mov	r6, r0
 801458c:	b928      	cbnz	r0, 801459a <_dtoa_r+0x97a>
 801458e:	4b84      	ldr	r3, [pc, #528]	@ (80147a0 <_dtoa_r+0xb80>)
 8014590:	4602      	mov	r2, r0
 8014592:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8014596:	f7ff bb5a 	b.w	8013c4e <_dtoa_r+0x2e>
 801459a:	692a      	ldr	r2, [r5, #16]
 801459c:	3202      	adds	r2, #2
 801459e:	0092      	lsls	r2, r2, #2
 80145a0:	f105 010c 	add.w	r1, r5, #12
 80145a4:	300c      	adds	r0, #12
 80145a6:	f7ff faa4 	bl	8013af2 <memcpy>
 80145aa:	2201      	movs	r2, #1
 80145ac:	4631      	mov	r1, r6
 80145ae:	4658      	mov	r0, fp
 80145b0:	f000 fc08 	bl	8014dc4 <__lshift>
 80145b4:	f10a 0301 	add.w	r3, sl, #1
 80145b8:	9307      	str	r3, [sp, #28]
 80145ba:	9b00      	ldr	r3, [sp, #0]
 80145bc:	4453      	add	r3, sl
 80145be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80145c0:	9b02      	ldr	r3, [sp, #8]
 80145c2:	f003 0301 	and.w	r3, r3, #1
 80145c6:	462f      	mov	r7, r5
 80145c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80145ca:	4605      	mov	r5, r0
 80145cc:	9b07      	ldr	r3, [sp, #28]
 80145ce:	4621      	mov	r1, r4
 80145d0:	3b01      	subs	r3, #1
 80145d2:	4648      	mov	r0, r9
 80145d4:	9300      	str	r3, [sp, #0]
 80145d6:	f7ff fa9a 	bl	8013b0e <quorem>
 80145da:	4639      	mov	r1, r7
 80145dc:	9002      	str	r0, [sp, #8]
 80145de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80145e2:	4648      	mov	r0, r9
 80145e4:	f000 fc5a 	bl	8014e9c <__mcmp>
 80145e8:	462a      	mov	r2, r5
 80145ea:	9008      	str	r0, [sp, #32]
 80145ec:	4621      	mov	r1, r4
 80145ee:	4658      	mov	r0, fp
 80145f0:	f000 fc70 	bl	8014ed4 <__mdiff>
 80145f4:	68c2      	ldr	r2, [r0, #12]
 80145f6:	4606      	mov	r6, r0
 80145f8:	bb02      	cbnz	r2, 801463c <_dtoa_r+0xa1c>
 80145fa:	4601      	mov	r1, r0
 80145fc:	4648      	mov	r0, r9
 80145fe:	f000 fc4d 	bl	8014e9c <__mcmp>
 8014602:	4602      	mov	r2, r0
 8014604:	4631      	mov	r1, r6
 8014606:	4658      	mov	r0, fp
 8014608:	920e      	str	r2, [sp, #56]	@ 0x38
 801460a:	f000 fa0d 	bl	8014a28 <_Bfree>
 801460e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014610:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014612:	9e07      	ldr	r6, [sp, #28]
 8014614:	ea43 0102 	orr.w	r1, r3, r2
 8014618:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801461a:	4319      	orrs	r1, r3
 801461c:	d110      	bne.n	8014640 <_dtoa_r+0xa20>
 801461e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8014622:	d029      	beq.n	8014678 <_dtoa_r+0xa58>
 8014624:	9b08      	ldr	r3, [sp, #32]
 8014626:	2b00      	cmp	r3, #0
 8014628:	dd02      	ble.n	8014630 <_dtoa_r+0xa10>
 801462a:	9b02      	ldr	r3, [sp, #8]
 801462c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8014630:	9b00      	ldr	r3, [sp, #0]
 8014632:	f883 8000 	strb.w	r8, [r3]
 8014636:	e63f      	b.n	80142b8 <_dtoa_r+0x698>
 8014638:	4628      	mov	r0, r5
 801463a:	e7bb      	b.n	80145b4 <_dtoa_r+0x994>
 801463c:	2201      	movs	r2, #1
 801463e:	e7e1      	b.n	8014604 <_dtoa_r+0x9e4>
 8014640:	9b08      	ldr	r3, [sp, #32]
 8014642:	2b00      	cmp	r3, #0
 8014644:	db04      	blt.n	8014650 <_dtoa_r+0xa30>
 8014646:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014648:	430b      	orrs	r3, r1
 801464a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801464c:	430b      	orrs	r3, r1
 801464e:	d120      	bne.n	8014692 <_dtoa_r+0xa72>
 8014650:	2a00      	cmp	r2, #0
 8014652:	dded      	ble.n	8014630 <_dtoa_r+0xa10>
 8014654:	4649      	mov	r1, r9
 8014656:	2201      	movs	r2, #1
 8014658:	4658      	mov	r0, fp
 801465a:	f000 fbb3 	bl	8014dc4 <__lshift>
 801465e:	4621      	mov	r1, r4
 8014660:	4681      	mov	r9, r0
 8014662:	f000 fc1b 	bl	8014e9c <__mcmp>
 8014666:	2800      	cmp	r0, #0
 8014668:	dc03      	bgt.n	8014672 <_dtoa_r+0xa52>
 801466a:	d1e1      	bne.n	8014630 <_dtoa_r+0xa10>
 801466c:	f018 0f01 	tst.w	r8, #1
 8014670:	d0de      	beq.n	8014630 <_dtoa_r+0xa10>
 8014672:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8014676:	d1d8      	bne.n	801462a <_dtoa_r+0xa0a>
 8014678:	9a00      	ldr	r2, [sp, #0]
 801467a:	2339      	movs	r3, #57	@ 0x39
 801467c:	7013      	strb	r3, [r2, #0]
 801467e:	4633      	mov	r3, r6
 8014680:	461e      	mov	r6, r3
 8014682:	3b01      	subs	r3, #1
 8014684:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8014688:	2a39      	cmp	r2, #57	@ 0x39
 801468a:	d052      	beq.n	8014732 <_dtoa_r+0xb12>
 801468c:	3201      	adds	r2, #1
 801468e:	701a      	strb	r2, [r3, #0]
 8014690:	e612      	b.n	80142b8 <_dtoa_r+0x698>
 8014692:	2a00      	cmp	r2, #0
 8014694:	dd07      	ble.n	80146a6 <_dtoa_r+0xa86>
 8014696:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801469a:	d0ed      	beq.n	8014678 <_dtoa_r+0xa58>
 801469c:	9a00      	ldr	r2, [sp, #0]
 801469e:	f108 0301 	add.w	r3, r8, #1
 80146a2:	7013      	strb	r3, [r2, #0]
 80146a4:	e608      	b.n	80142b8 <_dtoa_r+0x698>
 80146a6:	9b07      	ldr	r3, [sp, #28]
 80146a8:	9a07      	ldr	r2, [sp, #28]
 80146aa:	f803 8c01 	strb.w	r8, [r3, #-1]
 80146ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80146b0:	4293      	cmp	r3, r2
 80146b2:	d028      	beq.n	8014706 <_dtoa_r+0xae6>
 80146b4:	4649      	mov	r1, r9
 80146b6:	2300      	movs	r3, #0
 80146b8:	220a      	movs	r2, #10
 80146ba:	4658      	mov	r0, fp
 80146bc:	f000 f9d6 	bl	8014a6c <__multadd>
 80146c0:	42af      	cmp	r7, r5
 80146c2:	4681      	mov	r9, r0
 80146c4:	f04f 0300 	mov.w	r3, #0
 80146c8:	f04f 020a 	mov.w	r2, #10
 80146cc:	4639      	mov	r1, r7
 80146ce:	4658      	mov	r0, fp
 80146d0:	d107      	bne.n	80146e2 <_dtoa_r+0xac2>
 80146d2:	f000 f9cb 	bl	8014a6c <__multadd>
 80146d6:	4607      	mov	r7, r0
 80146d8:	4605      	mov	r5, r0
 80146da:	9b07      	ldr	r3, [sp, #28]
 80146dc:	3301      	adds	r3, #1
 80146de:	9307      	str	r3, [sp, #28]
 80146e0:	e774      	b.n	80145cc <_dtoa_r+0x9ac>
 80146e2:	f000 f9c3 	bl	8014a6c <__multadd>
 80146e6:	4629      	mov	r1, r5
 80146e8:	4607      	mov	r7, r0
 80146ea:	2300      	movs	r3, #0
 80146ec:	220a      	movs	r2, #10
 80146ee:	4658      	mov	r0, fp
 80146f0:	f000 f9bc 	bl	8014a6c <__multadd>
 80146f4:	4605      	mov	r5, r0
 80146f6:	e7f0      	b.n	80146da <_dtoa_r+0xaba>
 80146f8:	9b00      	ldr	r3, [sp, #0]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	bfcc      	ite	gt
 80146fe:	461e      	movgt	r6, r3
 8014700:	2601      	movle	r6, #1
 8014702:	4456      	add	r6, sl
 8014704:	2700      	movs	r7, #0
 8014706:	4649      	mov	r1, r9
 8014708:	2201      	movs	r2, #1
 801470a:	4658      	mov	r0, fp
 801470c:	f000 fb5a 	bl	8014dc4 <__lshift>
 8014710:	4621      	mov	r1, r4
 8014712:	4681      	mov	r9, r0
 8014714:	f000 fbc2 	bl	8014e9c <__mcmp>
 8014718:	2800      	cmp	r0, #0
 801471a:	dcb0      	bgt.n	801467e <_dtoa_r+0xa5e>
 801471c:	d102      	bne.n	8014724 <_dtoa_r+0xb04>
 801471e:	f018 0f01 	tst.w	r8, #1
 8014722:	d1ac      	bne.n	801467e <_dtoa_r+0xa5e>
 8014724:	4633      	mov	r3, r6
 8014726:	461e      	mov	r6, r3
 8014728:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801472c:	2a30      	cmp	r2, #48	@ 0x30
 801472e:	d0fa      	beq.n	8014726 <_dtoa_r+0xb06>
 8014730:	e5c2      	b.n	80142b8 <_dtoa_r+0x698>
 8014732:	459a      	cmp	sl, r3
 8014734:	d1a4      	bne.n	8014680 <_dtoa_r+0xa60>
 8014736:	9b04      	ldr	r3, [sp, #16]
 8014738:	3301      	adds	r3, #1
 801473a:	9304      	str	r3, [sp, #16]
 801473c:	2331      	movs	r3, #49	@ 0x31
 801473e:	f88a 3000 	strb.w	r3, [sl]
 8014742:	e5b9      	b.n	80142b8 <_dtoa_r+0x698>
 8014744:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014746:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80147a4 <_dtoa_r+0xb84>
 801474a:	b11b      	cbz	r3, 8014754 <_dtoa_r+0xb34>
 801474c:	f10a 0308 	add.w	r3, sl, #8
 8014750:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8014752:	6013      	str	r3, [r2, #0]
 8014754:	4650      	mov	r0, sl
 8014756:	b019      	add	sp, #100	@ 0x64
 8014758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801475c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801475e:	2b01      	cmp	r3, #1
 8014760:	f77f ae37 	ble.w	80143d2 <_dtoa_r+0x7b2>
 8014764:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014766:	930a      	str	r3, [sp, #40]	@ 0x28
 8014768:	2001      	movs	r0, #1
 801476a:	e655      	b.n	8014418 <_dtoa_r+0x7f8>
 801476c:	9b00      	ldr	r3, [sp, #0]
 801476e:	2b00      	cmp	r3, #0
 8014770:	f77f aed6 	ble.w	8014520 <_dtoa_r+0x900>
 8014774:	4656      	mov	r6, sl
 8014776:	4621      	mov	r1, r4
 8014778:	4648      	mov	r0, r9
 801477a:	f7ff f9c8 	bl	8013b0e <quorem>
 801477e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8014782:	f806 8b01 	strb.w	r8, [r6], #1
 8014786:	9b00      	ldr	r3, [sp, #0]
 8014788:	eba6 020a 	sub.w	r2, r6, sl
 801478c:	4293      	cmp	r3, r2
 801478e:	ddb3      	ble.n	80146f8 <_dtoa_r+0xad8>
 8014790:	4649      	mov	r1, r9
 8014792:	2300      	movs	r3, #0
 8014794:	220a      	movs	r2, #10
 8014796:	4658      	mov	r0, fp
 8014798:	f000 f968 	bl	8014a6c <__multadd>
 801479c:	4681      	mov	r9, r0
 801479e:	e7ea      	b.n	8014776 <_dtoa_r+0xb56>
 80147a0:	08017454 	.word	0x08017454
 80147a4:	080173d8 	.word	0x080173d8

080147a8 <_free_r>:
 80147a8:	b538      	push	{r3, r4, r5, lr}
 80147aa:	4605      	mov	r5, r0
 80147ac:	2900      	cmp	r1, #0
 80147ae:	d041      	beq.n	8014834 <_free_r+0x8c>
 80147b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80147b4:	1f0c      	subs	r4, r1, #4
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	bfb8      	it	lt
 80147ba:	18e4      	addlt	r4, r4, r3
 80147bc:	f000 f8e8 	bl	8014990 <__malloc_lock>
 80147c0:	4a1d      	ldr	r2, [pc, #116]	@ (8014838 <_free_r+0x90>)
 80147c2:	6813      	ldr	r3, [r2, #0]
 80147c4:	b933      	cbnz	r3, 80147d4 <_free_r+0x2c>
 80147c6:	6063      	str	r3, [r4, #4]
 80147c8:	6014      	str	r4, [r2, #0]
 80147ca:	4628      	mov	r0, r5
 80147cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80147d0:	f000 b8e4 	b.w	801499c <__malloc_unlock>
 80147d4:	42a3      	cmp	r3, r4
 80147d6:	d908      	bls.n	80147ea <_free_r+0x42>
 80147d8:	6820      	ldr	r0, [r4, #0]
 80147da:	1821      	adds	r1, r4, r0
 80147dc:	428b      	cmp	r3, r1
 80147de:	bf01      	itttt	eq
 80147e0:	6819      	ldreq	r1, [r3, #0]
 80147e2:	685b      	ldreq	r3, [r3, #4]
 80147e4:	1809      	addeq	r1, r1, r0
 80147e6:	6021      	streq	r1, [r4, #0]
 80147e8:	e7ed      	b.n	80147c6 <_free_r+0x1e>
 80147ea:	461a      	mov	r2, r3
 80147ec:	685b      	ldr	r3, [r3, #4]
 80147ee:	b10b      	cbz	r3, 80147f4 <_free_r+0x4c>
 80147f0:	42a3      	cmp	r3, r4
 80147f2:	d9fa      	bls.n	80147ea <_free_r+0x42>
 80147f4:	6811      	ldr	r1, [r2, #0]
 80147f6:	1850      	adds	r0, r2, r1
 80147f8:	42a0      	cmp	r0, r4
 80147fa:	d10b      	bne.n	8014814 <_free_r+0x6c>
 80147fc:	6820      	ldr	r0, [r4, #0]
 80147fe:	4401      	add	r1, r0
 8014800:	1850      	adds	r0, r2, r1
 8014802:	4283      	cmp	r3, r0
 8014804:	6011      	str	r1, [r2, #0]
 8014806:	d1e0      	bne.n	80147ca <_free_r+0x22>
 8014808:	6818      	ldr	r0, [r3, #0]
 801480a:	685b      	ldr	r3, [r3, #4]
 801480c:	6053      	str	r3, [r2, #4]
 801480e:	4408      	add	r0, r1
 8014810:	6010      	str	r0, [r2, #0]
 8014812:	e7da      	b.n	80147ca <_free_r+0x22>
 8014814:	d902      	bls.n	801481c <_free_r+0x74>
 8014816:	230c      	movs	r3, #12
 8014818:	602b      	str	r3, [r5, #0]
 801481a:	e7d6      	b.n	80147ca <_free_r+0x22>
 801481c:	6820      	ldr	r0, [r4, #0]
 801481e:	1821      	adds	r1, r4, r0
 8014820:	428b      	cmp	r3, r1
 8014822:	bf04      	itt	eq
 8014824:	6819      	ldreq	r1, [r3, #0]
 8014826:	685b      	ldreq	r3, [r3, #4]
 8014828:	6063      	str	r3, [r4, #4]
 801482a:	bf04      	itt	eq
 801482c:	1809      	addeq	r1, r1, r0
 801482e:	6021      	streq	r1, [r4, #0]
 8014830:	6054      	str	r4, [r2, #4]
 8014832:	e7ca      	b.n	80147ca <_free_r+0x22>
 8014834:	bd38      	pop	{r3, r4, r5, pc}
 8014836:	bf00      	nop
 8014838:	20006b04 	.word	0x20006b04

0801483c <malloc>:
 801483c:	4b02      	ldr	r3, [pc, #8]	@ (8014848 <malloc+0xc>)
 801483e:	4601      	mov	r1, r0
 8014840:	6818      	ldr	r0, [r3, #0]
 8014842:	f000 b825 	b.w	8014890 <_malloc_r>
 8014846:	bf00      	nop
 8014848:	20000034 	.word	0x20000034

0801484c <sbrk_aligned>:
 801484c:	b570      	push	{r4, r5, r6, lr}
 801484e:	4e0f      	ldr	r6, [pc, #60]	@ (801488c <sbrk_aligned+0x40>)
 8014850:	460c      	mov	r4, r1
 8014852:	6831      	ldr	r1, [r6, #0]
 8014854:	4605      	mov	r5, r0
 8014856:	b911      	cbnz	r1, 801485e <sbrk_aligned+0x12>
 8014858:	f001 f81c 	bl	8015894 <_sbrk_r>
 801485c:	6030      	str	r0, [r6, #0]
 801485e:	4621      	mov	r1, r4
 8014860:	4628      	mov	r0, r5
 8014862:	f001 f817 	bl	8015894 <_sbrk_r>
 8014866:	1c43      	adds	r3, r0, #1
 8014868:	d103      	bne.n	8014872 <sbrk_aligned+0x26>
 801486a:	f04f 34ff 	mov.w	r4, #4294967295
 801486e:	4620      	mov	r0, r4
 8014870:	bd70      	pop	{r4, r5, r6, pc}
 8014872:	1cc4      	adds	r4, r0, #3
 8014874:	f024 0403 	bic.w	r4, r4, #3
 8014878:	42a0      	cmp	r0, r4
 801487a:	d0f8      	beq.n	801486e <sbrk_aligned+0x22>
 801487c:	1a21      	subs	r1, r4, r0
 801487e:	4628      	mov	r0, r5
 8014880:	f001 f808 	bl	8015894 <_sbrk_r>
 8014884:	3001      	adds	r0, #1
 8014886:	d1f2      	bne.n	801486e <sbrk_aligned+0x22>
 8014888:	e7ef      	b.n	801486a <sbrk_aligned+0x1e>
 801488a:	bf00      	nop
 801488c:	20006b00 	.word	0x20006b00

08014890 <_malloc_r>:
 8014890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014894:	1ccd      	adds	r5, r1, #3
 8014896:	f025 0503 	bic.w	r5, r5, #3
 801489a:	3508      	adds	r5, #8
 801489c:	2d0c      	cmp	r5, #12
 801489e:	bf38      	it	cc
 80148a0:	250c      	movcc	r5, #12
 80148a2:	2d00      	cmp	r5, #0
 80148a4:	4606      	mov	r6, r0
 80148a6:	db01      	blt.n	80148ac <_malloc_r+0x1c>
 80148a8:	42a9      	cmp	r1, r5
 80148aa:	d904      	bls.n	80148b6 <_malloc_r+0x26>
 80148ac:	230c      	movs	r3, #12
 80148ae:	6033      	str	r3, [r6, #0]
 80148b0:	2000      	movs	r0, #0
 80148b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80148b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801498c <_malloc_r+0xfc>
 80148ba:	f000 f869 	bl	8014990 <__malloc_lock>
 80148be:	f8d8 3000 	ldr.w	r3, [r8]
 80148c2:	461c      	mov	r4, r3
 80148c4:	bb44      	cbnz	r4, 8014918 <_malloc_r+0x88>
 80148c6:	4629      	mov	r1, r5
 80148c8:	4630      	mov	r0, r6
 80148ca:	f7ff ffbf 	bl	801484c <sbrk_aligned>
 80148ce:	1c43      	adds	r3, r0, #1
 80148d0:	4604      	mov	r4, r0
 80148d2:	d158      	bne.n	8014986 <_malloc_r+0xf6>
 80148d4:	f8d8 4000 	ldr.w	r4, [r8]
 80148d8:	4627      	mov	r7, r4
 80148da:	2f00      	cmp	r7, #0
 80148dc:	d143      	bne.n	8014966 <_malloc_r+0xd6>
 80148de:	2c00      	cmp	r4, #0
 80148e0:	d04b      	beq.n	801497a <_malloc_r+0xea>
 80148e2:	6823      	ldr	r3, [r4, #0]
 80148e4:	4639      	mov	r1, r7
 80148e6:	4630      	mov	r0, r6
 80148e8:	eb04 0903 	add.w	r9, r4, r3
 80148ec:	f000 ffd2 	bl	8015894 <_sbrk_r>
 80148f0:	4581      	cmp	r9, r0
 80148f2:	d142      	bne.n	801497a <_malloc_r+0xea>
 80148f4:	6821      	ldr	r1, [r4, #0]
 80148f6:	1a6d      	subs	r5, r5, r1
 80148f8:	4629      	mov	r1, r5
 80148fa:	4630      	mov	r0, r6
 80148fc:	f7ff ffa6 	bl	801484c <sbrk_aligned>
 8014900:	3001      	adds	r0, #1
 8014902:	d03a      	beq.n	801497a <_malloc_r+0xea>
 8014904:	6823      	ldr	r3, [r4, #0]
 8014906:	442b      	add	r3, r5
 8014908:	6023      	str	r3, [r4, #0]
 801490a:	f8d8 3000 	ldr.w	r3, [r8]
 801490e:	685a      	ldr	r2, [r3, #4]
 8014910:	bb62      	cbnz	r2, 801496c <_malloc_r+0xdc>
 8014912:	f8c8 7000 	str.w	r7, [r8]
 8014916:	e00f      	b.n	8014938 <_malloc_r+0xa8>
 8014918:	6822      	ldr	r2, [r4, #0]
 801491a:	1b52      	subs	r2, r2, r5
 801491c:	d420      	bmi.n	8014960 <_malloc_r+0xd0>
 801491e:	2a0b      	cmp	r2, #11
 8014920:	d917      	bls.n	8014952 <_malloc_r+0xc2>
 8014922:	1961      	adds	r1, r4, r5
 8014924:	42a3      	cmp	r3, r4
 8014926:	6025      	str	r5, [r4, #0]
 8014928:	bf18      	it	ne
 801492a:	6059      	strne	r1, [r3, #4]
 801492c:	6863      	ldr	r3, [r4, #4]
 801492e:	bf08      	it	eq
 8014930:	f8c8 1000 	streq.w	r1, [r8]
 8014934:	5162      	str	r2, [r4, r5]
 8014936:	604b      	str	r3, [r1, #4]
 8014938:	4630      	mov	r0, r6
 801493a:	f000 f82f 	bl	801499c <__malloc_unlock>
 801493e:	f104 000b 	add.w	r0, r4, #11
 8014942:	1d23      	adds	r3, r4, #4
 8014944:	f020 0007 	bic.w	r0, r0, #7
 8014948:	1ac2      	subs	r2, r0, r3
 801494a:	bf1c      	itt	ne
 801494c:	1a1b      	subne	r3, r3, r0
 801494e:	50a3      	strne	r3, [r4, r2]
 8014950:	e7af      	b.n	80148b2 <_malloc_r+0x22>
 8014952:	6862      	ldr	r2, [r4, #4]
 8014954:	42a3      	cmp	r3, r4
 8014956:	bf0c      	ite	eq
 8014958:	f8c8 2000 	streq.w	r2, [r8]
 801495c:	605a      	strne	r2, [r3, #4]
 801495e:	e7eb      	b.n	8014938 <_malloc_r+0xa8>
 8014960:	4623      	mov	r3, r4
 8014962:	6864      	ldr	r4, [r4, #4]
 8014964:	e7ae      	b.n	80148c4 <_malloc_r+0x34>
 8014966:	463c      	mov	r4, r7
 8014968:	687f      	ldr	r7, [r7, #4]
 801496a:	e7b6      	b.n	80148da <_malloc_r+0x4a>
 801496c:	461a      	mov	r2, r3
 801496e:	685b      	ldr	r3, [r3, #4]
 8014970:	42a3      	cmp	r3, r4
 8014972:	d1fb      	bne.n	801496c <_malloc_r+0xdc>
 8014974:	2300      	movs	r3, #0
 8014976:	6053      	str	r3, [r2, #4]
 8014978:	e7de      	b.n	8014938 <_malloc_r+0xa8>
 801497a:	230c      	movs	r3, #12
 801497c:	6033      	str	r3, [r6, #0]
 801497e:	4630      	mov	r0, r6
 8014980:	f000 f80c 	bl	801499c <__malloc_unlock>
 8014984:	e794      	b.n	80148b0 <_malloc_r+0x20>
 8014986:	6005      	str	r5, [r0, #0]
 8014988:	e7d6      	b.n	8014938 <_malloc_r+0xa8>
 801498a:	bf00      	nop
 801498c:	20006b04 	.word	0x20006b04

08014990 <__malloc_lock>:
 8014990:	4801      	ldr	r0, [pc, #4]	@ (8014998 <__malloc_lock+0x8>)
 8014992:	f7ff b8ac 	b.w	8013aee <__retarget_lock_acquire_recursive>
 8014996:	bf00      	nop
 8014998:	20006afc 	.word	0x20006afc

0801499c <__malloc_unlock>:
 801499c:	4801      	ldr	r0, [pc, #4]	@ (80149a4 <__malloc_unlock+0x8>)
 801499e:	f7ff b8a7 	b.w	8013af0 <__retarget_lock_release_recursive>
 80149a2:	bf00      	nop
 80149a4:	20006afc 	.word	0x20006afc

080149a8 <_Balloc>:
 80149a8:	b570      	push	{r4, r5, r6, lr}
 80149aa:	69c6      	ldr	r6, [r0, #28]
 80149ac:	4604      	mov	r4, r0
 80149ae:	460d      	mov	r5, r1
 80149b0:	b976      	cbnz	r6, 80149d0 <_Balloc+0x28>
 80149b2:	2010      	movs	r0, #16
 80149b4:	f7ff ff42 	bl	801483c <malloc>
 80149b8:	4602      	mov	r2, r0
 80149ba:	61e0      	str	r0, [r4, #28]
 80149bc:	b920      	cbnz	r0, 80149c8 <_Balloc+0x20>
 80149be:	4b18      	ldr	r3, [pc, #96]	@ (8014a20 <_Balloc+0x78>)
 80149c0:	4818      	ldr	r0, [pc, #96]	@ (8014a24 <_Balloc+0x7c>)
 80149c2:	216b      	movs	r1, #107	@ 0x6b
 80149c4:	f000 ff76 	bl	80158b4 <__assert_func>
 80149c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80149cc:	6006      	str	r6, [r0, #0]
 80149ce:	60c6      	str	r6, [r0, #12]
 80149d0:	69e6      	ldr	r6, [r4, #28]
 80149d2:	68f3      	ldr	r3, [r6, #12]
 80149d4:	b183      	cbz	r3, 80149f8 <_Balloc+0x50>
 80149d6:	69e3      	ldr	r3, [r4, #28]
 80149d8:	68db      	ldr	r3, [r3, #12]
 80149da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80149de:	b9b8      	cbnz	r0, 8014a10 <_Balloc+0x68>
 80149e0:	2101      	movs	r1, #1
 80149e2:	fa01 f605 	lsl.w	r6, r1, r5
 80149e6:	1d72      	adds	r2, r6, #5
 80149e8:	0092      	lsls	r2, r2, #2
 80149ea:	4620      	mov	r0, r4
 80149ec:	f000 ff80 	bl	80158f0 <_calloc_r>
 80149f0:	b160      	cbz	r0, 8014a0c <_Balloc+0x64>
 80149f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80149f6:	e00e      	b.n	8014a16 <_Balloc+0x6e>
 80149f8:	2221      	movs	r2, #33	@ 0x21
 80149fa:	2104      	movs	r1, #4
 80149fc:	4620      	mov	r0, r4
 80149fe:	f000 ff77 	bl	80158f0 <_calloc_r>
 8014a02:	69e3      	ldr	r3, [r4, #28]
 8014a04:	60f0      	str	r0, [r6, #12]
 8014a06:	68db      	ldr	r3, [r3, #12]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d1e4      	bne.n	80149d6 <_Balloc+0x2e>
 8014a0c:	2000      	movs	r0, #0
 8014a0e:	bd70      	pop	{r4, r5, r6, pc}
 8014a10:	6802      	ldr	r2, [r0, #0]
 8014a12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014a16:	2300      	movs	r3, #0
 8014a18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014a1c:	e7f7      	b.n	8014a0e <_Balloc+0x66>
 8014a1e:	bf00      	nop
 8014a20:	080173e5 	.word	0x080173e5
 8014a24:	08017465 	.word	0x08017465

08014a28 <_Bfree>:
 8014a28:	b570      	push	{r4, r5, r6, lr}
 8014a2a:	69c6      	ldr	r6, [r0, #28]
 8014a2c:	4605      	mov	r5, r0
 8014a2e:	460c      	mov	r4, r1
 8014a30:	b976      	cbnz	r6, 8014a50 <_Bfree+0x28>
 8014a32:	2010      	movs	r0, #16
 8014a34:	f7ff ff02 	bl	801483c <malloc>
 8014a38:	4602      	mov	r2, r0
 8014a3a:	61e8      	str	r0, [r5, #28]
 8014a3c:	b920      	cbnz	r0, 8014a48 <_Bfree+0x20>
 8014a3e:	4b09      	ldr	r3, [pc, #36]	@ (8014a64 <_Bfree+0x3c>)
 8014a40:	4809      	ldr	r0, [pc, #36]	@ (8014a68 <_Bfree+0x40>)
 8014a42:	218f      	movs	r1, #143	@ 0x8f
 8014a44:	f000 ff36 	bl	80158b4 <__assert_func>
 8014a48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014a4c:	6006      	str	r6, [r0, #0]
 8014a4e:	60c6      	str	r6, [r0, #12]
 8014a50:	b13c      	cbz	r4, 8014a62 <_Bfree+0x3a>
 8014a52:	69eb      	ldr	r3, [r5, #28]
 8014a54:	6862      	ldr	r2, [r4, #4]
 8014a56:	68db      	ldr	r3, [r3, #12]
 8014a58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014a5c:	6021      	str	r1, [r4, #0]
 8014a5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014a62:	bd70      	pop	{r4, r5, r6, pc}
 8014a64:	080173e5 	.word	0x080173e5
 8014a68:	08017465 	.word	0x08017465

08014a6c <__multadd>:
 8014a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a70:	690d      	ldr	r5, [r1, #16]
 8014a72:	4607      	mov	r7, r0
 8014a74:	460c      	mov	r4, r1
 8014a76:	461e      	mov	r6, r3
 8014a78:	f101 0c14 	add.w	ip, r1, #20
 8014a7c:	2000      	movs	r0, #0
 8014a7e:	f8dc 3000 	ldr.w	r3, [ip]
 8014a82:	b299      	uxth	r1, r3
 8014a84:	fb02 6101 	mla	r1, r2, r1, r6
 8014a88:	0c1e      	lsrs	r6, r3, #16
 8014a8a:	0c0b      	lsrs	r3, r1, #16
 8014a8c:	fb02 3306 	mla	r3, r2, r6, r3
 8014a90:	b289      	uxth	r1, r1
 8014a92:	3001      	adds	r0, #1
 8014a94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014a98:	4285      	cmp	r5, r0
 8014a9a:	f84c 1b04 	str.w	r1, [ip], #4
 8014a9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014aa2:	dcec      	bgt.n	8014a7e <__multadd+0x12>
 8014aa4:	b30e      	cbz	r6, 8014aea <__multadd+0x7e>
 8014aa6:	68a3      	ldr	r3, [r4, #8]
 8014aa8:	42ab      	cmp	r3, r5
 8014aaa:	dc19      	bgt.n	8014ae0 <__multadd+0x74>
 8014aac:	6861      	ldr	r1, [r4, #4]
 8014aae:	4638      	mov	r0, r7
 8014ab0:	3101      	adds	r1, #1
 8014ab2:	f7ff ff79 	bl	80149a8 <_Balloc>
 8014ab6:	4680      	mov	r8, r0
 8014ab8:	b928      	cbnz	r0, 8014ac6 <__multadd+0x5a>
 8014aba:	4602      	mov	r2, r0
 8014abc:	4b0c      	ldr	r3, [pc, #48]	@ (8014af0 <__multadd+0x84>)
 8014abe:	480d      	ldr	r0, [pc, #52]	@ (8014af4 <__multadd+0x88>)
 8014ac0:	21ba      	movs	r1, #186	@ 0xba
 8014ac2:	f000 fef7 	bl	80158b4 <__assert_func>
 8014ac6:	6922      	ldr	r2, [r4, #16]
 8014ac8:	3202      	adds	r2, #2
 8014aca:	f104 010c 	add.w	r1, r4, #12
 8014ace:	0092      	lsls	r2, r2, #2
 8014ad0:	300c      	adds	r0, #12
 8014ad2:	f7ff f80e 	bl	8013af2 <memcpy>
 8014ad6:	4621      	mov	r1, r4
 8014ad8:	4638      	mov	r0, r7
 8014ada:	f7ff ffa5 	bl	8014a28 <_Bfree>
 8014ade:	4644      	mov	r4, r8
 8014ae0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014ae4:	3501      	adds	r5, #1
 8014ae6:	615e      	str	r6, [r3, #20]
 8014ae8:	6125      	str	r5, [r4, #16]
 8014aea:	4620      	mov	r0, r4
 8014aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014af0:	08017454 	.word	0x08017454
 8014af4:	08017465 	.word	0x08017465

08014af8 <__hi0bits>:
 8014af8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8014afc:	4603      	mov	r3, r0
 8014afe:	bf36      	itet	cc
 8014b00:	0403      	lslcc	r3, r0, #16
 8014b02:	2000      	movcs	r0, #0
 8014b04:	2010      	movcc	r0, #16
 8014b06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014b0a:	bf3c      	itt	cc
 8014b0c:	021b      	lslcc	r3, r3, #8
 8014b0e:	3008      	addcc	r0, #8
 8014b10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014b14:	bf3c      	itt	cc
 8014b16:	011b      	lslcc	r3, r3, #4
 8014b18:	3004      	addcc	r0, #4
 8014b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014b1e:	bf3c      	itt	cc
 8014b20:	009b      	lslcc	r3, r3, #2
 8014b22:	3002      	addcc	r0, #2
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	db05      	blt.n	8014b34 <__hi0bits+0x3c>
 8014b28:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8014b2c:	f100 0001 	add.w	r0, r0, #1
 8014b30:	bf08      	it	eq
 8014b32:	2020      	moveq	r0, #32
 8014b34:	4770      	bx	lr

08014b36 <__lo0bits>:
 8014b36:	6803      	ldr	r3, [r0, #0]
 8014b38:	4602      	mov	r2, r0
 8014b3a:	f013 0007 	ands.w	r0, r3, #7
 8014b3e:	d00b      	beq.n	8014b58 <__lo0bits+0x22>
 8014b40:	07d9      	lsls	r1, r3, #31
 8014b42:	d421      	bmi.n	8014b88 <__lo0bits+0x52>
 8014b44:	0798      	lsls	r0, r3, #30
 8014b46:	bf49      	itett	mi
 8014b48:	085b      	lsrmi	r3, r3, #1
 8014b4a:	089b      	lsrpl	r3, r3, #2
 8014b4c:	2001      	movmi	r0, #1
 8014b4e:	6013      	strmi	r3, [r2, #0]
 8014b50:	bf5c      	itt	pl
 8014b52:	6013      	strpl	r3, [r2, #0]
 8014b54:	2002      	movpl	r0, #2
 8014b56:	4770      	bx	lr
 8014b58:	b299      	uxth	r1, r3
 8014b5a:	b909      	cbnz	r1, 8014b60 <__lo0bits+0x2a>
 8014b5c:	0c1b      	lsrs	r3, r3, #16
 8014b5e:	2010      	movs	r0, #16
 8014b60:	b2d9      	uxtb	r1, r3
 8014b62:	b909      	cbnz	r1, 8014b68 <__lo0bits+0x32>
 8014b64:	3008      	adds	r0, #8
 8014b66:	0a1b      	lsrs	r3, r3, #8
 8014b68:	0719      	lsls	r1, r3, #28
 8014b6a:	bf04      	itt	eq
 8014b6c:	091b      	lsreq	r3, r3, #4
 8014b6e:	3004      	addeq	r0, #4
 8014b70:	0799      	lsls	r1, r3, #30
 8014b72:	bf04      	itt	eq
 8014b74:	089b      	lsreq	r3, r3, #2
 8014b76:	3002      	addeq	r0, #2
 8014b78:	07d9      	lsls	r1, r3, #31
 8014b7a:	d403      	bmi.n	8014b84 <__lo0bits+0x4e>
 8014b7c:	085b      	lsrs	r3, r3, #1
 8014b7e:	f100 0001 	add.w	r0, r0, #1
 8014b82:	d003      	beq.n	8014b8c <__lo0bits+0x56>
 8014b84:	6013      	str	r3, [r2, #0]
 8014b86:	4770      	bx	lr
 8014b88:	2000      	movs	r0, #0
 8014b8a:	4770      	bx	lr
 8014b8c:	2020      	movs	r0, #32
 8014b8e:	4770      	bx	lr

08014b90 <__i2b>:
 8014b90:	b510      	push	{r4, lr}
 8014b92:	460c      	mov	r4, r1
 8014b94:	2101      	movs	r1, #1
 8014b96:	f7ff ff07 	bl	80149a8 <_Balloc>
 8014b9a:	4602      	mov	r2, r0
 8014b9c:	b928      	cbnz	r0, 8014baa <__i2b+0x1a>
 8014b9e:	4b05      	ldr	r3, [pc, #20]	@ (8014bb4 <__i2b+0x24>)
 8014ba0:	4805      	ldr	r0, [pc, #20]	@ (8014bb8 <__i2b+0x28>)
 8014ba2:	f240 1145 	movw	r1, #325	@ 0x145
 8014ba6:	f000 fe85 	bl	80158b4 <__assert_func>
 8014baa:	2301      	movs	r3, #1
 8014bac:	6144      	str	r4, [r0, #20]
 8014bae:	6103      	str	r3, [r0, #16]
 8014bb0:	bd10      	pop	{r4, pc}
 8014bb2:	bf00      	nop
 8014bb4:	08017454 	.word	0x08017454
 8014bb8:	08017465 	.word	0x08017465

08014bbc <__multiply>:
 8014bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bc0:	4614      	mov	r4, r2
 8014bc2:	690a      	ldr	r2, [r1, #16]
 8014bc4:	6923      	ldr	r3, [r4, #16]
 8014bc6:	429a      	cmp	r2, r3
 8014bc8:	bfa8      	it	ge
 8014bca:	4623      	movge	r3, r4
 8014bcc:	460f      	mov	r7, r1
 8014bce:	bfa4      	itt	ge
 8014bd0:	460c      	movge	r4, r1
 8014bd2:	461f      	movge	r7, r3
 8014bd4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8014bd8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8014bdc:	68a3      	ldr	r3, [r4, #8]
 8014bde:	6861      	ldr	r1, [r4, #4]
 8014be0:	eb0a 0609 	add.w	r6, sl, r9
 8014be4:	42b3      	cmp	r3, r6
 8014be6:	b085      	sub	sp, #20
 8014be8:	bfb8      	it	lt
 8014bea:	3101      	addlt	r1, #1
 8014bec:	f7ff fedc 	bl	80149a8 <_Balloc>
 8014bf0:	b930      	cbnz	r0, 8014c00 <__multiply+0x44>
 8014bf2:	4602      	mov	r2, r0
 8014bf4:	4b44      	ldr	r3, [pc, #272]	@ (8014d08 <__multiply+0x14c>)
 8014bf6:	4845      	ldr	r0, [pc, #276]	@ (8014d0c <__multiply+0x150>)
 8014bf8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8014bfc:	f000 fe5a 	bl	80158b4 <__assert_func>
 8014c00:	f100 0514 	add.w	r5, r0, #20
 8014c04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014c08:	462b      	mov	r3, r5
 8014c0a:	2200      	movs	r2, #0
 8014c0c:	4543      	cmp	r3, r8
 8014c0e:	d321      	bcc.n	8014c54 <__multiply+0x98>
 8014c10:	f107 0114 	add.w	r1, r7, #20
 8014c14:	f104 0214 	add.w	r2, r4, #20
 8014c18:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8014c1c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8014c20:	9302      	str	r3, [sp, #8]
 8014c22:	1b13      	subs	r3, r2, r4
 8014c24:	3b15      	subs	r3, #21
 8014c26:	f023 0303 	bic.w	r3, r3, #3
 8014c2a:	3304      	adds	r3, #4
 8014c2c:	f104 0715 	add.w	r7, r4, #21
 8014c30:	42ba      	cmp	r2, r7
 8014c32:	bf38      	it	cc
 8014c34:	2304      	movcc	r3, #4
 8014c36:	9301      	str	r3, [sp, #4]
 8014c38:	9b02      	ldr	r3, [sp, #8]
 8014c3a:	9103      	str	r1, [sp, #12]
 8014c3c:	428b      	cmp	r3, r1
 8014c3e:	d80c      	bhi.n	8014c5a <__multiply+0x9e>
 8014c40:	2e00      	cmp	r6, #0
 8014c42:	dd03      	ble.n	8014c4c <__multiply+0x90>
 8014c44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d05b      	beq.n	8014d04 <__multiply+0x148>
 8014c4c:	6106      	str	r6, [r0, #16]
 8014c4e:	b005      	add	sp, #20
 8014c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c54:	f843 2b04 	str.w	r2, [r3], #4
 8014c58:	e7d8      	b.n	8014c0c <__multiply+0x50>
 8014c5a:	f8b1 a000 	ldrh.w	sl, [r1]
 8014c5e:	f1ba 0f00 	cmp.w	sl, #0
 8014c62:	d024      	beq.n	8014cae <__multiply+0xf2>
 8014c64:	f104 0e14 	add.w	lr, r4, #20
 8014c68:	46a9      	mov	r9, r5
 8014c6a:	f04f 0c00 	mov.w	ip, #0
 8014c6e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014c72:	f8d9 3000 	ldr.w	r3, [r9]
 8014c76:	fa1f fb87 	uxth.w	fp, r7
 8014c7a:	b29b      	uxth	r3, r3
 8014c7c:	fb0a 330b 	mla	r3, sl, fp, r3
 8014c80:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8014c84:	f8d9 7000 	ldr.w	r7, [r9]
 8014c88:	4463      	add	r3, ip
 8014c8a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8014c8e:	fb0a c70b 	mla	r7, sl, fp, ip
 8014c92:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8014c96:	b29b      	uxth	r3, r3
 8014c98:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014c9c:	4572      	cmp	r2, lr
 8014c9e:	f849 3b04 	str.w	r3, [r9], #4
 8014ca2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8014ca6:	d8e2      	bhi.n	8014c6e <__multiply+0xb2>
 8014ca8:	9b01      	ldr	r3, [sp, #4]
 8014caa:	f845 c003 	str.w	ip, [r5, r3]
 8014cae:	9b03      	ldr	r3, [sp, #12]
 8014cb0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8014cb4:	3104      	adds	r1, #4
 8014cb6:	f1b9 0f00 	cmp.w	r9, #0
 8014cba:	d021      	beq.n	8014d00 <__multiply+0x144>
 8014cbc:	682b      	ldr	r3, [r5, #0]
 8014cbe:	f104 0c14 	add.w	ip, r4, #20
 8014cc2:	46ae      	mov	lr, r5
 8014cc4:	f04f 0a00 	mov.w	sl, #0
 8014cc8:	f8bc b000 	ldrh.w	fp, [ip]
 8014ccc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8014cd0:	fb09 770b 	mla	r7, r9, fp, r7
 8014cd4:	4457      	add	r7, sl
 8014cd6:	b29b      	uxth	r3, r3
 8014cd8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014cdc:	f84e 3b04 	str.w	r3, [lr], #4
 8014ce0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014ce4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014ce8:	f8be 3000 	ldrh.w	r3, [lr]
 8014cec:	fb09 330a 	mla	r3, r9, sl, r3
 8014cf0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8014cf4:	4562      	cmp	r2, ip
 8014cf6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014cfa:	d8e5      	bhi.n	8014cc8 <__multiply+0x10c>
 8014cfc:	9f01      	ldr	r7, [sp, #4]
 8014cfe:	51eb      	str	r3, [r5, r7]
 8014d00:	3504      	adds	r5, #4
 8014d02:	e799      	b.n	8014c38 <__multiply+0x7c>
 8014d04:	3e01      	subs	r6, #1
 8014d06:	e79b      	b.n	8014c40 <__multiply+0x84>
 8014d08:	08017454 	.word	0x08017454
 8014d0c:	08017465 	.word	0x08017465

08014d10 <__pow5mult>:
 8014d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014d14:	4615      	mov	r5, r2
 8014d16:	f012 0203 	ands.w	r2, r2, #3
 8014d1a:	4607      	mov	r7, r0
 8014d1c:	460e      	mov	r6, r1
 8014d1e:	d007      	beq.n	8014d30 <__pow5mult+0x20>
 8014d20:	4c25      	ldr	r4, [pc, #148]	@ (8014db8 <__pow5mult+0xa8>)
 8014d22:	3a01      	subs	r2, #1
 8014d24:	2300      	movs	r3, #0
 8014d26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014d2a:	f7ff fe9f 	bl	8014a6c <__multadd>
 8014d2e:	4606      	mov	r6, r0
 8014d30:	10ad      	asrs	r5, r5, #2
 8014d32:	d03d      	beq.n	8014db0 <__pow5mult+0xa0>
 8014d34:	69fc      	ldr	r4, [r7, #28]
 8014d36:	b97c      	cbnz	r4, 8014d58 <__pow5mult+0x48>
 8014d38:	2010      	movs	r0, #16
 8014d3a:	f7ff fd7f 	bl	801483c <malloc>
 8014d3e:	4602      	mov	r2, r0
 8014d40:	61f8      	str	r0, [r7, #28]
 8014d42:	b928      	cbnz	r0, 8014d50 <__pow5mult+0x40>
 8014d44:	4b1d      	ldr	r3, [pc, #116]	@ (8014dbc <__pow5mult+0xac>)
 8014d46:	481e      	ldr	r0, [pc, #120]	@ (8014dc0 <__pow5mult+0xb0>)
 8014d48:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8014d4c:	f000 fdb2 	bl	80158b4 <__assert_func>
 8014d50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014d54:	6004      	str	r4, [r0, #0]
 8014d56:	60c4      	str	r4, [r0, #12]
 8014d58:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8014d5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014d60:	b94c      	cbnz	r4, 8014d76 <__pow5mult+0x66>
 8014d62:	f240 2171 	movw	r1, #625	@ 0x271
 8014d66:	4638      	mov	r0, r7
 8014d68:	f7ff ff12 	bl	8014b90 <__i2b>
 8014d6c:	2300      	movs	r3, #0
 8014d6e:	f8c8 0008 	str.w	r0, [r8, #8]
 8014d72:	4604      	mov	r4, r0
 8014d74:	6003      	str	r3, [r0, #0]
 8014d76:	f04f 0900 	mov.w	r9, #0
 8014d7a:	07eb      	lsls	r3, r5, #31
 8014d7c:	d50a      	bpl.n	8014d94 <__pow5mult+0x84>
 8014d7e:	4631      	mov	r1, r6
 8014d80:	4622      	mov	r2, r4
 8014d82:	4638      	mov	r0, r7
 8014d84:	f7ff ff1a 	bl	8014bbc <__multiply>
 8014d88:	4631      	mov	r1, r6
 8014d8a:	4680      	mov	r8, r0
 8014d8c:	4638      	mov	r0, r7
 8014d8e:	f7ff fe4b 	bl	8014a28 <_Bfree>
 8014d92:	4646      	mov	r6, r8
 8014d94:	106d      	asrs	r5, r5, #1
 8014d96:	d00b      	beq.n	8014db0 <__pow5mult+0xa0>
 8014d98:	6820      	ldr	r0, [r4, #0]
 8014d9a:	b938      	cbnz	r0, 8014dac <__pow5mult+0x9c>
 8014d9c:	4622      	mov	r2, r4
 8014d9e:	4621      	mov	r1, r4
 8014da0:	4638      	mov	r0, r7
 8014da2:	f7ff ff0b 	bl	8014bbc <__multiply>
 8014da6:	6020      	str	r0, [r4, #0]
 8014da8:	f8c0 9000 	str.w	r9, [r0]
 8014dac:	4604      	mov	r4, r0
 8014dae:	e7e4      	b.n	8014d7a <__pow5mult+0x6a>
 8014db0:	4630      	mov	r0, r6
 8014db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014db6:	bf00      	nop
 8014db8:	080174c0 	.word	0x080174c0
 8014dbc:	080173e5 	.word	0x080173e5
 8014dc0:	08017465 	.word	0x08017465

08014dc4 <__lshift>:
 8014dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014dc8:	460c      	mov	r4, r1
 8014dca:	6849      	ldr	r1, [r1, #4]
 8014dcc:	6923      	ldr	r3, [r4, #16]
 8014dce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014dd2:	68a3      	ldr	r3, [r4, #8]
 8014dd4:	4607      	mov	r7, r0
 8014dd6:	4691      	mov	r9, r2
 8014dd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014ddc:	f108 0601 	add.w	r6, r8, #1
 8014de0:	42b3      	cmp	r3, r6
 8014de2:	db0b      	blt.n	8014dfc <__lshift+0x38>
 8014de4:	4638      	mov	r0, r7
 8014de6:	f7ff fddf 	bl	80149a8 <_Balloc>
 8014dea:	4605      	mov	r5, r0
 8014dec:	b948      	cbnz	r0, 8014e02 <__lshift+0x3e>
 8014dee:	4602      	mov	r2, r0
 8014df0:	4b28      	ldr	r3, [pc, #160]	@ (8014e94 <__lshift+0xd0>)
 8014df2:	4829      	ldr	r0, [pc, #164]	@ (8014e98 <__lshift+0xd4>)
 8014df4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014df8:	f000 fd5c 	bl	80158b4 <__assert_func>
 8014dfc:	3101      	adds	r1, #1
 8014dfe:	005b      	lsls	r3, r3, #1
 8014e00:	e7ee      	b.n	8014de0 <__lshift+0x1c>
 8014e02:	2300      	movs	r3, #0
 8014e04:	f100 0114 	add.w	r1, r0, #20
 8014e08:	f100 0210 	add.w	r2, r0, #16
 8014e0c:	4618      	mov	r0, r3
 8014e0e:	4553      	cmp	r3, sl
 8014e10:	db33      	blt.n	8014e7a <__lshift+0xb6>
 8014e12:	6920      	ldr	r0, [r4, #16]
 8014e14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014e18:	f104 0314 	add.w	r3, r4, #20
 8014e1c:	f019 091f 	ands.w	r9, r9, #31
 8014e20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014e24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014e28:	d02b      	beq.n	8014e82 <__lshift+0xbe>
 8014e2a:	f1c9 0e20 	rsb	lr, r9, #32
 8014e2e:	468a      	mov	sl, r1
 8014e30:	2200      	movs	r2, #0
 8014e32:	6818      	ldr	r0, [r3, #0]
 8014e34:	fa00 f009 	lsl.w	r0, r0, r9
 8014e38:	4310      	orrs	r0, r2
 8014e3a:	f84a 0b04 	str.w	r0, [sl], #4
 8014e3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014e42:	459c      	cmp	ip, r3
 8014e44:	fa22 f20e 	lsr.w	r2, r2, lr
 8014e48:	d8f3      	bhi.n	8014e32 <__lshift+0x6e>
 8014e4a:	ebac 0304 	sub.w	r3, ip, r4
 8014e4e:	3b15      	subs	r3, #21
 8014e50:	f023 0303 	bic.w	r3, r3, #3
 8014e54:	3304      	adds	r3, #4
 8014e56:	f104 0015 	add.w	r0, r4, #21
 8014e5a:	4584      	cmp	ip, r0
 8014e5c:	bf38      	it	cc
 8014e5e:	2304      	movcc	r3, #4
 8014e60:	50ca      	str	r2, [r1, r3]
 8014e62:	b10a      	cbz	r2, 8014e68 <__lshift+0xa4>
 8014e64:	f108 0602 	add.w	r6, r8, #2
 8014e68:	3e01      	subs	r6, #1
 8014e6a:	4638      	mov	r0, r7
 8014e6c:	612e      	str	r6, [r5, #16]
 8014e6e:	4621      	mov	r1, r4
 8014e70:	f7ff fdda 	bl	8014a28 <_Bfree>
 8014e74:	4628      	mov	r0, r5
 8014e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e7a:	f842 0f04 	str.w	r0, [r2, #4]!
 8014e7e:	3301      	adds	r3, #1
 8014e80:	e7c5      	b.n	8014e0e <__lshift+0x4a>
 8014e82:	3904      	subs	r1, #4
 8014e84:	f853 2b04 	ldr.w	r2, [r3], #4
 8014e88:	f841 2f04 	str.w	r2, [r1, #4]!
 8014e8c:	459c      	cmp	ip, r3
 8014e8e:	d8f9      	bhi.n	8014e84 <__lshift+0xc0>
 8014e90:	e7ea      	b.n	8014e68 <__lshift+0xa4>
 8014e92:	bf00      	nop
 8014e94:	08017454 	.word	0x08017454
 8014e98:	08017465 	.word	0x08017465

08014e9c <__mcmp>:
 8014e9c:	690a      	ldr	r2, [r1, #16]
 8014e9e:	4603      	mov	r3, r0
 8014ea0:	6900      	ldr	r0, [r0, #16]
 8014ea2:	1a80      	subs	r0, r0, r2
 8014ea4:	b530      	push	{r4, r5, lr}
 8014ea6:	d10e      	bne.n	8014ec6 <__mcmp+0x2a>
 8014ea8:	3314      	adds	r3, #20
 8014eaa:	3114      	adds	r1, #20
 8014eac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014eb0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014eb4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014eb8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014ebc:	4295      	cmp	r5, r2
 8014ebe:	d003      	beq.n	8014ec8 <__mcmp+0x2c>
 8014ec0:	d205      	bcs.n	8014ece <__mcmp+0x32>
 8014ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8014ec6:	bd30      	pop	{r4, r5, pc}
 8014ec8:	42a3      	cmp	r3, r4
 8014eca:	d3f3      	bcc.n	8014eb4 <__mcmp+0x18>
 8014ecc:	e7fb      	b.n	8014ec6 <__mcmp+0x2a>
 8014ece:	2001      	movs	r0, #1
 8014ed0:	e7f9      	b.n	8014ec6 <__mcmp+0x2a>
	...

08014ed4 <__mdiff>:
 8014ed4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ed8:	4689      	mov	r9, r1
 8014eda:	4606      	mov	r6, r0
 8014edc:	4611      	mov	r1, r2
 8014ede:	4648      	mov	r0, r9
 8014ee0:	4614      	mov	r4, r2
 8014ee2:	f7ff ffdb 	bl	8014e9c <__mcmp>
 8014ee6:	1e05      	subs	r5, r0, #0
 8014ee8:	d112      	bne.n	8014f10 <__mdiff+0x3c>
 8014eea:	4629      	mov	r1, r5
 8014eec:	4630      	mov	r0, r6
 8014eee:	f7ff fd5b 	bl	80149a8 <_Balloc>
 8014ef2:	4602      	mov	r2, r0
 8014ef4:	b928      	cbnz	r0, 8014f02 <__mdiff+0x2e>
 8014ef6:	4b3f      	ldr	r3, [pc, #252]	@ (8014ff4 <__mdiff+0x120>)
 8014ef8:	f240 2137 	movw	r1, #567	@ 0x237
 8014efc:	483e      	ldr	r0, [pc, #248]	@ (8014ff8 <__mdiff+0x124>)
 8014efe:	f000 fcd9 	bl	80158b4 <__assert_func>
 8014f02:	2301      	movs	r3, #1
 8014f04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014f08:	4610      	mov	r0, r2
 8014f0a:	b003      	add	sp, #12
 8014f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f10:	bfbc      	itt	lt
 8014f12:	464b      	movlt	r3, r9
 8014f14:	46a1      	movlt	r9, r4
 8014f16:	4630      	mov	r0, r6
 8014f18:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014f1c:	bfba      	itte	lt
 8014f1e:	461c      	movlt	r4, r3
 8014f20:	2501      	movlt	r5, #1
 8014f22:	2500      	movge	r5, #0
 8014f24:	f7ff fd40 	bl	80149a8 <_Balloc>
 8014f28:	4602      	mov	r2, r0
 8014f2a:	b918      	cbnz	r0, 8014f34 <__mdiff+0x60>
 8014f2c:	4b31      	ldr	r3, [pc, #196]	@ (8014ff4 <__mdiff+0x120>)
 8014f2e:	f240 2145 	movw	r1, #581	@ 0x245
 8014f32:	e7e3      	b.n	8014efc <__mdiff+0x28>
 8014f34:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014f38:	6926      	ldr	r6, [r4, #16]
 8014f3a:	60c5      	str	r5, [r0, #12]
 8014f3c:	f109 0310 	add.w	r3, r9, #16
 8014f40:	f109 0514 	add.w	r5, r9, #20
 8014f44:	f104 0e14 	add.w	lr, r4, #20
 8014f48:	f100 0b14 	add.w	fp, r0, #20
 8014f4c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014f50:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014f54:	9301      	str	r3, [sp, #4]
 8014f56:	46d9      	mov	r9, fp
 8014f58:	f04f 0c00 	mov.w	ip, #0
 8014f5c:	9b01      	ldr	r3, [sp, #4]
 8014f5e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014f62:	f853 af04 	ldr.w	sl, [r3, #4]!
 8014f66:	9301      	str	r3, [sp, #4]
 8014f68:	fa1f f38a 	uxth.w	r3, sl
 8014f6c:	4619      	mov	r1, r3
 8014f6e:	b283      	uxth	r3, r0
 8014f70:	1acb      	subs	r3, r1, r3
 8014f72:	0c00      	lsrs	r0, r0, #16
 8014f74:	4463      	add	r3, ip
 8014f76:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8014f7a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8014f7e:	b29b      	uxth	r3, r3
 8014f80:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014f84:	4576      	cmp	r6, lr
 8014f86:	f849 3b04 	str.w	r3, [r9], #4
 8014f8a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014f8e:	d8e5      	bhi.n	8014f5c <__mdiff+0x88>
 8014f90:	1b33      	subs	r3, r6, r4
 8014f92:	3b15      	subs	r3, #21
 8014f94:	f023 0303 	bic.w	r3, r3, #3
 8014f98:	3415      	adds	r4, #21
 8014f9a:	3304      	adds	r3, #4
 8014f9c:	42a6      	cmp	r6, r4
 8014f9e:	bf38      	it	cc
 8014fa0:	2304      	movcc	r3, #4
 8014fa2:	441d      	add	r5, r3
 8014fa4:	445b      	add	r3, fp
 8014fa6:	461e      	mov	r6, r3
 8014fa8:	462c      	mov	r4, r5
 8014faa:	4544      	cmp	r4, r8
 8014fac:	d30e      	bcc.n	8014fcc <__mdiff+0xf8>
 8014fae:	f108 0103 	add.w	r1, r8, #3
 8014fb2:	1b49      	subs	r1, r1, r5
 8014fb4:	f021 0103 	bic.w	r1, r1, #3
 8014fb8:	3d03      	subs	r5, #3
 8014fba:	45a8      	cmp	r8, r5
 8014fbc:	bf38      	it	cc
 8014fbe:	2100      	movcc	r1, #0
 8014fc0:	440b      	add	r3, r1
 8014fc2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014fc6:	b191      	cbz	r1, 8014fee <__mdiff+0x11a>
 8014fc8:	6117      	str	r7, [r2, #16]
 8014fca:	e79d      	b.n	8014f08 <__mdiff+0x34>
 8014fcc:	f854 1b04 	ldr.w	r1, [r4], #4
 8014fd0:	46e6      	mov	lr, ip
 8014fd2:	0c08      	lsrs	r0, r1, #16
 8014fd4:	fa1c fc81 	uxtah	ip, ip, r1
 8014fd8:	4471      	add	r1, lr
 8014fda:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8014fde:	b289      	uxth	r1, r1
 8014fe0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014fe4:	f846 1b04 	str.w	r1, [r6], #4
 8014fe8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014fec:	e7dd      	b.n	8014faa <__mdiff+0xd6>
 8014fee:	3f01      	subs	r7, #1
 8014ff0:	e7e7      	b.n	8014fc2 <__mdiff+0xee>
 8014ff2:	bf00      	nop
 8014ff4:	08017454 	.word	0x08017454
 8014ff8:	08017465 	.word	0x08017465

08014ffc <__d2b>:
 8014ffc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015000:	460f      	mov	r7, r1
 8015002:	2101      	movs	r1, #1
 8015004:	ec59 8b10 	vmov	r8, r9, d0
 8015008:	4616      	mov	r6, r2
 801500a:	f7ff fccd 	bl	80149a8 <_Balloc>
 801500e:	4604      	mov	r4, r0
 8015010:	b930      	cbnz	r0, 8015020 <__d2b+0x24>
 8015012:	4602      	mov	r2, r0
 8015014:	4b23      	ldr	r3, [pc, #140]	@ (80150a4 <__d2b+0xa8>)
 8015016:	4824      	ldr	r0, [pc, #144]	@ (80150a8 <__d2b+0xac>)
 8015018:	f240 310f 	movw	r1, #783	@ 0x30f
 801501c:	f000 fc4a 	bl	80158b4 <__assert_func>
 8015020:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015024:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015028:	b10d      	cbz	r5, 801502e <__d2b+0x32>
 801502a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801502e:	9301      	str	r3, [sp, #4]
 8015030:	f1b8 0300 	subs.w	r3, r8, #0
 8015034:	d023      	beq.n	801507e <__d2b+0x82>
 8015036:	4668      	mov	r0, sp
 8015038:	9300      	str	r3, [sp, #0]
 801503a:	f7ff fd7c 	bl	8014b36 <__lo0bits>
 801503e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8015042:	b1d0      	cbz	r0, 801507a <__d2b+0x7e>
 8015044:	f1c0 0320 	rsb	r3, r0, #32
 8015048:	fa02 f303 	lsl.w	r3, r2, r3
 801504c:	430b      	orrs	r3, r1
 801504e:	40c2      	lsrs	r2, r0
 8015050:	6163      	str	r3, [r4, #20]
 8015052:	9201      	str	r2, [sp, #4]
 8015054:	9b01      	ldr	r3, [sp, #4]
 8015056:	61a3      	str	r3, [r4, #24]
 8015058:	2b00      	cmp	r3, #0
 801505a:	bf0c      	ite	eq
 801505c:	2201      	moveq	r2, #1
 801505e:	2202      	movne	r2, #2
 8015060:	6122      	str	r2, [r4, #16]
 8015062:	b1a5      	cbz	r5, 801508e <__d2b+0x92>
 8015064:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8015068:	4405      	add	r5, r0
 801506a:	603d      	str	r5, [r7, #0]
 801506c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8015070:	6030      	str	r0, [r6, #0]
 8015072:	4620      	mov	r0, r4
 8015074:	b003      	add	sp, #12
 8015076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801507a:	6161      	str	r1, [r4, #20]
 801507c:	e7ea      	b.n	8015054 <__d2b+0x58>
 801507e:	a801      	add	r0, sp, #4
 8015080:	f7ff fd59 	bl	8014b36 <__lo0bits>
 8015084:	9b01      	ldr	r3, [sp, #4]
 8015086:	6163      	str	r3, [r4, #20]
 8015088:	3020      	adds	r0, #32
 801508a:	2201      	movs	r2, #1
 801508c:	e7e8      	b.n	8015060 <__d2b+0x64>
 801508e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015092:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8015096:	6038      	str	r0, [r7, #0]
 8015098:	6918      	ldr	r0, [r3, #16]
 801509a:	f7ff fd2d 	bl	8014af8 <__hi0bits>
 801509e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80150a2:	e7e5      	b.n	8015070 <__d2b+0x74>
 80150a4:	08017454 	.word	0x08017454
 80150a8:	08017465 	.word	0x08017465

080150ac <__ssputs_r>:
 80150ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80150b0:	688e      	ldr	r6, [r1, #8]
 80150b2:	461f      	mov	r7, r3
 80150b4:	42be      	cmp	r6, r7
 80150b6:	680b      	ldr	r3, [r1, #0]
 80150b8:	4682      	mov	sl, r0
 80150ba:	460c      	mov	r4, r1
 80150bc:	4690      	mov	r8, r2
 80150be:	d82d      	bhi.n	801511c <__ssputs_r+0x70>
 80150c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80150c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80150c8:	d026      	beq.n	8015118 <__ssputs_r+0x6c>
 80150ca:	6965      	ldr	r5, [r4, #20]
 80150cc:	6909      	ldr	r1, [r1, #16]
 80150ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80150d2:	eba3 0901 	sub.w	r9, r3, r1
 80150d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80150da:	1c7b      	adds	r3, r7, #1
 80150dc:	444b      	add	r3, r9
 80150de:	106d      	asrs	r5, r5, #1
 80150e0:	429d      	cmp	r5, r3
 80150e2:	bf38      	it	cc
 80150e4:	461d      	movcc	r5, r3
 80150e6:	0553      	lsls	r3, r2, #21
 80150e8:	d527      	bpl.n	801513a <__ssputs_r+0x8e>
 80150ea:	4629      	mov	r1, r5
 80150ec:	f7ff fbd0 	bl	8014890 <_malloc_r>
 80150f0:	4606      	mov	r6, r0
 80150f2:	b360      	cbz	r0, 801514e <__ssputs_r+0xa2>
 80150f4:	6921      	ldr	r1, [r4, #16]
 80150f6:	464a      	mov	r2, r9
 80150f8:	f7fe fcfb 	bl	8013af2 <memcpy>
 80150fc:	89a3      	ldrh	r3, [r4, #12]
 80150fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015106:	81a3      	strh	r3, [r4, #12]
 8015108:	6126      	str	r6, [r4, #16]
 801510a:	6165      	str	r5, [r4, #20]
 801510c:	444e      	add	r6, r9
 801510e:	eba5 0509 	sub.w	r5, r5, r9
 8015112:	6026      	str	r6, [r4, #0]
 8015114:	60a5      	str	r5, [r4, #8]
 8015116:	463e      	mov	r6, r7
 8015118:	42be      	cmp	r6, r7
 801511a:	d900      	bls.n	801511e <__ssputs_r+0x72>
 801511c:	463e      	mov	r6, r7
 801511e:	6820      	ldr	r0, [r4, #0]
 8015120:	4632      	mov	r2, r6
 8015122:	4641      	mov	r1, r8
 8015124:	f000 fb9c 	bl	8015860 <memmove>
 8015128:	68a3      	ldr	r3, [r4, #8]
 801512a:	1b9b      	subs	r3, r3, r6
 801512c:	60a3      	str	r3, [r4, #8]
 801512e:	6823      	ldr	r3, [r4, #0]
 8015130:	4433      	add	r3, r6
 8015132:	6023      	str	r3, [r4, #0]
 8015134:	2000      	movs	r0, #0
 8015136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801513a:	462a      	mov	r2, r5
 801513c:	f000 fbfe 	bl	801593c <_realloc_r>
 8015140:	4606      	mov	r6, r0
 8015142:	2800      	cmp	r0, #0
 8015144:	d1e0      	bne.n	8015108 <__ssputs_r+0x5c>
 8015146:	6921      	ldr	r1, [r4, #16]
 8015148:	4650      	mov	r0, sl
 801514a:	f7ff fb2d 	bl	80147a8 <_free_r>
 801514e:	230c      	movs	r3, #12
 8015150:	f8ca 3000 	str.w	r3, [sl]
 8015154:	89a3      	ldrh	r3, [r4, #12]
 8015156:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801515a:	81a3      	strh	r3, [r4, #12]
 801515c:	f04f 30ff 	mov.w	r0, #4294967295
 8015160:	e7e9      	b.n	8015136 <__ssputs_r+0x8a>
	...

08015164 <_svfiprintf_r>:
 8015164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015168:	4698      	mov	r8, r3
 801516a:	898b      	ldrh	r3, [r1, #12]
 801516c:	061b      	lsls	r3, r3, #24
 801516e:	b09d      	sub	sp, #116	@ 0x74
 8015170:	4607      	mov	r7, r0
 8015172:	460d      	mov	r5, r1
 8015174:	4614      	mov	r4, r2
 8015176:	d510      	bpl.n	801519a <_svfiprintf_r+0x36>
 8015178:	690b      	ldr	r3, [r1, #16]
 801517a:	b973      	cbnz	r3, 801519a <_svfiprintf_r+0x36>
 801517c:	2140      	movs	r1, #64	@ 0x40
 801517e:	f7ff fb87 	bl	8014890 <_malloc_r>
 8015182:	6028      	str	r0, [r5, #0]
 8015184:	6128      	str	r0, [r5, #16]
 8015186:	b930      	cbnz	r0, 8015196 <_svfiprintf_r+0x32>
 8015188:	230c      	movs	r3, #12
 801518a:	603b      	str	r3, [r7, #0]
 801518c:	f04f 30ff 	mov.w	r0, #4294967295
 8015190:	b01d      	add	sp, #116	@ 0x74
 8015192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015196:	2340      	movs	r3, #64	@ 0x40
 8015198:	616b      	str	r3, [r5, #20]
 801519a:	2300      	movs	r3, #0
 801519c:	9309      	str	r3, [sp, #36]	@ 0x24
 801519e:	2320      	movs	r3, #32
 80151a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80151a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80151a8:	2330      	movs	r3, #48	@ 0x30
 80151aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015348 <_svfiprintf_r+0x1e4>
 80151ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80151b2:	f04f 0901 	mov.w	r9, #1
 80151b6:	4623      	mov	r3, r4
 80151b8:	469a      	mov	sl, r3
 80151ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80151be:	b10a      	cbz	r2, 80151c4 <_svfiprintf_r+0x60>
 80151c0:	2a25      	cmp	r2, #37	@ 0x25
 80151c2:	d1f9      	bne.n	80151b8 <_svfiprintf_r+0x54>
 80151c4:	ebba 0b04 	subs.w	fp, sl, r4
 80151c8:	d00b      	beq.n	80151e2 <_svfiprintf_r+0x7e>
 80151ca:	465b      	mov	r3, fp
 80151cc:	4622      	mov	r2, r4
 80151ce:	4629      	mov	r1, r5
 80151d0:	4638      	mov	r0, r7
 80151d2:	f7ff ff6b 	bl	80150ac <__ssputs_r>
 80151d6:	3001      	adds	r0, #1
 80151d8:	f000 80a7 	beq.w	801532a <_svfiprintf_r+0x1c6>
 80151dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80151de:	445a      	add	r2, fp
 80151e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80151e2:	f89a 3000 	ldrb.w	r3, [sl]
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	f000 809f 	beq.w	801532a <_svfiprintf_r+0x1c6>
 80151ec:	2300      	movs	r3, #0
 80151ee:	f04f 32ff 	mov.w	r2, #4294967295
 80151f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80151f6:	f10a 0a01 	add.w	sl, sl, #1
 80151fa:	9304      	str	r3, [sp, #16]
 80151fc:	9307      	str	r3, [sp, #28]
 80151fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015202:	931a      	str	r3, [sp, #104]	@ 0x68
 8015204:	4654      	mov	r4, sl
 8015206:	2205      	movs	r2, #5
 8015208:	f814 1b01 	ldrb.w	r1, [r4], #1
 801520c:	484e      	ldr	r0, [pc, #312]	@ (8015348 <_svfiprintf_r+0x1e4>)
 801520e:	f7ea ffff 	bl	8000210 <memchr>
 8015212:	9a04      	ldr	r2, [sp, #16]
 8015214:	b9d8      	cbnz	r0, 801524e <_svfiprintf_r+0xea>
 8015216:	06d0      	lsls	r0, r2, #27
 8015218:	bf44      	itt	mi
 801521a:	2320      	movmi	r3, #32
 801521c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015220:	0711      	lsls	r1, r2, #28
 8015222:	bf44      	itt	mi
 8015224:	232b      	movmi	r3, #43	@ 0x2b
 8015226:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801522a:	f89a 3000 	ldrb.w	r3, [sl]
 801522e:	2b2a      	cmp	r3, #42	@ 0x2a
 8015230:	d015      	beq.n	801525e <_svfiprintf_r+0xfa>
 8015232:	9a07      	ldr	r2, [sp, #28]
 8015234:	4654      	mov	r4, sl
 8015236:	2000      	movs	r0, #0
 8015238:	f04f 0c0a 	mov.w	ip, #10
 801523c:	4621      	mov	r1, r4
 801523e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015242:	3b30      	subs	r3, #48	@ 0x30
 8015244:	2b09      	cmp	r3, #9
 8015246:	d94b      	bls.n	80152e0 <_svfiprintf_r+0x17c>
 8015248:	b1b0      	cbz	r0, 8015278 <_svfiprintf_r+0x114>
 801524a:	9207      	str	r2, [sp, #28]
 801524c:	e014      	b.n	8015278 <_svfiprintf_r+0x114>
 801524e:	eba0 0308 	sub.w	r3, r0, r8
 8015252:	fa09 f303 	lsl.w	r3, r9, r3
 8015256:	4313      	orrs	r3, r2
 8015258:	9304      	str	r3, [sp, #16]
 801525a:	46a2      	mov	sl, r4
 801525c:	e7d2      	b.n	8015204 <_svfiprintf_r+0xa0>
 801525e:	9b03      	ldr	r3, [sp, #12]
 8015260:	1d19      	adds	r1, r3, #4
 8015262:	681b      	ldr	r3, [r3, #0]
 8015264:	9103      	str	r1, [sp, #12]
 8015266:	2b00      	cmp	r3, #0
 8015268:	bfbb      	ittet	lt
 801526a:	425b      	neglt	r3, r3
 801526c:	f042 0202 	orrlt.w	r2, r2, #2
 8015270:	9307      	strge	r3, [sp, #28]
 8015272:	9307      	strlt	r3, [sp, #28]
 8015274:	bfb8      	it	lt
 8015276:	9204      	strlt	r2, [sp, #16]
 8015278:	7823      	ldrb	r3, [r4, #0]
 801527a:	2b2e      	cmp	r3, #46	@ 0x2e
 801527c:	d10a      	bne.n	8015294 <_svfiprintf_r+0x130>
 801527e:	7863      	ldrb	r3, [r4, #1]
 8015280:	2b2a      	cmp	r3, #42	@ 0x2a
 8015282:	d132      	bne.n	80152ea <_svfiprintf_r+0x186>
 8015284:	9b03      	ldr	r3, [sp, #12]
 8015286:	1d1a      	adds	r2, r3, #4
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	9203      	str	r2, [sp, #12]
 801528c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015290:	3402      	adds	r4, #2
 8015292:	9305      	str	r3, [sp, #20]
 8015294:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015358 <_svfiprintf_r+0x1f4>
 8015298:	7821      	ldrb	r1, [r4, #0]
 801529a:	2203      	movs	r2, #3
 801529c:	4650      	mov	r0, sl
 801529e:	f7ea ffb7 	bl	8000210 <memchr>
 80152a2:	b138      	cbz	r0, 80152b4 <_svfiprintf_r+0x150>
 80152a4:	9b04      	ldr	r3, [sp, #16]
 80152a6:	eba0 000a 	sub.w	r0, r0, sl
 80152aa:	2240      	movs	r2, #64	@ 0x40
 80152ac:	4082      	lsls	r2, r0
 80152ae:	4313      	orrs	r3, r2
 80152b0:	3401      	adds	r4, #1
 80152b2:	9304      	str	r3, [sp, #16]
 80152b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80152b8:	4824      	ldr	r0, [pc, #144]	@ (801534c <_svfiprintf_r+0x1e8>)
 80152ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80152be:	2206      	movs	r2, #6
 80152c0:	f7ea ffa6 	bl	8000210 <memchr>
 80152c4:	2800      	cmp	r0, #0
 80152c6:	d036      	beq.n	8015336 <_svfiprintf_r+0x1d2>
 80152c8:	4b21      	ldr	r3, [pc, #132]	@ (8015350 <_svfiprintf_r+0x1ec>)
 80152ca:	bb1b      	cbnz	r3, 8015314 <_svfiprintf_r+0x1b0>
 80152cc:	9b03      	ldr	r3, [sp, #12]
 80152ce:	3307      	adds	r3, #7
 80152d0:	f023 0307 	bic.w	r3, r3, #7
 80152d4:	3308      	adds	r3, #8
 80152d6:	9303      	str	r3, [sp, #12]
 80152d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80152da:	4433      	add	r3, r6
 80152dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80152de:	e76a      	b.n	80151b6 <_svfiprintf_r+0x52>
 80152e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80152e4:	460c      	mov	r4, r1
 80152e6:	2001      	movs	r0, #1
 80152e8:	e7a8      	b.n	801523c <_svfiprintf_r+0xd8>
 80152ea:	2300      	movs	r3, #0
 80152ec:	3401      	adds	r4, #1
 80152ee:	9305      	str	r3, [sp, #20]
 80152f0:	4619      	mov	r1, r3
 80152f2:	f04f 0c0a 	mov.w	ip, #10
 80152f6:	4620      	mov	r0, r4
 80152f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80152fc:	3a30      	subs	r2, #48	@ 0x30
 80152fe:	2a09      	cmp	r2, #9
 8015300:	d903      	bls.n	801530a <_svfiprintf_r+0x1a6>
 8015302:	2b00      	cmp	r3, #0
 8015304:	d0c6      	beq.n	8015294 <_svfiprintf_r+0x130>
 8015306:	9105      	str	r1, [sp, #20]
 8015308:	e7c4      	b.n	8015294 <_svfiprintf_r+0x130>
 801530a:	fb0c 2101 	mla	r1, ip, r1, r2
 801530e:	4604      	mov	r4, r0
 8015310:	2301      	movs	r3, #1
 8015312:	e7f0      	b.n	80152f6 <_svfiprintf_r+0x192>
 8015314:	ab03      	add	r3, sp, #12
 8015316:	9300      	str	r3, [sp, #0]
 8015318:	462a      	mov	r2, r5
 801531a:	4b0e      	ldr	r3, [pc, #56]	@ (8015354 <_svfiprintf_r+0x1f0>)
 801531c:	a904      	add	r1, sp, #16
 801531e:	4638      	mov	r0, r7
 8015320:	f7fd fe22 	bl	8012f68 <_printf_float>
 8015324:	1c42      	adds	r2, r0, #1
 8015326:	4606      	mov	r6, r0
 8015328:	d1d6      	bne.n	80152d8 <_svfiprintf_r+0x174>
 801532a:	89ab      	ldrh	r3, [r5, #12]
 801532c:	065b      	lsls	r3, r3, #25
 801532e:	f53f af2d 	bmi.w	801518c <_svfiprintf_r+0x28>
 8015332:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015334:	e72c      	b.n	8015190 <_svfiprintf_r+0x2c>
 8015336:	ab03      	add	r3, sp, #12
 8015338:	9300      	str	r3, [sp, #0]
 801533a:	462a      	mov	r2, r5
 801533c:	4b05      	ldr	r3, [pc, #20]	@ (8015354 <_svfiprintf_r+0x1f0>)
 801533e:	a904      	add	r1, sp, #16
 8015340:	4638      	mov	r0, r7
 8015342:	f7fe f8a9 	bl	8013498 <_printf_i>
 8015346:	e7ed      	b.n	8015324 <_svfiprintf_r+0x1c0>
 8015348:	080175c0 	.word	0x080175c0
 801534c:	080175ca 	.word	0x080175ca
 8015350:	08012f69 	.word	0x08012f69
 8015354:	080150ad 	.word	0x080150ad
 8015358:	080175c6 	.word	0x080175c6

0801535c <__sfputc_r>:
 801535c:	6893      	ldr	r3, [r2, #8]
 801535e:	3b01      	subs	r3, #1
 8015360:	2b00      	cmp	r3, #0
 8015362:	b410      	push	{r4}
 8015364:	6093      	str	r3, [r2, #8]
 8015366:	da08      	bge.n	801537a <__sfputc_r+0x1e>
 8015368:	6994      	ldr	r4, [r2, #24]
 801536a:	42a3      	cmp	r3, r4
 801536c:	db01      	blt.n	8015372 <__sfputc_r+0x16>
 801536e:	290a      	cmp	r1, #10
 8015370:	d103      	bne.n	801537a <__sfputc_r+0x1e>
 8015372:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015376:	f000 b9df 	b.w	8015738 <__swbuf_r>
 801537a:	6813      	ldr	r3, [r2, #0]
 801537c:	1c58      	adds	r0, r3, #1
 801537e:	6010      	str	r0, [r2, #0]
 8015380:	7019      	strb	r1, [r3, #0]
 8015382:	4608      	mov	r0, r1
 8015384:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015388:	4770      	bx	lr

0801538a <__sfputs_r>:
 801538a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801538c:	4606      	mov	r6, r0
 801538e:	460f      	mov	r7, r1
 8015390:	4614      	mov	r4, r2
 8015392:	18d5      	adds	r5, r2, r3
 8015394:	42ac      	cmp	r4, r5
 8015396:	d101      	bne.n	801539c <__sfputs_r+0x12>
 8015398:	2000      	movs	r0, #0
 801539a:	e007      	b.n	80153ac <__sfputs_r+0x22>
 801539c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80153a0:	463a      	mov	r2, r7
 80153a2:	4630      	mov	r0, r6
 80153a4:	f7ff ffda 	bl	801535c <__sfputc_r>
 80153a8:	1c43      	adds	r3, r0, #1
 80153aa:	d1f3      	bne.n	8015394 <__sfputs_r+0xa>
 80153ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080153b0 <_vfiprintf_r>:
 80153b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153b4:	460d      	mov	r5, r1
 80153b6:	b09d      	sub	sp, #116	@ 0x74
 80153b8:	4614      	mov	r4, r2
 80153ba:	4698      	mov	r8, r3
 80153bc:	4606      	mov	r6, r0
 80153be:	b118      	cbz	r0, 80153c8 <_vfiprintf_r+0x18>
 80153c0:	6a03      	ldr	r3, [r0, #32]
 80153c2:	b90b      	cbnz	r3, 80153c8 <_vfiprintf_r+0x18>
 80153c4:	f7fe fa14 	bl	80137f0 <__sinit>
 80153c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80153ca:	07d9      	lsls	r1, r3, #31
 80153cc:	d405      	bmi.n	80153da <_vfiprintf_r+0x2a>
 80153ce:	89ab      	ldrh	r3, [r5, #12]
 80153d0:	059a      	lsls	r2, r3, #22
 80153d2:	d402      	bmi.n	80153da <_vfiprintf_r+0x2a>
 80153d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80153d6:	f7fe fb8a 	bl	8013aee <__retarget_lock_acquire_recursive>
 80153da:	89ab      	ldrh	r3, [r5, #12]
 80153dc:	071b      	lsls	r3, r3, #28
 80153de:	d501      	bpl.n	80153e4 <_vfiprintf_r+0x34>
 80153e0:	692b      	ldr	r3, [r5, #16]
 80153e2:	b99b      	cbnz	r3, 801540c <_vfiprintf_r+0x5c>
 80153e4:	4629      	mov	r1, r5
 80153e6:	4630      	mov	r0, r6
 80153e8:	f000 f9e4 	bl	80157b4 <__swsetup_r>
 80153ec:	b170      	cbz	r0, 801540c <_vfiprintf_r+0x5c>
 80153ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80153f0:	07dc      	lsls	r4, r3, #31
 80153f2:	d504      	bpl.n	80153fe <_vfiprintf_r+0x4e>
 80153f4:	f04f 30ff 	mov.w	r0, #4294967295
 80153f8:	b01d      	add	sp, #116	@ 0x74
 80153fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153fe:	89ab      	ldrh	r3, [r5, #12]
 8015400:	0598      	lsls	r0, r3, #22
 8015402:	d4f7      	bmi.n	80153f4 <_vfiprintf_r+0x44>
 8015404:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015406:	f7fe fb73 	bl	8013af0 <__retarget_lock_release_recursive>
 801540a:	e7f3      	b.n	80153f4 <_vfiprintf_r+0x44>
 801540c:	2300      	movs	r3, #0
 801540e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015410:	2320      	movs	r3, #32
 8015412:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015416:	f8cd 800c 	str.w	r8, [sp, #12]
 801541a:	2330      	movs	r3, #48	@ 0x30
 801541c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80155cc <_vfiprintf_r+0x21c>
 8015420:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015424:	f04f 0901 	mov.w	r9, #1
 8015428:	4623      	mov	r3, r4
 801542a:	469a      	mov	sl, r3
 801542c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015430:	b10a      	cbz	r2, 8015436 <_vfiprintf_r+0x86>
 8015432:	2a25      	cmp	r2, #37	@ 0x25
 8015434:	d1f9      	bne.n	801542a <_vfiprintf_r+0x7a>
 8015436:	ebba 0b04 	subs.w	fp, sl, r4
 801543a:	d00b      	beq.n	8015454 <_vfiprintf_r+0xa4>
 801543c:	465b      	mov	r3, fp
 801543e:	4622      	mov	r2, r4
 8015440:	4629      	mov	r1, r5
 8015442:	4630      	mov	r0, r6
 8015444:	f7ff ffa1 	bl	801538a <__sfputs_r>
 8015448:	3001      	adds	r0, #1
 801544a:	f000 80a7 	beq.w	801559c <_vfiprintf_r+0x1ec>
 801544e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015450:	445a      	add	r2, fp
 8015452:	9209      	str	r2, [sp, #36]	@ 0x24
 8015454:	f89a 3000 	ldrb.w	r3, [sl]
 8015458:	2b00      	cmp	r3, #0
 801545a:	f000 809f 	beq.w	801559c <_vfiprintf_r+0x1ec>
 801545e:	2300      	movs	r3, #0
 8015460:	f04f 32ff 	mov.w	r2, #4294967295
 8015464:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015468:	f10a 0a01 	add.w	sl, sl, #1
 801546c:	9304      	str	r3, [sp, #16]
 801546e:	9307      	str	r3, [sp, #28]
 8015470:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015474:	931a      	str	r3, [sp, #104]	@ 0x68
 8015476:	4654      	mov	r4, sl
 8015478:	2205      	movs	r2, #5
 801547a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801547e:	4853      	ldr	r0, [pc, #332]	@ (80155cc <_vfiprintf_r+0x21c>)
 8015480:	f7ea fec6 	bl	8000210 <memchr>
 8015484:	9a04      	ldr	r2, [sp, #16]
 8015486:	b9d8      	cbnz	r0, 80154c0 <_vfiprintf_r+0x110>
 8015488:	06d1      	lsls	r1, r2, #27
 801548a:	bf44      	itt	mi
 801548c:	2320      	movmi	r3, #32
 801548e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015492:	0713      	lsls	r3, r2, #28
 8015494:	bf44      	itt	mi
 8015496:	232b      	movmi	r3, #43	@ 0x2b
 8015498:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801549c:	f89a 3000 	ldrb.w	r3, [sl]
 80154a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80154a2:	d015      	beq.n	80154d0 <_vfiprintf_r+0x120>
 80154a4:	9a07      	ldr	r2, [sp, #28]
 80154a6:	4654      	mov	r4, sl
 80154a8:	2000      	movs	r0, #0
 80154aa:	f04f 0c0a 	mov.w	ip, #10
 80154ae:	4621      	mov	r1, r4
 80154b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80154b4:	3b30      	subs	r3, #48	@ 0x30
 80154b6:	2b09      	cmp	r3, #9
 80154b8:	d94b      	bls.n	8015552 <_vfiprintf_r+0x1a2>
 80154ba:	b1b0      	cbz	r0, 80154ea <_vfiprintf_r+0x13a>
 80154bc:	9207      	str	r2, [sp, #28]
 80154be:	e014      	b.n	80154ea <_vfiprintf_r+0x13a>
 80154c0:	eba0 0308 	sub.w	r3, r0, r8
 80154c4:	fa09 f303 	lsl.w	r3, r9, r3
 80154c8:	4313      	orrs	r3, r2
 80154ca:	9304      	str	r3, [sp, #16]
 80154cc:	46a2      	mov	sl, r4
 80154ce:	e7d2      	b.n	8015476 <_vfiprintf_r+0xc6>
 80154d0:	9b03      	ldr	r3, [sp, #12]
 80154d2:	1d19      	adds	r1, r3, #4
 80154d4:	681b      	ldr	r3, [r3, #0]
 80154d6:	9103      	str	r1, [sp, #12]
 80154d8:	2b00      	cmp	r3, #0
 80154da:	bfbb      	ittet	lt
 80154dc:	425b      	neglt	r3, r3
 80154de:	f042 0202 	orrlt.w	r2, r2, #2
 80154e2:	9307      	strge	r3, [sp, #28]
 80154e4:	9307      	strlt	r3, [sp, #28]
 80154e6:	bfb8      	it	lt
 80154e8:	9204      	strlt	r2, [sp, #16]
 80154ea:	7823      	ldrb	r3, [r4, #0]
 80154ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80154ee:	d10a      	bne.n	8015506 <_vfiprintf_r+0x156>
 80154f0:	7863      	ldrb	r3, [r4, #1]
 80154f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80154f4:	d132      	bne.n	801555c <_vfiprintf_r+0x1ac>
 80154f6:	9b03      	ldr	r3, [sp, #12]
 80154f8:	1d1a      	adds	r2, r3, #4
 80154fa:	681b      	ldr	r3, [r3, #0]
 80154fc:	9203      	str	r2, [sp, #12]
 80154fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015502:	3402      	adds	r4, #2
 8015504:	9305      	str	r3, [sp, #20]
 8015506:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80155dc <_vfiprintf_r+0x22c>
 801550a:	7821      	ldrb	r1, [r4, #0]
 801550c:	2203      	movs	r2, #3
 801550e:	4650      	mov	r0, sl
 8015510:	f7ea fe7e 	bl	8000210 <memchr>
 8015514:	b138      	cbz	r0, 8015526 <_vfiprintf_r+0x176>
 8015516:	9b04      	ldr	r3, [sp, #16]
 8015518:	eba0 000a 	sub.w	r0, r0, sl
 801551c:	2240      	movs	r2, #64	@ 0x40
 801551e:	4082      	lsls	r2, r0
 8015520:	4313      	orrs	r3, r2
 8015522:	3401      	adds	r4, #1
 8015524:	9304      	str	r3, [sp, #16]
 8015526:	f814 1b01 	ldrb.w	r1, [r4], #1
 801552a:	4829      	ldr	r0, [pc, #164]	@ (80155d0 <_vfiprintf_r+0x220>)
 801552c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015530:	2206      	movs	r2, #6
 8015532:	f7ea fe6d 	bl	8000210 <memchr>
 8015536:	2800      	cmp	r0, #0
 8015538:	d03f      	beq.n	80155ba <_vfiprintf_r+0x20a>
 801553a:	4b26      	ldr	r3, [pc, #152]	@ (80155d4 <_vfiprintf_r+0x224>)
 801553c:	bb1b      	cbnz	r3, 8015586 <_vfiprintf_r+0x1d6>
 801553e:	9b03      	ldr	r3, [sp, #12]
 8015540:	3307      	adds	r3, #7
 8015542:	f023 0307 	bic.w	r3, r3, #7
 8015546:	3308      	adds	r3, #8
 8015548:	9303      	str	r3, [sp, #12]
 801554a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801554c:	443b      	add	r3, r7
 801554e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015550:	e76a      	b.n	8015428 <_vfiprintf_r+0x78>
 8015552:	fb0c 3202 	mla	r2, ip, r2, r3
 8015556:	460c      	mov	r4, r1
 8015558:	2001      	movs	r0, #1
 801555a:	e7a8      	b.n	80154ae <_vfiprintf_r+0xfe>
 801555c:	2300      	movs	r3, #0
 801555e:	3401      	adds	r4, #1
 8015560:	9305      	str	r3, [sp, #20]
 8015562:	4619      	mov	r1, r3
 8015564:	f04f 0c0a 	mov.w	ip, #10
 8015568:	4620      	mov	r0, r4
 801556a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801556e:	3a30      	subs	r2, #48	@ 0x30
 8015570:	2a09      	cmp	r2, #9
 8015572:	d903      	bls.n	801557c <_vfiprintf_r+0x1cc>
 8015574:	2b00      	cmp	r3, #0
 8015576:	d0c6      	beq.n	8015506 <_vfiprintf_r+0x156>
 8015578:	9105      	str	r1, [sp, #20]
 801557a:	e7c4      	b.n	8015506 <_vfiprintf_r+0x156>
 801557c:	fb0c 2101 	mla	r1, ip, r1, r2
 8015580:	4604      	mov	r4, r0
 8015582:	2301      	movs	r3, #1
 8015584:	e7f0      	b.n	8015568 <_vfiprintf_r+0x1b8>
 8015586:	ab03      	add	r3, sp, #12
 8015588:	9300      	str	r3, [sp, #0]
 801558a:	462a      	mov	r2, r5
 801558c:	4b12      	ldr	r3, [pc, #72]	@ (80155d8 <_vfiprintf_r+0x228>)
 801558e:	a904      	add	r1, sp, #16
 8015590:	4630      	mov	r0, r6
 8015592:	f7fd fce9 	bl	8012f68 <_printf_float>
 8015596:	4607      	mov	r7, r0
 8015598:	1c78      	adds	r0, r7, #1
 801559a:	d1d6      	bne.n	801554a <_vfiprintf_r+0x19a>
 801559c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801559e:	07d9      	lsls	r1, r3, #31
 80155a0:	d405      	bmi.n	80155ae <_vfiprintf_r+0x1fe>
 80155a2:	89ab      	ldrh	r3, [r5, #12]
 80155a4:	059a      	lsls	r2, r3, #22
 80155a6:	d402      	bmi.n	80155ae <_vfiprintf_r+0x1fe>
 80155a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80155aa:	f7fe faa1 	bl	8013af0 <__retarget_lock_release_recursive>
 80155ae:	89ab      	ldrh	r3, [r5, #12]
 80155b0:	065b      	lsls	r3, r3, #25
 80155b2:	f53f af1f 	bmi.w	80153f4 <_vfiprintf_r+0x44>
 80155b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80155b8:	e71e      	b.n	80153f8 <_vfiprintf_r+0x48>
 80155ba:	ab03      	add	r3, sp, #12
 80155bc:	9300      	str	r3, [sp, #0]
 80155be:	462a      	mov	r2, r5
 80155c0:	4b05      	ldr	r3, [pc, #20]	@ (80155d8 <_vfiprintf_r+0x228>)
 80155c2:	a904      	add	r1, sp, #16
 80155c4:	4630      	mov	r0, r6
 80155c6:	f7fd ff67 	bl	8013498 <_printf_i>
 80155ca:	e7e4      	b.n	8015596 <_vfiprintf_r+0x1e6>
 80155cc:	080175c0 	.word	0x080175c0
 80155d0:	080175ca 	.word	0x080175ca
 80155d4:	08012f69 	.word	0x08012f69
 80155d8:	0801538b 	.word	0x0801538b
 80155dc:	080175c6 	.word	0x080175c6

080155e0 <__sflush_r>:
 80155e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80155e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155e8:	0716      	lsls	r6, r2, #28
 80155ea:	4605      	mov	r5, r0
 80155ec:	460c      	mov	r4, r1
 80155ee:	d454      	bmi.n	801569a <__sflush_r+0xba>
 80155f0:	684b      	ldr	r3, [r1, #4]
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	dc02      	bgt.n	80155fc <__sflush_r+0x1c>
 80155f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	dd48      	ble.n	801568e <__sflush_r+0xae>
 80155fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80155fe:	2e00      	cmp	r6, #0
 8015600:	d045      	beq.n	801568e <__sflush_r+0xae>
 8015602:	2300      	movs	r3, #0
 8015604:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015608:	682f      	ldr	r7, [r5, #0]
 801560a:	6a21      	ldr	r1, [r4, #32]
 801560c:	602b      	str	r3, [r5, #0]
 801560e:	d030      	beq.n	8015672 <__sflush_r+0x92>
 8015610:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8015612:	89a3      	ldrh	r3, [r4, #12]
 8015614:	0759      	lsls	r1, r3, #29
 8015616:	d505      	bpl.n	8015624 <__sflush_r+0x44>
 8015618:	6863      	ldr	r3, [r4, #4]
 801561a:	1ad2      	subs	r2, r2, r3
 801561c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801561e:	b10b      	cbz	r3, 8015624 <__sflush_r+0x44>
 8015620:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015622:	1ad2      	subs	r2, r2, r3
 8015624:	2300      	movs	r3, #0
 8015626:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015628:	6a21      	ldr	r1, [r4, #32]
 801562a:	4628      	mov	r0, r5
 801562c:	47b0      	blx	r6
 801562e:	1c43      	adds	r3, r0, #1
 8015630:	89a3      	ldrh	r3, [r4, #12]
 8015632:	d106      	bne.n	8015642 <__sflush_r+0x62>
 8015634:	6829      	ldr	r1, [r5, #0]
 8015636:	291d      	cmp	r1, #29
 8015638:	d82b      	bhi.n	8015692 <__sflush_r+0xb2>
 801563a:	4a2a      	ldr	r2, [pc, #168]	@ (80156e4 <__sflush_r+0x104>)
 801563c:	410a      	asrs	r2, r1
 801563e:	07d6      	lsls	r6, r2, #31
 8015640:	d427      	bmi.n	8015692 <__sflush_r+0xb2>
 8015642:	2200      	movs	r2, #0
 8015644:	6062      	str	r2, [r4, #4]
 8015646:	04d9      	lsls	r1, r3, #19
 8015648:	6922      	ldr	r2, [r4, #16]
 801564a:	6022      	str	r2, [r4, #0]
 801564c:	d504      	bpl.n	8015658 <__sflush_r+0x78>
 801564e:	1c42      	adds	r2, r0, #1
 8015650:	d101      	bne.n	8015656 <__sflush_r+0x76>
 8015652:	682b      	ldr	r3, [r5, #0]
 8015654:	b903      	cbnz	r3, 8015658 <__sflush_r+0x78>
 8015656:	6560      	str	r0, [r4, #84]	@ 0x54
 8015658:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801565a:	602f      	str	r7, [r5, #0]
 801565c:	b1b9      	cbz	r1, 801568e <__sflush_r+0xae>
 801565e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015662:	4299      	cmp	r1, r3
 8015664:	d002      	beq.n	801566c <__sflush_r+0x8c>
 8015666:	4628      	mov	r0, r5
 8015668:	f7ff f89e 	bl	80147a8 <_free_r>
 801566c:	2300      	movs	r3, #0
 801566e:	6363      	str	r3, [r4, #52]	@ 0x34
 8015670:	e00d      	b.n	801568e <__sflush_r+0xae>
 8015672:	2301      	movs	r3, #1
 8015674:	4628      	mov	r0, r5
 8015676:	47b0      	blx	r6
 8015678:	4602      	mov	r2, r0
 801567a:	1c50      	adds	r0, r2, #1
 801567c:	d1c9      	bne.n	8015612 <__sflush_r+0x32>
 801567e:	682b      	ldr	r3, [r5, #0]
 8015680:	2b00      	cmp	r3, #0
 8015682:	d0c6      	beq.n	8015612 <__sflush_r+0x32>
 8015684:	2b1d      	cmp	r3, #29
 8015686:	d001      	beq.n	801568c <__sflush_r+0xac>
 8015688:	2b16      	cmp	r3, #22
 801568a:	d11e      	bne.n	80156ca <__sflush_r+0xea>
 801568c:	602f      	str	r7, [r5, #0]
 801568e:	2000      	movs	r0, #0
 8015690:	e022      	b.n	80156d8 <__sflush_r+0xf8>
 8015692:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015696:	b21b      	sxth	r3, r3
 8015698:	e01b      	b.n	80156d2 <__sflush_r+0xf2>
 801569a:	690f      	ldr	r7, [r1, #16]
 801569c:	2f00      	cmp	r7, #0
 801569e:	d0f6      	beq.n	801568e <__sflush_r+0xae>
 80156a0:	0793      	lsls	r3, r2, #30
 80156a2:	680e      	ldr	r6, [r1, #0]
 80156a4:	bf08      	it	eq
 80156a6:	694b      	ldreq	r3, [r1, #20]
 80156a8:	600f      	str	r7, [r1, #0]
 80156aa:	bf18      	it	ne
 80156ac:	2300      	movne	r3, #0
 80156ae:	eba6 0807 	sub.w	r8, r6, r7
 80156b2:	608b      	str	r3, [r1, #8]
 80156b4:	f1b8 0f00 	cmp.w	r8, #0
 80156b8:	dde9      	ble.n	801568e <__sflush_r+0xae>
 80156ba:	6a21      	ldr	r1, [r4, #32]
 80156bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80156be:	4643      	mov	r3, r8
 80156c0:	463a      	mov	r2, r7
 80156c2:	4628      	mov	r0, r5
 80156c4:	47b0      	blx	r6
 80156c6:	2800      	cmp	r0, #0
 80156c8:	dc08      	bgt.n	80156dc <__sflush_r+0xfc>
 80156ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80156ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80156d2:	81a3      	strh	r3, [r4, #12]
 80156d4:	f04f 30ff 	mov.w	r0, #4294967295
 80156d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156dc:	4407      	add	r7, r0
 80156de:	eba8 0800 	sub.w	r8, r8, r0
 80156e2:	e7e7      	b.n	80156b4 <__sflush_r+0xd4>
 80156e4:	dfbffffe 	.word	0xdfbffffe

080156e8 <_fflush_r>:
 80156e8:	b538      	push	{r3, r4, r5, lr}
 80156ea:	690b      	ldr	r3, [r1, #16]
 80156ec:	4605      	mov	r5, r0
 80156ee:	460c      	mov	r4, r1
 80156f0:	b913      	cbnz	r3, 80156f8 <_fflush_r+0x10>
 80156f2:	2500      	movs	r5, #0
 80156f4:	4628      	mov	r0, r5
 80156f6:	bd38      	pop	{r3, r4, r5, pc}
 80156f8:	b118      	cbz	r0, 8015702 <_fflush_r+0x1a>
 80156fa:	6a03      	ldr	r3, [r0, #32]
 80156fc:	b90b      	cbnz	r3, 8015702 <_fflush_r+0x1a>
 80156fe:	f7fe f877 	bl	80137f0 <__sinit>
 8015702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015706:	2b00      	cmp	r3, #0
 8015708:	d0f3      	beq.n	80156f2 <_fflush_r+0xa>
 801570a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801570c:	07d0      	lsls	r0, r2, #31
 801570e:	d404      	bmi.n	801571a <_fflush_r+0x32>
 8015710:	0599      	lsls	r1, r3, #22
 8015712:	d402      	bmi.n	801571a <_fflush_r+0x32>
 8015714:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015716:	f7fe f9ea 	bl	8013aee <__retarget_lock_acquire_recursive>
 801571a:	4628      	mov	r0, r5
 801571c:	4621      	mov	r1, r4
 801571e:	f7ff ff5f 	bl	80155e0 <__sflush_r>
 8015722:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015724:	07da      	lsls	r2, r3, #31
 8015726:	4605      	mov	r5, r0
 8015728:	d4e4      	bmi.n	80156f4 <_fflush_r+0xc>
 801572a:	89a3      	ldrh	r3, [r4, #12]
 801572c:	059b      	lsls	r3, r3, #22
 801572e:	d4e1      	bmi.n	80156f4 <_fflush_r+0xc>
 8015730:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015732:	f7fe f9dd 	bl	8013af0 <__retarget_lock_release_recursive>
 8015736:	e7dd      	b.n	80156f4 <_fflush_r+0xc>

08015738 <__swbuf_r>:
 8015738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801573a:	460e      	mov	r6, r1
 801573c:	4614      	mov	r4, r2
 801573e:	4605      	mov	r5, r0
 8015740:	b118      	cbz	r0, 801574a <__swbuf_r+0x12>
 8015742:	6a03      	ldr	r3, [r0, #32]
 8015744:	b90b      	cbnz	r3, 801574a <__swbuf_r+0x12>
 8015746:	f7fe f853 	bl	80137f0 <__sinit>
 801574a:	69a3      	ldr	r3, [r4, #24]
 801574c:	60a3      	str	r3, [r4, #8]
 801574e:	89a3      	ldrh	r3, [r4, #12]
 8015750:	071a      	lsls	r2, r3, #28
 8015752:	d501      	bpl.n	8015758 <__swbuf_r+0x20>
 8015754:	6923      	ldr	r3, [r4, #16]
 8015756:	b943      	cbnz	r3, 801576a <__swbuf_r+0x32>
 8015758:	4621      	mov	r1, r4
 801575a:	4628      	mov	r0, r5
 801575c:	f000 f82a 	bl	80157b4 <__swsetup_r>
 8015760:	b118      	cbz	r0, 801576a <__swbuf_r+0x32>
 8015762:	f04f 37ff 	mov.w	r7, #4294967295
 8015766:	4638      	mov	r0, r7
 8015768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801576a:	6823      	ldr	r3, [r4, #0]
 801576c:	6922      	ldr	r2, [r4, #16]
 801576e:	1a98      	subs	r0, r3, r2
 8015770:	6963      	ldr	r3, [r4, #20]
 8015772:	b2f6      	uxtb	r6, r6
 8015774:	4283      	cmp	r3, r0
 8015776:	4637      	mov	r7, r6
 8015778:	dc05      	bgt.n	8015786 <__swbuf_r+0x4e>
 801577a:	4621      	mov	r1, r4
 801577c:	4628      	mov	r0, r5
 801577e:	f7ff ffb3 	bl	80156e8 <_fflush_r>
 8015782:	2800      	cmp	r0, #0
 8015784:	d1ed      	bne.n	8015762 <__swbuf_r+0x2a>
 8015786:	68a3      	ldr	r3, [r4, #8]
 8015788:	3b01      	subs	r3, #1
 801578a:	60a3      	str	r3, [r4, #8]
 801578c:	6823      	ldr	r3, [r4, #0]
 801578e:	1c5a      	adds	r2, r3, #1
 8015790:	6022      	str	r2, [r4, #0]
 8015792:	701e      	strb	r6, [r3, #0]
 8015794:	6962      	ldr	r2, [r4, #20]
 8015796:	1c43      	adds	r3, r0, #1
 8015798:	429a      	cmp	r2, r3
 801579a:	d004      	beq.n	80157a6 <__swbuf_r+0x6e>
 801579c:	89a3      	ldrh	r3, [r4, #12]
 801579e:	07db      	lsls	r3, r3, #31
 80157a0:	d5e1      	bpl.n	8015766 <__swbuf_r+0x2e>
 80157a2:	2e0a      	cmp	r6, #10
 80157a4:	d1df      	bne.n	8015766 <__swbuf_r+0x2e>
 80157a6:	4621      	mov	r1, r4
 80157a8:	4628      	mov	r0, r5
 80157aa:	f7ff ff9d 	bl	80156e8 <_fflush_r>
 80157ae:	2800      	cmp	r0, #0
 80157b0:	d0d9      	beq.n	8015766 <__swbuf_r+0x2e>
 80157b2:	e7d6      	b.n	8015762 <__swbuf_r+0x2a>

080157b4 <__swsetup_r>:
 80157b4:	b538      	push	{r3, r4, r5, lr}
 80157b6:	4b29      	ldr	r3, [pc, #164]	@ (801585c <__swsetup_r+0xa8>)
 80157b8:	4605      	mov	r5, r0
 80157ba:	6818      	ldr	r0, [r3, #0]
 80157bc:	460c      	mov	r4, r1
 80157be:	b118      	cbz	r0, 80157c8 <__swsetup_r+0x14>
 80157c0:	6a03      	ldr	r3, [r0, #32]
 80157c2:	b90b      	cbnz	r3, 80157c8 <__swsetup_r+0x14>
 80157c4:	f7fe f814 	bl	80137f0 <__sinit>
 80157c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80157cc:	0719      	lsls	r1, r3, #28
 80157ce:	d422      	bmi.n	8015816 <__swsetup_r+0x62>
 80157d0:	06da      	lsls	r2, r3, #27
 80157d2:	d407      	bmi.n	80157e4 <__swsetup_r+0x30>
 80157d4:	2209      	movs	r2, #9
 80157d6:	602a      	str	r2, [r5, #0]
 80157d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80157dc:	81a3      	strh	r3, [r4, #12]
 80157de:	f04f 30ff 	mov.w	r0, #4294967295
 80157e2:	e033      	b.n	801584c <__swsetup_r+0x98>
 80157e4:	0758      	lsls	r0, r3, #29
 80157e6:	d512      	bpl.n	801580e <__swsetup_r+0x5a>
 80157e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80157ea:	b141      	cbz	r1, 80157fe <__swsetup_r+0x4a>
 80157ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80157f0:	4299      	cmp	r1, r3
 80157f2:	d002      	beq.n	80157fa <__swsetup_r+0x46>
 80157f4:	4628      	mov	r0, r5
 80157f6:	f7fe ffd7 	bl	80147a8 <_free_r>
 80157fa:	2300      	movs	r3, #0
 80157fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80157fe:	89a3      	ldrh	r3, [r4, #12]
 8015800:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015804:	81a3      	strh	r3, [r4, #12]
 8015806:	2300      	movs	r3, #0
 8015808:	6063      	str	r3, [r4, #4]
 801580a:	6923      	ldr	r3, [r4, #16]
 801580c:	6023      	str	r3, [r4, #0]
 801580e:	89a3      	ldrh	r3, [r4, #12]
 8015810:	f043 0308 	orr.w	r3, r3, #8
 8015814:	81a3      	strh	r3, [r4, #12]
 8015816:	6923      	ldr	r3, [r4, #16]
 8015818:	b94b      	cbnz	r3, 801582e <__swsetup_r+0x7a>
 801581a:	89a3      	ldrh	r3, [r4, #12]
 801581c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015820:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015824:	d003      	beq.n	801582e <__swsetup_r+0x7a>
 8015826:	4621      	mov	r1, r4
 8015828:	4628      	mov	r0, r5
 801582a:	f000 f8fb 	bl	8015a24 <__smakebuf_r>
 801582e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015832:	f013 0201 	ands.w	r2, r3, #1
 8015836:	d00a      	beq.n	801584e <__swsetup_r+0x9a>
 8015838:	2200      	movs	r2, #0
 801583a:	60a2      	str	r2, [r4, #8]
 801583c:	6962      	ldr	r2, [r4, #20]
 801583e:	4252      	negs	r2, r2
 8015840:	61a2      	str	r2, [r4, #24]
 8015842:	6922      	ldr	r2, [r4, #16]
 8015844:	b942      	cbnz	r2, 8015858 <__swsetup_r+0xa4>
 8015846:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801584a:	d1c5      	bne.n	80157d8 <__swsetup_r+0x24>
 801584c:	bd38      	pop	{r3, r4, r5, pc}
 801584e:	0799      	lsls	r1, r3, #30
 8015850:	bf58      	it	pl
 8015852:	6962      	ldrpl	r2, [r4, #20]
 8015854:	60a2      	str	r2, [r4, #8]
 8015856:	e7f4      	b.n	8015842 <__swsetup_r+0x8e>
 8015858:	2000      	movs	r0, #0
 801585a:	e7f7      	b.n	801584c <__swsetup_r+0x98>
 801585c:	20000034 	.word	0x20000034

08015860 <memmove>:
 8015860:	4288      	cmp	r0, r1
 8015862:	b510      	push	{r4, lr}
 8015864:	eb01 0402 	add.w	r4, r1, r2
 8015868:	d902      	bls.n	8015870 <memmove+0x10>
 801586a:	4284      	cmp	r4, r0
 801586c:	4623      	mov	r3, r4
 801586e:	d807      	bhi.n	8015880 <memmove+0x20>
 8015870:	1e43      	subs	r3, r0, #1
 8015872:	42a1      	cmp	r1, r4
 8015874:	d008      	beq.n	8015888 <memmove+0x28>
 8015876:	f811 2b01 	ldrb.w	r2, [r1], #1
 801587a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801587e:	e7f8      	b.n	8015872 <memmove+0x12>
 8015880:	4402      	add	r2, r0
 8015882:	4601      	mov	r1, r0
 8015884:	428a      	cmp	r2, r1
 8015886:	d100      	bne.n	801588a <memmove+0x2a>
 8015888:	bd10      	pop	{r4, pc}
 801588a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801588e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015892:	e7f7      	b.n	8015884 <memmove+0x24>

08015894 <_sbrk_r>:
 8015894:	b538      	push	{r3, r4, r5, lr}
 8015896:	4d06      	ldr	r5, [pc, #24]	@ (80158b0 <_sbrk_r+0x1c>)
 8015898:	2300      	movs	r3, #0
 801589a:	4604      	mov	r4, r0
 801589c:	4608      	mov	r0, r1
 801589e:	602b      	str	r3, [r5, #0]
 80158a0:	f7ee ff64 	bl	800476c <_sbrk>
 80158a4:	1c43      	adds	r3, r0, #1
 80158a6:	d102      	bne.n	80158ae <_sbrk_r+0x1a>
 80158a8:	682b      	ldr	r3, [r5, #0]
 80158aa:	b103      	cbz	r3, 80158ae <_sbrk_r+0x1a>
 80158ac:	6023      	str	r3, [r4, #0]
 80158ae:	bd38      	pop	{r3, r4, r5, pc}
 80158b0:	20006af8 	.word	0x20006af8

080158b4 <__assert_func>:
 80158b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80158b6:	4614      	mov	r4, r2
 80158b8:	461a      	mov	r2, r3
 80158ba:	4b09      	ldr	r3, [pc, #36]	@ (80158e0 <__assert_func+0x2c>)
 80158bc:	681b      	ldr	r3, [r3, #0]
 80158be:	4605      	mov	r5, r0
 80158c0:	68d8      	ldr	r0, [r3, #12]
 80158c2:	b954      	cbnz	r4, 80158da <__assert_func+0x26>
 80158c4:	4b07      	ldr	r3, [pc, #28]	@ (80158e4 <__assert_func+0x30>)
 80158c6:	461c      	mov	r4, r3
 80158c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80158cc:	9100      	str	r1, [sp, #0]
 80158ce:	462b      	mov	r3, r5
 80158d0:	4905      	ldr	r1, [pc, #20]	@ (80158e8 <__assert_func+0x34>)
 80158d2:	f000 f86f 	bl	80159b4 <fiprintf>
 80158d6:	f000 f903 	bl	8015ae0 <abort>
 80158da:	4b04      	ldr	r3, [pc, #16]	@ (80158ec <__assert_func+0x38>)
 80158dc:	e7f4      	b.n	80158c8 <__assert_func+0x14>
 80158de:	bf00      	nop
 80158e0:	20000034 	.word	0x20000034
 80158e4:	08017616 	.word	0x08017616
 80158e8:	080175e8 	.word	0x080175e8
 80158ec:	080175db 	.word	0x080175db

080158f0 <_calloc_r>:
 80158f0:	b570      	push	{r4, r5, r6, lr}
 80158f2:	fba1 5402 	umull	r5, r4, r1, r2
 80158f6:	b93c      	cbnz	r4, 8015908 <_calloc_r+0x18>
 80158f8:	4629      	mov	r1, r5
 80158fa:	f7fe ffc9 	bl	8014890 <_malloc_r>
 80158fe:	4606      	mov	r6, r0
 8015900:	b928      	cbnz	r0, 801590e <_calloc_r+0x1e>
 8015902:	2600      	movs	r6, #0
 8015904:	4630      	mov	r0, r6
 8015906:	bd70      	pop	{r4, r5, r6, pc}
 8015908:	220c      	movs	r2, #12
 801590a:	6002      	str	r2, [r0, #0]
 801590c:	e7f9      	b.n	8015902 <_calloc_r+0x12>
 801590e:	462a      	mov	r2, r5
 8015910:	4621      	mov	r1, r4
 8015912:	f7fe f818 	bl	8013946 <memset>
 8015916:	e7f5      	b.n	8015904 <_calloc_r+0x14>

08015918 <__ascii_mbtowc>:
 8015918:	b082      	sub	sp, #8
 801591a:	b901      	cbnz	r1, 801591e <__ascii_mbtowc+0x6>
 801591c:	a901      	add	r1, sp, #4
 801591e:	b142      	cbz	r2, 8015932 <__ascii_mbtowc+0x1a>
 8015920:	b14b      	cbz	r3, 8015936 <__ascii_mbtowc+0x1e>
 8015922:	7813      	ldrb	r3, [r2, #0]
 8015924:	600b      	str	r3, [r1, #0]
 8015926:	7812      	ldrb	r2, [r2, #0]
 8015928:	1e10      	subs	r0, r2, #0
 801592a:	bf18      	it	ne
 801592c:	2001      	movne	r0, #1
 801592e:	b002      	add	sp, #8
 8015930:	4770      	bx	lr
 8015932:	4610      	mov	r0, r2
 8015934:	e7fb      	b.n	801592e <__ascii_mbtowc+0x16>
 8015936:	f06f 0001 	mvn.w	r0, #1
 801593a:	e7f8      	b.n	801592e <__ascii_mbtowc+0x16>

0801593c <_realloc_r>:
 801593c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015940:	4680      	mov	r8, r0
 8015942:	4615      	mov	r5, r2
 8015944:	460c      	mov	r4, r1
 8015946:	b921      	cbnz	r1, 8015952 <_realloc_r+0x16>
 8015948:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801594c:	4611      	mov	r1, r2
 801594e:	f7fe bf9f 	b.w	8014890 <_malloc_r>
 8015952:	b92a      	cbnz	r2, 8015960 <_realloc_r+0x24>
 8015954:	f7fe ff28 	bl	80147a8 <_free_r>
 8015958:	2400      	movs	r4, #0
 801595a:	4620      	mov	r0, r4
 801595c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015960:	f000 f8c5 	bl	8015aee <_malloc_usable_size_r>
 8015964:	4285      	cmp	r5, r0
 8015966:	4606      	mov	r6, r0
 8015968:	d802      	bhi.n	8015970 <_realloc_r+0x34>
 801596a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801596e:	d8f4      	bhi.n	801595a <_realloc_r+0x1e>
 8015970:	4629      	mov	r1, r5
 8015972:	4640      	mov	r0, r8
 8015974:	f7fe ff8c 	bl	8014890 <_malloc_r>
 8015978:	4607      	mov	r7, r0
 801597a:	2800      	cmp	r0, #0
 801597c:	d0ec      	beq.n	8015958 <_realloc_r+0x1c>
 801597e:	42b5      	cmp	r5, r6
 8015980:	462a      	mov	r2, r5
 8015982:	4621      	mov	r1, r4
 8015984:	bf28      	it	cs
 8015986:	4632      	movcs	r2, r6
 8015988:	f7fe f8b3 	bl	8013af2 <memcpy>
 801598c:	4621      	mov	r1, r4
 801598e:	4640      	mov	r0, r8
 8015990:	f7fe ff0a 	bl	80147a8 <_free_r>
 8015994:	463c      	mov	r4, r7
 8015996:	e7e0      	b.n	801595a <_realloc_r+0x1e>

08015998 <__ascii_wctomb>:
 8015998:	4603      	mov	r3, r0
 801599a:	4608      	mov	r0, r1
 801599c:	b141      	cbz	r1, 80159b0 <__ascii_wctomb+0x18>
 801599e:	2aff      	cmp	r2, #255	@ 0xff
 80159a0:	d904      	bls.n	80159ac <__ascii_wctomb+0x14>
 80159a2:	228a      	movs	r2, #138	@ 0x8a
 80159a4:	601a      	str	r2, [r3, #0]
 80159a6:	f04f 30ff 	mov.w	r0, #4294967295
 80159aa:	4770      	bx	lr
 80159ac:	700a      	strb	r2, [r1, #0]
 80159ae:	2001      	movs	r0, #1
 80159b0:	4770      	bx	lr
	...

080159b4 <fiprintf>:
 80159b4:	b40e      	push	{r1, r2, r3}
 80159b6:	b503      	push	{r0, r1, lr}
 80159b8:	4601      	mov	r1, r0
 80159ba:	ab03      	add	r3, sp, #12
 80159bc:	4805      	ldr	r0, [pc, #20]	@ (80159d4 <fiprintf+0x20>)
 80159be:	f853 2b04 	ldr.w	r2, [r3], #4
 80159c2:	6800      	ldr	r0, [r0, #0]
 80159c4:	9301      	str	r3, [sp, #4]
 80159c6:	f7ff fcf3 	bl	80153b0 <_vfiprintf_r>
 80159ca:	b002      	add	sp, #8
 80159cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80159d0:	b003      	add	sp, #12
 80159d2:	4770      	bx	lr
 80159d4:	20000034 	.word	0x20000034

080159d8 <__swhatbuf_r>:
 80159d8:	b570      	push	{r4, r5, r6, lr}
 80159da:	460c      	mov	r4, r1
 80159dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80159e0:	2900      	cmp	r1, #0
 80159e2:	b096      	sub	sp, #88	@ 0x58
 80159e4:	4615      	mov	r5, r2
 80159e6:	461e      	mov	r6, r3
 80159e8:	da0d      	bge.n	8015a06 <__swhatbuf_r+0x2e>
 80159ea:	89a3      	ldrh	r3, [r4, #12]
 80159ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80159f0:	f04f 0100 	mov.w	r1, #0
 80159f4:	bf14      	ite	ne
 80159f6:	2340      	movne	r3, #64	@ 0x40
 80159f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80159fc:	2000      	movs	r0, #0
 80159fe:	6031      	str	r1, [r6, #0]
 8015a00:	602b      	str	r3, [r5, #0]
 8015a02:	b016      	add	sp, #88	@ 0x58
 8015a04:	bd70      	pop	{r4, r5, r6, pc}
 8015a06:	466a      	mov	r2, sp
 8015a08:	f000 f848 	bl	8015a9c <_fstat_r>
 8015a0c:	2800      	cmp	r0, #0
 8015a0e:	dbec      	blt.n	80159ea <__swhatbuf_r+0x12>
 8015a10:	9901      	ldr	r1, [sp, #4]
 8015a12:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015a16:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015a1a:	4259      	negs	r1, r3
 8015a1c:	4159      	adcs	r1, r3
 8015a1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015a22:	e7eb      	b.n	80159fc <__swhatbuf_r+0x24>

08015a24 <__smakebuf_r>:
 8015a24:	898b      	ldrh	r3, [r1, #12]
 8015a26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015a28:	079d      	lsls	r5, r3, #30
 8015a2a:	4606      	mov	r6, r0
 8015a2c:	460c      	mov	r4, r1
 8015a2e:	d507      	bpl.n	8015a40 <__smakebuf_r+0x1c>
 8015a30:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015a34:	6023      	str	r3, [r4, #0]
 8015a36:	6123      	str	r3, [r4, #16]
 8015a38:	2301      	movs	r3, #1
 8015a3a:	6163      	str	r3, [r4, #20]
 8015a3c:	b003      	add	sp, #12
 8015a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a40:	ab01      	add	r3, sp, #4
 8015a42:	466a      	mov	r2, sp
 8015a44:	f7ff ffc8 	bl	80159d8 <__swhatbuf_r>
 8015a48:	9f00      	ldr	r7, [sp, #0]
 8015a4a:	4605      	mov	r5, r0
 8015a4c:	4639      	mov	r1, r7
 8015a4e:	4630      	mov	r0, r6
 8015a50:	f7fe ff1e 	bl	8014890 <_malloc_r>
 8015a54:	b948      	cbnz	r0, 8015a6a <__smakebuf_r+0x46>
 8015a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015a5a:	059a      	lsls	r2, r3, #22
 8015a5c:	d4ee      	bmi.n	8015a3c <__smakebuf_r+0x18>
 8015a5e:	f023 0303 	bic.w	r3, r3, #3
 8015a62:	f043 0302 	orr.w	r3, r3, #2
 8015a66:	81a3      	strh	r3, [r4, #12]
 8015a68:	e7e2      	b.n	8015a30 <__smakebuf_r+0xc>
 8015a6a:	89a3      	ldrh	r3, [r4, #12]
 8015a6c:	6020      	str	r0, [r4, #0]
 8015a6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015a72:	81a3      	strh	r3, [r4, #12]
 8015a74:	9b01      	ldr	r3, [sp, #4]
 8015a76:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015a7a:	b15b      	cbz	r3, 8015a94 <__smakebuf_r+0x70>
 8015a7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015a80:	4630      	mov	r0, r6
 8015a82:	f000 f81d 	bl	8015ac0 <_isatty_r>
 8015a86:	b128      	cbz	r0, 8015a94 <__smakebuf_r+0x70>
 8015a88:	89a3      	ldrh	r3, [r4, #12]
 8015a8a:	f023 0303 	bic.w	r3, r3, #3
 8015a8e:	f043 0301 	orr.w	r3, r3, #1
 8015a92:	81a3      	strh	r3, [r4, #12]
 8015a94:	89a3      	ldrh	r3, [r4, #12]
 8015a96:	431d      	orrs	r5, r3
 8015a98:	81a5      	strh	r5, [r4, #12]
 8015a9a:	e7cf      	b.n	8015a3c <__smakebuf_r+0x18>

08015a9c <_fstat_r>:
 8015a9c:	b538      	push	{r3, r4, r5, lr}
 8015a9e:	4d07      	ldr	r5, [pc, #28]	@ (8015abc <_fstat_r+0x20>)
 8015aa0:	2300      	movs	r3, #0
 8015aa2:	4604      	mov	r4, r0
 8015aa4:	4608      	mov	r0, r1
 8015aa6:	4611      	mov	r1, r2
 8015aa8:	602b      	str	r3, [r5, #0]
 8015aaa:	f7ee fe37 	bl	800471c <_fstat>
 8015aae:	1c43      	adds	r3, r0, #1
 8015ab0:	d102      	bne.n	8015ab8 <_fstat_r+0x1c>
 8015ab2:	682b      	ldr	r3, [r5, #0]
 8015ab4:	b103      	cbz	r3, 8015ab8 <_fstat_r+0x1c>
 8015ab6:	6023      	str	r3, [r4, #0]
 8015ab8:	bd38      	pop	{r3, r4, r5, pc}
 8015aba:	bf00      	nop
 8015abc:	20006af8 	.word	0x20006af8

08015ac0 <_isatty_r>:
 8015ac0:	b538      	push	{r3, r4, r5, lr}
 8015ac2:	4d06      	ldr	r5, [pc, #24]	@ (8015adc <_isatty_r+0x1c>)
 8015ac4:	2300      	movs	r3, #0
 8015ac6:	4604      	mov	r4, r0
 8015ac8:	4608      	mov	r0, r1
 8015aca:	602b      	str	r3, [r5, #0]
 8015acc:	f7ee fe36 	bl	800473c <_isatty>
 8015ad0:	1c43      	adds	r3, r0, #1
 8015ad2:	d102      	bne.n	8015ada <_isatty_r+0x1a>
 8015ad4:	682b      	ldr	r3, [r5, #0]
 8015ad6:	b103      	cbz	r3, 8015ada <_isatty_r+0x1a>
 8015ad8:	6023      	str	r3, [r4, #0]
 8015ada:	bd38      	pop	{r3, r4, r5, pc}
 8015adc:	20006af8 	.word	0x20006af8

08015ae0 <abort>:
 8015ae0:	b508      	push	{r3, lr}
 8015ae2:	2006      	movs	r0, #6
 8015ae4:	f000 f834 	bl	8015b50 <raise>
 8015ae8:	2001      	movs	r0, #1
 8015aea:	f7ee fde3 	bl	80046b4 <_exit>

08015aee <_malloc_usable_size_r>:
 8015aee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015af2:	1f18      	subs	r0, r3, #4
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	bfbc      	itt	lt
 8015af8:	580b      	ldrlt	r3, [r1, r0]
 8015afa:	18c0      	addlt	r0, r0, r3
 8015afc:	4770      	bx	lr

08015afe <_raise_r>:
 8015afe:	291f      	cmp	r1, #31
 8015b00:	b538      	push	{r3, r4, r5, lr}
 8015b02:	4605      	mov	r5, r0
 8015b04:	460c      	mov	r4, r1
 8015b06:	d904      	bls.n	8015b12 <_raise_r+0x14>
 8015b08:	2316      	movs	r3, #22
 8015b0a:	6003      	str	r3, [r0, #0]
 8015b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8015b10:	bd38      	pop	{r3, r4, r5, pc}
 8015b12:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015b14:	b112      	cbz	r2, 8015b1c <_raise_r+0x1e>
 8015b16:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015b1a:	b94b      	cbnz	r3, 8015b30 <_raise_r+0x32>
 8015b1c:	4628      	mov	r0, r5
 8015b1e:	f000 f831 	bl	8015b84 <_getpid_r>
 8015b22:	4622      	mov	r2, r4
 8015b24:	4601      	mov	r1, r0
 8015b26:	4628      	mov	r0, r5
 8015b28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015b2c:	f000 b818 	b.w	8015b60 <_kill_r>
 8015b30:	2b01      	cmp	r3, #1
 8015b32:	d00a      	beq.n	8015b4a <_raise_r+0x4c>
 8015b34:	1c59      	adds	r1, r3, #1
 8015b36:	d103      	bne.n	8015b40 <_raise_r+0x42>
 8015b38:	2316      	movs	r3, #22
 8015b3a:	6003      	str	r3, [r0, #0]
 8015b3c:	2001      	movs	r0, #1
 8015b3e:	e7e7      	b.n	8015b10 <_raise_r+0x12>
 8015b40:	2100      	movs	r1, #0
 8015b42:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015b46:	4620      	mov	r0, r4
 8015b48:	4798      	blx	r3
 8015b4a:	2000      	movs	r0, #0
 8015b4c:	e7e0      	b.n	8015b10 <_raise_r+0x12>
	...

08015b50 <raise>:
 8015b50:	4b02      	ldr	r3, [pc, #8]	@ (8015b5c <raise+0xc>)
 8015b52:	4601      	mov	r1, r0
 8015b54:	6818      	ldr	r0, [r3, #0]
 8015b56:	f7ff bfd2 	b.w	8015afe <_raise_r>
 8015b5a:	bf00      	nop
 8015b5c:	20000034 	.word	0x20000034

08015b60 <_kill_r>:
 8015b60:	b538      	push	{r3, r4, r5, lr}
 8015b62:	4d07      	ldr	r5, [pc, #28]	@ (8015b80 <_kill_r+0x20>)
 8015b64:	2300      	movs	r3, #0
 8015b66:	4604      	mov	r4, r0
 8015b68:	4608      	mov	r0, r1
 8015b6a:	4611      	mov	r1, r2
 8015b6c:	602b      	str	r3, [r5, #0]
 8015b6e:	f7ee fd91 	bl	8004694 <_kill>
 8015b72:	1c43      	adds	r3, r0, #1
 8015b74:	d102      	bne.n	8015b7c <_kill_r+0x1c>
 8015b76:	682b      	ldr	r3, [r5, #0]
 8015b78:	b103      	cbz	r3, 8015b7c <_kill_r+0x1c>
 8015b7a:	6023      	str	r3, [r4, #0]
 8015b7c:	bd38      	pop	{r3, r4, r5, pc}
 8015b7e:	bf00      	nop
 8015b80:	20006af8 	.word	0x20006af8

08015b84 <_getpid_r>:
 8015b84:	f7ee bd7e 	b.w	8004684 <_getpid>

08015b88 <asinf>:
 8015b88:	b508      	push	{r3, lr}
 8015b8a:	ed2d 8b02 	vpush	{d8}
 8015b8e:	eeb0 8a40 	vmov.f32	s16, s0
 8015b92:	f000 fb41 	bl	8016218 <__ieee754_asinf>
 8015b96:	eeb4 8a48 	vcmp.f32	s16, s16
 8015b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b9e:	eef0 8a40 	vmov.f32	s17, s0
 8015ba2:	d615      	bvs.n	8015bd0 <asinf+0x48>
 8015ba4:	eeb0 0a48 	vmov.f32	s0, s16
 8015ba8:	f000 f932 	bl	8015e10 <fabsf>
 8015bac:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8015bb0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bb8:	dd0a      	ble.n	8015bd0 <asinf+0x48>
 8015bba:	f7fd ff6d 	bl	8013a98 <__errno>
 8015bbe:	ecbd 8b02 	vpop	{d8}
 8015bc2:	2321      	movs	r3, #33	@ 0x21
 8015bc4:	6003      	str	r3, [r0, #0]
 8015bc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015bca:	4804      	ldr	r0, [pc, #16]	@ (8015bdc <asinf+0x54>)
 8015bcc:	f000 b99a 	b.w	8015f04 <nanf>
 8015bd0:	eeb0 0a68 	vmov.f32	s0, s17
 8015bd4:	ecbd 8b02 	vpop	{d8}
 8015bd8:	bd08      	pop	{r3, pc}
 8015bda:	bf00      	nop
 8015bdc:	08017616 	.word	0x08017616

08015be0 <atanf>:
 8015be0:	b538      	push	{r3, r4, r5, lr}
 8015be2:	ee10 5a10 	vmov	r5, s0
 8015be6:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8015bea:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8015bee:	eef0 7a40 	vmov.f32	s15, s0
 8015bf2:	d310      	bcc.n	8015c16 <atanf+0x36>
 8015bf4:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8015bf8:	d904      	bls.n	8015c04 <atanf+0x24>
 8015bfa:	ee70 7a00 	vadd.f32	s15, s0, s0
 8015bfe:	eeb0 0a67 	vmov.f32	s0, s15
 8015c02:	bd38      	pop	{r3, r4, r5, pc}
 8015c04:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8015d3c <atanf+0x15c>
 8015c08:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8015d40 <atanf+0x160>
 8015c0c:	2d00      	cmp	r5, #0
 8015c0e:	bfc8      	it	gt
 8015c10:	eef0 7a47 	vmovgt.f32	s15, s14
 8015c14:	e7f3      	b.n	8015bfe <atanf+0x1e>
 8015c16:	4b4b      	ldr	r3, [pc, #300]	@ (8015d44 <atanf+0x164>)
 8015c18:	429c      	cmp	r4, r3
 8015c1a:	d810      	bhi.n	8015c3e <atanf+0x5e>
 8015c1c:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8015c20:	d20a      	bcs.n	8015c38 <atanf+0x58>
 8015c22:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8015d48 <atanf+0x168>
 8015c26:	ee30 7a07 	vadd.f32	s14, s0, s14
 8015c2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015c2e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8015c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c36:	dce2      	bgt.n	8015bfe <atanf+0x1e>
 8015c38:	f04f 33ff 	mov.w	r3, #4294967295
 8015c3c:	e013      	b.n	8015c66 <atanf+0x86>
 8015c3e:	f000 f8e7 	bl	8015e10 <fabsf>
 8015c42:	4b42      	ldr	r3, [pc, #264]	@ (8015d4c <atanf+0x16c>)
 8015c44:	429c      	cmp	r4, r3
 8015c46:	d84f      	bhi.n	8015ce8 <atanf+0x108>
 8015c48:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8015c4c:	429c      	cmp	r4, r3
 8015c4e:	d841      	bhi.n	8015cd4 <atanf+0xf4>
 8015c50:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8015c54:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8015c58:	eea0 7a27 	vfma.f32	s14, s0, s15
 8015c5c:	2300      	movs	r3, #0
 8015c5e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015c62:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015c66:	1c5a      	adds	r2, r3, #1
 8015c68:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8015c6c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8015d50 <atanf+0x170>
 8015c70:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8015d54 <atanf+0x174>
 8015c74:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8015d58 <atanf+0x178>
 8015c78:	ee66 6a06 	vmul.f32	s13, s12, s12
 8015c7c:	eee6 5a87 	vfma.f32	s11, s13, s14
 8015c80:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8015d5c <atanf+0x17c>
 8015c84:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8015c88:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8015d60 <atanf+0x180>
 8015c8c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8015c90:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8015d64 <atanf+0x184>
 8015c94:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8015c98:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8015d68 <atanf+0x188>
 8015c9c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8015ca0:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8015d6c <atanf+0x18c>
 8015ca4:	eea6 5a87 	vfma.f32	s10, s13, s14
 8015ca8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8015d70 <atanf+0x190>
 8015cac:	eea5 7a26 	vfma.f32	s14, s10, s13
 8015cb0:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8015d74 <atanf+0x194>
 8015cb4:	eea7 5a26 	vfma.f32	s10, s14, s13
 8015cb8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8015d78 <atanf+0x198>
 8015cbc:	eea5 7a26 	vfma.f32	s14, s10, s13
 8015cc0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015cc4:	eea5 7a86 	vfma.f32	s14, s11, s12
 8015cc8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8015ccc:	d121      	bne.n	8015d12 <atanf+0x132>
 8015cce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015cd2:	e794      	b.n	8015bfe <atanf+0x1e>
 8015cd4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8015cd8:	ee30 7a67 	vsub.f32	s14, s0, s15
 8015cdc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015ce0:	2301      	movs	r3, #1
 8015ce2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015ce6:	e7be      	b.n	8015c66 <atanf+0x86>
 8015ce8:	4b24      	ldr	r3, [pc, #144]	@ (8015d7c <atanf+0x19c>)
 8015cea:	429c      	cmp	r4, r3
 8015cec:	d80b      	bhi.n	8015d06 <atanf+0x126>
 8015cee:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8015cf2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015cf6:	eea0 7a27 	vfma.f32	s14, s0, s15
 8015cfa:	2302      	movs	r3, #2
 8015cfc:	ee70 6a67 	vsub.f32	s13, s0, s15
 8015d00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015d04:	e7af      	b.n	8015c66 <atanf+0x86>
 8015d06:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8015d0a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015d0e:	2303      	movs	r3, #3
 8015d10:	e7a9      	b.n	8015c66 <atanf+0x86>
 8015d12:	4a1b      	ldr	r2, [pc, #108]	@ (8015d80 <atanf+0x1a0>)
 8015d14:	491b      	ldr	r1, [pc, #108]	@ (8015d84 <atanf+0x1a4>)
 8015d16:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8015d1a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8015d1e:	edd3 6a00 	vldr	s13, [r3]
 8015d22:	ee37 7a66 	vsub.f32	s14, s14, s13
 8015d26:	2d00      	cmp	r5, #0
 8015d28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015d2c:	edd2 7a00 	vldr	s15, [r2]
 8015d30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015d34:	bfb8      	it	lt
 8015d36:	eef1 7a67 	vneglt.f32	s15, s15
 8015d3a:	e760      	b.n	8015bfe <atanf+0x1e>
 8015d3c:	bfc90fdb 	.word	0xbfc90fdb
 8015d40:	3fc90fdb 	.word	0x3fc90fdb
 8015d44:	3edfffff 	.word	0x3edfffff
 8015d48:	7149f2ca 	.word	0x7149f2ca
 8015d4c:	3f97ffff 	.word	0x3f97ffff
 8015d50:	3c8569d7 	.word	0x3c8569d7
 8015d54:	3d4bda59 	.word	0x3d4bda59
 8015d58:	bd6ef16b 	.word	0xbd6ef16b
 8015d5c:	3d886b35 	.word	0x3d886b35
 8015d60:	3dba2e6e 	.word	0x3dba2e6e
 8015d64:	3e124925 	.word	0x3e124925
 8015d68:	3eaaaaab 	.word	0x3eaaaaab
 8015d6c:	bd15a221 	.word	0xbd15a221
 8015d70:	bd9d8795 	.word	0xbd9d8795
 8015d74:	bde38e38 	.word	0xbde38e38
 8015d78:	be4ccccd 	.word	0xbe4ccccd
 8015d7c:	401bffff 	.word	0x401bffff
 8015d80:	08017728 	.word	0x08017728
 8015d84:	08017718 	.word	0x08017718

08015d88 <cosf>:
 8015d88:	ee10 3a10 	vmov	r3, s0
 8015d8c:	b507      	push	{r0, r1, r2, lr}
 8015d8e:	4a1e      	ldr	r2, [pc, #120]	@ (8015e08 <cosf+0x80>)
 8015d90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015d94:	4293      	cmp	r3, r2
 8015d96:	d806      	bhi.n	8015da6 <cosf+0x1e>
 8015d98:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8015e0c <cosf+0x84>
 8015d9c:	b003      	add	sp, #12
 8015d9e:	f85d eb04 	ldr.w	lr, [sp], #4
 8015da2:	f000 b8b9 	b.w	8015f18 <__kernel_cosf>
 8015da6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8015daa:	d304      	bcc.n	8015db6 <cosf+0x2e>
 8015dac:	ee30 0a40 	vsub.f32	s0, s0, s0
 8015db0:	b003      	add	sp, #12
 8015db2:	f85d fb04 	ldr.w	pc, [sp], #4
 8015db6:	4668      	mov	r0, sp
 8015db8:	f000 fb14 	bl	80163e4 <__ieee754_rem_pio2f>
 8015dbc:	f000 0003 	and.w	r0, r0, #3
 8015dc0:	2801      	cmp	r0, #1
 8015dc2:	d009      	beq.n	8015dd8 <cosf+0x50>
 8015dc4:	2802      	cmp	r0, #2
 8015dc6:	d010      	beq.n	8015dea <cosf+0x62>
 8015dc8:	b9b0      	cbnz	r0, 8015df8 <cosf+0x70>
 8015dca:	eddd 0a01 	vldr	s1, [sp, #4]
 8015dce:	ed9d 0a00 	vldr	s0, [sp]
 8015dd2:	f000 f8a1 	bl	8015f18 <__kernel_cosf>
 8015dd6:	e7eb      	b.n	8015db0 <cosf+0x28>
 8015dd8:	eddd 0a01 	vldr	s1, [sp, #4]
 8015ddc:	ed9d 0a00 	vldr	s0, [sp]
 8015de0:	f000 f8f2 	bl	8015fc8 <__kernel_sinf>
 8015de4:	eeb1 0a40 	vneg.f32	s0, s0
 8015de8:	e7e2      	b.n	8015db0 <cosf+0x28>
 8015dea:	eddd 0a01 	vldr	s1, [sp, #4]
 8015dee:	ed9d 0a00 	vldr	s0, [sp]
 8015df2:	f000 f891 	bl	8015f18 <__kernel_cosf>
 8015df6:	e7f5      	b.n	8015de4 <cosf+0x5c>
 8015df8:	eddd 0a01 	vldr	s1, [sp, #4]
 8015dfc:	ed9d 0a00 	vldr	s0, [sp]
 8015e00:	2001      	movs	r0, #1
 8015e02:	f000 f8e1 	bl	8015fc8 <__kernel_sinf>
 8015e06:	e7d3      	b.n	8015db0 <cosf+0x28>
 8015e08:	3f490fd8 	.word	0x3f490fd8
 8015e0c:	00000000 	.word	0x00000000

08015e10 <fabsf>:
 8015e10:	ee10 3a10 	vmov	r3, s0
 8015e14:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015e18:	ee00 3a10 	vmov	s0, r3
 8015e1c:	4770      	bx	lr
	...

08015e20 <sinf>:
 8015e20:	ee10 3a10 	vmov	r3, s0
 8015e24:	b507      	push	{r0, r1, r2, lr}
 8015e26:	4a1f      	ldr	r2, [pc, #124]	@ (8015ea4 <sinf+0x84>)
 8015e28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015e2c:	4293      	cmp	r3, r2
 8015e2e:	d807      	bhi.n	8015e40 <sinf+0x20>
 8015e30:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8015ea8 <sinf+0x88>
 8015e34:	2000      	movs	r0, #0
 8015e36:	b003      	add	sp, #12
 8015e38:	f85d eb04 	ldr.w	lr, [sp], #4
 8015e3c:	f000 b8c4 	b.w	8015fc8 <__kernel_sinf>
 8015e40:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8015e44:	d304      	bcc.n	8015e50 <sinf+0x30>
 8015e46:	ee30 0a40 	vsub.f32	s0, s0, s0
 8015e4a:	b003      	add	sp, #12
 8015e4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8015e50:	4668      	mov	r0, sp
 8015e52:	f000 fac7 	bl	80163e4 <__ieee754_rem_pio2f>
 8015e56:	f000 0003 	and.w	r0, r0, #3
 8015e5a:	2801      	cmp	r0, #1
 8015e5c:	d00a      	beq.n	8015e74 <sinf+0x54>
 8015e5e:	2802      	cmp	r0, #2
 8015e60:	d00f      	beq.n	8015e82 <sinf+0x62>
 8015e62:	b9c0      	cbnz	r0, 8015e96 <sinf+0x76>
 8015e64:	eddd 0a01 	vldr	s1, [sp, #4]
 8015e68:	ed9d 0a00 	vldr	s0, [sp]
 8015e6c:	2001      	movs	r0, #1
 8015e6e:	f000 f8ab 	bl	8015fc8 <__kernel_sinf>
 8015e72:	e7ea      	b.n	8015e4a <sinf+0x2a>
 8015e74:	eddd 0a01 	vldr	s1, [sp, #4]
 8015e78:	ed9d 0a00 	vldr	s0, [sp]
 8015e7c:	f000 f84c 	bl	8015f18 <__kernel_cosf>
 8015e80:	e7e3      	b.n	8015e4a <sinf+0x2a>
 8015e82:	eddd 0a01 	vldr	s1, [sp, #4]
 8015e86:	ed9d 0a00 	vldr	s0, [sp]
 8015e8a:	2001      	movs	r0, #1
 8015e8c:	f000 f89c 	bl	8015fc8 <__kernel_sinf>
 8015e90:	eeb1 0a40 	vneg.f32	s0, s0
 8015e94:	e7d9      	b.n	8015e4a <sinf+0x2a>
 8015e96:	eddd 0a01 	vldr	s1, [sp, #4]
 8015e9a:	ed9d 0a00 	vldr	s0, [sp]
 8015e9e:	f000 f83b 	bl	8015f18 <__kernel_cosf>
 8015ea2:	e7f5      	b.n	8015e90 <sinf+0x70>
 8015ea4:	3f490fd8 	.word	0x3f490fd8
 8015ea8:	00000000 	.word	0x00000000

08015eac <tanf>:
 8015eac:	ee10 3a10 	vmov	r3, s0
 8015eb0:	b507      	push	{r0, r1, r2, lr}
 8015eb2:	4a12      	ldr	r2, [pc, #72]	@ (8015efc <tanf+0x50>)
 8015eb4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015eb8:	4293      	cmp	r3, r2
 8015eba:	d807      	bhi.n	8015ecc <tanf+0x20>
 8015ebc:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8015f00 <tanf+0x54>
 8015ec0:	2001      	movs	r0, #1
 8015ec2:	b003      	add	sp, #12
 8015ec4:	f85d eb04 	ldr.w	lr, [sp], #4
 8015ec8:	f000 b8c6 	b.w	8016058 <__kernel_tanf>
 8015ecc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8015ed0:	d304      	bcc.n	8015edc <tanf+0x30>
 8015ed2:	ee30 0a40 	vsub.f32	s0, s0, s0
 8015ed6:	b003      	add	sp, #12
 8015ed8:	f85d fb04 	ldr.w	pc, [sp], #4
 8015edc:	4668      	mov	r0, sp
 8015ede:	f000 fa81 	bl	80163e4 <__ieee754_rem_pio2f>
 8015ee2:	0040      	lsls	r0, r0, #1
 8015ee4:	f000 0002 	and.w	r0, r0, #2
 8015ee8:	eddd 0a01 	vldr	s1, [sp, #4]
 8015eec:	ed9d 0a00 	vldr	s0, [sp]
 8015ef0:	f1c0 0001 	rsb	r0, r0, #1
 8015ef4:	f000 f8b0 	bl	8016058 <__kernel_tanf>
 8015ef8:	e7ed      	b.n	8015ed6 <tanf+0x2a>
 8015efa:	bf00      	nop
 8015efc:	3f490fda 	.word	0x3f490fda
 8015f00:	00000000 	.word	0x00000000

08015f04 <nanf>:
 8015f04:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8015f0c <nanf+0x8>
 8015f08:	4770      	bx	lr
 8015f0a:	bf00      	nop
 8015f0c:	7fc00000 	.word	0x7fc00000

08015f10 <__ieee754_sqrtf>:
 8015f10:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8015f14:	4770      	bx	lr
	...

08015f18 <__kernel_cosf>:
 8015f18:	ee10 3a10 	vmov	r3, s0
 8015f1c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015f20:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8015f24:	eef0 6a40 	vmov.f32	s13, s0
 8015f28:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015f2c:	d204      	bcs.n	8015f38 <__kernel_cosf+0x20>
 8015f2e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8015f32:	ee17 2a90 	vmov	r2, s15
 8015f36:	b342      	cbz	r2, 8015f8a <__kernel_cosf+0x72>
 8015f38:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8015f3c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8015fa8 <__kernel_cosf+0x90>
 8015f40:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8015fac <__kernel_cosf+0x94>
 8015f44:	4a1a      	ldr	r2, [pc, #104]	@ (8015fb0 <__kernel_cosf+0x98>)
 8015f46:	eea7 6a27 	vfma.f32	s12, s14, s15
 8015f4a:	4293      	cmp	r3, r2
 8015f4c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8015fb4 <__kernel_cosf+0x9c>
 8015f50:	eee6 7a07 	vfma.f32	s15, s12, s14
 8015f54:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8015fb8 <__kernel_cosf+0xa0>
 8015f58:	eea7 6a87 	vfma.f32	s12, s15, s14
 8015f5c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8015fbc <__kernel_cosf+0xa4>
 8015f60:	eee6 7a07 	vfma.f32	s15, s12, s14
 8015f64:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8015fc0 <__kernel_cosf+0xa8>
 8015f68:	eea7 6a87 	vfma.f32	s12, s15, s14
 8015f6c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8015f70:	ee26 6a07 	vmul.f32	s12, s12, s14
 8015f74:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8015f78:	eee7 0a06 	vfma.f32	s1, s14, s12
 8015f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015f80:	d804      	bhi.n	8015f8c <__kernel_cosf+0x74>
 8015f82:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8015f86:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015f8a:	4770      	bx	lr
 8015f8c:	4a0d      	ldr	r2, [pc, #52]	@ (8015fc4 <__kernel_cosf+0xac>)
 8015f8e:	4293      	cmp	r3, r2
 8015f90:	bf9a      	itte	ls
 8015f92:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8015f96:	ee07 3a10 	vmovls	s14, r3
 8015f9a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8015f9e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8015fa2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015fa6:	e7ec      	b.n	8015f82 <__kernel_cosf+0x6a>
 8015fa8:	ad47d74e 	.word	0xad47d74e
 8015fac:	310f74f6 	.word	0x310f74f6
 8015fb0:	3e999999 	.word	0x3e999999
 8015fb4:	b493f27c 	.word	0xb493f27c
 8015fb8:	37d00d01 	.word	0x37d00d01
 8015fbc:	bab60b61 	.word	0xbab60b61
 8015fc0:	3d2aaaab 	.word	0x3d2aaaab
 8015fc4:	3f480000 	.word	0x3f480000

08015fc8 <__kernel_sinf>:
 8015fc8:	ee10 3a10 	vmov	r3, s0
 8015fcc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015fd0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8015fd4:	d204      	bcs.n	8015fe0 <__kernel_sinf+0x18>
 8015fd6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8015fda:	ee17 3a90 	vmov	r3, s15
 8015fde:	b35b      	cbz	r3, 8016038 <__kernel_sinf+0x70>
 8015fe0:	ee20 7a00 	vmul.f32	s14, s0, s0
 8015fe4:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801603c <__kernel_sinf+0x74>
 8015fe8:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8016040 <__kernel_sinf+0x78>
 8015fec:	eea7 6a27 	vfma.f32	s12, s14, s15
 8015ff0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8016044 <__kernel_sinf+0x7c>
 8015ff4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8015ff8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8016048 <__kernel_sinf+0x80>
 8015ffc:	eea7 6a87 	vfma.f32	s12, s15, s14
 8016000:	eddf 7a12 	vldr	s15, [pc, #72]	@ 801604c <__kernel_sinf+0x84>
 8016004:	ee60 6a07 	vmul.f32	s13, s0, s14
 8016008:	eee6 7a07 	vfma.f32	s15, s12, s14
 801600c:	b930      	cbnz	r0, 801601c <__kernel_sinf+0x54>
 801600e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8016050 <__kernel_sinf+0x88>
 8016012:	eea7 6a27 	vfma.f32	s12, s14, s15
 8016016:	eea6 0a26 	vfma.f32	s0, s12, s13
 801601a:	4770      	bx	lr
 801601c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8016020:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8016024:	eee0 7a86 	vfma.f32	s15, s1, s12
 8016028:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801602c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8016054 <__kernel_sinf+0x8c>
 8016030:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8016034:	ee30 0a60 	vsub.f32	s0, s0, s1
 8016038:	4770      	bx	lr
 801603a:	bf00      	nop
 801603c:	2f2ec9d3 	.word	0x2f2ec9d3
 8016040:	b2d72f34 	.word	0xb2d72f34
 8016044:	3638ef1b 	.word	0x3638ef1b
 8016048:	b9500d01 	.word	0xb9500d01
 801604c:	3c088889 	.word	0x3c088889
 8016050:	be2aaaab 	.word	0xbe2aaaab
 8016054:	3e2aaaab 	.word	0x3e2aaaab

08016058 <__kernel_tanf>:
 8016058:	b508      	push	{r3, lr}
 801605a:	ee10 3a10 	vmov	r3, s0
 801605e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8016062:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 8016066:	eef0 7a40 	vmov.f32	s15, s0
 801606a:	d217      	bcs.n	801609c <__kernel_tanf+0x44>
 801606c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8016070:	ee17 1a10 	vmov	r1, s14
 8016074:	bb41      	cbnz	r1, 80160c8 <__kernel_tanf+0x70>
 8016076:	1c43      	adds	r3, r0, #1
 8016078:	4313      	orrs	r3, r2
 801607a:	d108      	bne.n	801608e <__kernel_tanf+0x36>
 801607c:	f7ff fec8 	bl	8015e10 <fabsf>
 8016080:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016084:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016088:	eeb0 0a67 	vmov.f32	s0, s15
 801608c:	bd08      	pop	{r3, pc}
 801608e:	2801      	cmp	r0, #1
 8016090:	d0fa      	beq.n	8016088 <__kernel_tanf+0x30>
 8016092:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8016096:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801609a:	e7f5      	b.n	8016088 <__kernel_tanf+0x30>
 801609c:	494c      	ldr	r1, [pc, #304]	@ (80161d0 <__kernel_tanf+0x178>)
 801609e:	428a      	cmp	r2, r1
 80160a0:	d312      	bcc.n	80160c8 <__kernel_tanf+0x70>
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 80161d4 <__kernel_tanf+0x17c>
 80160a8:	bfb8      	it	lt
 80160aa:	eef1 7a40 	vneglt.f32	s15, s0
 80160ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80160b2:	eddf 7a49 	vldr	s15, [pc, #292]	@ 80161d8 <__kernel_tanf+0x180>
 80160b6:	bfb8      	it	lt
 80160b8:	eef1 0a60 	vneglt.f32	s1, s1
 80160bc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80160c0:	eddf 0a46 	vldr	s1, [pc, #280]	@ 80161dc <__kernel_tanf+0x184>
 80160c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80160c8:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80160cc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80161e0 <__kernel_tanf+0x188>
 80160d0:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 80161e4 <__kernel_tanf+0x18c>
 80160d4:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 80161e8 <__kernel_tanf+0x190>
 80160d8:	493d      	ldr	r1, [pc, #244]	@ (80161d0 <__kernel_tanf+0x178>)
 80160da:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80160de:	428a      	cmp	r2, r1
 80160e0:	eea7 6a25 	vfma.f32	s12, s14, s11
 80160e4:	eddf 5a41 	vldr	s11, [pc, #260]	@ 80161ec <__kernel_tanf+0x194>
 80160e8:	eee6 5a07 	vfma.f32	s11, s12, s14
 80160ec:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 80161f0 <__kernel_tanf+0x198>
 80160f0:	eea5 6a87 	vfma.f32	s12, s11, s14
 80160f4:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80161f4 <__kernel_tanf+0x19c>
 80160f8:	eee6 5a07 	vfma.f32	s11, s12, s14
 80160fc:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 80161f8 <__kernel_tanf+0x1a0>
 8016100:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016104:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80161fc <__kernel_tanf+0x1a4>
 8016108:	eee7 5a05 	vfma.f32	s11, s14, s10
 801610c:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8016200 <__kernel_tanf+0x1a8>
 8016110:	eea5 5a87 	vfma.f32	s10, s11, s14
 8016114:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8016204 <__kernel_tanf+0x1ac>
 8016118:	eee5 5a07 	vfma.f32	s11, s10, s14
 801611c:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8016208 <__kernel_tanf+0x1b0>
 8016120:	eea5 5a87 	vfma.f32	s10, s11, s14
 8016124:	eddf 5a39 	vldr	s11, [pc, #228]	@ 801620c <__kernel_tanf+0x1b4>
 8016128:	eee5 5a07 	vfma.f32	s11, s10, s14
 801612c:	eeb0 7a46 	vmov.f32	s14, s12
 8016130:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8016134:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8016138:	eeb0 6a60 	vmov.f32	s12, s1
 801613c:	eea7 6a05 	vfma.f32	s12, s14, s10
 8016140:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8016210 <__kernel_tanf+0x1b8>
 8016144:	eee6 0a26 	vfma.f32	s1, s12, s13
 8016148:	eee5 0a07 	vfma.f32	s1, s10, s14
 801614c:	ee37 6aa0 	vadd.f32	s12, s15, s1
 8016150:	d31d      	bcc.n	801618e <__kernel_tanf+0x136>
 8016152:	ee07 0a10 	vmov	s14, r0
 8016156:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801615a:	ee26 5a06 	vmul.f32	s10, s12, s12
 801615e:	ee36 6a07 	vadd.f32	s12, s12, s14
 8016162:	179b      	asrs	r3, r3, #30
 8016164:	eec5 5a06 	vdiv.f32	s11, s10, s12
 8016168:	f003 0302 	and.w	r3, r3, #2
 801616c:	f1c3 0301 	rsb	r3, r3, #1
 8016170:	ee06 3a90 	vmov	s13, r3
 8016174:	ee35 6ae0 	vsub.f32	s12, s11, s1
 8016178:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801617c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8016180:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8016184:	eea7 7ac6 	vfms.f32	s14, s15, s12
 8016188:	ee66 7a87 	vmul.f32	s15, s13, s14
 801618c:	e77c      	b.n	8016088 <__kernel_tanf+0x30>
 801618e:	2801      	cmp	r0, #1
 8016190:	d01b      	beq.n	80161ca <__kernel_tanf+0x172>
 8016192:	4b20      	ldr	r3, [pc, #128]	@ (8016214 <__kernel_tanf+0x1bc>)
 8016194:	ee16 2a10 	vmov	r2, s12
 8016198:	401a      	ands	r2, r3
 801619a:	ee05 2a90 	vmov	s11, r2
 801619e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80161a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80161a6:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80161aa:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 80161ae:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80161b2:	ee16 2a90 	vmov	r2, s13
 80161b6:	4013      	ands	r3, r2
 80161b8:	ee07 3a90 	vmov	s15, r3
 80161bc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80161c0:	eea0 7aa7 	vfma.f32	s14, s1, s15
 80161c4:	eee7 7a26 	vfma.f32	s15, s14, s13
 80161c8:	e75e      	b.n	8016088 <__kernel_tanf+0x30>
 80161ca:	eef0 7a46 	vmov.f32	s15, s12
 80161ce:	e75b      	b.n	8016088 <__kernel_tanf+0x30>
 80161d0:	3f2ca140 	.word	0x3f2ca140
 80161d4:	3f490fda 	.word	0x3f490fda
 80161d8:	33222168 	.word	0x33222168
 80161dc:	00000000 	.word	0x00000000
 80161e0:	b79bae5f 	.word	0xb79bae5f
 80161e4:	38a3f445 	.word	0x38a3f445
 80161e8:	37d95384 	.word	0x37d95384
 80161ec:	3a1a26c8 	.word	0x3a1a26c8
 80161f0:	3b6b6916 	.word	0x3b6b6916
 80161f4:	3cb327a4 	.word	0x3cb327a4
 80161f8:	3e088889 	.word	0x3e088889
 80161fc:	3895c07a 	.word	0x3895c07a
 8016200:	398137b9 	.word	0x398137b9
 8016204:	3abede48 	.word	0x3abede48
 8016208:	3c11371f 	.word	0x3c11371f
 801620c:	3d5d0dd1 	.word	0x3d5d0dd1
 8016210:	3eaaaaab 	.word	0x3eaaaaab
 8016214:	fffff000 	.word	0xfffff000

08016218 <__ieee754_asinf>:
 8016218:	b538      	push	{r3, r4, r5, lr}
 801621a:	ee10 5a10 	vmov	r5, s0
 801621e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8016222:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 8016226:	ed2d 8b04 	vpush	{d8-d9}
 801622a:	d10c      	bne.n	8016246 <__ieee754_asinf+0x2e>
 801622c:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 80163a4 <__ieee754_asinf+0x18c>
 8016230:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 80163a8 <__ieee754_asinf+0x190>
 8016234:	ee60 7a27 	vmul.f32	s15, s0, s15
 8016238:	eee0 7a07 	vfma.f32	s15, s0, s14
 801623c:	eeb0 0a67 	vmov.f32	s0, s15
 8016240:	ecbd 8b04 	vpop	{d8-d9}
 8016244:	bd38      	pop	{r3, r4, r5, pc}
 8016246:	d904      	bls.n	8016252 <__ieee754_asinf+0x3a>
 8016248:	ee70 7a40 	vsub.f32	s15, s0, s0
 801624c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8016250:	e7f6      	b.n	8016240 <__ieee754_asinf+0x28>
 8016252:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8016256:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801625a:	d20b      	bcs.n	8016274 <__ieee754_asinf+0x5c>
 801625c:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8016260:	d252      	bcs.n	8016308 <__ieee754_asinf+0xf0>
 8016262:	eddf 7a52 	vldr	s15, [pc, #328]	@ 80163ac <__ieee754_asinf+0x194>
 8016266:	ee70 7a27 	vadd.f32	s15, s0, s15
 801626a:	eef4 7ae8 	vcmpe.f32	s15, s17
 801626e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016272:	dce5      	bgt.n	8016240 <__ieee754_asinf+0x28>
 8016274:	f7ff fdcc 	bl	8015e10 <fabsf>
 8016278:	ee38 8ac0 	vsub.f32	s16, s17, s0
 801627c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8016280:	ee28 8a27 	vmul.f32	s16, s16, s15
 8016284:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80163b0 <__ieee754_asinf+0x198>
 8016288:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 80163b4 <__ieee754_asinf+0x19c>
 801628c:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 80163b8 <__ieee754_asinf+0x1a0>
 8016290:	eea8 7a27 	vfma.f32	s14, s16, s15
 8016294:	eddf 7a49 	vldr	s15, [pc, #292]	@ 80163bc <__ieee754_asinf+0x1a4>
 8016298:	eee7 7a08 	vfma.f32	s15, s14, s16
 801629c:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80163c0 <__ieee754_asinf+0x1a8>
 80162a0:	eea7 7a88 	vfma.f32	s14, s15, s16
 80162a4:	eddf 7a47 	vldr	s15, [pc, #284]	@ 80163c4 <__ieee754_asinf+0x1ac>
 80162a8:	eee7 7a08 	vfma.f32	s15, s14, s16
 80162ac:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80163c8 <__ieee754_asinf+0x1b0>
 80162b0:	eea7 9a88 	vfma.f32	s18, s15, s16
 80162b4:	eddf 7a45 	vldr	s15, [pc, #276]	@ 80163cc <__ieee754_asinf+0x1b4>
 80162b8:	eee8 7a07 	vfma.f32	s15, s16, s14
 80162bc:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 80163d0 <__ieee754_asinf+0x1b8>
 80162c0:	eea7 7a88 	vfma.f32	s14, s15, s16
 80162c4:	eddf 7a43 	vldr	s15, [pc, #268]	@ 80163d4 <__ieee754_asinf+0x1bc>
 80162c8:	eee7 7a08 	vfma.f32	s15, s14, s16
 80162cc:	eeb0 0a48 	vmov.f32	s0, s16
 80162d0:	eee7 8a88 	vfma.f32	s17, s15, s16
 80162d4:	f7ff fe1c 	bl	8015f10 <__ieee754_sqrtf>
 80162d8:	4b3f      	ldr	r3, [pc, #252]	@ (80163d8 <__ieee754_asinf+0x1c0>)
 80162da:	ee29 9a08 	vmul.f32	s18, s18, s16
 80162de:	429c      	cmp	r4, r3
 80162e0:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80162e4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80162e8:	d93d      	bls.n	8016366 <__ieee754_asinf+0x14e>
 80162ea:	eea0 0a06 	vfma.f32	s0, s0, s12
 80162ee:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 80163dc <__ieee754_asinf+0x1c4>
 80162f2:	eee0 7a26 	vfma.f32	s15, s0, s13
 80162f6:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 80163a8 <__ieee754_asinf+0x190>
 80162fa:	ee30 0a67 	vsub.f32	s0, s0, s15
 80162fe:	2d00      	cmp	r5, #0
 8016300:	bfd8      	it	le
 8016302:	eeb1 0a40 	vnegle.f32	s0, s0
 8016306:	e79b      	b.n	8016240 <__ieee754_asinf+0x28>
 8016308:	ee60 7a00 	vmul.f32	s15, s0, s0
 801630c:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80163b4 <__ieee754_asinf+0x19c>
 8016310:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80163b0 <__ieee754_asinf+0x198>
 8016314:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 80163c8 <__ieee754_asinf+0x1b0>
 8016318:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801631c:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80163bc <__ieee754_asinf+0x1a4>
 8016320:	eee7 6a27 	vfma.f32	s13, s14, s15
 8016324:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80163c0 <__ieee754_asinf+0x1a8>
 8016328:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801632c:	eddf 6a25 	vldr	s13, [pc, #148]	@ 80163c4 <__ieee754_asinf+0x1ac>
 8016330:	eee7 6a27 	vfma.f32	s13, s14, s15
 8016334:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80163b8 <__ieee754_asinf+0x1a0>
 8016338:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801633c:	eddf 6a23 	vldr	s13, [pc, #140]	@ 80163cc <__ieee754_asinf+0x1b4>
 8016340:	eee7 6a86 	vfma.f32	s13, s15, s12
 8016344:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 80163d0 <__ieee754_asinf+0x1b8>
 8016348:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801634c:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80163d4 <__ieee754_asinf+0x1bc>
 8016350:	eee6 6a27 	vfma.f32	s13, s12, s15
 8016354:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016358:	eee6 8aa7 	vfma.f32	s17, s13, s15
 801635c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8016360:	eea0 0a27 	vfma.f32	s0, s0, s15
 8016364:	e76c      	b.n	8016240 <__ieee754_asinf+0x28>
 8016366:	ee10 3a10 	vmov	r3, s0
 801636a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 801636e:	f023 030f 	bic.w	r3, r3, #15
 8016372:	ee07 3a10 	vmov	s14, r3
 8016376:	eea7 8a47 	vfms.f32	s16, s14, s14
 801637a:	ee70 5a00 	vadd.f32	s11, s0, s0
 801637e:	ee30 0a07 	vadd.f32	s0, s0, s14
 8016382:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80163a4 <__ieee754_asinf+0x18c>
 8016386:	ee88 5a00 	vdiv.f32	s10, s16, s0
 801638a:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 80163e0 <__ieee754_asinf+0x1c8>
 801638e:	eee5 7a66 	vfms.f32	s15, s10, s13
 8016392:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8016396:	eeb0 6a40 	vmov.f32	s12, s0
 801639a:	eea7 6a66 	vfms.f32	s12, s14, s13
 801639e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80163a2:	e7aa      	b.n	80162fa <__ieee754_asinf+0xe2>
 80163a4:	b33bbd2e 	.word	0xb33bbd2e
 80163a8:	3fc90fdb 	.word	0x3fc90fdb
 80163ac:	7149f2ca 	.word	0x7149f2ca
 80163b0:	3a4f7f04 	.word	0x3a4f7f04
 80163b4:	3811ef08 	.word	0x3811ef08
 80163b8:	3e2aaaab 	.word	0x3e2aaaab
 80163bc:	bd241146 	.word	0xbd241146
 80163c0:	3e4e0aa8 	.word	0x3e4e0aa8
 80163c4:	bea6b090 	.word	0xbea6b090
 80163c8:	3d9dc62e 	.word	0x3d9dc62e
 80163cc:	bf303361 	.word	0xbf303361
 80163d0:	4001572d 	.word	0x4001572d
 80163d4:	c019d139 	.word	0xc019d139
 80163d8:	3f799999 	.word	0x3f799999
 80163dc:	333bbd2e 	.word	0x333bbd2e
 80163e0:	3f490fdb 	.word	0x3f490fdb

080163e4 <__ieee754_rem_pio2f>:
 80163e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163e6:	ee10 6a10 	vmov	r6, s0
 80163ea:	4b88      	ldr	r3, [pc, #544]	@ (801660c <__ieee754_rem_pio2f+0x228>)
 80163ec:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80163f0:	429d      	cmp	r5, r3
 80163f2:	b087      	sub	sp, #28
 80163f4:	4604      	mov	r4, r0
 80163f6:	d805      	bhi.n	8016404 <__ieee754_rem_pio2f+0x20>
 80163f8:	2300      	movs	r3, #0
 80163fa:	ed80 0a00 	vstr	s0, [r0]
 80163fe:	6043      	str	r3, [r0, #4]
 8016400:	2000      	movs	r0, #0
 8016402:	e022      	b.n	801644a <__ieee754_rem_pio2f+0x66>
 8016404:	4b82      	ldr	r3, [pc, #520]	@ (8016610 <__ieee754_rem_pio2f+0x22c>)
 8016406:	429d      	cmp	r5, r3
 8016408:	d83a      	bhi.n	8016480 <__ieee754_rem_pio2f+0x9c>
 801640a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801640e:	2e00      	cmp	r6, #0
 8016410:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8016614 <__ieee754_rem_pio2f+0x230>
 8016414:	4a80      	ldr	r2, [pc, #512]	@ (8016618 <__ieee754_rem_pio2f+0x234>)
 8016416:	f023 030f 	bic.w	r3, r3, #15
 801641a:	dd18      	ble.n	801644e <__ieee754_rem_pio2f+0x6a>
 801641c:	4293      	cmp	r3, r2
 801641e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8016422:	bf09      	itett	eq
 8016424:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 801661c <__ieee754_rem_pio2f+0x238>
 8016428:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8016620 <__ieee754_rem_pio2f+0x23c>
 801642c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8016624 <__ieee754_rem_pio2f+0x240>
 8016430:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8016434:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8016438:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801643c:	ed80 7a00 	vstr	s14, [r0]
 8016440:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016444:	edc0 7a01 	vstr	s15, [r0, #4]
 8016448:	2001      	movs	r0, #1
 801644a:	b007      	add	sp, #28
 801644c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801644e:	4293      	cmp	r3, r2
 8016450:	ee70 7a07 	vadd.f32	s15, s0, s14
 8016454:	bf09      	itett	eq
 8016456:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 801661c <__ieee754_rem_pio2f+0x238>
 801645a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8016620 <__ieee754_rem_pio2f+0x23c>
 801645e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8016624 <__ieee754_rem_pio2f+0x240>
 8016462:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8016466:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801646a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801646e:	ed80 7a00 	vstr	s14, [r0]
 8016472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016476:	edc0 7a01 	vstr	s15, [r0, #4]
 801647a:	f04f 30ff 	mov.w	r0, #4294967295
 801647e:	e7e4      	b.n	801644a <__ieee754_rem_pio2f+0x66>
 8016480:	4b69      	ldr	r3, [pc, #420]	@ (8016628 <__ieee754_rem_pio2f+0x244>)
 8016482:	429d      	cmp	r5, r3
 8016484:	d873      	bhi.n	801656e <__ieee754_rem_pio2f+0x18a>
 8016486:	f7ff fcc3 	bl	8015e10 <fabsf>
 801648a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 801662c <__ieee754_rem_pio2f+0x248>
 801648e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8016492:	eee0 7a07 	vfma.f32	s15, s0, s14
 8016496:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801649a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801649e:	ee17 0a90 	vmov	r0, s15
 80164a2:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8016614 <__ieee754_rem_pio2f+0x230>
 80164a6:	eea7 0a67 	vfms.f32	s0, s14, s15
 80164aa:	281f      	cmp	r0, #31
 80164ac:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8016620 <__ieee754_rem_pio2f+0x23c>
 80164b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80164b4:	eeb1 6a47 	vneg.f32	s12, s14
 80164b8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80164bc:	ee16 1a90 	vmov	r1, s13
 80164c0:	dc09      	bgt.n	80164d6 <__ieee754_rem_pio2f+0xf2>
 80164c2:	4a5b      	ldr	r2, [pc, #364]	@ (8016630 <__ieee754_rem_pio2f+0x24c>)
 80164c4:	1e47      	subs	r7, r0, #1
 80164c6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80164ca:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80164ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80164d2:	4293      	cmp	r3, r2
 80164d4:	d107      	bne.n	80164e6 <__ieee754_rem_pio2f+0x102>
 80164d6:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80164da:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80164de:	2a08      	cmp	r2, #8
 80164e0:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80164e4:	dc14      	bgt.n	8016510 <__ieee754_rem_pio2f+0x12c>
 80164e6:	6021      	str	r1, [r4, #0]
 80164e8:	ed94 7a00 	vldr	s14, [r4]
 80164ec:	ee30 0a47 	vsub.f32	s0, s0, s14
 80164f0:	2e00      	cmp	r6, #0
 80164f2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80164f6:	ed84 0a01 	vstr	s0, [r4, #4]
 80164fa:	daa6      	bge.n	801644a <__ieee754_rem_pio2f+0x66>
 80164fc:	eeb1 7a47 	vneg.f32	s14, s14
 8016500:	eeb1 0a40 	vneg.f32	s0, s0
 8016504:	ed84 7a00 	vstr	s14, [r4]
 8016508:	ed84 0a01 	vstr	s0, [r4, #4]
 801650c:	4240      	negs	r0, r0
 801650e:	e79c      	b.n	801644a <__ieee754_rem_pio2f+0x66>
 8016510:	eddf 5a42 	vldr	s11, [pc, #264]	@ 801661c <__ieee754_rem_pio2f+0x238>
 8016514:	eef0 6a40 	vmov.f32	s13, s0
 8016518:	eee6 6a25 	vfma.f32	s13, s12, s11
 801651c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8016520:	eee6 7a25 	vfma.f32	s15, s12, s11
 8016524:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8016624 <__ieee754_rem_pio2f+0x240>
 8016528:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801652c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8016530:	ee15 2a90 	vmov	r2, s11
 8016534:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8016538:	1a5b      	subs	r3, r3, r1
 801653a:	2b19      	cmp	r3, #25
 801653c:	dc04      	bgt.n	8016548 <__ieee754_rem_pio2f+0x164>
 801653e:	edc4 5a00 	vstr	s11, [r4]
 8016542:	eeb0 0a66 	vmov.f32	s0, s13
 8016546:	e7cf      	b.n	80164e8 <__ieee754_rem_pio2f+0x104>
 8016548:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8016634 <__ieee754_rem_pio2f+0x250>
 801654c:	eeb0 0a66 	vmov.f32	s0, s13
 8016550:	eea6 0a25 	vfma.f32	s0, s12, s11
 8016554:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8016558:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8016638 <__ieee754_rem_pio2f+0x254>
 801655c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8016560:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8016564:	ee30 7a67 	vsub.f32	s14, s0, s15
 8016568:	ed84 7a00 	vstr	s14, [r4]
 801656c:	e7bc      	b.n	80164e8 <__ieee754_rem_pio2f+0x104>
 801656e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8016572:	d306      	bcc.n	8016582 <__ieee754_rem_pio2f+0x19e>
 8016574:	ee70 7a40 	vsub.f32	s15, s0, s0
 8016578:	edc0 7a01 	vstr	s15, [r0, #4]
 801657c:	edc0 7a00 	vstr	s15, [r0]
 8016580:	e73e      	b.n	8016400 <__ieee754_rem_pio2f+0x1c>
 8016582:	15ea      	asrs	r2, r5, #23
 8016584:	3a86      	subs	r2, #134	@ 0x86
 8016586:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801658a:	ee07 3a90 	vmov	s15, r3
 801658e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8016592:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 801663c <__ieee754_rem_pio2f+0x258>
 8016596:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801659a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801659e:	ed8d 7a03 	vstr	s14, [sp, #12]
 80165a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80165a6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80165aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80165ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80165b2:	ed8d 7a04 	vstr	s14, [sp, #16]
 80165b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80165ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80165be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165c2:	edcd 7a05 	vstr	s15, [sp, #20]
 80165c6:	d11e      	bne.n	8016606 <__ieee754_rem_pio2f+0x222>
 80165c8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80165cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165d0:	bf0c      	ite	eq
 80165d2:	2301      	moveq	r3, #1
 80165d4:	2302      	movne	r3, #2
 80165d6:	491a      	ldr	r1, [pc, #104]	@ (8016640 <__ieee754_rem_pio2f+0x25c>)
 80165d8:	9101      	str	r1, [sp, #4]
 80165da:	2102      	movs	r1, #2
 80165dc:	9100      	str	r1, [sp, #0]
 80165de:	a803      	add	r0, sp, #12
 80165e0:	4621      	mov	r1, r4
 80165e2:	f000 f82f 	bl	8016644 <__kernel_rem_pio2f>
 80165e6:	2e00      	cmp	r6, #0
 80165e8:	f6bf af2f 	bge.w	801644a <__ieee754_rem_pio2f+0x66>
 80165ec:	edd4 7a00 	vldr	s15, [r4]
 80165f0:	eef1 7a67 	vneg.f32	s15, s15
 80165f4:	edc4 7a00 	vstr	s15, [r4]
 80165f8:	edd4 7a01 	vldr	s15, [r4, #4]
 80165fc:	eef1 7a67 	vneg.f32	s15, s15
 8016600:	edc4 7a01 	vstr	s15, [r4, #4]
 8016604:	e782      	b.n	801650c <__ieee754_rem_pio2f+0x128>
 8016606:	2303      	movs	r3, #3
 8016608:	e7e5      	b.n	80165d6 <__ieee754_rem_pio2f+0x1f2>
 801660a:	bf00      	nop
 801660c:	3f490fd8 	.word	0x3f490fd8
 8016610:	4016cbe3 	.word	0x4016cbe3
 8016614:	3fc90f80 	.word	0x3fc90f80
 8016618:	3fc90fd0 	.word	0x3fc90fd0
 801661c:	37354400 	.word	0x37354400
 8016620:	37354443 	.word	0x37354443
 8016624:	2e85a308 	.word	0x2e85a308
 8016628:	43490f80 	.word	0x43490f80
 801662c:	3f22f984 	.word	0x3f22f984
 8016630:	08017738 	.word	0x08017738
 8016634:	2e85a300 	.word	0x2e85a300
 8016638:	248d3132 	.word	0x248d3132
 801663c:	43800000 	.word	0x43800000
 8016640:	080177b8 	.word	0x080177b8

08016644 <__kernel_rem_pio2f>:
 8016644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016648:	ed2d 8b04 	vpush	{d8-d9}
 801664c:	b0d9      	sub	sp, #356	@ 0x164
 801664e:	4690      	mov	r8, r2
 8016650:	9001      	str	r0, [sp, #4]
 8016652:	4ab9      	ldr	r2, [pc, #740]	@ (8016938 <__kernel_rem_pio2f+0x2f4>)
 8016654:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8016656:	f118 0f04 	cmn.w	r8, #4
 801665a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801665e:	460f      	mov	r7, r1
 8016660:	f103 3bff 	add.w	fp, r3, #4294967295
 8016664:	db27      	blt.n	80166b6 <__kernel_rem_pio2f+0x72>
 8016666:	f1b8 0203 	subs.w	r2, r8, #3
 801666a:	bf48      	it	mi
 801666c:	f108 0204 	addmi.w	r2, r8, #4
 8016670:	10d2      	asrs	r2, r2, #3
 8016672:	1c55      	adds	r5, r2, #1
 8016674:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8016676:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8016948 <__kernel_rem_pio2f+0x304>
 801667a:	00e8      	lsls	r0, r5, #3
 801667c:	eba2 060b 	sub.w	r6, r2, fp
 8016680:	9002      	str	r0, [sp, #8]
 8016682:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8016686:	eb0a 0c0b 	add.w	ip, sl, fp
 801668a:	ac1c      	add	r4, sp, #112	@ 0x70
 801668c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8016690:	2000      	movs	r0, #0
 8016692:	4560      	cmp	r0, ip
 8016694:	dd11      	ble.n	80166ba <__kernel_rem_pio2f+0x76>
 8016696:	a91c      	add	r1, sp, #112	@ 0x70
 8016698:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801669c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80166a0:	f04f 0c00 	mov.w	ip, #0
 80166a4:	45d4      	cmp	ip, sl
 80166a6:	dc27      	bgt.n	80166f8 <__kernel_rem_pio2f+0xb4>
 80166a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80166ac:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8016948 <__kernel_rem_pio2f+0x304>
 80166b0:	4606      	mov	r6, r0
 80166b2:	2400      	movs	r4, #0
 80166b4:	e016      	b.n	80166e4 <__kernel_rem_pio2f+0xa0>
 80166b6:	2200      	movs	r2, #0
 80166b8:	e7db      	b.n	8016672 <__kernel_rem_pio2f+0x2e>
 80166ba:	42c6      	cmn	r6, r0
 80166bc:	bf5d      	ittte	pl
 80166be:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80166c2:	ee07 1a90 	vmovpl	s15, r1
 80166c6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80166ca:	eef0 7a47 	vmovmi.f32	s15, s14
 80166ce:	ece4 7a01 	vstmia	r4!, {s15}
 80166d2:	3001      	adds	r0, #1
 80166d4:	e7dd      	b.n	8016692 <__kernel_rem_pio2f+0x4e>
 80166d6:	ecfe 6a01 	vldmia	lr!, {s13}
 80166da:	ed96 7a00 	vldr	s14, [r6]
 80166de:	eee6 7a87 	vfma.f32	s15, s13, s14
 80166e2:	3401      	adds	r4, #1
 80166e4:	455c      	cmp	r4, fp
 80166e6:	f1a6 0604 	sub.w	r6, r6, #4
 80166ea:	ddf4      	ble.n	80166d6 <__kernel_rem_pio2f+0x92>
 80166ec:	ece9 7a01 	vstmia	r9!, {s15}
 80166f0:	f10c 0c01 	add.w	ip, ip, #1
 80166f4:	3004      	adds	r0, #4
 80166f6:	e7d5      	b.n	80166a4 <__kernel_rem_pio2f+0x60>
 80166f8:	a908      	add	r1, sp, #32
 80166fa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80166fe:	9104      	str	r1, [sp, #16]
 8016700:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8016702:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8016944 <__kernel_rem_pio2f+0x300>
 8016706:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8016940 <__kernel_rem_pio2f+0x2fc>
 801670a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801670e:	9203      	str	r2, [sp, #12]
 8016710:	4654      	mov	r4, sl
 8016712:	00a2      	lsls	r2, r4, #2
 8016714:	9205      	str	r2, [sp, #20]
 8016716:	aa58      	add	r2, sp, #352	@ 0x160
 8016718:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801671c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8016720:	a944      	add	r1, sp, #272	@ 0x110
 8016722:	aa08      	add	r2, sp, #32
 8016724:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8016728:	4694      	mov	ip, r2
 801672a:	4626      	mov	r6, r4
 801672c:	2e00      	cmp	r6, #0
 801672e:	f1a0 0004 	sub.w	r0, r0, #4
 8016732:	dc4c      	bgt.n	80167ce <__kernel_rem_pio2f+0x18a>
 8016734:	4628      	mov	r0, r5
 8016736:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801673a:	f000 f9f5 	bl	8016b28 <scalbnf>
 801673e:	eeb0 8a40 	vmov.f32	s16, s0
 8016742:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8016746:	ee28 0a00 	vmul.f32	s0, s16, s0
 801674a:	f000 fa53 	bl	8016bf4 <floorf>
 801674e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8016752:	eea0 8a67 	vfms.f32	s16, s0, s15
 8016756:	2d00      	cmp	r5, #0
 8016758:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801675c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8016760:	ee17 9a90 	vmov	r9, s15
 8016764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016768:	ee38 8a67 	vsub.f32	s16, s16, s15
 801676c:	dd41      	ble.n	80167f2 <__kernel_rem_pio2f+0x1ae>
 801676e:	f104 3cff 	add.w	ip, r4, #4294967295
 8016772:	a908      	add	r1, sp, #32
 8016774:	f1c5 0e08 	rsb	lr, r5, #8
 8016778:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 801677c:	fa46 f00e 	asr.w	r0, r6, lr
 8016780:	4481      	add	r9, r0
 8016782:	fa00 f00e 	lsl.w	r0, r0, lr
 8016786:	1a36      	subs	r6, r6, r0
 8016788:	f1c5 0007 	rsb	r0, r5, #7
 801678c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8016790:	4106      	asrs	r6, r0
 8016792:	2e00      	cmp	r6, #0
 8016794:	dd3c      	ble.n	8016810 <__kernel_rem_pio2f+0x1cc>
 8016796:	f04f 0e00 	mov.w	lr, #0
 801679a:	f109 0901 	add.w	r9, r9, #1
 801679e:	4670      	mov	r0, lr
 80167a0:	4574      	cmp	r4, lr
 80167a2:	dc68      	bgt.n	8016876 <__kernel_rem_pio2f+0x232>
 80167a4:	2d00      	cmp	r5, #0
 80167a6:	dd03      	ble.n	80167b0 <__kernel_rem_pio2f+0x16c>
 80167a8:	2d01      	cmp	r5, #1
 80167aa:	d074      	beq.n	8016896 <__kernel_rem_pio2f+0x252>
 80167ac:	2d02      	cmp	r5, #2
 80167ae:	d07d      	beq.n	80168ac <__kernel_rem_pio2f+0x268>
 80167b0:	2e02      	cmp	r6, #2
 80167b2:	d12d      	bne.n	8016810 <__kernel_rem_pio2f+0x1cc>
 80167b4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80167b8:	ee30 8a48 	vsub.f32	s16, s0, s16
 80167bc:	b340      	cbz	r0, 8016810 <__kernel_rem_pio2f+0x1cc>
 80167be:	4628      	mov	r0, r5
 80167c0:	9306      	str	r3, [sp, #24]
 80167c2:	f000 f9b1 	bl	8016b28 <scalbnf>
 80167c6:	9b06      	ldr	r3, [sp, #24]
 80167c8:	ee38 8a40 	vsub.f32	s16, s16, s0
 80167cc:	e020      	b.n	8016810 <__kernel_rem_pio2f+0x1cc>
 80167ce:	ee60 7a28 	vmul.f32	s15, s0, s17
 80167d2:	3e01      	subs	r6, #1
 80167d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80167d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80167dc:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80167e0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80167e4:	ecac 0a01 	vstmia	ip!, {s0}
 80167e8:	ed90 0a00 	vldr	s0, [r0]
 80167ec:	ee37 0a80 	vadd.f32	s0, s15, s0
 80167f0:	e79c      	b.n	801672c <__kernel_rem_pio2f+0xe8>
 80167f2:	d105      	bne.n	8016800 <__kernel_rem_pio2f+0x1bc>
 80167f4:	1e60      	subs	r0, r4, #1
 80167f6:	a908      	add	r1, sp, #32
 80167f8:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 80167fc:	11f6      	asrs	r6, r6, #7
 80167fe:	e7c8      	b.n	8016792 <__kernel_rem_pio2f+0x14e>
 8016800:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8016804:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8016808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801680c:	da31      	bge.n	8016872 <__kernel_rem_pio2f+0x22e>
 801680e:	2600      	movs	r6, #0
 8016810:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8016814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016818:	f040 8098 	bne.w	801694c <__kernel_rem_pio2f+0x308>
 801681c:	1e60      	subs	r0, r4, #1
 801681e:	2200      	movs	r2, #0
 8016820:	4550      	cmp	r0, sl
 8016822:	da4b      	bge.n	80168bc <__kernel_rem_pio2f+0x278>
 8016824:	2a00      	cmp	r2, #0
 8016826:	d065      	beq.n	80168f4 <__kernel_rem_pio2f+0x2b0>
 8016828:	3c01      	subs	r4, #1
 801682a:	ab08      	add	r3, sp, #32
 801682c:	3d08      	subs	r5, #8
 801682e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8016832:	2b00      	cmp	r3, #0
 8016834:	d0f8      	beq.n	8016828 <__kernel_rem_pio2f+0x1e4>
 8016836:	4628      	mov	r0, r5
 8016838:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801683c:	f000 f974 	bl	8016b28 <scalbnf>
 8016840:	1c63      	adds	r3, r4, #1
 8016842:	aa44      	add	r2, sp, #272	@ 0x110
 8016844:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8016944 <__kernel_rem_pio2f+0x300>
 8016848:	0099      	lsls	r1, r3, #2
 801684a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801684e:	4623      	mov	r3, r4
 8016850:	2b00      	cmp	r3, #0
 8016852:	f280 80a9 	bge.w	80169a8 <__kernel_rem_pio2f+0x364>
 8016856:	4623      	mov	r3, r4
 8016858:	2b00      	cmp	r3, #0
 801685a:	f2c0 80c7 	blt.w	80169ec <__kernel_rem_pio2f+0x3a8>
 801685e:	aa44      	add	r2, sp, #272	@ 0x110
 8016860:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8016864:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801693c <__kernel_rem_pio2f+0x2f8>
 8016868:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8016948 <__kernel_rem_pio2f+0x304>
 801686c:	2000      	movs	r0, #0
 801686e:	1ae2      	subs	r2, r4, r3
 8016870:	e0b1      	b.n	80169d6 <__kernel_rem_pio2f+0x392>
 8016872:	2602      	movs	r6, #2
 8016874:	e78f      	b.n	8016796 <__kernel_rem_pio2f+0x152>
 8016876:	f852 1b04 	ldr.w	r1, [r2], #4
 801687a:	b948      	cbnz	r0, 8016890 <__kernel_rem_pio2f+0x24c>
 801687c:	b121      	cbz	r1, 8016888 <__kernel_rem_pio2f+0x244>
 801687e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8016882:	f842 1c04 	str.w	r1, [r2, #-4]
 8016886:	2101      	movs	r1, #1
 8016888:	f10e 0e01 	add.w	lr, lr, #1
 801688c:	4608      	mov	r0, r1
 801688e:	e787      	b.n	80167a0 <__kernel_rem_pio2f+0x15c>
 8016890:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8016894:	e7f5      	b.n	8016882 <__kernel_rem_pio2f+0x23e>
 8016896:	f104 3cff 	add.w	ip, r4, #4294967295
 801689a:	aa08      	add	r2, sp, #32
 801689c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80168a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80168a4:	a908      	add	r1, sp, #32
 80168a6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80168aa:	e781      	b.n	80167b0 <__kernel_rem_pio2f+0x16c>
 80168ac:	f104 3cff 	add.w	ip, r4, #4294967295
 80168b0:	aa08      	add	r2, sp, #32
 80168b2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80168b6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80168ba:	e7f3      	b.n	80168a4 <__kernel_rem_pio2f+0x260>
 80168bc:	a908      	add	r1, sp, #32
 80168be:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80168c2:	3801      	subs	r0, #1
 80168c4:	430a      	orrs	r2, r1
 80168c6:	e7ab      	b.n	8016820 <__kernel_rem_pio2f+0x1dc>
 80168c8:	3201      	adds	r2, #1
 80168ca:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80168ce:	2e00      	cmp	r6, #0
 80168d0:	d0fa      	beq.n	80168c8 <__kernel_rem_pio2f+0x284>
 80168d2:	9905      	ldr	r1, [sp, #20]
 80168d4:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80168d8:	eb0d 0001 	add.w	r0, sp, r1
 80168dc:	18e6      	adds	r6, r4, r3
 80168de:	a91c      	add	r1, sp, #112	@ 0x70
 80168e0:	f104 0c01 	add.w	ip, r4, #1
 80168e4:	384c      	subs	r0, #76	@ 0x4c
 80168e6:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80168ea:	4422      	add	r2, r4
 80168ec:	4562      	cmp	r2, ip
 80168ee:	da04      	bge.n	80168fa <__kernel_rem_pio2f+0x2b6>
 80168f0:	4614      	mov	r4, r2
 80168f2:	e70e      	b.n	8016712 <__kernel_rem_pio2f+0xce>
 80168f4:	9804      	ldr	r0, [sp, #16]
 80168f6:	2201      	movs	r2, #1
 80168f8:	e7e7      	b.n	80168ca <__kernel_rem_pio2f+0x286>
 80168fa:	9903      	ldr	r1, [sp, #12]
 80168fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8016900:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8016904:	9105      	str	r1, [sp, #20]
 8016906:	ee07 1a90 	vmov	s15, r1
 801690a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801690e:	2400      	movs	r4, #0
 8016910:	ece6 7a01 	vstmia	r6!, {s15}
 8016914:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8016948 <__kernel_rem_pio2f+0x304>
 8016918:	46b1      	mov	r9, r6
 801691a:	455c      	cmp	r4, fp
 801691c:	dd04      	ble.n	8016928 <__kernel_rem_pio2f+0x2e4>
 801691e:	ece0 7a01 	vstmia	r0!, {s15}
 8016922:	f10c 0c01 	add.w	ip, ip, #1
 8016926:	e7e1      	b.n	80168ec <__kernel_rem_pio2f+0x2a8>
 8016928:	ecfe 6a01 	vldmia	lr!, {s13}
 801692c:	ed39 7a01 	vldmdb	r9!, {s14}
 8016930:	3401      	adds	r4, #1
 8016932:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016936:	e7f0      	b.n	801691a <__kernel_rem_pio2f+0x2d6>
 8016938:	08017afc 	.word	0x08017afc
 801693c:	08017ad0 	.word	0x08017ad0
 8016940:	43800000 	.word	0x43800000
 8016944:	3b800000 	.word	0x3b800000
 8016948:	00000000 	.word	0x00000000
 801694c:	9b02      	ldr	r3, [sp, #8]
 801694e:	eeb0 0a48 	vmov.f32	s0, s16
 8016952:	eba3 0008 	sub.w	r0, r3, r8
 8016956:	f000 f8e7 	bl	8016b28 <scalbnf>
 801695a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8016940 <__kernel_rem_pio2f+0x2fc>
 801695e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8016962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016966:	db19      	blt.n	801699c <__kernel_rem_pio2f+0x358>
 8016968:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8016944 <__kernel_rem_pio2f+0x300>
 801696c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8016970:	aa08      	add	r2, sp, #32
 8016972:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016976:	3508      	adds	r5, #8
 8016978:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801697c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8016980:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016984:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016988:	ee10 3a10 	vmov	r3, s0
 801698c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8016990:	ee17 3a90 	vmov	r3, s15
 8016994:	3401      	adds	r4, #1
 8016996:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801699a:	e74c      	b.n	8016836 <__kernel_rem_pio2f+0x1f2>
 801699c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80169a0:	aa08      	add	r2, sp, #32
 80169a2:	ee10 3a10 	vmov	r3, s0
 80169a6:	e7f6      	b.n	8016996 <__kernel_rem_pio2f+0x352>
 80169a8:	a808      	add	r0, sp, #32
 80169aa:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80169ae:	9001      	str	r0, [sp, #4]
 80169b0:	ee07 0a90 	vmov	s15, r0
 80169b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80169b8:	3b01      	subs	r3, #1
 80169ba:	ee67 7a80 	vmul.f32	s15, s15, s0
 80169be:	ee20 0a07 	vmul.f32	s0, s0, s14
 80169c2:	ed62 7a01 	vstmdb	r2!, {s15}
 80169c6:	e743      	b.n	8016850 <__kernel_rem_pio2f+0x20c>
 80169c8:	ecfc 6a01 	vldmia	ip!, {s13}
 80169cc:	ecb5 7a01 	vldmia	r5!, {s14}
 80169d0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80169d4:	3001      	adds	r0, #1
 80169d6:	4550      	cmp	r0, sl
 80169d8:	dc01      	bgt.n	80169de <__kernel_rem_pio2f+0x39a>
 80169da:	4282      	cmp	r2, r0
 80169dc:	daf4      	bge.n	80169c8 <__kernel_rem_pio2f+0x384>
 80169de:	a858      	add	r0, sp, #352	@ 0x160
 80169e0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80169e4:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80169e8:	3b01      	subs	r3, #1
 80169ea:	e735      	b.n	8016858 <__kernel_rem_pio2f+0x214>
 80169ec:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80169ee:	2b02      	cmp	r3, #2
 80169f0:	dc09      	bgt.n	8016a06 <__kernel_rem_pio2f+0x3c2>
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	dc2b      	bgt.n	8016a4e <__kernel_rem_pio2f+0x40a>
 80169f6:	d044      	beq.n	8016a82 <__kernel_rem_pio2f+0x43e>
 80169f8:	f009 0007 	and.w	r0, r9, #7
 80169fc:	b059      	add	sp, #356	@ 0x164
 80169fe:	ecbd 8b04 	vpop	{d8-d9}
 8016a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a06:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8016a08:	2b03      	cmp	r3, #3
 8016a0a:	d1f5      	bne.n	80169f8 <__kernel_rem_pio2f+0x3b4>
 8016a0c:	aa30      	add	r2, sp, #192	@ 0xc0
 8016a0e:	1f0b      	subs	r3, r1, #4
 8016a10:	4413      	add	r3, r2
 8016a12:	461a      	mov	r2, r3
 8016a14:	4620      	mov	r0, r4
 8016a16:	2800      	cmp	r0, #0
 8016a18:	f1a2 0204 	sub.w	r2, r2, #4
 8016a1c:	dc52      	bgt.n	8016ac4 <__kernel_rem_pio2f+0x480>
 8016a1e:	4622      	mov	r2, r4
 8016a20:	2a01      	cmp	r2, #1
 8016a22:	f1a3 0304 	sub.w	r3, r3, #4
 8016a26:	dc5d      	bgt.n	8016ae4 <__kernel_rem_pio2f+0x4a0>
 8016a28:	ab30      	add	r3, sp, #192	@ 0xc0
 8016a2a:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8016948 <__kernel_rem_pio2f+0x304>
 8016a2e:	440b      	add	r3, r1
 8016a30:	2c01      	cmp	r4, #1
 8016a32:	dc67      	bgt.n	8016b04 <__kernel_rem_pio2f+0x4c0>
 8016a34:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8016a38:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8016a3c:	2e00      	cmp	r6, #0
 8016a3e:	d167      	bne.n	8016b10 <__kernel_rem_pio2f+0x4cc>
 8016a40:	edc7 6a00 	vstr	s13, [r7]
 8016a44:	ed87 7a01 	vstr	s14, [r7, #4]
 8016a48:	edc7 7a02 	vstr	s15, [r7, #8]
 8016a4c:	e7d4      	b.n	80169f8 <__kernel_rem_pio2f+0x3b4>
 8016a4e:	ab30      	add	r3, sp, #192	@ 0xc0
 8016a50:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8016948 <__kernel_rem_pio2f+0x304>
 8016a54:	440b      	add	r3, r1
 8016a56:	4622      	mov	r2, r4
 8016a58:	2a00      	cmp	r2, #0
 8016a5a:	da24      	bge.n	8016aa6 <__kernel_rem_pio2f+0x462>
 8016a5c:	b34e      	cbz	r6, 8016ab2 <__kernel_rem_pio2f+0x46e>
 8016a5e:	eef1 7a47 	vneg.f32	s15, s14
 8016a62:	edc7 7a00 	vstr	s15, [r7]
 8016a66:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8016a6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016a6e:	aa31      	add	r2, sp, #196	@ 0xc4
 8016a70:	2301      	movs	r3, #1
 8016a72:	429c      	cmp	r4, r3
 8016a74:	da20      	bge.n	8016ab8 <__kernel_rem_pio2f+0x474>
 8016a76:	b10e      	cbz	r6, 8016a7c <__kernel_rem_pio2f+0x438>
 8016a78:	eef1 7a67 	vneg.f32	s15, s15
 8016a7c:	edc7 7a01 	vstr	s15, [r7, #4]
 8016a80:	e7ba      	b.n	80169f8 <__kernel_rem_pio2f+0x3b4>
 8016a82:	ab30      	add	r3, sp, #192	@ 0xc0
 8016a84:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8016948 <__kernel_rem_pio2f+0x304>
 8016a88:	440b      	add	r3, r1
 8016a8a:	2c00      	cmp	r4, #0
 8016a8c:	da05      	bge.n	8016a9a <__kernel_rem_pio2f+0x456>
 8016a8e:	b10e      	cbz	r6, 8016a94 <__kernel_rem_pio2f+0x450>
 8016a90:	eef1 7a67 	vneg.f32	s15, s15
 8016a94:	edc7 7a00 	vstr	s15, [r7]
 8016a98:	e7ae      	b.n	80169f8 <__kernel_rem_pio2f+0x3b4>
 8016a9a:	ed33 7a01 	vldmdb	r3!, {s14}
 8016a9e:	3c01      	subs	r4, #1
 8016aa0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016aa4:	e7f1      	b.n	8016a8a <__kernel_rem_pio2f+0x446>
 8016aa6:	ed73 7a01 	vldmdb	r3!, {s15}
 8016aaa:	3a01      	subs	r2, #1
 8016aac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016ab0:	e7d2      	b.n	8016a58 <__kernel_rem_pio2f+0x414>
 8016ab2:	eef0 7a47 	vmov.f32	s15, s14
 8016ab6:	e7d4      	b.n	8016a62 <__kernel_rem_pio2f+0x41e>
 8016ab8:	ecb2 7a01 	vldmia	r2!, {s14}
 8016abc:	3301      	adds	r3, #1
 8016abe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016ac2:	e7d6      	b.n	8016a72 <__kernel_rem_pio2f+0x42e>
 8016ac4:	edd2 7a00 	vldr	s15, [r2]
 8016ac8:	edd2 6a01 	vldr	s13, [r2, #4]
 8016acc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8016ad0:	3801      	subs	r0, #1
 8016ad2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016ad6:	ed82 7a00 	vstr	s14, [r2]
 8016ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016ade:	edc2 7a01 	vstr	s15, [r2, #4]
 8016ae2:	e798      	b.n	8016a16 <__kernel_rem_pio2f+0x3d2>
 8016ae4:	edd3 7a00 	vldr	s15, [r3]
 8016ae8:	edd3 6a01 	vldr	s13, [r3, #4]
 8016aec:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8016af0:	3a01      	subs	r2, #1
 8016af2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016af6:	ed83 7a00 	vstr	s14, [r3]
 8016afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016afe:	edc3 7a01 	vstr	s15, [r3, #4]
 8016b02:	e78d      	b.n	8016a20 <__kernel_rem_pio2f+0x3dc>
 8016b04:	ed33 7a01 	vldmdb	r3!, {s14}
 8016b08:	3c01      	subs	r4, #1
 8016b0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016b0e:	e78f      	b.n	8016a30 <__kernel_rem_pio2f+0x3ec>
 8016b10:	eef1 6a66 	vneg.f32	s13, s13
 8016b14:	eeb1 7a47 	vneg.f32	s14, s14
 8016b18:	edc7 6a00 	vstr	s13, [r7]
 8016b1c:	ed87 7a01 	vstr	s14, [r7, #4]
 8016b20:	eef1 7a67 	vneg.f32	s15, s15
 8016b24:	e790      	b.n	8016a48 <__kernel_rem_pio2f+0x404>
 8016b26:	bf00      	nop

08016b28 <scalbnf>:
 8016b28:	ee10 3a10 	vmov	r3, s0
 8016b2c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8016b30:	d02b      	beq.n	8016b8a <scalbnf+0x62>
 8016b32:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8016b36:	d302      	bcc.n	8016b3e <scalbnf+0x16>
 8016b38:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016b3c:	4770      	bx	lr
 8016b3e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8016b42:	d123      	bne.n	8016b8c <scalbnf+0x64>
 8016b44:	4b24      	ldr	r3, [pc, #144]	@ (8016bd8 <scalbnf+0xb0>)
 8016b46:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8016bdc <scalbnf+0xb4>
 8016b4a:	4298      	cmp	r0, r3
 8016b4c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016b50:	db17      	blt.n	8016b82 <scalbnf+0x5a>
 8016b52:	ee10 3a10 	vmov	r3, s0
 8016b56:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8016b5a:	3a19      	subs	r2, #25
 8016b5c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8016b60:	4288      	cmp	r0, r1
 8016b62:	dd15      	ble.n	8016b90 <scalbnf+0x68>
 8016b64:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8016be0 <scalbnf+0xb8>
 8016b68:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8016be4 <scalbnf+0xbc>
 8016b6c:	ee10 3a10 	vmov	r3, s0
 8016b70:	eeb0 7a67 	vmov.f32	s14, s15
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	bfb8      	it	lt
 8016b78:	eef0 7a66 	vmovlt.f32	s15, s13
 8016b7c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8016b80:	4770      	bx	lr
 8016b82:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8016be8 <scalbnf+0xc0>
 8016b86:	ee27 0a80 	vmul.f32	s0, s15, s0
 8016b8a:	4770      	bx	lr
 8016b8c:	0dd2      	lsrs	r2, r2, #23
 8016b8e:	e7e5      	b.n	8016b5c <scalbnf+0x34>
 8016b90:	4410      	add	r0, r2
 8016b92:	28fe      	cmp	r0, #254	@ 0xfe
 8016b94:	dce6      	bgt.n	8016b64 <scalbnf+0x3c>
 8016b96:	2800      	cmp	r0, #0
 8016b98:	dd06      	ble.n	8016ba8 <scalbnf+0x80>
 8016b9a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8016b9e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8016ba2:	ee00 3a10 	vmov	s0, r3
 8016ba6:	4770      	bx	lr
 8016ba8:	f110 0f16 	cmn.w	r0, #22
 8016bac:	da09      	bge.n	8016bc2 <scalbnf+0x9a>
 8016bae:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8016be8 <scalbnf+0xc0>
 8016bb2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8016bec <scalbnf+0xc4>
 8016bb6:	ee10 3a10 	vmov	r3, s0
 8016bba:	eeb0 7a67 	vmov.f32	s14, s15
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	e7d9      	b.n	8016b76 <scalbnf+0x4e>
 8016bc2:	3019      	adds	r0, #25
 8016bc4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8016bc8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8016bcc:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8016bf0 <scalbnf+0xc8>
 8016bd0:	ee07 3a90 	vmov	s15, r3
 8016bd4:	e7d7      	b.n	8016b86 <scalbnf+0x5e>
 8016bd6:	bf00      	nop
 8016bd8:	ffff3cb0 	.word	0xffff3cb0
 8016bdc:	4c000000 	.word	0x4c000000
 8016be0:	7149f2ca 	.word	0x7149f2ca
 8016be4:	f149f2ca 	.word	0xf149f2ca
 8016be8:	0da24260 	.word	0x0da24260
 8016bec:	8da24260 	.word	0x8da24260
 8016bf0:	33000000 	.word	0x33000000

08016bf4 <floorf>:
 8016bf4:	ee10 3a10 	vmov	r3, s0
 8016bf8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8016bfc:	3a7f      	subs	r2, #127	@ 0x7f
 8016bfe:	2a16      	cmp	r2, #22
 8016c00:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8016c04:	dc2b      	bgt.n	8016c5e <floorf+0x6a>
 8016c06:	2a00      	cmp	r2, #0
 8016c08:	da12      	bge.n	8016c30 <floorf+0x3c>
 8016c0a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8016c70 <floorf+0x7c>
 8016c0e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016c12:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8016c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c1a:	dd06      	ble.n	8016c2a <floorf+0x36>
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	da24      	bge.n	8016c6a <floorf+0x76>
 8016c20:	2900      	cmp	r1, #0
 8016c22:	4b14      	ldr	r3, [pc, #80]	@ (8016c74 <floorf+0x80>)
 8016c24:	bf08      	it	eq
 8016c26:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8016c2a:	ee00 3a10 	vmov	s0, r3
 8016c2e:	4770      	bx	lr
 8016c30:	4911      	ldr	r1, [pc, #68]	@ (8016c78 <floorf+0x84>)
 8016c32:	4111      	asrs	r1, r2
 8016c34:	420b      	tst	r3, r1
 8016c36:	d0fa      	beq.n	8016c2e <floorf+0x3a>
 8016c38:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8016c70 <floorf+0x7c>
 8016c3c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016c40:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8016c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c48:	ddef      	ble.n	8016c2a <floorf+0x36>
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	bfbe      	ittt	lt
 8016c4e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8016c52:	fa40 f202 	asrlt.w	r2, r0, r2
 8016c56:	189b      	addlt	r3, r3, r2
 8016c58:	ea23 0301 	bic.w	r3, r3, r1
 8016c5c:	e7e5      	b.n	8016c2a <floorf+0x36>
 8016c5e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8016c62:	d3e4      	bcc.n	8016c2e <floorf+0x3a>
 8016c64:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016c68:	4770      	bx	lr
 8016c6a:	2300      	movs	r3, #0
 8016c6c:	e7dd      	b.n	8016c2a <floorf+0x36>
 8016c6e:	bf00      	nop
 8016c70:	7149f2ca 	.word	0x7149f2ca
 8016c74:	bf800000 	.word	0xbf800000
 8016c78:	007fffff 	.word	0x007fffff

08016c7c <_init>:
 8016c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c7e:	bf00      	nop
 8016c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016c82:	bc08      	pop	{r3}
 8016c84:	469e      	mov	lr, r3
 8016c86:	4770      	bx	lr

08016c88 <_fini>:
 8016c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c8a:	bf00      	nop
 8016c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016c8e:	bc08      	pop	{r3}
 8016c90:	469e      	mov	lr, r3
 8016c92:	4770      	bx	lr
